void sub_306D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_Unwind_Exception *exception_objecta,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  void *v43;

  _Unwind_Resume(a1);
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 140));
  if ((v3 & 1) == 0)
  {
    v4 = (*(void (**)(void))(*(void *)(v2 + 112) + 16))();
    v5 = v4;
    if (v4)
    {
      v6 = [v4 objectForKeyedSubscript:@"Kick Time Data"];
      if (v6) {
        [*(id *)(v2 + 88) setArray:v6];
      }
    }
  }
  v7 = g_signpostLog;
  v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v7))
  {
    *(_WORD *)v10 = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v8, OS_SIGNPOST_INTERVAL_END, v9, "ShaderProfiler-ProcessStreamedDataPayload", "usc sampling address data", v10, 2u);
  }
}

void sub_3073B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GRCCurrentFrameStream::AddGRCSampledData(id *this, NSDictionary *a2)
{
  v35 = a2;
  unsigned __int8 v3 = [(NSDictionary *)v35 objectForKeyedSubscript:@"RingBufferIndex"];
  if (!v3) {
    goto LABEL_46;
  }
  v34 = [(NSDictionary *)v35 objectForKeyedSubscript:@"ShaderProfilerData"];
  v4 = [(NSDictionary *)v35 objectForKeyedSubscript:@"Source"];
  v5 = [*this objectForKeyedSubscript:v3];

  if (!v5)
  {
    v6 = objc_opt_new();
    [*this setObject:v6 forKeyedSubscript:v3];
  }
  v7 = [*this objectForKeyedSubscript:v3];
  v8 = [v7 objectForKeyedSubscript:v4];

  if (!v8)
  {
    os_signpost_id_t v9 = objc_opt_new();
    v10 = [*this objectForKeyedSubscript:v3];
    [v10 setObject:v9 forKeyedSubscript:v4];
  }
  v11 = [*this objectForKeyedSubscript:v3];
  v12 = [v11 objectForKeyedSubscript:v4];
  unint64_t v13 = (unint64_t)v34;
  [v12 addObject:v34];

  id v14 = [v34 length];
  unsigned int v15 = [v3 unsignedIntValue];
  unsigned int v16 = v15;
  v17 = (uint64_t *)(this + 1);
  unint64_t v18 = v15;
  unint64_t v19 = (unint64_t)this[2];
  if (v19)
  {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      unint64_t v13 = v15;
      if (v19 <= v15) {
        unint64_t v13 = v15 % v19;
      }
    }
    else
    {
      unint64_t v13 = (v19 - 1) & v15;
    }
    v21 = *(void ***)(*v17 + 8 * v13);
    if (v21)
    {
      v22 = *v21;
      if (*v21)
      {
        do
        {
          unint64_t v23 = v22[1];
          if (v23 == v15)
          {
            if (*((_DWORD *)v22 + 4) == v15) {
              goto LABEL_45;
            }
          }
          else
          {
            if (v20.u32[0] > 1uLL)
            {
              if (v23 >= v19) {
                v23 %= v19;
              }
            }
            else
            {
              v23 &= v19 - 1;
            }
            if (v23 != v13) {
              break;
            }
          }
          v22 = (void *)*v22;
        }
        while (v22);
      }
    }
  }
  v22 = operator new(0x20uLL);
  void *v22 = 0;
  v22[1] = v18;
  *((_DWORD *)v22 + 4) = v16;
  v22[3] = 0;
  float v24 = (float)((unint64_t)this[4] + 1);
  float v25 = *((float *)this + 10);
  if (!v19 || (float)(v25 * (float)v19) < v24)
  {
    BOOL v26 = 1;
    if (v19 >= 3) {
      BOOL v26 = (v19 & (v19 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v19);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t v29 = v28;
    }
    else {
      size_t v29 = v27;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)(this + 1), v29);
    unint64_t v19 = (unint64_t)this[2];
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v19 <= v18) {
        unint64_t v13 = v18 % v19;
      }
      else {
        unint64_t v13 = v18;
      }
    }
    else
    {
      unint64_t v13 = (v19 - 1) & v18;
    }
  }
  uint64_t v30 = *v17;
  v31 = *(void **)(*v17 + 8 * v13);
  if (v31)
  {
    void *v22 = *v31;
  }
  else
  {
    void *v22 = this[3];
    this[3] = v22;
    *(void *)(v30 + 8 * v13) = this + 3;
    if (!*v22) {
      goto LABEL_44;
    }
    unint64_t v32 = *(void *)(*v22 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v32 >= v19) {
        v32 %= v19;
      }
    }
    else
    {
      v32 &= v19 - 1;
    }
    v31 = (void *)(*v17 + 8 * v32);
  }
  void *v31 = v22;
LABEL_44:
  this[4] = (char *)this[4] + 1;
LABEL_45:
  v22[3] += v14;

LABEL_46:
}

void sub_30776C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void std::make_unique[abi:nn180100]<GRCFrameTimeData,NSDictionary * {__strong}&>()
{
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_303(uint64_t a1)
{
  uint64_t v110 = *(void *)(a1 + 40);
  uint64_t v122 = *(void *)(v110 + 16);
  if (!*(void *)v122)
  {
    double v6 = 0.0;
    goto LABEL_151;
  }
  v111 = [*(id *)v122 objectForKeyedSubscript:@"TraceId to SampleIndex"];
  if (!v111) {
    goto LABEL_32;
  }
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, v2, v3, objc_opt_class(), 0);
  *(void *)&long long v131 = 0;
  v123 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v4 fromData:v111 error:&v131];
  id v119 = (id)v131;

  v5 = [*(id *)v122 objectForKeyedSubscript:@"Frame Encoder Times Data"];
  double v6 = 0.0;
  if (![v123 count]) {
    goto LABEL_29;
  }
  if ([v5 count]
    && ([v5 firstObject],
        v7 = objc_claimAutoreleasedReturnValue(),
        BOOL v8 = [v7 length] == 0,
        v7,
        !v8))
  {
    unint64_t v9 = 0;
    unint64_t v10 = -1;
    while (v9 < (unint64_t)[v5 count])
    {
      id v11 = [v5 objectAtIndexedSubscript:v9];
      id v12 = [v11 bytes];

      unint64_t v13 = [v5 objectAtIndexedSubscript:v9];
      unint64_t v14 = (unint64_t)[v13 length];

      *(void *)buf = 0;
      v143 = buf;
      uint64_t v144 = 0x4812000000;
      v145 = __Block_byref_object_copy__8879;
      v146 = __Block_byref_object_dispose__8880;
      v147 = &unk_4E231D;
      v149 = 0;
      uint64_t v150 = 0;
      v148 = 0;
      std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::reserve(&v148, v14 >> 3);
      unsigned int v15 = [v123 objectAtIndexedSubscript:v9];
      v141[0] = _NSConcreteStackBlock;
      v141[1] = 3221225472;
      v141[2] = ___ZN16GRCFrameTimeData26ProcessFrameTimeSampleDataERd_block_invoke;
      v141[3] = &unk_746AC8;
      v141[4] = buf;
      v141[5] = v12;
      [v15 enumerateKeysAndObjectsUsingBlock:v141];

      uint64_t v16 = *((void *)v143 + 6);
      v17 = (char *)*((void *)v143 + 7);
      unint64_t v18 = 126 - 2 * __clz((uint64_t)&v17[-v16] >> 5);
      if (v17 == (char *)v16) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v18;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(v16, v17, v19, 1);
      uint8x8_t v20 = (uint64_t *)*((void *)v143 + 6);
      v21 = (uint64_t *)*((void *)v143 + 7);
      if (v20 == v21)
      {
        unint64_t v24 = 0;
      }
      else
      {
        int v22 = 0;
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        do
        {
          if (!v22) {
            uint64_t v23 = *v20;
          }
          if (v20[2]) {
            --v22;
          }
          else {
            ++v22;
          }
          if (!v22) {
            unint64_t v24 = v24 - v23 + *v20;
          }
          v20 += 4;
        }
        while (v20 != v21);
      }
      if (v24 < v10) {
        unint64_t v10 = v24;
      }
      _Block_object_dispose(buf, 8);
      if (v148)
      {
        v149 = v148;
        operator delete(v148);
      }
      ++v9;
    }
    double v6 = (double)v10;
    char v25 = 1;
  }
  else
  {
LABEL_29:
    char v25 = 0;
  }

  if ((v25 & 1) == 0)
  {
LABEL_32:
    v112 = [*(id *)v122 objectForKeyedSubscript:@"Frame Time Data"];
    id v108 = [*(id *)v122 objectForKeyedSubscript:@"Encoder TraceId Data"];
    BOOL v26 = (unsigned int *)[v108 bytes];
    unsigned int v27 = [v108 length];
    unint64_t v28 = [*(id *)v122 objectForKeyedSubscript:@"Sample Marker"];
    unsigned int v29 = v27 >> 2;
    *(void *)(v122 + 8) = [v28 unsignedLongLongValue];

    memset(v129, 0, sizeof(v129));
    int v130 = 1050253722;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v129, vcvtps_u32_f32((float)(v27 >> 2) / 0.3));
    if (v27 >= 4)
    {
      if (v29 <= 1) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = v29;
      }
      do
      {
        unsigned int v31 = *v26++;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v129, v31, v31);
        --v30;
      }
      while (v30);
    }
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    id obj = v112;
    id v32 = [obj countByEnumeratingWithState:&v125 objects:v141 count:16];
    if (!v32)
    {
      double v6 = 1.79769313e308;
      goto LABEL_150;
    }
    uint64_t v115 = *(void *)v126;
    id v116 = v32;
    double v6 = 1.79769313e308;
    while (1)
    {
      for (i = 0; i != v116; i = (char *)i + 1)
      {
        if (*(void *)v126 != v115) {
          objc_enumerationMutation(obj);
        }
        id v33 = *(id *)(*((void *)&v125 + 1) + 8 * i);
        unint64_t v34 = (unint64_t)[v33 count];
        unint64_t v35 = v34;
        if (v34)
        {
          if (v34 >> 62) {
            abort();
          }
          v117 = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v34);
          bzero(v117, 4 * v35);
        }
        else
        {
          v117 = 0;
        }
        __p = 0;
        v136 = 0;
        unint64_t v137 = 0;
        std::vector<std::pair<unsigned int,unsigned int>>::reserve(&__p, (unint64_t)[v33 count]);
        long long v133 = 0u;
        long long v134 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        id v36 = v33;
        id v37 = [v36 countByEnumeratingWithState:&v131 objects:buf count:16];
        if (v37)
        {
          uint64_t v38 = *(void *)v132;
          do
          {
            for (j = 0; j != v37; j = (char *)j + 1)
            {
              if (*(void *)v132 != v38) {
                objc_enumerationMutation(v36);
              }
              id v40 = [*(id *)(*((void *)&v131 + 1) + 8 * (void)j) bytes];
              id v41 = v40;
              v42 = v136;
              if ((unint64_t)v136 >= v137)
              {
                uint64_t v44 = (v136 - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v44 + 1) >> 61) {
                  abort();
                }
                unint64_t v45 = (uint64_t)(v137 - (void)__p) >> 2;
                if (v45 <= v44 + 1) {
                  unint64_t v45 = v44 + 1;
                }
                if (v137 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v46 = v45;
                }
                if (v46) {
                  unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v46);
                }
                else {
                  uint64_t v47 = 0;
                }
                v48 = (char *)(v46 + 8 * v44);
                *(void *)v48 = v41;
                v43 = v48 + 8;
                v50 = (char *)__p;
                v49 = v136;
                if (v136 != __p)
                {
                  do
                  {
                    uint64_t v51 = *((void *)v49 - 1);
                    v49 -= 8;
                    *((void *)v48 - 1) = v51;
                    v48 -= 8;
                  }
                  while (v49 != v50);
                  v49 = (char *)__p;
                }
                __p = v48;
                v136 = v43;
                unint64_t v137 = v46 + 8 * v47;
                if (v49) {
                  operator delete(v49);
                }
              }
              else
              {
                *(void *)v136 = v40;
                v43 = v42 + 8;
              }
              v136 = v43;
            }
            id v37 = [v36 countByEnumeratingWithState:&v131 objects:buf count:16];
          }
          while (v37);
        }

        v52 = v136;
        if (v136 == __p)
        {
          unint64_t v121 = 0;
          goto LABEL_140;
        }
        unint64_t v53 = 0;
        v54 = 0;
        v55 = 0;
        v124 = 0;
        do
        {
          v56 = [v36 objectAtIndexedSubscript:v53];
          BOOL v57 = (unint64_t)[v56 length] > 0x3F;

          if (v57)
          {
            v58 = [v36 objectAtIndexedSubscript:v53];
            int NextMarker = FindNextMarker(v58, 0, *(void *)(v122 + 8));

            if (NextMarker != -1)
            {
              if (v55 >= v124)
              {
                uint64_t v60 = (v55 - v54) >> 3;
                unint64_t v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 61) {
                  abort();
                }
                if ((v124 - v54) >> 2 > v61) {
                  unint64_t v61 = (v124 - v54) >> 2;
                }
                if ((unint64_t)(v124 - v54) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v62 = v61;
                }
                if (v62 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                v63 = (char *)operator new(8 * v62);
                v64 = &v63[8 * v60];
                *(_DWORD *)v64 = v53;
                *((_DWORD *)v64 + 1) = 0;
                v65 = v64;
                while (v55 != v54)
                {
                  uint64_t v66 = *((void *)v55 - 1);
                  v55 -= 8;
                  *((void *)v65 - 1) = v66;
                  v65 -= 8;
                }
                v124 = &v63[8 * v62];
                v55 = v64 + 8;
                if (v54) {
                  operator delete(v54);
                }
                v54 = v65;
              }
              else
              {
                *(_DWORD *)v55 = v53;
                *((_DWORD *)v55 + 1) = 0;
                v55 += 8;
              }
              p_p = &__p;
              std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>((uint64_t)v54, (uint64_t)v55, (uint64_t **)&p_p, (v55 - v54) >> 3);
            }
          }
          ++v53;
          v52 = (char *)__p;
        }
        while (v53 < (v136 - (unsigned char *)__p) >> 3);
        if (v54 != v55)
        {
          uint64_t v120 = 0;
          unint64_t v121 = 0;
          int v67 = 0;
          while (1)
          {
            unint64_t v68 = *(void *)v54;
            p_p = &__p;
            if (v55 - v54 < 9) {
              goto LABEL_111;
            }
            uint64_t v69 = 0;
            uint64_t v70 = (v55 - v54) >> 3;
            unint64_t v71 = *(void *)v54;
            v72 = v54;
            do
            {
              v73 = v72;
              v72 += 8 * v69 + 8;
              uint64_t v74 = 2 * v69;
              uint64_t v69 = (2 * v69) | 1;
              uint64_t v75 = v74 + 2;
              if (v75 >= v70) {
                goto LABEL_107;
              }
              v76 = (void *)(*((void *)*p_p + *(unsigned int *)v72) + 8 * *((unsigned int *)v72 + 1));
              v77 = (void *)(*((void *)*p_p + *((unsigned int *)v72 + 2)) + 8 * *((unsigned int *)v72 + 3));
              unint64_t v78 = v76[1];
              unint64_t v79 = v77[1];
              BOOL v80 = v78 > v79;
              if (v78 == v79
                && (v81 = v76[4], v82 = v77[4], BOOL v80 = v81 > v82, v81 == v82)
                && (v83 = v76[5], v84 = v77[5], BOOL v80 = v83 > v84, v83 == v84))
              {
                unint64_t v85 = v76[3];
                uint64_t v86 = v77[3];
                if (v85 > v78 && v85 != v86)
                {
LABEL_106:
                  v72 += 8;
                  uint64_t v69 = v75;
                }
              }
              else if (v80)
              {
                goto LABEL_106;
              }
LABEL_107:
              *(void *)v73 = *(void *)v72;
            }
            while (v69 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
            v88 = v55 - 8;
            if (v72 == v55 - 8)
            {
              *(void *)v72 = v71;
            }
            else
            {
              *(void *)v72 = *(void *)v88;
              *(void *)v88 = v71;
              std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>((uint64_t)v54, (uint64_t)(v72 + 8), (uint64_t **)&p_p, (v72 + 8 - v54) >> 3);
            }
LABEL_111:
            uint64_t v89 = *((void *)__p + v68) + 8 * HIDWORD(v68);
            if (std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v129, *(_DWORD *)(v89 + 32)))
            {
              if (!v67) {
                uint64_t v120 = *(void *)(v89 + 8);
              }
              if (*(unsigned char *)(v89 + 24)) {
                --v67;
              }
              else {
                ++v67;
              }
              if (!v67) {
                unint64_t v121 = v121 - v120 + *(void *)(v89 + 8);
              }
            }
            v90 = [v36 objectAtIndexedSubscript:v68];
            int v91 = FindNextMarker(v90, HIDWORD(v68) + 8, *(void *)(v122 + 8));

            v92 = v55 - 8;
            if (v91 != -1)
            {
              if (v92 >= v124)
              {
                uint64_t v95 = (v92 - v54) >> 3;
                unint64_t v96 = v95 + 1;
                if ((unint64_t)(v95 + 1) >> 61) {
                  abort();
                }
                if ((v124 - v54) >> 2 > v96) {
                  unint64_t v96 = (v124 - v54) >> 2;
                }
                if ((unint64_t)(v124 - v54) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v97 = v96;
                }
                if (v97 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                v98 = (char *)operator new(8 * v97);
                v94 = &v98[8 * v95];
                *(_DWORD *)v94 = v68;
                *((_DWORD *)v94 + 1) = v91;
                uint64_t v93 = (uint64_t)v94;
                if (v92 != v54)
                {
                  uint64_t v93 = (uint64_t)v94;
                  do
                  {
                    uint64_t v99 = *((void *)v92 - 1);
                    v92 -= 8;
                    *(void *)(v93 - 8) = v99;
                    v93 -= 8;
                  }
                  while (v92 != v54);
                }
                v124 = &v98[8 * v97];
                operator delete(v54);
                v54 = (char *)v93;
              }
              else
              {
                *((_DWORD *)v55 - 2) = v68;
                *((_DWORD *)v55 - 1) = v91;
                uint64_t v93 = (uint64_t)v54;
                v94 = v55 - 8;
              }
              v92 = v94 + 8;
              p_p = &__p;
              std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>(v93, (uint64_t)(v94 + 8), (uint64_t **)&p_p, (uint64_t)&v94[-v93 + 8] >> 3);
            }
            v55 = v92;
            if (v54 == v92)
            {
LABEL_139:
              operator delete(v92);
              v52 = (char *)__p;
              goto LABEL_140;
            }
          }
        }
        unint64_t v121 = 0;
        if (v55)
        {
          v92 = v55;
          goto LABEL_139;
        }
LABEL_140:
        if (v52)
        {
          v136 = v52;
          operator delete(v52);
        }
        if (v117) {
          operator delete(v117);
        }

        if (v6 >= (double)v121 * 125.0 / 3.0) {
          double v6 = (double)v121 * 125.0 / 3.0;
        }
      }
      id v116 = [obj countByEnumeratingWithState:&v125 objects:v141 count:16];
      if (!v116)
      {
LABEL_150:

        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v129);
        break;
      }
    }
  }
LABEL_151:
  unsigned __int8 v100 = atomic_load((unsigned __int8 *)(v110 + 140));
  if ((v100 & 1) == 0)
  {
    uint64_t v101 = *(void *)(v110 + 112);
    v139[0] = @"GPU Time";
    v113 = +[NSNumber numberWithDouble:v6];
    v140[0] = v113;
    v139[1] = @"Frame Time Data";
    v140[1] = **(void **)(v110 + 16);
    v139[2] = @"Num Ring Buffers";
    v102 = [*(id *)(a1 + 32) objectForKeyedSubscript:];
    v140[2] = v102;
    v103 = +[NSDictionary dictionaryWithObjects:v140 forKeys:v139 count:3];
    id v104 = (id)(*(uint64_t (**)(uint64_t, void *))(v101 + 16))(v101, v103);
  }
  v105 = g_signpostLog;
  v106 = v105;
  os_signpost_id_t v107 = *(void *)(a1 + 48);
  if (v107 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v105))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v106, OS_SIGNPOST_INTERVAL_END, v107, "ShaderProfiler-ProcessStreamedDataPayload", "Frame Time Data", buf, 2u);
  }
}

void sub_3084AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  _Unwind_Resume(a1);
}

void std::make_unique[abi:nn180100]<GRCSplitBlitTimeData,NSDictionary * {__strong}&>()
{
}

void sub_3086E8()
{
  operator delete();
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_310(uint64_t a1)
{
  uint64_t v59 = *(void *)(a1 + 32);
  uint64_t v1 = *(id **)(v59 + 24);
  GRCSplitBlitTimeData::BlitFrameEncoderTimeData(v1, @"Blit TraceId to Sample Index", @"Blit Encoder Time Data");
  id v62 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = GRCSplitBlitTimeData::BlitFrameEncoderTimeData(v1, @"Blit Split TraceId to Sample Index", @"Blit Split Encoder Time Data");
  uint64_t v3 = (void *)v2;
  if (v62)
  {
    if (v2) {
      goto LABEL_6;
    }
  }
  else
  {
    v4 = [*v1 objectForKeyedSubscript:@"Blit Encoder Frame Data"];
    v5 = [*v1 objectForKeyedSubscript:@"Blit Encoder Info"];
    GRCSplitBlitTimeData::CalculateBlitEncoderTime((uint64_t)v1, v4, v5);
    id v62 = (id)objc_claimAutoreleasedReturnValue();

    if (v3) {
      goto LABEL_6;
    }
  }
  double v6 = [*v1 objectForKeyedSubscript:@"Blit Split Encoder Frame Data"];
  v7 = [*v1 objectForKeyedSubscript:@"Blit Split Encoder Info"];
  uint64_t v3 = GRCSplitBlitTimeData::CalculateBlitEncoderTime((uint64_t)v1, v6, v7);

LABEL_6:
  if ([v3 length])
  {
    unint64_t v68 = [*v1 objectForKeyedSubscript:@"Blit Encoder Indices"];
    int v67 = [*v1 objectForKeyedSubscript:@"Encoder Draw Call Count"];
    unint64_t v8 = (unint64_t)[v3 length];
    unint64_t v9 = (unint64_t)[v62 length];
    unint64_t v10 = v8 >> 5;
    if (v8 >= 0x20)
    {
      id v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v8 >> 5);
      memset(v11, 255, 4 * v10);
      v64 = &v11[4 * v10];
    }
    else
    {
      id v11 = 0;
      v64 = 0;
    }
    unint64_t v13 = v9 >> 5;
    unint64_t v57 = v8;
    unint64_t v58 = v9;
    unint64_t v61 = v8 >> 5;
    if (v9 >= 0x20)
    {
      unsigned int v15 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v9 >> 5);
      unint64_t v14 = v9 >> 5;
      bzero(v15, 8 * v13);
    }
    else
    {
      unint64_t v14 = v9 >> 5;
      unsigned int v15 = 0;
    }
    uint64_t v16 = (double *)[v3 bytes];
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    while (v17 < (unint64_t)objc_msgSend(v68, "count", v57))
    {
      uint64_t v19 = [v68 objectAtIndexedSubscript:v17];
      uint8x8_t v20 = [v67 objectAtIndexedSubscript:[v19 unsignedIntValue]];
      unsigned int v21 = [v20 unsignedIntValue];

      if (v21) {
        uint64_t v22 = v18;
      }
      else {
        uint64_t v22 = v18 + 1;
      }
      if (v21)
      {
        uint64_t v23 = v21;
        double v24 = *((double *)v15 + v17);
        char v25 = &v16[4 * v22 + 3];
        do
        {
          double v26 = *v25;
          v25 += 4;
          double v24 = v26 + v24;
          *((double *)v15 + v17) = v24;
          uint64_t v18 = v22 + 1;
          *(_DWORD *)&v11[4 * v22++] = v17;
          --v23;
        }
        while (v23);
      }
      else
      {
        uint64_t v18 = v22;
      }
      ++v17;
    }
    v63 = +[NSMutableArray arrayWithCapacity:v61];
    uint64_t v66 = +[NSMutableArray arrayWithCapacity:v14];
    unsigned int v27 = (char *)[v62 bytes];
    unint64_t v28 = v27;
    if (v58 >= 0x20)
    {
      if (v14 <= 1) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v14;
      }
      uint64_t v30 = (double *)(v27 + 24);
      do
      {
        unsigned int v31 = +[NSNumber numberWithDouble:*v30];
        [v66 addObject:v31];

        v30 += 4;
        --v29;
      }
      while (v29);
    }
    if (v64 != v11)
    {
      uint64_t v32 = 0;
      unsigned int v33 = 0;
      do
      {
        uint64_t v34 = *(unsigned int *)&v11[4 * v32];
        if (v34 != -1)
        {
          double v35 = *((double *)v15 + v34);
          if (v35 >= 2.22044605e-16)
          {
            uint64_t v36 = 0;
            double v37 = v16[4 * v32 + 3];
            double v38 = *(double *)&v28[32 * v34 + 24] * v37 / v35 / v37;
            if (v37 <= 2.22044605e-16) {
              double v38 = 1.0;
            }
            do
            {
              v16[v36] = v38 * v16[v36];
              ++v36;
            }
            while (v36 != 3);
            v39 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            [v63 addObject:v39];
          }
          else
          {
            [v63 addObject:&off_759E70];
          }
        }
        uint64_t v32 = ++v33;
      }
      while ((v64 - v11) >> 2 > (unint64_t)v33);
    }
    id v40 = &send_ptr;
    v65 = +[NSMutableArray arrayWithCapacity:v14];
    if (v58 >= 0x20)
    {
      uint64_t v41 = 0;
      if (v14 <= 1) {
        uint64_t v42 = 1;
      }
      else {
        uint64_t v42 = v14;
      }
      do
      {
        v43 = +[NSMutableArray arrayWithCapacity:3];
        for (uint64_t i = 0; i != 24; i += 8)
        {
          unint64_t v45 = +[NSNumber numberWithDouble:*(double *)&v28[i]];
          [v43 addObject:v45];
        }
        [v65 addObject:v43];

        ++v41;
        v28 += 32;
        id v40 = &send_ptr;
      }
      while (v41 != v42);
    }
    unint64_t v46 = +[NSMutableArray arrayWithCapacity:v61];
    if (v57 >= 0x20)
    {
      uint64_t v47 = 0;
      if (v61 <= 1) {
        uint64_t v48 = 1;
      }
      else {
        uint64_t v48 = v61;
      }
      do
      {
        v49 = [v40[204] arrayWithCapacity:3];
        for (uint64_t j = 0; j != 3; ++j)
        {
          uint64_t v51 = +[NSNumber numberWithDouble:v16[j]];
          [v49 addObject:v51];
        }
        [v46 addObject:v49];

        ++v47;
        v16 += 4;
        id v40 = &send_ptr;
      }
      while (v47 != v48);
    }
    v69[0] = @"Blit Command Nsec Times";
    v69[1] = @"Blit Encoder Indices";
    *(void *)buf = v63;
    unint64_t v71 = v68;
    v69[2] = @"Encoder Draw Call Count";
    v69[3] = @"Blit Encoder Nsec Times";
    v72 = v67;
    v73 = v66;
    v69[4] = @"Blit Encoder Kick Times Nsec";
    v69[5] = @"Blit Command Kick Times Nsec";
    uint64_t v74 = v65;
    uint64_t v75 = v46;
    id v12 = +[NSDictionary dictionaryWithObjects:buf forKeys:v69 count:6];

    if (v15) {
      operator delete(v15);
    }
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    id v12 = 0;
  }

  if (v12)
  {
    unsigned __int8 v52 = atomic_load((unsigned __int8 *)(v59 + 140));
    if ((v52 & 1) == 0) {
      id v53 = (id)(*(uint64_t (**)(void))(*(void *)(v59 + 112) + 16))();
    }
  }
  v54 = g_signpostLog;
  v55 = v54;
  os_signpost_id_t v56 = *(void *)(a1 + 40);
  if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v54))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v55, OS_SIGNPOST_INTERVAL_END, v56, "ShaderProfiler-ProcessStreamedDataPayload", "Blit Encoder Frame Data", buf, 2u);
  }
}

void sub_308E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_317()
{
}

void sub_30A4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,GRCDerivedCounterData *a25,void *__p,uint64_t a27)
{
  std::unique_ptr<GRCDerivedCounterData>::reset[abi:nn180100](&a25);
  _Unwind_Resume(a1);
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_328(uint64_t a1)
{
  id v2 = objc_unsafeClaimAutoreleasedReturnValue((id)(*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 40) + 112)
                                                                        + 16))());
  uint64_t v3 = g_signpostLog;
  v4 = v3;
  os_signpost_id_t v5 = *(void *)(a1 + 48);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v3))
  {
    *(_WORD *)double v6 = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v4, OS_SIGNPOST_INTERVAL_END, v5, "ShaderProfiler-ProcessStreamedDataPayload", "End Batch ID Streaming Data", v6, 2u);
  }
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_330(uint64_t a1)
{
  uint64_t v84 = *(void *)(a1 + 40);
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(v84 + 140));
  if (v1) {
    return;
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v87 = (char **)WeakRetained[1];
  if ([*(id *)v87[61] count])
  {
    unsigned int v2 = [*((id *)v87[61] + 38) length];
    uint64_t v3 = (unsigned __int8 *)[*((id *)v87[61] + 38) mutableBytes];
    v4 = [*(id *)v87[61] allKeys];
    unint64_t v5 = (unint64_t)[v4 count];
    unint64_t v6 = v5;
    v7 = &xmmword_4C8000;
    if (!v5)
    {
LABEL_42:

      id v40 = v87[61];
      *(_DWORD *)buf = -1;
      uint64_t v86 = (uint64_t)(v87 + 13);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)(v87 + 13), 0xFFFFFFFF, buf)+ 5) = -1;
      *(_OWORD *)buf = 0u;
      long long v98 = 0u;
      int v99 = 1050253722;
      float v41 = *((float *)v7 + 61);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)buf, vcvtps_u32_f32((float)*((unint64_t *)v40 + 24) / v41));
      if (v2 >= 0x18)
      {
        unsigned int v42 = 0;
        unint64_t v43 = v2 / 0x18uLL;
        do
        {
          if ((*(void *)v3 & *((void *)v3 + 1) & *((void *)v3 + 2)) != -1)
          {
            unsigned int v44 = *((_DWORD *)v3 + 1);
            if (v44 == -1)
            {
              unsigned int v42 = *(_DWORD *)v3 >> 8;
            }
            else
            {
              unsigned int v96 = *((_DWORD *)v3 + 1);
              unint64_t v45 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)v40 + 21, v42);
              if (v45)
              {
                unsigned int v44 = *((_DWORD *)v45 + 5);
                unsigned int v96 = v44;
                *((_DWORD *)v3 + 1) = v44;
                unint64_t v46 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(buf, v44);
                if (v46)
                {
                  int v47 = *((_DWORD *)v46 + 5) + 1;
                  *((_DWORD *)v46 + 5) = v47;
                }
                else
                {
                  int v47 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int &,int>((uint64_t)buf, v44, v44, 0)+ 5);
                }
                *(_DWORD *)uint64_t v3 = *v3 | (v47 << 8);
              }
              *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v86, v44, &v96)+ 5) = v42;
              if (*((void *)v3 + 1) != -1)
              {
                unsigned __int16 v48 = *v3;
                int v91 = 0;
                uint64_t v92 = 0;
                v90 = &v91;
                LODWORD(v93) = v44;
                std::set<ProgramAddressHelper::ProgramAddressInfo>::set[abi:nn180100]((uint64_t)&v94, &v90);
                v49 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<ProgramAddressHelper::ProgramAddressInfo>>>((uint64_t)(v87 + 3), v93, (uint64_t)&v93);
                std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v95);
                std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v91);
                v49 += 3;
                std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__emplace_unique_impl<unsigned long long &,ProgramAddressHelper::eAddressRange,unsigned int &>(v49, *((void *)v3 + 1), 0, v48);
                std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__emplace_unique_impl<unsigned long long &,ProgramAddressHelper::eAddressRange,unsigned int &>(v49, *((void *)v3 + 2), 2u, v48);
                if ((*(_DWORD *)v3 & 0xFE) == 0x64) {
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>((uint64_t)(v87 + 8), v44, v44);
                }
              }
            }
          }
          v3 += 24;
          --v43;
        }
        while (v43);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)buf);
      v50 = (GRCPerFrameData *)v87;
      uint64_t v51 = v87[61];
      id v89 = *((id *)v51 + 39);
      *(_OWORD *)buf = 0u;
      long long v98 = 0u;
      int v99 = 1050253722;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)buf, vcvtps_u32_f32((float)*((unint64_t *)v51 + 24) / v41));
      unsigned int v52 = 0;
      unint64_t v85 = v51 + 168;
      while (1)
      {
        uint64_t v53 = v52;
        if ((unint64_t)[v89 count] <= v52) {
          break;
        }
        v54 = [v89 objectAtIndexedSubscript:v52];
        v55 = [v54 objectForKeyedSubscript:@"encID"];
        unsigned int v56 = [v55 unsignedIntValue];

        unsigned int v96 = v56;
        unint64_t v57 = [v54 objectForKeyedSubscript:@"mappedAddress"];
        unsigned int v58 = [v57 unsignedLongLongValue];

        uint64_t v59 = [v54 objectForKeyedSubscript:@"mappedSize"];
        unsigned int v60 = [v59 unsignedLongLongValue];

        unint64_t v61 = [v54 objectForKeyedSubscript:@"encIndex"];
        unsigned int v62 = [v61 unsignedIntValue];

        v63 = [v54 objectForKeyedSubscript:@"type"];
        v64 = [&off_7595A8 objectForKeyedSubscript:v63];
        v65 = v64;
        if (v64) {
          unsigned int v66 = [v64 unsignedIntValue];
        }
        else {
          unsigned int v66 = 255;
        }

        int v67 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v85, v62);
        if (v67)
        {
          unint64_t v68 = v67;
          id v69 = [v54 mutableCopy];
          unsigned int v96 = *((_DWORD *)v68 + 5);
          unsigned int v56 = v96;
          uint64_t v70 = +[NSNumber numberWithUnsignedInt:v96];
          [v69 setObject:v70 forKeyedSubscript:@"encID"];

          unint64_t v71 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(buf, v56);
          if (v71)
          {
            uint64_t v72 = (*((_DWORD *)v71 + 5) + 1);
            *((_DWORD *)v71 + 5) = v72;
          }
          else
          {
            uint64_t v72 = *((unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int &,int>((uint64_t)buf, v56, v56, 0)+ 5);
          }
          v73 = +[NSNumber numberWithUnsignedInt:v72];
          [v69 setObject:v73 forKeyedSubscript:@"index"];

          [v89 setObject:v69 atIndexedSubscript:v53];
        }
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v86, v56, &v96)+ 5) = v62;
        int v91 = 0;
        uint64_t v92 = 0;
        v90 = &v91;
        LODWORD(v93) = v56;
        std::set<ProgramAddressHelper::ProgramAddressInfo>::set[abi:nn180100]((uint64_t)&v94, &v90);
        uint64_t v74 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<ProgramAddressHelper::ProgramAddressInfo>>>((uint64_t)(v87 + 3), v93, (uint64_t)&v93);
        std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v95);
        std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v91);
        uint64_t v75 = v74 + 3;
        std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__emplace_unique_impl<unsigned long long &,ProgramAddressHelper::eAddressRange,unsigned int &>(v74 + 3, v58, 0, v66);
        v50 = (GRCPerFrameData *)v87;
        v76 = operator new(0x28uLL);
        unsigned int v77 = (v66 << 16) | 2;
        v76[7] = v58 + v60;
        v76[8] = v77;
        unint64_t v78 = std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__find_equal<ProgramAddressHelper::ProgramAddressInfo>((uint64_t)v75, &v93, v58 + v60, v77);
        if (*v78) {
          operator delete(v76);
        }
        else {
          std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(v75, v93, (uint64_t **)v78, (uint64_t *)v76);
        }
        if ((v66 & 0xFFFFFFFE) == 0x64) {
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>((uint64_t)(v87 + 8), v56, v56);
        }

        unsigned int v52 = v53 + 1;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)buf);

      GRCPerFrameData::EvaluatePerRingBufferSamples(v50);
      goto LABEL_73;
    }
    unint64_t v8 = *v87;
    uint64_t v9 = (uint64_t)v87[1];
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - (uint64_t)*v87) >> 3);
    unint64_t v11 = v5 - v10;
    if (v5 <= v10)
    {
      if (v5 >= v10)
      {
        unint64_t v34 = (unint64_t)v87[1];
        double v35 = (uint64_t *)v87;
LABEL_36:
        uint64_t v36 = *v35;
        if (v36 != v34)
        {
          float v37 = *((float *)v7 + 61);
          do
          {
            unint64_t v38 = *(void *)(v36 + 8);
            if (v38) {
              float v39 = (float)*(unint64_t *)(v36 + 24) / (float)v38;
            }
            else {
              float v39 = 0.0;
            }
            *(float *)(v36 + 32) = fmaxf(v39, v37);
            v36 += 88;
          }
          while (v36 != v34);
        }
        goto LABEL_42;
      }
      unint64_t v34 = (unint64_t)&v8[88 * v5];
      while (v9 != v34)
      {
        v9 -= 88;
        std::allocator<ProgramAddressHelper::PerRingBufferProgramInfo>::destroy[abi:nn180100](v9);
      }
    }
    else
    {
      id v12 = v87[2];
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v12[-v9] >> 3) < v11)
      {
        if (v5 > 0x2E8BA2E8BA2E8BALL) {
          abort();
        }
        unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((v12 - v8) >> 3);
        uint64_t v14 = 2 * v13;
        if (2 * v13 <= v5) {
          uint64_t v14 = v5;
        }
        if (v13 >= 0x1745D1745D1745DLL) {
          unint64_t v15 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15 > 0x2E8BA2E8BA2E8BALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v16 = (char *)operator new(88 * v15);
        unint64_t v17 = &v16[88 * v10];
        uint64_t v18 = &v16[88 * v6];
        uint64_t v19 = v17;
        do
        {
          *((void *)v19 + 6) = 0;
          *((void *)v19 + 4) = 0;
          *((void *)v19 + 5) = v19 + 48;
          *(_OWORD *)uint64_t v19 = 0uLL;
          *((_OWORD *)v19 + 1) = 0uLL;
          *((_DWORD *)v19 + 8) = 1065353216;
          *((void *)v19 + 7) = 0;
          *((void *)v19 + 8) = 0;
          *((void *)v19 + 9) = 0;
          *((void *)v19 + 10) = 0;
          v19 += 88;
        }
        while (v19 != v18);
        uint8x8_t v20 = &v16[88 * v15];
        uint64_t v22 = *v87;
        unsigned int v21 = v87[1];
        if (v21 == *v87)
        {
          *v87 = v17;
          v87[1] = v18;
          v87[2] = v20;
        }
        else
        {
          v88 = v20;
          uint64_t v23 = 0;
          do
          {
            double v24 = &v17[v23];
            char v25 = &v21[v23];
            std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table((uint64_t)&v17[v23 - 88], (uint64_t *)&v21[v23 - 88]);
            *((void *)v24 - 6) = *(void *)&v21[v23 - 48];
            double v26 = &v21[v23 - 40];
            uint64_t v27 = *(void *)v26;
            *((void *)v24 - 5) = *(void *)v26;
            uint64_t v28 = (uint64_t)&v17[v23 - 40];
            uint64_t v29 = *(void *)&v21[v23 - 32];
            *((void *)v24 - 4) = v29;
            if (v29)
            {
              *(void *)(v27 + 16) = v28;
              *((void *)v25 - 6) = v26;
              *(void *)double v26 = 0;
              *((void *)v25 - 4) = 0;
            }
            else
            {
              *((void *)v24 - 6) = v28;
            }
            uint64_t v30 = &v17[v23];
            unsigned int v31 = &v21[v23];
            *((void *)v30 - 3) = 0;
            *((void *)v30 - 2) = 0;
            *((void *)v30 - 1) = 0;
            *(_OWORD *)(v30 - 24) = *(_OWORD *)&v21[v23 - 24];
            *((void *)v30 - 1) = *(void *)&v21[v23 - 8];
            *((void *)v31 - 3) = 0;
            *((void *)v31 - 2) = 0;
            *((void *)v31 - 1) = 0;
            v23 -= 88;
          }
          while (&v21[v23] != v22);
          uint64_t v32 = &v17[v23];
          unsigned int v33 = *v87;
          unsigned int v21 = v87[1];
          *v87 = v32;
          v87[1] = v18;
          v87[2] = v88;
          v7 = &xmmword_4C8000;
          if (v21 != v33)
          {
            do
            {
              v21 -= 88;
              std::allocator<ProgramAddressHelper::PerRingBufferProgramInfo>::destroy[abi:nn180100]((uint64_t)v21);
            }
            while (v21 != v33);
            unsigned int v21 = v33;
          }
        }
        if (v21) {
          operator delete(v21);
        }
        double v35 = (uint64_t *)v87;
        unint64_t v34 = (unint64_t)v87[1];
        goto LABEL_36;
      }
      unint64_t v34 = v9 + 88 * v11;
      do
      {
        *(void *)(v9 + 48) = 0;
        *(void *)(v9 + 32) = 0;
        *(void *)(v9 + 40) = v9 + 48;
        *(_OWORD *)uint64_t v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        *(_DWORD *)(v9 + 32) = 1065353216;
        *(void *)(v9 + 56) = 0;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 80) = 0;
        v9 += 88;
      }
      while (v9 != v34);
    }
    double v35 = (uint64_t *)v87;
    v87[1] = (char *)v34;
    goto LABEL_36;
  }
LABEL_73:
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v84 + 120), 0xFFFFFFFFFFFFFFFFLL);
  [*(id *)v84 removeObject:WeakRetained];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v84 + 120));
  unint64_t v79 = g_signpostLog;
  BOOL v80 = v79;
  os_signpost_id_t v81 = *(void *)(a1 + 48);
  if (v81 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v79))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v80, OS_SIGNPOST_INTERVAL_END, v81, "ShaderProfiler-ProcessStreamedDataPostProcessing", (const char *)&unk_4CA5E5, buf, 2u);
  }
}

void sub_30B1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v20 - 144);

  _Unwind_Resume(a1);
}

void GRCPerFrameData::EvaluatePerRingBufferSamples(GRCPerFrameData *this)
{
  long long v435 = 0u;
  long long v436 = 0u;
  long long v437 = 0u;
  long long v438 = 0u;
  id obj = [**((id **)this + 61) allKeys];
  unsigned int v2 = this;
  id v402 = [obj countByEnumeratingWithState:&v435 objects:v464 count:16];
  if (v402)
  {
    v409 = (char *)this + 448;
    uint64_t v400 = *(void *)v436;
    do
    {
      for (uint64_t i = 0; i != v402; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v436 != v400) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void **)(*((void *)&v435 + 1) + 8 * i);
        v426 = [**((id **)v2 + 61) objectForKeyedSubscript:v3];
        unsigned int v4 = [v3 unsignedIntValue];
        v407 = v3;
        LODWORD(v461) = v4;
        id v427 = v426;
        unint64_t v5 = [v427 allKeys];
        unint64_t v6 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v5 count]);
        int64x2_t v445 = 0uLL;
        *(void *)&long long v446 = 0;
        v430 = v6;
        unint64_t v7 = (unint64_t)[v6 count];
        uint64_t v8 = v445.i64[0];
        if (v7 > (uint64_t)(v446 - v445.i64[0]) >> 3)
        {
          if (v7 >> 61) {
            abort();
          }
          uint64_t v9 = v445.i64[1];
          v480 = &v446;
          unint64_t v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v7);
          id v12 = (void *)v445.i64[1];
          unint64_t v13 = (void *)v445.i64[0];
          if (v445.i64[1] == v445.i64[0])
          {
            int64x2_t v16 = vdupq_n_s64(v445.u64[1]);
            uint64_t v14 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8];
          }
          else
          {
            uint64_t v14 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v15 = *--v12;
              void *v12 = 0;
              *((void *)v14 - 1) = v15;
              v14 -= 8;
            }
            while (v12 != v13);
            int64x2_t v16 = v445;
          }
          v445.i64[0] = (uint64_t)v14;
          v445.i64[1] = (uint64_t)&v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8];
          int64x2_t v478 = v16;
          unint64_t v17 = (void *)v446;
          *(void *)&long long v446 = &v10[8 * v11];
          v479 = v17;
          v477 = (void **)v16.i64[0];
          std::__split_buffer<std::unique_ptr<GRCPerFrameData::PriorityQueueElement>>::~__split_buffer((uint64_t)&v477);
        }
        long long v467 = 0u;
        *(_OWORD *)__p = 0u;
        long long v465 = 0u;
        long long v466 = 0u;
        id v18 = v5;
        if ([v18 countByEnumeratingWithState:&v465 objects:&v477 count:16])
        {
          uint64_t v19 = [v427 objectForKeyedSubscript:**((void **)&v465 + 1)];
          [v430 addObject:v19];

          operator new();
        }

        uint64_t v414 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v409, v4, &v461);
        uint64_t v20 = *((void *)this + 61);
        unsigned int v21 = (uint64_t *)(v20 + 8);
        unint64_t v22 = *(void *)(v20 + 16);
        if (v22)
        {
          uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
          v23.i16[0] = vaddlv_u8(v23);
          if (v23.u32[0] > 1uLL)
          {
            unint64_t v1 = v4;
            if (v22 <= v4) {
              unint64_t v1 = v4 % v22;
            }
          }
          else
          {
            unint64_t v1 = (v22 - 1) & v4;
          }
          double v24 = *(void ***)(*v21 + 8 * v1);
          if (v24)
          {
            char v25 = *v24;
            if (*v24)
            {
              do
              {
                unint64_t v26 = v25[1];
                if (v26 == v4)
                {
                  if (*((_DWORD *)v25 + 4) == v4) {
                    goto LABEL_54;
                  }
                }
                else
                {
                  if (v23.u32[0] > 1uLL)
                  {
                    if (v26 >= v22) {
                      v26 %= v22;
                    }
                  }
                  else
                  {
                    v26 &= v22 - 1;
                  }
                  if (v26 != v1) {
                    break;
                  }
                }
                char v25 = (void *)*v25;
              }
              while (v25);
            }
          }
        }
        char v25 = operator new(0x20uLL);
        *char v25 = 0;
        v25[1] = v4;
        *((_DWORD *)v25 + 4) = v4;
        v25[3] = 0;
        float v27 = (float)(unint64_t)(*(void *)(v20 + 32) + 1);
        float v28 = *(float *)(v20 + 40);
        if (!v22 || (float)(v28 * (float)v22) < v27)
        {
          BOOL v29 = (v22 & (v22 - 1)) != 0;
          if (v22 < 3) {
            BOOL v29 = 1;
          }
          unint64_t v30 = v29 | (2 * v22);
          unint64_t v31 = vcvtps_u32_f32(v27 / v28);
          if (v30 <= v31) {
            size_t v32 = v31;
          }
          else {
            size_t v32 = v30;
          }
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(v20 + 8, v32);
          unint64_t v22 = *(void *)(v20 + 16);
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v22 <= v4) {
              unint64_t v1 = v4 % v22;
            }
            else {
              unint64_t v1 = v4;
            }
          }
          else
          {
            unint64_t v1 = (v22 - 1) & v4;
          }
        }
        uint64_t v33 = *v21;
        unint64_t v34 = *(void **)(*v21 + 8 * v1);
        if (v34)
        {
          *char v25 = *v34;
LABEL_52:
          void *v34 = v25;
          goto LABEL_53;
        }
        *char v25 = *(void *)(v20 + 24);
        *(void *)(v20 + 24) = v25;
        *(void *)(v33 + 8 * v1) = v20 + 24;
        if (*v25)
        {
          unint64_t v35 = *(void *)(*v25 + 8);
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v35 >= v22) {
              v35 %= v22;
            }
          }
          else
          {
            v35 &= v22 - 1;
          }
          unint64_t v34 = (void *)(*v21 + 8 * v35);
          goto LABEL_52;
        }
LABEL_53:
        ++*(void *)(v20 + 32);
LABEL_54:
        std::vector<unsigned int>::size_type v36 = v25[3];
        uint64_t v37 = +[NSMutableData dataWithLength:v36];
        unint64_t v38 = *(void **)(v414 + 72);
        *(void *)(v414 + 72) = v37;

        std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(v414 + 112), v36 >> 6);
        v36 >>= 4;
        std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(v414 + 32), v36);
        uint64_t v39 = +[NSMutableData dataWithCapacity:v36];
        id v40 = *(void **)(v414 + 56);
        *(void *)(v414 + 56) = v39;

        float v41 = [*(id *)(*((void *)this + 61) + 280) objectForKeyedSubscript:@"limiter sample counters"];
        *(_DWORD *)(v414 + 24) = *(_DWORD *)(v414 + 24) & 0x3FFFFFF | ([v41 count] << 26);

        uint64_t v42 = +[NSMutableData dataWithCapacity:1572864];
        unint64_t v43 = *(void **)(v414 + 88);
        *(void *)(v414 + 88) = v42;

        uint64_t v44 = +[NSMutableData dataWithCapacity:1572864];
        unint64_t v45 = *(void **)(v414 + 96);
        *(void *)(v414 + 96) = v44;

        if (*((void *)this + 38) != *((void *)this + 39)) {
          GRCPerFrameData::AddDeferredKickSamples((ProgramAddressHelper *)this, v461, (void *)this + 45);
        }
        if (*((void *)this + 21))
        {
          unint64_t v46 = (void *)*((void *)this + 20);
          if (v46)
          {
            do
            {
              int v47 = (void *)*v46;
              operator delete(v46);
              unint64_t v46 = v47;
            }
            while (v47);
          }
          *((void *)this + 20) = 0;
          uint64_t v48 = *((void *)this + 19);
          if (v48)
          {
            for (uint64_t j = 0; j != v48; ++j)
              *(void *)(*((void *)this + 18) + 8 * j) = 0;
          }
          *((void *)this + 21) = 0;
        }
        [*(id *)(v414 + 72) setLength:8 * *(unsigned int *)(v414 + 84)];
        v448[0] = &v445;
        std::vector<std::unique_ptr<GRCPerFrameData::PriorityQueueElement>>::__destroy_vector::operator()[abi:nn180100]((void ***)v448);

        v445.i32[0] = [v407 unsignedIntValue];
        uint64_t v50 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v409, v445.u32[0], &v445);
        v448[0] = 0;
        v448[1] = 0;
        *(void *)&long long v449 = 0;
        unint64_t v51 = (unint64_t)[*((id *)this + 62) maxConcurrentOperationCount];
        std::vector<unsigned long long>::reserve(v448, v51 + 1);
        v433 = (_DWORD *)(v50 + 24);
        unsigned int v52 = (unint64_t *)v448[1];
        unint64_t v53 = v449;
        if (v51)
        {
          v54 = 0;
          v55 = (unint64_t *)v448[0];
          do
          {
            unint64_t v56 = (unint64_t)v54 * (*v433 & 0x3FFFFFF) / v51 * ((unint64_t)*v433 >> 26);
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v57 = v52 - v55;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61)
              {
                v448[0] = v55;
                abort();
              }
              if ((uint64_t)(v53 - (void)v55) >> 2 > v58) {
                unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
              }
              if (v53 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v58;
              }
              if (v59) {
                unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v59);
              }
              else {
                uint64_t v60 = 0;
              }
              unint64_t v61 = (unint64_t *)(v59 + 8 * v57);
              *unint64_t v61 = v56;
              unint64_t v1 = (unint64_t)(v61 + 1);
              while (v52 != v55)
              {
                unint64_t v62 = *--v52;
                *--unint64_t v61 = v62;
              }
              unint64_t v53 = v59 + 8 * v60;
              v448[1] = (void *)v1;
              if (v55) {
                operator delete(v55);
              }
              v55 = v61;
              unsigned int v52 = (unint64_t *)v1;
            }
            else
            {
              *v52++ = v56;
            }
            v448[1] = v52;
            v54 = (char *)v54 + 1;
          }
          while (v54 != (void *)v51);
          *(void *)&long long v449 = v53;
          v448[0] = v55;
        }
        unint64_t v63 = ((*(void *)(v50 + 40) - *(void *)(v50 + 32)) >> 2);
        if ((unint64_t)v52 >= v53)
        {
          v64 = (unint64_t *)v448[0];
          uint64_t v65 = ((char *)v52 - (char *)v448[0]) >> 3;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 61) {
            abort();
          }
          if ((uint64_t)(v53 - (unint64_t)v448[0]) >> 2 > v66) {
            unint64_t v66 = (uint64_t)(v53 - (unint64_t)v448[0]) >> 2;
          }
          if (v53 - (unint64_t)v448[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v66;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          id v69 = (unint64_t *)(v67 + 8 * v65);
          *id v69 = v63;
          uint64_t v70 = v69 + 1;
          while (v52 != v64)
          {
            unint64_t v71 = *--v52;
            *--id v69 = v71;
          }
          v448[0] = v69;
          v448[1] = v70;
          *(void *)&long long v449 = v67 + 8 * v68;
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          unint64_t *v52 = v63;
        }
        uint64_t v72 = (unsigned int *)(v50 + 24);
        v73 = objc_opt_new();
        uint64_t v74 = +[NSMutableData dataWithLength:8 * (*v433 & 0x3FFFFFFu) * *((_DWORD *)this + 130)];
        uint64_t v75 = *(void **)(v50 + 104);
        *(void *)(v50 + 104) = v74;

        id v431 = [*(id *)(v50 + 104) mutableBytes];
        v76 = [*(id *)(v50 + 56) mutableBytes];
        unint64_t v77 = (unint64_t)[*(id *)(v50 + 56) length];
        unint64_t v78 = v77;
        *(void *)&long long v465 = 0;
        *((void *)&v465 + 1) = &v465;
        *(void *)&long long v466 = 0x4812000000;
        *((void *)&v466 + 1) = __Block_byref_object_copy__518;
        *(void *)&long long v467 = __Block_byref_object_dispose__519;
        *((void *)&v467 + 1) = &unk_4E231D;
        __p[1] = 0;
        CFStringRef v469 = 0;
        __p[0] = 0;
        if (v77 >= 8)
        {
          unint64_t v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v77 >> 3);
          __p[0] = v79;
          CFStringRef v469 = (const __CFString *)&v79[8 * v80];
          size_t v81 = v78 & 0xFFFFFFFFFFFFFFF8;
          bzero(v79, v81);
          __p[1] = &v79[v81];
        }
        if ((*v433 & 0x3FFFFFE) != 0)
        {
          uint64_t v82 = 0;
          do
          {
            *(void *)(*(void *)(*((void *)&v465 + 1) + 48) + 8 * v82 + 8) = v76[v82 + 1] - v76[v82];
            unint64_t v83 = v82 + 2;
            ++v82;
          }
          while (v83 < (*v433 & 0x3FFFFFFu));
        }
        uint64_t v84 = *(void **)(*((void *)&v465 + 1) + 48);
        if (*(void *)(*((void *)&v465 + 1) + 56) - (void)v84 > 8uLL) {
          *uint64_t v84 = v84[1];
        }
        if (v51)
        {
          uint64_t v85 = 0;
          v422 = (char *)v448[0];
          __int32 v420 = v445.i32[0];
          do
          {
            uint64_t v86 = v73;
            v87 = (void **)&v422[8 * v85];
            v88 = *v87;
            id v89 = v87[1];
            unint64_t v90 = *v72;
            int v91 = [*(id *)(*((void *)this + 61) + 280) objectForKeyedSubscript:@"DerivedCounterScript"];
            id v92 = *(id *)(*((void *)this + 61) + 288);
            uint64_t v93 = [*(id *)(*((void *)this + 61) + 280) objectForKeyedSubscript:@"DerivedCounterConfigurationVariables"];
            v477 = _NSConcreteStackBlock;
            v478.i64[0] = 3221225472;
            v478.i64[1] = (uint64_t)___ZN15GRCPerFrameData23EvaluateDerivedLimitersEj_block_invoke;
            v479 = &unk_746C80;
            v483 = this;
            uint64_t v94 = v91;
            v480 = v94;
            id v95 = v92;
            *(void *)&long long v481 = v95;
            id v96 = v93;
            *((void *)&v481 + 1) = v96;
            v482 = &v465;
            v484 = v88;
            v485 = v433;
            unint64_t v486 = (v89 - (unsigned char *)v88) / (v90 >> 26);
            uint64_t v487 = v85;
            LODWORD(v490) = v420;
            v488 = v433;
            id v489 = v431;
            unint64_t v1 = +[NSBlockOperation blockOperationWithBlock:&v477];
            v73 = v86;
            [*((id *)this + 62) addOperation:v1];
            [v86 addDependency:v1];

            uint64_t v72 = v433;
            ++v85;
          }
          while (v51 != v85);
        }
        [*((id *)this + 62) addOperation:v73];
        [v73 waitUntilFinished];
        _Block_object_dispose(&v465, 8);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        if (v448[0]) {
          operator delete(v448[0]);
        }
        id v98 = [v407 unsignedIntValue];
        LODWORD(v448[0]) = v98;
        uint64_t v99 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v409, v98, v448);
        uint64_t v100 = v99;
        if ((*(_DWORD *)(v99 + 24) & 0x3FFFFFF) != 0 && *(_DWORD *)(v99 + 80))
        {
          unsigned int v101 = std::thread::hardware_concurrency();
          unint64_t v102 = v101 >> 1;
          v103 = +[NSMutableArray arrayWithCapacity:v102];
          if (v101 >= 2)
          {
            uint64_t v104 = 0;
            if (v102 <= 1) {
              uint64_t v105 = 1;
            }
            else {
              uint64_t v105 = v101 >> 1;
            }
            do
            {
              v106 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v100 + 112)+ 4 * (v104 * (unint64_t)*(unsigned int *)(v100 + 80) / v102))];
              [v103 addObject:v106];

              ++v104;
            }
            while (v105 != v104);
          }
          os_signpost_id_t v107 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v100 + 84)];
          [v103 addObject:v107];

          id v108 = +[NSMutableDictionary dictionaryWithCapacity:*(void *)(*((void *)this + 61) + 152)];
          for (k = *(void **)(*((void *)this + 61) + 144); k; k = (void *)*k)
          {
            uint64_t v110 = +[NSMutableArray arrayWithCapacity:(uint64_t)(k[4] - k[3]) >> 4];
            uint64_t v111 = k[3];
            uint64_t v112 = k[4];
            while (v111 != v112)
            {
              v113 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v111 + 8)];
              [v110 addObject:v113];

              v111 += 16;
            }
            if ((unint64_t)[v110 count] >= 2)
            {
              v114 = [v110 firstObject];
              [v108 setObject:v110 forKeyedSubscript:v114];
            }
          }
          *(void *)&long long v465 = @"ring buffer";
          uint64_t v115 = +[NSNumber numberWithUnsignedInt:v98];
          v477 = v115;
          *((void *)&v465 + 1) = @"frame index";
          id v116 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*((void *)this + 61) + 360)];
          uint64_t v117 = *(void *)(v100 + 104);
          v478.i64[0] = (uint64_t)v116;
          v478.i64[1] = v117;
          *(void *)&long long v466 = @"limiter data";
          *((void *)&v466 + 1) = @"limiter time stamps";
          v118 = *(long long **)(*((void *)this + 61) + 296);
          v479 = *(void **)(v100 + 56);
          v480 = v118;
          *(void *)&long long v467 = @"limiter counter list";
          *((void *)&v467 + 1) = @"shader timeline data";
          long long v481 = *(_OWORD *)(v100 + 88);
          __p[0] = @"shader timeline data ex";
          __p[1] = @"usc sampling sample data";
          v482 = *(long long **)(v100 + 72);
          CFStringRef v469 = @"usc sample count";
          id v119 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v100 + 80)];
          v483 = v119;
          v484 = v103;
          CFStringRef v470 = @"usc sample data thread offsets";
          CFStringRef v471 = @"usc sampling address data";
          uint64_t v120 = *((void *)this + 61);
          unint64_t v121 = *(void **)(v120 + 312);
          if (!v121) {
            unint64_t v121 = &__NSArray0__struct;
          }
          v485 = *(_DWORD **)(v120 + 304);
          unint64_t v486 = (unint64_t)v121;
          CFStringRef v472 = @"usc sampling address mappings";
          CFStringRef v473 = @"DerivedCounterConfigurationVariables";
          uint64_t v122 = [*(id *)(v120 + 280) objectForKeyedSubscript:];
          v123 = (void *)v122;
          uint64_t v124 = *((void *)this + 61);
          long long v126 = *(_UNKNOWN ***)(v124 + 320);
          long long v125 = *(void **)(v124 + 328);
          if (!v126) {
            long long v126 = &off_7595D0;
          }
          uint64_t v487 = v122;
          v488 = v126;
          CFStringRef v474 = @"Frame Consistent Perf Info";
          CFStringRef v475 = @"coalesced encoder mapping";
          CFStringRef v476 = @"Restore Timestamps";
          if (!v125) {
            long long v125 = &__NSArray0__struct;
          }
          id v489 = v108;
          v490 = v125;
          unint64_t v1 = +[NSDictionary dictionaryWithObjects:&v477 forKeys:&v465 count:16];

          id v127 = (id)(*(uint64_t (**)(void))(*((void *)this + 63) + 16))();
        }

        unsigned int v2 = this;
      }
      id v402 = [obj countByEnumeratingWithState:&v435 objects:v464 count:16];
    }
    while (v402);
  }

  if (*((_DWORD *)this + 134) != 2) {
    return;
  }
  unsigned int v128 = [**((id **)this + 61) count];
  unsigned int v418 = v128;
  unint64_t v129 = v128;
  unint64_t v428 = v128;
  if (v128)
  {
    v425 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v128);
    long long v131 = &v425[24 * v130];
    unint64_t v129 = v428;
  }
  else
  {
    long long v131 = 0;
    v425 = 0;
  }
  v461 = 0;
  v462 = 0;
  unint64_t v463 = 0;
  unint64_t v132 = v129;
  std::vector<BufferView2D<double>>::reserve(&v461, v129);
  size_t v133 = 8 * v132;
  if (v132)
  {
    unint64_t v134 = v132;
    v135 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v132);
    bzero(v135, v133);
    v434 = v135;
    v404 = &v135[8 * v134];
  }
  else
  {
    v404 = 0;
    v434 = 0;
  }
  size_t v396 = v133;
  LODWORD(v477) = 0;
  if (v418)
  {
    unsigned int v136 = 0;
    id v416 = 0;
    unint64_t v423 = -1;
    unint64_t v137 = v425;
    do
    {
      uint64_t v138 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 448, v136, &v477);
      uint64_t v139 = v138;
      if (v137 >= v131)
      {
        unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * ((v137 - v425) >> 3) + 1;
        if (v140 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v131 - v425) >> 3) > v140) {
          unint64_t v140 = 0x5555555555555556 * ((v131 - v425) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v131 - v425) >> 3) >= 0x555555555555555) {
          unint64_t v141 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v141 = v140;
        }
        if (v141)
        {
          v142 = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v141);
          uint64_t v144 = v143;
        }
        else
        {
          v142 = 0;
          uint64_t v144 = 0;
        }
        v145 = (char *)BufferView<unsigned long long>::BufferView(&v142[(v137 - v425) >> 3], *(void **)(v139 + 56));
        if (v137 == v425)
        {
          v148 = v137;
          v425 = v145;
        }
        else
        {
          v146 = v145;
          do
          {
            long long v147 = *(_OWORD *)(v137 - 24);
            *((void *)v146 - 1) = *((void *)v137 - 1);
            *(_OWORD *)(v146 - 24) = v147;
            v146 -= 24;
            v137 -= 24;
          }
          while (v137 != v425);
          v148 = v425;
          v425 = v146;
        }
        long long v131 = (char *)&v142[3 * v144];
        unint64_t v137 = v145 + 24;
        if (v148) {
          operator delete(v148);
        }
      }
      else
      {
        BufferView<unsigned long long>::BufferView(v137, *(void **)(v138 + 56));
        v137 += 24;
      }
      uint64_t v149 = *((void *)v137 - 1);
      if (v149)
      {
        uint64_t v150 = (unint64_t *)*((void *)v137 - 3);
        unint64_t v151 = v423;
        if (v423 >= *v150) {
          unint64_t v151 = *v150;
        }
        unint64_t v423 = v151;
        unint64_t v152 = v150[v149 - 1];
        id v153 = v416;
        if (v152 > (unint64_t)v416) {
          id v153 = (id)v152;
        }
        id v416 = v153;
      }
      v154 = v462;
      if ((unint64_t)v462 >= v463)
      {
        int64_t v156 = ((char *)v462 - (unsigned char *)v461) >> 5;
        if ((unint64_t)(v156 + 1) >> 59) {
          abort();
        }
        unint64_t v157 = (uint64_t)(v463 - (void)v461) >> 4;
        if (v157 <= v156 + 1) {
          unint64_t v157 = v156 + 1;
        }
        if (v463 - (unint64_t)v461 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v158 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v158 = v157;
        }
        if (v158)
        {
          v159 = (char **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v158);
          uint64_t v161 = v160;
        }
        else
        {
          v159 = 0;
          uint64_t v161 = 0;
        }
        v162 = BufferView2D<double>::BufferView2D(&v159[4 * v156], *(void **)(v139 + 104), (char *)*((unsigned int *)this + 130));
        v164 = (char **)v461;
        v163 = v462;
        v165 = v162;
        if (v462 != v461)
        {
          do
          {
            long long v166 = *((_OWORD *)v163 - 1);
            *((_OWORD *)v165 - 2) = *((_OWORD *)v163 - 2);
            *((_OWORD *)v165 - 1) = v166;
            v165 -= 4;
            v163 -= 4;
          }
          while (v163 != v164);
          v163 = v164;
        }
        v155 = v162 + 4;
        v461 = v165;
        unint64_t v463 = (unint64_t)&v159[4 * v161];
        if (v163) {
          operator delete(v163);
        }
      }
      else
      {
        BufferView2D<double>::BufferView2D(v462, *(void **)(v139 + 104), (char *)*((unsigned int *)this + 130));
        v155 = v154 + 4;
      }
      v462 = v155;
      unsigned int v136 = v477 + 1;
      LODWORD(v477) = v136;
    }
    while (v136 < v418);
  }
  else
  {
    id v416 = 0;
    unint64_t v423 = -1;
  }
  v167 = this;
  unint64_t v168 = *((unsigned int *)this + 130);
  unint64_t v459 = 0;
  uint64_t v460 = 0;
  v458 = 0;
  if (v168)
  {
    std::vector<BOOL>::__vallocate[abi:nn180100](&v458, v168);
    unint64_t v169 = v459;
    unint64_t v170 = v459 + v168;
    v459 += v168;
    if (v169)
    {
      unint64_t v171 = v170 - 1;
      if (((v170 - 1) ^ (v169 - 1)) <= 0x3F)
      {
        v172 = v458;
        goto LABEL_199;
      }
    }
    else
    {
      unint64_t v171 = v170 - 1;
    }
    v172 = v458;
    unint64_t v173 = v171 >> 6;
    if (v170 >= 0x41) {
      unint64_t v174 = v173;
    }
    else {
      unint64_t v174 = 0;
    }
    *((void *)v458 + v174) = 0;
LABEL_199:
    v477 = (void **)&v172[v169 >> 6];
    v478.i32[0] = v169 & 0x3F;
    std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v477, v168);
    if (*((_DWORD *)this + 130))
    {
      unint64_t v175 = 0;
      v176 = this;
      do
      {
        v177 = [*(id *)(*((void *)v176 + 61) + 296) objectAtIndexedSubscript:v175];
        unsigned __int8 v178 = [v177 containsString:@"Bandwidth"];
        unint64_t v179 = v175 >> 6;
        uint64_t v180 = 1 << v175;
        if (v178) {
          uint64_t v181 = v172[v179] & ~v180;
        }
        else {
          uint64_t v181 = v172[v179] | v180;
        }
        v172[v179] = v181;

        ++v175;
        v176 = this;
      }
      while (v175 < *((unsigned int *)this + 130));
      v167 = this;
    }
  }
  v408 = +[NSMutableArray arrayWithCapacity:(uint64_t)(*(void *)(*((void *)v167 + 61) + 264) - *(void *)(*((void *)v167 + 61) + 256)) >> 2];
  uint64_t v182 = *((void *)v167 + 61);
  v183 = *(unsigned int **)(v182 + 256);
  for (m = *(unsigned int **)(v182 + 264); v183 != m; ++v183)
  {
    v185 = +[NSNumber numberWithUnsignedInt:*v183];
    [v408 addObject:v185];
  }
  v413 = +[NSMutableArray arrayWithCapacity:v428];
  v455 = 0;
  v456 = 0;
  unint64_t v457 = 0;
  std::vector<DYMTLShaderProfilerProgramAddress>::reserve(&v455, v428);
  v415 = +[NSMutableArray arrayWithCapacity:v428];
  v452 = 0;
  v453 = 0;
  unint64_t v454 = 0;
  std::vector<BufferView2D<double>>::reserve(&v452, v428);
  unint64_t v398 = ((unint64_t)v416 - v423) / 0x3C;
  int v186 = v398 + 1;
  if (v418)
  {
    for (int n = 0; n != v418; ++n)
    {
      v188 = +[NSMutableData dataWithLength:8 * (*((_DWORD *)this + 130) * v186)];
      [v415 addObject:v188];

      v189 = [v415 lastObject];
      v190 = v453;
      if ((unint64_t)v453 >= v454)
      {
        int64_t v192 = ((char *)v453 - (unsigned char *)v452) >> 5;
        if ((unint64_t)(v192 + 1) >> 59) {
          abort();
        }
        unint64_t v193 = (uint64_t)(v454 - (void)v452) >> 4;
        if (v193 <= v192 + 1) {
          unint64_t v193 = v192 + 1;
        }
        if (v454 - (unint64_t)v452 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v194 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v194 = v193;
        }
        if (v194)
        {
          v195 = (char **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v194);
          uint64_t v197 = v196;
        }
        else
        {
          v195 = 0;
          uint64_t v197 = 0;
        }
        v198 = BufferView2D<double>::BufferView2D(&v195[4 * v192], v189, (char *)*((unsigned int *)this + 130));
        v200 = (char **)v452;
        v199 = v453;
        v201 = v198;
        if (v453 != v452)
        {
          do
          {
            long long v202 = *((_OWORD *)v199 - 1);
            *((_OWORD *)v201 - 2) = *((_OWORD *)v199 - 2);
            *((_OWORD *)v201 - 1) = v202;
            v201 -= 4;
            v199 -= 4;
          }
          while (v199 != v200);
          v199 = v200;
        }
        v191 = v198 + 4;
        v452 = v201;
        unint64_t v454 = (unint64_t)&v195[4 * v197];
        if (v199) {
          operator delete(v199);
        }
      }
      else
      {
        BufferView2D<double>::BufferView2D(v453, v189, (char *)*((unsigned int *)this + 130));
        v191 = v190 + 4;
      }
      v453 = v191;

      v203 = +[NSMutableData dataWithLength:8 * (v398 + 1)];
      [v413 addObject:v203];

      v204 = [v413 lastObject];
      v205 = v456;
      if ((unint64_t)v456 >= v457)
      {
        unint64_t v207 = 0xAAAAAAAAAAAAAAABLL * ((v456 - (unsigned char *)v455) >> 3);
        unint64_t v208 = v207 + 1;
        if (v207 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v457 - (void)v455) >> 3) > v208) {
          unint64_t v208 = 0x5555555555555556 * ((uint64_t)(v457 - (void)v455) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v457 - (void)v455) >> 3) >= 0x555555555555555) {
          unint64_t v209 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v209 = v208;
        }
        if (v209)
        {
          v210 = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v209);
          uint64_t v212 = v211;
        }
        else
        {
          v210 = 0;
          uint64_t v212 = 0;
        }
        v213 = (char *)BufferView<double>::BufferView(&v210[3 * v207], v204);
        v215 = v455;
        v214 = v456;
        v216 = v213;
        if (v456 != v455)
        {
          do
          {
            long long v217 = *(_OWORD *)(v214 - 3);
            *((void *)v216 - 1) = *(v214 - 1);
            *(_OWORD *)(v216 - 24) = v217;
            v216 -= 24;
            v214 -= 3;
          }
          while (v214 != v215);
          v214 = v455;
        }
        v206 = v213 + 24;
        v455 = v216;
        unint64_t v457 = (unint64_t)&v210[3 * v212];
        if (v214) {
          operator delete(v214);
        }
      }
      else
      {
        BufferView<double>::BufferView(v456, v204);
        v206 = v205 + 24;
      }
      v456 = v206;
    }
  }
  v401 = +[NSMutableData dataWithLength:8 * (*((_DWORD *)this + 130) * v186)];
  BufferView2D<double>::BufferView2D(v451, v401, (char *)*((unsigned int *)this + 130));
  contexta = +[NSMutableData dataWithCapacity:8 * (v398 + 1)];
  v218 = (char *)*((void *)this + 59);
  if (!v218)
  {
    v410 = 0;
    v219 = 0;
LABEL_249:
    v222 = 0;
    goto LABEL_250;
  }
  if ((unint64_t)v218 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  v219 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>((unint64_t)v218);
  v410 = &v219[24 * v220];
  v218 = (char *)*((void *)this + 59);
  if (!v218) {
    goto LABEL_249;
  }
  if ((unint64_t)v218 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  v218 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>((unint64_t)v218);
  v222 = &v218[24 * v221];
LABEL_250:
  v421 = v218;
  v432 = v219;
  v223 = (uint64_t **)*((void *)this + 58);
  if (v223)
  {
    v224 = 0;
    v225 = v219;
    v226 = v218;
    do
    {
      if (v225 >= v410)
      {
        unint64_t v227 = 0xAAAAAAAAAAAAAAABLL * ((v225 - v432) >> 3) + 1;
        if (v227 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v410 - v432) >> 3) > v227) {
          unint64_t v227 = 0x5555555555555556 * ((v410 - v432) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v410 - v432) >> 3) >= 0x555555555555555) {
          unint64_t v228 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v228 = v227;
        }
        if (v228)
        {
          v229 = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v228);
          uint64_t v231 = v230;
        }
        else
        {
          v229 = 0;
          uint64_t v231 = 0;
        }
        v232 = (char *)BufferView<ShaderProfilerSampleTimelineInfo>::BufferView(&v229[(v225 - v432) >> 3], v223[11]);
        if (v225 == v432)
        {
          v236 = v232;
          v234 = v432;
        }
        else
        {
          v233 = v232;
          v234 = v432;
          do
          {
            long long v235 = *(_OWORD *)(v225 - 24);
            v236 = v233 - 24;
            *((void *)v233 - 1) = *((void *)v225 - 1);
            *(_OWORD *)(v233 - 24) = v235;
            v225 -= 24;
            v233 -= 24;
          }
          while (v225 != v432);
        }
        v410 = (char *)&v229[3 * v231];
        v225 = v232 + 24;
        if (v234) {
          operator delete(v234);
        }
        v432 = v236;
      }
      else
      {
        BufferView<ShaderProfilerSampleTimelineInfo>::BufferView(v225, v223[11]);
        v225 += 24;
      }
      if (v226 >= v222)
      {
        unint64_t v237 = 0xAAAAAAAAAAAAAAABLL * ((v226 - v421) >> 3) + 1;
        if (v237 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v222 - v421) >> 3) > v237) {
          unint64_t v237 = 0x5555555555555556 * ((v222 - v421) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v222 - v421) >> 3) >= 0x555555555555555) {
          unint64_t v238 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v238 = v237;
        }
        if (v238)
        {
          v239 = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v238);
          uint64_t v241 = v240;
        }
        else
        {
          v239 = 0;
          uint64_t v241 = 0;
        }
        v242 = (char *)BufferView<ShaderProfilerSampleTimelineInfoEx>::BufferView(&v239[(v226 - v421) >> 3], v223[12]);
        if (v226 == v421)
        {
          v246 = v242;
          v244 = v421;
        }
        else
        {
          v243 = v242;
          v244 = v421;
          do
          {
            long long v245 = *(_OWORD *)(v226 - 24);
            v246 = v243 - 24;
            *((void *)v243 - 1) = *((void *)v226 - 1);
            *(_OWORD *)(v243 - 24) = v245;
            v226 -= 24;
            v243 -= 24;
          }
          while (v226 != v421);
        }
        v222 = (char *)&v239[3 * v241];
        v226 = v242 + 24;
        if (v244) {
          operator delete(v244);
        }
        v421 = v246;
      }
      else
      {
        BufferView<ShaderProfilerSampleTimelineInfoEx>::BufferView(v226, v223[12]);
        v226 += 24;
      }
      v224 = (uint64_t *)((char *)v224 + *((void *)v225 - 1));
      v223 = (uint64_t **)*v223;
    }
    while (v223);
    if (v224)
    {
      if ((unint64_t)v224 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      v224 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>((unint64_t)v224);
      v248 = (char *)&v224[3 * v247];
      goto LABEL_296;
    }
  }
  else
  {
    v224 = 0;
  }
  v248 = 0;
LABEL_296:
  if (v418)
  {
    uint64_t v249 = 0;
    v250 = v224;
    do
    {
      if (*(void *)&v432[24 * v249 + 16])
      {
        unint64_t v251 = 0;
        do
        {
          uint64_t v252 = *(void *)&v432[24 * v249] + 24 * v251;
          uint64_t v253 = *(void *)&v421[24 * v249] + 24 * v251;
          if (v250 >= (uint64_t *)v248)
          {
            unint64_t v254 = 0xAAAAAAAAAAAAAAABLL * (v250 - v224) + 1;
            if (v254 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v248 - (char *)v224) >> 3) > v254) {
              unint64_t v254 = 0x5555555555555556 * ((v248 - (char *)v224) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v248 - (char *)v224) >> 3) >= 0x555555555555555) {
              unint64_t v255 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v255 = v254;
            }
            v256 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v255);
            v258 = &v256[8 * (v250 - v224)];
            *(void *)v258 = v252;
            *((void *)v258 + 1) = v253;
            *((_DWORD *)v258 + 4) = v249;
            if (v250 == v224)
            {
              v261 = &v256[8 * (v250 - v224)];
            }
            else
            {
              v259 = &v256[8 * (v250 - v224)];
              do
              {
                long long v260 = *(_OWORD *)(v250 - 3);
                v261 = v259 - 24;
                *((void *)v259 - 1) = *(v250 - 1);
                *(_OWORD *)(v259 - 24) = v260;
                v250 -= 3;
                v259 -= 24;
              }
              while (v250 != v224);
            }
            v248 = &v256[24 * v257];
            v250 = (uint64_t *)(v258 + 24);
            if (v224) {
              operator delete(v224);
            }
            v224 = (uint64_t *)v261;
          }
          else
          {
            uint64_t *v250 = v252;
            v250[1] = v253;
            *((_DWORD *)v250 + 4) = v249;
            v250 += 3;
          }
          ++v251;
        }
        while (v251 < *(void *)&v432[24 * v249 + 16]);
      }
      ++v249;
    }
    while (v249 != v428);
  }
  else
  {
    v250 = v224;
  }
  unint64_t v262 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v250 - v224));
  if (v250 == v224) {
    uint64_t v263 = 0;
  }
  else {
    uint64_t v263 = v262;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *,false>((unint64_t)v224, v250, v263, 1);
  *(_OWORD *)v448 = 0u;
  long long v449 = 0u;
  LODWORD(v450) = 1065353216;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v448, 0x20uLL);
  int64x2_t v445 = 0u;
  long long v446 = 0u;
  int v447 = 1065353216;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v445, 0x20uLL);
  v403 = +[NSMutableData dataWithCapacity:(char *)v250 - (char *)v224];
  v411 = +[NSMutableData dataWithCapacity:(char *)v250 - (char *)v224];
  v442 = 0;
  v443 = 0;
  unint64_t v444 = 0;
  std::vector<unsigned long long>::reserve((void **)&v442, v398 + 1);
  if ((unint64_t)v416 >= v423)
  {
    v265 = v443;
    unint64_t v264 = v444;
    v266 = v442;
    do
    {
      if ((unint64_t)v265 >= v264)
      {
        uint64_t v269 = v265 - v266;
        unint64_t v270 = v269 + 1;
        if ((unint64_t)(v269 + 1) >> 61)
        {
          unint64_t v444 = v264;
          v442 = v266;
          abort();
        }
        if ((uint64_t)(v264 - (void)v266) >> 2 > v270) {
          unint64_t v270 = (uint64_t)(v264 - (void)v266) >> 2;
        }
        if (v264 - (unint64_t)v266 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v271 = v270;
        }
        if (v271) {
          unint64_t v271 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v271);
        }
        else {
          uint64_t v272 = 0;
        }
        v273 = (unint64_t *)(v271 + 8 * v269);
        unint64_t *v273 = v423;
        v268 = v273 + 1;
        while (v265 != v266)
        {
          unint64_t v274 = *--v265;
          *--v273 = v274;
        }
        unint64_t v264 = v271 + 8 * v272;
        v443 = v268;
        if (v266) {
          operator delete(v266);
        }
        v266 = v273;
        unint64_t v267 = v423;
      }
      else
      {
        unint64_t v267 = v423;
        unint64_t *v265 = v423;
        v268 = v265 + 1;
      }
      v443 = v268;
      v265 = v268;
      unint64_t v423 = v267 + 60;
    }
    while (v267 + 60 <= (unint64_t)v416);
    unint64_t v444 = v264;
    v442 = v266;
  }
  v439 = 0;
  v440 = 0;
  v441 = 0;
  std::vector<std::pair<unsigned long long,unsigned long long>>::reserve((void **)&v439, 0xAAAAAAAAAAAAAAABLL * (v250 - v224));
  if (v250 != v224)
  {
    for (iuint64_t i = (unsigned int **)v224; ii != (unsigned int **)v250; ii += 3)
    {
      v276 = *ii;
      unint64_t v277 = ((unint64_t)**ii >> 1) & 7 | ((unint64_t)(*ii)[5] << 32);
      if (!v448[1]) {
        goto LABEL_363;
      }
      uint8x8_t v278 = (uint8x8_t)vcnt_s8((int8x8_t)v448[1]);
      v278.i16[0] = vaddlv_u8(v278);
      if (v278.u32[0] > 1uLL)
      {
        unint64_t v279 = ((unint64_t)**ii >> 1) & 7 | ((unint64_t)(*ii)[5] << 32);
        if ((void *)v277 >= v448[1]) {
          unint64_t v279 = v277 % (unint64_t)v448[1];
        }
      }
      else
      {
        unint64_t v279 = ((unint64_t)v448[1] - 1) & v277;
      }
      v280 = (long long **)*((void *)v448[0] + v279);
      if (v280)
      {
        for (juint64_t j = *v280; jj; juint64_t j = *(long long **)jj)
        {
          unint64_t v282 = *((void *)jj + 1);
          if (v282 == v277)
          {
            if (*((void *)jj + 2) == v277) {
              break;
            }
          }
          else
          {
            if (v278.u32[0] > 1uLL)
            {
              if ((void *)v282 >= v448[1]) {
                v282 %= (unint64_t)v448[1];
              }
            }
            else
            {
              v282 &= (unint64_t)v448[1] - 1;
            }
            if (v282 != v279) {
              goto LABEL_363;
            }
          }
        }
      }
      else
      {
LABEL_363:
        juint64_t j = 0;
      }
      v283 = v443;
      if ((unint64_t)v443 >= v444)
      {
        v285 = v442;
        uint64_t v286 = v443 - v442;
        unint64_t v287 = v286 + 1;
        if ((unint64_t)(v286 + 1) >> 61) {
          goto LABEL_585;
        }
        v288 = *ii;
        uint64_t v289 = v444 - (void)v442;
        if ((uint64_t)(v444 - (void)v442) >> 2 > v287) {
          unint64_t v287 = v289 >> 2;
        }
        if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v290 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v290 = v287;
        }
        if (v290) {
          unint64_t v290 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v290);
        }
        else {
          uint64_t v291 = 0;
        }
        v292 = (unint64_t *)(v290 + 8 * v286);
        unint64_t *v292 = *(void *)(v288 + 3);
        unint64_t v284 = (unint64_t)(v292 + 1);
        while (v283 != v285)
        {
          unint64_t v293 = *--v283;
          *--v292 = v293;
        }
        v442 = v292;
        unint64_t v444 = v290 + 8 * v291;
        if (v285) {
          operator delete(v285);
        }
        v276 = v288;
      }
      else
      {
        unint64_t *v443 = *(void *)(v276 + 3);
        unint64_t v284 = (unint64_t)(v283 + 1);
      }
      v443 = (unint64_t *)v284;
      if (*(unsigned char *)v276)
      {
        if (jj)
        {
          int v294 = *((_DWORD *)jj + 6) - 1;
          *((_DWORD *)jj + 6) = v294;
          if (!v294)
          {
            v295 = v276;
            [v403 appendBytes:length:];
            [v411 appendBytes:ii[1] length:24];
            unint64_t v296 = (unint64_t)v448[1];
            unint64_t v297 = *((void *)jj + 1);
            uint8x8_t v298 = (uint8x8_t)vcnt_s8((int8x8_t)v448[1]);
            v298.i16[0] = vaddlv_u8(v298);
            if (v298.u32[0] > 1uLL)
            {
              if ((void *)v297 >= v448[1]) {
                v297 %= (unint64_t)v448[1];
              }
            }
            else
            {
              v297 &= (unint64_t)v448[1] - 1;
            }
            v302 = (long long *)*((void *)v448[0] + v297);
            do
            {
              v303 = v302;
              v302 = *(long long **)v302;
            }
            while (v302 != jj);
            if (v303 == &v449) {
              goto LABEL_430;
            }
            unint64_t v304 = *((void *)v303 + 1);
            if (v298.u32[0] > 1uLL)
            {
              if ((void *)v304 >= v448[1]) {
                v304 %= (unint64_t)v448[1];
              }
            }
            else
            {
              v304 &= (unint64_t)v448[1] - 1;
            }
            if (v304 != v297)
            {
LABEL_430:
              if (!*(void *)jj) {
                goto LABEL_431;
              }
              unint64_t v314 = *(void *)(*(void *)jj + 8);
              if (v298.u32[0] > 1uLL)
              {
                if ((void *)v314 >= v448[1]) {
                  v314 %= (unint64_t)v448[1];
                }
              }
              else
              {
                v314 &= (unint64_t)v448[1] - 1;
              }
              if (v314 != v297) {
LABEL_431:
              }
                *((void *)v448[0] + v297) = 0;
            }
            v315 = *(long long **)jj;
            if (*(void *)jj)
            {
              unint64_t v316 = *((void *)v315 + 1);
              if (v298.u32[0] > 1uLL)
              {
                if (v316 >= v296) {
                  v316 %= v296;
                }
              }
              else
              {
                v316 &= v296 - 1;
              }
              if (v316 != v297)
              {
                *((void *)v448[0] + v316) = v303;
                v315 = *(long long **)jj;
              }
            }
            *(void *)v303 = v315;
            --*((void *)&v449 + 1);
            operator delete(jj);
            if (*(void *)ii[1] <= 0xFFFFFFFEuLL)
            {
              v317 = (long long *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(&v445, v277);
              if (v317)
              {
                unint64_t v318 = v445.u64[1];
                unint64_t v319 = *((void *)v317 + 1);
                uint8x8_t v320 = (uint8x8_t)vcnt_s8((int8x8_t)v445.u64[1]);
                v320.i16[0] = vaddlv_u8(v320);
                if (v320.u32[0] > 1uLL)
                {
                  if (v319 >= v445.i64[1]) {
                    v319 %= v445.i64[1];
                  }
                }
                else
                {
                  v319 &= v445.i64[1] - 1;
                }
                v326 = *(long long **)(v445.i64[0] + 8 * v319);
                do
                {
                  v327 = v326;
                  v326 = *(long long **)v326;
                }
                while (v326 != v317);
                if (v327 == &v446) {
                  goto LABEL_486;
                }
                unint64_t v328 = *((void *)v327 + 1);
                if (v320.u32[0] > 1uLL)
                {
                  if (v328 >= v445.i64[1]) {
                    v328 %= v445.i64[1];
                  }
                }
                else
                {
                  v328 &= v445.i64[1] - 1;
                }
                if (v328 != v319)
                {
LABEL_486:
                  if (!*(void *)v317) {
                    goto LABEL_487;
                  }
                  unint64_t v338 = *(void *)(*(void *)v317 + 8);
                  if (v320.u32[0] > 1uLL)
                  {
                    if (v338 >= v445.i64[1]) {
                      v338 %= v445.i64[1];
                    }
                  }
                  else
                  {
                    v338 &= v445.i64[1] - 1;
                  }
                  if (v338 != v319) {
LABEL_487:
                  }
                    *(void *)(v445.i64[0] + 8 * v319) = 0;
                }
                uint64_t v339 = *(void *)v317;
                if (*(void *)v317)
                {
                  unint64_t v340 = *(void *)(v339 + 8);
                  if (v320.u32[0] > 1uLL)
                  {
                    if (v340 >= v318) {
                      v340 %= v318;
                    }
                  }
                  else
                  {
                    v340 &= v318 - 1;
                  }
                  if (v340 != v319)
                  {
                    *(void *)(v445.i64[0] + 8 * v340) = v327;
                    uint64_t v339 = *(void *)v317;
                  }
                }
                *(void *)v327 = v339;
                --*((void *)&v446 + 1);
                operator delete(v317);
              }
              if (!*((void *)&v446 + 1) && v439 != v440)
              {
                unint64_t v341 = *(void *)(v295 + 3);
                if (*((void *)v440 - 2) <= v341) {
                  *((void *)v440 - 1) = v341;
                }
              }
            }
          }
        }
      }
      else
      {
        if (!jj)
        {
          v299 = v276;
          [v403 appendBytes:length:];
          [v411 appendBytes:ii[1] length:24];
          unint64_t v300 = (unint64_t)v448[1];
          if (v448[1])
          {
            uint8x8_t v301 = (uint8x8_t)vcnt_s8((int8x8_t)v448[1]);
            v301.i16[0] = vaddlv_u8(v301);
            if (v301.u32[0] > 1uLL)
            {
              unint64_t v284 = v277;
              if ((void *)v277 >= v448[1]) {
                unint64_t v284 = v277 % (unint64_t)v448[1];
              }
            }
            else
            {
              unint64_t v284 = ((unint64_t)v448[1] - 1) & v277;
            }
            v305 = (void *)*((void *)v448[0] + v284);
            if (v305)
            {
              for (kk = (void *)*v305; kk; kk = (void *)*kk)
              {
                unint64_t v307 = kk[1];
                if (v307 == v277)
                {
                  if (kk[2] == v277) {
                    goto LABEL_454;
                  }
                }
                else
                {
                  if (v301.u32[0] > 1uLL)
                  {
                    if ((void *)v307 >= v448[1]) {
                      v307 %= (unint64_t)v448[1];
                    }
                  }
                  else
                  {
                    v307 &= (unint64_t)v448[1] - 1;
                  }
                  if (v307 != v284) {
                    break;
                  }
                }
              }
            }
          }
          v308 = operator new(0x20uLL);
          void *v308 = 0;
          v308[1] = v277;
          v308[2] = v277;
          *((_DWORD *)v308 + 6) = 1;
          float v309 = (float)(unint64_t)(*((void *)&v449 + 1) + 1);
          if (!v300 || (float)(*(float *)&v450 * (float)v300) < v309)
          {
            BOOL v310 = (v300 & (v300 - 1)) != 0;
            if (v300 < 3) {
              BOOL v310 = 1;
            }
            unint64_t v311 = v310 | (2 * v300);
            unint64_t v312 = vcvtps_u32_f32(v309 / *(float *)&v450);
            if (v311 <= v312) {
              size_t v313 = v312;
            }
            else {
              size_t v313 = v311;
            }
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v448, v313);
            unint64_t v300 = (unint64_t)v448[1];
            if (((unint64_t)v448[1] & ((unint64_t)v448[1] - 1)) != 0)
            {
              if ((void *)v277 >= v448[1]) {
                unint64_t v284 = v277 % (unint64_t)v448[1];
              }
              else {
                unint64_t v284 = v277;
              }
            }
            else
            {
              unint64_t v284 = ((unint64_t)v448[1] - 1) & v277;
            }
          }
          v321 = v448[0];
          v322 = (void *)*((void *)v448[0] + v284);
          if (v322)
          {
            void *v308 = *v322;
            goto LABEL_452;
          }
          void *v308 = v449;
          *(void *)&long long v449 = v308;
          v321[v284] = &v449;
          if (*v308)
          {
            unint64_t v323 = *(void *)(*v308 + 8);
            if ((v300 & (v300 - 1)) != 0)
            {
              if (v323 >= v300) {
                v323 %= v300;
              }
            }
            else
            {
              v323 &= v300 - 1;
            }
            v322 = (char *)v448[0] + 8 * v323;
LABEL_452:
            void *v322 = v308;
          }
          ++*((void *)&v449 + 1);
LABEL_454:
          if (*(void *)ii[1] <= 0xFFFFFFFEuLL)
          {
            if (!*((void *)&v446 + 1))
            {
              v324 = v440;
              if (v440 >= v441)
              {
                v329 = v439;
                uint64_t v330 = (v440 - v439) >> 4;
                unint64_t v331 = v330 + 1;
                if ((unint64_t)(v330 + 1) >> 60) {
LABEL_585:
                }
                  abort();
                uint64_t v332 = v441 - v439;
                if ((v441 - v439) >> 3 > v331) {
                  unint64_t v331 = v332 >> 3;
                }
                if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v333 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v333 = v331;
                }
                v334 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v333);
                v336 = &v334[16 * v330];
                *(void *)v336 = *(void *)(v299 + 3);
                *((void *)v336 + 1) = *(void *)(v299 + 3);
                v337 = v336;
                if (v324 != v329)
                {
                  do
                  {
                    *((_OWORD *)v337 - 1) = *((_OWORD *)v324 - 1);
                    v337 -= 16;
                    v324 -= 16;
                  }
                  while (v324 != v329);
                  v324 = v329;
                }
                v325 = v336 + 16;
                v439 = v337;
                v441 = &v334[16 * v335];
                if (v324) {
                  operator delete(v324);
                }
              }
              else
              {
                *(void *)v440 = *(void *)(v299 + 3);
                *((void *)v324 + 1) = *(void *)(v299 + 3);
                v325 = v324 + 16;
              }
              v440 = v325;
            }
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>((uint64_t)&v445, v277, v277);
          }
          continue;
        }
        ++*((_DWORD *)jj + 6);
      }
    }
  }
  v343 = v439;
  v342 = v440;
  unint64_t v344 = v440 - v439;
  unint64_t v345 = (v440 - v439) >> 4;
  +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:");
  id v417 = (id)objc_claimAutoreleasedReturnValue();
  v397 = v343;
  if (v343 == v342) {
    unint64_t v346 = 0;
  }
  else {
    unint64_t v346 = *((void *)v343 + 1);
  }
  if (v344 >= 0x11)
  {
    v347 = v343 + 16;
    unint64_t v348 = 1;
    do
    {
      if (v346 + 6000 < *v347)
      {
        v349 = +[NSNumber numberWithUnsignedLongLong:v346];
        v491[0] = v349;
        if (*v347 - 6000 <= v346 + 6000) {
          uint64_t v350 = v346 + 6000;
        }
        else {
          uint64_t v350 = *v347 - 6000;
        }
        v351 = +[NSNumber numberWithUnsignedLongLong:v350];
        v491[1] = v351;
        v352 = +[NSArray arrayWithObjects:v491 count:2];
        [v417 addObject:v352];
      }
      if (v346 <= v347[1]) {
        unint64_t v346 = v347[1];
      }
      ++v348;
      v347 += 2;
    }
    while (v348 < v345);
  }
  objc_storeStrong((id *)(*((void *)this + 61) + 328), v417);
  v353 = (void ***)v442;
  v419 = (void ***)v443;
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  if (v428)
  {
    v354 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v428);
    bzero(v354, v396);
  }
  else
  {
    v354 = 0;
  }
  v399 = v353;
  if (v353 != v419)
  {
    uint64_t v355 = 0;
    uint64_t v356 = 0;
    if ((unint64_t)((v404 - v434) >> 3) <= 1) {
      uint64_t v357 = 1;
    }
    else {
      uint64_t v357 = (v404 - v434) >> 3;
    }
    v358 = (char *)v461;
    v359 = v455;
    v360 = v452;
    v361 = (char *)v458;
    v362 = v399;
    do
    {
      v477 = 0;
      v424 = v362;
      v477 = *v362;
      [contexta appendBytes:&v477 length:8];
      if (v404 != v434)
      {
        uint64_t v363 = 0;
        v364 = v477;
        do
        {
          v365 = &v425[24 * v363];
          unint64_t v366 = *(void *)&v434[8 * v363];
          unint64_t v367 = *((void *)v365 + 2);
          if (v366 < v367)
          {
            while (*(void *)(*(void *)v365 + 8 * v366) <= (unint64_t)v364)
            {
              if (v367 == ++v366)
              {
                unint64_t v366 = *((void *)v365 + 2);
                break;
              }
            }
          }
          if (v366 <= 1) {
            unint64_t v366 = 1;
          }
          double v368 = (double)v366 + -1.0;
          *(void *)&v434[8 * v363] = v366 - 1;
          if (v366 < *((void *)v365 + 2))
          {
            uint64_t v369 = *(void *)v365;
            unint64_t v370 = *(void *)(v369 + 8 * (v366 - 1));
            if ((unint64_t)v364 > v370) {
              double v368 = v368 + (double)((unint64_t)v364 - v370) / (double)(*(void *)(v369 + 8 * v366) - v370);
            }
          }
          *((double *)v354 + v363++) = v368;
        }
        while (v363 != v357);
      }
      if (v428)
      {
        uint64_t v371 = 0;
        uint64_t v372 = *((unsigned int *)this + 130);
        do
        {
          uint64_t v373 = *(unsigned int *)&v434[8 * v371];
          v374 = &v358[32 * v371];
          unint64_t v375 = *((void *)v374 + 2);
          *(void *)(v359[3 * v371] + 8 * v356) = *((void *)v354 + v371);
          if (v372)
          {
            unint64_t v376 = 0;
            if (v375 <= (v373 + 1)) {
              uint64_t v377 = v373;
            }
            else {
              uint64_t v377 = (v373 + 1);
            }
            double v378 = (double)v373;
            uint64_t v379 = *(void *)v374;
            uint64_t v380 = *((void *)v374 + 3);
            uint64_t v381 = *(void *)v374 + 8 * v380 * v377;
            uint64_t v382 = v379 + 8 * v380 * v373;
            v383 = &v451[0][v355 * (uint64_t)v451[3]];
            uint64_t v384 = v360[4 * v371] + v355 * v360[4 * v371 + 3];
            do
            {
              double v385 = *((double *)v354 + v371) - v378;
              if (v385 < 0.0) {
                double v385 = 0.0;
              }
              double v386 = (1.0 - v385) * *(double *)(v382 + 8 * v376) + v385 * *(double *)(v381 + 8 * v376);
              *(double *)(v384 + 8 * v376) = v386;
              if ((*(void *)&v361[(v376 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v376))
              {
                double v387 = v386 * *(double *)(*(void *)(*((void *)this + 61) + 232) + 8 * v371)
                     + *(double *)&v383[8 * v376];
                if (v387 > 100.0) {
                  double v387 = 100.0;
                }
              }
              else
              {
                double v387 = v386 + *(double *)&v383[8 * v376];
              }
              *(double *)&v383[8 * v376++] = v387;
            }
            while (v372 != v376);
          }
          ++v371;
        }
        while (v371 != v428);
      }
      ++v356;
      v362 = v424 + 1;
      v355 += 8;
    }
    while (v424 + 1 != v419);
  }
  *(void *)&long long v465 = @"frame index";
  v388 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*((void *)this + 61) + 360)];
  v477 = v388;
  v478.i64[0] = (uint64_t)contexta;
  *((void *)&v465 + 1) = @"sampled timestamps";
  *(void *)&long long v466 = @"aggregated timeline data";
  v478.i64[1] = (uint64_t)v403;
  v479 = v411;
  *((void *)&v466 + 1) = @"aggregated timeline data ex";
  *(void *)&long long v467 = @"aggregated derived counters";
  v480 = (long long *)v401;
  *(void *)&long long v481 = v415;
  *((void *)&v467 + 1) = @"ring buffer sampled counter data";
  __p[0] = @"ring buffer blend factors";
  *((void *)&v481 + 1) = v413;
  v482 = (long long *)v408;
  __p[1] = @"core counts";
  CFStringRef v469 = @"Frame Consistent Perf Info";
  uint64_t v389 = *((void *)this + 61);
  v390 = (GRCPerFrameData *)&off_7595F8;
  v392 = *(GRCPerFrameData **)(v389 + 320);
  v391 = *(void **)(v389 + 328);
  if (v392) {
    v390 = v392;
  }
  CFStringRef v470 = @"Restore Timestamps";
  if (!v391) {
    v391 = &__NSArray0__struct;
  }
  v483 = v390;
  v484 = v391;
  v393 = +[NSDictionary dictionaryWithObjects:&v477 forKeys:&v465 count:10];

  id v394 = (id)(*(uint64_t (**)(void))(*((void *)this + 63) + 16))();
  if (v354) {
    operator delete(v354);
  }

  if (v397) {
    operator delete(v397);
  }
  if (v399) {
    operator delete(v399);
  }

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v445);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v448);
  if (v224) {
    operator delete(v224);
  }
  if (v421) {
    operator delete(v421);
  }
  if (v432) {
    operator delete(v432);
  }

  if (v452) {
    operator delete(v452);
  }

  if (v455) {
    operator delete(v455);
  }

  if (v458) {
    operator delete(v458);
  }
  if (v434) {
    operator delete(v434);
  }
  if (v461) {
    operator delete(v461);
  }
  if (v425) {
    operator delete(v425);
  }
}

void sub_30E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a42) {
    operator delete(a42);
  }

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a51);
  if (v70) {
    operator delete(v70);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a29) {
    operator delete(a29);
  }

  if (a61) {
    operator delete(a61);
  }

  if (a64) {
    operator delete(a64);
  }

  uint64_t v72 = (void *)a67;
  if (v72) {
    operator delete(v72);
  }
  if (a30) {
    operator delete(a30);
  }
  if (a70) {
    operator delete(a70);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void std::vector<BufferView2D<double>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5)
  {
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned int v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(a2);
    unint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v7 = &v4[32 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 32;
        v8 -= 32;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = *(void *)i)
      {
        unint64_t v11 = *(void *)(i + 8);
        if (v11 == a2)
        {
          if (*(_DWORD *)(i + 16) == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  id v12 = (void *)(a1 + 16);
  unint64_t v13 = operator new(0x88uLL);
  v35[0] = (uint64_t)v13;
  v35[1] = a1 + 16;
  *unint64_t v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  v13[16] = 0;
  *((_DWORD *)v13 + 6) = 0;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unint64_t v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v20 = operator new(8 * *(void *)&prime);
  unsigned int v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  uint8x8_t v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v12;
    BOOL v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *uint8x8_t v23 = *v29;
          *BOOL v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v30) = v29;
          BOOL v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        uint8x8_t v23 = v29;
        BOOL v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  unint64_t v31 = *(uint64_t **)(*(void *)a1 + 8 * v6);
  uint64_t i = v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    uint64_t *v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v6) = v12;
  if (*(void *)i)
  {
    unint64_t v32 = *(void *)(*(void *)i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    unint64_t v31 = (uint64_t *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,RingBufferSampledData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,RingBufferSampledData>,void *>>>>::reset[abi:nn180100](v35);
  return i;
}

void sub_30F080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,RingBufferSampledData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,RingBufferSampledData>,void *>>>>::reset[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **BufferView2D<double>::BufferView2D(char **a1, void *a2, char *a3)
{
  id v5 = a2;
  unint64_t v6 = (char *)[v5 mutableBytes];
  *a1 = v6;
  if (a3)
  {
    unint64_t v7 = (unint64_t)[v5 length];
    unint64_t v6 = *a1;
    unint64_t v8 = v7 / (8 * (uint64_t)a3);
  }
  else
  {
    unint64_t v8 = 0;
  }
  a1[1] = &v6[8 * v8 * (void)a3];
  a1[2] = (char *)v8;
  a1[3] = a3;

  return a1;
}

void sub_30F110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *,false>(unint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v99 = (uint64_t)(a2 - 6);
    uint64_t v93 = (long long *)(a2 - 18);
    uint64_t v94 = (long long *)(a2 - 12);
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)a2 - v9;
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0uLL:
              case 1uLL:
                return *(double *)&v29;
              case 2uLL:
                if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v99, *(void *)a1, *(_DWORD *)(a1 + 16)))
                {
                  long long v43 = *(_OWORD *)a1;
                  uint64_t v109 = *(void *)(a1 + 16);
                  long long v108 = v43;
                  long long v44 = *(_OWORD *)v99;
                  *(void *)(a1 + 16) = *(void *)(v99 + 16);
                  *(_OWORD *)a1 = v44;
                  long long v29 = v108;
                  *(void *)(v99 + 16) = v109;
                  *(_OWORD *)uint64_t v99 = v29;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)a1, (_DWORD *)(a1 + 24), (long long *)v99);
                break;
              case 4uLL:
                *(void *)&long long v29 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(a1, (_DWORD *)(a1 + 24), a1 + 48, v99).n128_u64[0];
                break;
              case 5uLL:
                *(void *)&long long v29 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(a1, (_DWORD *)(a1 + 24), (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 72), v99).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return *(double *)&v29;
          }
          if (v10 <= 575)
          {
            unint64_t v45 = (_DWORD *)(a1 + 24);
            BOOL v47 = (_DWORD *)a1 == a2 || v45 == a2;
            if (a4)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                v49 = (_DWORD *)a1;
                do
                {
                  uint64_t v50 = *(void *)v49;
                  unsigned int v51 = v49[4];
                  v49 = v45;
                  if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v45, v50, v51))
                  {
                    long long v52 = *(_OWORD *)v49;
                    uint64_t v109 = *((void *)v49 + 2);
                    long long v108 = v52;
                    uint64_t v53 = v48;
                    while (1)
                    {
                      uint64_t v54 = a1 + v53;
                      *(_OWORD *)(v54 + 24) = *(_OWORD *)(a1 + v53);
                      *(void *)(v54 + 40) = *(void *)(a1 + v53 + 16);
                      if (!v53) {
                        break;
                      }
                      v53 -= 24;
                      if (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v108, *(void *)(v54 - 24), *(_DWORD *)(v54 - 8)))
                      {
                        uint64_t v55 = a1 + v53 + 24;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v55 = a1;
LABEL_80:
                    long long v29 = v108;
                    *(void *)(v55 + 16) = v109;
                    *(_OWORD *)uint64_t v55 = v29;
                  }
                  unint64_t v45 = v49 + 6;
                  v48 += 24;
                }
                while (v49 + 6 != a2);
              }
            }
            else if (!v47)
            {
              do
              {
                uint64_t v86 = *(void *)a1;
                unsigned int v87 = *(_DWORD *)(a1 + 16);
                a1 = (unint64_t)v45;
                if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v45, v86, v87))
                {
                  long long v88 = *(_OWORD *)a1;
                  uint64_t v109 = *(void *)(a1 + 16);
                  long long v108 = v88;
                  unint64_t v89 = a1;
                  do
                  {
                    unint64_t v90 = v89 - 24;
                    *(_OWORD *)unint64_t v89 = *(_OWORD *)(v89 - 24);
                    *(void *)(v89 + 16) = *(void *)(v89 - 8);
                    BOOL v91 = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v108, *(void *)(v89 - 48), *(_DWORD *)(v89 - 32));
                    unint64_t v89 = v90;
                  }
                  while (v91);
                  long long v29 = v108;
                  *(void *)(v90 + 16) = v109;
                  *(_OWORD *)unint64_t v90 = v29;
                }
                unint64_t v45 = (_DWORD *)(a1 + 24);
              }
              while ((_DWORD *)(a1 + 24) != a2);
            }
            return *(double *)&v29;
          }
          if (!a3)
          {
            if ((_DWORD *)a1 != a2)
            {
              id v95 = a2;
              int64_t v56 = (v11 - 2) >> 1;
              int64_t v105 = v56;
              do
              {
                int64_t v57 = v56;
                if (v105 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  unint64_t v59 = a1 + 24 * v58;
                  if (2 * v56 + 2 < (uint64_t)v11
                    && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(a1 + 24 * v58), *(void *)(v59 + 24), *(_DWORD *)(v59 + 40)))
                  {
                    v59 += 24;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  unint64_t v60 = a1 + 24 * v57;
                  uint64_t v61 = *(void *)v60;
                  unsigned int v62 = *(_DWORD *)(v60 + 16);
                  if (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v59, *(void *)v60, v62))
                  {
                    uint64_t v100 = *(void *)(v60 + 8);
                    int64_t v103 = v57;
                    int v97 = *(_DWORD *)(v60 + 20);
                    do
                    {
                      unint64_t v63 = v59;
                      long long v64 = *(_OWORD *)v59;
                      *(void *)(v60 + 16) = *(void *)(v59 + 16);
                      *(_OWORD *)unint64_t v60 = v64;
                      if (v105 < v58) {
                        break;
                      }
                      uint64_t v65 = (2 * v58) | 1;
                      unint64_t v59 = a1 + 24 * v65;
                      if (2 * v58 + 2 < (uint64_t)v11
                        && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(a1 + 24 * v65), *(void *)(v59 + 24), *(_DWORD *)(v59 + 40)))
                      {
                        v59 += 24;
                        uint64_t v65 = 2 * v58 + 2;
                      }
                      unint64_t v60 = v63;
                      uint64_t v58 = v65;
                    }
                    while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v59, v61, v62));
                    int64_t v57 = v103;
                    *(void *)unint64_t v63 = v61;
                    *(void *)(v63 + 8) = v100;
                    *(_DWORD *)(v63 + 16) = v62;
                    *(_DWORD *)(v63 + 20) = v97;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              int64_t v66 = v10 / 0x18uLL;
              unint64_t v67 = v95;
              do
              {
                uint64_t v68 = 0;
                long long v69 = *(_OWORD *)a1;
                uint64_t v109 = *(void *)(a1 + 16);
                long long v108 = v69;
                uint64_t v70 = v66 - 2;
                if (v66 < 2) {
                  uint64_t v70 = v66 - 1;
                }
                uint64_t v71 = v70 >> 1;
                unint64_t v72 = a1;
                do
                {
                  uint64_t v73 = v72 + 24 * v68 + 24;
                  uint64_t v74 = (2 * v68) | 1;
                  uint64_t v75 = 2 * v68 + 2;
                  if (v75 < v66
                    && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(v72 + 24 * v68 + 24), *(void *)(v72 + 24 * v68 + 48), *(_DWORD *)(v72 + 24 * v68 + 64)))
                  {
                    v73 += 24;
                    uint64_t v74 = v75;
                  }
                  long long v76 = *(_OWORD *)v73;
                  *(void *)(v72 + 16) = *(void *)(v73 + 16);
                  *(_OWORD *)unint64_t v72 = v76;
                  unint64_t v72 = v73;
                  uint64_t v68 = v74;
                }
                while (v74 <= v71);
                unint64_t v77 = (long long *)(v67 - 6);
                if ((_DWORD *)v73 == v67 - 6)
                {
                  v67 -= 6;
                  long long v29 = v108;
                  *(void *)(v73 + 16) = v109;
                  *(_OWORD *)uint64_t v73 = v29;
                }
                else
                {
                  long long v78 = *v77;
                  *(void *)(v73 + 16) = *((void *)v67 - 1);
                  *(_OWORD *)uint64_t v73 = v78;
                  long long v29 = v108;
                  *((void *)v67 - 1) = v109;
                  v67 -= 6;
                  long long *v77 = v29;
                  uint64_t v79 = v73 - a1 + 24;
                  if (v79 >= 25)
                  {
                    unint64_t v80 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                    unint64_t v81 = a1 + 24 * v80;
                    uint64_t v82 = *(void *)v73;
                    unsigned int v83 = *(_DWORD *)(v73 + 16);
                    if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v81, *(void *)v73, v83))
                    {
                      uint64_t v101 = *(void *)(v73 + 8);
                      int v98 = *(_DWORD *)(v73 + 20);
                      do
                      {
                        uint64_t v84 = v81;
                        long long v29 = *(_OWORD *)v81;
                        *(void *)(v73 + 16) = *(void *)(v81 + 16);
                        *(_OWORD *)uint64_t v73 = v29;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        unint64_t v81 = a1 + 24 * v80;
                        uint64_t v73 = v84;
                      }
                      while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v81, v82, v83));
                      *(void *)uint64_t v84 = v82;
                      *(void *)(v84 + 8) = v101;
                      *(_DWORD *)(v84 + 16) = v83;
                      *(_DWORD *)(v84 + 20) = v98;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return *(double *)&v29;
          }
          unint64_t v12 = a1 + 24 * (v11 >> 1);
          if ((unint64_t)v10 >= 0xC01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)a1, (_DWORD *)(a1 + 24 * (v11 >> 1)), (long long *)v99);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)(a1 + 24), (_DWORD *)(a1 + 24 * (v11 >> 1) - 24), v94);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)(a1 + 48), (_DWORD *)(a1 + 24 + 24 * (v11 >> 1)), v93);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)(a1 + 24 * (v11 >> 1) - 24), (_DWORD *)(a1 + 24 * (v11 >> 1)), (long long *)(a1 + 24 + 24 * (v11 >> 1)));
            long long v13 = *(_OWORD *)a1;
            uint64_t v109 = *(void *)(a1 + 16);
            long long v108 = v13;
            uint64_t v14 = *(void *)(v12 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(void *)(a1 + 16) = v14;
            long long v15 = v108;
            *(void *)(v12 + 16) = v109;
            *(_OWORD *)unint64_t v12 = v15;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)(a1 + 24 * (v11 >> 1)), (_DWORD *)a1, (long long *)v99);
          }
          --a3;
          uint64_t v16 = *(void *)a1;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(a1 + 16);
          if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(a1 - 24), *(void *)a1, v17))
          {
            goto LABEL_12;
          }
          long long v30 = *(_OWORD *)a1;
          uint64_t v107 = *(void *)(a1 + 16);
          long long v106 = v30;
          if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v106, *((void *)a2 - 3), *(a2 - 2)))
          {
            unint64_t v9 = a1;
            do
            {
              uint64_t v31 = *(void *)(v9 + 24);
              v9 += 24;
            }
            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v106, v31, *(_DWORD *)(v9 + 16)));
          }
          else
          {
            unint64_t v32 = a1 + 24;
            do
            {
              unint64_t v9 = v32;
              if (v32 >= (unint64_t)a2) {
                break;
              }
              BOOL v33 = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v106, *(void *)v32, *(_DWORD *)(v32 + 16));
              unint64_t v32 = v9 + 24;
            }
            while (!v33);
          }
          unint64_t v34 = a2;
          if (v9 < (unint64_t)a2)
          {
            unint64_t v34 = a2;
            do
            {
              uint64_t v35 = *((void *)v34 - 3);
              v34 -= 6;
            }
            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v106, v35, v34[4]));
          }
          while (v9 < (unint64_t)v34)
          {
            long long v36 = *(_OWORD *)v9;
            uint64_t v109 = *(void *)(v9 + 16);
            long long v108 = v36;
            long long v37 = *(_OWORD *)v34;
            *(void *)(v9 + 16) = *((void *)v34 + 2);
            *(_OWORD *)unint64_t v9 = v37;
            long long v38 = v108;
            *((void *)v34 + 2) = v109;
            *(_OWORD *)unint64_t v34 = v38;
            do
            {
              uint64_t v39 = *(void *)(v9 + 24);
              v9 += 24;
            }
            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v106, v39, *(_DWORD *)(v9 + 16)));
            do
            {
              uint64_t v40 = *((void *)v34 - 3);
              v34 -= 6;
            }
            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v106, v40, v34[4]));
          }
          float v41 = (long long *)(v9 - 24);
          BOOL v4 = v9 - 24 >= a1;
          BOOL v5 = v9 - 24 == a1;
          if (v9 - 24 != a1)
          {
            long long v42 = *v41;
            *(void *)(a1 + 16) = *(void *)(v9 - 8);
            *(_OWORD *)a1 = v42;
          }
          a4 = 0;
          long long v29 = v106;
          *(void *)(v9 - 8) = v107;
          *float v41 = v29;
        }
        unsigned int v17 = *(_DWORD *)(a1 + 16);
LABEL_12:
        uint64_t v102 = *(void *)(a1 + 8);
        uint64_t v104 = a3;
        int v18 = *(_DWORD *)(a1 + 20);
        uint64_t v19 = (_DWORD *)a1;
        do
        {
          uint64_t v20 = (uint64_t)v19;
          v19 += 6;
        }
        while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v19, v16, v17));
        uint64_t v21 = (uint64_t)a2;
        if (v20 == a1)
        {
          do
          {
            if (v19 >= a2) {
              break;
            }
            a2 -= 6;
          }
          while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a2, v16, v17));
        }
        else
        {
          do
            a2 -= 6;
          while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a2, v16, v17));
        }
        if (v19 < a2)
        {
          uint64_t v22 = v19;
          uint8x8_t v23 = a2;
          do
          {
            long long v108 = *(_OWORD *)v22;
            long long v24 = v108;
            uint64_t v109 = *((void *)v22 + 2);
            uint64_t v25 = v109;
            uint64_t v26 = *((void *)v23 + 2);
            *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
            *((void *)v22 + 2) = v26;
            *((void *)v23 + 2) = v25;
            *(_OWORD *)uint8x8_t v23 = v24;
            do
            {
              uint64_t v20 = (uint64_t)v22;
              v22 += 6;
            }
            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v22, v16, v17));
            do
              v23 -= 6;
            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v23, v16, v17));
          }
          while (v22 < v23);
        }
        if (v20 != a1)
        {
          long long v27 = *(_OWORD *)v20;
          *(void *)(a1 + 16) = *(void *)(v20 + 16);
          *(_OWORD *)a1 = v27;
        }
        *(void *)uint64_t v20 = v16;
        *(void *)(v20 + 8) = v102;
        *(_DWORD *)(v20 + 16) = v17;
        *(_DWORD *)(v20 + 20) = v18;
        BOOL v4 = v19 >= a2;
        a2 = (_DWORD *)v21;
        a3 = v104;
        if (v4) {
          break;
        }
LABEL_31:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *,false>(a1, v20, v104, a4 & 1);
        a4 = 0;
        unint64_t v9 = v20 + 24;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(a1, v20);
      unint64_t v9 = v20 + 24;
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(v20 + 24, v21))
      {
        break;
      }
      if (!v28) {
        goto LABEL_31;
      }
    }
    a2 = (_DWORD *)v20;
    if (!v28) {
      continue;
    }
    return *(double *)&v29;
  }
}

BOOL GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = *(_DWORD **)a1;
  unint64_t v4 = *(void *)(*(void *)a1 + 12);
  unint64_t v5 = *(void *)(a2 + 12);
  BOOL v6 = v4 >= v5;
  if (v4 == v5)
  {
    unsigned int v7 = v3[5];
    unsigned int v8 = *(_DWORD *)(a2 + 20);
    BOOL v6 = v7 >= v8;
    if (v7 == v8)
    {
      unsigned int v9 = *v3 & 0xF;
      BOOL v6 = v9 >= (*(_DWORD *)a2 & 0xFu);
      if (v9 == (*(_DWORD *)a2 & 0xF)) {
        BOOL v6 = a1[4] >= a3;
      }
    }
  }
  return !v6;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(long long *a1, _DWORD *a2, long long *a3)
{
  BOOL v6 = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a2, *(void *)a1, *((_DWORD *)a1 + 4));
  BOOL result = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a3, *(void *)a2, a2[4]);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = *((void *)a1 + 2);
      long long v9 = *a1;
      uint64_t v10 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v10;
    }
    else
    {
      uint64_t v17 = *((void *)a1 + 2);
      long long v18 = *a1;
      uint64_t v19 = *((void *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = v19;
      *(_OWORD *)a2 = v18;
      *((void *)a2 + 2) = v17;
      BOOL result = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a3, *(void *)a2, v17);
      if (!result) {
        return result;
      }
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *(_OWORD *)a2;
      uint64_t v20 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *a3;
      *((void *)a2 + 2) = v20;
    }
    *a3 = v9;
    *((void *)a3 + 2) = v8;
  }
  else if (result)
  {
    uint64_t v11 = *((void *)a2 + 2);
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = *((void *)a3 + 2);
    *(_OWORD *)a2 = *a3;
    *((void *)a2 + 2) = v13;
    *a3 = v12;
    *((void *)a3 + 2) = v11;
    BOOL result = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a2, *(void *)a1, *((_DWORD *)a1 + 4));
    if (result)
    {
      uint64_t v14 = *((void *)a1 + 2);
      long long v15 = *a1;
      uint64_t v16 = *((void *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = v16;
      *(_OWORD *)a2 = v15;
      *((void *)a2 + 2) = v14;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)a1, a2, (long long *)a3);
  if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)a4, *(void *)a3, *(_DWORD *)(a3 + 16)))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)a3, *(void *)a2, a2[4]))
    {
      uint64_t v12 = *((void *)a2 + 2);
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v14;
      *(_OWORD *)a3 = v13;
      *(void *)(a3 + 16) = v12;
      if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a2, *(void *)a1, *(_DWORD *)(a1 + 16)))
      {
        uint64_t v15 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v16 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        *((void *)a2 + 2) = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(a1, a2, (uint64_t)a3, (uint64_t)a4);
  if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)a5, *(void *)a4, a4[4]))
  {
    uint64_t v11 = *((void *)a4 + 2);
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v13;
    *(_OWORD *)a5 = v12;
    *(void *)(a5 + 16) = v11;
    if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a4, *(void *)a3, a3[4]))
    {
      uint64_t v14 = *((void *)a3 + 2);
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((void *)a3 + 2) = v16;
      *(_OWORD *)a4 = v15;
      *((void *)a4 + 2) = v14;
      if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a3, *(void *)a2, a2[4]))
      {
        uint64_t v17 = *((void *)a2 + 2);
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = *((void *)a3 + 2);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((void *)a2 + 2) = v19;
        *(_OWORD *)a3 = v18;
        *((void *)a3 + 2) = v17;
        if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a2, *(void *)a1, *(_DWORD *)(a1 + 16)))
        {
          uint64_t v20 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v21 = *((void *)a2 + 2);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          *((void *)a2 + 2) = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 24;
      if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(a2 - 24), *(void *)a1, *(_DWORD *)(a1 + 16)))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(v6 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)uint64_t v6 = v8;
        *(void *)(v6 + 16) = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)a1, (_DWORD *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(a1, (_DWORD *)(a1 + 24), a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(a1, (_DWORD *)(a1 + 24), (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 72), a2 - 24);
      return 1;
    default:
      uint64_t v10 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((long long *)a1, (_DWORD *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v11, *(void *)v10, *(_DWORD *)(v10 + 16)))
    {
      long long v17 = *(_OWORD *)v11;
      uint64_t v18 = *(void *)(v11 + 16);
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 88) = *(void *)(a1 + v14 + 64);
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v17, *(void *)(v15 + 24), *(_DWORD *)(v15 + 40)))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

void *BufferView<ShaderProfilerSampleTimelineInfoEx>::BufferView(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = [v3 mutableBytes];
  unint64_t v4 = (unint64_t)[v3 length];
  a1[1] = *a1 + 24 * (v4 / 0x18);
  a1[2] = v4 / 0x18;

  return a1;
}

void sub_310064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *BufferView<ShaderProfilerSampleTimelineInfo>::BufferView(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = [v3 mutableBytes];
  unint64_t v4 = (unint64_t)[v3 length];
  a1[1] = *a1 + 24 * (v4 / 0x18);
  a1[2] = v4 / 0x18;

  return a1;
}

void sub_3100D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_31013C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3101A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,RingBufferSampledData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,RingBufferSampledData>,void *>>>>::reset[abi:nn180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16)) {
      RingBufferSampledData::~RingBufferSampledData((RingBufferSampledData *)(v1 + 24));
    }
    operator delete((void *)v1);
  }
}

__n128 __Block_byref_object_copy__518(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__519(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN15GRCPerFrameData23EvaluateDerivedLimitersEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v4 = objc_opt_new();
  if (([v4 evaluteScript:*(void *)(a1 + 32) scriptURL:0] & 1) == 0) {
    goto LABEL_25;
  }
  id v5 = *(id *)(a1 + 40);
  id v6 = v4;
  uint64_t v7 = [v6 context];
  [v7 setObject:&__block_literal_global_525 forKeyedSubscript:@"ErrorLog"];

  LODWORD(v7) = [v6 evaluteScript:v5 scriptURL:0];
  if (!v7) {
    goto LABEL_25;
  }
  if (*(void *)(a1 + 48)) {
    [v6 setValues:];
  }
  [v6 setRawArrayValues:@"_RawTimestampDelta" withUint64Values:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48)+ 8 * (*(void *)(a1 + 72) / ((unint64_t)**(unsigned int **)(a1 + 80) >> 26)) andNumCounters:*(void *)(a1 + 88)];
  long long v8 = *(unsigned int **)(a1 + 80);
  unint64_t v9 = *(void *)(a1 + 88);
  unint64_t v10 = *v8;
  unint64_t v11 = v9 * (v10 >> 26);
  if (v11)
  {
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v9 * (v10 >> 26));
    bzero(v12, 4 * v11);
    long long v8 = *(unsigned int **)(a1 + 80);
    unint64_t v9 = *(void *)(a1 + 88);
    LODWORD(v10) = *v8;
    if (!v9) {
      goto LABEL_20;
    }
    goto LABEL_10;
  }
  uint64_t v12 = 0;
  if (v9)
  {
LABEL_10:
    LODWORD(v13) = 0;
    while (1)
    {
      LODWORD(v14) = v10 >> 26;
      if (v10 >> 26) {
        break;
      }
LABEL_19:
      unint64_t v13 = (v13 + 1);
      if (v9 <= v13) {
        goto LABEL_20;
      }
    }
    unint64_t v15 = 0;
    uint64_t v16 = *(void *)(*(void *)(v2 + 488) + 208);
    uint64_t v17 = (v13 * v14);
    while (1)
    {
      if ((*(void *)(v16 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15))
      {
        uint64_t v18 = *(void *)(a1 + 72);
        uint64_t v19 = *((void *)v8 + 1);
      }
      else
      {
        uint64_t v18 = *(void *)(a1 + 72);
        uint64_t v19 = *((void *)v8 + 1);
        if (*(void *)(a1 + 96))
        {
          int v20 = *(_DWORD *)(v19 + 4 * (v17 + v15 + v18)) - *(_DWORD *)(v19 + 4 * (v17 + v15 + v18 - v14));
          goto LABEL_18;
        }
      }
      int v20 = *(_DWORD *)(v19 + 4 * (v17 + v18 + v15));
LABEL_18:
      *((_DWORD *)v12 + (v17 + v15++)) = v20;
      unint64_t v10 = *v8;
      unint64_t v14 = v10 >> 26;
      if (v15 >= v10 >> 26) {
        goto LABEL_19;
      }
    }
  }
LABEL_20:
  uint64_t v21 = v10 >> 26;
  uint64_t v22 = *(unsigned int *)(a1 + 120);
  id v23 = v6;
  [v23 setRawArrayValues:@"_RawCounterValues" withUint32Values:v12 andNumCounters:v9 * v21];
  [v23 setRawArrayValues:@"_CoreCount"];
  long long v24 = +[NSNumber numberWithUnsignedLong:v9];
  uint64_t v25 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", (int)v21 - 1, v24);
  v37[1] = v25;
  uint64_t v26 = +[NSNumber numberWithUnsignedLong:v22];
  v37[2] = v26;
  long long v27 = +[NSArray arrayWithObjects:v37 count:3];
  [v23 callFunction:@"_SetAndEvaluateRawCounterValues" withArguments:v27];

  BOOL v28 = [v23 getValue:@"_DerivedCounterResult"];
  long long v29 = [v28 toArray];

  uint64_t v30 = *(unsigned int *)(v2 + 520);
  if (*(void *)(a1 + 88) * v30)
  {
    uint64_t v31 = 0;
    unsigned int v32 = 1;
    unint64_t v33 = *(void *)(a1 + 72) * v30 / ((unint64_t)**(unsigned int **)(a1 + 104) >> 26);
    do
    {
      unint64_t v34 = [v29 objectAtIndexedSubscript:v31];
      [v34 doubleValue];
      *(void *)(*(void *)(a1 + 112) + 8 * (v31 + v33)) = v35;

      uint64_t v31 = v32;
    }
    while (*(void *)(a1 + 88) * (unint64_t)*(unsigned int *)(v2 + 520) > v32++);
  }

  if (v12) {
    operator delete(v12);
  }
LABEL_25:
}

void sub_3105FC(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

void ___ZN15GRCPerFrameData19PrepareCounterNamesEP8NSStringP20DYJSScriptingContext_block_invoke(id a1, NSString *a2)
{
}

uint64_t std::__split_buffer<std::unique_ptr<GRCPerFrameData::PriorityQueueElement>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<GRCPerFrameData::PriorityQueueElement>::operator()[abi:nn180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::default_delete<GRCPerFrameData::PriorityQueueElement>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }

  operator delete();
}

void GRCPerFrameData::FindNextMarker(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  id v58 = a2;
  unsigned int v62 = 0;
  unint64_t v63 = 0;
  long long v64 = 0;
  std::vector<std::pair<unsigned int,unsigned int>>::reserve((void **)&v62, 2uLL);
  int v8 = 0;
  unint64_t v10 = v63;
  unint64_t v9 = v64;
  unint64_t v11 = a4;
  uint64_t v12 = v62;
LABEL_2:
  if ((unint64_t)[v58 count] <= a3)
  {
    if (v8 != 1)
    {
      *(void *)(a5 + 4) = -1;
      if (!v12) {
        goto LABEL_27;
      }
LABEL_26:
      unint64_t v63 = v12;
      operator delete(v12);
      goto LABEL_27;
    }
    *(void *)(a5 + 4) = (*(_DWORD *)(a5 + 4) + 1);
    id v33 = [v58 objectAtIndexedSubscript:*v12];
    unint64_t v51 = ((unint64_t)[v33 length] >> 3) - v12[1];
    if (v51 >= 8)
    {
      long long v52 = (char *)[v33 bytes] + 8 * v12[1];
      *(void *)(a5 + 88) = *(void *)(a5 + 80);
      long long v53 = *(_OWORD *)v52;
      long long v54 = *((_OWORD *)v52 + 1);
      long long v55 = *((_OWORD *)v52 + 3);
      *(_OWORD *)(a5 + 48) = *((_OWORD *)v52 + 2);
      *(_OWORD *)(a5 + 64) = v55;
      *(_OWORD *)(a5 + 16) = v53;
      *(_OWORD *)(a5 + 32) = v54;
      std::vector<unsigned long long>::reserve((void **)(a5 + 80), v51 - 8);
      std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>((char *)(a5 + 80), v52 + 64, (uint64_t)&v52[8 * v51], (uint64_t)(8 * v51 - 64) >> 3);
    }
LABEL_43:

    if (!v12) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  unsigned int v57 = a3;
  uint64_t v13 = a3;
  id v14 = [v58 objectAtIndexedSubscript:a3];
  unint64_t v15 = [v14 bytes];

  while (1)
  {
    uint64_t v16 = [v58 objectAtIndexedSubscript:v13];
    unint64_t v17 = [v16 length] >> 3;

    if (v17 <= v11)
    {
      unint64_t v11 = 0;
      unint64_t v63 = v10;
      long long v64 = v9;
      a3 = v57 + 1;
      unsigned int v62 = v12;
      goto LABEL_2;
    }
    if (v15[v11] == *(void *)(*(void *)(a1 + 488) + 352)) {
      break;
    }
LABEL_22:
    ++v11;
  }
  if (v10 >= v9)
  {
    uint64_t v18 = ((char *)v10 - (char *)v12) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
    {
      unint64_t v63 = v10;
      long long v64 = v9;
      unsigned int v62 = v12;
      abort();
    }
    if (v9 - v12 > v19) {
      unint64_t v19 = v9 - v12;
    }
    if ((unint64_t)((char *)v9 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    uint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v20);
    id v23 = (unsigned int *)&v21[8 * v18];
    *id v23 = v57;
    v23[1] = v11;
    long long v24 = v23;
    while (v10 != v12)
    {
      uint64_t v25 = *((void *)v10 - 1);
      v10 -= 2;
      *((void *)v24 - 1) = v25;
      v24 -= 2;
    }
    unint64_t v9 = (unsigned int *)&v21[8 * v22];
    unint64_t v10 = v23 + 2;
    if (v12) {
      operator delete(v12);
    }
    uint64_t v12 = v24;
  }
  else
  {
    unsigned int *v10 = v57;
    v10[1] = v11;
    v10 += 2;
  }
  if (v8 != 1)
  {
    int v8 = 1;
    goto LABEL_22;
  }
  long long v64 = v9;
  unsigned int v62 = v12;
  uint64_t v26 = *((void *)v12 + 1);
  *(void *)(a5 + 4) = v26;
  if (*v12 != v26)
  {
    [v58 objectAtIndexedSubscript:];
    id v33 = objc_claimAutoreleasedReturnValue();
    unint64_t v34 = (char *)[v33 bytes];
    uint64_t v35 = v12[1];
    uint64_t v36 = ((unint64_t)[v33 length] >> 3) - v12[1];
    __dst = 0;
    uint64_t v61 = 0;
    __p = 0;
    std::vector<unsigned long long>::reserve(&__p, v12[3] + v36);
    std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>(&__p, (char *)__dst, &v34[8 * v35], &v34[8 * v35 + 8 * v36], v36);
    id v37 = [v58 objectAtIndexedSubscript:v12[2]];
    long long v38 = (char *)[v37 bytes];

    std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>(&__p, (char *)__dst, v38, &v38[8 * v12[3]], v12[3]);
    uint64_t v39 = *(char **)(a5 + 80);
    *(void *)(a5 + 88) = v39;
    uint64_t v40 = (char *)__p;
    float v41 = __dst;
    long long v42 = *(_OWORD *)__p;
    long long v43 = *((_OWORD *)__p + 1);
    long long v44 = *((_OWORD *)__p + 3);
    *(_OWORD *)(a5 + 48) = *((_OWORD *)__p + 2);
    *(_OWORD *)(a5 + 64) = v44;
    *(_OWORD *)(a5 + 16) = v42;
    *(_OWORD *)(a5 + 32) = v43;
    if ((unint64_t)(v41 - v40) < 0x41) {
      goto LABEL_42;
    }
    unint64_t v45 = v40 + 64;
    int64_t v46 = v41 - (v40 + 64);
    unint64_t v47 = v46 >> 3;
    uint64_t v48 = *(void *)(a5 + 96);
    if (v46 >> 3 > (unint64_t)((v48 - (uint64_t)v39) >> 3))
    {
      if (v39)
      {
        *(void *)(a5 + 88) = v39;
        operator delete(v39);
        uint64_t v48 = 0;
        *(void *)(a5 + 80) = 0;
        *(void *)(a5 + 88) = 0;
        *(void *)(a5 + 96) = 0;
      }
      if (v46 < 0) {
        abort();
      }
      uint64_t v49 = v48 >> 2;
      if (v48 >> 2 <= v47) {
        uint64_t v49 = v46 >> 3;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v49;
      }
      std::vector<NSString * {__strong}>::__vallocate[abi:nn180100]((void *)(a5 + 80), v50);
      uint64_t v39 = *(char **)(a5 + 88);
    }
    if (v41 != v45) {
      memmove(v39, v45, v46);
    }
    *(void *)(a5 + 88) = &v39[8 * v47];
    uint64_t v40 = (char *)__p;
    if (__p)
    {
LABEL_42:
      __dst = v40;
      operator delete(v40);
    }
    goto LABEL_43;
  }
  [v58 objectAtIndexedSubscript:];
  id v27 = objc_claimAutoreleasedReturnValue();
  BOOL v28 = (char *)[v27 bytes] + 8 * v12[1];

  *(void *)(a5 + 88) = *(void *)(a5 + 80);
  long long v29 = *((_OWORD *)v28 + 3);
  long long v31 = *(_OWORD *)v28;
  long long v30 = *((_OWORD *)v28 + 1);
  *(_OWORD *)(a5 + 48) = *((_OWORD *)v28 + 2);
  *(_OWORD *)(a5 + 64) = v29;
  *(_OWORD *)(a5 + 16) = v31;
  *(_OWORD *)(a5 + 32) = v30;
  std::vector<unsigned long long>::reserve((void **)(a5 + 80), v12[3] - v12[1] - 8);
  unint64_t v32 = v12[3] - v12[1] - 8;
  std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>((char *)(a5 + 80), v28 + 64, (uint64_t)&v28[8 * v32 + 64], v32);
  if (v12) {
    goto LABEL_26;
  }
LABEL_27:
}

void sub_310C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCPerFrameData::GreaterPQElement &,std::__wrap_iter<GRCPerFrameData::PriorityQueueElement **>>(BOOL result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    BOOL v4 = result;
    unint64_t v5 = v3 >> 1;
    id v6 = (void **)(result + 8 * (v3 >> 1));
    uint64_t v7 = (uint64_t)*v6;
    unint64_t v9 = (void *)(a2 - 8);
    int v8 = *(void **)(a2 - 8);
    __n128 result = GRCPerFrameData::GreaterPQElement::operator()(*v6, v8);
    if (result)
    {
      do
      {
        unint64_t v10 = v6;
        *unint64_t v9 = v7;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        id v6 = (void **)(v4 + 8 * v5);
        uint64_t v7 = (uint64_t)*v6;
        __n128 result = GRCPerFrameData::GreaterPQElement::operator()(*v6, v8);
        unint64_t v9 = v10;
      }
      while (result);
      void *v10 = v8;
    }
  }
  return result;
}

void GRCPerFrameData::AddLimiterCounterSample(uint64_t a1, unsigned int a2, long long *a3, int a4)
{
  unsigned int v55 = a2;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 448, a2, &v55);
  if ((uint64_t)(*((void *)a3 + 9) - *((void *)a3 + 8)) >> 3 >= (unint64_t)*(unsigned int *)(v8 + 24) >> 26)
  {
    uint64_t v9 = v8;
    if (!a4) {
      goto LABEL_50;
    }
    BOOL v10 = GRCPerFrameData::AddDeferredKickSamples((ProgramAddressHelper *)a1, a2, a3);
    unsigned int v48 = a2;
    long long v11 = a3[1];
    long long v49 = *a3;
    long long v50 = v11;
    long long v12 = a3[3];
    long long v51 = a3[2];
    long long v52 = v12;
    std::vector<unsigned long long>::vector(&__p, (uint64_t)(a3 + 4));
    *(_DWORD *)(a1 + 352) = a2;
    *(_OWORD *)(a1 + 360) = v49;
    *(_OWORD *)(a1 + 376) = v50;
    *(_OWORD *)(a1 + 392) = v51;
    *(_OWORD *)(a1 + 408) = v52;
    if ((unsigned int *)(a1 + 352) != &v48) {
      std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>((char *)(a1 + 424), (char *)__p, (uint64_t)v54, (v54 - (unsigned char *)__p) >> 3);
    }
    if (__p)
    {
      long long v54 = __p;
      operator delete(__p);
    }
    if (v10)
    {
LABEL_50:
      if ([*(id *)(v9 + 88) length])
      {
        uint64_t v13 = [*(id *)(v9 + 88) mutableBytes];
        unint64_t v14 = (unint64_t)[*(id *)(v9 + 88) length];
        v13[6 * (v14 / 0x18) - 6] += 16;
      }
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v9 + 24) & 0xFC000000 | (*(_DWORD *)(v9 + 24) + 1) & 0x3FFFFFF;
      uint64_t v16 = (char *)*((void *)a3 + 8);
      unint64_t v15 = (char *)*((void *)a3 + 9);
      if (v15 - v16 >= 1)
      {
        uint64_t v17 = (v15 - v16) >> 3;
        unint64_t v19 = *(char **)(v9 + 40);
        uint64_t v18 = *(void *)(v9 + 48);
        if (v17 <= (v18 - (uint64_t)v19) >> 2)
        {
          if (v17 <= 0)
          {
            long long v29 = &v16[8 * v17];
            long long v30 = *(char **)(v9 + 40);
            long long v43 = &v19[4 * v17];
            long long v44 = &v30[-4 * v17];
            unint64_t v45 = *(_DWORD **)(v9 + 40);
            if (v44 < v19)
            {
              unint64_t v45 = *(_DWORD **)(v9 + 40);
              do
              {
                int v46 = *(_DWORD *)v44;
                v44 += 4;
                *v45++ = v46;
              }
              while (v44 < v19);
            }
            *(void *)(v9 + 40) = v45;
            if (v30 != v43) {
              memmove(&v30[-4 * ((v30 - v43) >> 2)], v19, v30 - v43);
            }
            for (; v16 != v29; v19 += 4)
            {
              uint64_t v47 = *(void *)v16;
              v16 += 8;
              *(_DWORD *)unint64_t v19 = v47;
            }
          }
          else
          {
            if (*((char **)a3 + 8) == v15)
            {
              id v27 = *(_DWORD **)(v9 + 40);
            }
            else
            {
              uint64_t v26 = (char *)*((void *)a3 + 8);
              id v27 = *(_DWORD **)(v9 + 40);
              do
              {
                uint64_t v28 = *(void *)v26;
                v26 += 8;
                *v27++ = v28;
              }
              while (v26 != v15);
            }
            *(void *)(v9 + 40) = v27;
          }
        }
        else
        {
          uint64_t v20 = *(void *)(v9 + 32);
          uint64_t v21 = (uint64_t)&v19[-v20] >> 2;
          if ((unint64_t)(v21 + v17) >> 62) {
            abort();
          }
          uint64_t v22 = v18 - v20;
          uint64_t v23 = v22 >> 1;
          if (v22 >> 1 <= (unint64_t)(v21 + v17)) {
            uint64_t v23 = v21 + v17;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          long long v31 = (_DWORD *)(v24 + 4 * v21);
          unint64_t v32 = (char *)&v31[v17];
          uint64_t v33 = 4 * v17;
          unint64_t v34 = v31;
          do
          {
            uint64_t v35 = *(void *)v16;
            v16 += 8;
            *v34++ = v35;
            v33 -= 4;
          }
          while (v33);
          uint64_t v36 = *(char **)(v9 + 32);
          if (v36 != v19)
          {
            id v37 = v19;
            do
            {
              int v38 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *--long long v31 = v38;
            }
            while (v37 != v36);
          }
          unint64_t v39 = v24 + 4 * v25;
          uint64_t v40 = *(char **)(v9 + 40);
          int64_t v41 = v40 - v19;
          if (v40 != v19) {
            memmove(v32, v19, v40 - v19);
          }
          long long v42 = *(void **)(v9 + 32);
          *(void *)(v9 + 32) = v31;
          *(void *)(v9 + 40) = &v32[v41];
          *(void *)(v9 + 48) = v39;
          if (v42) {
            operator delete(v42);
          }
        }
      }
      [*(id *)(v9 + 56) appendBytes:(char *)a3 + 8 length:8];
    }
  }
}

void sub_311094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL GRCPerFrameData::AddDeferredKickSamples(ProgramAddressHelper *a1, unsigned int a2, void *a3)
{
  uint64_t v238 = a3[8];
  uint64_t v241 = (char *)a3[9];
  uint64_t v232 = *((void *)a1 + 53);
  uint64_t v235 = *((void *)a1 + 54);
  uint64_t v3 = *((void *)a1 + 38);
  uint64_t v4 = *((void *)a1 + 39);
  if (-991146299 * ((unint64_t)(v4 - v3) >> 3))
  {
    unint64_t v5 = 0;
    v216 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v3 + 104 * v7;
      if ((unint64_t)v216 >= v6)
      {
        uint64_t v9 = v5;
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v216 - v5);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        long long v12 = v9;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 3);
        if (2 * v13 > v11) {
          unint64_t v11 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v11;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = v14 + 24 * v10;
        *(void *)unint64_t v16 = *(void *)(v8 + 16);
        *(_DWORD *)(v16 + 8) = 0;
        *(_DWORD *)(v16 + 12) = *(void *)(v8 + 96);
        *(void *)(v16 + 16) = v7;
        uint64_t v17 = v216;
        if (v216 == v12)
        {
          unint64_t v5 = (uint64_t *)(v14 + 24 * v10);
        }
        else
        {
          unint64_t v18 = v14 + 24 * v10;
          do
          {
            unint64_t v5 = (uint64_t *)(v18 - 24);
            long long v19 = *(_OWORD *)(v17 - 3);
            *(void *)(v18 - 8) = *(v17 - 1);
            *(_OWORD *)(v18 - 24) = v19;
            v17 -= 3;
            v18 -= 24;
          }
          while (v17 != v12);
        }
        unint64_t v6 = v14 + 24 * v15;
        v216 = (uint64_t *)(v16 + 24);
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        uint64_t *v216 = *(void *)(v8 + 16);
        *((_DWORD *)v216 + 2) = 0;
        *((_DWORD *)v216 + 3) = *(void *)(v8 + 96);
        v216[2] = v7;
        v216 += 3;
      }
      ++v7;
      uint64_t v3 = *((void *)a1 + 38);
      uint64_t v4 = *((void *)a1 + 39);
    }
    while (v7 < -991146299 * ((unint64_t)(v4 - v3) >> 3));
    uint64_t v20 = a1;
  }
  else
  {
    uint64_t v20 = a1;
    unint64_t v5 = 0;
    v216 = 0;
    unint64_t v6 = 0;
  }
  uint64_t v21 = *((void *)v20 + 41);
  uint64_t v22 = *((void *)v20 + 42);
  if (-1431655765 * ((unint64_t)(v22 - v21) >> 5))
  {
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = *(void *)(v21 + 96 * v23 + 16) + 200;
      if ((unint64_t)v216 >= v6)
      {
        uint64_t v25 = v5;
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v216 - v5);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        uint64_t v28 = v25;
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v25) >> 3);
        if (2 * v29 > v27) {
          unint64_t v27 = 2 * v29;
        }
        if (v29 >= 0x555555555555555) {
          unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v30 = v27;
        }
        if (v30) {
          unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v30);
        }
        else {
          uint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)(v30 + 24 * v26);
        *unint64_t v32 = v24;
        v32[1] = 0xFFFFFFFF00000001;
        v32[2] = v23;
        uint64_t v33 = v216;
        if (v216 == v28)
        {
          unint64_t v5 = (uint64_t *)(v30 + 24 * v26);
        }
        else
        {
          unint64_t v34 = v30 + 24 * v26;
          do
          {
            unint64_t v5 = (uint64_t *)(v34 - 24);
            long long v35 = *(_OWORD *)(v33 - 3);
            *(void *)(v34 - 8) = *(v33 - 1);
            *(_OWORD *)(v34 - 24) = v35;
            v33 -= 3;
            v34 -= 24;
          }
          while (v33 != v28);
        }
        unint64_t v6 = v30 + 24 * v31;
        v216 = v32 + 3;
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        uint64_t *v216 = v24;
        v216[1] = 0xFFFFFFFF00000001;
        v216[2] = v23;
        v216 += 3;
      }
      ++v23;
      uint64_t v21 = *((void *)a1 + 41);
      uint64_t v22 = *((void *)a1 + 42);
    }
    while (v23 < -1431655765 * ((unint64_t)(v22 - v21) >> 5));
    uint64_t v20 = a1;
    uint64_t v3 = *((void *)a1 + 38);
    uint64_t v4 = *((void *)a1 + 39);
  }
  if (v21 != v22 && v3 != v4)
  {
    unint64_t v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v216 - v5));
    if (v216 == v5) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = v36;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *,false>((uint64_t)v5, (unint64_t *)v216, v37, 1);
    uint64_t v3 = *((void *)v20 + 38);
    uint64_t v4 = *((void *)v20 + 39);
  }
  memset(v257, 0, sizeof(v257));
  uint64_t v212 = v5;
  if (v3 != v4)
  {
    unint64_t v38 = (uint64_t)(a3[9] - a3[8]) >> 3;
    v252[0] = 0;
    std::vector<unsigned long long>::resize(v257, v38, v252);
  }
  unint64_t v207 = (uint64_t *)((char *)v20 + 304);
  unint64_t v208 = (uint64_t *)((char *)v20 + 328);
  if (v5 != v216)
  {
    long long v202 = &v241[-v238];
    v203 = (_OWORD *)((char *)v20 + 360);
    v201 = (char *)(v235 - v232);
    uint64_t v206 = *((void *)v20 + 46);
    double v39 = (double)(unint64_t)(a3[1] - v206);
    uint64_t v211 = (uint64_t)v20 + 448;
    long long v217 = (void *)((char *)v20 + 224);
    unint64_t v209 = (void *)((char *)v20 + 64);
    v205 = (void *)((char *)v20 + 104);
    double v40 = 0.0;
    int64_t v41 = v5;
    while (1)
    {
      int v42 = *((_DWORD *)v41 + 2);
      uint64_t v43 = v41[2];
      if (v42 != 1)
      {
        if (!v42)
        {
          v213 = v41;
          uint64_t v44 = *v41;
          memset(v256, 0, 24);
          uint64_t v45 = *v207 + 104 * v43;
          unsigned int v46 = *(_DWORD *)v45;
          *(_OWORD *)uint64_t v252 = *(_OWORD *)(v45 + 8);
          *(_OWORD *)uint64_t v253 = *(_OWORD *)(v45 + 24);
          *(_OWORD *)unint64_t v254 = *(_OWORD *)(v45 + 40);
          long long v255 = *(_OWORD *)(v45 + 56);
          std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>((char *)v256, *(char **)(v45 + 72), *(void *)(v45 + 80), (uint64_t)(*(void *)(v45 + 80) - *(void *)(v45 + 72)) >> 3);
          if (v206 != v44 && *((void *)v20 + 53) != *((void *)v20 + 54) && *((_DWORD *)v20 + 88) == a2)
          {
            uint64_t v47 = (void *)*((void *)v20 + 46);
            BOOL v48 = v252[1] >= v47;
            long long v49 = (char *)((char *)v252[1] - (char *)v47);
            if (v49 != 0 && v48 && (void *)a3[1] > v252[1] && (double)((unint64_t)v252[1] - v206) / v39 > 0.05)
            {
              __p = 0;
              v250 = 0;
              unint64_t v251 = 0;
              long long v50 = v203[1];
              *(_OWORD *)v246 = *v203;
              *(_OWORD *)&v246[16] = v50;
              long long v51 = v203[3];
              double v40 = (double)(unint64_t)v49 / v39;
              long long v247 = v203[2];
              long long v248 = v51;
              *(void **)&v246[8] = v252[1];
              if (v202 == v201)
              {
                *(void *)&v246[16] = (unint64_t)(v40 * (double)(unint64_t)a3[2]);
                std::vector<unsigned long long>::reserve(&__p, (uint64_t)(a3[9] - a3[8]) >> 3);
                uint64_t v52 = a3[8];
                if (((a3[9] - v52) & 0x7FFFFFFF8) != 0)
                {
                  unint64_t v53 = 0;
                  long long v54 = v257[0];
                  do
                  {
                    unint64_t v55 = (unint64_t)(v40 * (double)*(unint64_t *)(v52 + 8 * v53));
                    uint64_t v56 = *(void *)&v54[8 * v53];
                    *(void *)&v54[8 * v53] = v55;
                    if ((*(void *)(*(void *)(*((void *)v20 + 61) + 208) + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53)) {
                      unint64_t v57 = v55 - v56;
                    }
                    else {
                      unint64_t v57 = (unint64_t)((1.0 - v40)
                    }
                                             * (double)*(unint64_t *)(*((void *)v20 + 53) + 8 * v53))
                          + v55;
                    id v58 = v250;
                    if ((unint64_t)v250 >= v251)
                    {
                      unint64_t v60 = (char *)__p;
                      uint64_t v61 = (v250 - (unsigned char *)__p) >> 3;
                      unint64_t v62 = v61 + 1;
                      if ((unint64_t)(v61 + 1) >> 61) {
                        abort();
                      }
                      uint64_t v63 = v251 - (void)__p;
                      if ((uint64_t)(v251 - (void)__p) >> 2 > v62) {
                        unint64_t v62 = v63 >> 2;
                      }
                      BOOL v48 = (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8;
                      unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                      if (!v48) {
                        unint64_t v64 = v62;
                      }
                      if (v64)
                      {
                        unint64_t v64 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v64);
                        unint64_t v60 = (char *)__p;
                        id v58 = v250;
                      }
                      else
                      {
                        uint64_t v65 = 0;
                      }
                      int64_t v66 = (unint64_t *)(v64 + 8 * v61);
                      *int64_t v66 = v57;
                      unint64_t v59 = (char *)(v66 + 1);
                      while (v58 != v60)
                      {
                        unint64_t v67 = *((void *)v58 - 1);
                        v58 -= 8;
                        *--int64_t v66 = v67;
                      }
                      __p = v66;
                      v250 = v59;
                      unint64_t v251 = v64 + 8 * v65;
                      if (v60) {
                        operator delete(v60);
                      }
                    }
                    else
                    {
                      *(void *)v250 = v57;
                      unint64_t v59 = v58 + 8;
                    }
                    v250 = v59;
                    ++v53;
                    uint64_t v52 = a3[8];
                  }
                  while (v53 < ((unint64_t)(a3[9] - v52) >> 3));
                }
                GRCPerFrameData::AddLimiterCounterSample(v20, a2, v246, 0);
                uint64_t v206 = *(void *)&v246[8];
                if (__p)
                {
                  v250 = (char *)__p;
                  operator delete(__p);
                }
              }
            }
          }
          uint64_t v68 = v20;
          v259[0] = v46;
          uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v211, v46, v259);
          unsigned int v70 = v254[0];
          unsigned int v71 = v253[2];
          unint64_t v72 = v252[1];
          ProgramAddressHelper::UpdateActiveEncoderRef(v68, v46, v254[0], v253[2], (unint64_t)v252[1]);
          uint64_t v73 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v205, v70);
          if (v73) {
            int v74 = *((_DWORD *)v73 + 5);
          }
          else {
            int v74 = -1;
          }
          int v181 = *(_DWORD *)(v69 + 24) & 0x3FFFFFF;
          *(_DWORD *)v246 = v71 & 0xF;
          *(_DWORD *)&v246[4] = v181;
          *(_DWORD *)&v246[8] = v74;
          *(void *)&v246[12] = v72;
          *(_DWORD *)&v246[20] = v70;
          [*(id *)(v69 + 88) appendBytes:v246 length:24 v201, v202, v203];
          *(void *)v258 = *(void *)&v254[2];
          [*(id *)(v69 + 96) appendBytes:v258 length:24];
          uint64_t v182 = *((void *)v68 + 61);
          unint64_t v183 = *(void *)(v182 + 136);
          if (v183)
          {
            uint8x8_t v184 = (uint8x8_t)vcnt_s8((int8x8_t)v183);
            v184.i16[0] = vaddlv_u8(v184);
            if (v184.u32[0] > 1uLL)
            {
              unint64_t v185 = v70;
              if (v183 <= v70) {
                unint64_t v185 = v70 % v183;
              }
            }
            else
            {
              unint64_t v185 = (v183 - 1) & v70;
            }
            int v186 = *(uint64_t ***)(*(void *)(v182 + 128) + 8 * v185);
            if (v186)
            {
              v187 = *v186;
              if (v187)
              {
                int v244 = *((_DWORD *)v68 + 134);
                do
                {
                  unint64_t v188 = v187[1];
                  if (v188 == v70)
                  {
                    if (*((_DWORD *)v187 + 4) == v70)
                    {
                      uint64_t v190 = v187[3];
                      uint64_t v189 = v187[4];
                      while (v190 != v189)
                      {
                        unsigned int v191 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(*((void *)v68 + 61) + 168, *(_DWORD *)v190, (_DWORD *)v190)+ 5);
                        if (v191 != v70)
                        {
                          ProgramAddressHelper::UpdateActiveEncoderRef(v68, v46, v191, v71, (unint64_t)v72);
                          if (v244 != 2)
                          {
                            int v192 = *(_DWORD *)(v69 + 24) & 0x3FFFFFF;
                            *(_DWORD *)v246 = v71 & 0xF;
                            *(_DWORD *)&v246[4] = v192;
                            *(_DWORD *)&v246[8] = *(_DWORD *)v190;
                            *(void *)&v246[12] = v72;
                            *(_DWORD *)&v246[20] = v191;
                            [*(id *)(v69 + 88) appendBytes:v246 length:24];
                            *(void *)v258 = *(void *)(v190 + 8);
                            [*(id *)(v69 + 96) appendBytes:v258 length:24];
                          }
                        }
                        v190 += 16;
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v184.u32[0] > 1uLL)
                    {
                      if (v188 >= v183) {
                        v188 %= v183;
                      }
                    }
                    else
                    {
                      v188 &= v183 - 1;
                    }
                    if (v188 != v185) {
                      break;
                    }
                  }
                  v187 = (uint64_t *)*v187;
                }
                while (v187);
              }
            }
          }
          if (v256[0]) {
            operator delete(v256[0]);
          }
          unint64_t v5 = v212;
          int64_t v41 = v213;
          uint64_t v20 = v68;
        }
        goto LABEL_277;
      }
      v214 = v41;
      uint64_t v75 = *v208;
      v258[0] = a2;
      uint64_t v230 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v211, a2, v258);
      uint64_t v76 = v75 + 96 * v43;
      uint64_t v77 = *(void *)(v76 + 80);
      v219 = (void *)(v76 + 80);
      uint64_t v79 = (uint64_t *)(v76 + 72);
      uint64_t v78 = *(void *)(v76 + 72);
      v218 = v79;
      uint64_t v80 = v77 - v78;
      if (v77 == v78)
      {
        uint64_t v215 = v78;
        unint64_t v81 = 0;
        unsigned int v83 = 0;
      }
      else
      {
        if ((unint64_t)v80 >= 0x6666666666666661) {
          abort();
        }
        unint64_t v81 = (__n128 *)std::__allocate_at_least[abi:nn180100]<std::allocator<DYMTLShaderProfilerProcessedUSCSample>>(v80 >> 3);
        unsigned int v83 = (__n128 *)((char *)v81 + 20 * v82);
        uint64_t v215 = *v218;
        uint64_t v80 = *v219 - *v218;
      }
      v246[0] = 0;
      std::vector<BOOL>::vector(v252, v80 >> 2, v246);
      uint64_t v231 = v75 + 96 * v43 + 8;
      uint64_t v84 = *v218;
      if (*v219 == *v218)
      {
        uint64_t v129 = 0;
        uint64_t v130 = v81;
      }
      else
      {
        unint64_t v85 = 0;
        int v86 = 0;
        int v87 = 0;
        v242 = v81;
        long long v88 = v83;
        do
        {
          unsigned int v89 = 0;
          uint64_t v90 = v84 + 8 * v85;
          int64_t v226 = (char *)v81 - (char *)v242;
          int v228 = v87;
          unint64_t v239 = (2 * v87);
          unsigned __int32 v236 = v239 + 8;
          unsigned int v91 = 1;
          uint64_t v233 = v90;
          do
          {
            if (*(_DWORD *)(v90 + 4 * v89))
            {
              if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)v20 + 1) - *(void *)v20) >> 3) <= (unint64_t)v258[0])
              {
                LOWORD(v118) = -1;
                LODWORD(v101) = -1;
              }
              else
              {
                uint64_t v92 = *(void *)v20 + 88 * v258[0];
                uint64_t v93 = *(void **)(v92 + 40);
                uint64_t v94 = (void *)(v92 + 48);
                if (v93 == (void *)(v92 + 48))
                {
                  LOWORD(v118) = -1;
                  LODWORD(v101) = -1;
                }
                else
                {
                  unsigned int v95 = *(_DWORD *)(v90 + 4 * v91);
                  unint64_t v96 = *(void *)(v231 + 8);
                  int8x8_t v97 = *(int8x8_t *)((char *)v20 + 32);
                  uint8x8_t v98 = (uint8x8_t)vcnt_s8(v97);
                  v98.i16[0] = vaddlv_u8(v98);
                  unint64_t v99 = v98.u32[0];
                  uint64_t v100 = *(void *)&v97 + 0xFFFFFFFFLL;
                  do
                  {
                    if (v97)
                    {
                      unint64_t v101 = *((unsigned int *)v93 + 7);
                      if (v99 > 1)
                      {
                        unint64_t v102 = *((unsigned int *)v93 + 7);
                        if (*(void *)&v97 <= v101) {
                          unint64_t v102 = v101 % *(void *)&v97;
                        }
                      }
                      else
                      {
                        unint64_t v102 = v100 & v101;
                      }
                      int64_t v103 = *(uint64_t **)(*((void *)a1 + 3) + 8 * v102);
                      if (v103)
                      {
                        while (1)
                        {
                          int64_t v103 = (uint64_t *)*v103;
                          if (!v103) {
                            break;
                          }
                          unint64_t v104 = v103[1];
                          if (v104 == v101)
                          {
                            if (*((_DWORD *)v103 + 4) == v101)
                            {
                              if ((unint64_t)v103[5] >= 2)
                              {
                                uint64_t v107 = v103[4];
                                int64_t v105 = v103 + 4;
                                uint64_t v106 = v107;
                                if (v107)
                                {
                                  long long v108 = v105;
                                  do
                                  {
                                    unsigned int v109 = *(_DWORD *)(v106 + 28);
                                    if (v95 == v109)
                                    {
                                      if ((unsigned __int16)*(_DWORD *)(v106 + 32)) {
                                        BOOL v110 = 1;
                                      }
                                      else {
                                        BOOL v110 = HIWORD(*(_DWORD *)(v106 + 32)) > 0x66u;
                                      }
                                      BOOL v111 = v110;
                                    }
                                    else
                                    {
                                      BOOL v111 = v95 < v109;
                                    }
                                    BOOL v112 = !v111;
                                    if (v111) {
                                      v113 = (uint64_t *)v106;
                                    }
                                    else {
                                      v113 = (uint64_t *)(v106 + 8);
                                    }
                                    if (!v112) {
                                      long long v108 = (uint64_t *)v106;
                                    }
                                    uint64_t v106 = *v113;
                                  }
                                  while (*v113);
                                  if (v105 != v108)
                                  {
                                    unsigned int v114 = *((_DWORD *)v108 + 8);
                                    if ((unsigned __int16)v114 == 2)
                                    {
                                      if ((v114 & 0xFFFE0000 | 0x10000) != 0x650000) {
                                        goto LABEL_172;
                                      }
                                      uint64_t v221 = v100;
                                      unint64_t v222 = v96;
                                      v224 = v88;
                                      int v223 = v86;
                                      unsigned int v220 = v114;
                                      uint64_t v115 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v217, v101);
                                      unsigned int v114 = v220;
                                      uint64_t v100 = v221;
                                      unint64_t v96 = v222;
                                      int v86 = v223;
                                      uint64_t v90 = v233;
                                      long long v88 = v224;
                                      if (v115)
                                      {
                                        if (v115[3] <= v222 && v115[4] >= v222)
                                        {
LABEL_172:
                                          unsigned int v118 = HIWORD(v114);
                                          goto LABEL_149;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              break;
                            }
                          }
                          else
                          {
                            if (v99 > 1)
                            {
                              if (v104 >= *(void *)&v97) {
                                v104 %= *(void *)&v97;
                              }
                            }
                            else
                            {
                              v104 &= *(void *)&v97 - 1;
                            }
                            if (v104 != v102) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    id v116 = (void *)v93[1];
                    if (v116)
                    {
                      do
                      {
                        uint64_t v117 = v116;
                        id v116 = (void *)*v116;
                      }
                      while (v116);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v117 = (void *)v93[2];
                        BOOL v112 = *v117 == (void)v93;
                        uint64_t v93 = v117;
                      }
                      while (!v112);
                    }
                    uint64_t v93 = v117;
                  }
                  while (v117 != v94);
                  LOWORD(v118) = -1;
                  LODWORD(v101) = -1;
LABEL_149:
                  uint64_t v20 = a1;
                }
              }
              unsigned __int32 v119 = v89 + v239;
              if (v242 != v81)
              {
                v81[-1].n128_u32[1] += v86;
                v81[-1].n128_u32[2] = v119;
              }
              if (v81 >= v88)
              {
                unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v81 - (char *)v242) >> 2) + 1;
                if (v120 > 0xCCCCCCCCCCCCCCCLL) {
                  abort();
                }
                if (0x999999999999999ALL * (((char *)v88 - (char *)v242) >> 2) > v120) {
                  unint64_t v120 = 0x999999999999999ALL * (((char *)v88 - (char *)v242) >> 2);
                }
                if (0xCCCCCCCCCCCCCCCDLL * (((char *)v88 - (char *)v242) >> 2) >= 0x666666666666666) {
                  unint64_t v121 = 0xCCCCCCCCCCCCCCCLL;
                }
                else {
                  unint64_t v121 = v120;
                }
                uint64_t v122 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<DYMTLShaderProfilerProcessedUSCSample>>(v121);
                uint64_t v124 = &v122[4 * (((char *)v81 - (char *)v242) >> 2)];
                *(_DWORD *)uint64_t v124 = v101;
                *((_DWORD *)v124 + 1) = v119;
                *((_DWORD *)v124 + 2) = 0;
                *((_DWORD *)v124 + 3) = v236;
                *((_WORD *)v124 + 8) = v118;
                if (v242 == v81)
                {
                  id v127 = v81;
                  v242 = (__n128 *)&v122[4 * (((char *)v81 - (char *)v242) >> 2)];
                }
                else
                {
                  long long v125 = (__n128 *)&v122[4 * (((char *)v81 - (char *)v242) >> 2)];
                  do
                  {
                    __n128 v126 = *(__n128 *)((char *)v81 - 20);
                    v125[-1].n128_u32[3] = v81[-1].n128_u32[3];
                    *(__n128 *)((char *)v125 - 20) = v126;
                    long long v125 = (__n128 *)((char *)v125 - 20);
                    unint64_t v81 = (__n128 *)((char *)v81 - 20);
                  }
                  while (v81 != v242);
                  id v127 = v242;
                  v242 = v125;
                }
                long long v88 = (__n128 *)&v122[20 * v123];
                unint64_t v81 = (__n128 *)(v124 + 20);
                if (v127)
                {
                  unsigned int v128 = &v122[20 * v123];
                  operator delete(v127);
                  long long v88 = (__n128 *)v128;
                }
                int v86 = 0;
                uint64_t v90 = v233;
              }
              else
              {
                int v86 = 0;
                v81->n128_u32[0] = v101;
                v81->n128_u32[1] = v119;
                v81->n128_u32[2] = 0;
                v81->n128_u32[3] = v236;
                v81[1].n128_u16[0] = v118;
                unint64_t v81 = (__n128 *)((char *)v81 + 20);
              }
            }
            else
            {
              unsigned int v91 = v89;
            }
            unsigned int v89 = v91 + 1;
            v91 += 2;
          }
          while (v91 < 8);
          uint64_t v129 = (char *)v81 - (char *)v242;
          if (v226 == (char *)v81 - (char *)v242)
          {
            ++v86;
            *(void *)((char *)v252[0] + ((v239 >> 3) & 0x1FFFFFF8)) |= 1 << (v239 & 0x38);
          }
          unint64_t v85 = (v228 + 4);
          uint64_t v84 = *v218;
          int v87 = v228 + 4;
        }
        while (v85 < (*v219 - *v218) >> 3);
        uint64_t v130 = v242;
      }
      unint64_t v131 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v129 >> 2));
      uint64_t v132 = v81 == v130 ? 0 : v131;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *,false>(v130, v81, v132, 1);
      BufferView<unsigned long long>::BufferView(v246, *(void **)(v230 + 56));
      size_t v133 = v130;
      if (v81 != v130) {
        break;
      }
LABEL_251:
      if (v252[0]) {
        operator delete(v252[0]);
      }
      unint64_t v5 = v212;
      uint64_t v20 = a1;
      if (v133) {
        operator delete(v133);
      }
      int64_t v41 = v214;
LABEL_277:
      v41 += 3;
      if (v41 == v216) {
        goto LABEL_285;
      }
    }
    unint64_t v134 = 0;
    unint64_t v135 = ((char *)v81 - (char *)v130) / 20;
    unint64_t v225 = v135 - 1;
    unint64_t v227 = &v130[2].n128_i8[8];
    unint64_t v136 = v135 - 2;
    unint64_t v234 = v135;
    unint64_t v229 = v135 - 2;
    while (1)
    {
      unint64_t v137 = (_DWORD *)v133 + 5 * v134;
      int v138 = v137[2];
      int v139 = v137[3] - v137[1];
      unint64_t v140 = (unsigned __int16 *)(v137 + 4);
      v243 = v137;
      if (v134 + 1 >= v135)
      {
        unint64_t v144 = v134;
        uint64_t v142 = v230;
      }
      else
      {
        unsigned int v141 = *v137;
        uint64_t v142 = v230;
        if (*v137 == v133[1].n128_u32[5 * v134 + 1])
        {
          uint64_t v143 = &v227[20 * v134];
          unint64_t v144 = v134;
          while (*v140 == *((unsigned __int16 *)v143 - 2))
          {
            int v139 = *((_DWORD *)v143 - 2) + v139 - *((_DWORD *)v143 - 4);
            v138 += *((_DWORD *)v143 - 3);
            if (v136 == v144)
            {
              unint64_t v144 = v225;
              break;
            }
            int v145 = *(_DWORD *)v143;
            v143 += 20;
            ++v144;
            if (v141 != v145) {
              break;
            }
          }
        }
        else
        {
          unint64_t v144 = v134;
        }
      }
      int v240 = v139 + 7;
      int v237 = ((v139 + 7) >> 3) - v138;
      int v146 = (4 * v237) | 1;
      if ((unint64_t)objc_msgSend(*(id *)(v142 + 72), "length", v201, v202, v203) < 8
                                                                                          * (unint64_t)(v146 + *(_DWORD *)(v142 + 84)))
        [*(id *)(v142 + 72) increaseLengthBy:[*(id *)(v142 + 72) length]];
      long long v147 = (unint64_t *)((char *)[*(id *)(v142 + 72) mutableBytes]
                                + 8 * *(unsigned int *)(v142 + 84));
      int v148 = *(_DWORD *)(v142 + 24);
      unsigned int v149 = v148 & 0x3FFFFFF;
      if ((v148 & 0x3FFFFFF) == 0)
      {
        unint64_t v154 = *v147 & 0x7FFFFFFFFFLL;
LABEL_220:
        unint64_t *v147 = v154;
        uint64_t v159 = v230;
        uint64_t v161 = *(char **)(v230 + 120);
        unint64_t v160 = *(void *)(v230 + 128);
        if ((unint64_t)v161 >= v160)
        {
          v163 = *(char **)(v230 + 112);
          uint64_t v164 = (v161 - v163) >> 2;
          unint64_t v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 62) {
            abort();
          }
          uint64_t v166 = v160 - (void)v163;
          if (v166 >> 1 > v165) {
            unint64_t v165 = v166 >> 1;
          }
          BOOL v48 = (unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v48) {
            unint64_t v167 = v165;
          }
          if (v167)
          {
            unint64_t v167 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v167);
            uint64_t v169 = v230;
            v163 = *(char **)(v230 + 112);
            uint64_t v161 = *(char **)(v230 + 120);
          }
          else
          {
            uint64_t v168 = 0;
            uint64_t v169 = v230;
          }
          unint64_t v170 = (_DWORD *)(v167 + 4 * v164);
          *unint64_t v170 = *(_DWORD *)(v169 + 84);
          v162 = v170 + 1;
          while (v161 != v163)
          {
            int v171 = *((_DWORD *)v161 - 1);
            v161 -= 4;
            *--unint64_t v170 = v171;
          }
          *(void *)(v230 + 112) = v170;
          *(void *)(v230 + 120) = v162;
          *(void *)(v230 + 128) = v167 + 4 * v168;
          if (v163) {
            operator delete(v163);
          }
          uint64_t v159 = v230;
        }
        else
        {
          *(_DWORD *)uint64_t v161 = *(_DWORD *)(v230 + 84);
          v162 = v161 + 4;
        }
        *(void *)(v159 + 120) = v162;
        *(_DWORD *)(v159 + 84) += v146;
        unint64_t *v147 = *v147 & 0xFFFFFF8000000000 | *v243 | ((unint64_t)(v237 & 0x7F) << 32);
        v172 = v147 + 1;
        ++*(_DWORD *)(v159 + 80);
        if (v134 <= v144)
        {
          unsigned int v173 = 0;
          unint64_t v174 = (char *)v252[0];
          do
          {
            unint64_t v175 = (char *)v133 + 20 * v134;
            unsigned int v178 = *((_DWORD *)v175 + 3);
            v176 = (unsigned int *)(v175 + 12);
            unsigned int v177 = v178;
            for (unsigned int i = *(v176 - 2); i < v177; ++i)
            {
              if ((*(void *)&v174[((unint64_t)i >> 3) & 0x1FFFFFF8] >> i))
              {
                i += 8;
              }
              else
              {
                *((_DWORD *)v172 + v173++) = *(_DWORD *)(v215 + 4 * i);
                unsigned int v177 = *v176;
              }
            }
            ++v134;
          }
          while (v134 <= v144);
        }
        else
        {
          unsigned int v173 = 0;
        }
        if ((v240 & 0xFFFFFFF8) != v139)
        {
          unsigned int v180 = (v240 & 0xFFFFFFF8) - v139;
          if (v180 <= 1) {
            unsigned int v180 = 1;
          }
          do
          {
            *((_DWORD *)v172 + v173++) = 0;
            --v180;
          }
          while (v180);
        }
        goto LABEL_250;
      }
      unsigned int v150 = *v243;
      if (*v243 == -1)
      {
        unint64_t v154 = *v147 & 0x7FFFFFFFFFLL | ((unint64_t)(v148 - 1) << 39);
        goto LABEL_220;
      }
      unsigned int v151 = *v140;
      if (v151 > 0x63) {
        break;
      }
      switch(v151)
      {
        case 1u:
          uint64_t v153 = 0;
          break;
        case 2u:
          goto LABEL_207;
        case 3u:
          unint64_t v152 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v209, *v243);
          uint64_t v153 = 1;
          if (!v152) {
            uint64_t v153 = 2;
          }
          break;
        default:
          goto LABEL_250;
      }
LABEL_209:
      v155 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)a1 + 5 * v153 + 23, v150);
      if (v155)
      {
        unint64_t v156 = v155[4];
        if (v156 == -1)
        {
          unint64_t v156 = v155[3];
          if (v156 <= *(void *)(v231 + 8)) {
            unint64_t v156 = *(void *)(v231 + 8);
          }
        }
        else if (v156 >= *(void *)(v231 + 8))
        {
          unint64_t v156 = *(void *)(v231 + 8);
        }
        unint64_t v157 = (unint64_t *)(*(void *)v246 + 8 * (v149 - 1));
        do
        {
          if (!--v149) {
            break;
          }
          unint64_t v158 = *v157--;
        }
        while (v158 >= v156);
        unint64_t v154 = *v147 & 0x7FFFFFFFFFLL | ((unint64_t)v149 << 39);
        goto LABEL_220;
      }
LABEL_250:
      unint64_t v134 = v144 + 2;
      unint64_t v135 = v234;
      unint64_t v136 = v229;
      if (v144 + 2 >= v234) {
        goto LABEL_251;
      }
    }
    if (v151 - 100 >= 2) {
      goto LABEL_250;
    }
LABEL_207:
    uint64_t v153 = 1;
    goto LABEL_209;
  }
  double v40 = 0.0;
LABEL_285:
  if (*((void *)v20 + 38) == *((void *)v20 + 39))
  {
    v195 = v257[0];
    goto LABEL_293;
  }
  uint64_t v193 = a3[8];
  unint64_t v194 = a3[9] - v193;
  v195 = v257[0];
  if ((v194 & 0x7FFFFFFF8) == 0)
  {
LABEL_293:
    v199 = (double *)&unk_4C7000;
    goto LABEL_294;
  }
  unint64_t v196 = 0;
  uint64_t v197 = *(void *)(*((void *)v20 + 61) + 208);
  uint64_t v198 = (v194 >> 3);
  v199 = (double *)&unk_4C7000;
  do
  {
    if ((*(void *)(v197 + ((v196 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v196)) {
      *(void *)(v193 + 8 * v196) -= *(void *)&v195[8 * v196];
    }
    ++v196;
  }
  while (v198 != v196);
LABEL_294:
  std::vector<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::__clear[abi:nn180100](v207);
  std::vector<std::pair<unsigned int,SampleInfoWithPayload>>::__clear[abi:nn180100](v208);
  if (v195) {
    operator delete(v195);
  }
  if (v5) {
    operator delete(v5);
  }
  return 1.0 - v40 > v199[484];
}

void sub_31245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a63) {
    operator delete(a63);
  }
  uint64_t v65 = *(void **)(v63 - 192);
  if (v65) {
    operator delete(v65);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<GRCPerFrameData::PriorityQueueElement>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          std::default_delete<GRCPerFrameData::PriorityQueueElement>::operator()[abi:nn180100](v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = a2 - 3;
  uint64_t v11 = (uint64_t)(a2 - 6);
  uint64_t v12 = (uint64_t)(a2 - 9);
  unint64_t j = v9;
  unint64_t v158 = (unint64_t)a2;
  while (1)
  {
    unint64_t v9 = j;
    uint64_t v14 = (uint64_t)a2 - j;
    uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    if (v5 || !v4)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>((uint64_t)v10, v9);
          if (result)
          {
            unint64_t v80 = *(void *)v9;
            *(void *)unint64_t v9 = *(a2 - 3);
            *(a2 - 3) = v80;
            LODWORD(v80) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v80;
            LODWORD(v80) = *(_DWORD *)(v9 + 12);
            *(_DWORD *)(v9 + 12) = *((_DWORD *)a2 - 3);
            *((_DWORD *)a2 - 3) = v80;
            unint64_t v81 = *(void *)(v9 + 16);
            *(void *)(v9 + 16) = *(a2 - 1);
            *(a2 - 1) = v81;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(v9, v9 + 24, (uint64_t)v10);
          break;
        case 4:
          __n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(v9, v9 + 24, v9 + 48, (uint64_t)v10);
          break;
        case 5:
          __n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(v9, v9 + 24, v9 + 48, v9 + 72, (uint64_t)v10);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 575) {
      break;
    }
    if (!a3)
    {
      if ((unint64_t *)v9 != a2)
      {
        int64_t v100 = (unint64_t)(v15 - 2) >> 1;
        int64_t v156 = v100;
        do
        {
          int64_t v101 = v100;
          if (v156 >= v100)
          {
            uint64_t v102 = (2 * v100) | 1;
            uint64_t v103 = v9 + 24 * v102;
            if (2 * v100 + 2 < v15
              && std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v9 + 24 * v102, v103 + 24))
            {
              v103 += 24;
              uint64_t v102 = 2 * v101 + 2;
            }
            uint64_t v104 = v9 + 24 * v101;
            __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v103, v104);
            a2 = (unint64_t *)v158;
            if ((result & 1) == 0)
            {
              unint64_t v105 = *(void *)v104;
              uint64_t v106 = *(unsigned int *)(v104 + 8);
              unsigned int v107 = *(_DWORD *)(v104 + 12);
              unint64_t v150 = *(void *)(v104 + 16);
              *(void *)uint64_t v104 = *(void *)v103;
              *(_DWORD *)(v104 + 8) = *(_DWORD *)(v103 + 8);
              *(_DWORD *)(v104 + 12) = *(_DWORD *)(v103 + 12);
              *(void *)(v104 + 16) = *(void *)(v103 + 16);
              if (v156 >= v102)
              {
                int64_t v154 = v101;
                unsigned int v152 = v107;
                while (1)
                {
                  uint64_t v108 = v103;
                  uint64_t v109 = 2 * v102;
                  uint64_t v102 = (2 * v102) | 1;
                  uint64_t v103 = v9 + 24 * v102;
                  uint64_t v110 = v109 + 2;
                  if (v109 + 2 < v15)
                  {
                    uint64_t v111 = v106;
                    __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v9 + 24 * v102, v103 + 24);
                    unsigned int v107 = v152;
                    uint64_t v106 = v111;
                    int64_t v101 = v154;
                    if (result)
                    {
                      v103 += 24;
                      uint64_t v102 = v110;
                    }
                  }
                  unint64_t v112 = *(void *)v103;
                  if (*(void *)v103 < v105) {
                    break;
                  }
                  unsigned int v113 = *(_DWORD *)(v103 + 8);
                  if (v105 >= v112)
                  {
                    if (v113 < v106) {
                      break;
                    }
                    if (v106 >= v113)
                    {
                      unsigned int v114 = *(_DWORD *)(v103 + 12);
                      if (v114 < v107 || v107 >= v114 && *(void *)(v103 + 16) < v150) {
                        break;
                      }
                    }
                  }
                  *(void *)uint64_t v108 = v112;
                  *(_DWORD *)(v108 + 8) = v113;
                  *(_DWORD *)(v108 + 12) = *(_DWORD *)(v103 + 12);
                  *(void *)(v108 + 16) = *(void *)(v103 + 16);
                  if (v156 < v102) {
                    goto LABEL_186;
                  }
                }
                uint64_t v103 = v108;
              }
LABEL_186:
              *(void *)uint64_t v103 = v105;
              *(_DWORD *)(v103 + 8) = v106;
              *(_DWORD *)(v103 + 12) = v107;
              *(void *)(v103 + 16) = v150;
              a2 = (unint64_t *)v158;
            }
          }
          int64_t v100 = v101 - 1;
        }
        while (v101);
        int64_t v115 = v14 / 0x18uLL;
        do
        {
          id v116 = a2;
          uint64_t v117 = 0;
          int v153 = *(_DWORD *)(v9 + 12);
          int v155 = *(_DWORD *)(v9 + 8);
          unint64_t v151 = *(void *)(v9 + 16);
          uint64_t v118 = v115 - 2;
          unint64_t v157 = *(void *)v9;
          if (v115 < 2) {
            uint64_t v118 = v115 - 1;
          }
          uint64_t v119 = v118 >> 1;
          unint64_t v120 = v9;
          do
          {
            uint64_t v121 = v120 + 24 * v117 + 24;
            uint64_t v122 = (2 * v117) | 1;
            uint64_t v123 = 2 * v117 + 2;
            if (v123 < v115)
            {
              __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v120 + 24 * v117 + 24, v120 + 24 * v117 + 48);
              if (result)
              {
                v121 += 24;
                uint64_t v122 = v123;
              }
            }
            *(void *)unint64_t v120 = *(void *)v121;
            *(_DWORD *)(v120 + 8) = *(_DWORD *)(v121 + 8);
            *(_DWORD *)(v120 + 12) = *(_DWORD *)(v121 + 12);
            *(void *)(v120 + 16) = *(void *)(v121 + 16);
            unint64_t v120 = v121;
            uint64_t v117 = v122;
          }
          while (v122 <= v119);
          if ((unint64_t *)v121 == v116 - 3)
          {
            *(void *)uint64_t v121 = v157;
            *(_DWORD *)(v121 + 8) = v155;
            *(_DWORD *)(v121 + 12) = v153;
            *(void *)(v121 + 16) = v151;
            goto LABEL_213;
          }
          *(void *)uint64_t v121 = *(v116 - 3);
          *(_DWORD *)(v121 + 8) = *((_DWORD *)v116 - 4);
          *(_DWORD *)(v121 + 12) = *((_DWORD *)v116 - 3);
          *(void *)(v121 + 16) = *(v116 - 1);
          *(v116 - 3) = v157;
          *((_DWORD *)v116 - 4) = v155;
          *((_DWORD *)v116 - 3) = v153;
          *(v116 - 1) = v151;
          uint64_t v124 = v121 - v9 + 24;
          if (v124 >= 25)
          {
            unint64_t v125 = -2 - 0x5555555555555555 * (v124 >> 3);
            unint64_t v126 = v125 >> 1;
            uint64_t v127 = v9 + 24 * (v125 >> 1);
            __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v127, v121);
            if (result)
            {
              unint64_t v128 = *(void *)v121;
              unsigned int v129 = *(_DWORD *)(v121 + 8);
              unsigned int v130 = *(_DWORD *)(v121 + 12);
              unint64_t v131 = *(void *)(v121 + 16);
              *(void *)uint64_t v121 = *(void *)v127;
              *(_DWORD *)(v121 + 8) = *(_DWORD *)(v127 + 8);
              *(_DWORD *)(v121 + 12) = *(_DWORD *)(v127 + 12);
              *(void *)(v121 + 16) = *(void *)(v127 + 16);
              if (v125 < 2) {
                goto LABEL_212;
              }
              while (1)
              {
                uint64_t v132 = v127;
                unint64_t v133 = v126 - 1;
                unint64_t v126 = (v126 - 1) >> 1;
                uint64_t v127 = v9 + 24 * v126;
                unint64_t v134 = *(void *)v127;
                if (*(void *)v127 >= v128)
                {
                  if (v128 < v134
                    || (unsigned int v135 = *(_DWORD *)(v127 + 8), v135 >= v129)
                    && (v129 < v135
                     || (unsigned int v136 = *(_DWORD *)(v127 + 12), v136 >= v130) && (v130 < v136 || *(void *)(v127 + 16) >= v131)))
                  {
                    uint64_t v127 = v132;
LABEL_212:
                    *(void *)uint64_t v127 = v128;
                    *(_DWORD *)(v127 + 8) = v129;
                    *(_DWORD *)(v127 + 12) = v130;
                    *(void *)(v127 + 16) = v131;
                    break;
                  }
                }
                else
                {
                  unsigned int v135 = *(_DWORD *)(v127 + 8);
                }
                *(void *)uint64_t v132 = v134;
                *(_DWORD *)(v132 + 8) = v135;
                *(_DWORD *)(v132 + 12) = *(_DWORD *)(v127 + 12);
                *(void *)(v132 + 16) = *(void *)(v127 + 16);
                if (v133 <= 1) {
                  goto LABEL_212;
                }
              }
            }
          }
LABEL_213:
          a2 = v116 - 3;
        }
        while (v115-- > 2);
      }
      return result;
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    uint64_t v17 = (unint64_t *)(v9 + 24 * ((unint64_t)v15 >> 1));
    if ((unint64_t)v14 < 0xC01)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>((uint64_t)v17, v9, (uint64_t)v10);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(v9, (uint64_t)v17, (uint64_t)v10);
      uint64_t v18 = 3 * v16;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(v9 + 24, v9 + 8 * v18 - 24, v11);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(v9 + 48, v9 + 24 + 8 * v18, v12);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(v9 + 8 * v18 - 24, (uint64_t)v17, v9 + 24 + 8 * v18);
      unint64_t v19 = *(void *)v9;
      *(void *)unint64_t v9 = *v17;
      unint64_t *v17 = v19;
      unint64_t v20 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = v17[1];
      v17[1] = v20;
      unint64_t v21 = *(void *)(v9 + 16);
      *(void *)(v9 + 16) = v17[2];
      v17[2] = v21;
    }
    --a3;
    a2 = (unint64_t *)v158;
    if ((a4 & 1) != 0
      || (__n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v9 - 24, v9), (result & 1) != 0))
    {
      unint64_t v22 = *(void *)v9;
      unsigned int v23 = *(_DWORD *)(v9 + 8);
      unsigned int v24 = *(_DWORD *)(v9 + 12);
      unint64_t v25 = v9 + 24;
      unint64_t v26 = *(void *)(v9 + 16);
      while (1)
      {
        unint64_t v27 = *(void *)v25;
        if (*(void *)v25 >= v22)
        {
          if (v22 < v27) {
            break;
          }
          unsigned int v28 = *(_DWORD *)(v25 + 8);
          if (v28 >= v23)
          {
            if (v23 < v28) {
              break;
            }
            unsigned int v29 = *(_DWORD *)(v25 + 12);
            if (v29 >= v24 && (v24 < v29 || *(void *)(v25 + 16) >= v26)) {
              break;
            }
          }
        }
        v25 += 24;
      }
      if (v25 - 24 == v9)
      {
        unsigned int i = (void *)v158;
        if (v25 < v158)
        {
          unint64_t v35 = *v10;
          unsigned int i = v10;
          if (*v10 >= v22)
          {
            unsigned int i = v10;
            do
            {
              if (v22 >= v35)
              {
                unsigned int v36 = *((_DWORD *)i + 2);
                if (v36 < v23) {
                  break;
                }
                if (v23 >= v36)
                {
                  unsigned int v37 = *((_DWORD *)i + 3);
                  if (v37 < v24 || v24 >= v37 && i[2] < v26) {
                    break;
                  }
                }
              }
              if (v25 >= (unint64_t)i) {
                break;
              }
              unint64_t v38 = *(i - 3);
              i -= 3;
              unint64_t v35 = v38;
            }
            while (v38 >= v22);
          }
        }
      }
      else
      {
        unint64_t v30 = *v10;
        for (unsigned int i = v10; v30 >= v22; i -= 3)
        {
          if (v22 >= v30)
          {
            unsigned int v32 = *((_DWORD *)i + 2);
            if (v32 < v23) {
              break;
            }
            if (v23 >= v32)
            {
              unsigned int v33 = *((_DWORD *)i + 3);
              if (v33 < v24 || v24 >= v33 && i[2] < v26) {
                break;
              }
            }
          }
          unint64_t v34 = *(i - 3);
          unint64_t v30 = v34;
        }
      }
      unint64_t j = v25;
      if (v25 < (unint64_t)i)
      {
        unint64_t v39 = *i;
        unint64_t j = v25;
        unint64_t v40 = (unint64_t)i;
        do
        {
          *(void *)unint64_t j = v39;
          *(void *)unint64_t v40 = v27;
          int v41 = *(_DWORD *)(j + 8);
          *(_DWORD *)(j + 8) = *(_DWORD *)(v40 + 8);
          *(_DWORD *)(v40 + 8) = v41;
          int v42 = *(_DWORD *)(j + 12);
          *(_DWORD *)(j + 12) = *(_DWORD *)(v40 + 12);
          *(_DWORD *)(v40 + 12) = v42;
          uint64_t v43 = *(void *)(j + 16);
          *(void *)(j + 16) = *(void *)(v40 + 16);
          *(void *)(v40 + 16) = v43;
          while (1)
          {
            do
            {
              unint64_t v44 = *(void *)(j + 24);
              j += 24;
              unint64_t v27 = v44;
            }
            while (v44 < v22);
            if (v22 < v27) {
              break;
            }
            unsigned int v45 = *(_DWORD *)(j + 8);
            if (v45 >= v23)
            {
              if (v23 < v45) {
                break;
              }
              unsigned int v46 = *(_DWORD *)(j + 12);
              if (v46 >= v24 && (v24 < v46 || *(void *)(j + 16) >= v26)) {
                break;
              }
            }
          }
          while (1)
          {
            unint64_t v47 = *(void *)(v40 - 24);
            v40 -= 24;
            unint64_t v39 = v47;
            if (v47 < v22) {
              break;
            }
            if (v22 >= v39)
            {
              unsigned int v48 = *(_DWORD *)(v40 + 8);
              if (v48 < v23) {
                break;
              }
              if (v23 >= v48)
              {
                unsigned int v49 = *(_DWORD *)(v40 + 12);
                if (v49 < v24 || v24 >= v49 && *(void *)(v40 + 16) < v26) {
                  break;
                }
              }
            }
          }
        }
        while (j < v40);
      }
      if (j - 24 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(j - 24);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(j - 16);
        *(_DWORD *)(v9 + 12) = *(_DWORD *)(j - 12);
        *(void *)(v9 + 16) = *(void *)(j - 8);
      }
      *(void *)(j - 24) = v22;
      *(_DWORD *)(j - 16) = v23;
      *(_DWORD *)(j - 12) = v24;
      *(void *)(j - 8) = v26;
      if (v25 < (unint64_t)i) {
        goto LABEL_65;
      }
      BOOL v50 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(v9, j - 24);
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(j, v158);
      if (result)
      {
        a2 = (unint64_t *)(j - 24);
        if (v50) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v50)
      {
LABEL_65:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *,false>(v9, j - 24, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      unint64_t v51 = *(void *)v9;
      unsigned int v52 = *(_DWORD *)(v9 + 8);
      unsigned int v53 = *(_DWORD *)(v9 + 12);
      unint64_t v54 = *(void *)(v9 + 16);
      unint64_t v55 = *v10;
      if (*(void *)v9 < *v10
        || v55 >= v51
        && ((unsigned int v78 = *(_DWORD *)(v158 - 16), v52 < v78)
         || v78 >= v52 && ((unsigned int v79 = *(_DWORD *)(v158 - 12), v53 < v79) || v79 >= v53 && v54 < *(void *)(v158 - 8))))
      {
        unint64_t j = v9;
        while (1)
        {
          unint64_t v57 = *(void *)(j + 24);
          j += 24;
          unint64_t v56 = v57;
          if (v51 < v57) {
            break;
          }
          if (v56 >= v51)
          {
            unsigned int v58 = *(_DWORD *)(j + 8);
            if (v52 < v58) {
              break;
            }
            if (v58 >= v52)
            {
              unsigned int v59 = *(_DWORD *)(j + 12);
              if (v53 < v59 || v59 >= v53 && v54 < *(void *)(j + 16)) {
                break;
              }
            }
          }
        }
      }
      else
      {
        for (unint64_t j = v9 + 24; j < v158; j += 24)
        {
          if (v51 < *(void *)j) {
            break;
          }
          if (*(void *)j >= v51)
          {
            unsigned int v76 = *(_DWORD *)(j + 8);
            if (v52 < v76) {
              break;
            }
            if (v76 >= v52)
            {
              unsigned int v77 = *(_DWORD *)(j + 12);
              if (v53 < v77 || v77 >= v53 && v54 < *(void *)(j + 16)) {
                break;
              }
            }
          }
        }
      }
      k = (void *)v158;
      if (j < v158)
      {
        for (k = v10; ; k -= 3)
        {
          if (v51 >= v55)
          {
            if (v55 < v51) {
              break;
            }
            unsigned int v61 = *((_DWORD *)k + 2);
            if (v52 >= v61)
            {
              if (v61 < v52) {
                break;
              }
              unsigned int v62 = *((_DWORD *)k + 3);
              if (v53 >= v62 && (v62 < v53 || v54 >= k[2])) {
                break;
              }
            }
          }
          unint64_t v63 = *(k - 3);
          unint64_t v55 = v63;
        }
      }
      if (j < (unint64_t)k)
      {
        unint64_t v64 = *(void *)j;
        unint64_t v65 = *k;
        do
        {
          *(void *)unint64_t j = v65;
          void *k = v64;
          uint64_t v66 = *(void *)(j + 16);
          *(void *)(j + 16) = k[2];
          k[2] = v66;
          unint64_t v67 = *(void *)(j + 24);
          j += 24;
          unint64_t v64 = v67;
          int v68 = *(_DWORD *)(j - 16);
          *(_DWORD *)(j - 16) = *((_DWORD *)k + 2);
          *((_DWORD *)k + 2) = v68;
          int v69 = *(_DWORD *)(j - 12);
          *(_DWORD *)(j - 12) = *((_DWORD *)k + 3);
          *((_DWORD *)k + 3) = v69;
          while (v51 >= v64)
          {
            if (v64 >= v51)
            {
              unsigned int v70 = *(_DWORD *)(j + 8);
              if (v52 < v70) {
                break;
              }
              if (v70 >= v52)
              {
                unsigned int v71 = *(_DWORD *)(j + 12);
                if (v53 < v71 || v71 >= v53 && v54 < *(void *)(j + 16)) {
                  break;
                }
              }
            }
            unint64_t v72 = *(void *)(j + 24);
            j += 24;
            unint64_t v64 = v72;
          }
          while (1)
          {
            do
            {
              unint64_t v73 = *(k - 3);
              k -= 3;
              unint64_t v65 = v73;
            }
            while (v51 < v73);
            if (v65 < v51) {
              break;
            }
            unsigned int v74 = *((_DWORD *)k + 2);
            if (v52 >= v74)
            {
              if (v74 < v52) {
                break;
              }
              unsigned int v75 = *((_DWORD *)k + 3);
              if (v53 >= v75 && (v75 < v53 || v54 >= k[2])) {
                break;
              }
            }
          }
        }
        while (j < (unint64_t)k);
      }
      BOOL v4 = j - 24 >= v9;
      BOOL v5 = j - 24 == v9;
      if (j - 24 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(j - 24);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(j - 16);
        *(_DWORD *)(v9 + 12) = *(_DWORD *)(j - 12);
        *(void *)(v9 + 16) = *(void *)(j - 8);
      }
      a4 = 0;
      *(void *)(j - 24) = v51;
      *(_DWORD *)(j - 16) = v52;
      *(_DWORD *)(j - 12) = v53;
      *(void *)(j - 8) = v54;
    }
  }
  uint64_t v82 = v9 + 24;
  BOOL v84 = (unint64_t *)v9 == a2 || v82 == (void)a2;
  if ((a4 & 1) == 0)
  {
    if (!v84)
    {
      do
      {
        int v138 = (unint64_t *)v82;
        __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v82, v9);
        if (result)
        {
          unint64_t v139 = *v138;
          unsigned int v140 = *(_DWORD *)(v9 + 32);
          unsigned int v141 = *(_DWORD *)(v9 + 36);
          unint64_t v142 = *(void *)(v9 + 40);
          unint64_t v143 = *(void *)v9;
          while (1)
          {
            do
            {
              unint64_t v144 = v9;
              unint64_t v145 = v143;
              unint64_t v146 = *(void *)(v9 - 24);
              v9 -= 24;
              unint64_t v143 = v146;
              *(void *)(v9 + 48) = v145;
              int v147 = *(_DWORD *)(v9 + 36);
              *(_DWORD *)(v9 + 56) = *(_DWORD *)(v9 + 32);
              *(_DWORD *)(v9 + 60) = v147;
              *(void *)(v9 + 64) = *(void *)(v9 + 40);
            }
            while (v139 < v146);
            if (v143 < v139) {
              break;
            }
            unsigned int v148 = *(_DWORD *)(v144 - 16);
            if (v140 >= v148)
            {
              if (v148 < v140) {
                break;
              }
              unsigned int v149 = *(_DWORD *)(v144 - 12);
              if (v141 >= v149 && (v149 < v141 || v142 >= *(void *)(v144 - 8))) {
                break;
              }
            }
          }
          *(void *)unint64_t v144 = v139;
          *(_DWORD *)(v144 + 8) = v140;
          *(_DWORD *)(v144 + 12) = v141;
          *(void *)(v144 + 16) = v142;
        }
        uint64_t v82 = (uint64_t)(v138 + 3);
        unint64_t v9 = (unint64_t)v138;
      }
      while (v138 + 3 != a2);
    }
    return result;
  }
  if (v84) {
    return result;
  }
  uint64_t v85 = 0;
  uint64_t v86 = v9;
  do
  {
    uint64_t v87 = v82;
    __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v82, v86);
    if (!result) {
      goto LABEL_162;
    }
    unsigned int v88 = *(_DWORD *)(v86 + 32);
    unsigned int v89 = *(_DWORD *)(v86 + 36);
    unint64_t v90 = *(void *)(v86 + 40);
    uint64_t v92 = *(void *)(v86 + 16);
    unint64_t v91 = *(void *)(v86 + 24);
    *(void *)(v86 + 24) = *(void *)v86;
    *(_DWORD *)(v87 + 8) = *(_DWORD *)(v86 + 8);
    *(_DWORD *)(v87 + 12) = *(_DWORD *)(v86 + 12);
    *(void *)(v87 + 16) = v92;
    unint64_t v93 = v9;
    if (v86 == v9) {
      goto LABEL_161;
    }
    uint64_t v94 = v85;
    while (1)
    {
      unint64_t v95 = *(void *)(v9 + v94 - 24);
      if (v91 < v95)
      {
        unsigned int v96 = *(_DWORD *)(v9 + v94 - 16);
        goto LABEL_158;
      }
      if (v95 < v91) {
        goto LABEL_160;
      }
      unsigned int v96 = *(_DWORD *)(v9 + v94 - 16);
      if (v88 >= v96)
      {
        if (v96 < v88) {
          goto LABEL_160;
        }
        unsigned int v97 = *(_DWORD *)(v9 + v94 - 12);
        if (v89 >= v97) {
          break;
        }
      }
LABEL_158:
      v86 -= 24;
      uint64_t v98 = v9 + v94;
      *(void *)uint64_t v98 = v95;
      int v99 = *(_DWORD *)(v9 + v94 - 12);
      *(_DWORD *)(v98 + 8) = v96;
      *(_DWORD *)(v98 + 12) = v99;
      *(void *)(v98 + 16) = *(void *)(v9 + v94 - 8);
      v94 -= 24;
      if (!v94)
      {
        unint64_t v93 = v9;
        goto LABEL_161;
      }
    }
    if (v97 >= v89)
    {
      unint64_t v93 = v9 + v94;
      if (v90 >= *(void *)(v9 + v94 - 8)) {
        goto LABEL_161;
      }
      goto LABEL_158;
    }
LABEL_160:
    unint64_t v93 = v86;
LABEL_161:
    *(void *)unint64_t v93 = v91;
    *(_DWORD *)(v93 + 8) = v88;
    *(_DWORD *)(v93 + 12) = v89;
    *(void *)(v93 + 16) = v90;
LABEL_162:
    uint64_t v82 = v87 + 24;
    v85 += 24;
    uint64_t v86 = v87;
  }
  while ((unint64_t *)(v87 + 24) != a2);
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (uint64_t)&a2[-2].n128_i64[1] + 4;
    uint64_t v91 = (uint64_t)a2[-4].n128_i64 + 4;
    uint64_t v92 = (uint64_t)&a2[-3].n128_i64[1];
    uint64_t v11 = a1;
    unint64_t v93 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 2);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return v32.n128_f64[0];
              case 2uLL:
                if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v10, (uint64_t)v11))
                {
                  __n128 v42 = *v11;
                  unsigned __int32 v97 = v11[1].n128_u32[0];
                  __n128 v96 = v42;
                  __n128 v43 = *(__n128 *)v10;
                  v11[1].n128_u32[0] = *(_DWORD *)(v10 + 16);
                  __n128 *v11 = v43;
                  __n128 v32 = v96;
                  *(_DWORD *)(v10 + 16) = v97;
                  *(__n128 *)uint64_t v10 = v32;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)v11, (uint64_t)v11[1].n128_i64 + 4, v10);
                break;
              case 4uLL:
                v32.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(v11, (uint64_t)v11[1].n128_i64 + 4, (uint64_t)&v11[2].n128_i64[1], v10).n128_u64[0];
                break;
              case 5uLL:
                v32.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(v11, (uint64_t)v11[1].n128_i64 + 4, (uint64_t)&v11[2].n128_i64[1], (uint64_t)&v11[3].n128_i64[1] + 4, v10).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return v32.n128_f64[0];
          }
          if (v12 <= 479)
          {
            uint64_t v44 = (uint64_t)v11[1].n128_i64 + 4;
            BOOL v46 = v11 == a2 || v44 == (void)a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                uint64_t v48 = (uint64_t)v11;
                do
                {
                  uint64_t v49 = v48;
                  uint64_t v48 = v44;
                  if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v44, v49))
                  {
                    __n128 v50 = *(__n128 *)v48;
                    unsigned __int32 v97 = *(_DWORD *)(v48 + 16);
                    __n128 v96 = v50;
                    uint64_t v51 = v47;
                    while (1)
                    {
                      unsigned int v52 = (char *)v11 + v51;
                      *(__n128 *)(v52 + 20) = *(__n128 *)((char *)v11 + v51);
                      *((_DWORD *)v52 + 9) = *(unsigned __int32 *)((char *)v11[1].n128_u32 + v51);
                      if (!v51) {
                        break;
                      }
                      v51 -= 20;
                      if (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v96, (uint64_t)v11 + v51))
                      {
                        uint64_t v53 = (uint64_t)v11[1].n128_i64 + v51 + 4;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v53 = (uint64_t)v11;
LABEL_78:
                    __n128 v32 = v96;
                    *(_DWORD *)(v53 + 16) = v97;
                    *(__n128 *)uint64_t v53 = v32;
                  }
                  uint64_t v44 = v48 + 20;
                  v47 += 20;
                }
                while ((__n128 *)(v48 + 20) != a2);
              }
            }
            else if (!v46)
            {
              do
              {
                uint64_t v85 = (uint64_t)a1;
                a1 = (__n128 *)v44;
                if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v44, v85))
                {
                  __n128 v86 = *a1;
                  unsigned __int32 v97 = a1[1].n128_u32[0];
                  __n128 v96 = v86;
                  uint64_t v87 = a1;
                  do
                  {
                    unsigned int v88 = (__n128 *)((char *)v87 - 20);
                    *uint64_t v87 = *(__n128 *)((char *)v87 - 20);
                    v87[1].n128_u32[0] = v87[-1].n128_u32[3];
                    BOOL v89 = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v96, (uint64_t)&v87[-3].n128_i64[1]);
                    uint64_t v87 = v88;
                  }
                  while (v89);
                  __n128 v32 = v96;
                  v88[1].n128_u32[0] = v97;
                  __n128 *v88 = v32;
                }
                uint64_t v44 = (uint64_t)a1[1].n128_i64 + 4;
              }
              while (&a1[1].n128_u8[4] != (unsigned __int8 *)a2);
            }
            return v32.n128_f64[0];
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v54 = (v13 - 2) >> 1;
              int64_t v55 = v54;
              do
              {
                int64_t v56 = v55;
                if (v54 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  uint64_t v58 = (uint64_t)a1 + 20 * v57;
                  if (2 * v55 + 2 < (uint64_t)v13
                    && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)a1 + 20 * v57, v58 + 20))
                  {
                    v58 += 20;
                    uint64_t v57 = 2 * v56 + 2;
                  }
                  uint64_t v59 = (uint64_t)a1 + 20 * v56;
                  if (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v58, v59))
                  {
                    __n128 v60 = *(__n128 *)v59;
                    unsigned __int32 v97 = *(_DWORD *)(v59 + 16);
                    __n128 v96 = v60;
                    do
                    {
                      uint64_t v61 = v58;
                      long long v62 = *(_OWORD *)v58;
                      *(_DWORD *)(v59 + 16) = *(_DWORD *)(v58 + 16);
                      *(_OWORD *)uint64_t v59 = v62;
                      if (v54 < v57) {
                        break;
                      }
                      uint64_t v63 = (2 * v57) | 1;
                      uint64_t v58 = (uint64_t)a1 + 20 * v63;
                      uint64_t v64 = 2 * v57 + 2;
                      if (v64 < (uint64_t)v13
                        && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)a1 + 20 * v63, v58 + 20))
                      {
                        v58 += 20;
                        uint64_t v63 = v64;
                      }
                      uint64_t v59 = v61;
                      uint64_t v57 = v63;
                    }
                    while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v58, (uint64_t)&v96));
                    __n128 v65 = v96;
                    *(_DWORD *)(v61 + 16) = v97;
                    *(__n128 *)uint64_t v61 = v65;
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              int64_t v66 = v12 / 0x14uLL;
              unint64_t v67 = v93;
              do
              {
                uint64_t v68 = 0;
                __n128 v69 = *a1;
                unsigned __int32 v95 = a1[1].n128_u32[0];
                __n128 v94 = v69;
                uint64_t v70 = v66 - 2;
                if (v66 < 2) {
                  uint64_t v70 = v66 - 1;
                }
                uint64_t v71 = v70 >> 1;
                uint64_t v72 = (uint64_t)a1;
                do
                {
                  uint64_t v73 = v72 + 20 * v68 + 20;
                  uint64_t v74 = (2 * v68) | 1;
                  uint64_t v75 = 2 * v68 + 2;
                  if (v75 < v66
                    && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v72 + 20 * v68 + 20, v72 + 20 * v68 + 40))
                  {
                    v73 += 20;
                    uint64_t v74 = v75;
                  }
                  __n128 v76 = *(__n128 *)v73;
                  *(_DWORD *)(v72 + 16) = *(_DWORD *)(v73 + 16);
                  *(__n128 *)uint64_t v72 = v76;
                  uint64_t v72 = v73;
                  uint64_t v68 = v74;
                }
                while (v74 <= v71);
                unint64_t v67 = (__n128 *)((char *)v67 - 20);
                if ((__n128 *)v73 == v67)
                {
                  __n128 v32 = v94;
                  *(_DWORD *)(v73 + 16) = v95;
                  *(__n128 *)uint64_t v73 = v32;
                }
                else
                {
                  __n128 v77 = *v67;
                  *(_DWORD *)(v73 + 16) = v67[1].n128_u32[0];
                  *(__n128 *)uint64_t v73 = v77;
                  __n128 v32 = v94;
                  v67[1].n128_u32[0] = v95;
                  *unint64_t v67 = v32;
                  uint64_t v78 = v73 - (void)a1 + 20;
                  if (v78 >= 21)
                  {
                    unint64_t v79 = (unint64_t)(-2 - 0x3333333333333333 * (v78 >> 2)) >> 1;
                    uint64_t v80 = (uint64_t)a1 + 20 * v79;
                    if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v80, v73))
                    {
                      __n128 v81 = *(__n128 *)v73;
                      unsigned __int32 v97 = *(_DWORD *)(v73 + 16);
                      __n128 v96 = v81;
                      do
                      {
                        uint64_t v82 = v80;
                        long long v83 = *(_OWORD *)v80;
                        *(_DWORD *)(v73 + 16) = *(_DWORD *)(v80 + 16);
                        *(_OWORD *)uint64_t v73 = v83;
                        if (!v79) {
                          break;
                        }
                        unint64_t v79 = (v79 - 1) >> 1;
                        uint64_t v80 = (uint64_t)a1 + 20 * v79;
                        uint64_t v73 = v82;
                      }
                      while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v80, (uint64_t)&v96));
                      __n128 v32 = v96;
                      *(_DWORD *)(v82 + 16) = v97;
                      *(__n128 *)uint64_t v82 = v32;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return v32.n128_f64[0];
          }
          uint64_t v14 = (uint64_t)v11 + 20 * (v13 >> 1);
          if ((unint64_t)v12 >= 0xA01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)v11, (uint64_t)v11 + 20 * (v13 >> 1), v10);
            uint64_t v15 = 5 * (v13 >> 1);
            uint64_t v16 = (uint64_t)&v11[-1] + 20 * (v13 >> 1) - 4;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)v11[1].n128_i64 + 4, v16, v92);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)&v11[2].n128_i64[1], (uint64_t)v11[1].n128_i64 + 4 * v15 + 4, v91);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(v16, v14, (uint64_t)v11[1].n128_i64 + 4 * v15 + 4);
            __n128 v17 = *v11;
            unsigned __int32 v97 = v11[1].n128_u32[0];
            __n128 v96 = v17;
            unsigned __int32 v18 = *(_DWORD *)(v14 + 16);
            __n128 *v11 = *(__n128 *)v14;
            v11[1].n128_u32[0] = v18;
            __n128 v19 = v96;
            *(_DWORD *)(v14 + 16) = v97;
            *(__n128 *)uint64_t v14 = v19;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)v11 + 20 * (v13 >> 1), (uint64_t)v11, v10);
          }
          --a3;
          a2 = v93;
          if ((a4 & 1) != 0
            || GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v11[-2].n128_i64[1] + 4, (uint64_t)v11))
          {
            break;
          }
          __n128 v33 = *v11;
          unsigned __int32 v95 = v11[1].n128_u32[0];
          __n128 v94 = v33;
          if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v94, v10))
          {
            do
              uint64_t v11 = (__n128 *)((char *)v11 + 20);
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v94, (uint64_t)v11));
          }
          else
          {
            unint64_t v34 = (unint64_t)v11[1].n128_u64 + 4;
            do
            {
              uint64_t v11 = (__n128 *)v34;
              if (v34 >= (unint64_t)v93) {
                break;
              }
              BOOL v35 = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v94, v34);
              unint64_t v34 = (unint64_t)v11[1].n128_u64 + 4;
            }
            while (!v35);
          }
          unint64_t v36 = (unint64_t)v93;
          if (v11 < v93)
          {
            unint64_t v36 = (unint64_t)v93;
            do
              v36 -= 20;
            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v94, v36));
          }
          while ((unint64_t)v11 < v36)
          {
            __n128 v37 = *v11;
            unsigned __int32 v97 = v11[1].n128_u32[0];
            __n128 v96 = v37;
            __n128 v38 = *(__n128 *)v36;
            v11[1].n128_u32[0] = *(_DWORD *)(v36 + 16);
            __n128 *v11 = v38;
            __n128 v39 = v96;
            *(_DWORD *)(v36 + 16) = v97;
            *(__n128 *)unint64_t v36 = v39;
            do
              uint64_t v11 = (__n128 *)((char *)v11 + 20);
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v94, (uint64_t)v11));
            do
              v36 -= 20;
            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v94, v36));
          }
          unint64_t v40 = (__n128 *)((char *)v11 - 20);
          BOOL v4 = (__n128 *)((char *)&v11[-2].n128_f64[1] + 4) >= a1;
          BOOL v5 = (__n128 *)((char *)&v11[-2].n128_f64[1] + 4) == a1;
          if ((__n128 *)((char *)&v11[-2].n128_f64[1] + 4) != a1)
          {
            __n128 v41 = *v40;
            a1[1].n128_u32[0] = v11[-1].n128_u32[3];
            *a1 = v41;
          }
          a4 = 0;
          __n128 v32 = v94;
          v11[-1].n128_u32[3] = v95;
          *unint64_t v40 = v32;
        }
        __n128 v20 = *v11;
        unsigned __int32 v95 = v11[1].n128_u32[0];
        __n128 v94 = v20;
        unint64_t v21 = (unint64_t)v11;
        do
        {
          unint64_t v22 = v21;
          v21 += 20;
        }
        while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v21, (uint64_t)&v94));
        unint64_t v23 = (unint64_t)v93;
        if ((__n128 *)v22 == v11)
        {
          unint64_t v23 = (unint64_t)v93;
          do
          {
            if (v21 >= v23) {
              break;
            }
            v23 -= 20;
          }
          while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v23, (uint64_t)&v94));
        }
        else
        {
          do
            v23 -= 20;
          while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v23, (uint64_t)&v94));
        }
        if (v21 < v23)
        {
          unint64_t v24 = v21;
          unint64_t v25 = v23;
          do
          {
            __n128 v96 = *(__n128 *)v24;
            __n128 v26 = v96;
            unsigned __int32 v97 = *(_DWORD *)(v24 + 16);
            unsigned __int32 v27 = v97;
            int v28 = *(_DWORD *)(v25 + 16);
            *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
            *(_DWORD *)(v24 + 16) = v28;
            *(_DWORD *)(v25 + 16) = v27;
            *(__n128 *)unint64_t v25 = v26;
            do
            {
              unint64_t v22 = v24;
              v24 += 20;
            }
            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v24, (uint64_t)&v94));
            do
              v25 -= 20;
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v25, (uint64_t)&v94));
          }
          while (v24 < v25);
        }
        if ((__n128 *)v22 != a1)
        {
          __n128 v29 = *(__n128 *)v22;
          a1[1].n128_u32[0] = *(_DWORD *)(v22 + 16);
          *a1 = v29;
        }
        __n128 v30 = v94;
        *(_DWORD *)(v22 + 16) = v95;
        *(__n128 *)unint64_t v22 = v30;
        if (v21 >= v23) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *,false>(a1, v22, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = (__n128 *)(v22 + 20);
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(a1, (__n128 *)v22);
      uint64_t v11 = (__n128 *)(v22 + 20);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((__n128 *)(v22 + 20), v93))
      {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)v22;
    if (!v31) {
      continue;
    }
    return v32.n128_f64[0];
  }
}

BOOL GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)a1 >= *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 16);
    unsigned int v4 = *(unsigned __int16 *)(a2 + 16);
    BOOL v2 = v3 >= v4;
    if (v3 == v4)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 4);
      unsigned int v6 = *(_DWORD *)(a2 + 4);
      BOOL v2 = v5 >= v6;
      if (v5 == v6)
      {
        unsigned int v7 = *(_DWORD *)(a1 + 8);
        unsigned int v8 = *(_DWORD *)(a2 + 8);
        BOOL v2 = v7 >= v8;
        if (v7 == v8) {
          BOOL v2 = *(_DWORD *)(a1 + 12) >= *(_DWORD *)(a2 + 12);
        }
      }
    }
  }
  return !v2;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a2, a1);
  BOOL result = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a3, a2);
  if (v6)
  {
    if (result)
    {
      int v8 = *(_DWORD *)(a1 + 16);
      long long v9 = *(_OWORD *)a1;
      int v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v10;
    }
    else
    {
      int v17 = *(_DWORD *)(a1 + 16);
      long long v18 = *(_OWORD *)a1;
      int v19 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v19;
      *(_OWORD *)a2 = v18;
      *(_DWORD *)(a2 + 16) = v17;
      BOOL result = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a3, a2);
      if (!result) {
        return result;
      }
      int v8 = *(_DWORD *)(a2 + 16);
      long long v9 = *(_OWORD *)a2;
      int v20 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v20;
    }
    *(_OWORD *)a3 = v9;
    *(_DWORD *)(a3 + 16) = v8;
  }
  else if (result)
  {
    int v11 = *(_DWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)a2;
    int v13 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 16) = v13;
    *(_OWORD *)a3 = v12;
    *(_DWORD *)(a3 + 16) = v11;
    BOOL result = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a2, a1);
    if (result)
    {
      int v14 = *(_DWORD *)(a1 + 16);
      long long v15 = *(_OWORD *)a1;
      int v16 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v16;
      *(_OWORD *)a2 = v15;
      *(_DWORD *)(a2 + 16) = v14;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)a1, a2, a3);
  if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a4, a3))
  {
    int v9 = *(_DWORD *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    int v11 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_DWORD *)(a4 + 16) = v9;
    if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a3, a2))
    {
      int v12 = *(_DWORD *)(a2 + 16);
      __n128 v13 = *(__n128 *)a2;
      int v14 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v14;
      *(__n128 *)a3 = v13;
      *(_DWORD *)(a3 + 16) = v12;
      if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a2, (uint64_t)a1))
      {
        unsigned __int32 v15 = a1[1].n128_u32[0];
        __n128 result = *a1;
        unsigned __int32 v16 = *(_DWORD *)(a2 + 16);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u32[0] = v16;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(a1, a2, a3, a4);
  if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a5, a4))
  {
    int v11 = *(_DWORD *)(a4 + 16);
    long long v12 = *(_OWORD *)a4;
    int v13 = *(_DWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_DWORD *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(_DWORD *)(a5 + 16) = v11;
    if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a4, a3))
    {
      int v14 = *(_DWORD *)(a3 + 16);
      long long v15 = *(_OWORD *)a3;
      int v16 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(_DWORD *)(a4 + 16) = v14;
      if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a3, a2))
      {
        int v17 = *(_DWORD *)(a2 + 16);
        __n128 v18 = *(__n128 *)a2;
        int v19 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(_DWORD *)(a3 + 16) = v17;
        if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(a2, (uint64_t)a1))
        {
          unsigned __int32 v20 = a1[1].n128_u32[0];
          __n128 result = *a1;
          unsigned __int32 v21 = *(_DWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u32[0] = v21;
          *(__n128 *)a2 = result;
          *(_DWORD *)(a2 + 16) = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 20);
      if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&a2[-2].n128_i64[1] + 4, (uint64_t)a1))
      {
        unsigned __int32 v7 = a1[1].n128_u32[0];
        __n128 v8 = *a1;
        unsigned __int32 v9 = v6[1].n128_u32[0];
        *a1 = *v6;
        a1[1].n128_u32[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u32[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a1[3].n128_i64[1] + 4, (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    default:
      uint64_t v10 = (uint64_t)&a1[2].n128_i64[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1]);
      uint64_t v11 = (uint64_t)&a1[3].n128_i64[1] + 4;
      if ((__n128 *)((char *)&a1[3].n128_f64[1] + 4) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      int v18 = *(_DWORD *)(v11 + 16);
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 60) = *(__n128 *)((char *)a1 + v14 + 40);
        *((_DWORD *)v15 + 19) = *(unsigned __int32 *)((char *)&a1[3].n128_u32[2] + v14);
        if (v14 == -40) {
          break;
        }
        v14 -= 20;
        if (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v17, (uint64_t)(v15 + 20)))
        {
          uint64_t v16 = (uint64_t)&a1[3].n128_i64[1] + v14 + 4;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(_DWORD *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 20 == (void)a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 20;
    v11 += 20;
    if ((__n128 *)v11 == a2) {
      return 1;
    }
  }
}

void ProgramAddressHelper::UpdateActiveEncoderRef(ProgramAddressHelper *this, unsigned int a2, unsigned int a3, unsigned int a4, unint64_t a5)
{
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) > (unint64_t)a2)
  {
    __n128 v8 = (void *)(*(void *)this + 88 * a2);
    uint64_t v9 = v8[2];
    if (v9)
    {
      uint64_t v10 = (uint64_t **)(v8 + 5);
      uint64_t v11 = (uint64_t **)(v8 + 6);
      do
      {
        while (1)
        {
          unsigned int v81 = *(_DWORD *)(v9 + 16);
          unsigned int v12 = v81;
          if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)this + 36, v81, &v81)[4]+ 500 < a5)break; {
          uint64_t v9 = *(void *)v9;
          }
          if (!v9) {
            goto LABEL_27;
          }
        }
        int v13 = *v11;
        if (*v11)
        {
          uint64_t v14 = v8 + 6;
          long long v15 = *v11;
          do
          {
            unsigned int v16 = *((_DWORD *)v15 + 7);
            BOOL v17 = v16 >= v12;
            if (v16 >= v12) {
              int v18 = (uint64_t **)v15;
            }
            else {
              int v18 = (uint64_t **)(v15 + 1);
            }
            if (v17) {
              uint64_t v14 = v15;
            }
            long long v15 = *v18;
          }
          while (*v18);
          if (v14 != (uint64_t *)v11 && v12 >= *((_DWORD *)v14 + 7))
          {
            int v19 = (uint64_t *)v14[1];
            unsigned __int32 v20 = v14;
            if (v19)
            {
              do
              {
                unsigned __int32 v21 = v19;
                int v19 = (uint64_t *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                unsigned __int32 v21 = (uint64_t *)v20[2];
                BOOL v22 = *v21 == (void)v20;
                unsigned __int32 v20 = v21;
              }
              while (!v22);
            }
            if (*v10 == v14) {
              unint64_t *v10 = v21;
            }
            --v8[7];
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v13, v14);
            operator delete(v14);
          }
        }
        uint64_t v9 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v8, (uint64_t *)v9);
      }
      while (v9);
    }
LABEL_27:
    unint64_t v23 = a4;
    unsigned int v24 = a4 >> 1;
    if ((a4 & 1) == 0)
    {
      unsigned int v83 = a3;
      uint64_t v25 = *(void *)this + 88 * a2;
      int v28 = *(uint64_t **)(v25 + 48);
      __n128 v26 = (uint64_t **)(v25 + 48);
      unsigned __int32 v27 = v28;
      if (v28)
      {
        while (1)
        {
          while (1)
          {
            __n128 v29 = v27;
            unsigned int v30 = *((_DWORD *)v27 + 7);
            if (v30 <= a3) {
              break;
            }
            unsigned __int32 v27 = (uint64_t *)*v29;
            BOOL v31 = (uint64_t **)v29;
            if (!*v29) {
              goto LABEL_51;
            }
          }
          if (v30 >= a3) {
            break;
          }
          unsigned __int32 v27 = (uint64_t *)v29[1];
          if (!v27)
          {
            BOOL v31 = (uint64_t **)(v29 + 1);
            goto LABEL_51;
          }
        }
      }
      else
      {
        BOOL v31 = v26;
        __n128 v29 = v26;
LABEL_51:
        __n128 v42 = v29;
        __n128 v43 = v26 - 1;
        __n128 v29 = operator new(0x28uLL);
        *(void *)((char *)v29 + 28) = a3;
        *__n128 v29 = 0;
        v29[1] = 0;
        v29[2] = v42;
        _DWORD *v31 = v29;
        uint64_t v44 = (uint64_t *)**v43;
        unsigned int v45 = v29;
        if (v44)
        {
          char *v43 = v44;
          unsigned int v45 = *v31;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v43[1], v45);
        v43[2] = (uint64_t *)((char *)v43[2] + 1);
      }
      int v46 = 1 << a4;
      int v47 = (unsigned __int16)++*((_WORD *)v29 + 16);
      if (v47 == 1)
      {
        uint64_t v48 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)this + 36, a3, &v83);
        v48[3] = a5;
        v48[4] = -1;
        *((_DWORD *)v48 + 10) = v46;
      }
      uint64_t v49 = (char *)this + 40 * v24 + 184;
      __n128 v50 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v49, a3);
      if (v50)
      {
        uint64_t v51 = v50 + 4;
        if (v50[4] == -1)
        {
LABEL_134:
          *((_DWORD *)v29 + 8) |= v46 << v24 << 16;
          return;
        }
        v50[3] = a5;
LABEL_133:
        *uint64_t v51 = -1;
        goto LABEL_134;
      }
      unint64_t v52 = a3;
      unint64_t v53 = *((void *)v49 + 1);
      if (v53)
      {
        uint8x8_t v54 = (uint8x8_t)vcnt_s8((int8x8_t)v53);
        v54.i16[0] = vaddlv_u8(v54);
        if (v54.u32[0] > 1uLL)
        {
          unint64_t v23 = a3;
          if (v53 <= a3) {
            unint64_t v23 = a3 % v53;
          }
        }
        else
        {
          unint64_t v23 = (v53 - 1) & a3;
        }
        int64_t v55 = *(void ***)(*(void *)v49 + 8 * v23);
        if (v55)
        {
          int64_t v56 = *v55;
          if (*v55)
          {
            do
            {
              unint64_t v57 = v56[1];
              if (v57 == a3)
              {
                if (*((_DWORD *)v56 + 4) == a3) {
                  goto LABEL_132;
                }
              }
              else
              {
                if (v54.u32[0] > 1uLL)
                {
                  if (v57 >= v53) {
                    v57 %= v53;
                  }
                }
                else
                {
                  v57 &= v53 - 1;
                }
                if (v57 != v23) {
                  break;
                }
              }
              int64_t v56 = (void *)*v56;
            }
            while (v56);
          }
        }
      }
      int64_t v56 = operator new(0x28uLL);
      void *v56 = 0;
      v56[1] = a3;
      *((_DWORD *)v56 + 4) = a3;
      v56[3] = 0;
      v56[4] = 0;
      float v58 = (float)(unint64_t)(*((void *)v49 + 3) + 1);
      float v59 = *((float *)v49 + 8);
      if (v53 && (float)(v59 * (float)v53) >= v58)
      {
        unint64_t v52 = v23;
        goto LABEL_122;
      }
      BOOL v60 = 1;
      if (v53 >= 3) {
        BOOL v60 = (v53 & (v53 - 1)) != 0;
      }
      unint64_t v61 = v60 | (2 * v53);
      unint64_t v62 = vcvtps_u32_f32(v58 / v59);
      if (v61 <= v62) {
        int8x8_t prime = (int8x8_t)v62;
      }
      else {
        int8x8_t prime = (int8x8_t)v61;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v53 = *((void *)v49 + 1);
      }
      if (*(void *)&prime <= v53)
      {
        if (*(void *)&prime >= v53) {
          goto LABEL_118;
        }
        unint64_t v70 = vcvtps_u32_f32((float)*((unint64_t *)v49 + 3) / *((float *)v49 + 8));
        if (v53 < 3 || (uint8x8_t v71 = (uint8x8_t)vcnt_s8((int8x8_t)v53), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
        {
          unint64_t v70 = std::__next_prime(v70);
        }
        else
        {
          uint64_t v72 = 1 << -(char)__clz(v70 - 1);
          if (v70 >= 2) {
            unint64_t v70 = v72;
          }
        }
        if (*(void *)&prime <= v70) {
          int8x8_t prime = (int8x8_t)v70;
        }
        if (*(void *)&prime >= v53)
        {
          unint64_t v53 = *((void *)v49 + 1);
          goto LABEL_118;
        }
        if (!*(void *)&prime)
        {
          uint64_t v78 = *(void **)v49;
          *(void *)uint64_t v49 = 0;
          if (v78) {
            operator delete(v78);
          }
          unint64_t v53 = 0;
          *((void *)v49 + 1) = 0;
          goto LABEL_118;
        }
      }
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v64 = operator new(8 * *(void *)&prime);
      __n128 v65 = *(void **)v49;
      *(void *)uint64_t v49 = v64;
      if (v65) {
        operator delete(v65);
      }
      uint64_t v66 = 0;
      *((int8x8_t *)v49 + 1) = prime;
      do
        *(void *)(*(void *)v49 + 8 * v66++) = 0;
      while (*(void *)&prime != v66);
      unint64_t v67 = (void *)*((void *)v49 + 2);
      if (v67)
      {
        unint64_t v68 = v67[1];
        uint8x8_t v69 = (uint8x8_t)vcnt_s8(prime);
        v69.i16[0] = vaddlv_u8(v69);
        if (v69.u32[0] > 1uLL)
        {
          if (v68 >= *(void *)&prime) {
            v68 %= *(void *)&prime;
          }
        }
        else
        {
          v68 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)v49 + 8 * v68) = v49 + 16;
        uint64_t v73 = (void *)*v67;
        if (*v67)
        {
          do
          {
            unint64_t v74 = v73[1];
            if (v69.u32[0] > 1uLL)
            {
              if (v74 >= *(void *)&prime) {
                v74 %= *(void *)&prime;
              }
            }
            else
            {
              v74 &= *(void *)&prime - 1;
            }
            if (v74 != v68)
            {
              if (!*(void *)(*(void *)v49 + 8 * v74))
              {
                *(void *)(*(void *)v49 + 8 * v74) = v67;
                goto LABEL_114;
              }
              *unint64_t v67 = *v73;
              void *v73 = **(void **)(*(void *)v49 + 8 * v74);
              **(void **)(*(void *)v49 + 8 * v74) = v73;
              uint64_t v73 = v67;
            }
            unint64_t v74 = v68;
LABEL_114:
            unint64_t v67 = v73;
            uint64_t v73 = (void *)*v73;
            unint64_t v68 = v74;
          }
          while (v73);
        }
      }
      unint64_t v53 = (unint64_t)prime;
LABEL_118:
      if ((v53 & (v53 - 1)) != 0)
      {
        if (v53 <= v52) {
          v52 %= v53;
        }
      }
      else
      {
        unint64_t v52 = (v53 - 1) & v52;
      }
LABEL_122:
      uint64_t v75 = *(void *)v49;
      __n128 v76 = *(void **)(*(void *)v49 + 8 * v52);
      if (v76)
      {
        void *v56 = *v76;
      }
      else
      {
        void *v56 = *((void *)v49 + 2);
        *((void *)v49 + 2) = v56;
        *(void *)(v75 + 8 * v52) = v49 + 16;
        if (!*v56) {
          goto LABEL_131;
        }
        unint64_t v77 = *(void *)(*v56 + 8);
        if ((v53 & (v53 - 1)) != 0)
        {
          if (v77 >= v53) {
            v77 %= v53;
          }
        }
        else
        {
          v77 &= v53 - 1;
        }
        __n128 v76 = (void *)(*(void *)v49 + 8 * v77);
      }
      void *v76 = v56;
LABEL_131:
      ++*((void *)v49 + 3);
LABEL_132:
      v56[3] = a5;
      uint64_t v51 = v56 + 4;
      goto LABEL_133;
    }
    unsigned int v82 = a3;
    uint64_t v32 = *(void *)this + 88 * a2;
    uint64_t v35 = *(void *)(v32 + 48);
    uint64_t v33 = v32 + 48;
    uint64_t v34 = v35;
    if (v35)
    {
      uint64_t v36 = v33;
      do
      {
        unsigned int v37 = *(_DWORD *)(v34 + 28);
        BOOL v38 = v37 >= a3;
        if (v37 >= a3) {
          __n128 v39 = (uint64_t *)v34;
        }
        else {
          __n128 v39 = (uint64_t *)(v34 + 8);
        }
        if (v38) {
          uint64_t v36 = v34;
        }
        uint64_t v34 = *v39;
      }
      while (*v39);
      if (v36 != v33 && *(_DWORD *)(v36 + 28) <= a3)
      {
        int v40 = *(_DWORD *)(v36 + 32);
        *(_DWORD *)(v36 + 32) = (v40 & 0xFFFF0000 | (unsigned __int16)(v40 - 1)) & ((~(1 << (a4 & 0xFE) << v24) << 16) | 0xFFFF);
        if ((_WORD)v40 == 1)
        {
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)this + 36, a3, &v82)[4] = a5;
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*(void *)this + 88 * a2, *(_DWORD *)(v36 + 28), *(_DWORD *)(v36 + 28));
        }
        __n128 v41 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)this + 5 * v24 + 23, a3);
        if (v41) {
          v41[4] = a5;
        }
      }
    }
  }
}

void sub_3148A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x30uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  *((_DWORD *)v10 + 10) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  int v18 = operator new(8 * *(void *)&prime);
  int v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  unsigned __int32 v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    unsigned __int32 v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          void *v21 = *v27;
          *unsigned __int32 v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          unsigned __int32 v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        unsigned __int32 v21 = v27;
        unsigned __int32 v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  __n128 v29 = *(void **)a1;
  unsigned int v30 = *(void **)(*(void *)a1 + 8 * v6);
  if (v30)
  {
    void *v10 = *v30;
LABEL_72:
    *unsigned int v30 = v10;
    goto LABEL_73;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    unsigned int v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_314CA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(void *a1, uint64_t *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v4 = *__p;
  unint64_t v3 = __p[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    unint64_t v7 = v6;
    unint64_t v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    uint64_t v9 = *__p;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = *(void *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  uint64_t v9 = *__p;
  if (v10 != v3)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v3) = 0;
    uint64_t v9 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = *(void *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
  }
  else
  {
    v11 &= *(void *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(void *)(*a1 + 8 * v11) = v7;
    uint64_t v9 = *__p;
  }
LABEL_27:
  uint64_t *v7 = v9;
  void *__p = 0;
  --a1[3];
  operator delete(__p);
  return v4;
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unint64_t v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      BOOL result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      BOOL result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        BOOL result = v7;
      }
      unint64_t v7 = *(uint64_t **)v12;
    }
    int v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *uint64_t v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        int v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      unint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    BOOL v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    float v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *float v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      BOOL result = v7;
    }
    unint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  unint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    unint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    BOOL v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      BOOL v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  unint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    unint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    uint64_t *v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    unint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  unint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *unint64_t v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

char *std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](v7, v11);
    float v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    int v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  uint64_t *v12 = &v9[v17];
  return result;
}

BOOL std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < *(void *)a2) {
    return 1;
  }
  if (*(void *)a2 < *(void *)a1) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v2 < v3) {
    return 1;
  }
  if (v3 < v2) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v4 < v5) {
    return 1;
  }
  return v5 >= v4 && *(void *)(a1 + 16) < *(void *)(a2 + 16);
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a2, a1);
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a3, a2);
  if (v6)
  {
    uint64_t v9 = (uint64_t *)(a1 + 16);
    uint64_t v8 = *(void *)a1;
    if (result)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v8;
      int v10 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v10;
      int v11 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a3 + 12);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v8;
      int v16 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v16;
      int v17 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v17;
      uint64_t v9 = (uint64_t *)(a2 + 16);
      uint64_t v18 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v18;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v19 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v19;
      LODWORD(v19) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v19;
      int v11 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
    }
    *(_DWORD *)(a3 + 12) = v11;
    uint64_t v14 = (uint64_t *)(a3 + 16);
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v12;
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v12;
    LODWORD(v12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = v12;
    uint64_t v14 = (uint64_t *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = v13;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a2, a1);
    if (result)
    {
      uint64_t v15 = *(void *)a1;
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v15;
      LODWORD(v15) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v15;
      LODWORD(v15) = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v15;
      uint64_t v9 = (uint64_t *)(a1 + 16);
LABEL_10:
      uint64_t v20 = *v9;
      *uint64_t v9 = *v14;
      *uint64_t v14 = v20;
    }
  }
  return result;
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(a1, a2, a3);
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a4, a3);
  if (result)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = v9;
    uint64_t v10 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v10;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a3, a2);
    if (result)
    {
      uint64_t v11 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = v11;
      uint64_t v12 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v12;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a2, a1);
      if (result)
      {
        uint64_t v13 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = v13;
        uint64_t v14 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v14;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(a1, a2, a3, a4);
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a5, a4);
  if (result)
  {
    uint64_t v11 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    LODWORD(v11) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v11;
    LODWORD(v11) = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = *(_DWORD *)(a5 + 12);
    *(_DWORD *)(a5 + 12) = v11;
    uint64_t v12 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v12;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a4, a3);
    if (result)
    {
      uint64_t v13 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v13;
      LODWORD(v13) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v13;
      LODWORD(v13) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(_DWORD *)(a4 + 12) = v13;
      uint64_t v14 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v14;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a3, a2);
      if (result)
      {
        uint64_t v15 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a3 + 12) = v15;
        uint64_t v16 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v16;
        BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a2, a1);
        if (result)
        {
          uint64_t v17 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v17;
          LODWORD(v17) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v17;
          LODWORD(v17) = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 12) = v17;
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(a2 - 24, a1))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v6;
        uint64_t v7 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v8 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>(a1, a1 + 24, a1 + 48);
      uint64_t v9 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (2)
  {
    if (!std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>(v9, v8))goto LABEL_21; {
    unint64_t v12 = *(void *)v9;
    }
    unsigned int v13 = *(_DWORD *)(v9 + 8);
    unsigned int v14 = *(_DWORD *)(v9 + 12);
    unint64_t v15 = *(void *)(v9 + 16);
    *(void *)uint64_t v9 = *(void *)v8;
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(v9 + 12) = *(_DWORD *)(v8 + 12);
    *(void *)(v9 + 16) = *(void *)(v8 + 16);
    uint64_t v16 = a1;
    if (v8 == a1) {
      goto LABEL_20;
    }
    uint64_t v17 = v10;
    while (1)
    {
      uint64_t v18 = a1 + v17;
      unint64_t v19 = *(void *)(a1 + v17 + 24);
      if (v12 < v19)
      {
        unsigned int v20 = *(_DWORD *)(v18 + 32);
        goto LABEL_17;
      }
      if (v19 < v12) {
        goto LABEL_19;
      }
      unsigned int v20 = *(_DWORD *)(a1 + v17 + 32);
      if (v13 >= v20)
      {
        if (v20 < v13) {
          goto LABEL_19;
        }
        unsigned int v21 = *(_DWORD *)(a1 + v17 + 36);
        if (v14 >= v21)
        {
          if (v21 < v14)
          {
LABEL_19:
            uint64_t v16 = v8;
            goto LABEL_20;
          }
          if (v15 >= *(void *)(a1 + v17 + 40)) {
            break;
          }
        }
      }
LABEL_17:
      v8 -= 24;
      *(void *)(v18 + 48) = v19;
      uint64_t v22 = a1 + v17;
      int v23 = *(_DWORD *)(a1 + v17 + 36);
      *(_DWORD *)(v22 + 56) = v20;
      *(_DWORD *)(v22 + 60) = v23;
      *(void *)(v22 + 64) = *(void *)(a1 + v17 + 40);
      v17 -= 24;
      if (v17 == -48)
      {
        uint64_t v16 = a1;
        goto LABEL_20;
      }
    }
    uint64_t v16 = a1 + v17 + 48;
LABEL_20:
    *(void *)uint64_t v16 = v12;
    *(_DWORD *)(v16 + 8) = v13;
    *(_DWORD *)(v16 + 12) = v14;
    *(void *)(v16 + 16) = v15;
    if (++v11 != 8)
    {
LABEL_21:
      uint64_t v8 = v9;
      v10 += 24;
      v9 += 24;
      if (v9 == a2) {
        return 1;
      }
      continue;
    }
    return v9 + 24 == a2;
  }
}

uint64_t std::__split_buffer<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 104;
    uint64_t v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 104;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL GRCPerFrameData::GreaterPQElement::operator()(void *a1, void *a2)
{
  unint64_t v2 = a1[3];
  unint64_t v3 = a2[3];
  BOOL v4 = v2 > v3;
  if (v2 == v3)
  {
    unint64_t v5 = a1[6];
    unint64_t v6 = a2[6];
    BOOL v4 = v5 > v6;
    if (v5 == v6)
    {
      unint64_t v7 = a1[7];
      unint64_t v8 = a2[7];
      BOOL v4 = v7 > v8;
      if (v7 == v8)
      {
        unint64_t v9 = a1[5];
        unint64_t v10 = a2[5];
        BOOL v4 = v9 > v10;
        if (v9 == v10)
        {
          unint64_t v11 = a1[8];
          unint64_t v12 = a2[8];
          BOOL v4 = v11 > v12;
          if (v11 == v12) {
            return a1[9] > a2[9];
          }
        }
      }
    }
  }
  return v4;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int &,int>(uint64_t a1, unsigned int a2, int a3, int a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == a2)
          {
            if (*((_DWORD *)v12 + 4) == a2) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  *((_DWORD *)v12 + 5) = a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unsigned int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unsigned int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_315CA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<ProgramAddressHelper::ProgramAddressInfo>::set[abi:nn180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  unint64_t v4 = a2 + 1;
  unint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void *)a1 == v3) {
        break;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = *(void *)(v9 + 16);
          BOOL v10 = *(void *)v7 == v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      unsigned int v11 = *(_DWORD *)(v7 + 28);
      unsigned int v12 = *((_DWORD *)v5 + 7);
      if (v11 == v12)
      {
        unsigned int v13 = (unsigned __int16)*(_DWORD *)(v7 + 32);
        unsigned int v14 = *((_DWORD *)v5 + 8);
        if (v13 == (unsigned __int16)v14)
        {
          if (HIWORD(*(_DWORD *)(v7 + 32)) < HIWORD(v14)) {
            break;
          }
        }
        else if (v13 < (unsigned __int16)*((_DWORD *)v5 + 8))
        {
          break;
        }
      }
      else
      {
        if (v11 < v12) {
          break;
        }
        unsigned int v14 = *((_DWORD *)v5 + 8);
      }
      float v15 = std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__find_equal<ProgramAddressHelper::ProgramAddressInfo>(a1, &v20, v12, v14);
LABEL_18:
      if (!*v15)
      {
        BOOL v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)((char *)v5 + 28);
        std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at((uint64_t **)a1, v20, (uint64_t **)v15, v16);
      }
      unint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          unint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unint64_t v18 = (void *)v5[2];
          BOOL v10 = *v18 == (void)v5;
          unint64_t v5 = v18;
        }
        while (!v10);
      }
      unint64_t v5 = v18;
      if (v18 == v4) {
        return a1;
      }
    }
    if (v6)
    {
      uint64_t v20 = v7;
      float v15 = (uint64_t *)(v7 + 8);
    }
    else
    {
      uint64_t v20 = v3;
      float v15 = (uint64_t *)v3;
    }
    goto LABEL_18;
  }
  return a1;
}

void sub_315E34(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<ProgramAddressHelper::ProgramAddressInfo>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      BOOL v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unsigned int v12 = operator new(0x30uLL);
  BOOL v10 = v12;
  void *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = *(_DWORD *)a3;
  unsigned int v13 = (void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 16);
  v12[3] = *(void *)(a3 + 8);
  v12[4] = v14;
  float v15 = (char *)(v12 + 4);
  uint64_t v16 = *(void *)(a3 + 24);
  v12[5] = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *(void *)(a3 + 8) = v13;
    *unsigned int v13 = 0;
    *(void *)(a3 + 24) = 0;
  }
  else
  {
    v12[3] = v15;
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v7 || (float)(v18 * (float)v7) < v17)
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v22);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *v10 = *v24;
LABEL_41:
    *unint64_t v24 = v10;
    goto LABEL_42;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v25 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_316080(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__emplace_unique_impl<unsigned long long &,ProgramAddressHelper::eAddressRange,unsigned int &>(uint64_t **a1, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint8x8_t v8 = operator new(0x28uLL);
  unsigned int v9 = a3 | (a4 << 16);
  v8[7] = a2;
  v8[8] = v9;
  BOOL v10 = std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__find_equal<ProgramAddressHelper::ProgramAddressInfo>((uint64_t)a1, &v12, a2, v9);
  if (*v10)
  {
    operator delete(v8);
  }
  else
  {
    uint64_t v11 = v12;
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(a1, v11, (uint64_t **)v10, (uint64_t *)v8);
  }
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unsigned int i = *v9; i; unsigned int i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v12 = *v20;
LABEL_38:
    *unint64_t v20 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_316350(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__find_equal<ProgramAddressHelper::ProgramAddressInfo>(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  BOOL result = (uint64_t *)(a1 + 8);
  unint64_t v5 = v6;
  if (v6)
  {
    unsigned int v7 = HIWORD(a4);
    while (1)
    {
      while (1)
      {
        uint8x8_t v8 = v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v9 == a3) {
          break;
        }
        if (v9 <= a3)
        {
          if (v9 >= a3) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }
LABEL_12:
        unint64_t v5 = (uint64_t *)*v8;
        BOOL result = v8;
        if (!*v8) {
          goto LABEL_18;
        }
      }
      unsigned int v10 = *((_DWORD *)v8 + 8);
      if ((unsigned __int16)a4 != (unsigned __int16)v10)
      {
        unsigned int v11 = (unsigned __int16)*((_DWORD *)v8 + 8);
        if ((unsigned __int16)a4 >= v11)
        {
          if (v11 >= (unsigned __int16)a4) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      if (v7 < HIWORD(v10)) {
        goto LABEL_12;
      }
      if (HIWORD(v10) >= v7) {
        goto LABEL_18;
      }
LABEL_15:
      BOOL result = v8 + 1;
      unint64_t v5 = (uint64_t *)v8[1];
      if (!v5) {
        goto LABEL_18;
      }
    }
  }
  uint8x8_t v8 = result;
LABEL_18:
  *a2 = v8;
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  if (a1) {
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(__p[4]);
  }

  operator delete(__p);
}

void GRCDerivedCounterData::~GRCDerivedCounterData(GRCDerivedCounterData *this)
{
  unint64_t v3 = (void **)((char *)this + 232);
  std::vector<std::vector<std::vector<BOOL>>>::__destroy_vector::operator()[abi:nn180100](&v3);

  unint64_t v3 = (void **)((char *)this + 184);
  std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&v3);
  std::unique_ptr<FrameRawCounterData>::reset[abi:nn180100]((void ***)this + 22, 0);
  unint64_t v3 = (void **)((char *)this + 152);
  std::vector<PassSourceCounterInfo>::__destroy_vector::operator()[abi:nn180100](&v3);

  unint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

GRCDerivedCounterData *std::unique_ptr<GRCDerivedCounterData>::reset[abi:nn180100](GRCDerivedCounterData **a1)
{
  BOOL result = *a1;
  *a1 = 0;
  if (result)
  {
    GRCDerivedCounterData::~GRCDerivedCounterData(result);
    operator delete();
  }
  return result;
}

void std::vector<std::vector<std::vector<BOOL>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PassSourceCounterInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZN21GRCCurrentFrameStream23AddFrameEncoderTimeDataEP12NSDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v35 = v5;
  uint64_t v36 = v6;
  unsigned int v8 = [v5 unsignedIntValue];
  unsigned int v9 = [v6 objectAtIndexedSubscript:0];
  unsigned int v10 = [v9 unsignedIntValue];

  unsigned int v11 = [v6 objectAtIndexedSubscript:1];
  unsigned int v37 = [v11 unsignedIntValue];

  uint64_t v12 = [v6 objectAtIndexedSubscript:2];
  unsigned int v13 = [v12 unsignedIntValue];

  if ((unint64_t)[v6 count] < 4)
  {
    id v15 = 0;
    if (!v13) {
      goto LABEL_25;
    }
  }
  else
  {
    float v14 = [v6 objectAtIndexedSubscript:3];
    id v15 = [v14 unsignedLongLongValue];

    uint64_t v38 = v8;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7 + 88, v8, &v38)[3] = v15;
    if (!v13) {
      goto LABEL_25;
    }
  }
  uint64_t v16 = 0;
  unint64_t v17 = v8;
  do
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * (v10 + v16));
      if (v18)
      {
        unint64_t v19 = v37 + v16;
        unint64_t v20 = 3 * v18 / 0x7DuLL;
        unint64_t v21 = *(void **)(*(void *)(a1 + 32) + 8);
        uint64_t v23 = (unint64_t *)v21[7];
        unint64_t v22 = v21[8];
        if ((unint64_t)v23 >= v22)
        {
          unint64_t v25 = (unint64_t *)v21[6];
          uint64_t v26 = ((char *)v23 - (char *)v25) >> 5;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 59) {
            abort();
          }
          uint64_t v28 = v22 - (void)v25;
          if (v28 >> 4 > v27) {
            unint64_t v27 = v28 >> 4;
          }
          BOOL v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0;
          unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
          if (!v29) {
            unint64_t v30 = v27;
          }
          if (v30)
          {
            unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v30);
            unint64_t v25 = (unint64_t *)v21[6];
            uint64_t v23 = (unint64_t *)v21[7];
          }
          else
          {
            uint64_t v31 = 0;
          }
          uint64_t v32 = (unint64_t *)(v30 + 32 * v26);
          *uint64_t v32 = v20;
          v32[1] = v17;
          v32[2] = v19;
          v32[3] = (unint64_t)v15;
          uint64_t v33 = v32;
          if (v23 != v25)
          {
            do
            {
              long long v34 = *((_OWORD *)v23 - 1);
              *((_OWORD *)v33 - 2) = *((_OWORD *)v23 - 2);
              *((_OWORD *)v33 - 1) = v34;
              v33 -= 4;
              v23 -= 4;
            }
            while (v23 != v25);
            unint64_t v25 = (unint64_t *)v21[6];
          }
          unint64_t v24 = v32 + 4;
          v21[6] = v33;
          v21[7] = v32 + 4;
          v21[8] = v30 + 32 * v31;
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *uint64_t v23 = v20;
          v23[1] = v17;
          unint64_t v24 = v23 + 4;
          v23[2] = v19;
          v23[3] = (unint64_t)v15;
        }
        v21[7] = v24;
      }
    }
    ++v16;
  }
  while (v16 != v13);
LABEL_25:
}

void sub_316920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5 && v6)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = [v6 unsignedIntValue];
    unsigned int v10 = [v5 unsignedIntValue];
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v8 + 48, v10, &v10)+ 5) = v9;
  }
}

void sub_316A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if ((unint64_t)[v6 count] >= 2)
  {
    unsigned int v8 = [v5 unsignedIntValue];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke_3;
    v9[3] = &unk_746C10;
    uint64_t v11 = v7;
    id v10 = v5;
    unsigned int v12 = v8;
    [v6 enumerateObjectsUsingBlock:v9];
  }
}

void sub_316AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke_3(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = v4;
  if (!v4) {
    goto LABEL_94;
  }
  if (!*(void *)(a1 + 32)) {
    goto LABEL_94;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if ([v4 count] != (char *)&def_1C1270 + 2) {
    goto LABEL_94;
  }
  uint64_t v7 = [v5 firstObject];
  unsigned int v8 = [v7 unsignedIntValue];

  unsigned int v56 = v8;
  unsigned int v9 = [v5 lastObject];
  id v10 = [v9 unsignedLongLongValue];

  unint64_t v11 = *(unsigned int *)(a1 + 48);
  unint64_t v12 = *(void *)(v6 + 136);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v2 = *(unsigned int *)(a1 + 48);
      if (v12 <= v11) {
        unint64_t v2 = v11 % v12;
      }
    }
    else
    {
      unint64_t v2 = (v12 - 1) & v11;
    }
    float v14 = *(void ***)(*(void *)(v6 + 128) + 8 * v2);
    if (v14)
    {
      id v15 = *v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v11) {
              goto LABEL_77;
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v2) {
              break;
            }
          }
          id v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  id v15 = operator new(0x30uLL);
  unint64_t v17 = (void *)(v6 + 144);
  *id v15 = 0;
  v15[1] = v11;
  *((_DWORD *)v15 + 4) = v11;
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = 0;
  float v18 = (float)(unint64_t)(*(void *)(v6 + 152) + 1);
  float v19 = *(float *)(v6 + 160);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    unint64_t v11 = v2;
    goto LABEL_67;
  }
  BOOL v20 = 1;
  if (v12 >= 3) {
    BOOL v20 = (v12 & (v12 - 1)) != 0;
  }
  unint64_t v21 = v20 | (2 * v12);
  unint64_t v22 = vcvtps_u32_f32(v18 / v19);
  if (v21 <= v22) {
    int8x8_t prime = (int8x8_t)v22;
  }
  else {
    int8x8_t prime = (int8x8_t)v21;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v12 = *(void *)(v6 + 136);
  }
  if (*(void *)&prime <= v12)
  {
    if (*(void *)&prime >= v12) {
      goto LABEL_63;
    }
    unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 152) / *(float *)(v6 + 160));
    if (v12 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
    {
      unint64_t v30 = std::__next_prime(v30);
    }
    else
    {
      uint64_t v32 = 1 << -(char)__clz(v30 - 1);
      if (v30 >= 2) {
        unint64_t v30 = v32;
      }
    }
    if (*(void *)&prime <= v30) {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime >= v12)
    {
      unint64_t v12 = *(void *)(v6 + 136);
      goto LABEL_63;
    }
    if (!*(void *)&prime)
    {
      int64_t v55 = *(void **)(v6 + 128);
      *(void *)(v6 + 128) = 0;
      if (v55) {
        operator delete(v55);
      }
      unint64_t v12 = 0;
      *(void *)(v6 + 136) = 0;
      goto LABEL_63;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v24 = operator new(8 * *(void *)&prime);
  unint64_t v25 = *(void **)(v6 + 128);
  *(void *)(v6 + 128) = v24;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = 0;
  *(int8x8_t *)(v6 + 136) = prime;
  do
    *(void *)(*(void *)(v6 + 128) + 8 * v26++) = 0;
  while (*(void *)&prime != v26);
  unint64_t v27 = (void *)*v17;
  if (*v17)
  {
    unint64_t v28 = v27[1];
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      if (v28 >= *(void *)&prime) {
        v28 %= *(void *)&prime;
      }
    }
    else
    {
      v28 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)(v6 + 128) + 8 * v28) = v17;
    uint64_t v33 = (void *)*v27;
    if (*v27)
    {
      do
      {
        unint64_t v34 = v33[1];
        if (v29.u32[0] > 1uLL)
        {
          if (v34 >= *(void *)&prime) {
            v34 %= *(void *)&prime;
          }
        }
        else
        {
          v34 &= *(void *)&prime - 1;
        }
        if (v34 != v28)
        {
          uint64_t v35 = *(void *)(v6 + 128);
          if (!*(void *)(v35 + 8 * v34))
          {
            *(void *)(v35 + 8 * v34) = v27;
            goto LABEL_59;
          }
          *unint64_t v27 = *v33;
          *uint64_t v33 = **(void **)(*(void *)(v6 + 128) + 8 * v34);
          **(void **)(*(void *)(v6 + 128) + 8 * v34) = v33;
          uint64_t v33 = v27;
        }
        unint64_t v34 = v28;
LABEL_59:
        unint64_t v27 = v33;
        uint64_t v33 = (void *)*v33;
        unint64_t v28 = v34;
      }
      while (v33);
    }
  }
  unint64_t v12 = (unint64_t)prime;
LABEL_63:
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v12 <= v11) {
      v11 %= v12;
    }
  }
  else
  {
    unint64_t v11 = (v12 - 1) & v11;
  }
LABEL_67:
  uint64_t v36 = *(void *)(v6 + 128);
  unsigned int v37 = *(void **)(v36 + 8 * v11);
  if (v37)
  {
    *id v15 = *v37;
  }
  else
  {
    *id v15 = *v17;
    void *v17 = v15;
    *(void *)(v36 + 8 * v11) = v17;
    if (!*v15) {
      goto LABEL_76;
    }
    unint64_t v38 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12) {
        v38 %= v12;
      }
    }
    else
    {
      v38 &= v12 - 1;
    }
    unsigned int v37 = (void *)(*(void *)(v6 + 128) + 8 * v38);
  }
  *unsigned int v37 = v15;
LABEL_76:
  ++*(void *)(v6 + 152);
LABEL_77:
  unint64_t v40 = v15[4];
  unint64_t v39 = v15[5];
  if (v40 >= v39)
  {
    uint64_t v42 = v15[3];
    uint64_t v43 = (uint64_t)(v40 - v42) >> 4;
    unint64_t v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60) {
      abort();
    }
    uint64_t v45 = v39 - v42;
    if (v45 >> 3 > v44) {
      unint64_t v44 = v45 >> 3;
    }
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v47 = (char *)operator new(16 * v46);
    uint64_t v48 = &v47[16 * v43];
    uint64_t v49 = &v47[16 * v46];
    *(_DWORD *)uint64_t v48 = v8;
    *((void *)v48 + 1) = v10;
    __n128 v41 = v48 + 16;
    uint64_t v51 = (char *)v15[3];
    __n128 v50 = (char *)v15[4];
    if (v50 != v51)
    {
      do
      {
        *((_OWORD *)v48 - 1) = *((_OWORD *)v50 - 1);
        v48 -= 16;
        v50 -= 16;
      }
      while (v50 != v51);
      __n128 v50 = (char *)v15[3];
    }
    v15[3] = v48;
    v15[4] = v41;
    v15[5] = v49;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v40 = v8;
    *(void *)(v40 + 8) = v10;
    __n128 v41 = (char *)(v40 + 16);
  }
  v15[4] = v41;
  unsigned int v52 = *(_DWORD *)(a1 + 48);
  int v53 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)(v6 + 48), v52)+ 5);
  uint64_t v54 = v6 + 168;
  if (v53 == v8) {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v54, v8, &v56)+ 5) = v52;
  }
  else {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v54, v8, &v56)+ 5) = v10;
  }
LABEL_94:
}

void sub_317074(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,void *>>>::operator()[abi:nn180100](1, v2);

  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled(unsigned int)::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled(unsigned int)::TimestampInfoElement*>>(BOOL result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    BOOL v5 = result;
    unint64_t v6 = v3 >> 1;
    uint64_t v7 = (_OWORD *)(result + 16 * (v3 >> 1));
    unsigned int v9 = (_OWORD *)(a2 - 16);
    unint64_t v8 = *(void *)(a2 - 16);
    unsigned int v10 = *(_DWORD *)(a2 - 8);
    BOOL result = GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement::operator<((uint64_t)v7, v8, v10);
    if (result)
    {
      int v11 = *(_DWORD *)(a2 - 4);
      do
      {
        unint64_t v12 = v7;
        *unsigned int v9 = *v7;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (_OWORD *)(v5 + 16 * v6);
        BOOL result = GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement::operator<((uint64_t)v7, v8, v10);
        unsigned int v9 = v12;
      }
      while (result);
      *(void *)unint64_t v12 = v8;
      *((_DWORD *)v12 + 2) = v10;
      *((_DWORD *)v12 + 3) = v11;
    }
  }
  return result;
}

BOOL GRCCurrentFrameStream::IsWorkloadThrottled(unsigned int)::TimestampInfoElement::operator<(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(void *)a1 != a2) {
    return *(void *)a1 > a2;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  unsigned int v4 = v3 & 1;
  unsigned int v5 = a3 & 1;
  unsigned int v6 = (v3 >> 1) & 1;
  unsigned int v7 = (a3 >> 1) & 1;
  BOOL v8 = v3 >> 2 > a3 >> 2;
  BOOL v9 = v6 == v7;
  BOOL v10 = v6 > v7;
  if (!v9) {
    BOOL v8 = v10;
  }
  BOOL v9 = v4 == v5;
  BOOL v11 = v4 > v5;
  if (v9) {
    return v8;
  }
  else {
    return v11;
  }
}

void FillAttachmentPixelFormats(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4)
{
  id v16 = a4;
  uint64_t v7 = 0;
  int v8 = 0;
  BOOL v9 = (uint64_t *)(a1 + 8);
  do
  {
    uint64_t v11 = *v9;
    v9 += 8;
    uint64_t v10 = v11;
    if (v11)
    {
      uint64_t v19 = 0;
      long long v18 = 0u;
      memset(v17, 0, sizeof(v17));
      GTMTLSMContext_getTextureDescriptor(a2, v10, a3, (uint64_t)v17);
      uint64_t v12 = WORD1(v18);
      uint8x8_t v13 = [v16 colorAttachments];
      float v14 = [v13 objectAtIndexedSubscript:v7];
      [v14 setPixelFormat:v12];

      int v8 = HIBYTE(v18);
    }
    ++v7;
  }
  while (v7 != 8);
  if (v8 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v8;
  }
  [v16 setRasterSampleCount:v15];
}

uint64_t countStructMember(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(v4 + 16);
    if (!v5) {
      return 0;
    }
    LODWORD(v6) = 0;
    uint64_t v7 = *(void *)(v4 + 8);
    do
    {
      uint64_t v6 = countStructMember(v7) + v6;
      v7 += 32;
      --v5;
    }
    while (v5);
    return v6;
  }
  if (v1 != 2) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 8);

  return countArrayType(v2);
}

uint64_t nameStructType1(apr_array_header_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(const char ***)(a2 + 8);
  for (unsigned int i = v7; ; i += 4)
  {
    int v9 = countStructMember((uint64_t)i);
    if ((int)a3 < v9) {
      break;
    }
    ++v6;
    a3 = (a3 - v9);
    if (v3 == v6) {
      return 0;
    }
  }
  uint64_t v11 = *i;
  if (!strncmp(v11, "user(", 5uLL)) {
    uint64_t v11 = "fragmentMember%d";
  }
  *(void *)apr_array_push(a1) = v11;
  uint64_t v12 = &v7[4 * v6];
  int v13 = *((unsigned __int8 *)v12 + 24);
  if (v13 == 1)
  {
    float v14 = v12[1];
    *(void *)apr_array_push(a1) = ".";
    return nameStructType1(a1, v14, a3);
  }
  else if (v13 == 2)
  {
    return nameArrayType(a1, (uint64_t)v7[4 * v6 + 1], a3);
  }
  else
  {
    return 0;
  }
}

uint64_t processStructMember(apr_array_header_t *a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  int v8 = *(void **)a2;
  if (!strncmp(*(const char **)a2, "user(", 5uLL)) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v9) {
    int v8 = apr_psprintf(a1->pool, "fragmentMember%d", a4);
  }
  *(void *)apr_array_push(a1) = v8;
  int v10 = *(unsigned __int8 *)(a2 + 24);
  switch(v10)
  {
    case 1:
      uint64_t v11 = processStructType(a1, *(void *)(a2 + 8), a3, a4);
      break;
    case 60:
      uint64_t v11 = processPointerType(a1, *(void *)(a2 + 8), a3, a4);
      break;
    case 2:
      uint64_t v11 = processArrayType(a1, *(void *)(a2 + 8), a3, a4);
      break;
    default:
      processDataType(a1, *(unsigned __int8 *)(a2 + 25), v10, a3);
      uint64_t v12 = 1;
      if (!v9) {
        goto LABEL_14;
      }
      goto LABEL_13;
  }
  uint64_t v12 = v11;
  if (v9)
  {
LABEL_13:
    *(void *)apr_array_push(a1) = "[[ ";
    *(void *)apr_array_push(a1) = v9;
    *(void *)apr_array_push(a1) = " ]]";
  }
LABEL_14:
  *(void *)apr_array_push(a1) = ";\n";
  return v12;
}

void *GenerateStringForWritingDataToTexture(apr_array_header_t *arr, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 14) - 3 > 0x35) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = off_746CC0[(*(unsigned char *)(a2 + 14) - 3)];
  }
  *(void *)apr_array_push(arr) = v4;
  if (*(unsigned __int8 *)(a2 + 14) - 4 > 0x34) {
    uint64_t v5 = "4(currData, 0, 0, 0)";
  }
  else {
    uint64_t v5 = (&off_747020)[(*(unsigned char *)(a2 + 14) - 4)];
  }
  BOOL result = apr_array_push(arr);
  *BOOL result = v5;
  return result;
}

uint64_t processArrayType(apr_array_header_t *a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  for (int i = 1; ; i *= v11)
  {
    int v9 = apr_psprintf(a1->pool, "[%u]", *(unsigned __int16 *)(a2 + 20));
    *(void *)apr_array_push(a1) = v9;
    int v10 = *(unsigned __int8 *)(a2 + 24);
    if (v10 != 2) {
      break;
    }
    int v11 = *(unsigned __int16 *)(a2 + 20);
    a2 = *(void *)(a2 + 8);
  }
  if (v10 == 1)
  {
    int v12 = *(unsigned __int16 *)(a2 + 20);
    int v13 = processStructType(a1, *(void *)(a2 + 8), a3, a4);
  }
  else
  {
    if (v10 != 60)
    {
      int v14 = *(unsigned __int16 *)(a2 + 20);
      processDataType(a1, *(unsigned __int8 *)(a2 + 25), v10, a3);
      return (v14 * i);
    }
    int v12 = *(unsigned __int16 *)(a2 + 20);
    int v13 = processPointerType(a1, *(void *)(a2 + 8), a3, a4);
  }
  int v14 = v13 * v12;
  return (v14 * i);
}

uint64_t processStructType(apr_array_header_t *a1, uint64_t a2, int a3, apr_allocator_t *a4)
{
  int v4 = (int)a4;
  newpool = 0;
  apr_pool_create_ex(&newpool, a1->pool, 0, a4);
  p = newpool;
  int v8 = apr_array_make(newpool, 8, 8);
  uint64_t nelts = a1->nelts;
  if ((int)nelts > 1)
  {
    uint64_t v10 = 0;
    do
    {
      elts = a1->elts;
      uint64_t v12 = *(void *)&elts[8 * v10];
      uint64_t v13 = nelts - 2;
      *(void *)&elts[8 * v10] = *(void *)&elts[8 * (int)--nelts];
      *(void *)&a1->elts[8 * (int)nelts] = v12;
      ++v10;
    }
    while (v13 > v10);
  }
  *(void *)apr_array_push(a1) = "} ";
  if (a3 >= 1)
  {
    int v14 = a3;
    do
    {
      *(void *)apr_array_push(a1) = "\t";
      --v14;
    }
    while (v14);
  }
  uint64_t v15 = *(unsigned int *)(a2 + 16);
  if ((int)v15 < 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    LODWORD(v16) = 0;
    unint64_t v17 = v15 + 1;
    do
    {
      v8->uint64_t nelts = 0;
      uint64_t v16 = processStructMember(v8, *(void *)(a2 + 8) + 32 * (v17 - 2), (a3 + 1), (v16 + v4))+ v16;
      uint64_t v19 = apr_array_pstrcat(a1->pool, v8, v18);
      *(void *)apr_array_push(a1) = v19;
      --v17;
    }
    while (v17 > 1);
  }
  *(void *)apr_array_push(a1) = "struct {\n";
  if (a3 >= 1)
  {
    do
    {
      *(void *)apr_array_push(a1) = "\t";
      --a3;
    }
    while (a3);
  }
  uint64_t v20 = a1->nelts;
  if ((int)v20 > 1)
  {
    uint64_t v21 = 0;
    do
    {
      unint64_t v22 = a1->elts;
      uint64_t v23 = *(void *)&v22[8 * v21];
      uint64_t v24 = v20 - 2;
      *(void *)&v22[8 * v21] = *(void *)&v22[8 * (int)--v20];
      *(void *)&a1->elts[8 * (int)v20] = v23;
      ++v21;
    }
    while (v24 > v21);
  }
  apr_pool_destroy(p);
  return v16;
}

uint64_t processPointerType(apr_array_header_t *arr, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  int v5 = a3;
  int v8 = *(unsigned __int8 *)(a2 + 22);
  if (v8 == 1)
  {
    push_front(arr, (uint64_t)"*");
    if (*(unsigned char *)(a2 + 22) == 1) {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
    return processStructType(arr, v11, v5, a4);
  }
  else if (v8 == 2)
  {
    uint64_t v9 = processArrayType(arr, *(void *)(a2 + 8), a3, a4);
    push_front(arr, (uint64_t)"(*");
    *(void *)apr_array_push(arr) = ")";
    return v9;
  }
  else
  {
    return 1;
  }
}

void *processDataType(apr_array_header_t *arr, int a2, int a3, int a4)
{
  uint64_t nelts = arr->nelts;
  if ((int)nelts >= 2)
  {
    uint64_t v7 = 0;
    do
    {
      elts = arr->elts;
      uint64_t v9 = *(void *)&elts[8 * v7];
      uint64_t v10 = nelts - 2;
      *(void *)&elts[8 * v7] = *(void *)&elts[8 * (int)--nelts];
      *(void *)&arr->elts[8 * (int)nelts] = v9;
      ++v7;
    }
    while (v10 > v7);
  }
  if ((a3 - 62) > 0xFu)
  {
    uint64_t v11 = 0;
    char v13 = 1;
    goto LABEL_45;
  }
  uint64_t v11 = 0;
  unsigned int v12 = asc_4C8FB4[(a3 - 62)];
  char v13 = 1;
  if (v12 > 0x45)
  {
    if (asc_4C8FB4[(a3 - 62)] > 0x5Bu)
    {
      if (asc_4C8FB4[(a3 - 62)] > 0x6Du)
      {
        if (v12 == 110)
        {
          uint64_t v11 = "rgba16unorm";
        }
        else
        {
          if (v12 != 112) {
            goto LABEL_45;
          }
          uint64_t v11 = "rgba16snorm";
        }
      }
      else if (v12 == 92)
      {
        uint64_t v11 = "rg11b10f";
      }
      else
      {
        if (v12 != 93) {
          goto LABEL_45;
        }
        uint64_t v11 = "rgb9e5";
      }
    }
    else if (asc_4C8FB4[(a3 - 62)] > 0x47u)
    {
      if (v12 == 72)
      {
        uint64_t v11 = "rgba8snorm";
      }
      else
      {
        if (v12 != 90) {
          goto LABEL_45;
        }
        uint64_t v11 = "rgb10a2";
      }
    }
    else if (v12 == 70)
    {
      uint64_t v11 = "rgba8unorm";
    }
    else
    {
      uint64_t v11 = "srgba8unorm";
    }
  }
  else if (asc_4C8FB4[(a3 - 62)] > 0x1Du)
  {
    if (asc_4C8FB4[(a3 - 62)] > 0x3Bu)
    {
      if (v12 == 60)
      {
        uint64_t v11 = "rg16unorm";
      }
      else
      {
        if (v12 != 62) {
          goto LABEL_45;
        }
        uint64_t v11 = "rg16snorm";
      }
    }
    else if (v12 == 30)
    {
      uint64_t v11 = "rg8unorm";
    }
    else
    {
      if (v12 != 32) {
        goto LABEL_45;
      }
      uint64_t v11 = "rg8snorm";
    }
  }
  else if (asc_4C8FB4[(a3 - 62)] > 0x13u)
  {
    if (v12 == 20)
    {
      uint64_t v11 = "r16unorm";
    }
    else
    {
      if (v12 != 22) {
        goto LABEL_45;
      }
      uint64_t v11 = "r16snorm";
    }
  }
  else if (v12 == 10)
  {
    uint64_t v11 = "r8unorm";
  }
  else
  {
    if (v12 != 12) {
      goto LABEL_45;
    }
    uint64_t v11 = "r8snorm";
  }
  char v13 = 0;
  a3 = a2;
LABEL_45:
  if ((a3 - 3) > 0x35) {
    int v14 = 0;
  }
  else {
    int v14 = off_746E70[(a3 - 3)];
  }
  *(void *)apr_array_push(arr) = " ";
  BOOL result = apr_array_push(arr);
  if (v13)
  {
    *BOOL result = v14;
  }
  else
  {
    *BOOL result = ">";
    *(void *)apr_array_push(arr) = v14;
    *(void *)apr_array_push(arr) = "<";
    BOOL result = apr_array_push(arr);
    *BOOL result = v11;
  }
  if (a4 >= 1)
  {
    do
    {
      BOOL result = apr_array_push(arr);
      *BOOL result = "\t";
      --a4;
    }
    while (a4);
  }
  uint64_t v16 = arr->nelts;
  if ((int)v16 > 1)
  {
    uint64_t v17 = 0;
    do
    {
      char v18 = arr->elts;
      uint64_t v19 = *(void *)&v18[8 * v17];
      uint64_t v20 = v16 - 2;
      *(void *)&v18[8 * v17] = *(void *)&v18[8 * (int)--v16];
      *(void *)&arr->elts[8 * (int)v16] = v19;
      ++v17;
    }
    while (v20 > v17);
  }
  return result;
}

void *push_front(apr_array_header_t *arr, uint64_t a2)
{
  uint64_t nelts = arr->nelts;
  if ((int)nelts >= 2)
  {
    uint64_t v5 = 0;
    do
    {
      elts = arr->elts;
      uint64_t v7 = *(void *)&elts[8 * v5];
      uint64_t v8 = nelts - 2;
      *(void *)&elts[8 * v5] = *(void *)&elts[8 * (int)--nelts];
      *(void *)&arr->elts[8 * (int)nelts] = v7;
      ++v5;
    }
    while (v8 > v5);
  }
  BOOL result = apr_array_push(arr);
  *BOOL result = a2;
  uint64_t v10 = arr->nelts;
  if ((int)v10 >= 2)
  {
    uint64_t v11 = 0;
    do
    {
      unsigned int v12 = arr->elts;
      uint64_t v13 = *(void *)&v12[8 * v11];
      uint64_t v14 = v10 - 2;
      *(void *)&v12[8 * v11] = *(void *)&v12[8 * (int)--v10];
      *(void *)&arr->elts[8 * (int)v10] = v13;
      ++v11;
    }
    while (v14 > v11);
  }
  return result;
}

uint64_t nameArrayType(apr_array_header_t *a1, uint64_t a2, int a3)
{
  int v6 = countArrayType(a2);
  int v7 = *(unsigned __int8 *)(a2 + 24);
  int v8 = v6 / *(unsigned __int16 *)(a2 + 20);
  if (v7 == 1)
  {
    uint64_t v11 = apr_psprintf(a1->pool, "[%u]", a3 / v8);
    *(void *)apr_array_push(a1) = v11;
    if (*(unsigned char *)(a2 + 24) == 1) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    *(void *)apr_array_push(a1) = ".";
    return nameStructType1(a1, v12, (a3 % v8));
  }
  else if (v7 == 2)
  {
    uint64_t v9 = apr_psprintf(a1->pool, "[%u]", a3 / v8);
    *(void *)apr_array_push(a1) = v9;
    if (*(unsigned char *)(a2 + 24) == 2) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
    return nameArrayType(a1, v10, (a3 % v8));
  }
  else
  {
    return 0;
  }
}

uint64_t countArrayType(uint64_t a1)
{
  for (int i = 1; ; i *= v3)
  {
    int v2 = *(unsigned __int8 *)(a1 + 24);
    if (v2 != 2) {
      break;
    }
    int v3 = *(unsigned __int16 *)(a1 + 20);
    a1 = *(void *)(a1 + 8);
  }
  if (v2 == 1)
  {
    int v4 = *(unsigned __int16 *)(a1 + 20);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 16);
    if (v6)
    {
      int v7 = 0;
      uint64_t v8 = *(void *)(v5 + 8);
      do
      {
        v7 += countStructMember(v8);
        v8 += 32;
        --v6;
      }
      while (v6);
    }
    else
    {
      int v7 = 0;
    }
    int v9 = v7 * v4;
  }
  else
  {
    int v9 = *(unsigned __int16 *)(a1 + 20);
  }
  return (v9 * i);
}

BOOL UpdateLibraryResource(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v151 = a3;
  id v8 = a4;
  unint64_t v150 = v8;
  if (v8)
  {
    id v9 = [objc_alloc((Class)NSData) initWithContentsOfURL:v8 options:0 error:0];
    id v10 = [v7 mutableCopy];
    uint64_t v11 = v10;
    if (v9)
    {
      [v10 setObject:v9 forKeyedSubscript:@"IR"];
    }
    else
    {
      uint64_t v12 = +[NSData data];
      [v11 setObject:v12 forKeyedSubscript:@"IR"];
    }
    id v13 = [v11 copy];

    id v7 = v13;
  }
  id v162 = 0;
  id v167 = 0;
  long long v171 = 0u;
  long long v172 = 0u;
  id v173 = 0;
  id v152 = v7;
  GTMTLReplayController_rewind((uint64_t)a1);
  id v14 = a1[1];
  uint64_t v15 = (char *)*a1;
  uint64_t v16 = *((void *)*a1 + 5);
  unint64_t v18 = *((void *)*a1 + 10);
  uint64_t v17 = *((void *)*a1 + 11);
  uint64_t v19 = [v152 objectForKeyedSubscript:@"streamref"];
  id v20 = [v19 unsignedLongLongValue];
  unint64_t v21 = v17 + v18;

  uint64_t Object = GTMTLSMContext_lastObject(*(void *)v16, (uint64_t)v20, v21);
  if (!Object)
  {
    uint64_t v32 = +[NSString stringWithFormat:@"Internal error: Unable to find object (%llu)", v20];
    uint64_t v33 = GTUpdateShaderMakeError(1u, v32, 0, 0);
    goto LABEL_21;
  }
  uint64_t v23 = (void *)Object;
  uint64_t v166 = (uint64_t *)v16;
  id v155 = v14;
  id v167 = v155;
  long long v24 = *(_OWORD *)(v15 + 8);
  long long v168 = v24;
  unint64_t v169 = v18;
  unint64_t v170 = v21;
  uint64_t v25 = *(unsigned int *)v23;
  if (v25 != 43)
  {
    if (v25 == 62)
    {
      id v153 = v152;
      uint64_t v26 = v23[1];
      unint64_t v145 = v23;
      if (v23[2] >= v18)
      {
        id v27 = objc_alloc((Class)NSMutableSet);
        unint64_t v28 = +[NSNumber numberWithUnsignedLongLong:v26];
        id v173 = [v27 initWithObjects:v28];
      }
      unint64_t v146 = [v155 defaultDevice];
      unsigned int v149 = [v153 objectForKeyedSubscript:@"source"];
      if (v149)
      {
        uint64_t v29 = v23[13];
        if (v29)
        {
          unint64_t v30 = [v155 dynamicLibraries];
          MakeMTLCompileOptions(v29, v30);
          id v31 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v31 = objc_alloc_init((Class)MTLCompileOptions);
        }
        [v31 setDebuggingEnabled:1];
        id v148 = [v146 newLibraryWithSource:v149 options:v31 error:&v162];
        BOOL v53 = v148 == 0;
      }
      else
      {
        unsigned int v52 = [v153 objectForKeyedSubscript:@"IR"];
        GTCreateMTLLibrary(a1, (uint64_t)v23, v52, &v162);
        id v148 = (id)objc_claimAutoreleasedReturnValue();
        BOOL v53 = v148 == 0;
      }
      if (v53)
      {
      }
      else
      {
        id v147 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v54 = +[NSNumber numberWithUnsignedLongLong:v26];
        [v147 setObject:v148 forKeyedSubscript:v54];

        *(void *)&long long v171 = [v147 copy];
        id obja = objc_alloc_init((Class)NSMutableDictionary);
        int64_t v55 = [a1[1] functionMap];
        [obja addEntriesFromDictionary:v55];

        [obja addEntriesFromDictionary:v147];
        newpool[0] = 0;
        apr_pool_create_ex(newpool, 0, 0, v56);
        p = newpool[0];
        unint64_t v57 = apr_array_make(newpool[0], 128, 8);
        id v157 = objc_alloc_init((Class)NSMutableDictionary);
        GTMTLSMContext_getObjects(*(_DWORD **)(v16 + 224), v18, v57);
        int nelts = v57->nelts;
        if (nelts >= 1)
        {
          for (uint64_t i = 0; i < nelts; ++i)
          {
            BOOL v60 = *(void **)&v57->elts[8 * i];
            if (v60[5] == v26)
            {
              id v61 = [obja copy];
              unint64_t v62 = GTCreateMTLFunction((uint64_t)a1, v60, v61, &v162);

              if (!v62)
              {
                id v143 = 0;
LABEL_49:
                char v77 = 0;
LABEL_60:

                goto LABEL_61;
              }
              uint64_t v63 = v60[1];
              uint64_t v64 = +[NSNumber numberWithUnsignedLongLong:v63];
              [obja setObject:v62 forKeyedSubscript:v64];

              __n128 v65 = +[NSNumber numberWithUnsignedLongLong:v63];
              [v157 setObject:v62 forKeyedSubscript:v65];

              int nelts = v57->nelts;
            }
          }
        }
        id v143 = [v157 copy];
        *((void *)&v172 + 1) = v143;

        v57->int nelts = 0;
        id v157 = objc_alloc_init((Class)NSMutableDictionary);
        GTMTLSMContext_getObjects(*(_DWORD **)(v16 + 96), v18, v57);
        int v66 = v57->nelts;
        if (v66 >= 1)
        {
          for (uint64_t j = 0; j < v66; ++j)
          {
            uint64_t v68 = *(void *)&v57->elts[8 * j];
            if (*(void *)(v68 + 48) == v26)
            {
              id v69 = obja;
              unint64_t v70 = +[NSNumber numberWithUnsignedLongLong:v26];
              uint8x8_t v71 = [v69 objectForKeyedSubscript:v70];

              if (!v71)
              {
                GTUpdateShaderMakeError(1u, @"Internal error: Failed to find runtime library for dylib", 0, 0);
                char v77 = 0;
                id v162 = (id)objc_claimAutoreleasedReturnValue();
                goto LABEL_60;
              }
              uint64_t v72 = [a1[1] defaultDevice];
              v213[0] = 0;
              id v73 = [v72 newDynamicLibrary:v71 error:v213];
              id v74 = v213[0];
              if (v73)
              {
                id v75 = v73;
              }
              else
              {
                GTUpdateShaderMakeError(4u, @"Failed to instantiate dynamic library", 0, v74);
                id v162 = (id)objc_claimAutoreleasedReturnValue();
              }

              if (!v73) {
                goto LABEL_49;
              }
              __n128 v76 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v68 + 8)];
              [v157 setObject:v73 forKeyedSubscript:v76];

              int v66 = v57->nelts;
            }
          }
        }
        *((void *)&v171 + 1) = [v157 copy];

        if (!v149)
        {
          id v157 = objc_alloc_init((Class)NSMutableDictionary);
          uint64_t v78 = v145[13];
          if (v78)
          {
            unint64_t v79 = *(uint64_t **)(v78 + 32);
            if (v79)
            {
              uint64_t v80 = *(void *)(v78 + 40);
              if ((int)v80 >= 1)
              {
                uint64_t v81 = v80;
                do
                {
                  uint64_t v82 = *v79++;
                  unsigned int v83 = +[NSNumber numberWithUnsignedLongLong:v82];
                  BOOL v84 = [v155 dynamicLibraries];
                  uint64_t v85 = [v84 objectForKeyedSubscript:v83];

                  if (v85) {
                    [v157 setObject:v85 forKeyedSubscript:v83];
                  }

                  --v81;
                }
                while (v81);
              }
            }
          }
          *(void *)&long long v172 = [v157 copy];
          char v77 = 1;
          goto LABEL_60;
        }
        char v77 = 1;
LABEL_61:
        apr_pool_destroy(p);

        if (v77) {
          goto LABEL_62;
        }
      }
LABEL_129:
      id v48 = 0;
      int v47 = v152;
      goto LABEL_130;
    }
    uint64_t v32 = +[NSString stringWithFormat:@"Internal error: Unknown object type (%llu:%u)", v20, v25];
    uint64_t v33 = GTUpdateShaderMakeError(1u, v32, 0, 0);
LABEL_21:
    id v162 = v33;

    int v47 = v152;
    id v48 = 0;
    goto LABEL_130;
  }
  uint64_t obj = v24;
  id v34 = v152;
  if (v23[2] >= v18)
  {
    uint64_t v49 = _GTMTLSMFunctionDisplayLabel(v23, obj);
    __n128 v50 = +[NSString stringWithFormat:@"Ensure the modified function '%@' isn't created during the capture", v49];

    uint64_t v51 = GTUpdateShaderMakeError(5u, @"Unable to update shader function", v50, 0);
LABEL_47:
    id v162 = v51;

    goto LABEL_129;
  }
  uint64_t v35 = GTMTLSMContext_lastObject(*(void *)v16, v23[5], v18);
  if (!v35)
  {
    __n128 v50 = +[NSString stringWithFormat:@"Internal error: Unable to find library (%llu)", v23[5]];
    uint64_t v51 = GTUpdateShaderMakeError(1u, v50, 0, 0);
    goto LABEL_47;
  }
  uint64_t v36 = v35;
  unsigned int v37 = [v34 objectForKeyedSubscript:@"IR"];
  unint64_t v38 = GTCreateMTLLibrary(a1, v36, v37, &v162);
  if (!v38)
  {

    goto LABEL_129;
  }
  unint64_t v39 = [a1[1] functionMap];
  id v40 = [v39 mutableCopy];

  __n128 v41 = +[NSNumber numberWithUnsignedLongLong:v23[5]];
  [v40 setObject:v38 forKeyedSubscript:v41];

  id v42 = [v40 copy];
  uint64_t v43 = GTCreateMTLFunction((uint64_t)a1, v23, v42, &v162);

  if (!v43)
  {

    goto LABEL_129;
  }
  uint64_t v44 = v23[1];
  id v45 = objc_alloc_init((Class)NSMutableDictionary);
  unint64_t v46 = +[NSNumber numberWithUnsignedLongLong:v44];
  [v45 setObject:v43 forKeyedSubscript:v46];

  id v143 = [v45 copy];
  *((void *)&v172 + 1) = v143;

LABEL_62:
  long long v164 = 0u;
  long long v165 = 0u;
  long long v163 = 0u;
  int v47 = v152;
  if (GTUpdateShaderPipelines(&v166, (uint64_t)&v163, &v162))
  {
    id v86 = a1[1];
    id v87 = v143;
    long long v202 = 0u;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    id objb = v87;
    id v88 = [v87 countByEnumeratingWithState:&v202 objects:v213 count:16];
    if (v88)
    {
      uint64_t v89 = *(void *)v203;
      unint64_t v90 = v173;
      do
      {
        for (k = 0; k != v88; k = (char *)k + 1)
        {
          if (*(void *)v203 != v89) {
            objc_enumerationMutation(objb);
          }
          uint64_t v92 = *(void **)(*((void *)&v202 + 1) + 8 * (void)k);
          unsigned int v93 = [v90 containsObject:v92];
          __n128 v94 = [objb objectForKeyedSubscript:v92];
          if (v93) {
            [a1[18] setObject:v94 forKeyedSubscript:v92];
          }
          else {
            [v86 setFunction:v94 forKey:[v92 unsignedLongLongValue]];
          }
        }
        id v88 = [objb countByEnumeratingWithState:&v202 objects:v213 count:16];
      }
      while (v88);
    }
    id v95 = (id)v171;
    long long v198 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v201 = 0u;
    id v158 = v95;
    id v96 = [v95 countByEnumeratingWithState:&v198 objects:newpool count:16];
    if (v96)
    {
      uint64_t v97 = *(void *)v199;
      uint64_t v98 = v173;
      do
      {
        for (m = 0; m != v96; m = (char *)m + 1)
        {
          if (*(void *)v199 != v97) {
            objc_enumerationMutation(v158);
          }
          int64_t v100 = *(void **)(*((void *)&v198 + 1) + 8 * (void)m);
          unsigned int v101 = [v98 containsObject:v100];
          uint64_t v102 = [v158 objectForKeyedSubscript:v100];
          if (v101) {
            [a1[18] setObject:v102 forKeyedSubscript:v100];
          }
          else {
            [v86 setLibrary:v102 forKey:[v100 unsignedLongLongValue]];
          }
        }
        id v96 = [v158 countByEnumeratingWithState:&v198 objects:newpool count:16];
      }
      while (v96);
    }
    id v103 = *((id *)&v171 + 1);
    long long v194 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v197 = 0u;
    id v156 = v103;
    id v104 = [v103 countByEnumeratingWithState:&v194 objects:v211 count:16];
    if (v104)
    {
      uint64_t v105 = *(void *)v195;
      do
      {
        for (int n = 0; n != v104; int n = (char *)n + 1)
        {
          if (*(void *)v195 != v105) {
            objc_enumerationMutation(v156);
          }
          unsigned int v107 = *(void **)(*((void *)&v194 + 1) + 8 * (void)n);
          uint64_t v108 = [v156 objectForKeyedSubscript:v107];
          [v86 setDynamicLibrary:v108 forKey:[v107 unsignedLongLongValue]];
        }
        id v104 = [v156 countByEnumeratingWithState:&v194 objects:v211 count:16];
      }
      while (v104);
    }
    id v109 = (id)v163;
    long long v190 = 0u;
    long long v191 = 0u;
    long long v192 = 0u;
    long long v193 = 0u;
    id v154 = v109;
    id v110 = [v154 countByEnumeratingWithState:&v190 objects:v210 count:16];
    if (v110)
    {
      uint64_t v111 = *(void *)v191;
      do
      {
        for (iuint64_t i = 0; ii != v110; iuint64_t i = (char *)ii + 1)
        {
          if (*(void *)v191 != v111) {
            objc_enumerationMutation(v154);
          }
          unsigned int v113 = *(void **)(*((void *)&v190 + 1) + 8 * (void)ii);
          unsigned int v114 = [v154 objectForKeyedSubscript:v113];
          [v86 setRenderPipelineState:v114 forKey:[v113 unsignedLongLongValue]];
        }
        id v110 = [v154 countByEnumeratingWithState:&v190 objects:v210 count:16];
      }
      while (v110);
    }

    id v115 = *((id *)&v163 + 1);
    long long v186 = 0u;
    long long v187 = 0u;
    long long v188 = 0u;
    long long v189 = 0u;
    id v116 = [v115 countByEnumeratingWithState:&v186 objects:v209 count:16];
    if (v116)
    {
      uint64_t v117 = *(void *)v187;
      do
      {
        for (juint64_t j = 0; jj != v116; juint64_t j = (char *)jj + 1)
        {
          if (*(void *)v187 != v117) {
            objc_enumerationMutation(v115);
          }
          uint64_t v119 = *(void **)(*((void *)&v186 + 1) + 8 * (void)jj);
          unint64_t v120 = [v115 objectForKeyedSubscript:v119];
          [v86 setComputePipelineState:v120 forKey:[v119 unsignedLongLongValue]];
        }
        id v116 = [v115 countByEnumeratingWithState:&v186 objects:v209 count:16];
      }
      while (v116);
    }
    id v121 = (id)v164;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v184 = 0u;
    long long v185 = 0u;
    id v122 = [v121 countByEnumeratingWithState:&v182 objects:v208 count:16];
    if (v122)
    {
      uint64_t v123 = *(void *)v183;
      do
      {
        for (kk = 0; kk != v122; kk = (char *)kk + 1)
        {
          if (*(void *)v183 != v123) {
            objc_enumerationMutation(v121);
          }
          unint64_t v125 = *(void **)(*((void *)&v182 + 1) + 8 * (void)kk);
          unint64_t v126 = [v121 objectForKeyedSubscript:v125];
          [v86 setFunctionHandle:v126 forKey:[v125 unsignedLongLongValue]];
        }
        id v122 = [v121 countByEnumeratingWithState:&v182 objects:v208 count:16];
      }
      while (v122);
    }
    id v127 = *((id *)&v164 + 1);
    long long v178 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    id v128 = [v127 countByEnumeratingWithState:&v178 objects:v207 count:16];
    if (v128)
    {
      uint64_t v129 = *(void *)v179;
      do
      {
        for (mm = 0; mm != v128; mm = (char *)mm + 1)
        {
          if (*(void *)v179 != v129) {
            objc_enumerationMutation(v127);
          }
          unint64_t v131 = *(void **)(*((void *)&v178 + 1) + 8 * (void)mm);
          uint64_t v132 = [v127 objectForKeyedSubscript:v131];
          [v86 setVisibleFunctionTable:v132 forKey:[v131 unsignedLongLongValue]];
        }
        id v128 = [v127 countByEnumeratingWithState:&v178 objects:v207 count:16];
      }
      while (v128);
    }
    id v133 = (id)v165;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    id v134 = [v133 countByEnumeratingWithState:&v174 objects:v206 count:16];
    if (v134)
    {
      uint64_t v135 = *(void *)v175;
      do
      {
        for (nint n = 0; nn != v134; nint n = (char *)nn + 1)
        {
          if (*(void *)v175 != v135) {
            objc_enumerationMutation(v133);
          }
          unint64_t v137 = *(void **)(*((void *)&v174 + 1) + 8 * (void)nn);
          int v138 = [v133 objectForKeyedSubscript:v137];
          [v86 setIntersectionFunctionTable:v138 forKey:[v137 unsignedLongLongValue]];
        }
        id v134 = [v133 countByEnumeratingWithState:&v174 objects:v206 count:16];
      }
      while (v134);
    }

    id v48 = *((id *)&v165 + 1);
    int v47 = v152;
  }
  else
  {
    id v48 = 0;
  }
  __destructor_8_s0_s8_s16_s24_s32_s40((uint64_t)&v163);
LABEL_130:
  __destructor_8_s8_S_s48_s56_s64_s72_s80((uint64_t)&v166);

  id v139 = v162;
  unsigned int v140 = v139;
  if (v48)
  {
    [v151 setObject:v48 forKeyedSubscript:@"updatedPipelines"];
  }
  else
  {
    unsigned int v141 = [v139 localizedDescription];
    [v151 setObject:v141 forKeyedSubscript:@"propagate"];

    [v151 setObject:v140 forKeyedSubscript:@"error"];
  }

  return v48 != 0;
}

void sub_31922C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, apr_pool_t *p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

id GTUpdateShaderMakeError(unsigned int a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  id v10 = [objc_alloc((Class)NSMutableDictionary) initWithObjectsAndKeys:v9, NSLocalizedDescriptionKey, 0];

  if (v7) {
    [v10 setObject:v7 forKeyedSubscript:NSLocalizedRecoverySuggestionErrorKey];
  }
  if (v8) {
    [v10 setObject:v8 forKeyedSubscript:NSUnderlyingErrorKey];
  }
  uint64_t v11 = +[NSError errorWithDomain:@"GTUpdateShaderErrorDomain" code:a1 userInfo:v10];

  return v11;
}

id GTCreateMTLLibrary(id *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  if ([v7 length])
  {
    id v8 = [a1[1] defaultDevice];
    if (!*(void *)(a2 + 136)) {
      goto LABEL_15;
    }
    id v34 = a4;
    id v9 = +[NSUUID UUID];
    id v10 = [v9 UUIDString];
    id v11 = [v10 substringToIndex:8];

    uint64_t v12 = +[NSString stringWithUTF8String:*(void *)(a2 + 136)];
    id v32 = v11;
    id v13 = +[NSString stringWithFormat:@"tmp-%@", v11];
    id v14 = [v12 stringByAppendingPathExtension:v13];

    uint64_t v15 = [a1[2821] URLByAppendingPathComponent:v14];
    id v37 = 0;
    unsigned int v16 = [v7 writeToURL:v15 options:1 error:&v37];
    id v17 = v37;
    unint64_t v18 = v17;
    uint64_t v33 = v8;
    if (v16)
    {
      id v36 = v17;
      id v11 = [v8 newLibraryWithURL:v15 error:&v36];
      id v19 = v36;

      id v20 = +[NSFileManager defaultManager];
      [v20 removeItemAtURL:v15 error:0];

      if (v11)
      {
        id v21 = v11;
      }
      else
      {
        uint64_t v23 = _GTMTLSMLibraryDisplayLabel(a2, *((void *)*a1 + 1));
        id v31 = +[NSString stringWithFormat:@"Failed to instantiate library <url> '%@'", v23];

        if (v34)
        {
          GTUpdateShaderMakeError(3u, v31, 0, v19);
          void *v34 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      unint64_t v22 = v32;
    }
    else
    {
      id v19 = v17;
      unint64_t v22 = v11;
    }

    id v8 = v33;
    a4 = v34;
    if ((v16 & 1) == 0)
    {
LABEL_15:
      id v24 = v7;
      dispatch_data_t v25 = dispatch_data_create([v24 bytes], (size_t)[v24 length], 0, 0);
      id v35 = 0;
      id v11 = [v8 newLibraryWithData:v25 error:&v35];
      id v26 = v35;
      if (v11)
      {
        id v27 = v11;
      }
      else
      {
        unint64_t v28 = _GTMTLSMLibraryDisplayLabel(a2, *((void *)*a1 + 1));
        uint64_t v29 = +[NSString stringWithFormat:@"Failed to instantiate library <data> '%@'", v28];

        if (a4)
        {
          GTUpdateShaderMakeError(3u, v29, 0, v26);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
    }
  }
  else if (a4)
  {
    GTUpdateShaderMakeError(1u, @"Internal error: No library data", 0, 0);
    id v11 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

id GTCreateMTLFunction(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = +[NSNumber numberWithUnsignedLongLong:a2[5]];
  id v9 = [v7 objectForKeyedSubscript:v8];

  if (v9)
  {
    uint64_t v10 = a2[15];
    if (v10)
    {
      id v11 = MakeMTLIntersectionFunctionDescriptor(v10, v7);
      uint64_t v23 = 0;
      id v12 = [v9 newIntersectionFunctionWithDescriptor:v11 error:&v23];
      id v13 = v23;
    }
    else
    {
      uint64_t v14 = a2[14];
      if (!v14)
      {
        unsigned int v16 = (unsigned char *)a2[7];
        if (!v16 || !*v16)
        {
          GTUpdateShaderMakeError(1u, @"Internal error: empty function name", 0, 0);
          id v15 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_17;
        }
        id v15 = (id)a2[9];
        id v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
        if (v15)
        {
          id v17 = MakeMTLFunctionConstantValues((void *)a2[9]);
          id v21 = 0;
          id v12 = [v9 newFunctionWithName:v11 constantValues:v17 error:&v21];
          id v15 = v21;
        }
        else
        {
          id v12 = [v9 newFunctionWithName:v11];
        }
LABEL_9:

        if (v12)
        {
LABEL_20:

          goto LABEL_21;
        }
LABEL_17:
        unint64_t v18 = _GTMTLSMFunctionDisplayLabel(a2, *(void *)(*(void *)a1 + 8));
        id v19 = +[NSString stringWithFormat:@"Failed to instantiate function '%@'", v18];

        if (a4)
        {
          GTUpdateShaderMakeError(3u, v19, 0, v15);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }

        id v12 = 0;
        goto LABEL_20;
      }
      id v11 = MakeMTLFunctionDescriptor(v14, v7);
      unint64_t v22 = 0;
      id v12 = [v9 newFunctionWithDescriptor:v11 error:&v22];
      id v13 = v22;
    }
    id v15 = v13;
    goto LABEL_9;
  }
  if (a4)
  {
    GTUpdateShaderMakeError(1u, @"Internal error: Failed to find runtime library for function", 0, 0);
    id v12 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v12 = 0;
  }
LABEL_21:

  return v12;
}

__CFString *_GTMTLSMFunctionDisplayLabel(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v4 = (unsigned char *)a1[8];
    if (!v4
      || !*v4
      || (+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"),
          (uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      uint64_t v6 = a1[15];
      if (!v6 || (uint64_t v7 = *(void *)(v6 + 8)) == 0)
      {
        uint64_t v8 = a1[14];
        if (!v8 || (uint64_t v7 = *(void *)(v8 + 8)) == 0) {
          uint64_t v7 = a1[7];
        }
      }
      uint64_t v9 = +[NSString stringWithUTF8String:v7];
      if (v9) {
        uint64_t v5 = (__CFString *)v9;
      }
      else {
        uint64_t v5 = @"MTLFunction";
      }
    }
    uint64_t v12 = a1[1];
    uint64_t v10 = [(__CFString *)v5 stringByAppendingFormat:@" 0x%llx", *(void *)(*(void *)(*find_entry(a2, &v12, 8uLL, 0) + 32) + 8)];
  }
  else
  {
    uint64_t v10 = &stru_7482F0;
  }

  return v10;
}

uint64_t GTUpdateShaderPipelines(uint64_t **a1, uint64_t a2, void *a3)
{
  id v198 = objc_alloc_init((Class)NSMutableDictionary);
  id v199 = objc_alloc_init((Class)NSMutableDictionary);
  v216 = a1[1];
  long long v203 = [v216 defaultDevice];
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v4);
  uint64_t v5 = apr_array_make(newpool, 128, 8);
  GTMTLSMContext_getObjects((_DWORD *)(*a1)[5], (unint64_t)a1[4], v5);
  uint64_t nelts = v5->nelts;
  v213 = v5;
  if ((int)nelts < 1)
  {
LABEL_42:
    id v202 = [v199 copy];
    goto LABEL_43;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)&v213->elts[8 * v6];
    if (v7) {
      uint64_t v222 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v222 = 0;
    }
    uint64_t v8 = [v216 unusedResourceKeys];
    uint64_t v9 = +[NSNumber numberWithUnsignedLongLong:v222];
    unsigned __int8 v10 = [v8 containsObject:v9];

    if (v10) {
      goto LABEL_41;
    }
    id v236 = 0;
    id v237 = 0;
    uint64_t v12 = *(void *)(v7 + 64);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 40);
      uint64_t v14 = *(unsigned __int16 *)(v12 + 96);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    id v15 = *a1;
    v243 = 0;
    apr_pool_create_ex(&v243, 0, 0, v11);
    long long v277 = 0u;
    long long v278 = 0u;
    long long v275 = 0u;
    long long v276 = 0u;
    long long v273 = 0u;
    long long v274 = 0u;
    long long v271 = 0u;
    long long v272 = 0u;
    long long v269 = 0u;
    long long v270 = 0u;
    long long v267 = 0u;
    long long v268 = 0u;
    long long v265 = 0u;
    long long v266 = 0u;
    long long v263 = 0u;
    long long v264 = 0u;
    long long v261 = 0u;
    long long v262 = 0u;
    long long v259 = 0u;
    long long v260 = 0u;
    long long v257 = 0u;
    long long v258 = 0u;
    long long v255 = 0u;
    long long v256 = 0u;
    long long v253 = 0u;
    long long v254 = 0u;
    long long v251 = 0u;
    long long v252 = 0u;
    long long v249 = 0u;
    long long v250 = 0u;
    long long v247 = 0u;
    long long v248 = 0u;
    unsigned int v16 = v243;
    GTMTLSMComputePipelineState_computePipelineDescriptor(v15, v7, &v247, v243);
    *(void *)&long long v238 = v279[12];
    *((void *)&v238 + 1) = v279;
    long long v239 = v281;
    *(void *)&long long v231 = &v238;
    *((void *)&v231 + 1) = 1;
    *(void *)&long long v232 = v13;
    *((void *)&v232 + 1) = v14;
    BOOL ProgramUpdateObjectMapForPipelineObjects = GetProgramUpdateObjectMapForPipelineObjects((uint64_t *)&v231, (id *)a1, &v237, &v236);
    apr_pool_destroy(v16);
    id v219 = v237;
    id v18 = v236;
    if (ProgramUpdateObjectMapForPipelineObjects) {
      break;
    }

LABEL_41:
    if (++v6 == nelts) {
      goto LABEL_42;
    }
  }
  unint64_t v207 = v18;
  id v19 = [v216 computePipelineDescriptorMap];
  id v20 = [v19 mutableCopy];

  id v21 = v207;
  if ([v219 count])
  {
    long long v285 = 0u;
    long long v286 = 0u;
    long long v283 = 0u;
    long long v284 = 0u;
    id v22 = v219;
    id v23 = [v22 countByEnumeratingWithState:&v283 objects:p count:16];
    if (v23)
    {
      uint64_t v24 = *(void *)v284;
      do
      {
        for (uint64_t i = 0; i != v23; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v284 != v24) {
            objc_enumerationMutation(v22);
          }
          uint64_t v26 = *(void *)(*((void *)&v283 + 1) + 8 * i);
          id v27 = [v22 objectForKeyedSubscript:v26];
          [v20 setObject:v27 forKeyedSubscript:v26];
        }
        id v23 = [v22 countByEnumeratingWithState:&v283 objects:p count:16];
      }
      while (v23);
    }

    id v21 = v207;
  }
  long long v277 = 0u;
  long long v278 = 0u;
  long long v275 = 0u;
  long long v276 = 0u;
  long long v273 = 0u;
  long long v274 = 0u;
  long long v271 = 0u;
  long long v272 = 0u;
  long long v269 = 0u;
  long long v270 = 0u;
  long long v267 = 0u;
  long long v268 = 0u;
  long long v265 = 0u;
  long long v266 = 0u;
  long long v263 = 0u;
  long long v264 = 0u;
  long long v261 = 0u;
  long long v262 = 0u;
  long long v259 = 0u;
  long long v260 = 0u;
  long long v257 = 0u;
  long long v258 = 0u;
  long long v255 = 0u;
  long long v256 = 0u;
  long long v253 = 0u;
  long long v254 = 0u;
  long long v251 = 0u;
  long long v252 = 0u;
  long long v249 = 0u;
  long long v250 = 0u;
  long long v247 = 0u;
  long long v248 = 0u;
  GTMTLSMComputePipelineState_computePipelineDescriptor(*a1, v7, &v247, newpool);
  unint64_t v28 = MakeMTLComputePipelineDescriptor(&v247, v20);
  if ([v21 count])
  {
    uint64_t v29 = [v28 preloadedLibraries];
    unint64_t v30 = v29;
    if (v29)
    {
      uint64_t v201 = [v29 arrayByAddingObjectsFromArray:v21];
      id v31 = (id)v201;
    }
    else
    {
      id v196 = [v21 copy];
      id v31 = v196;
    }
    [v28 setPreloadedLibraries:v31];
    id v32 = v196;
    if (v30) {
      id v32 = (void *)v201;
    }
  }
  id v235 = 0;
  id v230 = 0;
  id v33 = [v203 newComputePipelineStateWithDescriptor:v28 options:0x40000 reflection:&v235 error:&v230];
  id v34 = v235;
  id v35 = v230;
  if (v33)
  {
    id v36 = +[NSNumber numberWithUnsignedLongLong:v222];
    [v199 setObject:v33 forKeyedSubscript:v36];

    if (!v34) {
      goto LABEL_40;
    }
    id v37 = [v34 performanceStatistics];
    if (v7) {
      uint64_t v38 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = (uint64_t)a1[2];
    *(void *)&long long v238 = v38;
    id v40 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(*find_entry(v39, &v238, 8uLL, 0) + 32) + 8)];
    [v198 setObject:v37 forKeyedSubscript:v40];
  }
  else
  {
    if (v280)
    {
      id v37 = +[NSString stringWithFormat:@": '%s'", v280];
    }
    else
    {
      id v37 = &stru_7482F0;
    }
    id v40 = +[NSString stringWithFormat:@"Failed to recreate compute pipeline%@", v37];
    if (a3)
    {
      GTUpdateShaderMakeError(4u, v40, 0, v35);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

LABEL_40:
  if (v33) {
    goto LABEL_41;
  }
  id v202 = 0;
LABEL_43:
  apr_pool_destroy(newpool);

  if (!v202)
  {
    uint64_t v181 = 0;
    goto LABEL_212;
  }
  id v200 = v198;
  id v208 = objc_alloc_init((Class)NSMutableDictionary);
  unsigned int v220 = a1[1];
  long long v205 = [v220 defaultDevice];
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v41);
  id v42 = apr_array_make(newpool, 128, 8);
  GTMTLSMContext_getObjects((_DWORD *)(*a1)[4], (unint64_t)a1[4], v42);
  uint64_t v214 = v42->nelts;
  long long v217 = v42;
  if ((int)v214 < 1)
  {
LABEL_152:
    v217->uint64_t nelts = 0;
    id v204 = [v208 copy];
    goto LABEL_153;
  }
  uint64_t v43 = 0;
  while (2)
  {
    uint64_t v44 = *(void **)&v217->elts[8 * v43];
    if (v44) {
      uint64_t v223 = v44[1];
    }
    else {
      uint64_t v223 = 0;
    }
    id v45 = [v220 unusedResourceKeys];
    unint64_t v46 = +[NSNumber numberWithUnsignedLongLong:v223];
    unsigned __int8 v47 = [v45 containsObject:v46];

    if (v47)
    {
LABEL_99:
      if (++v43 == v214) {
        goto LABEL_152;
      }
      continue;
    }
    break;
  }
  id v48 = (void *)v44[10];
  if (!v48)
  {
    id v235 = 0;
    id v236 = 0;
    uint64_t v60 = v44[7];
    if (v60)
    {
      uint64_t v61 = *(void *)(v60 + 96);
      uint64_t v60 = *(unsigned __int16 *)(v60 + 214);
    }
    else
    {
      uint64_t v61 = 0;
    }
    v243 = 0;
    uint64_t v244 = 0;
    uint64_t v245 = v61;
    uint64_t v246 = v60;
    uint64_t v81 = v44[6];
    if (v81)
    {
      *(void *)&long long v283 = *(void *)(v81 + 1296);
      *((void *)&v283 + 1) = v81 + 1064;
      long long v284 = *(_OWORD *)(v81 + 1304);
      *(void *)&long long v285 = *(void *)(v81 + 1176);
      *((void *)&v285 + 1) = v81 + 872;
      uint64_t v82 = *(void *)(v81 + 1184);
      uint64_t v83 = *(void *)(v81 + 1192);
      *(void *)&long long v286 = v82;
      *((void *)&v286 + 1) = v83;
      v243 = (apr_pool_t *)&v283;
      uint64_t v244 = 2;
      BOOL v84 = GetProgramUpdateObjectMapForPipelineObjects((uint64_t *)&v243, (id *)a1, &v236, &v235);
    }
    else
    {
      uint64_t v85 = (void *)v44[9];
      if (v85)
      {
        uint64_t v86 = v85[45];
        *(void *)&long long v283 = v85[46];
        *((void *)&v283 + 1) = v85 + 32;
        long long v284 = 0uLL;
        *(void *)&long long v285 = v86;
        *((void *)&v285 + 1) = v85 + 24;
        long long v286 = 0uLL;
        uint64_t v287 = v85[43];
        v288 = v85 + 16;
        uint64_t v289 = 0;
        uint64_t v290 = 0;
        v243 = (apr_pool_t *)&v283;
        uint64_t v244 = 3;
        BOOL v84 = GetProgramUpdateObjectMapForPipelineObjects((uint64_t *)&v243, (id *)a1, &v236, &v235);
      }
      else
      {
        id v87 = (void *)v44[8];
        if (!v87)
        {
          BOOL v90 = 0;
LABEL_85:
          id v67 = v236;
          id v91 = v235;
          if (!v90)
          {
            id v66 = v91;
            goto LABEL_98;
          }
          id v211 = v91;
          uint64_t v92 = [v220 renderPipelineDescriptorMap];
          id v73 = [v92 mutableCopy];

          long long v233 = 0u;
          long long v234 = 0u;
          long long v231 = 0u;
          long long v232 = 0u;
          id v66 = v67;
          id v93 = [v66 countByEnumeratingWithState:&v231 objects:p count:16];
          if (v93)
          {
            uint64_t v94 = *(void *)v232;
            do
            {
              for (uint64_t j = 0; j != v93; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v232 != v94) {
                  objc_enumerationMutation(v66);
                }
                uint64_t v96 = *(void *)(*((void *)&v231 + 1) + 8 * (void)j);
                uint64_t v97 = [v66 objectForKeyedSubscript:v96];
                [v73 setObject:v97 forKeyedSubscript:v96];
              }
              id v93 = [v66 countByEnumeratingWithState:&v231 objects:p count:16];
            }
            while (v93);
          }

          uint64_t v98 = v44[6];
          if (v98)
          {
            int v99 = MakeMTLRenderPipelineDescriptor(v98, v73);
            if ([v211 count])
            {
              int64_t v100 = [v99 vertexPreloadedLibraries];
              unsigned int v101 = v100;
              if (v100)
              {
                uint64_t v194 = [v100 arrayByAddingObjectsFromArray:v211];
                id v102 = (id)v194;
              }
              else
              {
                id v192 = [v211 copy];
                id v102 = v192;
              }
              [v99 setVertexPreloadedLibraries:v102];
              unsigned int v107 = v192;
              if (v101) {
                unsigned int v107 = (void *)v194;
              }

              uint64_t v108 = [v99 fragmentPreloadedLibraries];

              if (v108)
              {
                uint64_t v193 = [v108 arrayByAddingObjectsFromArray:v211];
                id v109 = (id)v193;
              }
              else
              {
                id v191 = [v211 copy];
                id v109 = v191;
              }
              [v99 setFragmentPreloadedLibraries:v109];
              id v110 = v191;
              if (v108) {
                id v110 = (void *)v193;
              }
            }
            id v229 = 0;
            id v230 = 0;
            id v78 = [v205 newRenderPipelineStateWithDescriptor:v99 options:0x40000 reflection:&v230 error:&v229];
            id v111 = v230;
            id v67 = v229;
            unint64_t v112 = (uint64_t *)(v44[6] + 1200);
          }
          else
          {
            uint64_t v103 = v44[9];
            if (v103)
            {
              int v99 = MakeMTLMeshRenderPipelineDescriptor(v103, v73);
              if ([v211 count])
              {
                id v104 = [v99 objectPreloadedLibraries];
                uint64_t v105 = v104;
                if (v104)
                {
                  uint64_t v190 = [v104 arrayByAddingObjectsFromArray:v211];
                  id v106 = (id)v190;
                }
                else
                {
                  id v187 = [v211 copy];
                  id v106 = v187;
                }
                [v99 setObjectPreloadedLibraries:v106];
                uint64_t v117 = v187;
                if (v105) {
                  uint64_t v117 = (void *)v190;
                }

                uint64_t v118 = [v99 meshPreloadedLibraries];

                if (v118)
                {
                  uint64_t v189 = [v118 arrayByAddingObjectsFromArray:v211];
                  id v119 = (id)v189;
                }
                else
                {
                  id v186 = [v211 copy];
                  id v119 = v186;
                }
                [v99 setMeshPreloadedLibraries:v119];
                unint64_t v120 = v186;
                if (v118) {
                  unint64_t v120 = (void *)v189;
                }

                id v121 = [v99 fragmentPreloadedLibraries];

                if (v121)
                {
                  uint64_t v188 = [v121 arrayByAddingObjectsFromArray:v211];
                  id v122 = (id)v188;
                }
                else
                {
                  id v185 = [v211 copy];
                  id v122 = v185;
                }
                [v99 setFragmentPreloadedLibraries:v122];
                uint64_t v123 = v185;
                if (v121) {
                  uint64_t v123 = (void *)v188;
                }
              }
              id v227 = 0;
              id v228 = 0;
              id v78 = [v205 newRenderPipelineStateWithMeshDescriptor:v99 options:0x40000 reflection:&v228 error:&v227];
              id v111 = v228;
              id v67 = v227;
              unint64_t v112 = (uint64_t *)(v44[9] + 352);
            }
            else
            {
              uint64_t v113 = v44[8];
              if (!v113)
              {
                id v111 = 0;
                id v67 = 0;
                goto LABEL_146;
              }
              int v99 = MakeMTLTileRenderPipelineDescriptor(v113, v73);
              if ([v211 count])
              {
                unsigned int v114 = [v99 preloadedLibraries];
                id v115 = v114;
                if (v114)
                {
                  uint64_t v184 = [v114 arrayByAddingObjectsFromArray:v211];
                  id v116 = (id)v184;
                }
                else
                {
                  id v183 = [v211 copy];
                  id v116 = v183;
                }
                [v99 setPreloadedLibraries:v116];
                uint64_t v124 = v183;
                if (v115) {
                  uint64_t v124 = (void *)v184;
                }
              }
              id v225 = 0;
              id v226 = 0;
              id v78 = [v205 newRenderPipelineStateWithTileDescriptor:v99 options:0x40000 reflection:&v226 error:&v225];
              id v111 = v226;
              id v67 = v225;
              unint64_t v112 = (uint64_t *)(v44[8] + 96);
            }
          }
          uint64_t v125 = *v112;

          if (v78)
          {
            unint64_t v126 = +[NSNumber numberWithUnsignedLongLong:v223];
            [v208 setObject:v78 forKeyedSubscript:v126];

            if (v111)
            {
              id v127 = [v111 performanceStatistics];
              uint64_t v128 = (uint64_t)a1[2];
              *(void *)&long long v283 = v44[1];
              uint64_t v129 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(*find_entry(v128, &v283, 8uLL, 0) + 32) + 8)];
              [v200 setObject:v127 forKeyedSubscript:v129];
              char v130 = 1;
              goto LABEL_150;
            }
LABEL_76:

LABEL_98:
            goto LABEL_99;
          }
          if (v125)
          {
            id v127 = +[NSString stringWithFormat:@": '%s'", v125];
            goto LABEL_147;
          }
LABEL_146:
          id v127 = &stru_7482F0;
LABEL_147:
          uint64_t v129 = +[NSString stringWithFormat:@"Failed to recreate render pipeline%@", v127];
          if (a3)
          {
            GTUpdateShaderMakeError(4u, v129, 0, v67);
            id v78 = 0;
            char v130 = 0;
            *a3 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            id v78 = 0;
            char v130 = 0;
          }
LABEL_150:

          if ((v130 & 1) == 0) {
            goto LABEL_199;
          }
          goto LABEL_99;
        }
        *(void *)&long long v283 = v87[15];
        *((void *)&v283 + 1) = v87;
        uint64_t v89 = v87[13];
        uint64_t v88 = v87[14];
        *(void *)&long long v284 = v89;
        *((void *)&v284 + 1) = v88;
        v243 = (apr_pool_t *)&v283;
        uint64_t v244 = 1;
        BOOL v84 = GetProgramUpdateObjectMapForPipelineObjects((uint64_t *)&v243, (id *)a1, &v236, &v235);
      }
    }
    BOOL v90 = v84;
    goto LABEL_85;
  }
  if (!v44[5])
  {
    unint64_t v62 = +[NSNumber numberWithUnsignedLongLong:v44[5]];
    uint64_t v63 = [v208 objectForKeyedSubscript:v62];
    BOOL v64 = v63 == 0;

    if (!v64)
    {
      id v59 = 0;
      goto LABEL_64;
    }
    goto LABEL_99;
  }
  id v49 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v50 = 0;
  uint64_t v51 = v48[9];
  *(void *)&long long v283 = v48[8];
  DWORD2(v283) = v51;
  *(void *)&long long v284 = *v48;
  DWORD2(v284) = v48[1];
  uint64_t v52 = v48[7];
  *(void *)&long long v285 = v48[6];
  DWORD2(v285) = v52;
  *(void *)&long long v286 = v48[4];
  DWORD2(v286) = v48[5];
  uint64_t v287 = v48[2];
  LODWORD(v288) = v48[3];
  do
  {
    BOOL v53 = (uint64_t *)*((void *)&v283 + 2 * v50);
    if (v53)
    {
      uint64_t v54 = *((unsigned int *)&v283 + 4 * v50 + 2);
      if ((int)v54 >= 1)
      {
        do
        {
          uint64_t v55 = *v53++;
          unsigned int v56 = +[NSNumber numberWithUnsignedLongLong:v55];
          unint64_t v57 = [a1[9] objectForKeyedSubscript:v56];
          if (v57) {
            [v49 setObject:v57 forKeyedSubscript:v56];
          }

          --v54;
        }
        while (v54);
      }
    }
    ++v50;
  }
  while (v50 != 5);
  id v58 = [v49 copy];

  id v59 = v58;
LABEL_64:
  __n128 v65 = [v220 functionMap];
  id v66 = [v65 mutableCopy];

  long long v240 = 0u;
  long long v241 = 0u;
  long long v238 = 0u;
  long long v239 = 0u;
  id v67 = v59;
  id v68 = [v67 countByEnumeratingWithState:&v238 objects:&v247 count:16];
  if (v68)
  {
    uint64_t v69 = *(void *)v239;
    do
    {
      for (k = 0; k != v68; k = (char *)k + 1)
      {
        if (*(void *)v239 != v69) {
          objc_enumerationMutation(v67);
        }
        uint64_t v71 = *(void *)(*((void *)&v238 + 1) + 8 * (void)k);
        uint64_t v72 = [v67 objectForKeyedSubscript:v71];
        [v66 setObject:v72 forKeyedSubscript:v71];
      }
      id v68 = [v67 countByEnumeratingWithState:&v238 objects:&v247 count:16];
    }
    while (v68);
  }

  MakeMTLRenderPipelineFunctionsDescriptor(v44[10], v66);
  id v73 = (id)objc_claimAutoreleasedReturnValue();
  id v74 = +[NSNumber numberWithUnsignedLongLong:v44[5]];
  id v75 = [v208 objectForKeyedSubscript:v74];
  __n128 v76 = v75;
  if (v75)
  {
    id v77 = v75;
  }
  else
  {
    id v77 = [v220 renderPipelineStateForKey:v44[5]];
  }
  id v78 = v77;

  id v237 = 0;
  id v79 = [v78 newRenderPipelineStateWithAdditionalBinaryFunctions:v73 error:&v237];
  id v211 = v237;
  if (v79)
  {
    uint64_t v80 = +[NSNumber numberWithUnsignedLongLong:v223];
    [v208 setObject:v79 forKeyedSubscript:v80];

    goto LABEL_76;
  }
  if (a3)
  {
    GTUpdateShaderMakeError(4u, @"Failed to recreate render pipeline with additional shaders", 0, v211);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_199:
  id v204 = 0;
LABEL_153:
  apr_pool_destroy(newpool);

  if (!v204)
  {
    uint64_t v181 = 0;
    goto LABEL_211;
  }
  id v131 = [v200 copy];
  uint64_t v132 = *(void **)(a2 + 40);
  *(void *)(a2 + 40) = v131;

  id v133 = [v204 copy];
  id v134 = *(id *)a2;
  *(void *)a2 = v133;

  id v135 = [v202 copy];
  unsigned int v136 = *(void **)(a2 + 8);
  *(void *)(a2 + 8) = v135;

  id v212 = objc_alloc_init((Class)NSMutableDictionary);
  id v206 = objc_alloc_init((Class)NSMutableDictionary);
  id v215 = objc_alloc_init((Class)NSMutableDictionary);
  id v224 = *(id *)a2;
  id v209 = *(id *)(a2 + 8);
  p[0] = 0;
  apr_pool_create_ex(p, 0, 0, v137);
  int v138 = apr_array_make(p[0], 128, 8);
  v138->uint64_t nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)(*a1)[32], (unint64_t)a1[4], v138);
  uint64_t v221 = v138;
  if (v138->nelts >= 1)
  {
    uint64_t v139 = 0;
    while (1)
    {
      uint64_t v140 = *(void *)&v138->elts[8 * v139];
      uint64_t v218 = v140 ? *(void *)(v140 + 8) : 0;
      unsigned int v141 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v140 + 56)];
      unint64_t v142 = [v224 objectForKey:v141];

      if (v142) {
        break;
      }
      id v148 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v140 + 48)];
      id v147 = [v209 objectForKey:v148];

      if (v147)
      {
        unsigned int v149 = a1[9];
        unint64_t v150 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v140 + 40)];
        id v151 = [v149 objectForKeyedSubscript:v150];
        id v152 = v151;
        if (v151)
        {
          id v153 = v151;
        }
        else
        {
          id v157 = [a1[1] functionMap];
          id v158 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v140 + 40)];
          id v153 = [v157 objectForKeyedSubscript:v158];
        }
        id v156 = [v147 functionHandleWithFunction:v153];
        uint64_t v159 = +[NSNumber numberWithUnsignedLongLong:v218];
        [v215 setObject:v156 forKeyedSubscript:v159];

        goto LABEL_169;
      }
LABEL_170:

      ++v139;
      int v138 = v221;
      if (v139 >= v221->nelts) {
        goto LABEL_171;
      }
    }
    id v143 = a1[9];
    unint64_t v144 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v140 + 40)];
    unint64_t v145 = [v143 objectForKeyedSubscript:v144];
    unint64_t v146 = v145;
    if (v145)
    {
      id v147 = v145;
    }
    else
    {
      id v154 = [a1[1] functionMap];
      id v155 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v140 + 40)];
      id v147 = [v154 objectForKeyedSubscript:v155];
    }
    id v153 = [v142 functionHandleWithFunction:v147 stage:*(unsigned __int8 *)(v140 + 64)];
    id v156 = +[NSNumber numberWithUnsignedLongLong:v218];
    [v215 setObject:v153 forKeyedSubscript:v156];
LABEL_169:

    goto LABEL_170;
  }
LABEL_171:
  v138->uint64_t nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)(*a1)[7], (unint64_t)a1[4], v138);
  if (v138->nelts >= 1)
  {
    uint64_t v160 = 0;
    while (1)
    {
      uint64_t v161 = *(void *)&v138->elts[8 * v160];
      id v162 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v161 + 128)];
      long long v163 = [v224 objectForKey:v162];

      if (v163) {
        break;
      }
      uint64_t v166 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v161 + 120)];
      long long v163 = [v209 objectForKey:v166];

      if (v163)
      {
        long long v164 = MakeMTLVisibleFunctionTableDescriptor(*(void *)(v161 + 104));
        id v165 = [v163 newVisibleFunctionTableWithDescriptor:v164];
        if ((UpdateVisibleFunctionTable((uint64_t)a1, v165, v161, v215) & 1) == 0)
        {
          if (a3)
          {
            GTUpdateShaderMakeError(1u, @"Internal: Could not update visiable function table for compute pipeline", 0, 0);
            *a3 = (id)objc_claimAutoreleasedReturnValue();
          }
          goto LABEL_205;
        }
        goto LABEL_178;
      }
LABEL_179:
      ++v160;
      int v138 = v221;
      if (v160 >= v221->nelts) {
        goto LABEL_180;
      }
    }
    long long v164 = MakeMTLVisibleFunctionTableDescriptor(*(void *)(v161 + 104));
    id v165 = [v163 newVisibleFunctionTableWithDescriptor:v164 stage:*(unsigned __int8 *)(v161 + 168)];
    if ((UpdateVisibleFunctionTable((uint64_t)a1, v165, v161, v215) & 1) == 0)
    {
      if (a3)
      {
        GTUpdateShaderMakeError(1u, @"Internal: Could not update visiable function table for render pipeline", 0, 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
LABEL_205:

      uint64_t v181 = 0;
      goto LABEL_210;
    }
LABEL_178:
    id v167 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v161 + 8)];
    [v212 setObject:v165 forKeyedSubscript:v167];

    goto LABEL_179;
  }
LABEL_180:
  v138->uint64_t nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)(*a1)[8], (unint64_t)a1[4], v138);
  *(void *)&long long v252 = 0;
  long long v250 = 0u;
  long long v251 = 0u;
  long long v248 = 0u;
  long long v249 = 0u;
  long long v247 = 0u;
  GTMTLIndirectResources_allResourcesByKey((uint64_t *)&v247, (_DWORD **)*a1, (unint64_t)a1[4], 1, p[0]);
  if (v138->nelts < 1)
  {
LABEL_189:
    id v176 = [v215 copy];
    long long v177 = *(void **)(a2 + 16);
    *(void *)(a2 + 16) = v176;

    id v178 = [v212 copy];
    long long v179 = *(void **)(a2 + 24);
    *(void *)(a2 + 24) = v178;

    id v180 = [v206 copy];
    long long v171 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = v180;
    uint64_t v181 = 1;
    goto LABEL_209;
  }
  uint64_t v168 = 0;
  while (1)
  {
    uint64_t v169 = *(void *)&v138->elts[8 * v168];
    unint64_t v170 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v169 + 128)];
    long long v171 = [v224 objectForKey:v170];

    if (v171)
    {
      long long v172 = MakeMTLIntersectionFunctionTableDescriptor(*(void *)(v169 + 104));
      id v173 = [v171 newIntersectionFunctionTableWithDescriptor:v172 stage:*(unsigned __int8 *)(v169 + 160)];
      if ((UpdateIntersectionFunctionTable((uint64_t)a1, v173, v169, v215, v212, (uint64_t *)&v247) & 1) == 0)
      {
        if (a3)
        {
          GTUpdateShaderMakeError(1u, @"Internal: Could not update intersection function table for render pipeline", 0, 0);
          *a3 = (id)objc_claimAutoreleasedReturnValue();
        }
        goto LABEL_208;
      }
      goto LABEL_187;
    }
    long long v174 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v169 + 120)];
    long long v171 = [v209 objectForKey:v174];

    if (v171) {
      break;
    }
LABEL_188:
    ++v168;
    int v138 = v221;
    if (v168 >= v221->nelts) {
      goto LABEL_189;
    }
  }
  long long v172 = MakeMTLIntersectionFunctionTableDescriptor(*(void *)(v169 + 104));
  id v173 = [v171 newIntersectionFunctionTableWithDescriptor:v172];
  if (UpdateIntersectionFunctionTable((uint64_t)a1, v173, v169, v215, v212, (uint64_t *)&v247))
  {
LABEL_187:
    long long v175 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v169 + 8)];
    [v206 setObject:v173 forKeyedSubscript:v175];

    goto LABEL_188;
  }
  if (a3)
  {
    GTUpdateShaderMakeError(1u, @"Internal: Could not update intersection function table for compute pipeline", 0, 0);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_208:

  uint64_t v181 = 0;
LABEL_209:

LABEL_210:
  apr_pool_destroy(p[0]);

LABEL_211:
LABEL_212:

  return v181;
}

void sub_31B4BC(_Unwind_Exception *a1)
{
}

void __destructor_8_s8_S_s48_s56_s64_s72_s80(uint64_t a1)
{
  __destructor_8_s0_s8_s16_s24(a1 + 48);
  int v2 = *(void **)(a1 + 80);
}

BOOL GetProgramUpdateObjectMapForPipelineObjects(uint64_t *a1, id *a2, void *a3, void *a4)
{
  id v34 = a3;
  id v6 = objc_alloc_init((Class)NSMutableDictionary);
  id v36 = objc_alloc_init((Class)NSMutableArray);
  if ((int)a1[1] >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v37 = a1[1];
    do
    {
      uint64_t v8 = *a1;
      uint64_t v9 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)(*a1 + 32 * v7), v34);
      unsigned __int8 v10 = [a2[9] objectForKeyedSubscript:v9];
      uint64_t v39 = v7;
      if (v10)
      {
        [v6 setObject:v10 forKeyedSubscript:v9];
        int v11 = 1;
      }
      else
      {
        int v11 = 0;
      }

      uint64_t v12 = 0;
      uint64_t v38 = v8;
      uint64_t v13 = *(uint64_t **)(v8 + 32 * v39 + 8);
      uint64_t v14 = v13[3];
      uint64_t v40 = v13[2];
      int v41 = v14;
      uint64_t v15 = v13[1];
      uint64_t v42 = *v13;
      int v43 = v15;
      uint64_t v17 = v13[6];
      uint64_t v16 = v13[7];
      uint64_t v44 = v17;
      int v45 = v16;
      do
      {
        id v18 = (uint64_t *)*(&v40 + 2 * v12);
        if (v18)
        {
          uint64_t v19 = *((unsigned int *)&v40 + 4 * v12 + 2);
          if ((int)v19 >= 1)
          {
            do
            {
              uint64_t v20 = *v18++;
              id v21 = +[NSNumber numberWithUnsignedLongLong:v20];
              id v22 = [a2[9] objectForKeyedSubscript:v21];
              if (v22)
              {
                [v6 setObject:v22 forKeyedSubscript:v21];
                ++v11;
              }

              --v19;
            }
            while (v19);
          }
        }
        ++v12;
      }
      while (v12 != 3);
      uint64_t v23 = v38 + 32 * v39;
      uint64_t v24 = *(uint64_t **)(v23 + 16);
      if (v24)
      {
        uint64_t v25 = *(void *)(v23 + 24);
        if ((int)v25 >= 1)
        {
          uint64_t v26 = v25;
          do
          {
            uint64_t v27 = *v24++;
            unint64_t v28 = +[NSNumber numberWithUnsignedLongLong:v27];
            uint64_t v29 = [a2[7] objectForKeyedSubscript:v28];
            if (v29) {
              [v6 setObject:v29 forKeyedSubscript:v28];
            }

            --v26;
          }
          while (v26);
        }
      }
      if (v11 && [a2[8] count])
      {
        unint64_t v30 = [a2[8] allValues];
        [v36 addObjectsFromArray:v30];
      }
      uint64_t v7 = v39 + 1;
    }
    while (v39 + 1 != v37);
  }
  if (v34) {
    void *v34 = [v6 copy];
  }
  if (a4) {
    *a4 = [v36 copy];
  }
  id v31 = [v6 count:v34];
  BOOL v32 = (char *)[v36 count] + (void)v31 != 0;

  return v32;
}

uint64_t UpdateVisibleFunctionTable(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v9);
  long long v27 = 0u;
  *(void *)&long long v28 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  LODWORD(v27) = 83;
  *((void *)&v28 + 1) = -1;
  WORD1(v33) = 2;
  long long v31 = 0xFFFFFFFFFFFFFFFFLL;
  unint64_t v39 = **(void **)(a3 + 104);
  uint64_t v38 = apr_palloc(newpool, 8 * v39);
  bzero(v38, 8 * v39);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v41 = *(void *)(a3 + 8);
  uint64_t v11 = *(void *)(*(void *)(*find_entry(v10, &v41, 8uLL, 0) + 32) + 32);
  if (v11)
  {
    unsigned int v12 = 0;
    while (1)
    {
      unsigned int v13 = atomic_load((unsigned int *)(v11 + 4));
      uint64_t v14 = v12 + (v13 >> 6) - 1;
      if ((int)v14 > 0) {
        break;
      }
      uint64_t v11 = *(void *)(v11 + 40);
      unsigned int v12 = v14;
      if (!v11)
      {
        unsigned int v12 = v14;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v12 = 0;
  }
  uint64_t v14 = 0;
LABEL_8:
  unint64_t v15 = v12 | (unint64_t)(v14 << 32);
LABEL_9:
  uint64_t v16 = v11 + 64;
  while (v11)
  {
    if ((*(unsigned char *)(v16 + ((uint64_t)(HIDWORD(v15) - (int)v15) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v17 = (void *)(v16 + ((uint64_t)(HIDWORD(v15) - (int)v15) << 6));
    if (*v17 >= *(void *)(a1 + 32)) {
      break;
    }
    GTMTLSMVisibleFunctionTableStateful_processTraceFuncWithMap((uint64_t)&v27, *(void *)(a1 + 24), (uint64_t)v17);
    unsigned int v18 = atomic_load((unsigned int *)(v11 + 4));
    int v19 = v15 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v15) + 1);
    unint64_t v15 = (v20 << 32) | v15;
    if (v20 == v19 - 1)
    {
      unint64_t v15 = (v20 << 32) | v20;
      uint64_t v11 = *(void *)(v11 + 40);
      goto LABEL_9;
    }
  }
  if (v39)
  {
    for (unint64_t i = 0; v39 > i; ++i)
    {
      uint64_t v22 = *((void *)v38 + i);
      uint64_t v23 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v22, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
      uint64_t v24 = [v8 objectForKeyedSubscript:v23];
      if (v24)
      {
      }
      else
      {
        uint64_t v24 = [*(id *)(a1 + 8) functionHandleForKey:v22];

        if (!v24)
        {
          uint64_t v25 = 0;
          goto LABEL_22;
        }
      }
      [v7 setFunction:v24 atIndex:i];
    }
  }
  uint64_t v25 = 1;
LABEL_22:
  apr_pool_destroy(newpool);

  return v25;
}

void sub_31BB5C(_Unwind_Exception *a1)
{
  apr_pool_destroy(*(apr_pool_t **)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t UpdateIntersectionFunctionTable(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t *a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = a5;
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v14);
  bzero(v41, 0x3A0uLL);
  v41[0] = 60;
  __int16 v44 = 2;
  uint64_t v42 = -1;
  uint64_t v43 = -1;
  unint64_t v46 = *(unsigned int *)(*(void *)(a3 + 104) + 8);
  size_t v15 = 16 * v46;
  int v45 = (char *)apr_palloc(newpool, 16 * v46);
  bzero(v45, v15);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v49 = *(void *)(a3 + 8);
  uint64_t v17 = *(void *)(*(void *)(*find_entry(v16, &v49, 8uLL, 0) + 32) + 32);
  if (v17)
  {
    unsigned int v18 = 0;
    while (1)
    {
      unsigned int v19 = atomic_load((unsigned int *)(v17 + 4));
      uint64_t v20 = v18 + (v19 >> 6) - 1;
      if ((int)v20 > 0) {
        break;
      }
      uint64_t v17 = *(void *)(v17 + 40);
      unsigned int v18 = v20;
      if (!v17)
      {
        unsigned int v18 = v20;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
  uint64_t v20 = 0;
LABEL_8:
  unint64_t v21 = v18 | (unint64_t)(v20 << 32);
LABEL_9:
  uint64_t v22 = v17 + 64;
  while (v17)
  {
    if ((*(unsigned char *)(v22 + ((uint64_t)(HIDWORD(v21) - (int)v21) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v23 = (void *)(v22 + ((uint64_t)(HIDWORD(v21) - (int)v21) << 6));
    if (*v23 >= *(void *)(a1 + 32)) {
      break;
    }
    GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)v41, *(void *)(a1 + 24), (uint64_t)v23, a6);
    unsigned int v24 = atomic_load((unsigned int *)(v17 + 4));
    int v25 = v21 + (v24 >> 6);
    uint64_t v26 = (HIDWORD(v21) + 1);
    unint64_t v21 = (v26 << 32) | v21;
    if (v26 == v25 - 1)
    {
      unint64_t v21 = (v26 << 32) | v26;
      uint64_t v17 = *(void *)(v17 + 40);
      goto LABEL_9;
    }
  }
  if (v46)
  {
    uint64_t v27 = 0;
    for (unint64_t i = 0; i < v46; ++i)
    {
      int v29 = *(_DWORD *)&v45[v27];
      switch(v29)
      {
        case 3:
          [v11 setOpaqueCurveIntersectionFunctionWithSignature:*(void *)&v45[v27 + 8] atIndex:i];
          break;
        case 2:
          [v11 setOpaqueTriangleIntersectionFunctionWithSignature:*(void *)&v45[v27 + 8] atIndex:i];
          break;
        case 1:
          uint64_t v30 = *(void *)&v45[v27 + 8];
          if (v30)
          {
            long long v31 = +[NSNumber numberWithUnsignedLongLong:*(void *)&v45[v27 + 8]];
            long long v32 = [v12 objectForKeyedSubscript:v31];
            if (v32)
            {
            }
            else
            {
              long long v32 = [*(id *)(a1 + 8) functionHandleForKey:v30];

              if (!v32)
              {
LABEL_41:
                uint64_t v39 = 0;
                goto LABEL_42;
              }
            }
            [v11 setFunction:v32 atIndex:i];
          }
          break;
      }
      v27 += 16;
    }
  }
  uint64_t v33 = 0;
  long long v34 = &v47;
  do
  {
    int v35 = *((_DWORD *)v34 - 4);
    if (v35 == 2)
    {
      uint64_t v37 = *(v34 - 1);
      uint64_t v38 = +[NSNumber numberWithUnsignedLongLong:v37];
      long long v36 = [v13 objectForKeyedSubscript:v38];
      if (v36)
      {
      }
      else
      {
        long long v36 = [*(id *)(a1 + 8) visibleFunctionTableForKey:v37];

        if (!v36) {
          goto LABEL_41;
        }
      }
      [v11 setVisibleFunctionTable:v36 atBufferIndex:v33];
      goto LABEL_38;
    }
    if (v35 == 1 && *(v34 - 1))
    {
      long long v36 = [*(id *)(a1 + 8) bufferForKey:];
      if (!v36) {
        goto LABEL_41;
      }
      [v11 setBuffer:v36 offset:*v34 atIndex:v33];
LABEL_38:
    }
    ++v33;
    v34 += 3;
  }
  while (v33 != 31);
  uint64_t v39 = 1;
LABEL_42:
  apr_pool_destroy(newpool);

  return v39;
}

void sub_31BF08(_Unwind_Exception *a1)
{
  apr_pool_destroy(*(apr_pool_t **)(v1 - 104));
  _Unwind_Resume(a1);
}

id _GTMTLSMLibraryDisplayLabel(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned char **)(a1 + 112);
  if (v4 && *v4)
  {
    +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v5 = @"MTLLibrary";
  }
  uint64_t v8 = *(void *)(a1 + 8);
  id v6 = [(__CFString *)v5 stringByAppendingFormat:@" 0x%llx", *(void *)(*(void *)(*find_entry(a2, &v8, 8uLL, 0) + 32) + 8)];

  return v6;
}

uint64_t GTResourceTrackerGetResourceType(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  entry = find_entry(a2, &v6, 8uLL, 0);
  if (!*entry) {
    return 0;
  }
  uint64_t v3 = *(void *)(*entry + 32);
  if (!v3) {
    return 0;
  }
  int v4 = *(_DWORD *)(*(void *)(v3 + 32) + 72);

  return GetFuncEnumConstructorType(v4);
}

uint64_t GTResourceTrackerUsingResource(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a3;
  if (a3)
  {
    uint64_t v8 = (apr_pool_t **)result;
    BOOL result = (uint64_t)find_entry(result, &v17, 8uLL, 0);
    if (!*(void *)result || !*(void *)(*(void *)result + 32))
    {
      uint64_t v9 = apr_palloc(*v8, 0x10uLL);
      *(void *)uint64_t v9 = v17;
      apr_hash_set((apr_hash_t *)v8, v9, 8, v9);
      *(void *)&long long v18 = v17;
      uint64_t v10 = *find_entry(a4, &v18, 8uLL, 0);
      if (v10 && (uint64_t v11 = *(void *)(v10 + 32)) != 0)
      {
        uint64_t v12 = *(void *)(v11 + 32);
        if (v12) {
          uint64_t v13 = v12 + 64;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      BOOL result = GetFuncEnumConstructorType(*(_DWORD *)(v13 + 8));
      v9[2] = result;
      if (a2 != 16)
      {
        if (a2 != 80)
        {
          if (a2 != 22) {
            return result;
          }
          long long v18 = 0u;
          uint64_t v19 = 0;
          long long v25 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          LODWORD(v18) = 22;
          uint64_t v20 = -1;
          WORD1(v25) = 2;
          long long v23 = 0xFFFFFFFFFFFFFFFFLL;
          long long v26 = 0xFFFFFFFFFFFFFFFFLL;
          GTMTLSMBuffer_processTraceFuncWithMap((char *)&v18, a5, (uint64_t *)v13);
          goto LABEL_14;
        }
        long long v18 = 0u;
        uint64_t v19 = 0;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        LODWORD(v18) = 80;
        uint64_t v20 = -1;
        WORD1(v25) = 2;
        long long v23 = 0xFFFFFFFFFFFFFFFFLL;
        uint64_t v32 = 0xFFFFFFFFLL;
        GTMTLSMTexture_processTraceFuncWithMap((char *)&v18, a5, (uint64_t *)v13);
        uint64_t v14 = v28;
        if ((void)v28)
        {
          size_t v15 = v8;
          uint64_t v16 = 80;
          return GTResourceTrackerUsingResource(v15, v16, v14, a4, a5);
        }
        uint64_t v14 = *((void *)&v27 + 1);
        if (!*((void *)&v27 + 1))
        {
LABEL_14:
          uint64_t v14 = v22;
          size_t v15 = v8;
          uint64_t v16 = 50;
          return GTResourceTrackerUsingResource(v15, v16, v14, a4, a5);
        }
LABEL_22:
        size_t v15 = v8;
        uint64_t v16 = 22;
        return GTResourceTrackerUsingResource(v15, v16, v14, a4, a5);
      }
      long long v18 = 0u;
      uint64_t v19 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      LODWORD(v18) = 16;
      uint64_t v20 = -1;
      WORD1(v25) = 2;
      long long v23 = 0xFFFFFFFFFFFFFFFFLL;
      BOOL result = (uint64_t)GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)&v18, a5, (uint64_t *)v13);
      if ((void)v22) {
        BOOL result = GTResourceTrackerUsingResource(v8, 50, v22, a4, a5);
      }
      uint64_t v14 = v28;
      if ((void)v28) {
        goto LABEL_22;
      }
    }
  }
  return result;
}

void *tracker_resource_get(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = a3;
  GTResourceTrackerUsingResource(a1[2], a2, a3, *a1, a1[1]);
  uint64_t ParentResource = GetParentResource(*a1, v5, a1[1]);
  if (ParentResource != v5)
  {
    find_entry(*a1, &ParentResource, 8uLL, 0);
    uint64_t v5 = ParentResource;
    uint64_t v23 = ParentResource;
  }
  if (!v5) {
    return 0;
  }
  id v7 = (apr_hash_t *)a1[4];
  entry = find_entry((uint64_t)v7, &v23, 8uLL, 0);
  if (!*entry || (uint64_t v9 = *(void **)(*entry + 32)) == 0)
  {
    uint64_t v10 = *(apr_pool_t **)v7;
    uint64_t v11 = *a1;
    uint64_t v12 = a1[1];
    uint64_t v24 = v23;
    uint64_t v13 = *find_entry(v11, &v24, 8uLL, 0);
    if (v13)
    {
      uint64_t v14 = *(void **)(v13 + 32);
      if (v14)
      {
        uint64_t v15 = v14[4];
        if (v15)
        {
          if ((*(unsigned char *)(v15 + 79) & 8) != 0)
          {
            uint64_t v16 = v15 + 64;
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v16 = 0;
LABEL_14:
    uint64_t v17 = apr_palloc(v10, 0x38uLL);
    uint64_t v9 = v17;
    if (v17)
    {
      *((void *)v17 + 6) = 0;
      v17[1] = 0u;
      _OWORD v17[2] = 0u;
      _OWORD *v17 = 0u;
    }
    *(void *)uint64_t v17 = v14[1];
    *((void *)v17 + 1) = v24;
    int FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v16 + 8));
    v9[3] = -1;
    *((_DWORD *)v9 + 10) = FuncEnumConstructorType;
    v9[2] = a4;
    void v9[4] = -1;
    if (FuncEnumConstructorType > 59)
    {
      if (FuncEnumConstructorType != 60)
      {
        if (FuncEnumConstructorType != 80)
        {
          if (FuncEnumConstructorType != 83) {
            goto LABEL_36;
          }
          goto LABEL_26;
        }
        long long v25 = 0u;
        uint64_t v26 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v29 = 0u;
        long long v28 = 0u;
        LODWORD(v25) = 80;
        uint64_t v27 = -1;
        WORD1(v32) = 2;
        long long v30 = 0xFFFFFFFFFFFFFFFFLL;
        uint64_t v39 = 0xFFFFFFFFLL;
        GTMTLSMTexture_processTraceFuncWithMap((char *)&v25, v12, (uint64_t *)v16);
        if (*((void *)&v32 + 1) && (*(_WORD *)(*((void *)&v32 + 1) + 36) & 0xF0) == 0x30) {
          v9[3] = 0x7FFFFFFFFFFFFFFFLL;
        }
        if (IsFuncEnumSharedResourceConstructor(*(_DWORD *)(v16 + 8))) {
          LOBYTE(v20) = (*(unsigned char *)(v16 + 15) & 2) == 0;
        }
        else {
          LOBYTE(v20) = 0;
        }
LABEL_35:
        *((unsigned char *)v9 + 48) = v20;
        goto LABEL_36;
      }
      *uint64_t v9 = v14[2];
LABEL_28:
      LOBYTE(v20) = 1;
      goto LABEL_35;
    }
    if (FuncEnumConstructorType == 16)
    {
LABEL_26:
      *uint64_t v9 = v14[2];
      goto LABEL_36;
    }
    if (FuncEnumConstructorType == 22)
    {
      long long v25 = 0u;
      uint64_t v26 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v29 = 0u;
      long long v28 = 0u;
      LODWORD(v25) = 22;
      uint64_t v27 = -1;
      WORD1(v32) = 2;
      long long v30 = 0xFFFFFFFFFFFFFFFFLL;
      *(void *)&long long v33 = -1;
      GTMTLSMBuffer_processTraceFuncWithMap((char *)&v25, v12, (uint64_t *)v16);
      if (IsFuncEnumSharedResourceConstructor(*(_DWORD *)(v16 + 8))) {
        goto LABEL_28;
      }
      if ((v32 & 0xE0) == 0)
      {
        unsigned int v19 = atomic_load(v14 + 7);
        int v20 = (v19 >> 1) & 1;
        goto LABEL_35;
      }
    }
LABEL_36:
    apr_hash_set(v7, v9 + 1, 8, v9);
  }
  return v9;
}

uint64_t GetParentResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a2;
  if (!a2) {
    return v12;
  }
  uint64_t v5 = *find_entry(a1, &v12, 8uLL, 0);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 32)) != 0)
  {
    uint64_t v7 = *(void *)(v6 + 32);
    uint64_t v8 = v7 ? v7 + 64 : 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  int v9 = *(_DWORD *)(v8 + 8);
  if (IsFuncEnumSharedResourceConstructor(v9)) {
    return v12;
  }
  if (GetFuncEnumConstructorType(v9) != 80) {
    return v12;
  }
  long long v13 = 0u;
  uint64_t v14 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  LODWORD(v13) = 80;
  uint64_t v15 = -1;
  WORD1(v20) = 2;
  long long v18 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v27 = 0xFFFFFFFFLL;
  GTMTLSMTexture_processTraceFuncWithMap((char *)&v13, a3, (uint64_t *)v8);
  uint64_t v10 = v23;
  if ((void)v23) {
    return GetParentResource(a1, v10, a3);
  }
  uint64_t v10 = *((void *)&v22 + 1);
  if (*((void *)&v22 + 1)) {
    return GetParentResource(a1, v10, a3);
  }
  else {
    return v12;
  }
}

void *GTResourceTrackerResourceRead(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = tracker_resource_get(a1, a2, a3, a4);
  int v9 = v8;
  if (v8)
  {
    uint64_t v10 = v8[3];
    if (v10 < 0) {
      uint64_t v10 = a4;
    }
    v8[3] = v10;
    if (*((unsigned char *)v8 + 48))
    {
      uint64_t v11 = tracker_resource_get(a1, a2, a3, a4);
      if (v11) {
        v11[4] = a4;
      }
    }
  }
  return v9;
}

uint64_t *GTResourceTrackerResourceUsage(uint64_t *result, int a2, uint64_t a3, uint64_t a4, char a5)
{
  int v9 = result;
  if ((a5 & 2) != 0)
  {
    BOOL result = tracker_resource_get(result, a2, a3, a4);
    if (result) {
      result[4] = a4;
    }
  }
  if ((a5 & 5) != 0)
  {
    return GTResourceTrackerResourceRead(v9, a2, a3, a4);
  }
  return result;
}

uint64_t GTResourceTrackerUsingResourceArray(uint64_t result, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    uint64_t v8 = a4;
    uint64_t v11 = result;
    do
    {
      uint64_t v12 = *a3;
      if (*a3)
      {
        if (a2)
        {
          int ResourceType = a2;
        }
        else
        {
          int ResourceType = GTResourceTrackerGetResourceType(*a3, a5);
          uint64_t v12 = *a3;
        }
        BOOL result = GTResourceTrackerUsingResource(v11, ResourceType, v12, a5, a6);
      }
      ++a3;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t *GTResourceTrackerResourceReadMTLArray(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v8 = *v3++;
      uint64_t v7 = v8;
      if (v8) {
        BOOL result = GTResourceTrackerResourceRead(v6, 16, v7, a3);
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *GTResourceTrackerResourceWriteArray(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = result;
    do
    {
      uint64_t v9 = *a2++;
      uint64_t v8 = v9;
      if (v9)
      {
        BOOL result = tracker_resource_get(v7, 80, v8, a4);
        if (result) {
          result[4] = a4;
        }
      }
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t *GTResourceTrackerResourceUsageArray(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a3)
  {
    uint64_t v7 = a3;
    uint64_t v9 = result;
    do
    {
      BOOL result = (uint64_t *)*a2;
      if (*a2)
      {
        int ResourceType = GTResourceTrackerGetResourceType((uint64_t)result, *v9);
        BOOL result = GTResourceTrackerResourceUsage(v9, ResourceType, *a2, a4, a5);
      }
      ++a2;
      --v7;
    }
    while (v7);
  }
  return result;
}

void GTResourceTrackerUsingResourceHeap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  if (a2)
  {
    GTResourceTrackerUsingResource(a1[2], 50, a2, *a1, a1[1]);
    entry = find_entry(a1[3], &v7, 8uLL, 0);
    if (!*entry || !*(void *)(*entry + 32))
    {
      uint64_t v6 = apr_palloc(*(apr_pool_t **)a1[3], 0x10uLL);
      void *v6 = v7;
      v6[1] = a3;
      apr_hash_set((apr_hash_t *)a1[3], v6, 8, v6);
    }
  }
}

uint64_t IsHeapResourceMadeAliasable(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v4 = *(void *)(*(void *)(*find_entry(a1, &v19, 8uLL, 0) + 32) + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_8:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_9:
  uint64_t v9 = v4 + 64;
  while (v4)
  {
    int v10 = HIDWORD(v8) - v8;
    if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
      break;
    }
    unint64_t v11 = *(void *)(v9 + ((uint64_t)v10 << 6));
    if (v11 > a3) {
      break;
    }
    int v12 = *(_DWORD *)(v9 + ((uint64_t)v10 << 6) + 8);
    BOOL v14 = v12 == -16122 || v12 == -16114 || v12 == -15651;
    if (v14 || (IsFuncEnumDestructor(v12) & 1) != 0) {
      return v11;
    }
    unsigned int v15 = atomic_load((unsigned int *)(v4 + 4));
    int v16 = v8 + (v15 >> 6);
    uint64_t v17 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v17 << 32) | v8;
    if (v17 == v16 - 1)
    {
      unint64_t v8 = (v17 << 32) | v17;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_9;
    }
  }
  return -1;
}

void *GTResourceTrackerMake(uint64_t a1, uint64_t a2, apr_pool_t *p)
{
  unsigned int v6 = apr_palloc(p, 0x30uLL);
  void *v6 = a1;
  v6[1] = a2;
  v6[2] = apr_hash_make(p);
  v6[3] = apr_hash_make(p);
  v6[4] = apr_hash_make(p);
  v6[5] = apr_hash_make(p);
  return v6;
}

void GTResourceTrackerProcessFunction()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t *)v0;
  int v4 = *(_DWORD *)(v1 + 8);
  if (IsFuncEnumCreateCommandEncoder(v4))
  {
    bzero(&v78, 0x2B90uLL);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v78, (uint64_t *)v2, v3[1]);
    if (v78 <= 64)
    {
      if (v78 != 17 && v78 != 21)
      {
        if (v78 != 28) {
          return;
        }
        goto LABEL_38;
      }
    }
    else
    {
      if (v78 <= 73)
      {
        if (v78 != 65)
        {
          if (v78 != 70) {
            return;
          }
          uint64_t v5 = *v3;
          *(void *)&long long v88 = v79;
          uint64_t v6 = *find_entry(v5, &v88, 8uLL, 0);
          if (v6
            && (uint64_t v7 = *(void *)(v6 + 32)) != 0
            && (uint64_t v8 = *(void *)(v7 + 32)) != 0
            && (*(unsigned char *)(v8 + 79) & 8) != 0)
          {
            uint64_t v9 = v8 + 64;
          }
          else
          {
            uint64_t v9 = 0;
          }
          bzero(&v88, 0x2B90uLL);
          GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v88, (uint64_t *)v9, v3[1]);
          bzero(&v82, 0x2B90uLL);
          uint64_t v81 = 0;
          uint64_t v80 = 0;
          if (*(_DWORD *)(v9 + 8) != -16286)
          {
            uint64_t v51 = (uint64_t *)*((void *)&v92 + 1);
            uint64_t v52 = renderCommandEncoder_processStreamWithDescriptor(v3, *((uint64_t *)&v92 + 1), (uint64_t)&v88);
            uint64_t v80 = v100;
            LOWORD(v81) = v100[607];
            goto LABEL_113;
          }
          uint64_t v10 = *v3;
          v101[0] = *((void *)&v91 + 1);
          uint64_t v11 = *find_entry(v10, v101, 8uLL, 0);
          if (v11)
          {
            uint64_t v12 = *(void *)(v11 + 32);
            if (v12)
            {
              uint64_t v13 = *(void *)(v12 + 32);
              if (v13)
              {
                if ((*(unsigned char *)(v13 + 79) & 8) != 0)
                {
                  BOOL v14 = (uint64_t *)(v13 + 64);
LABEL_97:
                  GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v82, v14, v3[1]);
                  uint64_t v68 = *(void *)(v12 + 32);
                  if (v68)
                  {
                    unsigned int v69 = 0;
                    while (1)
                    {
                      unsigned int v70 = atomic_load((unsigned int *)(v68 + 4));
                      uint64_t v71 = v69 + (v70 >> 6) - 1;
                      if ((int)v71 > 1) {
                        break;
                      }
                      uint64_t v68 = *(void *)(v68 + 40);
                      unsigned int v69 = v71;
                      if (!v68)
                      {
                        unsigned int v69 = v71;
                        goto LABEL_104;
                      }
                    }
                    uint64_t v71 = 1;
                  }
                  else
                  {
                    unsigned int v69 = 0;
                    uint64_t v71 = 0;
                  }
LABEL_104:
                  unint64_t v72 = v69 | (unint64_t)(v71 << 32);
LABEL_105:
                  uint64_t v73 = v68 + 64;
                  while (v68 && (*(unsigned char *)(v73 + ((uint64_t)(HIDWORD(v72) - (int)v72) << 6) + 15) & 8) != 0)
                  {
                    uint64_t v74 = v73 + ((uint64_t)(HIDWORD(v72) - (int)v72) << 6);
                    if (!IsFuncEnumCreateCommandEncoder(*(_DWORD *)(v74 + 8))) {
                      GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v82, (uint64_t *)v74, v3[1]);
                    }
                    unsigned int v75 = atomic_load((unsigned int *)(v68 + 4));
                    int v76 = v72 + (v75 >> 6);
                    uint64_t v77 = (HIDWORD(v72) + 1);
                    unint64_t v72 = (v77 << 32) | v72;
                    if (v77 == v76 - 1)
                    {
                      unint64_t v72 = (v77 << 32) | v77;
                      uint64_t v68 = *(void *)(v68 + 40);
                      goto LABEL_105;
                    }
                  }
                  uint64_t v51 = v86;
                  uint64_t v80 = v87;
                  LOWORD(v81) = v87[64];
                  uint64_t v52 = renderCommandEncoder_processStreamWithDescriptor(v3, (uint64_t)v86, (uint64_t)&v88);
LABEL_113:
                  RenderEncoderWithDescriptor(v3, v51);
                  if (v88 == 70)
                  {
                    __n128 v65 = (long long **)&v80;
                    id v66 = v3;
                    uint64_t v67 = (uint64_t)v51;
                    uint64_t v64 = v52;
LABEL_115:
                    RenderEncoderEndEncoding(v66, v67, (uint64_t)v65, v64);
                  }
                  return;
                }
              }
            }
          }
          else
          {
            uint64_t v12 = 0;
          }
          BOOL v14 = 0;
          goto LABEL_97;
        }
        uint64_t v32 = *v3;
        *(void *)&long long v88 = v79;
        uint64_t v33 = *find_entry(v32, &v88, 8uLL, 0);
        if (v33)
        {
          uint64_t v34 = *(void *)(v33 + 32);
          bzero(&v88, 0x2B90uLL);
          if (v34)
          {
            uint64_t v35 = *(void *)(v34 + 32);
            if (v35)
            {
              if ((*(unsigned char *)(v35 + 79) & 8) != 0)
              {
                long long v36 = (uint64_t *)(v35 + 64);
LABEL_77:
                GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v88, v36, v3[1]);
                uint64_t v53 = *((void *)&v92 + 1);
                RenderEncoderWithDescriptor(v3, *((uint64_t **)&v92 + 1));
                uint64_t v54 = *(void *)(v34 + 32);
                if (v54)
                {
                  unsigned int v55 = 0;
                  while (1)
                  {
                    unsigned int v56 = atomic_load((unsigned int *)(v54 + 4));
                    uint64_t v57 = v55 + (v56 >> 6) - 1;
                    if ((int)v57 > 1) {
                      break;
                    }
                    uint64_t v54 = *(void *)(v54 + 40);
                    unsigned int v55 = v57;
                    if (!v54)
                    {
                      unsigned int v55 = v57;
                      goto LABEL_84;
                    }
                  }
                  uint64_t v57 = 1;
                }
                else
                {
                  unsigned int v55 = 0;
                  uint64_t v57 = 0;
                }
LABEL_84:
                unint64_t v58 = v55 | (unint64_t)(v57 << 32);
LABEL_85:
                uint64_t v59 = v54 + 64;
                while (v54 && (*(unsigned char *)(v59 + ((uint64_t)(HIDWORD(v58) - (int)v58) << 6) + 15) & 8) != 0)
                {
                  uint64_t v60 = v59 + ((uint64_t)(HIDWORD(v58) - (int)v58) << 6);
                  if (IsFuncEnumEndEncoding(*(_DWORD *)(v60 + 8)))
                  {
                    uint64_t v82 = &v93;
                    __int16 v83 = v99;
                    int v84 = 0;
                    __int16 v85 = 0;
                    uint64_t v64 = *(void *)v60;
                    __n128 v65 = &v82;
                    id v66 = v3;
                    uint64_t v67 = v53;
                    goto LABEL_115;
                  }
                  GTResourceTrackerProcessResourceUse(v3, v60, *(void *)v60);
                  if (IsFuncEnumCreateCommandEncoder(*(_DWORD *)(v60 + 8)))
                  {
                    bzero(&v82, 0x2B90uLL);
                    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v82, (uint64_t *)v60, v3[1]);
                    renderCommandEncoder_processStreamWithDescriptor(v3, v53, (uint64_t)&v82);
                  }
                  else
                  {
                    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v88, (uint64_t *)v60, v3[1]);
                  }
                  unsigned int v61 = atomic_load((unsigned int *)(v54 + 4));
                  int v62 = v58 + (v61 >> 6);
                  uint64_t v63 = (HIDWORD(v58) + 1);
                  unint64_t v58 = (v63 << 32) | v58;
                  if (v63 == v62 - 1)
                  {
                    unint64_t v58 = (v63 << 32) | v63;
                    uint64_t v54 = *(void *)(v54 + 40);
                    goto LABEL_85;
                  }
                }
                return;
              }
            }
          }
        }
        else
        {
          bzero(&v88, 0x2B90uLL);
          uint64_t v34 = 0;
        }
        long long v36 = 0;
        goto LABEL_77;
      }
      if (v78 != 74)
      {
        if (v78 != 82) {
          return;
        }
LABEL_38:
        computeCommandEncoder_processStream();
        return;
      }
    }
    defaultCommandEncoder_processStream();
    return;
  }
  if (v4 == -20457 || v4 == -20474)
  {
    int v16 = GTTraceFunc_targetContext(v2, v3[1]);
    int FuncEnumReceiverType = GetFuncEnumReceiverType(*(_DWORD *)(v2 + 8));
    if (FuncEnumReceiverType == 40)
    {
      unint64_t v18 = *(void *)v2;
      uint64_t v26 = *v3;
      *(void *)&long long v88 = v16;
      uint64_t v27 = *(void *)(*find_entry(v26, &v88, 8uLL, 0) + 32);
      long long v88 = 0u;
      uint64_t v89 = 0;
      uint64_t v98 = 0;
      long long v97 = 0u;
      long long v96 = 0u;
      long long v95 = 0u;
      long long v94 = 0u;
      long long v93 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      LODWORD(v88) = 40;
      uint64_t v90 = -1;
      uint64_t v28 = *(void *)(v27 + 32);
      if (v28)
      {
        unsigned int v29 = 0;
        while (1)
        {
          unsigned int v30 = atomic_load((unsigned int *)(v28 + 4));
          uint64_t v31 = v29 + (v30 >> 6) - 1;
          if ((int)v31 > 0) {
            break;
          }
          uint64_t v28 = *(void *)(v28 + 40);
          unsigned int v29 = v31;
          if (!v28)
          {
            unsigned int v29 = v31;
            goto LABEL_62;
          }
        }
      }
      else
      {
        unsigned int v29 = 0;
      }
      uint64_t v31 = 0;
LABEL_62:
      unint64_t v44 = v29 | (unint64_t)(v31 << 32);
LABEL_63:
      uint64_t v45 = v28 + 64;
      while (v28)
      {
        if ((*(unsigned char *)(v45 + ((uint64_t)(HIDWORD(v44) - (int)v44) << 6) + 15) & 8) == 0) {
          break;
        }
        unint64_t v46 = (uint64_t *)(v45 + ((uint64_t)(HIDWORD(v44) - (int)v44) << 6));
        if (*v46 > v18) {
          break;
        }
        GTMTLFXSMTemporalScaler_processTraceFuncWithMap((uint64_t)&v88, v3[1], v46);
        unsigned int v47 = atomic_load((unsigned int *)(v28 + 4));
        int v48 = v44 + (v47 >> 6);
        uint64_t v49 = (HIDWORD(v44) + 1);
        unint64_t v44 = (v49 << 32) | v44;
        if (v49 == v48 - 1)
        {
          unint64_t v44 = (v49 << 32) | v49;
          uint64_t v28 = *(void *)(v28 + 40);
          goto LABEL_63;
        }
      }
      GTResourceTrackerUsingResource(v3[2], 40, (uint64_t)v16, *v3, v3[1]);
      GTResourceTrackerResourceRead(v3, 80, v93, v18);
      GTResourceTrackerResourceRead(v3, 80, *((uint64_t *)&v93 + 1), v18);
      GTResourceTrackerResourceRead(v3, 80, v94, v18);
      GTResourceTrackerResourceRead(v3, 80, *((uint64_t *)&v94 + 1), v18);
      uint64_t v43 = v95;
    }
    else
    {
      if (FuncEnumReceiverType != 39) {
        return;
      }
      unint64_t v18 = *(void *)v2;
      uint64_t v19 = *v3;
      *(void *)&long long v88 = v16;
      uint64_t v20 = *(void *)(*find_entry(v19, &v88, 8uLL, 0) + 32);
      long long v88 = 0u;
      uint64_t v89 = 0;
      long long v94 = 0u;
      long long v93 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      LODWORD(v88) = 39;
      uint64_t v90 = -1;
      uint64_t v21 = *(void *)(v20 + 32);
      if (v21)
      {
        unsigned int v22 = 0;
        while (1)
        {
          unsigned int v23 = atomic_load((unsigned int *)(v21 + 4));
          uint64_t v24 = v22 + (v23 >> 6) - 1;
          if ((int)v24 > 0) {
            break;
          }
          uint64_t v21 = *(void *)(v21 + 40);
          unsigned int v22 = v24;
          if (!v21)
          {
            unsigned int v22 = v24;
            goto LABEL_52;
          }
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      uint64_t v24 = 0;
LABEL_52:
      unint64_t v37 = v22 | (unint64_t)(v24 << 32);
LABEL_53:
      uint64_t v38 = v21 + 64;
      while (v21)
      {
        if ((*(unsigned char *)(v38 + ((uint64_t)(HIDWORD(v37) - (int)v37) << 6) + 15) & 8) == 0) {
          break;
        }
        uint64_t v39 = (uint64_t *)(v38 + ((uint64_t)(HIDWORD(v37) - (int)v37) << 6));
        if (*v39 > v18) {
          break;
        }
        GTMTLFXSMSpatialScaler_processTraceFuncWithMap((char *)&v88, v3[1], v39);
        unsigned int v40 = atomic_load((unsigned int *)(v21 + 4));
        int v41 = v37 + (v40 >> 6);
        uint64_t v42 = (HIDWORD(v37) + 1);
        unint64_t v37 = (v42 << 32) | v37;
        if (v42 == v41 - 1)
        {
          unint64_t v37 = (v42 << 32) | v42;
          uint64_t v21 = *(void *)(v21 + 40);
          goto LABEL_53;
        }
      }
      GTResourceTrackerUsingResource(v3[2], 39, (uint64_t)v16, *v3, v3[1]);
      GTResourceTrackerResourceRead(v3, 80, v93, v18);
      uint64_t v43 = *((void *)&v93 + 1);
    }
    uint64_t v50 = tracker_resource_get(v3, 80, v43, v18);
    if (v50) {
      v50[4] = v18;
    }
    GTResourceTrackerUsingResource(v3[2], 41, *((uint64_t *)&v92 + 1), *v3, v3[1]);
  }
  else
  {
    uint64_t v25 = *(void *)v2;
    GTResourceTrackerProcessResourceUse(v3, v2, v25);
  }
}

void defaultCommandEncoder_processStream()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t *)v0;
  bzero(v24, 0x2B90uLL);
  uint64_t v4 = *v3;
  uint64_t v26 = v2;
  uint64_t v5 = *(void *)(*(void *)(*find_entry(v4, &v26, 8uLL, 0) + 32) + 32);
  if (v5)
  {
    unsigned int v6 = 0;
    while (1)
    {
      unsigned int v7 = atomic_load((unsigned int *)(v5 + 4));
      uint64_t v8 = v6 + (v7 >> 6) - 1;
      if ((int)v8 > 0) {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 40);
      unsigned int v6 = v8;
      if (!v5)
      {
        unsigned int v6 = v8;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v8 = 0;
LABEL_8:
  unint64_t v9 = v6 | (unint64_t)(v8 << 32);
LABEL_9:
  uint64_t v10 = v5 + 64;
  while (v5 && (*(unsigned char *)(v10 + ((uint64_t)(HIDWORD(v9) - (int)v9) << 6) + 15) & 8) != 0)
  {
    uint64_t v11 = (uint64_t *)(v10 + ((uint64_t)(HIDWORD(v9) - (int)v9) << 6));
    GTResourceTrackerProcessResourceUse(v3, (uint64_t)v11, *v11);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v24, v11, v3[1]);
    unsigned int v12 = atomic_load((unsigned int *)(v5 + 4));
    int v13 = v9 + (v12 >> 6);
    uint64_t v14 = (HIDWORD(v9) + 1);
    unint64_t v9 = (v14 << 32) | v9;
    if (v14 == v13 - 1)
    {
      unint64_t v9 = (v14 << 32) | v14;
      uint64_t v5 = *(void *)(v5 + 40);
      goto LABEL_9;
    }
  }
  switch(v24[0])
  {
    case 0x11:
      uint64_t v18 = v25;
      if (v25)
      {
        for (uint64_t i = 8; i != 104; i += 24)
        {
          uint64_t v20 = *(void *)(v18 + i);
          if (v20) {
            GTResourceTrackerUsingResource(v3[2], 31, v20, *v3, v3[1]);
          }
        }
      }
      break;
    case 0x15:
      uint64_t v21 = v25;
      if (v25)
      {
        for (uint64_t j = 8; j != 104; j += 24)
        {
          uint64_t v23 = *(void *)(v21 + j);
          if (v23) {
            GTResourceTrackerUsingResource(v3[2], 31, v23, *v3, v3[1]);
          }
        }
      }
      break;
    case 0x4A:
      uint64_t v15 = v25;
      if (v25)
      {
        for (uint64_t k = 8; k != 104; k += 24)
        {
          uint64_t v17 = *(void *)(v15 + k);
          if (v17) {
            GTResourceTrackerUsingResource(v3[2], 31, v17, *v3, v3[1]);
          }
        }
      }
      break;
  }
}

uint64_t computeCommandEncoder_processStream()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t *)v0;
  bzero(v19, 0x2B90uLL);
  uint64_t v4 = *v3;
  uint64_t v21 = v2;
  uint64_t result = (uint64_t)find_entry(v4, &v21, 8uLL, 0);
  uint64_t v6 = *(void *)(*(void *)(*(void *)result + 32) + 32);
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      if ((int)v9 > 0) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v9 = 0;
LABEL_8:
  unint64_t v10 = v7 | (unint64_t)(v9 << 32);
LABEL_9:
  uint64_t v11 = v6 + 64;
  while (v6 && (*(unsigned char *)(v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6) + 15) & 8) != 0)
  {
    uint64_t v12 = v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6);
    GTResourceTrackerProcessResourceUse(v3, v12, *(void *)v12);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v19, (uint64_t *)v12, v3[1]);
    uint64_t result = (uint64_t)ResourceTracker_processCommandEncoder(v3, *(_DWORD *)(v12 + 8), (uint64_t)v19, *(void *)v12);
    unsigned int v13 = atomic_load((unsigned int *)(v6 + 4));
    int v14 = v10 + (v13 >> 6);
    uint64_t v15 = (HIDWORD(v10) + 1);
    unint64_t v10 = (v15 << 32) | v10;
    if (v15 == v14 - 1)
    {
      unint64_t v10 = (v15 << 32) | v15;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_9;
    }
  }
  if (v19[0] == 28)
  {
    uint64_t v16 = v20;
    if (v20)
    {
      for (uint64_t i = 8; i != 104; i += 24)
      {
        uint64_t v18 = *(void *)(v16 + i);
        if (v18) {
          uint64_t result = GTResourceTrackerUsingResource(v3[2], 31, v18, *v3, v3[1]);
        }
      }
    }
  }
  return result;
}

uint64_t renderCommandEncoder_processStreamWithDescriptor(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v26 = *(void *)(a3 + 8);
  uint64_t v7 = *(void *)(*(void *)(*find_entry(v6, &v26, 8uLL, 0) + 32) + 32);
  if (v7)
  {
    unsigned int v8 = 0;
    while (1)
    {
      unsigned int v9 = atomic_load((unsigned int *)(v7 + 4));
      uint64_t v10 = v8 + (v9 >> 6) - 1;
      if ((int)v10 > 1) {
        break;
      }
      uint64_t v7 = *(void *)(v7 + 40);
      unsigned int v8 = v10;
      if (!v7)
      {
        unsigned int v8 = v10;
        goto LABEL_8;
      }
    }
    uint64_t v10 = 1;
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v10 = 0;
  }
LABEL_8:
  unint64_t v11 = v8 | (unint64_t)(v10 << 32);
LABEL_9:
  uint64_t v12 = v7 + 64;
  while (v7 && (*(unsigned char *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6) + 15) & 8) != 0)
  {
    uint64_t v13 = v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6);
    int v14 = (int *)(v13 + 8);
    char v15 = IsFuncEnumEndEncoding(*(_DWORD *)(v13 + 8));
    uint64_t v16 = *(void *)v13;
    if (v15) {
      return v16;
    }
    GTResourceTrackerProcessResourceUse(a1, v13, v16);
    GTMTLSMCommandEncoder_processTraceFunc(a3, (uint64_t *)v13, a1[1]);
    ResourceTracker_processCommandEncoder(a1, *v14, a3, *(void *)v13);
    if (IsFuncEnumDrawCall(*v14))
    {
      if (*(_DWORD *)a3 == 70) {
        uint64_t v17 = *(unsigned __int8 *)(a3 + 11141);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)v13;
      do
      {
        RenderEncoderLoadAttachment(a1, a2 + v18, v19);
        v18 += 64;
      }
      while (v18 != 512);
      RenderEncoderLoadAttachment(a1, a2 + 672, v19);
      RenderEncoderLoadAttachment(a1, a2 + 720, v19);
      if (v17)
      {
        uint64_t v20 = *(void *)(a2 + 792);
        if (v20)
        {
          uint64_t v21 = tracker_resource_get(a1, 22, v20, v19);
          if (v21) {
            v21[4] = v19;
          }
        }
      }
      GTResourceTrackerUsingResource(a1[2], 68, *(void *)(a2 + 784), *a1, a1[1]);
    }
    unsigned int v22 = atomic_load((unsigned int *)(v7 + 4));
    int v23 = v11 + (v22 >> 6);
    uint64_t v24 = (HIDWORD(v11) + 1);
    unint64_t v11 = (v24 << 32) | v11;
    if (v24 == v23 - 1)
    {
      unint64_t v11 = (v24 << 32) | v24;
      uint64_t v7 = *(void *)(v7 + 40);
      goto LABEL_9;
    }
  }
  return -1;
}

uint64_t RenderEncoderWithDescriptor(uint64_t *a1, uint64_t *a2)
{
  for (uint64_t i = 0; i != 64; i += 8)
  {
    GTResourceTrackerUsingResource(a1[2], 80, a2[i + 1], *a1, a1[1]);
    GTResourceTrackerUsingResource(a1[2], 80, a2[i], *a1, a1[1]);
  }
  GTResourceTrackerUsingResource(a1[2], 80, a2[85], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[84], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[91], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[90], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 22, a2[99], *a1, a1[1]);
  uint64_t result = GTResourceTrackerUsingResource(a1[2], 68, a2[98], *a1, a1[1]);
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 66;
  do
  {
    uint64_t v8 = v7[v6];
    if (v8) {
      uint64_t result = GTResourceTrackerUsingResource(a1[2], 31, v8, *a1, a1[1]);
    }
    v6 += 5;
  }
  while (v6 != 20);
  return result;
}

uint64_t *RenderEncoderEndEncoding(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  do
  {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 27);
    if (v10 == 4) {
      uint64_t v10 = *(void *)(*(void *)a3 + v8);
    }
    RenderEncoderStoreAttachment(a1, (uint64_t *)v9, v10, a4);
    v8 += 8;
    v9 += 64;
  }
  while (v8 != 64);
  unsigned int v11 = *(unsigned __int8 *)(a2 + 699);
  if (v11 == 4) {
    unsigned int v11 = *(unsigned __int8 *)(a3 + 8);
  }
  RenderEncoderStoreAttachment(a1, (uint64_t *)(a2 + 672), v11, a4);
  unsigned int v12 = *(unsigned __int8 *)(a2 + 747);
  if (v12 == 4) {
    unsigned int v12 = *(unsigned __int8 *)(a3 + 9);
  }

  return RenderEncoderStoreAttachment(a1, (uint64_t *)(a2 + 720), v12, a4);
}

uint64_t *RenderEncoderStoreAttachment(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2[1];
  uint64_t v8 = result;
  switch(a3)
  {
    case 0:
    case 1:
    case 5:
      goto LABEL_5;
    case 2:
      goto LABEL_4;
    case 3:
      uint64_t v9 = tracker_resource_get(result, 80, v5, a4);
      if (v9) {
        void v9[4] = a4;
      }
LABEL_4:
      uint64_t v5 = *a2;
LABEL_5:
      uint64_t result = tracker_resource_get(v8, 80, v5, a4);
      if (result) {
        result[4] = a4;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *ResourceTracker_processCommandEncoder(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (uint64_t *)IsFuncEnumDrawCall(a2);
  if (result)
  {
    if (*(_DWORD *)a3 != 70) {
      return result;
    }
    uint64_t v9 = *a1;
    v26.i64[0] = *(void *)(a3 + 8600);
    uint64_t v10 = *find_entry(v9, &v26, 8uLL, 0);
    if (v10) {
      uint64_t v11 = *(void *)(v10 + 32);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    int8x16_t v35 = 0u;
    long long v33 = 0u;
    memset(v32, 0, sizeof(v32));
    long long v30 = 0u;
    long long v31 = 0u;
    memset(v29, 0, sizeof(v29));
    long long v27 = 0u;
    long long v28 = 0u;
    int8x16_t v26 = 0u;
    GTMTLSMRenderPipelineState_resourceAccess(&v26, v11, a1[1]);
    int8x16_t v26 = vandq_s8(v26, (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 64)));
    BufferAccess(a1, a3 + 80, &v26, a4);
    TextureAccess(a1, a3 + 824, (uint64_t)&v27, a4);
    *(int8x16_t *)((char *)v29 + 8) = vandq_s8(*(int8x16_t *)((char *)v29 + 8), (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 1976)));
    BufferAccess(a1, a3 + 1984, &v29[0].i64[1], a4);
    TextureAccess(a1, a3 + 2480, (uint64_t)&v29[1].i64[1], a4);
    v32[0] = vandq_s8(v32[0], (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 3632)));
    BufferAccess(a1, a3 + 3640, v32, a4);
    TextureAccess(a1, a3 + 4136, (uint64_t)v32[1].i64, a4);
    *(int8x16_t *)((char *)&v32[3] + 8) = vandq_s8(*(int8x16_t *)((char *)&v32[3] + 8), (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 5288)));
    BufferAccess(a1, a3 + 5296, &v32[3].i64[1], a4);
    uint64_t v21 = a3 + 5792;
    unsigned int v22 = &v32[4].i64[1];
    int v23 = a1;
    return TextureAccess(v23, v21, (uint64_t)v22, a4);
  }
  if (a2 <= -16080)
  {
    if (a2 != -16327 && a2 != -16220)
    {
      int v12 = -16137;
LABEL_12:
      if (a2 != v12) {
        return result;
      }
      goto LABEL_13;
    }
LABEL_15:
    uint64_t v16 = *a1;
    v26.i64[0] = *(void *)(a3 + 64);
    uint64_t v17 = *find_entry(v16, &v26, 8uLL, 0);
    if (v17) {
      uint64_t v17 = *(void *)(v17 + 32);
    }
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    int8x16_t v39 = 0u;
    uint64_t v18 = a1[1];
    int8x16_t v26 = 0u;
    *(void *)&long long v27 = 0;
    *(void *)&long long v33 = 0;
    memset(v32, 0, sizeof(v32));
    long long v30 = 0u;
    long long v28 = 0u;
    memset(v29, 0, sizeof(v29));
    v26.i32[0] = 29;
    *((void *)&v27 + 1) = -1;
    long long v31 = 0xFFFFFFFFFFFFFFFFLL;
    if (v17 && (uint64_t v19 = *(void *)(v17 + 32)) != 0 && (*(unsigned char *)(v19 + 79) & 8) != 0) {
      uint64_t v20 = (uint64_t *)(v19 + 64);
    }
    else {
      uint64_t v20 = 0;
    }
    GTMTLSMComputePipelineState_processTraceFuncWithMap(v26.i8, v18, v20);
    int8x16_t v39 = *(int8x16_t *)((char *)v32 + 8);
    long long v40 = *(long long *)((char *)&v32[1] + 8);
    int8x16_t v25 = vandq_s8(*(int8x16_t *)((char *)v32 + 8), (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 72)));
    uint64_t v42 = v32[3].i64[1];
    uint64_t v24 = (uint64_t *)&v40;
    long long v41 = *(long long *)((char *)&v32[2] + 8);
    int8x16_t v39 = v25;
    BufferAccess(a1, a3 + 88, &v39, a4);
    uint64_t v21 = a3 + 832;
    goto LABEL_27;
  }
  if ((a2 + 16079) < 2) {
    goto LABEL_15;
  }
  if (a2 != -15297)
  {
    int v12 = -15486;
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v13 = *a1;
  v26.i64[0] = *(void *)(a3 + 8600);
  uint64_t v14 = *find_entry(v13, &v26, 8uLL, 0);
  if (v14) {
    uint64_t v15 = *(void *)(v14 + 32);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  int8x16_t v35 = 0u;
  long long v33 = 0u;
  memset(v32, 0, sizeof(v32));
  long long v30 = 0u;
  long long v31 = 0u;
  memset(v29, 0, sizeof(v29));
  long long v27 = 0u;
  long long v28 = 0u;
  int8x16_t v26 = 0u;
  uint64_t v24 = (uint64_t *)&v36;
  GTMTLSMRenderPipelineState_resourceAccess(&v26, v15, a1[1]);
  int8x16_t v35 = vandq_s8(v35, (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 6944)));
  BufferAccess(a1, a3 + 6952, &v35, a4);
  uint64_t v21 = a3 + 7448;
LABEL_27:
  int v23 = a1;
  unsigned int v22 = v24;
  return TextureAccess(v23, v21, (uint64_t)v22, a4);
}

uint64_t *RenderEncoderLoadAttachment(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return result;
  }
  uint64_t v6 = result;
  int v7 = *(unsigned __int8 *)(a2 + 25);
  if (v7 == 2) {
    goto LABEL_5;
  }
  if (v7 != 1)
  {
    if (*(unsigned char *)(a2 + 25)) {
      return result;
    }
LABEL_5:
    return GTResourceTrackerResourceRead(result, 80, v4, 0x7FFFFFFFFFFFFFFFLL);
  }
  GTResourceTrackerResourceRead(result, 80, v4, a3);
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t result = find_entry(v8, &v9, 8uLL, 0);
  if (*(_DWORD *)(*(void *)(*(void *)(*result + 32) + 32) + 72) == -16294)
  {
    uint64_t result = tracker_resource_get(v6, 80, *(void *)(a2 + 8), a3);
    *((unsigned char *)result + 48) = 1;
  }
  return result;
}

uint64_t *BufferAccess(uint64_t *result, uint64_t a2, void *a3, uint64_t a4)
{
  int v7 = result;
  int v8 = 0;
  do
  {
    unint64_t v9 = *a3 >> v8;
    if (!v9) {
      break;
    }
    int v10 = v8 + __clz(__rbit64(v9));
    uint64_t result = GTResourceTrackerResourceRead(v7, 22, *(void *)(a2 + 8 * v10), a4);
    int v8 = v10 + 1;
  }
  while (v10 < 63);
  int v11 = 0;
  do
  {
    unint64_t v12 = a3[1] >> v11;
    if (!v12) {
      break;
    }
    int v13 = v11 + __clz(__rbit64(v12));
    uint64_t result = tracker_resource_get(v7, 22, *(void *)(a2 + 8 * v13), a4);
    if (result) {
      result[4] = a4;
    }
    int v11 = v13 + 1;
  }
  while (v13 < 63);
  return result;
}

uint64_t *TextureAccess(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = result;
  uint64_t v8 = 0;
  char v9 = 1;
  do
  {
    int v10 = 0;
    char v11 = v9;
    uint64_t v12 = v8 << 6;
    do
    {
      unint64_t v13 = *(void *)(a3 + 16 * v8) >> v10;
      if (!v13) {
        break;
      }
      int v14 = v10 + __clz(__rbit64(v13));
      uint64_t result = GTResourceTrackerResourceRead(v7, 80, *(void *)(a2 + 8 * (v12 + v14)), a4);
      int v10 = v14 + 1;
    }
    while (v14 < 63);
    int v15 = 0;
    uint64_t v16 = (void *)(a3 + 16 * v8 + 8);
    do
    {
      unint64_t v17 = *v16 >> v15;
      if (!v17) {
        break;
      }
      int v18 = v15 + __clz(__rbit64(v17));
      uint64_t result = tracker_resource_get(v7, 80, *(void *)(a2 + 8 * (v12 + v18)), a4);
      if (result) {
        result[4] = a4;
      }
      int v15 = v18 + 1;
    }
    while (v18 < 63);
    char v9 = 0;
    uint64_t v8 = 1;
  }
  while ((v11 & 1) != 0);
  return result;
}

void GTResourceTrackerProcessCommandBuffer(uint64_t a1, apr_pool_t *a2, char a3)
{
  uint64_t v5 = *(void *)a1;
  newpool = a2;
  entry = find_entry(v5, &newpool, 8uLL, 0);
  if (*entry) {
    uint64_t v7 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8)
  {
    unsigned int v9 = 0;
    while (1)
    {
      unsigned int v10 = atomic_load((unsigned int *)(v8 + 4));
      uint64_t v11 = v9 + (v10 >> 6) - 1;
      if ((int)v11 > 0) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 40);
      unsigned int v9 = v11;
      if (!v8)
      {
        unsigned int v9 = v11;
        goto LABEL_11;
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v11 = 0;
LABEL_11:
  unint64_t v12 = v9 | (unint64_t)(v11 << 32);
  while (v8 && (*(unsigned char *)(v8 + 64 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6) + 15) & 8) != 0)
  {
    GTResourceTrackerProcessFunction();
    unsigned int v13 = atomic_load((unsigned int *)(v8 + 4));
    int v14 = v12 + (v13 >> 6);
    uint64_t v15 = (HIDWORD(v12) + 1);
    unint64_t v12 = (v15 << 32) | v12;
    if (v15 == v14 - 1)
    {
      unint64_t v12 = (v15 << 32) | v15;
      uint64_t v8 = *(void *)(v8 + 40);
    }
  }
  if (a3)
  {
    uint64_t v16 = *(void *)a1;
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v18 = *(void *)(v7 + 32);
    if (v18)
    {
      unsigned int v19 = 0;
      while (1)
      {
        unsigned int v20 = atomic_load((unsigned int *)(v18 + 4));
        uint64_t v21 = v19 + (v20 >> 6) - 1;
        if ((int)v21 > 0) {
          break;
        }
        uint64_t v18 = *(void *)(v18 + 40);
        unsigned int v19 = v21;
        if (!v18)
        {
          unsigned int v19 = v21;
          goto LABEL_24;
        }
      }
    }
    else
    {
      unsigned int v19 = 0;
    }
    uint64_t v21 = 0;
LABEL_24:
    unint64_t v22 = v19 | (unint64_t)(v21 << 32);
LABEL_25:
    uint64_t v23 = v18 + 64;
    while (1)
    {
      if (!v18 || (*(unsigned char *)(v23 + ((uint64_t)(HIDWORD(v22) - (int)v22) << 6) + 15) & 8) == 0)
      {
        uint64_t v28 = -1;
        goto LABEL_33;
      }
      uint64_t v24 = v23 + ((uint64_t)(HIDWORD(v22) - (int)v22) << 6);
      if (GetFuncEnumConstructorType(*(_DWORD *)(v24 + 8)) == 25) {
        break;
      }
      unsigned int v25 = atomic_load((unsigned int *)(v18 + 4));
      int v26 = v22 + (v25 >> 6);
      uint64_t v27 = (HIDWORD(v22) + 1);
      unint64_t v22 = (v27 << 32) | v22;
      if (v27 == v26 - 1)
      {
        unint64_t v22 = (v27 << 32) | v27;
        uint64_t v18 = *(void *)(v18 + 40);
        goto LABEL_25;
      }
    }
    uint64_t v28 = *(void *)GTTraceFunc_argumentBytesWithMap((void *)v24, *(unsigned __int8 *)(v24 + 13), v17);
LABEL_33:
    newpool = (apr_pool_t *)v28;
    uint64_t v29 = *find_entry(v16, &newpool, 8uLL, 0);
    if (v29)
    {
      uint64_t v30 = *(void *)(v29 + 32);
      unint64_t v32 = CommandBufferCommitIndex(*(void *)(v7 + 32));
      if (v30)
      {
        newpool = 0;
        apr_pool_create_ex(&newpool, 0, 0, v31);
        long long v33 = newpool;
        long long v34 = (apr_pool_t **)apr_hash_make(newpool);
        GatherCommandQueueResidencySetsUpToIndexInternal(v34, v30, *(void *)(a1 + 8), v32, 1);
        int8x16_t v35 = apr_hash_first(v33, (apr_hash_t *)v34);
        if (v35)
        {
          long long v36 = v35;
          do
          {
            GTResourceTrackerUsingResidencySet((uint64_t *)a1, **(void **)(*((void *)v36 + 1) + 16));
            long long v36 = apr_hash_next(v36);
          }
          while (v36);
        }
        apr_pool_destroy(v33);
      }
    }
    else
    {
      unint64_t v32 = CommandBufferCommitIndex(*(void *)(v7 + 32));
    }
    if (*(_DWORD *)(*(void *)(a1 + 40) + 48))
    {
      pool = 0;
      apr_pool_create_ex(&pool, 0, 0, v31);
      long long v37 = pool;
      uint64_t v38 = apr_hash_make(pool);
      int8x16_t v39 = apr_hash_make(v37);
      long long v40 = apr_hash_first(v37, *(apr_hash_t **)(a1 + 40));
      if (v40)
      {
        long long v41 = v40;
        h = (apr_pool_t **)v39;
        do
        {
          uint64_t v42 = *(void *)a1;
          newpool = **(apr_pool_t ***)(*((void *)v41 + 1) + 16);
          uint64_t v43 = *find_entry(v42, &newpool, 8uLL, 0);
          if (v43) {
            uint64_t v43 = *(void *)(v43 + 32);
          }
          uint64_t v44 = *(void *)(a1 + 8);
          uint64_t v45 = *(void *)(v43 + 32);
          if (v45)
          {
            unsigned int v46 = 0;
            while (1)
            {
              unsigned int v47 = atomic_load((unsigned int *)(v45 + 4));
              uint64_t v48 = v46 + (v47 >> 6) - 1;
              if ((int)v48 > 0) {
                break;
              }
              uint64_t v45 = *(void *)(v45 + 40);
              unsigned int v46 = v48;
              if (!v45)
              {
                unsigned int v46 = v48;
                goto LABEL_52;
              }
            }
            uint64_t v48 = 0;
          }
          else
          {
            unsigned int v46 = 0;
            uint64_t v48 = 0;
          }
LABEL_52:
          unint64_t v49 = 0;
          unint64_t v50 = v46 | (unint64_t)(v48 << 32);
LABEL_53:
          uint64_t v51 = v45 + 64;
          while (v45)
          {
            int v52 = HIDWORD(v50) - v50;
            if ((*(unsigned char *)(v51 + ((uint64_t)(HIDWORD(v50) - (int)v50) << 6) + 15) & 8) == 0) {
              break;
            }
            uint64_t v53 = v52;
            unint64_t v54 = *(void *)(v51 + ((uint64_t)v52 << 6));
            if (v54 >= v32) {
              break;
            }
            int v55 = *(_DWORD *)(v51 + (v53 << 6) + 8);
            if (*(char *)(v51 + ((uint64_t)(HIDWORD(v50) - (int)v50) << 6) + 15) < 0 && v55 == -15208) {
              unint64_t v49 = v54;
            }
            unsigned int v57 = atomic_load((unsigned int *)(v45 + 4));
            uint64_t v58 = (HIDWORD(v50) + 1);
            int v59 = v50 + (v57 >> 6) - 1;
            unint64_t v50 = (v58 << 32) | v50;
            if (v58 == v59)
            {
              unint64_t v50 = (v58 << 32) | v58;
              uint64_t v45 = *(void *)(v45 + 40);
              goto LABEL_53;
            }
          }
          uint64_t v60 = *(void *)(v43 + 32);
          huint64_t i = v41;
          int64_t v100 = v38;
          unsigned int v61 = 0;
          if (v60)
          {
            while (1)
            {
              unsigned int v62 = atomic_load((unsigned int *)(v60 + 4));
              uint64_t v63 = v61 + (v62 >> 6) - 1;
              if ((int)v63 > 0) {
                break;
              }
              uint64_t v60 = *(void *)(v60 + 40);
              unsigned int v61 = v63;
              if (!v60)
              {
                unsigned int v61 = v63;
                goto LABEL_69;
              }
            }
          }
          uint64_t v63 = 0;
LABEL_69:
          unint64_t v64 = v61 | (unint64_t)(v63 << 32);
LABEL_70:
          uint64_t v65 = v60 + 64;
          while (v60)
          {
            int v66 = HIDWORD(v64) - v64;
            if ((*(unsigned char *)(v65 + ((uint64_t)(HIDWORD(v64) - (int)v64) << 6) + 15) & 8) == 0) {
              break;
            }
            uint64_t v67 = (unint64_t *)(v65 + ((uint64_t)v66 << 6));
            if (*v67 >= v49)
            {
              if (*v67 >= v32)
              {
                if ((*(unsigned char *)(v65 + ((uint64_t)(HIDWORD(v64) - (int)v64) << 6) + 15) & 0x80) != 0) {
                  break;
                }
              }
              else
              {
                switch(*(_DWORD *)(v65 + ((uint64_t)v66 << 6) + 8))
                {
                  case 0xFFFFC48C:
                    int64_t v100 = apr_hash_copy(*h, (const apr_hash_t *)h);
                    break;
                  case 0xFFFFC494:
                    uint64_t v97 = v65;
                    uint64_t v71 = GTTraceFunc_argumentBytesWithMap(v67, *(unsigned __int8 *)(v65 + ((uint64_t)v66 << 6) + 13), v44)+ 8;
                    uint64_t v72 = *find_entry((uint64_t)h, v71, 8uLL, 0);
                    if (!v72 || !*(void *)(v72 + 32))
                    {
                      uint64_t v73 = apr_palloc(*h, 8uLL);
                      void *v73 = *(void *)v71;
                      apr_hash_set((apr_hash_t *)h, v73, 8, v73);
                    }
                    uint64_t v65 = v97;
                    break;
                  case 0xFFFFC495:
                    uint64_t v74 = v44;
                    unsigned int v75 = GTTraceFunc_argumentBytesWithMap(v67, *(unsigned __int8 *)(v65 + ((uint64_t)v66 << 6) + 13), v44);
                    int v76 = GTTraceFunc_argumentBytesWithMap(v67, v75[16], v74);
                    unsigned int v101 = v75;
                    if (!*((void *)v75 + 1)) {
                      goto LABEL_100;
                    }
                    uint64_t v77 = v76;
                    uint64_t v96 = v74;
                    uint64_t v98 = v65;
                    uint64_t v78 = 0;
                    unint64_t v79 = 0;
                    do
                    {
                      uint64_t v80 = *find_entry((uint64_t)h, &v77[v78], 8uLL, 0);
                      if (!v80 || !*(void *)(v80 + 32))
                      {
                        if (v77)
                        {
                          uint64_t v81 = (apr_hash_t *)h;
                          uint64_t v82 = apr_palloc(*h, 8uLL);
                          *uint64_t v82 = *(void *)&v77[8 * v79];
                        }
                        else
                        {
                          uint64_t v82 = 0;
                          uint64_t v81 = (apr_hash_t *)h;
                        }
                        apr_hash_set(v81, v82, 8, v82);
                      }
                      ++v79;
                      v78 += 8;
                    }
                    while (*((void *)v101 + 1) > v79);
                    goto LABEL_99;
                  case 0xFFFFC498:
                    apr_hash_clear((apr_hash_t *)h);
                    break;
                  case 0xFFFFC499:
                    __int16 v83 = GTTraceFunc_argumentBytesWithMap(v67, *(unsigned __int8 *)(v65 + ((uint64_t)v66 << 6) + 13), v44);
                    apr_hash_set((apr_hash_t *)h, v83 + 8, 8, 0);
                    break;
                  case 0xFFFFC49A:
                    uint64_t v74 = v44;
                    int v84 = GTTraceFunc_argumentBytesWithMap(v67, *(unsigned __int8 *)(v65 + ((uint64_t)v66 << 6) + 13), v44);
                    __int16 v85 = GTTraceFunc_argumentBytesWithMap(v67, v84[16], v74);
                    if (*((void *)v84 + 1))
                    {
                      uint64_t v86 = v85;
                      uint64_t v96 = v74;
                      uint64_t v98 = v65;
                      unint64_t v87 = 0;
                      do
                      {
                        apr_hash_set((apr_hash_t *)h, v86, 8, 0);
                        ++v87;
                        v86 += 8;
                      }
                      while (*((void *)v84 + 1) > v87);
LABEL_99:
                      uint64_t v44 = v96;
                      uint64_t v65 = v98;
                    }
                    else
                    {
LABEL_100:
                      uint64_t v44 = v74;
                    }
                    break;
                  default:
                    break;
                }
              }
            }
            unsigned int v68 = atomic_load((unsigned int *)(v60 + 4));
            int v69 = v64 + (v68 >> 6);
            uint64_t v70 = (HIDWORD(v64) + 1);
            unint64_t v64 = (v70 << 32) | v64;
            if (v70 == v69 - 1)
            {
              unint64_t v64 = (v70 << 32) | v70;
              uint64_t v60 = *(void *)(v60 + 40);
              goto LABEL_70;
            }
          }
          char v88 = 1;
          uint64_t v38 = v100;
          do
          {
            char v89 = v88;
            if (v88) {
              uint64_t v90 = v100;
            }
            else {
              uint64_t v90 = (apr_hash_t *)h;
            }
            for (uint64_t i = apr_hash_first(pool, v90); ; uint64_t i = apr_hash_next(v92))
            {
              long long v92 = i;
              if (!i) {
                break;
              }
              long long v93 = *(uint64_t **)(*((void *)i + 1) + 16);
              if (GTResourceTrackerGetResourceType(*v93, *(void *)a1) == 50)
              {
                GTResourceTrackerUsingResourceHeap((uint64_t *)a1, *v93, v32);
              }
              else
              {
                uint64_t v94 = *(void *)(a1 + 16);
                int ResourceType = GTResourceTrackerGetResourceType(*v93, *(void *)a1);
                GTResourceTrackerUsingResource(v94, ResourceType, *v93, *(void *)a1, *(void *)(a1 + 8));
              }
            }
            char v88 = 0;
          }
          while ((v89 & 1) != 0);
          apr_hash_clear(v100);
          apr_hash_clear((apr_hash_t *)h);
          long long v41 = apr_hash_next(hi);
        }
        while (v41);
        long long v37 = pool;
      }
      apr_pool_destroy(v37);
      apr_hash_clear(*(apr_hash_t **)(a1 + 40));
    }
  }
}

void GTResourceTrackerUsingResidencySet(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  GTResourceTrackerUsingResource(a1[2], 72, a2, *a1, a1[1]);
  entry = find_entry(a1[5], &v5, 8uLL, 0);
  if (!*entry || !*(void *)(*entry + 32))
  {
    uint64_t v4 = apr_palloc(*(apr_pool_t **)a1[5], 8uLL);
    void *v4 = v5;
    apr_hash_set((apr_hash_t *)a1[5], v4, 8, v4);
  }
}

uint64_t *GTResourceTrackerUsingAccelerationStructureDescriptor(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(unsigned __int8 *)a2;
  if (v6 == 3)
  {
    GTResourceTrackerResourceRead(result, 22, a2[1], a3);
    GTResourceTrackerResourceRead(v5, 22, a2[3], a3);
    GTResourceTrackerResourceRead(v5, 22, a2[5], a3);
    uint64_t v28 = a2[7];
    return GTResourceTrackerResourceRead(v5, 22, v28, a3);
  }
  else if (v6 == 2)
  {
    GTResourceTrackerResourceRead(result, 22, a2[2], a3);
    uint64_t result = GTResourceTrackerResourceRead(v5, 22, a2[3], a3);
    if (*((_DWORD *)a2 + 14))
    {
      unint64_t v29 = 0;
      do
        uint64_t result = GTResourceTrackerResourceRead(v5, 16, *(void *)(a2[1] + 8 * v29++), a3);
      while (v29 < *((unsigned int *)a2 + 14));
    }
  }
  else if (v6 == 1 && a2[2])
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2[1];
      unint64_t v9 = v8 + 136 * v7;
      uint64_t result = GTResourceTrackerResourceRead(v5, 22, *(void *)(v9 + 8), a3);
      switch(*(unsigned char *)(v9 + 36))
      {
        case 1:
          unsigned int v10 = (uint64_t *)(v8 + 136 * v7);
          GTResourceTrackerResourceRead(v5, 22, v10[10], a3);
          GTResourceTrackerResourceRead(v5, 22, v10[5], a3);
          uint64_t v11 = v10 + 7;
          goto LABEL_25;
        case 2:
          uint64_t v11 = (uint64_t *)(v8 + 136 * v7 + 40);
          goto LABEL_25;
        case 3:
          unint64_t v12 = v8 + 136 * v7;
          unsigned int v13 = (uint64_t *)(v12 + 40);
          if (*(void *)(v12 + 88))
          {
            uint64_t v14 = 0;
            unint64_t v15 = 0;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(v13[5] + v14), a3);
              ++v15;
              v14 += 16;
            }
            while (v13[6] > v15);
          }
          uint64_t v16 = *v13;
          uint64_t v11 = v13 + 2;
          GTResourceTrackerResourceRead(v5, 22, v16, a3);
          goto LABEL_25;
        case 4:
          unint64_t v17 = v8 + 136 * v7;
          if (*(void *)(v17 + 48))
          {
            uint64_t v18 = 0;
            unint64_t v19 = 0;
            unsigned int v20 = (void *)(v17 + 40);
            do
            {
              uint64_t result = GTResourceTrackerResourceRead(v5, 22, *(void *)(*v20 + v18), a3);
              ++v19;
              v18 += 16;
            }
            while (v20[1] > v19);
          }
          break;
        case 5:
          uint64_t v21 = (uint64_t *)(v8 + 136 * v7);
          GTResourceTrackerResourceRead(v5, 22, v21[5], a3);
          GTResourceTrackerResourceRead(v5, 22, v21[11], a3);
          uint64_t v11 = v21 + 9;
          goto LABEL_25;
        case 6:
          unint64_t v22 = v8 + 136 * v7;
          uint64_t v23 = (void *)(v22 + 40);
          if (*(void *)(v22 + 48))
          {
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(*v23 + v24), a3);
              ++v25;
              v24 += 16;
            }
            while (v23[1] > v25);
          }
          if (v23[7])
          {
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(v23[6] + v26), a3);
              ++v27;
              v26 += 16;
            }
            while (v23[7] > v27);
          }
          uint64_t v11 = v23 + 4;
LABEL_25:
          uint64_t result = GTResourceTrackerResourceRead(v5, 22, *v11, a3);
          break;
        default:
          break;
      }
      ++v7;
    }
    while (a2[2] > v7);
  }
  return result;
}

void GTResourceTrackerProcessResourceUse(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if (v6 > -15757)
  {
    if (v6 <= -15367)
    {
      if (v6 <= -15525)
      {
        if (v6 > -15599)
        {
          switch(v6)
          {
            case -15598:
              id v104 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v104 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 44;
              goto LABEL_412;
            case -15597:
              uint64_t v105 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v106 = a1[2];
              unsigned int v107 = GTTraceFunc_argumentBytesWithMap((void *)a2, v105[24], a1[1]);
              uint64_t v108 = *((void *)v105 + 2);
              if (v108)
              {
                id v109 = (uint64_t *)v107;
                uint64_t v111 = *a1;
                uint64_t v110 = a1[1];
                do
                {
                  uint64_t v113 = *v109++;
                  uint64_t v112 = v113;
                  if (v113) {
                    GTResourceTrackerUsingResource(v106, 44, v112, v111, v110);
                  }
                  --v108;
                }
                while (v108);
              }
              break;
            case -15592:
            case -15591:
LABEL_46:
              long long v37 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v38 = v37[1];
              int8x16_t v39 = a1;
              int v40 = 22;
LABEL_219:
              GTResourceTrackerResourceRead(v39, v40, v38, a3);
              uint64_t v28 = v37[3];
              goto LABEL_242;
            case -15588:
              goto LABEL_241;
            case -15583:
LABEL_92:
              int v66 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v66 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 60;
              goto LABEL_412;
            case -15582:
              unsigned int v114 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v115 = a1[2];
              id v116 = GTTraceFunc_argumentBytesWithMap((void *)a2, v114[24], a1[1]);
              uint64_t v117 = *((void *)v114 + 2);
              if (v117)
              {
                uint64_t v118 = (uint64_t *)v116;
                uint64_t v120 = *a1;
                uint64_t v119 = a1[1];
                do
                {
                  uint64_t v122 = *v118++;
                  uint64_t v121 = v122;
                  if (v122) {
                    GTResourceTrackerUsingResource(v115, 60, v121, v120, v119);
                  }
                  --v117;
                }
                while (v117);
              }
              break;
            case -15581:
LABEL_93:
              uint64_t v67 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v67 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 83;
              goto LABEL_412;
            case -15580:
              uint64_t v123 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v124 = a1[2];
              uint64_t v125 = GTTraceFunc_argumentBytesWithMap((void *)a2, v123[24], a1[1]);
              uint64_t v126 = *((void *)v123 + 2);
              if (v126)
              {
                id v127 = (uint64_t *)v125;
                uint64_t v129 = *a1;
                uint64_t v128 = a1[1];
                do
                {
                  uint64_t v131 = *v127++;
                  uint64_t v130 = v131;
                  if (v131) {
                    GTResourceTrackerUsingResource(v124, 83, v130, v129, v128);
                  }
                  --v126;
                }
                while (v126);
              }
              break;
            default:
              return;
          }
        }
        else
        {
          switch(v6)
          {
            case -15647:
              uint64_t v94 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              long long v95 = tracker_resource_get(a1, 16, *((void *)v94 + 1), a3);
              if (v95) {
                v95[4] = a3;
              }
              GTResourceTrackerUsingResource(a1[2], 22, *((void *)v94 + 2), *a1, a1[1]);
              unsigned int v88 = v94[32];
              goto LABEL_137;
            case -15646:
            case -15645:
              unint64_t v27 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 16, *((void *)v27 + 1), a3);
              uint64_t v28 = *((void *)v27 + 2);
              unint64_t v29 = a1;
              int v30 = 16;
              goto LABEL_243;
            case -15644:
            case -15643:
            case -15642:
            case -15641:
            case -15640:
            case -15639:
            case -15636:
            case -15628:
            case -15627:
            case -15626:
            case -15625:
            case -15624:
              return;
            case -15638:
              uint64_t v96 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 16, *((void *)v96 + 1), a3);
              uint64_t v97 = tracker_resource_get(a1, 16, *((void *)v96 + 2), a3);
              if (v97) {
                v97[4] = a3;
              }
              GTResourceTrackerUsingResource(a1[2], 22, *((void *)v96 + 3), *a1, a1[1]);
              unsigned int v88 = v96[40];
              goto LABEL_137;
            case -15637:
LABEL_48:
              long long v41 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v41 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 31;
              goto LABEL_412;
            case -15635:
            case -15630:
LABEL_58:
              uint64_t v43 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v43 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 41;
              goto LABEL_412;
            case -15634:
LABEL_85:
              uint64_t v61 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
              GTResourceTrackerUsingResourceHeap(a1, v61, a3);
              break;
            case -15633:
              __int16 v99 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              int64_t v100 = GTTraceFunc_argumentBytesWithMap((void *)a2, v99[16], a1[1]);
              uint64_t v101 = *((void *)v99 + 1);
              if (v101)
              {
                id v102 = (uint64_t *)v100;
                do
                {
                  uint64_t v103 = *v102++;
                  GTResourceTrackerUsingResourceHeap(a1, v103, a3);
                  --v101;
                }
                while (v101);
              }
              break;
            case -15632:
LABEL_88:
              unsigned int v62 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              int ResourceType = GTResourceTrackerGetResourceType(*((void *)v62 + 1), *a1);
              uint64_t v64 = *((void *)v62 + 1);
              int v65 = *((_DWORD *)v62 + 4);
              GTResourceTrackerResourceUsage(a1, ResourceType, v64, a3, v65);
              break;
            case -15631:
LABEL_42:
              long long v33 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              unsigned int v34 = v33[24];
LABEL_251:
              long long v233 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v34, a1[1]);
              uint64_t v234 = *((void *)v33 + 1);
              int v235 = *((_DWORD *)v33 + 4);
              GTResourceTrackerResourceUsageArray(a1, v233, v234, a3, v235);
              break;
            case -15629:
              goto LABEL_241;
            case -15623:
LABEL_91:
              uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
              uint64_t v8 = a1;
              int v9 = 16;
              goto LABEL_469;
            default:
              switch(v6)
              {
                case -15756:
                  unint64_t v32 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                  GTResourceTrackerUsingResource(a1[2], 31, *((void *)v32 + 1), *a1, a1[1]);
LABEL_164:
                  uint64_t v28 = *((void *)v32 + 4);
                  goto LABEL_242;
                case -15755:
                case -15754:
                case -15750:
                  goto LABEL_48;
                case -15753:
                case -15752:
                case -15751:
                  return;
                case -15749:
                  goto LABEL_130;
                default:
                  switch(v6)
                  {
                    case -15728:
                    case -15726:
                    case -15723:
                    case -15722:
LABEL_71:
                      uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1])+ 1);
                      goto LABEL_72;
                    default:
                      return;
                  }
              }
          }
        }
      }
      else
      {
        switch(v6)
        {
          case -15474:
LABEL_94:
            uint64_t v28 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_242;
          case -15473:
          case -15472:
          case -15471:
          case -15470:
          case -15469:
LABEL_55:
            uint64_t v28 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_56;
          case -15468:
          case -15467:
          case -15464:
          case -15463:
          case -15462:
          case -15461:
          case -15460:
          case -15444:
          case -15443:
          case -15442:
          case -15441:
          case -15440:
          case -15439:
          case -15438:
          case -15437:
          case -15436:
          case -15435:
          case -15434:
          case -15433:
          case -15432:
          case -15431:
          case -15430:
          case -15429:
          case -15428:
          case -15427:
          case -15426:
          case -15425:
          case -15424:
          case -15423:
          case -15422:
          case -15421:
          case -15420:
          case -15419:
          case -15418:
          case -15417:
          case -15416:
          case -15414:
          case -15413:
          case -15412:
          case -15411:
          case -15410:
          case -15409:
          case -15408:
          case -15407:
          case -15406:
          case -15405:
          case -15404:
          case -15403:
          case -15402:
          case -15400:
          case -15398:
          case -15390:
          case -15388:
            return;
          case -15466:
LABEL_74:
            int v55 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            unsigned int v56 = tracker_resource_get(a1, 16, *((void *)v55 + 1), a3);
            if (v56) {
              v56[4] = a3;
            }
            unsigned int v57 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v55[32], a1[1]);
            GTResourceTrackerResourceReadMTLArray(a1, v57, a3);
            uint64_t v7 = *((void *)v55 + 2);
            goto LABEL_468;
          case -15465:
LABEL_123:
            unsigned int v75 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            char v89 = tracker_resource_get(a1, 16, *((void *)v75 + 1), a3);
            if (v89) {
              v89[4] = a3;
            }
LABEL_125:
            uint64_t v7 = *((void *)v75 + 2);
            goto LABEL_468;
          case -15459:
          case -15454:
          case -15449:
            goto LABEL_91;
          case -15458:
          case -15453:
          case -15448:
            goto LABEL_92;
          case -15457:
            unsigned int v10 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v11 = a1[2];
            unint64_t v12 = GTTraceFunc_argumentBytesWithMap((void *)a2, v10[24], a1[1]);
            uint64_t v13 = *((void *)v10 + 2);
            if (v13)
            {
              uint64_t v14 = (uint64_t *)v12;
              uint64_t v16 = *a1;
              uint64_t v15 = a1[1];
              do
              {
                uint64_t v18 = *v14++;
                uint64_t v17 = v18;
                if (v18) {
                  GTResourceTrackerUsingResource(v11, 60, v17, v16, v15);
                }
                --v13;
              }
              while (v13);
            }
            break;
          case -15456:
          case -15451:
          case -15446:
            goto LABEL_93;
          case -15455:
            uint8x8_t v298 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v299 = a1[2];
            unint64_t v300 = GTTraceFunc_argumentBytesWithMap((void *)a2, v298[24], a1[1]);
            uint64_t v301 = *((void *)v298 + 2);
            if (v301)
            {
              v302 = (uint64_t *)v300;
              uint64_t v304 = *a1;
              uint64_t v303 = a1[1];
              do
              {
                uint64_t v306 = *v302++;
                uint64_t v305 = v306;
                if (v306) {
                  GTResourceTrackerUsingResource(v299, 83, v305, v304, v303);
                }
                --v301;
              }
              while (v301);
            }
            break;
          case -15452:
            unint64_t v307 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v308 = a1[2];
            float v309 = GTTraceFunc_argumentBytesWithMap((void *)a2, v307[24], a1[1]);
            uint64_t v310 = *((void *)v307 + 2);
            if (v310)
            {
              unint64_t v311 = (uint64_t *)v309;
              uint64_t v313 = *a1;
              uint64_t v312 = a1[1];
              do
              {
                uint64_t v315 = *v311++;
                uint64_t v314 = v315;
                if (v315) {
                  GTResourceTrackerUsingResource(v308, 60, v314, v313, v312);
                }
                --v310;
              }
              while (v310);
            }
            break;
          case -15450:
            unint64_t v316 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v317 = a1[2];
            unint64_t v318 = GTTraceFunc_argumentBytesWithMap((void *)a2, v316[24], a1[1]);
            uint64_t v319 = *((void *)v316 + 2);
            if (v319)
            {
              uint8x8_t v320 = (uint64_t *)v318;
              uint64_t v322 = *a1;
              uint64_t v321 = a1[1];
              do
              {
                uint64_t v324 = *v320++;
                uint64_t v323 = v324;
                if (v324) {
                  GTResourceTrackerUsingResource(v317, 83, v323, v322, v321);
                }
                --v319;
              }
              while (v319);
            }
            break;
          case -15447:
            v325 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v326 = a1[2];
            v327 = GTTraceFunc_argumentBytesWithMap((void *)a2, v325[24], a1[1]);
            uint64_t v328 = *((void *)v325 + 2);
            if (v328)
            {
              v329 = (uint64_t *)v327;
              uint64_t v331 = *a1;
              uint64_t v330 = a1[1];
              do
              {
                uint64_t v333 = *v329++;
                uint64_t v332 = v333;
                if (v333) {
                  GTResourceTrackerUsingResource(v326, 60, v332, v331, v330);
                }
                --v328;
              }
              while (v328);
            }
            break;
          case -15445:
            v334 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v335 = a1[2];
            v336 = GTTraceFunc_argumentBytesWithMap((void *)a2, v334[24], a1[1]);
            uint64_t v337 = *((void *)v334 + 2);
            if (v337)
            {
              unint64_t v338 = (uint64_t *)v336;
              uint64_t v340 = *a1;
              uint64_t v339 = a1[1];
              do
              {
                uint64_t v342 = *v338++;
                uint64_t v341 = v342;
                if (v342) {
                  GTResourceTrackerUsingResource(v335, 83, v341, v340, v339);
                }
                --v337;
              }
              while (v337);
            }
            break;
          case -15415:
LABEL_221:
            uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_468;
          case -15401:
          case -15391:
            goto LABEL_105;
          case -15399:
            v343 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v344 = a1[2];
            unint64_t v345 = GTTraceFunc_argumentBytesWithMap((void *)a2, v343[24], a1[1]);
            uint64_t v346 = *((void *)v343 + 2);
            if (v346)
            {
              v347 = (uint64_t *)v345;
              uint64_t v349 = *a1;
              uint64_t v348 = a1[1];
              do
              {
                uint64_t v351 = *v347++;
                uint64_t v350 = v351;
                if (v351) {
                  GTResourceTrackerUsingResource(v344, 22, v350, v349, v348);
                }
                --v346;
              }
              while (v346);
            }
            break;
          case -15397:
          case -15396:
          case -15387:
          case -15386:
LABEL_60:
            uint64_t v44 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v20 = a1[1];
            uint64_t v21 = *((void *)v44 + 1);
            uint64_t v22 = *a1;
            uint64_t v23 = a1[2];
LABEL_61:
            int v24 = 75;
            goto LABEL_412;
          case -15395:
            v352 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v353 = a1[2];
            v354 = GTTraceFunc_argumentBytesWithMap((void *)a2, v352[24], a1[1]);
            uint64_t v355 = *((void *)v352 + 2);
            if (v355)
            {
              uint64_t v356 = (uint64_t *)v354;
              uint64_t v358 = *a1;
              uint64_t v357 = a1[1];
              do
              {
                uint64_t v360 = *v356++;
                uint64_t v359 = v360;
                if (v360) {
                  GTResourceTrackerUsingResource(v353, 75, v359, v358, v357);
                }
                --v355;
              }
              while (v355);
            }
            break;
          case -15394:
            v361 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v362 = a1[2];
            uint64_t v363 = GTTraceFunc_argumentBytesWithMap((void *)a2, v361[24], a1[1]);
            uint64_t v364 = *((void *)v361 + 2);
            if (v364)
            {
              v365 = (uint64_t *)v363;
              uint64_t v367 = *a1;
              uint64_t v366 = a1[1];
              do
              {
                uint64_t v369 = *v365++;
                uint64_t v368 = v369;
                if (v369) {
                  GTResourceTrackerUsingResource(v362, 75, v368, v367, v366);
                }
                --v364;
              }
              while (v364);
            }
            break;
          case -15393:
          case -15383:
LABEL_69:
            unint64_t v54 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v20 = a1[1];
            uint64_t v21 = *((void *)v54 + 1);
            uint64_t v22 = *a1;
            uint64_t v23 = a1[2];
            int v24 = 80;
            goto LABEL_412;
          case -15392:
            unint64_t v370 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v371 = a1[2];
            uint64_t v372 = GTTraceFunc_argumentBytesWithMap((void *)a2, v370[24], a1[1]);
            uint64_t v373 = *((void *)v370 + 2);
            if (v373)
            {
              v374 = (uint64_t *)v372;
              uint64_t v376 = *a1;
              uint64_t v375 = a1[1];
              do
              {
                uint64_t v378 = *v374++;
                uint64_t v377 = v378;
                if (v378) {
                  GTResourceTrackerUsingResource(v371, 80, v377, v376, v375);
                }
                --v373;
              }
              while (v373);
            }
            break;
          case -15389:
            uint64_t v379 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v380 = a1[2];
            uint64_t v381 = GTTraceFunc_argumentBytesWithMap((void *)a2, v379[24], a1[1]);
            uint64_t v382 = *((void *)v379 + 2);
            if (v382)
            {
              v383 = (uint64_t *)v381;
              uint64_t v385 = *a1;
              uint64_t v384 = a1[1];
              do
              {
                uint64_t v387 = *v383++;
                uint64_t v386 = v387;
                if (v387) {
                  GTResourceTrackerUsingResource(v380, 22, v386, v385, v384);
                }
                --v382;
              }
              while (v382);
            }
            break;
          case -15385:
            v388 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v389 = a1[2];
            v390 = GTTraceFunc_argumentBytesWithMap((void *)a2, v388[24], a1[1]);
            uint64_t v391 = *((void *)v388 + 2);
            if (v391)
            {
              v392 = (uint64_t *)v390;
              uint64_t v394 = *a1;
              uint64_t v393 = a1[1];
              do
              {
                uint64_t v396 = *v392++;
                uint64_t v395 = v396;
                if (v396) {
                  GTResourceTrackerUsingResource(v389, 75, v395, v394, v393);
                }
                --v391;
              }
              while (v391);
            }
            break;
          case -15384:
            v397 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v398 = a1[2];
            v399 = GTTraceFunc_argumentBytesWithMap((void *)a2, v397[24], a1[1]);
            uint64_t v400 = *((void *)v397 + 2);
            if (v400)
            {
              v401 = (uint64_t *)v399;
              uint64_t v403 = *a1;
              uint64_t v402 = a1[1];
              do
              {
                uint64_t v405 = *v401++;
                uint64_t v404 = v405;
                if (v405) {
                  GTResourceTrackerUsingResource(v398, 75, v404, v403, v402);
                }
                --v400;
              }
              while (v400);
            }
            break;
          case -15382:
            v406 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v407 = a1[2];
            v408 = GTTraceFunc_argumentBytesWithMap((void *)a2, v406[24], a1[1]);
            uint64_t v409 = *((void *)v406 + 2);
            if (v409)
            {
              v410 = (uint64_t *)v408;
              uint64_t v412 = *a1;
              uint64_t v411 = a1[1];
              do
              {
                uint64_t v414 = *v410++;
                uint64_t v413 = v414;
                if (v414) {
                  GTResourceTrackerUsingResource(v407, 80, v413, v412, v411);
                }
                --v409;
              }
              while (v409);
            }
            break;
          default:
            switch(v6)
            {
              case -15524:
                goto LABEL_74;
              case -15523:
                goto LABEL_123;
              case -15522:
                v415 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                GTResourceTrackerResourceRead(a1, 16, *((void *)v415 + 1), a3);
                id v416 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v415[32], a1[1]);
                GTResourceTrackerResourceReadMTLArray(a1, v416, a3);
                uint64_t v28 = *((void *)v415 + 2);
                goto LABEL_242;
              case -15521:
                goto LABEL_241;
              default:
                if (v6 == -15502) {
                  goto LABEL_241;
                }
                break;
            }
            break;
        }
      }
      return;
    }
    if (v6 > -7158)
    {
      switch(v6)
      {
        case -6142:
          id v237 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 7, *(void *)v237, *a1, a1[1]);
          long long v238 = GTTraceFunc_argumentBytesWithMap((void *)a2, v237[40], a1[1]);
          uint64_t v239 = *((void *)v237 + 6);
          if (v239)
          {
            long long v240 = (uint64_t *)v238;
            do
            {
              uint64_t v242 = *v240++;
              uint64_t v241 = v242;
              if (v242) {
                GTResourceTrackerResourceRead(a1, 80, v241, a3);
              }
              --v239;
            }
            while (v239);
          }
          v243 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v237[64], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, v243, *((void *)v237 + 9), a3);
          uint64_t v7 = *((void *)v237 + 13);
          goto LABEL_468;
        case -6141:
        case -6139:
        case -6138:
        case -6134:
        case -6133:
        case -6131:
        case -6129:
        case -6128:
        case -6127:
        case -6124:
        case -6123:
        case -6122:
        case -6120:
        case -6119:
        case -6116:
        case -6111:
        case -6110:
        case -6109:
          return;
        case -6140:
          uint64_t v244 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 11, *v244, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v244[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v244[11], a3);
          uint64_t v245 = tracker_resource_get(a1, 22, v244[15], a3);
          if (v245) {
            v245[4] = a3;
          }
          uint64_t v7 = v244[19];
          goto LABEL_468;
        case -6137:
          uint64_t v246 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 11, *v246, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v246[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v246[11], a3);
          uint64_t v28 = v246[15];
          goto LABEL_242;
        case -6136:
          long long v247 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v247, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v247[3], a3);
          uint64_t v248 = v247[4];
          goto LABEL_466;
        case -6135:
          long long v249 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v251 = a1[1];
          uint64_t v250 = a1[2];
          uint64_t v252 = *v249;
          uint64_t v253 = *a1;
          int v254 = 8;
          goto LABEL_270;
        case -6132:
          long long v255 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v255, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v255[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v255[16], a3);
          uint64_t v28 = v255[21];
          goto LABEL_242;
        case -6130:
          long long v256 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v256, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v256[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v256[11], a3);
          uint64_t v28 = v256[16];
          goto LABEL_242;
        case -6126:
          long long v249 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v251 = a1[1];
          uint64_t v250 = a1[2];
          uint64_t v252 = *v249;
          uint64_t v253 = *a1;
          int v254 = 7;
LABEL_270:
          GTResourceTrackerUsingResource(v250, v254, v252, v253, v251);
          GTResourceTrackerResourceRead(a1, 80, v249[5], a3);
          uint64_t v28 = v249[7];
          goto LABEL_56;
        case -6125:
          int8x16_t v35 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 4, *v35, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v35[6], a3);
          uint64_t v36 = v35[8];
LABEL_272:
          GTResourceTrackerResourceRead(a1, 80, v36, a3);
          uint64_t v28 = v35[10];
          goto LABEL_56;
        case -6121:
          long long v257 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 7, *v257, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v257[5], a3);
          uint64_t v7 = v257[7];
LABEL_72:
          uint64_t v8 = a1;
          int v9 = 80;
          goto LABEL_469;
        case -6118:
          long long v258 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 4, *(void *)v258, *a1, a1[1]);
          long long v259 = GTTraceFunc_argumentBytesWithMap((void *)a2, v258[48], a1[1]);
          uint64_t v260 = *((void *)v258 + 7);
          if (v260)
          {
            long long v261 = (uint64_t *)v259;
            do
            {
              uint64_t v263 = *v261++;
              uint64_t v262 = v263;
              if (v263) {
                GTResourceTrackerResourceRead(a1, 80, v262, a3);
              }
              --v260;
            }
            while (v260);
          }
          long long v264 = GTTraceFunc_argumentBytesWithMap((void *)a2, v258[72], a1[1]);
          uint64_t v265 = *((void *)v258 + 10);
          if (v265)
          {
            long long v266 = (uint64_t *)v264;
            do
            {
              uint64_t v268 = *v266++;
              uint64_t v267 = v268;
              if (v268) {
                GTResourceTrackerResourceRead(a1, 80, v267, a3);
              }
              --v265;
            }
            while (v265);
          }
          long long v269 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v258[96], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, v269, *((void *)v258 + 13), a3);
          goto LABEL_307;
        case -6117:
          unsigned int v68 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 8, *v68, *a1, a1[1]);
          uint64_t v69 = v68[6];
          uint64_t v70 = a1;
          int v71 = 80;
LABEL_286:
          GTResourceTrackerResourceRead(v70, v71, v69, a3);
          uint64_t v28 = v68[8];
          goto LABEL_56;
        case -6115:
          long long v270 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 8, *(void *)v270, *a1, a1[1]);
          long long v271 = GTTraceFunc_argumentBytesWithMap((void *)a2, v270[48], a1[1]);
          uint64_t v272 = *((void *)v270 + 7);
          if (v272)
          {
            long long v273 = (uint64_t *)v271;
            do
            {
              uint64_t v275 = *v273++;
              uint64_t v274 = v275;
              if (v275) {
                GTResourceTrackerResourceRead(a1, 80, v274, a3);
              }
              --v272;
            }
            while (v272);
          }
          long long v276 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v270[72], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, v276, *((void *)v270 + 10), a3);
          uint64_t v7 = *((void *)v270 + 12);
          goto LABEL_468;
        case -6114:
          long long v258 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *(void *)v258, *a1, a1[1]);
          long long v277 = GTTraceFunc_argumentBytesWithMap((void *)a2, v258[48], a1[1]);
          uint64_t v278 = *((void *)v258 + 7);
          if (v278)
          {
            unint64_t v279 = (uint64_t *)v277;
            do
            {
              uint64_t v281 = *v279++;
              uint64_t v280 = v281;
              if (v281) {
                GTResourceTrackerResourceRead(a1, 80, v280, a3);
              }
              --v278;
            }
            while (v278);
          }
          unint64_t v282 = GTTraceFunc_argumentBytesWithMap((void *)a2, v258[72], a1[1]);
          uint64_t v283 = *((void *)v258 + 10);
          if (v283)
          {
            long long v284 = (uint64_t *)v282;
            do
            {
              uint64_t v286 = *v284++;
              uint64_t v285 = v286;
              if (v286) {
                GTResourceTrackerResourceRead(a1, 80, v285, a3);
              }
              --v283;
            }
            while (v283);
          }
          GTResourceTrackerResourceRead(a1, 22, *((void *)v258 + 12), a3);
          uint64_t v287 = tracker_resource_get(a1, 22, *((void *)v258 + 12), a3);
          if (v287) {
            v287[4] = a3;
          }
          GTResourceTrackerResourceRead(a1, 22, *((void *)v258 + 13), a3);
          v288 = tracker_resource_get(a1, 22, *((void *)v258 + 13), a3);
          if (v288) {
            v288[4] = a3;
          }
LABEL_307:
          uint64_t v7 = *((void *)v258 + 15);
          goto LABEL_468;
        case -6113:
          id v158 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *v158, *a1, a1[1]);
          uint64_t v159 = v158[3];
LABEL_309:
          GTResourceTrackerResourceRead(a1, 22, v159, a3);
          uint64_t v7 = v158[4];
          goto LABEL_468;
        case -6112:
          long long v247 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v247, *a1, a1[1]);
          uint64_t v289 = tracker_resource_get(a1, 22, v247[3], a3);
          if (v289) {
            v289[4] = a3;
          }
          uint64_t v290 = tracker_resource_get(a1, 22, v247[4], a3);
          if (v290) {
            v290[4] = a3;
          }
          goto LABEL_467;
        case -6108:
          uint64_t v160 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v160, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v160[3], a3);
          uint64_t v161 = v160[5];
LABEL_315:
          GTResourceTrackerResourceRead(a1, 22, v161, a3);
          goto LABEL_316;
        case -6107:
          long long v247 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *v247, *a1, a1[1]);
          uint64_t v248 = v247[3];
LABEL_466:
          GTResourceTrackerResourceRead(a1, 22, v248, a3);
LABEL_467:
          uint64_t v7 = v247[5];
          goto LABEL_468;
        case -6106:
          uint64_t v160 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v160, *a1, a1[1]);
          uint64_t v291 = tracker_resource_get(a1, 22, v160[3], a3);
          if (v291) {
            v291[4] = a3;
          }
          v292 = tracker_resource_get(a1, 22, v160[5], a3);
          if (v292) {
            v292[4] = a3;
          }
LABEL_316:
          uint64_t v7 = v160[6];
          goto LABEL_468;
        case -6105:
        case -6101:
          unint64_t v25 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v25, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v25[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v25[16], a3);
          uint64_t v26 = tracker_resource_get(a1, 22, v25[21], a3);
          if (v26) {
            v26[4] = a3;
          }
          uint64_t v7 = v25[26];
          goto LABEL_468;
        case -6104:
          unint64_t v293 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 9, *v293, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v293[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v293[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v293[16], a3);
          uint64_t v28 = v293[20];
          goto LABEL_242;
        case -6103:
          int v294 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 9, *v294, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v294[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v294[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v294[16], a3);
          v295 = tracker_resource_get(a1, 22, v294[20], a3);
          if (v295) {
            v295[4] = a3;
          }
          uint64_t v7 = v294[33];
          goto LABEL_468;
        case -6102:
        case -6100:
          unint64_t v79 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v81 = a1[1];
          uint64_t v80 = a1[2];
          uint64_t v82 = *v79;
          uint64_t v83 = *a1;
          int v84 = 14;
          goto LABEL_117;
        case -6099:
        case -6098:
          unint64_t v79 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v81 = a1[1];
          uint64_t v80 = a1[2];
          uint64_t v82 = *v79;
          uint64_t v83 = *a1;
          int v84 = 13;
LABEL_117:
          GTResourceTrackerUsingResource(v80, v84, v82, v83, v81);
          GTResourceTrackerResourceRead(a1, 22, v79[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v79[8], a3);
          GTResourceTrackerResourceRead(a1, 22, v79[10], a3);
          __int16 v85 = tracker_resource_get(a1, 22, v79[12], a3);
          if (v85) {
            v85[4] = a3;
          }
          uint64_t v7 = v79[15];
          goto LABEL_468;
        case -6097:
          unint64_t v296 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 12, *v296, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v296[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v296[8], a3);
          unint64_t v297 = tracker_resource_get(a1, 22, v296[10], a3);
          if (v297) {
            v297[4] = a3;
          }
          uint64_t v7 = v296[12];
LABEL_468:
          uint64_t v8 = a1;
          int v9 = 22;
LABEL_469:
          GTResourceTrackerResourceRead(v8, v9, v7, a3);
          return;
        default:
          if (v6 == -7157) {
            goto LABEL_114;
          }
          int v42 = -7156;
          goto LABEL_113;
      }
    }
    if (v6 <= -15288)
    {
      if (v6 > -15341)
      {
        switch(v6)
        {
          case -15311:
            goto LABEL_78;
          case -15310:
            v529 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            v530 = tracker_resource_get(a1, 80, *((void *)v529 + 1), a3);
            if (v530) {
              *((unsigned char *)v530 + 48) = 1;
            }
            uint64_t v28 = *((void *)v529 + 1);
            goto LABEL_56;
          case -15309:
          case -15308:
            goto LABEL_130;
          default:
            if (v6 == -15340 || v6 == -15339) {
              goto LABEL_130;
            }
            break;
        }
        return;
      }
      if (v6 == -15366)
      {
        uint64_t v86 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        GTResourceTrackerResourceRead(a1, 16, *((void *)v86 + 1), a3);
        unint64_t v87 = tracker_resource_get(a1, 16, *((void *)v86 + 2), a3);
        if (v87) {
          v87[4] = a3;
        }
        GTResourceTrackerUsingResource(a1[2], 22, *((void *)v86 + 3), *a1, a1[1]);
        unsigned int v88 = v86[48];
LABEL_137:
        uint64_t v98 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v88, a1[1]);
        GTResourceTrackerUsingAccelerationStructureDescriptor(a1, v98, a3);
        return;
      }
      if (v6 != -15365)
      {
        if (v6 != -15342) {
          return;
        }
LABEL_78:
        uint64_t v58 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        int v59 = tracker_resource_get(a1, 22, *((void *)v58 + 1), a3);
        if (v59) {
          *((unsigned char *)v59 + 48) = 1;
        }
        uint64_t v28 = *((void *)v58 + 1);
        goto LABEL_242;
      }
LABEL_241:
      id v226 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
      GTResourceTrackerResourceRead(a1, 16, *((void *)v226 + 1), a3);
      uint64_t v28 = *((void *)v226 + 2);
LABEL_242:
      unint64_t v29 = a1;
      int v30 = 22;
      goto LABEL_243;
    }
    if (v6 <= -15274)
    {
      if (v6 > -15283)
      {
        if (v6 == -15282)
        {
          id v147 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v148 = a1[2];
          unsigned int v149 = GTTraceFunc_argumentBytesWithMap((void *)a2, v147[24], a1[1]);
          uint64_t v150 = *((void *)v147 + 2);
          if (v150)
          {
            id v151 = (uint64_t *)v149;
            uint64_t v153 = *a1;
            uint64_t v152 = a1[1];
            do
            {
              uint64_t v155 = *v151++;
              uint64_t v154 = v155;
              if (v155) {
                GTResourceTrackerUsingResource(v148, 22, v154, v153, v152);
              }
              --v150;
            }
            while (v150);
          }
          return;
        }
        int v60 = -15275;
      }
      else
      {
        if (v6 == -15287) {
          goto LABEL_241;
        }
        int v60 = -15284;
      }
      if (v6 != v60) {
        return;
      }
LABEL_105:
      uint64_t v74 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
      uint64_t v20 = a1[1];
      uint64_t v21 = *((void *)v74 + 1);
      uint64_t v22 = *a1;
      uint64_t v23 = a1[2];
      int v24 = 22;
    }
    else
    {
      if (v6 <= -15254)
      {
        if (v6 == -15273)
        {
          int v138 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v139 = a1[2];
          uint64_t v140 = GTTraceFunc_argumentBytesWithMap((void *)a2, v138[24], a1[1]);
          uint64_t v141 = *((void *)v138 + 2);
          if (v141)
          {
            unint64_t v142 = (uint64_t *)v140;
            uint64_t v144 = *a1;
            uint64_t v143 = a1[1];
            do
            {
              uint64_t v146 = *v142++;
              uint64_t v145 = v146;
              if (v146) {
                GTResourceTrackerUsingResource(v139, 22, v145, v144, v143);
              }
              --v141;
            }
            while (v141);
          }
        }
        else if (v6 == -15254)
        {
          uint64_t v73 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
          GTResourceTrackerUsingResidencySet(a1, v73);
        }
        return;
      }
      if (v6 == -15253)
      {
        uint64_t v132 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        id v133 = GTTraceFunc_argumentBytesWithMap((void *)a2, v132[16], a1[1]);
        uint64_t v134 = *((void *)v132 + 1);
        if (v134)
        {
          id v135 = (uint64_t *)v133;
          do
          {
            uint64_t v137 = *v135++;
            uint64_t v136 = v137;
            if (v137) {
              GTResourceTrackerUsingResidencySet(a1, v136);
            }
            --v134;
          }
          while (v134);
        }
        return;
      }
      if (v6 == -15217)
      {
LABEL_130:
        long long v92 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        uint64_t v93 = a1[2];
        int v24 = GTResourceTrackerGetResourceType(*((void *)v92 + 1), *a1);
        uint64_t v21 = *((void *)v92 + 1);
        uint64_t v22 = *a1;
        uint64_t v20 = a1[1];
        uint64_t v23 = v93;
      }
      else
      {
        int v42 = -7158;
LABEL_113:
        if (v6 != v42) {
          return;
        }
LABEL_114:
        uint64_t v77 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        uint64_t v78 = a1[2];
        uint64_t v21 = *(void *)v77;
LABEL_411:
        uint64_t v22 = *a1;
        uint64_t v20 = a1[1];
        uint64_t v23 = v78;
        int v24 = 2;
      }
    }
LABEL_412:
    GTResourceTrackerUsingResource(v23, v24, v21, v22, v20);
    return;
  }
  if (v6 <= -16157)
  {
    if (v6 <= -16359)
    {
      switch(v6)
      {
        case -20480:
        case -20473:
        case -20471:
        case -20470:
        case -20464:
        case -20456:
          goto LABEL_71;
        case -20479:
        case -20469:
          goto LABEL_58;
        case -20478:
        case -20477:
        case -20475:
        case -20472:
        case -20468:
        case -20467:
        case -20466:
        case -20465:
        case -20463:
        case -20462:
        case -20460:
        case -20459:
        case -20458:
          return;
        case -20476:
        case -20461:
          goto LABEL_55;
        case -20474:
          long long v31 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *(void *)v31;
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 39;
          goto LABEL_412;
        case -20457:
          long long v91 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *(void *)v91;
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 40;
          goto LABEL_412;
        default:
          switch(v6)
          {
            case -16382:
LABEL_44:
              int8x16_t v35 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v36 = v35[1];
              goto LABEL_272;
            case -16381:
LABEL_95:
              unsigned int v68 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v69 = v68[1];
              uint64_t v70 = a1;
              int v71 = 22;
              goto LABEL_286;
            case -16380:
LABEL_96:
              uint64_t v72 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 80, *((void *)v72 + 1), a3);
LABEL_185:
              uint64_t v28 = *((void *)v72 + 10);
              goto LABEL_242;
            case -16379:
              goto LABEL_55;
            case -16378:
              goto LABEL_94;
            case -16377:
              goto LABEL_46;
            default:
              int v90 = -16359;
LABEL_409:
              if (v6 != v90) {
                return;
              }
LABEL_410:
              id v417 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v78 = a1[2];
              uint64_t v21 = *((void *)v417 + 1);
              break;
          }
          goto LABEL_411;
      }
    }
    else
    {
      switch(v6)
      {
        case -16279:
          unint64_t v19 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *((void *)v19 + 1);
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 71;
          goto LABEL_412;
        case -16278:
        case -16263:
          goto LABEL_105;
        case -16277:
          unsigned int v418 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v419 = a1[2];
          __int32 v420 = GTTraceFunc_argumentBytesWithMap((void *)a2, v418[24], a1[1]);
          uint64_t v421 = *((void *)v418 + 2);
          if (v421)
          {
            v422 = (uint64_t *)v420;
            uint64_t v424 = *a1;
            uint64_t v423 = a1[1];
            do
            {
              uint64_t v426 = *v422++;
              uint64_t v425 = v426;
              if (v426) {
                GTResourceTrackerUsingResource(v419, 22, v425, v424, v423);
              }
              --v421;
            }
            while (v421);
          }
          break;
        case -16276:
        case -16261:
          goto LABEL_69;
        case -16275:
          id v427 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v428 = a1[2];
          v429 = GTTraceFunc_argumentBytesWithMap((void *)a2, v427[24], a1[1]);
          uint64_t v430 = *((void *)v427 + 2);
          if (v430)
          {
            id v431 = (uint64_t *)v429;
            uint64_t v433 = *a1;
            uint64_t v432 = a1[1];
            do
            {
              uint64_t v435 = *v431++;
              uint64_t v434 = v435;
              if (v435) {
                GTResourceTrackerUsingResource(v428, 80, v434, v433, v432);
              }
              --v430;
            }
            while (v430);
          }
          break;
        case -16274:
        case -16272:
        case -16259:
        case -16257:
          goto LABEL_60;
        case -16273:
          long long v436 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v437 = a1[2];
          long long v438 = GTTraceFunc_argumentBytesWithMap((void *)a2, v436[24], a1[1]);
          uint64_t v439 = *((void *)v436 + 2);
          if (v439)
          {
            v440 = (uint64_t *)v438;
            uint64_t v442 = *a1;
            uint64_t v441 = a1[1];
            do
            {
              uint64_t v444 = *v440++;
              uint64_t v443 = v444;
              if (v444) {
                GTResourceTrackerUsingResource(v437, 75, v443, v442, v441);
              }
              --v439;
            }
            while (v439);
          }
          break;
        case -16271:
          int64x2_t v445 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v446 = a1[2];
          int v447 = GTTraceFunc_argumentBytesWithMap((void *)a2, v445[24], a1[1]);
          uint64_t v448 = *((void *)v445 + 2);
          if (v448)
          {
            long long v449 = (uint64_t *)v447;
            uint64_t v451 = *a1;
            uint64_t v450 = a1[1];
            do
            {
              uint64_t v453 = *v449++;
              uint64_t v452 = v453;
              if (v453) {
                GTResourceTrackerUsingResource(v446, 75, v452, v451, v450);
              }
              --v448;
            }
            while (v448);
          }
          break;
        case -16270:
        case -16269:
        case -16268:
        case -16267:
        case -16266:
        case -16265:
        case -16264:
        case -16255:
        case -16253:
        case -16252:
        case -16251:
        case -16250:
        case -16247:
        case -16246:
        case -16245:
        case -16244:
        case -16243:
        case -16242:
        case -16241:
        case -16240:
        case -16239:
        case -16238:
        case -16237:
        case -16236:
        case -16235:
        case -16234:
        case -16233:
        case -16232:
        case -16231:
        case -16230:
        case -16229:
        case -16228:
        case -16227:
        case -16226:
        case -16225:
        case -16224:
        case -16223:
        case -16222:
        case -16221:
        case -16219:
        case -16218:
          return;
        case -16262:
          unint64_t v454 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v455 = a1[2];
          v456 = GTTraceFunc_argumentBytesWithMap((void *)a2, v454[24], a1[1]);
          uint64_t v457 = *((void *)v454 + 2);
          if (v457)
          {
            v458 = (uint64_t *)v456;
            uint64_t v460 = *a1;
            uint64_t v459 = a1[1];
            do
            {
              uint64_t v462 = *v458++;
              uint64_t v461 = v462;
              if (v462) {
                GTResourceTrackerUsingResource(v455, 22, v461, v460, v459);
              }
              --v457;
            }
            while (v457);
          }
          break;
        case -16260:
          unint64_t v463 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v464 = a1[2];
          long long v465 = GTTraceFunc_argumentBytesWithMap((void *)a2, v463[24], a1[1]);
          uint64_t v466 = *((void *)v463 + 2);
          if (v466)
          {
            long long v467 = (uint64_t *)v465;
            uint64_t v469 = *a1;
            uint64_t v468 = a1[1];
            do
            {
              uint64_t v471 = *v467++;
              uint64_t v470 = v471;
              if (v471) {
                GTResourceTrackerUsingResource(v464, 80, v470, v469, v468);
              }
              --v466;
            }
            while (v466);
          }
          break;
        case -16258:
          CFStringRef v472 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v473 = a1[2];
          CFStringRef v474 = GTTraceFunc_argumentBytesWithMap((void *)a2, v472[24], a1[1]);
          uint64_t v475 = *((void *)v472 + 2);
          if (v475)
          {
            CFStringRef v476 = (uint64_t *)v474;
            uint64_t v478 = *a1;
            uint64_t v477 = a1[1];
            do
            {
              uint64_t v480 = *v476++;
              uint64_t v479 = v480;
              if (v480) {
                GTResourceTrackerUsingResource(v473, 75, v479, v478, v477);
              }
              --v475;
            }
            while (v475);
          }
          break;
        case -16256:
          long long v481 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v482 = a1[2];
          v483 = GTTraceFunc_argumentBytesWithMap((void *)a2, v481[24], a1[1]);
          uint64_t v484 = *((void *)v481 + 2);
          if (v484)
          {
            v485 = (uint64_t *)v483;
            uint64_t v487 = *a1;
            uint64_t v486 = a1[1];
            do
            {
              uint64_t v489 = *v485++;
              uint64_t v488 = v489;
              if (v489) {
                GTResourceTrackerUsingResource(v482, 75, v488, v487, v486);
              }
              --v484;
            }
            while (v484);
          }
          break;
        case -16254:
          v490 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *((void *)v490 + 1);
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 34;
          goto LABEL_412;
        case -16249:
        case -16248:
        case -16217:
LABEL_29:
          uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 4);
          goto LABEL_468;
        case -16220:
          goto LABEL_221;
        case -16216:
          uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 2);
          goto LABEL_468;
        case -16215:
          long long v247 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v248 = v247[3];
          goto LABEL_466;
        case -16214:
          v491 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 80, *((void *)v491 + 1), *a1, a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v23 = a1[2];
          uint64_t v21 = *((void *)v491 + 3);
          uint64_t v22 = *a1;
          goto LABEL_61;
        case -16213:
          goto LABEL_130;
        case -16212:
          goto LABEL_55;
        case -16211:
          goto LABEL_44;
        case -16210:
          goto LABEL_95;
        case -16209:
          goto LABEL_96;
        default:
          switch(v6)
          {
            case -16337:
              v492 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v492 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 29;
              goto LABEL_412;
            case -16336:
              goto LABEL_105;
            case -16335:
              v493 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v494 = a1[2];
              v495 = GTTraceFunc_argumentBytesWithMap((void *)a2, v493[24], a1[1]);
              uint64_t v496 = *((void *)v493 + 2);
              if (v496)
              {
                v497 = (uint64_t *)v495;
                uint64_t v499 = *a1;
                uint64_t v498 = a1[1];
                do
                {
                  uint64_t v501 = *v497++;
                  uint64_t v500 = v501;
                  if (v501) {
                    GTResourceTrackerUsingResource(v494, 22, v500, v499, v498);
                  }
                  --v496;
                }
                while (v496);
              }
              break;
            case -16334:
              goto LABEL_69;
            case -16333:
              v502 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v503 = a1[2];
              v504 = GTTraceFunc_argumentBytesWithMap((void *)a2, v502[24], a1[1]);
              uint64_t v505 = *((void *)v502 + 2);
              if (v505)
              {
                v506 = (uint64_t *)v504;
                uint64_t v508 = *a1;
                uint64_t v507 = a1[1];
                do
                {
                  uint64_t v510 = *v506++;
                  uint64_t v509 = v510;
                  if (v510) {
                    GTResourceTrackerUsingResource(v503, 80, v509, v508, v507);
                  }
                  --v505;
                }
                while (v505);
              }
              break;
            case -16332:
            case -16330:
              goto LABEL_60;
            case -16331:
              v511 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v512 = a1[2];
              v513 = GTTraceFunc_argumentBytesWithMap((void *)a2, v511[24], a1[1]);
              uint64_t v514 = *((void *)v511 + 2);
              if (v514)
              {
                v515 = (uint64_t *)v513;
                uint64_t v517 = *a1;
                uint64_t v516 = a1[1];
                do
                {
                  uint64_t v519 = *v515++;
                  uint64_t v518 = v519;
                  if (v519) {
                    GTResourceTrackerUsingResource(v512, 75, v518, v517, v516);
                  }
                  --v514;
                }
                while (v514);
              }
              break;
            case -16329:
              v520 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v521 = a1[2];
              v522 = GTTraceFunc_argumentBytesWithMap((void *)a2, v520[24], a1[1]);
              uint64_t v523 = *((void *)v520 + 2);
              if (v523)
              {
                v524 = (uint64_t *)v522;
                uint64_t v526 = *a1;
                uint64_t v525 = a1[1];
                do
                {
                  uint64_t v528 = *v524++;
                  uint64_t v527 = v528;
                  if (v528) {
                    GTResourceTrackerUsingResource(v521, 75, v527, v526, v525);
                  }
                  --v523;
                }
                while (v523);
              }
              break;
            default:
              int v90 = -16358;
              goto LABEL_409;
          }
          break;
      }
    }
  }
  else
  {
    if (v6 > -16009)
    {
      if (v6 <= -15899)
      {
        switch(v6)
        {
          case -15977:
            uint64_t v72 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            id v156 = tracker_resource_get(a1, 80, *((void *)v72 + 1), a3);
            if (v156) {
              v156[4] = a3;
            }
            goto LABEL_185;
          case -15976:
            goto LABEL_55;
          case -15975:
          case -15974:
          case -15973:
          case -15972:
          case -15971:
          case -15970:
          case -15969:
          case -15968:
          case -15965:
            return;
          case -15967:
            goto LABEL_130;
          case -15966:
            goto LABEL_85;
          case -15964:
          case -15962:
            uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            uint64_t v8 = a1;
            int v9 = 57;
            goto LABEL_469;
          case -15963:
          case -15961:
            unsigned int v75 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 57, *((void *)v75 + 1), a3);
            goto LABEL_125;
          case -15960:
          case -15958:
            uint64_t v28 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_187;
          case -15959:
            id v157 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 57, *((void *)v157 + 1), a3);
            uint64_t v28 = *((void *)v157 + 4);
LABEL_187:
            unint64_t v29 = a1;
            int v30 = 57;
            goto LABEL_243;
          default:
            switch(v6)
            {
              case -16008:
                id v173 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v174 = v173[16];
                goto LABEL_202;
              case -16003:
                id v173 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v174 = v173[32];
LABEL_202:
                uint64_t v175 = a1[2];
                id v176 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v174, a1[1]);
                uint64_t v177 = *((void *)v173 + 1);
                uint64_t v178 = *a1;
                uint64_t v179 = a1[1];
                GTResourceTrackerUsingResourceArray(v175, 0, v176, v177, v178, v179);
                break;
              case -15995:
              case -15994:
              case -15993:
              case -15992:
                goto LABEL_55;
              case -15991:
              case -15990:
                goto LABEL_130;
              default:
                return;
            }
            return;
        }
      }
      if (v6 > -15822)
      {
        switch(v6)
        {
          case -15792:
            unint64_t v32 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v32 + 1), a3);
            goto LABEL_164;
          case -15791:
          case -15790:
          case -15789:
          case -15788:
          case -15787:
          case -15786:
            return;
          case -15785:
          case -15781:
            goto LABEL_58;
          case -15784:
            id v162 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v162 + 1), a3);
            uint64_t v7 = *((void *)v162 + 3);
            goto LABEL_468;
          case -15783:
          case -15782:
            goto LABEL_71;
          default:
            switch(v6)
            {
              case -15821:
                goto LABEL_85;
              case -15820:
                id v228 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                id v229 = GTTraceFunc_argumentBytesWithMap((void *)a2, v228[24], a1[1]);
                uint64_t v230 = *((void *)v228 + 1);
                if (v230)
                {
                  long long v231 = (uint64_t *)v229;
                  do
                  {
                    uint64_t v232 = *v231++;
                    GTResourceTrackerUsingResourceHeap(a1, v232, a3);
                    --v230;
                  }
                  while (v230);
                }
                break;
              case -15819:
                goto LABEL_88;
              case -15818:
                long long v33 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v34 = v33[32];
                goto LABEL_251;
              default:
                return;
            }
            break;
        }
        return;
      }
      switch(v6)
      {
        case -15898:
          id v180 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v181 = a1[2];
          long long v182 = GTTraceFunc_argumentBytesWithMap((void *)a2, v180[16], a1[1]);
          uint64_t v183 = *((void *)v180 + 1);
          if (v183)
          {
            uint64_t v184 = (uint64_t *)v182;
            uint64_t v186 = *a1;
            uint64_t v185 = a1[1];
            do
            {
              uint64_t v188 = *v184++;
              uint64_t v187 = v188;
              if (v188) {
                GTResourceTrackerUsingResource(v181, 73, v187, v186, v185);
              }
              --v183;
            }
            while (v183);
          }
          return;
        case -15897:
          uint64_t v189 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v190 = a1[2];
          id v191 = GTTraceFunc_argumentBytesWithMap((void *)a2, v189[16], a1[1]);
          uint64_t v192 = *((void *)v189 + 1);
          if (v192)
          {
            uint64_t v193 = (uint64_t *)v191;
            uint64_t v195 = *a1;
            uint64_t v194 = a1[1];
            do
            {
              uint64_t v197 = *v193++;
              uint64_t v196 = v197;
              if (v197) {
                GTResourceTrackerUsingResource(v190, 73, v196, v195, v194);
              }
              --v192;
            }
            while (v192);
          }
          return;
        case -15896:
        case -15895:
        case -15894:
        case -15893:
        case -15892:
        case -15891:
        case -15890:
        case -15889:
          return;
        case -15888:
          id v198 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *((void *)v198 + 1);
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 64;
          goto LABEL_412;
        case -15887:
          long long v37 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v37[1], a3);
          uint64_t v38 = v37[2];
          int8x16_t v39 = a1;
          int v40 = 80;
          goto LABEL_219;
        case -15886:
        case -15885:
          goto LABEL_58;
        default:
          if (v6 == -15878)
          {
            id v236 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v236 + 1), a3);
            uint64_t v28 = *((void *)v236 + 4);
          }
          else
          {
            if (v6 != -15877) {
              return;
            }
            int v76 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v76 + 1), a3);
            uint64_t v28 = *((void *)v76 + 2);
          }
          break;
      }
LABEL_56:
      unint64_t v29 = a1;
      int v30 = 80;
LABEL_243:
      id v227 = tracker_resource_get(v29, v30, v28, a3);
      if (v227) {
        v227[4] = a3;
      }
      return;
    }
    if (v6 > -16088)
    {
      switch(v6)
      {
        case -16047:
        case -16043:
          goto LABEL_88;
        case -16046:
        case -16042:
          goto LABEL_42;
        case -16045:
        case -16041:
          goto LABEL_85;
        case -16044:
          long long v163 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          long long v164 = GTTraceFunc_argumentBytesWithMap((void *)a2, v163[16], a1[1]);
          uint64_t v165 = *((void *)v163 + 1);
          if (v165)
          {
            uint64_t v166 = (uint64_t *)v164;
            do
            {
              uint64_t v167 = *v166++;
              GTResourceTrackerUsingResourceHeap(a1, v167, a3);
              --v165;
            }
            while (v165);
          }
          break;
        case -16040:
          uint64_t v168 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v169 = GTTraceFunc_argumentBytesWithMap((void *)a2, v168[16], a1[1]);
          uint64_t v170 = *((void *)v168 + 1);
          if (v170)
          {
            long long v171 = (uint64_t *)v169;
            do
            {
              uint64_t v172 = *v171++;
              GTResourceTrackerUsingResourceHeap(a1, v172, a3);
              --v170;
            }
            while (v170);
          }
          break;
        default:
          switch(v6)
          {
            case -16087:
              uint64_t v45 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v46 = a1[2];
              unsigned int v47 = GTTraceFunc_argumentBytesWithMap((void *)a2, v45[24], a1[1]);
              uint64_t v48 = *((void *)v45 + 2);
              if (v48)
              {
                unint64_t v49 = (uint64_t *)v47;
                uint64_t v51 = *a1;
                uint64_t v50 = a1[1];
                do
                {
                  uint64_t v53 = *v49++;
                  uint64_t v52 = v53;
                  if (v53) {
                    GTResourceTrackerUsingResource(v46, 22, v52, v51, v50);
                  }
                  --v48;
                }
                while (v48);
              }
              break;
            case -16086:
              id v199 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v200 = a1[2];
              uint64_t v201 = GTTraceFunc_argumentBytesWithMap((void *)a2, v199[24], a1[1]);
              uint64_t v202 = *((void *)v199 + 2);
              if (v202)
              {
                long long v203 = (uint64_t *)v201;
                uint64_t v205 = *a1;
                uint64_t v204 = a1[1];
                do
                {
                  uint64_t v207 = *v203++;
                  uint64_t v206 = v207;
                  if (v207) {
                    GTResourceTrackerUsingResource(v200, 80, v206, v205, v204);
                  }
                  --v202;
                }
                while (v202);
              }
              break;
            case -16085:
              id v208 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v209 = a1[2];
              v210 = GTTraceFunc_argumentBytesWithMap((void *)a2, v208[24], a1[1]);
              uint64_t v211 = *((void *)v208 + 2);
              if (v211)
              {
                id v212 = (uint64_t *)v210;
                uint64_t v214 = *a1;
                uint64_t v213 = a1[1];
                do
                {
                  uint64_t v216 = *v212++;
                  uint64_t v215 = v216;
                  if (v216) {
                    GTResourceTrackerUsingResource(v209, 75, v215, v214, v213);
                  }
                  --v211;
                }
                while (v211);
              }
              break;
            case -16084:
              long long v217 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v218 = a1[2];
              id v219 = GTTraceFunc_argumentBytesWithMap((void *)a2, v217[24], a1[1]);
              uint64_t v220 = *((void *)v217 + 2);
              if (v220)
              {
                uint64_t v221 = (uint64_t *)v219;
                uint64_t v223 = *a1;
                uint64_t v222 = a1[1];
                do
                {
                  uint64_t v225 = *v221++;
                  uint64_t v224 = v225;
                  if (v225) {
                    GTResourceTrackerUsingResource(v218, 75, v224, v223, v222);
                  }
                  --v220;
                }
                while (v220);
              }
              break;
            case -16083:
            case -16082:
            case -16081:
            case -16080:
              return;
            case -16079:
              goto LABEL_221;
            default:
              if (v6 == -16017) {
                goto LABEL_221;
              }
              break;
          }
          break;
      }
    }
    else
    {
      switch(v6)
      {
        case -16156:
        case -16155:
          goto LABEL_71;
        case -16148:
          goto LABEL_221;
        case -16147:
          goto LABEL_29;
        case -16146:
          id v158 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v159 = v158[2];
          goto LABEL_309;
        case -16145:
          uint64_t v160 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v161 = v160[4];
          goto LABEL_315;
        case -16144:
          uint64_t v160 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v160[2], a3);
          uint64_t v161 = v160[4];
          goto LABEL_315;
        case -16142:
          goto LABEL_105;
        case -16140:
          goto LABEL_69;
        case -16139:
        case -16138:
          goto LABEL_60;
        case -16133:
          goto LABEL_410;
        case -16131:
        case -16130:
        case -16129:
        case -16126:
        case -16125:
        case -16124:
          goto LABEL_58;
        default:
          return;
      }
    }
  }
}

uint64_t CommandBufferCommitIndex(uint64_t a1)
{
  unsigned int v1 = 0;
  if (a1)
  {
    while (1)
    {
      unsigned int v2 = atomic_load((unsigned int *)(a1 + 4));
      uint64_t v3 = v1 + (v2 >> 6) - 1;
      if ((int)v3 > 0) {
        break;
      }
      a1 = *(void *)(a1 + 40);
      unsigned int v1 = v3;
      if (!a1)
      {
        unsigned int v1 = v3;
        goto LABEL_6;
      }
    }
  }
  uint64_t v3 = 0;
LABEL_6:
  unint64_t v4 = v1 | (unint64_t)(v3 << 32);
LABEL_7:
  uint64_t v5 = a1 + 64;
  while (a1)
  {
    int v6 = HIDWORD(v4) - v4;
    if ((*(unsigned char *)(v5 + ((uint64_t)(HIDWORD(v4) - (int)v4) << 6) + 15) & 8) == 0) {
      break;
    }
    int v7 = *(_DWORD *)(v5 + ((uint64_t)v6 << 6) + 8);
    if (v7 > -15344)
    {
      unsigned int v10 = v7 + 15343;
      BOOL v11 = v10 > 0x1B;
      int v12 = (1 << v10) & 0xA000001;
      if (!v11 && v12 != 0) {
        return *(void *)(v5 + ((uint64_t)v6 << 6));
      }
    }
    else if (v7 == -16361 || v7 == -16202 || v7 == -15908)
    {
      return *(void *)(v5 + ((uint64_t)v6 << 6));
    }
    unsigned int v14 = atomic_load((unsigned int *)(a1 + 4));
    uint64_t v15 = (HIDWORD(v4) + 1);
    int v16 = v4 + (v14 >> 6) - 1;
    unint64_t v4 = (v15 << 32) | v4;
    if (v15 == v16)
    {
      unint64_t v4 = (v15 << 32) | v15;
      a1 = *(void *)(a1 + 40);
      goto LABEL_7;
    }
  }
  return -1;
}

void GatherCommandQueueResidencySetsUpToIndexInternal(apr_pool_t **a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      if ((int)v9 > 0) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v9 = 0;
LABEL_8:
  unint64_t v10 = 0;
  unint64_t v11 = v7 | (unint64_t)(v9 << 32);
LABEL_9:
  uint64_t v12 = v6 + 64;
  while (v6)
  {
    int v13 = HIDWORD(v11) - v11;
    if ((*(unsigned char *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v14 = v13;
    unint64_t v15 = *(void *)(v12 + ((uint64_t)v13 << 6));
    if (v15 >= a4) {
      break;
    }
    int v16 = *(_DWORD *)(v12 + (v14 << 6) + 8);
    if (*(char *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6) + 15) < 0 && v16 == -15251) {
      unint64_t v10 = v15;
    }
    unsigned int v18 = atomic_load((unsigned int *)(v6 + 4));
    uint64_t v19 = (HIDWORD(v11) + 1);
    int v20 = v11 + (v18 >> 6) - 1;
    unint64_t v11 = (v19 << 32) | v11;
    if (v19 == v20)
    {
      unint64_t v11 = (v19 << 32) | v19;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_9;
    }
  }
  uint64_t v21 = *(void *)(a2 + 32);
  unsigned int v22 = 0;
  if (v21)
  {
    while (1)
    {
      unsigned int v23 = atomic_load((unsigned int *)(v21 + 4));
      uint64_t v24 = v22 + (v23 >> 6) - 1;
      if ((int)v24 > 0) {
        break;
      }
      uint64_t v21 = *(void *)(v21 + 40);
      unsigned int v22 = v24;
      if (!v21)
      {
        unsigned int v22 = v24;
        goto LABEL_25;
      }
    }
  }
  uint64_t v24 = 0;
LABEL_25:
  unint64_t v25 = v22 | (unint64_t)(v24 << 32);
LABEL_26:
  uint64_t v26 = v21 + 64;
  while (v21)
  {
    int v27 = HIDWORD(v25) - v25;
    if ((*(unsigned char *)(v26 + ((uint64_t)(HIDWORD(v25) - (int)v25) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v28 = (unint64_t *)(v26 + ((uint64_t)v27 << 6));
    if (*v28 >= v10)
    {
      if (*v28 >= a4)
      {
        if ((*(unsigned char *)(v26 + ((uint64_t)(HIDWORD(v25) - (int)v25) << 6) + 15) & 0x80) != 0) {
          return;
        }
      }
      else
      {
        int v29 = *(_DWORD *)(v26 + ((uint64_t)v27 << 6) + 8);
        if (!a5 || (v29 & 0xFFFFFFFE) != 0xFFFFC46E)
        {
          switch(v29)
          {
            case -15252:
              int v30 = GTTraceFunc_argumentBytesWithMap(v28, *(unsigned __int8 *)(v26 + ((uint64_t)v27 << 6) + 13), a3) + 8;
              uint64_t v31 = *find_entry((uint64_t)a1, v30, 8uLL, 0);
              if (!v31 || !*(void *)(v31 + 32))
              {
                unint64_t v32 = (char *)apr_palloc(*a1, 8uLL);
                *(void *)unint64_t v32 = *(void *)v30;
                long long v33 = (apr_hash_t *)a1;
                unsigned int v34 = v32;
                goto LABEL_51;
              }
              break;
            case -15251:
              uint64_t v38 = GTTraceFunc_argumentBytesWithMap(v28, *(unsigned __int8 *)(v26 + ((uint64_t)v27 << 6) + 13), a3);
              int8x16_t v39 = GTTraceFunc_argumentBytesWithMap(v28, v38[16], a3);
              if (*((void *)v38 + 1))
              {
                int v40 = v39;
                uint64_t v41 = 0;
                unint64_t v42 = 0;
                do
                {
                  uint64_t v43 = *find_entry((uint64_t)a1, &v40[v41], 8uLL, 0);
                  if (!v43 || !*(void *)(v43 + 32))
                  {
                    if (v40)
                    {
                      uint64_t v44 = apr_palloc(*a1, 8uLL);
                      *uint64_t v44 = *(void *)&v40[8 * v42];
                    }
                    else
                    {
                      uint64_t v44 = 0;
                    }
                    apr_hash_set((apr_hash_t *)a1, v44, 8, v44);
                  }
                  ++v42;
                  v41 += 8;
                }
                while (*((void *)v38 + 1) > v42);
              }
              break;
            case -15250:
              unint64_t v32 = GTTraceFunc_argumentBytesWithMap(v28, *(unsigned __int8 *)(v26 + ((uint64_t)v27 << 6) + 13), a3) + 8;
              long long v33 = (apr_hash_t *)a1;
              unsigned int v34 = 0;
LABEL_51:
              apr_hash_set(v33, v32, 8, v34);
              break;
            case -15249:
              uint64_t v45 = GTTraceFunc_argumentBytesWithMap(v28, *(unsigned __int8 *)(v26 + ((uint64_t)v27 << 6) + 13), a3);
              uint64_t v46 = GTTraceFunc_argumentBytesWithMap(v28, v45[16], a3);
              if (*((void *)v45 + 1))
              {
                unsigned int v47 = v46;
                unint64_t v48 = 0;
                do
                {
                  apr_hash_set((apr_hash_t *)a1, v47, 8, 0);
                  ++v48;
                  v47 += 8;
                }
                while (*((void *)v45 + 1) > v48);
              }
              break;
            default:
              break;
          }
        }
      }
    }
    unsigned int v35 = atomic_load((unsigned int *)(v21 + 4));
    int v36 = v25 + (v35 >> 6);
    uint64_t v37 = (HIDWORD(v25) + 1);
    unint64_t v25 = (v37 << 32) | v25;
    if (v37 == v36 - 1)
    {
      unint64_t v25 = (v37 << 32) | v37;
      uint64_t v21 = *(void *)(v21 + 40);
      goto LABEL_26;
    }
  }
}

void AccelerationStructureViewerServer::Renderer::requestQueryRays(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9 = (unsigned int *)(a1 + 17016);
  uint64_t v74 = 0;
  unsigned int v75 = &v74;
  uint64_t v76 = 0x3032000000;
  uint64_t v77 = __Block_byref_object_copy__9838;
  uint64_t v78 = __Block_byref_object_dispose__9839;
  id v79 = [*(id *)(a1 + 24) newBufferWithBytes:a4 length:48 * a5 options:0];
  uint64_t v68 = 0;
  uint64_t v69 = &v68;
  uint64_t v70 = 0x3032000000;
  int v71 = __Block_byref_object_copy__9838;
  uint64_t v72 = __Block_byref_object_dispose__9839;
  id v73 = [*(id *)(a1 + 24) newBufferWithLength:416 * a5 options:0];
  std::mutex::lock((std::mutex *)(a1 + 48));
  long long v66 = *(_OWORD *)(a1 + 16992);
  uint64_t v67 = *(void *)(a1 + 17008);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  memcpy(__dst, (const void *)(a1 + 17024), sizeof(__dst));
  id v12 = *(id *)(a1 + 17576);
  std::mutex::unlock((std::mutex *)(a1 + 48));
  uint64_t v53 = v12;
  unsigned int v52 = AccelerationStructureViewerServer::Renderer::reserveUniformBufferIndex(a1, v12);
  uint64_t v13 = a1 + 8 * v52;
  uint64_t v14 = [*(id *)(v13 + 17608) contents];
  *(_OWORD *)uint64_t v14 = v66;
  v14[2] = v67;
  *((_DWORD *)v14 + 6) = v11;
  *((_DWORD *)v14 + 7) = v10;
  memcpy(v14 + 4, __dst, 0x1B0uLL);
  unint64_t v15 = *(void **)(a1 + 17640);
  if (!v15) {
    goto LABEL_14;
  }
  unint64_t v16 = v11 | (v10 << 32);
  uint64_t v17 = a1 + 17640;
  do
  {
    unint64_t v18 = v15[4];
    BOOL v19 = v18 >= v16;
    if (v18 >= v16) {
      int v20 = v15;
    }
    else {
      int v20 = v15 + 1;
    }
    if (v19) {
      uint64_t v17 = (uint64_t)v15;
    }
    unint64_t v15 = (void *)*v20;
  }
  while (*v20);
  if (v17 == a1 + 17640)
  {
LABEL_14:
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v21 = *(void *)(v17 + 32);
    unint64_t v22 = v17 + 40;
    if (v16 >= v21) {
      unint64_t v23 = v22;
    }
    else {
      unint64_t v23 = 0;
    }
  }
  uint64_t v24 = *(void **)(a1 + 8);
  uint64_t Intersector = AccelerationStructureViewerServer::Renderer::getIntersector(a1, 4, v23);
  if (*(void *)(Intersector + 32))
  {
    uint64_t v26 = *(void *)(a1 + 16840);
    if (v26) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v26 + 48))(v26, a1, a2, a3, 0, 0);
    }
    int v27 = (void *)v75[5];
    v75[5] = 0;

    uint64_t v28 = (void *)v69[5];
    v69[5] = 0;
    goto LABEL_47;
  }
  uint64_t v29 = Intersector;
  unsigned int v51 = a5;
  uint64_t v49 = a3;
  int v50 = a2;
  int v30 = (void *)(v13 + 17608);
  uint64_t v28 = [*(id *)(a1 + 17568) commandBufferWithDescriptor:*(void *)(a1 + 17552)];
  [v28 setLabel:@"ASVS Metal Intersector"];
  uint64_t v31 = [v28 computeCommandEncoder];
  unint64_t v32 = +[NSString stringWithFormat:@"ASVS Metal Intersector '%@'", &stru_7482F0];
  [v31 setLabel:v32];

  [v31 setComputePipelineState:*(void *)(v29 + 8)];
  [v31 setBuffer:*v30 offset:0 atIndex:1];
  uint64_t v33 = *(void *)(a1 + 17736);
  if (v33) {
    [v31 setAccelerationStructure:v33 atBufferIndex:2];
  }
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  id v34 = *(id *)(a1 + 17744);
  id v35 = [v34 countByEnumeratingWithState:&v61 objects:v80 count:16];
  if (v35)
  {
    id v36 = v35;
    uint64_t v37 = *(void *)v62;
    do
    {
      for (uint64_t i = 0; i != v36; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v62 != v37) {
          objc_enumerationMutation(v34);
        }
        [v31 useResource:*(void *)(*((void *)&v61 + 1) + 8 * i) usage:1];
      }
      id v36 = [v34 countByEnumeratingWithState:&v61 objects:v80 count:16];
    }
    while (v36);
  }

  uint64_t v39 = *(void *)(v29 + 24);
  if (v39)
  {
    [v31 setIntersectionFunctionTable:v39 atBufferIndex:3];
LABEL_32:
    (*(void (**)(void *, void *))(*v24 + 104))(v24, v31);
    goto LABEL_33;
  }
  uint64_t v40 = *(void *)(v29 + 16);
  if (v40)
  {
    [v31 setVisibleFunctionTable:v40 atBufferIndex:3];
    goto LABEL_32;
  }
LABEL_33:
  [v31 setBuffer:v75[5] offset:0 atIndex:4];
  [v31 setBuffer:v69[5] offset:0 atIndex:5];
  [v31 setBuffer:*(void *)(a1 + 17752) offset:0 atIndex:6];
  uint64_t v41 = v24[23];
  if (v24[24] != v41)
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    do
    {
      [v31 useResource:*(void *)(v41 + v42 + 24) usage:1];
      [v31 useResource:*(void *)(v41 + v42 + 40) usage:1];
      [v31 useResource:*(void *)(v41 + v42 + 56) usage:1];
      uint64_t v44 = *(void *)(v41 + v42 + 72);
      if (v44) {
        [v31 useResource:v44 usage:1];
      }
      uint64_t v45 = *(void *)(v41 + v42 + 88);
      if (v45) {
        [v31 useResource:v45 usage:1];
      }
      uint64_t v46 = *(void *)(v41 + v42 + 104);
      if (v46) {
        [v31 useResource:v46 usage:1];
      }
      uint64_t v47 = *(void *)(v41 + v42 + 152);
      if (v47) {
        [v31 useResource:v47 usage:1];
      }
      uint64_t v48 = *(void *)(v41 + v42 + 168);
      if (v48) {
        [v31 useResource:v48 usage:1];
      }
      ++v43;
      uint64_t v41 = v24[23];
      v42 += 184;
    }
    while (v43 < 0xD37A6F4DE9BD37A7 * ((v24[24] - v41) >> 3));
  }
  [v31 waitForFence:*(void *)(a1 + 17528)];
  uint64_t v59 = v51;
  int64x2_t v60 = vdupq_n_s64(1uLL);
  id v57 = [*(id *)(v29 + 8) maxTotalThreadsPerThreadgroup];
  int64x2_t v58 = v60;
  [v31 dispatchThreads:&v59 threadsPerThreadgroup:&v57];
  [v31 updateFence:*(void *)(a1 + 17528)];
  [v31 endEncoding];

  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = ___ZN33AccelerationStructureViewerServer8Renderer16requestQueryRaysE15ASVQueryRayTypeyP6ASVRayj_block_invoke;
  v54[3] = &unk_7472C0;
  v54[6] = a1;
  v54[7] = v49;
  int v55 = v50;
  unsigned int v56 = v51;
  v54[4] = &v68;
  v54[5] = &v74;
  [v28 addCompletedHandler:v54];
  [v28 commit];
LABEL_47:

  AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(a1, v52, v53);
  _Block_object_dispose(&v68, 8);

  _Block_object_dispose(&v74, 8);
}

uint64_t __Block_byref_object_copy__9838(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9839(uint64_t a1)
{
}

uint64_t AccelerationStructureViewerServer::Renderer::reserveUniformBufferIndex(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 17520;
  while (*(unsigned char *)(v5 + v4))
  {
    if (++v4 == 3)
    {
      dispatch_semaphore_signal(v3);
      LOBYTE(v4) = -1;
      goto LABEL_6;
    }
  }
  *(unsigned char *)(v5 + v4) = 1;
LABEL_6:
  std::mutex::unlock((std::mutex *)(a1 + 48));

  return v4;
}

uint64_t AccelerationStructureViewerServer::Renderer::getIntersector(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  unsigned int v7 = *(uint64_t **)(a1 + 17696);
  if (!v7) {
    goto LABEL_13;
  }
  unsigned int v8 = (uint64_t *)(a1 + 17696);
  do
  {
    int v9 = *((_DWORD *)v7 + 8);
    if (v9 >= a2)
    {
      if (v9 <= a2)
      {
        if (v7[5] < a3) {
          ++v7;
        }
        else {
          unsigned int v8 = v7;
        }
      }
      else
      {
        unsigned int v8 = v7;
      }
    }
    else
    {
      ++v7;
    }
    unsigned int v7 = (uint64_t *)*v7;
  }
  while (v7);
  if (v8 == (uint64_t *)(a1 + 17696) || (int v10 = *((_DWORD *)v8 + 8), v10 > a2) || v10 >= a2 && v8[5] > a3) {
LABEL_13:
  }
    operator new();
  uint64_t v11 = v8[6];
  std::mutex::unlock(v6);
  return v11;
}

void AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(uint64_t a1, unsigned int a2, void *a3)
{
  if (a2 != 3)
  {
    uint64_t v6 = (std::mutex *)(a1 + 48);
    dsema = a3;
    std::mutex::lock(v6);
    *(unsigned char *)(a1 + a2 + 17520) = 0;
    std::mutex::unlock(v6);
    dispatch_semaphore_signal(dsema);
  }
}

void ___ZN33AccelerationStructureViewerServer8Renderer16requestQueryRaysE15ASVQueryRayTypeyP6ASVRayj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = ___ZN33AccelerationStructureViewerServer8Renderer16requestQueryRaysE15ASVQueryRayTypeyP6ASVRayj_block_invoke_2;
  block[3] = &unk_747298;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v7 = v2;
  uint64_t v8 = v4;
  uint64_t v9 = *(void *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 32);
  dispatch_async(v3, block);
}

void ___ZN33AccelerationStructureViewerServer8Renderer16requestQueryRaysE15ASVQueryRayTypeyP6ASVRayj_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(v2 + 16840);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, void, void, id, void))(*(void *)v3 + 48))(v3, v2, *(unsigned int *)(a1 + 64), *(void *)(a1 + 56), [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) contents], *(unsigned int *)(a1 + 68));
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;

  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void std::default_delete<AccelerationStructureViewerServer::Intersector>::operator()[abi:nn180100](id *a1)
{
  operator delete();
}

BOOL AccelerationStructureViewerServer::Renderer::requestSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = __chkstk_darwin(a1, a2, a3, a4);
  id v6 = v5;
  uint64_t v162 = 0;
  long long v163 = (id *)&v162;
  uint64_t v164 = 0x3032000000;
  uint64_t v165 = __Block_byref_object_copy__9838;
  uint64_t v166 = __Block_byref_object_dispose__9839;
  id v167 = 0;
  std::mutex::lock((std::mutex *)(v4 + 48));
  if (*(void *)(v4 + 17712)
    || *(void *)(v4 + 17752)
    && (!*(void *)(v4 + 16840)
     || (unint64_t v39 = atomic_load((unint64_t *)(v4 + 40)),
         unint64_t v40 = atomic_load((unint64_t *)(v4 + 32)),
         v39 < v40 + 32)))
  {
    uint64_t v8 = 120;
    while (*(double *)(v4 + v8) >= *(double *)(v4 + 17512))
    {
      v8 += 8;
      if (v8 == 376)
      {
        atomic_store(0, (unsigned __int8 *)(v4 + 17544));
        break;
      }
    }
    if (*(unsigned char *)(v4 + 16996) && *(void *)(v4 + 16840))
    {
      objc_storeStrong(v163 + 5, *(id *)(v4 + 17576));
      std::mutex::unlock((std::mutex *)(v4 + 48));
      unsigned int v9 = AccelerationStructureViewerServer::Renderer::reserveUniformBufferIndex(v4, v163[5]);
      double Current = CFAbsoluteTimeGetCurrent();
      std::mutex::lock((std::mutex *)(v4 + 48));
      unint64_t v141 = *(void *)(v4 + 112);
      uint64_t v130 = *(void *)(v4 + 16840);
      char v128 = *(unsigned char *)(v4 + 16849);
      int v129 = *(unsigned __int8 *)(v4 + 17504);
      __int32 v11 = *(_DWORD *)(v4 + 16852);
      uint32x2_t v155 = *(uint32x2_t *)(v4 + 16856);
      simd_float4 v151 = *(simd_float4 *)(v4 + 16880);
      simd_float4 v153 = *(simd_float4 *)(v4 + 16864);
      simd_float4 v149 = *(simd_float4 *)(v4 + 16912);
      simd_float4 v150 = *(simd_float4 *)(v4 + 16896);
      long long v145 = *(_OWORD *)(v4 + 16944);
      long long v146 = *(_OWORD *)(v4 + 16928);
      float32x4_t v147 = *(float32x4_t *)(v4 + 16976);
      float32x4_t v148 = *(float32x4_t *)(v4 + 16960);
      int v133 = *(_DWORD *)(v4 + 16992);
      unsigned int v12 = *(unsigned __int8 *)(v4 + 16996);
      long long v13 = *(_OWORD *)(v4 + 16997);
      *(_DWORD *)&v205[15] = *(_DWORD *)(v4 + 17012);
      *(_OWORD *)uint64_t v205 = v13;
      uint64_t v135 = *(unsigned int *)(v4 + 17016);
      uint64_t v134 = *(unsigned int *)(v4 + 17020);
      char v138 = *(unsigned char *)(v4 + 17024);
      uint64_t v132 = *(void *)(v4 + 17025);
      char v136 = *(unsigned char *)(v4 + 17033);
      char v140 = *(unsigned char *)(v4 + 17034);
      int v131 = *(_DWORD *)(v4 + 17036);
      int v14 = *(_DWORD *)(v4 + 17040);
      unsigned int v144 = *(unsigned __int8 *)(v4 + 17044);
      char v142 = *(unsigned char *)(v4 + 17035);
      unsigned int v143 = *(unsigned __int8 *)(v4 + 17045);
      memcpy(v204, (const void *)(v4 + 17046), sizeof(v204));
      memcpy(v161, (const void *)(v4 + 8632), sizeof(v161));
      memcpy(__dst, (const void *)(v4 + 440), sizeof(__dst));
      std::mutex::unlock((std::mutex *)(v4 + 48));
      unsigned int v15 = v9;
      unsigned int v16 = v12 - 1;
      unsigned int v17 = v12 - 1 + v155.i32[0];
      if (v17 < v12
        || (unsigned __int32 v18 = v16 + v155.i32[1], v16 + v155.i32[1] < v12)
        || (uint64_t v19 = v4 + 8 * v15, (v20 = *(void **)(v19 + 17584)) == 0))
      {
LABEL_75:
        AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(v4, v15, v163[5]);
        goto LABEL_76;
      }
      unsigned int v127 = v15;
      uint64_t v126 = v6;
      unint64_t v21 = (float32x2_t *)[v20 contents];
      if (!v21) {
        goto LABEL_92;
      }
      unint64_t v23 = v21;
      uint64_t v122 = (void *)(v19 + 17584);
      v21[1].i32[0] = v11;
      *(float *)v22.i32 = (float)v12;
      float32x2_t v24 = (float32x2_t)vdup_lane_s32(v22, 0);
      v21[2] = vdiv_f32(v24, vcvt_f32_u32(v155));
      ++v21->i32[0];
      double v25 = CFAbsoluteTimeGetCurrent();
      unsigned int v26 = v12 * v12;
      unsigned int v27 = v23->i32[0] % (v12 * v12);
      if (v12)
      {
        uint64_t v28 = 0;
        if (v26 <= 1) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = v26;
        }
        double v30 = 1.79769313e308;
        do
        {
          if (v25 - *(double *)&v161[v28] > 1.0 && __dst[v28] < v30)
          {
            double v30 = __dst[v28];
            LOWORD(v27) = v28;
          }
          ++v28;
        }
        while (v29 != v28);
      }
      uint64_t v124 = v17 / v12;
      int v31 = (unsigned __int16)v27;
      uint64_t v123 = v18 / v12;
      do
      {
        if (v25 - *(double *)&v161[(unsigned __int16)v27] >= 1.0) {
          break;
        }
        unsigned int v27 = (unsigned __int16)(v27 + 1) % v26;
      }
      while (v27 != v31);
      unsigned int v32 = (unsigned __int16)v27;
      v23->i32[1] = (unsigned __int16)v27;
      *(_OWORD *)v23[8].f32 = v146;
      *(_OWORD *)v23[10].f32 = v145;
      v206.columns[3] = v149;
      *(float32x4_t *)v23[12].f32 = v148;
      *(float32x4_t *)v23[14].f32 = v147;
      v206.columns[1] = v151;
      v206.columns[0] = v153;
      v206.columns[2] = v150;
      simd_float4x4 v207 = __invert_f4(v206);
      uint64_t v33 = 0;
      *(simd_float4x4 *)v23[24].f32 = v207;
      float32x4_t v34 = *(float32x4_t *)v23[8].f32;
      float32x4_t v35 = *(float32x4_t *)v23[10].f32;
      float32x4_t v36 = *(float32x4_t *)v23[12].f32;
      float32x4_t v37 = *(float32x4_t *)v23[14].f32;
      v168[0] = v153;
      v168[1] = v151;
      v168[2] = v150;
      v168[3] = v149;
      do
      {
        *(float32x4_t *)&v186[v33 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(v168[v33])), v35, *(float32x2_t *)&v168[v33], 1), v36, (float32x4_t)v168[v33], 2), v37, (float32x4_t)v168[v33], 3);
        ++v33;
      }
      while (v33 != 4);
      simd_float4x4 v208 = *(simd_float4x4 *)v186;
      *(_OWORD *)v23[16].f32 = *(_OWORD *)v186;
      *(simd_float4 *)v23[18].f32 = v208.columns[1];
      *(simd_float4 *)v23[20].f32 = v208.columns[2];
      *(simd_float4 *)v23[22].f32 = v208.columns[3];
      *(simd_float4x4 *)v23[32].f32 = __invert_f4(v208);
      float32x4_t v38 = vdivq_f32(v147, v148);
      v23[3].i32[0] = v38.i32[2];
      v23[3].f32[1] = vmuls_lane_f32(v148.f32[2], v38, 2) / (float)(v148.f32[2] + 1.0);
      if ((int)v12 <= 7)
      {
        if (v12 == 2)
        {
          uint64_t v41 = (unsigned __int16)v27;
          uint64_t v42 = (unsigned __int8 *)&ASVDither2x2;
        }
        else
        {
          if (v12 != 4)
          {
LABEL_42:
            v43.i32[0] = v32 % v12;
            v43.i32[1] = v32 / v12;
            v23[4] = v24;
            v23[5] = vcvt_f32_s32(v43);
            v44.i64[0] = v155.u32[0];
            v44.i64[1] = v155.u32[1];
            __asm { FMOV            V1.2D, #1.0 }
            v23[6] = vcvt_f32_f64(vdivq_f64(_Q1, vcvtq_f64_u64(v44)));
            uint64_t v125 = v4 + 8 * v127;
            uint64_t v49 = [*(id *)(v125 + 17608) contents];
            _DWORD *v49 = v133;
            *((unsigned char *)v49 + 4) = v12;
            *(_OWORD *)((char *)v49 + 5) = *(_OWORD *)v205;
            v49[5] = *(_DWORD *)&v205[15];
            v49[6] = v135;
            v49[7] = v134;
            *((unsigned char *)v49 + 32) = v138;
            *(void *)((char *)v49 + 33) = v132;
            *((unsigned char *)v49 + 41) = v136;
            *((unsigned char *)v49 + 42) = v140;
            *((unsigned char *)v49 + 43) = v142;
            v49[11] = v131;
            v49[12] = v14;
            *((unsigned char *)v49 + 52) = v144;
            *((unsigned char *)v49 + 53) = v143;
            memcpy((char *)v49 + 54, v204, 0x19AuLL);
            int v50 = *(void **)(v4 + 17640);
            if (v50)
            {
              unint64_t v51 = v135 | (v134 << 32);
              uint64_t v52 = v4 + 17640;
              unint64_t v53 = v141;
              do
              {
                unint64_t v54 = v50[4];
                _CF = v54 >= v51;
                if (v54 >= v51) {
                  unsigned int v56 = v50;
                }
                else {
                  unsigned int v56 = v50 + 1;
                }
                if (_CF) {
                  uint64_t v52 = (uint64_t)v50;
                }
                int v50 = (void *)*v56;
              }
              while (*v56);
              if (v52 == v4 + 17640)
              {
                unint64_t v59 = 0;
              }
              else
              {
                unint64_t v57 = *(void *)(v52 + 32);
                unint64_t v58 = v52 + 40;
                if (v51 >= v57) {
                  unint64_t v59 = v58;
                }
                else {
                  unint64_t v59 = 0;
                }
              }
            }
            else
            {
              unint64_t v59 = 0;
              unint64_t v53 = v141;
            }
            unsigned __int8 v60 = (v53 < 3) | v136;
            int v61 = v138 & 1;
            if (*(void *)(v4 + 17536))
            {
              if ((((v53 < 3) | v136) & (v61 == 0)) == 0)
              {
                uint64_t Intersector = AccelerationStructureViewerServer::Renderer::getIntersector(v4, 2, v59);
                uint64_t v65 = 0;
                if (v53 < 3) | v136 & 1 && (v138)
                {
                  uint64_t v67 = Intersector;
                  uint64_t v65 = AccelerationStructureViewerServer::Renderer::getIntersector(v4, 3, v4 + 17656);
                  uint64_t Intersector = v67;
                  int v61 = v138 & 1;
                  unsigned __int8 v60 = (v53 < 3) | v136;
                  unsigned int v15 = v127;
                  if (!v65) {
                    goto LABEL_78;
                  }
                  goto LABEL_70;
                }
                goto LABEL_69;
              }
              int v62 = 3;
LABEL_68:
              uint64_t Intersector = AccelerationStructureViewerServer::Renderer::getIntersector(v4, v62, v59);
              uint64_t v65 = 0;
LABEL_69:
              unsigned int v15 = v127;
LABEL_70:
              if (Intersector)
              {
                if (*(void *)(Intersector + 32))
                {
                  id v6 = v126;
                  if (v130 && !v129)
                  {
                    (*(void (**)(void))(*(void *)v130 + 80))();
                    std::mutex::lock((std::mutex *)(v4 + 48));
                    *(unsigned char *)(v4 + 17504) = 1;
                    std::mutex::unlock((std::mutex *)(v4 + 48));
                    unsigned int v15 = v127;
                  }
                  goto LABEL_75;
                }
                uint64_t v137 = v65;
                uint64_t v139 = Intersector;
                if (v129 && v130)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v130 + 88))(v130, v4);
                  std::mutex::lock((std::mutex *)(v4 + 48));
                  *(unsigned char *)(v4 + 17504) = 0;
                  std::mutex::unlock((std::mutex *)(v4 + 48));
                  goto LABEL_83;
                }
                if (*(void *)(Intersector + 8))
                {
LABEL_83:
                  v186[0] = 0;
                  long long v200 = 0u;
                  long long v201 = 0u;
                  long long v202 = 0u;
                  id v203 = 0;
                  char v72 = v144;
                  if (v144 <= 1) {
                    char v72 = 1;
                  }
                  v186[16] = v72;
                  char v73 = v143;
                  if (v143 <= 1) {
                    char v73 = 1;
                  }
                  v186[17] = v73;
                  memcpy(&v186[24], &v204[2], 0x198uLL);
                  *(_DWORD *)&v186[4] = v14;
                  v186[1] = v61;
                  *(void *)&v186[8] = atomic_fetch_add((atomic_ullong *volatile)(v4 + 40), 1uLL);
                  char v187 = v12;
                  char v188 = v128;
                  __int16 v189 = v27;
                  __int32 v190 = v11;
                  uint32x2_t v191 = v155;
                  simd_float4 v192 = v153;
                  simd_float4 v193 = v151;
                  simd_float4 v194 = v150;
                  simd_float4 v195 = v149;
                  long long v196 = v146;
                  long long v197 = v145;
                  float32x4_t v198 = v148;
                  float32x4_t v199 = v147;
                  uint64_t v74 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:70 width:v124 height:v123 mipmapped:0];
                  [v74 setPixelFormat:55];
                  [v74 setStorageMode:2];
                  [v74 setUsage:3];
                  id v75 = [*(id *)(v4 + 24) newTextureWithDescriptor:v74];
                  uint64_t v76 = (void *)*((void *)&v200 + 1);
                  *((void *)&v200 + 1) = v75;

                  [*((id *)&v200 + 1) setLabel:@"ASVBVH-PreviousDepth"];
                  if (v60)
                  {
                    if (v142) {
                      uint64_t v77 = 113;
                    }
                    else {
                      uint64_t v77 = 123;
                    }
                    [v74 setPixelFormat:v77];
                    [v74 setUsage:3];
                    [v74 setStorageMode:2];
                    id v78 = [*(id *)(v4 + 24) newTextureWithDescriptor:v74];
                    id v79 = (void *)v201;
                    *(void *)&long long v201 = v78;

                    [(id)v201 setLabel:@"ASVBVH-Traversals"];
                  }
                  else
                  {
                    uint64_t v80 = (void *)v201;
                    *(void *)&long long v201 = 0;
                  }
                  if (v53 < 0xB)
                  {
                    [v74 setPixelFormat:123];
                    [v74 setStorageMode:2];
                    [v74 setUsage:3];
                    id v88 = [*(id *)(v4 + 24) newTextureWithDescriptor:v74];
                    char v89 = (void *)*((void *)&v201 + 1);
                    *((void *)&v201 + 1) = v88;

                    [*((id *)&v201 + 1) setLabel:@"ASVBVH-Hit"];
                    if (v53 >= 3 && (v140 & 1) != 0)
                    {
                      [v74 setPixelFormat:123];
                      [v74 setStorageMode:2];
                      [v74 setUsage:3];
                      id v90 = [*(id *)(v4 + 24) newTextureWithDescriptor:v74];
                      long long v91 = (void *)v202;
                      *(void *)&long long v202 = v90;

                      uint64_t v86 = (void *)v202;
                      CFStringRef v87 = @"ASVBVH-Data";
                      goto LABEL_106;
                    }
                    long long v92 = (void *)v202;
                    *(void *)&long long v202 = 0;
                  }
                  else
                  {
                    if (v186[16] != 1)
                    {
                      if (v142) {
                        uint64_t v81 = 125;
                      }
                      else {
                        uint64_t v81 = 90;
                      }
                      [v74 setPixelFormat:v81];
                      [v74 setStorageMode:2];
                      [v74 setUsage:3];
                      id v82 = [*(id *)(v4 + 24) newTextureWithDescriptor:v74];
                      uint64_t v83 = (void *)*((void *)&v202 + 1);
                      *((void *)&v202 + 1) = v82;

                      [*((id *)&v202 + 1) setLabel:@"ASVBVH-Material"];
                    }
                    if (v186[17] != 1)
                    {
                      [v74 setPixelFormat:13];
                      [v74 setStorageMode:2];
                      [v74 setUsage:3];
                      id v84 = [*(id *)(v4 + 24) newTextureWithDescriptor:v74];
                      __int16 v85 = v203;
                      id v203 = v84;

                      uint64_t v86 = v203;
                      CFStringRef v87 = @"ASVBVH-SelectionMask";
LABEL_106:
                      [v86 setLabel:v87];
                    }
                  }
                  std::mutex::lock((std::mutex *)(v4 + 48));
                  *(_WORD *)(v4 + 2 * (v186[8] & 0x1F) + 376) = v27;
                  *(CFAbsoluteTime *)(v4 + 8632 + 8 * (unsigned __int16)v27) = CFAbsoluteTimeGetCurrent();
                  std::mutex::unlock((std::mutex *)(v4 + 48));
                  if ((*(_DWORD *)v139 - 2) >= 4)
                  {
                    if (*(_DWORD *)v139 >= 2u)
                    {
                      BOOL v68 = 0;
                      id v6 = v126;
LABEL_156:

                      AccelerationStructureViewer::Sample::~Sample((id *)v186);
                      goto LABEL_77;
                    }
                    uint64_t v96 = *(void **)(v4 + 8);
                    uint64_t v97 = [v126 commandBufferWithDescriptor:*(void *)(v4 + 17552)];
                    [v97 setLabel:@"ASVS Generic Intersector"];
                    id v156 = v97;
                    uint64_t v98 = [v97 computeCommandEncoder];
                    __int16 v99 = [*(id *)(v139 + 8) label];
                    int64_t v100 = +[NSString stringWithFormat:@"ASV BVH HeatMap '%@'", v99];
                    [v98 setLabel:v100];

                    [v98 setComputePipelineState:*(void *)(v139 + 8)];
                    [v98 setTexture:*((void *)&v200 + 1) atIndex:1];
                    [v98 setTexture:(void)v201 atIndex:2];
                    [v98 setTexture:*((void *)&v201 + 1) atIndex:3];
                    [v98 setTexture:(void)v202 atIndex:4];
                    [v98 setTexture:*((void *)&v202 + 1) atIndex:5];
                    [v98 setTexture:v203 atIndex:6];
                    [v98 setBuffer:*v122 offset:0 atIndex:0];
                    [v98 setBuffer:*(void *)(v125 + 17608) offset:0 atIndex:1];
                    uint64_t v101 = *(void *)(v4 + 17736);
                    if (v101) {
                      [v98 setAccelerationStructure:v101 atBufferIndex:3];
                    }
                    uint64_t v102 = *(void *)(v139 + 16);
                    if (v102)
                    {
                      [v98 setVisibleFunctionTable:v102 atBufferIndex:4];
                      (*(void (**)(void *, void *))(*v96 + 104))(v96, v98);
                    }
                    [v98 setBuffer:*(void *)(v4 + 17752) offset:0 atIndex:5];
                    uint64_t v103 = v96[23];
                    if (v96[24] != v103)
                    {
                      uint64_t v104 = 0;
                      unint64_t v105 = 0;
                      do
                      {
                        [v98 useResource:*(void *)(v103 + v104 + 24) usage:1];
                        [v98 useResource:*(void *)(v103 + v104 + 40) usage:1];
                        [v98 useResource:*(void *)(v103 + v104 + 56) usage:1];
                        uint64_t v106 = *(void *)(v103 + v104 + 72);
                        if (v106) {
                          [v98 useResource:v106 usage:1];
                        }
                        uint64_t v107 = *(void *)(v103 + v104 + 88);
                        if (v107) {
                          [v98 useResource:v107 usage:1];
                        }
                        uint64_t v108 = *(void *)(v103 + v104 + 104);
                        if (v108) {
                          [v98 useResource:v108 usage:1];
                        }
                        uint64_t v109 = *(void *)(v103 + v104 + 152);
                        if (v109) {
                          [v98 useResource:v109 usage:1];
                        }
                        uint64_t v110 = *(void *)(v103 + v104 + 168);
                        if (v110) {
                          [v98 useResource:v110 usage:1];
                        }
                        ++v105;
                        uint64_t v103 = v96[23];
                        v104 += 184;
                      }
                      while (v105 < 0xD37A6F4DE9BD37A7 * ((v96[24] - v103) >> 3));
                    }
                    v159[0] = v124;
                    v159[1] = v123;
                    BOOL v68 = 1;
                    v159[2] = 1;
                    int64x2_t v157 = vdupq_n_s64(8uLL);
                    uint64_t v158 = 1;
                    [v98 dispatchThreads:v159 threadsPerThreadgroup:&v157];
                    [v98 endEncoding];

                    AccelerationStructureViewer::Sample::Sample(v169, (id *)v186);
                    uint64_t v93 = v156;
                    AccelerationStructureViewerServer::Renderer::commitSample((void *)v4, v127, v169, v156, v163[5], Current);
                    AccelerationStructureViewer::Sample::~Sample(v169);
                    id v6 = v126;
LABEL_155:

                    goto LABEL_156;
                  }
                  uint64_t v93 = [v126 commandBufferWithDescriptor:*(void *)(v4 + 17552)];
                  [v93 setLabel:@"ASVS Metal Intersector"];
                  if (*(void *)(v4 + 17536))
                  {
                    int v152 = v61;
                    if (v61)
                    {
                      AccelerationStructureViewer::Sample::Sample(v185, (id *)v186);
                      unsigned int v94 = v127;
                      uint64_t v95 = AccelerationStructureViewerServer::Renderer::metalIntersectorPass(v4, v127, (uint64_t)v185, v93, v137, v49, 0, 0);
                      AccelerationStructureViewer::Sample::~Sample(v185);
                      id v6 = v126;
                      uint64_t v154 = (void *)v95;
                      if (!v95)
                      {
                        AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(v4, v127, v163[5]);
                        BOOL v68 = 0;
                        goto LABEL_155;
                      }
                    }
                    else
                    {
                      uint64_t v154 = 0;
                      id v6 = v126;
                      unsigned int v94 = v127;
                    }
                    AccelerationStructureViewer::Sample::Sample(v184, (id *)v186);
                    uint64_t v113 = AccelerationStructureViewerServer::Renderer::metalIntersectorPass(v4, v94, (uint64_t)v184, v93, v139, v49, 1, 1);
                    AccelerationStructureViewer::Sample::~Sample(v184);
                    BOOL v68 = v113 != 0;
                    unsigned int v114 = v113;
                    if (v113)
                    {
                      if (*(_DWORD *)v139 == 3 || v152)
                      {
                        uint64_t v117 = v154;
                        if (!v152)
                        {
                          id v118 = v114;

                          uint64_t v117 = v118;
                          id v6 = v126;
                        }
                        v173[0] = _NSConcreteStackBlock;
                        v173[1] = 3321888768;
                        v173[2] = ___ZN33AccelerationStructureViewerServer8Renderer13requestSampleEPU26objcproto15MTLCommandQueue11objc_object_block_invoke;
                        v173[3] = &unk_747320;
                        uint64_t v179 = v4;
                        AccelerationStructureViewer::Sample::Sample(v174, (id *)v186);
                        id v175 = v6;
                        id v115 = v117;
                        id v176 = v115;
                        char v182 = v127;
                        id v180 = v49;
                        id v177 = v114;
                        double v181 = Current;
                        uint64_t v178 = &v162;
                        [v93 addCompletedHandler:v173];
                        [v93 commit];

                        id v116 = (id *)v174;
                      }
                      else
                      {
                        id v115 = v154;
                        if (v154 != v113) {
                          AccelerationStructureViewerServer::Profiler::finishSkipFrame(*(void *)(v4 + 17536), v113);
                        }
                        AccelerationStructureViewer::Sample::Sample(v183, (id *)v186);
                        AccelerationStructureViewerServer::Renderer::commitSample((void *)v4, v127, v183, v93, v163[5], Current);
                        id v116 = v183;
                      }
                      AccelerationStructureViewer::Sample::~Sample(v116);
                    }
                    else
                    {
                      AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(v4, v94, v163[5]);
                      id v115 = v154;
                    }

                    goto LABEL_155;
                  }
                  AccelerationStructureViewer::Sample::Sample(v172, (id *)v186);
                  uint64_t v111 = AccelerationStructureViewerServer::Renderer::metalIntersectorPass(v4, v127, (uint64_t)v172, v93, v139, v49, 1, !(v60 & (v61 != 0)));
                  AccelerationStructureViewer::Sample::~Sample(v172);
                  if (v111)
                  {
                    if ((v60 & (v61 != 0)) == 0)
                    {
LABEL_136:
                      AccelerationStructureViewer::Sample::Sample(v170, (id *)v186);
                      AccelerationStructureViewerServer::Renderer::commitSample((void *)v4, v127, v170, v93, v163[5], Current);
                      AccelerationStructureViewer::Sample::~Sample(v170);
                      BOOL v68 = 1;
LABEL_154:
                      id v6 = v126;

                      goto LABEL_155;
                    }
                    AccelerationStructureViewer::Sample::Sample(v171, (id *)v186);
                    uint64_t v112 = AccelerationStructureViewerServer::Renderer::metalIntersectorPass(v4, v127, (uint64_t)v171, v93, v137, v49, 0, 1);
                    AccelerationStructureViewer::Sample::~Sample(v171);
                    if (v112)
                    {

                      goto LABEL_136;
                    }
                    id v119 = v163[5];
                    uint64_t v120 = v4;
                    unsigned int v121 = v127;
                  }
                  else
                  {
                    id v119 = v163[5];
                    uint64_t v120 = v4;
                    unsigned int v121 = v127;
                  }
                  AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(v120, v121, v119);
                  BOOL v68 = 0;
                  goto LABEL_154;
                }
                goto LABEL_92;
              }
LABEL_78:
              id v70 = v163[5];
              uint64_t v71 = v4;
LABEL_93:
              AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(v71, v15, v70);
              BOOL v68 = 0;
              id v6 = v126;
              goto LABEL_77;
            }
            if ((v60 & (v61 != 0)) != 1)
            {
              int v62 = 5;
              goto LABEL_68;
            }
            uint64_t v63 = AccelerationStructureViewerServer::Renderer::getIntersector(v4, 2, v59);
            uint64_t v64 = AccelerationStructureViewerServer::Renderer::getIntersector(v4, 5, v4 + 17656);
            if (v64)
            {
              uint64_t v65 = v64;
              unsigned int v15 = v127;
              uint64_t Intersector = v63;
              unint64_t v53 = v141;
              goto LABEL_70;
            }
LABEL_92:
            id v70 = v163[5];
            uint64_t v71 = v4;
            unsigned int v15 = v127;
            goto LABEL_93;
          }
          uint64_t v41 = (unsigned __int16)v27;
          uint64_t v42 = (unsigned __int8 *)&ASVDither4x4;
        }
      }
      else if (v12 == 8)
      {
        uint64_t v41 = (unsigned __int16)v27;
        uint64_t v42 = (unsigned __int8 *)&ASVDither8x8;
      }
      else
      {
        if (v12 != 16)
        {
          if (v12 == 32) {
            unsigned int v32 = ASVDither32x32[(unsigned __int16)v27];
          }
          goto LABEL_42;
        }
        uint64_t v41 = (unsigned __int16)v27;
        uint64_t v42 = (unsigned __int8 *)&ASVDither16x16;
      }
      unsigned int v32 = v42[v41];
      goto LABEL_42;
    }
  }
  std::mutex::unlock((std::mutex *)(v4 + 48));
LABEL_76:
  BOOL v68 = 0;
LABEL_77:
  _Block_object_dispose(&v162, 8);

  return v68;
}

void *AccelerationStructureViewer::Sample::Sample(void *a1, id *a2)
{
  a1[76] = a2[76];
  a1[77] = a2[77];
  a1[78] = a2[78];
  a1[79] = a2[79];
  a1[80] = a2[80];
  a1[81] = a2[81];
  return a1;
}

id AccelerationStructureViewerServer::Renderer::metalIntersectorPass(uint64_t a1, unsigned int a2, uint64_t a3, void *a4, uint64_t a5, _DWORD *a6, int a7, int a8)
{
  id v14 = a4;
  uint64_t v185 = *(void *)(a1 + 8);
  unsigned int v15 = [v14 computeCommandEncoder];
  unsigned int v16 = [*(id *)(a5 + 8) label];
  unsigned int v17 = +[NSString stringWithFormat:@"ASVS Metal Intersector '%@'", v16];
  [v15 setLabel:v17];

  uint64_t v178 = a5;
  if (*(_DWORD *)a5 == 3)
  {
    int v171 = a8;
    int v166 = *(_DWORD *)(*(void *)(a1 + 17536) + 8);
    id v169 = [*(id *)(a5 + 8) maxTotalThreadsPerThreadgroup];
    uint64_t v18 = *(void *)(a1 + 17536);
    id v173 = v15;
    signed int v19 = (3 * *(_DWORD *)(a3 + 440) * *(_DWORD *)(a3 + 444)) / *(_DWORD *)(v18 + 8);
    a6[2] = [*(id *)(a3 + 608) width];
    a6[3] = [*(id *)(a3 + 608) height];
    unsigned int v20 = [*(id *)(a3 + 608) width];
    a6[4] = [*(id *)(a3 + 608) height] * v20;
    a6[5] = v19;
    uint64_t v168 = a6;
    signed int v165 = v19;
    unint64_t v21 = 4 * *(int *)(v18 + 8) * (uint64_t)v19;
    uint64_t v22 = v18 + 8 * a2;
    double v25 = *(void **)(v22 + 112);
    float32x2_t v24 = (void **)(v22 + 112);
    unint64_t v23 = v25;
    if (!v25 || (unint64_t)[v23 length] < v21)
    {
      id v26 = [*(id *)v18 newBufferWithLength:v21 options:0];
      unsigned int v27 = *v24;
      *float32x2_t v24 = v26;
    }
    uint64_t v28 = (std::mutex *)(v18 + 320);
    v200.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v18 + 320);
    v200.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v18 + 320));
    unsigned int v177 = a2;
    uint64_t v170 = a3;
    if (*(unsigned char *)(v18 + 432))
    {
      ++*(_DWORD *)(v18 + 436);
      uint64_t v162 = a1;
      id v175 = v14;
      std::mutex::unlock(v200.__m_);
      long long v163 = v24;
      memset(v211, 0, 48);
      memset(v210.__cv_.__opaque, 0, sizeof(v210.__cv_.__opaque));
      v210.__cv_.__sig = 1018212795;
      uint64_t v29 = (char *)operator new(0x78uLL);
      *((void *)v29 + 1) = 0;
      *((void *)v29 + 2) = 0;
      *((void *)v29 + 3) = 1018212795;
      *(void *)uint64_t v29 = off_7475D0;
      *((_OWORD *)v29 + 2) = 0u;
      *((_OWORD *)v29 + 3) = 0u;
      *((void *)v29 + 8) = 0;
      *((_OWORD *)v29 + 5) = 0u;
      *((_OWORD *)v29 + 6) = 0u;
      *((_WORD *)v29 + 56) = 0;
      unint64_t v30 = atomic_load((unint64_t *)v211);
      atomic_store(v30, (unint64_t *)v29 + 9);
      uint64_t v31 = *(void *)&v211[1];
      *((void *)v29 + 10) = *((void *)&v211[0] + 1);
      id v180 = (char **)(v29 + 88);
      std::vector<AccelerationStructureViewerServer::APSUSCRayCollector>::resize((char **)v29 + 11, (*((void *)&v211[1] + 1) - v31) >> 5);
      v29[113] = BYTE9(v211[2]);
      uint64_t v32 = *((void *)v29 + 11);
      if (*((void *)v29 + 12) != v32)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        do
        {
          uint64_t v35 = *(void *)&v211[1] + v33;
          uint64_t v36 = v32 + v33;
          *(_OWORD *)(v32 + v33) = *(_OWORD *)(*(void *)&v211[1] + v33);
          objc_storeStrong((id *)(v32 + v33 + 16), *(id *)(v35 + 16));
          *(void *)(v36 + 24) = *(void *)(v35 + 24);
          ++v34;
          uint64_t v32 = *((void *)v29 + 11);
          v33 += 32;
        }
        while (v34 < (*((void *)v29 + 12) - v32) >> 5);
      }
      uint64_t v167 = (v166 * v166);
      *(void *)&long long v201 = &v211[1];
      std::vector<AccelerationStructureViewerServer::APSUSCRayCollector>::__destroy_vector::operator()[abi:nn180100]((void ***)&v201);
      std::condition_variable::~condition_variable(&v210);
      atomic_store(0, (unint64_t *)v29 + 9);
      id v37 = [*(id *)(v170 + 608) width];
      *((void *)v29 + 10) = (void)[*(id *)(v170 + 608) height] * (void)v37;
      std::vector<AccelerationStructureViewerServer::APSUSCRayCollector>::resize(v180, *(int *)(v18 + 8));
      std::mutex::lock((std::mutex *)(v18 + 136));
      if (*(_DWORD *)(v18 + 8))
      {
        unint64_t v38 = 0;
        unint64_t v39 = 12 * v168[5];
        do
        {
          unint64_t v40 = *v180;
          uint64_t v41 = &(*v180)[32 * v38];
          *(void *)uint64_t v41 = -1;
          *((void *)v41 + 1) = v165;
          int32x2_t v43 = (void *)*((void *)v41 + 2);
          uint64_t v42 = (void **)(v41 + 16);
          unsigned __int8 *v42 = 0;

          while (*(void *)(v18 + 240))
          {
            id v44 = objc_retain(*(id *)(*(void *)(*(void *)(v18 + 208)
                                                + ((*(void *)(v18 + 232) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * (*(void *)(v18 + 232) & 0x1FFLL)));
            std::deque<objc_object  {objcproto9MTLBuffer}* {__strong}>::pop_front(v18 + 200);
            if ((unint64_t)[v44 length] >= v39)
            {
              uint64_t v45 = *v42;
              unsigned __int8 *v42 = v44;

              break;
            }
          }
          uint64_t v46 = *v42;
          if (!*v42)
          {
            id v47 = [*(id *)v18 newBufferWithLength:v39 options:0];
            uint64_t v48 = *v42;
            unsigned __int8 *v42 = v47;

            uint64_t v46 = *v42;
          }
          *(void *)&v40[32 * v38++ + 24] = [v46 contents];
        }
        while (v38 < *(int *)(v18 + 8));
      }
      std::mutex::unlock((std::mutex *)(v18 + 136));
      unsigned int v49 = [v173 globalTraceObjectID];
      v210.__cv_.__sig = v18 + 624;
      v210.__cv_.__opaque[0] = 1;
      std::mutex::lock((std::mutex *)(v18 + 624));
      *(void *)&long long v50 = v29 + 24;
      *((void *)&v50 + 1) = v29;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 1, 1uLL, memory_order_relaxed);
      unint64_t v51 = *(uint64_t **)(v18 + 736);
      if (v51)
      {
        a3 = v170;
        while (1)
        {
          while (1)
          {
            uint64_t v52 = (uint64_t **)v51;
            unsigned int v53 = *((_DWORD *)v51 + 8);
            if (v53 <= v49) {
              break;
            }
            unint64_t v51 = *v52;
            unint64_t v54 = v52;
            if (!*v52) {
              goto LABEL_73;
            }
          }
          if (v53 >= v49) {
            break;
          }
          unint64_t v51 = v52[1];
          if (!v51)
          {
            unint64_t v54 = v52 + 1;
            goto LABEL_73;
          }
        }
        a1 = v162;
        a8 = v171;
      }
      else
      {
        unint64_t v54 = (uint64_t **)(v18 + 736);
        uint64_t v52 = (uint64_t **)(v18 + 736);
        a3 = v170;
LABEL_73:
        long long v183 = v50;
        unsigned int v121 = (char *)operator new(0x38uLL);
        *((_DWORD *)v121 + 8) = v49;
        *(_OWORD *)(v121 + 40) = v183;
        *(void *)unsigned int v121 = 0;
        *((void *)v121 + 1) = 0;
        *((void *)v121 + 2) = v52;
        char *v54 = (uint64_t *)v121;
        uint64_t v122 = **(void **)(v18 + 728);
        if (v122)
        {
          *(void *)(v18 + 728) = v122;
          uint64_t v123 = *v54;
        }
        else
        {
          uint64_t v123 = (uint64_t *)v121;
        }
        a1 = v162;
        a8 = v171;
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v18 + 736), v123);
        ++*(void *)(v18 + 744);
        *((void *)&v50 + 1) = 0;
      }
      if (*((void *)&v50 + 1)) {
        std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v50 + 1));
      }
      uint64_t v59 = (void)v169 * v167;
      std::unique_lock<std::mutex>::unlock((std::unique_lock<std::mutex> *)&v210);
      uint64_t v124 = v18 + 8 * v177;
      [v173 setBuffer:*(void *)(v124 + 64) offset:0 atIndex:5];
      [v173 setComputePipelineState:*(void *)(v18 + 40)];
      uint64_t v198 = *(int *)(v18 + 8) + 1;
      int64x2_t v184 = vdupq_n_s64(1uLL);
      int64x2_t v199 = v184;
      uint64_t v196 = v198;
      int64x2_t v197 = v184;
      [v173 dispatchThreads:&v198 threadsPerThreadgroup:&v196];
      [v173 setBuffer:*(void *)(v124 + 64) offset:0 atIndex:4];
      [v173 setBuffer:*(void *)(v124 + 88) offset:0 atIndex:5];
      [v173 setBuffer:*v163 offset:0 atIndex:6];
      [v173 setComputePipelineState:*(void *)(v18 + 40)];
      uint64_t v125 = *(int *)(v18 + 8);
      uint64_t v194 = v125;
      int64x2_t v195 = v184;
      uint64_t v192 = v125;
      int64x2_t v193 = v184;
      [v173 dispatchThreads:&v194 threadsPerThreadgroup:&v192];
      if (v210.__cv_.__opaque[0]) {
        std::mutex::unlock((std::mutex *)v210.__cv_.__sig);
      }
      std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v29);

      id v181 = &def_1C1270 + 1;
      uint64_t v172 = 1;
      id v174 = &def_1C1270 + 1;
      int v60 = a7;
      goto LABEL_85;
    }
    id v182 = *(id *)v18;
    uint64_t v63 = *(void **)(v18 + 760);
    *(void *)(v18 + 760) = 0;

    uint64_t v64 = *(void **)(v18 + 752);
    *(void *)(v18 + 752) = 0;

    GRCReleaseAllCounterSourceGroup();
    uint64_t v66 = GRCCopyAllCounterSourceGroup();
    uint64_t v67 = *(void **)(v18 + 752);
    *(void *)(v18 + 752) = v66;

    BOOL v68 = *(void **)(v18 + 752);
    if (v68 && [v68 count])
    {
      contexta = [*(id *)(v18 + 752) firstObject];
      uint64_t v69 = [contexta sourceList];
      id v70 = *(void **)(v18 + 760);
      *(void *)(v18 + 760) = v69;

      uint64_t v71 = *(void **)(v18 + 760);
      if (v71 && [v71 count])
      {
        uint64_t v158 = v65;
        id v176 = v14;
        id obj = +[NSMutableArray arrayWithCapacity:3];
        long long v201 = 0u;
        long long v202 = 0u;
        long long v203 = 0u;
        long long v204 = 0u;
        locatioint n = (id *)(v18 + 760);
        id v72 = *(id *)(v18 + 760);
        id v73 = [v72 countByEnumeratingWithState:&v201 objects:&v210 count:16];
        if (v73)
        {
          id v74 = v73;
          uint64_t v75 = *(void *)v202;
          uint64_t v164 = v24;
          while (2)
          {
            for (uint64_t i = 0; i != v74; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v202 != v75) {
                objc_enumerationMutation(v72);
              }
              uint64_t v77 = *(void **)(*((void *)&v201 + 1) + 8 * i);
              if (![v77 ringBufferNum])
              {
                id v14 = v176;
                float32x2_t v24 = v164;
                uint64_t v98 = v72;
                uint64_t v28 = (std::mutex *)(v18 + 320);
                goto LABEL_132;
              }
              id v78 = [v77 name];
              unsigned int v79 = [v78 containsString:@"APS_USC"];

              if (v79)
              {
                [obj addObject:v77];
                *(_DWORD *)(v18 + 848) = [obj count] - 1;
              }
            }
            id v74 = [v72 countByEnumeratingWithState:&v201 objects:&v210 count:16];
            float32x2_t v24 = v164;
            if (v74) {
              continue;
            }
            break;
          }
        }

        id v14 = v176;
        uint64_t v28 = (std::mutex *)(v18 + 320);
        if ([obj count])
        {
          objc_storeStrong(location, obj);
          *(void *)(v18 + 768) = [contexta sampleMarker];
          v208[0] = @"RingBufferSizeInKB";
          v208[1] = @"SyncDrainMode";
          v209[0] = &off_759F48;
          v209[1] = &off_759F60;
          v208[2] = @"SystemTimePeriod";
          uint64_t v80 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v18 + 808)];
          v208[3] = @"ProfileControl";
          v209[2] = v80;
          v209[3] = &off_759620;
          uint64_t v81 = +[NSDictionary dictionaryWithObjects:v209 forKeys:v208 count:4];
          id v82 = *(void **)(v18 + 824);
          *(void *)(v18 + 824) = v81;

          uint64_t v83 = +[NSMutableArray arrayWithCapacity:1];
          id v84 = *(void **)(v18 + 832);
          *(void *)(v18 + 832) = v83;

          __int16 v85 = *(void **)(v18 + 832);
          v206[0] = @"TileTracing";
          v206[1] = @"ESLInstTracing";
          v207[0] = &off_759F78;
          v207[1] = &off_759F78;
          v206[2] = @"CountPeriod";
          uint64_t v86 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v18 + 812)];
          v207[2] = v86;
          v206[3] = @"PulsePeriod";
          CFStringRef v87 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v18 + 816)];
          v207[3] = v87;
          id v88 = +[NSDictionary dictionaryWithObjects:v207 forKeys:v206 count:4];
          char v89 = +[GPURawCounterSourceTriggerSelect selectWithName:@"KickTracing" options:v88];
          [v85 addObject:v89];

          agxps_load_counter_obfuscation_map((uint64_t)"/AppleInternal/Library/AGX/AGXRawCounterMapping.csv");
          id v90 = agxps_counter_deobfuscate_name("_bc236dcf3744edf6bcf329ae47088528b35ea5e0beac601cf6781545eb2327cc");
          long long v91 = agxps_counter_deobfuscate_name("_dc9d2c02b3df41ad60f6512a3823b2d0f9b735ae9c41650c4396bac13a7a3c5e");
          uint64_t v92 = +[NSMutableArray arrayWithCapacity:20];
          uint64_t v93 = *(void **)(v18 + 840);
          *(void *)(v18 + 840) = v92;

          uint64_t v94 = 0;
          v212[0] = v90;
          v212[1] = v91;
          do
          {
            uint64_t v95 = *(void **)(v18 + 840);
            uint64_t v96 = +[NSString stringWithUTF8String:v212[v94]];
            uint64_t v97 = +[GPURawCounterSelect selectWithName:v96 options:0];
            [v95 addObject:v97];

            ++v94;
          }
          while (v94 != 2);
          [contexta setOptions:&off_759648];
          uint64_t v98 = [*(id *)(v18 + 760) objectAtIndexedSubscript:*(int *)(v18 + 848)];
          if ([v98 requestTriggers:*(void *)(v18 + 832) firstErrorIndex:0])
          {
            v212[0] = 0;
            id v14 = v176;
            if ([v98 requestCounters:*(void *)(v18 + 840) firstErrorIndex:v212])
            {
              [v98 setOptions:*(void *)(v18 + 824)];
              if ([v98 setEnabled:1])
              {

                if ([*location count])
                {
                  [*(id *)(v18 + 760) objectAtIndexedSubscript:0];

                  __int16 v99 = [*(id *)(v18 + 752) firstObject];
                  unsigned __int8 v100 = [v99 startSampling];

                  if (v100)
                  {
                    uint64_t v101 = *(void *)(v18 + 600);
                    *(void *)(v18 + 608) = v101;
                    unint64_t v102 = *(int *)(v18 + 8);
                    if (v102)
                    {
                      unint64_t v103 = 0xFFC00FFC00FFC01 * ((*(void *)(v18 + 616) - v101) >> 7);
                      if (v103 >= v102)
                      {
                        uint64_t v153 = v101 + 131200 * (int)v102;
                        uint64_t v154 = 131200 * (int)v102;
                        do
                        {
                          uint64_t v155 = v101 + 131160;
                          *(void *)(v101 + 8) = -1;
                          *(void *)(v101 + 16) = -1;
                          *(void *)(v101 + 24) = 0;
                          *(unsigned char *)(v101 + 32) = 1;
                          *(_DWORD *)(v101 + 131160) = 0;
                          *(void *)(v101 + 131176) = 0;
                          *(void *)(v101 + 131184) = 0;
                          *(void *)(v101 + 131168) = 0;
                          *(_DWORD *)(v101 + 131192) = 0;
                          atomic_store(0, (unint64_t *)(v101 + 40));
                          *(void *)(v101 + 48) = 0;
                          *(void *)(v101 + 56) = 0;
                          *(_DWORD *)(v101 + 131160) = 0;
                          v101 += 131200;
                          *(void *)(v155 + 8) = 0;
                          v154 -= 131200;
                        }
                        while (v154);
                        *(void *)(v18 + 608) = v153;
                      }
                      else
                      {
                        if ((v102 & 0x80000000) != 0) {
                          abort();
                        }
                        uint64_t v104 = 0x1FF801FF801FF802 * ((*(void *)(v18 + 616) - v101) >> 7);
                        if (2 * v103 <= v102) {
                          uint64_t v104 = *(int *)(v18 + 8);
                        }
                        if (v103 >= 0x3FF003FF003FLL) {
                          unint64_t v105 = 0x7FE007FE007FLL;
                        }
                        else {
                          unint64_t v105 = v104;
                        }
                        if (v105 > 0x7FE007FE007FLL) {
                          std::__throw_bad_array_new_length[abi:nn180100]();
                        }
                        uint64_t v106 = (char *)operator new(131200 * v105);
                        uint64_t v107 = &v106[131200 * (int)v102];
                        uint64_t v108 = 131200 * (int)v102;
                        uint64_t v109 = v106;
                        do
                        {
                          uint64_t v110 = v109 + 131160;
                          *((void *)v109 + 1) = -1;
                          *((void *)v109 + 2) = -1;
                          *((void *)v109 + 3) = 0;
                          v109[32] = 1;
                          *((_DWORD *)v109 + 32790) = 0;
                          *((void *)v109 + 16397) = 0;
                          *((void *)v109 + 16398) = 0;
                          *((void *)v109 + 16396) = 0;
                          *((_DWORD *)v109 + 32798) = 0;
                          atomic_store(0, (unint64_t *)v109 + 5);
                          *((void *)v109 + 6) = 0;
                          *((void *)v109 + 7) = 0;
                          *((_DWORD *)v109 + 32790) = 0;
                          v109 += 131200;
                          *((void *)v110 + 1) = 0;
                          v108 -= 131200;
                        }
                        while (v108);
                        uint64_t v111 = &v106[131200 * v105];
                        uint64_t v112 = *(char **)(v18 + 608);
                        uint64_t v113 = *(char **)(v18 + 600);
                        if (v112 != v113)
                        {
                          uint64_t v114 = 0;
                          id v115 = v112 - 131160;
                          id v116 = v106 - 131144;
                          do
                          {
                            uint64_t v117 = &v106[v114 - 131192];
                            id v118 = &v116[v114];
                            *(void *)uint64_t v117 = -1;
                            *((void *)v117 + 1) = -1;
                            *((void *)v118 - 4) = 0;
                            v106[v114 - 131168] = 1;
                            id v119 = &v106[v114];
                            *((_DWORD *)v119 - 10) = 0;
                            *((void *)v119 - 3) = 0;
                            *((void *)v119 - 2) = 0;
                            *((void *)v119 - 4) = 0;
                            *((_DWORD *)v119 - 2) = 0;
                            unint64_t v120 = atomic_load((unint64_t *)&v115[v114]);
                            atomic_store(v120, (unint64_t *)&v116[v114 - 16]);
                            *((void *)v118 - 1) = *(void *)&v115[v114 + 8];
                            *(void *)id v118 = *(void *)&v115[v114 + 16];
                            *((_DWORD *)v119 - 10) = *(_DWORD *)&v112[v114 - 40];
                            *((void *)v119 - 4) = *(void *)&v112[v114 - 32];
                            v114 -= 131200;
                          }
                          while (&v112[v114] != v113);
                          v106 += v114;
                          uint64_t v112 = *(char **)(v18 + 600);
                        }
                        *(void *)(v18 + 600) = v106;
                        *(void *)(v18 + 608) = v107;
                        *(void *)(v18 + 616) = v111;
                        if (v112) {
                          operator delete(v112);
                        }
                      }
                    }
                    atomic_store(0, (unint64_t *)(v18 + 776));
                    atomic_store(0, (unint64_t *)(v18 + 784));
                    *(unsigned char *)(v18 + 432) = 1;
                    id v156 = [*(id *)(v18 + 760) objectAtIndexedSubscript:0];
                    operator new();
                  }
                  goto LABEL_130;
                }
                goto LABEL_133;
              }
              int v152 = [v98 name];
              NSLog(@"Fail, error while enabling aps source %@", v152);
            }
            else
            {
              uint64_t v151 = v212[0];
              int v152 = [*(id *)(v18 + 840) objectAtIndexedSubscript:v212[0]];
              NSLog(@"Fail, error while requesting %lu %@ counter for apsSource ", v151, v152);
            }
          }
          else
          {
            simd_float4 v150 = [v98 name];
            NSLog(@"Fail, error while requesting triggers for %@", v150);

            id v14 = v176;
          }
LABEL_132:
        }
LABEL_133:

        float32x4_t v148 = v158;
        goto LABEL_129;
      }
    }
    float32x4_t v148 = v65;
LABEL_129:
LABEL_130:

    NSLog(@"Unable to start streaming…");
    simd_float4 v149 = *v24;
    *float32x2_t v24 = 0;

    std::mutex::unlock(v28);
    [v173 endEncoding];
    id v146 = 0;
    goto LABEL_124;
  }
  id v175 = v14;
  id v55 = [*(id *)(a3 + 608) width];
  id v174 = [*(id *)(a3 + 608) height];
  id v181 = [*(id *)(a5 + 8) threadExecutionWidth];
  unint64_t v56 = (unint64_t)[*(id *)(a5 + 8) maxTotalThreadsPerThreadgroup];
  unint64_t v57 = (unint64_t)[*(id *)(a5 + 8) threadExecutionWidth];
  uint64_t v58 = *(void *)(a1 + 17536);
  uint64_t v172 = v56 / v57;
  if (v58)
  {
    unsigned int v177 = a2;
    uint64_t v59 = (uint64_t)v55;
    int v60 = a7;
    id v61 = v15;
    std::mutex::lock((std::mutex *)(v58 + 320));
    if (*(unsigned char *)(v58 + 432) && !*(_DWORD *)(v58 + 436))
    {
      AccelerationStructureViewerServer::Profiler::stopAPSStreaming(v58, *(void **)v58);
    }
    else
    {
      unsigned int v62 = [v61 globalTraceObjectID];
      v210.__cv_.__sig = v58 + 624;
      v210.__cv_.__opaque[0] = 1;
      std::mutex::lock((std::mutex *)(v58 + 624));
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v58 + 688, v62, v62);
      std::unique_lock<std::mutex>::unlock((std::unique_lock<std::mutex> *)&v210);
      if (v210.__cv_.__opaque[0]) {
        std::mutex::unlock((std::mutex *)v210.__cv_.__sig);
      }
    }
    std::mutex::unlock((std::mutex *)(v58 + 320));

LABEL_85:
    id v55 = (id)v59;
    a2 = v177;
    goto LABEL_86;
  }
  int v60 = a7;
LABEL_86:
  if (*(void *)(a1 + 17536)) {
    [v15 waitForFence:*(void *)(a1 + 17528)];
  }
  if (v60)
  {
    [v15 setTexture:*(void *)(a3 + 608) atIndex:1];
    [v15 setTexture:*(void *)(a3 + 624) atIndex:3];
    [v15 setTexture:*(void *)(a3 + 632) atIndex:4];
    [v15 setTexture:*(void *)(a3 + 640) atIndex:5];
    uint64_t v126 = *(void *)(a3 + 648);
  }
  else
  {
    [v15 setTexture:0 atIndex:1];
    [v15 setTexture:0 atIndex:3];
    [v15 setTexture:0 atIndex:4];
    [v15 setTexture:0 atIndex:5];
    uint64_t v126 = 0;
  }
  [v15 setTexture:v126 atIndex:6];
  if (a8) {
    uint64_t v127 = *(void *)(a3 + 616);
  }
  else {
    uint64_t v127 = 0;
  }
  [v15 setTexture:v127 atIndex:2];
  uint64_t v128 = a1 + 8 * a2;
  [v15 setBuffer:*(void *)(v128 + 17584) offset:0 atIndex:0];
  [v15 setBuffer:*(void *)(v128 + 17608) offset:0 atIndex:1];
  uint64_t v129 = *(void *)(a1 + 17736);
  if (v129) {
    [v15 setAccelerationStructure:v129 atBufferIndex:2];
  }
  uint64_t v130 = a1;
  [v15 setBuffer:*(void *)(a1 + 17752) offset:0 atIndex:9];
  uint64_t v131 = *(void *)(v185 + 184);
  if (*(void *)(v185 + 192) != v131)
  {
    uint64_t v132 = 0;
    unint64_t v133 = 0;
    do
    {
      [v15 useResource:*(void *)(v131 + v132 + 24) usage:1];
      [v15 useResource:*(void *)(v131 + v132 + 40) usage:1];
      [v15 useResource:*(void *)(v131 + v132 + 56) usage:1];
      uint64_t v134 = *(void *)(v131 + v132 + 72);
      if (v134) {
        [v15 useResource:v134 usage:1];
      }
      uint64_t v135 = *(void *)(v131 + v132 + 88);
      if (v135) {
        [v15 useResource:v135 usage:1];
      }
      uint64_t v136 = *(void *)(v131 + v132 + 104);
      if (v136) {
        [v15 useResource:v136 usage:1];
      }
      uint64_t v137 = *(void *)(v131 + v132 + 152);
      if (v137) {
        [v15 useResource:v137 usage:1];
      }
      uint64_t v138 = *(void *)(v131 + v132 + 168);
      if (v138) {
        [v15 useResource:v138 usage:1];
      }
      ++v133;
      uint64_t v131 = *(void *)(v185 + 184);
      v132 += 184;
    }
    while (v133 < 0xD37A6F4DE9BD37A7 * ((*(void *)(v185 + 192) - v131) >> 3));
  }
  long long v190 = 0u;
  long long v191 = 0u;
  long long v188 = 0u;
  long long v189 = 0u;
  id v139 = *(id *)(a1 + 17744);
  id v140 = [v139 countByEnumeratingWithState:&v188 objects:v205 count:16];
  id v14 = v175;
  if (v140)
  {
    id v141 = v140;
    uint64_t v142 = *(void *)v189;
    do
    {
      for (uint64_t j = 0; j != v141; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v189 != v142) {
          objc_enumerationMutation(v139);
        }
        [v15 useResource:*(void *)(*((void *)&v188 + 1) + 8 * (void)j) usage:1];
      }
      id v141 = [v139 countByEnumeratingWithState:&v188 objects:v205 count:16];
    }
    while (v141);
  }

  uint64_t v144 = *(void *)(v178 + 24);
  if (v144)
  {
    [v15 setIntersectionFunctionTable:v144 atBufferIndex:3];
    if (*(void *)(v178 + 24)) {
      (*(void (**)(void, void *))(**(void **)(v130 + 8) + 104))(*(void *)(v130 + 8), v15);
    }
  }
  uint64_t v145 = *(void *)(v130 + 17536);
  if (v145) {
    [v15 setBuffer:*(void *)(v145 + 16) offset:0 atIndex:7];
  }
  [v15 setComputePipelineState:*(void *)(v178 + 8)];
  v187[0] = v55;
  v187[1] = v174;
  v187[2] = 1;
  v186[0] = v181;
  v186[1] = v172;
  v186[2] = 1;
  [v15 dispatchThreads:v187 threadsPerThreadgroup:v186];
  if (*(void *)(v130 + 17536)) {
    [v15 updateFence:*(void *)(v130 + 17528)];
  }
  [v15 endEncoding];
  id v146 = v15;
LABEL_124:

  return v146;
}

void AccelerationStructureViewer::Sample::~Sample(id *this)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](this + 72);
}

void AccelerationStructureViewerServer::Renderer::commitSample(void *a1, char a2, id *a3, void *a4, void *a5, double a6)
{
  id v11 = a4;
  uint64_t v14 = 0;
  unsigned int v15 = &v14;
  uint64_t v16 = 0x3032000000;
  unsigned int v17 = __Block_byref_object_copy__9838;
  uint64_t v18 = __Block_byref_object_dispose__9839;
  id v12 = a5;
  id v19 = v12;
  if (v11)
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3321888768;
    v20[2] = ___ZN33AccelerationStructureViewerServer8Renderer12commitSampleEhN27AccelerationStructureViewer6SampleEdPU27objcproto16MTLCommandBuffer11objc_objectPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
    v20[3] = &unk_747390;
    v22[11] = a1;
    char v23 = a2;
    AccelerationStructureViewer::Sample::Sample(v21, a3);
    v22[12] = *(id *)&a6;
    v22[10] = &v14;
    [v11 addCompletedHandler:v20];
    [v11 commit];

    long long v13 = v22;
  }
  else
  {
    AccelerationStructureViewer::Sample::Sample(v24, a3);
    AccelerationStructureViewerServer::Renderer::completeSample((uint64_t)a1, a2, v24, (void *)v15[5], a6);

    long long v13 = v25;
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v13);
  _Block_object_dispose(&v14, 8);
}

void *___ZN33AccelerationStructureViewerServer8Renderer13requestSampleEPU26objcproto15MTLCommandQueue11objc_object_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 720);
  uint64_t v3 = dispatch_get_global_queue(0, 0);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = ___ZN33AccelerationStructureViewerServer8Renderer13requestSampleEPU26objcproto15MTLCommandQueue11objc_object_block_invoke_2;
  v5[3] = &unk_7472E8;
  uint64_t v12 = v2;
  AccelerationStructureViewer::Sample::Sample(v6, (id *)(a1 + 32));
  id v8 = *(id *)(a1 + 688);
  id v9 = *(id *)(a1 + 696);
  char v15 = *(unsigned char *)(a1 + 744);
  uint64_t v13 = *(void *)(a1 + 728);
  id v10 = *(id *)(a1 + 704);
  uint64_t v14 = *(void *)(a1 + 736);
  uint64_t v11 = *(void *)(a1 + 712);
  dispatch_async(v3, v5);

  return std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v7);
}

void *__destroy_helper_block_a16_32c42_ZTSN27AccelerationStructureViewer6SampleE(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100]((void *)(a1 + 608));
}

void *__copy_helper_block_a16_32c42_ZTSN27AccelerationStructureViewer6SampleE(uint64_t a1, uint64_t a2)
{
  return AccelerationStructureViewer::Sample::Sample((void *)(a1 + 32), (id *)(a2 + 32));
}

void *___ZN33AccelerationStructureViewerServer8Renderer13requestSampleEPU26objcproto15MTLCommandQueue11objc_object_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 720);
  AccelerationStructureViewer::Sample::Sample(v111, (id *)(a1 + 32));
  uint64_t v3 = v2[2192];
  uint64_t v4 = *(void **)(a1 + 696);
  uint64_t v92 = *(unsigned __int8 *)(a1 + 744);
  uint64_t v91 = *(void *)(a1 + 728);
  id v5 = *(id *)(a1 + 688);
  id v6 = v4;
  std::mutex::lock((std::mutex *)(v3 + 320));
  --*(_DWORD *)(v3 + 436);
  std::mutex::unlock((std::mutex *)(v3 + 320));
  unsigned int v7 = [v6 globalTraceObjectID];
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 624);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v3 + 624));
  uint64_t v8 = *(void *)(v3 + 736);
  if (!v8) {
    goto LABEL_12;
  }
  id v9 = (uint64_t **)(v3 + 736);
  uint64_t v10 = v3 + 736;
  do
  {
    unsigned int v11 = *(_DWORD *)(v8 + 32);
    BOOL v12 = v11 >= v7;
    if (v11 >= v7) {
      uint64_t v13 = (uint64_t *)v8;
    }
    else {
      uint64_t v13 = (uint64_t *)(v8 + 8);
    }
    if (v12) {
      uint64_t v10 = v8;
    }
    uint64_t v8 = *v13;
  }
  while (*v13);
  if ((uint64_t **)v10 == v9 || *(_DWORD *)(v10 + 32) > v7)
  {
LABEL_12:
    NSLog(@"Missing ray collector [pre]");
    uint64_t v14 = 0;
    goto LABEL_13;
  }
  id v89 = v6;
  uint64_t v100 = 0;
  uint64_t v101 = &v100;
  uint64_t v102 = 0x4012000000;
  unint64_t v103 = __Block_byref_object_copy__10450;
  uint64_t v104 = __Block_byref_object_dispose__10451;
  unint64_t v105 = &unk_4E231D;
  uint64_t v106 = *(void *)(v10 + 40);
  uint64_t v18 = *(std::__shared_weak_count **)(v10 + 48);
  uint64_t v107 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v90 = v5;
  id v88 = v2;
  mach_timebase_info(&info);
  uint64_t v85 = mach_absolute_time();
  uint64_t v20 = v101[6];
  id v19 = (std::__shared_weak_count *)v101[7];
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFStringRef v87 = v19;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
LABEL_23:
  unint64_t v86 = v22;
  char v23 = (std::condition_variable *)v101[6];
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 500000000;
  while (*(unsigned char *)(v3 + 432))
  {
    if (*(unsigned char *)(v20 + 89)) {
      break;
    }
    unint64_t v25 = atomic_load((unint64_t *)(v20 + 48));
    if (v25 >= *(void *)(v20 + 56)) {
      break;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v24.__d_.__rep_) {
      goto LABEL_42;
    }
    v26.__d_.__rep_ = v24.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v26.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v27.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v27.__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0;
        goto LABEL_37;
      }
      if (v27.__d_.__rep_ < 1)
      {
        if ((unint64_t)v27.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          goto LABEL_36;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v27.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_37;
        }
LABEL_36:
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 1000 * v27.__d_.__rep_;
LABEL_37:
        if (v28 > (v26.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v29.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_40:
          std::condition_variable::__do_timed_wait(v23, &__lk, v29);
          std::chrono::steady_clock::now();
          goto LABEL_41;
        }
      }
      v29.__d_.__rep_ = v28 + v26.__d_.__rep_;
      goto LABEL_40;
    }
LABEL_41:
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v24.__d_.__rep_)
    {
LABEL_42:
      if (*(unsigned char *)(v3 + 432))
      {
        if (!*(unsigned char *)(v20 + 89))
        {
          unint64_t v30 = atomic_load((unint64_t *)(v20 + 48));
          if (v30 < *(void *)(v20 + 56))
          {
            unint64_t v22 = atomic_load((unint64_t *)(v20 + 48));
            if (v86 && v22 == v86)
            {
              if (*(unsigned char *)(v3 + 32)) {
                NSLog(@"No new rays %llu", v86);
              }
              *(unsigned char *)(v101[6] + 89) = 1;
            }
            else
            {
              if (++v21 != 10) {
                goto LABEL_23;
              }
              if (*(unsigned char *)(v3 + 32)) {
                NSLog(@"Timed out");
              }
              *(unsigned char *)(v101[6] + 89) = 1;
            }
          }
        }
      }
      break;
    }
  }
  uint64_t v31 = *v9;
  if (!*v9) {
    goto LABEL_67;
  }
  uint64_t v32 = v3 + 736;
  uint64_t v33 = *v9;
  do
  {
    unsigned int v34 = *((_DWORD *)v33 + 8);
    BOOL v35 = v34 >= v7;
    if (v34 >= v7) {
      uint64_t v36 = (uint64_t **)v33;
    }
    else {
      uint64_t v36 = (uint64_t **)(v33 + 1);
    }
    if (v35) {
      uint64_t v32 = (uint64_t)v33;
    }
    uint64_t v33 = *v36;
  }
  while (*v36);
  if ((uint64_t **)v32 != v9 && *(_DWORD *)(v32 + 32) <= v7)
  {
    unint64_t v57 = *(void **)(v32 + 8);
    if (v57)
    {
      do
      {
        uint64_t v58 = v57;
        unint64_t v57 = (void *)*v57;
      }
      while (v57);
    }
    else
    {
      id v82 = (void *)v32;
      do
      {
        uint64_t v58 = (void *)v82[2];
        BOOL v83 = *v58 == (void)v82;
        id v82 = v58;
      }
      while (!v83);
    }
    if (*(void *)(v3 + 728) == v32) {
      *(void *)(v3 + 728) = v58;
    }
    --*(void *)(v3 + 744);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v31, (uint64_t *)v32);
    id v84 = *(std::__shared_weak_count **)(v32 + 48);
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v84);
    }
    operator delete((void *)v32);
  }
  else
  {
LABEL_67:
    NSLog(@"Missing ray collector [post]");
  }
  uint64_t v37 = mach_absolute_time();
  unint64_t v38 = (unint64_t *)(v3 + 776);
  if (atomic_load((unint64_t *)(v3 + 776)))
  {
    unint64_t v40 = v37;
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 784), *(void *)(v101[6] + 56));
    uint64_t v41 = mach_absolute_time();
    unint64_t v42 = atomic_load((unint64_t *)(v3 + 784));
    unint64_t v43 = atomic_load(v38);
    uint64_t numer = info.numer;
    unint64_t denom = info.denom;
    unint64_t v46 = atomic_load((unint64_t *)(v3 + 792));
    uint64_t v48 = info.numer;
    unint64_t v47 = info.denom;
    atomic_store(v40, (unint64_t *)(v3 + 792));
    unsigned int v49 = v101;
    atomic_store(*(void *)(v101[6] + 56), (unint64_t *)(v3 + 800));
    if (*(unsigned char *)(v3 + 32))
    {
      double v50 = (double)((v41 - v43) * numer / denom) / 1000000000.0;
      double v51 = (double)((v40 - v85) * numer / denom) / 1000000000.0;
      double v52 = (double)((v40 - v46) * v48 / v47) / 1000000000.0;
      if (*(void *)(v3 + 584) == *(void *)(v3 + 576))
      {
        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v53 = 0;
        unint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 40;
        do
        {
          std::mutex::lock((std::mutex *)(*(void *)(v3 + 552) + v53));
          v55 += *(void *)(*(void *)(v3 + 576) + v56);
          std::mutex::unlock((std::mutex *)(*(void *)(v3 + 552) + v53));
          ++v54;
          v53 += 64;
          v56 += 48;
        }
        while (v54 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v3 + 584) - *(void *)(v3 + 576)) >> 4));
        unsigned int v49 = v101;
      }
      NSLog(@"RAYS: %llu, TIME: %f (%f rays/s) | TOTAL RAYS: %llu, TIME: %f (%f rays/s). Latency: %fs. CHUNKS WAITING TO BE PARSED: %lu", *(void *)(v49[6] + 56), *(void *)&v52, (double)*(unint64_t *)(v49[6] + 56) / v52, v42, *(void *)&v50, (double)v42 / v50, *(void *)&v51, v55);
      if (*(void *)(v3 + 584) != *(void *)(v3 + 576))
      {
        uint64_t v59 = 0;
        unint64_t v60 = 0;
        do
        {
          id v61 = [*(id *)(v3 + 8 * v92 + 64) contents];
          uint64_t v62 = *(void *)(*(void *)(v101[6] + 64) + v59) + 1;
          if (v62 != v61[v60 + 1]) {
            NSLog(@"\t\t WARNING: USC %zu: expected %zu rays, parsed %zu", v60, v61[v60 + 1], v62);
          }
          ++v60;
          v59 += 32;
        }
        while (v60 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v3 + 584) - *(void *)(v3 + 576)) >> 4));
      }
    }
  }
  else
  {
    atomic_store(mach_absolute_time(), v38);
    atomic_store(0, (unint64_t *)(v3 + 784));
  }
  uint64_t v63 = v101[6];
  if (!*(unsigned char *)(v63 + 89))
  {
    std::unique_lock<std::mutex>::unlock(&__lk);
    uint64_t v14 = [v90 commandBufferWithDescriptor:*(void *)(v3 + 24)];
    [v14 setLabel:@"AtomicHeatMap"];
    id v73 = [v14 computeCommandEncoderWithDispatchType:1];
    [v73 setLabel:@"AtomicHeatMap"];
    [v73 setComputePipelineState:*(void *)(v3 + 48)];
    [v73 setTexture:v113 atIndex:0];
    unint64_t v74 = (uint64_t)(*(void *)(v101[6] + 72) - *(void *)(v101[6] + 64)) >> 5;
    if (v74 >= 0x64) {
      unint64_t v74 = 100;
    }
    if (v74)
    {
      uint64_t v75 = 0;
      unint64_t v76 = 0;
      uint64_t v77 = (void *)(v3 + 8 * v92 + 112);
      do
      {
        [v73 setBuffer:*v77 offset:v75 * *(unsigned int *)(v91 + 20) atIndex:0];
        [v73 setBuffer:*(void *)(*(void *)(v101[6] + 64) + 8 * v75 + 16) offset:0 atIndex:1];
        v94[0] = 0;
        v94[0] = *(void *)(*(void *)(v101[6] + 64) + 8 * v75) - 1;
        [v73 setBytes:v94 length:8 atIndex:2];
        uint64_t v78 = v101[6];
        uint64_t v79 = *(void *)(v78 + 64);
        unint64_t v80 = *(void *)(v79 + 8 * v75);
        if (v80 >= 2 && v80 < *(void *)(v79 + 8 * v75 + 8))
        {
          unint64_t v97 = v80 - 1;
          int64x2_t v93 = vdupq_n_s64(1uLL);
          int64x2_t v98 = v93;
          id v95 = [*(id *)(v3 + 48) maxTotalThreadsPerThreadgroup];
          int64x2_t v96 = v93;
          [v73 dispatchThreads:&v97 threadsPerThreadgroup:&v95];
          uint64_t v78 = v101[6];
          uint64_t v79 = *(void *)(v78 + 64);
        }
        ++v76;
        unint64_t v81 = (*(void *)(v78 + 72) - v79) >> 5;
        if (v81 >= 0x64) {
          unint64_t v81 = 100;
        }
        v75 += 4;
      }
      while (v76 < v81);
    }
    [v73 endEncoding];
    v94[0] = _NSConcreteStackBlock;
    v94[1] = 3221225472;
    v94[2] = ___ZN33AccelerationStructureViewerServer8Profiler11finishFrameEPU26objcproto15MTLCommandQueue11objc_objectPU35objcproto24MTLComputeCommandEncoder11objc_objectmP18ASVSRenderSettingsPN27AccelerationStructureViewer6SampleE_block_invoke;
    v94[3] = &unk_7475A0;
    v94[4] = &v100;
    v94[5] = v3;
    [v14 addCompletedHandler:v94];

    uint64_t v2 = v88;
    goto LABEL_113;
  }
  unint64_t v64 = atomic_load((unint64_t *)(v63 + 48));
  uint64_t v65 = v101;
  uint64_t v66 = (std::__shared_weak_count *)v101[7];
  uint64_t v67 = *(void *)(v101[6] + 56);
  v101[6] = 0;
  v65[7] = 0;
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v66);
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  uint64_t v2 = v88;
  id v6 = v89;
  if (*(unsigned char *)(v3 + 32)) {
    NSLog(@"COLLECTOR IS DAMAGED; WE COLLECTED %llu/%llu rays", v64, v67);
  }
  if (v64 + 1 > 1)
  {
    uint64_t v14 = 0;
    goto LABEL_114;
  }
  if (*(void *)(v3 + 584) == *(void *)(v3 + 576))
  {
LABEL_94:
    if (*(unsigned char *)(v3 + 32)) {
      NSLog(@"COLLECTOR IS VERY DAMAGED");
    }
    std::mutex::lock((std::mutex *)(v3 + 320));
    id v6 = v89;
    id v72 = v87;
    if (*(unsigned char *)(v3 + 432) && !*(_DWORD *)(v3 + 436)) {
      AccelerationStructureViewerServer::Profiler::stopAPSStreaming(v3, *(void **)v3);
    }
    std::mutex::unlock((std::mutex *)(v3 + 320));
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    uint64_t v70 = 40;
    while (1)
    {
      std::mutex::lock((std::mutex *)(*(void *)(v3 + 552) + v68));
      uint64_t v71 = *(void *)(*(void *)(v3 + 576) + v70);
      std::mutex::unlock((std::mutex *)(*(void *)(v3 + 552) + v68));
      if (v71) {
        break;
      }
      ++v69;
      v68 += 64;
      v70 += 48;
      if (v69 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v3 + 584) - *(void *)(v3 + 576)) >> 4)) {
        goto LABEL_94;
      }
    }
    uint64_t v14 = 0;
LABEL_113:
    id v6 = v89;
LABEL_114:
    id v72 = v87;
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v72);
  }
  _Block_object_dispose(&v100, 8);
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v107);
  }
  id v5 = v90;
LABEL_13:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }

  char v15 = *(void **)(a1 + 704);
  if (*(void **)(a1 + 696) != v15) {
    AccelerationStructureViewerServer::Profiler::finishSkipFrame(v2[2192], v15);
  }
  char v16 = *(unsigned char *)(a1 + 744);
  AccelerationStructureViewer::Sample::Sample(v109, v111);
  AccelerationStructureViewerServer::Renderer::commitSample(v2, v16, v109, v14, *(void **)(*(void *)(*(void *)(a1 + 712) + 8) + 40), *(double *)(a1 + 736));

  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v110);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v112);
}

void AccelerationStructureViewerServer::Renderer::completeSample(uint64_t a1, char a2, id *a3, void *a4, double a5)
{
  id v9 = a4;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x3032000000;
  v12[3] = __Block_byref_object_copy__9838;
  v12[4] = __Block_byref_object_dispose__9839;
  id v13 = v9;
  uint64_t v10 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = ___ZN33AccelerationStructureViewerServer8Renderer14completeSampleEhN27AccelerationStructureViewer6SampleEdPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
  block[3] = &unk_747358;
  v16[11] = a1;
  char v17 = a2;
  v16[10] = v12;
  id v11 = v9;
  AccelerationStructureViewer::Sample::Sample(v15, a3);
  *(double *)&v16[12] = a5;
  dispatch_async(v10, block);

  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v16);
  _Block_object_dispose(v12, 8);
}

void *___ZN33AccelerationStructureViewerServer8Renderer12commitSampleEhN27AccelerationStructureViewer6SampleEdPU27objcproto16MTLCommandBuffer11objc_objectPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 696);
  char v3 = *(unsigned char *)(a1 + 712);
  AccelerationStructureViewer::Sample::Sample(v5, (id *)(a1 + 32));
  AccelerationStructureViewerServer::Renderer::completeSample(v2, v3, v5, *(void **)(*(void *)(*(void *)(a1 + 688) + 8) + 40), *(double *)(a1 + 704));

  return std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v6);
}

void ___ZN33AccelerationStructureViewerServer8Renderer14completeSampleEhN27AccelerationStructureViewer6SampleEdPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 696);
  if (*(void *)(v2 + 16840))
  {
    *(CFAbsoluteTime *)(v2 + 8 * (*(void *)(a1 + 40) & 0x1FLL) + 120) = CFAbsoluteTimeGetCurrent();
    uint64_t v3 = *(void *)(v2 + 16840);
    AccelerationStructureViewer::Sample::Sample(v19, (id *)(a1 + 32));
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 40))(v3, v2, v19);

    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v20);
    std::mutex::lock((std::mutex *)(v2 + 48));
    double Current = CFAbsoluteTimeGetCurrent();
    if (*(unsigned char *)(v2 + 16832)) {
      goto LABEL_26;
    }
    float v5 = Current - *(double *)(a1 + 704);
    float v6 = 1.0 / v5;
    float v7 = *(double *)(v2 + 16824);
    float v8 = 1.0 / v7;
    if (v6 < 30.0 || v8 < 30.0)
    {
      unsigned int v10 = *(unsigned __int8 *)(v2 + 16996);
      LOBYTE(v11) = 2 * v10;
    }
    else
    {
      if (v6 <= 180.0 || v8 <= 180.0)
      {
        LOBYTE(v11) = *(unsigned char *)(v2 + 16996);
        *(_DWORD *)(v2 + 16992) = 0;
        char v16 = (char *)(v2 + 16996);
LABEL_21:
        if (v11 > 0x10u)
        {
          char v18 = 16;
LABEL_25:
          *char v16 = v18;
          goto LABEL_26;
        }
        if (v11 <= 7u)
        {
          char v18 = 8;
          goto LABEL_25;
        }
LABEL_26:
        std::mutex::unlock((std::mutex *)(v2 + 48));
        AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(v2, *(unsigned __int8 *)(a1 + 712), *(void **)(*(void *)(*(void *)(a1 + 688) + 8) + 40));
        return;
      }
      unsigned int v10 = *(unsigned __int8 *)(v2 + 16996);
      unsigned int v11 = v10 >> 1;
    }
    unsigned int v17 = *(_DWORD *)(v2 + 16992) + 1;
    *(_DWORD *)(v2 + 16992) = v17;
    char v16 = (char *)(v2 + 16996);
    if (v17 <= 4 * v10)
    {
      LOBYTE(v11) = v10;
    }
    else
    {
      *(unsigned char *)(v2 + 16996) = v11;
      *(_DWORD *)(v2 + 16992) = 0;
    }
    goto LABEL_21;
  }
  unsigned int v12 = *(unsigned __int8 *)(a1 + 712);
  id v13 = *(void **)(*(void *)(*(void *)(a1 + 688) + 8) + 40);
  uint64_t v14 = *(void *)(a1 + 696);

  AccelerationStructureViewerServer::Renderer::releaseUniformBufferIndex(v14, v12, v13);
}

void AccelerationStructureViewerServer::Renderer::acknowledge(AccelerationStructureViewerServer::Renderer *this, unint64_t a2, char a3)
{
  float v6 = (std::mutex *)((char *)this + 48);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  float v7 = (char *)this + 376;
  unint64_t v8 = a2 & 0x1F;
  unint64_t v9 = *((unsigned __int16 *)this + v8 + 188);
  if (v9 > 0x3FF)
  {
    if (a3) {
      goto LABEL_14;
    }
    double Current = CFAbsoluteTimeGetCurrent();
  }
  else
  {
    unsigned int v10 = (char *)this + 8 * v9;
    *((void *)v10 + 1079) = 0;
    *(_WORD *)&v7[2 * v8] = 1024;
    if (a3) {
      goto LABEL_14;
    }
    double Current = CFAbsoluteTimeGetCurrent();
    *((double *)v10 + 55) = Current;
  }
  unint64_t v12 = atomic_load((unint64_t *)this + 4);
  if (v12 < a2)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = ((_BYTE)v12 + (_BYTE)v13) & 0x1F;
      unint64_t v15 = *(unsigned __int16 *)&v7[2 * v14];
      if (v15 <= 0x3FF)
      {
        *((void *)this + v15 + 1079) = 0;
        *(_WORD *)&v7[2 * v14] = 1024;
      }
      if (~v12 + a2 == v13) {
        break;
      }
    }
    while (v13++ < 0x1F);
    *((double *)this + 2103) = (Current - *((double *)this + v8 + 15)) * 0.5;
    atomic_store(a2, (unint64_t *)this + 4);
  }
LABEL_14:

  std::mutex::unlock(v6);
}

void AccelerationStructureViewerServer::Renderer::capture(AccelerationStructureViewerServer::Renderer *this, uint64_t a2)
{
  unsigned int v2 = a2;
  NSLog(@"Requesting capture of %d samples…", a2);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  *((void *)this + 2214) = v2;

  std::mutex::unlock((std::mutex *)((char *)this + 48));
}

void AccelerationStructureViewerServer::Renderer::requestGBVH(AccelerationStructureViewerServer::Renderer *this, uint64_t a2)
{
  uint64_t v4 = +[NSFileManager defaultManager];
  float v5 = NSTemporaryDirectory();
  uint64_t v6 = +[NSUUID UUID];
  float v7 = [(id)v6 UUIDString];
  unint64_t v8 = +[NSString stringWithFormat:@"%@.mtlas", v7];
  unint64_t v9 = [v5 stringByAppendingPathComponent:v8];

  uint64_t v10 = *((void *)this + 1);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  memcpy(__dst, (char *)this + 16992, sizeof(__dst));
  long long v11 = *((_OWORD *)this + 1058);
  long long v12 = *((_OWORD *)this + 1060);
  v21[6] = *((_OWORD *)this + 1059);
  v21[7] = v12;
  v21[8] = *((_OWORD *)this + 1061);
  long long v13 = *((_OWORD *)this + 1054);
  long long v14 = *((_OWORD *)this + 1056);
  v21[2] = *((_OWORD *)this + 1055);
  v21[3] = v14;
  v21[4] = *((_OWORD *)this + 1057);
  v21[5] = v11;
  v21[0] = *((_OWORD *)this + 1053);
  v21[1] = v13;
  std::mutex::unlock((std::mutex *)((char *)this + 48));
  id v19 = 0;
  LOBYTE(v6) = writeAccelerationStructureToGBVH5Path(v10, (char *)v21, (uint64_t)__dst, v9, (uint64_t)&v19);
  id v15 = v19;
  if (v6)
  {
    id v18 = v15;
    char v16 = +[NSData dataWithContentsOfFile:v9 options:2 error:&v18];
    id v17 = v18;

    (*(void (**)(void, uint64_t, void *, id))(**((void **)this + 2105) + 32))(*((void *)this + 2105), a2, v16, v17);
    [v4 removeItemAtPath:v9 error:0];

    id v15 = v17;
  }
  else
  {
    [v4 removeItemAtPath:v9 error:0];
    (*(void (**)(void, uint64_t, void, id))(**((void **)this + 2105) + 32))(*((void *)this + 2105), a2, 0, v15);
  }
}

BOOL AccelerationStructureViewerServer::Renderer::writeGBVHToFile(AccelerationStructureViewerServer::Renderer *this, NSString *a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v4 = 0;
  return writeAccelerationStructureToGBVH5Path(v2, 0, 0, a2, (uint64_t)&v4);
}

void AccelerationStructureViewerServer::Renderer::setVersion(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD) {
    uint64_t v3 = 13;
  }
  else {
    uint64_t v3 = a2;
  }
  uint64_t v4 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  *(void *)(a1 + 112) = v3;
  uint64_t v5 = *(void *)(a1 + 16840);
  std::mutex::unlock(v4);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 72))(v5, v3);
  }
  NSLog(@"ASVServer to use version %llu", v3);
}

void AccelerationStructureViewerServer::Renderer::setIntersectionHints(uint64_t a1, const void *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  *(unsigned char *)(a1 + 17505) = 1;
  memcpy((void *)(a1 + 17016), a2, 0x1B8uLL);

  std::mutex::unlock(v4);
}

void AccelerationStructureViewerServer::Renderer::setTransform(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4 = a1 + 16832;
  uint64_t v5 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  *(unsigned char *)(v4 + 673) = 1;
  uint64_t v6 = (char *)(a1 + 16848);
  if (memcmp(a2, (const void *)(a1 + 16848), 0x90uLL))
  {
    if (a2->u8[0] != *v6
      || a2->u16[1] != *(unsigned __int16 *)(v4 + 18)
      || ((v7 = a2->f32[1], v8 = *(float *)(v4 + 20), float v9 = v8 + -0.001, v10 = v8 + 0.001, v7 >= v9)
        ? (BOOL v11 = v7 > v10)
        : (BOOL v11 = 1),
          v11
       || a2->i32[2] != *(_DWORD *)(v4 + 24)
       || a2->i32[3] != *(_DWORD *)(v4 + 28)
       || (v12.i64[0] = 0x3400000034000000,
           v12.i64[1] = 0x3400000034000000,
           (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(a2[2], *(float32x4_t *)(a1 + 16880))), (int8x16_t)vcgeq_f32(v12, vabdq_f32(a2[1], *(float32x4_t *)(a1 + 16864)))), vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(a2[3], *(float32x4_t *)(a1 + 16896))), (int8x16_t)vcgeq_f32(v12, vabdq_f32(a2[4], *(float32x4_t *)(a1 + 16912)))))) & 0x80000000) == 0)|| (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(a2[6], *(float32x4_t *)(a1 + 16944))), (int8x16_t)vcgeq_f32(v12, vabdq_f32(a2[5], *(float32x4_t *)(a1 + 16928)))), vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(a2[7], *(float32x4_t *)(a1 + 16960))), (int8x16_t)vcgeq_f32(v12, vabdq_f32(a2[8], *(float32x4_t *)(a1 + 16976)))))) & 0x80000000) == 0))
    {
      *(CFAbsoluteTime *)(a1 + 17512) = CFAbsoluteTimeGetCurrent();
      atomic_store(1u, (unsigned __int8 *)(v4 + 712));
    }
  }
  *(float32x4_t *)uint64_t v6 = *a2;
  float32x4_t v13 = a2[1];
  float32x4_t v14 = a2[2];
  float32x4_t v15 = a2[4];
  *(float32x4_t *)(a1 + 16896) = a2[3];
  *(float32x4_t *)(a1 + 16912) = v15;
  *(float32x4_t *)(a1 + 16864) = v13;
  *(float32x4_t *)(a1 + 16880) = v14;
  float32x4_t v16 = a2[5];
  float32x4_t v17 = a2[6];
  float32x4_t v18 = a2[8];
  *(float32x4_t *)(a1 + 16960) = a2[7];
  *(float32x4_t *)(a1 + 16976) = v18;
  *(float32x4_t *)(a1 + 16928) = v16;
  *(float32x4_t *)(a1 + 16944) = v17;
  char v19 = *v6;
  if (*v6)
  {
    *(unsigned char *)(v4 + 164) = v19;
    char v19 = 1;
  }
  *(unsigned char *)uint64_t v4 = v19;
  int v20 = *(unsigned __int8 *)(v4 + 674);
  uint64_t v21 = *(void *)(a1 + 16840);
  *(unsigned char *)(v4 + 674) = 0;
  long long v22 = *(_OWORD *)(a1 + 17472);
  long long v24 = *(_OWORD *)(a1 + 17456);
  long long v25 = v22;
  long long v26 = *(_OWORD *)(a1 + 17488);
  std::mutex::unlock(v5);
  if (v20)
  {
    if (v21)
    {
      v23[1] = v25;
      v23[2] = v26;
      v23[0] = v24;
      (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v21 + 24))(v21, a1, v23);
    }
  }
}

void AccelerationStructureViewerServer::Renderer::setResolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  *(void *)(a1 + 16840) = a2;

  std::mutex::unlock(v4);
}

void AccelerationStructureViewerServer::Renderer::~Renderer(AccelerationStructureViewerServer::Renderer *this)
{
  AccelerationStructureViewerServer::Renderer::~Renderer(this);

  operator delete();
}

{
  NSObject *v2;
  void *v3;
  int v4;
  int v5;
  uint64_t i;
  uint64_t j;

  *(void *)this = off_7471F8;
  uint64_t v2 = *((id *)this + 2197);
  uint64_t v3 = (void *)*((void *)this + 2197);
  *((void *)this + 2197) = 0;

  uint64_t v4 = 3;
  do
  {
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    --v4;
  }
  while (v4);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>>>::destroy(*((void **)this + 2205));
  *((void *)this + 2204) = (char *)this + 17640;
  *((void *)this + 2206) = 0;
  *((void *)this + 2205) = 0;
  std::__tree<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::__map_value_compare<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::less<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>>,true>,std::allocator<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>>>::destroy(*((void **)this + 2212));
  *((void *)this + 2211) = (char *)this + 17696;
  *((void *)this + 2213) = 0;
  *((void *)this + 2212) = 0;
  if (*((void *)this + 2192)) {
    std::unique_ptr<AccelerationStructureViewerServer::Profiler>::reset[abi:nn180100]((uint64_t *)this + 2192, 0);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 48));
  uint64_t v5 = 3;
  do
  {
    dispatch_semaphore_signal(v2);
    --v5;
  }
  while (v5);

  std::__tree<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::__map_value_compare<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::less<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>>,true>,std::allocator<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>>>::destroy(*((void **)this + 2212));
  std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>>>::destroy(*((void **)this + 2205));
  for (uint64_t i = 0; i != -24; i -= 8)

  for (uint64_t j = 0; j != -24; j -= 8)
  std::unique_ptr<AccelerationStructureViewerServer::Profiler>::reset[abi:nn180100]((uint64_t *)this + 2192, 0);

  std::mutex::~mutex((std::mutex *)((char *)this + 48));
}

void std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewer::IntersectionFunctionTable>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::__map_value_compare<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::less<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>>,true>,std::allocator<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::__map_value_compare<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::less<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>>,true>,std::allocator<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::__map_value_compare<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>,std::less<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>>,true>,std::allocator<std::__value_type<std::pair<AccelerationStructureViewerServer::IntersectorType,AccelerationStructureViewer::IntersectionFunctionTable *>,std::unique_ptr<AccelerationStructureViewerServer::Intersector>>>>::destroy(a1[1]);
    uint64_t v2 = (id *)a1[6];
    a1[6] = 0;
    if (v2) {
      std::default_delete<AccelerationStructureViewerServer::Intersector>::operator()[abi:nn180100](v2);
    }
    operator delete(a1);
  }
}

uint64_t *std::unique_ptr<AccelerationStructureViewerServer::Profiler>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    v32.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 320);
    v32.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v2 + 320));
    while (1)
    {
      if (!*(unsigned char *)(v2 + 432)) {
        goto LABEL_8;
      }
      if (!*(_DWORD *)(v2 + 436)) {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v2 + 384), &v32);
    }
    AccelerationStructureViewerServer::Profiler::stopAPSStreaming(v2, *(void **)v2);
LABEL_8:
    for (uint64_t i = 0; i != 24; i += 8)
    {
      uint64_t v4 = *(void **)(v2 + i + 64);
      *(void *)(v2 + i + 64) = 0;

      uint64_t v5 = *(void **)(v2 + i + 88);
      *(void *)(v2 + i + 88) = 0;
    }
    uint64_t v6 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = 0;

    float v7 = *(void **)(v2 + 48);
    *(void *)(v2 + 48) = 0;

    float v8 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;

    float v9 = *(void **)v2;
    *(void *)uint64_t v2 = 0;

    if (v32.__owns_) {
      std::mutex::unlock(v32.__m_);
    }

    std::__tree<std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>>>::destroy(*(void **)(v2 + 736));
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + 688);
    std::mutex::~mutex((std::mutex *)(v2 + 624));
    float v10 = *(void **)(v2 + 600);
    if (v10)
    {
      *(void *)(v2 + 608) = v10;
      operator delete(v10);
    }
    uint64_t v11 = *(void *)(v2 + 576);
    if (v11)
    {
      uint64_t v12 = *(void *)(v2 + 584);
      float32x4_t v13 = *(void **)(v2 + 576);
      if (v12 != v11)
      {
        do
          uint64_t v12 = std::deque<AccelerationStructureViewerServer::APSRawChunk>::~deque[abi:nn180100](v12 - 48);
        while (v12 != v11);
        float32x4_t v13 = *(void **)(v2 + 576);
      }
      *(void *)(v2 + 584) = v11;
      operator delete(v13);
    }
    v32.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 552);
    std::vector<std::mutex>::__destroy_vector::operator()[abi:nn180100]((void ***)&v32);
    std::deque<AccelerationStructureViewerServer::APSRawChunk>::~deque[abi:nn180100](v2 + 504);
    std::mutex::~mutex((std::mutex *)(v2 + 440));
    std::condition_variable::~condition_variable((std::condition_variable *)(v2 + 384));
    std::mutex::~mutex((std::mutex *)(v2 + 320));
    float32x4_t v14 = *(void **)(v2 + 296);
    if (v14)
    {
      *(void *)(v2 + 304) = v14;
      operator delete(v14);
    }
    v32.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 272);
    std::vector<std::thread>::__destroy_vector::operator()[abi:nn180100]((void ***)&v32);
    v32.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 248);
    std::vector<std::thread>::__destroy_vector::operator()[abi:nn180100]((void ***)&v32);
    float32x4_t v15 = *(void ***)(v2 + 208);
    float32x4_t v16 = *(void ***)(v2 + 216);
    if (v16 == v15)
    {
      float32x4_t v17 = (void *)(v2 + 240);
      float32x4_t v16 = *(void ***)(v2 + 208);
    }
    else
    {
      float32x4_t v17 = (void *)(v2 + 240);
      unint64_t v18 = *(void *)(v2 + 232);
      char v19 = &v15[v18 >> 9];
      int v20 = (void **)((char *)*v19 + 8 * (v18 & 0x1FF));
      uint64_t v21 = *(uint64_t *)((char *)v15 + (((*(void *)(v2 + 240) + v18) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(void *)(v2 + 240) + v18) & 0x1FF);
      if (v20 != (void **)v21)
      {
        do
        {
          long long v22 = *v20++;

          if ((char *)v20 - (unsigned char *)*v19 == 4096)
          {
            char v23 = (void **)v19[1];
            ++v19;
            int v20 = v23;
          }
        }
        while (v20 != (void **)v21);
        float32x4_t v15 = *(void ***)(v2 + 208);
        float32x4_t v16 = *(void ***)(v2 + 216);
      }
    }
    void *v17 = 0;
    unint64_t v24 = (char *)v16 - (char *)v15;
    if ((unint64_t)((char *)v16 - (char *)v15) >= 0x11)
    {
      do
      {
        operator delete(*v15);
        float32x4_t v16 = *(void ***)(v2 + 216);
        float32x4_t v15 = (void **)(*(void *)(v2 + 208) + 8);
        *(void *)(v2 + 208) = v15;
        unint64_t v24 = (char *)v16 - (char *)v15;
      }
      while ((unint64_t)((char *)v16 - (char *)v15) > 0x10);
    }
    unint64_t v25 = v24 >> 3;
    if (v25 == 1)
    {
      uint64_t v26 = 256;
    }
    else
    {
      if (v25 != 2)
      {
LABEL_35:
        if (v15 != v16)
        {
          do
          {
            std::chrono::system_clock::time_point v27 = *v15++;
            operator delete(v27);
          }
          while (v15 != v16);
          uint64_t v29 = *(void *)(v2 + 208);
          uint64_t v28 = *(void *)(v2 + 216);
          if (v28 != v29) {
            *(void *)(v2 + 216) = v28 + ((v29 - v28 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        unint64_t v30 = *(void **)(v2 + 200);
        if (v30) {
          operator delete(v30);
        }
        std::mutex::~mutex((std::mutex *)(v2 + 136));
        for (uint64_t j = 128; j != 104; j -= 8)

        do
        {

          j -= 8;
        }
        while (j != 80);
        do
        {

          j -= 8;
        }
        while (j != 56);

        operator delete();
      }
      uint64_t v26 = 512;
    }
    *(void *)(v2 + 232) = v26;
    goto LABEL_35;
  }
  return result;
}

void ___ZN33AccelerationStructureViewerServer8Renderer13setDataSourceEPNS_10DataSourceEPU35objcproto24MTLAccelerationStructure11objc_objectP7NSArrayIS4_EPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v19 = a3;
  uint64_t v4 = *a2;
  int v20 = a2;
  if (*a2 != a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = (void *)(v5 + 17016);
    float v7 = (uint64_t **)(v5 + 17640);
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
      unint64_t v9 = *(void *)(v8 + 24);
      if (v9 <= *(void *)(v4 + 24)) {
        unint64_t v9 = *(void *)(v4 + 24);
      }
      *(void *)(v8 + 24) = v9;
      unint64_t v10 = *(void *)(v4 + 16);
      id v11 = *(id *)(v4 + 8);
      long long v22 = *(_OWORD *)(v4 + 16);
      uint64_t v12 = *v7;
      float32x4_t v13 = (uint64_t **)(v5 + 17640);
      float32x4_t v14 = (uint64_t **)(v5 + 17640);
      if (*v7)
      {
        while (1)
        {
          while (1)
          {
            float32x4_t v14 = (uint64_t **)v12;
            unint64_t v15 = v12[4];
            if (v10 >= v15) {
              break;
            }
            uint64_t v12 = *v14;
            float32x4_t v13 = v14;
            if (!*v14) {
              goto LABEL_12;
            }
          }
          if (v15 >= v10) {
            break;
          }
          uint64_t v12 = v14[1];
          if (!v12)
          {
            float32x4_t v13 = v14 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        float32x4_t v16 = (char *)operator new(0x48uLL);
        *((void *)v16 + 4) = v10;
        *((void *)v16 + 5) = off_747528;
        *((void *)v16 + 6) = v11;
        *(_OWORD *)(v16 + 56) = v22;
        *(void *)float32x4_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v14;
        *float32x4_t v13 = (uint64_t *)v16;
        uint64_t v17 = **(void **)(v5 + 17632);
        if (v17)
        {
          *(void *)(v5 + 17632) = v17;
          unint64_t v18 = *v13;
        }
        else
        {
          unint64_t v18 = (uint64_t *)v16;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 17640), v18);
        ++*(void *)(v5 + 17648);
        id v11 = 0;
      }

      if (!*(_DWORD *)v6 && !*(_DWORD *)(v5 + 17020)) {
        void *v6 = *(void *)(v4 + 16);
      }
      v4 += 32;
    }
    while (v4 != v20[1]);
  }
}

BOOL writeAccelerationStructureToGBVH5Path(uint64_t a1, char *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v7 = a4;
  NSLog(@"Writing GBVH to %@…", v7);
  uint64_t v134 = 0;
  unint64_t v133 = 0;
  uint64_t v135 = 0;
  uint64_t v8 = *(void *)(a1 + 192);
  uint64_t v88 = a1;
  uint64_t v89 = *(void *)(a1 + 184);
  id v87 = v7;
  if (v8 == v89)
  {
    long long v22 = 0;
    char v23 = 0;
  }
  else
  {
    uint64_t v83 = a5;
    unint64_t v9 = 0xD37A6F4DE9BD37A7 * ((v8 - v89) >> 3);
    if (v9 >= 0x1642C8590B21643) {
LABEL_30:
    }
      abort();
    unint64_t v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewerServer::AccelerationStructure>>(v9);
    uint64_t v11 = 0;
    unint64_t v133 = v10;
    uint64_t v134 = v10;
    uint64_t v135 = &v10[184 * v12];
    do
    {
      uint64_t v13 = v89 + v11;
      float32x4_t v14 = &v10[v11];
      *(void *)float32x4_t v14 = *(id *)(v89 + v11);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v89 + v11 + 8);
      *((void *)v14 + 3) = *(id *)(v89 + v11 + 24);
      *((void *)v14 + 4) = *(void *)(v89 + v11 + 32);
      *((void *)v14 + 5) = *(id *)(v89 + v11 + 40);
      *((void *)v14 + 6) = *(void *)(v89 + v11 + 48);
      *((void *)v14 + 7) = *(id *)(v89 + v11 + 56);
      *((void *)v14 + 8) = *(void *)(v89 + v11 + 64);
      *((void *)v14 + 9) = *(id *)(v89 + v11 + 72);
      *((void *)v14 + 10) = *(void *)(v89 + v11 + 80);
      *((void *)v14 + 11) = *(id *)(v89 + v11 + 88);
      *((void *)v14 + 12) = *(void *)(v89 + v11 + 96);
      *((void *)v14 + 13) = *(id *)(v89 + v11 + 104);
      long long v15 = *(_OWORD *)(v89 + v11 + 112);
      *((void *)v14 + 16) = 0;
      *((_OWORD *)v14 + 7) = v15;
      *((void *)v14 + 17) = 0;
      *((void *)v14 + 18) = 0;
      uint64_t v17 = *(unsigned char **)(v89 + v11 + 128);
      float32x4_t v16 = *(unsigned char **)(v89 + v11 + 136);
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v16 - v17 < 0) {
          goto LABEL_30;
        }
        id v19 = &v10[v11];
        int v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v18 >> 3);
        *((void *)v14 + 16) = v20;
        *((void *)v19 + 17) = v20;
        *((void *)v19 + 18) = &v20[8 * v21];
        memmove(v20, v17, v18);
        *((void *)v19 + 17) = &v20[v18];
      }
      *((void *)v14 + 19) = *(id *)(v13 + 152);
      *((void *)v14 + 20) = *(void *)(v13 + 160);
      *((void *)v14 + 21) = *(id *)(v13 + 168);
      v14[176] = *(unsigned char *)(v13 + 176);
      v11 += 184;
    }
    while (v13 + 184 != v8);
    long long v22 = v10;
    char v23 = &v10[v11];
    uint64_t v134 = v23;
    id v7 = v87;
    a5 = v83;
  }
  unint64_t v24 = +[NSURL fileURLWithPath:v7];
  int v132 = 259;
  unint64_t v25 = +[NSData dataWithBytes:&v132 length:4];
  uint64_t v26 = +[NSURL fileURLWithPath:v7];
  [v25 writeToURL:v26 atomically:0];

  std::chrono::system_clock::time_point v27 = +[NSFileHandle fileHandleForWritingToURL:v24 error:a5];
  if (v27)
  {
    id v90 = v24;
    uint64_t v128 = 0;
    uint64_t v129 = &v128;
    uint64_t v130 = 0x2020000000;
    int v131 = 0;
    v127[0] = _NSConcreteStackBlock;
    v127[1] = 3221225472;
    v127[2] = ___Z37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSError_block_invoke;
    v127[3] = &unk_7473C8;
    v127[4] = &v128;
    (*(void (**)(uint64_t, void *))(*(void *)v88 + 16))(v88, v127);
    uint64_t v28 = 16;
    if (a2 != 0 && a3 != 0) {
      uint64_t v28 = 28;
    }
    size_t v29 = v28 + 0xFFFFFFFE42C8590CLL * ((v23 - v22) >> 3) + 24 * *((unsigned int *)v129 + 6);
    unint64_t v30 = malloc_type_malloc(v29, 0x87136C1BuLL);
    *unint64_t v30 = 5;
    v30[1] = -373475417 * ((v23 - v22) >> 3);
    v30[2] = *((_DWORD *)v129 + 6);
    v30[3] = a2 != 0 && a3 != 0;
    unsigned int v81 = *((_DWORD *)v129 + 6);
    unint64_t v82 = (unint64_t)&v30[-1867377085 * ((v23 - v22) >> 3) + 4];
    [v27 seekToFileOffset:0];
    size_t v84 = v29;
    uint64_t v31 = +[NSData dataWithBytes:v30 length:v29];
    [v27 writeData:v31];

    [v27 offsetInFile];
    if (v30[1])
    {
      unint64_t v32 = 0;
      uint64_t v33 = v22 + 80;
      unsigned int v34 = v30 + 8;
      do
      {
        [*((id *)v33 - 7) contents];
        NSLog(@"\tWriting AccelerationStructure 0x%llx to offset 0x%llx…", *((void *)v33 - 8), [v27 offsetInFile]);
        uint64_t v91 = (void **)((char *)[*((id *)v33 - 7) length] - *((void *)v33 - 6));
        *(void *)uint64_t v92 = (char *)[*((id *)v33 - 5) length] - *((void *)v33 - 4);
        *(void *)&v92[8] = (char *)[*((id *)v33 - 3) length] - *((void *)v33 - 2);
        *(void *)&v92[16] = (char *)[*((id *)v33 - 1) length] - *(void *)v33;
        *(void *)&v92[24] = (char *)[*((id *)v33 + 1) length] - *((void *)v33 + 2);
        *(void *)&v92[32] = (char *)[*((id *)v33 + 9) length] - *((void *)v33 + 10);
        *(void *)&v92[40] = *((void *)v33 + 5);
        NSLog(@"\t\theaderBufferSize: 0x%llx…", v91);
        NSLog(@"\t\tinnerNodeBufferSize: 0x%llx…", *(void *)v92);
        NSLog(@"\t\tleafNodeBufferSize: 0x%llx…", *(void *)&v92[8]);
        NSLog(@"\t\tprimitiveBufferSize: 0x%llx…", *(void *)&v92[16]);
        NSLog(@"\t\tgeometryBufferSize: 0x%llx…", *(void *)&v92[24]);
        NSLog(@"\t\tinstanceBufferSize: 0x%llx…", *(void *)&v92[32]);
        NSLog(@"\t\tperPrimitiveDataBufferSize: 0x%llx…", *(void *)&v92[40]);
        *((void *)v34 - 2) = [v27 offsetInFile];
        *((void *)v34 - 1) = *((void *)v33 - 8);
        BOOL v35 = (void *)*((void *)v33 - 10);
        if (v35)
        {
          uint64_t v36 = [v35 dataUsingEncoding:30];
          _DWORD *v34 = [v36 length];
          [v27 writeData:v36];
        }
        else
        {
          _DWORD *v34 = 0;
        }
        uint64_t v37 = +[NSData dataWithBytes:&v91 length:56];
        [v27 writeData:v37];

        uint64_t v38 = *((void *)v33 - 6);
        unint64_t v39 = (char *)[*((id *)v33 - 7) contents];
        unint64_t v40 = +[NSData dataWithBytes:&v39[v38] length:v91];
        [v27 writeData:v40];

        uint64_t v41 = *((void *)v33 - 4);
        unint64_t v42 = (char *)[*((id *)v33 - 5) contents];
        unint64_t v43 = +[NSData dataWithBytes:&v42[v41] length:*(void *)v92];
        [v27 writeData:v43];

        uint64_t v44 = *((void *)v33 - 2);
        uint64_t v45 = (char *)[*((id *)v33 - 3) contents];
        unint64_t v46 = +[NSData dataWithBytes:&v45[v44] length:*(void *)&v92[8]];
        [v27 writeData:v46];

        uint64_t v47 = *(void *)v33;
        uint64_t v48 = (char *)[*((id *)v33 - 1) contents];
        unsigned int v49 = +[NSData dataWithBytes:&v48[v47] length:*(void *)&v92[16]];
        [v27 writeData:v49];

        uint64_t v50 = *((void *)v33 + 2);
        double v51 = (char *)[*((id *)v33 + 1) contents];
        double v52 = +[NSData dataWithBytes:&v51[v50] length:*(void *)&v92[24]];
        [v27 writeData:v52];

        uint64_t v53 = *((void *)v33 + 10);
        unint64_t v54 = (char *)[*((id *)v33 + 9) contents];
        uint64_t v55 = +[NSData dataWithBytes:&v54[v53] length:*(void *)&v92[32]];
        [v27 writeData:v55];

        uint64_t v56 = *((void *)v33 + 4);
        unint64_t v57 = (char *)[*((id *)v33 + 3) contents];
        uint64_t v58 = +[NSData dataWithBytes:&v57[v56] length:*(void *)&v92[40]];
        [v27 writeData:v58];

        ++v32;
        v33 += 184;
        v34 += 5;
      }
      while (v32 < v30[1]);
    }
    v123[0] = _NSConcreteStackBlock;
    v123[1] = 3221225472;
    v123[2] = ___Z37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSError_block_invoke_2;
    v123[3] = &unk_7473F0;
    unint64_t v125 = v82;
    id v59 = v27;
    id v124 = v59;
    uint64_t v126 = v88;
    (*(void (**)(uint64_t, void *))(*(void *)v88 + 16))(v88, v123);
    if (a2 != 0 && a3 != 0)
    {
      unint64_t v60 = v82 + 24 * v81;
      *(void *)unint64_t v60 = [v59 offsetInFile];
      id v61 = [@"default" dataUsingEncoding:30];
      *(_DWORD *)(v60 + 8) = [v61 length];
      [v59 writeData:v61];

      int v118 = *((_DWORD *)a2 + 1);
      char v119 = *a2;
      uint64_t v120 = *((void *)a2 + 1);
      float2matrix(&v121, (simd_float4x4 *)(a2 + 16));
      *(float *)&double v62 = float2matrix(&v122, (simd_float4x4 *)(a2 + 80));
      uint64_t v63 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v117, 142, v62);
      [v59 writeData:v63];

      BYTE1(v91) = *(unsigned char *)(a3 + 32);
      uint64_t v65 = *(void *)(a3 + 24);
      int v66 = *(unsigned __int8 *)(a3 + 38);
      if (v66 == 2) {
        char v67 = 2;
      }
      else {
        char v67 = v66 == 1;
      }
      BYTE2(v91) = *(unsigned char *)(a3 + 33) == 1;
      v64.i32[0] = *(_DWORD *)(a3 + 34);
      int16x8_t v68 = (int16x8_t)vmovl_u8(v64);
      int8x8_t v69 = (int8x8_t)vceq_s16(*(int16x4_t *)v68.i8, (int16x4_t)0x1000100010001);
      *(int16x4_t *)v68.i8 = vceq_s16(*(int16x4_t *)v68.i8, (int16x4_t)0x2000200020002);
      *(int16x4_t *)v68.i8 = vsub_s16((int16x4_t)vand_s8(*(int8x8_t *)v68.i8, (int8x8_t)0x2000200020002), (int16x4_t)vbic_s8(v69, *(int8x8_t *)v68.i8));
      *(_DWORD *)((char *)&v91 + 3) = vmovn_s16(v68).u32[0];
      HIBYTE(v91) = v67;
      *(_WORD *)uint64_t v92 = *(_WORD *)(a3 + 39);
      *(void *)&v92[2] = v65;
      v92[10] = *(unsigned char *)(a3 + 41);
      *(void *)&v92[11] = *(void *)(a3 + 44);
      v92[19] = *(unsigned char *)(a3 + 42);
      unsigned int v70 = *(unsigned __int8 *)(a3 + 52);
      if (v70 >= 7) {
        LOBYTE(v70) = 0;
      }
      v92[20] = v70;
      unsigned int v71 = *(unsigned __int8 *)(a3 + 53);
      if (v71 >= 7) {
        LOBYTE(v71) = 0;
      }
      v92[21] = v71;
      int v72 = *(_DWORD *)(a3 + 56);
      memcpy(__dst, (const void *)(a3 + 60), sizeof(__dst));
      int v73 = *(_DWORD *)(a3 + 456);
      *(_DWORD *)&v92[22] = v72;
      long long v105 = *(_OWORD *)&__dst[57];
      long long v106 = *(_OWORD *)&__dst[61];
      long long v103 = *(_OWORD *)&__dst[49];
      long long v104 = *(_OWORD *)&__dst[53];
      long long v99 = *(_OWORD *)&__dst[33];
      long long v100 = *(_OWORD *)&__dst[37];
      long long v101 = *(_OWORD *)&__dst[41];
      long long v102 = *(_OWORD *)&__dst[45];
      long long v95 = *(_OWORD *)&__dst[17];
      long long v96 = *(_OWORD *)&__dst[21];
      long long v97 = *(_OWORD *)&__dst[25];
      long long v98 = *(_OWORD *)&__dst[29];
      *(_OWORD *)&v92[26] = *(_OWORD *)&__dst[1];
      *(_OWORD *)&v92[42] = *(_OWORD *)&__dst[5];
      long long v93 = *(_OWORD *)&__dst[9];
      long long v94 = *(_OWORD *)&__dst[13];
      long long v74 = *(_OWORD *)(a3 + 400);
      long long v111 = *(_OWORD *)(a3 + 384);
      long long v112 = v74;
      long long v75 = *(_OWORD *)(a3 + 432);
      long long v113 = *(_OWORD *)(a3 + 416);
      long long v114 = v75;
      long long v76 = *(_OWORD *)(a3 + 336);
      long long v107 = *(_OWORD *)(a3 + 320);
      long long v108 = v76;
      long long v77 = *(_OWORD *)(a3 + 368);
      long long v109 = *(_OWORD *)(a3 + 352);
      long long v110 = v77;
      uint64_t v115 = *(void *)(a3 + 448);
      int v116 = v73;
      uint64_t v78 = +[NSData dataWithBytes:&v91 length:430];
      [v59 writeData:v78];
    }
    [v59 seekToFileOffset:0];
    uint64_t v79 = +[NSData dataWithBytes:v30 length:v84];
    [v59 writeData:v79];

    free(v30);
    [v59 closeFile];

    _Block_object_dispose(&v128, 8);
    id v7 = v87;
    unint64_t v24 = v90;
  }

  uint64_t v91 = (void **)&v133;
  std::vector<AccelerationStructureViewerServer::AccelerationStructure>::__destroy_vector::operator()[abi:nn180100](&v91);

  return v27 != 0;
}

uint64_t ___Z37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSError_block_invoke(uint64_t result, void *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2[1] - *a2) >> 5;
  return result;
}

void ___Z37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      uint64_t v9 = v6 + 32 * v7;
      id v10 = [*(id *)(a1 + 32) offsetInFile];
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = (void *)(v11 + 24 * v7);
      uint64_t v13 = *(void **)(v9 + 8);
      uint64_t v14 = *(void *)(v9 + 16);
      void *v12 = v10;
      v12[1] = v14;
      if (v13)
      {
        long long v15 = [v13 dataUsingEncoding:30];
        *(_DWORD *)(*(void *)(a1 + 40) + 24 * v7 + 16) = [v15 length];
        [*(id *)(a1 + 32) writeData:v15];

        uint64_t v11 = *(void *)(a1 + 40);
      }
      else
      {
        *(_DWORD *)(v11 + 24 * v7 + 16) = 0;
      }
      *(_DWORD *)(v11 + 24 * v7 + 20) = *(void *)(v6 + 32 * v7 + 24);
      uint64_t v16 = *(void *)(a1 + 48);
      id v17 = *(id *)(a1 + 32);
      v18[0] = off_747420;
      v18[1] = v17;
      v18[3] = v18;
      (*(void (**)(uint64_t, unint64_t, void *))(*(void *)v16 + 112))(v16, v6 + 32 * v7, v18);
      std::__function::__value_func<void ()(unsigned long,BOOL,objc_object  {objcproto11MTLFunction}*,AccelerationStructureViewer::IntersectionFunction *)>::~__value_func[abi:nn180100](v18);
      unint64_t v7 = v8;
      uint64_t v6 = *a2;
      ++v8;
    }
    while (v7 < (a2[1] - *a2) >> 5);
  }
}

float float2matrix(float *a1, simd_float4x4 *a2)
{
  simd_float4 v2 = a2->columns[0];
  simd_float4 v3 = a2->columns[1];
  v2.f32[0] = *a1;
  a2->columns[0].f32[0] = *a1;
  v2.f32[1] = a1[1];
  a2->columns[0] = v2;
  v2.f32[2] = a1[2];
  a2->columns[0] = v2;
  v2.f32[3] = a1[3];
  a2->columns[0] = v2;
  v3.f32[0] = a1[4];
  a2->columns[1].i32[0] = v3.i32[0];
  v3.f32[1] = a1[5];
  a2->columns[1] = v3;
  v3.f32[2] = a1[6];
  a2->columns[1] = v3;
  v3.f32[3] = a1[7];
  a2->columns[1] = v3;
  simd_float4 v4 = a2->columns[2];
  simd_float4 v5 = a2->columns[3];
  v4.f32[0] = a1[8];
  a2->columns[2].i32[0] = v4.i32[0];
  v4.f32[1] = a1[9];
  a2->columns[2] = v4;
  v4.f32[2] = a1[10];
  a2->columns[2] = v4;
  v4.f32[3] = a1[11];
  a2->columns[2] = v4;
  float result = a1[12];
  v5.f32[0] = result;
  a2->columns[3].f32[0] = result;
  v5.f32[1] = a1[13];
  a2->columns[3] = v5;
  v5.f32[2] = a1[14];
  a2->columns[3] = v5;
  v5.f32[3] = a1[15];
  a2->columns[3] = v5;
  return result;
}

void std::vector<AccelerationStructureViewerServer::AccelerationStructure>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned int v1 = *a1;
  simd_float4 v2 = (id *)**a1;
  if (v2)
  {
    simd_float4 v4 = (id *)v1[1];
    simd_float4 v5 = v2;
    if (v4 != v2)
    {
      do
        AccelerationStructureViewerServer::AccelerationStructure::~AccelerationStructure(v4 - 23);
      while (v4 != v2);
      simd_float4 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__function::__value_func<void ()(unsigned long,BOOL,objc_object  {objcproto11MTLFunction}*,AccelerationStructureViewer::IntersectionFunction *)>::~__value_func[abi:nn180100](void *a1)
{
  simd_float4 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZ37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSErrorEUb_E3__0NS_9allocatorISF_EEFvmbPU22objcproto11MTLFunction11objc_objectPN27AccelerationStructureViewer20IntersectionFunctionEEEclEOmObOU8__strongSJ_OSM_(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t *a5)
{
  uint64_t v6 = *a5;
  id v7 = *a4;
  uint64_t v21 = *(void *)(v6 + 48);
  char v22 = *(unsigned char *)(v6 + 72);
  __int16 v23 = *(_WORD *)(v6 + 73);
  int v24 = *(_DWORD *)(v6 + 76);
  id v8 = [*(id *)(a1 + 8) offsetInFile];
  uint64_t v9 = *(void **)(a1 + 8);
  id v10 = +[NSData dataWithBytes:&v20 length:27];
  [v9 writeData:v10];

  uint64_t v11 = *(void **)(v6 + 32);
  if (v11)
  {
    uint64_t v12 = [v11 dataUsingEncoding:30];
    unsigned int v20 = [v12 length];
    [*(id *)(a1 + 8) writeData:v12];
  }
  else
  {
    unsigned int v20 = 0;
  }
  uint64_t v13 = *(void *)(v6 + 80);
  uint64_t v14 = *(void *)(v6 + 88);
  for (int i = (unint64_t)(v14 - v13) >> 2; v13 != v14; v13 += 4)
  {
    long long v15 = *(void **)(a1 + 8);
    uint64_t v16 = +[NSData dataWithBytes:v13 length:4];
    [v15 writeData:v16];
  }
  if (v7)
  {
    id v17 = [v7 bitcodeData];
    unsigned int v26 = [v17 length];
    [*(id *)(a1 + 8) writeData:v17];
  }
  else
  {
    unsigned int v26 = 0;
  }
  [*(id *)(a1 + 8) offsetInFile];
  [*(id *)(a1 + 8) seekToFileOffset:v8];
  int64_t v18 = *(void **)(a1 + 8);
  id v19 = +[NSData dataWithBytes:&v20 length:27];
  [v18 writeData:v19];

  [*(id *)(a1 + 8) seekToEndOfFile];
}

void _ZNSt3__110__function6__funcIZZ37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSErrorEUb_E3__0NS_9allocatorISF_EEFvmbPU22objcproto11MTLFunction11objc_objectPN27AccelerationStructureViewer20IntersectionFunctionEEE18destroy_deallocateEv(id *a1)
{
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZZ37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSErrorEUb_E3__0NS_9allocatorISF_EEFvmbPU22objcproto11MTLFunction11objc_objectPN27AccelerationStructureViewer20IntersectionFunctionEEE7destroyEv(uint64_t a1)
{
}

id _ZNKSt3__110__function6__funcIZZ37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSErrorEUb_E3__0NS_9allocatorISF_EEFvmbPU22objcproto11MTLFunction11objc_objectPN27AccelerationStructureViewer20IntersectionFunctionEEE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, void *a2)
{
  *a2 = off_747420;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZ37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSErrorEUb_E3__0NS_9allocatorISF_EEFvmbPU22objcproto11MTLFunction11objc_objectPN27AccelerationStructureViewer20IntersectionFunctionEEE7__cloneEv(uint64_t a1)
{
  simd_float4 v2 = operator new(0x10uLL);
  *simd_float4 v2 = off_747420;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

void _ZNSt3__110__function6__funcIZZ37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSErrorEUb_E3__0NS_9allocatorISF_EEFvmbPU22objcproto11MTLFunction11objc_objectPN27AccelerationStructureViewer20IntersectionFunctionEEED0Ev(uint64_t a1)
{
  operator delete();
}

uint64_t _ZNSt3__110__function6__funcIZZ37writeAccelerationStructureToGBVH5PathPN33AccelerationStructureViewerServer10DataSourceEP18ASVCameraTransformP18ASVSRenderSettingsP8NSStringPU15__autoreleasingP7NSErrorEUb_E3__0NS_9allocatorISF_EEFvmbPU22objcproto11MTLFunction11objc_objectPN27AccelerationStructureViewer20IntersectionFunctionEEED1Ev(uint64_t a1)
{
  return a1;
}

void AccelerationStructureViewerServer::DataSource::generateItems(AccelerationStructureViewerServer::DataSource *this)
{
  uint64_t v2 = *((void *)this + 23);
  if (*((void *)this + 24) != v2)
  {
    unint64_t v3 = 0;
    simd_float4 v4 = this;
    simd_float4 v5 = (char *)this + 136;
    uint64_t v6 = 16;
    do
    {
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v5, *(void *)(v2 + v6), (void *)(v2 + v6))+ 6) = v3++;
      uint64_t v2 = *((void *)v4 + 23);
      uint64_t v7 = *((void *)v4 + 24);
      v6 += 184;
    }
    while (v3 < 0xD37A6F4DE9BD37A7 * ((v7 - v2) >> 3));
    if (v7 != v2)
    {
      uint64_t v8 = 0;
      uint64_t v310 = (float *)((char *)v4 + 56);
      unint64_t v311 = (float *)((char *)v4 + 96);
      uint64_t v330 = (uint64_t **)((char *)v4 + 32);
      uint64_t v323 = (void *)((char *)v4 + 8);
      uint64_t v324 = (void *)((char *)v4 + 16);
      uint64_t v312 = v4;
      while (2)
      {
        uint64_t v9 = v2 + 184 * v8;
        uint64_t v11 = *(void **)(v9 + 24);
        uint64_t v10 = v9 + 24;
        uint64_t v13 = (uint64_t *)(v10 + 8);
        uint64_t v12 = *(void *)(v10 + 8);
        uint64_t v14 = (char *)[v11 contents];
        if (!v14) {
          goto LABEL_286;
        }
        int v15 = *(_DWORD *)&v14[v12 + 8];
        uint64_t v313 = v8;
        uint64_t v314 = &v14[v12];
        uint64_t v317 = v10;
        uint64_t v327 = v2;
        uint8x8_t v320 = (uint64_t *)(v10 + 8);
        switch(v15)
        {
          case 0:
            uint64_t v16 = *v13;
            id v17 = (char *)[*(id *)v10 contents] + v16;
            int64_t v18 = (char *)malloc_type_calloc(v17[6], 0x18uLL, 0x1000040504FFAC1uLL);
            uint64_t v19 = v327 + 184 * v8;
            uint64_t v22 = *(void *)(v19 + 64);
            unsigned int v20 = (void *)(v19 + 64);
            uint64_t v21 = v22;
            __int16 v23 = (char *)[ (id) *(v20 - 1) contents];
            if (v17[2] == 2) {
              unsigned int v24 = v17[9];
            }
            else {
              unsigned int v24 = 1;
            }
            if (v17[5])
            {
              uint64_t v102 = 0;
              long long v103 = &v23[v21];
              unint64_t v104 = v24 * (unint64_t)v17[6];
              do
              {
                unint64_t v105 = v102 + 1;
                unint64_t v106 = *v20 + 48 * (v102 + 1);
                if (v106 > (unint64_t)[(id)*(v20 - 1) length]) {
                  break;
                }
                if ((v17[2] | 2) == 2)
                {
                  long long v107 = &v103[48 * v102];
                  unint64_t v108 = *((int *)v107 + 1);
                  unint64_t v109 = *(int *)v107 + v108;
                  if (v109 <= v104 && v109 > v108)
                  {
                    unint64_t v111 = v108 + 1;
                    long long v112 = &v18[24 * (int)v108];
                    do
                    {
                      long long v113 = *(_OWORD *)&v103[48 * v102 + 12];
                      *((void *)v112 + 2) = *(void *)&v103[48 * v102 + 28];
                      *(_OWORD *)long long v112 = v113;
                      v112 += 24;
                      BOOL v114 = v111 >= *(int *)v107 + (uint64_t)*((int *)v107 + 1) || v111 >= v104;
                      ++v111;
                    }
                    while (!v114);
                  }
                }
                ++v102;
              }
              while (v105 < v17[5]);
            }
            uint64_t v115 = v313;
            uint64_t v116 = v327;
            uint64_t v117 = v327 + 184 * v313;
            int v118 = (unint64_t *)(v117 + 16);
            std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v311, *(void *)(v117 + 16), (void *)(v117 + 16))[3] = v18;
            memset(&v331, 0, sizeof(v331));
            std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::resize(&v331, v17[7]);
            float v121 = *(void **)(v117 + 72);
            uint64_t v120 = (id *)(v117 + 72);
            char v119 = v121;
            if (!v121) {
              goto LABEL_178;
            }
            uint64_t v122 = v327 + 184 * v313;
            uint64_t v125 = *(void *)(v122 + 80);
            uint64_t v123 = (void *)(v122 + 80);
            uint64_t v124 = v125;
            uint64_t v126 = (char *)[v119 contents];
            id v127 = [*v120 length];
            unint64_t v128 = (unint64_t)v127;
            unint64_t v129 = v17[6];
            if (v129)
            {
              uint64_t v130 = 0;
              uint64_t v131 = 0;
              unint64_t v132 = 0;
              unint64_t v133 = 0;
              int v134 = v17[3];
              begiint n = v331.__begin_;
              uint64_t v136 = &v126[v124];
              while (1)
              {
                if (v134 == 1)
                {
                  if (v130 + *v123 + 16 <= (unint64_t)v127)
                  {
                    uint64_t v139 = *(unsigned int *)&v136[v130];
                    if (v139 < v17[7]) {
                      ++begin[v139];
                    }
                    uint64_t v138 = &v136[16 * v132 + 4];
                    goto LABEL_84;
                  }
                }
                else if (!v134 && v131 + *v123 + 48 <= (unint64_t)v127)
                {
                  uint64_t v137 = *(unsigned int *)&v136[v131 + 36];
                  if (v137 < v17[7]) {
                    ++begin[v137];
                  }
                  uint64_t v138 = &v136[v131 + 40];
LABEL_84:
                  unint64_t v140 = *(unsigned int *)v138;
                  if (v133 <= v140) {
                    unint64_t v133 = v140;
                  }
                  unint64_t v129 = v17[6];
                }
                ++v132;
                v131 += 48;
                v130 += 16;
                if (v132 >= v129) {
                  goto LABEL_167;
                }
              }
            }
            unint64_t v133 = 0;
LABEL_167:
            std::unique_lock<std::mutex> v200 = malloc_type_calloc(v133 + 1, 4uLL, 0x100004052888210uLL);
            unint64_t v201 = v17[6];
            if (!v201)
            {
LABEL_177:
              std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v310, *v118, v118)[3] = v200;
              uint64_t v115 = v313;
              uint64_t v116 = v327;
LABEL_178:
              simd_float4x4 v208 = *(void **)(v116 + 184 * v115 + 88);
              if (v208)
              {
                [v208 contents];
                if (v17[7])
                {
                  int v209 = v17[3];
                  if (v209 != 2)
                  {
                    if (v209 != 1)
                    {
                      if (!v209) {
                        operator new();
                      }
                      operator new();
                    }
                    operator new();
                  }
                  operator new();
                }
              }
              goto LABEL_208;
            }
            unint64_t v202 = 0;
            long long v203 = &v126[v124 + 40];
            long long v204 = &v126[v124 + 4];
            unint64_t v205 = *v123 + 48;
            while (1)
            {
              if (v205 > v128) {
                goto LABEL_177;
              }
              int v206 = v17[3];
              if (v206 == 1) {
                break;
              }
              if (!v206)
              {
                unint64_t v207 = *(unsigned int *)v203;
                goto LABEL_174;
              }
LABEL_176:
              ++v202;
              v203 += 48;
              v204 += 16;
              v205 += 48;
              if (v202 >= v201) {
                goto LABEL_177;
              }
            }
            unint64_t v207 = *(unsigned int *)v204;
LABEL_174:
            if (v133 >= v207)
            {
              v200[v207] = v202;
              unint64_t v201 = v17[6];
            }
            goto LABEL_176;
          case 1:
            uint64_t v25 = *v13;
            unsigned int v26 = (char *)[*(id *)v10 contents] + v25;
            std::chrono::system_clock::time_point v27 = malloc_type_calloc(v26[6], 0x18uLL, 0x1000040504FFAC1uLL);
            uint64_t v28 = v327 + 184 * v8;
            unint64_t v30 = *(void **)(v28 + 56);
            uint64_t v29 = v28 + 56;
            [v30 contents];
            uint64_t v31 = 0;
            uint64_t v32 = -1;
            do
            {
              if (++v32 >= (unint64_t)v26[5]) {
                break;
              }
              v31 += 64;
              unint64_t v33 = *(void *)(v29 + 8) + v31;
            }
            while (v33 <= (unint64_t)[*(id *)v29 length]);
            uint64_t v34 = v327;
            uint64_t v35 = v327 + 184 * v8;
            uint64_t v36 = (unint64_t *)(v35 + 16);
            std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v311, *(void *)(v35 + 16), (void *)(v35 + 16))[3] = v27;
            memset(&v331, 0, sizeof(v331));
            std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::resize(&v331, v26[7]);
            unint64_t v39 = *(void **)(v35 + 72);
            uint64_t v38 = (id *)(v35 + 72);
            uint64_t v37 = v39;
            if (!v39) {
              goto LABEL_136;
            }
            uint64_t v40 = v327 + 184 * v8;
            uint64_t v43 = *(void *)(v40 + 80);
            uint64_t v41 = (void *)(v40 + 80);
            uint64_t v42 = v43;
            uint64_t v44 = (char *)[v37 contents];
            id v45 = [*v38 length];
            unint64_t v46 = (unint64_t)v45;
            unint64_t v47 = v26[6];
            if (v47)
            {
              uint64_t v48 = 0;
              uint64_t v49 = 0;
              unint64_t v50 = 0;
              unint64_t v51 = 0;
              int v52 = v26[3];
              std::vector<unsigned int>::pointer v53 = v331.__begin_;
              unint64_t v54 = &v44[v42];
              while (1)
              {
                if (v52 == 1)
                {
                  if (v48 + *v41 + 16 <= (unint64_t)v45)
                  {
                    uint64_t v57 = *(unsigned int *)&v54[v48];
                    if (v57 < v26[7]) {
                      ++v53[v57];
                    }
                    uint64_t v56 = &v54[16 * v51 + 4];
                    goto LABEL_26;
                  }
                }
                else if (!v52 && v49 + *v41 + 48 <= (unint64_t)v45)
                {
                  uint64_t v55 = *(unsigned int *)&v54[v49 + 36];
                  if (v55 < v26[7]) {
                    ++v53[v55];
                  }
                  uint64_t v56 = &v54[v49 + 40];
LABEL_26:
                  unint64_t v58 = *(unsigned int *)v56;
                  if (v50 <= v58) {
                    unint64_t v50 = v58;
                  }
                  unint64_t v47 = v26[6];
                }
                ++v51;
                v49 += 48;
                v48 += 16;
                if (v51 >= v47) {
                  goto LABEL_125;
                }
              }
            }
            unint64_t v50 = 0;
LABEL_125:
            id v180 = malloc_type_calloc(v50 + 1, 4uLL, 0x100004052888210uLL);
            unint64_t v181 = v26[6];
            if (v181)
            {
              unint64_t v182 = 0;
              long long v183 = &v44[v42 + 40];
              int64x2_t v184 = &v44[v42 + 4];
              unint64_t v185 = *v41 + 48;
              while (1)
              {
                if (v185 > v46) {
                  goto LABEL_135;
                }
                int v186 = v26[3];
                if (v186 == 1) {
                  break;
                }
                if (!v186)
                {
                  unint64_t v187 = *(unsigned int *)v183;
                  goto LABEL_132;
                }
LABEL_134:
                ++v182;
                v183 += 48;
                v184 += 16;
                v185 += 48;
                if (v182 >= v181) {
                  goto LABEL_135;
                }
              }
              unint64_t v187 = *(unsigned int *)v184;
LABEL_132:
              if (v50 >= v187)
              {
                v180[v187] = v182;
                unint64_t v181 = v26[6];
              }
              goto LABEL_134;
            }
LABEL_135:
            std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v310, *v36, v36)[3] = v180;
            uint64_t v8 = v313;
            uint64_t v34 = v327;
LABEL_136:
            long long v188 = *(void **)(v34 + 184 * v8 + 88);
            if (v188)
            {
              [v188 contents];
              if (v26[7])
              {
                int v189 = v26[3];
                if (v189 != 2)
                {
                  if (v189 != 1)
                  {
                    if (!v189) {
                      operator new();
                    }
                    operator new();
                  }
                  operator new();
                }
                operator new();
              }
            }
            goto LABEL_208;
          case 2:
            uint64_t v59 = *v13;
            unint64_t v60 = (char *)[*(id *)v10 contents] + v59;
            id v61 = (char *)malloc_type_calloc(v60[6], 0x18uLL, 0x1000040504FFAC1uLL);
            uint64_t v62 = v327 + 184 * v8;
            uint64_t v65 = *(void *)(v62 + 64);
            uint64_t v63 = (void *)(v62 + 64);
            uint64_t v64 = v65;
            int v66 = (char *)[ (id) *(v63 - 1) contents];
            if (v60[2] == 2) {
              unsigned int v67 = v60[9];
            }
            else {
              unsigned int v67 = 1;
            }
            if (v60[5])
            {
              uint64_t v141 = 0;
              uint64_t v142 = &v66[v64];
              unint64_t v143 = v67 * (unint64_t)v60[6];
              do
              {
                unint64_t v144 = v141 + 1;
                unint64_t v145 = *v63 + 60 * (v141 + 1);
                if (v145 > (unint64_t)[(id)*(v63 - 1) length]) {
                  break;
                }
                if ((v60[2] | 2) == 2)
                {
                  id v146 = &v142[60 * v141];
                  unint64_t v147 = *((int *)v146 + 1);
                  unint64_t v148 = *(int *)v146 + v147;
                  if (v148 <= v143 && v148 > v147)
                  {
                    unint64_t v150 = v147 + 1;
                    uint64_t v151 = &v61[24 * (int)v147];
                    do
                    {
                      long long v152 = *(_OWORD *)&v142[60 * v141 + 12];
                      *((void *)v151 + 2) = *(void *)&v142[60 * v141 + 28];
                      *(_OWORD *)uint64_t v151 = v152;
                      v151 += 24;
                      BOOL v153 = v150 >= *(int *)v146 + (uint64_t)*((int *)v146 + 1) || v150 >= v143;
                      ++v150;
                    }
                    while (!v153);
                  }
                }
                ++v141;
              }
              while (v144 < v60[5]);
            }
            uint64_t v154 = v313;
            uint64_t v155 = v327;
            uint64_t v156 = v327 + 184 * v313;
            int64x2_t v157 = (unint64_t *)(v156 + 16);
            std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v311, *(void *)(v156 + 16), (void *)(v156 + 16))[3] = v61;
            memset(&v331, 0, sizeof(v331));
            std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::resize(&v331, v60[7]);
            uint64_t v160 = *(void **)(v156 + 72);
            uint64_t v159 = (id *)(v156 + 72);
            uint64_t v158 = v160;
            if (!v160) {
              goto LABEL_199;
            }
            uint64_t v161 = v327 + 184 * v313;
            uint64_t v164 = *(void *)(v161 + 80);
            uint64_t v162 = (void *)(v161 + 80);
            uint64_t v163 = v164;
            signed int v165 = (char *)[v158 contents];
            id v166 = [*v159 length];
            unint64_t v167 = (unint64_t)v166;
            unint64_t v168 = v60[6];
            if (v168)
            {
              uint64_t v169 = 0;
              uint64_t v170 = 0;
              unint64_t v171 = 0;
              unint64_t v172 = 0;
              int v173 = v60[3];
              std::vector<unsigned int>::pointer v174 = v331.__begin_;
              id v175 = &v165[v163];
              while (1)
              {
                if (v173 == 1)
                {
                  if (v169 + *v162 + 16 <= (unint64_t)v166)
                  {
                    uint64_t v178 = *(unsigned int *)&v175[v169];
                    if (v178 < v60[7]) {
                      ++v174[v178];
                    }
                    unsigned int v177 = &v175[16 * v171 + 4];
                    goto LABEL_119;
                  }
                }
                else if (!v173 && v170 + *v162 + 48 <= (unint64_t)v166)
                {
                  uint64_t v176 = *(unsigned int *)&v175[v170 + 36];
                  if (v176 < v60[7]) {
                    ++v174[v176];
                  }
                  unsigned int v177 = &v175[v170 + 40];
LABEL_119:
                  unint64_t v179 = *(unsigned int *)v177;
                  if (v172 <= v179) {
                    unint64_t v172 = v179;
                  }
                  unint64_t v168 = v60[6];
                }
                ++v171;
                v170 += 48;
                v169 += 16;
                if (v171 >= v168) {
                  goto LABEL_188;
                }
              }
            }
            unint64_t v172 = 0;
LABEL_188:
            std::condition_variable v210 = malloc_type_calloc(v172 + 1, 4uLL, 0x100004052888210uLL);
            unint64_t v211 = v60[6];
            if (v211)
            {
              unint64_t v212 = 0;
              uint64_t v213 = &v165[v163 + 40];
              uint64_t v214 = &v165[v163 + 4];
              unint64_t v215 = *v162 + 48;
              while (1)
              {
                if (v215 > v167) {
                  goto LABEL_198;
                }
                int v216 = v60[3];
                if (v216 == 1) {
                  break;
                }
                if (!v216)
                {
                  unint64_t v217 = *(unsigned int *)v213;
                  goto LABEL_195;
                }
LABEL_197:
                ++v212;
                v213 += 48;
                v214 += 16;
                v215 += 48;
                if (v212 >= v211) {
                  goto LABEL_198;
                }
              }
              unint64_t v217 = *(unsigned int *)v214;
LABEL_195:
              if (v172 >= v217)
              {
                v210[v217] = v212;
                unint64_t v211 = v60[6];
              }
              goto LABEL_197;
            }
LABEL_198:
            std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v310, *v157, v157)[3] = v210;
            uint64_t v154 = v313;
            uint64_t v155 = v327;
LABEL_199:
            uint64_t v218 = *(void **)(v155 + 184 * v154 + 88);
            if (v218)
            {
              [v218 contents];
              if (v60[7])
              {
                int v219 = v60[3];
                if (v219 != 2)
                {
                  if (v219 != 1)
                  {
                    if (!v219) {
                      operator new();
                    }
                    operator new();
                  }
                  operator new();
                }
                operator new();
              }
            }
            goto LABEL_208;
          case 3:
            uint64_t v68 = *v13;
            int8x8_t v69 = (char *)[*(id *)v10 contents] + v68;
            unsigned int v70 = malloc_type_calloc(v69[6], 0x18uLL, 0x1000040504FFAC1uLL);
            uint64_t v71 = v327 + 184 * v8;
            int v73 = *(void **)(v71 + 56);
            uint64_t v72 = v71 + 56;
            [v73 contents];
            uint64_t v74 = 0;
            uint64_t v75 = -1;
            do
            {
              if (++v75 >= (unint64_t)v69[5]) {
                break;
              }
              v74 += 104;
              unint64_t v76 = *(void *)(v72 + 8) + v74;
            }
            while (v76 <= (unint64_t)[*(id *)v72 length]);
            uint64_t v77 = v327;
            uint64_t v78 = v327 + 184 * v8;
            uint64_t v79 = (unint64_t *)(v78 + 16);
            std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v311, *(void *)(v78 + 16), (void *)(v78 + 16))[3] = v70;
            memset(&v331, 0, sizeof(v331));
            std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::resize(&v331, v69[7]);
            unint64_t v82 = *(void **)(v78 + 72);
            unsigned int v81 = (id *)(v78 + 72);
            unint64_t v80 = v82;
            if (!v82) {
              goto LABEL_157;
            }
            uint64_t v83 = v327 + 184 * v8;
            uint64_t v86 = *(void *)(v83 + 80);
            size_t v84 = (void *)(v83 + 80);
            uint64_t v85 = v86;
            id v87 = (char *)[v80 contents];
            id v88 = [*v81 length];
            unint64_t v89 = (unint64_t)v88;
            unint64_t v90 = v69[6];
            if (v90)
            {
              uint64_t v91 = 0;
              uint64_t v92 = 0;
              unint64_t v93 = 0;
              unint64_t v94 = 0;
              int v95 = v69[3];
              std::vector<unsigned int>::pointer v96 = v331.__begin_;
              long long v97 = &v87[v85];
              while (1)
              {
                if (v95 == 1)
                {
                  if (v91 + *v84 + 16 <= (unint64_t)v88)
                  {
                    uint64_t v100 = *(unsigned int *)&v97[v91];
                    if (v100 < v69[7]) {
                      ++v96[v100];
                    }
                    long long v99 = &v97[16 * v94 + 4];
                    goto LABEL_49;
                  }
                }
                else if (!v95 && v92 + *v84 + 48 <= (unint64_t)v88)
                {
                  uint64_t v98 = *(unsigned int *)&v97[v92 + 36];
                  if (v98 < v69[7]) {
                    ++v96[v98];
                  }
                  long long v99 = &v97[v92 + 40];
LABEL_49:
                  unint64_t v101 = *(unsigned int *)v99;
                  if (v93 <= v101) {
                    unint64_t v93 = v101;
                  }
                  unint64_t v90 = v69[6];
                }
                ++v94;
                v92 += 48;
                v91 += 16;
                if (v94 >= v90) {
                  goto LABEL_146;
                }
              }
            }
            unint64_t v93 = 0;
LABEL_146:
            long long v190 = malloc_type_calloc(v93 + 1, 4uLL, 0x100004052888210uLL);
            unint64_t v191 = v69[6];
            if (v191)
            {
              unint64_t v192 = 0;
              int64x2_t v193 = &v87[v85 + 40];
              uint64_t v194 = &v87[v85 + 4];
              unint64_t v195 = *v84 + 48;
              while (1)
              {
                if (v195 > v89) {
                  goto LABEL_156;
                }
                int v196 = v69[3];
                if (v196 == 1) {
                  break;
                }
                if (!v196)
                {
                  unint64_t v197 = *(unsigned int *)v193;
                  goto LABEL_153;
                }
LABEL_155:
                ++v192;
                v193 += 48;
                v194 += 16;
                v195 += 48;
                if (v192 >= v191) {
                  goto LABEL_156;
                }
              }
              unint64_t v197 = *(unsigned int *)v194;
LABEL_153:
              if (v93 >= v197)
              {
                v190[v197] = v192;
                unint64_t v191 = v69[6];
              }
              goto LABEL_155;
            }
LABEL_156:
            std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v310, *v79, v79)[3] = v190;
            uint64_t v8 = v313;
            uint64_t v77 = v327;
LABEL_157:
            uint64_t v198 = *(void **)(v77 + 184 * v8 + 88);
            if (v198)
            {
              [v198 contents];
              if (v69[7])
              {
                int v199 = v69[3];
                if (v199 != 2)
                {
                  if (v199 != 1)
                  {
                    if (!v199) {
                      operator new();
                    }
                    operator new();
                  }
                  operator new();
                }
                operator new();
              }
            }
LABEL_208:
            uint64_t v10 = v317;
            uint64_t v13 = v320;
            if (v331.__begin_) {
              operator delete(v331.__begin_);
            }
            uint64_t v2 = v327;
            int v15 = *((_DWORD *)v314 + 2);
LABEL_211:
            switch(v15)
            {
              case 0:
                uint64_t v220 = *v13;
                uint64_t v221 = (char *)[*(id *)v10 contents] + v220;
                if ((v221[2] | 2) != 2) {
                  goto LABEL_285;
                }
                uint64_t v222 = v2 + 184 * v313;
                unint64_t v318 = (id *)(v222 + 56);
                uint64_t v223 = *(void *)(v222 + 64);
                uint64_t v315 = (void *)(v222 + 64);
                uint64_t v224 = (char *)[*(id *)(v222 + 56) contents];
                unsigned int v225 = v221[2] == 2 ? v221[9] : 1;
                if (!v221[5]) {
                  goto LABEL_285;
                }
                unint64_t v253 = 0;
                v325 = &v224[v223];
                unint64_t v328 = v225 * (unint64_t)v221[6];
                uint64_t v254 = v2 + 184 * v313;
                long long v255 = (id *)(v254 + 72);
                long long v256 = (uint64_t *)(v254 + 80);
                uint64_t v321 = (unint64_t *)(v254 + 16);
                while (2)
                {
                  unint64_t v257 = v253 + 1;
                  unint64_t v258 = *v315 + 48 * (v253 + 1);
                  if (v258 > (unint64_t)[*v318 length]) {
                    goto LABEL_285;
                  }
                  long long v259 = &v325[48 * v253];
                  unint64_t v260 = *(int *)v259;
                  if (v260 > v221[6]
                    || (long long v261 = &v325[48 * v253],
                        unint64_t v264 = *((int *)v261 + 1),
                        uint64_t v263 = (int *)(v261 + 4),
                        unint64_t v262 = v264,
                        v260 + v264 <= v264))
                  {
LABEL_264:
                    unint64_t v253 = v257;
                    if (v257 >= v221[5]) {
                      goto LABEL_285;
                    }
                    continue;
                  }
                  break;
                }
                uint64_t v265 = &v325[48 * v253];
                long long v266 = (float *)(v265 + 12);
                uint64_t v267 = (float *)(v265 + 24);
                break;
              case 1:
                uint64_t v226 = *v13;
                id v227 = (char *)[*(id *)v10 contents] + v226;
                if ((*((_DWORD *)v227 + 2) | 2) == 3)
                {
                  uint64_t v228 = v2 + 184 * v313;
                  [*(id *)(v228 + 56) contents];
                  [*(id *)(v228 + 152) contents];
                  if (*((_DWORD *)v227 + 5)) {
                    operator new();
                  }
                  id v229 = (void *)*v323;
                  if ((void *)*v323 != v324)
                  {
                    do
                    {
                      unint64_t v230 = v229[5];
                      long long v231 = (uint64_t *)v229[6];
                      unint64_t v232 = 126 - 2 * __clz((uint64_t)((uint64_t)v231 - v230) >> 3);
                      if (v231 == (uint64_t *)v230) {
                        uint64_t v233 = 0;
                      }
                      else {
                        uint64_t v233 = v232;
                      }
                      std::__introsort<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNode_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**,false>(v230, v231, v233, 1);
                      uint64_t v234 = (void *)v229[1];
                      if (v234)
                      {
                        do
                        {
                          int v235 = v234;
                          uint64_t v234 = (void *)*v234;
                        }
                        while (v234);
                      }
                      else
                      {
                        do
                        {
                          int v235 = (void *)v229[2];
                          BOOL v236 = *v235 == (void)v229;
                          id v229 = v235;
                        }
                        while (!v236);
                      }
                      id v229 = v235;
                    }
                    while (v235 != v324);
                  }
                }
                goto LABEL_285;
              case 2:
                uint64_t v237 = *v13;
                long long v238 = (char *)[*(id *)v10 contents] + v237;
                if ((v238[2] | 2) != 2) {
                  goto LABEL_285;
                }
                uint64_t v239 = v2 + 184 * v313;
                uint64_t v319 = (id *)(v239 + 56);
                uint64_t v240 = *(void *)(v239 + 64);
                unint64_t v316 = (void *)(v239 + 64);
                uint64_t v241 = (char *)[*(id *)(v239 + 56) contents];
                unsigned int v242 = v238[2] == 2 ? v238[9] : 1;
                if (!v238[5]) {
                  goto LABEL_285;
                }
                unint64_t v281 = 0;
                uint64_t v326 = &v241[v240];
                unint64_t v329 = v242 * (unint64_t)v238[6];
                uint64_t v282 = v2 + 184 * v313;
                uint64_t v283 = (id *)(v282 + 72);
                long long v284 = (uint64_t *)(v282 + 80);
                uint64_t v322 = (unint64_t *)(v282 + 16);
                while (2)
                {
                  unint64_t v285 = v281 + 1;
                  unint64_t v286 = *v316 + 60 * (v281 + 1);
                  if (v286 <= (unint64_t)[*v319 length])
                  {
                    uint64_t v287 = &v326[60 * v281];
                    unint64_t v288 = *(int *)v287;
                    if (v288 > v238[6]
                      || (uint64_t v289 = &v326[60 * v281],
                          unint64_t v292 = *((int *)v289 + 1),
                          uint64_t v291 = (int *)(v289 + 4),
                          unint64_t v290 = v292,
                          v288 + v292 <= v292))
                    {
LABEL_284:
                      unint64_t v281 = v285;
                      if (v285 >= v238[5]) {
                        break;
                      }
                      continue;
                    }
                    unint64_t v293 = &v326[60 * v281];
                    int v294 = (float *)(v293 + 12);
                    v295 = (float *)(v293 + 24);
                    while (2)
                    {
                      if (v238[2] == 2) {
                        uint64_t v296 = v238[9];
                      }
                      else {
                        uint64_t v296 = 1;
                      }
                      unint64_t v297 = v290 * v296;
                      uint64_t v298 = *v284;
                      uint64_t v299 = (char *)[*v283 contents];
                      if (v297 > v329) {
                        goto LABEL_284;
                      }
                      unint64_t v300 = &v299[v298];
                      int v301 = v238[3];
                      if (v301 != 1)
                      {
                        if (!v301)
                        {
                          v302 = &v300[48 * v297 + 36];
LABEL_281:
                          unint64_t v303 = *(unsigned int *)v302;
                          uint64_t v332 = 0;
                          uint64_t v304 = std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v330, 0, &v332);
                          if (v303 < (v304[6] - v304[5]) >> 3)
                          {
                            uint64_t v305 = *(float **)(std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v330, *v322, (uint64_t *)v322)[5]+ 8 * v303);
                            float v306 = v305[21];
                            v305[20] = fminf(v305[20], *v294);
                            v305[21] = fminf(v306, v294[1]);
                            float v307 = v305[23];
                            v305[22] = fminf(v305[22], v294[2]);
                            v305[23] = fmaxf(v307, *v295);
                            float v308 = v305[25];
                            v305[24] = fmaxf(v305[24], v295[1]);
                            v305[25] = fmaxf(v308, v295[2]);
                          }
                        }
                        unint64_t v290 = v297 + 1;
                        if (v297 + 1 >= *(int *)v287 + (uint64_t)*v291) {
                          goto LABEL_284;
                        }
                        continue;
                      }
                      break;
                    }
                    v302 = &v300[16 * v297];
                    goto LABEL_281;
                  }
                  break;
                }
LABEL_285:
                uint64_t v8 = v313 + 1;
                uint64_t v2 = *((void *)v312 + 23);
                if (v313 + 1 >= 0xD37A6F4DE9BD37A7 * ((*((void *)v312 + 24) - v2) >> 3)) {
                  goto LABEL_286;
                }
                continue;
              case 3:
                uint64_t v243 = *v13;
                uint64_t v244 = (char *)[*(id *)v10 contents] + v243;
                if ((*((_DWORD *)v244 + 2) | 2) == 3)
                {
                  uint64_t v245 = v2 + 184 * v313;
                  [*(id *)(v245 + 56) contents];
                  [*(id *)(v245 + 152) contents];
                  if (*((_DWORD *)v244 + 5)) {
                    operator new();
                  }
                  uint64_t v246 = (void *)*v323;
                  if ((void *)*v323 != v324)
                  {
                    do
                    {
                      unint64_t v247 = v246[5];
                      uint64_t v248 = (uint64_t *)v246[6];
                      unint64_t v249 = 126 - 2 * __clz((uint64_t)((uint64_t)v248 - v247) >> 3);
                      if (v248 == (uint64_t *)v247) {
                        uint64_t v250 = 0;
                      }
                      else {
                        uint64_t v250 = v249;
                      }
                      std::__introsort<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**,false>(v247, v248, v250, 1);
                      uint64_t v251 = (void *)v246[1];
                      if (v251)
                      {
                        do
                        {
                          uint64_t v252 = v251;
                          uint64_t v251 = (void *)*v251;
                        }
                        while (v251);
                      }
                      else
                      {
                        do
                        {
                          uint64_t v252 = (void *)v246[2];
                          BOOL v236 = *v252 == (void)v246;
                          uint64_t v246 = v252;
                        }
                        while (!v236);
                      }
                      uint64_t v246 = v252;
                    }
                    while (v252 != v324);
                  }
                }
                goto LABEL_285;
              default:
                goto LABEL_285;
            }
            break;
          default:
            goto LABEL_211;
        }
        break;
      }
      while (1)
      {
        if (v221[2] == 2) {
          uint64_t v268 = v221[9];
        }
        else {
          uint64_t v268 = 1;
        }
        unint64_t v269 = v262 * v268;
        uint64_t v270 = *v256;
        long long v271 = (char *)[*v255 contents];
        if (v269 > v328) {
          goto LABEL_264;
        }
        uint64_t v272 = &v271[v270];
        int v273 = v221[3];
        if (v273 == 1) {
          break;
        }
        if (!v273)
        {
          uint64_t v274 = &v272[48 * v269 + 36];
          goto LABEL_261;
        }
LABEL_263:
        unint64_t v262 = v269 + 1;
        if (v269 + 1 >= *(int *)v259 + (uint64_t)*v263) {
          goto LABEL_264;
        }
      }
      uint64_t v274 = &v272[16 * v269];
LABEL_261:
      unint64_t v275 = *(unsigned int *)v274;
      uint64_t v332 = 0;
      long long v276 = std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v330, 0, &v332);
      if (v275 < (v276[6] - v276[5]) >> 3)
      {
        long long v277 = *(float **)(std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v330, *v321, (uint64_t *)v321)[5]+ 8 * v275);
        float v278 = v277[21];
        v277[20] = fminf(v277[20], *v266);
        v277[21] = fminf(v278, v266[1]);
        float v279 = v277[23];
        v277[22] = fminf(v277[22], v266[2]);
        v277[23] = fmaxf(v279, *v267);
        float v280 = v277[25];
        v277[24] = fmaxf(v277[24], v267[1]);
        v277[25] = fmaxf(v280, v267[2]);
      }
      goto LABEL_263;
    }
  }
LABEL_286:
}

uint64_t **std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Instance *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Instance *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Instance *>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  simd_float4 v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        simd_float4 v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      simd_float4 v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    v7[4] = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[7] = 0;
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    void *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v41 = *v11;
                if (*(void *)(*v10 + 40) < *(void *)(*v11 + 40))
                {
                  uint64_t *v11 = *v10;
                  uint64_t *v10 = v41;
                }
                break;
              case 3uLL:
                id result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                id result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                id result = (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v42 = v11 + 1;
            BOOL v44 = v11 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                unint64_t v46 = v11;
                do
                {
                  uint64_t v48 = *v46;
                  uint64_t v47 = v46[1];
                  unint64_t v46 = v42;
                  unint64_t v49 = *(void *)(v47 + 40);
                  if (v49 < *(void *)(v48 + 40))
                  {
                    uint64_t v50 = v45;
                    while (1)
                    {
                      *(uint64_t *)((char *)v11 + v50 + 8) = v48;
                      if (!v50) {
                        break;
                      }
                      uint64_t v48 = *(uint64_t *)((char *)v11 + v50 - 8);
                      v50 -= 8;
                      if (v49 >= *(void *)(v48 + 40))
                      {
                        unint64_t v51 = (uint64_t *)((char *)v11 + v50 + 8);
                        goto LABEL_82;
                      }
                    }
                    unint64_t v51 = v11;
LABEL_82:
                    *unint64_t v51 = v47;
                  }
                  uint64_t v42 = v46 + 1;
                  v45 += 8;
                }
                while (v46 + 1 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v84 = *v9;
                uint64_t v83 = v9[1];
                uint64_t v9 = v42;
                unint64_t v85 = *(void *)(v83 + 40);
                if (v85 < *(void *)(v84 + 40))
                {
                  do
                  {
                    uint64_t *v42 = v84;
                    uint64_t v84 = *(v42 - 2);
                    --v42;
                  }
                  while (v85 < *(void *)(v84 + 40));
                  uint64_t *v42 = v83;
                }
                uint64_t v42 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v52 = (v13 - 2) >> 1;
              int64_t v53 = v52;
              do
              {
                int64_t v54 = v53;
                if (v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  uint64_t v56 = &v11[v55];
                  uint64_t v57 = *v56;
                  if (2 * v54 + 2 < (uint64_t)v13)
                  {
                    id result = *(void *)(v57 + 40);
                    if (result < *(void *)(v56[1] + 40))
                    {
                      uint64_t v57 = v56[1];
                      ++v56;
                      uint64_t v55 = 2 * v54 + 2;
                    }
                  }
                  unint64_t v58 = &v11[v54];
                  uint64_t v59 = *v58;
                  unint64_t v60 = *(void *)(*v58 + 40);
                  if (*(void *)(v57 + 40) >= v60)
                  {
                    do
                    {
                      id v61 = v56;
                      uint64_t *v58 = v57;
                      if (v52 < v55) {
                        break;
                      }
                      id result = (2 * v55) | 1;
                      uint64_t v56 = &v11[result];
                      uint64_t v62 = 2 * v55 + 2;
                      uint64_t v57 = *v56;
                      if (v62 < (uint64_t)v13 && *(void *)(v57 + 40) < *(void *)(v56[1] + 40))
                      {
                        uint64_t v57 = v56[1];
                        ++v56;
                        id result = v62;
                      }
                      unint64_t v58 = v61;
                      uint64_t v55 = result;
                    }
                    while (*(void *)(v57 + 40) >= v60);
                    *id v61 = v59;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v63 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v64 = 0;
                uint64_t v65 = *v11;
                uint64_t v66 = v63 - 2;
                if (v63 < 2) {
                  uint64_t v66 = v63 - 1;
                }
                uint64_t v67 = v66 >> 1;
                uint64_t v68 = v11;
                do
                {
                  int8x8_t v69 = &v68[v64];
                  uint64_t v72 = v69[1];
                  unsigned int v70 = v69 + 1;
                  uint64_t v71 = v72;
                  uint64_t v73 = (2 * v64) | 1;
                  uint64_t v74 = 2 * v64 + 2;
                  if (v74 < v63)
                  {
                    id result = v70[1];
                    if (*(void *)(v71 + 40) < *(void *)(result + 40))
                    {
                      uint64_t v71 = v70[1];
                      ++v70;
                      uint64_t v73 = v74;
                    }
                  }
                  *uint64_t v68 = v71;
                  uint64_t v68 = v70;
                  uint64_t v64 = v73;
                }
                while (v73 <= v67);
                if (v70 == --a2)
                {
                  *unsigned int v70 = v65;
                }
                else
                {
                  *unsigned int v70 = *a2;
                  *a2 = v65;
                  uint64_t v75 = (char *)v70 - (char *)v11 + 8;
                  if (v75 >= 9)
                  {
                    unint64_t v76 = (unint64_t)((v75 >> 3) - 2) >> 1;
                    uint64_t v77 = &v11[v76];
                    uint64_t v78 = *v77;
                    uint64_t v79 = *v70;
                    unint64_t v80 = *(void *)(*v70 + 40);
                    if (*(void *)(*v77 + 40) < v80)
                    {
                      do
                      {
                        unsigned int v81 = v77;
                        *unsigned int v70 = v78;
                        if (!v76) {
                          break;
                        }
                        unint64_t v76 = (v76 - 1) >> 1;
                        uint64_t v77 = &v11[v76];
                        uint64_t v78 = *v77;
                        unsigned int v70 = v81;
                      }
                      while (*(void *)(*v77 + 40) < v80);
                      *unsigned int v81 = v79;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          int v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v9 + 2, &v9[v14 + 1], a2 - 3);
            id result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v15 - 1, v15, &v9[v14 + 1]);
            uint64_t v16 = *v9;
            *uint64_t v9 = *v15;
            *int v15 = v16;
          }
          else
          {
            id result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v17 = *v9;
          if (a4) {
            break;
          }
          unint64_t v18 = *(void *)(v17 + 40);
          if (*(void *)(*(v9 - 1) + 40) < v18) {
            goto LABEL_13;
          }
          if (v18 >= *(void *)(*v10 + 40))
          {
            unint64_t v33 = v9 + 1;
            do
            {
              uint64_t v11 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v18 >= *(void *)(*v11 + 40));
          }
          else
          {
            uint64_t v11 = v9;
            do
            {
              uint64_t v32 = v11[1];
              ++v11;
            }
            while (v18 >= *(void *)(v32 + 40));
          }
          uint64_t v34 = a2;
          if (v11 < a2)
          {
            uint64_t v34 = a2;
            do
              uint64_t v35 = *--v34;
            while (v18 < *(void *)(v35 + 40));
          }
          if (v11 < v34)
          {
            uint64_t v36 = *v11;
            uint64_t v37 = *v34;
            do
            {
              uint64_t *v11 = v37;
              uint64_t *v34 = v36;
              do
              {
                uint64_t v38 = v11[1];
                ++v11;
                uint64_t v36 = v38;
              }
              while (v18 >= *(void *)(v38 + 40));
              do
              {
                uint64_t v39 = *--v34;
                uint64_t v37 = v39;
              }
              while (v18 < *(void *)(v39 + 40));
            }
            while (v11 < v34);
          }
          uint64_t v40 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *uint64_t v9 = *v40;
          }
          a4 = 0;
          *uint64_t v40 = v17;
        }
        unint64_t v18 = *(void *)(v17 + 40);
LABEL_13:
        uint64_t v19 = v9;
        do
        {
          unsigned int v20 = v19;
          uint64_t v22 = v19[1];
          ++v19;
          uint64_t v21 = v22;
        }
        while (*(void *)(v22 + 40) < v18);
        __int16 v23 = a2;
        if (v20 == v9)
        {
          __int16 v23 = a2;
          do
          {
            if (v19 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while (*(void *)(v25 + 40) >= v18);
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (*(void *)(v24 + 40) >= v18);
        }
        if (v19 < v23)
        {
          uint64_t v26 = *v23;
          std::chrono::system_clock::time_point v27 = v19;
          uint64_t v28 = v23;
          do
          {
            *std::chrono::system_clock::time_point v27 = v26;
            *uint64_t v28 = v21;
            do
            {
              unsigned int v20 = v27;
              uint64_t v29 = v27[1];
              ++v27;
              uint64_t v21 = v29;
            }
            while (*(void *)(v29 + 40) < v18);
            do
            {
              uint64_t v30 = *--v28;
              uint64_t v26 = v30;
            }
            while (*(void *)(v30 + 40) >= v18);
          }
          while (v27 < v28);
        }
        if (v20 != v9) {
          *uint64_t v9 = *v20;
        }
        *unsigned int v20 = v17;
        if (v19 >= v23) {
          break;
        }
LABEL_32:
        id result = std::__introsort<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**,false>(v9, v20, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v20 + 1;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v9, v20);
      uint64_t v11 = v20 + 1;
      id result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v20 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_32;
      }
    }
    a2 = v20;
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = *(void *)(*a2 + 40);
  unint64_t v6 = *(void *)(*result + 40);
  uint64_t v7 = *a3;
  unint64_t v8 = *(void *)(*a3 + 40);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(void *)(*a2 + 40) < *(void *)(*result + 40))
      {
        *id result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *id result = v3;
      *a2 = v4;
      if (*(void *)(*a3 + 40) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *id result = v7;
    }
    *a3 = v4;
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  id result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(void *)(*a4 + 40) < *(void *)(*a3 + 40))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(void *)(*a3 + 40) < *(void *)(*a2 + 40))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(void *)(*a2 + 40) < *(void *)(*a1 + 40))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  id result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if (*(void *)(*a5 + 40) < *(void *)(*a4 + 40))
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = *a3;
    if (*(void *)(*a4 + 40) < *(void *)(*a3 + 40))
    {
      *a3 = *a4;
      *a4 = v12;
      uint64_t v13 = *a2;
      if (*(void *)(*a3 + 40) < *(void *)(*a2 + 40))
      {
        *a2 = *a3;
        *a3 = v13;
        uint64_t v14 = *a1;
        if (*(void *)(*a2 + 40) < *(void *)(*a1 + 40))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(void *)(v6 + 40) < *(void *)(*a1 + 40))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unint64_t v14 = *(void *)(*v9 + 40);
    if (v14 < *(void *)(*v8 + 40))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(void *)(v13 + 40))
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x40uLL);
    void v9[4] = *a3;
    v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNode_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    int v10 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v41 = *v11;
                if (*(void *)(*v10 + 40) < *(void *)(*v11 + 40))
                {
                  uint64_t *v11 = *v10;
                  uint64_t *v10 = v41;
                }
                break;
              case 3uLL:
                BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                BOOL result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                BOOL result = (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v42 = v11 + 1;
            BOOL v44 = v11 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                unint64_t v46 = v11;
                do
                {
                  uint64_t v48 = *v46;
                  uint64_t v47 = v46[1];
                  unint64_t v46 = v42;
                  unint64_t v49 = *(void *)(v47 + 40);
                  if (v49 < *(void *)(v48 + 40))
                  {
                    uint64_t v50 = v45;
                    while (1)
                    {
                      *(uint64_t *)((char *)v11 + v50 + 8) = v48;
                      if (!v50) {
                        break;
                      }
                      uint64_t v48 = *(uint64_t *)((char *)v11 + v50 - 8);
                      v50 -= 8;
                      if (v49 >= *(void *)(v48 + 40))
                      {
                        unint64_t v51 = (uint64_t *)((char *)v11 + v50 + 8);
                        goto LABEL_82;
                      }
                    }
                    unint64_t v51 = v11;
LABEL_82:
                    *unint64_t v51 = v47;
                  }
                  uint64_t v42 = v46 + 1;
                  v45 += 8;
                }
                while (v46 + 1 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v84 = *v9;
                uint64_t v83 = v9[1];
                uint64_t v9 = v42;
                unint64_t v85 = *(void *)(v83 + 40);
                if (v85 < *(void *)(v84 + 40))
                {
                  do
                  {
                    uint64_t *v42 = v84;
                    uint64_t v84 = *(v42 - 2);
                    --v42;
                  }
                  while (v85 < *(void *)(v84 + 40));
                  uint64_t *v42 = v83;
                }
                uint64_t v42 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v52 = (v13 - 2) >> 1;
              int64_t v53 = v52;
              do
              {
                int64_t v54 = v53;
                if (v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  uint64_t v56 = &v11[v55];
                  uint64_t v57 = *v56;
                  if (2 * v54 + 2 < (uint64_t)v13)
                  {
                    BOOL result = *(void *)(v57 + 40);
                    if (result < *(void *)(v56[1] + 40))
                    {
                      uint64_t v57 = v56[1];
                      ++v56;
                      uint64_t v55 = 2 * v54 + 2;
                    }
                  }
                  unint64_t v58 = &v11[v54];
                  uint64_t v59 = *v58;
                  unint64_t v60 = *(void *)(*v58 + 40);
                  if (*(void *)(v57 + 40) >= v60)
                  {
                    do
                    {
                      id v61 = v56;
                      uint64_t *v58 = v57;
                      if (v52 < v55) {
                        break;
                      }
                      BOOL result = (2 * v55) | 1;
                      uint64_t v56 = &v11[result];
                      uint64_t v62 = 2 * v55 + 2;
                      uint64_t v57 = *v56;
                      if (v62 < (uint64_t)v13 && *(void *)(v57 + 40) < *(void *)(v56[1] + 40))
                      {
                        uint64_t v57 = v56[1];
                        ++v56;
                        BOOL result = v62;
                      }
                      unint64_t v58 = v61;
                      uint64_t v55 = result;
                    }
                    while (*(void *)(v57 + 40) >= v60);
                    *id v61 = v59;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v63 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v64 = 0;
                uint64_t v65 = *v11;
                uint64_t v66 = v63 - 2;
                if (v63 < 2) {
                  uint64_t v66 = v63 - 1;
                }
                uint64_t v67 = v66 >> 1;
                uint64_t v68 = v11;
                do
                {
                  int8x8_t v69 = &v68[v64];
                  uint64_t v72 = v69[1];
                  unsigned int v70 = v69 + 1;
                  uint64_t v71 = v72;
                  uint64_t v73 = (2 * v64) | 1;
                  uint64_t v74 = 2 * v64 + 2;
                  if (v74 < v63)
                  {
                    BOOL result = v70[1];
                    if (*(void *)(v71 + 40) < *(void *)(result + 40))
                    {
                      uint64_t v71 = v70[1];
                      ++v70;
                      uint64_t v73 = v74;
                    }
                  }
                  *uint64_t v68 = v71;
                  uint64_t v68 = v70;
                  uint64_t v64 = v73;
                }
                while (v73 <= v67);
                if (v70 == --a2)
                {
                  *unsigned int v70 = v65;
                }
                else
                {
                  *unsigned int v70 = *a2;
                  *a2 = v65;
                  uint64_t v75 = (char *)v70 - (char *)v11 + 8;
                  if (v75 >= 9)
                  {
                    unint64_t v76 = (unint64_t)((v75 >> 3) - 2) >> 1;
                    uint64_t v77 = &v11[v76];
                    uint64_t v78 = *v77;
                    uint64_t v79 = *v70;
                    unint64_t v80 = *(void *)(*v70 + 40);
                    if (*(void *)(*v77 + 40) < v80)
                    {
                      do
                      {
                        unsigned int v81 = v77;
                        *unsigned int v70 = v78;
                        if (!v76) {
                          break;
                        }
                        unint64_t v76 = (v76 - 1) >> 1;
                        uint64_t v77 = &v11[v76];
                        uint64_t v78 = *v77;
                        unsigned int v70 = v81;
                      }
                      while (*(void *)(*v77 + 40) < v80);
                      *unsigned int v81 = v79;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v9 + 2, &v9[v14 + 1], a2 - 3);
            BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v15 - 1, v15, &v9[v14 + 1]);
            uint64_t v16 = *v9;
            *uint64_t v9 = *v15;
            *uint64_t v15 = v16;
          }
          else
          {
            BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v17 = *v9;
          if (a4) {
            break;
          }
          unint64_t v18 = *(void *)(v17 + 40);
          if (*(void *)(*(v9 - 1) + 40) < v18) {
            goto LABEL_13;
          }
          if (v18 >= *(void *)(*v10 + 40))
          {
            unint64_t v33 = v9 + 1;
            do
            {
              uint64_t v11 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v18 >= *(void *)(*v11 + 40));
          }
          else
          {
            uint64_t v11 = v9;
            do
            {
              uint64_t v32 = v11[1];
              ++v11;
            }
            while (v18 >= *(void *)(v32 + 40));
          }
          uint64_t v34 = a2;
          if (v11 < a2)
          {
            uint64_t v34 = a2;
            do
              uint64_t v35 = *--v34;
            while (v18 < *(void *)(v35 + 40));
          }
          if (v11 < v34)
          {
            uint64_t v36 = *v11;
            uint64_t v37 = *v34;
            do
            {
              uint64_t *v11 = v37;
              uint64_t *v34 = v36;
              do
              {
                uint64_t v38 = v11[1];
                ++v11;
                uint64_t v36 = v38;
              }
              while (v18 >= *(void *)(v38 + 40));
              do
              {
                uint64_t v39 = *--v34;
                uint64_t v37 = v39;
              }
              while (v18 < *(void *)(v39 + 40));
            }
            while (v11 < v34);
          }
          uint64_t v40 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *uint64_t v9 = *v40;
          }
          a4 = 0;
          *uint64_t v40 = v17;
        }
        unint64_t v18 = *(void *)(v17 + 40);
LABEL_13:
        uint64_t v19 = v9;
        do
        {
          unsigned int v20 = v19;
          uint64_t v22 = v19[1];
          ++v19;
          uint64_t v21 = v22;
        }
        while (*(void *)(v22 + 40) < v18);
        __int16 v23 = a2;
        if (v20 == v9)
        {
          __int16 v23 = a2;
          do
          {
            if (v19 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while (*(void *)(v25 + 40) >= v18);
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (*(void *)(v24 + 40) >= v18);
        }
        if (v19 < v23)
        {
          uint64_t v26 = *v23;
          std::chrono::system_clock::time_point v27 = v19;
          uint64_t v28 = v23;
          do
          {
            *std::chrono::system_clock::time_point v27 = v26;
            *uint64_t v28 = v21;
            do
            {
              unsigned int v20 = v27;
              uint64_t v29 = v27[1];
              ++v27;
              uint64_t v21 = v29;
            }
            while (*(void *)(v29 + 40) < v18);
            do
            {
              uint64_t v30 = *--v28;
              uint64_t v26 = v30;
            }
            while (*(void *)(v30 + 40) >= v18);
          }
          while (v27 < v28);
        }
        if (v20 != v9) {
          *uint64_t v9 = *v20;
        }
        *unsigned int v20 = v17;
        if (v19 >= v23) {
          break;
        }
LABEL_32:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNode_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**,false>(v9, v20, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v20 + 1;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNode_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v9, v20);
      uint64_t v11 = v20 + 1;
      BOOL result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNode_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(v20 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_32;
      }
    }
    a2 = v20;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNode_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(void *)(v6 + 40) < *(void *)(*a1 + 40))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void AccelerationStructureViewerServer::DataSource::generateAccelerationStructureItems<MTLGenericBVHInstanceLeafNodeMotion_v5>(AccelerationStructureViewerServer::AccelerationStructure *)::{lambda(AccelerationStructureViewer::Instance const*,AccelerationStructureViewer::Instance const*)#1} &,AccelerationStructureViewer::Instance**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unint64_t v14 = *(void *)(*v9 + 40);
    if (v14 < *(void *)(*v8 + 40))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(void *)(v13 + 40))
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,_MTLAxisAlignedBoundingBox *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (int i = *v9; i; int i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  int i = operator new(0x20uLL);
  void *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            std::chrono::system_clock::time_point v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  void *v21 = *v27;
                  *std::chrono::system_clock::time_point v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  std::chrono::system_clock::time_point v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                uint64_t v21 = v27;
                std::chrono::system_clock::time_point v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    void *i = *v30;
LABEL_72:
    *uint64_t v30 = i;
    goto LABEL_73;
  }
  void *i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v29[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v31 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void AccelerationStructureViewerServer::DataSource::getAccelerationStructureChildren(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  int v10 = a6;
  uint8x8_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v11 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)(a1 + 136), a2);
  if (!v11)
  {
    CFStringRef v20 = @"You can't have children of children";
    goto LABEL_23;
  }
  unsigned int v12 = *((_DWORD *)v11 + 6);
  uint64_t v13 = *(void *)(a1 + 184);
  int v14 = *(_DWORD *)(v13 + 184 * v12 + 8);
  if (v14 != 4 && v14 != 2)
  {
    CFStringRef v20 = @"This acceleration structure does not support children structures.";
LABEL_23:
    uint64_t v21 = +[ASVError errorWithCode:4 localizedDescription:v20];
    ((void (**)(id, void **, void *))v10)[2](v10, &v25, v21);

LABEL_24:
    uint64_t v19 = v25;
    goto LABEL_25;
  }
  uint64_t v24 = a3 + a4;
  if (a3 < a3 + a4)
  {
    uint64_t v16 = v13 + 184 * v12;
    unint64_t v22 = (void *)(v16 + 136);
    uint8x8_t v23 = (uint64_t *)(v16 + 128);
    while (2)
    {
      uint64_t v17 = *v23;
      if (a3 < (*v22 - *v23) >> 3)
      {
        switch(*(_DWORD *)(*(void *)(v17 + 8 * a3) + 8))
        {
          case 0:
            if (++a3 == v24) {
              break;
            }
            continue;
          case 1:
            operator new();
          case 2:
            asvsAS2iasv(*(AccelerationStructureViewerServer::AccelerationStructure **)(v17 + 8 * a3));
          case 3:
            asvsAS2pmasv(*(AccelerationStructureViewerServer::AccelerationStructure **)(v17 + 8 * a3));
          case 4:
            operator new();
          default:
            operator new();
        }
      }
      break;
    }
  }
  ((void (**)(id, void **, void *))v10)[2](v10, &v25, 0);
  uint64_t v19 = v25;
  unint64_t v18 = v26;
  if (v25 != v26)
  {
    do
    {
      if (*v19) {
        (*(void (**)(void))(*(void *)*v19 + 8))(*v19);
      }
      ++v19;
    }
    while (v19 != v18);
    goto LABEL_24;
  }
LABEL_25:
  if (v19)
  {
    uint64_t v26 = v19;
    operator delete(v19);
  }
}

void asvsAS2pmasv(AccelerationStructureViewerServer::AccelerationStructure *a1)
{
}

uint64_t AccelerationStructureViewerServer::DataSource::populateInstanceCount(uint64_t a1, unint64_t a2, uint64_t a3, AccelerationStructureViewer::Filter *a4)
{
  *(_OWORD *)(a3 + 68) = xmmword_4C7F50;
  *(void *)(a3 + 84) = 0x80000000800000;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t result = a1 + 16;
  uint64_t v6 = v7;
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v9 = (void *)result;
  do
  {
    unint64_t v10 = *(void *)(v6 + 32);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      unsigned int v12 = (uint64_t *)v6;
    }
    else {
      unsigned int v12 = (uint64_t *)(v6 + 8);
    }
    if (v11) {
      uint64_t v9 = (void *)v6;
    }
    uint64_t v6 = *v12;
  }
  while (*v12);
  if (v9 == (void *)result || v9[4] > a2) {
    goto LABEL_12;
  }
  int v14 = (float **)v9[5];
  uint64_t v13 = (float **)v9[6];
  if (v14 == v13)
  {
    if (*((unsigned char *)a4 + 8))
    {
LABEL_12:
      uint64_t v6 = 0;
LABEL_13:
      *(void *)(a3 + 40) = v6;
      return result;
    }
LABEL_24:
    uint64_t v6 = v13 - v14;
    goto LABEL_13;
  }
  float v15 = 3.4028e38;
  float v16 = -3.4028e38;
  float v17 = -3.4028e38;
  float v18 = -3.4028e38;
  float v19 = 3.4028e38;
  float v20 = 3.4028e38;
  uint64_t v21 = (float **)v9[5];
  do
  {
    unint64_t v22 = *v21++;
    float v20 = fminf(v20, v22[14]);
    *(float *)(a3 + 68) = v20;
    float v19 = fminf(v19, v22[15]);
    *(float *)(a3 + 72) = v19;
    float v15 = fminf(v15, v22[16]);
    *(float *)(a3 + 76) = v15;
    float v18 = fmaxf(v18, v22[17]);
    *(float *)(a3 + 80) = v18;
    float v17 = fmaxf(v17, v22[18]);
    *(float *)(a3 + 84) = v17;
    float v16 = fmaxf(v16, v22[19]);
    *(float *)(a3 + 88) = v16;
  }
  while (v21 != v13);
  if (!*((unsigned char *)a4 + 8)) {
    goto LABEL_24;
  }
  *(void *)(a3 + 40) = 0;
  do
  {
    uint64_t result = AccelerationStructureViewer::DataSourceFilterable::matches((AccelerationStructureViewer::DataSourceFilterable *)(*v14 + 2), a4);
    if (result) {
      ++*(void *)(a3 + 40);
    }
    ++v14;
  }
  while (v14 != (float **)v9[6]);
  return result;
}

void asvsAS2iasv(AccelerationStructureViewerServer::AccelerationStructure *a1)
{
}

void AccelerationStructureViewerServer::DataSource::getInstanceChildren(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  BOOL v11 = a6;
  if (a2 == -1) {
    goto LABEL_13;
  }
  int v14 = *(void **)(a1 + 16);
  uint64_t v13 = (void *)(a1 + 16);
  unsigned int v12 = v14;
  if (!v14) {
    goto LABEL_13;
  }
  float v15 = v13;
  do
  {
    unint64_t v16 = v12[4];
    BOOL v17 = v16 >= a2;
    if (v16 >= a2) {
      float v18 = v12;
    }
    else {
      float v18 = v12 + 1;
    }
    if (v17) {
      float v15 = v12;
    }
    unsigned int v12 = (void *)*v18;
  }
  while (*v18);
  if (v15 == v13 || v15[4] > a2)
  {
LABEL_13:
    __p = 0;
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    float v19 = +[ASVError errorWithCode:4 localizedDescription:@"Invalid acceleration structure"];
    v11[2](v11, &__p, v19);

    if (__p)
    {
      uint64_t v41 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v37 = off_747848;
    char v38 = *(unsigned char *)(a5 + 8);
    memset(v39, 0, sizeof(v39));
    std::vector<AccelerationStructureViewer::FilterToken>::__init_with_size[abi:nn180100]<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(v39, *(void *)(a5 + 16), *(void *)(a5 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 24) - *(void *)(a5 + 16)) >> 3));
    uint64_t v36 = v11;
    __p = 0;
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    float v20 = (uint64_t *)v15[5];
    if (v20 == (uint64_t *)v15[6])
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = *v20;
        if (AccelerationStructureViewer::DataSourceFilterable::matches((AccelerationStructureViewer::DataSourceFilterable *)(*v20 + 8), (AccelerationStructureViewer::Filter *)&v37))
        {
          if ((unint64_t)v21 >= v42)
          {
            uint64_t v24 = (char *)__p;
            uint64_t v25 = (v21 - (unsigned char *)__p) >> 3;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61) {
              abort();
            }
            uint64_t v27 = v42 - (void)__p;
            if ((uint64_t)(v42 - (void)__p) >> 2 > v26) {
              unint64_t v26 = v27 >> 2;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            uint64_t v30 = (char *)(v28 + 8 * v25);
            *(void *)uint64_t v30 = v22;
            uint8x8_t v23 = v30 + 8;
            if (v21 != v24)
            {
              do
              {
                uint64_t v31 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              while (v21 != v24);
              uint64_t v21 = (char *)__p;
            }
            __p = v30;
            uint64_t v41 = v23;
            unint64_t v42 = v28 + 8 * v29;
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(void *)uint64_t v21 = v22;
            uint8x8_t v23 = v21 + 8;
          }
          uint64_t v41 = v23;
          uint64_t v21 = v23;
        }
        ++v20;
      }
      while (v20 != (uint64_t *)v15[6]);
    }
    uint64_t v32 = __p;
    if (a3)
    {
      unint64_t v33 = (char *)__p + 8 * a3;
      int64_t v34 = v21 - v33;
      if (v21 != v33) {
        memmove(__p, v33, v21 - v33);
      }
      uint64_t v21 = &v32[v34];
      uint64_t v41 = &v32[v34];
    }
    if (a4 < (v21 - v32) >> 3 && &v32[8 * a4] != v21) {
      uint64_t v41 = &v32[8 * a4];
    }
    v36[2](v36, &__p, 0);
    if (__p)
    {
      uint64_t v41 = (char *)__p;
      operator delete(__p);
    }

    uint64_t v37 = off_747848;
    __p = v39;
    std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  }
}

void AccelerationStructureViewerServer::DataSource::getPrimitiveData(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  BOOL v17 = a5;
  uint64_t v9 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)(a1 + 136), a2);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 184) + 184 * *((unsigned int *)v9 + 6);
    uint64_t v11 = *(void *)(v10 + 112);
    unsigned int v12 = (char *)[*(id *)(v10 + 104) contents];
    unint64_t v13 = *(void *)(v10 + 120);
    if (a3 <= v13)
    {
      if (a3 + a4 <= v13) {
        +[NSData dataWithBytes:&v12[v11 + a3] length:a4];
      }
      else {
      unint64_t v16 = +[ASVError errorWithCode:2 localizedDescription:@"Requested data range end is beyond primitive data bounds"];
      }
      v17[2]();
      goto LABEL_10;
    }
    CFStringRef v14 = @"Requested data range start is beyond primitive data bounds";
    uint64_t v15 = 2;
  }
  else
  {
    CFStringRef v14 = @"Invalid acceleration structure";
    uint64_t v15 = 4;
  }
  unint64_t v16 = +[ASVError errorWithCode:v15 localizedDescription:v14];
  ((void (*)(void (**)(void), void, void *))v17[2])(v17, 0, v16);
LABEL_10:
}

void AccelerationStructureViewerServer::DataSource::getPrimitiveChildren(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v11 = a7;
  unsigned int v12 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(a1 + 17, a2);
  if (!v12) {
    goto LABEL_37;
  }
  unsigned int v13 = *((_DWORD *)v12 + 6);
  uint64_t v14 = a1[23];
  uint64_t v15 = v14 + 184 * v13;
  uint64_t v16 = *(void *)(v15 + 32);
  BOOL v17 = (char *)[*(id *)(v15 + 24) contents];
  int8x8_t v18 = (int8x8_t)a1[8];
  if (v18)
  {
    uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      unint64_t v20 = a2;
      if (*(void *)&v18 <= a2) {
        unint64_t v20 = a2 % *(void *)&v18;
      }
    }
    else
    {
      unint64_t v20 = (*(void *)&v18 - 1) & a2;
    }
    int i = *(void **)(a1[7] + 8 * v20);
    if (i)
    {
      for (int i = (void *)*i; i; int i = (void *)*i)
      {
        unint64_t v22 = i[1];
        if (v22 == a2)
        {
          if (i[2] == a2) {
            break;
          }
        }
        else
        {
          if (v19.u32[0] > 1uLL)
          {
            if (v22 >= *(void *)&v18) {
              v22 %= *(void *)&v18;
            }
          }
          else
          {
            v22 &= *(void *)&v18 - 1;
          }
          if (v22 != v20) {
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
LABEL_19:
    int i = 0;
  }
  int8x8_t v23 = (int8x8_t)a1[13];
  if (!*(void *)&v23) {
    goto LABEL_37;
  }
  uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    unint64_t v25 = a2;
    if (*(void *)&v23 <= a2) {
      unint64_t v25 = a2 % *(void *)&v23;
    }
  }
  else
  {
    unint64_t v25 = (*(void *)&v23 - 1) & a2;
  }
  unint64_t v26 = *(void **)(a1[12] + 8 * v25);
  if (!v26 || (uint64_t v27 = (void *)*v26) == 0)
  {
LABEL_37:
    __p = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v30 = +[ASVError errorWithCode:4 localizedDescription:@"Invalid acceleration structure"];
    v11[2](v11, &__p, v30);

    goto LABEL_38;
  }
  unint64_t v28 = &v17[v16];
  while (1)
  {
    unint64_t v29 = v27[1];
    if (v29 == a2) {
      break;
    }
    if (v24.u32[0] > 1uLL)
    {
      if (v29 >= *(void *)&v23) {
        v29 %= *(void *)&v23;
      }
    }
    else
    {
      v29 &= *(void *)&v23 - 1;
    }
    if (v29 != v25) {
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_37;
    }
  }
  if (v27[2] != a2) {
    goto LABEL_36;
  }
  if (!i || !v27) {
    goto LABEL_37;
  }
  if (a4 < *((unsigned int *)v28 + 6) && i[3])
  {
    uint64_t v32 = v14 + 184 * v13;
    [*(id *)(v32 + 88) contents];
    uint64_t v37 = 0;
    char v38 = 0;
    uint64_t v39 = 0;
    [*(id *)(v32 + 72) contents];
    if (a4 < a4 + a5)
    {
      int v33 = *((_DWORD *)v28 + 3);
      if (v33 != 2)
      {
        if (v33 != 1)
        {
          if (!v33) {
            operator new();
          }
          operator new();
        }
        operator new();
      }
      operator new();
    }
    v11[2](v11, &v37, 0);
    uint64_t v31 = v37;
    if (v37)
    {
      char v38 = v37;
LABEL_40:
      operator delete(v31);
    }
    goto LABEL_41;
  }
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  __p = 0;
  v11[2](v11, &__p, 0);
LABEL_38:
  uint64_t v31 = __p;
  if (__p)
  {
    uint64_t v35 = __p;
    goto LABEL_40;
  }
LABEL_41:
}

void AccelerationStructureViewerServer::DataSource::getGeometryChildren(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, AccelerationStructureViewer::Filter *a5, void *a6)
{
  uint64_t v11 = a6;
  uint64_t v14 = *(void **)(a1 + 40);
  unsigned int v13 = (void *)(a1 + 40);
  unsigned int v12 = v14;
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = v13;
  do
  {
    unint64_t v16 = v12[4];
    BOOL v17 = v16 >= a2;
    if (v16 >= a2) {
      int8x8_t v18 = v12;
    }
    else {
      int8x8_t v18 = v12 + 1;
    }
    if (v17) {
      uint64_t v15 = v12;
    }
    unsigned int v12 = (void *)*v18;
  }
  while (*v18);
  if (v15 != v13 && v15[4] <= a2)
  {
    __p = 0;
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    uint64_t v20 = v15[5];
    uint64_t v21 = v15[6];
    if (v20 == v21)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      do
      {
        if (AccelerationStructureViewer::DataSourceFilterable::matches((AccelerationStructureViewer::DataSourceFilterable *)(*(void *)v20 + 8), a5))
        {
          if ((unint64_t)v22 >= v37)
          {
            uint8x8_t v24 = (char *)__p;
            uint64_t v25 = (v22 - (unsigned char *)__p) >> 3;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61) {
              abort();
            }
            uint64_t v27 = v37 - (void)__p;
            if ((uint64_t)(v37 - (void)__p) >> 2 > v26) {
              unint64_t v26 = v27 >> 2;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            uint64_t v30 = (char *)(v28 + 8 * v25);
            *(void *)uint64_t v30 = *(void *)v20;
            int8x8_t v23 = v30 + 8;
            if (v22 != v24)
            {
              do
              {
                uint64_t v31 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              while (v22 != v24);
              unint64_t v22 = (char *)__p;
            }
            __p = v30;
            unint64_t v37 = v28 + 8 * v29;
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *(void *)unint64_t v22 = *(void *)v20;
            int8x8_t v23 = v22 + 8;
          }
          uint64_t v36 = v23;
          unint64_t v22 = v23;
        }
        v20 += 8;
      }
      while (v20 != v21);
    }
    if (a3)
    {
      uint64_t v32 = (char *)__p + 8 * a3;
      int64_t v33 = v22 - v32;
      if (v22 != v32) {
        memmove(__p, v32, v22 - v32);
      }
      unint64_t v22 = (char *)__p + v33;
      uint64_t v36 = (char *)__p + v33;
    }
    if (a4 < (v22 - (unsigned char *)__p) >> 3 && (char *)__p + 8 * a4 != v22) {
      uint64_t v36 = (char *)__p + 8 * a4;
    }
    v11[2](v11, &__p, 0);
  }
  else
  {
LABEL_12:
    __p = 0;
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    uint8x8_t v19 = +[ASVError errorWithCode:4 localizedDescription:@"Invalid acceleration structure"];
    ((void (**)(id, void **, void *))v11)[2](v11, &__p, v19);
  }
  if (__p)
  {
    uint64_t v36 = (char *)__p;
    operator delete(__p);
  }
}

void AccelerationStructureViewerServer::DataSource::getPrimaryAccelerationStructure(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = (AccelerationStructureViewerServer::AccelerationStructure *)(*(void *)(a1 + 184)
                                                                  + 184 * *(unsigned int *)(a1 + 176));
  switch(*((_DWORD *)v4 + 2))
  {
    case 0:
      memset(&v5[1], 0, 40);
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      int v6 = 0;
      v5[0] = off_744348;
      v5[6] = @"Invalid Acceleration Structure";
      v3[2](v3, v5, 0);
      AccelerationStructureViewer::InstanceAccelerationStructure::~InstanceAccelerationStructure(v5);
      break;
    case 1:
      operator new();
    case 2:
      asvsAS2iasv(v4);
    case 3:
      asvsAS2pmasv(v4);
    case 4:
      operator new();
    default:
      break;
  }
}

void AccelerationStructureViewerServer::DataSource::getIntersectionFunctions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void, void))
{
  uint64_t v7 = a6;
  uint64_t v8 = +[NSError errorWithDomain:@"ASV", 4, 0, 0, 0, 0 code userInfo];
  ((void (**)(void, uint64_t *, void *))a6)[2](v7, &v9, v8);

  uint64_t v10 = (void **)&v9;
  std::vector<AccelerationStructureViewer::IntersectionFunction>::__destroy_vector::operator()[abi:nn180100](&v10);
}

void AccelerationStructureViewerServer::DataSource::getIntersectionFunctionTables(uint64_t a1, void (**a2)(void, void, void))
{
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  unint64_t v3 = a2;
  uint64_t v4 = +[NSError errorWithDomain:@"ASV" code:4 userInfo:0];
  ((void (**)(void, void *, void *))a2)[2](v3, v5, v4);

  uint64_t v7 = (void **)v5;
  std::vector<AccelerationStructureViewer::IntersectionFunctionTable>::__destroy_vector::operator()[abi:nn180100](&v7);
  uint64_t v7 = (void **)v6;
  std::vector<AccelerationStructureViewer::IntersectionFunctionTable>::__destroy_vector::operator()[abi:nn180100](&v7);
}

void AccelerationStructureViewerServer::DataSource::~DataSource(AccelerationStructureViewerServer::DataSource *this)
{
  *(void *)this = off_747468;
  uint64_t v2 = (char *)*((void *)this + 4);
  unint64_t v3 = (char *)this + 40;
  if (v2 != (char *)this + 40)
  {
    do
    {
      uint64_t v4 = (void *)*((void *)v2 + 5);
      BOOL v5 = (void *)*((void *)v2 + 6);
      if (v4 != v5)
      {
        do
        {
          if (*v4) {
            (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
          }
          ++v4;
        }
        while (v4 != v5);
        uint64_t v4 = (void *)*((void *)v2 + 5);
      }
      *((void *)v2 + 6) = v4;
      int v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::destroy(*((void **)this + 5));
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = v3;
  for (int i = (uint64_t **)*((void *)this + 9); i; int i = (uint64_t **)*i)
    free(i[3]);
  if (*((void *)this + 10))
  {
    uint64_t v10 = (void *)*((void *)this + 9);
    if (v10)
    {
      do
      {
        uint64_t v11 = (void *)*v10;
        operator delete(v10);
        uint64_t v10 = v11;
      }
      while (v11);
    }
    *((void *)this + 9) = 0;
    uint64_t v12 = *((void *)this + 8);
    if (v12)
    {
      for (uint64_t j = 0; j != v12; ++j)
        *(void *)(*((void *)this + 7) + 8 * j) = 0;
    }
    *((void *)this + 10) = 0;
  }
  for (uint64_t k = (uint64_t **)*((void *)this + 14); k; uint64_t k = (uint64_t **)*k)
    free(k[3]);
  if (*((void *)this + 15))
  {
    uint64_t v15 = (void *)*((void *)this + 14);
    if (v15)
    {
      do
      {
        unint64_t v16 = (void *)*v15;
        operator delete(v15);
        uint64_t v15 = v16;
      }
      while (v16);
    }
    *((void *)this + 14) = 0;
    uint64_t v17 = *((void *)this + 13);
    if (v17)
    {
      for (uint64_t m = 0; m != v17; ++m)
        *(void *)(*((void *)this + 12) + 8 * m) = 0;
    }
    *((void *)this + 15) = 0;
  }
  uint64_t v19 = *((void *)this + 23);
  if (*((void *)this + 24) != v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      uint64_t v22 = v19 + v20;
      int8x8_t v23 = *(void **)(v22 + 24);
      *(void *)(v22 + 24) = 0;

      uint64_t v24 = *((void *)this + 23) + v20;
      uint64_t v25 = *(void **)(v24 + 40);
      *(void *)(v24 + 40) = 0;

      uint64_t v26 = *((void *)this + 23) + v20;
      uint64_t v27 = *(void **)(v26 + 56);
      *(void *)(v26 + 56) = 0;

      uint64_t v28 = *((void *)this + 23) + v20;
      uint64_t v29 = *(void **)(v28 + 72);
      *(void *)(v28 + 72) = 0;

      uint64_t v30 = *((void *)this + 23) + v20;
      uint64_t v31 = *(void **)(v30 + 88);
      *(void *)(v30 + 88) = 0;

      uint64_t v32 = *((void *)this + 23) + v20;
      int64_t v33 = *(void **)(v32 + 104);
      *(void *)(v32 + 104) = 0;

      uint64_t v34 = *((void *)this + 23) + v20;
      uint64_t v35 = *(void **)(v34 + 152);
      *(void *)(v34 + 152) = 0;

      uint64_t v36 = *((void *)this + 23) + v20;
      unint64_t v37 = *(void **)(v36 + 168);
      *(void *)(v36 + 168) = 0;

      ++v21;
      uint64_t v19 = *((void *)this + 23);
      v20 += 184;
    }
    while (v21 < 0xD37A6F4DE9BD37A7 * ((*((void *)this + 24) - v19) >> 3));
  }
  BOOL v44 = (void **)((char *)this + 184);
  std::vector<AccelerationStructureViewerServer::AccelerationStructure>::__destroy_vector::operator()[abi:nn180100](&v44);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this + 136);
  char v38 = (void *)*((void *)this + 14);
  if (v38)
  {
    do
    {
      uint64_t v39 = (void *)*v38;
      operator delete(v38);
      char v38 = v39;
    }
    while (v39);
  }
  uint64_t v40 = (void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v40) {
    operator delete(v40);
  }
  uint64_t v41 = (void *)*((void *)this + 9);
  if (v41)
  {
    do
    {
      unint64_t v42 = (void *)*v41;
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  uint64_t v43 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v43) {
    operator delete(v43);
  }
  std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::destroy(*((void **)this + 5));
  std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::destroy(*((void **)this + 2));
}

void std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::vector<AccelerationStructureViewerServer::APSUSCRayCollector>::resize(char **a1, unint64_t a2)
{
  BOOL v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = (v4 - *a1) >> 5;
  if (a2 > v6)
  {
    uint64_t v7 = a1[2];
    if (a2 - v6 <= (v7 - v4) >> 5)
    {
      uint64_t v24 = &v4[32 * (a2 - v6)];
      uint64_t v25 = 32 * a2 - 32 * v6;
      do
      {
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = 0;
        *(void *)uint64_t v4 = -1;
        *((void *)v4 + 1) = 0;
        v4 += 32;
        v25 -= 32;
      }
      while (v25);
      a1[1] = v24;
      return;
    }
    if (a2 >> 59) {
      abort();
    }
    unint64_t v8 = v7 - v5;
    unint64_t v9 = (v7 - v5) >> 4;
    if (v9 <= a2) {
      unint64_t v9 = a2;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >> 59) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v11 = (char *)operator new(32 * v10);
    uint64_t v12 = &v11[32 * v6];
    unsigned int v13 = &v11[32 * a2];
    uint64_t v14 = 32 * a2 - 32 * v6;
    uint64_t v15 = v12;
    do
    {
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = 0;
      *(void *)uint64_t v15 = -1;
      *((void *)v15 + 1) = 0;
      v15 += 32;
      v14 -= 32;
    }
    while (v14);
    unint64_t v16 = &v11[32 * v10];
    int8x8_t v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v16;
      if (!v17) {
        return;
      }
    }
    else
    {
      do
      {
        *((_OWORD *)v12 - 2) = *((_OWORD *)v17 - 2);
        long long v19 = *((_OWORD *)v17 - 1);
        *((void *)v17 - 2) = 0;
        *((_OWORD *)v12 - 1) = v19;
        v12 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      uint64_t v20 = *a1;
      uint64_t v17 = a1[1];
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v16;
      if (v17 != v20)
      {
        do
        {
          unint64_t v21 = v17 - 32;

          uint64_t v17 = v21;
        }
        while (v21 != v20);
        uint64_t v17 = v20;
      }
      if (!v17) {
        return;
      }
    }
    operator delete(v17);
    return;
  }
  if (a2 < v6)
  {
    uint64_t v22 = &v5[32 * a2];
    if (v4 != v22)
    {
      do
      {
        int8x8_t v23 = v4 - 32;

        uint64_t v4 = v23;
      }
      while (v23 != v22);
    }
    a1[1] = v22;
  }
}

void std::vector<std::mutex>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (std::mutex *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::mutex *)v1[1];
    BOOL v5 = v2;
    if (v4 != v2)
    {
      do
        std::mutex::~mutex(v4 - 1);
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<AccelerationStructureViewerServer::APSRawChunk>::~deque[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 128;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AccelerationStructureViewerServer::Profiler::stopAPSStreaming(uint64_t a1, void *a2)
{
  id v15 = a2;
  unint64_t v3 = [*(id *)(a1 + 752) firstObject];
  [v3 stopSampling];

  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Waiting for accumulation workers to finish…");
  }
  *(unsigned char *)(a1 + 432) = 0;
  uint64_t v5 = *(void *)(a1 + 248);
  uint64_t v4 = *(void *)(a1 + 256);
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      std::thread::join((std::thread *)(v5 + v6));
      ++v7;
      uint64_t v5 = *(void *)(a1 + 248);
      uint64_t v4 = *(void *)(a1 + 256);
      v6 += 8;
    }
    while (v7 < (v4 - v5) >> 3);
    if (v4 != v5)
    {
      do
        std::thread::~thread((std::thread *)(v4 - 8));
      while (v4 != v5);
      uint64_t v4 = v5;
    }
  }
  *(void *)(a1 + 256) = v4;
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Waiting for parser workers to finish…");
  }
  uint64_t v9 = *(void *)(a1 + 272);
  uint64_t v8 = *(void *)(a1 + 280);
  if (v8 != v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      std::thread::join((std::thread *)(v9 + v10));
      ++v11;
      uint64_t v9 = *(void *)(a1 + 272);
      uint64_t v8 = *(void *)(a1 + 280);
      v10 += 8;
    }
    while (v11 < (v8 - v9) >> 3);
    if (v8 != v9)
    {
      do
        std::thread::~thread((std::thread *)(v8 - 8));
      while (v8 != v9);
      uint64_t v8 = v9;
    }
  }
  *(void *)(a1 + 280) = v8;
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Clearing out raw chunks");
  }
  if (*(void *)(a1 + 584) != *(void *)(a1 + 576))
  {
    unint64_t v12 = 0;
    do
    {
      std::mutex::lock((std::mutex *)(*(void *)(a1 + 552) + (v12 << 6)));
      for (int i = (void *)(*(void *)(a1 + 576) + 48 * v12); i[5]; int i = (void *)(*(void *)(a1 + 576) + 48 * v12))
      {
        free(*(void **)(*(void *)(i[1] + ((i[4] >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (i[4] & 0x7FLL) + 16));
        uint64_t v14 = (int64x2_t *)(*(void *)(a1 + 576) + 48 * v12);
        v14[2] = vaddq_s64(v14[2], (int64x2_t)xmmword_4C7D20);
        std::deque<AccelerationStructureViewerServer::APSRawChunk>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)v14);
      }
      std::mutex::unlock((std::mutex *)(*(void *)(a1 + 552) + (v12++ << 6)));
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 584) - *(void *)(a1 + 576)) >> 4));
  }
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Clearing out free chunks");
  }
  std::mutex::lock((std::mutex *)(a1 + 440));
  while (*(void *)(a1 + 544))
  {
    free(*(void **)(*(void *)(*(void *)(a1 + 512) + ((*(void *)(a1 + 536) >> 4) & 0xFFFFFFFFFFFFFF8))
                  + 32 * (*(void *)(a1 + 536) & 0x7FLL)
                  + 16));
    *(int64x2_t *)(a1 + 536) = vaddq_s64(*(int64x2_t *)(a1 + 536), (int64x2_t)xmmword_4C7D20);
    std::deque<AccelerationStructureViewerServer::APSRawChunk>::__maybe_remove_front_spare[abi:nn180100](a1 + 504);
  }
  std::mutex::unlock((std::mutex *)(a1 + 440));
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Clearing out free ray buffers");
  }
  std::mutex::lock((std::mutex *)(a1 + 136));
  while (*(void *)(a1 + 240))
    std::deque<objc_object  {objcproto9MTLBuffer}* {__strong}>::pop_front(a1 + 200);
  std::mutex::unlock((std::mutex *)(a1 + 136));
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Streaming is no longer running…");
  }
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v2);
    }
    operator delete(a1);
  }
}

void std::vector<std::thread>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (std::thread *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::thread *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        std::thread::~thread(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_weak_count::__release_shared[abi:nn180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::deque<AccelerationStructureViewerServer::APSRawChunk>::__maybe_remove_front_spare[abi:nn180100](uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 0x100uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 128;
  }
}

void std::deque<objc_object  {objcproto9MTLBuffer}* {__strong}>::pop_front(uint64_t a1)
{
  objc_release(*(id *)(*(void *)(*(void *)(a1 + 8) + ((*(void *)(a1 + 32) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(void *)(a1 + 32) & 0x1FFLL)));
  int64x2_t v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_4C7D20);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
}

uint64_t *std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_0>,std::default_delete<AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_0>>::~unique_ptr[abi:nn180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {

    std::unique_ptr<std::__thread_struct>::reset[abi:nn180100]((std::__thread_struct **)v1);
    operator delete();
  }
  return result;
}

uint64_t std::__split_buffer<std::thread>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_1>,std::default_delete<AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_1>>::~unique_ptr[abi:nn180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {

    std::unique_ptr<std::__thread_struct>::reset[abi:nn180100]((std::__thread_struct **)v1);
    operator delete();
  }
  return result;
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_1>>(uint64_t a1)
{
  uint64_t v5 = a1;
  int64x2_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  AccelerationStructureViewerServer::Profiler::parserWorker(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_1>,std::default_delete<AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_1>>::~unique_ptr[abi:nn180100](&v5);
  return 0;
}

void AccelerationStructureViewerServer::Profiler::parserWorker(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Started parser worker");
  }
  unint64_t v168 = v4;
  CFProperty = (void *)IORegistryEntryCreateCFProperty((io_registry_entry_t)[v4 acceleratorPort], @"GPUConfigurationVariable", 0, 0);
  uint64_t v6 = [CFProperty objectForKeyedSubscript:@"gpu_gen"];
  unint64_t v7 = (int *)[v6 unsignedIntegerValue];

  uint64_t v8 = [CFProperty objectForKeyedSubscript:@"num_cores"];
  id v9 = [v8 unsignedIntegerValue];

  if (v7 == &dword_10)
  {
    CFStringRef v17 = @"B0";
    CFStringRef v18 = @"G";
    CFStringRef v19 = @"C";
    if ((unint64_t)v9 < 0x15) {
      CFStringRef v19 = @"S";
    }
    if ((unint64_t)v9 >= 0xB)
    {
      CFStringRef v18 = v19;
      CFStringRef v17 = @"A0";
    }
    if ((unint64_t)v9 >= 8) {
      CFStringRef v15 = v18;
    }
    else {
      CFStringRef v15 = @"P";
    }
    if ((unint64_t)v9 >= 8) {
      CFStringRef v16 = v17;
    }
    else {
      CFStringRef v16 = @"B1";
    }
  }
  else if (v7 == (int *)((char *)&dword_C + 3))
  {
    CFStringRef v10 = @"A0";
    CFStringRef v11 = @"P";
    CFStringRef v12 = @"G";
    CFStringRef v13 = @"S";
    CFStringRef v14 = @"D";
    if ((unint64_t)v9 < 0x29)
    {
      CFStringRef v14 = @"C";
      CFStringRef v10 = @"B0";
    }
    if ((unint64_t)v9 < 0x15) {
      CFStringRef v10 = @"B0";
    }
    else {
      CFStringRef v13 = v14;
    }
    if ((unint64_t)v9 < 0xB) {
      CFStringRef v10 = @"C0";
    }
    else {
      CFStringRef v12 = v13;
    }
    if ((unint64_t)v9 < 8) {
      CFStringRef v10 = @"B1";
    }
    else {
      CFStringRef v11 = v12;
    }
    if ((unint64_t)v9 >= 4) {
      CFStringRef v15 = v11;
    }
    else {
      CFStringRef v15 = @"M";
    }
    if ((unint64_t)v9 >= 4) {
      CFStringRef v16 = v10;
    }
    else {
      CFStringRef v16 = @"B0";
    }
  }
  else
  {
    if ((unint64_t)v9 >= 8) {
      CFStringRef v15 = @"G";
    }
    else {
      CFStringRef v15 = @"P";
    }
    if ((unint64_t)v7 - 18 <= 0xFFFFFFFFFFFFFFF7)
    {
      uint64_t v20 = agxps_gpu_invalid_handle();
      goto LABEL_44;
    }
    CFStringRef v16 = @"A0";
  }
  unint64_t v21 = [&off_759670 objectForKey:v15];
  uint64_t v22 = v21;
  if (v21)
  {
    [v21 unsignedIntegerValue];
    int8x8_t v23 = [&off_759698 objectForKey:v16];
    if (v23)
    {
      [v23 unsignedIntegerValue];
      agxps_gpu_create();
    }
    uint64_t v20 = agxps_gpu_invalid_handle();
  }
  else
  {
    uint64_t v20 = agxps_gpu_invalid_handle();
  }

LABEL_44:
  if (!agxps_gpu_is_valid(v20))
  {
    NSLog(@"The Acceleration Structure Viewer does not support hardware counters for this GPU");
    exit(1);
  }
  uint64_t v221 = v20;
  int v222 = *(_DWORD *)(a1 + 816);
  uint64_t v223 = *(void *)(a1 + 808);
  uint64_t v224 = 4096;
  int v225 = 0;
  unsigned long long v220 = 0u;
  memset(v219, 0, sizeof(v219));
  if (*(unsigned char *)(a1 + 432))
  {
    long long v188 = (std::mutex *)(a1 + 624);
    unint64_t v172 = (std::mutex *)(a1 + 440);
    std::vector<unsigned int>::pointer v174 = (uint64_t *)(a1 + 736);
    unint64_t v24 = -1;
    while (2)
    {
      while (*(void *)(a1 + 584) == *(void *)(a1 + 576))
      {
LABEL_65:
        usleep(0x3E8u);
        if (!*(unsigned char *)(a1 + 432)) {
          goto LABEL_313;
        }
      }
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      uint64_t v28 = -1;
      while (1)
      {
        BOOL v29 = std::mutex::try_lock((std::mutex *)(*(void *)(a1 + 552) + v26));
        uint64_t v30 = *(void *)(a1 + 576);
        if (v29) {
          break;
        }
LABEL_63:
        ++v27;
        v26 += 64;
        v25 += 48;
        if (v27 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 584) - v30) >> 4))
        {
          if (v28 != -1) {
            goto LABEL_68;
          }
          goto LABEL_65;
        }
      }
      unint64_t v31 = *(void *)(v30 + v25 + 40);
      if (!v31)
      {
        uint64_t v34 = v28;
LABEL_62:
        std::mutex::unlock((std::mutex *)(*(void *)(a1 + 552) + v26));
        uint64_t v30 = *(void *)(a1 + 576);
        uint64_t v28 = v34;
        goto LABEL_63;
      }
      uint64_t v32 = *(void *)(*(void *)(v30 + v25 + 8) + ((*(void *)(v30 + v25 + 32) >> 4) & 0xFFFFFFFFFFFFFF8))
          + 32 * (*(void *)(v30 + v25 + 32) & 0x7FLL);
      BOOL v33 = *(void *)(v32 + 8) != *(void *)(*(void *)(a1 + 600) + 131200 * *(unsigned __int16 *)(v32 + 2) + 24)
         || v31 >= v24;
      if (v33) {
        goto LABEL_58;
      }
      if (v28 != -1)
      {
        std::mutex::unlock((std::mutex *)(*(void *)(a1 + 552) + (v28 << 6)));
        uint64_t v30 = *(void *)(a1 + 576);
      }
      unint64_t v24 = *(void *)(v30 + v25 + 40);
      uint64_t v28 = v27;
      if (v24 != 1)
      {
LABEL_58:
        uint64_t v34 = v28;
        BOOL v74 = v27 == v28;
        uint64_t v28 = v27;
        if (v74) {
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      uint64_t v28 = v27;
LABEL_68:
      if (*(unsigned char *)(a1 + 432))
      {
        uint64_t v35 = (int64x2_t *)(v30 + 48 * v28);
        uint64_t v36 = (long long *)(*(void *)(v35->i64[1] + (((unint64_t)v35[2].i64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                         + 32 * (v35[2].i64[0] & 0x7F));
        long long v37 = v36[1];
        long long v217 = *v36;
        long long v218 = v37;
        uint64_t v35[2] = vaddq_s64(v35[2], (int64x2_t)xmmword_4C7D20);
        std::deque<AccelerationStructureViewerServer::APSRawChunk>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)v35);
        std::mutex::unlock((std::mutex *)(*(void *)(a1 + 552) + (v28 << 6)));
        uint64_t v38 = WORD1(v217);
        uint64_t v39 = *(void *)(a1 + 600);
        uint64_t v40 = (uint64_t *)(v39 + 131200 * WORD1(v217));
        if ((_BYTE)v217)
        {
          if (*((void *)&v217 + 1)) {
            agxps_aps_parser_destroy(*v40);
          }
          uint64_t v41 = (void *)(v39 + 131200 * v38);
          _DWORD v41[6] = 0;
          v41[7] = 0;
          v41 += 16393;
          *uint64_t v41 = 0;
          v41[1] = 0;
          *(void *)(v39 + 131200 * v38 + 131136) = 0;
          unint64_t v42 = agxps_aps_parser_create(&v221);
          *uint64_t v40 = (uint64_t)v42;
          if (*(unsigned char *)(a1 + 32) && !v42) {
            NSLog(@"Parser is missing opaque");
          }
          long long v226 = *(_OWORD *)off_747550;
          long long v227 = *(_OWORD *)off_747560;
          agxps_aps_parser_set_counter_filter(*v40, &v226, 4uLL);
        }
        long long v43 = v218;
        if (*(unsigned char *)(a1 + 32) && (!(void)v218 || !*((void *)&v218 + 1))) {
          NSLog(@"Chunk is nullptr 0x%llx or zero %zu", v218);
        }
        unsigned int v216 = 0;
        BOOL v44 = agxps_aps_parser_parse((uint64_t (***)(void))*v40, v43, *((uint64_t *)&v43 + 1), 6, &v216);
        if (v216) {
          NSLog(@"An error %d occured while parsing chunk %llu of usc %d", v216, *((void *)&v217 + 1), v38);
        }
        uint64_t v45 = (void *)(a1 + 504);
        if (!v44 && *(unsigned char *)(a1 + 32)) {
          NSLog(@"Chunk %llu of usc %d does not have any opaque data", *((void *)&v217 + 1), v38);
        }
        counter_nuunint64_t m = agxps_aps_profile_data_get_counter_num((uint64_t)v44);
        if (!v44 || !counter_num || v216)
        {
          if (v216)
          {
            NSLog(@"Chunk had an error");
          }
          else if (!v44)
          {
            NSLog(@"Chunk is not opaque");
          }
LABEL_299:
          if (*((void *)&v220 + 1) < 0x80uLL)
          {
            std::deque<AccelerationStructureViewerServer::APSRawChunk>::push_back(v219, (uint64_t)&v217);
          }
          else
          {
            std::mutex::lock(v172);
            if (*((void *)&v220 + 1))
            {
              unint64_t v161 = v220;
              do
              {
                std::deque<AccelerationStructureViewerServer::APSRawChunk>::push_back(v45, *(void *)(*((void *)&v219[0] + 1) + ((v161 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v161 & 0x7F));
                uint64_t v162 = *((void *)&v220 + 1) - 1;
                unint64_t v161 = v220 + 1;
                unsigned long long v220 = __PAIR128__(*((unint64_t *)&v220 + 1), (uint64_t)v220 + 1) + __PAIR128__(-1, 0);
                if (v161 >= 0x100)
                {
                  operator delete(**((void ***)&v219[0] + 1));
                  unint64_t v161 = v220 - 128;
                  *((void *)&v219[0] + 1) += 8;
                  *(void *)&unsigned long long v220 = v220 - 128;
                  uint64_t v162 = *((void *)&v220 + 1);
                }
              }
              while (v162);
            }
            std::deque<AccelerationStructureViewerServer::APSRawChunk>::push_back(v45, (uint64_t)&v217);
            std::mutex::unlock(v172);
          }
          uint64_t v163 = WORD1(v217);
          std::mutex::lock((std::mutex *)(*(void *)(a1 + 552) + ((unint64_t)WORD1(v217) << 6)));
          ++*(void *)(v39 + 131200 * v38 + 24);
          std::mutex::unlock((std::mutex *)(*(void *)(a1 + 552) + (v163 << 6)));
          unint64_t v24 = -1;
          if (!*(unsigned char *)(a1 + 432)) {
            goto LABEL_313;
          }
          continue;
        }
        uint64_t v47 = v39 + 131200 * v38;
        unsigned int v50 = *(_DWORD *)(v47 + 8);
        unint64_t v49 = (unsigned int *)(v47 + 8);
        unsigned int v48 = v50;
        if (v50 == -1)
        {
          unsigned int *v49 = agxps_aps_profile_data_get_counter_index((uint64_t)v44);
          unint64_t v51 = (_DWORD *)(v39 + 131200 * v38);
          v51[3] = agxps_aps_profile_data_get_counter_index((uint64_t)v44);
          v51[4] = agxps_aps_profile_data_get_counter_index((uint64_t)v44);
          unsigned int counter_index = agxps_aps_profile_data_get_counter_index((uint64_t)v44);
          v51[5] = counter_index;
          unsigned int v194 = *v49;
        }
        else
        {
          unsigned int v194 = v48;
          unsigned int counter_index = *(_DWORD *)(v39 + 131200 * v38 + 20);
        }
        uint64_t v52 = v39 + 131200 * v38;
        unsigned int v199 = *(_DWORD *)(v52 + 12);
        unsigned int v196 = *(_DWORD *)(v52 + 16);
        unint64_t v171 = (_DWORD *)(v52 + 131160);
        uint64_t v53 = *(unsigned int *)(v52 + 131160);
        uint64_t v170 = (unint64_t *)(v52 + 131168);
        unint64_t v54 = *(void *)(v52 + 131168);
        long long v227 = 0u;
        unsigned long long v228 = 0u;
        long long v226 = 0u;
        v215.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
        v215.__owns_ = 1;
        std::mutex::lock(v188);
        uint64_t v55 = 0;
        uint64_t v175 = v39;
        if (v53 && v54)
        {
          uint64_t v56 = *v174;
          if (!*v174) {
            goto LABEL_106;
          }
          uint64_t v57 = a1 + 736;
          do
          {
            unsigned int v58 = *(_DWORD *)(v56 + 32);
            BOOL v59 = v58 >= v53;
            if (v58 >= v53) {
              unint64_t v60 = (uint64_t *)v56;
            }
            else {
              unint64_t v60 = (uint64_t *)(v56 + 8);
            }
            if (v59) {
              uint64_t v57 = v56;
            }
            uint64_t v56 = *v60;
          }
          while (*v60);
          if ((uint64_t *)v57 != v174 && v53 >= *(_DWORD *)(v57 + 32))
          {
            uint64_t v55 = *(void *)(v57 + 40);
            uint64_t v164 = *(std::__shared_weak_count **)(v57 + 48);
            if (v164)
            {
              int64x2_t v184 = v164;
              atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              int64x2_t v184 = 0;
            }
          }
          else
          {
LABEL_106:
            int64x2_t v184 = 0;
            uint64_t v55 = 0;
            uint64_t v53 = 0;
            unint64_t v54 = 0;
          }
        }
        else
        {
          int64x2_t v184 = 0;
        }
        unint64_t v181 = v54;
        uint64_t v186 = v53;
        kicks_nuunint64_t m = agxps_aps_profile_data_get_kicks_num((uint64_t)v44);
        if (kicks_num)
        {
          uint64_t v62 = kicks_num;
          uint64_t v63 = 0;
          char v64 = 0;
          uint64_t v65 = 0;
          unint64_t v192 = -1;
          while (1)
          {
            unint64_t v214 = 0;
            if (!agxps_aps_profile_data_get_kick_software_id((uint64_t)v44, &v214, v65, 1)
              || !agxps_aps_profile_data_get_kick_start((uint64_t)v44, &v213, v65, 1))
            {
              goto LABEL_147;
            }
            uint64_t v66 = v63;
            __dst = 0;
            if (!agxps_aps_profile_data_get_usc_timestamps((uint64_t)v44, &__dst, HIDWORD(v213), 1)) {
              goto LABEL_145;
            }
            uint64_t v67 = HIDWORD(v214);
            uint64_t v68 = *v174;
            if (*v174)
            {
              uint64_t v69 = a1 + 736;
              do
              {
                unsigned int v70 = *(_DWORD *)(v68 + 32);
                BOOL v71 = v70 >= HIDWORD(v214);
                if (v70 >= HIDWORD(v214)) {
                  uint64_t v72 = (uint64_t *)v68;
                }
                else {
                  uint64_t v72 = (uint64_t *)(v68 + 8);
                }
                if (v71) {
                  uint64_t v69 = v68;
                }
                uint64_t v68 = *v72;
              }
              while (*v72);
              if ((uint64_t *)v69 != v174 && *(_DWORD *)(v69 + 32) <= HIDWORD(v214)) {
                break;
              }
            }
            if (std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)(a1 + 688), HIDWORD(v214)))
            {
              if (!((v55 != 0) | v64 & 1))
              {
                if (v184) {
                  std::__shared_weak_count::__release_shared[abi:nn180100](v184);
                }
                int64x2_t v184 = 0;
                uint64_t v55 = 0;
                char v64 = 1;
                unint64_t v181 = (unint64_t)__dst;
                goto LABEL_146;
              }
              v209.__m_ = __dst;
              *(_DWORD *)&v209.__owns_ = v67;
              uint64_t v210 = 0;
              unint64_t v211 = 0;
              std::deque<std::pair<unsigned long long,std::pair<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>>>::push_back(&v226, (__n128 *)&v209);
              if (v211) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v211);
              }
              unint64_t v73 = v192;
              BOOL v74 = v192 == -1;
              if (v192 == -1) {
                unint64_t v73 = (unint64_t)__dst;
              }
              unint64_t v192 = v73;
              goto LABEL_142;
            }
LABEL_145:
            uint64_t v67 = v186;
LABEL_146:
            uint64_t v186 = v67;
            uint64_t v63 = v66;
LABEL_147:
            if (++v65 == v62) {
              goto LABEL_157;
            }
          }
          if (!((v55 != 0) | v64 & 1))
          {
            uint64_t v78 = v44;
            uint64_t v55 = *(void *)(v69 + 40);
            uint64_t v79 = *(std::__shared_weak_count **)(v69 + 48);
            if (v79) {
              atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v184) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v184);
            }
            char v64 = 0;
            unint64_t v181 = (unint64_t)__dst;
            int64x2_t v184 = v79;
            BOOL v44 = v78;
            goto LABEL_146;
          }
          uint64_t v76 = *(void *)(v69 + 40);
          uint64_t v75 = *(std::__shared_weak_count **)(v69 + 48);
          if (v75) {
            atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v209.__m_ = __dst;
          *(_DWORD *)&v209.__owns_ = v67;
          uint64_t v210 = v76;
          unint64_t v211 = v75;
          std::deque<std::pair<unsigned long long,std::pair<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>>>::push_back(&v226, (__n128 *)&v209);
          unint64_t v77 = v192;
          if (v211) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v211);
          }
          BOOL v74 = v192 == -1;
          if (v192 == -1) {
            unint64_t v77 = (unint64_t)__dst;
          }
          unint64_t v192 = v77;
LABEL_142:
          if (v74) {
            uint64_t v66 = v67;
          }
          else {
            uint64_t v66 = v66;
          }
          goto LABEL_145;
        }
        LODWORD(v63) = 0;
        unint64_t v192 = -1;
LABEL_157:
        std::unique_lock<std::mutex>::unlock(&v215);
        uint64_t v213 = 0;
        unint64_t v214 = 0;
        __dst = 0;
        if (v194 != -1)
        {
          agxps_aps_profile_data_get_counter_values_num_by_index((uint64_t)v44, (uint64_t *)&v214, v194);
          agxps_aps_profile_data_get_counter_values_by_index((uint64_t)v44, &v213, v194);
          agxps_aps_profile_data_get_counter_group_metadata_by_index(v44, &__dst, v194);
        }
        uint64_t v207 = 0;
        unint64_t v208 = 0;
        uint64_t v205 = 0;
        unint64_t v206 = 0;
        uint64_t v203 = 0;
        unint64_t v204 = 0;
        uint64_t v202 = 0;
        if (v199 != -1)
        {
          agxps_aps_profile_data_get_counter_values_num_by_index((uint64_t)v44, (uint64_t *)&v208, v199);
          if (v208)
          {
            agxps_aps_profile_data_get_counter_values_by_index((uint64_t)v44, &v207, v199);
            agxps_aps_profile_data_get_counter_group_metadata_by_index(v44, &v202, v199);
          }
        }
        if (v196 != -1)
        {
          agxps_aps_profile_data_get_counter_values_num_by_index((uint64_t)v44, (uint64_t *)&v206, v196);
          if (v206) {
            agxps_aps_profile_data_get_counter_values_by_index((uint64_t)v44, &v205, v196);
          }
        }
        if (counter_index != -1)
        {
          agxps_aps_profile_data_get_counter_values_num_by_index((uint64_t)v44, (uint64_t *)&v204, counter_index);
          if (v204) {
            agxps_aps_profile_data_get_counter_values_by_index((uint64_t)v44, &v203, counter_index);
          }
        }
        uint64_t v200 = (uint64_t)v44;
        uint64_t v80 = v206;
        if (v206 >= v214) {
          uint64_t v80 = v214;
        }
        unint64_t v214 = v80;
        if (v204 >= v208) {
          unint64_t v81 = v208;
        }
        else {
          unint64_t v81 = v204;
        }
        unint64_t v208 = v81;
        uint64_t v82 = v175 + 131200 * v38;
        unint64_t v85 = *(void *)(v82 + 48);
        uint64_t v83 = (unint64_t *)(v82 + 48);
        unint64_t v84 = v85;
        unsigned int v173 = v38;
        if (v80)
        {
          uint64_t v169 = v83;
          unsigned int v182 = v63;
          uint64_t v86 = 0;
          unint64_t v87 = 0;
          uint64_t v88 = v175 + 131200 * v38;
          long long v183 = (unint64_t *)(v88 + 131136);
          unint64_t v89 = (uint64_t *)(v88 + 131184);
          id v180 = (void *)(v88 + 131176);
          unint64_t v179 = (_DWORD *)(v88 + 131188);
          unsigned int v90 = v38;
          uint64_t v91 = (_DWORD *)(v88 + 131192);
          uint64_t v198 = v88 + 65600;
          uint64_t v92 = (unint64_t *)(v88 + 131144);
          uint64_t v195 = v175 + 131200 * v90;
          while (1)
          {
            uint64_t v93 = *(void *)(v213 + 8 * v86);
            uint64_t v190 = *(void *)(v205 + 8 * v86);
            uint64_t v191 = v86;
            unint64_t v201 = 0;
            unint64_t v94 = v192;
            if ((agxps_aps_profile_data_get_usc_timestamps(v200, &v201, *((unsigned int *)&__dst->__m_.__sig + 2 * v86 + 1), 1) & 1) == 0&& *(unsigned char *)(a1 + 32))
            {
              NSLog(@"Unable to get intersect timestamp");
            }
            unint64_t v95 = v201;
            if (!v201)
            {
              unint64_t v95 = (*v183 + *(unsigned int *)(a1 + 812)) % 0xFFFFF;
              unint64_t v201 = v95;
            }
            unint64_t *v183 = v95;
            uint64_t v189 = v93;
            if (!v55)
            {
              uint64_t v98 = v190;
              if (!v93) {
                goto LABEL_235;
              }
              goto LABEL_234;
            }
            if (v201 < v192)
            {
              uint64_t v96 = v192;
              uint64_t v185 = v182;
              unint64_t v94 = v181;
              long long v97 = v184;
              goto LABEL_204;
            }
            if (!*((void *)&v228 + 1)) {
              break;
            }
            uint64_t v99 = *(void *)(*((void *)&v226 + 1) + (((unint64_t)v228 >> 4) & 0xFFFFFFFFFFFFFF8))
                + 32 * (v228 & 0x7F);
            uint64_t v55 = *(void *)(v99 + 16);
            uint64_t v100 = *(std::__shared_weak_count **)(v99 + 24);
            if (v100)
            {
              atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v187 = v100;
            if (v184) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v184);
            }
            unint64_t v101 = v228;
            uint64_t v102 = *(std::__shared_weak_count **)(*(void *)(*((void *)&v226 + 1)
                                                            + ((v101 >> 4) & 0xFFFFFFFFFFFFFF8))
                                                + 32 * (v101 & 0x7F)
                                                + 24);
            if (v102)
            {
              std::__shared_weak_count::__release_shared[abi:nn180100](v102);
              unint64_t v101 = v228;
            }
            uint64_t v103 = *((void *)&v228 + 1) - 1;
            unint64_t v104 = v101 + 1;
            unsigned long long v228 = __PAIR128__(*((unint64_t *)&v228 + 1), v104) + __PAIR128__(-1, 0);
            if (v104 >= 0x100)
            {
              operator delete(**((void ***)&v226 + 1));
              unint64_t v104 = v228 - 128;
              *((void *)&v226 + 1) += 8;
              *(void *)&unsigned long long v228 = v228 - 128;
              uint64_t v103 = *((void *)&v228 + 1);
            }
            unint64_t v105 = v187;
            if (v103)
            {
              uint64_t v106 = *(void *)(*((void *)&v226 + 1) + ((v104 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v104 & 0x7F);
              uint64_t v96 = *(void *)v106;
              uint64_t v185 = *(unsigned int *)(v106 + 8);
              long long v107 = *(std::__shared_weak_count **)(v106 + 24);
              if (v107)
              {
                atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v108 = v96;
                std::__shared_weak_count::__release_shared[abi:nn180100](v107);
                unint64_t v105 = v187;
                uint64_t v96 = v108;
              }
              if (v105)
              {
LABEL_198:
                uint64_t v177 = v96;
                unint64_t v109 = v105;
                uint64_t v110 = v182;
                unint64_t v111 = v105;
LABEL_201:
                std::__shared_weak_count::__release_shared[abi:nn180100](v109);
                long long v97 = v111;
                uint64_t v186 = v110;
                uint64_t v93 = v189;
                uint64_t v96 = v177;
                goto LABEL_204;
              }
            }
            else
            {
              uint64_t v185 = 0;
              uint64_t v96 = -1;
              if (v187) {
                goto LABEL_198;
              }
            }
            long long v97 = 0;
            uint64_t v186 = v182;
LABEL_204:
            int64x2_t v184 = v97;
            if (v93)
            {
              if (v55)
              {
                if (v201 >= v94)
                {
                  unint64_t v178 = v96;
                  unint64_t v193 = v94;
                  uint64_t v113 = v93;
                  do
                  {
                    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v55 + 48), 1uLL);
                    if (add < *(void *)(v55 + 56))
                    {
                      uint64_t v115 = WORD1(v217);
                      uint64_t v116 = *(void *)(v55 + 64);
                      uint64_t v117 = (unint64_t *)(v116 + 32 * WORD1(v217));
                      unint64_t v118 = *v117;
                      unint64_t v119 = v117[1];
                      if (*v117 != -1 && v118 >= v119)
                      {
                        if (*(unsigned char *)(a1 + 32)) {
                          NSLog(@"uscRayCollector is full (%llu/%llu)", *v117, v119);
                        }
                      }
                      else
                      {
                        unint64_t *v117 = v118 + 1;
                        if (v118 < v119)
                        {
                          uint64_t v121 = *(void *)(v116 + 32 * v115 + 24) + 12 * v118;
                          uint64_t v122 = *v89;
                          *(_DWORD *)(v121 + 8) = *((_DWORD *)v89 + 2);
                          *(void *)uint64_t v121 = v122;
                        }
                      }
                    }
                    unint64_t v123 = *(void *)(v55 + 56);
                    if (add == v123 - 1)
                    {
                      v209.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
                      v209.__owns_ = 1;
                      std::mutex::lock(v188);
                      std::condition_variable::notify_one((std::condition_variable *)v55);
                      std::unique_lock<std::mutex>::unlock(&v209);
                      if (v209.__owns_) {
                        std::mutex::unlock(v209.__m_);
                      }
                    }
                    else if (add >= v123 && *(unsigned char *)(a1 + 32))
                    {
                      NSLog(@"ray collector is over-filled (%llu/%llu) on usc %hu with worker %zu. Current encoder is %u. Next encoder is %u.", add, v123, WORD1(v217), a2, v186, v185);
                    }
                    --v113;
                  }
                  while (v113);
                  unint64_t v181 = v193;
                  unsigned int v182 = v185;
                  unint64_t v94 = v178;
                  uint64_t v98 = v190;
                }
                else
                {
                  uint64_t v98 = v190;
                  if (WORD1(v217) || !*(unsigned char *)(a1 + 32))
                  {
                    unint64_t v181 = v94;
                    unsigned int v182 = v185;
                    unint64_t v94 = v96;
                  }
                  else
                  {
                    uint64_t v167 = v93;
                    unint64_t v130 = v96;
                    NSLog(@"%d hasn't started yet - ignoring %llu rays", v186, v167);
                    unint64_t v181 = v94;
                    unsigned int v182 = v185;
                    unint64_t v94 = v130;
                  }
                }
                goto LABEL_234;
              }
              uint64_t v112 = v186;
              unsigned int v182 = v185;
              unint64_t v181 = v94;
              uint64_t v98 = v190;
LABEL_211:
              if (WORD1(v217) || !*(unsigned char *)(a1 + 32))
              {
                uint64_t v55 = 0;
                unint64_t v94 = v96;
              }
              else
              {
                unint64_t v94 = v96;
                NSLog(@"No collector for %llu rays", v189);
                uint64_t v55 = 0;
              }
              uint64_t v186 = v112;
LABEL_234:
              *v180 += v189;
              *unint64_t v89 = 0;
              *uint64_t v91 = 0;
              goto LABEL_235;
            }
            unint64_t v181 = v94;
            unsigned int v182 = v185;
            unint64_t v94 = v96;
            uint64_t v98 = v190;
LABEL_235:
            if (v98) {
              *v179 += v98;
            }
            unint64_t v192 = v94;
            if (v87 < v208 + v84)
            {
              uint64_t v124 = 4 - 8 * v84 + 8 * v87;
              do
              {
                v209.__m_ = 0;
                if (v87 >= v84)
                {
                  uint64_t v125 = *(void *)(v207 - 8 * v84 + 8 * v87);
                  uint64_t v126 = *(void *)(v203 - 8 * v84 + 8 * v87);
                  if ((agxps_aps_profile_data_get_usc_timestamps(v200, &v209, *(unsigned int *)(v202 + v124), 1) & 1) == 0
                    && *(unsigned char *)(a1 + 32))
                  {
                    NSLog(@"Unable to get counter timestamp");
                  }
                  unint64_t m = (unint64_t)v209.__m_;
                }
                else
                {
                  uint64_t v125 = *(void *)(v198 + 8 * v87);
                  uint64_t v126 = *(void *)(v195 + 98368 + 8 * v87);
                  unint64_t m = *(void *)(v195 + 8 * v87 + 64);
                  v209.__m_ = (std::unique_lock<std::mutex>::mutex_type *)m;
                }
                unint64_t v128 = *(unsigned int *)(a1 + 812);
                if (!m)
                {
                  unint64_t m = (*v92 + v128) % 0xFFFFF;
                  v209.__m_ = (std::unique_lock<std::mutex>::mutex_type *)m;
                  if (*(unsigned char *)(a1 + 32))
                  {
                    NSLog(@"patching missing counter usc timestamp");
                    unint64_t v128 = *(unsigned int *)(a1 + 812);
                    unint64_t m = (unint64_t)v209.__m_;
                  }
                }
                BOOL v33 = v201 >= v128;
                unint64_t v129 = v201 - v128;
                if (!v33) {
                  unint64_t v129 = 0;
                }
                if (m >= v129) {
                  break;
                }
                *(_DWORD *)v89 += v125;
                *v91 += v126;
                unint64_t *v92 = m;
                ++v87;
                v124 += 8;
              }
              while (v87 < v208 + v84);
            }
            uint64_t v86 = v191 + 1;
            if (v191 + 1 >= v214)
            {
              unint64_t v81 = v208;
              LODWORD(v38) = v173;
              uint64_t v83 = v169;
              goto LABEL_259;
            }
          }
          unint64_t v109 = v184;
          if (!v184)
          {
            int64x2_t v184 = 0;
            uint64_t v112 = 0;
            unsigned int v182 = 0;
            unint64_t v181 = 0;
            uint64_t v186 = 0;
            uint64_t v55 = 0;
            uint64_t v96 = -1;
            unint64_t v94 = -1;
            uint64_t v98 = v190;
            if (!v189) {
              goto LABEL_235;
            }
            goto LABEL_211;
          }
          unint64_t v111 = 0;
          uint64_t v55 = 0;
          uint64_t v110 = 0;
          uint64_t v185 = 0;
          unint64_t v94 = 0;
          uint64_t v177 = -1;
          goto LABEL_201;
        }
        unint64_t v87 = 0;
LABEL_259:
        *unint64_t v171 = v186;
        *uint64_t v170 = v181;
        unint64_t v131 = v81 + v84 - v87;
        if (v81 + v84 <= v87)
        {
          *uint64_t v83 = 0;
        }
        else
        {
          *uint64_t v83 = v131;
          unint64_t v132 = v84 - v87;
          if (v131 <= v81)
          {
            uint64_t v140 = 0;
            uint64_t v141 = v175 + 131200 * v38;
            uint64_t v142 = v141 + 65600;
            unint64_t v143 = (void *)(v141 + 64);
            unsigned int v144 = v38;
            if (v131 <= 1) {
              uint64_t v145 = 1;
            }
            else {
              uint64_t v145 = v81 + v84 - v87;
            }
            uint64_t v146 = v175 + 131200 * v144 + 98368;
            unint64_t v147 = v87 - v81 - v84;
            do
            {
              unint64_t v148 = v147 + v140 + v208;
              *(void *)(v142 + 8 * v140) = *(void *)(v207 + 8 * v148);
              *(void *)(v146 + 8 * v140) = *(void *)(v203 + 8 * (v147 + v140 + v204));
              agxps_aps_profile_data_get_usc_timestamps(v200, v143, *(unsigned int *)(v202 + 8 * v148 + 4), 1);
              ++v140;
              ++v143;
            }
            while (v145 != v140);
          }
          else
          {
            uint64_t v133 = 0;
            uint64_t v134 = 8 * v87 + 131200 * v38;
            uint64_t v135 = v175 + v134;
            uint64_t v136 = v175 + 98368 + v134;
            uint64_t v137 = v175 + v134 + 65600;
            do
            {
              *(void *)(v175 + 131200 * v38 + 65600 + 8 * v133) = *(void *)(v137 + 8 * v133);
              *(void *)(v175 + 98368 + 131200 * v38 + 8 * v133) = *(void *)(v136 + 8 * v133);
              *(void *)(v175 + 131200 * v38 + 8 * v133 + 64) = *(void *)(v135 + 8 * v133 + 64);
              ++v133;
            }
            while (v132 != v133);
            if (v132 < v131)
            {
              uint64_t v138 = v175 + 8 * v84 + 131200 * v173 - 8 * v87;
              uint64_t v139 = 4;
              do
              {
                *(void *)(v138 + 65600 + v139 - 4) = *(void *)(v207 + v139 - 4);
                *(void *)(v138 + 98368 + v139 - 4) = *(void *)(v203 + v139 - 4);
                agxps_aps_profile_data_get_usc_timestamps(v200, (void *)(v138 + v139 + 60), *(unsigned int *)(v202 + v139), 1);
                v139 += 8;
                --v81;
              }
              while (v81);
            }
          }
        }
        if (v215.__owns_) {
          std::mutex::unlock(v215.__m_);
        }
        simd_float4 v149 = (void **)*((void *)&v226 + 1);
        unint64_t v150 = (void **)v227;
        LODWORD(v38) = v173;
        if ((void)v227 == *((void *)&v226 + 1))
        {
          unint64_t v150 = (void **)*((void *)&v226 + 1);
        }
        else
        {
          uint64_t v151 = (uint64_t *)(*((void *)&v226 + 1) + 8 * ((unint64_t)v228 >> 7));
          uint64_t v152 = *v151;
          uint64_t v153 = *v151 + 32 * (v228 & 0x7F);
          uint64_t v154 = *(void *)(*((void *)&v226 + 1)
                           + (((*((void *)&v228 + 1) + (void)v228) >> 4) & 0xFFFFFFFFFFFFFF8))
               + 32 * ((*((void *)&v228 + 1) + v228) & 0x7F);
          if (v153 != v154)
          {
            do
            {
              uint64_t v155 = *(std::__shared_weak_count **)(v153 + 24);
              if (v155)
              {
                std::__shared_weak_count::__release_shared[abi:nn180100](v155);
                uint64_t v152 = *v151;
              }
              v153 += 32;
              if (v153 - v152 == 4096)
              {
                uint64_t v156 = v151[1];
                ++v151;
                uint64_t v152 = v156;
                uint64_t v153 = v156;
              }
            }
            while (v153 != v154);
            simd_float4 v149 = (void **)*((void *)&v226 + 1);
            unint64_t v150 = (void **)v227;
          }
        }
        *((void *)&v228 + 1) = 0;
        unint64_t v157 = (char *)v150 - (char *)v149;
        uint64_t v39 = v175;
        if ((unint64_t)((char *)v150 - (char *)v149) >= 0x11)
        {
          do
          {
            operator delete(*v149);
            unint64_t v150 = (void **)v227;
            simd_float4 v149 = (void **)(*((void *)&v226 + 1) + 8);
            *((void *)&v226 + 1) = v149;
            unint64_t v157 = v227 - (void)v149;
          }
          while ((void)v227 - (void)v149 > 0x10uLL);
        }
        unint64_t v158 = v157 >> 3;
        if (v158 == 1)
        {
          uint64_t v159 = 64;
        }
        else
        {
          if (v158 != 2) {
            goto LABEL_291;
          }
          uint64_t v159 = 128;
        }
        *(void *)&unsigned long long v228 = v159;
LABEL_291:
        if (v149 != v150)
        {
          do
          {
            uint64_t v160 = *v149++;
            operator delete(v160);
          }
          while (v149 != v150);
          if ((void)v227 != *((void *)&v226 + 1)) {
            *(void *)&long long v227 = v227 + ((*((void *)&v226 + 1) - v227 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v226) {
          operator delete((void *)v226);
        }
        uint64_t v45 = (void *)(a1 + 504);
        if (v184) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v184);
        }
        goto LABEL_299;
      }
      break;
    }
    std::mutex::unlock((std::mutex *)(*(void *)(a1 + 552) + (v28 << 6)));
  }
LABEL_313:
  if (*((void *)&v220 + 1))
  {
    unint64_t v165 = v220;
    do
    {
      free(*(void **)(*(void *)(*((void *)&v219[0] + 1) + ((v165 >> 4) & 0xFFFFFFFFFFFFFF8))
                    + 32 * (v165 & 0x7F)
                    + 16));
      uint64_t v166 = *((void *)&v220 + 1) - 1;
      unint64_t v165 = v220 + 1;
      unsigned long long v220 = __PAIR128__(*((unint64_t *)&v220 + 1), (uint64_t)v220 + 1) + __PAIR128__(-1, 0);
      if (v165 >= 0x100)
      {
        operator delete(**((void ***)&v219[0] + 1));
        unint64_t v165 = v220 - 128;
        *((void *)&v219[0] + 1) += 8;
        *(void *)&unsigned long long v220 = v220 - 128;
        uint64_t v166 = *((void *)&v220 + 1);
      }
    }
    while (v166);
  }
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Parser worker is finished");
  }
  std::deque<AccelerationStructureViewerServer::APSRawChunk>::~deque[abi:nn180100]((uint64_t)v219);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::deque<std::pair<unsigned long long,std::pair<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>>>::push_back();
  }
}

__n128 std::deque<std::pair<unsigned long long,std::pair<unsigned int,std::shared_ptr<AccelerationStructureViewerServer::APSRayCollector>>>>::push_back(void *a1, __n128 *a2)
{
  id v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      uint64_t v12 = *(void *)v5;
      CFStringRef v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          unint64_t v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v41);
          BOOL v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          id v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            id v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            unsigned int v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)unsigned int v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          unsigned int v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            id v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          uint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            uint64_t v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            uint64_t v22 = (char *)a1[1];
          }
          id v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)id v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    unint64_t v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      unint64_t v27 = operator new(0x1000uLL);
      uint64_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            BOOL v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)BOOL v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          id v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        uint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v99 = 1;
            }
            else {
              unint64_t v99 = (uint64_t)&v63[-*a1] >> 2;
            }
            uint64_t v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v99);
            uint64_t v102 = &v100[8 * (v99 >> 2)];
            uint64_t v103 = (uint64_t *)a1[1];
            uint64_t v63 = v102;
            uint64_t v104 = a1[2] - (void)v103;
            if (v104)
            {
              uint64_t v63 = &v102[v104 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v105 = 8 * (v104 >> 3);
              uint64_t v106 = &v100[8 * (v99 >> 2)];
              do
              {
                uint64_t v107 = *v103++;
                *(void *)uint64_t v106 = v107;
                v106 += 8;
                v105 -= 8;
              }
              while (v105);
            }
            uint64_t v108 = (char *)*a1;
            *a1 = v100;
            a1[1] = v102;
            a1[2] = v63;
            a1[3] = &v100[8 * v101];
            if (v108)
            {
              operator delete(v108);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            BOOL v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)id v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v29);
    uint64_t v32 = v31;
    BOOL v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v112 = v34;
    *(void *)&long long v34 = v33;
    *((void *)&v34 + 1) = &v30[8 * v31];
    long long v109 = v34;
    uint64_t v35 = operator new(0x1000uLL);
    if (v23 == v32)
    {
      uint64_t v36 = 8 * v23;
      if (v6 >= 1)
      {
        uint64_t v37 = v36 >> 3;
        if (v37 >= -1) {
          unint64_t v38 = v37 + 1;
        }
        else {
          unint64_t v38 = v37 + 2;
        }
        v33 -= 8 * (v38 >> 1);
        *((void *)&v39 + 1) = *((void *)&v109 + 1);
        *(void *)&long long v40 = v112;
        *(void *)&long long v39 = v33;
        *((void *)&v40 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v36 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      uint64_t v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v74);
      BOOL v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v40 = v75;
      *((void *)&v40 + 1) = v33;
      *(void *)&long long v39 = v33;
      *((void *)&v39 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v109 = v39;
      long long v112 = v40;
      operator delete(v30);
    }
    long long v39 = v109;
    long long v40 = v112;
LABEL_56:
    *(void *)BOOL v33 = v35;
    *(void *)&long long v39 = v39 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v78 = (void *)*((void *)&v40 + 1);
      if (*((void *)&v40 + 1) == (void)v40)
      {
        uint64_t v80 = (unsigned char *)v39;
        if ((unint64_t)v39 >= *((void *)&v39 + 1))
        {
          if (*((void *)&v39 + 1) == *((void *)&v40 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v39 + 1) - *((void *)&v40 + 1)) >> 2;
          }
          uint64_t v86 = 2 * v85;
          unint64_t v87 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v85);
          uint64_t v79 = &v87[(v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v89 = v79;
          uint64_t v90 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            unint64_t v89 = &v79[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            uint64_t v92 = v79;
            uint64_t v93 = v78;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)uint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v40 = v87;
          *((void *)&v40 + 1) = v79;
          *(void *)&long long v39 = v89;
          *((void *)&v39 + 1) = &v87[8 * v88];
          if (v78)
          {
            long long v110 = v39;
            long long v114 = v40;
            operator delete(v78);
            long long v39 = v110;
            long long v40 = v114;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v39 + 1) - v39) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v39 + 8 * (v82 >> 1);
          uint64_t v79 = (char *)(v84 - (v39 - *((void *)&v40 + 1)));
          if ((void)v39 == *((void *)&v40 + 1))
          {
            uint64_t v80 = (unsigned char *)*((void *)&v40 + 1);
          }
          else
          {
            uint64_t v111 = *((void *)&v39 + 1);
            uint64_t v113 = v40;
            memmove((void *)(v84 - (v39 - *((void *)&v40 + 1))), *((const void **)&v40 + 1), v39 - *((void *)&v40 + 1));
            *((void *)&v39 + 1) = v111;
            *(void *)&long long v40 = v113;
          }
          *((void *)&v40 + 1) = v79;
          *(void *)&long long v39 = &v80[8 * v83];
        }
      }
      else
      {
        uint64_t v79 = (char *)*((void *)&v40 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v79 - 1) = v95;
      *((void *)&v40 + 1) -= 8;
    }
    uint64_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v40;
    *((_OWORD *)a1 + 1) = v39;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  long long v97 = (__n128 *)(*(void *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  v97->n128_u64[0] = a2->n128_u64[0];
  v97->n128_u32[2] = a2->n128_u32[2];
  __n128 result = a2[1];
  v97[1] = result;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  ++a1[5];
  return result;
}

__n128 std::deque<AccelerationStructureViewerServer::APSRawChunk>::push_back(void *a1, uint64_t a2)
{
  id v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      uint64_t v12 = *(void *)v5;
      CFStringRef v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          unint64_t v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v41);
          BOOL v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          id v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            id v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            unsigned int v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)unsigned int v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          unsigned int v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            id v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          uint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            uint64_t v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            uint64_t v22 = (char *)a1[1];
          }
          id v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)id v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    unint64_t v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      unint64_t v27 = operator new(0x1000uLL);
      uint64_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            BOOL v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)BOOL v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          id v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        uint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = (uint64_t)&v63[-*a1] >> 2;
            }
            uint64_t v101 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v100);
            uint64_t v103 = &v101[8 * (v100 >> 2)];
            uint64_t v104 = (uint64_t *)a1[1];
            uint64_t v63 = v103;
            uint64_t v105 = a1[2] - (void)v104;
            if (v105)
            {
              uint64_t v63 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v106 = 8 * (v105 >> 3);
              uint64_t v107 = &v101[8 * (v100 >> 2)];
              do
              {
                uint64_t v108 = *v104++;
                *(void *)uint64_t v107 = v108;
                v107 += 8;
                v106 -= 8;
              }
              while (v106);
            }
            long long v109 = (char *)*a1;
            *a1 = v101;
            a1[1] = v103;
            a1[2] = v63;
            a1[3] = &v101[8 * v102];
            if (v109)
            {
              operator delete(v109);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            BOOL v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)id v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v29);
    uint64_t v32 = v31;
    BOOL v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v113 = v34;
    *(void *)&long long v34 = v33;
    *((void *)&v34 + 1) = &v30[8 * v31];
    long long v110 = v34;
    uint64_t v35 = operator new(0x1000uLL);
    if (v23 == v32)
    {
      uint64_t v36 = 8 * v23;
      if (v6 >= 1)
      {
        uint64_t v37 = v36 >> 3;
        if (v37 >= -1) {
          unint64_t v38 = v37 + 1;
        }
        else {
          unint64_t v38 = v37 + 2;
        }
        v33 -= 8 * (v38 >> 1);
        *((void *)&v39 + 1) = *((void *)&v110 + 1);
        *(void *)&long long v40 = v113;
        *(void *)&long long v39 = v33;
        *((void *)&v40 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v36 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      uint64_t v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v74);
      BOOL v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v40 = v75;
      *((void *)&v40 + 1) = v33;
      *(void *)&long long v39 = v33;
      *((void *)&v39 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v110 = v39;
      long long v113 = v40;
      operator delete(v30);
    }
    long long v39 = v110;
    long long v40 = v113;
LABEL_56:
    *(void *)BOOL v33 = v35;
    *(void *)&long long v39 = v39 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v78 = (void *)*((void *)&v40 + 1);
      if (*((void *)&v40 + 1) == (void)v40)
      {
        uint64_t v80 = (unsigned char *)v39;
        if ((unint64_t)v39 >= *((void *)&v39 + 1))
        {
          if (*((void *)&v39 + 1) == *((void *)&v40 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v39 + 1) - *((void *)&v40 + 1)) >> 2;
          }
          uint64_t v86 = 2 * v85;
          unint64_t v87 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v85);
          uint64_t v79 = &v87[(v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v89 = v79;
          uint64_t v90 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            unint64_t v89 = &v79[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            uint64_t v92 = v79;
            uint64_t v93 = v78;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)uint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v40 = v87;
          *((void *)&v40 + 1) = v79;
          *(void *)&long long v39 = v89;
          *((void *)&v39 + 1) = &v87[8 * v88];
          if (v78)
          {
            long long v111 = v39;
            long long v115 = v40;
            operator delete(v78);
            long long v39 = v111;
            long long v40 = v115;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v39 + 1) - v39) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v39 + 8 * (v82 >> 1);
          uint64_t v79 = (char *)(v84 - (v39 - *((void *)&v40 + 1)));
          if ((void)v39 == *((void *)&v40 + 1))
          {
            uint64_t v80 = (unsigned char *)*((void *)&v40 + 1);
          }
          else
          {
            uint64_t v112 = *((void *)&v39 + 1);
            uint64_t v114 = v40;
            memmove((void *)(v84 - (v39 - *((void *)&v40 + 1))), *((const void **)&v40 + 1), v39 - *((void *)&v40 + 1));
            *((void *)&v39 + 1) = v112;
            *(void *)&long long v40 = v114;
          }
          *((void *)&v40 + 1) = v79;
          *(void *)&long long v39 = &v80[8 * v83];
        }
      }
      else
      {
        uint64_t v79 = (char *)*((void *)&v40 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v79 - 1) = v95;
      *((void *)&v40 + 1) -= 8;
    }
    uint64_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v40;
    *((_OWORD *)a1 + 1) = v39;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  long long v97 = (_OWORD *)(*(void *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v99 = *(_OWORD *)(a2 + 16);
  *long long v97 = *(_OWORD *)a2;
  v97[1] = v99;
  ++a1[5];
  return result;
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_0>>(uint64_t a1)
{
  uint64_t v5 = a1;
  int64x2_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  AccelerationStructureViewerServer::Profiler::accumulationWorker(*(void *)(a1 + 8), *(void **)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_0>,std::default_delete<AccelerationStructureViewerServer::Profiler::initAPSStreaming(objc_object  {objcproto9MTLDevice}*)::$_0>>::~unique_ptr[abi:nn180100](&v5);
  return 0;
}

void AccelerationStructureViewerServer::Profiler::accumulationWorker(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  v47.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 320);
  v47.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 320));
  id v33 = [*(id *)(a1 + 760) copy];
  std::unique_lock<std::mutex>::unlock(&v47);
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Started accumulation worker %d -> %d", a3, a4, v33);
  }
  if (*(unsigned char *)(a1 + 432))
  {
    uint64_t v34 = a3;
    id v35 = v7;
    int v37 = a4;
    uint64_t v38 = a4;
    int v36 = a3;
    do
    {
      if (![v7 isEnabled]) {
        break;
      }
      BOOL v8 = a3 >= a4;
      uint64_t v9 = v38;
      if (!v8)
      {
        uint64_t v10 = v34;
        while (([v7 isEnabled] & 1) != 0)
        {
          uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 296) + 4 * v10);
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          unsigned int v44 = 0;
          if ([v7 ringBufferInfoAtIndex:v11 base:&v46 size:(char *)&v45 + 4 dataOffset:&v45 dataSize:&v44])
          {
            if (v44 && v46)
            {
              unsigned int v40 = v11;
              unint64_t v12 = 0;
              if (v45 + v44 <= HIDWORD(v45))
              {
                do
                {
                  v43.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 440);
                  v43.__owns_ = 1;
                  std::mutex::lock((std::mutex *)(a1 + 440));
                  uint64_t v25 = *(void *)(a1 + 544);
                  if (!v25)
                  {
                    long long v41 = 0u;
                    *(_OWORD *)__dst = 0u;
                    __dst[0] = malloc_type_malloc(0x1000uLL, 0x2CB59ADEuLL);
                    std::deque<AccelerationStructureViewerServer::APSRawChunk>::push_back((void *)(a1 + 504), (uint64_t)&v41);
                    uint64_t v25 = *(void *)(a1 + 544);
                  }
                  unint64_t v26 = *(void *)(a1 + 536);
                  unint64_t v27 = (long long *)(*(void *)(*(void *)(a1 + 512) + ((v26 >> 4) & 0xFFFFFFFFFFFFFF8))
                                   + 32 * (v26 & 0x7F));
                  long long v28 = v27[1];
                  long long v41 = *v27;
                  *(_OWORD *)__dst = v28;
                  *(void *)(a1 + 544) = v25 - 1;
                  *(void *)(a1 + 536) = v26 + 1;
                  std::deque<AccelerationStructureViewerServer::APSRawChunk>::__maybe_remove_front_spare[abi:nn180100](a1 + 504);
                  std::unique_lock<std::mutex>::unlock(&v43);
                  if (v44 - v12 >= 0x1000) {
                    size_t v29 = 4096;
                  }
                  else {
                    size_t v29 = v44 - v12;
                  }
                  memcpy(__dst[0], (const void *)(v46 + v45 + v12), v29);
                  __dst[1] = (void *)v29;
                  WORD1(v41) = v10;
                  uint64_t v30 = *(void *)(a1 + 600) + 131200 * (unsigned __int16)v10;
                  LOBYTE(v41) = *(unsigned char *)(v30 + 32);
                  *((void *)&v41 + 1) = atomic_fetch_add((atomic_ullong *volatile)(v30 + 40), 1uLL);
                  *(unsigned char *)(*(void *)(a1 + 600) + 131200 * (unsigned __int16)v10 + 32) = 0;
                  std::mutex::lock((std::mutex *)(*(void *)(a1 + 552) + ((unint64_t)(unsigned __int16)v10 << 6)));
                  std::deque<AccelerationStructureViewerServer::APSRawChunk>::push_back((void *)(*(void *)(a1 + 576) + 48 * (unsigned __int16)v10), (uint64_t)&v41);
                  std::mutex::unlock((std::mutex *)(*(void *)(a1 + 552)
                                                  + ((unint64_t)(unsigned __int16)v10 << 6)));
                  if (v43.__owns_) {
                    std::mutex::unlock(v43.__m_);
                  }
                  v12 += v29;
                  unsigned int v23 = v44;
                }
                while (v12 < v44);
              }
              else
              {
                unint64_t v13 = (HIDWORD(v45) - v45);
                uint64_t v39 = v44 - v13;
                do
                {
                  v43.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 440);
                  v43.__owns_ = 1;
                  std::mutex::lock((std::mutex *)(a1 + 440));
                  uint64_t v14 = *(void *)(a1 + 544);
                  if (!v14)
                  {
                    long long v41 = 0u;
                    *(_OWORD *)__dst = 0u;
                    __dst[0] = malloc_type_malloc(0x1000uLL, 0xCEB5AC8EuLL);
                    std::deque<AccelerationStructureViewerServer::APSRawChunk>::push_back((void *)(a1 + 504), (uint64_t)&v41);
                    uint64_t v14 = *(void *)(a1 + 544);
                  }
                  unint64_t v15 = *(void *)(a1 + 536);
                  uint64_t v16 = (long long *)(*(void *)(*(void *)(a1 + 512) + ((v15 >> 4) & 0xFFFFFFFFFFFFFF8))
                                   + 32 * (v15 & 0x7F));
                  long long v17 = v16[1];
                  long long v41 = *v16;
                  *(_OWORD *)__dst = v17;
                  *(void *)(a1 + 544) = v14 - 1;
                  *(void *)(a1 + 536) = v15 + 1;
                  std::deque<AccelerationStructureViewerServer::APSRawChunk>::__maybe_remove_front_spare[abi:nn180100](a1 + 504);
                  std::unique_lock<std::mutex>::unlock(&v43);
                  WORD1(v41) = v10;
                  uint64_t v18 = *(void *)(a1 + 600) + 131200 * (unsigned __int16)v10;
                  LOBYTE(v41) = *(unsigned char *)(v18 + 32);
                  *((void *)&v41 + 1) = atomic_fetch_add((atomic_ullong *volatile)(v18 + 40), 1uLL);
                  __dst[1] = 0;
                  if (v13 <= v12)
                  {
                    size_t v19 = 0;
                  }
                  else
                  {
                    if (v13 - v12 >= 0x1000) {
                      size_t v19 = 4096;
                    }
                    else {
                      size_t v19 = v13 - v12;
                    }
                    memcpy(__dst[0], (const void *)(v46 + v45 + v12), v19);
                    v12 += v19;
                    __dst[1] = (void *)v19;
                  }
                  uint64_t v20 = v12 - v13;
                  if (v12 >= v13)
                  {
                    if (4096 - v19 >= v39 - v20) {
                      size_t v21 = v39 - v20;
                    }
                    else {
                      size_t v21 = 4096 - v19;
                    }
                    memcpy((char *)__dst[0] + v19, (const void *)(v46 + v20), v21);
                    v12 += v21;
                    __dst[1] = (void *)(v19 + v21);
                  }
                  uint64_t v22 = WORD1(v41);
                  *(unsigned char *)(*(void *)(a1 + 600) + 131200 * WORD1(v41) + 32) = 0;
                  std::mutex::lock((std::mutex *)(*(void *)(a1 + 552) + (v22 << 6)));
                  std::deque<AccelerationStructureViewerServer::APSRawChunk>::push_back((void *)(*(void *)(a1 + 576) + 48 * v22), (uint64_t)&v41);
                  std::mutex::unlock((std::mutex *)(*(void *)(a1 + 552) + (v22 << 6)));
                  if (v43.__owns_) {
                    std::mutex::unlock(v43.__m_);
                  }
                  unsigned int v23 = v44;
                }
                while (v12 < v44);
                id v7 = v35;
              }
              uint64_t v9 = v38;
              if (v23)
              {
                unsigned int v31 = 0;
                while (1)
                {
                  unsigned int v32 = [v7 drainRingBufferAtIndex:v40 dataSize:v23 - v31];
                  if (!v32) {
                    break;
                  }
                  v31 += v32;
                  unsigned int v23 = v44;
                  if (v31 >= v44) {
                    goto LABEL_48;
                  }
                }
                if (*(unsigned char *)(a1 + 32)) {
                  NSLog(@"Nothing drained on USC %d. Expected %d", v10, v44 - v31);
                }
              }
            }
            else
            {
              usleep(0x64u);
            }
          }
          else
          {
            unint64_t v24 = [v7 name];
            NSLog(@"Fail, unable to retrieve ring buffer info from source %@!", v24);
          }
LABEL_48:
          if (++v10 == v9) {
            goto LABEL_51;
          }
        }
        NSLog(@"Source is not enabled");
      }
LABEL_51:
      LODWORD(a3) = v36;
      LODWORD(a4) = v37;
    }
    while (*(unsigned char *)(a1 + 432));
  }
  if (*(unsigned char *)(a1 + 32)) {
    NSLog(@"Accumulation worker is finished");
  }

  if (v47.__owns_) {
    std::mutex::unlock(v47.__m_);
  }
}

void AccelerationStructureViewerServer::Profiler::finishSkipFrame(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 globalTraceObjectID];
  v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
  v7.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 624));
  id v4 = (void *)(a1 + 688);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v4, v3);
  if (v5) {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v4, v5);
  }
  std::unique_lock<std::mutex>::unlock(&v7);
  if (v7.__owns_)
  {
    unint64_t m = v7.__m_;
    std::mutex::unlock(m);
  }
}

void std::vector<AccelerationStructureViewerServer::APSUSCRayCollector>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = (id *)**a1;
  if (v2)
  {
    id v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 4;

        id v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<AccelerationStructureViewerServer::APSRayCollector>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (std::condition_variable *)(a1 + 24);
  int64x2_t v2 = (void **)(a1 + 88);
  std::vector<AccelerationStructureViewerServer::APSUSCRayCollector>::__destroy_vector::operator()[abi:nn180100](&v2);

  std::condition_variable::~condition_variable(v1);
}

void std::__shared_ptr_emplace<AccelerationStructureViewerServer::APSRayCollector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_7475D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<AccelerationStructureViewerServer::APSRayCollector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_7475D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 __Block_byref_object_copy__10450(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__10451(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void ___ZN33AccelerationStructureViewerServer8Profiler11finishFrameEPU26objcproto15MTLCommandQueue11objc_objectPU35objcproto24MTLComputeCommandEncoder11objc_objectmP18ASVSRenderSettingsPN27AccelerationStructureViewer6SampleE_block_invoke(uint64_t a1)
{
  int64x2_t v2 = dispatch_get_global_queue(0, 0);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = ___ZN33AccelerationStructureViewerServer8Profiler11finishFrameEPU26objcproto15MTLCommandQueue11objc_objectPU35objcproto24MTLComputeCommandEncoder11objc_objectmP18ASVSRenderSettingsPN27AccelerationStructureViewer6SampleE_block_invoke_2;
  v3[3] = &unk_747578;
  long long v4 = *(_OWORD *)(a1 + 32);
  dispatch_async(v2, v3);
}

void ___ZN33AccelerationStructureViewerServer8Profiler11finishFrameEPU26objcproto15MTLCommandQueue11objc_objectPU35objcproto24MTLComputeCommandEncoder11objc_objectmP18ASVSRenderSettingsPN27AccelerationStructureViewer6SampleE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 40);
  std::mutex::lock((std::mutex *)(v2 + 136));
  int v3 = *(_DWORD *)(v2 + 8);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v120 = v1;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 48) + 64) + 32 * v4;
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v6 = (id *)(v5 + 16);
      if (v7)
      {
        BOOL v8 = *(char **)(v2 + 208);
        uint64_t v9 = *(char **)(v2 + 216);
        uint64_t v10 = v9 - v8;
        if (v9 == v8) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = ((v9 - v8) << 6) - 1;
        }
        unint64_t v12 = *(void *)(v2 + 232);
        if (v11 == *(void *)(v2 + 240) + v12)
        {
          BOOL v13 = v12 >= 0x200;
          unint64_t v14 = v12 - 512;
          if (v13)
          {
            *(void *)(v2 + 232) = v14;
            uint64_t v17 = *(void *)v8;
            unint64_t v15 = v8 + 8;
            uint64_t v16 = v17;
            *(void *)(v2 + 208) = v15;
            if (v9 == *(char **)(v2 + 224))
            {
              unint64_t v18 = *(void *)(v2 + 200);
              uint64_t v19 = (uint64_t)&v15[-v18];
              if ((unint64_t)v15 <= v18)
              {
                uint64_t v45 = (uint64_t)&v9[-v18];
                BOOL v44 = v45 == 0;
                uint64_t v46 = v45 >> 2;
                if (v44) {
                  unint64_t v47 = 1;
                }
                else {
                  unint64_t v47 = v46;
                }
                unsigned int v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v47);
                unsigned int v50 = &v48[8 * (v47 >> 2)];
                unint64_t v51 = *(uint64_t **)(v2 + 208);
                uint64_t v9 = v50;
                uint64_t v52 = *(void *)(v2 + 216) - (void)v51;
                if (v52)
                {
                  uint64_t v9 = &v50[v52 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v53 = 8 * (v52 >> 3);
                  uint64_t v54 = &v48[8 * (v47 >> 2)];
                  do
                  {
                    uint64_t v55 = *v51++;
                    *(void *)uint64_t v54 = v55;
                    v54 += 8;
                    v53 -= 8;
                  }
                  while (v53);
                }
                uint64_t v56 = *(void **)(v2 + 200);
                *(void *)(v2 + 200) = v48;
                *(void *)(v2 + 208) = v50;
                *(void *)(v2 + 216) = v9;
                *(void *)(v2 + 224) = &v48[8 * v49];
                if (v56)
                {
                  operator delete(v56);
                  uint64_t v9 = *(char **)(v2 + 216);
                }
              }
              else
              {
                uint64_t v20 = v19 >> 3;
                BOOL v21 = v19 >> 3 < -1;
                uint64_t v22 = (v19 >> 3) + 2;
                if (v21) {
                  uint64_t v23 = v22;
                }
                else {
                  uint64_t v23 = v20 + 1;
                }
                unint64_t v24 = &v15[-8 * (v23 >> 1)];
                int64_t v25 = v9 - v15;
                if (v9 != v15)
                {
                  memmove(&v15[-8 * (v23 >> 1)], v15, v9 - v15);
                  uint64_t v9 = *(char **)(v2 + 208);
                }
                unint64_t v26 = &v9[-8 * (v23 >> 1)];
                uint64_t v9 = &v24[v25];
                *(void *)(v2 + 208) = v26;
                *(void *)(v2 + 216) = &v24[v25];
              }
            }
            *(void *)uint64_t v9 = v16;
            uint64_t v9 = (char *)(*(void *)(v2 + 216) + 8);
            *(void *)(v2 + 216) = v9;
          }
          else
          {
            uint64_t v27 = v10 >> 3;
            long long v28 = *(char **)(v2 + 224);
            size_t v29 = *(char **)(v2 + 200);
            if (v10 >> 3 >= (unint64_t)((v28 - v29) >> 3))
            {
              if (v28 == v29) {
                unint64_t v32 = 1;
              }
              else {
                unint64_t v32 = (v28 - v29) >> 2;
              }
              id v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v32);
              uint64_t v35 = v34;
              int v36 = &v33[8 * v27];
              *(void *)&long long v37 = v33;
              *((void *)&v37 + 1) = v36;
              long long v125 = v37;
              *(void *)&long long v37 = v36;
              *((void *)&v37 + 1) = &v33[8 * v34];
              long long v121 = v37;
              uint64_t v38 = operator new(0x1000uLL);
              if (v27 == v35)
              {
                uint64_t v39 = 8 * v27;
                if (v10 < 1)
                {
                  uint64_t v78 = v38;
                  uint64_t v79 = v39 >> 2;
                  if (v9 == v8) {
                    unint64_t v80 = 1;
                  }
                  else {
                    unint64_t v80 = v79;
                  }
                  uint64_t v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v80);
                  int v36 = &v81[8 * (v80 >> 2)];
                  *(void *)&long long v43 = v81;
                  *((void *)&v43 + 1) = v36;
                  *(void *)&long long v42 = v36;
                  *((void *)&v42 + 1) = &v81[8 * v82];
                  if (v33)
                  {
                    long long v122 = v42;
                    long long v126 = v43;
                    operator delete(v33);
                    long long v42 = v122;
                    long long v43 = v126;
                  }
                  uint64_t v38 = v78;
                }
                else
                {
                  uint64_t v40 = v39 >> 3;
                  if (v40 >= -1) {
                    unint64_t v41 = v40 + 1;
                  }
                  else {
                    unint64_t v41 = v40 + 2;
                  }
                  v36 -= 8 * (v41 >> 1);
                  *((void *)&v42 + 1) = *((void *)&v121 + 1);
                  *(void *)&long long v43 = v125;
                  *(void *)&long long v42 = v36;
                  *((void *)&v43 + 1) = v36;
                }
              }
              else
              {
                long long v42 = v121;
                long long v43 = v125;
              }
              *(void *)int v36 = v38;
              *(void *)&long long v42 = v42 + 8;
              for (uint64_t i = *(void *)(v2 + 216); i != *(void *)(v2 + 208); i -= 8)
              {
                uint64_t v84 = (void *)*((void *)&v43 + 1);
                if (*((void *)&v43 + 1) == (void)v43)
                {
                  uint64_t v86 = (unsigned char *)v42;
                  if ((unint64_t)v42 >= *((void *)&v42 + 1))
                  {
                    if (*((void *)&v42 + 1) == *((void *)&v43 + 1)) {
                      unint64_t v91 = 1;
                    }
                    else {
                      unint64_t v91 = (uint64_t)(*((void *)&v42 + 1) - *((void *)&v43 + 1)) >> 2;
                    }
                    uint64_t v92 = 2 * v91;
                    uint64_t v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v91);
                    unint64_t v85 = &v93[(v92 + 6) & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v95 = v85;
                    uint64_t v96 = v86 - (unsigned char *)v84;
                    if (v86 != (unsigned char *)v84)
                    {
                      uint64_t v95 = &v85[v96 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v97 = 8 * (v96 >> 3);
                      uint64_t v98 = &v93[(v92 + 6) & 0xFFFFFFFFFFFFFFF8];
                      long long v99 = v84;
                      do
                      {
                        uint64_t v100 = *v99++;
                        *(void *)uint64_t v98 = v100;
                        v98 += 8;
                        v97 -= 8;
                      }
                      while (v97);
                    }
                    *(void *)&long long v43 = v93;
                    *((void *)&v43 + 1) = &v93[(v92 + 6) & 0xFFFFFFFFFFFFFFF8];
                    *(void *)&long long v42 = v95;
                    *((void *)&v42 + 1) = &v93[8 * v94];
                    if (v84)
                    {
                      long long v123 = v42;
                      long long v128 = v43;
                      operator delete(v84);
                      long long v42 = v123;
                      long long v43 = v128;
                    }
                  }
                  else
                  {
                    uint64_t v87 = (uint64_t)(*((void *)&v42 + 1) - v42) >> 3;
                    if (v87 >= -1) {
                      uint64_t v88 = v87 + 1;
                    }
                    else {
                      uint64_t v88 = v87 + 2;
                    }
                    uint64_t v89 = v88 >> 1;
                    uint64_t v90 = v42 + 8 * (v88 >> 1);
                    unint64_t v85 = (char *)(v90 - (v42 - *((void *)&v43 + 1)));
                    if ((void)v42 == *((void *)&v43 + 1))
                    {
                      uint64_t v86 = (unsigned char *)*((void *)&v43 + 1);
                    }
                    else
                    {
                      uint64_t v124 = *((void *)&v42 + 1);
                      uint64_t v127 = v43;
                      memmove((void *)(v90 - (v42 - *((void *)&v43 + 1))), *((const void **)&v43 + 1), v42 - *((void *)&v43 + 1));
                      *((void *)&v42 + 1) = v124;
                      *(void *)&long long v43 = v127;
                    }
                    *((void *)&v43 + 1) = v85;
                    *(void *)&long long v42 = &v86[8 * v89];
                  }
                }
                else
                {
                  unint64_t v85 = (char *)*((void *)&v43 + 1);
                }
                uint64_t v101 = *(void *)(i - 8);
                *((void *)v85 - 1) = v101;
                *((void *)&v43 + 1) -= 8;
              }
              uint64_t v102 = *(void **)(v2 + 200);
              *(_OWORD *)(v2 + 200) = v43;
              *(_OWORD *)(v2 + 216) = v42;
              if (v102)
              {
                operator delete(v102);
                uint64_t v9 = *(char **)(v2 + 216);
              }
              else
              {
                uint64_t v9 = (char *)v42;
              }
            }
            else
            {
              uint64_t v30 = operator new(0x1000uLL);
              unsigned int v31 = v30;
              if (v28 == v9)
              {
                if (v8 == v29)
                {
                  if (v9 == v8) {
                    unint64_t v57 = 1;
                  }
                  else {
                    unint64_t v57 = (v28 - v8) >> 2;
                  }
                  uint64_t v58 = 2 * v57;
                  BOOL v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v57);
                  BOOL v8 = &v59[(v58 + 6) & 0xFFFFFFFFFFFFFFF8];
                  id v61 = *(uint64_t **)(v2 + 208);
                  uint64_t v62 = v8;
                  uint64_t v63 = *(void *)(v2 + 216) - (void)v61;
                  if (v63)
                  {
                    uint64_t v62 = &v8[v63 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v64 = 8 * (v63 >> 3);
                    uint64_t v65 = &v59[(v58 + 6) & 0xFFFFFFFFFFFFFFF8];
                    do
                    {
                      uint64_t v66 = *v61++;
                      *(void *)uint64_t v65 = v66;
                      v65 += 8;
                      v64 -= 8;
                    }
                    while (v64);
                  }
                  uint64_t v67 = *(void **)(v2 + 200);
                  *(void *)(v2 + 200) = v59;
                  *(void *)(v2 + 208) = v8;
                  *(void *)(v2 + 216) = v62;
                  *(void *)(v2 + 224) = &v59[8 * v60];
                  if (v67)
                  {
                    operator delete(v67);
                    BOOL v8 = *(char **)(v2 + 208);
                  }
                }
                *((void *)v8 - 1) = v31;
                uint64_t v68 = *(char **)(v2 + 208);
                uint64_t v69 = *(char **)(v2 + 216);
                *(void *)(v2 + 208) = v68 - 8;
                uint64_t v70 = *((void *)v68 - 1);
                *(void *)(v2 + 208) = v68;
                if (v69 == *(char **)(v2 + 224))
                {
                  unint64_t v71 = *(void *)(v2 + 200);
                  uint64_t v72 = (uint64_t)&v68[-v71];
                  if ((unint64_t)v68 <= v71)
                  {
                    uint64_t v103 = (uint64_t)&v69[-v71];
                    BOOL v44 = v103 == 0;
                    uint64_t v104 = v103 >> 2;
                    if (v44) {
                      unint64_t v105 = 1;
                    }
                    else {
                      unint64_t v105 = v104;
                    }
                    uint64_t v106 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v105);
                    uint64_t v108 = &v106[8 * (v105 >> 2)];
                    long long v109 = *(uint64_t **)(v2 + 208);
                    uint64_t v69 = v108;
                    uint64_t v110 = *(void *)(v2 + 216) - (void)v109;
                    if (v110)
                    {
                      uint64_t v69 = &v108[v110 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v111 = 8 * (v110 >> 3);
                      uint64_t v112 = &v106[8 * (v105 >> 2)];
                      do
                      {
                        uint64_t v113 = *v109++;
                        *(void *)uint64_t v112 = v113;
                        v112 += 8;
                        v111 -= 8;
                      }
                      while (v111);
                    }
                    uint64_t v114 = *(void **)(v2 + 200);
                    *(void *)(v2 + 200) = v106;
                    *(void *)(v2 + 208) = v108;
                    *(void *)(v2 + 216) = v69;
                    *(void *)(v2 + 224) = &v106[8 * v107];
                    if (v114)
                    {
                      operator delete(v114);
                      uint64_t v69 = *(char **)(v2 + 216);
                    }
                  }
                  else
                  {
                    uint64_t v73 = v72 >> 3;
                    BOOL v21 = v72 >> 3 < -1;
                    uint64_t v74 = (v72 >> 3) + 2;
                    if (v21) {
                      uint64_t v75 = v74;
                    }
                    else {
                      uint64_t v75 = v73 + 1;
                    }
                    uint64_t v76 = &v68[-8 * (v75 >> 1)];
                    int64_t v77 = v69 - v68;
                    if (v69 != v68)
                    {
                      memmove(&v68[-8 * (v75 >> 1)], v68, v69 - v68);
                      uint64_t v68 = *(char **)(v2 + 208);
                    }
                    uint64_t v69 = &v76[v77];
                    *(void *)(v2 + 208) = &v68[-8 * (v75 >> 1)];
                    *(void *)(v2 + 216) = &v76[v77];
                  }
                }
                *(void *)uint64_t v69 = v70;
              }
              else
              {
                *(void *)uint64_t v9 = v30;
              }
              uint64_t v9 = (char *)(*(void *)(v2 + 216) + 8);
              *(void *)(v2 + 216) = v9;
            }
            uint64_t v1 = v120;
          }
          BOOL v8 = *(char **)(v2 + 208);
        }
        if (v9 == v8)
        {
          uint64_t v116 = 0;
        }
        else
        {
          unint64_t v115 = *(void *)(v2 + 240) + *(void *)(v2 + 232);
          uint64_t v116 = (void *)(*(void *)&v8[(v115 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v115 & 0x1FF));
        }
        *uint64_t v116 = *v6;
        ++*(void *)(v2 + 240);
        id v117 = *v6;
        id *v6 = 0;

        int v3 = *(_DWORD *)(v2 + 8);
      }
      ++v4;
    }
    while (v4 < v3);
  }
  std::mutex::unlock((std::mutex *)(v2 + 136));
  uint64_t v118 = *(void *)(*(void *)(v1 + 32) + 8);
  unint64_t v119 = *(std::__shared_weak_count **)(v118 + 56);
  *(void *)(v118 + 48) = 0;
  *(void *)(v118 + 56) = 0;
  if (v119)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v119);
  }
}

uint64_t non-virtual thunk to'AccelerationStructureViewerServer::Server::teardown(AccelerationStructureViewerServer::Server *this, Sampler *a2, NSError *a3)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    *((void *)this + 2) = 0;
    return (*(uint64_t (**)(uint64_t, char *, NSError *))(*(void *)result + 40))(result, (char *)this - 8, a3);
  }
  return result;
}

void *non-virtual thunk to'AccelerationStructureViewerServer::Server::resume(AccelerationStructureViewerServer::Server *this, Sampler *a2)
{
  return AccelerationStructureViewerServer::Server::resume((void *)this - 1, a2);
}

void *AccelerationStructureViewerServer::Server::resume(void *this, Sampler *a2)
{
  if (this[5] >= 7uLL)
  {
    uint64_t v2 = this;
    this = (void *)this[3];
    if (this)
    {
      char v3 = 12;
      return (void *)(*(uint64_t (**)(void *, void *, void, void, char *, uint64_t))(*this + 32))(this, v2, 0, 0, &v3, 1);
    }
  }
  return this;
}

void non-virtual thunk to'AccelerationStructureViewerServer::Server::pause(AccelerationStructureViewerServer::Server *this, Sampler *a2, NSError *a3)
{
  if (*((void *)this + 4) >= 7uLL) {
    AccelerationStructureViewerServer::Server::replyQueryable((uint64_t)this - 8, 11, -1, 0, a3);
  }
}

void AccelerationStructureViewerServer::Server::replyQueryable(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  if (!a4) {
    operator new();
  }
  uint64_t v10 = *(void *)(a1 + 40);
  v21[0] = off_744168;
  v21[1] = v10;
  uint64_t v22 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)a4 + 16))(a4, v21);
  uint64_t v11 = v22;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v22 == -9)
  {
    unint64_t v12 = 0;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v18, v22 + 9);
    unint64_t v12 = v18;
  }
  v13[1] = *(void *)(a1 + 40);
  v13[0] = off_7441B0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v12 + 9;
  uint64_t v17 = v11;
  (*(void (**)(uint64_t, void *))(*(void *)a4 + 16))(a4, v13);
  if (v15 || v14 != v17) {
    operator new();
  }
  char *v12 = a2;
  *(void *)(v12 + 1) = a3;
  (*(void (**)(void, uint64_t, void, void, char *, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1, 0, 0, v12, v11 + 9);
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
}

uint64_t non-virtual thunk to'AccelerationStructureViewerServer::Server::setVersion(uint64_t a1, uint64_t a2)
{
  return AccelerationStructureViewerServer::Server::setVersion(a1 - 8, a2);
}

uint64_t AccelerationStructureViewerServer::Server::setVersion(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    char v4 = 0;
    uint64_t v5 = a2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *, uint64_t))(*(void *)result + 32))(result, a1, 0, 0, &v4, 9);
  }
  return result;
}

void non-virtual thunk to'AccelerationStructureViewerServer::Server::receiveQueryRays(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
}

void AccelerationStructureViewerServer::Server::receiveQueryRays(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (*(void *)(a1 + 40) >= 0xBuLL && *(void *)(a1 + 24))
  {
    size_t v34 = 400 * a6 + 17;
    uint64_t v11 = (char *)malloc_type_malloc(v34, 0xA5CE70ADuLL);
    char *v11 = 17;
    *(_DWORD *)(v11 + 1) = a3 == 1;
    *(void *)(v11 + 5) = a4;
    uint64_t v35 = v11;
    *(_DWORD *)(v11 + 13) = a6;
    if (a6)
    {
      uint64_t v12 = 0;
      BOOL v13 = v11;
      do
      {
        uint64_t v14 = v13 + 405;
        int v15 = *(_DWORD *)(a5 + v12 + 8);
        memcpy(__dst, (const void *)(a5 + v12 + 12), sizeof(__dst));
        long long v16 = *(_OWORD *)(a5 + v12 + 352);
        long long v41 = *(_OWORD *)(a5 + v12 + 336);
        long long v42 = v16;
        long long v17 = *(_OWORD *)(a5 + v12 + 384);
        long long v43 = *(_OWORD *)(a5 + v12 + 368);
        long long v44 = v17;
        long long v18 = *(_OWORD *)(a5 + v12 + 288);
        long long v37 = *(_OWORD *)(a5 + v12 + 272);
        long long v38 = v18;
        long long v19 = *(_OWORD *)(a5 + v12 + 320);
        long long v39 = *(_OWORD *)(a5 + v12 + 304);
        long long v40 = v19;
        int v20 = *(_DWORD *)(a5 + v12 + 408);
        uint64_t v21 = *(void *)(a5 + v12 + 400);
        *(_DWORD *)(v13 + 17) = v15;
        long long v22 = *(_OWORD *)&__dst[53];
        *(_OWORD *)(v13 + 213) = *(_OWORD *)&__dst[49];
        *(_OWORD *)(v13 + 229) = v22;
        long long v23 = *(_OWORD *)&__dst[61];
        *(_OWORD *)(v13 + 245) = *(_OWORD *)&__dst[57];
        *(_OWORD *)(v13 + 261) = v23;
        long long v24 = *(_OWORD *)&__dst[37];
        *(_OWORD *)(v13 + 149) = *(_OWORD *)&__dst[33];
        *(_OWORD *)(v13 + 165) = v24;
        long long v25 = *(_OWORD *)&__dst[45];
        *(_OWORD *)(v13 + 181) = *(_OWORD *)&__dst[41];
        *(_OWORD *)(v13 + 197) = v25;
        long long v26 = *(_OWORD *)&__dst[21];
        *(_OWORD *)(v13 + 85) = *(_OWORD *)&__dst[17];
        *(_OWORD *)(v13 + 101) = v26;
        long long v27 = *(_OWORD *)&__dst[29];
        *(_OWORD *)(v13 + 117) = *(_OWORD *)&__dst[25];
        *(_OWORD *)(v13 + 133) = v27;
        long long v28 = *(_OWORD *)&__dst[5];
        *(_OWORD *)(v13 + 21) = *(_OWORD *)&__dst[1];
        *(_OWORD *)(v13 + 37) = v28;
        long long v29 = *(_OWORD *)&__dst[13];
        *(_OWORD *)(v13 + 53) = *(_OWORD *)&__dst[9];
        *(_OWORD *)(v13 + 69) = v29;
        long long v30 = v42;
        *(_OWORD *)(v13 + 341) = v41;
        *(_OWORD *)(v13 + 357) = v30;
        long long v31 = v44;
        *(_OWORD *)(v13 + 373) = v43;
        *(_OWORD *)(v13 + 389) = v31;
        long long v32 = v38;
        *(_OWORD *)(v13 + 277) = v37;
        *(_OWORD *)(v13 + 293) = v32;
        long long v33 = v40;
        *(_OWORD *)(v13 + 309) = v39;
        *(_OWORD *)(v13 + 325) = v33;
        *(void *)(v13 + 405) = v21;
        v12 += 416;
        v13 += 400;
        *((_DWORD *)v14 + 2) = v20;
      }
      while (416 * a6 != v12);
    }
    (*(void (**)(void, uint64_t, void, void, void *, size_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1, 0, 0, v35, v34);
    free(v35);
  }
}

void non-virtual thunk to'AccelerationStructureViewerServer::Server::receiveSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void AccelerationStructureViewerServer::Server::receiveSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 40);
  if (v7 <= 8) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = 256;
  }
  id v9 = [*(id *)(a3 + 608) width];
  uint64_t v10 = v8 - 1;
  if (*(void *)(a1 + 40) >= 6uLL) {
    uint64_t v11 = ((v8 - ((4 * (void)v9) & (v8 - 1))) & (v8 - 1)) + 4 * (void)v9;
  }
  else {
    uint64_t v11 = 4 * (void)v9;
  }
  uint64_t v12 = 16 * (void)[*(id *)(a3 + 608) width];
  uint64_t v13 = 16 * (void)[*(id *)(a3 + 624) width];
  uint64_t v14 = 16 * (void)[*(id *)(a3 + 632) width];
  uint64_t v15 = 4 * (void)[*(id *)(a3 + 640) width];
  unint64_t v16 = (unint64_t)[*(id *)(a3 + 648) width];
  unint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = ((v8 - (v14 & v10)) & v10) + v14;
  uint64_t v19 = ((v8 - (v15 & v10)) & v10) + v15;
  int v20 = (char *)(((v8 - (v16 & v10)) & v10) + v16);
  if (v17 >= 9)
  {
    uint64_t v21 = ((v8 - (v13 & v10)) & v10) + v13;
  }
  else
  {
    int v20 = (char *)v16;
    uint64_t v19 = v15;
    uint64_t v18 = v14;
    uint64_t v21 = v13;
  }
  if (v17 >= 9) {
    uint64_t v22 = ((v8 - (v12 & v10)) & v10) + v12;
  }
  else {
    uint64_t v22 = v12;
  }
  if (!v17 || !*(void *)(a1 + 24)) {
    goto LABEL_31;
  }
  if (v17 >= 3)
  {
    uint64_t v113 = v22;
    if (v17 <= 0xA)
    {
      if (v17 != 10)
      {
        if (v17 <= 7)
        {
          char v24 = 0;
          char v23 = 0;
          if (v17 <= 4) {
            unint64_t v37 = 172;
          }
          else {
            unint64_t v37 = 176;
          }
        }
        else
        {
          char v24 = 0;
          char v23 = 0;
          unint64_t v37 = 177;
        }
LABEL_42:
        uint64_t v105 = v21;
        uint64_t v106 = v19;
        uint64_t v107 = v20;
        uint64_t v102 = v18;
        int v3 = *(_DWORD *)(a3 + 4);
        uint64_t v49 = *(void **)(a3 + 608);
        if (v49)
        {
          unsigned __int8 v50 = v8 - (v37 & (v8 - 1));
          uint64_t v44 = v37 + v50;
          unint64_t v37 = v44 + (void)[v49 height] * v11;
          LOBYTE(v15) = 1;
        }
        else
        {
          unsigned __int8 v50 = 0;
          LOBYTE(v15) = 0;
          uint64_t v44 = 0;
        }
        uint64_t v103 = v11;
        unint64_t v51 = *(void **)(a3 + 616);
        if (v51)
        {
          LOBYTE(v15) = v15 | 2;
          unsigned __int8 v52 = v8 - (v37 & (v8 - 1));
          unint64_t v114 = v37 + v52;
          unint64_t v37 = v114 + (void)[v51 height] * v113;
        }
        else
        {
          unsigned __int8 v52 = 0;
          unint64_t v114 = 0;
        }
        unint64_t v53 = *(void *)(a1 + 40);
        unsigned __int8 v110 = v52;
        unsigned __int8 v111 = v50;
        if (v53 < 0xB)
        {
          unint64_t v57 = *(void **)(a3 + 624);
          if (v57)
          {
            id v58 = [v57 height];
            LOBYTE(v15) = v15 | 4;
            unsigned __int8 v59 = v8 - (v37 & (v8 - 1));
            unint64_t v112 = v37 + v59;
            unint64_t v37 = v112 + (void)v58 * v105;
            unint64_t v53 = *(void *)(a1 + 40);
          }
          else
          {
            unsigned __int8 v59 = 0;
            unint64_t v112 = 0;
          }
          unsigned __int8 v109 = v59;
          if (v53 >= 8 && (id v61 = *(void **)(a3 + 632)) != 0)
          {
            id v62 = [v61 height];
            unint64_t v100 = 0;
            unint64_t v101 = 0;
            LOBYTE(v15) = v15 | 8;
            unsigned __int8 v63 = v8 - (v37 & (v8 - 1));
            unint64_t v97 = v37 + v63;
            unint64_t v37 = v97 + (void)v62 * v102;
            unsigned __int8 v108 = v63;
          }
          else
          {
            unsigned __int8 v108 = 0;
            unint64_t v100 = 0;
            unint64_t v101 = 0;
            unint64_t v97 = 0;
          }
        }
        else
        {
          uint64_t v54 = *(void **)(a3 + 640);
          if (v54)
          {
            id v55 = [v54 height];
            LOBYTE(v15) = v15 | 4;
            unsigned __int8 v56 = v8 - (v37 & (v8 - 1));
            unint64_t v100 = v37 + v56;
            unint64_t v37 = v100 + (void)v55 * v106;
          }
          else
          {
            unsigned __int8 v56 = 0;
            unint64_t v100 = 0;
          }
          unsigned __int8 v109 = v56;
          uint64_t v60 = *(void **)(a3 + 648);
          if (v60)
          {
            unint64_t v97 = 0;
            unint64_t v112 = 0;
            LOBYTE(v15) = v15 | 8;
            unsigned __int8 v108 = v8 - (v37 & (v8 - 1));
            unint64_t v101 = v37 + v108;
            unint64_t v37 = v101 + (void)[v60 height] * (void)v107;
          }
          else
          {
            unsigned __int8 v108 = 0;
            unint64_t v101 = 0;
            unint64_t v97 = 0;
            unint64_t v112 = 0;
          }
        }
        goto LABEL_62;
      }
      char v24 = 0;
      char v23 = 0;
      unint64_t v37 = 180;
    }
    else
    {
      if (*(unsigned __int8 *)(a3 + 16) >= 7u) {
        char v23 = 0;
      }
      else {
        char v23 = *(unsigned char *)(a3 + 16);
      }
      if (*(unsigned __int8 *)(a3 + 17) >= 7u) {
        char v24 = 0;
      }
      else {
        char v24 = *(unsigned char *)(a3 + 17);
      }
      int v93 = *(_DWORD *)(a3 + 24);
      long long v25 = *(_OWORD *)(a3 + 240);
      long long v334 = *(_OWORD *)(a3 + 224);
      long long v335 = v25;
      long long v26 = *(_OWORD *)(a3 + 272);
      long long v336 = *(_OWORD *)(a3 + 256);
      long long v337 = v26;
      long long v27 = *(_OWORD *)(a3 + 176);
      long long v330 = *(_OWORD *)(a3 + 160);
      long long v331 = v27;
      long long v28 = *(_OWORD *)(a3 + 208);
      long long v332 = *(_OWORD *)(a3 + 192);
      long long v333 = v28;
      long long v29 = *(_OWORD *)(a3 + 112);
      long long v326 = *(_OWORD *)(a3 + 96);
      long long v327 = v29;
      long long v30 = *(_OWORD *)(a3 + 144);
      long long v328 = *(_OWORD *)(a3 + 128);
      long long v329 = v30;
      long long v31 = *(_OWORD *)(a3 + 48);
      long long v322 = *(_OWORD *)(a3 + 32);
      long long v323 = v31;
      long long v32 = *(_OWORD *)(a3 + 80);
      long long v324 = *(_OWORD *)(a3 + 64);
      long long v325 = v32;
      long long v33 = *(_OWORD *)(a3 + 368);
      long long v318 = *(_OWORD *)(a3 + 352);
      long long v319 = v33;
      long long v34 = *(_OWORD *)(a3 + 400);
      long long v320 = *(_OWORD *)(a3 + 384);
      long long v321 = v34;
      long long v35 = *(_OWORD *)(a3 + 304);
      long long v314 = *(_OWORD *)(a3 + 288);
      long long v315 = v35;
      long long v36 = *(_OWORD *)(a3 + 336);
      long long v316 = *(_OWORD *)(a3 + 320);
      long long v317 = v36;
      uint64_t v4 = *(void *)(a3 + 416);
      unint64_t v37 = 582;
      int v94 = *(_DWORD *)(a3 + 424);
    }
    __int16 v98 = *(_WORD *)(a3 + 434);
    char v99 = *(unsigned char *)(a3 + 1);
    goto LABEL_42;
  }
  long long v38 = *(void **)(a3 + 608);
  if (!v38 || !*(void *)(a3 + 616) || !*(void *)(a3 + 624))
  {
LABEL_31:
    unsigned int v48 = *(void (**)(void))(**(void **)(a1 + 32) + 88);
    v48();
    return;
  }
  uint64_t v106 = v19;
  uint64_t v107 = v20;
  uint64_t v102 = v18;
  uint64_t v103 = v11;
  uint64_t v39 = (void)[v38 height] * v11;
  uint64_t v113 = v22;
  uint64_t v40 = (void)[*(id *)(a3 + 616) height] * v22;
  id v41 = [*(id *)(a3 + 624) height];
  unint64_t v100 = 0;
  unint64_t v101 = 0;
  unint64_t v97 = 0;
  uint64_t v42 = v8 - (v39 & v10);
  uint64_t v43 = v8 - (v40 & v10);
  if (v7 <= 8) {
    uint64_t v44 = 192;
  }
  else {
    uint64_t v44 = 256;
  }
  uint64_t v45 = v39 + v44;
  char v23 = 0;
  unint64_t v46 = v45 + v42;
  uint64_t v47 = v40 + v43;
  char v24 = 0;
  unint64_t v114 = v46;
  unint64_t v112 = v46 + v47;
  uint64_t v105 = v21;
  unint64_t v37 = v46 + v47 + (void)v41 * v21;
  unsigned __int8 v108 = v46 + v47;
  unsigned __int8 v109 = v46 + v47;
  unsigned __int8 v110 = v46 + v47;
  unsigned __int8 v111 = v46 + v47;
LABEL_62:
  uint64_t v127 = 0;
  long long v128 = &v127;
  uint64_t v129 = 0x3032000000;
  unint64_t v130 = __Block_byref_object_copy__10484;
  unint64_t v131 = __Block_byref_object_dispose__10485;
  unint64_t v132 = *(id *)(a1 + 80);
  dispatch_semaphore_wait(v132, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v64 = 0;
  while (1)
  {
    uint64_t v65 = a1 + 8 * v64;
    if (!dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v65 + 88), 0)) {
      break;
    }
    if (++v64 == 4)
    {
      dispatch_semaphore_signal((dispatch_semaphore_t)v128[5]);
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 32) + 88))(*(void *)(a1 + 32), *(void *)(a3 + 8), 1);
      goto LABEL_84;
    }
  }
  char v96 = v23;
  uint64_t v104 = v44;
  uint64_t v67 = *(void **)(v65 + 120);
  uint64_t v66 = (id *)(v65 + 120);
  id v68 = v67;
  uint64_t v69 = v68;
  char v95 = v24;
  if (!v68 || (unint64_t)[v68 length] < v37)
  {
    id v70 = [*(id *)(a1 + 48) newBufferWithLength:v37 options:0];

    objc_storeStrong(v66, v70);
    uint64_t v69 = v70;
  }
  unint64_t v71 = [*(id *)(a1 + 56) commandBufferWithDescriptor:*(void *)(a1 + 64)];
  [v71 setLabel:@"ASVServer"];
  uint64_t v72 = [v71 blitCommandEncoder];
  uint64_t v73 = *(void **)(a3 + 608);
  if (v73)
  {
    memset(v126, 0, sizeof(v126));
    id v74 = [v73 width];
    id v75 = [*(id *)(a3 + 608) height];
    v125[0] = v74;
    v125[1] = v75;
    v125[2] = 1;
    [v72 copyFromTexture:v73 sourceSlice:0 sourceLevel:0 sourceOrigin:v126 sourceSize:v125 toBuffer:v69 destinationOffset:v104 destinationBytesPerRow:v103 destinationBytesPerImage:[*(id *)(a3 + 608) height] * v103];
  }
  uint64_t v76 = *(void **)(a3 + 616);
  if (v76)
  {
    memset(v124, 0, sizeof(v124));
    id v77 = [v76 width];
    id v78 = [*(id *)(a3 + 616) height];
    v123[0] = v77;
    v123[1] = v78;
    v123[2] = 1;
    [v72 copyFromTexture:v76 sourceSlice:0 sourceLevel:0 sourceOrigin:v124 sourceSize:v123 toBuffer:v69 destinationOffset:v114 destinationBytesPerRow:v113 destinationBytesPerImage:[*(id *)(a3 + 616) height] * v113];
  }
  unint64_t v79 = *(void *)(a1 + 40);
  if (v79 < 0xB)
  {
    uint64_t v86 = *(void **)(a3 + 624);
    if (v86)
    {
      memset(v118, 0, sizeof(v118));
      id v87 = [v86 width];
      id v88 = [*(id *)(a3 + 624) height];
      v117[0] = v87;
      v117[1] = v88;
      v117[2] = 1;
      [v72 copyFromTexture:v86 sourceSlice:0 sourceLevel:0 sourceOrigin:v118 sourceSize:v117 toBuffer:v69 destinationOffset:v112 destinationBytesPerRow:v105 destinationBytesPerImage:[*(id *)(a3 + 624) height] * v105];
      unint64_t v79 = *(void *)(a1 + 40);
    }
    if (v79 >= 8)
    {
      uint64_t v89 = *(void **)(a3 + 632);
      if (v89)
      {
        memset(v116, 0, sizeof(v116));
        id v90 = [v89 width];
        id v91 = [*(id *)(a3 + 632) height];
        v115[0] = v90;
        v115[1] = v91;
        v115[2] = 1;
        [v72 copyFromTexture:v89 sourceSlice:0 sourceLevel:0 sourceOrigin:v116 sourceSize:v115 destinationOffset:v69 destinationBytesPerRow:v97 destinationBytesPerImage:[*(id *)(a3 + 632) height] * v102];
      }
    }
  }
  else
  {
    unint64_t v80 = *(void **)(a3 + 640);
    if (v80)
    {
      memset(v122, 0, sizeof(v122));
      id v81 = [v80 width];
      id v82 = [*(id *)(a3 + 640) height];
      v121[0] = v81;
      v121[1] = v82;
      v121[2] = 1;
      [v72 copyFromTexture:v80 sourceSlice:0 sourceLevel:0 sourceOrigin:v122 sourceSize:v121 toBuffer:v69 destinationOffset:v100 destinationBytesPerRow:v106 destinationBytesPerImage:[*(id *)(a3 + 640) height] * v106];
    }
    uint64_t v83 = *(void **)(a3 + 648);
    if (v83)
    {
      memset(v120, 0, sizeof(v120));
      id v84 = [v83 width];
      id v85 = [*(id *)(a3 + 648) height];
      v119[0] = v84;
      v119[1] = v85;
      v119[2] = 1;
      [v72 copyFromTexture:v83 sourceSlice:0 sourceLevel:0 sourceOrigin:v120 sourceSize:v119 toBuffer:v69 destinationOffset:v101 destinationBytesPerRow:v107 destinationBytesPerImage:[*(id *)(a3 + 648) height] * v107];
    }
  }
  [v72 endEncoding];
  v188[0] = _NSConcreteStackBlock;
  v188[1] = 3321888768;
  v188[2] = ___ZN33AccelerationStructureViewerServer6Server13receiveSampleEPN27AccelerationStructureViewer7SamplerENS1_6SampleE_block_invoke;
  v188[3] = &unk_747740;
  uint64_t v193 = a1;
  uint64_t v194 = v64;
  unint64_t v195 = v37;
  id v191 = v69;
  *(_OWORD *)&v207[15] = *(_OWORD *)((char *)v187 + 15);
  long long v205 = v185;
  long long v206 = v186;
  *(_OWORD *)uint64_t v207 = v187[0];
  long long v201 = v181;
  long long v202 = v182;
  long long v203 = v183;
  long long v204 = v184;
  long long v199 = v179;
  long long v200 = v180;
  char v208 = v15;
  unsigned __int8 v209 = v111;
  unsigned __int8 v210 = v110;
  unsigned __int8 v211 = v109;
  uint64_t v212 = v177;
  char v213 = v178;
  int v214 = v3;
  unsigned __int8 v215 = v108;
  __int16 v216 = v98;
  char v217 = v99;
  char v218 = v96;
  char v219 = v95;
  int v220 = v93;
  long long v224 = v325;
  long long v223 = v324;
  long long v222 = v323;
  long long v221 = v322;
  long long v228 = v329;
  long long v227 = v328;
  long long v226 = v327;
  long long v225 = v326;
  long long v232 = v333;
  long long v231 = v332;
  long long v230 = v331;
  long long v229 = v330;
  long long v236 = v337;
  long long v235 = v336;
  long long v234 = v335;
  long long v233 = v334;
  long long v241 = v318;
  long long v242 = v319;
  long long v243 = v320;
  long long v244 = v321;
  long long v237 = v314;
  long long v238 = v315;
  long long v239 = v316;
  long long v240 = v317;
  uint64_t v245 = v4;
  int v246 = v94;
  long long v253 = v174;
  long long v254 = v175;
  *(_OWORD *)long long v255 = v176[0];
  *(_OWORD *)&v255[15] = *(_OWORD *)((char *)v176 + 15);
  long long v249 = v170;
  long long v250 = v171;
  long long v251 = v172;
  long long v252 = v173;
  long long v247 = v168;
  long long v248 = v169;
  char v256 = v15;
  unsigned __int8 v257 = v111;
  unsigned __int8 v258 = v110;
  unsigned __int8 v259 = v109;
  uint64_t v260 = v166;
  char v261 = v167;
  int v262 = v3;
  unsigned __int8 v263 = v108;
  __int16 v264 = v98;
  char v265 = v99;
  long long v272 = v163;
  long long v273 = v164;
  *(_OWORD *)uint64_t v274 = v165[0];
  *(_OWORD *)&v274[15] = *(_OWORD *)((char *)v165 + 15);
  long long v268 = v159;
  long long v269 = v160;
  long long v270 = v161;
  long long v271 = v162;
  long long v266 = v157;
  long long v267 = v158;
  char v275 = v15;
  unsigned __int8 v276 = v111;
  unsigned __int8 v277 = v110;
  unsigned __int8 v278 = v109;
  uint64_t v279 = v155;
  char v280 = v156;
  int v281 = v3;
  unsigned __int8 v282 = v108;
  long long v289 = v152;
  long long v290 = v153;
  *(_OWORD *)uint64_t v291 = v154[0];
  *(_OWORD *)&v291[15] = *(_OWORD *)((char *)v154 + 15);
  long long v285 = v148;
  long long v286 = v149;
  long long v287 = v150;
  long long v288 = v151;
  long long v283 = v146;
  long long v284 = v147;
  char v292 = v15;
  unsigned __int8 v293 = v111;
  unsigned __int8 v294 = v110;
  unsigned __int8 v295 = v109;
  uint64_t v296 = v144;
  char v297 = v145;
  int v298 = v3;
  long long v305 = v141;
  long long v306 = v142;
  *(_OWORD *)float v307 = v143[0];
  *(_OWORD *)&v307[15] = *(_OWORD *)((char *)v143 + 15);
  long long v301 = v137;
  long long v302 = v138;
  long long v303 = v139;
  long long v304 = v140;
  long long v299 = v135;
  long long v300 = v136;
  char v308 = v15;
  unsigned __int8 v309 = v111;
  unsigned __int8 v310 = v110;
  unsigned __int8 v311 = v109;
  uint64_t v312 = v133;
  char v313 = v134;
  id v92 = v69;
  AccelerationStructureViewer::Sample::Sample(v189, (id *)a3);
  uint64_t v196 = v104;
  unint64_t v197 = v114;
  unint64_t v198 = v112;
  unint64_t v192 = &v127;
  [v71 addCompletedHandler:v188];
  [v71 commit];

  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v190);
LABEL_84:
  _Block_object_dispose(&v127, 8);
}

uint64_t __Block_byref_object_copy__10484(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10485(uint64_t a1)
{
}

void ___ZN33AccelerationStructureViewerServer6Server13receiveSampleEPN27AccelerationStructureViewer7SamplerENS1_6SampleE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 704);
  int v3 = dispatch_get_global_queue(0, 0);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3321888768;
  v24[2] = ___ZN33AccelerationStructureViewerServer6Server13receiveSampleEPN27AccelerationStructureViewer7SamplerENS1_6SampleE_block_invoke_2;
  v24[3] = &unk_747708;
  uint64_t v29 = v2;
  uint64_t v30 = *(void *)(a1 + 712);
  uint64_t v31 = *(void *)(a1 + 720);
  id v27 = *(id *)(a1 + 688);
  memcpy(v34, (const void *)(a1 + 752), sizeof(v34));
  long long v4 = *(_OWORD *)(a1 + 1478);
  long long v43 = *(_OWORD *)(a1 + 1462);
  long long v44 = v4;
  long long v45 = *(_OWORD *)(a1 + 1494);
  int v46 = *(_DWORD *)(a1 + 1510);
  long long v5 = *(_OWORD *)(a1 + 1414);
  long long v39 = *(_OWORD *)(a1 + 1398);
  long long v40 = v5;
  long long v6 = *(_OWORD *)(a1 + 1446);
  long long v41 = *(_OWORD *)(a1 + 1430);
  long long v42 = v6;
  long long v7 = *(_OWORD *)(a1 + 1350);
  long long v35 = *(_OWORD *)(a1 + 1334);
  long long v36 = v7;
  long long v8 = *(_OWORD *)(a1 + 1382);
  long long v37 = *(_OWORD *)(a1 + 1366);
  long long v38 = v8;
  long long v9 = *(_OWORD *)(a1 + 1658);
  long long v55 = *(_OWORD *)(a1 + 1642);
  long long v56 = v9;
  long long v57 = *(_OWORD *)(a1 + 1674);
  long long v10 = *(_OWORD *)(a1 + 1594);
  long long v51 = *(_OWORD *)(a1 + 1578);
  long long v52 = v10;
  long long v11 = *(_OWORD *)(a1 + 1626);
  long long v53 = *(_OWORD *)(a1 + 1610);
  long long v54 = v11;
  long long v12 = *(_OWORD *)(a1 + 1530);
  long long v47 = *(_OWORD *)(a1 + 1514);
  long long v48 = v12;
  long long v13 = *(_OWORD *)(a1 + 1562);
  long long v49 = *(_OWORD *)(a1 + 1546);
  long long v50 = v13;
  char v58 = *(unsigned char *)(a1 + 1690);
  long long v14 = *(_OWORD *)(a1 + 1835);
  long long v67 = *(_OWORD *)(a1 + 1819);
  long long v68 = v14;
  long long v69 = *(_OWORD *)(a1 + 1851);
  long long v15 = *(_OWORD *)(a1 + 1771);
  long long v63 = *(_OWORD *)(a1 + 1755);
  long long v64 = v15;
  long long v16 = *(_OWORD *)(a1 + 1803);
  long long v65 = *(_OWORD *)(a1 + 1787);
  long long v66 = v16;
  long long v17 = *(_OWORD *)(a1 + 1707);
  long long v59 = *(_OWORD *)(a1 + 1691);
  long long v60 = v17;
  long long v18 = *(_OWORD *)(a1 + 1739);
  long long v61 = *(_OWORD *)(a1 + 1723);
  long long v62 = v18;
  long long v19 = *(_OWORD *)(a1 + 2011);
  long long v78 = *(_OWORD *)(a1 + 1995);
  *(_OWORD *)unint64_t v79 = v19;
  *(_OWORD *)&v79[12] = *(_OWORD *)(a1 + 2023);
  long long v20 = *(_OWORD *)(a1 + 1947);
  long long v74 = *(_OWORD *)(a1 + 1931);
  long long v75 = v20;
  long long v21 = *(_OWORD *)(a1 + 1979);
  long long v76 = *(_OWORD *)(a1 + 1963);
  long long v77 = v21;
  long long v22 = *(_OWORD *)(a1 + 1883);
  long long v70 = *(_OWORD *)(a1 + 1867);
  long long v71 = v22;
  long long v23 = *(_OWORD *)(a1 + 1915);
  long long v72 = *(_OWORD *)(a1 + 1899);
  long long v73 = v23;
  AccelerationStructureViewer::Sample::Sample(v25, (id *)(a1 + 32));
  uint64_t v32 = *(void *)(a1 + 728);
  long long v33 = *(_OWORD *)(a1 + 736);
  uint64_t v28 = *(void *)(a1 + 696);
  dispatch_async(v3, v24);

  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v26);
}

intptr_t ___ZN33AccelerationStructureViewerServer6Server13receiveSampleEPN27AccelerationStructureViewer7SamplerENS1_6SampleE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 704);
  unint64_t v3 = *(void *)(v2 + 40);
  if (v3 < 3)
  {
    long long v7 = (char *)[*(id *)(a1 + 688) contents];
    char *v7 = 1;
    *(void *)(v7 + 1) = *(void *)(a1 + 40);
    v7[157] = *(unsigned char *)(a1 + 464);
    v7[158] = *(unsigned char *)(a1 + 466);
    *(_DWORD *)(v7 + 9) = *(_DWORD *)(a1 + 468);
    *(_DWORD *)(v7 + 141) = [*(id *)(a1 + 640) width];
    *(_DWORD *)(v7 + 145) = [*(id *)(a1 + 640) height];
    *(_DWORD *)(v7 + 149) = *(_DWORD *)(a1 + 472);
    *(_DWORD *)(v7 + 153) = *(_DWORD *)(a1 + 476);
    long long v8 = *(_OWORD *)(a1 + 496);
    long long v9 = *(_OWORD *)(a1 + 512);
    long long v10 = *(_OWORD *)(a1 + 528);
    *(_OWORD *)(v7 + 13) = *(_OWORD *)(a1 + 480);
    *(_OWORD *)(v7 + 29) = v8;
    *(_OWORD *)(v7 + 45) = v9;
    *(_OWORD *)(v7 + 61) = v10;
    long long v11 = *(_OWORD *)(a1 + 560);
    long long v12 = *(_OWORD *)(a1 + 576);
    long long v13 = *(_OWORD *)(a1 + 592);
    *(_OWORD *)(v7 + 77) = *(_OWORD *)(a1 + 544);
    *(_OWORD *)(v7 + 93) = v11;
    *(_OWORD *)(v7 + 109) = v12;
    *(_OWORD *)(v7 + 125) = v13;
    *(int64x2_t *)(v7 + 159) = vaddq_s64(*(int64x2_t *)(a1 + 728), vdupq_n_s64(0xFFFFFFFFFFFFFF49));
    *(void *)(v7 + 175) = *(void *)(a1 + 744) - 183;
    uint64_t v14 = *(void *)(v2 + 24);
    if (!v14) {
      goto LABEL_57;
    }
    long long v15 = *(void (**)(void))(*(void *)v14 + 32);
    goto LABEL_56;
  }
  uint64_t v4 = *(void *)(a1 + 712);
  long long v5 = *(_OWORD **)(v2 + 8 * v4 + 152);
  if (v3 <= 0xA)
  {
    uint64_t v16 = 177;
    uint64_t v17 = 172;
    if (v3 > 4) {
      uint64_t v17 = 176;
    }
    if (v3 <= 7) {
      uint64_t v16 = v17;
    }
    if (v3 == 10) {
      uint64_t v6 = 180;
    }
    else {
      uint64_t v6 = v16;
    }
  }
  else
  {
    uint64_t v6 = 582;
  }
  unint64_t v18 = *(void *)(a1 + 720);
  if (!v5 || *(void *)(v2 + 8 * v4 + 216) < v18)
  {
    long long v5 = malloc_type_malloc(*(void *)(a1 + 720), 0xA6CF1B3FuLL);
    uint64_t v19 = v2 + 8 * *(void *)(a1 + 712);
    *(void *)(v19 + 152) = v5;
    *(void *)(v19 + 216) = *(void *)(a1 + 720);
    uint64_t v4 = *(void *)(a1 + 712);
  }
  size_t v20 = v18 - v6;
  long long v21 = *(void **)(v2 + 8 * v4 + 184);
  if (!v21)
  {
    size_t v22 = compression_encode_scratch_buffer_size((compression_algorithm)*(_DWORD *)(v2 + 72));
    long long v21 = malloc_type_malloc(v22, 0x5BF8808CuLL);
    *(void *)(v2 + 8 * *(void *)(a1 + 712) + 184) = v21;
  }
  size_t v23 = compression_encode_buffer((uint8_t *)v5 + v6, *(void *)(a1 + 720) - v6, (const uint8_t *)[*(id *)(a1 + 688) contents] + v6, v20, v21, (compression_algorithm)*(_DWORD *)(v2 + 72));
  if (*(_DWORD *)(v2 + 72) && v23)
  {
    unint64_t v24 = *(void *)(v2 + 40);
    if (v24 >= 0xB)
    {
      memcpy(v5, (const void *)(a1 + 752), 0x246uLL);
      goto LABEL_43;
    }
    if (v24 == 10)
    {
      long long v36 = *(_OWORD *)(a1 + 1334);
      long long v37 = *(_OWORD *)(a1 + 1350);
      long long v38 = *(_OWORD *)(a1 + 1382);
      v5[2] = *(_OWORD *)(a1 + 1366);
      void v5[3] = v38;
      _OWORD *v5 = v36;
      v5[1] = v37;
      long long v39 = *(_OWORD *)(a1 + 1398);
      long long v40 = *(_OWORD *)(a1 + 1414);
      long long v41 = *(_OWORD *)(a1 + 1446);
      v5[6] = *(_OWORD *)(a1 + 1430);
      v5[7] = v41;
      void v5[4] = v39;
      v5[5] = v40;
      long long v42 = *(_OWORD *)(a1 + 1462);
      long long v43 = *(_OWORD *)(a1 + 1478);
      long long v44 = *(_OWORD *)(a1 + 1494);
      *((_DWORD *)v5 + 44) = *(_DWORD *)(a1 + 1510);
    }
    else
    {
      if (v24 < 8)
      {
        if (v24 < 5)
        {
          long long v78 = *(_OWORD *)(a1 + 1867);
          long long v79 = *(_OWORD *)(a1 + 1899);
          v5[1] = *(_OWORD *)(a1 + 1883);
          v5[2] = v79;
          _OWORD *v5 = v78;
          long long v80 = *(_OWORD *)(a1 + 1915);
          long long v81 = *(_OWORD *)(a1 + 1931);
          long long v82 = *(_OWORD *)(a1 + 1963);
          v5[5] = *(_OWORD *)(a1 + 1947);
          v5[6] = v82;
          void v5[3] = v80;
          void v5[4] = v81;
          long long v70 = *(_OWORD *)(a1 + 1979);
          long long v71 = *(_OWORD *)(a1 + 1995);
          long long v72 = *(_OWORD *)(a1 + 2011);
          *(_OWORD *)((char *)v5 + 156) = *(_OWORD *)(a1 + 2023);
        }
        else
        {
          long long v65 = *(_OWORD *)(a1 + 1691);
          long long v66 = *(_OWORD *)(a1 + 1723);
          v5[1] = *(_OWORD *)(a1 + 1707);
          v5[2] = v66;
          _OWORD *v5 = v65;
          long long v67 = *(_OWORD *)(a1 + 1739);
          long long v68 = *(_OWORD *)(a1 + 1755);
          long long v69 = *(_OWORD *)(a1 + 1787);
          v5[5] = *(_OWORD *)(a1 + 1771);
          v5[6] = v69;
          void v5[3] = v67;
          void v5[4] = v68;
          long long v70 = *(_OWORD *)(a1 + 1803);
          long long v71 = *(_OWORD *)(a1 + 1819);
          long long v72 = *(_OWORD *)(a1 + 1835);
          v5[10] = *(_OWORD *)(a1 + 1851);
        }
        id v5[8] = v71;
        v5[9] = v72;
        v5[7] = v70;
LABEL_43:
        int v83 = *(_DWORD *)(v2 + 72);
        if (v83 > 2048)
        {
          if (v83 == 2818)
          {
            char v84 = 5;
            goto LABEL_52;
          }
          if (v83 == 2049)
          {
            char v84 = 3;
            goto LABEL_52;
          }
        }
        else
        {
          if (v83 == 256)
          {
            char v84 = 2;
            goto LABEL_52;
          }
          if (v83 == 774)
          {
            char v84 = 4;
LABEL_52:
            *((unsigned char *)v5 + 163) = v84;
          }
        }
        *(void *)((char *)v5 + 164) = v20;
        goto LABEL_54;
      }
      long long v51 = *(_OWORD *)(a1 + 1514);
      long long v52 = *(_OWORD *)(a1 + 1530);
      long long v53 = *(_OWORD *)(a1 + 1562);
      v5[2] = *(_OWORD *)(a1 + 1546);
      void v5[3] = v53;
      _OWORD *v5 = v51;
      v5[1] = v52;
      long long v54 = *(_OWORD *)(a1 + 1578);
      long long v55 = *(_OWORD *)(a1 + 1594);
      long long v56 = *(_OWORD *)(a1 + 1626);
      v5[6] = *(_OWORD *)(a1 + 1610);
      v5[7] = v56;
      void v5[4] = v54;
      v5[5] = v55;
      long long v42 = *(_OWORD *)(a1 + 1642);
      long long v43 = *(_OWORD *)(a1 + 1658);
      long long v44 = *(_OWORD *)(a1 + 1674);
      *((unsigned char *)v5 + 176) = *(unsigned char *)(a1 + 1690);
    }
    v5[9] = v43;
    v5[10] = v44;
    id v5[8] = v42;
    goto LABEL_43;
  }
  long long v25 = [*(id *)(a1 + 688) contents];
  long long v5 = v25;
  unint64_t v26 = *(void *)(v2 + 40);
  if (v26 < 0xB)
  {
    if (v26 == 10)
    {
      long long v27 = *(_OWORD *)(a1 + 1334);
      long long v28 = *(_OWORD *)(a1 + 1350);
      long long v29 = *(_OWORD *)(a1 + 1382);
      v25[2] = *(_OWORD *)(a1 + 1366);
      v25[3] = v29;
      *long long v25 = v27;
      v25[1] = v28;
      long long v30 = *(_OWORD *)(a1 + 1398);
      long long v31 = *(_OWORD *)(a1 + 1414);
      long long v32 = *(_OWORD *)(a1 + 1446);
      v25[6] = *(_OWORD *)(a1 + 1430);
      v25[7] = v32;
      v25[4] = v30;
      v25[5] = v31;
      long long v33 = *(_OWORD *)(a1 + 1462);
      long long v34 = *(_OWORD *)(a1 + 1478);
      long long v35 = *(_OWORD *)(a1 + 1494);
      *((_DWORD *)v25 + 44) = *(_DWORD *)(a1 + 1510);
    }
    else
    {
      if (v26 < 8)
      {
        if (v26 < 5)
        {
          long long v73 = *(_OWORD *)(a1 + 1867);
          long long v74 = *(_OWORD *)(a1 + 1899);
          v25[1] = *(_OWORD *)(a1 + 1883);
          v25[2] = v74;
          *long long v25 = v73;
          long long v75 = *(_OWORD *)(a1 + 1915);
          long long v76 = *(_OWORD *)(a1 + 1931);
          long long v77 = *(_OWORD *)(a1 + 1963);
          v25[5] = *(_OWORD *)(a1 + 1947);
          v25[6] = v77;
          v25[3] = v75;
          v25[4] = v76;
          long long v62 = *(_OWORD *)(a1 + 1979);
          long long v63 = *(_OWORD *)(a1 + 1995);
          long long v64 = *(_OWORD *)(a1 + 2011);
          *(_OWORD *)((char *)v25 + 156) = *(_OWORD *)(a1 + 2023);
        }
        else
        {
          long long v57 = *(_OWORD *)(a1 + 1691);
          long long v58 = *(_OWORD *)(a1 + 1723);
          v25[1] = *(_OWORD *)(a1 + 1707);
          v25[2] = v58;
          *long long v25 = v57;
          long long v59 = *(_OWORD *)(a1 + 1739);
          long long v60 = *(_OWORD *)(a1 + 1755);
          long long v61 = *(_OWORD *)(a1 + 1787);
          v25[5] = *(_OWORD *)(a1 + 1771);
          v25[6] = v61;
          v25[3] = v59;
          v25[4] = v60;
          long long v62 = *(_OWORD *)(a1 + 1803);
          long long v63 = *(_OWORD *)(a1 + 1819);
          long long v64 = *(_OWORD *)(a1 + 1835);
          v25[10] = *(_OWORD *)(a1 + 1851);
        }
        v25[8] = v63;
        v25[9] = v64;
        v25[7] = v62;
        goto LABEL_40;
      }
      long long v45 = *(_OWORD *)(a1 + 1514);
      long long v46 = *(_OWORD *)(a1 + 1530);
      long long v47 = *(_OWORD *)(a1 + 1562);
      v25[2] = *(_OWORD *)(a1 + 1546);
      v25[3] = v47;
      *long long v25 = v45;
      v25[1] = v46;
      long long v48 = *(_OWORD *)(a1 + 1578);
      long long v49 = *(_OWORD *)(a1 + 1594);
      long long v50 = *(_OWORD *)(a1 + 1626);
      v25[6] = *(_OWORD *)(a1 + 1610);
      v25[7] = v50;
      v25[4] = v48;
      v25[5] = v49;
      long long v33 = *(_OWORD *)(a1 + 1642);
      long long v34 = *(_OWORD *)(a1 + 1658);
      long long v35 = *(_OWORD *)(a1 + 1674);
      *((unsigned char *)v25 + 176) = *(unsigned char *)(a1 + 1690);
    }
    v25[9] = v34;
    v25[10] = v35;
    v25[8] = v33;
  }
  else
  {
    memcpy(v25, (const void *)(a1 + 752), 0x246uLL);
  }
LABEL_40:
  *((unsigned char *)v5 + 163) = 1;
  *(void *)((char *)v5 + 164) = v20;
LABEL_54:
  *(unsigned char *)long long v5 = 1;
  *(void *)((char *)v5 + 1) = *(void *)(a1 + 40);
  *((unsigned char *)v5 + 157) = *(unsigned char *)(a1 + 464);
  *((unsigned char *)v5 + 158) = *(unsigned char *)(a1 + 466);
  *(_DWORD *)((char *)v5 + 9) = *(_DWORD *)(a1 + 468);
  *(_DWORD *)((char *)v5 + 141) = [*(id *)(a1 + 640) width];
  *(_DWORD *)((char *)v5 + 145) = [*(id *)(a1 + 640) height];
  *(_DWORD *)((char *)v5 + 149) = *(_DWORD *)(a1 + 472);
  *(_DWORD *)((char *)v5 + 153) = *(_DWORD *)(a1 + 476);
  long long v85 = *(_OWORD *)(a1 + 496);
  long long v86 = *(_OWORD *)(a1 + 512);
  long long v87 = *(_OWORD *)(a1 + 528);
  *(_OWORD *)((char *)v5 + 13) = *(_OWORD *)(a1 + 480);
  *(_OWORD *)((char *)v5 + 29) = v85;
  *(_OWORD *)((char *)v5 + 45) = v86;
  *(_OWORD *)((char *)v5 + 61) = v87;
  long long v88 = *(_OWORD *)(a1 + 560);
  long long v89 = *(_OWORD *)(a1 + 576);
  long long v90 = *(_OWORD *)(a1 + 592);
  *(_OWORD *)((char *)v5 + 77) = *(_OWORD *)(a1 + 544);
  *(_OWORD *)((char *)v5 + 93) = v88;
  *(_OWORD *)((char *)v5 + 109) = v89;
  *(_OWORD *)((char *)v5 + 125) = v90;
  uint64_t v91 = *(void *)(v2 + 24);
  if (!v91) {
    goto LABEL_57;
  }
  long long v15 = *(void (**)(void))(*(void *)v91 + 32);
LABEL_56:
  v15();
LABEL_57:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 8 * *(void *)(a1 + 712) + 88));
  id v92 = *(NSObject **)(*(void *)(*(void *)(a1 + 696) + 8) + 40);

  return dispatch_semaphore_signal(v92);
}

void non-virtual thunk to'AccelerationStructureViewerServer::Server::receiveGBVH(AccelerationStructureViewerServer::Server *this, uint64_t a2, NSData *a3, NSError *a4)
{
}

void AccelerationStructureViewerServer::Server::receiveGBVH(AccelerationStructureViewerServer::Server *this, uint64_t a2, NSData *a3, NSError *a4)
{
  long long v7 = a3;
  long long v8 = a4;
  long long v9 = v8;
  if (*((void *)this + 5) >= 0xDuLL && *((void *)this + 3))
  {
    if (v8) {
      operator new();
    }
    long long v10 = (char *)[(NSData *)v7 length] + 10;
    long long v11 = (char *)malloc_type_malloc((size_t)v10, 0x2ACE4629uLL);
    char *v11 = 20;
    *(void *)(v11 + 1) = a2;
    v11[9] = 0;
    long long v12 = v7;
    memcpy(v11 + 10, [(NSData *)v12 bytes], [(NSData *)v12 length]);
    (*(void (**)(void, AccelerationStructureViewerServer::Server *, void, void, char *, char *))(**((void **)this + 3) + 32))(*((void *)this + 3), this, 0, 0, v11, v10);
    free(v11);
  }
}

uint64_t non-virtual thunk to'AccelerationStructureViewerServer::Server::setSamplerProperties(uint64_t a1)
{
  return AccelerationStructureViewerServer::Server::setSamplerProperties(a1 - 8);
}

uint64_t AccelerationStructureViewerServer::Server::setSamplerProperties(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    unint64_t v1 = *(void *)(result + 40);
    if (v1 >= 5) {
      operator new();
    }
    if (v1 >= 2) {
      operator new();
    }
    operator new();
  }
  return result;
}

uint64_t non-virtual thunk to'AccelerationStructureViewerServer::Server::addSampler(uint64_t this, Sampler *a2)
{
  *(void *)(this + 24) = a2;
  return this;
}

void non-virtual thunk to'AccelerationStructureViewerServer::Server::~Server(AccelerationStructureViewerServer::Server *this)
{
  AccelerationStructureViewerServer::Server::~Server((AccelerationStructureViewerServer::Server *)((char *)this - 8));

  operator delete();
}

{
  AccelerationStructureViewerServer::Server::~Server((AccelerationStructureViewerServer::Server *)((char *)this - 8));
}

void AccelerationStructureViewerServer::Server::~Server(AccelerationStructureViewerServer::Server *this)
{
  *(void *)this = off_747608;
  *((void *)this + 1) = off_747698;
  *((void *)this + 3) = 0;
  uint64_t v2 = *((id *)this + 10);
  unint64_t v3 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;

  uint64_t v4 = 4;
  do
  {
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    --v4;
  }
  while (v4);
  uint64_t v5 = 4;
  do
  {
    dispatch_semaphore_signal(v2);
    --v5;
  }
  while (v5);

  uint64_t v6 = -32;
  do
  {
    long long v7 = (void *)((char *)this + v6);
    long long v8 = *(void **)((char *)this + v6 + 120);
    *(void *)((char *)this + v6 + 120) = 0;

    long long v9 = *(void **)((char *)this + v6 + 152);
    v7[19] = 0;

    free(*(void **)((char *)this + v6 + 184));
    free(*(void **)((char *)this + v6 + 216));
    v7[23] = 0;
    v7[27] = 0;
    v6 += 8;
  }
  while (v6);
  for (uint64_t i = 144; i != 112; i -= 8)

  do
  {

    i -= 8;
  }
  while (i != 80);
}

{
  uint64_t vars8;

  AccelerationStructureViewerServer::Server::~Server(this);

  operator delete();
}

uint64_t AccelerationStructureViewerServer::Server::teardown(AccelerationStructureViewerServer::Server *this, Sampler *a2, NSError *a3)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    *((void *)this + 3) = 0;
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void AccelerationStructureViewerServer::Server::pause(AccelerationStructureViewerServer::Server *this, Sampler *a2, NSError *a3)
{
  if (*((void *)this + 5) >= 7uLL) {
    AccelerationStructureViewerServer::Server::replyQueryable((uint64_t)this, 11, -1, 0, a3);
  }
}

uint64_t AccelerationStructureViewerServer::Server::addSampler(uint64_t this, Sampler *a2)
{
  *(void *)(this + 32) = a2;
  return this;
}

void AccelerationStructureViewerServer::Server::recv(AccelerationStructureViewerServer::Server *this, char *a2, uint64_t a3, uint8x8_t a4)
{
  uint64_t v5 = a2;
  switch(*a2)
  {
    case 0:
      uint64_t v7 = *((void *)this + 4);
      if (!v7) {
        return;
      }
      uint64_t v8 = 13;
      if (*(void *)(a2 + 1) < 0xDuLL) {
        uint64_t v8 = *(void *)(a2 + 1);
      }
      *((void *)this + 5) = v8;
      long long v9 = *(void (**)(void))(*(void *)v7 + 40);
      goto LABEL_56;
    case 1:
    case 13:
      return;
    case 2:
      uint64_t v10 = *((void *)this + 4);
      if (!v10) {
        return;
      }
      char v11 = a2[1];
      BOOL v12 = a2[2] != 0;
      a4.i32[0] = *(_DWORD *)(a2 + 3);
      int16x8_t v14 = (int16x8_t)vmovl_u8(a4);
      int8x8_t v13 = (int8x8_t)vceq_s16(*(int16x4_t *)v14.i8, (int16x4_t)0x1000100010001);
      *(int16x4_t *)v14.i8 = vceq_s16(*(int16x4_t *)v14.i8, (int16x4_t)0x2000200020002);
      *(int16x4_t *)v14.i8 = vsub_s16((int16x4_t)vand_s8(*(int8x8_t *)v14.i8, (int8x8_t)0x2000200020002), (int16x4_t)vbic_s8(v13, *(int8x8_t *)v14.i8));
      int v15 = a2[7];
      char v16 = v15 == 1;
      if (v15 == 2) {
        char v16 = 2;
      }
      char v17 = a2[8];
      char v18 = a2[9];
      unint64_t v19 = *((void *)this + 5);
      if (v19 < 2)
      {
        int v22 = 0;
        if (v19 == 1)
        {
          int v21 = 0;
          char v25 = 0;
          char v26 = 0;
          char v27 = 0;
          int v20 = *(_DWORD *)(a2 + 10);
LABEL_81:
          int v24 = -1;
          char v23 = 1;
          goto LABEL_95;
        }
        int v21 = 0;
        int v20 = 0;
LABEL_80:
        char v25 = 0;
        char v26 = 0;
        char v27 = 0;
        goto LABEL_81;
      }
      int v20 = *(_DWORD *)(a2 + 10);
      int v21 = *(_DWORD *)(a2 + 14);
      int v22 = 0;
      if (v19 == 2) {
        goto LABEL_80;
      }
      char v23 = a2[18];
      if (v19 < 4)
      {
        char v25 = 0;
        char v26 = 0;
        char v27 = 0;
        int v24 = -1;
      }
      else
      {
        int v24 = *(_DWORD *)(a2 + 19);
        if (v19 == 4 || (int v22 = *(_DWORD *)(a2 + 23), v19 < 8))
        {
          char v25 = 0;
          char v26 = 0;
          char v27 = 0;
        }
        else
        {
          char v25 = a2[27];
          char v87 = v16;
          char v89 = a2[1];
          if (a2[28] >= 7u) {
            char v26 = 0;
          }
          else {
            char v26 = a2[28];
          }
          if (a2[29] >= 7u) {
            char v27 = 0;
          }
          else {
            char v27 = a2[29];
          }
          int v85 = *(_DWORD *)(a2 + 30);
          int16x8_t v88 = v14;
          long long v28 = *(_OWORD *)(a2 + 370);
          long long v153 = *(_OWORD *)(a2 + 354);
          long long v154 = v28;
          long long v29 = *(_OWORD *)(a2 + 402);
          long long v155 = *(_OWORD *)(a2 + 386);
          long long v156 = v29;
          long long v30 = *(_OWORD *)(a2 + 306);
          long long v149 = *(_OWORD *)(a2 + 290);
          long long v150 = v30;
          long long v31 = *(_OWORD *)(a2 + 338);
          long long v151 = *(_OWORD *)(a2 + 322);
          long long v152 = v31;
          uint64_t v4 = *(void *)(a2 + 418);
          int v84 = *(_DWORD *)(a2 + 426);
          *(_OWORD *)((char *)&__src[24] + 4) = *(_OWORD *)(a2 + 226);
          *(_OWORD *)((char *)&__src[26] + 4) = *(_OWORD *)(a2 + 242);
          *(_OWORD *)((char *)&__src[28] + 4) = *(_OWORD *)(a2 + 258);
          *(_OWORD *)((char *)&__src[30] + 4) = *(_OWORD *)(a2 + 274);
          *(_OWORD *)((char *)&__src[16] + 4) = *(_OWORD *)(a2 + 162);
          *(_OWORD *)((char *)&__src[18] + 4) = *(_OWORD *)(a2 + 178);
          *(_OWORD *)((char *)&__src[20] + 4) = *(_OWORD *)(a2 + 194);
          *(_OWORD *)((char *)&__src[22] + 4) = *(_OWORD *)(a2 + 210);
          *(_OWORD *)((char *)&__src[8] + 4) = *(_OWORD *)(a2 + 98);
          *(_OWORD *)((char *)&__src[10] + 4) = *(_OWORD *)(a2 + 114);
          *(_OWORD *)((char *)&__src[12] + 4) = *(_OWORD *)(a2 + 130);
          *(_OWORD *)((char *)&__src[14] + 4) = *(_OWORD *)(a2 + 146);
          *(_OWORD *)((char *)__src + 4) = *(_OWORD *)(a2 + 34);
          *(_OWORD *)((char *)&__src[2] + 4) = *(_OWORD *)(a2 + 50);
          *(_OWORD *)((char *)&__src[4] + 4) = *(_OWORD *)(a2 + 66);
          *(_OWORD *)((char *)&__src[6] + 4) = *(_OWORD *)(a2 + 82);
          BOOL v32 = v12;
          char v86 = v17;
          memcpy(__dst, __src, 0x104uLL);
          LODWORD(v19) = v85;
          char v17 = v86;
          char v16 = v87;
          int16x8_t v14 = v88;
          BOOL v12 = v32;
          LODWORD(v5) = v84;
          char v11 = v89;
        }
      }
LABEL_95:
      v117[0] = v20;
      v117[1] = v21;
      char v118 = v11;
      BOOL v119 = v12;
      unsigned __int32 v120 = vmovn_s16(v14).u32[0];
      char v121 = v16;
      char v122 = v17;
      char v123 = v18;
      char v124 = v23;
      char v125 = v25;
      char v126 = 0;
      int v127 = v24;
      int v128 = v22;
      char v129 = v26;
      char v130 = v27;
      int v131 = v19;
      memcpy(v132, __dst, sizeof(v132));
      long long v135 = v151;
      long long v136 = v152;
      long long v133 = v149;
      long long v134 = v150;
      long long v139 = v155;
      long long v140 = v156;
      long long v137 = v153;
      long long v138 = v154;
      uint64_t v141 = v4;
      int v142 = (int)v5;
      (*(void (**)(uint64_t, _DWORD *))(*(void *)v10 + 32))(v10, v117);
      return;
    case 3:
      uint64_t v33 = *((void *)this + 4);
      if (v33)
      {
        int v34 = *(_DWORD *)(a2 + 1);
        long long v35 = *(_OWORD *)(a2 + 14);
        long long v36 = *(_OWORD *)(a2 + 30);
        long long v37 = *(_OWORD *)(a2 + 46);
        long long v38 = *(_OWORD *)(a2 + 62);
        long long v39 = *(_OWORD *)(a2 + 78);
        long long v40 = *(_OWORD *)(a2 + 94);
        long long v41 = *(_OWORD *)(a2 + 110);
        long long v42 = *(_OWORD *)(a2 + 126);
        v105[0] = a2[5];
        __int16 v106 = 0;
        int v107 = v34;
        uint64_t v108 = *(void *)(a2 + 6);
        long long v109 = v35;
        long long v110 = v36;
        long long v111 = v37;
        long long v112 = v38;
        long long v113 = v39;
        long long v114 = v40;
        long long v115 = v41;
        long long v116 = v42;
        (*(void (**)(uint64_t, char *))(*(void *)v33 + 24))(v33, v105);
      }
      return;
    case 4:
      uint64_t v43 = *((void *)this + 4);
      if (v43)
      {
        long long v44 = *(void (**)(void))(*(void *)v43 + 88);
        v44();
      }
      return;
    case 7:
      operator new();
    case 9:
      if (*((void *)this + 5) < 0xDuLL) {
        goto LABEL_73;
      }
      int v50 = *(unsigned __int16 *)(a2 + 1);
      __dst[0].__locale_ = 0;
      __dst[1].__locale_ = (std::locale::__imp *)(a2 + 3);
      __dst[2].__locale_ = (std::locale::__imp *)(a3 - 3);
      LOBYTE(__dst[3].__locale_) = 0;
      LOWORD(__src[0]) = 0;
      long long v51 = (void *)AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode((uint64_t)__dst, __src);
      long long v52 = v51;
      if (LOWORD(__src[0]) == 14)
      {
        if (v51)
        {
          uint64_t v46 = *(void *)(*((void *)this + 4) + 8);
          if (v46)
          {
            uint64_t v48 = v51[3];
            uint64_t v47 = v51[4];
            __dst[0].__locale_ = (std::locale::__imp *)off_747848;
            memset(&__dst[2], 0, 24);
            LOBYTE(__dst[1].__locale_) = 0;
            uint64_t v49 = v51[5];
            if (v49)
            {
              LOBYTE(__dst[1].__locale_) = *(unsigned char *)(v49 + 8);
              if (__dst != (std::locale *)v49) {
                std::vector<AccelerationStructureViewer::FilterToken>::__assign_with_size[abi:nn180100]<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>((uint64_t *)&__dst[2], *(void *)(v49 + 16), *(void *)(v49 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v49 + 24) - *(void *)(v49 + 16)) >> 3));
              }
            }
            switch(v50)
            {
              case 0:
                v104[0] = _NSConcreteStackBlock;
                v104[1] = 3221225472;
                v104[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke;
                v104[3] = &__block_descriptor_48_e21_v24__0_v8__NSError_16l;
                v104[4] = this;
                v104[5] = v52;
                (*(void (**)(uint64_t, void *))(*(void *)v46 + 32))(v46, v104);
                break;
              case 1:
                v103[0] = _NSConcreteStackBlock;
                v103[1] = 3221225472;
                v103[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_2;
                v103[3] = &__block_descriptor_48_e390_v40__0_vector_AccelerationStructureViewer::IntersectionFunctionTable__std::allocator_AccelerationStructureViewer::IntersectionFunctionTable_____IntersectionFunctionTable___IntersectionFunctionTable____compressed_pair_AccelerationStructureViewer::IntersectionFunctionTable____std::allocator_AccelerationStructureViewer::IntersectionFunctionTable_____IntersectionFunctionTable___8__NSError_32l;
                v103[4] = this;
                v103[5] = v52;
                (*(void (**)(uint64_t, void *))(*(void *)v46 + 16))(v46, v103);
                break;
              case 2:
                v100[0] = _NSConcreteStackBlock;
                v100[1] = 3321888768;
                v100[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_3;
                v100[3] = &__block_descriptor_112_a8_72c42_ZTSN27AccelerationStructureViewer6FilterE_e390_v40__0_vector_AccelerationStructureViewer::IntersectionFunctionTable__std::allocator_AccelerationStructureViewer::IntersectionFunctionTable_____IntersectionFunctionTable___IntersectionFunctionTable____compressed_pair_AccelerationStructureViewer::IntersectionFunctionTable____std::allocator_AccelerationStructureViewer::IntersectionFunctionTable_____IntersectionFunctionTable___8__NSError_32l;
                v100[4] = this;
                v100[5] = v52;
                v100[6] = v46;
                v100[7] = v48;
                v100[8] = v47;
                AccelerationStructureViewer::Filter::Filter((AccelerationStructureViewer::Filter *)&v101, (const AccelerationStructureViewer::Filter *)__dst);
                (*(void (**)(uint64_t, void *))(*(void *)v46 + 16))(v46, v100);
                unint64_t v101 = off_747848;
                long long v76 = (void **)&v102;
                goto LABEL_89;
              case 3:
                uint64_t v77 = v52[2];
                long long v78 = v99;
                AccelerationStructureViewer::Filter::Filter((AccelerationStructureViewer::Filter *)v99, (const AccelerationStructureViewer::Filter *)__dst);
                v98[0] = _NSConcreteStackBlock;
                v98[1] = 3221225472;
                v98[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_31;
                v98[3] = &__block_descriptor_48_e21_v24__0_v8__NSError_16l;
                v98[4] = this;
                v98[5] = v52;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)v46 + 72))(v46, v77, v48, v47, v99, v98);
                v99[0] = off_747848;
                goto LABEL_87;
              case 4:
                uint64_t v79 = v52[2];
                long long v78 = v97;
                AccelerationStructureViewer::Filter::Filter((AccelerationStructureViewer::Filter *)v97, (const AccelerationStructureViewer::Filter *)__dst);
                v96[0] = _NSConcreteStackBlock;
                v96[1] = 3221225472;
                v96[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_2_32;
                v96[3] = &__block_descriptor_48_e21_v24__0_v8__NSError_16l;
                v96[4] = this;
                v96[5] = v52;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)v46 + 40))(v46, v79, v48, v47, v97, v96);
                v97[0] = off_747848;
                goto LABEL_87;
              case 5:
                uint64_t v80 = v52[2];
                long long v78 = v91;
                AccelerationStructureViewer::Filter::Filter((AccelerationStructureViewer::Filter *)v91, (const AccelerationStructureViewer::Filter *)__dst);
                v90[0] = _NSConcreteStackBlock;
                v90[1] = 3221225472;
                v90[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_5;
                v90[3] = &__block_descriptor_48_e21_v24__0_v8__NSError_16l;
                v90[4] = this;
                v90[5] = v52;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)v46 + 64))(v46, v80, v48, v47, v91, v90);
                v91[0] = off_747848;
LABEL_87:
                long long v76 = (void **)(v78 + 2);
                goto LABEL_89;
              case 6:
                uint64_t v81 = v52[2];
                uint64_t v82 = v52[6];
                AccelerationStructureViewer::Filter::Filter((AccelerationStructureViewer::Filter *)v94, (const AccelerationStructureViewer::Filter *)__dst);
                v93[0] = _NSConcreteStackBlock;
                v93[1] = 3221225472;
                v93[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_3_33;
                v93[3] = &__block_descriptor_48_e21_v24__0_v8__NSError_16l;
                v93[4] = this;
                v93[5] = v52;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)v46 + 48))(v46, v81, v82, v48, v47, v94, v93);
                v94[0] = off_747848;
                long long v76 = (void **)&v95;
LABEL_89:
                __src[0] = v76;
                std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100](__src);
                break;
              case 7:
                uint64_t v83 = v52[2];
                v92[0] = _NSConcreteStackBlock;
                v92[1] = 3221225472;
                v92[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_4_34;
                v92[3] = &__block_descriptor_48_e28_v24__0__NSData_8__NSError_16l;
                v92[4] = this;
                v92[5] = v52;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v46 + 56))(v46, v83, v48, v47, v92);
                break;
              default:
                break;
            }
            __dst[0].__locale_ = (std::locale::__imp *)off_747848;
            __src[0] = (void **)&__dst[2].__locale_;
            std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100](__src);
          }
          else
          {
            uint64_t v73 = v51[1];
            long long v74 = +[ASVError errorWithCode:5 localizedDescription:@"id<MTLAccelerationStructure> is missing"];
            AccelerationStructureViewerServer::Server::replyQueryable((uint64_t)this, 8, v73, 0, v74);
          }
          (*(void (**)(void *))(*v52 + 8))(v52);
          return;
        }
      }
      else if (v51)
      {
        (*(void (**)(void *))(*v51 + 8))(v51);
      }
LABEL_73:
      long long v75 = +[ASVError errorWithCode:5 localizedDescription:@"properties is missing"];
      AccelerationStructureViewerServer::Server::replyQueryable((uint64_t)this, 8, -1, 0, v75);

      return;
    case 10:
      unint64_t v53 = a2[1];
      if (v53 > 5) {
        int v54 = 0;
      }
      else {
        int v54 = dword_4C8F94[v53];
      }
      if (v54 != *((_DWORD *)this + 18))
      {
        uint64_t v69 = 4;
        do
        {
          dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 10), 0xFFFFFFFFFFFFFFFFLL);
          --v69;
        }
        while (v69);
        *((_DWORD *)this + 18) = v54;
        long long v70 = (char *)this + 184;
        do
        {
          free(*(void **)&v70[v69]);
          *(void *)&v70[v69] = 0;
          v69 += 8;
        }
        while (v69 != 32);
        uint64_t v71 = 4;
        do
        {
          dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 10));
          --v71;
        }
        while (v71);
      }
      return;
    case 14:
      uint64_t v55 = *(void *)(a2 + 1);
      uint64_t v56 = *(void *)(a2 + 13);
      int v57 = *(_DWORD *)(a2 + 21);
      uint64_t v58 = *((void *)this + 4);
      int v144 = *(_DWORD *)(a2 + 9);
      uint64_t v143 = v55;
      int v146 = v57;
      uint64_t v145 = v56;
      uint64_t v147 = *(void *)(a2 + 25);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v58 + 72))(v58, &v143);
      return;
    case 15:
      long long v9 = *(void (**)(void))(**((void **)this + 4) + 80);
      goto LABEL_56;
    case 16:
      uint64_t v59 = *(unsigned int *)(a2 + 13);
      if (40 * v59 + 17 == a3)
      {
        if (v59)
        {
          uint64_t v60 = 48 * v59;
          long long v61 = (char *)operator new(48 * v59);
          bzero(v61, 48 * ((v60 - 48) / 0x30uLL) + 48);
          uint64_t v62 = 0;
          long long v63 = &v61[48 * ((v60 - 48) / 0x30uLL) + 48];
          long long v64 = v5 + 49;
          do
          {
            long long v65 = &v61[v62];
            long long v66 = *((_OWORD *)v64 - 1);
            *(_OWORD *)long long v65 = *((_OWORD *)v64 - 2);
            *((_OWORD *)v65 + 1) = v66;
            uint64_t v67 = *v64;
            v64 += 5;
            *((void *)v65 + 4) = v67;
            v62 += 48;
          }
          while (v60 != v62);
        }
        else
        {
          long long v63 = 0;
          long long v61 = 0;
        }
        (*(void (**)(void, BOOL, void, char *, void))(**((void **)this + 4) + 104))(*((void *)this + 4), *(_DWORD *)(v5 + 1) == 1, *(void *)(v5 + 5), v61, -1431655765 * ((unint64_t)(v63 - v61) >> 4));
        if (v61) {
          goto LABEL_76;
        }
      }
      return;
    case 18:
      size_t v68 = *(unsigned int *)(a2 + 1);
      if (v68 == -1)
      {
        long long v61 = 0;
      }
      else
      {
        long long v61 = (char *)operator new((v68 + 1));
        bzero(v61, (v68 + 1));
      }
      memcpy(v61, v5 + 5, v68);
      v61[v68] = 0;
      long long v72 = +[NSString stringWithCString:v61 encoding:30];
      (*(void (**)(void, void *))(**((void **)this + 4) + 48))(*((void *)this + 4), v72);

LABEL_76:
      operator delete(v61);
      return;
    case 19:
      long long v9 = *(void (**)(void))(**((void **)this + 4) + 56);
LABEL_56:
      v9();
      return;
    default:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((uint64_t)"ASVPacket - type '", 18);
      LOBYTE(__dst[0].__locale_) = *v5;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((uint64_t)__dst, 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((uint64_t)"' is invalid", 12);
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                  + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
      long long v45 = std::locale::use_facet(__dst, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      std::locale::~locale(__dst);
      std::ostream::put();
      std::ostream::flush();
      return;
  }
}

uint64_t std::vector<AccelerationStructureViewer::FilterToken>::__assign_with_size[abi:nn180100]<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      char v11 = (void *)*a1;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 24;
        int8x8_t v13 = (void (***)(void))(v10 - 24);
        int16x8_t v14 = (void (***)(void))(v10 - 24);
        do
        {
          int v15 = *v14;
          v14 -= 3;
          (*v15)(v13);
          v12 -= 24;
          BOOL v16 = v13 == (void (***)(void))v9;
          int8x8_t v13 = v14;
        }
        while (!v16);
        char v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= a4) {
      uint64_t v18 = a4;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v18;
    }
    std::vector<AccelerationStructureViewer::FilterToken>::__vallocate[abi:nn180100](a1, v19);
    uint64_t v20 = a1[1];
    uint64_t v21 = a2;
    goto LABEL_18;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v22 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AccelerationStructureViewer::FilterToken *,AccelerationStructureViewer::FilterToken *,AccelerationStructureViewer::FilterToken *>(a2, v22, v9);
    uint64_t v20 = a1[1];
    uint64_t v21 = v22;
LABEL_18:
    uint64_t result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>,AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(v21, a3, v20);
    a1[1] = result;
    return result;
  }
  uint64_t result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AccelerationStructureViewer::FilterToken *,AccelerationStructureViewer::FilterToken *,AccelerationStructureViewer::FilterToken *>(a2, a3, v9);
  uint64_t v24 = result;
  uint64_t v25 = a1[1];
  if (v25 != result)
  {
    uint64_t v26 = v25 - 24;
    char v27 = (uint64_t (***)(void))(v25 - 24);
    long long v28 = (uint64_t (***)(void))(v25 - 24);
    do
    {
      long long v29 = *v28;
      v28 -= 3;
      uint64_t result = (*v29)(v27);
      v26 -= 24;
      BOOL v16 = v27 == (uint64_t (***)(void))v24;
      char v27 = v28;
    }
    while (!v16);
  }
  a1[1] = v24;
  return result;
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_2(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v17 = off_7441F8;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v7 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v8 = 0;
    do
    {
      if ((unint64_t)v8 >= (unint64_t)v19)
      {
        uint64_t v9 = (uint64_t)((uint64_t)v8 - v18) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          abort();
        }
        unint64_t v10 = (uint64_t)(v19 - v18) >> 2;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((void)v19 - (void)v18 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        int8x8_t v13 = (void *)(v11 + 8 * v9);
        *int8x8_t v13 = v7;
        uint64_t v8 = v13 + 1;
        int16x8_t v14 = (char *)*((void *)&v18 + 1);
        int v15 = (char *)v18;
        if (*((void *)&v18 + 1) != (void)v18)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *--int8x8_t v13 = v16;
          }
          while (v14 != v15);
          int16x8_t v14 = (char *)v18;
        }
        *(void *)&long long v18 = v13;
        *((void *)&v18 + 1) = v8;
        *(void *)&long long v19 = v11 + 8 * v12;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *v8++ = v7;
      }
      *((void *)&v18 + 1) = v8;
      v7 += 32;
    }
    while (v7 != a2[1]);
  }
  AccelerationStructureViewerServer::Server::replyQueryable(v6, 8, *(void *)(*(void *)(a1 + 40) + 8), (uint64_t)&v17, v5);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v17);
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_3(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v5)
  {
    AccelerationStructureViewerServer::Server::replyQueryable(*(void *)(a1 + 32), 8, *(void *)(*(void *)(a1 + 40) + 8), 0, v5);
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(v8 + 16);
    while (1)
    {
      if (v7 == a2[1])
      {
        uint64_t v10 = *(void *)(v8 + 8);
        unint64_t v11 = +[NSString stringWithFormat:@"id<MTLIntersectionFunctionTable> 0x%llx does not exist", v9];
        uint64_t v12 = +[ASVError errorWithCode:6 localizedDescription:v11];
        AccelerationStructureViewerServer::Server::replyQueryable(v6, 8, v10, 0, v12);

        goto LABEL_9;
      }
      if (*(void *)(v7 + 16) == v9) {
        break;
      }
      v7 += 32;
    }
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    long long v18 = off_747848;
    char v19 = *(unsigned char *)(a1 + 80);
    memset(v20, 0, sizeof(v20));
    std::vector<AccelerationStructureViewer::FilterToken>::__init_with_size[abi:nn180100]<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(v20, *(void *)(a1 + 88), *(void *)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _OWORD v17[2] = ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_4;
    v17[3] = &__block_descriptor_48_e21_v24__0_v8__NSError_16l;
    uint64_t v16 = *(void *)(a1 + 40);
    v17[4] = v6;
    v17[5] = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void (***)(AccelerationStructureViewer::Filter *__hidden), void *))(*(void *)v13 + 24))(v13, v7, v14, v15, &v18, v17);
    long long v18 = off_747848;
    uint64_t v21 = (void **)v20;
    std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100](&v21);
  }
LABEL_9:
}

AccelerationStructureViewer::Filter *AccelerationStructureViewer::Filter::Filter(AccelerationStructureViewer::Filter *this, const AccelerationStructureViewer::Filter *a2)
{
  *(void *)this = off_747848;
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  std::vector<AccelerationStructureViewer::FilterToken>::__init_with_size[abi:nn180100]<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>((void *)this + 2, *((void *)a2 + 2), *((void *)a2 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
  return this;
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_31(uint64_t a1, uint64_t **a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v18 = off_7441F8;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v7 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *v7;
      if ((unint64_t)v8 >= (unint64_t)v20)
      {
        uint64_t v10 = (uint64_t)((uint64_t)v8 - v19) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        unint64_t v11 = (uint64_t)(v20 - v19) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if ((void)v20 - (void)v19 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (void *)(v12 + 8 * v10);
        *uint64_t v14 = v9;
        uint64_t v8 = v14 + 1;
        uint64_t v15 = (char *)*((void *)&v19 + 1);
        uint64_t v16 = (char *)v19;
        if (*((void *)&v19 + 1) != (void)v19)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *--uint64_t v14 = v17;
          }
          while (v15 != v16);
          uint64_t v15 = (char *)v19;
        }
        *(void *)&long long v19 = v14;
        *((void *)&v19 + 1) = v8;
        *(void *)&long long v20 = v12 + 8 * v13;
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *v8++ = v9;
      }
      *((void *)&v19 + 1) = v8;
      ++v7;
    }
    while (v7 != a2[1]);
  }
  AccelerationStructureViewerServer::Server::replyQueryable(v6, 8, *(void *)(*(void *)(a1 + 40) + 8), (uint64_t)&v18, v5);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v18);
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_2_32(uint64_t a1, uint64_t **a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v18 = off_7441F8;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v7 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *v7;
      if ((unint64_t)v8 >= (unint64_t)v20)
      {
        uint64_t v10 = (uint64_t)((uint64_t)v8 - v19) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        unint64_t v11 = (uint64_t)(v20 - v19) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if ((void)v20 - (void)v19 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (void *)(v12 + 8 * v10);
        *uint64_t v14 = v9;
        uint64_t v8 = v14 + 1;
        uint64_t v15 = (char *)*((void *)&v19 + 1);
        uint64_t v16 = (char *)v19;
        if (*((void *)&v19 + 1) != (void)v19)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *--uint64_t v14 = v17;
          }
          while (v15 != v16);
          uint64_t v15 = (char *)v19;
        }
        *(void *)&long long v19 = v14;
        *((void *)&v19 + 1) = v8;
        *(void *)&long long v20 = v12 + 8 * v13;
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *v8++ = v9;
      }
      *((void *)&v19 + 1) = v8;
      ++v7;
    }
    while (v7 != a2[1]);
  }
  AccelerationStructureViewerServer::Server::replyQueryable(v6, 8, *(void *)(*(void *)(a1 + 40) + 8), (uint64_t)&v18, v5);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v18);
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_3_33(uint64_t a1, uint64_t **a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v18 = off_7441F8;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v7 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *v7;
      if ((unint64_t)v8 >= (unint64_t)v20)
      {
        uint64_t v10 = (uint64_t)((uint64_t)v8 - v19) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        unint64_t v11 = (uint64_t)(v20 - v19) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if ((void)v20 - (void)v19 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (void *)(v12 + 8 * v10);
        *uint64_t v14 = v9;
        uint64_t v8 = v14 + 1;
        uint64_t v15 = (char *)*((void *)&v19 + 1);
        uint64_t v16 = (char *)v19;
        if (*((void *)&v19 + 1) != (void)v19)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *--uint64_t v14 = v17;
          }
          while (v15 != v16);
          uint64_t v15 = (char *)v19;
        }
        *(void *)&long long v19 = v14;
        *((void *)&v19 + 1) = v8;
        *(void *)&long long v20 = v12 + 8 * v13;
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *v8++ = v9;
      }
      *((void *)&v19 + 1) = v8;
      ++v7;
    }
    while (v7 != a2[1]);
  }
  AccelerationStructureViewerServer::Server::replyQueryable(v6, 8, *(void *)(*(void *)(a1 + 40) + 8), (uint64_t)&v18, v5);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v18);
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_4_34(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  memset(v14, 0, sizeof(v14));
  id v6 = a3;
  id v7 = a2;
  id v8 = [v7 length];
  if (v8 == (id)-9)
  {
    uint64_t v9 = 0;
  }
  else
  {
    std::vector<unsigned char>::__append(v14, (size_t)v8 + 9);
    uint64_t v9 = (char *)v14[0];
  }
  id v10 = v7;
  memcpy(v9 + 9, [v10 bytes], (size_t)[v10 length]);
  *uint64_t v9 = 8;
  *(void *)(v9 + 1) = v5;
  uint64_t v11 = *(void *)(v4 + 24);
  unint64_t v12 = (char *)[v10 length] + 9;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, void, void, char *, char *))(*(void *)v11 + 32);

  v13(v11, v4, 0, 0, v9, v12);

  operator delete(v9);
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_5(uint64_t a1, uint64_t **a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v18 = off_7441F8;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v7 = *a2;
  if (*a2 != a2[1])
  {
    id v8 = 0;
    do
    {
      uint64_t v9 = *v7;
      if ((unint64_t)v8 >= (unint64_t)v20)
      {
        uint64_t v10 = (uint64_t)((uint64_t)v8 - v19) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        unint64_t v11 = (uint64_t)(v20 - v19) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if ((void)v20 - (void)v19 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (void *)(v12 + 8 * v10);
        *uint64_t v14 = v9;
        id v8 = v14 + 1;
        uint64_t v15 = (char *)*((void *)&v19 + 1);
        uint64_t v16 = (char *)v19;
        if (*((void *)&v19 + 1) != (void)v19)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *--uint64_t v14 = v17;
          }
          while (v15 != v16);
          uint64_t v15 = (char *)v19;
        }
        *(void *)&long long v19 = v14;
        *((void *)&v19 + 1) = v8;
        *(void *)&long long v20 = v12 + 8 * v13;
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *v8++ = v9;
      }
      *((void *)&v19 + 1) = v8;
      ++v7;
    }
    while (v7 != a2[1]);
  }
  AccelerationStructureViewerServer::Server::replyQueryable(v6, 8, *(void *)(*(void *)(a1 + 40) + 8), (uint64_t)&v18, v5);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v18);
}

uint64_t std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2)
{
  std::ostream::sentry::sentry();
  if (v20)
  {
    uint64_t v4 = (char *)&std::cout + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0;
    uint64_t v5 = *((void *)v4 + 5);
    uint64_t v6 = a1 + a2;
    if ((*((_DWORD *)v4 + 2) & 0xB0) == 0x20) {
      uint64_t v7 = a1 + a2;
    }
    else {
      uint64_t v7 = a1;
    }
    int v8 = *((_DWORD *)v4 + 36);
    if (v8 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                  + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
      uint64_t v9 = std::locale::use_facet(&__b, &std::ctype<char>::id);
      int v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v4 + 36) = v8;
      if (!v5)
      {
LABEL_30:
        std::ios_base::clear((std::ios_base *)((char *)&std::cout + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0), *(_DWORD *)((char *)&std::cout + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0 + 32) | 5);
        return std::ostream::sentry::~sentry();
      }
    }
    else if (!v5)
    {
      goto LABEL_30;
    }
    uint64_t v10 = *((void *)v4 + 3);
    BOOL v11 = v10 <= a2;
    size_t v12 = v10 - a2;
    if (v11) {
      size_t v13 = 0;
    }
    else {
      size_t v13 = v12;
    }
    if (v7 - a1 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a1, v7 - a1) != v7 - a1)
    {
      goto LABEL_30;
    }
    if ((uint64_t)v13 >= 1)
    {
      if (v13 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v13 >= 0x17)
      {
        uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v15 = v13 | 7;
        }
        uint64_t v16 = v15 + 1;
        p_b = (std::locale::__imp *)operator new(v15 + 1);
        size_t v22 = v13;
        int64_t v23 = v16 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v23) = v13;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v8, v13);
      *((unsigned char *)p_b + v13) = 0;
      uint64_t v17 = v23 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v5 + 96))(v5, v17, v13);
      if (SHIBYTE(v23) < 0) {
        operator delete(__b.__locale_);
      }
      if (v18 != v13) {
        goto LABEL_30;
      }
    }
    if (v6 - v7 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 96))(v5, v7, v6 - v7) != v6 - v7)
    {
      goto LABEL_30;
    }
    *((void *)v4 + 3) = 0;
  }
  return std::ostream::sentry::~sentry();
}

void __destroy_helper_block_a8_72c42_ZTSN27AccelerationStructureViewer6FilterE(uint64_t a1)
{
  *(void *)(a1 + 72) = off_747848;
  unint64_t v1 = (void **)(a1 + 88);
  std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void *__copy_helper_block_a8_72c42_ZTSN27AccelerationStructureViewer6FilterE(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = 0;
  unint64_t v3 = (void *)(a1 + 88);
  *(v3 - 2) = off_747848;
  *((unsigned char *)v3 - 8) = v2;
  v3[1] = 0;
  v3[2] = 0;
  return std::vector<AccelerationStructureViewer::FilterToken>::__init_with_size[abi:nn180100]<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(v3, *(void *)(a2 + 88), *(void *)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
}

void ___ZN33AccelerationStructureViewerServer6Server4recvEPvm_block_invoke_4(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v17 = off_7441F8;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v7 = *a2;
  if (*a2 != a2[1])
  {
    int v8 = 0;
    do
    {
      if ((unint64_t)v8 >= (unint64_t)v19)
      {
        uint64_t v9 = (uint64_t)((uint64_t)v8 - v18) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          abort();
        }
        unint64_t v10 = (uint64_t)(v19 - v18) >> 2;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((void)v19 - (void)v18 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        size_t v13 = (void *)(v11 + 8 * v9);
        *size_t v13 = v7;
        int v8 = v13 + 1;
        uint64_t v14 = (char *)*((void *)&v18 + 1);
        uint64_t v15 = (char *)v18;
        if (*((void *)&v18 + 1) != (void)v18)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *--size_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)v18;
        }
        *(void *)&long long v18 = v13;
        *((void *)&v18 + 1) = v8;
        *(void *)&long long v19 = v11 + 8 * v12;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *v8++ = v7;
      }
      *((void *)&v18 + 1) = v8;
      v7 += 152;
    }
    while (v7 != a2[1]);
  }
  AccelerationStructureViewerServer::Server::replyQueryable(v6, 8, *(void *)(*(void *)(a1 + 40) + 8), (uint64_t)&v17, v5);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v17);
}

id *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AccelerationStructureViewer::FilterToken *,AccelerationStructureViewer::FilterToken *,AccelerationStructureViewer::FilterToken *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    id v5 = (id *)(a3 + 16);
    do
    {
      *((_DWORD *)v5 - 2) = *(_DWORD *)(v4 + 8);
      objc_storeStrong(v5, *(id *)(v4 + 16));
      v4 += 24;
      v5 += 3;
    }
    while (v4 != a2);
    return v5 - 2;
  }
  return (id *)a3;
}

void *AccelerationStructureViewerServer::Server::lost(void *this, uint64_t a2)
{
  if (!a2)
  {
    this = (void *)this[4];
    if (this) {
      return (void *)(*(uint64_t (**)(void *, void, uint64_t))(*this + 88))(this, 0, 1);
    }
  }
  return this;
}

uint64_t AccelerationStructureViewerServer::Server::connect(AccelerationStructureViewerServer::Server *this, Transport *a2)
{
  *((void *)this + 3) = a2;
  return (*((uint64_t (**)(Transport *, AccelerationStructureViewerServer::Server *))a2->var0 + 2))(a2, this);
}

uint64_t std::__function::__func<AccelerationStructureViewerServer::Intersector::Intersector(AccelerationStructureViewerServer::IntersectorType,objc_object  {objcproto9MTLDevice}*,objc_object  {objcproto10MTLLibrary}*,AccelerationStructureViewerServer::DataSource *,AccelerationStructureViewer::IntersectionFunctionTable *)::$_0,std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>,void ()(unsigned long,BOOL,objc_object  {objcproto11MTLFunction}*,AccelerationStructureViewerServer::DataSource::IntersectionFunction *)>::operator()(void *a1, uint64_t a2, unsigned __int8 *a3, id *a4, uint64_t *a5)
{
  int v6 = *a3;
  uint64_t v7 = *a5;
  id v8 = *a4;
  if (v8)
  {
    id v29 = v8;
    unint64_t v10 = *(_DWORD **)(v7 + 80);
    for (uint64_t i = *(_DWORD **)(v7 + 88); v10 != i; ++v10)
    {
      uint64_t v11 = a1[3];
      uint64_t v12 = *(char **)v11;
      size_t v13 = *(char **)(v11 + 8);
      if (*(char **)v11 == v13)
      {
        uint64_t v14 = *(char **)v11;
      }
      else
      {
        uint64_t v14 = *(char **)v11;
        while (*(_DWORD *)v14 != *v10)
        {
          v14 += 4;
          if (v14 == v13)
          {
            uint64_t v14 = *(char **)(v11 + 8);
            break;
          }
        }
      }
      if (v14 == v13)
      {
        unint64_t v15 = *(void *)(v11 + 16);
        if ((unint64_t)v13 >= v15)
        {
          uint64_t v17 = (v13 - v12) >> 2;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            abort();
          }
          uint64_t v19 = v15 - (void)v12;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v20);
            uint64_t v12 = *(char **)v11;
            size_t v13 = *(char **)(v11 + 8);
          }
          else
          {
            uint64_t v21 = 0;
          }
          size_t v22 = (_DWORD *)(v20 + 4 * v17);
          _DWORD *v22 = *v10;
          uint64_t v16 = v22 + 1;
          while (v13 != v12)
          {
            int v23 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--size_t v22 = v23;
          }
          *(void *)uint64_t v11 = v22;
          *(void *)(v11 + 8) = v16;
          *(void *)(v11 + 16) = v20 + 4 * v21;
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_DWORD *)size_t v13 = *v10;
          uint64_t v16 = v13 + 4;
        }
        *(void *)(v11 + 8) = v16;
        uint64_t i = *(_DWORD **)(v7 + 88);
      }
    }
    if (v6)
    {
      uint64_t v26 = (id *)a1[2];
      uint64_t v25 = (id **)(a1 + 2);
      uint64_t v24 = v26;
    }
    else
    {
      char v27 = (id *)a1[1];
      uint64_t v25 = (id **)(a1 + 1);
      uint64_t v24 = v27;
    }
    if (([*v24 containsObject:v29] & 1) == 0) {
      [**v25 addObject:v29];
    }
  }

  return _objc_release_x2();
}

__n128 std::__function::__func<AccelerationStructureViewerServer::Intersector::Intersector(AccelerationStructureViewerServer::IntersectorType,objc_object  {objcproto9MTLDevice}*,objc_object  {objcproto10MTLLibrary}*,AccelerationStructureViewerServer::DataSource *,AccelerationStructureViewer::IntersectionFunctionTable *)::$_0,std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>,void ()(unsigned long,BOOL,objc_object  {objcproto11MTLFunction}*,AccelerationStructureViewerServer::DataSource::IntersectionFunction *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_747880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AccelerationStructureViewerServer::Intersector::Intersector(AccelerationStructureViewerServer::IntersectorType,objc_object  {objcproto9MTLDevice}*,objc_object  {objcproto10MTLLibrary}*,AccelerationStructureViewerServer::DataSource *,AccelerationStructureViewer::IntersectionFunctionTable *)::$_0,std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>,void ()(unsigned long,BOOL,objc_object  {objcproto11MTLFunction}*,AccelerationStructureViewerServer::DataSource::IntersectionFunction *)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = off_747880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AccelerationStructureViewerServer::Intersector::Intersector(AccelerationStructureViewerServer::IntersectorType,objc_object  {objcproto9MTLDevice}*,objc_object  {objcproto10MTLLibrary}*,AccelerationStructureViewerServer::DataSource *,AccelerationStructureViewer::IntersectionFunctionTable *)::$_0,std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>,void ()(unsigned long,BOOL,objc_object  {objcproto11MTLFunction}*,AccelerationStructureViewerServer::DataSource::IntersectionFunction *)>::~__func()
{
}

uint64_t std::vector<TargetBlock>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    uint64_t v8 = (uint64_t)(v5 - *a1) >> 7;
    if ((unint64_t)(v8 + 1) >> 57) {
      abort();
    }
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 6;
    if (v9 >> 6 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v17 = a1 + 2;
    if (v11)
    {
      if (v11 >> 57) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(v11 << 7);
    }
    else
    {
      uint64_t v12 = 0;
    }
    size_t v13 = v12;
    uint64_t v14 = &v12[128 * v8];
    uint64_t v16 = &v12[128 * v11];
    std::allocator<TargetBlock>::construct[abi:nn180100]<TargetBlock,TargetBlock>((uint64_t)v14, a2);
    unint64_t v15 = v14 + 128;
    std::vector<TargetBlock>::__swap_out_circular_buffer(a1, &v13);
    uint64_t v7 = a1[1];
    uint64_t result = std::__split_buffer<TargetBlock>::~__split_buffer((uint64_t)&v13);
  }
  else
  {
    uint64_t result = std::allocator<TargetBlock>::construct[abi:nn180100]<TargetBlock,TargetBlock>(a1[1], a2);
    uint64_t v7 = v5 + 128;
  }
  a1[1] = v7;
  return result;
}

uint64_t *std::vector<ALUTargetBlockInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ALUTargetBlockInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(void *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v4);
  uint64_t v2 = v4;
  if (v5)
  {
    ++a1[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    a1[1] += *(void *)(v4 + 16);
  }
  return a1;
}

uint64_t std::vector<TargetBlock>::__base_destruct_at_end[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 128)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(i - 40);
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(i - 88);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(i - 128);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void std::vector<TargetBlock>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<TargetBlock>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::allocator<TargetBlock>::construct[abi:nn180100]<TargetBlock,TargetBlock>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table(a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(v3 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(v3 + 64) = v6;
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a2 + 72);
  if (v6)
  {
    unint64_t v7 = *(void *)(v5 + 8);
    unint64_t v8 = *(void *)(v3 + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v4 + 8 * v7) = v3 + 56;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  *(void *)(v3 + 80) = *(void *)(a2 + 80);
  uint64_t v9 = v3 + 88;

  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table(v9, (uint64_t *)(a2 + 88));
}

uint64_t *std::vector<TargetBlock>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 128;
    v4 -= 128;
    uint64_t result = (uint64_t *)std::allocator<TargetBlock>::construct[abi:nn180100]<TargetBlock,TargetBlock>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TargetBlock>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(i - 40);
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(i - 88);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(i - 128);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,unsigned long &>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  v14[1] = a2;
  v14[2] = a3;
  unint64_t v14[3] = a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
      else {
        unint64_t v4 = a2;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
  }
  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t v14 = *v22;
LABEL_38:
    void *v22 = v14;
    goto LABEL_39;
  }
  uint64_t v23 = *(void *)(a1 + 16);
  *uint64_t v14 = v23;
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (v23)
  {
    unint64_t v24 = *(void *)(v23 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    size_t v22 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::agxclauseanalyzer::InstrStream>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

uint64_t llvm::Expected<std::vector<llvm::iterator_range<llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput const>>>>::~Expected(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    *(void *)a1 = 0;
    if (v3) {
      (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<llvm::Error>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v1 = *a1;
  char v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *((void *)v4 - 1);
        v4 -= 8;
        uint64_t v6 = v7;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<TargetClause>::destroy[abi:nn180100](uint64_t a1)
{
  char v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }

  return std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::~__hash_table(a1 + 24);
}

uint64_t TargetClauseAnalysis::GetTargetBlocks(TargetClauseAnalysis *this)
{
  long long v108 = 0u;
  long long v109 = 0u;
  int v110 = 1065353216;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v108, (unint64_t)(float)*((unsigned int *)this + 62));
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  while (v2 != v3)
  {
    for (uint64_t i = *(uint64_t **)(v2 + 40); i; uint64_t i = (uint64_t *)*i)
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v108, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
    v2 += 88;
  }
  uint64_t v5 = v109;
  if (!(void)v109) {
    goto LABEL_157;
  }
  do
  {
    uint64_t v6 = (int *)*((void *)this + 17);
    uint64_t v7 = (int *)*((void *)this + 18);
    if (v6 == v7)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      do
      {
        int v9 = *v6++;
        if (v9 == -1) {
          ++v8;
        }
      }
      while (v6 != v7);
    }
    uint64_t v10 = *((void *)this + 32);
    unint64_t v11 = v10 - v8;
    if (v10 == v8)
    {
      size_t v12 = 0;
      unint64_t v13 = 0;
      unint64_t v97 = 0;
    }
    else
    {
      if (v11 >> 62
        || (size_t v12 = (size_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v10 - v8),
            bzero((void *)v12, 4 * v10 - 4 * v8),
            v11 >= 0xAAAAAAAAAAAAAABLL))
      {
LABEL_158:
        abort();
      }
      unint64_t v13 = (char *)operator new(24 * v11);
      bzero(v13, 24 * ((24 * v11 - 24) / 0x18) + 24);
      unint64_t v97 = &v13[24 * ((24 * v11 - 24) / 0x18) + 24];
    }
    __int16 v98 = (uint64_t *)v5;
    uint64_t v14 = (unsigned int *)(v5 + 16);
    uint64_t v15 = *(void *)this;
    uint64_t v100 = *((void *)this + 1);
    uint64_t v103 = v13;
    size_t v104 = v12;
    uint64_t v102 = v14;
    if (*(void *)this != v100)
    {
      do
      {
        int v16 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v15 + 24, *v14, v14)+ 6);
        if (v16)
        {
          uint64_t v17 = *((void *)this + 17);
          uint64_t v18 = *(unsigned int *)(v17 + 4 * *(void *)v15);
          uint64_t v19 = *(unsigned int *)(v17 + 4 * (*(void *)(v15 + 8) + *(void *)v15));
          if (v18 < v19)
          {
            do
            {
              *(_DWORD *)(v12 + 4 * v18) += v16;
              size_t v20 = &v13[24 * v18];
              size_t v22 = (_DWORD **)(v20 + 8);
              uint64_t v21 = (_DWORD *)*((void *)v20 + 1);
              unint64_t v23 = *((void *)v20 + 2);
              if ((unint64_t)v21 >= v23)
              {
                uint64_t v25 = *(_DWORD **)v20;
                uint64_t v26 = ((uint64_t)v21 - *(void *)v20) >> 2;
                unint64_t v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 62) {
                  goto LABEL_158;
                }
                uint64_t v28 = v23 - (void)v25;
                if (v28 >> 1 > v27) {
                  unint64_t v27 = v28 >> 1;
                }
                BOOL v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v29) {
                  unint64_t v30 = v27;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v30);
                  uint64_t v21 = *v22;
                  uint64_t v25 = *(_DWORD **)v20;
                }
                else
                {
                  uint64_t v31 = 0;
                }
                BOOL v32 = (_DWORD *)(v30 + 4 * v26);
                *BOOL v32 = *(_DWORD *)(v15 + 16);
                unint64_t v24 = v32 + 1;
                while (v21 != v25)
                {
                  int v33 = *--v21;
                  *--BOOL v32 = v33;
                }
                *(void *)size_t v20 = v32;
                void *v22 = v24;
                *((void *)v20 + 2) = v30 + 4 * v31;
                if (v25) {
                  operator delete(v25);
                }
              }
              else
              {
                _DWORD *v21 = *(_DWORD *)(v15 + 16);
                unint64_t v24 = v21 + 1;
              }
              void *v22 = v24;
              ++v18;
              unint64_t v13 = v103;
              size_t v12 = v104;
            }
            while (v18 != v19);
          }
        }
        v15 += 88;
        uint64_t v14 = v102;
      }
      while (v15 != v100);
    }
    uint64_t v35 = *((void *)this + 28);
    uint64_t v34 = *((void *)this + 29);
    uint64_t v99 = v34;
    while (v35 != v34)
    {
      int v36 = *(_DWORD *)(v35 + 84) - *(_DWORD *)(v35 + 80);
      unsigned int v37 = v36 + 1;
      if (v36 == -1)
      {
        unint64_t v38 = 0;
        long long v39 = 0uLL;
      }
      else
      {
        size_t v12 = 4 * (v36 + 1);
        long long v40 = (char *)operator new(v12);
        unint64_t v38 = (unint64_t)&v40[4 * v37];
        bzero(v40, 4 * v37);
        *(void *)&long long v39 = v40;
        *((void *)&v39 + 1) = v38;
      }
      long long v41 = (uint64_t *)(v35 + 40);
      size_t v42 = *v102;
      unint64_t v43 = *(void *)(v35 + 48);
      if (v43)
      {
        uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          size_t v12 = *v102;
          if (v43 <= v42) {
            size_t v12 = v42 % v43;
          }
        }
        else
        {
          size_t v12 = (v43 - 1) & v42;
        }
        long long v45 = *(uint64_t ***)(*v41 + 8 * v12);
        if (v45)
        {
          for (uint64_t j = *v45; j; uint64_t j = (uint64_t *)*j)
          {
            unint64_t v47 = j[1];
            if (v47 == v42)
            {
              if (*((_DWORD *)j + 4) == v42)
              {
                size_t v12 = v104;
                goto LABEL_82;
              }
            }
            else
            {
              if (v44.u32[0] > 1uLL)
              {
                if (v47 >= v43) {
                  v47 %= v43;
                }
              }
              else
              {
                v47 &= v43 - 1;
              }
              if (v47 != v12) {
                break;
              }
            }
          }
        }
      }
      long long v101 = v39;
      uint64_t v48 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v48 = 0;
      *((void *)v48 + 1) = v42;
      *((_DWORD *)v48 + 4) = *v102;
      *(_OWORD *)(v48 + 24) = v101;
      *((void *)v48 + 5) = v38;
      float v49 = (float)(unint64_t)(*(void *)(v35 + 64) + 1);
      float v50 = *(float *)(v35 + 72);
      if (!v43 || (float)(v50 * (float)v43) < v49)
      {
        BOOL v51 = (v43 & (v43 - 1)) != 0;
        if (v43 < 3) {
          BOOL v51 = 1;
        }
        unint64_t v52 = v51 | (2 * v43);
        unint64_t v53 = vcvtps_u32_f32(v49 / v50);
        if (v52 <= v53) {
          size_t v54 = v53;
        }
        else {
          size_t v54 = v52;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(v35 + 40, v54);
        unint64_t v43 = *(void *)(v35 + 48);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v43 <= v42) {
            size_t v12 = v42 % v43;
          }
          else {
            size_t v12 = v42;
          }
        }
        else
        {
          size_t v12 = (v43 - 1) & v42;
        }
      }
      uint64_t v55 = *v41;
      uint64_t v56 = *(void **)(*v41 + 8 * v12);
      if (v56)
      {
        *(void *)uint64_t v48 = *v56;
        size_t v12 = v104;
LABEL_80:
        void *v56 = v48;
        goto LABEL_81;
      }
      *(void *)uint64_t v48 = *(void *)(v35 + 56);
      *(void *)(v35 + 56) = v48;
      *(void *)(v55 + 8 * v12) = v35 + 56;
      size_t v12 = v104;
      if (*(void *)v48)
      {
        unint64_t v57 = *(void *)(*(void *)v48 + 8);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v57 >= v43) {
            v57 %= v43;
          }
        }
        else
        {
          v57 &= v43 - 1;
        }
        uint64_t v56 = (void *)(*v41 + 8 * v57);
        goto LABEL_80;
      }
LABEL_81:
      ++*(void *)(v35 + 64);
      *(void *)&long long v39 = 0;
LABEL_82:
      if ((void)v39) {
        operator delete((void *)v39);
      }
      unint64_t v58 = *v102;
      unint64_t v59 = *(void *)(v35 + 48);
      if (v59)
      {
        uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
        v60.i16[0] = vaddlv_u8(v60);
        if (v60.u32[0] > 1uLL)
        {
          unint64_t v38 = *v102;
          if (v59 <= v58) {
            unint64_t v38 = v58 % v59;
          }
        }
        else
        {
          unint64_t v38 = (v59 - 1) & v58;
        }
        long long v61 = *(void ***)(*v41 + 8 * v38);
        if (v61)
        {
          uint64_t v62 = *v61;
          if (*v61)
          {
            do
            {
              unint64_t v63 = v62[1];
              if (v63 == v58)
              {
                if (*((_DWORD *)v62 + 4) == v58) {
                  goto LABEL_122;
                }
              }
              else
              {
                if (v60.u32[0] > 1uLL)
                {
                  if (v63 >= v59) {
                    v63 %= v59;
                  }
                }
                else
                {
                  v63 &= v59 - 1;
                }
                if (v63 != v38) {
                  break;
                }
              }
              uint64_t v62 = (void *)*v62;
            }
            while (v62);
          }
        }
      }
      uint64_t v62 = operator new(0x30uLL);
      *uint64_t v62 = 0;
      v62[1] = v58;
      *((_DWORD *)v62 + 4) = *v102;
      v62[4] = 0;
      v62[5] = 0;
      v62[3] = 0;
      float v64 = (float)(unint64_t)(*(void *)(v35 + 64) + 1);
      float v65 = *(float *)(v35 + 72);
      if (!v59 || (float)(v65 * (float)v59) < v64)
      {
        BOOL v66 = (v59 & (v59 - 1)) != 0;
        if (v59 < 3) {
          BOOL v66 = 1;
        }
        unint64_t v67 = v66 | (2 * v59);
        unint64_t v68 = vcvtps_u32_f32(v64 / v65);
        if (v67 <= v68) {
          size_t v69 = v68;
        }
        else {
          size_t v69 = v67;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(v35 + 40, v69);
        unint64_t v59 = *(void *)(v35 + 48);
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v59 <= v58) {
            unint64_t v38 = v58 % v59;
          }
          else {
            unint64_t v38 = v58;
          }
        }
        else
        {
          unint64_t v38 = (v59 - 1) & v58;
        }
      }
      uint64_t v70 = *v41;
      uint64_t v71 = *(void **)(*v41 + 8 * v38);
      if (v71)
      {
        *uint64_t v62 = *v71;
LABEL_120:
        *uint64_t v71 = v62;
        goto LABEL_121;
      }
      *uint64_t v62 = *(void *)(v35 + 56);
      *(void *)(v35 + 56) = v62;
      *(void *)(v70 + 8 * v38) = v35 + 56;
      if (*v62)
      {
        unint64_t v72 = *(void *)(*v62 + 8);
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v72 >= v59) {
            v72 %= v59;
          }
        }
        else
        {
          v72 &= v59 - 1;
        }
        uint64_t v71 = (void *)(*v41 + 8 * v72);
        goto LABEL_120;
      }
LABEL_121:
      ++*(void *)(v35 + 64);
LABEL_122:
      uint64_t v73 = *(unsigned int *)(v35 + 80);
      uint64_t v74 = *(unsigned int *)(v35 + 84);
      long long v75 = (int *)(v12 + 4 * v73);
      unint64_t v13 = v103;
      unsigned int v76 = 0;
      if (v75 == (int *)(v12 + 4 * v74 + 4))
      {
        LODWORD(v78) = 0;
      }
      else
      {
        uint64_t v77 = 4 * v74 - 4 * v73 + 4;
        uint64_t v78 = v77;
        uint64_t v79 = v75;
        do
        {
          int v80 = *v79++;
          v76 += v80;
          v78 -= 4;
        }
        while (v78);
        do
        {
          if (*v75++) {
            LODWORD(v78) = v78 + 1;
          }
          v77 -= 4;
        }
        while (v77);
      }
      if (v78 <= 1) {
        unsigned int v82 = 1;
      }
      else {
        unsigned int v82 = v78;
      }
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v35 + 88, *v102, v102)+ 5) = v76 / v82;
      long long v105 = 0u;
      long long v106 = 0u;
      int v107 = 1065353216;
      unsigned int v83 = *(_DWORD *)(v35 + 80);
      if (v83 <= *(_DWORD *)(v35 + 84))
      {
        do
        {
          int v84 = *(_DWORD *)(v12 + 4 * v83);
          unsigned int v85 = v83;
          if (v84)
          {
            *(_DWORD *)(v62[3] + 4 * (v83 - *(_DWORD *)(v35 + 80))) = v84;
            char v86 = (unsigned int **)&v103[24 * v83];
            char v87 = *v86;
            int16x8_t v88 = v86[1];
            while (v87 != v88)
            {
              unsigned int v89 = *(_DWORD *)(*((void *)this + 17) + 4 * *(void *)(*(void *)this + 88 * *v87));
              if (v89 >= *(_DWORD *)(v35 + 80) && v89 <= *(_DWORD *)(v35 + 84)) {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v105, *v87, *v87);
              }
              ++v87;
            }
          }
          unsigned int v83 = v85 + 1;
        }
        while (v85 + 1 <= *(_DWORD *)(v35 + 84));
        for (uint64_t k = (uint64_t *)v106; k; uint64_t k = (uint64_t *)*k)
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v35, *((_DWORD *)k + 4), *((_DWORD *)k + 4));
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v105);
      v35 += 128;
      uint64_t v34 = v99;
    }
    if (v13)
    {
      id v92 = v97;
      if (v97 != v13)
      {
        int v93 = v97;
        do
        {
          uint64_t v95 = (void *)*((void *)v93 - 3);
          v93 -= 24;
          int v94 = v95;
          if (v95)
          {
            *((void *)v92 - 2) = v94;
            operator delete(v94);
          }
          id v92 = v93;
        }
        while (v93 != v13);
      }
      operator delete(v13);
    }
    if (v12) {
      operator delete((void *)v12);
    }
    uint64_t v5 = *v98;
  }
  while (*v98);
LABEL_157:
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v108);
  return (uint64_t)this + 224;
}

void GPUToolsPlatformLLVMShaderProfilerHelper::GPUToolsPlatformLLVMShaderProfilerHelper(GPUToolsPlatformLLVMShaderProfilerHelper *this)
{
  *(void *)this = 0;
  LLVMInitializeAGX2TargetInfo();
  LLVMInitializeAGX2TargetMC();
  LLVMInitializeAGX2Disassembler();
  LLVMInitializeAGX2ClauseAnalyzer();
}

uint64_t *std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelperImpl>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    *(void *)(v2 + 136) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    unint64_t v4 = *(uint64_t **)(v2 + 128);
    *(void *)(v2 + 128) = 0;
    if (v4) {
      std::default_delete<TargetClauseAnalysis>::operator()[abi:nn180100](v4);
    }
    uint64_t v5 = *(void *)(v2 + 120);
    *(void *)(v2 + 120) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *(void *)(v2 + 112);
    *(void *)(v2 + 112) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *(void *)(v2 + 104);
    *(void *)(v2 + 104) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    std::unique_ptr<llvm::MCContext>::reset[abi:nn180100]((llvm::MCContext **)(v2 + 96), 0);
    uint64_t v11 = *(void *)(v2 + 88);
    *(void *)(v2 + 88) = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = *(void *)(v2 + 80);
    *(void *)(v2 + 80) = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = *(void *)(v2 + 72);
    *(void *)(v2 + 72) = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = *(void *)(v2 + 64);
    *(void *)(v2 + 64) = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = *(void *)(v2 + 48);
    *(void *)(v2 + 48) = 0;
    if (v16) {
      operator delete();
    }
    uint64_t v17 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = *(void *)(v2 + 32);
    *(void *)(v2 + 32) = 0;
    if (v18) {
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v18, v8, v9, v10);
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  return result;
}

void std::default_delete<TargetClauseAnalysis>::operator()[abi:nn180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    uint64_t v14 = (void **)(v1 + 224);
    std::vector<TargetBlock>::__destroy_vector::operator()[abi:nn180100](&v14);
    uint64_t v2 = *(void *)(v1 + 200);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 208);
      unint64_t v4 = *(void **)(v1 + 200);
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = *(void **)(v3 - 24);
          if (v5)
          {
            *(void *)(v3 - 16) = v5;
            operator delete(v5);
          }
          v3 -= 32;
        }
        while (v3 != v2);
        unint64_t v4 = *(void **)(v1 + 200);
      }
      *(void *)(v1 + 208) = v2;
      operator delete(v4);
    }
    uint64_t v6 = *(void **)(v1 + 176);
    if (v6)
    {
      do
      {
        uint64_t v7 = (void *)*v6;
        operator delete(v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    uint64_t v8 = *(void **)(v1 + 160);
    *(void *)(v1 + 160) = 0;
    if (v8) {
      operator delete(v8);
    }
    uint64_t v9 = *(void **)(v1 + 136);
    if (v9)
    {
      *(void *)(v1 + 144) = v9;
      operator delete(v9);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 96);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 56);
    unint64_t v10 = *(void **)(v1 + 24);
    if (v10)
    {
      *(void *)(v1 + 32) = v10;
      operator delete(v10);
    }
    uint64_t v11 = *(void **)v1;
    if (*(void *)v1)
    {
      uint64_t v12 = *(void *)(v1 + 8);
      uint64_t v13 = *(void **)v1;
      if ((void *)v12 != v11)
      {
        do
        {
          v12 -= 88;
          std::allocator<TargetClause>::destroy[abi:nn180100](v12);
        }
        while ((void *)v12 != v11);
        uint64_t v13 = *(void **)v1;
      }
      *(void *)(v1 + 8) = v11;
      operator delete(v13);
    }
    operator delete();
  }

  operator delete();
}

llvm::MCContext *std::unique_ptr<llvm::MCContext>::reset[abi:nn180100](llvm::MCContext **a1, llvm::MCContext *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::MCContext::~MCContext(result);
    operator delete();
  }
  return result;
}

void std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 184), (void *)(8 * *(unsigned int *)(a1 + 200)), 4uLL, a4);
  llvm::deallocate_buffer(*(llvm **)(a1 + 160), (void *)(8 * *(unsigned int *)(a1 + 176)), 4uLL, v5);

  operator delete();
}

void GPUToolsPlatformLLVMShaderProfilerHelper::SetFileForAnalysis(GPUToolsPlatformLLVMShaderProfilerHelper *this, const char *a2, int a3, __sFILE *a4)
{
}

uint64_t *llvm::object::OwningBinary<llvm::object::Binary>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a2[1];
  a2[1] = 0;
  uint64_t v7 = a1[1];
  a1[1] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t GPUToolsPlatformLLVMShaderProfilerHelperImpl::_CompleteSetupForAnalysis(GPUToolsPlatformLLVMShaderProfilerHelperImpl *this, int a2)
{
  int v3 = a2 + 10;
  std::string::basic_string[abi:nn180100]<0>(&v50, "g");
  std::to_string(&v27, v3);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v27;
  }
  else {
    uint64_t v4 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  std::string::append(&v50, (const std::string::value_type *)v4, size);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 13);
  if (v6 && (v6[2] - 24) > 0xFFFFFFF0)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    llvm::Triple::setArch();
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(void *)v6 + 384))(&v27, v6);
    llvm::SubtargetFeatures::getString((uint64_t *)v45, (llvm::SubtargetFeatures *)&v27);
    v33[0] = (void **)&v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v33);
    size_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v7 = llvm::TargetRegistry::lookupTarget();
    *((void *)this + 3) = v7;
    if (!v7) {
      goto LABEL_49;
    }
    uint64_t v8 = *(void (**)(void))(v7 + 288);
    if (v8)
    {
      v8();
      uint64_t v7 = *((void *)this + 3);
    }
    MCRegInfo = llvm::Target::createMCRegInfo(*(uint64_t (**)(void **))(v7 + 80));
    uint64_t v13 = *((void *)this + 4);
    *((void *)this + 4) = MCRegInfo;
    if (v13) {
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v13, v10, v11, v12);
    }
    if (MCRegInfo)
    {
      llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)v33);
      if ((SBYTE7(v48) & 0x80u) == 0) {
        uint64_t v14 = &v47;
      }
      else {
        uint64_t v14 = (long long *)v47;
      }
      if ((SBYTE7(v48) & 0x80u) == 0) {
        uint64_t v15 = BYTE7(v48);
      }
      else {
        uint64_t v15 = *((void *)&v47 + 1);
      }
      uint64_t MCAsmInfo = llvm::Target::createMCAsmInfo(*(uint64_t (**)(uint64_t, void **, uint64_t))(*((void *)this + 3) + 48), *((void *)this + 4), (uint64_t)v14, v15, (uint64_t)v33);
      uint64_t v17 = *((void *)this + 5);
      *((void *)this + 5) = MCAsmInfo;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      if ((SBYTE7(v48) & 0x80u) == 0) {
        uint64_t v18 = &v47;
      }
      else {
        uint64_t v18 = (long long *)v47;
      }
      if ((SBYTE7(v48) & 0x80u) == 0) {
        uint64_t v19 = BYTE7(v48);
      }
      else {
        uint64_t v19 = *((void *)&v47 + 1);
      }
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v20 = &v50;
      }
      else {
        size_t v20 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = v50.__r_.__value_.__l.__size_;
      }
      if ((v46 & 0x80u) == 0) {
        size_t v22 = v45;
      }
      else {
        size_t v22 = (void **)v45[0];
      }
      if ((v46 & 0x80u) == 0) {
        uint64_t v23 = v46;
      }
      else {
        uint64_t v23 = (uint64_t)v45[1];
      }
      uint64_t MCSubtargetInfo = llvm::Target::createMCSubtargetInfo(*(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)this + 3)+ 88), (uint64_t)v18, v19, (uint64_t)v20, v21, (uint64_t)v22, v23);
      uint64_t v25 = *((void *)this + 8);
      *((void *)this + 8) = MCSubtargetInfo;
      if (v25)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
        uint64_t MCSubtargetInfo = *((void *)this + 8);
      }
      if (MCSubtargetInfo && *((void *)this + 5))
      {
        char v31 = 0;
        long long v32 = 0u;
        v27.__r_.__value_.__l.__size_ = 0;
        LODWORD(v27.__r_.__value_.__r.__words[2]) = 0;
        bzero(v28, 0x329uLL);
        v28[51] = 0u;
        char v30 = 0;
        uint64_t v29 = 0;
        operator new();
      }
      *((unsigned char *)this + 152) = 0;
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      if (v40 < 0) {
        operator delete(__p);
      }
      if (v38 < 0) {
        operator delete(v37);
      }
      if (v36 < 0) {
        operator delete(v35);
      }
      if (v34 < 0) {
        operator delete(v33[2]);
      }
    }
    else
    {
LABEL_49:
      *((unsigned char *)this + 152) = 0;
    }
    if (SHIBYTE(v44) < 0) {
      operator delete(v42);
    }
    if ((char)v46 < 0) {
      operator delete(v45[0]);
    }
    if (SBYTE7(v48) < 0) {
      operator delete((void *)v47);
    }
  }
  else
  {
    *((unsigned char *)this + 152) = 0;
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t (*llvm::Target::createMCRegInfo(uint64_t (*a1)(void **)))(void **)
{
  uint64_t v1 = a1;
  if (a1)
  {
    llvm::Triple::Triple();
    uint64_t v1 = (uint64_t (*)(void **))v1(&__p);
    if (v4 < 0) {
      operator delete(__p);
    }
  }
  return v1;
}

uint64_t llvm::Target::createMCAsmInfo(uint64_t (*a1)(uint64_t, void **, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 0;
  }
  llvm::Triple::Triple();
  uint64_t v8 = a1(a2, &__p, a5);
  if (v11 < 0) {
    operator delete(__p);
  }
  return v8;
}

uint64_t llvm::Target::createMCSubtargetInfo(uint64_t (*a1)(void **, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1) {
    return 0;
  }
  llvm::Triple::Triple();
  uint64_t v12 = a1(&__p, a4, a5, a6, a7);
  if (v15 < 0) {
    operator delete(__p);
  }
  return v12;
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::agxclauseanalyzer::AnalyzerInput>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

void GPUToolsPlatformLLVMShaderProfilerHelper::SetBinaryForAnalysis(GPUToolsPlatformLLVMShaderProfilerHelper *this, const char *a2)
{
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::object::Binary>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

uint64_t llvm::raw_ostream::SetUnbuffered(llvm::raw_ostream *this)
{
  if (*((void *)this + 4) != *((void *)this + 2)) {
    llvm::raw_ostream::flush_nonempty(this);
  }

  return llvm::raw_ostream::SetBufferAndMode(this, 0, 0, 0);
}

void *GPUToolsPlatformLLVMShaderProfilerHelperImpl::_DumpInstructionsToOStream(void *this, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = (void *)this[15];
  char v15 = v5;
  uint64_t v16 = a3;
  if (a3 != a4)
  {
    uint64_t v8 = this;
    this = v5;
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*this + 24))(&v17);
      uint64_t v9 = v17;
      if (v18) {
        break;
      }
      uint64_t v10 = *v17;
      uint64_t v17 = &off_7478C8;
      uint64_t v18 = "%04x";
      uint64_t v19 = v10;
      char v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      uint64_t v12 = (_WORD *)*((void *)v11 + 4);
      if (*((void *)v11 + 3) - (void)v12 > 1uLL)
      {
        _WORD *v12 = 8250;
        *((void *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      uint64_t v13 = v8[9];
      if (v13) {
        (*(void (**)(uint64_t, void *, void, const char *, void, void, llvm::raw_ostream *))(*(void *)v13 + 32))(v13, v9 + 3, 0, "", 0, v8[8], a2);
      }
      uint64_t v14 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v14)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *uint64_t v14 = 10;
        ++*((void *)a2 + 4);
      }
      llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(&v15);
      this = v15;
      if (v15 == v5 && v16 == a4) {
        return this;
      }
    }
    this = (void *)fwrite("Unexpected instruction found", 0x1CuLL, 1uLL, __stderrp);
    if (v9) {
      return (void *)(*(uint64_t (**)(void *))(*v9 + 8))(v9);
    }
  }
  return this;
}

unsigned __int8 *std::remove[abi:nn180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t llvm::format_object<unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t GPUToolsPlatformLLVMShaderProfilerHelperImpl::GetTargetClauseAnalysis(GPUToolsPlatformLLVMShaderProfilerHelperImpl *this)
{
  if (!*((void *)this + 16)) {
    operator new();
  }
  return *((void *)this + 16);
}

void ***GPUToolsPlatformLLVMShaderProfilerHelper::ShaderInstructionInfoFromBinary(void ***this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  char v4 = *(void ****)(a2 + 120);
  uint64_t v41 = v4;
  uint64_t v42 = a3;
  if (a3 == a4) {
    return this;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = this;
  int v8 = 0;
  this = v4;
  uint64_t v35 = v4;
  while (1)
  {
    ((void (*)(char **__return_ptr))(*this)[3])(&v43);
    uint64_t v9 = v43;
    if (v44) {
      break;
    }
    if (v43)
    {
      int v10 = (*(uint64_t (**)(void, char *))(**(void **)(v6 + 88) + 56))(*(void *)(v6 + 88), v43);
      int v11 = (*(uint64_t (**)(void, char *))(**(void **)(v6 + 88) + 64))(*(void *)(v6 + 88), v9);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v40 = 0;
      int v44 = 0;
      char v48 = 0;
      uint64_t v49 = 0;
      int v50 = 1;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = 0;
      BOOL v51 = (std::string *)__p;
      llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v43);
      char v38 = *(void **)v9;
      uint64_t v12 = *(void *)(v6 + 72);
      if (v12) {
        (*(void (**)(uint64_t, char *, void, const char *, void, void, char **))(*(void *)v12 + 32))(v12, v9 + 24, 0, "", 0, *(void *)(v6 + 64), &v43);
      }
      uint64_t v13 = v51;
      if (SHIBYTE(v51->__r_.__value_.__r.__words[2]) < 0)
      {
        char v15 = (std::string *)v51->__r_.__value_.__r.__words[0];
        std::string::size_type size = v51->__r_.__value_.__l.__size_;
        if (!size) {
          goto LABEL_17;
        }
      }
      else
      {
        std::string::size_type size = HIBYTE(v51->__r_.__value_.__r.__words[2]);
        char v15 = v51;
        if (!*((unsigned char *)&v51->__r_.__value_.__s + 23)) {
          goto LABEL_17;
        }
      }
      uint64_t v16 = v15;
      while (v16->__r_.__value_.__s.__data_[0] == 9)
      {
        uint64_t v16 = (std::string *)((char *)v16 + 1);
        if (!--size) {
          goto LABEL_17;
        }
      }
      if ((char *)v16 - (char *)v15 != -1) {
        std::string::erase(v51, 0, (char *)v16 - (char *)v15);
      }
LABEL_17:
      uint64_t v17 = v7[2];
      if (v8 < v17)
      {
        *(_DWORD *)int v8 = v10;
        *((_DWORD *)v8 + 1) = v11;
        uint64_t v18 = (std::string *)(v8 + 1);
        if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v18, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v19 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v8[3] = (void *)v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        }
        v8[4] = v38;
        uint64_t v26 = v8 + 5;
        goto LABEL_47;
      }
      size_t v20 = *v7;
      unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (v8 - *v7);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0x666666666666666) {
        abort();
      }
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * (v17 - v20);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x333333333333333) {
        unint64_t v24 = 0x666666666666666;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 > 0x666666666666666) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v25 = operator new(40 * v24);
      }
      else
      {
        uint64_t v25 = 0;
      }
      std::string v27 = (char *)&v25[5 * v21];
      *(_DWORD *)std::string v27 = v10;
      *((_DWORD *)v27 + 1) = v11;
      uint64_t v28 = (std::string *)(v27 + 8);
      if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v28, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
        size_t v20 = *v7;
        int v8 = v7[1];
      }
      else
      {
        long long v29 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        *((void *)v27 + 3) = *((void *)&v13->__r_.__value_.__l + 2);
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      char v30 = (void **)&v25[5 * v24];
      v25[5 * v21 + 4] = v38;
      uint64_t v26 = (void **)(v27 + 40);
      if (v8 == v20)
      {
        void *v7 = (void **)v27;
        v7[1] = v26;
        v7[2] = v30;
      }
      else
      {
        do
        {
          uint64_t v31 = (uint64_t)*(v8 - 5);
          v8 -= 5;
          *((void *)v27 - 5) = v31;
          v27 -= 40;
          long long v32 = *(_OWORD *)(v8 + 1);
          *((void *)v27 + 3) = v8[3];
          *(_OWORD *)(v27 + 8) = v32;
          v8[2] = 0;
          v8[3] = 0;
          v8[1] = 0;
          *((void *)v27 + 4) = v8[4];
        }
        while (v8 != v20);
        int v33 = *v7;
        size_t v20 = v7[1];
        void *v7 = (void **)v27;
        v7[1] = v26;
        v7[2] = v30;
        if (v20 != v33)
        {
          uint64_t v6 = a2;
          uint64_t v5 = a4;
          char v4 = v35;
          do
          {
            if (*((char *)v20 - 9) < 0) {
              operator delete(*(v20 - 4));
            }
            v20 -= 5;
          }
          while (v20 != v33);
          size_t v20 = v33;
          if (!v33) {
            goto LABEL_47;
          }
LABEL_46:
          operator delete(v20);
LABEL_47:
          v7[1] = v26;
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v43);
          if (SHIBYTE(v40) < 0) {
            operator delete(__p[0]);
          }
          int v8 = v26;
          goto LABEL_50;
        }
      }
      uint64_t v6 = a2;
      uint64_t v5 = a4;
      char v4 = v35;
      if (v20) {
        goto LABEL_46;
      }
      goto LABEL_47;
    }
LABEL_50:
    llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(&v41);
    this = v41;
    if (v41 == v4 && v42 == v5) {
      return this;
    }
  }
  this = (void ***)fwrite("Unexpected instruction found", 0x1CuLL, 1uLL, __stderrp);
  if (v9) {
    return (void ***)(*(uint64_t (**)(char *))(*(void *)v9 + 8))(v9);
  }
  return this;
}

id GTShaderProfilerAnalyzeBinaryLLVM(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = v6;
  if (a2 <= 0x7FFFFFFE)
  {
    unint64_t v53 = v6;
    if (GTShaderProfilerAnalyzeBinaryLLVM::onceToken != -1) {
      dispatch_once(&GTShaderProfilerAnalyzeBinaryLLVM::onceToken, &__block_literal_global_10877);
    }
    *(_OWORD *)long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v56 = 0u;
    id v8 = v5;
    [v8 bytes];
    [v8 length];
    v81[4] = 257;
    llvm::MemoryBuffer::getMemBufferCopy();
    llvm::MemoryBuffer::getMemBufferRef((uint64_t *)&v79, v78);
    llvm::object::createBinary();
    if (v91)
    {
      int v33 = 0;
    }
    else
    {
      std::string::size_type v9 = *(void *)v90;
      *(void *)long long v90 = 0;
      int v10 = v78;
      uint64_t v78 = 0;
      v80.__r_.__value_.__r.__words[0] = v9;
      v80.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
      llvm::object::OwningBinary<llvm::object::Binary>::operator=((uint64_t *)&v56, (uint64_t *)&v80);
      if (v80.__r_.__value_.__l.__size_) {
        (*(void (**)(std::string::size_type))(*(void *)v80.__r_.__value_.__l.__size_ + 8))(v80.__r_.__value_.__l.__size_);
      }
      if (v80.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)v80.__r_.__value_.__l.__data_ + 8))(v80.__r_.__value_.__r.__words[0]);
      }
      std::string::basic_string[abi:nn180100]<0>(&v77, "g");
      std::to_string(&v80, a2 + 10);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = &v80;
      }
      else {
        int v11 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v80.__r_.__value_.__l.__size_;
      }
      std::string::append(&v77, (const std::string::value_type *)v11, size);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = v56;
      if ((*(_DWORD *)(v56 + 8) - 9) >= 0xF) {
        uint64_t v13 = 0;
      }
      uint64_t v55 = v13;
      if (v13)
      {
        long long v88 = 0u;
        long long v89 = 0u;
        long long v87 = 0u;
        llvm::Triple::setArch();
        (*(void (**)(std::string *__return_ptr))(*(void *)v55 + 384))(&v80);
        llvm::SubtargetFeatures::getString((uint64_t *)v75, (llvm::SubtargetFeatures *)&v80);
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v63);
        unint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        uint64_t v14 = llvm::TargetRegistry::lookupTarget();
        uint64_t v54 = v14;
        if (!v14) {
          goto LABEL_58;
        }
        char v15 = *(void (**)(void))(v14 + 288);
        if (v15)
        {
          v15();
          uint64_t v14 = v54;
        }
        MCRegInfo = llvm::Target::createMCRegInfo(*(uint64_t (**)(void **))(v14 + 80));
        uint64_t v20 = v57;
        *(void *)&long long v57 = MCRegInfo;
        if (v20) {
          std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v20, v17, v18, v19);
        }
        if (MCRegInfo)
        {
          llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)&v63);
          if ((SBYTE7(v88) & 0x80u) == 0) {
            unint64_t v21 = &v87;
          }
          else {
            unint64_t v21 = (long long *)v87;
          }
          if ((SBYTE7(v88) & 0x80u) == 0) {
            uint64_t v22 = BYTE7(v88);
          }
          else {
            uint64_t v22 = *((void *)&v87 + 1);
          }
          uint64_t MCAsmInfo = llvm::Target::createMCAsmInfo(*(uint64_t (**)(uint64_t, void **, uint64_t))(v54 + 48), v57, (uint64_t)v21, v22, (uint64_t)&v63);
          uint64_t v24 = *((void *)&v57 + 1);
          *((void *)&v57 + 1) = MCAsmInfo;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          if ((SBYTE7(v88) & 0x80u) == 0) {
            uint64_t v25 = &v87;
          }
          else {
            uint64_t v25 = (long long *)v87;
          }
          if ((SBYTE7(v88) & 0x80u) == 0) {
            uint64_t v26 = BYTE7(v88);
          }
          else {
            uint64_t v26 = *((void *)&v87 + 1);
          }
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v27 = &v77;
          }
          else {
            std::string v27 = (std::string *)v77.__r_.__value_.__r.__words[0];
          }
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v28 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v28 = v77.__r_.__value_.__l.__size_;
          }
          if ((v76 & 0x80u) == 0) {
            long long v29 = v75;
          }
          else {
            long long v29 = (void **)v75[0];
          }
          if ((v76 & 0x80u) == 0) {
            uint64_t v30 = v76;
          }
          else {
            uint64_t v30 = (uint64_t)v75[1];
          }
          uint64_t MCSubtargetInfo = llvm::Target::createMCSubtargetInfo(*(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 88), (uint64_t)v25, v26, (uint64_t)v27, v28, (uint64_t)v29, v30);
          uint64_t v32 = v59;
          *(void *)&long long v59 = MCSubtargetInfo;
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
          int v33 = DWORD2(v57);
          if (*((void *)&v57 + 1))
          {
            if ((void)v59)
            {
              char v85 = 0;
              long long v86 = 0u;
              v80.__r_.__value_.__l.__size_ = 0;
              LODWORD(v80.__r_.__value_.__r.__words[2]) = 0;
              bzero(v81, 0x329uLL);
              long long v82 = 0u;
              char v84 = 0;
              uint64_t v83 = 0;
              operator new();
            }
            int v33 = 0;
          }
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v80);
          if (v70 < 0) {
            operator delete(v69);
          }
          if (v68 < 0) {
            operator delete(v67);
          }
          if (v66 < 0) {
            operator delete(v65);
          }
          if (v64 < 0) {
            operator delete((void *)v63.__r_.__value_.__r.__words[2]);
          }
        }
        else
        {
LABEL_58:
          int v33 = 0;
        }
        if (SHIBYTE(v74) < 0) {
          operator delete(v72);
        }
        if ((char)v76 < 0) {
          operator delete(v75[0]);
        }
        if (SBYTE7(v88) < 0) {
          operator delete((void *)v87);
        }
      }
      else
      {
        int v33 = 0;
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
    llvm::Expected<std::unique_ptr<llvm::object::Binary>>::~Expected((uint64_t *)v90);
    char v34 = v78;
    uint64_t v78 = 0;
    if (v34) {
      (*(void (**)(llvm::MemoryBuffer *))(*(void *)v34 + 8))(v34);
    }

    if (v33)
    {
      if (([v53 setupBinary:v8 targetIndex:a2] & 1) == 0) {

      }
      operator new();
    }
    uint64_t v38 = *((void *)&v62 + 1);
    *((void *)&v62 + 1) = 0;
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
    }
    uint64_t v39 = v62;
    *(void *)&long long v62 = 0;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    uint64_t v40 = v61[1];
    v61[1] = 0;
    uint64_t v7 = v53;
    if (v40) {
      (*(void (**)(llvm::MCContext *))(*(void *)v40 + 8))(v40);
    }
    uint64_t v41 = v61[0];
    v61[0] = 0;
    if (v41)
    {
      llvm::MCContext::~MCContext(v41);
      operator delete();
    }
    uint64_t v42 = *((void *)&v60 + 1);
    *((void *)&v60 + 1) = 0;
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    }
    uint64_t v43 = v60;
    *(void *)&long long v60 = 0;
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    uint64_t v44 = *((void *)&v59 + 1);
    *((void *)&v59 + 1) = 0;
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
    }
    uint64_t v45 = v59;
    *(void *)&long long v59 = 0;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
    }
    uint64_t v46 = *((void *)&v58 + 1);
    *((void *)&v58 + 1) = 0;
    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    }
    uint64_t v47 = v58;
    *(void *)&long long v58 = 0;
    if (v47) {
      operator delete();
    }
    uint64_t v48 = *((void *)&v57 + 1);
    *((void *)&v57 + 1) = 0;
    if (v48) {
      (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
    }
    uint64_t v49 = v57;
    *(void *)&long long v57 = 0;
    if (v49) {
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v49, v35, v36, v37);
    }
    uint64_t v50 = *((void *)&v56 + 1);
    *((void *)&v56 + 1) = 0;
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
    }
    uint64_t v51 = v56;
    *(void *)&long long v56 = 0;
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
    }
  }

  return 0;
}

uint64_t GTShaderProfilerLLVMTargetClauseAnalysis::addString(uint64_t a1, long long *a2)
{
  char v4 = *((unsigned char *)a2 + 23);
  int v74 = v4;
  std::string::size_type v72 = *((void *)a2 + 1);
  uint64_t v73 = *(const std::string::value_type **)a2;
  if (v4 >= 0) {
    id v5 = (uint64_t *)a2;
  }
  else {
    id v5 = *(uint64_t **)a2;
  }
  if (v4 >= 0) {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v6 = *((void *)a2 + 1);
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  unint64_t v8 = *(void *)(a1 + 168);
  if (v8)
  {
    unint64_t v9 = v7;
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v8) {
        unint64_t v12 = v7 % v8;
      }
    }
    else
    {
      unint64_t v12 = (v8 - 1) & v7;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)(a1 + 160) + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return *((unsigned int *)i + 10);
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v8) {
              v15 %= v8;
            }
          }
          else
          {
            v15 &= v8 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = *(void *)(a1 + 136);
  uint64_t v16 = *(std::string **)(a1 + 144);
  unint64_t v18 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  unint64_t v19 = v18;
  if (v8)
  {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v21 = v20.u32[0];
    if (v20.u32[0] > 1uLL)
    {
      unint64_t v6 = v18;
      if (v18 >= v8) {
        unint64_t v6 = v18 % v8;
      }
    }
    else
    {
      unint64_t v6 = (v8 - 1) & v18;
    }
    uint64_t v22 = *(char ***)(*(void *)(a1 + 160) + 8 * v6);
    if (v22)
    {
      for (uint64_t j = *v22; j; uint64_t j = *(char **)j)
      {
        unint64_t v24 = *((void *)j + 1);
        if (v24 == v19)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)j + 16, (unsigned __int8 *)a2))
          {
            char v70 = v16;
            goto LABEL_99;
          }
        }
        else
        {
          if (v21 > 1)
          {
            if (v24 >= v8) {
              v24 %= v8;
            }
          }
          else
          {
            v24 &= v8 - 1;
          }
          if (v24 != v6) {
            break;
          }
        }
      }
    }
  }
  uint64_t v25 = (void *)(a1 + 176);
  uint64_t j = (char *)operator new(0x30uLL);
  *(void *)uint64_t j = 0;
  *((void *)j + 1) = v19;
  uint64_t v26 = (std::string *)(j + 16);
  if (v74 < 0)
  {
    std::string::__init_copy_ctor_external(v26, v73, v72);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *a2;
    *((void *)j + 4) = *((void *)a2 + 2);
  }
  *((_DWORD *)j + 10) = 0;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 184) + 1);
  float v28 = *(float *)(a1 + 192);
  if (!v8 || (float)(v28 * (float)v8) < v27)
  {
    BOOL v29 = 1;
    if (v8 >= 3) {
      BOOL v29 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v8);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      int8x8_t prime = (int8x8_t)v31;
    }
    else {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *(void *)(a1 + 168);
    if (*(void *)&prime > v8) {
      goto LABEL_55;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 184) / *(float *)(a1 + 192));
      if (v8 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (*(void *)&prime <= v39) {
        int8x8_t prime = (int8x8_t)v39;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 168);
      }
      else
      {
        if (prime)
        {
LABEL_55:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v33 = operator new(8 * *(void *)&prime);
          char v34 = *(void **)(a1 + 160);
          *(void *)(a1 + 160) = v33;
          if (v34) {
            operator delete(v34);
          }
          uint64_t v35 = 0;
          *(int8x8_t *)(a1 + 168) = prime;
          do
            *(void *)(*(void *)(a1 + 160) + 8 * v35++) = 0;
          while (*(void *)&prime != v35);
          uint64_t v36 = (void *)*v25;
          if (*v25)
          {
            unint64_t v37 = v36[1];
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(void *)&prime) {
                v37 %= *(void *)&prime;
              }
            }
            else
            {
              v37 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 160) + 8 * v37) = v25;
            uint64_t v42 = (void *)*v36;
            if (*v36)
            {
              do
              {
                unint64_t v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(void *)&prime) {
                    v43 %= *(void *)&prime;
                  }
                }
                else
                {
                  v43 &= *(void *)&prime - 1;
                }
                if (v43 != v37)
                {
                  uint64_t v44 = *(void *)(a1 + 160);
                  if (!*(void *)(v44 + 8 * v43))
                  {
                    *(void *)(v44 + 8 * v43) = v36;
                    goto LABEL_80;
                  }
                  *uint64_t v36 = *v42;
                  void *v42 = **(void **)(*(void *)(a1 + 160) + 8 * v43);
                  **(void **)(*(void *)(a1 + 160) + 8 * v43) = v42;
                  uint64_t v42 = v36;
                }
                unint64_t v43 = v37;
LABEL_80:
                uint64_t v36 = v42;
                uint64_t v42 = (void *)*v42;
                unint64_t v37 = v43;
              }
              while (v42);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_84;
        }
        uint64_t v71 = *(void **)(a1 + 160);
        *(void *)(a1 + 160) = 0;
        if (v71) {
          operator delete(v71);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + 168) = 0;
      }
    }
LABEL_84:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v19 >= v8) {
        unint64_t v6 = v19 % v8;
      }
      else {
        unint64_t v6 = v19;
      }
    }
    else
    {
      unint64_t v6 = (v8 - 1) & v19;
    }
  }
  uint64_t v45 = *(void *)(a1 + 160);
  uint64_t v46 = *(void **)(v45 + 8 * v6);
  if (v46)
  {
    *(void *)uint64_t j = *v46;
  }
  else
  {
    uint64_t v47 = (void *)*v25;
    *(void *)uint64_t j = *v25;
    *uint64_t v25 = j;
    *(void *)(v45 + 8 * v6) = v25;
    if (!v47) {
      goto LABEL_98;
    }
    unint64_t v48 = v47[1];
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v48 >= v8) {
        v48 %= v8;
      }
    }
    else
    {
      v48 &= v8 - 1;
    }
    uint64_t v46 = (void *)(*(void *)(a1 + 160) + 8 * v48);
  }
  *uint64_t v46 = j;
LABEL_98:
  ++*(void *)(a1 + 184);
  char v70 = *(std::string **)(a1 + 144);
LABEL_99:
  uint64_t v69 = -1431655765 * (((unint64_t)v16 - v17) >> 3);
  *((_DWORD *)j + 10) = v69;
  unint64_t v49 = *(void *)(a1 + 152);
  if ((unint64_t)v70 >= v49)
  {
    uint64_t v51 = *(void *)(a1 + 136);
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v70 - v51) >> 3);
    if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v51) >> 3);
    uint64_t v54 = 2 * v53;
    if (2 * v53 <= v52 + 1) {
      uint64_t v54 = v52 + 1;
    }
    if (v53 >= 0x555555555555555) {
      unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v55 = v54;
    }
    v75.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 152);
    if (v55)
    {
      long long v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v55);
      uint64_t v58 = v57;
    }
    else
    {
      long long v56 = 0;
      uint64_t v58 = 0;
    }
    long long v60 = (std::string *)&v56[24 * v52];
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v60, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v61 = *a2;
      v60->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
    }
    uint64_t v63 = *(void *)(a1 + 136);
    unint64_t v62 = *(void *)(a1 + 144);
    if (v62 == v63)
    {
      int64x2_t v66 = vdupq_n_s64(v62);
      char v64 = v60;
    }
    else
    {
      char v64 = v60;
      do
      {
        long long v65 = *(_OWORD *)(v62 - 24);
        v64[-1].__r_.__value_.__r.__words[2] = *(void *)(v62 - 8);
        *(_OWORD *)&v64[-1].__r_.__value_.__l.__data_ = v65;
        --v64;
        *(void *)(v62 - 16) = 0;
        *(void *)(v62 - 8) = 0;
        *(void *)(v62 - 24) = 0;
        v62 -= 24;
      }
      while (v62 != v63);
      int64x2_t v66 = *(int64x2_t *)(a1 + 136);
    }
    long long v59 = v60 + 1;
    *(void *)(a1 + 136) = v64;
    *(void *)(a1 + 144) = v60 + 1;
    *(int64x2_t *)&v75.__begin_ = v66;
    unint64_t v67 = *(std::string **)(a1 + 152);
    *(void *)(a1 + 152) = &v56[24 * v58];
    v75.__end_cap_.__value_ = v67;
    v75.__first_ = (std::__split_buffer<std::string>::pointer)v66.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&v75);
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v70, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v50 = *a2;
      v70->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v50;
    }
    long long v59 = v70 + 1;
  }
  *(void *)(a1 + 144) = v59;
  return v69;
}

BOOL llvm::isCompileUnit(uint64_t a1)
{
  return (*(unsigned char *)(*(void *)a1 + 96) & 0xFB) != 2;
}

void *std::__function::__value_func<void ()(llvm::Error)>::~__value_func[abi:nn180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::operator()(uint64_t a1, uint64_t *a2)
{
  char v2 = *(void (**)(uint64_t *))(a1 + 8);
  uint64_t v4 = *a2;
  *a2 = 0;
  v2(&v4);
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_747908;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_747908;
  result[1] = v3;
  return result;
}

void std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::~__func()
{
}

__n128 GTMTLGetTextureLevelInfoForDeviceWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  MTLGetTextureLevelInfoForDeviceWithOptions();
  char v11 = a3 + 11;
  if ((unint64_t)(a3 - 501) <= 0x3E)
  {
    if (((1 << v11) & 0x2000000000100001) != 0)
    {
      *(_OWORD *)a1 = 0u;
      result.n128_u64[0] = 0;
      *(_OWORD *)(a1 + 48) = 0u;
      uint64_t v12 = 2 * a7;
      goto LABEL_7;
    }
    if (((1 << v11) & 0x4000000000800008) != 0) {
      goto LABEL_5;
    }
  }
  if (a3 == 590)
  {
LABEL_5:
    *(_OWORD *)a1 = 0u;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    uint64_t v12 = 4 * a7;
LABEL_7:
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    return result;
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __n128 result = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

uint64_t GTMTLPixelFormatGetInfoForDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t result = MTLPixelFormatGetInfoForDevice();
  char v6 = a3 + 11;
  if ((unint64_t)(a3 - 501) > 0x3E) {
    goto LABEL_4;
  }
  if (((1 << v6) & 0x2000000000100001) != 0)
  {
    uint64_t v7 = 2;
    goto LABEL_7;
  }
  if (((1 << v6) & 0x4000000000800008) == 0)
  {
LABEL_4:
    if (a3 != 590) {
      return result;
    }
  }
  uint64_t v7 = 4;
LABEL_7:
  *(void *)(a1 + 24) = v7;
  return result;
}

id MTLHeap_backbuffer(void *a1)
{
  id v1 = a1;
  id v2 = [v1 currentAllocatedSize];
  id v3 = [v1 resourceOptions];
  if ([v1 type])
  {
    if ([v1 type] == (char *)&def_1C1270 + 1) {
      id v4 = [v1 newBufferWithLength:v2 options:v3 offset:0];
    }
    else {
      id v4 = 0;
    }
  }
  else
  {
    id v4 = [v1 newBufferWithLength:v2 options:v3];
    [v4 makeAliasable];
  }

  return v4;
}

apr_hash_t *__cdecl apr_hash_make(apr_pool_t *pool)
{
  v6.__darwin_time_t tv_sec = 0;
  *(void *)&v6.tv_usec = 0;
  gettimeofday(&v6, 0);
  v6.__darwin_time_t tv_sec = v6.tv_usec + 1000000 * v6.tv_sec;
  __darwin_time_t tv_sec = v6.tv_sec;
  id v3 = apr_palloc(pool, 0x50uLL);
  *id v3 = pool;
  v3[9] = 0;
  v3[6] = 0xF00000000;
  *((_DWORD *)v3 + 14) = (&v6 ^ pool ^ v3 ^ tv_sec ^ HIDWORD(tv_sec)) - 1;
  id v4 = apr_palloc(pool, 0x80uLL);
  if (v4)
  {
    v4[6] = 0u;
    v4[7] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    _OWORD *v4 = 0u;
    v4[1] = 0u;
  }
  v3[1] = v4;
  v3[8] = 0;
  return (apr_hash_t *)v3;
}

apr_hash_index_t *__cdecl apr_hash_next(apr_hash_index_t *hi)
{
  id v1 = (void *)*((void *)hi + 2);
  *((void *)hi + 1) = v1;
  if (v1)
  {
LABEL_5:
    *((void *)hi + 2) = *v1;
  }
  else
  {
    uint64_t v2 = *(void *)hi;
    unsigned int v3 = *(_DWORD *)(*(void *)hi + 52);
    unsigned int v4 = *((_DWORD *)hi + 6);
    while (v4 <= v3)
    {
      id v1 = *(void **)(*(void *)(v2 + 8) + 8 * v4++);
      *((_DWORD *)hi + 6) = v4;
      *((void *)hi + 1) = v1;
      if (v1) {
        goto LABEL_5;
      }
    }
    return 0;
  }
  return hi;
}

apr_hash_index_t *__cdecl apr_hash_first(apr_pool_t *p, apr_hash_t *ht)
{
  if (p) {
    unsigned int v3 = (char *)apr_palloc(p, 0x20uLL);
  }
  else {
    unsigned int v3 = (char *)ht + 16;
  }
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)unsigned int v3 = ht;
  *((_DWORD *)v3 + 6) = 0;

  return apr_hash_next((apr_hash_index_t *)v3);
}

apr_hash_t *__cdecl apr_hash_copy(apr_pool_t *pool, const apr_hash_t *h)
{
  uint64_t result = (apr_hash_t *)apr_palloc(pool, 40 * *((unsigned int *)h + 12) + 8 * (*((_DWORD *)h + 13) + 1) + 80);
  uint64_t v5 = 0;
  timeval v6 = 0;
  *((_DWORD *)result + 12) = *((_DWORD *)h + 12);
  uint64_t v7 = *(void *)((char *)h + 52);
  *(void *)((char *)result + 52) = v7;
  *((void *)result + 8) = *((void *)h + 8);
  *((void *)result + 9) = 0;
  *(void *)uint64_t result = pool;
  *((void *)result + 1) = (char *)result + 80;
  unint64_t v8 = (char *)result + 8 * (*((_DWORD *)h + 13) + 1) + 80;
  if ((v7 + 1) > 1) {
    uint64_t v9 = (v7 + 1);
  }
  else {
    uint64_t v9 = 1;
  }
  do
  {
    uint8x8_t v10 = (char **)(*((void *)result + 1) + 8 * v5);
    char v11 = *(uint64_t **)(*((void *)h + 1) + 8 * v5);
    if (v11)
    {
      do
      {
        uint64_t v12 = (char **)(v6 + 1);
        uint64_t v13 = &v8[40 * v6];
        llvm::MemoryBuffer *v10 = v13;
        *((_DWORD *)v13 + 2) = *((_DWORD *)v11 + 2);
        uint64_t v14 = (char *)v11[3];
        *((void *)v13 + 2) = v11[2];
        timeval v6 = (char **)*v10;
        unint64_t v15 = (char *)v11[4];
        void v6[3] = v14;
        v6[4] = v15;
        uint8x8_t v10 = (char **)*v10;
        char v11 = (uint64_t *)*v11;
        LODWORD(v6) = v12;
      }
      while (v11);
    }
    else
    {
      uint64_t v12 = v6;
    }
    llvm::MemoryBuffer *v10 = 0;
    ++v5;
    timeval v6 = v12;
  }
  while (v5 != v9);
  return result;
}

void *find_entry(uint64_t a1, unsigned char *a2, size_t a3, uint64_t a4)
{
  __int n = a3;
  uint64_t v7 = *(uint64_t (**)(unsigned char *, size_t *))(a1 + 64);
  if (v7)
  {
    unsigned int v8 = v7(a2, &__n);
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(a1 + 56);
    if (a3 == -1)
    {
      int v18 = *a2;
      if (*a2)
      {
        unint64_t v19 = a2;
        do
        {
          unsigned int v8 = 33 * v8 + v18;
          int v20 = *++v19;
          int v18 = v20;
        }
        while (v20);
      }
      else
      {
        unint64_t v19 = a2;
      }
      __int n = v19 - a2;
    }
    else if (a3)
    {
      uint64_t v14 = a2;
      do
      {
        int v15 = *v14++;
        unsigned int v8 = 33 * v8 + v15;
        --a3;
      }
      while (a3);
    }
  }
  uint64_t v9 = (void *)(*(void *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 52) & v8));
  uint64_t v10 = *v9;
  if (*v9)
  {
    size_t v11 = __n;
    while (1)
    {
      uint64_t v12 = v9;
      uint64_t v9 = (void *)v10;
      if (*(_DWORD *)(v10 + 8) == v8 && *(void *)(v10 + 24) == v11 && !memcmp(*(const void **)(v10 + 16), a2, v11)) {
        break;
      }
      uint64_t v10 = *v9;
      if (!*v9) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (a4)
    {
      uint64_t v13 = *(_DWORD **)(a1 + 72);
      if (v13) {
        *(void *)(a1 + 72) = *(void *)v13;
      }
      else {
        uint64_t v13 = apr_palloc(*(apr_pool_t **)a1, 0x28uLL);
      }
      *(void *)uint64_t v13 = 0;
      void v13[2] = v8;
      size_t v16 = __n;
      *((void *)v13 + 2) = a2;
      *((void *)v13 + 3) = v16;
      *((void *)v13 + 4) = a4;
      *uint64_t v9 = v13;
      ++*(_DWORD *)(a1 + 48);
    }
    return v9;
  }
  return v12;
}

void apr_hash_set(apr_hash_t *ht, const void *key, apr_ssize_t klen, const void *val)
{
  entry = find_entry((uint64_t)ht, key, klen, (uint64_t)val);
  uint64_t v7 = (void *)*entry;
  if (*entry)
  {
    if (val)
    {
      v7[4] = val;
      unsigned int v8 = *((_DWORD *)ht + 13);
      if (*((_DWORD *)ht + 12) > v8)
      {
        int v9 = (2 * v8) | 1;
        apr_size_t v10 = 8 * (2 * v8 + 2);
        size_t v11 = apr_palloc(*(apr_pool_t **)ht, v10);
        uint64_t v12 = v11;
        if (v11) {
          bzero(v11, v10);
        }
        uint64_t v13 = (apr_hash_t *)((char *)ht + 16);
        *((void *)ht + 3) = 0;
        *((void *)ht + 4) = 0;
        *((void *)ht + 2) = ht;
        *((_DWORD *)ht + 10) = 0;
        while (1)
        {
          uint64_t v13 = apr_hash_next(v13);
          if (!v13) {
            break;
          }
          uint64_t v14 = *((void *)v13 + 1);
          unsigned int v15 = *(_DWORD *)(v14 + 8) & v9;
          *(void *)uint64_t v14 = v12[v15];
          v12[v15] = v14;
        }
        *((void *)ht + 1) = v12;
        *((_DWORD *)ht + 13) = v9;
      }
    }
    else
    {
      void *entry = *v7;
      void *v7 = *((void *)ht + 9);
      *((void *)ht + 9) = v7;
      --*((_DWORD *)ht + 12);
    }
  }
}

void apr_hash_clear(apr_hash_t *ht)
{
  *((void *)ht + 4) = 0;
  *((void *)ht + 2) = ht;
  *((void *)ht + 3) = 0;
  *((_DWORD *)ht + 10) = 0;
  uint64_t v2 = apr_hash_next((apr_hash_t *)((char *)ht + 16));
  if (v2)
  {
    unsigned int v3 = v2;
    do
    {
      apr_hash_set(ht, *(const void **)(*((void *)v3 + 1) + 16), *(void *)(*((void *)v3 + 1) + 24), 0);
      unsigned int v3 = apr_hash_next(v3);
    }
    while (v3);
  }
}

vm_address_t GTCoreAlloc(memory_object_size_t a1)
{
  vm_address_t address = 0;
  mach_port_t object_handle = 0;
  memory_object_size_t size = a1;
  mach_error_t memory_entry_64 = mach_make_memory_entry_64(mach_task_self_, &size, 0, 139267, &object_handle, 0);
  if (memory_entry_64)
  {
    mach_error_t v3 = memory_entry_64;
    if (!s_logUsingOsLog)
    {
      apr_size_t v10 = __stderrp;
      mach_error_string(memory_entry_64);
      fprintf(v10, "warning: failed to create memory entry error 0x%x (%s)\n");
      return 0;
    }
    unsigned int v4 = gt_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = mach_error_string(v3);
      *(_DWORD *)buf = 67109378;
      mach_error_t v17 = v3;
      __int16 v18 = 2080;
      unint64_t v19 = v5;
      timeval v6 = "warning: failed to create memory entry error 0x%x (%s)";
LABEL_9:
      _os_log_error_impl(&def_1C1270, v4, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
    }
  }
  else
  {
    mach_error_t v7 = vm_map(mach_task_self_, &address, a1, 0, 1, object_handle, 0, 0, 3, 3, 1u);
    if (!v7)
    {
      mach_port_deallocate(mach_task_self_, object_handle);
      return address;
    }
    mach_error_t v8 = v7;
    if (!s_logUsingOsLog)
    {
      uint64_t v12 = __stderrp;
      mach_error_string(v7);
      fprintf(v12, "warning: failed to map memory error 0x%x (%s)\n");
      return 0;
    }
    unsigned int v4 = gt_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v9 = mach_error_string(v8);
      *(_DWORD *)buf = 67109378;
      mach_error_t v17 = v8;
      __int16 v18 = 2080;
      unint64_t v19 = v9;
      timeval v6 = "warning: failed to map memory error 0x%x (%s)";
      goto LABEL_9;
    }
  }
  return 0;
}

uint64_t atomic_cleanup(uint64_t a1)
{
  if (hash_mutex == a1) {
    hash_mutex = 0;
  }
  return 0;
}

void apr_pool_destroy(apr_pool_t *p)
{
  for (uint64_t i = *((void *)p + 14); i; uint64_t i = *((void *)p + 14))
  {
    *((void *)p + 14) = *(void *)i;
    (*(void (**)(void))(i + 16))(*(void *)(i + 8));
  }
  *((void *)p + 14) = 0;
  while (1)
  {
    timeval v6 = (apr_pool_t *)*((void *)p + 1);
    if (!v6) {
      break;
    }
    apr_pool_destroy(v6);
  }
  while (1)
  {
    uint64_t v7 = *((void *)p + 4);
    if (!v7) {
      break;
    }
    *((void *)p + 4) = *(void *)v7;
    (*(void (**)(void))(v7 + 16))(*(void *)(v7 + 8));
  }
  free_proc_chain(*((unsigned int **)p + 7), v1, v2, v3);
  if (*(void *)p)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)p + 48) + 24);
    if (v8) {
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
    }
    uint64_t v9 = *((void *)p + 2);
    **((void **)p + 3) = v9;
    if (v9) {
      *(void *)(*((void *)p + 2) + 24) = *((void *)p + 3);
    }
    if (v8) {
      pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
    }
  }
  apr_size_t v10 = (unint64_t *)*((void *)p + 6);
  vm_address_t v11 = *((void *)p + 12);
  **(void **)(v11 + 8) = 0;
  if ((apr_pool_t *)v10[4] == p)
  {
    v10[3] = 0;
  }
  else
  {
    unint64_t v12 = v10[3];
    if (v12) {
      pthread_mutex_lock((pthread_mutex_t *)(v12 + 8));
    }
  }
  vm_address_t v13 = 0;
  unint64_t v14 = *v10;
  unint64_t v15 = v10[1];
  unint64_t v16 = v10[2];
  do
  {
    while (1)
    {
      while (1)
      {
        vm_address_t v17 = v11;
        vm_address_t v11 = *(void *)v11;
        unint64_t v18 = *(unsigned int *)(v17 + 16);
        if (!v15 || v16 > v18) {
          break;
        }
        *(void *)vm_address_t v17 = v13;
        vm_address_t v13 = v17;
        if (!v11) {
          goto LABEL_38;
        }
      }
      if (v18 > 0x13) {
        break;
      }
      unint64_t v19 = (uint64_t *)&v10[v18];
      uint64_t v20 = v19[5];
      *(void *)vm_address_t v17 = v20;
      if (v14 < v18 && v20 == 0) {
        unint64_t v14 = v18;
      }
      v19[5] = v17;
      if (v16 <= v18)
      {
        unint64_t v16 = 0;
        if (!v11) {
          goto LABEL_38;
        }
      }
      else
      {
        v16 += ~v18;
        if (!v11) {
          goto LABEL_38;
        }
      }
    }
    *(void *)vm_address_t v17 = v10[5];
    v10[5] = v17;
    BOOL v22 = v16 > v18;
    v16 += ~v18;
    if (!v22) {
      unint64_t v16 = 0;
    }
  }
  while (v11);
LABEL_38:
  unint64_t *v10 = v14;
  v10[2] = v16;
  unint64_t v23 = v10[3];
  if (v23) {
    pthread_mutex_unlock((pthread_mutex_t *)(v23 + 8));
  }
  if (v13)
  {
    do
    {
      vm_address_t v24 = *(void *)v13;
      vm_deallocate(mach_task_self_, v13, ((*(_DWORD *)(v13 + 16) << 12) + 4096));
      vm_address_t v13 = v24;
    }
    while (v24);
  }
  if ((apr_pool_t *)v10[4] == p)
  {
    apr_allocator_destroy((apr_allocator_t *)v10);
  }
}

unsigned int *free_proc_chain(unsigned int *result, uint64_t a2, apr_exit_why_e *a3, apr_wait_how_e a4)
{
  if (!result) {
    return result;
  }
  unsigned int v4 = result;
  uint64_t v5 = result;
  do
  {
    uint64_t result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v5, (int *)((char *)&def_1C1270 + 1), a3, a4);
    if (result != 70006) {
      v5[2] = 0;
    }
    uint64_t v5 = (unsigned int *)*((void *)v5 + 2);
  }
  while (v5);
  timeval v6 = v4;
  do
  {
    unsigned int v7 = v6[2];
    if (v7 == 1)
    {
      uint64_t result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v6, 9);
    }
    else if (v7 == 4 || v7 == 2)
    {
      uint64_t result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v6, 15);
      if (!result) {
        LODWORD(v5) = 1;
      }
    }
    timeval v6 = (unsigned int *)*((void *)v6 + 2);
  }
  while (v6);
  uint64_t v9 = v4;
  if (!v5) {
    goto LABEL_29;
  }
  long long v14 = xmmword_4C8090;
  uint64_t result = (unsigned int *)select(0, 0, 0, 0, (timeval *)&v14);
  unint64_t v10 = 46875;
  while (2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v4;
    do
    {
      uint64_t v13 = v11;
      if (v12[2] == 2)
      {
        uint64_t v11 = 1;
        uint64_t result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v12, (int *)((char *)&def_1C1270 + 1), a3, a4);
        if (result == 70006) {
          goto LABEL_24;
        }
        v12[2] = 0;
      }
      uint64_t v11 = v13;
LABEL_24:
      unint64_t v12 = (unsigned int *)*((void *)v12 + 2);
    }
    while (v12);
    if (v11 && v10 <= 0x2DC6BF)
    {
      *(void *)&long long v14 = v10 / 0xF4240;
      *((void *)&v14 + 1) = v10 % 0xF4240;
      uint64_t result = (unsigned int *)select(0, 0, 0, 0, (timeval *)&v14);
      v10 *= 2;
      continue;
    }
    break;
  }
  uint64_t v9 = v4;
  do
  {
LABEL_29:
    if (v9[2] == 2) {
      uint64_t result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v9, 9);
    }
    uint64_t v9 = (unsigned int *)*((void *)v9 + 2);
  }
  while (v9);
  do
  {
    if (v4[2]) {
      uint64_t result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v4, 0, a3, a4);
    }
    unsigned int v4 = (unsigned int *)*((void *)v4 + 2);
  }
  while (v4);
  return result;
}

void apr_allocator_destroy(apr_allocator_t *allocator)
{
  for (uint64_t i = 0; i != 20; ++i)
  {
    apr_wait_how_e v3 = (char *)allocator + 8 * i;
    vm_address_t v6 = *((void *)v3 + 5);
    uint64_t v5 = (vm_address_t *)(v3 + 40);
    vm_address_t v4 = v6;
    if (v6)
    {
      do
      {
        vm_address_t *v5 = *(void *)v4;
        vm_deallocate(mach_task_self_, v4, ((*(_DWORD *)(v4 + 16) << 12) + 4096));
        vm_address_t v4 = *v5;
      }
      while (*v5);
    }
  }
  vm_map_t v7 = mach_task_self_;

  vm_deallocate(v7, (vm_address_t)allocator, 0xC8uLL);
}

void *allocator_alloc(unint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = (a2 + 4135) & 0xFFFFFFFFFFFFF000;
  unint64_t v4 = 0x2000;
  if (v3 > 0x2000) {
    unint64_t v4 = (a2 + 4135) & 0xFFFFFFFFFFFFF000;
  }
  if (v3 >= a2) {
    memory_object_size_t v5 = v4;
  }
  else {
    memory_object_size_t v5 = 0;
  }
  if (v3 >= a2)
  {
    unint64_t v6 = v4 >> 12;
    unint64_t v7 = (v4 >> 12) - 1;
    if (HIDWORD(v7)) {
      return 0;
    }
    unint64_t v9 = *a1;
    if (v7 <= *a1)
    {
      unint64_t v14 = a1[3];
      if (v14)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v14 + 8));
        unint64_t v9 = *a1;
      }
      unint64_t v15 = &a1[v7];
      vm_address_t v17 = (void *)v15[5];
      unint64_t v16 = v15 + 5;
      uint64_t v2 = v17;
      BOOL v18 = v17 == 0;
      BOOL v19 = v7 < v9;
      if (v17) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v7 >= v9;
      }
      if (!v20)
      {
        do
        {
          unint64_t v21 = (void *)v16[1];
          ++v16;
          uint64_t v2 = v21;
          BOOL v18 = v21 == 0;
          BOOL v19 = v6 < v9;
          if (v21) {
            BOOL v22 = 1;
          }
          else {
            BOOL v22 = v6 >= v9;
          }
          ++v6;
        }
        while (!v22);
      }
      if (!v18)
      {
        uint64_t v25 = *v2;
        *unint64_t v16 = *v2;
        if (v25) {
          BOOL v19 = 1;
        }
        if (!v19)
        {
          uint64_t v26 = v16 - 1;
          do
          {
            if (*v26--) {
              BOOL v28 = 1;
            }
            else {
              BOOL v28 = v9 == 1;
            }
            --v9;
          }
          while (!v28);
          *a1 = v9;
        }
        uint64_t v13 = (*((_DWORD *)v2 + 4) + 1);
LABEL_43:
        unint64_t v29 = a1[2] + v13;
        if (v29 >= a1[1]) {
          unint64_t v29 = a1[1];
        }
        a1[2] = v29;
        unint64_t v30 = a1[3];
        if (v30) {
          pthread_mutex_unlock((pthread_mutex_t *)(v30 + 8));
        }
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v2 = a1 + 5;
      if (!a1[5])
      {
LABEL_30:
        vm_address_t v24 = GTCoreAlloc(v5);
        uint64_t v2 = (void *)v24;
        if (!v24) {
          return v2;
        }
        *(_DWORD *)(v24 + 16) = v7;
        *(void *)(v24 + 32) = v24 + v5;
LABEL_47:
        *uint64_t v2 = 0;
        v2[3] = v2 + 5;
        return v2;
      }
      unint64_t v10 = a1[3];
      if (v10) {
        pthread_mutex_lock((pthread_mutex_t *)(v10 + 8));
      }
      while (1)
      {
        uint64_t v11 = v2;
        uint64_t v2 = (void *)*v2;
        if (!v2) {
          break;
        }
        unint64_t v12 = *((unsigned int *)v2 + 4);
        if (v7 <= v12)
        {
          void *v11 = *v2;
          uint64_t v13 = (v12 + 1);
          goto LABEL_43;
        }
      }
    }
    unint64_t v23 = a1[3];
    if (v23) {
      pthread_mutex_unlock((pthread_mutex_t *)(v23 + 8));
    }
    goto LABEL_30;
  }
  return v2;
}

apr_status_t apr_pool_create_ex(apr_pool_t **newpool, apr_pool_t *parent, apr_abortfunc_t abort_fn, apr_allocator_t *allocator)
{
  unint64_t v4 = (unint64_t *)abort_fn;
  apr_pool_t *newpool = 0;
  if (parent) {
    unint64_t v6 = parent;
  }
  else {
    unint64_t v6 = (apr_pool_t *)global_pool;
  }
  if (v6)
  {
    unint64_t v7 = (apr_pool_t *)*((void *)v6 + 8);
    if (abort_fn) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  unint64_t v7 = 0;
  if (!abort_fn) {
LABEL_6:
  }
    unint64_t v4 = (unint64_t *)*((void *)v6 + 6);
LABEL_7:
  uint64_t v8 = (apr_pool_t *)allocator_alloc(v4, 0x1FD8uLL);
  if (v8)
  {
    *(void *)uint64_t v8 = v8;
    *((void *)v8 + 1) = v8;
    unint64_t v9 = (apr_pool_t **)*((void *)v8 + 3);
    *((void *)v8 + 3) = v9 + 15;
    v9[12] = v8;
    v9[13] = (apr_pool_t *)(v9 + 15);
    v9[14] = 0;
    v9[6] = (apr_pool_t *)v4;
    v9[7] = 0;
    void v9[4] = 0;
    v9[5] = 0;
    v9[10] = 0;
    v9[11] = v8;
    v9[8] = v7;
    v9[9] = 0;
    *unint64_t v9 = v6;
    v9[1] = 0;
    if (v6)
    {
      uint64_t v10 = *(void *)(*((void *)v6 + 6) + 24);
      if (v10) {
        pthread_mutex_lock((pthread_mutex_t *)(v10 + 8));
      }
      uint64_t v13 = (apr_pool_t *)*((void *)v6 + 1);
      unint64_t v12 = (apr_pool_t ***)((char *)v6 + 8);
      uint64_t v11 = v13;
      v9[2] = v13;
      if (v13) {
        *((void *)v11 + 3) = v9 + 2;
      }
      unsigned int *v12 = v9;
      v9[3] = (apr_pool_t *)v12;
      if (v10) {
        pthread_mutex_unlock((pthread_mutex_t *)(v10 + 8));
      }
    }
    else
    {
      v9[2] = 0;
      v9[3] = 0;
    }
    apr_status_t v14 = 0;
    apr_pool_t *newpool = (apr_pool_t *)v9;
  }
  else
  {
    apr_status_t v14 = 12;
    if (v7) {
      ((void (*)(uint64_t))v7)(12);
    }
  }
  return v14;
}

void *__cdecl apr_palloc(apr_pool_t *p, apr_size_t size)
{
  apr_size_t v3 = (size + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v3 < size)
  {
LABEL_2:
    unint64_t v4 = (void (*)(uint64_t))*((void *)p + 8);
    if (v4) {
      v4(12);
    }
    return 0;
  }
  unint64_t v6 = (void *)*((void *)p + 11);
  uint64_t result = (void *)v6[3];
  if (v3 <= v6[4] - (void)result)
  {
    void v6[3] = (char *)result + v3;
    return result;
  }
  unint64_t v7 = (void *)*v6;
  if (v3 <= *(void *)(*v6 + 32) - *(void *)(*v6 + 24))
  {
    *(void *)v7[1] = *v7;
    *(void *)(*v7 + 8) = v7[1];
  }
  else
  {
    unint64_t v7 = allocator_alloc(*((unint64_t **)p + 6), (size + 7) & 0xFFFFFFFFFFFFFFF8);
    if (!v7) {
      goto LABEL_2;
    }
  }
  *((_DWORD *)v7 + 5) = 0;
  uint64_t result = (void *)v7[3];
  v7[3] = (char *)result + v3;
  uint64_t v8 = (void *)v6[1];
  v7[1] = v8;
  void *v8 = v7;
  void *v7 = v6;
  v6[1] = v7;
  *((void *)p + 11) = v7;
  unint64_t v9 = (uint64_t)(v6[4] - v6[3]) >> 12;
  *((_DWORD *)v6 + 5) = v9;
  if (v9 < *(unsigned int *)(*v6 + 20))
  {
    uint64_t v10 = (uint64_t *)*v6;
    do
      uint64_t v10 = (uint64_t *)*v10;
    while (*((_DWORD *)v10 + 5) > v9);
    void *v7 = *v6;
    *(void *)(*v6 + 8) = v6[1];
    uint64_t v11 = (void *)v10[1];
    v6[1] = v11;
    void *v11 = v6;
    void *v6 = v10;
    v10[1] = (uint64_t)v6;
  }
  return result;
}

void apr_pool_clear(apr_pool_t *p)
{
  for (uint64_t i = *((void *)p + 14); i; uint64_t i = *((void *)p + 14))
  {
    *((void *)p + 14) = *(void *)i;
    (*(void (**)(void))(i + 16))(*(void *)(i + 8));
  }
  *((void *)p + 14) = 0;
  while (1)
  {
    unint64_t v6 = (apr_pool_t *)*((void *)p + 1);
    if (!v6) {
      break;
    }
    apr_pool_destroy(v6);
  }
  uint64_t v8 = (uint64_t *)((char *)p + 32);
  uint64_t v7 = *((void *)p + 4);
  if (v7)
  {
    do
    {
      uint64_t *v8 = *(void *)v7;
      (*(void (**)(void))(v7 + 16))(*(void *)(v7 + 8));
      uint64_t v7 = *v8;
    }
    while (*v8);
  }
  uint64_t *v8 = 0;
  *((void *)p + 5) = 0;
  free_proc_chain(*((unsigned int **)p + 7), v1, v2, v3);
  *((void *)p + 7) = 0;
  *((void *)p + 9) = 0;
  uint64_t v10 = *((void *)p + 12);
  uint64_t v9 = *((void *)p + 13);
  *((void *)p + 11) = v10;
  *(void *)(v10 + 24) = v9;
  if (*(void *)v10 != v10)
  {
    **(void **)(v10 + 8) = 0;
    uint64_t v11 = (unint64_t *)*((void *)p + 6);
    unint64_t v12 = *(vm_address_t **)v10;
    unint64_t v13 = v11[3];
    if (v13) {
      pthread_mutex_lock((pthread_mutex_t *)(v13 + 8));
    }
    vm_address_t v14 = 0;
    unint64_t v15 = *v11;
    unint64_t v16 = v11[1];
    unint64_t v17 = v11[2];
    do
    {
      while (1)
      {
        while (1)
        {
          BOOL v18 = v12;
          unint64_t v12 = (vm_address_t *)*v12;
          unint64_t v19 = *((unsigned int *)v18 + 4);
          if (!v16 || v17 > v19) {
            break;
          }
          *BOOL v18 = v14;
          vm_address_t v14 = (vm_address_t)v18;
          if (!v12) {
            goto LABEL_30;
          }
        }
        if (v19 > 0x13) {
          break;
        }
        BOOL v20 = &v11[v19];
        vm_address_t v21 = v20[5];
        *BOOL v18 = v21;
        if (v15 < v19 && v21 == 0) {
          unint64_t v15 = v19;
        }
        v20[5] = (unint64_t)v18;
        if (v17 <= v19)
        {
          unint64_t v17 = 0;
          if (!v12) {
            goto LABEL_30;
          }
        }
        else
        {
          v17 += ~v19;
          if (!v12) {
            goto LABEL_30;
          }
        }
      }
      *BOOL v18 = v11[5];
      v11[5] = (unint64_t)v18;
      BOOL v23 = v17 > v19;
      v17 += ~v19;
      if (!v23) {
        unint64_t v17 = 0;
      }
    }
    while (v12);
LABEL_30:
    unint64_t *v11 = v15;
    v11[2] = v17;
    unint64_t v24 = v11[3];
    if (v24) {
      pthread_mutex_unlock((pthread_mutex_t *)(v24 + 8));
    }
    if (v14)
    {
      do
      {
        vm_address_t v25 = *(void *)v14;
        vm_deallocate(mach_task_self_, v14, ((*(_DWORD *)(v14 + 16) << 12) + 4096));
        vm_address_t v14 = v25;
      }
      while (v25);
    }
    *(void *)uint64_t v10 = v10;
    *(void *)(v10 + 8) = v10;
  }
}

uint64_t psprintf_flush(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  size_t v4 = *(void *)a1 - *(void *)(v3 + 24);
  if (2 * v4 <= 0x20) {
    unint64_t v5 = 32;
  }
  else {
    unint64_t v5 = 2 * v4;
  }
  if (!*(unsigned char *)(a1 + 32))
  {
    unint64_t v6 = *(void **)v3;
    if (v5 <= *(void *)(*(void *)v3 + 32) - *(void *)(*(void *)v3 + 24))
    {
      *(void *)v6[1] = *v6;
      *(void *)(*v6 + 8) = v6[1];
      uint64_t v10 = *(void **)(v3 + 8);
      v6[1] = v10;
      void *v10 = v6;
      void *v6 = v3;
      *(void *)(v3 + 8) = v6;
      *((_DWORD *)v6 + 5) = 0;
      *(void *)(v2 + 88) = v6;
      unint64_t v11 = (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 12;
      *(_DWORD *)(v3 + 20) = v11;
      if (v11 < *(unsigned int *)(*(void *)v3 + 20))
      {
        unint64_t v12 = *(void **)v3;
        do
          unint64_t v12 = (void *)*v12;
        while (*((_DWORD *)v12 + 5) > v11);
        void *v6 = *(void *)v3;
        *(void *)(*(void *)v3 + 8) = *(void *)(v3 + 8);
        unint64_t v13 = (void *)v12[1];
        *(void *)(v3 + 8) = v13;
        *unint64_t v13 = v3;
        *(void *)uint64_t v3 = v12;
        v12[1] = v3;
        unint64_t v6 = *(void **)(v2 + 88);
      }
      goto LABEL_10;
    }
  }
  uint64_t v7 = allocator_alloc(*(unint64_t **)(v2 + 48), v5);
  if (v7)
  {
    unint64_t v6 = v7;
    if (*(unsigned char *)(a1 + 32))
    {
      *(void *)uint64_t v3 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v3;
    }
    *(unsigned char *)(a1 + 32) = 1;
LABEL_10:
    memcpy((void *)v6[3], *(const void **)(v3 + 24), v4);
    uint64_t result = 0;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v6[4] - 1;
    *(void *)a1 = v6[3] + v4;
    *(void *)(a1 + 8) = v9;
    return result;
  }
  return 0xFFFFFFFFLL;
}

char *apr_psprintf(apr_pool_t *p, const char *fmt, ...)
{
  va_start(va, fmt);
  uint64_t v47 = 0;
  vm_address_t address = 0;
  vm_address_t v45 = *((void *)p + 11);
  uint64_t v46 = p;
  size_t v4 = *(char **)(v45 + 32);
  c.curpos = *(char **)(v45 + 24);
  c.endpos = v4 - 1;
  if (c.curpos == v4 && psprintf_flush((uint64_t)&c) == -1
    || apr_vformatter((int (__cdecl *)(apr_vformatter_buff_t *))psprintf_flush, &c, fmt, va) == -1)
  {
    BOOL v28 = (void (*)(uint64_t))*((void *)p + 8);
    if (v28) {
      v28(12);
    }
    if ((_BYTE)v47)
    {
      unint64_t v29 = (vm_address_t *)v45;
      *(void *)vm_address_t v45 = address;
      unint64_t v30 = (unint64_t *)*((void *)p + 6);
      unint64_t v31 = v30[3];
      if (v31) {
        pthread_mutex_lock((pthread_mutex_t *)(v31 + 8));
      }
      vm_address_t v32 = 0;
      unint64_t v33 = *v30;
      unint64_t v34 = v30[1];
      unint64_t v35 = v30[2];
      do
      {
        while (1)
        {
          while (1)
          {
            uint64_t v36 = v29;
            unint64_t v29 = (vm_address_t *)*v29;
            unint64_t v37 = *((unsigned int *)v36 + 4);
            if (!v34 || v35 > v37) {
              break;
            }
            *uint64_t v36 = v32;
            vm_address_t v32 = (vm_address_t)v36;
            if (!v29) {
              goto LABEL_59;
            }
          }
          if (v37 > 0x13) {
            break;
          }
          uint8x8_t v38 = &v30[v37];
          vm_address_t v39 = v38[5];
          *uint64_t v36 = v39;
          if (v33 < v37 && v39 == 0) {
            unint64_t v33 = v37;
          }
          v38[5] = (unint64_t)v36;
          if (v35 <= v37)
          {
            unint64_t v35 = 0;
            if (!v29) {
              goto LABEL_59;
            }
          }
          else
          {
            v35 += ~v37;
            if (!v29) {
              goto LABEL_59;
            }
          }
        }
        *uint64_t v36 = v30[5];
        v30[5] = (unint64_t)v36;
        BOOL v19 = v35 > v37;
        v35 += ~v37;
        if (!v19) {
          unint64_t v35 = 0;
        }
      }
      while (v29);
LABEL_59:
      *unint64_t v30 = v33;
      v30[2] = v35;
      unint64_t v41 = v30[3];
      if (v41) {
        pthread_mutex_unlock((pthread_mutex_t *)(v41 + 8));
      }
      if (v32)
      {
        do
        {
          vm_address_t v42 = *(void *)v32;
          vm_deallocate(mach_task_self_, v32, ((*(_DWORD *)(v32 + 16) << 12) + 4096));
          vm_address_t v32 = v42;
        }
        while (v42);
      }
    }
    return 0;
  }
  else
  {
    unint64_t v5 = c.curpos++;
    char *v5 = 0;
    unint64_t v6 = *(char **)(v45 + 24);
    *(void *)(v45 + 24) = &v6[(c.curpos - v6 + 7) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = (vm_address_t *)address;
    if (address)
    {
      uint64_t v8 = (unint64_t *)*((void *)p + 6);
      unint64_t v9 = v8[3];
      if (v9) {
        pthread_mutex_lock((pthread_mutex_t *)(v9 + 8));
      }
      vm_address_t v10 = 0;
      unint64_t v11 = *v8;
      unint64_t v12 = v8[1];
      unint64_t v13 = v8[2];
      do
      {
        while (1)
        {
          while (1)
          {
            vm_address_t v14 = v7;
            uint64_t v7 = (vm_address_t *)*v7;
            unint64_t v15 = *((unsigned int *)v14 + 4);
            if (!v12 || v13 > v15) {
              break;
            }
            *vm_address_t v14 = v10;
            vm_address_t v10 = (vm_address_t)v14;
            if (!v7) {
              goto LABEL_26;
            }
          }
          if (v15 > 0x13) {
            break;
          }
          unint64_t v16 = &v8[v15];
          vm_address_t v17 = v16[5];
          *vm_address_t v14 = v17;
          if (v11 < v15 && v17 == 0) {
            unint64_t v11 = v15;
          }
          v16[5] = (unint64_t)v14;
          if (v13 <= v15)
          {
            unint64_t v13 = 0;
            if (!v7) {
              goto LABEL_26;
            }
          }
          else
          {
            v13 += ~v15;
            if (!v7) {
              goto LABEL_26;
            }
          }
        }
        *vm_address_t v14 = v8[5];
        v8[5] = (unint64_t)v14;
        BOOL v19 = v13 > v15;
        v13 += ~v15;
        if (!v19) {
          unint64_t v13 = 0;
        }
      }
      while (v7);
LABEL_26:
      unint64_t *v8 = v11;
      v8[2] = v13;
      unint64_t v20 = v8[3];
      if (v20) {
        pthread_mutex_unlock((pthread_mutex_t *)(v20 + 8));
      }
      if (v10)
      {
        do
        {
          vm_address_t v21 = *(void *)v10;
          vm_deallocate(mach_task_self_, v10, ((*(_DWORD *)(v10 + 16) << 12) + 4096));
          vm_address_t v10 = v21;
        }
        while (v21);
      }
    }
    if ((_BYTE)v47)
    {
      BOOL v22 = (uint64_t *)*((void *)p + 11);
      BOOL v23 = (void *)v45;
      *(_DWORD *)(v45 + 20) = 0;
      unint64_t v24 = (void *)v22[1];
      v23[1] = v24;
      *unint64_t v24 = v23;
      *BOOL v23 = v22;
      v22[1] = (uint64_t)v23;
      *((void *)p + 11) = v23;
      unint64_t v25 = (v22[4] - v22[3]) >> 12;
      *((_DWORD *)v22 + 5) = v25;
      if (v25 < *(unsigned int *)(*v22 + 20))
      {
        uint64_t v26 = (uint64_t *)*v22;
        do
          uint64_t v26 = (uint64_t *)*v26;
        while (*((_DWORD *)v26 + 5) > v25);
        *BOOL v23 = *v22;
        *(void *)(*v22 + 8) = v22[1];
        float v27 = (void *)v26[1];
        v22[1] = (uint64_t)v27;
        *float v27 = v22;
        uint64_t *v22 = (uint64_t)v26;
        v26[1] = (uint64_t)v22;
      }
    }
  }
  return v6;
}

void apr_pool_cleanup_register(apr_pool_t *p, const void *data, apr_status_t (__cdecl *plain_cleanup)(void *), apr_status_t (__cdecl *child_cleanup)(void *))
{
  if (p)
  {
    uint64_t v8 = (void *)*((void *)p + 5);
    if (v8) {
      *((void *)p + 5) = *v8;
    }
    else {
      uint64_t v8 = apr_palloc(p, 0x20uLL);
    }
    v8[2] = plain_cleanup;
    v8[3] = child_cleanup;
    void *v8 = *((void *)p + 4);
    v8[1] = data;
    *((void *)p + 4) = v8;
  }
}

apr_status_t apr_pool_cleanup_null(void *data)
{
  return 0;
}

apr_status_t apr_proc_wait(apr_proc_t *proc, int *exitcode, apr_exit_why_e *exitwhy, apr_wait_how_e waithow)
{
  int v8 = 0;
  if (exitcode) {
    int v5 = 3;
  }
  else {
    int v5 = 2;
  }
  while (1)
  {
    pid_t v6 = waitpid(proc->pid, &v8, v5);
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    if (*__error() != 4) {
      return *__error();
    }
  }
  if (!v6) {
    return 70006;
  }
  proc->pid = v6;
  if ((~v8 & 0x7F) != 0) {
    return 70005;
  }
  else {
    return 20014;
  }
}

int apr_vformatter(int (__cdecl *flush_func)(apr_vformatter_buff_t *), apr_vformatter_buff_t *c, const char *fmt, va_list ap)
{
  size_t v4 = fmt;
  int v5 = c;
  unint64_t v192 = 0;
  unsigned int v190 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  unint64_t v198 = 0;
  va_list v199 = ap;
  unsigned int v196 = 0;
  curpos = c->curpos;
  endpos = c->endpos;
LABEL_2:
  LOBYTE(v10) = *v4;
  do
  {
    while (2)
    {
      if (v10 != 37)
      {
        if (!(_BYTE)v10)
        {
          v5->curpos = curpos;
          return v8;
        }
        if (curpos)
        {
          if (curpos >= endpos)
          {
            v5->curpos = curpos;
            if (((unsigned int (*)(apr_vformatter_buff_t *, uint64_t))flush_func)(v5, 10)) {
              return -1;
            }
            curpos = v5->curpos;
            unint64_t v53 = v5->endpos;
            LOBYTE(v10) = *v4;
          }
          else
          {
            unint64_t v53 = endpos;
          }
          *curpos++ = v10;
        }
        else
        {
          unint64_t v53 = endpos;
        }
        endpos = v53;
        ++v8;
LABEL_449:
        ++v4;
        goto LABEL_2;
      }
      int v12 = v4[1];
      unint64_t v11 = v4 + 1;
      uint64_t v13 = v12;
      if (v12 < 0)
      {
        if (__maskrune(v13, 0x1000uLL))
        {
LABEL_6:
          int v194 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 1;
          int v18 = 32;
          int v19 = 1;
          goto LABEL_39;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v13] & 0x1000) != 0)
      {
        goto LABEL_6;
      }
      int v14 = 0;
      int v15 = 0;
      int v16 = 0;
      int v19 = 1;
      int v18 = 32;
      while (1)
      {
        unsigned int v20 = *(unsigned __int8 *)v11;
        if (v20 <= 0x2A) {
          break;
        }
        switch(v20)
        {
          case '0':
            int v18 = 48;
            break;
          case '-':
            int v19 = 0;
            break;
          case '+':
            int v15 = 1;
            break;
          default:
            goto LABEL_21;
        }
LABEL_20:
        ++v11;
      }
      if (v20 == 32)
      {
        int v14 = 1;
        goto LABEL_20;
      }
      if (v20 == 35)
      {
        int v16 = 1;
        goto LABEL_20;
      }
LABEL_21:
      if (v20 - 48 > 9)
      {
        if (v20 == 42)
        {
          BOOL v23 = (unsigned int *)v199;
          v199 += 8;
          unint64_t v24 = *v23;
          unsigned int v25 = *(unsigned __int8 *)++v11;
          unsigned int v20 = v25;
          if ((v24 & 0x80000000) == 0)
          {
            unint64_t v6 = v24;
          }
          else
          {
            int v19 = 0;
            unint64_t v6 = -(int)v24;
          }
          goto LABEL_29;
        }
        int v194 = 0;
      }
      else
      {
        unint64_t v6 = *v11 - 48;
        unsigned int v21 = *(unsigned __int8 *)++v11;
        unsigned int v20 = v21;
        if (v21 - 48 <= 9)
        {
          do
          {
            unint64_t v6 = 10 * v6 + (char)v20 - 48;
            unsigned int v22 = *(unsigned __int8 *)++v11;
            unsigned int v20 = v22;
          }
          while (v22 - 48 < 0xA);
        }
LABEL_29:
        int v194 = 1;
      }
      if (v20 == 46)
      {
        int v26 = *((unsigned __int8 *)v11 + 1);
        if ((v26 - 48) > 9)
        {
          int v17 = 0;
          if ((char)v26 == 42)
          {
            vm_address_t v39 = v199;
            v199 += 8;
            v11 += 2;
            unint64_t v192 = *v39 & ~((int)*v39 >> 31);
          }
          else
          {
            unint64_t v192 = 0;
            ++v11;
          }
        }
        else
        {
          int v28 = *((unsigned __int8 *)v11 + 2);
          v11 += 2;
          char v27 = v28;
          unint64_t v192 = (char)v26 - 48;
          if ((v28 - 48) <= 9)
          {
            uint64_t v29 = (char)v26 - 48;
            do
            {
              int v30 = *(unsigned __int8 *)++v11;
              uint64_t v29 = 10 * v29 + v27 - 48;
              char v27 = v30;
            }
            while ((v30 - 48) < 0xA);
            unint64_t v192 = v29;
          }
          int v17 = 0;
        }
      }
      else
      {
        int v17 = 1;
      }
LABEL_39:
      int v31 = *(unsigned __int8 *)v11;
      BOOL v32 = v31 == 108;
      if (v31 == 108) {
        unint64_t v33 = v11 + 1;
      }
      else {
        unint64_t v33 = v11;
      }
      if (v31 == 113)
      {
        BOOL v32 = 1;
        unint64_t v33 = v11 + 1;
      }
      BOOL v34 = v31 == 104;
      if (v31 == 104) {
        BOOL v32 = 0;
      }
      LODWORD(v35) = v31 == 104;
      if (v34) {
        size_t v4 = v11 + 1;
      }
      else {
        size_t v4 = v33;
      }
      int v36 = *v4;
      int v195 = v19;
      if (v36 > 70)
      {
        switch(*v4)
        {
          case 'c':
            LOBYTE(v35) = 0;
            LOBYTE(v16) = 0;
            long long v87 = v199;
            v199 += 8;
            int v86 = *v87;
            goto LABEL_139;
          case 'd':
          case 'i':
            if (v32)
            {
              char v68 = (unint64_t *)v199;
              v199 += 8;
              char v69 = v17;
              uint64_t v70 = conv_10_quad(*v68, 0, &v196, (uint64_t)&v205[3], &v198);
              int v19 = v195;
              uint64_t v7 = (char *)v70;
              if (v69) {
                goto LABEL_168;
              }
LABEL_164:
              unint64_t v101 = 511;
              if (v192 + 1 < 0x200) {
                unint64_t v101 = v192;
              }
              for (; (unint64_t)v198 < v101; ++v198)
                *--uint64_t v7 = 48;
              goto LABEL_168;
            }
            unint64_t v97 = (unsigned int *)v199;
            v199 += 8;
            unsigned int v98 = *v97;
            if (v35) {
              unsigned int v99 = (__int16)v98;
            }
            else {
              unsigned int v99 = v98;
            }
            unsigned int v100 = v99 >> 31;
            if ((v99 & 0x80000000) != 0) {
              unsigned int v99 = -v99;
            }
            unsigned int v196 = v100;
            uint64_t v7 = &v205[3];
            do
            {
              *--uint64_t v7 = v99 % 0xA + 48;
              BOOL v78 = v99 > 9;
              v99 /= 0xAu;
            }
            while (v78);
            unint64_t v198 = (unsigned char *)(&v205[3] - v7);
            if ((v17 & 1) == 0) {
              goto LABEL_164;
            }
LABEL_168:
            uint64_t v189 = v5;
            if (v196)
            {
              int v102 = 45;
            }
            else if (v15)
            {
              int v102 = 43;
            }
            else
            {
              int v102 = 32 * (v14 != 0);
            }
            uint8x8_t v40 = flush_func;
            size_t v104 = endpos;
            goto LABEL_405;
          case 'e':
          case 'f':
            goto LABEL_85;
          case 'g':
            goto LABEL_103;
          case 'h':
          case 'j':
          case 'k':
          case 'l':
          case 'm':
          case 'q':
          case 'r':
          case 't':
          case 'v':
          case 'w':
            goto LABEL_136;
          case 'n':
            if (v32)
            {
              LOBYTE(v35) = 0;
              long long v88 = (void **)v199;
              v199 += 8;
              *unsigned int *v88 = v8;
            }
            else if (v35)
            {
              LOBYTE(v35) = 0;
              char v129 = (_WORD **)v199;
              v199 += 8;
              **char v129 = v8;
            }
            else
            {
              long long v148 = (_DWORD **)v199;
              v199 += 8;
              *void *v148 = v8;
            }
            LOBYTE(v16) = 1;
            goto LABEL_301;
          case 'o':
            if (v32)
            {
              long long v89 = (unint64_t *)v199;
              v199 += 8;
              unint64_t v90 = *v89;
              char v91 = "0123456789abcdef";
              if (*v4 == 88) {
                char v91 = "0123456789ABCDEF";
              }
              if (HIDWORD(v90))
              {
                uint64_t v7 = &v205[3];
                uint8x8_t v40 = flush_func;
                do
                {
                  *--uint64_t v7 = v91[v90 & 7];
                  BOOL v67 = v90 >= 8;
                  v90 >>= 3;
                }
                while (v67);
              }
              else
              {
                uint64_t v7 = &v205[3];
                uint8x8_t v40 = flush_func;
                do
                {
                  *--uint64_t v7 = v91[v90 & 7];
                  BOOL v67 = v90 >= 8;
                  LODWORD(v90) = v90 >> 3;
                }
                while (v67);
              }
            }
            else
            {
              char v130 = (unsigned int *)v199;
              v199 += 8;
              unsigned int v131 = *v130;
              if (v35) {
                unsigned int v131 = (unsigned __int16)v131;
              }
              unint64_t v132 = "0123456789abcdef";
              if (*v4 == 88) {
                unint64_t v132 = "0123456789ABCDEF";
              }
              unsigned int v190 = v131;
              uint64_t v7 = &v205[3];
              do
              {
                *--uint64_t v7 = v132[v131 & 7];
                BOOL v78 = v131 > 7;
                v131 >>= 3;
              }
              while (v78);
              uint8x8_t v40 = flush_func;
            }
            int v146 = (unsigned char *)(&v205[3] - v7);
            unint64_t v198 = (unsigned char *)(&v205[3] - v7);
            if ((v17 & 1) == 0)
            {
              unint64_t v147 = 511;
              if (v192 + 1 < 0x200) {
                unint64_t v147 = v192;
              }
              while ((unint64_t)v146 < v147)
              {
                *--uint64_t v7 = 48;
                int v146 = ++v198;
              }
            }
            if (!v16)
            {
              LOBYTE(v35) = 0;
              goto LABEL_315;
            }
            if (*v7 == 48) {
              goto LABEL_291;
            }
            LOBYTE(v35) = 0;
            LOBYTE(v16) = 0;
            *--uint64_t v7 = 48;
            long long v139 = v198 + 1;
            goto LABEL_298;
          case 'p':
            int v38 = *++v4;
            int v37 = v38;
            int v10 = v38;
            if (!v38) {
              continue;
            }
            if (v37 <= 83)
            {
              uint8x8_t v40 = flush_func;
              fmt = (unsigned char *)(&stru_B8 + 62);
              switch(v37)
              {
                case 'A':
                  unint64_t v41 = (unsigned int **)v199;
                  v199 += 8;
                  unint64_t v35 = *v41;
                  if (!v35) {
                    goto LABEL_214;
                  }
                  unsigned int v42 = bswap32(*v35);
                  unsigned int v43 = v42;
                  uint64_t v44 = v205;
                  vm_address_t v45 = &v205[2];
                  uint64_t v46 = &v205[4];
                  do
                  {
                    uint64_t v47 = v45;
                    unint64_t v48 = v44;
                    *(v46 - 2) = v43 % 0xA + 48;
                    --v46;
                    --v45;
                    --v44;
                    BOOL v78 = v43 > 9;
                    v43 /= 0xAu;
                  }
                  while (v78);
                  *(v46 - 2) = 46;
                  unsigned int v49 = BYTE1(v42);
                  do
                  {
                    long long v50 = v48;
                    *(v47 - 2) = v49 % 0xA + 48;
                    --v47;
                    --v48;
                    BOOL v78 = v49 > 9;
                    v49 /= 0xAu;
                  }
                  while (v78);
                  *(v47 - 2) = 46;
                  unsigned int v51 = BYTE2(v42);
                  do
                  {
                    *(v50 - 2) = v51 % 0xA + 48;
                    --v50;
                    BOOL v78 = v51 > 9;
                    v51 /= 0xAu;
                  }
                  while (v78);
                  *(v50 - 2) = 46;
                  uint64_t v7 = v50 - 2;
                  unsigned int v52 = HIBYTE(v42);
                  do
                  {
                    *--uint64_t v7 = v52 % 0xA + 48;
                    BOOL v78 = v52 > 9;
                    v52 /= 0xAu;
                  }
                  while (v78);
                  goto LABEL_307;
                case 'B':
                case 'F':
                  goto LABEL_191;
                case 'C':
                case 'D':
                case 'E':
                case 'G':
                case 'H':
                  goto LABEL_204;
                case 'I':
                  long long v113 = (unsigned int **)v199;
                  v199 += 8;
                  unint64_t v35 = *v113;
                  if (!v35) {
                    goto LABEL_214;
                  }
                  LOBYTE(v35) = 0;
                  LOBYTE(v16) = 0;
                  uint64_t v7 = 0;
                  long long v114 = v198;
                  goto LABEL_308;
                default:
                  uint8x8_t v40 = flush_func;
                  if (v37 != 83) {
                    goto LABEL_204;
                  }
LABEL_191:
                  if (v10 == 66)
                  {
                    long long v108 = (unint64_t *)v199;
                    v199 += 8;
                    unint64_t v109 = *v108;
                    if (v109) {
                      unint64_t v109 = *(unsigned int *)v109;
                    }
                  }
                  else
                  {
                    int v110 = (unint64_t **)v199;
                    v199 += 8;
                    long long v111 = *v110;
                    if (!v111) {
                      goto LABEL_197;
                    }
                    unint64_t v109 = *v111;
                    if ((v109 & 0x8000000000000000) != 0)
                    {
                      uint64_t v143 = "  - ";
                      goto LABEL_319;
                    }
                  }
                  if (v109 < 0x3CD)
                  {
LABEL_197:
                    int v112 = apr_snprintf(__s, 0xAuLL, "%3d ");
                    goto LABEL_317;
                  }
                  char v126 = "";
                  do
                  {
                    __int16 v127 = v109;
                    v109 >>= 10;
                    ++v126;
                  }
                  while (v109 > 0x3CC);
                  unsigned int v128 = v127 & 0x3FF;
                  if (v109 < 9 || v109 == 9 && v128 <= 0x3CC) {
                    int v112 = apr_snprintf(__s, 0xAuLL, "%d.%d%c");
                  }
                  else {
                    int v112 = apr_snprintf(__s, 0xAuLL, "%3d%c");
                  }
LABEL_317:
                  if ((v112 & 0x80000000) == 0) {
                    goto LABEL_320;
                  }
                  uint64_t v143 = "****";
LABEL_319:
                  *(_DWORD *)__s = *(_DWORD *)v143;
                  char v208 = v143[4];
LABEL_320:
                  uint64_t v7 = __s;
                  size_t v150 = strlen(__s);
                  LOBYTE(v35) = 0;
                  LOBYTE(v16) = 0;
                  unint64_t v198 = (unsigned char *)v150;
                  int v18 = 32;
                  size_t v104 = endpos;
                  int v19 = v195;
                  break;
              }
              goto LABEL_409;
            }
            if (v37 > 111)
            {
              if (v37 != 116)
              {
                uint8x8_t v40 = flush_func;
                if (v37 != 112)
                {
LABEL_204:
                  LOBYTE(v35) = 0;
                  LOBYTE(v16) = 0;
                  unint64_t v198 = (unsigned char *)&dword_8;
                  v199 += 8;
                  uint64_t v7 = "bogus %p";
                  goto LABEL_315;
                }
                uint64_t v83 = (unint64_t *)v199;
                v199 += 8;
                unint64_t v84 = *v83;
                if (HIDWORD(v84))
                {
                  uint64_t v7 = &v205[3];
                  do
                  {
                    *--uint64_t v7 = conv_p2_low_digits[v84 & 0xF];
                    BOOL v78 = v84 > 0xF;
                    v84 >>= 4;
                  }
                  while (v78);
                }
                else
                {
                  uint64_t v7 = &v205[3];
                  do
                  {
                    *--uint64_t v7 = conv_p2_low_digits[v84 & 0xF];
                    BOOL v67 = v84 >= 0x10;
                    LODWORD(v84) = v84 >> 4;
                  }
                  while (v67);
                }
                LOBYTE(v35) = 0;
                LOBYTE(v16) = 0;
                long long v114 = (unsigned char *)(&v205[3] - v7);
                goto LABEL_313;
              }
              unsigned __int32 v120 = (unsigned int **)v199;
              v199 += 8;
              unint64_t v35 = *v120;
              uint8x8_t v40 = flush_func;
              if (!v35)
              {
LABEL_214:
                LOBYTE(v16) = 0;
                unint64_t v198 = (unsigned char *)(&dword_4 + 2);
                int v18 = 32;
                uint64_t v7 = "(null)";
                goto LABEL_315;
              }
              unint64_t v121 = *(void *)v35;
              if (HIDWORD(v121))
              {
                uint64_t v7 = &v205[3];
                do
                {
                  *--uint64_t v7 = conv_p2_low_digits[v121 & 0xF];
                  BOOL v78 = v121 > 0xF;
                  v121 >>= 4;
                }
                while (v78);
              }
              else
              {
                uint64_t v7 = &v205[3];
                do
                {
                  *--uint64_t v7 = conv_p2_low_digits[v121 & 0xF];
                  BOOL v67 = v121 >= 0x10;
                  LODWORD(v121) = v121 >> 4;
                }
                while (v67);
              }
LABEL_307:
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              long long v114 = (unsigned char *)(&v205[3] - v7);
LABEL_308:
              char v118 = (unsigned char *)v192;
              if (v192 >= (unint64_t)v114) {
                int v119 = 1;
              }
              else {
                int v119 = v17;
              }
            }
            else
            {
              if (v37 != 84)
              {
                uint8x8_t v40 = flush_func;
                if (v37 != 109) {
                  goto LABEL_204;
                }
                uint64_t v54 = (unsigned int **)v199;
                v199 += 8;
                unint64_t v55 = *v54;
                if (v55)
                {
                  unsigned int v56 = *v55;
                  if ((int)*v55 > 19999)
                  {
                    if (v56 >> 6 > 0x752)
                    {
                      if (v56 > 0xA392F)
                      {
                        if (v56 > 0xAFC7F)
                        {
                          uint64_t v164 = 0;
                          unint64_t v165 = "Unrecognized resolver error";
                          if (v56 == 720004) {
                            unint64_t v165 = "No address for host";
                          }
                          uint64_t v166 = "Unknown host";
                          if (v56 != 720001) {
                            uint64_t v166 = v165;
                          }
                          while (1)
                          {
                            int v167 = v166[v164];
                            __n_4[v164] = v167;
                            if (!v167) {
                              break;
                            }
                            if (++v164 == 510)
                            {
LABEL_497:
                              long long v183 = &v205[1];
                              goto LABEL_498;
                            }
                          }
                        }
                        else
                        {
                          long long v161 = gai_strerror(v56 - 670000);
                          if (v161)
                          {
                            uint64_t v162 = 0;
                            while (1)
                            {
                              int v163 = v161[v162];
                              __n_4[v162] = v163;
                              if (!v163) {
                                break;
                              }
                              if (++v162 == 510) {
                                goto LABEL_497;
                              }
                            }
                          }
                          else
                          {
                            long long v183 = __n_4;
LABEL_498:
                            char *v183 = 0;
                          }
                        }
                      }
                      else
                      {
                        for (uint64_t i = 0; ; ++i)
                        {
                          __n_4[i] = aAprDoesNotUnde[i];
                          if (i == 39) {
                            break;
                          }
                        }
                      }
                    }
                    else
                    {
                      long long v149 = "Could not perform a stat on the file.";
                      switch(v56)
                      {
                        case 0x4E21u:
                          break;
                        case 0x4E22u:
                          long long v149 = "A new pool could not be created.";
                          break;
                        case 0x4E23u:
                        case 0x4E32u:
LABEL_475:
                          long long v149 = "Error string not specified yet";
                          break;
                        case 0x4E24u:
                          long long v149 = "An invalid date has been provided";
                          break;
                        case 0x4E25u:
                          long long v149 = "An invalid socket was returned";
                          break;
                        case 0x4E26u:
                          long long v149 = "No process was provided and one was required.";
                          break;
                        case 0x4E27u:
                          long long v149 = "No time was provided and one was required.";
                          break;
                        case 0x4E28u:
                          long long v149 = "No directory was provided and one was required.";
                          break;
                        case 0x4E29u:
                          long long v149 = "No lock was provided and one was required.";
                          break;
                        case 0x4E2Au:
                          long long v149 = "No poll structure was provided and one was required.";
                          break;
                        case 0x4E2Bu:
                          long long v149 = "No socket was provided and one was required.";
                          break;
                        case 0x4E2Cu:
                          long long v149 = "No thread was provided and one was required.";
                          break;
                        case 0x4E2Du:
                          long long v149 = "No thread key structure was provided and one was required.";
                          break;
                        case 0x4E2Eu:
                          long long v149 = "Internal error (specific information not available)";
                          break;
                        case 0x4E2Fu:
                          long long v149 = "No shared memory is currently available";
                          break;
                        case 0x4E30u:
                          long long v149 = "The specified IP address is invalid.";
                          break;
                        case 0x4E31u:
                          long long v149 = "The specified network mask is invalid.";
                          break;
                        case 0x4E33u:
                          long long v149 = "DSO load failed";
                          break;
                        case 0x4E34u:
                          long long v149 = "The given path is absolute";
                          break;
                        case 0x4E35u:
                          long long v149 = "The given path is relative";
                          break;
                        case 0x4E36u:
                          long long v149 = "The given path is incomplete";
                          break;
                        case 0x4E37u:
                          long long v149 = "The given path was above the root path";
                          break;
                        case 0x4E38u:
                          long long v149 = "The given path is misformatted or contained invalid characters";
                          break;
                        case 0x4E39u:
                          long long v149 = "The given path contained wildcard characters";
                          break;
                        case 0x4E3Au:
                          long long v149 = "Could not find the requested symbol.";
                          break;
                        case 0x4E3Bu:
                          long long v149 = "The process is not recognized.";
                          break;
                        case 0x4E3Cu:
                          long long v149 = "Not enough entropy to continue.";
                          break;
                        default:
                          switch(v56)
                          {
                            case 0x11171u:
                              long long v149 = "Your code just forked, and you are currently executing in the child process";
                              break;
                            case 0x11172u:
                              long long v149 = "Your code just forked, and you are currently executing in the parent process";
                              break;
                            case 0x11173u:
                              long long v149 = "The specified thread is detached";
                              break;
                            case 0x11174u:
                              long long v149 = "The specified thread is not detached";
                              break;
                            case 0x11175u:
                              long long v149 = "The specified child process is done executing";
                              break;
                            case 0x11176u:
                              long long v149 = "The specified child process is not done executing";
                              break;
                            case 0x11177u:
                              long long v149 = "The timeout specified has expired";
                              break;
                            case 0x11178u:
                              long long v149 = "Partial results are valid but processing is incomplete";
                              break;
                            case 0x1117Cu:
                              long long v149 = "Bad character specified on command line";
                              break;
                            case 0x1117Du:
                              long long v149 = "Missing parameter for the specified command line option";
                              break;
                            case 0x1117Eu:
                              long long v149 = "End of file found";
                              break;
                            case 0x1117Fu:
                              long long v149 = "Could not find specified socket in poll list.";
                              break;
                            case 0x11183u:
                              long long v149 = "Shared memory is implemented anonymously";
                              break;
                            case 0x11184u:
                              long long v149 = "Shared memory is implemented using files";
                              break;
                            case 0x11185u:
                              long long v149 = "Shared memory is implemented using a key system";
                              break;
                            case 0x11186u:
                              long long v149 = "There is no error, this value signifies an initialized error code";
                              break;
                            case 0x11187u:
                              long long v149 = "This function has not been implemented on this platform";
                              break;
                            case 0x11188u:
                              long long v149 = "passwords do not match";
                              break;
                            case 0x11189u:
                              long long v149 = "The given lock was busy.";
                              break;
                            default:
                              goto LABEL_475;
                          }
                          break;
                      }
                      uint64_t v184 = 0;
                      while (1)
                      {
                        int v185 = v149[v184];
                        __n_4[v184] = v185;
                        if (!v185) {
                          break;
                        }
                        if (++v184 == 510) {
                          goto LABEL_497;
                        }
                      }
                    }
                  }
                  else if (strerror_r(v56, __n_4, 0x1FFuLL) < 0)
                  {
                    for (uint64_t j = 0; ; ++j)
                    {
                      __n_4[j] = aAprDoesNotUnde[j];
                      if (j == 39) {
                        break;
                      }
                    }
                  }
                  uint64_t v7 = __n_4;
                  size_t v145 = strlen(__n_4);
                  int v19 = v195;
                }
                else
                {
                  size_t v145 = 6;
                  uint64_t v7 = "(null)";
                }
                size_t v104 = endpos;
                LOBYTE(v35) = 0;
                LOBYTE(v16) = 0;
                unint64_t v198 = (unsigned char *)v145;
                int v18 = 32;
                goto LABEL_409;
              }
              long long v115 = (unsigned int **)v199;
              v199 += 8;
              unint64_t v35 = *v115;
              uint8x8_t v40 = flush_func;
              if (!v35) {
                goto LABEL_214;
              }
              int v116 = v17;
              uint64_t v117 = conv_10_quad(*(void *)v35, 1, __s, (uint64_t)&v205[3], &v198);
              int v19 = v195;
              uint64_t v7 = (char *)v117;
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              long long v114 = v198;
              char v118 = (unsigned char *)v192;
              if (v192 >= (unint64_t)v198) {
                int v119 = 1;
              }
              else {
                int v119 = v116;
              }
            }
            if (!v119) {
              long long v114 = v118;
            }
LABEL_313:
            unint64_t v198 = v114;
LABEL_314:
            int v18 = 32;
            goto LABEL_315;
          case 's':
            id v92 = (const char **)v199;
            v199 += 8;
            uint64_t v7 = (char *)*v92;
            if (!*v92)
            {
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              unint64_t v198 = (unsigned char *)(&dword_4 + 2);
              int v18 = 32;
              uint64_t v7 = "(null)";
              goto LABEL_301;
            }
            if (v17)
            {
              size_t v93 = strlen(*v92);
              int v19 = v195;
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              unint64_t v198 = (unsigned char *)v93;
              goto LABEL_141;
            }
            unint64_t v198 = 0;
            uint8x8_t v40 = flush_func;
            LOBYTE(v35) = v192;
            if (v192)
            {
              uint64_t v144 = 0;
              while (v7[v144])
              {
                unint64_t v198 = (unsigned char *)++v144;
                int v18 = 32;
                if (v192 == v144) {
                  goto LABEL_291;
                }
              }
              LOBYTE(v35) = 0;
            }
            else
            {
              unint64_t v192 = 0;
            }
            LOBYTE(v16) = 0;
            goto LABEL_314;
          case 'u':
            if (v32)
            {
              int v94 = (unint64_t *)v199;
              v199 += 8;
              char v95 = v17;
              uint64_t v96 = conv_10_quad(*v94, 1, &v196, (uint64_t)&v205[3], &v198);
              LOBYTE(v17) = v95;
              int v19 = v195;
              uint64_t v7 = (char *)v96;
            }
            else
            {
              long long v133 = (unsigned int *)v199;
              v199 += 8;
              unsigned int v134 = *v133;
              if (v35) {
                unsigned int v135 = (unsigned __int16)v134;
              }
              else {
                unsigned int v135 = v134;
              }
              unsigned int v196 = 0;
              uint64_t v7 = &v205[3];
              do
              {
                *--uint64_t v7 = v135 % 0xA + 48;
                BOOL v78 = v135 > 9;
                v135 /= 0xAu;
              }
              while (v78);
              unint64_t v198 = (unsigned char *)(&v205[3] - v7);
            }
            uint8x8_t v40 = flush_func;
            if (v17)
            {
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
            }
            else
            {
              unint64_t v136 = 511;
              if (v192 + 1 < 0x200) {
                unint64_t v136 = v192;
              }
              for (; (unint64_t)v198 < v136; ++v198)
                *--uint64_t v7 = 48;
LABEL_291:
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
            }
            goto LABEL_315;
          case 'x':
            goto LABEL_93;
          default:
            if (v36 == 71)
            {
LABEL_103:
              uint64_t v189 = v5;
              uint64_t v71 = v192;
              if (v192 <= 1) {
                uint64_t v71 = 1;
              }
              if (v17) {
                uint64_t v72 = 6;
              }
              else {
                uint64_t v72 = v71;
              }
              uint64_t v73 = v199;
              v199 += 8;
              long double v74 = *(double *)v73;
              *(_DWORD *)&v205[3] = 0;
              __int n = 0;
              apr_cvt(v72, &__n, &v205[3], 1, __s, v74);
              p_n_6 = __n_5;
              if (*(_DWORD *)&v205[3])
              {
                __n_5[0] = 45;
                p_n_6 = &__n_6;
              }
              unint64_t v192 = v72;
              if ((int)v72 >= 2)
              {
                uint64_t v72 = v72;
                do
                {
                  uint64_t v76 = v72 - 1;
                  if (__s[(v72 - 1)] != 48) {
                    goto LABEL_115;
                  }
                  --v72;
                }
                while ((unint64_t)(v76 + 1) > 2);
                LODWORD(v72) = 1;
              }
LABEL_115:
              int v77 = __n;
              BOOL v78 = __n < 0 || __n - (int)v72 <= 4;
              int v79 = !v78;
              if (__n >= -3 && v79 == 0)
              {
                if (__n <= 0)
                {
                  if (__s[0] != 48) {
                    *p_n_6++ = 46;
                  }
                  if (v77 < 0)
                  {
                    do
                    {
                      __int n = v77 + 1;
                      *p_n_6++ = 48;
                      int v77 = __n;
                    }
                    while (__n < 0);
                  }
                  else
                  {
                    int v77 = 0;
                  }
                }
                if ((int)v72 >= 1)
                {
                  uint64_t v152 = 0;
                  do
                  {
                    char *p_n_6 = __s[v152];
                    if (v152 + 1 == __n)
                    {
                      p_n_6[1] = 46;
                      p_n_6 += 2;
                    }
                    else
                    {
                      ++p_n_6;
                    }
                    ++v152;
                  }
                  while ((v72 - 1) + 1 != v152);
                  int v77 = __n;
                }
                if ((int)v72 < v77)
                {
                  do
                  {
                    long long v153 = p_n_6;
                    LODWORD(v72) = v72 + 1;
                    *p_n_6++ = 48;
                  }
                  while ((int)v72 < __n);
                  char *p_n_6 = 46;
                  p_n_6 = v153 + 2;
                }
              }
              else
              {
                --__n;
                char *p_n_6 = __s[0];
                uint64_t v81 = p_n_6 + 2;
                p_n_6[1] = 46;
                if ((int)v72 > 1)
                {
                  int v188 = v77;
                  memcpy(v81, &__s[1], (v72 - 1));
                  int v77 = v188;
                  uint64_t v81 = &p_n_6[(v72 - 2) + 3];
                }
                *uint64_t v81 = 101;
                if (v77 < 1)
                {
                  __int n = 1 - v77;
                  char v82 = 45;
                }
                else
                {
                  char v82 = 43;
                }
                v81[1] = v82;
                int v141 = __n;
                if (__n < 100)
                {
                  int v142 = v81 + 2;
                }
                else
                {
                  int v142 = v81 + 3;
                  v81[2] = __n / 0x64u + 48;
                  int v141 = __n;
                }
                if (v141 >= 10)
                {
                  *v142++ = ((103 * (v141 % 0x64u)) >> 10) | 0x30;
                  int v141 = __n;
                }
                unsigned char *v142 = v141 % 10 + 48;
                p_n_6 = v142 + 1;
              }
              long long v154 = p_n_6 - 1;
              if (*(p_n_6 - 1) != 46 || v16 != 0) {
                long long v154 = p_n_6;
              }
              *long long v154 = 0;
              int v156 = 32 * (v14 != 0);
              if (v15) {
                int v156 = 43;
              }
              if (__n_5[0] == 45) {
                int v102 = 45;
              }
              else {
                int v102 = v156;
              }
              if (__n_5[0] == 45) {
                uint64_t v7 = &__n_6;
              }
              else {
                uint64_t v7 = __n_5;
              }
              size_t v157 = strlen(v7);
              unint64_t v198 = (unsigned char *)v157;
              if (v16)
              {
                size_t v158 = v157;
                if (!strchr(v7, 46))
                {
                  unint64_t v198 = (unsigned char *)(v158 + 1);
                  *(_WORD *)&v7[v158] = 46;
                }
              }
              uint8x8_t v40 = flush_func;
              if (*v4 == 71)
              {
                long long v159 = strchr(v7, 101);
                if (v159) {
                  *long long v159 = 69;
                }
              }
              size_t v104 = endpos;
              int v19 = v195;
              goto LABEL_405;
            }
            if (v36 != 88) {
              goto LABEL_136;
            }
LABEL_93:
            if (v32)
            {
              char v64 = (unint64_t *)v199;
              v199 += 8;
              unint64_t v65 = *v64;
              int64x2_t v66 = "0123456789abcdef";
              if (*v4 == 88) {
                int64x2_t v66 = "0123456789ABCDEF";
              }
              if (HIDWORD(v65))
              {
                uint64_t v7 = &v205[3];
                uint8x8_t v40 = flush_func;
                do
                {
                  *--uint64_t v7 = v66[v65 & 0xF];
                  BOOL v67 = v65 >= 0x10;
                  v65 >>= 4;
                }
                while (v67);
              }
              else
              {
                uint64_t v7 = &v205[3];
                uint8x8_t v40 = flush_func;
                do
                {
                  *--uint64_t v7 = v66[v65 & 0xF];
                  BOOL v67 = v65 >= 0x10;
                  LODWORD(v65) = v65 >> 4;
                }
                while (v67);
              }
            }
            else
            {
              long long v105 = (unsigned int *)v199;
              v199 += 8;
              unsigned int v106 = *v105;
              if (v35) {
                unsigned int v106 = (unsigned __int16)v106;
              }
              int v107 = "0123456789abcdef";
              if (*v4 == 88) {
                int v107 = "0123456789ABCDEF";
              }
              unsigned int v190 = v106;
              uint64_t v7 = &v205[3];
              do
              {
                *--uint64_t v7 = v107[v106 & 0xF];
                BOOL v78 = v106 > 0xF;
                v106 >>= 4;
              }
              while (v78);
              uint8x8_t v40 = flush_func;
            }
            long long v137 = (unsigned char *)(&v205[3] - v7);
            unint64_t v198 = (unsigned char *)(&v205[3] - v7);
            if ((v17 & 1) == 0)
            {
              unint64_t v140 = 511;
              if (v192 + 1 < 0x200) {
                unint64_t v140 = v192;
              }
              while ((unint64_t)v137 < v140)
              {
                *--uint64_t v7 = 48;
                long long v137 = ++v198;
              }
            }
            LOBYTE(v35) = 0;
            if (v16 && v190)
            {
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              char v138 = *v4;
              *(v7 - 2) = 48;
              v7 -= 2;
              v7[1] = v138;
              long long v139 = v198 + 2;
LABEL_298:
              unint64_t v198 = v139;
            }
            else
            {
              LOBYTE(v16) = 0;
            }
            goto LABEL_315;
        }
      }
      break;
    }
    LOBYTE(v10) = *v4;
  }
  while (!*v4);
  if (v36 == 37)
  {
    LOBYTE(v35) = 0;
    LOBYTE(v16) = 0;
    LOBYTE(v86) = 37;
LABEL_139:
    v197[0] = v86;
    uint64_t v85 = 1;
LABEL_140:
    unint64_t v198 = (unsigned char *)v85;
    uint64_t v7 = v197;
LABEL_141:
    int v18 = 32;
LABEL_301:
    uint8x8_t v40 = flush_func;
LABEL_315:
    size_t v104 = endpos;
    goto LABEL_409;
  }
  if (v36 != 69)
  {
LABEL_136:
    LOBYTE(v35) = 0;
    LOBYTE(v16) = 0;
    v197[0] = 37;
    v197[1] = *v4;
    uint64_t v85 = 2;
    goto LABEL_140;
  }
LABEL_85:
  uint64_t v58 = (double *)v199;
  v199 += 8;
  long double v59 = *v58;
  if (fabs(*v58) == INFINITY)
  {
    LOBYTE(v35) = 0;
    LOBYTE(v16) = 0;
    unint64_t v198 = (unsigned char *)(&def_1C1270 + 3);
    uint64_t v7 = "inf";
    goto LABEL_301;
  }
  int v60 = *(unsigned __int8 *)v4;
  if (v17) {
    int v61 = 6;
  }
  else {
    int v61 = v192;
  }
  __int n = 0;
  int v187 = v60;
  uint64_t v189 = v5;
  if (v60 == 102)
  {
    int v62 = v61;
    int v63 = 0;
  }
  else
  {
    int v62 = v61 + 1;
    int v63 = 1;
  }
  apr_cvt(v62, &__n, &v196, v63, __s, v59);
  char v103 = __s[0];
  if (__s[0] < 0)
  {
    if (__maskrune(__s[0], 0x100uLL)) {
      goto LABEL_174;
    }
  }
  else if ((_DefaultRuneLocale.__runetype[__s[0]] & 0x100) != 0)
  {
LABEL_174:
    unint64_t v198 = (unsigned char *)strlen(__s);
    uint64_t v7 = __n_5;
    __memcpy_chk();
    unsigned int v196 = 0;
    size_t v104 = endpos;
    int v19 = v195;
    goto LABEL_175;
  }
  int v122 = v187;
  if (v187 == 102)
  {
    if (__n < 1)
    {
      __n_5[0] = 48;
      if (v61 < 1)
      {
        int v19 = v195;
        if (v16)
        {
          char __n_6 = 46;
          char v124 = __s;
          char v125 = __n_7;
        }
        else
        {
          char v124 = __s;
          char v125 = &__n_6;
        }
      }
      else
      {
        char __n_6 = 46;
        char v125 = __n_7;
        int v19 = v195;
        if (__n < 0)
        {
          uint64_t v151 = ~__n;
          memset(__n_7, 48, v151 + 1);
          int v122 = 102;
          int v19 = v195;
          char v125 = &__n_5[v151 + 3];
        }
        __int n = 1;
        char v124 = __s;
      }
    }
    else
    {
      uint64_t v123 = __n;
      memcpy(__n_5, __s, __n);
      char v124 = &__s[v123];
      char v125 = &__n_5[v123];
      __int n = -1;
      if (v16 || v61 > 0)
      {
        *char v125 = 46;
        char v125 = &__n_7[(v123 - 1)];
      }
      int v19 = v195;
      int v122 = 102;
    }
  }
  else
  {
    __n_5[0] = v103;
    int v19 = v195;
    if (v16 || (char v125 = &__n_6, v124 = &__s[1], v61 >= 1))
    {
      char __n_6 = 46;
      char v125 = __n_7;
      char v124 = &__s[1];
    }
  }
  char v168 = *v124;
  if (*v124)
  {
    long long v169 = (unsigned __int8 *)(v124 + 1);
    do
    {
      *v125++ = v168;
      int v170 = *v169++;
      char v168 = v170;
    }
    while (v170);
  }
  uint64_t v7 = __n_5;
  if (v122 != 102)
  {
    *char v125 = v122;
    int v171 = __n;
    int v172 = --__n;
    if (__n)
    {
      if (v172 >= 0) {
        unsigned int v173 = v172;
      }
      else {
        unsigned int v173 = -v172;
      }
      uint64_t v174 = -1;
      long long v175 = v206;
      do
      {
        uint64_t v176 = v174;
        *--long long v175 = v173 % 0xA + 48;
        --v174;
        BOOL v78 = v173 > 9;
        v173 /= 0xAu;
      }
      while (v78);
      if (v171 <= 0) {
        char v177 = 45;
      }
      else {
        char v177 = 43;
      }
      char v178 = v125 + 2;
      v125[1] = v177;
      long long v179 = (unsigned char *)(v206 - v175);
      if (v179)
      {
        if (v179 == (unsigned char *)&def_1C1270 + 1)
        {
          char v178 = v125 + 3;
          v125[2] = 48;
        }
        do
        {
          *v178++ = v206[v176];
          BOOL v67 = __CFADD__(v176++, 1);
        }
        while (!v67);
      }
    }
    else
    {
      *(_WORD *)(v125 + 1) = 12331;
      char v178 = v125 + 4;
      void v125[3] = 48;
    }
    char v125 = v178;
  }
  unint64_t v198 = (unsigned char *)(v125 - __n_5);
  size_t v104 = endpos;
  if (v196)
  {
    int v102 = 45;
    goto LABEL_404;
  }
LABEL_175:
  if (v15) {
    int v102 = 43;
  }
  else {
    int v102 = 32 * (v14 != 0);
  }
LABEL_404:
  uint8x8_t v40 = flush_func;
LABEL_405:
  LOBYTE(v16) = 0;
  LOBYTE(v35) = v102 != 0;
  if (v102 && v7 != "(null)")
  {
    LOBYTE(v16) = 0;
    *--uint64_t v7 = v102;
    ++v198;
    LOBYTE(v35) = 1;
  }
  int v5 = v189;
LABEL_409:
  unint64_t v180 = (unint64_t)v198;
  if (!v194 || v19 != 1 || v6 <= (unint64_t)v198) {
    goto LABEL_427;
  }
  char v181 = v35 ^ 1;
  if (v18 != 48) {
    char v181 = 1;
  }
  if (v181)
  {
    do
    {
LABEL_421:
      if (curpos)
      {
        if (curpos >= v104)
        {
          v5->curpos = curpos;
          if (((unsigned int (*)(apr_vformatter_buff_t *, uint64_t, const char *))v40)(v5, 10, fmt)) {
            return -1;
          }
          curpos = v5->curpos;
          size_t v104 = v5->endpos;
          int v19 = v195;
        }
        *curpos++ = v18;
        unint64_t v180 = (unint64_t)v198;
      }
      ++v8;
      --v6;
    }
    while (v6 > v180);
LABEL_427:
    if (v180) {
      char v182 = v16;
    }
    else {
      char v182 = 1;
    }
    if ((v182 & 1) == 0)
    {
      v8 += v180;
      do
      {
        if (curpos)
        {
          if (curpos >= v104)
          {
            v5->curpos = curpos;
            if (((unsigned int (*)(apr_vformatter_buff_t *, uint64_t, const char *))v40)(v5, 10, fmt)) {
              return -1;
            }
            curpos = v5->curpos;
            size_t v104 = v5->endpos;
            int v19 = v195;
          }
          *curpos++ = *v7;
        }
        ++v7;
        --v180;
      }
      while (v180);
      unint64_t v180 = (unint64_t)v198;
    }
    if (v194 && !v19)
    {
      while (v6 > v180)
      {
        if (curpos)
        {
          if (curpos >= v104)
          {
            v5->curpos = curpos;
            if (((unsigned int (*)(apr_vformatter_buff_t *, uint64_t, const char *))v40)(v5, 10, fmt)) {
              return -1;
            }
            curpos = v5->curpos;
            size_t v104 = v5->endpos;
          }
          *curpos++ = v18;
          unint64_t v180 = (unint64_t)v198;
        }
        ++v8;
        --v6;
      }
    }
    endpos = v104;
    goto LABEL_449;
  }
  if (!curpos) {
    goto LABEL_420;
  }
  if (curpos < v104) {
    goto LABEL_419;
  }
  v5->curpos = curpos;
  if (!((unsigned int (*)(apr_vformatter_buff_t *, uint64_t, const char *))v40)(v5, 10, fmt))
  {
    curpos = v5->curpos;
    size_t v104 = v5->endpos;
    int v19 = v195;
LABEL_419:
    *curpos++ = *v7;
    unint64_t v180 = (unint64_t)v198;
LABEL_420:
    ++v8;
    ++v7;
    unint64_t v198 = (unsigned char *)--v180;
    --v6;
    goto LABEL_421;
  }
  return -1;
}

uint64_t conv_10_quad(unint64_t a1, int a2, _DWORD *a3, uint64_t a4, void *a5)
{
  if ((HIDWORD(a1) || !a2) && (a1 != (int)a1 || a2))
  {
    if ((a1 & 0x8000000000000000) == 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = -(uint64_t)a1;
    }
    if (a2) {
      int v11 = 0;
    }
    else {
      int v11 = a1 >> 63;
    }
    if (a2) {
      unint64_t v12 = a1;
    }
    else {
      unint64_t v12 = v10;
    }
    *a3 = v11;
    uint64_t result = a4;
    do
    {
      *(unsigned char *)--uint64_t result = v12 % 0xA + 48;
      BOOL v13 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v13);
  }
  else
  {
    if ((a1 & 0x80000000) == 0) {
      int v5 = a1;
    }
    else {
      int v5 = -(int)a1;
    }
    if (a2) {
      int v6 = 0;
    }
    else {
      int v6 = (a1 >> 31) & 1;
    }
    if (a2) {
      unsigned int v7 = a1;
    }
    else {
      unsigned int v7 = v5;
    }
    *a3 = v6;
    uint64_t result = a4;
    do
    {
      *(unsigned char *)--uint64_t result = v7 % 0xA + 48;
      BOOL v9 = v7 >= 0xA;
      v7 /= 0xAu;
    }
    while (v9);
  }
  *a5 = a4 - result;
  return result;
}

char *apr_cvt(int a1, int *a2, _DWORD *a3, int a4, char *a5, long double a6)
{
  if (a1 >= 78) {
    int v9 = 78;
  }
  else {
    int v9 = a1;
  }
  *a3 = 0;
  if (a6 < 0.0)
  {
    *a3 = 1;
    a6 = -a6;
  }
  double v31 = 0.0;
  double __y = 0.0;
  double v10 = modf(a6, &__y);
  double v11 = v10;
  double v12 = __y;
  if (__y == 0.0)
  {
    if (v10 > 0.0)
    {
      int v13 = 1;
      do
      {
        double v21 = v11;
        double v11 = v11 * 10.0;
        --v13;
      }
      while (v11 < 1.0);
      unint64_t v19 = 0;
      double v31 = v11;
      double v11 = v21;
      goto LABEL_20;
    }
    int v13 = 0;
  }
  else
  {
    int v13 = 0;
    uint64_t v14 = 80;
    uint64_t v15 = 1;
    do
    {
      uint64_t v16 = v14;
      uint64_t v17 = v15;
      double v18 = modf(v12 / 10.0, &__y);
      ++v13;
      uint64_t v14 = v16 - 1;
      a5[v16 - 1] = (int)((v18 + 0.03) * 10.0) + 48;
      if (v16 == 1) {
        break;
      }
      double v12 = __y;
      uint64_t v15 = v17 + 1;
    }
    while (__y != 0.0);
    double v31 = v18;
    if (v16 <= 80)
    {
      unint64_t v19 = 81 - v16;
      unsigned int v20 = a5;
      do
      {
        *unsigned int v20 = v20[v14];
        ++v20;
        --v17;
      }
      while (v17);
      goto LABEL_20;
    }
  }
  unint64_t v19 = 0;
LABEL_20:
  if (a4) {
    int v22 = 0;
  }
  else {
    int v22 = v13;
  }
  uint64_t v23 = v22 + (uint64_t)v9;
  if (v23 < 0)
  {
    *a2 = -v9;
    char v27 = a5;
  }
  else
  {
    *a2 = v13;
    if ((uint64_t)v19 <= v23 && v19 <= 0x4F)
    {
      do
      {
        double v11 = modf(v11 * 10.0, &v31);
        a5[v19] = (int)v31 + 48;
        if ((uint64_t)v19 >= v23) {
          break;
        }
      }
      while (v19++ < 0x4F);
    }
    if (v23 >= 80)
    {
      char v27 = a5 + 79;
    }
    else
    {
      unsigned int v25 = &a5[v23];
      int v26 = (char)(a5[v23] + 5);
      a5[v23] += 5;
      if (v26 < 58)
      {
        char v27 = &a5[v23];
      }
      else
      {
        char v27 = &a5[v23];
        do
        {
          *unsigned int v25 = 48;
          if (v25 <= a5)
          {
            *unsigned int v25 = 49;
            ++*a2;
            if (!a4)
            {
              if (v27 > a5) {
                *char v27 = 48;
              }
              ++v27;
            }
            char v29 = *v25;
          }
          else
          {
            char v28 = *--v25;
            char v29 = v28 + 1;
            *unsigned int v25 = v28 + 1;
          }
        }
        while (v29 > 57);
      }
    }
  }
  *char v27 = 0;
  return a5;
}

int apr_snprintf(char *buf, apr_size_t len, const char *format, ...)
{
  va_start(va, format);
  c.curpos = buf;
  c.endpos = buf + 4;
  va_copy(v5, va);
  int result = apr_vformatter((int (__cdecl *)(apr_vformatter_buff_t *))snprintf_flush, &c, format, va);
  *c.curpos = 0;
  if (result == -1) {
    return 4;
  }
  return result;
}

uint64_t snprintf_flush()
{
  return 0xFFFFFFFFLL;
}

char *__cdecl apr_pstrdup(apr_pool_t *p, const char *s)
{
  if (!s) {
    return 0;
  }
  apr_size_t v4 = strlen(s) + 1;
  va_list v5 = apr_palloc(p, v4);
  memcpy(v5, s, v4);
  return (char *)v5;
}

apr_status_t apr_proc_kill(apr_proc_t *proc, int sig)
{
  if (kill((pid_t)proc, sig) == -1) {
    return *__error();
  }
  else {
    return 0;
  }
}

apr_array_header_t *__cdecl apr_array_make(apr_pool_t *p, int nelts, int elt_size)
{
  int v6 = (apr_array_header_t *)apr_palloc(p, 0x20uLL);
  if (nelts <= 1) {
    int v7 = 1;
  }
  else {
    int v7 = nelts;
  }
  int v8 = (char *)apr_palloc(p, v7 * elt_size);
  int v9 = v8;
  if (v8) {
    bzero(v8, v7 * elt_size);
  }
  v6->elts = v9;
  v6->pool = p;
  v6->elt_memory_object_size_t size = elt_size;
  v6->uint64_t nelts = 0;
  v6->nalloapr_vformatter_buff_t c = v7;
  return v6;
}

void *__cdecl apr_array_push(apr_array_header_t *arr)
{
  int nelts = arr->nelts;
  if (nelts == arr->nalloc)
  {
    if (nelts < 1) {
      int v3 = 1;
    }
    else {
      int v3 = 2 * nelts;
    }
    elts = (char *)apr_palloc(arr->pool, arr->elt_size * (uint64_t)v3);
    memcpy(elts, arr->elts, arr->elt_size * (uint64_t)arr->nalloc);
    bzero(&elts[arr->elt_size * arr->nalloc], arr->elt_size * (v3 - arr->nalloc));
    arr->elts = elts;
    arr->nalloapr_vformatter_buff_t c = v3;
    int nelts = arr->nelts;
  }
  else
  {
    elts = arr->elts;
  }
  arr->int nelts = nelts + 1;
  return &elts[arr->elt_size * (uint64_t)nelts];
}

apr_array_header_t *__cdecl apr_array_copy(apr_pool_t *p, const apr_array_header_t *arr)
{
  apr_size_t v4 = (apr_array_header_t *)apr_palloc(p, 0x20uLL);
  elt_memory_object_size_t size = arr->elt_size;
  if (arr->nalloc <= 1) {
    nalloapr_vformatter_buff_t c = 1;
  }
  else {
    nalloapr_vformatter_buff_t c = arr->nalloc;
  }
  int v7 = (char *)apr_palloc(p, nalloc * elt_size);
  v4->elts = v7;
  v4->pool = p;
  v4->elt_memory_object_size_t size = elt_size;
  v4->int nelts = 0;
  v4->nalloapr_vformatter_buff_t c = nalloc;
  memcpy(v7, arr->elts, arr->nelts * (uint64_t)arr->elt_size);
  int nelts = arr->nelts;
  v4->int nelts = nelts;
  bzero(&v4->elts[v4->elt_size * nelts], (v4->nalloc - nelts) * v4->elt_size);
  return v4;
}

char *__cdecl apr_array_pstrcat(apr_pool_t *p, const apr_array_header_t *arr, const char sep)
{
  int nelts = arr->nelts;
  int v5 = nelts - 1;
  if (nelts >= 1)
  {
    elts = arr->elts;
    if (elts)
    {
      uint64_t v8 = 0;
      while (1)
      {
        if (*(void *)elts) {
          v8 += strlen(*(const char **)elts);
        }
        if (!v5) {
          break;
        }
        elts += 8;
        --v5;
      }
      double v10 = (char *)apr_palloc(p, v8 + 1);
      double v12 = arr->elts;
      int v13 = 1;
      int v9 = v10;
      if (v12)
      {
LABEL_12:
        if (*(void *)v12)
        {
          size_t v14 = strlen(*(const char **)v12);
          memcpy(v9, *(const void **)v12, v14);
          v9 += v14;
        }
      }
      while (v13 < arr->nelts)
      {
        v12 += 8;
        ++v13;
        if (v12) {
          goto LABEL_12;
        }
      }
      goto LABEL_9;
    }
  }
  int v9 = apr_palloc(p, 1uLL);
  double v10 = v9;
  if (v9) {
LABEL_9:
  }
    *int v9 = 0;
  return v10;
}

apr_status_t apr_thread_mutex_create(apr_thread_mutex_t **mutex, unsigned int flags, apr_pool_t *pool)
{
  uint64_t v3 = *(void *)&flags;
  int v5 = (char *)apr_palloc(*(apr_pool_t **)&flags, 0x48uLL);
  int v6 = (apr_pool_t **)v5;
  if (v5)
  {
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 8) = 0u;
  }
  *(void *)int v5 = v3;
  apr_status_t result = pthread_mutex_init((pthread_mutex_t *)(v5 + 8), 0);
  if (!result)
  {
    apr_pool_cleanup_register(*v6, v6, (apr_status_t (__cdecl *)(void *))thread_mutex_cleanup, apr_pool_cleanup_null);
    apr_status_t result = 0;
    *mutex = (apr_thread_mutex_t *)v6;
  }
  return result;
}

uint64_t thread_mutex_cleanup(uint64_t a1)
{
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
}

char *gt_filepath_merge(const char *a1, const char *a2, apr_pool_t *a3)
{
  size_t v6 = strlen(a1);
  size_t v7 = strlen(a2);
  size_t v8 = v7;
  if (v6 && a1[v6 - 1] == 47) {
    --v6;
  }
  int v9 = (char *)apr_palloc(a3, v7 + v6 + 2);
  memcpy(v9, a1, v6);
  v9[v6] = 47;
  memcpy(&v9[v6 + 1], a2, v8);
  v9[v8 + 1 + v6] = 0;
  return v9;
}

unint64_t MinBytesPerRow(int a1, unsigned int a2)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (a1 > 1885745711)
        {
          if (a1 <= 2016686639)
          {
            if (a1 != 1885745712)
            {
              if (a1 == 1999843442) {
                goto LABEL_67;
              }
              int v4 = 1999908961;
              goto LABEL_56;
            }
          }
          else if (a1 <= 2019963439)
          {
            if (a1 != 2016686640) {
              return 0;
            }
          }
          else if (a1 != 2019963440)
          {
            if (a1 != 2037741171)
            {
              int v3 = 2037741158;
              goto LABEL_62;
            }
LABEL_63:
            a2 *= 2;
            return a2;
          }
        }
        if (a1 <= 1815162993) {
          break;
        }
        if (a1 != 1882468912)
        {
          if (a1 == 1815162994) {
            goto LABEL_67;
          }
          int v4 = 1815491698;
LABEL_56:
          if (a1 != v4) {
            return 0;
          }
LABEL_68:
          a2 *= 8;
          return a2;
        }
      }
      if (a1 <= 1380411456) {
        break;
      }
      if (a1 != 1751527984)
      {
        if (a1 == 1380411457) {
          goto LABEL_68;
        }
        int v6 = 1667838256;
LABEL_66:
        if (a1 == v6) {
          goto LABEL_67;
        }
        return 0;
      }
    }
    if (a1 <= 846624101)
    {
      if (a1 > 828584239)
      {
        if (a1 > 843264103)
        {
          if (a1 == 843264104 || a1 == 843264310) {
            goto LABEL_67;
          }
          if (a1 != 845361456) {
            return 0;
          }
          unsigned int v5 = 2 * a2 + 2;
        }
        else
        {
          if (a1 != 828584240)
          {
            if (a1 == 843264056) {
              goto LABEL_63;
            }
            int v4 = 843264102;
            goto LABEL_56;
          }
          unsigned int v5 = a2 + 2;
        }
        return (2 * ((2863311531u * (unint64_t)v5) >> 32)) & 0xFFFFFFFC;
      }
      if (a1 > 826486885)
      {
        if (a1 == 826486886) {
          goto LABEL_67;
        }
        if (a1 == 826486888) {
          goto LABEL_63;
        }
        int v3 = 826487094;
LABEL_62:
        if (a1 == v3) {
          goto LABEL_63;
        }
        return 0;
      }
      if (a1 == 24)
      {
        a2 *= 3;
        return a2;
      }
      if (a1 == 32) {
        goto LABEL_67;
      }
      int v2 = 826486840;
LABEL_46:
      if (a1 == v2) {
        return a2;
      }
      return 0;
    }
    if (a1 > 1094862673) {
      break;
    }
    if (a1 > 875704437)
    {
      if (a1 != 875704438 && a1 != 875836518 && a1 != 875836534) {
        return 0;
      }
    }
    else
    {
      if (a1 == 846624102 || a1 == 846624121) {
        goto LABEL_63;
      }
      if (a1 != 875704422) {
        return 0;
      }
    }
    a1 = 826486840;
  }
  if (a1 <= 1278226533)
  {
    if (a1 == 1094862674 || a1 == 1111970369) {
      goto LABEL_67;
    }
    int v2 = 1278226488;
    goto LABEL_46;
  }
  if (a1 > 1278226741)
  {
    if (a1 == 1278226742) {
      goto LABEL_63;
    }
    int v6 = 1380401729;
    goto LABEL_66;
  }
  if (a1 != 1278226534)
  {
    int v3 = 1278226536;
    goto LABEL_62;
  }
LABEL_67:
  a2 *= 4;
  return a2;
}

uint64_t IsBiplanar(int a1)
{
  uint64_t result = 1;
  if (a1 <= 875836517)
  {
    if (a1 > 645428783)
    {
      if (a1 != 645428784 && a1 != 875704422)
      {
        int v3 = 875704438;
LABEL_18:
        if (a1 != v3) {
          return 0;
        }
      }
    }
    else if (a1 != 641230384 && a1 != 641234480)
    {
      int v3 = 645424688;
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 > 1882468911)
    {
      if (a1 > 2016686639)
      {
        if (a1 == 2016686640) {
          return result;
        }
        int v3 = 2019963440;
      }
      else
      {
        if (a1 == 1882468912) {
          return result;
        }
        int v3 = 1885745712;
      }
      goto LABEL_18;
    }
    if (a1 != 875836518 && a1 != 875836534)
    {
      int v3 = 1751527984;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t BytesPerElement(int a1)
{
  uint64_t v1 = 1;
  if (a1 <= 875836533)
  {
    if (a1 <= 828584239)
    {
      if (a1 <= 645428783)
      {
        if (a1 <= 641230383)
        {
          if (a1 == 24) {
            return 3;
          }
          if (a1 == 32) {
            return 4;
          }
        }
        return 0;
      }
      if (a1 <= 826486885)
      {
        if (a1 == 826486840) {
          return v1;
        }
        return 0;
      }
      if (a1 == 826486886) {
        return 4;
      }
      if (a1 == 826486888) {
        return 2;
      }
      int v3 = 826487094;
    }
    else
    {
      if (a1 > 845361455)
      {
        if (a1 <= 875704421)
        {
          if (a1 != 845361456)
          {
            if (a1 != 846624102)
            {
              int v2 = 846624121;
              goto LABEL_51;
            }
            return 4;
          }
          return 8;
        }
        return 0;
      }
      if (a1 > 843264101)
      {
        if (a1 != 843264102)
        {
          if (a1 == 843264104) {
            return 4;
          }
          int v2 = 843264310;
          goto LABEL_51;
        }
        return 8;
      }
      if (a1 == 828584240) {
        return 4;
      }
      int v3 = 843264056;
    }
    goto LABEL_57;
  }
  if (a1 > 1751527983)
  {
    if (a1 <= 1999843441)
    {
      if (a1 > 1815491697)
      {
        if (a1 != 1815491698) {
          return 0;
        }
        return 8;
      }
      if (a1 == 1751527984) {
        return 0;
      }
      int v2 = 1815162994;
    }
    else
    {
      if (a1 <= 2019963439)
      {
        if (a1 == 1999843442) {
          return 4;
        }
        if (a1 == 1999908961) {
          return 8;
        }
        return 0;
      }
      if (a1 == 2019963440) {
        return 0;
      }
      if (a1 == 2037741158) {
        return 4;
      }
      int v2 = 2037741171;
    }
LABEL_51:
    if (a1 == v2) {
      return 4;
    }
    return 0;
  }
  if (a1 > 1278226535)
  {
    if (a1 > 1380401728)
    {
      if (a1 == 1380401729) {
        return 4;
      }
      if (a1 != 1380411457)
      {
        int v2 = 1667838256;
        goto LABEL_51;
      }
      return 8;
    }
    if (a1 == 1278226536) {
      return 2;
    }
    int v3 = 1278226742;
LABEL_57:
    if (a1 != v3) {
      return 0;
    }
    return 2;
  }
  if (a1 <= 1111970368)
  {
    if (a1 == 875836534) {
      return 0;
    }
    int v2 = 1094862674;
    goto LABEL_51;
  }
  if (a1 == 1111970369) {
    return 4;
  }
  if (a1 != 1278226488)
  {
    int v2 = 1278226534;
    goto LABEL_51;
  }
  return v1;
}

uint64_t ElementWidth(int a1)
{
  uint64_t v1 = 2;
  if (a1 <= 875704437)
  {
    if (a1 <= 828584239)
    {
      if (a1 > 645424687)
      {
        if (a1 != 645424688)
        {
          int v2 = 645428784;
          return a1 != v2;
        }
      }
      else if (a1 != 641230384)
      {
        int v2 = 641234480;
        return a1 != v2;
      }
      return 0;
    }
    if (a1 <= 846624101)
    {
      if (a1 != 828584240 && a1 != 845361456) {
        return 1;
      }
      return 3;
    }
    else if (a1 != 846624102 && a1 != 846624121)
    {
      int v2 = 875704422;
      return a1 != v2;
    }
  }
  else
  {
    if (a1 <= 1885745711)
    {
      if (a1 > 875836533)
      {
        if (a1 == 875836534 || a1 == 1751527984) {
          return 0;
        }
        int v2 = 1882468912;
        return a1 != v2;
      }
      if (a1 != 875704438)
      {
        int v2 = 875836518;
        return a1 != v2;
      }
      return 0;
    }
    if (a1 <= 2019963439)
    {
      if (a1 != 1885745712)
      {
        int v2 = 2016686640;
        return a1 != v2;
      }
      return 0;
    }
    if (a1 == 2019963440) {
      return 0;
    }
    if (a1 != 2037741158 && a1 != 2037741171) {
      return 1;
    }
  }
  return v1;
}

id gt_default_log()
{
  uint64_t v0 = s_defaultLog;
  if (s_defaultLog == &_os_log_default)
  {
    if (gt_default_log_onceToken != -1) {
      dispatch_once(&gt_default_log_onceToken, &__block_literal_global_11330);
    }
    uint64_t v0 = s_defaultLog;
  }

  return v0;
}

void __gt_default_log_block_invoke(id a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&def_1C1270, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "GPUTOOLS(warning): Log uninitialized, please call GTCoreLogInit(), logging to OS_LOG_DEFAULT instead", v1, 2u);
  }
}

id gt_tagged_log(unint64_t a1)
{
  if (s_logCount != 1 || a1 >= 3)
  {
    if (s_logUsingOsLog)
    {
      int v3 = gt_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = a1;
        _os_log_fault_impl(&def_1C1270, v3, OS_LOG_TYPE_FAULT, "fail: Invalid log tag: %llu", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      int v9 = __stderrp;
      id v10 = +[NSString stringWithFormat:@"fail: Invalid log tag: %llu", a1];
      fprintf(v9, "%s\n", (const char *)[v10 UTF8String]);
    }
    id v8 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  else
  {
    int v4 = (id *)(s_logs + 32 * a1);
    *(void *)&long long buf = *v4;
    *((void *)&buf + 1) = v4[1];
    id v14 = v4[2];
    id v5 = v4[3];
    id v15 = v5;
    int v6 = GTCoreLog_enabled((uint64_t)&buf);
    size_t v7 = &_os_log_disabled;
    if (v6) {
      size_t v7 = v5;
    }
    id v8 = v7;
    __destructor_8_s0_s8_s16_s24((uint64_t)&buf);
  }

  return v8;
}

uint64_t GTCoreLog_enabled(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 1;
  }
  int v2 = +[NSUserDefaults standardUserDefaults];
  id v3 = [v2 BOOLForKey:*(void *)(a1 + 16)];

  return (uint64_t)v3;
}

id PrettifyFenumString(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    if ([v1 hasPrefix:@"kDYFE"])
    {
      uint64_t v3 = [v2 substringFromIndex:5];

      int v2 = (void *)v3;
    }
    id v4 = [v2 rangeOfString:@"_"];
    if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v6 = [v2 stringByReplacingOccurrencesOfString:@"_" withString:@" " options:0 range:v4 v5];

      int v2 = (void *)v6;
    }
    size_t v7 = [v2 stringByReplacingOccurrencesOfString:@"_" withString:@":"];

    int v2 = +[NSString stringWithFormat:@"%@[%@%@]", @"-", v7, @":"];
  }

  return v2;
}

void GTError_addError(int *a1, uint64_t a2)
{
  if (a1 && *(_DWORD *)(a2 + 4))
  {
    if (GTError_initialize_onceToken != -1) {
      dispatch_once(&GTError_initialize_onceToken, &__block_literal_global_11510);
    }
    if (a1[1])
    {
      int v4 = *(_DWORD *)a2 | *a1 | 2;
    }
    else
    {
      int v5 = *a1;
      long long v7 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      *((_OWORD *)a1 + 2) = v6;
      int v4 = *a1 | v5;
    }
    *a1 = v4;
  }
}

uint64_t CalculateBindingsAccess(uint64_t result, int a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3 + 16;
    for (uint64_t i = a2; i; --i)
    {
      if ((*(unsigned char *)(v4 + 19) & 1) == 0) {
        goto LABEL_9;
      }
      int v7 = *(unsigned __int8 *)(v4 + 16);
      if ((v7 - 24) >= 4)
      {
        if (v7 == 2)
        {
          id v8 = (unsigned char *)v4;
          uint64_t v9 = v5;
          goto LABEL_8;
        }
        if (*(unsigned char *)(v4 + 16)) {
          goto LABEL_9;
        }
      }
      id v8 = (unsigned char *)v4;
      uint64_t v9 = a3;
LABEL_8:
      uint64_t result = (uint64_t)UpdateAccess(v8, v9);
LABEL_9:
      if (*(unsigned __int8 *)(v4 + 16) <= 1u)
      {
        uint64_t result = *(void *)(v4 + 8);
        if (result)
        {
          int v10 = *(unsigned __int8 *)result;
          if (v10 == 1 || v10 == 60 && *(unsigned char *)(result + 22) == 1 && (uint64_t result = *(void *)(result + 8)) != 0)
          {
            uint64_t result = GTMTLStructType_isArgumentBuffer(result);
            if (result) {
              *(void *)(a3 + (((unint64_t)*(unsigned __int8 *)(v4 + 18) >> 3) & 0x18) + 48) |= 1 << *(unsigned char *)(v4 + 18);
            }
          }
        }
      }
      v4 += 56;
    }
  }
  return result;
}

unsigned char *UpdateAccess(unsigned char *result, uint64_t a2)
{
  uint64_t v2 = result[18];
  if (result[16] != 2)
  {
    uint64_t v3 = v2 + 1;
    goto LABEL_5;
  }
  if (result[26])
  {
    uint64_t v3 = result[26] + v2;
LABEL_5:
    int v4 = result[17];
    while (1)
    {
      unsigned int v5 = v2 >> 6;
      if (v4 == 2) {
        break;
      }
      if (v4 == 1)
      {
        uint64_t v6 = 1 << v2;
        id v8 = (void *)(a2 + 16 * v5);
        *v8 |= 1 << v2;
        int v7 = v8 + 1;
        goto LABEL_12;
      }
      if (!v4)
      {
        uint64_t v6 = 1 << v2;
        int v7 = (void *)(a2 + 16 * v5);
LABEL_12:
        *v7 |= v6;
      }
      if (v3 == ++v2) {
        return result;
      }
    }
    uint64_t v6 = 1 << v2;
    int v7 = (void *)(a2 + 16 * v5 + 8);
    goto LABEL_12;
  }
  return result;
}

BOOL GTMTLStructType_isArgumentBuffer(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = *(unsigned int *)(a1 + 16);
    if (v1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = *(void *)(a1 + 8);
      BOOL v4 = 1;
      while (1)
      {
        unsigned int v5 = *(unsigned __int8 *)(v3 + 32 * v2 + 24);
        if (v5 <= 1)
        {
          if (v5 == 1)
          {
            uint64_t v6 = v3 + 32 * v2;
LABEL_17:
            if (GTMTLStructType_isArgumentBuffer(*(void *)(v6 + 8))) {
              return v4;
            }
          }
        }
        else if (v5 == 2)
        {
          uint64_t v6 = v3 + 32 * v2;
          do
          {
            uint64_t v6 = *(void *)(v6 + 8);
            int v7 = *(unsigned __int8 *)(v6 + 24);
          }
          while (v7 == 2);
          if ((v7 - 58) <= 0x3C && ((1 << (v7 - 58)) & 0x1E00000000700007) != 0) {
            return v4;
          }
          if (v7 == 1) {
            goto LABEL_17;
          }
        }
        else
        {
          BOOL v9 = v5 - 78 > 0x28 || ((1 << (v5 - 78)) & 0x1E000000007) == 0;
          if (!v9 || v5 - 58 < 3) {
            return v4;
          }
        }
        BOOL v4 = ++v2 < v1;
        if (v2 == v1) {
          return v4;
        }
      }
    }
  }
  return 0;
}

uint64_t GetFuncEnumConstructorType(int a1)
{
  if (a1 <= -15716)
  {
    if (a1 > -16121)
    {
      if (a1 > -16015)
      {
        if (a1 <= -15892)
        {
          if (a1 > -15970)
          {
            switch(a1)
            {
              case -15922:
                return 59;
              case -15921:
                return 58;
              case -15920:
              case -15919:
              case -15918:
              case -15917:
              case -15916:
              case -15915:
              case -15911:
              case -15910:
                return 0;
              case -15914:
                return 22;
              case -15913:
                return 80;
              case -15912:
              case -15909:
                return 76;
              default:
                if (a1 == -15969)
                {
                  uint64_t result = 57;
                }
                else
                {
                  if (a1 != -15900) {
                    return 0;
                  }
                  uint64_t result = 73;
                }
                break;
            }
            return result;
          }
          if (a1 <= -15997)
          {
            switch(a1)
            {
              case -16014:
                return 28;
              case -16013:
                return 82;
              case -15997:
                return 38;
            }
            return 0;
          }
          if ((a1 + 15980) >= 2)
          {
            if (a1 == -15996) {
              return 76;
            }
            int v6 = -15972;
            goto LABEL_119;
          }
          return 80;
        }
        if (a1 <= -15778)
        {
          if (a1 <= -15848)
          {
            switch(a1)
            {
              case -15891:
                return 64;
              case -15870:
                return 74;
              case -15848:
                return 31;
            }
            return 0;
          }
          if (a1 > -15794)
          {
            if (a1 == -15793) {
              return 68;
            }
            int v6 = -15778;
LABEL_119:
            if (a1 != v6) {
              return 0;
            }
            return 22;
          }
          if (a1 == -15847) {
            return 62;
          }
          if (a1 != -15830) {
            return 0;
          }
          return 43;
        }
        if (a1 > -15739)
        {
          if ((a1 + 15731) >= 2)
          {
            if (a1 == -15738) {
              return 71;
            }
            if (a1 == -15717) {
              return 19;
            }
            return 0;
          }
          return 43;
        }
        if (a1 == -15777 || a1 == -15775) {
          return 80;
        }
        int v5 = -15740;
LABEL_67:
        if (a1 == v5) {
          return 29;
        }
        return 0;
      }
      if (a1 > -16054)
      {
        switch(a1)
        {
          case -16039:
          case -16029:
            return 62;
          case -16038:
            return 43;
          case -16037:
            return 18;
          case -16036:
          case -16035:
          case -16034:
          case -16033:
          case -16032:
            return 0;
          case -16031:
          case -16030:
            return 80;
          default:
            if ((a1 + 16053) < 3) {
              return 18;
            }
            if (a1 == -16018) {
              return 62;
            }
            return 0;
        }
      }
      switch(a1)
      {
        case -16120:
          uint64_t result = 50;
          break;
        case -16119:
        case -16118:
        case -16115:
        case -16114:
        case -16113:
        case -16112:
        case -16111:
        case -16110:
        case -16109:
        case -16108:
        case -16105:
        case -16103:
        case -16102:
        case -16100:
        case -16097:
        case -16094:
        case -16093:
        case -16092:
        case -16087:
        case -16086:
        case -16085:
        case -16084:
        case -16083:
          return 0;
        case -16117:
          return 22;
        case -16116:
        case -16104:
        case -16098:
        case -16096:
          return 80;
        case -16107:
        case -16106:
        case -16082:
        case -16081:
          return 43;
        case -16101:
          return 29;
        case -16099:
          uint64_t result = 81;
          break;
        case -16095:
          return 62;
        case -16091:
        case -16090:
        case -16089:
        case -16088:
          return 71;
        default:
          if (a1 != -16075) {
            return 0;
          }
          uint64_t result = 67;
          break;
      }
      return result;
    }
    if (a1 > -16234)
    {
      if (a1 > -16197)
      {
        if (a1 > -16164)
        {
          if (a1 != -16163)
          {
            if (a1 == -16128) {
              return 41;
            }
            return 0;
          }
          return 22;
        }
        if (a1 != -16196)
        {
          if (a1 == -16165) {
            return 27;
          }
          return 0;
        }
        return 80;
      }
      if ((a1 + 16200) < 4) {
        return 29;
      }
      int v3 = -16233;
    }
    else
    {
      if (a1 > -16355)
      {
        switch(a1)
        {
          case -16354:
            goto LABEL_39;
          case -16353:
          case -16286:
            uint64_t result = 70;
            break;
          case -16352:
            return 28;
          case -16351:
            uint64_t result = 65;
            break;
          case -16343:
          case -16342:
            return 25;
          case -16316:
          case -16315:
            return 27;
          case -16314:
          case -16313:
          case -16312:
            return 22;
          case -16311:
            uint64_t result = 34;
            break;
          case -16310:
          case -16294:
            return 80;
          case -16309:
            uint64_t result = 75;
            break;
          case -16308:
          case -16307:
          case -16306:
          case -16305:
          case -16304:
            return 62;
          case -16303:
          case -16302:
          case -16301:
          case -16300:
            return 71;
          case -16299:
          case -16298:
          case -16297:
          case -16296:
            return 29;
          case -16290:
            return 43;
          default:
            return 0;
        }
        return result;
      }
      if (a1 == -18432) {
        return 39;
      }
      if (a1 == -18431) {
        return 40;
      }
      int v3 = -16368;
    }
LABEL_88:
    if (a1 == v3) {
      return 80;
    }
    return 0;
  }
  if (a1 > -15365)
  {
    if (a1 <= -12545)
    {
      if (a1 <= -15318)
      {
        switch(a1)
        {
          case -15359:
          case -15358:
          case -15356:
          case -15355:
          case -15354:
          case -15353:
          case -15352:
          case -15351:
LABEL_19:
            uint64_t result = 16;
            break;
          case -15357:
          case -15349:
          case -15347:
          case -15346:
          case -15345:
          case -15344:
          case -15343:
          case -15342:
          case -15341:
          case -15340:
          case -15339:
          case -15338:
          case -15337:
          case -15336:
          case -15335:
          case -15334:
            return 0;
          case -15350:
            uint64_t result = 52;
            break;
          case -15348:
            return 53;
          case -15333:
            return 51;
          default:
            int v7 = -15364;
LABEL_148:
            if (a1 != v7) {
              return 0;
            }
            uint64_t result = 17;
            break;
        }
        return result;
      }
      if (a1 > -15262)
      {
        if ((a1 + 15260) >= 2)
        {
          if (a1 == -15261) {
            return 18;
          }
          if (a1 == -15245) {
            return 72;
          }
          return 0;
        }
      }
      else
      {
        if (a1 <= -15300)
        {
          if (a1 == -15317) {
            return 33;
          }
          int v2 = -15306;
          goto LABEL_48;
        }
        if (a1 == -15299) {
          return 55;
        }
        if (a1 != -15296) {
          return 0;
        }
      }
      return 53;
    }
    if (a1 > -6123)
    {
      int v4 = a1 + 6122;
      uint64_t result = 6;
      switch(v4)
      {
        case 0:
          uint64_t result = 10;
          break;
        case 3:
        case 6:
LABEL_63:
          uint64_t result = 8;
          break;
        case 11:
          return result;
        case 12:
          uint64_t result = 9;
          break;
        case 13:
          uint64_t result = 7;
          break;
        default:
          return 0;
      }
      return result;
    }
    if (a1 > -7167)
    {
      switch(a1)
      {
        case -6143:
        case -6131:
          uint64_t result = 5;
          break;
        case -6142:
        case -6140:
        case -6139:
        case -6138:
        case -6137:
        case -6136:
        case -6135:
        case -6132:
        case -6130:
          return 0;
        case -6141:
        case -6133:
        case -6129:
          goto LABEL_63;
        case -6134:
          uint64_t result = 11;
          break;
        default:
          if (a1 != -7166 && a1 != -6655) {
            return 0;
          }
          uint64_t result = 2;
          break;
      }
      return result;
    }
    if (a1 > -10238)
    {
      if (a1 == -10237) {
        return 22;
      }
      int v3 = -7167;
      goto LABEL_88;
    }
    if (a1 == -12544) {
      return 25;
    }
    int v2 = -12543;
LABEL_48:
    if (a1 == v2) {
      return 51;
    }
    return 0;
  }
  if (a1 <= -15507)
  {
    if (a1 > -15588)
    {
      if (a1 > -15552)
      {
        if (a1 > -15541)
        {
          if (a1 == -15540) {
            return 60;
          }
          if (a1 == -15531) {
            return 37;
          }
          int v6 = -15509;
          goto LABEL_119;
        }
        if ((a1 + 15551) < 2) {
          return 43;
        }
        int v5 = -15541;
        goto LABEL_67;
      }
      switch(a1)
      {
        case -15587:
LABEL_39:
          uint64_t result = 21;
          break;
        case -15586:
        case -15584:
          return 28;
        case -15585:
          return 74;
        case -15578:
LABEL_69:
          uint64_t result = 83;
          break;
        case -15577:
          return 60;
        default:
          return 0;
      }
    }
    else
    {
      if (a1 <= -15674)
      {
        switch(a1)
        {
          case -15707:
          case -15705:
            return 22;
          case -15706:
          case -15704:
          case -15703:
          case -15702:
          case -15700:
          case -15699:
          case -15698:
          case -15697:
          case -15696:
          case -15694:
          case -15692:
          case -15691:
            return 0;
          case -15701:
            return 25;
          case -15695:
            return 37;
          case -15693:
            return 62;
          case -15690:
          case -15689:
          case -15688:
            return 80;
          default:
            if ((a1 + 15715) < 2) {
              return 18;
            }
            return 0;
        }
      }
      switch(a1)
      {
        case -15620:
LABEL_11:
          uint64_t result = 44;
          break;
        case -15619:
        case -15618:
        case -15617:
        case -15616:
        case -15612:
        case -15611:
        case -15610:
          return 0;
        case -15615:
        case -15614:
          goto LABEL_19;
        case -15613:
          return 37;
        case -15609:
        case -15608:
          return 43;
        default:
          int v7 = -15673;
          goto LABEL_148;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case -15464:
        goto LABEL_19;
      case -15463:
      case -15444:
      case -15437:
      case -15436:
        goto LABEL_11;
      case -15462:
      case -15443:
      case -15442:
      case -15441:
        return 60;
      case -15461:
      case -15406:
      case -15405:
      case -15404:
      case -15403:
        return 71;
      case -15460:
      case -15440:
      case -15439:
      case -15438:
        goto LABEL_69;
      case -15459:
      case -15458:
      case -15457:
      case -15456:
      case -15455:
      case -15454:
      case -15453:
      case -15452:
      case -15451:
      case -15450:
      case -15449:
      case -15448:
      case -15447:
      case -15446:
      case -15445:
      case -15433:
      case -15432:
      case -15431:
      case -15426:
      case -15424:
      case -15423:
      case -15422:
      case -15418:
      case -15417:
      case -15416:
      case -15415:
      case -15414:
      case -15413:
      case -15412:
      case -15411:
      case -15410:
      case -15409:
      case -15408:
      case -15407:
        return 0;
      case -15435:
      case -15434:
      case -15425:
      case -15421:
      case -15420:
      case -15419:
        return 62;
      case -15430:
      case -15429:
      case -15428:
      case -15427:
        return 43;
      default:
        if (a1 == -15506) {
          goto LABEL_19;
        }
        if (a1 != -15496) {
          return 0;
        }
        uint64_t result = 61;
        break;
    }
  }
  return result;
}

uint64_t IsFuncEnumDestructor(int a1)
{
  uint64_t result = 1;
  if (a1 <= -15894)
  {
    if (a1 <= -16294)
    {
      if (a1 > -16371)
      {
        unsigned int v7 = a1 + 16370;
        if (v7 > 0x35) {
          return 0;
        }
        uint64_t v4 = 1 << v7;
        uint64_t v5 = 0x26000104000081;
        goto LABEL_29;
      }
      if (a1 == -20475 || a1 == -20458) {
        return result;
      }
      int v10 = -16383;
    }
    else
    {
      if (a1 > -16119)
      {
        if ((a1 + 15973) <= 0x32 && ((1 << (a1 + 101)) & 0x4004000010001) != 0) {
          return result;
        }
        unsigned int v9 = a1 + 16118;
        if (v9 > 0x38) {
          return 0;
        }
        uint64_t v4 = 1 << v9;
        uint64_t v5 = 0x100000000200001;
        goto LABEL_29;
      }
      if ((a1 + 16293) <= 0x37 && ((1 << (a1 - 91)) & 0x98000000002045) != 0) {
        return result;
      }
      int v10 = -16127;
    }
LABEL_43:
    if (a1 == v10) {
      return result;
    }
    return 0;
  }
  if (a1 > -15496)
  {
    if (a1 <= -15232)
    {
      if ((a1 + 15341) > 0x34 || ((1 << (a1 - 19)) & 0x10000000201601) == 0)
      {
        unsigned int v6 = a1 + 15495;
        if (v6 > 6 || ((1 << v6) & 0x43) == 0) {
          return 0;
        }
      }
      return result;
    }
    if (a1 <= -7162)
    {
      if (a1 == -15231) {
        return result;
      }
      int v10 = -10206;
    }
    else
    {
      if (a1 == -7161 || a1 == -6652) {
        return result;
      }
      int v10 = -6139;
    }
    goto LABEL_43;
  }
  if (a1 <= -15686)
  {
    if ((a1 + 15893) <= 0x1A && ((1 << (a1 + 21)) & 0x4004011) != 0) {
      return result;
    }
    unsigned int v3 = a1 + 15801;
    if (v3 <= 0x3B)
    {
      uint64_t v4 = 1 << v3;
      uint64_t v5 = 0x800000100000801;
      goto LABEL_29;
    }
    return 0;
  }
  if ((a1 + 15685) <= 0x29 && ((1 << (a1 + 69)) & 0x20004000401) != 0) {
    return result;
  }
  unsigned int v8 = a1 + 15610;
  if (v8 > 0x2A) {
    return 0;
  }
  uint64_t v4 = 1 << v8;
  uint64_t v5 = 0x40000000021;
LABEL_29:
  if ((v4 & v5) == 0) {
    return 0;
  }
  return result;
}

uint64_t IsFuncEnumDrawCall(int a1)
{
  uint64_t result = 1;
  if ((a1 + 16251) > 0x24 || ((1 << (a1 + 123)) & 0x1E0000000FLL) == 0)
  {
    unsigned int v3 = a1 + 16147;
    BOOL v4 = (a1 + 15416) < 3;
    return v3 < 4 || v4;
  }
  return result;
}

BOOL IsFuncEnumSampledBlitCall(int a1)
{
  return (a1 + 16382) < 6 || (a1 + 16210) < 2 || (a1 + 15878) < 2;
}

BOOL IsFuncEnumSampledBlitCallAGX(int a1)
{
  BOOL result = 1;
  if (((a1 + 15995) > 0x25 || ((1 << (a1 + 123)) & 0x38000C000FLL) == 0)
    && ((a1 + 15802) > 4 || ((1 << (a1 - 70)) & 0x15) == 0))
  {
    return (a1 + 15470) < 2;
  }
  return result;
}

BOOL IsFuncEnumGPUCommandCall(int a1)
{
  if (IsFuncEnumDrawCall(a1)) {
    return 1;
  }
  BOOL result = 1;
  if ((a1 + 16079) >= 2 && a1 != -16327 && a1 != -16220)
  {
    if (IsFuncEnumSampledBlitCall(a1) || IsFuncEnumSampledBlitCallAGX(a1)) {
      return 1;
    }
    BOOL result = 1;
    if (a1 != -16137 && a1 != -15486 && a1 != -15297) {
      return (a1 + 15416) < 3;
    }
  }
  return result;
}

uint64_t IsFuncEnumPushDebugGroup(int a1)
{
  uint64_t result = 1;
  if (a1 <= -16066)
  {
    if (a1 > -16284)
    {
      if (a1 == -16283) {
        return result;
      }
      int v3 = -16244;
    }
    else
    {
      if (a1 == -16374) {
        return result;
      }
      int v3 = -16323;
    }
    goto LABEL_13;
  }
  if (a1 <= -15787)
  {
    if (a1 == -16065) {
      return result;
    }
    int v3 = -15882;
    goto LABEL_13;
  }
  if (a1 != -15786 && a1 != -15639)
  {
    int v3 = -15292;
LABEL_13:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t IsFuncEnumPopDebugGroup(int a1)
{
  uint64_t result = 1;
  if (a1 <= -16065)
  {
    if (a1 > -16283)
    {
      if (a1 == -16282) {
        return result;
      }
      int v3 = -16243;
    }
    else
    {
      if (a1 == -16373) {
        return result;
      }
      int v3 = -16322;
    }
    goto LABEL_13;
  }
  if (a1 <= -15788)
  {
    if (a1 == -16064) {
      return result;
    }
    int v3 = -15881;
    goto LABEL_13;
  }
  if (a1 != -15787 && a1 != -15640)
  {
    int v3 = -15293;
LABEL_13:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t IsFuncEnumEndEncoding(int a1)
{
  uint64_t result = 1;
  if (a1 > -16247)
  {
    if (a1 > -15790)
    {
      if (a1 == -15789) {
        return result;
      }
      int v3 = -15642;
    }
    else
    {
      if (a1 == -16246) {
        return result;
      }
      int v3 = -15884;
    }
    goto LABEL_10;
  }
  if (a1 != -16376 && a1 != -16325)
  {
    int v3 = -16285;
LABEL_10:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t IsFuncEnumUseResourceCall(int a1)
{
  uint64_t result = 1;
  if (a1 <= -15822)
  {
    if ((a1 + 16047) < 8) {
      return result;
    }
    return 0;
  }
  if (a1 <= -15635)
  {
    if ((a1 + 15821) < 4) {
      return result;
    }
    return 0;
  }
  if ((a1 + 15634) >= 4 && a1 != -15510 && a1 != -15507) {
    return 0;
  }
  return result;
}

const char *GetFuncEnumAsString(int a1)
{
  if (a1 > -12545)
  {
    if (a1 > -7169)
    {
      switch(a1)
      {
        case -6144:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset";
          break;
        case -6143:
          uint64_t result = "kDYFEMPSPlugin_newCNNConvolutionWithDescriptor_convolutionData";
          break;
        case -6142:
          uint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeBatchToCommandBuffer_computeCommandEncoder_options_sourceText"
                   "ures_sourceInfo_destinationTextures_destinationInfo_zeroPadSizeX_zeroPadSizeY_predicationBuffer_predicationOffset";
          break;
        case -6141:
          uint64_t result = "kDYFEMPSPlugin_newCNNPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY";
          break;
        case -6140:
          uint64_t result = "kDYFEMPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_mat"
                   "rixStructure_vector_vectorStructure_result_resultStructure_predicationBuffer_predicationOffset";
          break;
        case -6139:
          uint64_t result = "kDYFEMPSExternalPluginBase_dealloc";
          break;
        case -6138:
          uint64_t result = "kDYFEMPSExternalCNNUnary_maxBatchSize";
          break;
        case -6137:
          uint64_t result = "kDYFEMPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_mat"
                   "rixStructure_vector_vectorStructure_result_resultStructure";
          break;
        case -6136:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predica"
                   "tionBuffer_predicationOffset";
          break;
        case -6135:
          uint64_t result = "kDYFEMPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo"
                   "_destinationTexture_destinationInfo";
          break;
        case -6134:
          uint64_t result = "kDYFEMPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta";
          break;
        case -6133:
          uint64_t result = "kDYFEMPSPlugin_newCNNNeuronWithNeuronType_neuronParameterA_neuronParameterB_neuronParameterC";
          break;
        case -6132:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo";
          break;
        case -6131:
          uint64_t result = "kDYFEMPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected";
          break;
        case -6130:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_A_aInfo_B_bInfo_C_cInfo";
          break;
        case -6129:
          uint64_t result = "kDYFEMPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count";
          break;
        case -6128:
          uint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_options_batchSize_inputMatrix_inpu"
                   "tMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alp"
                   "ha_numberOfFeatureVectors_inputFeatureChannels_outputFeatureChannels_neuronType_neuronParameterA_neur"
                   "onParameterB_neuronParameterC";
          break;
        case -6127:
          uint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeights";
          break;
        case -6126:
          uint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_s"
                   "ourceInfo_destinationTexture_destinationInfo";
          break;
        case -6125:
          uint64_t result = "kDYFEMPSExternalCNNBinary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTe"
                   "xture_primaryInfo_secondaryTexture_secondaryInfo_destinationTexture_destinationInfo";
          break;
        case -6124:
          uint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_options_batchSize_inputMatrix_inpu"
                   "tMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alp"
                   "ha_numberOfFeatureVectors_inputFeatureChannels_outputFeatureChannels_neuronType_neuronParameterA_neur"
                   "onParameterB_neuronParameterC_predicationBuffer_predicationOffset";
          break;
        case -6123:
          uint64_t result = "kDYFEMPSExternalCNNBinary_maxBatchSize";
          break;
        case -6122:
          uint64_t result = "kDYFEMPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_inter"
                   "iorColumns_alpha_beta";
          break;
        case -6121:
          uint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_s"
                   "ourceInfo_destinationTexture_destinationInfo_zeroPadSizeX_zeroPadSizeY";
          break;
        case -6120:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiases";
          break;
        case -6119:
          uint64_t result = "kDYFEMPSPlugin_newCNNSoftMax";
          break;
        case -6118:
          uint64_t result = "kDYFEMPSExternalCNNBinary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_prim"
                   "aryTextures_primaryInfo_secondaryTextures_secondaryInfo_destinationTextures_destinationInfo_predicati"
                   "onBuffer_predicationOffset";
          break;
        case -6117:
          uint64_t result = "kDYFEMPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceText"
                   "ure_sourceInfo_destinationTexture_destinationInfo";
          break;
        case -6116:
          uint64_t result = "kDYFEMPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_di"
                   "lationRateX_dilationRateY";
          break;
        case -6115:
          uint64_t result = "kDYFEMPSExternalCNNUnary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourc"
                   "eTextures_sourceInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset";
          break;
        case -6114:
          uint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_encodeBatchToCommandBuffer_computeCommandEncoder_options_plugi"
                   "nOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_weightsGradient_biasesGradient_a"
                   "ccumulate_predicationBuffer_predicationOffset";
          break;
        case -6113:
          uint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_predicationBuff"
                   "er_predicationOffset";
          break;
        case -6112:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predica"
                   "tionBuffer_predicationOffset";
          break;
        case -6111:
          uint64_t result = "kDYFEMPSPlugin_newCNNConvolutionGradientWithDescriptor_convolutionData";
          break;
        case -6110:
          uint64_t result = "kDYFEMPSPlugin_newMatrixFullyConnected";
          break;
        case -6109:
          uint64_t result = "kDYFEMPSPlugin_newCNNPoolingAverageWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY";
          break;
        case -6108:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataTyp"
                   "e_biases_predicationBuffer_predicationOffset";
          break;
        case -6107:
          uint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_weightsDataType"
                   "_predicationBuffer_predicationOffset";
          break;
        case -6106:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataTyp"
                   "e_biases_predicationBuffer_predicationOffset";
          break;
        case -6105:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRowsAndRes"
                   "ultColumnsAndInteriorColumns_alphaAndBeta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset";
          break;
        case -6104:
          uint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_in"
                   "putMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_a"
                   "lpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannels_neuronType_neuronParameters";
          break;
        case -6103:
          uint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_in"
                   "putMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_a"
                   "lpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannelsAndNeuronTypeAndPredication"
                   "Offset_neuronParameters_predicationBuffer";
          break;
        case -6102:
          uint64_t result = "kDYFEMPSExternalNDArrayConvolution2DGradient_encodePrimaryGradientToCommandBuffer_encoder_options_plu"
                   "ginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinationI"
                   "nfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6101:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset_transA_transB";
          break;
        case -6100:
          uint64_t result = "kDYFEMPSExternalNDArrayConvolution2DGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_p"
                   "luginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinatio"
                   "nInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6099:
          uint64_t result = "kDYFEMPSExternalNDArrayBinaryGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOpti"
                   "ons_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_d"
                   "estinationInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6098:
          uint64_t result = "kDYFEMPSExternalNDArrayBinaryGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_pluginOp"
                   "tions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination"
                   "_destinationInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6097:
          uint64_t result = "kDYFEMPSExternalNDArrayBinary_encodeToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_prima"
                   "ryInfo_secondaryBuffer_secondaryInfo_destinationBuffer_destinationInfo_predicationBuffer_predicationOffset";
          break;
        case -6096:
          uint64_t result = "kDYFEMPSPlugin_newNDArrayConvolution2DGradientWithDescriptor";
          break;
        case -6095:
          uint64_t result = "kDYFEMPSPlugin_newNDArrayConvolution2DWithDescriptor";
          break;
        default:
          switch(a1)
          {
            case -7168:
              uint64_t result = "kDYFECAMetalLayer_setPresentsWithTransaction";
              break;
            case -7167:
              uint64_t result = "kDYFECAMetalDrawable_texture";
              break;
            case -7166:
              uint64_t result = "kDYFECAMetalLayer_nextDrawable";
              break;
            case -7165:
              uint64_t result = "kDYFECAMetalLayer_setPixelFormat";
              break;
            case -7164:
              uint64_t result = "kDYFECAMetalLayer_setDrawableSize";
              break;
            case -7163:
              uint64_t result = "kDYFECAMetalLayer_setDevice";
              break;
            case -7162:
              uint64_t result = "kDYFECAMetalLayer_setBounds_contentsScale";
              break;
            case -7161:
              uint64_t result = "kDYFECAMetalDrawable_dealloc";
              break;
            case -7160:
              uint64_t result = "kDYFECAMetalLayer_setFramebufferOnly";
              break;
            case -7159:
              uint64_t result = "kDYFECAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties";
              break;
            case -7158:
              uint64_t result = "kDYFECAMetalDrawable_present";
              break;
            case -7157:
              uint64_t result = "kDYFECAMetalDrawable_presentAtTime";
              break;
            case -7156:
              uint64_t result = "kDYFECAMetalDrawable_presentAfterMinimumDuration";
              break;
            case -7155:
              uint64_t result = "kDYFEUIScreen_setInterfaceOrientation";
              break;
            case -7154:
              uint64_t result = "kDYFECAMetalLayer_setWantsExtendedDynamicRangeContent";
              break;
            case -7153:
              uint64_t result = "kDYFECAMetalLayer_setColorspace";
              break;
            default:
              switch(a1)
              {
                case -6656:
                  uint64_t result = "kDYFENSHMDMetalSession_setDrawablePixelFormat";
                  break;
                case -6655:
                  uint64_t result = "kDYFENSHMDMetalSession_nextDrawable";
                  break;
                case -6654:
                  uint64_t result = "kDYFENSHMDMetalSession_initWithMetalDevice_deviceReference_hmdName";
                  break;
                case -6653:
                  uint64_t result = "kDYFENSHMDMetalSession_setDrawableSize";
                  break;
                case -6652:
                  uint64_t result = "kDYFENSHMDMetalSession_dealloc";
                  break;
                default:
LABEL_1384:
                  uint64_t result = 0;
                  break;
              }
              break;
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case -10240:
          uint64_t result = "kDYFEMTLCommandBuffer_restoreMTLBufferContents";
          break;
        case -10239:
          uint64_t result = "kDYFEMTLDevice_deviceReference";
          break;
        case -10238:
          uint64_t result = "kDYFEMTLTexture_harvested_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage";
          break;
        case -10237:
          uint64_t result = "kDYFEMTLDevice_harvested_newBufferWithBytes_length_options";
          break;
        case -10236:
          uint64_t result = "kDYFEMTLTexture_harvested_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_totalBytes";
          break;
        case -10235:
          uint64_t result = "kDYFEMTLBuffer_resourceUsage";
          break;
        case -10234:
          uint64_t result = "kDYFEMTLTexture_resourceUsage";
          break;
        case -10233:
          uint64_t result = "kDYFEMTLDevice_setSelectedCommandQueueAddress";
          break;
        case -10232:
          uint64_t result = "kDYFEMTLTexture_restoreIOSurfaceData_length_forPlane";
          break;
        case -10231:
          uint64_t result = "kDYFEMTLTexture_mipmapInfo";
          break;
        case -10230:
          uint64_t result = "kDYFEMTLDevice_setCapturingCommandQueueAddress";
          break;
        case -10229:
          uint64_t result = "kDYFEMTLCommandBuffer_indirectArgumentBufferData";
          break;
        case -10228:
          uint64_t result = "kDYFEMTLBuffer_gpuVirtualAddress";
          break;
        case -10227:
          uint64_t result = "kDYFEMTLTexture_uniqueIdentifier";
          break;
        case -10226:
          uint64_t result = "kDYFEMTLSamplerState_uniqueIdentifier";
          break;
        case -10225:
          uint64_t result = "kDYFEMTLCommandBuffer_encodeIndirectArgumentsForBuffer_data";
          break;
        case -10224:
          uint64_t result = "kDYFEFrameEnd";
          break;
        case -10223:
          uint64_t result = "kDYFEMTLBuffer_allocatedSize";
          break;
        case -10222:
          uint64_t result = "kDYFEMTLTexture_allocatedSize";
          break;
        case -10221:
          uint64_t result = "kDYFEMTLBuffer_indirectCommandBufferData";
          break;
        case -10220:
          uint64_t result = "kDYFEMTLRenderPipelineState_uniqueIdentifier";
          break;
        case -10219:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_restoreData";
          break;
        case -10218:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_uniqueIdentifier";
          break;
        case -10217:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectCommandNop";
          break;
        case -10216:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_restoreOptimizedRanges";
          break;
        case -10215:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_allocatedSize";
          break;
        case -10214:
          uint64_t result = "kDYFEMTLComputePipelineState_uniqueIdentifier";
          break;
        case -10213:
          uint64_t result = "kDYFEMTLResourceStateCommandEncoder_harvested_updateTextureMapping_mode_region_mipLevel_slice";
          break;
        case -10212:
          uint64_t result = "kDYFEMTLTexture_timeSinceTouched";
          break;
        case -10211:
          uint64_t result = "kDYFEMTLHeap_timeSinceTouched";
          break;
        case -10210:
          uint64_t result = "kDYFEMTLBuffer_timeSinceTouched";
          break;
        case -10209:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_timeSinceTouched";
          break;
        case -10208:
          uint64_t result = "kDYFEMTLHeap_usedSize";
          break;
        case -10207:
          uint64_t result = "kDYFEMTLHeap_currentAllocatedSize";
          break;
        case -10206:
          uint64_t result = "kDYFEMTLSharedEventHandle_dealloc";
          break;
        case -10205:
          uint64_t result = "kDYFEMTLTexture_compressionFeedback";
          break;
        case -10204:
          uint64_t result = "kDYFEMTLTexture_allocationID";
          break;
        case -10203:
          uint64_t result = "kDYFEMTLBuffer_allocationID";
          break;
        case -10202:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_allocationID";
          break;
        case -10201:
          uint64_t result = "kDYFEMTLTexture_saveSlice_level_zPlane_normalize_blitOption_toPath";
          break;
        case -10200:
          uint64_t result = "kDYFEMTLBuffer_saveContentsToPath";
          break;
        case -10199:
          uint64_t result = "kDYFEMTLRenderPipelineState_resourceIndex";
          break;
        case -10198:
          uint64_t result = "kDYFEMTLTexture_resourceIndex";
          break;
        case -10197:
          uint64_t result = "kDYFEMTLAccelerationStructure_allocationID";
          break;
        case -10196:
          uint64_t result = "kDYFEMTLAccelerationStructure_allocatedSize";
          break;
        case -10195:
          uint64_t result = "kDYFEMTLAccelerationStructure_resourceUsage";
          break;
        case -10194:
          uint64_t result = "kDYFEMTLAccelerationStructure_restoreMTLAccelerationStructure";
          break;
        case -10193:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_uniqueIdentifier";
          break;
        case -10192:
          uint64_t result = "kDYFEMTLRenderPipelineState_allocatedSize";
          break;
        case -10191:
          uint64_t result = "kDYFEMTLComputePipelineState_allocatedSize";
          break;
        case -10190:
          uint64_t result = "kDYFEMTLAccelerationStructure_restoreMTLAccelerationStructure_instance";
          break;
        case -10189:
          uint64_t result = "kDYFEMTLDynamicLibrary_installName";
          break;
        case -10188:
          uint64_t result = "kDYFEMTLLibrary_libraryIdentifier";
          break;
        case -10187:
          uint64_t result = "kDYFEMTLBuffer_heapOffset";
          break;
        case -10186:
          uint64_t result = "kDYFEMTLBuffer_parentGPUAddress_parentGPUSize";
          break;
        case -10185:
          uint64_t result = "kDYFEMTLTexture_heapOffset";
          break;
        case -10184:
          uint64_t result = "kDYFEMTLRenderPipelineState_imageblockSampleLength";
          break;
        case -10183:
          uint64_t result = "kDYFEMTLLibrary_type";
          break;
        case -10182:
          uint64_t result = "kDYFEMTLAccelerationStructure_allocationInfo";
          break;
        case -10181:
          uint64_t result = "kDYFEMTLAccelerationStructure_uniqueIdentifier";
          break;
        case -10180:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_timeSinceTouched";
          break;
        case -10179:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_allocatedSize";
          break;
        case -10178:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_timeSinceTouched";
          break;
        case -10177:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_allocationID";
          break;
        case -10176:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_allocationID";
          break;
        case -10175:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_uniqueIdentifier";
          break;
        case -10174:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_allocatedSize";
          break;
        case -10173:
          uint64_t result = "kDYFEMTLAccelerationStructure_timeSinceTouched";
          break;
        case -10172:
          uint64_t result = "kDYFEMTLRenderPipelineState_timeSinceTouched";
          break;
        case -10171:
          uint64_t result = "kDYFEMTLComputePipelineState_timeSinceTouched";
          break;
        case -10170:
          uint64_t result = "kDYFEMTLAccelerationStructure_resourceIndex";
          break;
        case -10169:
          uint64_t result = "kDYFEMTLAccelerationStructure_heapOffset";
          break;
        case -10168:
          uint64_t result = "kDYFEBoundary_Frame";
          break;
        case -10167:
          uint64_t result = "kDYFEMTLAccelerationStructure_gpuResourceID";
          break;
        case -10166:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_gpuResourceID";
          break;
        case -10165:
          uint64_t result = "kDYFEMTLRenderPipelineState_gpuResourceID";
          break;
        case -10164:
          uint64_t result = "kDYFEMTLTexture_gpuResourceID";
          break;
        case -10163:
          uint64_t result = "kDYFEMTLSamplerState_gpuResourceID";
          break;
        case -10162:
          uint64_t result = "kDYFEMTLComputePipelineState_gpuResourceID";
          break;
        case -10161:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_gpuResourceID";
          break;
        case -10160:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_gpuResourceID";
          break;
        case -10159:
          uint64_t result = "kDYFEMTLAccelerationStructure_state";
          break;
        case -10158:
          uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureState";
          break;
        case -10157:
          uint64_t result = "kDYFEMTLFunction_setDescriptor_library";
          break;
        case -10156:
          uint64_t result = "kDYFEMTLAccelerationStructure_children";
          break;
        case -10155:
          uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureChildren";
          break;
        case -10154:
          uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureDescriptor";
          break;
        case -10153:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_gpuAddress";
          break;
        case -10152:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffers";
          break;
        case -10151:
          uint64_t result = "kDYFEMTLCaptureManager_sharedCaptureManager";
          break;
        default:
          if (a1 == -12544)
          {
            uint64_t result = "kDYFEMTLCommandQueue_continueCommandBuffer_retainReferences";
          }
          else
          {
            if (a1 != -12543) {
              goto LABEL_1384;
            }
            uint64_t result = "kDYFEMTLIOCommandQueue_continueCommandBuffer_retainReferences";
          }
          break;
      }
    }
  }
  else if (a1 <= -18431)
  {
    switch(a1)
    {
      case -20480:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setColorTexture";
        break;
      case -20479:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setFence";
        break;
      case -20478:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setInputContentHeight";
        break;
      case -20477:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setInputContentWidth";
        break;
      case -20476:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setOutputTexture";
        break;
      case -20475:
        uint64_t result = "kDYFEMTLFXSpatialScaler_dealloc";
        break;
      case -20474:
        uint64_t result = "kDYFEMTLFXSpatialScaler_encodeToCommandBuffer";
        break;
      case -20473:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setColorTexture";
        break;
      case -20472:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setDepthReversed";
        break;
      case -20471:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setDepthTexture";
        break;
      case -20470:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setExposureTexture";
        break;
      case -20469:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setFence";
        break;
      case -20468:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setInputContentHeight";
        break;
      case -20467:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setInputContentWidth";
        break;
      case -20466:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setJitterOffsetX";
        break;
      case -20465:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setJitterOffsetY";
        break;
      case -20464:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setMotionTexture";
        break;
      case -20463:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setMotionVectorScaleX";
        break;
      case -20462:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setMotionVectorScaleY";
        break;
      case -20461:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setOutputTexture";
        break;
      case -20460:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setPreExposure";
        break;
      case -20459:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setReset";
        break;
      case -20458:
        uint64_t result = "kDYFEMTLFXTemporalScaler_dealloc";
        break;
      case -20457:
        uint64_t result = "kDYFEMTLFXTemporalScaler_encodeToCommandBuffer";
        break;
      case -20456:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setReactiveMaskTexture";
        break;
      default:
        if (a1 == -18432)
        {
          uint64_t result = "kDYFEMTLDevice_newSpatialScalerWithDescriptor";
        }
        else
        {
          if (a1 != -18431) {
            goto LABEL_1384;
          }
          uint64_t result = "kDYFEMTLDevice_newTemporalScalerWithDescriptor";
        }
        break;
    }
  }
  else
  {
    int v1 = a1 + 0x4000;
    uint64_t result = "kDYFEMTLBlitCommandEncoder_setLabel";
    switch(v1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_dealloc";
        break;
      case 2:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_de"
                 "stinationSlice_destinationLevel_destinationOrigin";
        break;
      case 3:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize"
                 "_toTexture_destinationSlice_destinationLevel_destinationOrigin";
        break;
      case 4:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_des"
                 "tinationOffset_destinationBytesPerRow_destinationBytesPerImage";
        break;
      case 5:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_generateMipmapsForTexture";
        break;
      case 6:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillBuffer_range_value";
        break;
      case 7:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size";
        break;
      case 8:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_endEncoding";
        break;
      case 9:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_insertDebugSignpost";
        break;
      case 10:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_pushDebugGroup";
        break;
      case 11:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_popDebugGroup";
        break;
      case 12:
        uint64_t result = "kDYFEMTLBuffer_setLabel";
        break;
      case 13:
        uint64_t result = "kDYFEMTLBuffer_setResponsibleProcess";
        break;
      case 14:
        uint64_t result = "kDYFEMTLBuffer_dealloc";
        break;
      case 15:
        uint64_t result = "kDYFEMTLBuffer_contents";
        break;
      case 16:
        uint64_t result = "kDYFEMTLBuffer_newTextureWithDescriptor_offset_bytesPerRow";
        break;
      case 17:
        uint64_t result = "kDYFEMTLBuffer_setPurgeableState";
        break;
      case 18:
        uint64_t result = "kDYFEMTLBuffer_isPurgeable";
        break;
      case 19:
        uint64_t result = "kDYFEMTLCommandBuffer_setLabel";
        break;
      case 20:
        uint64_t result = "kDYFEMTLCommandBuffer_setProfilingEnabled";
        break;
      case 21:
        uint64_t result = "kDYFEMTLCommandBuffer_dealloc";
        break;
      case 22:
        uint64_t result = "kDYFEMTLCommandBuffer_enqueue";
        break;
      case 23:
        uint64_t result = "kDYFEMTLCommandBuffer_commit";
        break;
      case 24:
        uint64_t result = "kDYFEMTLCommandBuffer_addScheduledHandler";
        break;
      case 25:
        uint64_t result = "kDYFEMTLCommandBuffer_presentDrawable";
        break;
      case 26:
        uint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_atTime";
        break;
      case 27:
        uint64_t result = "kDYFEMTLCommandBuffer_waitUntilScheduled";
        break;
      case 28:
        uint64_t result = "kDYFEMTLCommandBuffer_addCompletedHandler";
        break;
      case 29:
        uint64_t result = "kDYFEMTLCommandBuffer_waitUntilCompleted";
        break;
      case 30:
        uint64_t result = "kDYFEMTLCommandBuffer_blitCommandEncoder";
        break;
      case 31:
        uint64_t result = "kDYFEMTLCommandBuffer_renderCommandEncoderWithDescriptor";
        break;
      case 32:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoder";
        break;
      case 33:
        uint64_t result = "kDYFEMTLCommandBuffer_parallelRenderCommandEncoderWithDescriptor";
        break;
      case 34:
        uint64_t result = "kDYFEMTLCommandBuffer_debugCommandEncoder";
        break;
      case 35:
        uint64_t result = "kDYFEMTLCommandQueue_setLabel";
        break;
      case 36:
        uint64_t result = "kDYFEMTLCommandQueue_setBackgroundTrackingPID";
        break;
      case 37:
        uint64_t result = "kDYFEMTLCommandQueue_setSkipRender";
        break;
      case 38:
        uint64_t result = "kDYFEMTLCommandQueue_setExecutionEnabled";
        break;
      case 39:
        uint64_t result = "kDYFEMTLCommandQueue_setProfilingEnabled";
        break;
      case 40:
        uint64_t result = "kDYFEMTLCommandQueue_dealloc";
        break;
      case 41:
        uint64_t result = "kDYFEMTLCommandQueue_commandBuffer";
        break;
      case 42:
        uint64_t result = "kDYFEMTLCommandQueue_commandBufferWithUnretainedReferences";
        break;
      case 43:
        uint64_t result = "kDYFEMTLCommandQueue_insertDebugCaptureBoundary";
        break;
      case 44:
        uint64_t result = "kDYFEMTLCommandQueue_finish";
        break;
      case 45:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setLabel";
        break;
      case 46:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dealloc";
        break;
      case 47:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setComputePipelineState";
        break;
      case 48:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffer_offset_atIndex";
        break;
      case 49:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffers_offsets_withRange";
        break;
      case 50:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setTexture_atIndex";
        break;
      case 51:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setTextures_withRange";
        break;
      case 52:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerState_atIndex";
        break;
      case 53:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerStates_withRange";
        break;
      case 54:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 55:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 56:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupMemoryLength_atIndex";
        break;
      case 57:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 58:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_executeBarrier";
        break;
      case 59:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_endEncoding";
        break;
      case 60:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_insertDebugSignpost";
        break;
      case 61:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_pushDebugGroup";
        break;
      case 62:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_popDebugGroup";
        break;
      case 63:
        uint64_t result = "kDYFEMTLComputePipelineState_dealloc";
        break;
      case 64:
        uint64_t result = "kDYFEMTLDepthStencilState_dealloc";
        break;
      case 65:
        uint64_t result = "kDYFEMTLDevice_setShaderDebugInfoCaching";
        break;
      case 66:
        uint64_t result = "kDYFEMTLDevice_setMetalAssertionsEnabled";
        break;
      case 67:
        uint64_t result = "kDYFEMTLDevice_dealloc";
        break;
      case 68:
        uint64_t result = "kDYFEMTLDevice_newCommandQueue";
        break;
      case 69:
        uint64_t result = "kDYFEMTLDevice_newCommandQueueWithMaxCommandBufferCount";
        break;
      case 70:
        uint64_t result = "kDYFEMTLDevice_newBufferWithLength_options";
        break;
      case 71:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options";
        break;
      case 72:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_deallocator";
        break;
      case 73:
        uint64_t result = "kDYFEMTLDevice_newDepthStencilStateWithDescriptor";
        break;
      case 74:
        uint64_t result = "kDYFEMTLDevice_newTextureWithDescriptor";
        break;
      case 75:
        uint64_t result = "kDYFEMTLDevice_newSamplerStateWithDescriptor";
        break;
      case 76:
        uint64_t result = "kDYFEMTLDevice_newDefaultLibrary";
        break;
      case 77:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithFile_error";
        break;
      case 78:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithData_error";
        break;
      case 79:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithSource_options_error";
        break;
      case 80:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithSource_options_completionHandler";
        break;
      case 81:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_error";
        break;
      case 82:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_options_reflection_error";
        break;
      case 83:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_completionHandler";
        break;
      case 84:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_options_completionHandler";
        break;
      case 85:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_error";
        break;
      case 86:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_options_reflection_error";
        break;
      case 87:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_completionHandler";
        break;
      case 88:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_options_completionHandler";
        break;
      case 89:
        uint64_t result = "kDYFEMTLDevice_unmapShaderSampleBuffer";
        break;
      case 90:
        uint64_t result = "kDYFEMTLDevice_newTextureWithDescriptor_iosurface_plane";
        break;
      case 91:
        uint64_t result = "kDYFEMTLFunction_dealloc";
        break;
      case 92:
        uint64_t result = "kDYFEMTLLibrary_setLabel";
        break;
      case 93:
        uint64_t result = "kDYFEMTLLibrary_dealloc";
        break;
      case 94:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName";
        break;
      case 95:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setSeparateCommits";
        break;
      case 96:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setLabel";
        break;
      case 97:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_dealloc";
        break;
      case 98:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_renderCommandEncoder";
        break;
      case 99:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_endEncoding";
        break;
      case 100:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_insertDebugSignpost";
        break;
      case 101:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_pushDebugGroup";
        break;
      case 102:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_popDebugGroup";
        break;
      case 103:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setLabel";
        break;
      case 104:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_dealloc";
        break;
      case 105:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setRenderPipelineState";
        break;
      case 106:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffer_offset_atIndex";
        break;
      case 107:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffers_offsets_withRange";
        break;
      case 108:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTexture_atIndex";
        break;
      case 109:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTextures_withRange";
        break;
      case 110:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_atIndex";
        break;
      case 111:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerStates_withRange";
        break;
      case 112:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 113:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 114:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setViewport";
        break;
      case 115:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFrontFacingWinding";
        break;
      case 116:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setCullMode";
        break;
      case 117:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthClipMode";
        break;
      case 118:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthBias_slopeScale_clamp";
        break;
      case 119:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setScissorRect";
        break;
      case 120:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTriangleFillMode";
        break;
      case 121:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBuffer_offset_atIndex";
        break;
      case 122:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBuffers_offsets_withRange";
        break;
      case 123:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_atIndex";
        break;
      case 124:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTextures_withRange";
        break;
      case 125:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_atIndex";
        break;
      case 126:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerStates_withRange";
        break;
      case 127:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 128:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 129:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha";
        break;
      case 130:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStencilState";
        break;
      case 131:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilReferenceValue";
        break;
      case 132:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVisibilityResultMode_offset";
        break;
      case 133:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount";
        break;
      case 134:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount";
        break;
      case 135:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount";
        break;
      case 136:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset";
        break;
      case 137:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setLineWidth";
        break;
      case 138:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_endEncoding";
        break;
      case 139:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_insertDebugSignpost";
        break;
      case 140:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_pushDebugGroup";
        break;
      case 141:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_popDebugGroup";
        break;
      case 142:
        uint64_t result = "kDYFEMTLRenderPipelineState_dealloc";
        break;
      case 143:
        uint64_t result = "kDYFEMTLSamplerState_dealloc";
        break;
      case 144:
        uint64_t result = "kDYFEMTLTexture_setLabel";
        break;
      case 145:
        uint64_t result = "kDYFEMTLTexture_setResponsibleProcess";
        break;
      case 146:
        uint64_t result = "kDYFEMTLTexture_dealloc";
        break;
      case 147:
        uint64_t result = "kDYFEMTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice";
        break;
      case 148:
        uint64_t result = "kDYFEMTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage";
        break;
      case 149:
        uint64_t result = "kDYFEMTLTexture_getBytes_bytesPerRow_fromRegion_mipmapLevel";
        break;
      case 150:
        uint64_t result = "kDYFEMTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow";
        break;
      case 151:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat";
        break;
      case 152:
        uint64_t result = "kDYFEMTLTexture_setPurgeableState";
        break;
      case 153:
        uint64_t result = "kDYFEMTLTexture_isPurgeable";
        break;
      case 154:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_flushResource";
        break;
      case 155:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_flushTexture_slice_mipmapLevel";
        break;
      case 156:
        uint64_t result = "kDYFEMTLBuffer_invalidateRange";
        break;
      case 157:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBytes_length_atIndex";
        break;
      case 158:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBufferOffset_atIndex";
        break;
      case 159:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBytes_length_atIndex";
        break;
      case 160:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBufferOffset_atIndex";
        break;
      case 161:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBytes_length_atIndex";
        break;
      case 162:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBufferOffset_atIndex";
        break;
      case 163:
        uint64_t result = "kDYFEMTLTexture_invalidateRegion";
        break;
      case 164:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup";
        break;
      case 165:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue";
        break;
      case 166:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance";
        break;
      case 167:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_i"
                 "nstanceCount_baseVertex_baseInstance";
        break;
      case 168:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset";
        break;
      case 169:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuff"
                 "er_indirectBufferOffset";
        break;
      case 170:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex";
        break;
      case 171:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_synchronizeResource";
        break;
      case 172:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_synchronizeTexture_slice_level";
        break;
      case 173:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_de"
                 "stinationSlice_destinationLevel_destinationOrigin_options";
        break;
      case 174:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize"
                 "_toTexture_destinationSlice_destinationLevel_destinationOrigin_options";
        break;
      case 175:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_des"
                 "tinationOffset_destinationBytesPerRow_destinationBytesPerImage_options";
        break;
      case 176:
        uint64_t result = "kDYFEMTLBuffer_didModifyRange";
        break;
      case 177:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setTexture_baseLevel_atIndex";
        break;
      case 178:
        uint64_t result = "kDYFEMTLDevice_supportsFeatureSet";
        break;
      case 179:
        uint64_t result = "kDYFEMTLDevice_supportsSampleCount";
        break;
      case 180:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTexture_baseLevel_atIndex";
        break;
      case 181:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_baseLevel_atIndex";
        break;
      case 182:
        uint64_t result = "kDYFEMTLCommandBuffer_commitAndHold";
        break;
      case 183:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_textureBarrier";
        break;
      case 184:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_error";
        break;
      case 185:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error";
        break;
      case 186:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_completionHandler";
        break;
      case 187:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler";
        break;
      case 188:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices";
        break;
      case 189:
        uint64_t result = "kDYFEMTLCommandBuffer_fragmentRenderCommandEncoderWithDescriptor";
        break;
      case 190:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setLabel";
        break;
      case 191:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_dealloc";
        break;
      case 192:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setRenderPipelineState";
        break;
      case 193:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthBias_slopeScale_clamp";
        break;
      case 194:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setScissorRect";
        break;
      case 195:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBytes_length_atIndex";
        break;
      case 196:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBuffer_offset_atIndex";
        break;
      case 197:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBufferOffset_atIndex";
        break;
      case 198:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBuffers_offsets_withRange";
        break;
      case 199:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_atIndex";
        break;
      case 200:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTextures_withRange";
        break;
      case 201:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_baseLevel_atIndex";
        break;
      case 202:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex";
        break;
      case 203:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerState_atIndex";
        break;
      case 204:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerStates_withRange";
        break;
      case 205:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 206:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 207:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setBlendColorRed_green_blue_alpha";
        break;
      case 208:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStencilState";
        break;
      case 209:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilReferenceValue";
        break;
      case 210:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue";
        break;
      case 211:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_triangleIndices_triangleCount";
        break;
      case 212:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_vertexVaryings_varyingCount"
                 "PerVertex_triangleIndices_triangleCount";
        break;
      case 213:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_vertexVaryings_varyingCountPerVertex";
        break;
      case 214:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_endEncoding";
        break;
      case 215:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_insertDebugSignpost";
        break;
      case 216:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_pushDebugGroup";
        break;
      case 217:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_popDebugGroup";
        break;
      case 218:
        uint64_t result = "kDYFEMTLDevice_supportsTextureSampleCount";
        break;
      case 219:
        uint64_t result = "kDYFEMTLDevice_newCommandQueueWithDescriptor";
        break;
      case 220:
        uint64_t result = "kDYFEMTLCommandBuffer_setListIndex";
        break;
      case 221:
        uint64_t result = "kDYFEMTLDevice_newBufferWithIOSurface";
        break;
      case 222:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 223:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setDepthStoreAction";
        break;
      case 224:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setStencilStoreAction";
        break;
      case 225:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 226:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStoreAction";
        break;
      case 227:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilStoreAction";
        break;
      case 228:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex";
        break;
      case 229:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level";
        break;
      case 230:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 231:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStoreAction";
        break;
      case 232:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilStoreAction";
        break;
      case 233:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithParallelExecution";
        break;
      case 234:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchBarrier";
        break;
      case 235:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setImageblockWidth_height";
        break;
      case 236:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTessellationFactorBuffer_offset_instanceStride";
        break;
      case 237:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_"
                 "instanceCount_baseInstance";
        break;
      case 238:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset";
        break;
      case 239:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffer"
                 "Offset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance";
        break;
      case 240:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointInd"
                 "exBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset";
        break;
      case 241:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBytes_length_atIndex";
        break;
      case 242:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBuffer_offset_atIndex";
        break;
      case 243:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBufferOffset_atIndex";
        break;
      case 244:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileTexture_atIndex";
        break;
      case 245:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerState_atIndex";
        break;
      case 246:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 247:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile";
        break;
      case 248:
        uint64_t result = "kDYFEMTLFence_setLabel";
        break;
      case 249:
        uint64_t result = "kDYFEMTLFunction_functionConstantIndexByName_type";
        break;
      case 250:
        uint64_t result = "kDYFEMTLCommandQueue_setIsOpenGLQueue";
        break;
      case 251:
        uint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_afterMinimumDuration";
        break;
      case 252:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTessellationFactorScale";
        break;
      case 253:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_waitForFence";
        break;
      case 254:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_updateFence";
        break;
      case 255:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_waitForFence";
        break;
      case 256:
        uint64_t result = "kDYFEMTLDevice_newFence";
        break;
      case 257:
        uint64_t result = "kDYFEMTLFence_dealloc";
        break;
      case 258:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_updateFence_afterStages";
        break;
      case 259:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_waitForFence_beforeStages";
        break;
      case 260:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_updateFence";
        break;
      case 261:
        uint64_t result = "kDYFEMTLFunction_setLabel";
        break;
      case 262:
        uint64_t result = "kDYFEMTLBuffer_makeAliasable";
        break;
      case 263:
        uint64_t result = "kDYFEMTLDevice_heapTextureSizeWithDescriptor";
        break;
      case 264:
        uint64_t result = "kDYFEMTLDevice_newHeapWithDescriptor";
        break;
      case 265:
        uint64_t result = "kDYFEMTLHeap_setLabel";
        break;
      case 266:
        uint64_t result = "kDYFEMTLHeap_dealloc";
        break;
      case 267:
        uint64_t result = "kDYFEMTLHeap_newBufferWithLength_options";
        break;
      case 268:
        uint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor";
        break;
      case 269:
        uint64_t result = "kDYFEMTLHeap_setPurgeableState";
        break;
      case 270:
        uint64_t result = "kDYFEMTLTexture_makeAliasable";
        break;
      case 271:
        uint64_t result = "kDYFEMTLBuffer_isAliasable";
        break;
      case 272:
        uint64_t result = "kDYFEMTLDevice_heapTextureSizeAndAlignWithDescriptor";
        break;
      case 273:
        uint64_t result = "kDYFEMTLDevice_heapBufferSizeAndAlignWithLength_options";
        break;
      case 274:
        uint64_t result = "kDYFEMTLHeap_setResponsibleProcess";
        break;
      case 275:
        uint64_t result = "kDYFEMTLHeap_isPurgeable";
        break;
      case 276:
        uint64_t result = "kDYFEMTLTexture_isAliasable";
        break;
      case 277:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_error";
        break;
      case 278:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_completionHandler";
        break;
      case 279:
        uint64_t result = "kDYFEMTLHeap_maxAvailableSizeWithAlignment";
        break;
      case 280:
        uint64_t result = "kDYFEMTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow";
        break;
      case 281:
        uint64_t result = "kDYFEMTLBuffer_addDebugMarker_range";
        break;
      case 282:
        uint64_t result = "kDYFEMTLBuffer_removeAllDebugMarkers";
        break;
      case 283:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error";
        break;
      case 284:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setStageInRegion";
        break;
      case 285:
        uint64_t result = "kDYFEMTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked";
        break;
      case 286:
        uint64_t result = "kDYFEMTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage";
        break;
      case 287:
        uint64_t result = "kDYFEMTLTextureLayout_dealloc";
        break;
      case 288:
        uint64_t result = "kDYFEMTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator";
        break;
      case 289:
        uint64_t result = "kDYFEMTLDevice_newDefaultLibraryWithBundle_error";
        break;
      case 290:
        uint64_t result = "kDYFEMTLTexture_formattedDescription";
        break;
      case 291:
        uint64_t result = "kDYFEMTLDevice_minLinearTextureAlignmentForPixelFormat";
        break;
      case 292:
        uint64_t result = "kDYFEMTLComputePipelineState_getComputeKernelTelemetryID";
        break;
      case 293:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_error";
        break;
      case 294:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_options_reflection_error";
        break;
      case 295:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_completionHandler";
        break;
      case 296:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_options_completionHandler";
        break;
      case 297:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBuffers_offsets_withRange";
        break;
      case 298:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileTextures_withRange";
        break;
      case 299:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerStates_withRange";
        break;
      case 300:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 301:
        uint64_t result = "kDYFEMTLLibrary_setOverrideTriple";
        break;
      case 302:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_error";
        break;
      case 303:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler";
        break;
      case 304:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setThreadgroupMemoryLength_atIndex";
        break;
      case 305:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadsWithIndirectBuffer_indirectBufferOffset";
        break;
      case 306:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreads_threadsPerThreadgroup";
        break;
      case 307:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setViewports_count";
        break;
      case 308:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setScissorRects_count";
        break;
      case 309:
        uint64_t result = "kDYFEMTLDevice_newPipelineLibraryWithFilePath_error";
        break;
      case 310:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setThreadgroupMemoryLength_offset_atIndex";
        break;
      case 311:
        uint64_t result = "kDYFEMTLCaptureScope_setLabel";
        break;
      case 312:
        uint64_t result = "kDYFEMTLCaptureScope_dealloc";
        break;
      case 313:
        uint64_t result = "kDYFEMTLCaptureScope_beginScope";
        break;
      case 314:
        uint64_t result = "kDYFEMTLCaptureScope_endScope";
        break;
      case 315:
        uint64_t result = "kDYFEMTLCaptureManager_startCaptureWithDevice";
        break;
      case 316:
        uint64_t result = "kDYFEMTLCaptureManager_startCaptureWithCommandQueue";
        break;
      case 317:
        uint64_t result = "kDYFEMTLCaptureManager_stopCapture";
        break;
      case 318:
        uint64_t result = "kDYFEMTLDevice_startCollectingPipelineDescriptors";
        break;
      case 319:
        uint64_t result = "kDYFEMTLCommandBuffer_pushDebugGroup";
        break;
      case 320:
        uint64_t result = "kDYFEMTLCommandBuffer_popDebugGroup";
        break;
      case 321:
        uint64_t result = "kDYFEMTLArgumentEncoder_setLabel";
        break;
      case 322:
        uint64_t result = "kDYFEMTLArgumentEncoder_dealloc";
        break;
      case 323:
        uint64_t result = "kDYFEMTLArgumentEncoder_setArgumentBuffer_offset";
        break;
      case 324:
        uint64_t result = "kDYFEMTLArgumentEncoder_setBuffer_offset_atIndex";
        break;
      case 325:
        uint64_t result = "kDYFEMTLArgumentEncoder_setBuffers_offsets_withRange";
        break;
      case 326:
        uint64_t result = "kDYFEMTLArgumentEncoder_setTexture_atIndex";
        break;
      case 327:
        uint64_t result = "kDYFEMTLArgumentEncoder_setTextures_withRange";
        break;
      case 328:
        uint64_t result = "kDYFEMTLArgumentEncoder_setSamplerState_atIndex";
        break;
      case 329:
        uint64_t result = "kDYFEMTLArgumentEncoder_setSamplerStates_withRange";
        break;
      case 330:
        uint64_t result = "kDYFEMTLArgumentEncoder_constantDataAtIndex";
        break;
      case 331:
        uint64_t result = "kDYFEMTLArgumentEncoder_newArgumentEncoderForBufferAtIndex";
        break;
      case 332:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex";
        break;
      case 333:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection";
        break;
      case 334:
        uint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithArguments_count";
        break;
      case 335:
        uint64_t result = "kDYFEMTLDevice_newArgumentBufferLayoutWithStructType";
        break;
      case 336:
        uint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithLayout";
        break;
      case 337:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResource_usage";
        break;
      case 338:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResources_count_usage";
        break;
      case 339:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useHeap";
        break;
      case 340:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useHeaps_count";
        break;
      case 341:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResource_usage";
        break;
      case 342:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResources_count_usage";
        break;
      case 343:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useHeap";
        break;
      case 344:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useHeaps_count";
        break;
      case 345:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithURL_error";
        break;
      case 346:
        uint64_t result = "kDYFEMTLLibrary_newExternFunctionWithName";
        break;
      case 347:
        uint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithArguments";
        break;
      case 348:
        uint64_t result = "kDYFEMTLDevice_indirectArgumentBufferDecodingData";
        break;
      case 349:
        uint64_t result = "kDYFEMTLDevice_setIndirectArgumentBufferDecodingData";
        break;
      case 350:
        uint64_t result = "kDYFEMTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags";
        break;
      case 351:
        uint64_t result = "kDYFEMTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement";
        break;
      case 352:
        uint64_t result = "kDYFEMTLTextureLayout_initializeTextureMemory";
        break;
      case 353:
        uint64_t result = "kDYFEMTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow";
        break;
      case 354:
        uint64_t result = "kDYFEMTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow";
        break;
      case 355:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error";
        break;
      case 356:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 357:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 358:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 359:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 360:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 361:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 362:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 363:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 364:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 365:
        uint64_t result = "kDYFEMTLCaptureManager_notifyPostPresentHandoffSPI";
        break;
      case 366:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithCIFiltersForComputePipeline_imageFilterFunctionInfo_error";
        break;
      case 367:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setStageInRegionWithIndirectBuffer_indirectBufferOffset";
        break;
      case 368:
        uint64_t result = "kDYFEMTLDevice_newIndirectRenderCommandEncoderWithBuffer";
        break;
      case 369:
        uint64_t result = "kDYFEMTLDevice_newIndirectComputeCommandEncoderWithBuffer";
        break;
      case 370:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDispatchType";
        break;
      case 371:
        uint64_t result = "kDYFEMTLCommandBuffer_videoCommandEncoder";
        break;
      case 372:
        uint64_t result = "kDYFEMTLCommandBuffer_doCorruptCBSPI";
        break;
      case 373:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useComputePipelineState";
        break;
      case 374:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useComputePipelineStates_count";
        break;
      case 375:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_memoryBarrierWithScope";
        break;
      case 376:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_memoryBarrierWithResources_count";
        break;
      case 377:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useRenderPipelineState";
        break;
      case 378:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useRenderPipelineStates_count";
        break;
      case 379:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_startIndex";
        break;
      case 380:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_memoryBarrierWithScope_afterStages_beforeStages";
        break;
      case 381:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages";
        break;
      case 382:
        uint64_t result = "kDYFEMTLArgumentEncoder_setRenderPipelineState_atIndex";
        break;
      case 383:
        uint64_t result = "kDYFEMTLArgumentEncoder_setRenderPipelineStates_withRange";
        break;
      case 384:
        uint64_t result = "kDYFEMTLArgumentEncoder_setComputePipelineState_atIndex";
        break;
      case 385:
        uint64_t result = "kDYFEMTLArgumentEncoder_setComputePipelineStates_withRange";
        break;
      case 386:
        uint64_t result = "kDYFEMTLDevice_minimumTextureBufferAlignmentForPixelFormat";
        break;
      case 387:
        uint64_t result = "kDYFEMTLDevice_newEvent";
        break;
      case 388:
        uint64_t result = "kDYFEMTLDevice_newSharedEvent";
        break;
      case 389:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForGPUAccess";
        break;
      case 390:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForGPUAccess_slice_level";
        break;
      case 391:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForCPUAccess";
        break;
      case 392:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForCPUAccess_slice_level";
        break;
      case 393:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeWaitForEvent_value";
        break;
      case 394:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEvent_value";
        break;
      case 395:
        uint64_t result = "kDYFEMTLComputePipelineState_resourceIndex";
        break;
      case 396:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setPointSize";
        break;
      case 397:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setClipPlane_p2_p3_p4_atIndex";
        break;
      case 398:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_lodBias_atIndex";
        break;
      case 399:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_lodBias_atIndex";
        break;
      case 400:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setPrimitiveRestartEnabled_index";
        break;
      case 401:
        uint64_t result = "kDYFEMTLSamplerState_resourceIndex";
        break;
      case 402:
        uint64_t result = "kDYFEMTLSharedTextureHandle_dealloc";
        break;
      case 403:
        uint64_t result = "kDYFEMTLTexture_newSharedHandle";
        break;
      case 404:
        uint64_t result = "kDYFEMTLDevice_newSharedTextureWithDescriptor";
        break;
      case 405:
        uint64_t result = "kDYFEMTLDevice_newSharedTextureWithHandle";
        break;
      case 406:
        uint64_t result = "kDYFEMTLDevice_tileSizeWithTextureType_pixelFormat_sampleCount";
        break;
      case 407:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_"
                 "countersBufferOffset";
        break;
      case 408:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice";
        break;
      case 409:
        uint64_t result = "kDYFEMTLSharedEvent_setSignaledValue";
        break;
      case 410:
        uint64_t result = "kDYFEMTLSharedEvent_setLabel";
        break;
      case 411:
        uint64_t result = "kDYFEMTLSharedEvent_dealloc";
        break;
      case 412:
        uint64_t result = "kDYFEMTLDevice_newIndirectCommandBufferWithDescriptor_maxCount_options";
        break;
      case 413:
        uint64_t result = "kDYFEMTLDevice_reserveResourceIndicesForResourceType_indices_indexCount";
        break;
      case 414:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setPrimitiveRestartEnabled";
        break;
      case 415:
        uint64_t result = "kDYFEMTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options";
        break;
      case 416:
        uint64_t result = "kDYFEMTLDevice_getIndirectCommandBufferHeaderSize";
        break;
      case 417:
        uint64_t result = "kDYFEMTLCommandBuffer_addPurgedResource";
        break;
      case 418:
        uint64_t result = "kDYFEMTLCommandBuffer_addPurgedHeap";
        break;
      case 419:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_startIndex";
        break;
      case 420:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_withRange";
        break;
      case 421:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset";
        break;
      case 422:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_withRange";
        break;
      case 423:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset";
        break;
      case 424:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_resetCommandsInBuffer_withRange";
        break;
      case 425:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex";
        break;
      case 426:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange";
        break;
      case 427:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_dealloc";
        break;
      case 428:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setRenderPipelineState";
        break;
      case 429:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexBuffer_offset_atIndex";
        break;
      case 430:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setFragmentBuffer_offset_atIndex";
        break;
      case 431:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorB"
                 "ufferInstanceStride_tessellationFactorBufferScale";
        break;
      case 432:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorB"
                 "ufferInstanceStride";
        break;
      case 433:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFa"
                 "ctorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_tessellationFactorBufferScale";
        break;
      case 434:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFa"
                 "ctorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride";
        break;
      case 435:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance";
        break;
      case 436:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_"
                 "instanceCount_baseVertex_baseInstance";
        break;
      case 437:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_nop";
        break;
      case 438:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_end";
        break;
      case 439:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setTessellationFactorBuffer_offset_instanceStride";
        break;
      case 440:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setTessellationFactorScale";
        break;
      case 441:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance";
        break;
      case 442:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance";
        break;
      case 443:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_dispatchThreadsPerTile";
        break;
      case 444:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexArgument_offset_atIndex";
        break;
      case 445:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setFragmentArgument_offset_atIndex";
        break;
      case 446:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setTileArgument_offset_atIndex";
        break;
      case 447:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setThreadgroupMemoryLength_offset_atIndex";
        break;
      case 448:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_endIndirectCommandBuffer";
        break;
      case 449:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_dealloc";
        break;
      case 450:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setComputePipelineState";
        break;
      case 451:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelBuffer_offset_atIndex";
        break;
      case 452:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_dispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 453:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_concurrentDispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 454:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_nop";
        break;
      case 455:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_endIndirectCommandBuffer";
        break;
      case 456:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelArgument_offset_atIndex";
        break;
      case 457:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setThreadgroupMemoryLength_atIndex";
        break;
      case 458:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setStageInRegion";
        break;
      case 459:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_setLabel";
        break;
      case 460:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_setResponsibleProcess";
        break;
      case 461:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_dealloc";
        break;
      case 462:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectRenderCommandAtIndex";
        break;
      case 463:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectComputeCommandAtIndex";
        break;
      case 464:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_setPurgeableState";
        break;
      case 465:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_makeAliasable";
        break;
      case 466:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_isAliasable";
        break;
      case 467:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_isPurgeable";
        break;
      case 468:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIndirectCommandBuffer_atIndex";
        break;
      case 469:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIndirectCommandBuffers_withRange";
        break;
      case 470:
        uint64_t result = "kDYFEMTLBuffer_newRemoteBufferViewForDevice";
        break;
      case 471:
        uint64_t result = "kDYFEMTLTexture_newRemoteTextureViewForDevice";
        break;
      case 472:
        uint64_t result = "kDYFEMTLDevice_newSharedEventWithMachPort";
        break;
      case 473:
        uint64_t result = "kDYFEMTLSharedEvent_eventPort";
        break;
      case 474:
        uint64_t result = "kDYFEMTLTexture_newSharedTextureHandle";
        break;
      case 475:
        uint64_t result = "kDYFEMTLDevice_newSharedEventWithHandle";
        break;
      case 476:
        uint64_t result = "kDYFEMTLCommandBuffer_commitAndWaitUntilSubmitted";
        break;
      case 477:
        uint64_t result = "kDYFEMTLSharedEvent_newSharedEventHandle";
        break;
      case 478:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_reset";
        break;
      case 479:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_reset";
        break;
      case 480:
        uint64_t result = "kDYFEMTLBuffer_containsResource";
        break;
      case 481:
        uint64_t result = "kDYFEMTLTexture_containsResource";
        break;
      case 482:
        uint64_t result = "kDYFEMTLDevice_supportsPrimitiveType";
        break;
      case 483:
        uint64_t result = "kDYFEMTLDevice_startCollectingPipelineDescriptorsUsingPrefixForNames";
        break;
      case 484:
        uint64_t result = "kDYFEMTLDevice_newResourceGroupFromResources_count";
        break;
      case 485:
        uint64_t result = "kDYFEMTLCommandBuffer_sampledComputeCommandEncoderWithDispatchType_programInfoBuffer_capacity";
        break;
      case 486:
        uint64_t result = "kDYFEMTLCommandBuffer_setResourceGroups_count";
        break;
      case 487:
        uint64_t result = "kDYFEMTLCommandBuffer_dropResourceGroups_count";
        break;
      case 488:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_resetWithRange";
        break;
      case 489:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_containsResource";
        break;
      case 490:
        uint64_t result = "kDYFEMTLTexture_isShareable";
        break;
      case 491:
        uint64_t result = "kDYFEMTLMotionEstimationPipeline_dealloc";
        break;
      case 492:
        uint64_t result = "kDYFEMTLDevice_motionEstimatorCapabilities";
        break;
      case 493:
        uint64_t result = "kDYFEMTLDevice_newMotionEstimationPipelineWithDescriptor";
        break;
      case 494:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_setLabel";
        break;
      case 495:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_dealloc";
        break;
      case 496:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_setMotionEstimationPipeline";
        break;
      case 497:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_generateMotionVectorsForTexture_previousTexture_resultBuffer_bufferOffset";
        break;
      case 498:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_waitForFence";
        break;
      case 499:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_updateFence";
        break;
      case 500:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_endEncoding";
        break;
      case 501:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_insertDebugSignpost";
        break;
      case 502:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_pushDebugGroup";
        break;
      case 503:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_popDebugGroup";
        break;
      case 504:
        uint64_t result = "kDYFEMTLEvent_setLabel";
        break;
      case 505:
        uint64_t result = "kDYFEMTLEvent_dealloc";
        break;
      case 506:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinati"
                 "onLevel_sliceCount_levelCount";
        break;
      case 507:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_toTexture";
        break;
      case 508:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_resolveCountersWithIndexRange_sampleBuffer_resolvedBuffer";
        break;
      case 509:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 510:
        uint64_t result = "kDYFEMTLBuffer_setResourceIndex";
        break;
      case 511:
        uint64_t result = "kDYFEMTLCommandBuffer_debugBufferContentsWithLength";
        break;
      case 512:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeCacheControlFinalizeOperation_resourceGroups_count";
        break;
      case 513:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeCacheControlTagOperation_resourceGroups_count";
        break;
      case 514:
        uint64_t result = "kDYFEMTLCommandBuffer_resourceStateCommandEncoder";
        break;
      case 515:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 516:
        uint64_t result = "kDYFEMTLComputePipelineState_setResourceIndex";
        break;
      case 517:
        uint64_t result = "kDYFEMTLCounterSampleBuffer_dealloc";
        break;
      case 518:
        uint64_t result = "kDYFEMTLDeserializationContext_dealloc";
        break;
      case 519:
        uint64_t result = "kDYFEMTLDeserializationContext_functionWithFunctionRef";
        break;
      case 520:
        uint64_t result = "kDYFEMTLDevice_setCurrentUtilityBufferIndex";
        break;
      case 521:
        uint64_t result = "kDYFEMTLDevice_setResourceIndirectionEnabled";
        break;
      case 522:
        uint64_t result = "kDYFEMTLDevice_setUtilityBuffers";
        break;
      case 523:
        uint64_t result = "kDYFEMTLDevice_addBufferToGlobalResourceTable";
        break;
      case 524:
        uint64_t result = "kDYFEMTLDevice_addComputePipelineStateToGlobalResourceTable";
        break;
      case 525:
        uint64_t result = "kDYFEMTLDevice_addIndirectCommandBufferToGlobalResourceTable";
        break;
      case 526:
        uint64_t result = "kDYFEMTLDevice_addRenderPipelineStateToGlobalResourceTable";
        break;
      case 527:
        uint64_t result = "kDYFEMTLDevice_addSamplerStateToGlobalResourceTable";
        break;
      case 528:
        uint64_t result = "kDYFEMTLDevice_addTextureToGlobalResourceTable";
        break;
      case 529:
        uint64_t result = "kDYFEMTLDevice_allowLibrariesFromOtherPlatforms";
        break;
      case 530:
        uint64_t result = "kDYFEMTLDevice_createNewUtilityBuffer";
        break;
      case 531:
        uint64_t result = "kDYFEMTLDevice_describeCounter";
        break;
      case 532:
        uint64_t result = "kDYFEMTLDevice_indirectBufferAddressForResourceIndex_offset";
        break;
      case 533:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options_atResourceIndex";
        break;
      case 534:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_atResourceIndex_deallocator";
        break;
      case 535:
        uint64_t result = "kDYFEMTLDevice_newBufferWithLength_options_atResourceIndex";
        break;
      case 536:
        uint64_t result = "kDYFEMTLDevice_newCounterSampleBufferWithDescriptor_error";
        break;
      case 537:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error";
        break;
      case 538:
        uint64_t result = "kDYFEMTLDevice_newRasterizationRateMapWithScreenSize_layerCount_layers";
        break;
      case 539:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineDescriptorWithSerializedData_deserializationContext";
        break;
      case 540:
        uint64_t result = "kDYFEMTLDevice_offsetFromIndirectBufferAddress";
        break;
      case 541:
        uint64_t result = "kDYFEMTLDevice_pollSampleBuffer_resolvedBuffer";
        break;
      case 542:
        uint64_t result = "kDYFEMTLDevice_removeResourceFromGlobalResourceTable_resourceType";
        break;
      case 543:
        uint64_t result = "kDYFEMTLDevice_requiresIndirectionForAllResourceTypes";
        break;
      case 544:
        uint64_t result = "kDYFEMTLDevice_resolveCountersWithIndexRange_sampleBuffer";
        break;
      case 545:
        uint64_t result = "kDYFEMTLDevice_resourceIndexFromIndirectBufferAddress";
        break;
      case 546:
        uint64_t result = "kDYFEMTLDevice_sampleCountersAtInterval_sampleBuffer_error";
        break;
      case 547:
        uint64_t result = "kDYFEMTLDevice_sampleTimeStamps_gpuTimeStamp";
        break;
      case 548:
        uint64_t result = "kDYFEMTLDevice_serializeRenderPipelineDescriptor";
        break;
      case 549:
        uint64_t result = "kDYFEMTLDevice_setGPUAssertionsEnabled";
        break;
      case 550:
        uint64_t result = "kDYFEMTLDevice_setResourcesPurgeableState_newState_oldState_count";
        break;
      case 551:
        uint64_t result = "kDYFEMTLDevice_useDeviceResourceTableForType";
        break;
      case 552:
        uint64_t result = "kDYFEMTLDevice_utilityBufferForComputeCommandEncoder";
        break;
      case 553:
        uint64_t result = "kDYFEMTLDevice_utilityBufferForRenderCommandEncoder";
        break;
      case 554:
        uint64_t result = "kDYFEMTLFunction_newFunctionWithPluginData_bitcodeType";
        break;
      case 555:
        uint64_t result = "kDYFEMTLHeap_newBufferWithLength_options_atOffset";
        break;
      case 556:
        uint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor_atOffset";
        break;
      case 557:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_clearBarrier";
        break;
      case 558:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_concurrentDispatchThreads_threadsPerThreadgroup";
        break;
      case 559:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setBarrier";
        break;
      case 560:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setImageBlockWidth_height";
        break;
      case 561:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 562:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings";
        break;
      case 563:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useHeap_stages";
        break;
      case 564:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useHeaps_count_stages";
        break;
      case 565:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResource_usage_stages";
        break;
      case 566:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResources_count_usage_stages";
        break;
      case 567:
        uint64_t result = "kDYFEMTLRenderPipelineState_setResourceIndex";
        break;
      case 568:
        uint64_t result = "kDYFEMTLSamplerState_setResourceIndex";
        break;
      case 569:
        uint64_t result = "kDYFEMTLTexture_setResourceIndex";
        break;
      case 570:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineDescriptorWithSerializedData_deserializationContext";
        break;
      case 571:
        uint64_t result = "kDYFEMTLDevice_serializeComputePipelineDescriptor";
        break;
      case 572:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAmplificationMode_value";
        break;
      case 573:
        uint64_t result = "kDYFEMTLCommandQueue_getBackgroundGPUPriority";
        break;
      case 574:
        uint64_t result = "kDYFEMTLCommandQueue_getGPUPriority";
        break;
      case 575:
        uint64_t result = "kDYFEMTLCommandQueue_setBackgroundGPUPriority";
        break;
      case 576:
        uint64_t result = "kDYFEMTLCommandQueue_setBackgroundGPUPriority_offset";
        break;
      case 577:
        uint64_t result = "kDYFEMTLCommandQueue_setCompletionQueue";
        break;
      case 578:
        uint64_t result = "kDYFEMTLCommandQueue_setGPUPriority";
        break;
      case 579:
        uint64_t result = "kDYFEMTLCommandQueue_setGPUPriority_offset";
        break;
      case 580:
        uint64_t result = "kDYFEMTLCommandQueue_setSubmissionQueue";
        break;
      case 581:
        uint64_t result = "kDYFEMTLRasterizationRateMap_copyParameterDataToBuffer_atOffset";
        break;
      case 582:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset";
        break;
      case 583:
        uint64_t result = "kDYFEMTLRasterizationRateMap_dealloc";
        break;
      case 584:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice";
        break;
      case 585:
        uint64_t result = "kDYFEMTLRasterizationRateMap_physicalCoordinate_forLayer";
        break;
      case 586:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions";
        break;
      case 587:
        uint64_t result = "kDYFEMTLRasterizationRateMap_physicalSizeForLayer";
        break;
      case 588:
        uint64_t result = "kDYFEMTLDevice_tileSizeWithSparsePageSize_textureType_pixelFormat_sampleCount";
        break;
      case 589:
        uint64_t result = "kDYFEMTLRasterizationRateMap_screenCoordinate_forLayer";
        break;
      case 590:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_setLabel";
        break;
      case 591:
        uint64_t result = "kDYFEMTLDevice_newRasterizationRateMapWithDescriptor";
        break;
      case 592:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles";
        break;
      case 593:
        uint64_t result = "kDYFEMTLDevice_supportsRasterizationRateMapWithLayerCount";
        break;
      case 594:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_dealloc";
        break;
      case 595:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_endEncoding";
        break;
      case 596:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_insertDebugSignpost";
        break;
      case 597:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_popDebugGroup";
        break;
      case 598:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_pushDebugGroup";
        break;
      case 599:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateFence";
        break;
      case 600:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset";
        break;
      case 601:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice";
        break;
      case 602:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions";
        break;
      case 603:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_waitForFence";
        break;
      case 604:
        uint64_t result = "kDYFEMTLDevice_supportsFamily";
        break;
      case 605:
        uint64_t result = "kDYFEMTLDevice_supportsVersion";
        break;
      case 606:
        uint64_t result = "kDYFEMTLHeap_newBufferWithLength_options_offset";
        break;
      case 607:
        uint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor_offset";
        break;
      case 608:
        uint64_t result = "kDYFEMTLRasterizationRateMap_copyParameterDataToBuffer_offset";
        break;
      case 609:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle";
        break;
      case 610:
        uint64_t result = "kDYFEMTLDevice_newPrecompiledComputePipelineStateWithDescriptor_options_pipelineCache_completionHandler";
        break;
      case 611:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setImageblockWidth_height";
        break;
      case 612:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_functionCache_error";
        break;
      case 613:
        uint64_t result = "kDYFEMTLRasterizationRateMap_mapPhysicalToScreenCoordinates_forLayer";
        break;
      case 614:
        uint64_t result = "kDYFEMTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer";
        break;
      case 615:
        uint64_t result = "kDYFEMTLResourceGroup_dealloc";
        break;
      case 616:
        uint64_t result = "kDYFEMTLBuffer_isComplete";
        break;
      case 617:
        uint64_t result = "kDYFEMTLBuffer_waitUntilComplete";
        break;
      case 618:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasAllResources_count";
        break;
      case 619:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasAnyResources_count";
        break;
      case 620:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasResource";
        break;
      case 621:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_isComplete";
        break;
      case 622:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_waitUntilComplete";
        break;
      case 623:
        uint64_t result = "kDYFEMTLTexture_isComplete";
        break;
      case 624:
        uint64_t result = "kDYFEMTLTexture_waitUntilComplete";
        break;
      case 625:
        uint64_t result = "kDYFEMTLDevice_convertSparsePixelRegions_toTileRegions_withTileSize_alignmentMode_numRegions";
        break;
      case 626:
        uint64_t result = "kDYFEMTLDevice_convertSparseTileRegions_toPixelRegions_withTileSize_numRegions";
        break;
      case 627:
        uint64_t result = "kDYFEMTLDevice_supportsVertexAmplificationCount";
        break;
      case 628:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset";
        break;
      case 629:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 630:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 631:
        uint64_t result = "kDYFEMTLCounterSampleBuffer_resolveCounterRange";
        break;
      case 632:
        uint64_t result = "kDYFEMTLCounterSet_dealloc";
        break;
      case 633:
        uint64_t result = "kDYFEMTLDevice_sampleTimestamps_gpuTimestamp";
        break;
      case 634:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 635:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeWaitForEvent_value_timeout";
        break;
      case 636:
        uint64_t result = "kDYFEMTLCounter_dealloc";
        break;
      case 637:
        uint64_t result = "kDYFEMTLDevice_copyShaderCacheToPath";
        break;
      case 638:
        uint64_t result = "kDYFEMTLDevice_serializeStructType_version";
        break;
      case 639:
        uint64_t result = "kDYFEMTLPipelineCache_dealloc";
        break;
      case 640:
        uint64_t result = "kDYFEMTLPipelineLibrary_setDisableRunTimeCompilation";
        break;
      case 641:
        uint64_t result = "kDYFEMTLPipelineLibrary_setLabel";
        break;
      case 642:
        uint64_t result = "kDYFEMTLPipelineLibrary_dealloc";
        break;
      case 643:
        uint64_t result = "kDYFEMTLPipelineLibrary_newComputePipelineDescriptorWithName_error";
        break;
      case 644:
        uint64_t result = "kDYFEMTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error";
        break;
      case 645:
        uint64_t result = "kDYFEMTLPipelineLibrary_newRenderPipelineDescriptorWithName_error";
        break;
      case 646:
        uint64_t result = "kDYFEMTLPipelineLibrary_newRenderPipelineStateWithName_options_reflection_error";
        break;
      case 647:
        uint64_t result = "kDYFEMTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount";
        break;
      case 648:
        uint64_t result = "kDYFEMTLCaptureManager_startCaptureWithDescriptor_error";
        break;
      case 649:
        uint64_t result = "kDYFEMTLCaptureManager_startCaptureWithScope";
        break;
      case 650:
        uint64_t result = "kDYFEMTLCaptureManager_newCaptureScopeWithDevice";
        break;
      case 651:
        uint64_t result = "kDYFEMTLCaptureManager_newCaptureScopeWithCommandQueue";
        break;
      case 652:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_enableNullBufferBinds";
        break;
      case 653:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLIR_functionType";
        break;
      case 654:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLIR_inputsDescription_functionType";
        break;
      case 655:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setAlphaTestReferenceValue";
        break;
      case 656:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex";
        break;
      case 657:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthCleared";
        break;
      case 658:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert";
        break;
      case 659:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setProvokingVertexMode";
        break;
      case 660:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilCleared";
        break;
      case 661:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level";
        break;
      case 662:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level_yInvert";
        break;
      case 663:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTriangleFrontFillMode_backFillMode";
        break;
      case 664:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setViewportTransformEnabled";
        break;
      case 665:
        uint64_t result = "kDYFEMTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor";
        break;
      case 666:
        uint64_t result = "kDYFEMTLDevice_minLinearTexturePitchAlignmentForDescriptor_mustMatchExactly";
        break;
      case 667:
        uint64_t result = "kDYFEMTLDevice_newBinaryArchiveWithDescriptor_error";
        break;
      case 668:
        uint64_t result = "kDYFEMTLDevice_requiredLinearTextureBytesPerRowForDescriptor";
        break;
      case 669:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary";
        break;
      case 670:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary";
        break;
      case 671:
        uint64_t result = "kDYFEMTLFunction_reflectionWithOptions_pipelineLibrary";
        break;
      case 672:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount";
        break;
      case 673:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSubstream";
        break;
      case 674:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_signalProgress";
        break;
      case 675:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_waitForProgress";
        break;
      case 676:
        uint64_t result = "kDYFEMTLDevice_maximumComputeSubstreams";
        break;
      case 677:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options_gpuAddress";
        break;
      case 678:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_gpuAddress_deallocator";
        break;
      case 679:
        uint64_t result = "kDYFEMTLDevice_newBufferWithLength_options_gpuAddress";
        break;
      case 680:
        uint64_t result = "kDYFEMTLDevice_reserveGPUAddressRange";
        break;
      case 681:
        uint64_t result = "kDYFEMTLCommandBuffer_addLoggingForType_handler";
        break;
      case 682:
        uint64_t result = "kDYFEMTLCommandBufferEncoderInfo_dealloc";
        break;
      case 683:
        uint64_t result = "kDYFEMTLCommandQueue_commandBufferWithDescriptor";
        break;
      case 684:
        uint64_t result = "kDYFEMTLComputePipelineState_functionPointerHandleWithFunction";
        break;
      case 685:
        uint64_t result = "kDYFEMTLComputePipelineState_functionPointerHandlesWithFunctions_range";
        break;
      case 686:
        uint64_t result = "kDYFEMTLDevice_setCommandBufferErrorOptions";
        break;
      case 687:
        uint64_t result = "kDYFEMTLDevice_newBinaryLibraryWithOptions_url_error";
        break;
      case 688:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibrary_computeDescriptor_error";
        break;
      case 689:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibrary_error";
        break;
      case 690:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibraryFromURL_error";
        break;
      case 691:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithDAG_functions_error";
        break;
      case 692:
        uint64_t result = "kDYFEMTLFunctionLog_dealloc";
        break;
      case 693:
        uint64_t result = "kDYFEMTLStackTraceEntry_dealloc";
        break;
      case 694:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_resourceIndex";
        break;
      case 695:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex";
        break;
      case 696:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex";
        break;
      case 697:
        uint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineStateWithDescriptor_error";
        break;
      case 698:
        uint64_t result = "kDYFEMTLBinaryArchive_addLibrary_computePipelineDescriptor_error";
        break;
      case 699:
        uint64_t result = "kDYFEMTLBinaryArchive_dealloc";
        break;
      case 700:
        uint64_t result = "kDYFEMTLBinaryArchive_writeToURL_error";
        break;
      case 701:
        uint64_t result = "kDYFEMTLBinaryLibrary_setLabel";
        break;
      case 702:
        uint64_t result = "kDYFEMTLBinaryLibrary_addBinaryEntry";
        break;
      case 703:
        uint64_t result = "kDYFEMTLBinaryLibrary_addComputePipelineFunctionsWithDescriptor_error";
        break;
      case 704:
        uint64_t result = "kDYFEMTLBinaryLibrary_dealloc";
        break;
      case 705:
        uint64_t result = "kDYFEMTLBinaryLibrary_getBinaryDataWithKey";
        break;
      case 706:
        uint64_t result = "kDYFEMTLBinaryLibrary_removeComputePipelineFunctionsWithDescriptor_error";
        break;
      case 707:
        uint64_t result = "kDYFEMTLBinaryLibrary_serializeToURL_error";
        break;
      case 708:
        uint64_t result = "kDYFEMTLDynamicLibrary_setLabel";
        break;
      case 709:
        uint64_t result = "kDYFEMTLDynamicLibrary_dealloc";
        break;
      case 710:
        uint64_t result = "kDYFEMTLDynamicLibrary_serializeToURL_error";
        break;
      case 711:
        uint64_t result = "kDYFEMTLCommandBuffer_accelerationStructureCommandEncoder";
        break;
      case 712:
        uint64_t result = "kDYFEMTLDevice_accelerationStructureSizesWithDescriptor";
        break;
      case 713:
        uint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForComputeDescriptor_error";
        break;
      case 714:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection_binaryArchives";
        break;
      case 715:
        uint64_t result = "kDYFEMTLFunction_reflectionWithOptions_binaryArchives";
        break;
      case 716:
        uint64_t result = "kDYFEMTLBinaryArchive_setLabel";
        break;
      case 717:
        uint64_t result = "kDYFEMTLBinaryArchive_addBinaryEntry_forKey";
        break;
      case 718:
        uint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error";
        break;
      case 719:
        uint64_t result = "kDYFEMTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 720:
        uint64_t result = "kDYFEMTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 721:
        uint64_t result = "kDYFEMTLBinaryArchive_getBinaryDataForKey";
        break;
      case 722:
        uint64_t result = "kDYFEMTLBinaryArchive_serializeToURL_error";
        break;
      case 723:
        uint64_t result = "kDYFEMTLAccelerationStructure_setLabel";
        break;
      case 724:
        uint64_t result = "kDYFEMTLAccelerationStructure_setResponsibleProcess";
        break;
      case 725:
        uint64_t result = "kDYFEMTLAccelerationStructure_dealloc";
        break;
      case 726:
        uint64_t result = "kDYFEMTLAccelerationStructure_doesAliasAllResources_count";
        break;
      case 727:
        uint64_t result = "kDYFEMTLAccelerationStructure_doesAliasAnyResources_count";
        break;
      case 728:
        uint64_t result = "kDYFEMTLAccelerationStructure_doesAliasResource";
        break;
      case 729:
        uint64_t result = "kDYFEMTLAccelerationStructure_isAliasable";
        break;
      case 730:
        uint64_t result = "kDYFEMTLAccelerationStructure_isComplete";
        break;
      case 731:
        uint64_t result = "kDYFEMTLAccelerationStructure_isPurgeable";
        break;
      case 732:
        uint64_t result = "kDYFEMTLAccelerationStructure_isWriteComplete";
        break;
      case 733:
        uint64_t result = "kDYFEMTLAccelerationStructure_makeAliasable";
        break;
      case 734:
        uint64_t result = "kDYFEMTLAccelerationStructure_setPurgeableState";
        break;
      case 735:
        uint64_t result = "kDYFEMTLAccelerationStructure_waitUntilComplete";
        break;
      case 736:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setLabel";
        break;
      case 737:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset";
        break;
      case 738:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure";
        break;
      case 739:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_copyAndCompactAccelerationStructure_toAccelerationStructure";
        break;
      case 740:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_dealloc";
        break;
      case 741:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_fromBuffer_offset";
        break;
      case 742:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_endEncoding";
        break;
      case 743:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_insertDebugSignpost";
        break;
      case 744:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_popDebugGroup";
        break;
      case 745:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_pushDebugGroup";
        break;
      case 746:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBu"
                 "ffer_scratchBufferOffset";
        break;
      case 747:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 748:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeAccelerationStructure_toBuffer_offset";
        break;
      case 749:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_updateFence";
        break;
      case 750:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useHeap";
        break;
      case 751:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useHeaps_count";
        break;
      case 752:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useResource_usage";
        break;
      case 753:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useResources_count_usage";
        break;
      case 754:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_waitForFence";
        break;
      case 755:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset";
        break;
      case 756:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_offset";
        break;
      case 757:
        uint64_t result = "kDYFEMTLArgumentEncoder_setAccelerationStructure_atIndex";
        break;
      case 758:
        uint64_t result = "kDYFEMTLArgumentEncoder_setFunctionTable_atIndex";
        break;
      case 759:
        uint64_t result = "kDYFEMTLArgumentEncoder_setFunctionTables_withRange";
        break;
      case 760:
        uint64_t result = "kDYFEMTLCommandQueue_getSPIStats";
        break;
      case 761:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setAccelerationStructure_atBufferIndex";
        break;
      case 762:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setFunctionTable_atIndex";
        break;
      case 763:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setFunctionTables_withRange";
        break;
      case 764:
        uint64_t result = "kDYFEMTLComputePipelineState_functionHandleWithFunction";
        break;
      case 765:
        uint64_t result = "kDYFEMTLComputePipelineState_functionHandlesWithFunctions";
        break;
      case 766:
        uint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalDynamicFunctions";
        break;
      case 767:
        uint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_completionHandler";
        break;
      case 768:
        uint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_error";
        break;
      case 769:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithDescriptor";
        break;
      case 770:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize";
        break;
      case 771:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibraryWithURL_error";
        break;
      case 772:
        uint64_t result = "kDYFEMTLDevice_newVisibleFunctionTableWithDescriptor";
        break;
      case 773:
        uint64_t result = "kDYFEMTLDynamicLibrary_serializeToURL_options_error";
        break;
      case 774:
        uint64_t result = "kDYFEMTLFunctionHandle_dealloc";
        break;
      case 775:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithDescriptor_completionHandler";
        break;
      case 776:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithDescriptor_error";
        break;
      case 777:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setLabel";
        break;
      case 778:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setResponsibleProcess";
        break;
      case 779:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_dealloc";
        break;
      case 780:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasAllResources_count";
        break;
      case 781:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasAnyResources_count";
        break;
      case 782:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasResource";
        break;
      case 783:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_isAliasable";
        break;
      case 784:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_isPurgeable";
        break;
      case 785:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_makeAliasable";
        break;
      case 786:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setFunction_atIndex";
        break;
      case 787:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setFunctions_withRange";
        break;
      case 788:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setPurgeableState";
        break;
      case 789:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_fromBuffer_serializedBufferOffset";
        break;
      case 790:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_primitiveAccelerationStruc"
                 "tures_fromBuffer_serializedBufferOffset";
        break;
      case 791:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeAccelerationStructure_toBuffer_serializedBufferOffset";
        break;
      case 792:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset"
                 "_toBuffer_sizeBufferOffset";
        break;
      case 793:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeDeserializedPrimitiveAccelerationStructureSizes_serial"
                 "izedOffset_toBuffer_sizesBufferOffset";
        break;
      case 794:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGeometryOfAccelerationStructure_toBuffer_geometryBufferOffset";
        break;
      case 795:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGeometrySizeOfAccelerationStructure_toBuffer_sizeBufferOffset";
        break;
      case 796:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_sizeBufferOffset";
        break;
      case 797:
        uint64_t result = "kDYFEMTLCommandBuffer_blitCommandEncoderWithDescriptor";
        break;
      case 798:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDescriptor";
        break;
      case 799:
        uint64_t result = "kDYFEMTLCommandBuffer_resourceStateCommandEncoderWithDescriptor";
        break;
      case 800:
        uint64_t result = "kDYFEMTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity";
        break;
      case 801:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setIntersectionFunctionTable_atBufferIndex";
        break;
      case 802:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setIntersectionFunctionTables_withBufferRange";
        break;
      case 803:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setVisibleFunctionTable_atBufferIndex";
        break;
      case 804:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setVisibleFunctionTables_withBufferRange";
        break;
      case 805:
        uint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions";
        break;
      case 806:
        uint64_t result = "kDYFEMTLComputePipelineState_newVisibleFunctionTableWithDescriptor";
        break;
      case 807:
        uint64_t result = "kDYFEMTLDevice_newIntersectionFunctionTableWithDescriptor";
        break;
      case 808:
        uint64_t result = "kDYFEMTLDevice_supportsCounterSampling";
        break;
      case 809:
        uint64_t result = "kDYFEMTLDevice_supportsTextureWriteFPRoundingMode";
        break;
      case 810:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setGlobalBuffer";
        break;
      case 811:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setGlobalBufferOffset";
        break;
      case 812:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setGlobalBuffer";
        break;
      case 813:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setGlobalBufferOffset";
        break;
      case 814:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setLabel";
        break;
      case 815:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setResponsibleProcess";
        break;
      case 816:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_dealloc";
        break;
      case 817:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasAllResources_count";
        break;
      case 818:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasAnyResources_count";
        break;
      case 819:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasResource";
        break;
      case 820:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_isAliasable";
        break;
      case 821:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_isComplete";
        break;
      case 822:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_isPurgeable";
        break;
      case 823:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_isWriteComplete";
        break;
      case 824:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_makeAliasable";
        break;
      case 825:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setFunction_atIndex";
        break;
      case 826:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setFunctions_withRange";
        break;
      case 827:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setPurgeableState";
        break;
      case 828:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_waitUntilComplete";
        break;
      case 829:
        uint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_options_error";
        break;
      case 830:
        uint64_t result = "kDYFEMTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 831:
        uint64_t result = "kDYFEMTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 832:
        uint64_t result = "kDYFEMTLAccelerationStructure_setDescriptor";
        break;
      case 833:
        uint64_t result = "kDYFEMTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler";
        break;
      case 834:
        uint64_t result = "kDYFEMTLLibrary_newIntersectionFunctionWithDescriptor_error";
        break;
      case 835:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTable_atBufferIndex";
        break;
      case 836:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTables_withBufferRange";
        break;
      case 837:
        uint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTable_atBufferIndex";
        break;
      case 838:
        uint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTables_withBufferRange";
        break;
      case 839:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffer_offset_atIndex";
        break;
      case 840:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffers_offsets_withRange";
        break;
      case 841:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setBuffer_offset_atIndex";
        break;
      case 842:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setBuffers_offsets_withRange";
        break;
      case 843:
        uint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions_error";
        break;
      case 844:
        uint64_t result = "kDYFEMTLComputePipelineState_newIntersectionFunctionTableWithDescriptor";
        break;
      case 845:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTable_atIndex";
        break;
      case 846:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTables_withRange";
        break;
      case 847:
        uint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTable_atIndex";
        break;
      case 848:
        uint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTables_withRange";
        break;
      case 849:
        uint64_t result = "kDYFEMTLDevice_supportsTextureWriteRoundingMode";
        break;
      case 850:
        uint64_t result = "kDYFEMTLTexture_didModifyData";
        break;
      case 851:
        uint64_t result = "kDYFEMTLCommandBuffer_setSharedIndirectionTable";
        break;
      case 852:
        uint64_t result = "kDYFEMTLDevice_newPrecompiledRenderPipelineStateWithDescriptor_options_pipelineCache_completionHandler";
        break;
      case 853:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibraryWithURL_options_error";
        break;
      case 854:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex";
        break;
      case 855:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_withRange";
        break;
      case 856:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setValue_atIndex";
        break;
      case 857:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setValue_withRange";
        break;
      case 858:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setVisibleFunctionTable_atBufferIndex";
        break;
      case 859:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setVisibleFunctionTables_withBufferRange";
        break;
      case 860:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerat"
                 "ionStructures_fromBuffer_serializedBufferOffset";
        break;
      case 861:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serial"
                 "izedBufferOffset";
        break;
      case 862:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeInstanceAccelerationStructure_primitiveAcceleratio"
                 "nStructures_toBuffer_serializedBufferOffset";
        break;
      case 863:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializePrimitiveAccelerationStructure_toBuffer_serializedBufferOffset";
        break;
      case 864:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGenericBVHStructureOfAccelerationStructure_headerBuffe"
                 "r_headerBufferOffset_innerNodeBuffer_innerNodeBufferOffset_leafNodeBuffer_leafNodeBufferOffset_primitiv"
                 "eBuffer_primitiveBufferOffset";
        break;
      case 865:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGenericBVHStructureSizesOfAccelerationStructure_toBuff"
                 "er_sizesBufferOffset";
        break;
      case 866:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndDoWhile_offset_comparison_referenceValue";
        break;
      case 867:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndIf";
        break;
      case 868:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndWhile";
        break;
      case 869:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartDoWhile";
        break;
      case 870:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartElse";
        break;
      case 871:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartIf_offset_comparison_referenceValue";
        break;
      case 872:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartWhile_offset_comparison_referenceValue";
        break;
      case 873:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_insertCompressedTextureReinterpretationFlush";
        break;
      case 874:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResourceGroup_usage";
        break;
      case 875:
        uint64_t result = "kDYFEMTLDevice_newBufferWithDescriptor";
        break;
      case 876:
        uint64_t result = "kDYFEMTLRelocation_dealloc";
        break;
      case 877:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResourceGroup_usage_stages";
        break;
      case 878:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize_resourceIndex";
        break;
      case 879:
        uint64_t result = "kDYFEMTLBuffer_setParentGPUAddress";
        break;
      case 880:
        uint64_t result = "kDYFEMTLBuffer_setParentGPUSize";
        break;
      case 881:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_insertUncompressedToCompressedFlush";
        break;
      case 882:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType";
        break;
      case 883:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex";
        break;
      case 884:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardTagForResourceGroup";
        break;
      case 885:
        uint64_t result = "kDYFEMTLDevice_setPluginData";
        break;
      case 886:
        uint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error";
        break;
      case 887:
        uint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error";
        break;
      case 888:
        uint64_t result = "kDYFEMTLDevice_newLateEvalEvent";
        break;
      case 889:
        uint64_t result = "kDYFEMTLFunctionPointerHandle_dealloc";
        break;
      case 890:
        uint64_t result = "kDYFEMTLFunctionPrivateArgument_dealloc";
        break;
      case 891:
        uint64_t result = "kDYFEMTLFunctionStitchingAttribute_dealloc";
        break;
      case 892:
        uint64_t result = "kDYFEMTLFunctionStitchingNode_dealloc";
        break;
      case 893:
        uint64_t result = "kDYFEMTLLateEvalEvent_setLabel";
        break;
      case 894:
        uint64_t result = "kDYFEMTLLateEvalEvent_setSignaledValue";
        break;
      case 895:
        uint64_t result = "kDYFEMTLLateEvalEvent_dealloc";
        break;
      case 896:
        uint64_t result = "kDYFEMTLLateEvalEvent_newSharedEventHandle";
        break;
      case 897:
        uint64_t result = "kDYFEMTLLibrary_setShaderValidationEnabled";
        break;
      case 898:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion";
        break;
      case 899:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshAccelerationStructure_atBufferIndex";
        break;
      case 900:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshIntersectionFunctionTable_atBufferIndex";
        break;
      case 901:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshIntersectionFunctionTables_withBufferRange";
        break;
      case 902:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshVisibleFunctionTable_atBufferIndex";
        break;
      case 903:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshVisibleFunctionTables_withBufferRange";
        break;
      case 904:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectAccelerationStructure_atBufferIndex";
        break;
      case 905:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectIntersectionFunctionTable_atBufferIndex";
        break;
      case 906:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectIntersectionFunctionTables_withBufferRange";
        break;
      case 907:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectVisibleFunctionTable_atBufferIndex";
        break;
      case 908:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectVisibleFunctionTables_withBufferRange";
        break;
      case 909:
        uint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error";
        break;
      case 910:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillBuffer_range_pattern4";
        break;
      case 911:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length";
        break;
      case 912:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_color";
        break;
      case 913:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat";
        break;
      case 914:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_invalidateCompressedTexture";
        break;
      case 915:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_invalidateCompressedTexture_slice_level";
        break;
      case 916:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithGraphs_functions_error";
        break;
      case 917:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithGraphsSPI_functions_error";
        break;
      case 918:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerat"
                 "ionStructures_fromBuffer_serializedBufferOffset_withDescriptor";
        break;
      case 919:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serial"
                 "izedBufferOffset_withDescriptor";
        break;
      case 920:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithBuffer_offset";
        break;
      case 921:
        uint64_t result = "kDYFEMTLRenderPipelineState_functionHandleWithFunction_stage";
        break;
      case 922:
        uint64_t result = "kDYFEMTLRenderPipelineState_newIntersectionFunctionTableWithDescriptor_stage";
        break;
      case 923:
        uint64_t result = "kDYFEMTLRenderPipelineState_newRenderPipelineStateWithAdditionalBinaryFunctions_error";
        break;
      case 924:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableWithDescriptor_stage";
        break;
      case 925:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentAccelerationStructure_atBufferIndex";
        break;
      case 926:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentIntersectionFunctionTable_atBufferIndex";
        break;
      case 927:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentIntersectionFunctionTables_withBufferRange";
        break;
      case 928:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentVisibleFunctionTable_atBufferIndex";
        break;
      case 929:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentVisibleFunctionTables_withBufferRange";
        break;
      case 930:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileAccelerationStructure_atBufferIndex";
        break;
      case 931:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileIntersectionFunctionTable_atBufferIndex";
        break;
      case 932:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileIntersectionFunctionTables_withBufferRange";
        break;
      case 933:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileVisibleFunctionTable_atBufferIndex";
        break;
      case 934:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileVisibleFunctionTables_withBufferRange";
        break;
      case 935:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAccelerationStructure_atBufferIndex";
        break;
      case 936:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexIntersectionFunctionTable_atBufferIndex";
        break;
      case 937:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexIntersectionFunctionTables_withBufferRange";
        break;
      case 938:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexVisibleFunctionTable_atBufferIndex";
        break;
      case 939:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexVisibleFunctionTables_withBufferRange";
        break;
      case 940:
        uint64_t result = "kDYFEMTLRenderPipelineState_fragmentFunctionHandleWithFunction";
        break;
      case 941:
        uint64_t result = "kDYFEMTLRenderPipelineState_newFragmentIntersectionFunctionTableWithDescriptor";
        break;
      case 942:
        uint64_t result = "kDYFEMTLRenderPipelineState_newTileIntersectionFunctionTableWithDescriptor";
        break;
      case 943:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVertexIntersectionFunctionTableWithDescriptor";
        break;
      case 944:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromFragmentStageWithDescriptor";
        break;
      case 945:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromTileStageWithDescriptor";
        break;
      case 946:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromVertexStageWithDescriptor";
        break;
      case 947:
        uint64_t result = "kDYFEMTLRenderPipelineState_tileFunctionHandleWithFunction";
        break;
      case 948:
        uint64_t result = "kDYFEMTLRenderPipelineState_vertexFunctionHandleWithFunction";
        break;
      case 949:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptor_error";
        break;
      case 950:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptorSPI_error";
        break;
      case 951:
        uint64_t result = "kDYFEMTLDevice_getBVHBuilderLock";
        break;
      case 952:
        uint64_t result = "kDYFEMTLDevice_getRawBVHBuilderPtr";
        break;
      case 953:
        uint64_t result = "kDYFEMTLDevice_setRawBVHBuilderPtr";
        break;
      case 954:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLCoreIR_functionType";
        break;
      case 955:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType";
        break;
      case 956:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLESIR_functionType";
        break;
      case 957:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLESIR_inputsDescription_functionType";
        break;
      case 958:
        uint64_t result = "kDYFEMTLBinaryArchive_addLibraryWithDescriptor_error";
        break;
      case 959:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptor_completionHandler";
        break;
      case 960:
        uint64_t result = "kDYFEMTLLateEvalEvent_waitUntilSignaledValue_timeoutMS";
        break;
      case 961:
        uint64_t result = "kDYFEMTLLibrary_serializeToURL_error";
        break;
      case 962:
        uint64_t result = "kDYFEMTLSharedEvent_waitUntilSignaledValue_timeoutMS";
        break;
      case 963:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptor_completionHandler";
        break;
      case 964:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptor_error";
        break;
      case 965:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptorSPI_error";
        break;
      case 966:
        uint64_t result = "kDYFEMTLDevice_deserializeInstanceAccelerationStructureFromBytes_primitiveAccelerationStructures_withDescriptor";
        break;
      case 967:
        uint64_t result = "kDYFEMTLDevice_deserializePrimitiveAccelerationStructureFromBytes_withDescriptor";
        break;
      case 968:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 969:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObje"
                 "ctThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 970:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 971:
        uint64_t result = "kDYFEMTLRenderPipelineState_setUsesMeshShaderEmulation";
        break;
      case 972:
        uint64_t result = "kDYFEMTLRasterizationRateMap_formattedDescription";
        break;
      case 973:
        uint64_t result = "kDYFEMTLRasterizationRateMap_resetUsingDescriptor";
        break;
      case 974:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count";
        break;
      case 975:
        uint64_t result = "kDYFEMTLBinaryArchive_addMeshRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 976:
        uint64_t result = "kDYFEMTLBinaryArchive_addMeshRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 977:
        uint64_t result = "kDYFEMTLBinaryArchive_storeMeshRenderPipelineDescriptor";
        break;
      case 978:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_completionHandler";
        break;
      case 979:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_error";
        break;
      case 980:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_options_completionHandler";
        break;
      case 981:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error";
        break;
      case 982:
        uint64_t result = "kDYFEMTLDevice_writeMeshShaderEmulatorDataStructureHeader_meshShaderPSO_scalingFactor";
        break;
      case 983:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBuffer_offset_atIndex";
        break;
      case 984:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBufferOffset_atIndex";
        break;
      case 985:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBuffers_offsets_withRange";
        break;
      case 986:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBytes_length_atIndex";
        break;
      case 987:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerState_atIndex";
        break;
      case 988:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 989:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 990:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerStates_withRange";
        break;
      case 991:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshTexture_atIndex";
        break;
      case 992:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshTextures_withRange";
        break;
      case 993:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBuffer_offset_atIndex";
        break;
      case 994:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBufferOffset_atIndex";
        break;
      case 995:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBuffers_offsets_withRange";
        break;
      case 996:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBytes_length_atIndex";
        break;
      case 997:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerState_atIndex";
        break;
      case 998:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 999:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 1000:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerStates_withRange";
        break;
      case 1001:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectTexture_atIndex";
        break;
      case 1002:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectTextures_withRange";
        break;
      case 1003:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectThreadgroupMemoryLength_atIndex";
        break;
      case 1004:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshMaxPrimitiveCount";
        break;
      case 1005:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshMaxVertexCount";
        break;
      case 1006:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshShaderIntermediateBufferSlot";
        break;
      case 1007:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshShaderPSO";
        break;
      case 1008:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshSize";
        break;
      case 1009:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationObjectShaderIntermediateBufferSlot";
        break;
      case 1010:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationObjectShaderPSO";
        break;
      case 1011:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationVertexShaderIntermediateBufferSlot";
        break;
      case 1012:
        uint64_t result = "kDYFEMTLRenderPipelineState_meshFunctionHandleWithFunction";
        break;
      case 1013:
        uint64_t result = "kDYFEMTLRenderPipelineState_newMeshIntersectionFunctionTableWithDescriptor";
        break;
      case 1014:
        uint64_t result = "kDYFEMTLRenderPipelineState_newObjectIntersectionFunctionTableWithDescriptor";
        break;
      case 1015:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromMeshStageWithDescriptor";
        break;
      case 1016:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromObjectStageWithDescriptor";
        break;
      case 1017:
        uint64_t result = "kDYFEMTLRenderPipelineState_objectFunctionHandleWithFunction";
        break;
      case 1018:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBu"
                 "ffer_scratchBufferOffset_options";
        break;
      case 1019:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeAccelerationStructureSerializationData_toBuffer_offset";
        break;
      case 1020:
        uint64_t result = "kDYFEMTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor";
        break;
      case 1021:
        uint64_t result = "kDYFEMTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor";
        break;
      case 1022:
        uint64_t result = "kDYFEMTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor";
        break;
      case 1023:
        uint64_t result = "kDYFEMTLDevice_heapAccelerationStructureSizeAndAlignWithDescriptor";
        break;
      case 1024:
        uint64_t result = "kDYFEMTLDevice_heapAccelerationStructureSizeAndAlignWithSize";
        break;
      case 1025:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex";
        break;
      case 1026:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize_withDescriptor";
        break;
      case 1027:
        uint64_t result = "kDYFEMTLBuffer__aneIOSurface";
        break;
      case 1028:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithDescriptor";
        break;
      case 1029:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithDescriptor_offset";
        break;
      case 1030:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize";
        break;
      case 1031:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_offset";
        break;
      case 1032:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_offset_resourceIndex";
        break;
      case 1033:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_resourceIndex";
        break;
      case 1034:
        uint64_t result = "kDYFEMTLDevice_newIOCommandQueueWithDescriptor_error";
        break;
      case 1035:
        uint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_compressionType_error";
        break;
      case 1036:
        uint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_error";
        break;
      case 1037:
        uint64_t result = "kDYFEMTLDevice_newPerformanceStateAssertion_error";
        break;
      case 1038:
        uint64_t result = "kDYFEMTLIOCommandBuffer_setStatus";
        break;
      case 1039:
        uint64_t result = "kDYFEMTLIOCommandBuffer_addCompletedHandler";
        break;
      case 1040:
        uint64_t result = "kDYFEMTLIOCommandBuffer_barrier";
        break;
      case 1041:
        uint64_t result = "kDYFEMTLIOCommandBuffer_commit";
        break;
      case 1042:
        uint64_t result = "kDYFEMTLIOCommandBuffer_copyStatusToBuffer_offset";
        break;
      case 1043:
        uint64_t result = "kDYFEMTLIOCommandBuffer_dealloc";
        break;
      case 1044:
        uint64_t result = "kDYFEMTLIOCommandBuffer_encodeSignalEvent_value";
        break;
      case 1045:
        uint64_t result = "kDYFEMTLIOCommandBuffer_encodeWaitForEvent_value";
        break;
      case 1046:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadBuffer_offset_size_handle_handleOffset";
        break;
      case 1047:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadTexture_slice_level_size_bytesPerRow_bytesPerImage_dstOrigin_handle_handleOffset";
        break;
      case 1048:
        uint64_t result = "kDYFEMTLIOCommandBuffer_tryCancel";
        break;
      case 1049:
        uint64_t result = "kDYFEMTLIOCommandBuffer_waitUntilCompleted";
        break;
      case 1050:
        uint64_t result = "kDYFEMTLIOCommandQueue_barrier";
        break;
      case 1051:
        uint64_t result = "kDYFEMTLIOCommandQueue_commandBuffer";
        break;
      case 1052:
        uint64_t result = "kDYFEMTLIOCommandQueue_dealloc";
        break;
      case 1053:
        uint64_t result = "kDYFEMTLIOScratchBuffer_dealloc";
        break;
      case 1054:
        uint64_t result = "kDYFEMTLIOScratchBufferAllocator_allocateScratchBufferWithMinimumSize";
        break;
      case 1055:
        uint64_t result = "kDYFEMTLIOScratchBufferAllocator_dealloc";
        break;
      case 1056:
        uint64_t result = "kDYFEMTLIOHandle_dealloc";
        break;
      case 1057:
        uint64_t result = "kDYFEMTLBinaryArchive_getArchiveIDWithError";
        break;
      case 1058:
        uint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_options";
        break;
      case 1059:
        uint64_t result = "kDYFEMTLEvent_setEnableBarrier";
        break;
      case 1060:
        uint64_t result = "kDYFEMTLLateEvalEvent_setEnableBarrier";
        break;
      case 1061:
        uint64_t result = "kDYFEMTLLibrary_bitCodeListForFunctions";
        break;
      case 1062:
        uint64_t result = "kDYFEMTLLibrary_bitCodeWithHash";
        break;
      case 1063:
        uint64_t result = "kDYFEMTLSharedEvent_setEnableBarrier";
        break;
      case 1064:
        uint64_t result = "kDYFEMTLDeadlineProfile_dealloc";
        break;
      case 1065:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationPrimitiveTopology";
        break;
      case 1066:
        uint64_t result = "kDYFEMTLCommandBuffer_commitWithDeadline";
        break;
      case 1067:
        uint64_t result = "kDYFEMTLDevice_newProfileWithExecutionSize";
        break;
      case 1068:
        uint64_t result = "kDYFEMTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline";
        break;
      case 1069:
        uint64_t result = "kDYFEMTLDevice_sparseTileSizeInBytesForSparsePageSize";
        break;
      case 1070:
        uint64_t result = "kDYFEMTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize";
        break;
      case 1071:
        uint64_t result = "kDYFEMTLIOCommandBuffer_setLabel";
        break;
      case 1072:
        uint64_t result = "kDYFEMTLIOCommandBuffer_enqueue";
        break;
      case 1073:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset";
        break;
      case 1074:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationO"
                 "rigin_sourceHandle_sourceHandleOffset";
        break;
      case 1075:
        uint64_t result = "kDYFEMTLIOCommandBuffer_signalEvent_value";
        break;
      case 1076:
        uint64_t result = "kDYFEMTLIOCommandBuffer_waitForEvent_value";
        break;
      case 1077:
        uint64_t result = "kDYFEMTLIOCommandQueue_setLabel";
        break;
      case 1078:
        uint64_t result = "kDYFEMTLIOCommandQueue_commandBufferWithUnretainedReferences";
        break;
      case 1079:
        uint64_t result = "kDYFEMTLIOHandle_setLabel";
        break;
      case 1080:
        uint64_t result = "kDYFEMTLIOHandle_decompress_size_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1081:
        uint64_t result = "kDYFEMTLIOHandle_getHandleOffset_offset";
        break;
      case 1082:
        uint64_t result = "kDYFEMTLIOHandle_read_size_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1083:
        uint64_t result = "kDYFEMTLIOHandle_readIntoStagingBuffer_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1084:
        uint64_t result = "kDYFEMTLIOHandle_stagingBufferSize_offset";
        break;
      case 1085:
        uint64_t result = "kDYFEMTLIOScratchBufferAllocator_newScratchBufferWithMinimumSize";
        break;
      case 1086:
        uint64_t result = "kDYFEMTLDevice_getMostCompatibleArchitecture";
        break;
      case 1087:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex";
        break;
      case 1088:
        uint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_compressionMethod_error";
        break;
      case 1089:
        uint64_t result = "kDYFEMTLIOCommandBuffer_addBarrier";
        break;
      case 1090:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset";
        break;
      case 1091:
        uint64_t result = "kDYFEMTLIOCommandBuffer_popDebugGroup";
        break;
      case 1092:
        uint64_t result = "kDYFEMTLIOCommandBuffer_pushDebugGroup";
        break;
      case 1093:
        uint64_t result = "kDYFEMTLIOCommandQueue_enqueueBarrier";
        break;
      case 1094:
        uint64_t result = "kDYFEMTLIOFileHandle_setLabel";
        break;
      case 1095:
        uint64_t result = "kDYFEMTLIOFileHandle_dealloc";
        break;
      case 1096:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationPayloadMemoryLength";
        break;
      case 1097:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeAccelerationStructureTraversalDepth_toBuffer_offset";
        break;
      case 1098:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeConditionalAbortEvent";
        break;
      case 1099:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEvent_value_agentMask";
        break;
      case 1100:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffer_offset_attributeStride_atIndex";
        break;
      case 1101:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex";
        break;
      case 1102:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange";
        break;
      case 1103:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex";
        break;
      case 1104:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupDistributionMode";
        break;
      case 1105:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupDistributionModeWithClusterGroupIndex";
        break;
      case 1106:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupPackingDisabled";
        break;
      case 1107:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelBuffer_offset_attributeStride_atIndex";
        break;
      case 1108:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexBuffer_offset_attributeStride_atIndex";
        break;
      case 1109:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffer_offset_attributeStride_atIndex";
        break;
      case 1110:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBufferOffset_attributeStride_atIndex";
        break;
      case 1111:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffers_offsets_attributeStrides_withRange";
        break;
      case 1112:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBytes_length_attributeStride_atIndex";
        break;
      case 1113:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_moveTextureMappingsFromTexture_sourceSlice_sourceLevel_sourceOrigin"
                 "_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin";
        break;
      case 1114:
        uint64_t result = "kDYFEMTLDevice_setShouldMaximizeConcurrentCompilation";
        break;
      case 1115:
        uint64_t result = "kDYFEMTLDevice_newEventWithOptions";
        break;
      case 1116:
        uint64_t result = "kDYFEMTLDevice_newSharedEventWithOptions";
        break;
      case 1117:
        uint64_t result = "kDYFEMTLDevice_setCompilerProcessesCount";
        break;
      case 1118:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 1119:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 1120:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setMeshBuffer_offset_atIndex";
        break;
      case 1121:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setObjectBuffer_offset_atIndex";
        break;
      case 1122:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setObjectThreadgroupMemoryLength_atIndex";
        break;
      case 1123:
        uint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithBufferBinding";
        break;
      case 1124:
        uint64_t result = "kDYFEMTLDevice_newIOFileHandleWithURL_compressionMethod_error";
        break;
      case 1125:
        uint64_t result = "kDYFEMTLDevice_newIOFileHandleWithURL_error";
        break;
      case 1126:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_atIndex";
        break;
      case 1127:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange";
        break;
      case 1128:
        uint64_t result = "kDYFEMTLCommandBuffer_setPrivateLoggingBuffer";
        break;
      case 1129:
        uint64_t result = "kDYFEMTLCommandBuffer_setResponsibleTaskIDs_count";
        break;
      case 1130:
        uint64_t result = "kDYFEMTLCommandBuffer_useResidencySet";
        break;
      case 1131:
        uint64_t result = "kDYFEMTLCommandBuffer_useResidencySets_count";
        break;
      case 1132:
        uint64_t result = "kDYFEMTLCommandQueue_addResidencySet";
        break;
      case 1133:
        uint64_t result = "kDYFEMTLCommandQueue_addResidencySets_count";
        break;
      case 1134:
        uint64_t result = "kDYFEMTLCommandQueue_removeResidencySet";
        break;
      case 1135:
        uint64_t result = "kDYFEMTLCommandQueue_removeResidencySets_count";
        break;
      case 1136:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResidencySet";
        break;
      case 1137:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResidencySets_count";
        break;
      case 1138:
        uint64_t result = "kDYFEMTLDevice_setWritableHeapsEnabled";
        break;
      case 1139:
        uint64_t result = "kDYFEMTLDevice_newResidencySetWithDescriptor_error";
        break;
      case 1140:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResidencySet";
        break;
      case 1141:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResidencySets_count";
        break;
      case 1142:
        uint64_t result = "kDYFEMTLResidencySet_addHeap";
        break;
      case 1143:
        uint64_t result = "kDYFEMTLResidencySet_addHeaps_count";
        break;
      case 1144:
        uint64_t result = "kDYFEMTLResidencySet_addResource";
        break;
      case 1145:
        uint64_t result = "kDYFEMTLResidencySet_addResources_count";
        break;
      case 1146:
        uint64_t result = "kDYFEMTLResidencySet_commitAdds";
        break;
      case 1147:
        uint64_t result = "kDYFEMTLResidencySet_commitRemoves";
        break;
      case 1148:
        uint64_t result = "kDYFEMTLResidencySet_commitResidency";
        break;
      case 1149:
        uint64_t result = "kDYFEMTLResidencySet_containsHeap";
        break;
      case 1150:
        uint64_t result = "kDYFEMTLResidencySet_containsResource";
        break;
      case 1151:
        uint64_t result = "kDYFEMTLResidencySet_countForHeap";
        break;
      case 1152:
        uint64_t result = "kDYFEMTLResidencySet_countForResource";
        break;
      case 1153:
        uint64_t result = "kDYFEMTLResidencySet_dealloc";
        break;
      case 1154:
        uint64_t result = "kDYFEMTLResidencySet_endResidency";
        break;
      case 1155:
        uint64_t result = "kDYFEMTLResidencySet_removeAllHeaps";
        break;
      case 1156:
        uint64_t result = "kDYFEMTLResidencySet_removeAllResources";
        break;
      case 1157:
        uint64_t result = "kDYFEMTLResidencySet_removeHeap";
        break;
      case 1158:
        uint64_t result = "kDYFEMTLResidencySet_removeHeaps_count";
        break;
      case 1159:
        uint64_t result = "kDYFEMTLResidencySet_removeResource";
        break;
      case 1160:
        uint64_t result = "kDYFEMTLResidencySet_removeResources_count";
        break;
      case 1161:
        uint64_t result = "kDYFEMTLResidencySet_requestResidency";
        break;
      case 1162:
        uint64_t result = "kDYFEMTLResidencySet_setCurrentGeneration";
        break;
      case 1163:
        uint64_t result = "kDYFEMTLResidencySet_setExpiredGeneration";
        break;
      case 1164:
        uint64_t result = "kDYFEMTLResidencySet_commit";
        break;
      case 1165:
        uint64_t result = "kDYFEMTLResidencySet_generationForHeap";
        break;
      case 1166:
        uint64_t result = "kDYFEMTLResidencySet_generationForResource";
        break;
      case 1167:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEventScheduled_value";
        break;
      case 1168:
        uint64_t result = "kDYFEMTLCommandBuffer_setPrivateData";
        break;
      case 1169:
        uint64_t result = "kDYFEMTLCommandBuffer_setPrivateDataOffset";
        break;
      case 1170:
        uint64_t result = "kDYFEMTLDevice_newLogStateWithDescriptor_error";
        break;
      case 1171:
        uint64_t result = "kDYFEMTLLogState_dealloc";
        break;
      case 1172:
        uint64_t result = "kDYFEMTLResidencySet_addAllocation";
        break;
      case 1173:
        uint64_t result = "kDYFEMTLResidencySet_addAllocations_count";
        break;
      case 1174:
        uint64_t result = "kDYFEMTLResidencySet_containsAllocation";
        break;
      case 1175:
        uint64_t result = "kDYFEMTLResidencySet_generationForAllocation";
        break;
      case 1176:
        uint64_t result = "kDYFEMTLResidencySet_removeAllAllocations";
        break;
      case 1177:
        uint64_t result = "kDYFEMTLResidencySet_removeAllocation";
        break;
      case 1178:
        uint64_t result = "kDYFEMTLResidencySet_removeAllocations_count";
        break;
      default:
        if ("kDYFEMTLBlitCommandEncoder_setLabel" != -18430) {
          goto LABEL_1384;
        }
        uint64_t result = "kDYFEMTLFXTemporalScaler_executionMode";
        break;
    }
  }
  return result;
}

uint64_t GetFuncEnumReceiverType(int a1)
{
  if (a1 > -12545)
  {
    if (a1 > -7169)
    {
      switch(a1)
      {
        case -6144:
        case -6132:
        case -6130:
        case -6105:
        case -6101:
          uint64_t result = 10;
          break;
        case -6143:
        case -6141:
        case -6134:
        case -6133:
        case -6131:
        case -6129:
        case -6122:
        case -6119:
        case -6116:
        case -6111:
        case -6110:
        case -6109:
        case -6096:
        case -6095:
LABEL_4:
          uint64_t result = 36;
          break;
        case -6142:
        case -6126:
        case -6121:
          uint64_t result = 7;
          break;
        case -6140:
        case -6137:
          uint64_t result = 11;
          break;
        case -6139:
          uint64_t result = 15;
          break;
        case -6138:
        case -6135:
        case -6117:
        case -6115:
          uint64_t result = 8;
          break;
        case -6136:
        case -6120:
        case -6112:
        case -6108:
        case -6106:
          uint64_t result = 5;
          break;
        case -6128:
        case -6124:
        case -6104:
        case -6103:
          uint64_t result = 9;
          break;
        case -6127:
        case -6114:
        case -6113:
        case -6107:
          uint64_t result = 6;
          break;
        case -6125:
        case -6123:
        case -6118:
          uint64_t result = 4;
          break;
        case -6102:
        case -6100:
          uint64_t result = 14;
          break;
        case -6099:
        case -6098:
          uint64_t result = 13;
          break;
        case -6097:
          uint64_t result = 12;
          break;
        default:
          switch(a1)
          {
            case -7168:
            case -7166:
            case -7165:
            case -7164:
            case -7163:
            case -7162:
            case -7160:
            case -7159:
            case -7154:
            case -7153:
              uint64_t result = 3;
              break;
            case -7167:
            case -7161:
            case -7158:
            case -7157:
            case -7156:
              uint64_t result = 2;
              break;
            case -7155:
              uint64_t result = 85;
              break;
            default:
              switch(a1)
              {
                case -6656:
                case -6655:
                case -6654:
                case -6653:
                case -6652:
                  uint64_t result = 84;
                  break;
                default:
LABEL_75:
                  uint64_t result = 0;
                  break;
              }
              break;
          }
          break;
      }
    }
    else
    {
      int v2 = a1 + 10240;
      uint64_t result = 1;
      switch(v2)
      {
        case 0:
        case 11:
        case 15:
LABEL_12:
          uint64_t result = 25;
          break;
        case 1:
        case 3:
        case 7:
        case 10:
          goto LABEL_4;
        case 2:
        case 4:
        case 6:
        case 8:
        case 9:
        case 13:
        case 18:
        case 28:
        case 35:
        case 36:
        case 39:
        case 42:
        case 55:
        case 76:
LABEL_8:
          uint64_t result = 80;
          break;
        case 5:
        case 12:
        case 17:
        case 19:
        case 30:
        case 37:
        case 40:
        case 53:
        case 54:
LABEL_18:
          uint64_t result = 22;
          break;
        case 14:
        case 77:
LABEL_50:
          uint64_t result = 75;
          break;
        case 20:
        case 41:
        case 48:
        case 56:
        case 68:
        case 75:
LABEL_15:
          uint64_t result = 71;
          break;
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 31:
        case 38:
        case 74:
LABEL_25:
          uint64_t result = 57;
          break;
        case 26:
        case 49:
        case 69:
        case 78:
LABEL_34:
          uint64_t result = 29;
          break;
        case 27:
LABEL_36:
          uint64_t result = 74;
          break;
        case 29:
        case 32:
        case 33:
LABEL_30:
          uint64_t result = 50;
          break;
        case 34:
          uint64_t result = 77;
          break;
        case 43:
        case 44:
        case 45:
        case 46:
        case 50:
        case 58:
        case 59:
        case 67:
        case 70:
        case 71:
        case 73:
        case 81:
        case 84:
LABEL_24:
          uint64_t result = 16;
          break;
        case 47:
        case 62:
        case 63:
        case 66:
        case 80:
        case 87:
LABEL_26:
          uint64_t result = 83;
          break;
        case 51:
LABEL_49:
          uint64_t result = 37;
          break;
        case 52:
        case 57:
LABEL_31:
          uint64_t result = 62;
          break;
        case 60:
        case 61:
        case 64:
        case 65:
        case 79:
        case 88:
LABEL_19:
          uint64_t result = 60;
          break;
        case 72:
          return result;
        case 82:
        case 85:
        case 86:
LABEL_14:
          uint64_t result = 17;
          break;
        case 83:
LABEL_37:
          uint64_t result = 43;
          break;
        case 89:
LABEL_40:
          uint64_t result = 23;
          break;
        default:
          goto LABEL_75;
      }
    }
  }
  else if (a1 <= -18431)
  {
    switch(a1)
    {
      case -20480:
      case -20479:
      case -20478:
      case -20477:
      case -20476:
      case -20475:
      case -20474:
        uint64_t result = 39;
        break;
      case -20473:
      case -20472:
      case -20471:
      case -20470:
      case -20469:
      case -20468:
      case -20467:
      case -20466:
      case -20465:
      case -20464:
      case -20463:
      case -20462:
      case -20461:
      case -20460:
      case -20459:
      case -20458:
      case -20457:
      case -20456:
LABEL_23:
        uint64_t result = 40;
        break;
      default:
        if (a1 != -18432 && a1 != -18431) {
          goto LABEL_75;
        }
        goto LABEL_4;
    }
  }
  else
  {
    switch(a1)
    {
      case -16384:
      case -16383:
      case -16382:
      case -16381:
      case -16380:
      case -16379:
      case -16378:
      case -16377:
      case -16376:
      case -16375:
      case -16374:
      case -16373:
      case -16230:
      case -16229:
      case -16213:
      case -16212:
      case -16211:
      case -16210:
      case -16209:
      case -16131:
      case -16124:
      case -15995:
      case -15994:
      case -15993:
      case -15992:
      case -15977:
      case -15976:
      case -15960:
      case -15959:
      case -15958:
      case -15878:
      case -15877:
      case -15876:
      case -15875:
      case -15802:
      case -15800:
      case -15798:
      case -15756:
      case -15755:
      case -15474:
      case -15473:
      case -15472:
      case -15471:
      case -15470:
      case -15469:
        uint64_t result = 21;
        break;
      case -16372:
      case -16371:
      case -16370:
      case -16369:
      case -16368:
      case -16367:
      case -16366:
      case -16228:
      case -16208:
      case -16122:
      case -16113:
      case -16104:
      case -16103:
      case -16102:
      case -16098:
      case -15914:
      case -15904:
      case -15874:
      case -15768:
      case -15767:
      case -15505:
      case -15504:
      case -15357:
        goto LABEL_18;
      case -16365:
      case -16364:
      case -16363:
      case -16362:
      case -16361:
      case -16360:
      case -16359:
      case -16358:
      case -16357:
      case -16356:
      case -16355:
      case -16354:
      case -16353:
      case -16352:
      case -16351:
      case -16350:
      case -16202:
      case -16195:
      case -16164:
      case -16151:
      case -16133:
      case -16065:
      case -16064:
      case -16014:
      case -16013:
      case -16012:
      case -15991:
      case -15990:
      case -15967:
      case -15966:
      case -15908:
      case -15899:
      case -15898:
      case -15897:
      case -15873:
      case -15872:
      case -15871:
      case -15870:
      case -15749:
      case -15712:
      case -15703:
      case -15673:
      case -15587:
      case -15586:
      case -15585:
      case -15584:
      case -15533:
      case -15501:
      case -15500:
      case -15410:
      case -15364:
      case -15326:
      case -15318:
      case -15316:
      case -15286:
      case -15285:
      case -15256:
      case -15255:
      case -15254:
      case -15253:
      case -15217:
      case -15216:
      case -15215:
        goto LABEL_12;
      case -16349:
      case -16348:
      case -16347:
      case -16346:
      case -16345:
      case -16344:
      case -16343:
      case -16342:
      case -16341:
      case -16340:
      case -16134:
      case -15811:
      case -15810:
      case -15809:
      case -15808:
      case -15807:
      case -15806:
      case -15805:
      case -15804:
      case -15701:
      case -15624:
      case -15252:
      case -15251:
      case -15250:
      case -15249:
        uint64_t result = 27;
        break;
      case -16339:
      case -16338:
      case -16337:
      case -16336:
      case -16335:
      case -16334:
      case -16333:
      case -16332:
      case -16331:
      case -16330:
      case -16329:
      case -16328:
      case -16327:
      case -16326:
      case -16325:
      case -16324:
      case -16323:
      case -16322:
      case -16227:
      case -16226:
      case -16220:
      case -16207:
      case -16150:
      case -16149:
      case -16130:
      case -16129:
      case -16100:
      case -16079:
      case -16078:
      case -16047:
      case -16046:
      case -16045:
      case -16044:
      case -16017:
      case -16011:
      case -16010:
      case -16009:
      case -16008:
      case -15965:
      case -15964:
      case -15963:
      case -15869:
      case -15754:
      case -15732:
      case -15711:
      case -15710:
      case -15709:
      case -15623:
      case -15622:
      case -15621:
      case -15583:
      case -15582:
      case -15581:
      case -15580:
      case -15518:
      case -15517:
      case -15516:
      case -15515:
      case -15514:
      case -15513:
      case -15512:
      case -15511:
      case -15510:
      case -15503:
      case -15284:
      case -15283:
      case -15282:
      case -15281:
      case -15280:
      case -15279:
      case -15278:
      case -15248:
      case -15247:
        uint64_t result = 28;
        break;
      case -16321:
      case -16092:
      case -15989:
      case -15868:
      case -15700:
      case -15699:
      case -15620:
      case -15619:
      case -15618:
      case -15579:
      case -15578:
      case -15541:
      case -15540:
        goto LABEL_34;
      case -16320:
        uint64_t result = 34;
        break;
      case -16319:
      case -16318:
      case -16317:
      case -16316:
      case -16315:
      case -16314:
      case -16313:
      case -16312:
      case -16311:
      case -16310:
      case -16309:
      case -16308:
      case -16307:
      case -16306:
      case -16305:
      case -16304:
      case -16303:
      case -16302:
      case -16301:
      case -16300:
      case -16299:
      case -16298:
      case -16297:
      case -16296:
      case -16295:
      case -16294:
      case -16206:
      case -16205:
      case -16200:
      case -16199:
      case -16198:
      case -16197:
      case -16166:
      case -16165:
      case -16163:
      case -16128:
      case -16121:
      case -16120:
      case -16112:
      case -16111:
      case -16101:
      case -16099:
      case -16096:
      case -16095:
      case -16093:
      case -16091:
      case -16090:
      case -16089:
      case -16088:
      case -16075:
      case -16066:
      case -16050:
      case -16049:
      case -16048:
      case -16039:
      case -16037:
      case -16036:
      case -16035:
      case -16031:
      case -16030:
      case -16029:
      case -16018:
      case -16016:
      case -16015:
      case -15998:
      case -15997:
      case -15996:
      case -15980:
      case -15979:
      case -15978:
      case -15972:
      case -15971:
      case -15969:
      case -15968:
      case -15912:
      case -15909:
      case -15902:
      case -15901:
      case -15900:
      case -15892:
      case -15891:
      case -15864:
      case -15863:
      case -15862:
      case -15861:
      case -15860:
      case -15859:
      case -15858:
      case -15857:
      case -15856:
      case -15855:
      case -15854:
      case -15853:
      case -15852:
      case -15851:
      case -15850:
      case -15849:
      case -15848:
      case -15847:
      case -15846:
      case -15845:
      case -15844:
      case -15843:
      case -15842:
      case -15841:
      case -15840:
      case -15839:
      case -15838:
      case -15837:
      case -15836:
      case -15835:
      case -15834:
      case -15833:
      case -15832:
      case -15831:
      case -15814:
      case -15813:
      case -15796:
      case -15793:
      case -15791:
      case -15780:
      case -15779:
      case -15774:
      case -15759:
      case -15758:
      case -15757:
      case -15751:
      case -15747:
      case -15746:
      case -15737:
      case -15731:
      case -15730:
      case -15719:
      case -15718:
      case -15717:
      case -15716:
      case -15708:
      case -15707:
      case -15706:
      case -15705:
      case -15704:
      case -15698:
      case -15697:
      case -15696:
      case -15695:
      case -15694:
      case -15693:
      case -15672:
      case -15671:
      case -15617:
      case -15616:
      case -15615:
      case -15614:
      case -15613:
      case -15612:
      case -15577:
      case -15576:
      case -15575:
      case -15535:
      case -15532:
      case -15531:
      case -15509:
      case -15506:
      case -15499:
      case -15498:
      case -15497:
      case -15496:
      case -15475:
      case -15468:
      case -15467:
      case -15464:
      case -15435:
      case -15434:
      case -15433:
      case -15432:
      case -15431:
      case -15430:
      case -15429:
      case -15428:
      case -15427:
      case -15425:
      case -15421:
      case -15420:
      case -15419:
      case -15418:
      case -15417:
      case -15406:
      case -15405:
      case -15404:
      case -15403:
      case -15402:
      case -15363:
      case -15362:
      case -15361:
      case -15360:
      case -15359:
      case -15358:
      case -15350:
      case -15349:
      case -15348:
      case -15347:
      case -15317:
      case -15315:
      case -15314:
      case -15298:
      case -15296:
      case -15270:
      case -15269:
      case -15268:
      case -15267:
      case -15261:
      case -15260:
      case -15259:
      case -15246:
      case -15245:
      case -15214:
        goto LABEL_4;
      case -16293:
      case -16135:
      case -16123:
      case -16052:
      case -16051:
      case -15830:
      case -15715:
      case -15714:
      case -15713:
      case -15670:
      case -15669:
        goto LABEL_37;
      case -16292:
      case -16291:
      case -16290:
      case -16107:
      case -16106:
      case -16083:
      case -16082:
      case -16081:
      case -16038:
      case -15772:
      case -15609:
      case -15608:
      case -15551:
      case -15550:
      case -15487:
      case -15423:
      case -15323:
      case -15322:
        goto LABEL_31;
      case -16289:
      case -16288:
      case -16287:
      case -16286:
      case -16285:
      case -16284:
      case -16283:
      case -16282:
      case -16162:
      case -16161:
      case -16160:
      case -16028:
      case -16027:
      case -16026:
        uint64_t result = 65;
        break;
      case -16281:
      case -16280:
      case -16279:
      case -16278:
      case -16277:
      case -16276:
      case -16275:
      case -16274:
      case -16273:
      case -16272:
      case -16271:
      case -16270:
      case -16269:
      case -16268:
      case -16267:
      case -16266:
      case -16265:
      case -16264:
      case -16263:
      case -16262:
      case -16261:
      case -16260:
      case -16259:
      case -16258:
      case -16257:
      case -16256:
      case -16255:
      case -16254:
      case -16253:
      case -16252:
      case -16251:
      case -16250:
      case -16249:
      case -16248:
      case -16247:
      case -16246:
      case -16245:
      case -16244:
      case -16243:
      case -16225:
      case -16224:
      case -16223:
      case -16222:
      case -16219:
      case -16218:
      case -16217:
      case -16216:
      case -16215:
      case -16214:
      case -16204:
      case -16203:
      case -16201:
      case -16159:
      case -16158:
      case -16157:
      case -16156:
      case -16155:
      case -16148:
      case -16147:
      case -16146:
      case -16145:
      case -16144:
      case -16143:
      case -16142:
      case -16141:
      case -16140:
      case -16139:
      case -16138:
      case -16137:
      case -16132:
      case -16126:
      case -16125:
      case -16087:
      case -16086:
      case -16085:
      case -16084:
      case -16080:
      case -16077:
      case -16076:
      case -16074:
      case -16043:
      case -16042:
      case -16041:
      case -16040:
      case -16022:
      case -16021:
      case -16020:
      case -16007:
      case -16006:
      case -16005:
      case -16004:
      case -16003:
      case -15988:
      case -15987:
      case -15986:
      case -15985:
      case -15984:
      case -15970:
      case -15962:
      case -15961:
      case -15823:
      case -15822:
      case -15821:
      case -15820:
      case -15819:
      case -15818:
      case -15812:
      case -15750:
      case -15729:
      case -15728:
      case -15727:
      case -15726:
      case -15725:
      case -15724:
      case -15723:
      case -15722:
      case -15721:
      case -15720:
      case -15507:
      case -15486:
      case -15485:
      case -15484:
      case -15483:
      case -15482:
      case -15481:
      case -15480:
      case -15479:
      case -15478:
      case -15477:
      case -15476:
      case -15459:
      case -15458:
      case -15457:
      case -15456:
      case -15455:
      case -15454:
      case -15453:
      case -15452:
      case -15451:
      case -15450:
      case -15449:
      case -15448:
      case -15447:
      case -15446:
      case -15445:
      case -15416:
      case -15415:
      case -15414:
      case -15401:
      case -15400:
      case -15399:
      case -15398:
      case -15397:
      case -15396:
      case -15395:
      case -15394:
      case -15393:
      case -15392:
      case -15391:
      case -15390:
      case -15389:
      case -15388:
      case -15387:
      case -15386:
      case -15385:
      case -15384:
      case -15383:
      case -15382:
      case -15381:
      case -15297:
      case -15275:
      case -15274:
      case -15273:
      case -15272:
      case -15244:
      case -15243:
        uint64_t result = 70;
        break;
      case -16242:
      case -15817:
      case -15463:
      case -15462:
      case -15461:
      case -15460:
      case -15444:
      case -15443:
      case -15442:
      case -15441:
      case -15440:
      case -15439:
      case -15438:
      case -15437:
      case -15436:
      case -15413:
      case -15380:
      case -15379:
      case -15378:
      case -15377:
      case -15376:
      case -15375:
      case -15374:
      case -15373:
      case -15372:
      case -15371:
      case -15370:
      case -15369:
      case -15368:
      case -15367:
      case -15319:
      case -15288:
        goto LABEL_15;
      case -16241:
      case -15983:
      case -15816:
        goto LABEL_50;
      case -16240:
      case -16239:
      case -16238:
      case -16237:
      case -16236:
      case -16235:
      case -16234:
      case -16233:
      case -16232:
      case -16231:
      case -16221:
      case -16196:
      case -16114:
      case -16108:
      case -16094:
      case -15981:
      case -15913:
      case -15910:
      case -15903:
      case -15894:
      case -15815:
      case -15775:
      case -15761:
      case -15760:
      case -15690:
      case -15689:
      case -15688:
      case -15534:
        goto LABEL_8;
      case -16194:
      case -16193:
      case -16192:
      case -16191:
      case -16190:
      case -16189:
      case -16188:
      case -16187:
      case -16186:
      case -16185:
      case -16184:
      case -16183:
      case -16182:
      case -16181:
      case -16180:
      case -16179:
      case -16178:
      case -16177:
      case -16176:
      case -16175:
      case -16174:
      case -16173:
      case -16172:
      case -16171:
      case -16170:
      case -16169:
      case -16168:
      case -16167:
      case -16154:
      case -16153:
      case -16152:
      case -16025:
      case -16024:
      case -16023:
        uint64_t result = 42;
        break;
      case -16136:
      case -16127:
        uint64_t result = 41;
        break;
      case -16119:
      case -16118:
      case -16117:
      case -16116:
      case -16115:
      case -16110:
      case -16109:
      case -16105:
      case -15829:
      case -15828:
      case -15778:
      case -15777:
      case -15356:
      case -15355:
      case -15354:
      case -15353:
      case -15352:
      case -15351:
        goto LABEL_30;
      case -16097:
      case -16032:
        uint64_t result = 81;
        break;
      case -16073:
      case -16072:
      case -16071:
      case -16070:
        uint64_t result = 24;
        break;
      case -16069:
      case -16068:
      case -16067:
      case -16034:
      case -16019:
      case -15736:
      case -15735:
      case -15734:
      case -15733:
        goto LABEL_40;
      case -16063:
      case -16062:
      case -16061:
      case -16060:
      case -16059:
      case -16058:
      case -16057:
      case -16056:
      case -16055:
      case -16054:
      case -16053:
      case -16033:
      case -16002:
      case -16001:
      case -16000:
      case -15999:
      case -15916:
      case -15915:
      case -15627:
      case -15626:
      case -15625:
      case -15549:
      case -15548:
      case -15547:
      case -15546:
      case -15539:
      case -15538:
      case -15537:
      case -15536:
        uint64_t result = 18;
        break;
      case -15982:
        uint64_t result = 78;
        break;
      case -15975:
      case -15974:
      case -15973:
      case -15911:
      case -15907:
      case -15422:
      case -15321:
        uint64_t result = 76;
        break;
      case -15957:
      case -15956:
      case -15955:
      case -15954:
      case -15953:
      case -15952:
      case -15951:
      case -15950:
      case -15949:
      case -15948:
      case -15947:
      case -15946:
      case -15945:
      case -15944:
      case -15943:
      case -15942:
      case -15941:
      case -15940:
      case -15939:
      case -15938:
      case -15937:
      case -15936:
      case -15906:
      case -15276:
      case -15266:
      case -15265:
      case -15264:
      case -15263:
      case -15262:
        uint64_t result = 59;
        break;
      case -15935:
      case -15934:
      case -15933:
      case -15932:
      case -15931:
      case -15930:
      case -15929:
      case -15928:
      case -15927:
      case -15926:
      case -15905:
      case -15827:
      case -15826:
      case -15825:
      case -15824:
      case -15773:
      case -15277:
        uint64_t result = 58;
        break;
      case -15925:
      case -15924:
      case -15923:
      case -15922:
      case -15921:
      case -15920:
      case -15919:
      case -15918:
      case -15917:
      case -15896:
      case -15895:
      case -15766:
      case -15765:
      case -15764:
      case -15763:
      case -15762:
        goto LABEL_25;
      case -15893:
        uint64_t result = 64;
        break;
      case -15890:
      case -15889:
      case -15888:
      case -15887:
      case -15886:
      case -15885:
      case -15884:
      case -15883:
      case -15882:
      case -15881:
        uint64_t result = 82;
        break;
      case -15880:
      case -15879:
      case -15325:
        uint64_t result = 38;
        break;
      case -15867:
      case -15753:
        uint64_t result = 31;
        break;
      case -15866:
      case -15865:
        uint64_t result = 35;
        break;
      case -15803:
      case -15801:
      case -15799:
      case -15797:
      case -15795:
      case -15776:
      case -15771:
      case -15770:
      case -15412:
      case -15411:
        uint64_t result = 68;
        break;
      case -15794:
      case -15792:
      case -15790:
      case -15789:
      case -15788:
      case -15787:
      case -15786:
      case -15785:
      case -15784:
      case -15783:
      case -15782:
      case -15781:
      case -15271:
        goto LABEL_36;
      case -15769:
        uint64_t result = 73;
        break;
      case -15752:
        uint64_t result = 32;
        break;
      case -15748:
        uint64_t result = 30;
        break;
      case -15745:
        uint64_t result = 66;
        break;
      case -15744:
      case -15743:
      case -15742:
      case -15741:
      case -15740:
      case -15739:
      case -15738:
        uint64_t result = 67;
        break;
      case -15702:
        uint64_t result = 26;
        break;
      case -15692:
        uint64_t result = 45;
        break;
      case -15691:
        uint64_t result = 79;
        break;
      case -15687:
      case -15686:
      case -15685:
      case -15684:
      case -15668:
      case -15667:
      case -15666:
      case -15665:
      case -15664:
      case -15663:
      case -15662:
      case -15555:
      case -15554:
      case -15553:
      case -15426:
      case -15409:
      case -15408:
      case -15407:
      case -15327:
        uint64_t result = 19;
        break;
      case -15683:
      case -15682:
      case -15681:
      case -15680:
      case -15679:
      case -15678:
      case -15677:
        uint64_t result = 20;
        break;
      case -15676:
      case -15675:
      case -15674:
      case -15611:
        goto LABEL_49;
      case -15661:
      case -15660:
      case -15659:
      case -15658:
      case -15657:
      case -15656:
      case -15655:
      case -15654:
      case -15653:
      case -15652:
      case -15651:
      case -15650:
      case -15649:
      case -15552:
        goto LABEL_24;
      case -15648:
      case -15647:
      case -15646:
      case -15645:
      case -15644:
      case -15643:
      case -15642:
      case -15641:
      case -15640:
      case -15639:
      case -15638:
      case -15637:
      case -15636:
      case -15635:
      case -15634:
      case -15633:
      case -15632:
      case -15631:
      case -15630:
      case -15629:
      case -15628:
      case -15595:
      case -15594:
      case -15593:
      case -15592:
      case -15591:
      case -15590:
      case -15589:
      case -15588:
      case -15524:
      case -15523:
      case -15522:
      case -15521:
      case -15520:
      case -15519:
      case -15502:
      case -15466:
      case -15465:
      case -15366:
      case -15365:
      case -15287:
        goto LABEL_14;
      case -15610:
        uint64_t result = 44;
        break;
      case -15607:
      case -15606:
      case -15605:
      case -15604:
      case -15603:
      case -15602:
      case -15601:
      case -15600:
      case -15599:
      case -15598:
      case -15597:
      case -15596:
      case -15574:
      case -15573:
      case -15543:
      case -15542:
      case -15528:
      case -15527:
        goto LABEL_26;
      case -15572:
      case -15571:
      case -15570:
      case -15569:
      case -15568:
      case -15567:
      case -15566:
      case -15565:
      case -15564:
      case -15563:
      case -15562:
      case -15561:
      case -15560:
      case -15559:
      case -15558:
      case -15557:
      case -15556:
      case -15545:
      case -15544:
      case -15530:
      case -15529:
      case -15526:
      case -15525:
      case -15258:
      case -15257:
        goto LABEL_19;
      case -15508:
        uint64_t result = 69;
        break;
      case -15495:
        uint64_t result = 46;
        break;
      case -15494:
        uint64_t result = 47;
        break;
      case -15493:
        uint64_t result = 48;
        break;
      case -15492:
        uint64_t result = 49;
        break;
      case -15491:
      case -15490:
      case -15489:
      case -15488:
      case -15424:
      case -15324:
        uint64_t result = 61;
        break;
      case -15346:
      case -15345:
      case -15344:
      case -15343:
      case -15342:
      case -15341:
      case -15340:
      case -15339:
      case -15338:
      case -15337:
      case -15336:
      case -15335:
      case -15313:
      case -15312:
      case -15311:
      case -15310:
      case -15309:
      case -15308:
      case -15295:
      case -15294:
      case -15293:
      case -15292:
        uint64_t result = 51;
        break;
      case -15334:
      case -15333:
      case -15332:
      case -15307:
      case -15306:
      case -15291:
        uint64_t result = 52;
        break;
      case -15331:
        uint64_t result = 55;
        break;
      case -15330:
      case -15329:
      case -15299:
        uint64_t result = 56;
        break;
      case -15328:
      case -15305:
      case -15304:
      case -15303:
      case -15302:
      case -15301:
      case -15300:
        uint64_t result = 54;
        break;
      case -15320:
        uint64_t result = 33;
        break;
      case -15290:
      case -15289:
        uint64_t result = 53;
        break;
      case -15242:
      case -15241:
      case -15240:
      case -15239:
      case -15238:
      case -15237:
      case -15236:
      case -15235:
      case -15234:
      case -15233:
      case -15232:
      case -15231:
      case -15230:
      case -15229:
      case -15228:
      case -15227:
      case -15226:
      case -15225:
      case -15224:
      case -15223:
      case -15222:
      case -15221:
      case -15220:
      case -15219:
      case -15218:
      case -15212:
      case -15211:
      case -15210:
      case -15209:
      case -15208:
      case -15207:
      case -15206:
        uint64_t result = 72;
        break;
      case -15213:
        uint64_t result = 63;
        break;
      default:
        if (a1 != -18430) {
          goto LABEL_75;
        }
        goto LABEL_23;
    }
  }
  return result;
}

BOOL IsFuncEnumCreateCommandEncoder(int a1)
{
  int FuncEnumConstructorType = GetFuncEnumConstructorType(a1);
  BOOL result = 1;
  if ((FuncEnumConstructorType - 21) > 0x3D
    || ((1 << (FuncEnumConstructorType - 21)) & 0x2022100000000081) == 0)
  {
    return FuncEnumConstructorType == 17;
  }
  return result;
}

uint64_t IsFuncEnumSharedResourceConstructor(int a1)
{
  uint64_t result = 1;
  if (a1 <= -16097)
  {
    if (a1 > -16164)
    {
      if (a1 == -16163) {
        return result;
      }
      int v3 = -16104;
    }
    else
    {
      if (a1 == -16312) {
        return result;
      }
      int v3 = -16294;
    }
    goto LABEL_11;
  }
  if (((a1 + 16031) > 0x34 || ((1 << (a1 - 97)) & 0x18000000000003) == 0)
    && (a1 + 15914) >= 2)
  {
    int v3 = -16096;
LABEL_11:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t IsFuncEnumParallelCommandEncoderCall(int a1)
{
  uint64_t result = 1;
  if (a1 > -16163)
  {
    if ((a1 + 16162) >= 3 && (a1 + 16028) >= 3) {
      return 0;
    }
  }
  else if (((a1 + 16289) > 7 || a1 == -16286) && a1 != -16351)
  {
    return 0;
  }
  return result;
}

uint64_t GTTraceStoreAllocNode(int *a1, unint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a2 + 64;
  if (a2 < 0xC1)
  {
    double v12 = (pthread_mutex_t *)(a1 + 66);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 66));
    int v11 = 0;
    goto LABEL_8;
  }
  unsigned int v8 = -1;
  unint64_t v9 = 256;
  do
  {
    unsigned int v10 = v8;
    v9 *= 2;
    ++v8;
  }
  while (v9 < v7);
  int v11 = v10 + 2;
  double v12 = (pthread_mutex_t *)(a1 + 66);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 66));
  if (v8 <= 0x1D)
  {
LABEL_8:
    int v13 = (vm_address_t *)v11;
    while (!*(void *)&a1[2 * (void)v13 + 4])
    {
      int v13 = (vm_address_t *)((char *)v13 + 1);
      if (v13 == (vm_address_t *)((char *)&dword_1C + 3)) {
        goto LABEL_11;
      }
    }
    goto LABEL_26;
  }
  if (v11 != 31)
  {
LABEL_30:
    uint64_t v25 = v11;
    goto LABEL_31;
  }
  int v11 = 31;
LABEL_11:
  int v14 = 0;
  unint64_t v15 = 0x800000;
  if (v7 > 0x800000) {
    unint64_t v15 = v7;
  }
  for (unint64_t i = 256; i < v15; i *= 2)
    ++v14;
  memory_object_size_t v17 = 256;
  do
  {
    v17 *= 2;
    --v14;
  }
  while (v14);
  vm_address_t v18 = GTCoreAlloc(v17);
  int v19 = *a1;
  int v20 = a1[1];
  if (v20 == *a1)
  {
    int v21 = 2 * v20;
    if (!v20) {
      int v21 = 8;
    }
    a1[1] = v21;
    int v22 = (char *)malloc_type_realloc(*((void **)a1 + 1), 16 * v21, 0x10C004028F705ECuLL);
    *((void *)a1 + 1) = v22;
    int v19 = *a1;
  }
  else
  {
    int v22 = (char *)*((void *)a1 + 1);
  }
  *a1 = v19 + 1;
  int v13 = (vm_address_t *)&v22[16 * v19];
  *int v13 = v18;
  v13[1] = v17;
  *(_DWORD *)vm_address_t v18 = v17;
  *(_DWORD *)(v18 + 4) = 64;
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(void *)(v18 + 32) = v18;
  *(void *)(v18 + 48) = 0;
  *(void *)(v18 + 56) = 0;
  *(void *)(v18 + 40) = 0;
  LODWORD(v13) = 0;
  if (v17)
  {
    unint64_t v23 = 256;
    do
    {
      v23 *= 2;
      LODWORD(v13) = v13 + 1;
    }
    while (v23 < v17);
  }
  *(void *)&a1[2 * (int)v13 + 4] = v18;
LABEL_26:
  if (v11 >= (int)v13) {
    goto LABEL_30;
  }
  uint64_t v24 = (int)v13;
  uint64_t v25 = v11;
  int v26 = *(unsigned int **)&a1[2 * (int)v13 + 4];
  do
  {
    char v27 = &a1[2 * v24];
    *((void *)v27 + 2) = *((void *)v26 + 5);
    unint64_t v28 = (unint64_t)*v26 >> 1;
    *v26 >>= 1;
    v26[1] = 64;
    *((void *)v26 + 2) = 0;
    *((void *)v26 + 3) = 0;
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 4) = v26;
    *((void *)v26 + 6) = 0;
    *((void *)v26 + 7) = 0;
    char v29 = (char *)v26 + v28;
    *(_DWORD *)char v29 = v28;
    *((_DWORD *)v29 + 1) = 64;
    *((void *)v29 + 1) = 0;
    *((void *)v29 + 2) = 0;
    *((void *)v29 + 3) = 0;
    *((void *)v29 + 4) = v29;
    *((void *)v29 + 6) = 0;
    *((void *)v29 + 7) = 0;
    *((void *)v29 + 5) = 0;
    *((void *)v26 + 5) = (char *)v26 + v28;
    --v24;
    *((void *)v27 + 1) = v26;
  }
  while (v24 > v11);
LABEL_31:
  int v30 = &a1[2 * v25];
  uint64_t v31 = *((void *)v30 + 2);
  *((void *)v30 + 2) = *(void *)(v31 + 40);
  *(unsigned char *)(v31 + 8) = a3;
  *(void *)(v31 + 16) = a4;
  *(void *)(v31 + 24) = a1;
  *(void *)(v31 + 40) = 0;
  pthread_mutex_unlock(v12);
  return v31;
}

char *GTTraceMemPool_allocateBytes(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = (HIDWORD(a3) + 23) & 0x1FFFFFFF8;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  do
    unsigned int v8 = atomic_load((unsigned int *)(a1 + 28));
  while (v8 != add);
  unint64_t v9 = *(unsigned int **)(a1 + 8);
  if (!v9) {
    goto LABEL_12;
  }
  unsigned int v10 = atomic_load(v9 + 1);
  while (1)
  {
    uint64_t v11 = v10;
    unint64_t v12 = v6 + v10;
    unint64_t v13 = *v9;
    if (v12 > v13) {
      break;
    }
    unsigned int v10 = v11;
    atomic_compare_exchange_strong((atomic_uint *volatile)v9 + 1, &v10, v12);
    if (v10 == v11)
    {
      unint64_t v13 = *v9;
      break;
    }
  }
  int v14 = (char *)v9 + v11;
  uint64_t result = v12 <= v13 ? v14 : 0;
  if (v12 > v13)
  {
LABEL_12:
    uint64_t v16 = (unsigned int *)GTTraceStoreAllocNode(*(int **)a1, (HIDWORD(a3) + 23) & 0x1FFFFFFF8, 2, *(void *)(a1 + 32));
    uint64_t v17 = *(void *)(a1 + 16);
    if (v17) {
      vm_address_t v18 = (void *)(v17 + 40);
    }
    else {
      vm_address_t v18 = (void *)(a1 + 8);
    }
    *vm_address_t v18 = v16;
    *(void *)(a1 + 16) = v16;
    *((void *)v16 + 5) = 0;
    unsigned int v19 = atomic_load(v16 + 1);
    while (1)
    {
      uint64_t v20 = v19;
      unint64_t v21 = v6 + v19;
      unint64_t v22 = *v16;
      if (v21 > v22) {
        break;
      }
      unsigned int v19 = v20;
      atomic_compare_exchange_strong((atomic_uint *volatile)v16 + 1, &v19, v21);
      if (v19 == v20)
      {
        unint64_t v22 = *v16;
        break;
      }
    }
    unint64_t v23 = (char *)v16 + v20;
    if (v21 <= v22) {
      uint64_t result = v23;
    }
    else {
      uint64_t result = 0;
    }
  }
  atomic_store(add + 1, (unsigned int *)(a1 + 28));
  *(void *)uint64_t result = a2;
  *((void *)result + 1) = a3;
  return result;
}

uint64_t FBDecoder_DecodeArguments(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int v7 = a2;
  unint64_t v9 = a2 + a3;
  uint64_t v10 = *a1;
  uint64_t v11 = (char *)(a2 + v10);
  unint64_t v12 = (char *)memchr((void *)(a2 + v10), 0, a3 - v10);
  if (!v12) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v13 = v12;
  int v39 = v7;
  uint8x8_t v40 = a1;
  unsigned int v14 = a1[1];
  unint64_t v15 = v12 + 1;
  if (v11 == v12)
  {
LABEL_36:
    uint64_t result = 0;
    *uint8x8_t v40 = ((v15 + 3) & 0xFFFFFFFC) - v39;
    v40[1] = v14;
    return result;
  }
  while (1)
  {
    uint64_t v16 = v14;
    if (v14 >= a5) {
      return 2;
    }
    uint64_t v17 = (unint64_t *)(a4 + 16 * v14);
    uint64_t v18 = a4 + 16 * v16;
    *(unsigned char *)(v18 + 11) = 0;
    unsigned int v19 = (char *)(v18 + 11);
    uint64_t v20 = a4 + 16 * v16;
    *(_WORD *)(v20 + 8) = 1;
    unint64_t v21 = (unsigned __int16 *)(v20 + 8);
    int v22 = *v11;
    if (v22 == 64)
    {
      unsigned __int16 v23 = 0;
      uint64_t v25 = v11 + 1;
      int v24 = v11[1];
      if (v11 + 1 != v13)
      {
        __int16 v26 = v24 - 48;
        if ((v24 - 48) <= 9)
        {
          unsigned __int16 v23 = 0;
          char v27 = v11 + 2;
          do
          {
            unsigned __int16 v23 = v26 + 10 * v23;
            BOOL v28 = v27 == v13;
            int v30 = *v27++;
            int v29 = v30;
            if (v28) {
              break;
            }
            __int16 v26 = v29 - 48;
          }
          while ((v29 - 48) < 0xA);
          uint64_t v25 = v27 - 1;
        }
      }
      *unsigned int v19 = 1;
      uint64_t v31 = v23;
      unsigned __int16 *v21 = v23;
      int v22 = *v25;
      char v32 = 3;
      uint64_t v11 = v25;
    }
    else
    {
      char v32 = 2;
      uint64_t v31 = 1;
    }
    if (v22 == 117)
    {
      *unsigned int v19 = v32;
      char v33 = *++v11;
      LOBYTE(v22) = v33;
    }
    *(unsigned char *)(a4 + 16 * v16 + 10) = v22;
    uint64_t result = 0xFFFFFFFFLL;
    if ((char)v22 <= 97)
    {
      if ((char)v22 != 67)
      {
        if ((char)v22 != 83 && (char)v22 != 85) {
          return result;
        }
        if (v9 - (unint64_t)v15 >= 8 && *v15 == 0xFFFFFFFFLL)
        {
          unint64_t *v17 = 0;
          unsigned __int16 *v21 = 0;
          ++v15;
        }
        else
        {
          unint64_t *v17 = (unint64_t)v15;
          int v37 = (char *)memchr(v15, 0, v9 - (void)v15);
          if (!v37) {
            return 0xFFFFFFFFLL;
          }
          unsigned __int16 *v21 = (_WORD)v37 - (_WORD)v15;
          unint64_t v15 = v37 + 1;
        }
        goto LABEL_31;
      }
    }
    else
    {
      unsigned int v35 = (char)v22 - 98;
      if (v35 > 0x15) {
        return result;
      }
      if (((1 << v35) & 0x244404) == 0)
      {
        if (((1 << v35) & 0x90) != 0)
        {
          unint64_t v38 = ((unint64_t)v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t *v17 = v38;
          unint64_t v15 = (void *)(v38 + 4 * v31);
        }
        else
        {
          if ((char)v22 != 98) {
            return result;
          }
          unint64_t *v17 = (unint64_t)v15;
          unint64_t v15 = (void *)((char *)v15 + v31);
        }
        goto LABEL_31;
      }
    }
    unint64_t v36 = ((unint64_t)v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t *v17 = v36;
    unint64_t v15 = (void *)(v36 + 8 * v31);
LABEL_31:
    if (v9 < (unint64_t)v15) {
      return 0xFFFFFFFFLL;
    }
    if ((unint64_t)(v11 + 1) < v9 && v11[1] == 60) {
      uint64_t v11 = (char *)memchr(v11 + 2, 62, v13 - (v11 + 2));
    }
    unsigned int v14 = v16 + 1;
    if (++v11 == v13) {
      goto LABEL_36;
    }
  }
}

uint64_t PerformanceStatisticsURL(unsigned int *a1)
{
  if ((*((unsigned char *)a1 + 33) & 0x10) != 0)
  {
    do
    {
      int v2 = (unsigned int *)((char *)a1 + *a1);
      if (v2[1] != -12272) {
        break;
      }
      uint64_t v4 = 0;
      if (FBDecoder_DecodeArguments((unsigned int *)&v4, (uint64_t)(v2 + 9), *v2 - 36, (uint64_t)v5, 0xDuLL)|| HIDWORD(v4) < 2)
      {
        break;
      }
      if (*v6 == 116) {
        return v7;
      }
      a1 = InternalDataArgumentChainEnd(v2, 0);
    }
    while ((*((unsigned char *)a1 + 33) & 0x20) == 0);
  }
  return 0;
}

unsigned int *InternalDataArgumentChainEnd(unsigned int *a1, int *a2)
{
  int v3 = a1;
  unsigned int v4 = a1[1];
  if (a2)
  {
    if (v4 != -12272)
    {
      int v5 = *a2;
      long long v31 = 0u;
      long long v32 = 0u;
      v29[0] = v5;
      v29[1] = 500;
      int v30 = "header->fenum == kDYFEInternalData";
      uint64_t v6 = (long long *)v29;
LABEL_21:
      GTError_addError(a2, (uint64_t)v6);
      return v3;
    }
  }
  else if (v4 != -12272)
  {
    return v3;
  }
  uint64_t v28 = 0;
  int v7 = FBDecoder_DecodeArguments((unsigned int *)&v28, (uint64_t)(a1 + 9), *a1 - 36, (uint64_t)v29, 0xDuLL) & 0xFFFFFFFD;
  if (a2)
  {
    if (v7)
    {
      unsigned int v8 = *a2;
      long long v17 = 0u;
      long long v18 = 0u;
      *(void *)&long long v16 = v8 | 0x1F400000000;
      unint64_t v9 = "err == 0 || err == 2";
LABEL_20:
      *((void *)&v16 + 1) = v9;
      uint64_t v6 = &v16;
      goto LABEL_21;
    }
    if (HIDWORD(v28) <= 1)
    {
      unsigned int v14 = *a2;
      long long v17 = 0u;
      long long v18 = 0u;
      *(void *)&long long v16 = v14 | 0x1F400000000;
      unint64_t v9 = "2 <= parser.ntokens";
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (v7) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = HIDWORD(v28) > 1;
  }
  if (v10)
  {
LABEL_14:
    unsigned int v11 = *(_DWORD *)v31 - 102;
    BOOL v10 = v11 > 0x20;
    uint64_t v12 = (1 << v11) & 0x1B008001FLL;
    if (!v10 && v12 != 0)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      return DecodeDYMTLBinding(0, v3, &v16, 0, a2);
    }
  }
  return v3;
}

unsigned int *DecodeDYMTLBinding(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4, int *a5)
{
  uint64_t v6 = a4;
  unsigned int v8 = a2;
  char v115 = 0;
  __int16 v114 = 0;
  unsigned int v10 = a2[1];
  unsigned int v107 = a4;
  if (a5)
  {
    if (v10 != -12272)
    {
      int v11 = *a5;
      long long v112 = 0u;
      long long v113 = 0u;
      int v109 = v11;
      int v110 = 500;
      uint64_t v12 = "it->fenum == kDYFEInternalData";
LABEL_18:
      long long v111 = v12;
      GTError_addError(a5, (uint64_t)&v109);
      goto LABEL_19;
    }
  }
  else if (v10 != -12272)
  {
LABEL_19:
    char v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    char v29 = 0;
    char v30 = 0;
    char v31 = 0;
    LOBYTE(v32) = 0;
    uint64_t v33 = 0;
    long long v21 = 0;
    goto LABEL_20;
  }
  uint64_t v108 = 0;
  int v13 = FBDecoder_DecodeArguments((unsigned int *)&v108, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v116, 0xDuLL);
  if (a5)
  {
    if (v13)
    {
      int v14 = *a5;
      long long v112 = 0u;
      long long v113 = 0u;
      int v109 = v14;
      int v110 = 500;
      uint64_t v12 = "err == FBUF_SUCCESS";
      goto LABEL_18;
    }
    unsigned int v15 = HIDWORD(v108);
    if (HIDWORD(v108) <= 6)
    {
      int v23 = *a5;
      long long v112 = 0u;
      long long v113 = 0u;
      int v109 = v23;
      int v110 = 500;
      uint64_t v12 = "7 <= parser.ntokens";
      goto LABEL_18;
    }
  }
  else
  {
    unsigned int v15 = HIDWORD(v108);
    if (v13) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = HIDWORD(v108) > 6;
    }
    if (!v16) {
      goto LABEL_19;
    }
  }
  long long v17 = __s;
  if (!__s)
  {
    size_t v22 = 0;
    long long v19 = a3 + 23;
    long long v20 = (char *)a3[23];
    goto LABEL_24;
  }
  size_t v18 = strlen(__s);
  long long v19 = a3 + 23;
  long long v20 = (char *)a3[23];
  long long v21 = v20;
  size_t v22 = v18 + 1;
  if (v18 == -1) {
LABEL_24:
  }
    long long v21 = 0;
  *long long v19 = &v20[v22];
  if (v6)
  {
    unsigned int v35 = v21;
    memcpy(v21, v17, v22);
    long long v21 = v35;
  }
  uint64_t v26 = 0;
  char v24 = 0;
  unsigned int v32 = *v118;
  char v31 = *v119;
  char v29 = *v120 & 1;
  char v30 = *v121;
  if (v32 > 0xF)
  {
    if (v32 != 16)
    {
      if (v32 != 17)
      {
        if (v32 != 35) {
          goto LABEL_52;
        }
        if (a5)
        {
          if (v15 <= 0xB)
          {
            int v41 = *a5;
            long long v112 = 0u;
            long long v113 = 0u;
            int v109 = v41;
            int v110 = 500;
            long long v111 = "12 <= parser.ntokens";
            unsigned int v42 = v21;
            char v43 = v29;
            char v44 = v31;
            char v45 = v30;
            GTError_addError(a5, (uint64_t)&v109);
            char v30 = v45;
            char v31 = v44;
            char v29 = v43;
            long long v21 = v42;
LABEL_59:
            char v24 = 0;
            LOWORD(v6) = 0;
            LOWORD(v25) = 0;
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            unint64_t v28 = 0;
            goto LABEL_60;
          }
        }
        else if (v15 < 0xC)
        {
          goto LABEL_59;
        }
        unsigned int v100 = v21;
        unint64_t v103 = *(unsigned __int8 *)v122 | ((unint64_t)*(unsigned __int8 *)v123 << 8);
        int v25 = *v124;
        LODWORD(v6) = *v125;
        char v24 = *v126;
        uint64_t v27 = a3[16];
        a3[16] = v27 + 24;
        char v94 = v31;
        char v97 = v29;
        char v67 = v30;
        char v68 = DecodeDYMTLStructType(v27, (unsigned int *)((char *)v8 + *v8), a3, v107, a5);
        uint64_t v26 = a3[16];
        a3[16] = v26 + 24;
        char v69 = DecodeDYMTLStructType(v26, (unsigned int *)((char *)v68 + *v68), a3, v107, a5);
        long long v21 = v100;
        unint64_t v28 = v103;
        char v30 = v67;
        char v31 = v94;
        char v29 = v97;
        unsigned int v8 = v69;
LABEL_60:
        uint64_t v33 = 0;
        LOBYTE(v32) = 35;
        goto LABEL_20;
      }
      if (a5)
      {
        if (v15 <= 0xC)
        {
          int v61 = *a5;
          long long v112 = 0u;
          long long v113 = 0u;
          int v109 = v61;
          int v110 = 500;
          long long v111 = "13 <= parser.ntokens";
          int v62 = v21;
          char v63 = v29;
          char v64 = v31;
          char v65 = v30;
          GTError_addError(a5, (uint64_t)&v109);
          char v30 = v65;
          char v31 = v64;
          char v29 = v63;
          long long v21 = v62;
LABEL_90:
          char v24 = 0;
          LOWORD(v6) = 0;
          LOWORD(v25) = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          unint64_t v28 = 0;
          uint64_t v33 = 0;
LABEL_91:
          LOBYTE(v32) = 17;
          goto LABEL_20;
        }
      }
      else if (v15 < 0xD)
      {
        goto LABEL_90;
      }
      uint64_t v27 = *v124 | ((unint64_t)*v123 << 48) | ((unint64_t)*v126 << 40) | ((unint64_t)*v127 << 32);
      uint64_t v81 = a3[16];
      if (*(unsigned char *)v125) {
        unint64_t v82 = a3[16];
      }
      else {
        unint64_t v82 = 0;
      }
      unint64_t v106 = v82;
      if (*(unsigned char *)v125) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = a3[16];
      }
      a3[16] = v81 + 24;
      uint64_t v83 = (unsigned int *)((char *)v8 + *v8);
      unint64_t v84 = v21;
      char v85 = v29;
      char v86 = v31;
      char v87 = v30;
      long long v88 = DecodeDYMTLStructType(v81, v83, a3, v6, a5);
      unint64_t v28 = v106;
      char v30 = v87;
      char v31 = v86;
      char v29 = v85;
      long long v21 = v84;
      unsigned int v8 = v88;
      char v24 = 0;
      LOWORD(v6) = 0;
      LOWORD(v25) = 0;
      uint64_t v26 = 0;
      goto LABEL_91;
    }
    if (a5)
    {
      if (v15 <= 9)
      {
        int v56 = *a5;
        long long v112 = 0u;
        long long v113 = 0u;
        int v109 = v56;
        int v110 = 500;
        long long v111 = "10 <= parser.ntokens";
        uint64_t v57 = v21;
        char v58 = v29;
        char v59 = v31;
        char v60 = v30;
        GTError_addError(a5, (uint64_t)&v109);
        char v30 = v60;
        char v31 = v59;
        char v29 = v58;
        long long v21 = v57;
LABEL_81:
        char v24 = 0;
        LOWORD(v6) = 0;
        LOWORD(v25) = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        uint64_t v33 = 0;
        LOBYTE(v32) = 16;
        goto LABEL_20;
      }
    }
    else if (v15 < 0xA)
    {
      goto LABEL_81;
    }
    int v102 = v21;
    uint64_t v80 = *(unsigned int *)v123;
    char v96 = *v119;
    char v99 = *v120 & 1;
    char v93 = *v121;
    if (v15 < 0xC) {
      uint64_t v27 = v80 | 0xFF00000000;
    }
    else {
      uint64_t v27 = ((unint64_t)*(unsigned __int8 *)v125 << 40) | ((unint64_t)*(void *)v126 << 32) | v80;
    }
    uint64_t v89 = a3[16];
    if (*(unsigned char *)v124) {
      unint64_t v90 = a3[16];
    }
    else {
      unint64_t v90 = 0;
    }
    if (*(unsigned char *)v124) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = a3[16];
    }
    a3[16] = v89 + 24;
    char v91 = DecodeDYMTLStructType(v89, (unsigned int *)((char *)v8 + *v8), a3, v6, a5);
    unint64_t v28 = v90;
    unsigned int v8 = v91;
    char v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    uint64_t v26 = 0;
    LOBYTE(v32) = 16;
    long long v21 = v102;
    char v31 = v96;
    char v29 = v99;
    char v30 = v93;
    goto LABEL_20;
  }
  if (*v118)
  {
    if (v32 != 1)
    {
      if (v32 == 2)
      {
        if (a5)
        {
          if (v15 <= 8)
          {
            int v36 = *a5;
            long long v112 = 0u;
            long long v113 = 0u;
            int v109 = v36;
            int v110 = 500;
            long long v111 = "9 <= parser.ntokens";
            int v37 = v21;
            char v38 = v29;
            char v39 = v31;
            char v40 = v30;
            GTError_addError(a5, (uint64_t)&v109);
            char v30 = v40;
            char v31 = v39;
            char v29 = v38;
            long long v21 = v37;
LABEL_56:
            char v24 = 0;
            LOWORD(v6) = 0;
            LOWORD(v25) = 0;
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            unint64_t v28 = 0;
            uint64_t v33 = 0;
LABEL_95:
            LOBYTE(v32) = 2;
            goto LABEL_20;
          }
        }
        else if (v15 < 9)
        {
          goto LABEL_56;
        }
        unint64_t v66 = *(unsigned __int8 *)v123 | ((unint64_t)*v122 << 8);
        char v24 = 0;
        LOWORD(v6) = 0;
        if (v15 < 0xB)
        {
          LOWORD(v25) = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v33 = 0;
          unint64_t v28 = v66 | 0x10000;
        }
        else
        {
          LOWORD(v25) = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v33 = 0;
          unint64_t v28 = ((unint64_t)*v124 << 16) | ((unint64_t)*(unsigned __int8 *)v125 << 24) | v66;
        }
        goto LABEL_95;
      }
LABEL_52:
      LOWORD(v6) = 0;
      LOWORD(v25) = 0;
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      uint64_t v33 = 0;
      goto LABEL_20;
    }
    if (a5)
    {
      if (v15 <= 8)
      {
        int v51 = *a5;
        long long v112 = 0u;
        long long v113 = 0u;
        int v109 = v51;
        int v110 = 500;
        long long v111 = "9 <= parser.ntokens";
        unsigned int v52 = v21;
        char v53 = v29;
        char v54 = v31;
        char v55 = v30;
        GTError_addError(a5, (uint64_t)&v109);
        char v30 = v55;
        char v31 = v54;
        char v29 = v53;
        long long v21 = v52;
LABEL_77:
        char v24 = 0;
        LOWORD(v6) = 0;
        LOWORD(v25) = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        unint64_t v28 = 0;
LABEL_93:
        uint64_t v33 = 0;
        LOBYTE(v32) = 1;
        goto LABEL_20;
      }
    }
    else if (v15 < 9)
    {
      goto LABEL_77;
    }
    unint64_t v28 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(void *)v122 << 32);
    if (v15 >= 0xC)
    {
      uint64_t v75 = *(void *)v124;
      unint64_t v28 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(void *)v122 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(void *)v124 << 48);
      if (*v126)
      {
        unint64_t v101 = v21;
        unint64_t v105 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(void *)v122 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(void *)v124 << 48);
        char v92 = *v121;
        char v95 = *v119;
        char v98 = *v120 & 1;
        uint64_t v76 = *(void *)v125;
        uint64_t v33 = a3[15];
        uint64_t v77 = a3[16];
        a3[15] = v33 + 24;
        a3[16] = v77 + 24;
        unsigned int v8 = DecodeDYMTLStructType(v77, (unsigned int *)((char *)v8 + *v8), a3, v6, a5);
        if (!v6) {
          return v8;
        }
        uint64_t v78 = v77;
        *(unsigned char *)uint64_t v33 = 60;
        *(unsigned char *)(v33 + 22) = v75;
        *(_DWORD *)(v33 + 16) = v76;
        if (a5 && v75 != 1)
        {
          int v79 = *a5;
          long long v112 = 0u;
          long long v113 = 0u;
          int v109 = v79;
          int v110 = 500;
          long long v111 = "result.threadgroupMemory.dataType == GTMTLDataTypeStruct";
          GTError_addError(a5, (uint64_t)&v109);
        }
        uint64_t v27 = 0;
        uint64_t v26 = 0;
        LOWORD(v25) = 0;
        LOWORD(v6) = 0;
        char v24 = 0;
        *(void *)(v33 + 8) = v78;
        LOBYTE(v32) = 1;
        long long v21 = v101;
        unint64_t v28 = v105;
        char v31 = v95;
        char v29 = v98;
        char v30 = v92;
        goto LABEL_21;
      }
    }
    char v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    goto LABEL_93;
  }
  if (a5)
  {
    if (v15 <= 9)
    {
      int v46 = *a5;
      long long v112 = 0u;
      long long v113 = 0u;
      int v109 = v46;
      int v110 = 500;
      long long v111 = "10 <= parser.ntokens";
      uint64_t v47 = v21;
      char v48 = v29;
      char v49 = v31;
      char v50 = v30;
      GTError_addError(a5, (uint64_t)&v109);
      char v30 = v50;
      char v31 = v49;
      char v29 = v48;
      long long v21 = v47;
LABEL_68:
      char v24 = 0;
      LOWORD(v6) = 0;
      LOWORD(v25) = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      unint64_t v28 = 0;
LABEL_97:
      LOBYTE(v32) = 0;
      uint64_t v33 = 0;
      goto LABEL_20;
    }
  }
  else if (v15 < 0xA)
  {
    goto LABEL_68;
  }
  unint64_t v28 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(void *)v122 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(void *)v124 << 48);
  if (v15 < 0xC)
  {
    char v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    goto LABEL_97;
  }
  if (*(unsigned char *)v125)
  {
    unint64_t v104 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(void *)v122 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(void *)v124 << 48);
    char v70 = *v121;
    char v71 = *v119;
    char v72 = *v120 & 1;
    uint64_t v73 = v21;
    if (a5 && *(void *)v124 != 1)
    {
      int v74 = *a5;
      long long v112 = 0u;
      long long v113 = 0u;
      int v109 = v74;
      int v110 = 500;
      long long v111 = "result.buffer.dataType == GTMTLDataTypeStruct";
      GTError_addError(a5, (uint64_t)&v109);
    }
    uint64_t v33 = a3[16];
    a3[16] = v33 + 24;
    unsigned int v8 = DecodeDYMTLStructType(v33, (unsigned int *)((char *)v8 + *v8), a3, v6, a5);
    long long v21 = v73;
    char v29 = v72;
    char v31 = v71;
    char v30 = v70;
    unint64_t v28 = v104;
  }
  else
  {
    uint64_t v33 = 0;
  }
  char v24 = 0;
  LOWORD(v6) = 0;
  LOWORD(v25) = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  LOBYTE(v32) = 0;
  v28 |= (unint64_t)*v126 << 56;
LABEL_20:
  if (v107)
  {
LABEL_21:
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v33;
    *(unsigned char *)(a1 + 16) = v32;
    *(unsigned char *)(a1 + 17) = v31;
    *(unsigned char *)(a1 + 18) = v30;
    *(unsigned char *)(a1 + 19) = v29;
    *(_DWORD *)(a1 + 20) = 0;
    *(void *)(a1 + 24) = v28;
    *(void *)(a1 + 32) = v27;
    *(void *)(a1 + 40) = v26;
    *(_WORD *)(a1 + 48) = v25;
    *(_WORD *)(a1 + 50) = v6;
    *(unsigned char *)(a1 + 52) = v24;
    *(_WORD *)(a1 + 53) = v114;
    *(unsigned char *)(a1 + 55) = v115;
  }
  return v8;
}

unsigned int *DecodeDYMTLStructType(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4, int *a5)
{
  int v7 = a2;
  unsigned int v9 = a2[1];
  if (a5)
  {
    if (v9 != -12272)
    {
      int v10 = *a5;
      long long v83 = 0u;
      long long __s = 0u;
      int v80 = v10;
      int v81 = 500;
      int v11 = "it->fenum == kDYFEInternalData";
LABEL_95:
      unint64_t v82 = v11;
      GTError_addError(a5, (uint64_t)&v80);
      goto LABEL_96;
    }
    goto LABEL_5;
  }
  if (v9 == -12272)
  {
LABEL_5:
    uint64_t v67 = 0;
    int v12 = FBDecoder_DecodeArguments((unsigned int *)&v67, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v78, 2uLL);
    if (a5)
    {
      if (v12)
      {
        int v13 = *a5;
        long long v83 = 0u;
        long long __s = 0u;
        int v80 = v13;
        int v81 = 500;
        int v11 = "err == FBUF_SUCCESS";
        goto LABEL_95;
      }
      if (HIDWORD(v67) <= 1)
      {
        int v57 = *a5;
        long long v83 = 0u;
        long long __s = 0u;
        int v80 = v57;
        int v81 = 500;
        int v11 = "2 <= parser.ntokens";
        goto LABEL_95;
      }
    }
    else
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = HIDWORD(v67) > 1;
      }
      if (!v14) {
        goto LABEL_96;
      }
    }
    uint64_t v15 = *v79;
    uint64_t v65 = a3[17];
    a3[17] = v65 + 32 * v15;
    int v16 = v15;
    if ((int)v15 < 1) {
      goto LABEL_97;
    }
    int v60 = v15;
    uint64_t v61 = a1;
    uint64_t v17 = 0;
    uint64_t v66 = 32 * v15;
    while (1)
    {
      int v7 = (unsigned int *)((char *)v7 + *v7);
      __int16 v77 = 0;
      int v76 = 0;
      unsigned int v18 = v7[1];
      if (a5)
      {
        if (v18 != -12272)
        {
          int v19 = *a5;
          long long v83 = 0uLL;
          long long __s = 0uLL;
          int v80 = v19;
          int v81 = 500;
          unint64_t v82 = "it->fenum == kDYFEInternalData";
          long long v20 = &v80;
LABEL_34:
          GTError_addError(a5, (uint64_t)v20);
          goto LABEL_35;
        }
      }
      else if (v18 != -12272)
      {
        goto LABEL_35;
      }
      uint64_t v75 = 0;
      int v21 = FBDecoder_DecodeArguments((unsigned int *)&v75, (uint64_t)(v7 + 9), *v7 - 36, (uint64_t)&v80, 9uLL);
      if (a5)
      {
        if (v21)
        {
          int v22 = *a5;
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          int v68 = v22;
          int v69 = 500;
          int v23 = "err == FBUF_SUCCESS";
        }
        else
        {
          int v24 = HIDWORD(v75);
          if (HIDWORD(v75) > 5) {
            goto LABEL_29;
          }
          int v32 = *a5;
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          int v68 = v32;
          int v69 = 500;
          int v23 = "6 <= parser.ntokens";
        }
        char v70 = v23;
        uint64_t v74 = 0;
        long long v20 = &v68;
        goto LABEL_34;
      }
      int v24 = HIDWORD(v75);
      if (v21) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = HIDWORD(v75) > 5;
      }
      if (v25)
      {
LABEL_29:
        uint64_t v26 = (const void *)__s;
        int v27 = *(_DWORD *)v83;
        if ((void)__s)
        {
          size_t v28 = strlen((const char *)__s);
          char v29 = (char *)a3[23];
          char v30 = v29;
          size_t v31 = v28 + 1;
          if (v28 != -1)
          {
LABEL_42:
            a3[23] = &v29[v31];
            if (a4) {
              memcpy(v30, v26, v31);
            }
            int v35 = *v85;
            int v38 = *v86;
            int v39 = *v87;
            if (v24 != 6)
            {
              if (v24 != 7)
              {
                if (v24 == 8)
                {
                  __int16 v34 = *v88;
                  if (*v89)
                  {
                    int v62 = *v87;
                    int v63 = *v86;
                    goto LABEL_51;
                  }
LABEL_53:
                  BOOL v40 = 0;
LABEL_54:
                  char v33 = 0;
LABEL_68:
                  switch(v27)
                  {
                    case 0x3Cu:
                      if (v40)
                      {
                        uint64_t v36 = a3[15];
                        a3[15] = v36 + 24;
                        int v7 = DecodeDYMTLPointerType(v36, (unsigned int *)((char *)v7 + *v7), (uint64_t)a3, a4, a5);
                      }
                      else
                      {
                        uint64_t v36 = 0;
                      }
                      LOBYTE(v27) = 60;
                      goto LABEL_36;
                    case 2u:
                      if (a5)
                      {
                        if (v39)
                        {
                          char v50 = a3;
                          uint64_t v36 = a3[18];
                          a3[18] = v36 + 32;
                          int v51 = (unsigned int *)((char *)v7 + *v7);
                          uint64_t v52 = v36;
                          uint64_t v53 = a4;
                          char v54 = a5;
                          goto LABEL_87;
                        }
                        int v56 = *a5;
                        uint64_t v71 = 0;
                        uint64_t v72 = 0;
                        uint64_t v73 = 0;
                        int v68 = v56;
                        int v69 = 500;
                        char v70 = "isArrayType";
                        uint64_t v74 = 0;
                        GTError_addError(a5, (uint64_t)&v68);
LABEL_92:
                        uint64_t v36 = 0;
                      }
                      else
                      {
                        if (!v39) {
                          goto LABEL_92;
                        }
                        char v50 = a3;
                        uint64_t v36 = a3[18];
                        a3[18] = v36 + 32;
                        int v51 = (unsigned int *)((char *)v7 + *v7);
                        uint64_t v52 = v36;
                        uint64_t v53 = a4;
                        char v54 = 0;
LABEL_87:
                        int v7 = DecodeDYMTLArrayType(v52, v51, v50, v53, v54);
                      }
                      LOBYTE(v27) = 2;
                      goto LABEL_36;
                    case 1u:
                      if (a5)
                      {
                        if (v38)
                        {
                          char v45 = a3;
                          uint64_t v36 = a3[16];
                          a3[16] = v36 + 24;
                          int v46 = (char *)v7 + *v7;
                          uint64_t v47 = v36;
                          uint64_t v48 = a4;
                          char v49 = a5;
                          goto LABEL_84;
                        }
                        int v55 = *a5;
                        uint64_t v71 = 0;
                        uint64_t v72 = 0;
                        uint64_t v73 = 0;
                        int v68 = v55;
                        int v69 = 500;
                        char v70 = "isStructType";
                        uint64_t v74 = 0;
                        GTError_addError(a5, (uint64_t)&v68);
LABEL_89:
                        uint64_t v36 = 0;
                      }
                      else
                      {
                        if (!v38) {
                          goto LABEL_89;
                        }
                        char v45 = a3;
                        uint64_t v36 = a3[16];
                        a3[16] = v36 + 24;
                        int v46 = (char *)v7 + *v7;
                        uint64_t v47 = v36;
                        uint64_t v48 = a4;
                        char v49 = 0;
LABEL_84:
                        int v7 = (unsigned int *)DecodeDYMTLStructType(v47, v46, v45, v48, v49);
                      }
                      LOBYTE(v27) = 1;
                      goto LABEL_36;
                  }
LABEL_74:
                  uint64_t v36 = 0;
                  goto LABEL_36;
                }
                __int16 v34 = *v88;
                BOOL v40 = *v90 != 0;
                if (!*v89) {
                  goto LABEL_54;
                }
                int v62 = *v87;
                int v63 = *v86;
LABEL_57:
                int v7 = (unsigned int *)((char *)v7 + *v7);
                uint64_t v75 = 0;
                int v41 = FBDecoder_DecodeArguments((unsigned int *)&v75, (uint64_t)(v7 + 9), *v7 - 36, (uint64_t)&v80, 9uLL);
                if (a5)
                {
                  if (v41)
                  {
                    int v42 = *a5;
                    uint64_t v71 = 0;
                    uint64_t v72 = 0;
                    uint64_t v73 = 0;
                    int v68 = v42;
                    int v69 = 500;
                    char v70 = "err == FBUF_SUCCESS";
                    uint64_t v74 = 0;
                    GTError_addError(a5, (uint64_t)&v68);
LABEL_61:
                    char v33 = 0;
                    goto LABEL_74;
                  }
                  if ((v27 - 62) > 0xFu) {
                    uint64_t v43 = 0;
                  }
                  else {
                    uint64_t v43 = asc_4C8FB4[(v27 - 62)];
                  }
                  if (*(void *)v83 != v43)
                  {
                    int v44 = *a5;
                    uint64_t v71 = 0;
                    uint64_t v72 = 0;
                    uint64_t v73 = 0;
                    int v68 = v44;
                    int v69 = 500;
                    char v70 = "pixelFormat == DataTypeToPixelFormat(result.dataType)";
                    uint64_t v74 = 0;
                    GTError_addError(a5, (uint64_t)&v68);
                  }
                }
                else if (v41)
                {
                  goto LABEL_61;
                }
                char v33 = *(unsigned char *)__s;
                int v39 = v62;
                int v38 = v63;
                goto LABEL_68;
              }
              if (*(unsigned char *)v88)
              {
                int v62 = *v87;
                int v63 = *v86;
                __int16 v34 = 0;
LABEL_51:
                BOOL v40 = 0;
                goto LABEL_57;
              }
            }
            __int16 v34 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          size_t v31 = 0;
          char v29 = (char *)a3[23];
        }
        char v30 = 0;
        goto LABEL_42;
      }
LABEL_35:
      char v33 = 0;
      LOBYTE(v27) = 0;
      __int16 v34 = 0;
      int v35 = 0;
      uint64_t v36 = 0;
      char v30 = 0;
LABEL_36:
      if (a4)
      {
        uint64_t v37 = v65 + v17;
        *(void *)uint64_t v37 = v30;
        *(void *)(v37 + 8) = v36;
        *(_DWORD *)(v37 + 16) = v35;
        *(_WORD *)(v37 + 20) = 0;
        *(_WORD *)(v37 + 22) = v34;
        *(unsigned char *)(v37 + 24) = v27;
        *(unsigned char *)(v37 + 25) = v33;
        *(_DWORD *)(v37 + 26) = v76;
        *(_WORD *)(v37 + 30) = v77;
      }
      v17 += 32;
      if (v66 == v17)
      {
        int v16 = v60;
        a1 = v61;
        goto LABEL_97;
      }
    }
  }
LABEL_96:
  uint64_t v65 = 0;
  int v16 = 0;
LABEL_97:
  if (a4)
  {
    *(unsigned char *)a1 = 1;
    *(_DWORD *)(a1 + 16) = v16;
    uint64_t v58 = v65;
    if (!v16) {
      uint64_t v58 = 0;
    }
    *(void *)(a1 + 8) = v58;
  }
  return v7;
}

unsigned int *DecodeDYMTLArrayType(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4, int *a5)
{
  unsigned int v8 = a2;
  memset(v47, 0, 7);
  unsigned int v10 = a2[1];
  if (a5)
  {
    if (v10 != -12272)
    {
      int v11 = *a5;
      long long v45 = 0u;
      long long v46 = 0u;
      int v42 = v11;
      int v43 = 500;
      int v12 = "it->fenum == kDYFEInternalData";
LABEL_20:
      int v44 = v12;
      GTError_addError(a5, (uint64_t)&v42);
      goto LABEL_21;
    }
  }
  else if (v10 != -12272)
  {
LABEL_21:
    char v24 = 0;
    char v18 = 0;
    __int16 v23 = 0;
    LOWORD(v17) = 0;
    int v19 = 0;
    uint64_t v26 = 0;
    char v27 = 0;
    goto LABEL_22;
  }
  uint64_t v41 = 0;
  int v13 = FBDecoder_DecodeArguments((unsigned int *)&v41, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v48, 9uLL);
  if (a5)
  {
    if (v13)
    {
      int v14 = *a5;
      long long v45 = 0u;
      long long v46 = 0u;
      int v42 = v14;
      int v43 = 500;
      int v12 = "err == FBUF_SUCCESS";
      goto LABEL_20;
    }
    unsigned int v15 = HIDWORD(v41);
    if (HIDWORD(v41) <= 5)
    {
      int v25 = *a5;
      long long v45 = 0u;
      long long v46 = 0u;
      int v42 = v25;
      int v43 = 500;
      int v12 = "6 <= parser.ntokens";
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v15 = HIDWORD(v41);
    if (v13) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = HIDWORD(v41) > 5;
    }
    if (!v16) {
      goto LABEL_21;
    }
  }
  int v17 = *v49;
  char v18 = *v50;
  int v19 = *v51;
  int v20 = *v52;
  int v21 = *v53;
  if (v15 < 7)
  {
    __int16 v23 = 0;
    char v24 = 0;
    BOOL v22 = 1;
    goto LABEL_43;
  }
  if (v15 != 7)
  {
    __int16 v23 = *v55;
    if (v15 < 9)
    {
      BOOL v22 = 1;
      if (!*v54)
      {
LABEL_36:
        char v24 = 0;
        goto LABEL_43;
      }
    }
    else
    {
      BOOL v22 = *v56 == 0;
      if (!*v54) {
        goto LABEL_36;
      }
    }
    int v38 = *v53;
    int v39 = *v52;
    int v40 = *v49;
    goto LABEL_30;
  }
  BOOL v22 = 1;
  if (!*v54)
  {
    __int16 v23 = 0;
    goto LABEL_36;
  }
  int v38 = *v53;
  int v39 = *v52;
  int v40 = *v49;
  __int16 v23 = 0;
LABEL_30:
  unsigned int v8 = (unsigned int *)((char *)v8 + *v8);
  uint64_t v41 = 0;
  int v29 = FBDecoder_DecodeArguments((unsigned int *)&v41, (uint64_t)(v8 + 9), *v8 - 36, (uint64_t)v48, 9uLL);
  if (a5)
  {
    if (v29)
    {
      int v30 = *a5;
      long long v45 = 0u;
      long long v46 = 0u;
      int v42 = v30;
      int v43 = 500;
      int v44 = "err == FBUF_SUCCESS";
      GTError_addError(a5, (uint64_t)&v42);
LABEL_34:
      char v24 = 0;
      uint64_t v26 = 0;
LABEL_63:
      char v27 = 2;
LABEL_66:
      LOWORD(v17) = v40;
      goto LABEL_22;
    }
    if ((v18 - 62) > 0xFu) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = asc_4C8FB4[(v18 - 62)];
    }
    if (*(void *)v49 != v31)
    {
      int v32 = *a5;
      long long v45 = 0u;
      long long v46 = 0u;
      int v42 = v32;
      int v43 = 500;
      int v44 = "pixelFormat == DataTypeToPixelFormat(result.elementType)";
      GTError_addError(a5, (uint64_t)&v42);
    }
  }
  else if (v29)
  {
    goto LABEL_34;
  }
  char v24 = *v50;
  int v20 = v39;
  LOWORD(v17) = v40;
  int v21 = v38;
LABEL_43:
  switch(v18)
  {
    case 60:
      if (v22)
      {
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v26 = a3[15];
        a3[15] = v26 + 24;
        __int16 v33 = v17;
        unsigned int v8 = DecodeDYMTLPointerType(v26, (unsigned int *)((char *)v8 + *v8), (uint64_t)a3, a4, a5);
        LOWORD(v17) = v33;
      }
      char v27 = 2;
      char v18 = 60;
      goto LABEL_22;
    case 2:
      if (a5)
      {
        LOWORD(v40) = v17;
        if (v21)
        {
          uint64_t v26 = a3[18];
          a3[18] = v26 + 32;
          unsigned int v8 = (unsigned int *)DecodeDYMTLArrayType(v26, (char *)v8 + *v8, a3, a4, a5);
        }
        else
        {
          int v36 = *a5;
          long long v45 = 0u;
          long long v46 = 0u;
          int v42 = v36;
          int v43 = 500;
          int v44 = "isArrayType";
          GTError_addError(a5, (uint64_t)&v42);
          uint64_t v26 = 0;
        }
        char v18 = 2;
        goto LABEL_63;
      }
      if (v21)
      {
        uint64_t v26 = a3[18];
        a3[18] = v26 + 32;
        __int16 v34 = v17;
        unsigned int v8 = (unsigned int *)DecodeDYMTLArrayType(v26, (char *)v8 + *v8, a3, a4, 0);
        LOWORD(v17) = v34;
      }
      else
      {
        uint64_t v26 = 0;
      }
      char v18 = 2;
      break;
    case 1:
      if (!a5)
      {
        if (v20)
        {
          uint64_t v26 = a3[16];
          a3[16] = v26 + 24;
          __int16 v35 = v17;
          unsigned int v8 = (unsigned int *)DecodeDYMTLStructType(v26, (char *)v8 + *v8, a3, a4, 0);
          LOWORD(v17) = v35;
        }
        else
        {
          uint64_t v26 = 0;
        }
        char v27 = 2;
        char v18 = 1;
        goto LABEL_22;
      }
      LOWORD(v40) = v17;
      if (v20)
      {
        uint64_t v26 = a3[16];
        a3[16] = v26 + 24;
        unsigned int v8 = (unsigned int *)DecodeDYMTLStructType(v26, (char *)v8 + *v8, a3, a4, a5);
      }
      else
      {
        int v37 = *a5;
        long long v45 = 0u;
        long long v46 = 0u;
        int v42 = v37;
        int v43 = 500;
        int v44 = "isStructType";
        GTError_addError(a5, (uint64_t)&v42);
        uint64_t v26 = 0;
      }
      char v27 = 2;
      char v18 = 1;
      goto LABEL_66;
    default:
      uint64_t v26 = 0;
      break;
  }
  char v27 = 2;
LABEL_22:
  if (a4)
  {
    *(unsigned char *)a1 = v27;
    *(_DWORD *)(a1 + 1) = v47[0];
    *(_DWORD *)(a1 + 4) = *(_DWORD *)((char *)v47 + 3);
    *(void *)(a1 + 8) = v26;
    *(_DWORD *)(a1 + 16) = v19;
    *(_WORD *)(a1 + 20) = v17;
    *(_WORD *)(a1 + 22) = v23;
    *(unsigned char *)(a1 + 24) = v18;
    *(unsigned char *)(a1 + 25) = v24;
    *(_DWORD *)(a1 + 26) = 0;
    *(_WORD *)(a1 + 30) = 0;
  }
  return v8;
}

unsigned int *DecodeDYMTLPointerType(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v8 = a2;
  unsigned int v10 = a2[1];
  if (a5)
  {
    if (v10 != -12272)
    {
      int v11 = *a5;
      long long v40 = 0u;
      long long v41 = 0u;
      int v37 = v11;
      int v38 = 500;
      int v12 = "it->fenum == kDYFEInternalData";
LABEL_20:
      int v39 = v12;
      GTError_addError(a5, (uint64_t)&v37);
      goto LABEL_21;
    }
  }
  else if (v10 != -12272)
  {
LABEL_21:
    char v17 = 0;
    LOBYTE(v16) = 0;
    __int16 v18 = 0;
    int v19 = 0;
    uint64_t v20 = 0;
    char v27 = 0;
    goto LABEL_22;
  }
  uint64_t v36 = 0;
  int v13 = FBDecoder_DecodeArguments((unsigned int *)&v36, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v42, 8uLL);
  if (a5)
  {
    if (v13)
    {
      int v14 = *a5;
      long long v40 = 0u;
      long long v41 = 0u;
      int v37 = v14;
      int v38 = 500;
      int v12 = "err == FBUF_SUCCESS";
      goto LABEL_20;
    }
    if (HIDWORD(v36) <= 6)
    {
      int v26 = *a5;
      long long v40 = 0u;
      long long v41 = 0u;
      int v37 = v26;
      int v38 = 500;
      int v12 = "7 <= parser.ntokens";
      goto LABEL_20;
    }
  }
  else
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = HIDWORD(v36) > 6;
    }
    if (!v15) {
      goto LABEL_21;
    }
  }
  int v16 = *v43;
  char v17 = *v44;
  __int16 v18 = *v45;
  int v19 = *v46;
  if (v16 != 2)
  {
    if (v16 != 1)
    {
      uint64_t v20 = 0;
      char v27 = 60;
      goto LABEL_22;
    }
    if (a5)
    {
      if (*v47)
      {
        uint64_t v20 = *(void *)(a3 + 128);
        *(void *)(a3 + 128) = v20 + 24;
        int v21 = (char *)v8 + *v8;
        uint64_t v22 = v20;
        uint64_t v23 = a3;
        uint64_t v24 = a4;
        int v25 = a5;
LABEL_31:
        unsigned int v8 = (unsigned int *)DecodeDYMTLStructType(v22, v21, v23, v24, v25);
LABEL_37:
        char v27 = 60;
        LOBYTE(v16) = 1;
        goto LABEL_22;
      }
      int v34 = *a5;
      long long v40 = 0u;
      long long v41 = 0u;
      int v37 = v34;
      int v38 = 500;
      int v39 = "isStructType";
      GTError_addError(a5, (uint64_t)&v37);
    }
    else if (*v47)
    {
      uint64_t v20 = *(void *)(a3 + 128);
      *(void *)(a3 + 128) = v20 + 24;
      int v21 = (char *)v8 + *v8;
      uint64_t v22 = v20;
      uint64_t v23 = a3;
      uint64_t v24 = a4;
      int v25 = 0;
      goto LABEL_31;
    }
    uint64_t v20 = 0;
    goto LABEL_37;
  }
  if (!a5)
  {
    if (*v48)
    {
      uint64_t v20 = *(void *)(a3 + 144);
      *(void *)(a3 + 144) = v20 + 32;
      int v29 = (char *)v8 + *v8;
      uint64_t v30 = v20;
      uint64_t v31 = a3;
      uint64_t v32 = a4;
      __int16 v33 = 0;
      goto LABEL_34;
    }
LABEL_39:
    uint64_t v20 = 0;
    goto LABEL_40;
  }
  if (!*v48)
  {
    int v35 = *a5;
    long long v40 = 0u;
    long long v41 = 0u;
    int v37 = v35;
    int v38 = 500;
    int v39 = "isArrayType";
    GTError_addError(a5, (uint64_t)&v37);
    goto LABEL_39;
  }
  uint64_t v20 = *(void *)(a3 + 144);
  *(void *)(a3 + 144) = v20 + 32;
  int v29 = (char *)v8 + *v8;
  uint64_t v30 = v20;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  __int16 v33 = a5;
LABEL_34:
  unsigned int v8 = (unsigned int *)DecodeDYMTLArrayType(v30, v29, v31, v32, v33);
LABEL_40:
  char v27 = 60;
  LOBYTE(v16) = 2;
LABEL_22:
  if (a4)
  {
    *(unsigned char *)a1 = v27;
    *(_DWORD *)(a1 + 1) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(void *)(a1 + 8) = v20;
    *(_DWORD *)(a1 + 16) = v19;
    *(_WORD *)(a1 + 20) = v18;
    *(unsigned char *)(a1 + 22) = v16;
    *(unsigned char *)(a1 + 23) = v17;
  }
  return v8;
}

uint64_t DecodeDYMTLComputePipelineReflection(unsigned int *a1, void *a2, uint64_t a3, int *a4)
{
  int v7 = a1;
  long long v86 = 0u;
  long long v87 = 0u;
  int v88 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  memset(v85, 0, 26);
  unsigned int v8 = a1[8];
  if (a4)
  {
    if ((v8 & 0x1000) == 0)
    {
      int v9 = *a4;
      long long v92 = 0uLL;
      long long __s = 0uLL;
      int v89 = v9;
      int v90 = 500;
      char v91 = "header->flags & 0x00001000";
      GTError_addError(a4, (uint64_t)&v89);
LABEL_5:
      uint64_t v75 = 0;
      unsigned __int16 v10 = 0;
      uint64_t v11 = a2[14];
      goto LABEL_35;
    }
  }
  else if ((v8 & 0x1000) == 0)
  {
    goto LABEL_5;
  }
  unsigned __int16 v12 = 0;
  unsigned __int16 v13 = 0;
  unsigned __int16 v10 = 0;
  while (1)
  {
    int v14 = (unsigned int *)((char *)a1 + *a1);
    unsigned int v15 = v14[1];
    if (a4)
    {
      if (v15 != -12272)
      {
        int v19 = *a4;
        long long v92 = 0u;
        long long __s = 0u;
        int v89 = v19;
        int v90 = 500;
        char v91 = "header->fenum == kDYFEInternalData";
        uint64_t v20 = &v89;
        goto LABEL_30;
      }
    }
    else if (v15 != -12272)
    {
      goto LABEL_31;
    }
    uint64_t v82 = 0;
    int v16 = FBDecoder_DecodeArguments((unsigned int *)&v82, (uint64_t)(v14 + 9), *v14 - 36, (uint64_t)&v89, 0xDuLL) & 0xFFFFFFFD;
    if (!a4)
    {
      if (v16) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = HIDWORD(v82) > 1;
      }
      if (!v17) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }
    if (v16) {
      break;
    }
    if (HIDWORD(v82) <= 1)
    {
      int v22 = *a4;
      long long v80 = 0u;
      long long v81 = 0u;
      int v77 = v22;
      int v78 = 500;
      uint64_t v23 = "2 <= parser.ntokens";
      goto LABEL_29;
    }
LABEL_20:
    int v18 = *(_DWORD *)v92;
    if (*(_DWORD *)v92 == 126)
    {
      ++v10;
    }
    else if (v18 == 106)
    {
      ++v13;
    }
    else if (v18 == 105)
    {
      ++v12;
    }
    a1 = InternalDataArgumentChainEnd(v14, a4);
    if ((*((unsigned char *)a1 + 33) & 0x20) != 0) {
      goto LABEL_31;
    }
  }
  int v21 = *a4;
  long long v80 = 0u;
  long long v81 = 0u;
  int v77 = v21;
  int v78 = 500;
  uint64_t v23 = "err == 0 || err == 2";
LABEL_29:
  int v79 = v23;
  uint64_t v20 = &v77;
LABEL_30:
  GTError_addError(a4, (uint64_t)v20);
LABEL_31:
  if (v12) {
    uint64_t v24 = a2[14];
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v11 = a2[14] + 56 * v12;
  uint64_t v75 = v24;
  uint64_t v76 = v11;
  if (!v13)
  {
LABEL_35:
    unsigned __int16 v13 = 0;
    uint64_t v76 = 0;
  }
  a2[14] = v11 + 56 * v13;
  if (v10) {
    uint64_t v25 = a2[22];
  }
  else {
    uint64_t v25 = 0;
  }
  if (v10) {
    uint64_t v26 = a2[22] + 8 * v10;
  }
  else {
    uint64_t v26 = 0;
  }
  a2[22] += 8 * v10 + 8 * v10;
  unsigned int v27 = v7[8];
  if ((v27 & 0x1000) == 0) {
    goto LABEL_95;
  }
  if (!a4)
  {
    if ((v27 & 0x2000) == 0) {
      goto LABEL_47;
    }
LABEL_95:
    LOWORD(v29) = 0;
    LOWORD(v30) = 0;
    LOWORD(v31) = 0;
    LOWORD(v32) = 0;
    __int16 v74 = 0;
LABEL_96:
    if (!a3) {
      goto LABEL_98;
    }
LABEL_97:
    uint64_t v61 = a2[11];
    *(_OWORD *)(v61 + 8) = 0uLL;
    long long v62 = v87;
    *(_OWORD *)(v61 + 56) = v86;
    *(_OWORD *)(v61 + 72) = v62;
    *(_OWORD *)(v61 + 144) = *(_OWORD *)((char *)v85 + 10);
    *(_OWORD *)(v61 + 134) = v85[0];
    long long v63 = v83;
    *(_OWORD *)(v61 + 118) = v84;
    *(void *)uint64_t v61 = -1;
    *(void *)(v61 + 24) = v75;
    *(void *)(v61 + 32) = v76;
    *(void *)(v61 + 40) = v25;
    *(void *)(v61 + 48) = v26;
    *(_DWORD *)(v61 + 88) = v88;
    *(_WORD *)(v61 + 92) = v29;
    *(_WORD *)(v61 + 94) = v30;
    *(_WORD *)(v61 + 96) = v31;
    *(_WORD *)(v61 + 98) = v32;
    *(_WORD *)(v61 + 100) = v74;
    *(_OWORD *)(v61 + 102) = v63;
    goto LABEL_98;
  }
  if ((v27 & 0x2000) != 0)
  {
    int v28 = *a4;
    long long v92 = 0u;
    long long __s = 0u;
    int v89 = v28;
    int v90 = 500;
    char v91 = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
    GTError_addError(a4, (uint64_t)&v89);
    goto LABEL_95;
  }
LABEL_47:
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  __int16 v74 = 0;
  while (2)
  {
    int v7 = (unsigned int *)((char *)v7 + *v7);
    unsigned int v33 = v7[1];
    if (a4)
    {
      if (v33 != -12272)
      {
        int v65 = *a4;
        long long v92 = 0u;
        long long __s = 0u;
        int v89 = v65;
        int v90 = 500;
        char v91 = "header->fenum == kDYFEInternalData";
        uint64_t v66 = &v89;
        goto LABEL_102;
      }
    }
    else if (v33 != -12272)
    {
      goto LABEL_96;
    }
    uint64_t v82 = 0;
    int v34 = FBDecoder_DecodeArguments((unsigned int *)&v82, (uint64_t)(v7 + 9), *v7 - 36, (uint64_t)&v89, 0xDuLL);
    if (a4)
    {
      if (v34)
      {
        int v67 = *a4;
        long long v80 = 0u;
        long long v81 = 0u;
        int v77 = v67;
        int v78 = 500;
        int v69 = "err == FBUF_SUCCESS";
        goto LABEL_101;
      }
      unsigned int v35 = HIDWORD(v82);
      if (HIDWORD(v82) <= 1)
      {
        int v68 = *a4;
        long long v80 = 0u;
        long long v81 = 0u;
        int v77 = v68;
        int v78 = 500;
        int v69 = "2 <= parser.ntokens";
        goto LABEL_101;
      }
    }
    else
    {
      unsigned int v35 = HIDWORD(v82);
      if (v34) {
        BOOL v36 = 0;
      }
      else {
        BOOL v36 = HIDWORD(v82) > 1;
      }
      if (!v36) {
        goto LABEL_96;
      }
    }
    int v37 = *(_DWORD *)v92;
    if (*(int *)v92 <= 106)
    {
      if (v37 == 105)
      {
        int v39 = v29;
        uint64_t v40 = v31;
        uint64_t v41 = v32;
        uint64_t v42 = v26;
        uint64_t v43 = v25;
        uint64_t v44 = v30;
        uint64_t v45 = (v39 + 1);
        int v7 = DecodeDYMTLBinding(v75 + 56 * (unsigned __int16)v39, v7, a2, a3, a4);
        uint64_t v46 = v45;
        uint64_t v30 = v44;
        uint64_t v25 = v43;
        uint64_t v26 = v42;
        uint64_t v32 = v41;
        uint64_t v31 = v40;
        uint64_t v29 = v46;
      }
      else if (v37 == 106)
      {
        unsigned __int16 v38 = v30;
        uint64_t v30 = (v30 + 1);
        int v7 = DecodeDYMTLBinding(v76 + 56 * v38, v7, a2, a3, a4);
      }
      goto LABEL_93;
    }
    if (v37 != 107)
    {
      if (v37 != 126) {
        goto LABEL_93;
      }
      if (a4)
      {
        if (v35 <= 3) {
          goto LABEL_100;
        }
      }
      else if (v35 < 4)
      {
        goto LABEL_96;
      }
      uint64_t v71 = v30;
      unsigned int v72 = v32;
      uint64_t v73 = v29;
      uint64_t v47 = v31;
      uint64_t v48 = (const void *)__s;
      if ((void)__s)
      {
        uint64_t v49 = a3;
        size_t v50 = strlen((const char *)__s);
        int v51 = (char *)a2[23];
        uint64_t v52 = v51;
        size_t v53 = v50 + 1;
        if (v50 != -1)
        {
LABEL_82:
          uint64_t v54 = v26;
          a2[23] = &v51[v53];
          if (v49) {
            memcpy(v52, v48, v53);
          }
          uint64_t v55 = v25;
          int v56 = v94;
          if (v94)
          {
            size_t v57 = strlen(v94);
            uint64_t v58 = (char *)a2[23];
            char v59 = v58;
            size_t v60 = v57 + 1;
            if (v57 != -1) {
              goto LABEL_89;
            }
          }
          else
          {
            size_t v60 = 0;
            uint64_t v58 = (char *)a2[23];
          }
          char v59 = 0;
LABEL_89:
          a2[23] = &v58[v60];
          if (v49)
          {
            memcpy(v59, v56, v60);
            *(void *)(v55 + 8 * (unsigned __int16)v47) = v52;
            *(void *)(v54 + 8 * (unsigned __int16)v47) = v59;
            uint64_t v25 = v55;
            uint64_t v26 = v54;
            uint64_t v31 = (v47 + 1);
            a3 = v49;
          }
          else
          {
            uint64_t v25 = v55;
            uint64_t v26 = v54;
            a3 = v49;
            uint64_t v31 = v47;
          }
          uint64_t v29 = v73;
          uint64_t v32 = v72;
          uint64_t v30 = v71;
LABEL_93:
          if ((*((unsigned char *)v7 + 33) & 0x20) != 0) {
            goto LABEL_96;
          }
          continue;
        }
      }
      else
      {
        uint64_t v49 = a3;
        size_t v53 = 0;
        int v51 = (char *)a2[23];
      }
      uint64_t v52 = 0;
      goto LABEL_82;
    }
    break;
  }
  if (!a4)
  {
    if (v35 < 4) {
      goto LABEL_96;
    }
    goto LABEL_79;
  }
  if (v35 > 3)
  {
LABEL_79:
    uint64_t v32 = *(unsigned __int16 *)__s;
    __int16 v74 = *(_WORD *)v94;
    goto LABEL_93;
  }
LABEL_100:
  int v70 = *a4;
  long long v80 = 0u;
  long long v81 = 0u;
  int v77 = v70;
  int v78 = 500;
  int v69 = "4 <= parser.ntokens";
LABEL_101:
  int v79 = v69;
  uint64_t v66 = &v77;
LABEL_102:
  GTError_addError(a4, (uint64_t)v66);
  if (a3) {
    goto LABEL_97;
  }
LABEL_98:
  uint64_t result = a2[11];
  a2[11] = result + 160;
  return result;
}

uint64_t DecodeDYMTLRenderPipelineReflection(unsigned int *a1, void *a2, unsigned int a3, int *a4)
{
  int v5 = a2;
  uint64_t v6 = a1;
  long long v104 = 0uLL;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  memset(__src, 0, sizeof(__src));
  unsigned int v7 = a1[8];
  if (a4)
  {
    if ((v7 & 0x1000) == 0)
    {
      int v8 = *a4;
      long long v119 = 0uLL;
      long long __s = 0uLL;
      int v116 = v8;
      int v117 = 500;
      char v118 = "header->flags & 0x00001000";
      GTError_addError(a4, (uint64_t)&v116);
LABEL_5:
      uint64_t v91 = 0;
      LOWORD(v9) = 0;
      unsigned __int16 v10 = 0;
      unsigned __int16 v11 = 0;
      unsigned __int16 v12 = 0;
      unsigned __int16 v13 = 0;
      unsigned __int16 v14 = 0;
      unsigned __int16 v15 = 0;
      uint64_t v16 = v5[14];
      goto LABEL_48;
    }
  }
  else if ((v7 & 0x1000) == 0)
  {
    goto LABEL_5;
  }
  unsigned __int16 v95 = 0;
  int v17 = 0;
  int v9 = 0;
  unsigned __int16 v97 = 0;
  unsigned __int16 v99 = 0;
  unsigned __int16 v11 = 0;
  unsigned __int16 v18 = 0;
  unsigned __int16 v13 = 0;
  unsigned __int16 v15 = 0;
  while (1)
  {
    int v19 = (unsigned int *)((char *)a1 + *a1);
    unsigned int v20 = v19[1];
    if (a4)
    {
      if (v20 != -12272)
      {
        int v26 = *a4;
        long long v119 = 0u;
        long long __s = 0u;
        int v116 = v26;
        int v117 = 500;
        char v118 = "header->fenum == kDYFEInternalData";
        unsigned int v27 = &v116;
        goto LABEL_43;
      }
    }
    else if (v20 != -12272)
    {
      goto LABEL_44;
    }
    uint64_t v110 = 0;
    int v21 = FBDecoder_DecodeArguments((unsigned int *)&v110, (uint64_t)(v19 + 9), *v19 - 36, (uint64_t)&v116, 0xDuLL);
    if (!a4)
    {
      if (v21) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = HIDWORD(v110) > 1;
      }
      if (!v22) {
        goto LABEL_44;
      }
      goto LABEL_20;
    }
    if (v21) {
      break;
    }
    if (HIDWORD(v110) <= 1)
    {
      int v29 = *a4;
      long long v108 = 0u;
      long long v109 = 0u;
      int v105 = v29;
      int v106 = 500;
      uint64_t v30 = "2 <= parser.ntokens";
      goto LABEL_42;
    }
LABEL_20:
    int v23 = *(_DWORD *)v119;
    if (*(int *)v119 <= 120)
    {
      if (v23 == 104) {
        int v24 = v9 + 1;
      }
      else {
        int v24 = v9;
      }
      if (v23 == 103) {
        int v25 = v17 + 1;
      }
      else {
        int v25 = v17;
      }
      if (v23 == 103) {
        int v24 = v9;
      }
      if (v23 == 102)
      {
        ++v18;
      }
      else
      {
        int v17 = v25;
        int v9 = v24;
      }
    }
    else
    {
      switch(v23)
      {
        case 121:
          ++v99;
          break;
        case 126:
          ++v15;
          break;
        case 130:
          ++v11;
          break;
        case 131:
          ++v95;
          break;
        case 133:
          ++v13;
          break;
        case 134:
          ++v97;
          break;
        default:
          break;
      }
    }
    a1 = InternalDataArgumentChainEnd(v19, a4);
    if ((*((unsigned char *)a1 + 33) & 0x20) != 0) {
      goto LABEL_44;
    }
  }
  int v28 = *a4;
  long long v108 = 0u;
  long long v109 = 0u;
  int v105 = v28;
  int v106 = 500;
  uint64_t v30 = "err == 0";
LABEL_42:
  unsigned int v107 = v30;
  unsigned int v27 = &v105;
LABEL_43:
  GTError_addError(a4, (uint64_t)v27);
LABEL_44:
  int v5 = a2;
  unsigned __int16 v12 = v95;
  if ((_WORD)v17) {
    uint64_t v31 = a2[14];
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v91 = v31;
  uint64_t v16 = a2[14] + 56 * (unsigned __int16)v17;
  uint64_t v101 = v16;
  unsigned __int16 v14 = v97;
  unsigned __int16 v10 = v99;
  if (!v18)
  {
LABEL_48:
    unsigned __int16 v18 = 0;
    uint64_t v101 = 0;
  }
  uint64_t v32 = v16 + 56 * v18;
  if (v11) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v34 = v32 + 56 * v11;
  if (v13) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = v34 + 56 * v13;
  if (v12) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v89 = v37;
  uint64_t v38 = v36 + 56 * v12;
  if (v14) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v88 = v39;
  uint64_t v40 = v38 + 56 * v14;
  if ((_WORD)v9) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v90 = v41;
  uint64_t v42 = v40 + 56 * (unsigned __int16)v9;
  if (v10) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v87 = v43;
  v5[14] = v42 + 56 * v10;
  if (v15) {
    uint64_t v44 = v5[22];
  }
  else {
    uint64_t v44 = 0;
  }
  if (v15) {
    uint64_t v45 = v5[22] + 8 * v15;
  }
  else {
    uint64_t v45 = 0;
  }
  uint64_t v84 = v45;
  uint64_t v85 = v44;
  v5[22] += 8 * v15 + 8 * v15;
  unsigned int v46 = v6[8];
  if ((v46 & 0x1000) == 0)
  {
    LOWORD(v47) = 0;
    unsigned __int16 v48 = 0;
    unsigned __int16 v98 = 0;
    unsigned __int16 v100 = 0;
    unsigned __int16 v94 = 0;
    unsigned __int16 v96 = 0;
    unsigned __int16 v49 = 0;
    unsigned __int16 v92 = 0;
    unsigned __int16 v86 = 0;
    if (!a3) {
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  if (!a4)
  {
    uint64_t v50 = a3;
    if ((v46 & 0x2000) == 0) {
      goto LABEL_80;
    }
LABEL_131:
    LOWORD(v47) = 0;
    unsigned __int16 v48 = 0;
    unsigned __int16 v98 = 0;
    unsigned __int16 v100 = 0;
    unsigned __int16 v94 = 0;
    unsigned __int16 v96 = 0;
    unsigned __int16 v49 = 0;
    unsigned __int16 v92 = 0;
    unsigned __int16 v86 = 0;
LABEL_132:
    if (!v50) {
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  uint64_t v50 = a3;
  if ((v46 & 0x2000) != 0)
  {
    int v51 = *a4;
    long long v119 = 0u;
    long long __s = 0u;
    int v116 = v51;
    int v117 = 500;
    char v118 = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
    GTError_addError(a4, (uint64_t)&v116);
    goto LABEL_131;
  }
LABEL_80:
  uint64_t v47 = 0;
  unsigned __int16 v48 = 0;
  unsigned __int16 v98 = 0;
  unsigned __int16 v100 = 0;
  unsigned __int16 v94 = 0;
  unsigned __int16 v96 = 0;
  unsigned __int16 v49 = 0;
  unsigned __int16 v92 = 0;
  unsigned __int16 v86 = 0;
  while (2)
  {
    uint64_t v6 = (unsigned int *)((char *)v6 + *v6);
    unsigned int v52 = v6[1];
    if (a4)
    {
      if (v52 != -12272)
      {
        int v76 = *a4;
        long long v119 = 0u;
        long long __s = 0u;
        int v116 = v76;
        int v117 = 500;
        char v118 = "header->fenum == kDYFEInternalData";
        int v77 = &v116;
        goto LABEL_137;
      }
    }
    else if (v52 != -12272)
    {
      goto LABEL_132;
    }
    uint64_t v110 = 0;
    int v53 = FBDecoder_DecodeArguments((unsigned int *)&v110, (uint64_t)(v6 + 9), *v6 - 36, (uint64_t)&v116, 0xDuLL);
    if (!a4)
    {
      unsigned int v54 = HIDWORD(v110);
      if (v53) {
        BOOL v55 = 0;
      }
      else {
        BOOL v55 = HIDWORD(v110) > 1;
      }
      if (!v55) {
        goto LABEL_132;
      }
LABEL_94:
      int v56 = *(_DWORD *)v119;
      if (*(int *)v119 <= 115)
      {
        switch(v56)
        {
          case 'f':
            uint64_t v6 = DecodeDYMTLBinding(v101 + 56 * v49++, v6, v5, v50, a4);
            break;
          case 'g':
            uint64_t v6 = DecodeDYMTLBinding(v91 + 56 * (unsigned __int16)v47, v6, v5, v50, a4);
            uint64_t v47 = (v47 + 1);
            break;
          case 'h':
            uint64_t v6 = DecodeDYMTLBinding(v90 + 56 * v48++, v6, v5, v50, a4);
            break;
          default:
LABEL_104:
            if (a4)
            {
              int v57 = *a4;
              long long v108 = 0uLL;
              long long v109 = 0uLL;
              int v105 = v57;
              int v106 = 500;
              unsigned int v107 = "0";
              GTError_addError(a4, (uint64_t)&v105);
            }
            break;
        }
      }
      else
      {
        switch(v56)
        {
          case 121:
            uint64_t v6 = DecodeDYMTLBinding(v87 + 56 * v100++, v6, v5, v50, a4);
            break;
          case 122:
          case 123:
          case 124:
          case 125:
          case 127:
          case 128:
          case 129:
          case 132:
            goto LABEL_104;
          case 126:
            if (a4)
            {
              if (v54 <= 3)
              {
                int v81 = *a4;
                long long v108 = 0u;
                long long v109 = 0u;
                int v105 = v81;
                int v106 = 500;
                long long v80 = "4 <= parser.ntokens";
                goto LABEL_136;
              }
            }
            else if (v54 < 4)
            {
              goto LABEL_132;
            }
            uint64_t v82 = v47;
            uint64_t v58 = (const void *)__s;
            if ((void)__s)
            {
              size_t v59 = strlen((const char *)__s);
              size_t v60 = v5;
              uint64_t v61 = (char *)v5[23];
              long long v62 = v61;
              size_t v63 = v59 + 1;
              if (v59 != -1) {
                goto LABEL_119;
              }
            }
            else
            {
              size_t v63 = 0;
              size_t v60 = v5;
              uint64_t v61 = (char *)v5[23];
            }
            long long v62 = 0;
LABEL_119:
            uint64_t v83 = v35;
            v60[23] = &v61[v63];
            if (v50) {
              memcpy(v62, v58, v63);
            }
            uint64_t v64 = v33;
            int v65 = v121;
            if (v121)
            {
              size_t v66 = strlen(v121);
              int v67 = (char *)v60[23];
              int v68 = v67;
              size_t v69 = v66 + 1;
              if (v66 != -1) {
                goto LABEL_126;
              }
            }
            else
            {
              size_t v69 = 0;
              int v67 = (char *)v60[23];
            }
            int v68 = 0;
LABEL_126:
            v60[23] = &v67[v69];
            if (v50)
            {
              memcpy(v68, v65, v69);
              *(void *)(v85 + 8 * v86) = v62;
              *(void *)(v84 + 8 * v86++) = v68;
            }
            int v5 = v60;
            uint64_t v33 = v64;
            uint64_t v47 = v82;
            uint64_t v35 = v83;
            break;
          case 130:
            uint64_t v6 = DecodeDYMTLBinding(v33 + 56 * v98++, v6, v5, v50, a4);
            break;
          case 131:
            uint64_t v6 = DecodeDYMTLBinding(v89 + 56 * v96++, v6, v5, v50, a4);
            break;
          case 133:
            uint64_t v6 = DecodeDYMTLBinding(v35 + 56 * v94++, v6, v5, v50, a4);
            break;
          case 134:
            uint64_t v6 = DecodeDYMTLBinding(v88 + 56 * v92++, v6, v5, v50, a4);
            break;
          default:
            if (v56 != 116) {
              goto LABEL_104;
            }
            break;
        }
      }
      if ((*((unsigned char *)v6 + 33) & 0x20) != 0) {
        goto LABEL_132;
      }
      continue;
    }
    break;
  }
  if (!v53)
  {
    unsigned int v54 = HIDWORD(v110);
    if (HIDWORD(v110) <= 1)
    {
      int v79 = *a4;
      long long v108 = 0u;
      long long v109 = 0u;
      int v105 = v79;
      int v106 = 500;
      long long v80 = "2 <= parser.ntokens";
      goto LABEL_136;
    }
    goto LABEL_94;
  }
  int v78 = *a4;
  long long v108 = 0u;
  long long v109 = 0u;
  int v105 = v78;
  int v106 = 500;
  long long v80 = "err == FBUF_SUCCESS";
LABEL_136:
  unsigned int v107 = v80;
  int v77 = &v105;
LABEL_137:
  GTError_addError(a4, (uint64_t)v77);
  if (v50)
  {
LABEL_133:
    uint64_t v70 = v5[12];
    *(void *)uint64_t v70 = -1;
    *(_OWORD *)(v70 + 8) = v104;
    *(void *)(v70 + 24) = v91;
    *(void *)(v70 + 32) = v90;
    *(void *)(v70 + 40) = v33;
    *(void *)(v70 + 48) = v89;
    *(void *)(v70 + 56) = v87;
    *(void *)(v70 + 64) = 0;
    *(void *)(v70 + 72) = v101;
    *(void *)(v70 + 80) = v35;
    *(void *)(v70 + 88) = v88;
    *(void *)(v70 + 96) = v85;
    *(void *)(v70 + 104) = v84;
    long long v71 = v112;
    *(_OWORD *)(v70 + 112) = v111;
    *(_OWORD *)(v70 + 128) = v71;
    long long v72 = v113;
    long long v73 = v114;
    long long v74 = *(_OWORD *)v115;
    *(void *)(v70 + 190) = *(void *)&v115[14];
    *(_OWORD *)(v70 + 160) = v73;
    *(_OWORD *)(v70 + 176) = v74;
    *(_OWORD *)(v70 + 144) = v72;
    *(_WORD *)(v70 + 198) = v47;
    *(_WORD *)(v70 + 200) = v48;
    *(_WORD *)(v70 + 202) = v100;
    *(_WORD *)(v70 + 204) = v98;
    *(_WORD *)(v70 + 206) = v96;
    *(_WORD *)(v70 + 208) = v49;
    *(_WORD *)(v70 + 210) = v94;
    *(_WORD *)(v70 + 212) = v92;
    *(_WORD *)(v70 + 214) = v86;
    memcpy((void *)(v70 + 216), __src, 0x118uLL);
  }
LABEL_134:
  uint64_t result = v5[12];
  v5[12] = result + 496;
  return result;
}

void DecodeDYMTLFunctionInfo(unsigned int *a1, void *a2, int a3, int *a4)
{
  memset(v54, 0, 7);
  unsigned int v4 = a1[8];
  if ((v4 & 0x1000) == 0) {
    return;
  }
  int v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      unsigned int v9 = *a4;
      *(_OWORD *)long long __s = 0u;
      *(_OWORD *)int v53 = 0u;
      *(void *)&long long v51 = v9 | 0x1F400000000;
      *((void *)&v51 + 1) = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v51);
      goto LABEL_62;
    }
    goto LABEL_6;
  }
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    char v10 = 0;
    char v11 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    unsigned __int16 v12 = 0;
    unsigned __int16 v49 = 0;
    __dst = 0;
    while (1)
    {
      int v8 = (unsigned int *)((char *)v8 + *v8);
      unsigned int v13 = v8[1];
      if (a4)
      {
        if (v13 != -12272)
        {
          unsigned int v44 = *a4;
          *(_OWORD *)long long __s = 0u;
          *(_OWORD *)int v53 = 0u;
          *(void *)&long long v51 = v44 | 0x1F400000000;
          *((void *)&v51 + 1) = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v51);
          if (!a3) {
            goto LABEL_65;
          }
LABEL_64:
          uint64_t v43 = a2[3];
          *(void *)uint64_t v43 = v49;
          *(void *)(v43 + 8) = __dst;
          *(void *)(v43 + 16) = v12;
          *(void *)(v43 + 24) = v45;
          *(void *)(v43 + 32) = v46;
          *(_WORD *)(v43 + 40) = WORD2(v47);
          *(_WORD *)(v43 + 42) = v47;
          *(_WORD *)(v43 + 44) = v48;
          *(unsigned char *)(v43 + 46) = v11;
          *(unsigned char *)(v43 + 47) = v10;
          *(unsigned char *)(v43 + 48) = BYTE4(v48);
          *(_DWORD *)(v43 + 49) = v54[0];
          *(_DWORD *)(v43 + 52) = *(_DWORD *)((char *)v54 + 3);
          goto LABEL_65;
        }
      }
      else if (v13 != -12272)
      {
        goto LABEL_63;
      }
      *(_OWORD *)long long __s = 0u;
      *(_OWORD *)int v53 = 0u;
      long long v51 = 0u;
      DYTraceDecode_InternalData((uint64_t)&v51, (uint64_t)v8, *v8 - 36, 0);
      if (SDWORD2(v51) <= 109) {
        break;
      }
      switch(DWORD2(v51))
      {
        case 'n':
          LOWORD(v48) = __s[1];
          BYTE4(v48) = __s[0];
          break;
        case 'x':
          if (!v10) {
            uint64_t v46 = a2[21];
          }
          int v23 = v53[0];
          if (v53[0])
          {
            size_t v24 = strlen(v53[0]);
            int v25 = (char *)a2[23];
            int v26 = v25;
            size_t v27 = v24 + 1;
            if (v24 != -1) {
              goto LABEL_45;
            }
          }
          else
          {
            size_t v27 = 0;
            int v25 = (char *)a2[23];
          }
          int v26 = 0;
LABEL_45:
          a2[23] = &v25[v27];
          if (a3)
          {
            memcpy(v26, v23, v27);
            uint64_t v37 = a2[21];
            int v38 = (int)__s[0];
            char v39 = (char)__s[1];
            char v40 = (char)v53[1];
            *(void *)uint64_t v37 = v26;
            *(_DWORD *)(v37 + 8) = v38;
            *(unsigned char *)(v37 + 12) = v39;
            *(unsigned char *)(v37 + 13) = v40;
            *(_WORD *)(v37 + 14) = 0;
          }
          ++v10;
          a2[21] += 16;
          break;
        case 'u':
          unsigned __int16 v14 = __s[0];
          if (__s[0])
          {
            size_t v15 = strlen(__s[0]);
            uint64_t v16 = (char *)a2[23];
            unsigned __int16 v49 = v16;
            size_t v17 = v15 + 1;
            if (v15 != -1)
            {
LABEL_36:
              a2[23] = &v16[v17];
              if (a3)
              {
                uint64_t v32 = v49;
LABEL_59:
                memcpy(v32, v14, v17);
                break;
              }
              break;
            }
          }
          else
          {
            size_t v17 = 0;
            uint64_t v16 = (char *)a2[23];
          }
          unsigned __int16 v49 = 0;
          goto LABEL_36;
      }
LABEL_60:
      if ((*((unsigned char *)v8 + 33) & 0x20) != 0) {
        goto LABEL_63;
      }
    }
    if (DWORD2(v51) != 101)
    {
      if (DWORD2(v51) == 109)
      {
        if (!v11) {
          uint64_t v45 = a2[20];
        }
        unsigned __int16 v18 = v53[0];
        if (v53[0])
        {
          size_t v19 = strlen(v53[0]);
          unsigned int v20 = (char *)a2[23];
          int v21 = v20;
          size_t v22 = v19 + 1;
          if (v19 != -1) {
            goto LABEL_40;
          }
        }
        else
        {
          size_t v22 = 0;
          unsigned int v20 = (char *)a2[23];
        }
        int v21 = 0;
LABEL_40:
        a2[23] = &v20[v22];
        if (a3)
        {
          memcpy(v21, v18, v22);
          uint64_t v33 = a2[20];
          int v34 = (int)__s[0];
          char v35 = (char)__s[1];
          char v36 = (char)v53[1];
          *(void *)uint64_t v33 = v21;
          *(_DWORD *)(v33 + 8) = v34;
          *(unsigned char *)(v33 + 12) = v35;
          *(unsigned char *)(v33 + 13) = v36;
          *(_WORD *)(v33 + 14) = 0;
        }
        ++v11;
        a2[20] += 16;
        goto LABEL_60;
      }
      goto LABEL_60;
    }
    int v28 = v53[0];
    WORD2(v47) = __s[0];
    if (v53[0])
    {
      size_t v29 = strlen(v53[0]);
      uint64_t v30 = (char *)a2[23];
      __dst = v30;
      size_t v31 = v29 + 1;
      if (v29 != -1)
      {
LABEL_50:
        a2[23] = &v30[v31];
        if (a3) {
          memcpy(__dst, v28, v31);
        }
        unsigned __int16 v14 = v53[1];
        LOWORD(v47) = __s[1];
        if (v53[1])
        {
          size_t v41 = strlen(v53[1]);
          uint64_t v42 = (char *)a2[23];
          unsigned __int16 v12 = v42;
          size_t v17 = v41 + 1;
          if (v41 != -1)
          {
LABEL_57:
            a2[23] = &v42[v17];
            if (a3)
            {
              uint64_t v32 = v12;
              goto LABEL_59;
            }
            goto LABEL_60;
          }
        }
        else
        {
          size_t v17 = 0;
          uint64_t v42 = (char *)a2[23];
        }
        unsigned __int16 v12 = 0;
        goto LABEL_57;
      }
    }
    else
    {
      size_t v31 = 0;
      uint64_t v30 = (char *)a2[23];
    }
    __dst = 0;
    goto LABEL_50;
  }
LABEL_62:
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  char v10 = 0;
  char v11 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unsigned __int16 v12 = 0;
  unsigned __int16 v49 = 0;
  __dst = 0;
LABEL_63:
  if (a3) {
    goto LABEL_64;
  }
LABEL_65:
  a2[3] += 56;
}

void DecodeDYMTLDynamicLibraryInfo(unsigned int *a1, void *a2, int a3, int *a4)
{
  __int16 v36 = 0;
  int v35 = 0;
  unsigned int v4 = a1[8];
  if ((v4 & 0x1000) == 0) {
    return;
  }
  int v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      unsigned int v9 = *a4;
      *(_OWORD *)long long __s = 0u;
      long long v34 = 0u;
      *(void *)&long long v32 = v9 | 0x1F400000000;
      *((void *)&v32 + 1) = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v32);
      goto LABEL_43;
    }
    goto LABEL_6;
  }
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    __int16 v10 = 0;
    uint64_t v31 = 0;
    char v11 = 0;
    unsigned __int16 v12 = 0;
    while (1)
    {
      int v8 = (unsigned int *)((char *)v8 + *v8);
      unsigned int v13 = v8[1];
      if (a4)
      {
        if (v13 != -12272)
        {
          unsigned int v30 = *a4;
          *(_OWORD *)long long __s = 0u;
          long long v34 = 0u;
          *(void *)&long long v32 = v30 | 0x1F400000000;
          *((void *)&v32 + 1) = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v32);
          if (!a3) {
            goto LABEL_46;
          }
LABEL_45:
          uint64_t v29 = a2[2];
          *(void *)uint64_t v29 = v12;
          *(void *)(v29 + 8) = v11;
          *(void *)(v29 + 16) = v31;
          *(_WORD *)(v29 + 24) = v10;
          *(_DWORD *)(v29 + 26) = v35;
          *(_WORD *)(v29 + 30) = v36;
          goto LABEL_46;
        }
        *(_OWORD *)long long __s = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
        unint64_t v14 = *v8 - 36;
        uint64_t v15 = (uint64_t)v8;
        uint64_t v16 = a4;
      }
      else
      {
        if (v13 != -12272) {
          goto LABEL_44;
        }
        *(_OWORD *)long long __s = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
        unint64_t v14 = *v8 - 36;
        uint64_t v15 = (uint64_t)v8;
        uint64_t v16 = 0;
      }
      DYTraceDecode_InternalData((uint64_t)&v32, v15, v14, v16);
      if (DWORD2(v32) == 129)
      {
        if (!v10) {
          uint64_t v31 = a2[22];
        }
        int v21 = __s[0];
        if (__s[0])
        {
          size_t v22 = strlen(__s[0]);
          int v23 = (char *)a2[23];
          size_t v24 = v23;
          size_t v25 = v22 + 1;
          if (v22 != -1) {
            goto LABEL_33;
          }
        }
        else
        {
          size_t v25 = 0;
          int v23 = (char *)a2[23];
        }
        size_t v24 = 0;
LABEL_33:
        a2[23] = &v23[v25];
        if (a3)
        {
          memcpy(v24, v21, v25);
          *(void *)a2[22] = v24;
        }
        ++v10;
        a2[22] += 8;
        goto LABEL_41;
      }
      if (DWORD2(v32) != 128)
      {
        if (DWORD2(v32) != 127) {
          goto LABEL_41;
        }
        size_t v17 = __s[0];
        if (__s[0])
        {
          size_t v18 = strlen(__s[0]);
          size_t v19 = (char *)a2[23];
          char v11 = v19;
          size_t v20 = v18 + 1;
          if (v18 != -1)
          {
LABEL_29:
            a2[23] = &v19[v20];
            if (a3)
            {
              int v28 = v11;
LABEL_40:
              memcpy(v28, v17, v20);
              goto LABEL_41;
            }
            goto LABEL_41;
          }
        }
        else
        {
          size_t v20 = 0;
          size_t v19 = (char *)a2[23];
        }
        char v11 = 0;
        goto LABEL_29;
      }
      size_t v17 = __s[0];
      if (!__s[0]) {
        break;
      }
      size_t v26 = strlen(__s[0]);
      size_t v27 = (char *)a2[23];
      unsigned __int16 v12 = v27;
      size_t v20 = v26 + 1;
      if (v26 == -1) {
        goto LABEL_37;
      }
LABEL_38:
      a2[23] = &v27[v20];
      if (a3)
      {
        int v28 = v12;
        goto LABEL_40;
      }
LABEL_41:
      if ((*((unsigned char *)v8 + 33) & 0x20) != 0) {
        goto LABEL_44;
      }
    }
    size_t v20 = 0;
    size_t v27 = (char *)a2[23];
LABEL_37:
    unsigned __int16 v12 = 0;
    goto LABEL_38;
  }
LABEL_43:
  __int16 v10 = 0;
  uint64_t v31 = 0;
  char v11 = 0;
  unsigned __int16 v12 = 0;
LABEL_44:
  if (a3) {
    goto LABEL_45;
  }
LABEL_46:
  a2[2] += 32;
}

uint64_t DecodeDYMTLLibraryInfo(unsigned int *a1, uint64_t a2, int a3, int *a4)
{
  long long v27 = 0uLL;
  unsigned int v4 = a1[8];
  if ((v4 & 0x1000) == 0) {
    return 0;
  }
  unsigned int v9 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      unsigned int v10 = *a4;
      *(_OWORD *)long long __s = 0u;
      long long v26 = 0u;
      *(void *)&long long v24 = v10 | 0x1F400000000;
      *((void *)&v24 + 1) = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v24);
      goto LABEL_27;
    }
    goto LABEL_7;
  }
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    uint64_t v5 = 0;
    char v11 = 0;
    while (1)
    {
      unsigned int v9 = (unsigned int *)((char *)v9 + *v9);
      unsigned int v12 = v9[1];
      if (a4)
      {
        if (v12 != -12272)
        {
          unsigned int v23 = *a4;
          *(_OWORD *)long long __s = 0u;
          long long v26 = 0u;
          *(void *)&long long v24 = v23 | 0x1F400000000;
          *((void *)&v24 + 1) = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v24);
          if (!a3) {
            goto LABEL_30;
          }
LABEL_29:
          uint64_t v21 = *(void *)(a2 + 48);
          *(void *)uint64_t v21 = v11;
          *(_OWORD *)(v21 + 8) = v27;
          goto LABEL_30;
        }
        *(_OWORD *)long long __s = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        unint64_t v13 = *v9 - 36;
        uint64_t v14 = (uint64_t)v9;
        uint64_t v15 = a4;
      }
      else
      {
        if (v12 != -12272) {
          goto LABEL_28;
        }
        *(_OWORD *)long long __s = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        unint64_t v13 = *v9 - 36;
        uint64_t v14 = (uint64_t)v9;
        uint64_t v15 = 0;
      }
      DYTraceDecode_InternalData((uint64_t)&v24, v14, v13, v15);
      uint64_t v16 = DWORD2(v24);
      if (DWORD2(v24) == 127) {
        break;
      }
      if (DWORD2(v24) == 108)
      {
        size_t v17 = __s[1];
        if (__s[1]) {
          goto LABEL_17;
        }
LABEL_20:
        size_t v20 = 0;
        size_t v17 = 0;
        size_t v19 = *(char **)(a2 + 184);
        goto LABEL_21;
      }
LABEL_25:
      if ((*((unsigned char *)v9 + 33) & 0x20) != 0) {
        goto LABEL_28;
      }
    }
    size_t v17 = __s[0];
    if (!__s[0]) {
      goto LABEL_20;
    }
LABEL_17:
    size_t v18 = strlen(v17);
    size_t v19 = *(char **)(a2 + 184);
    char v11 = v19;
    size_t v20 = v18 + 1;
    if (v18 == -1) {
LABEL_21:
    }
      char v11 = 0;
    *(void *)(a2 + 184) = &v19[v20];
    if (a3)
    {
      memcpy(v11, v17, v20);
      uint64_t v5 = DWORD2(v24);
    }
    else
    {
      uint64_t v5 = v16;
    }
    goto LABEL_25;
  }
LABEL_27:
  uint64_t v5 = 0;
  char v11 = 0;
LABEL_28:
  if (a3) {
    goto LABEL_29;
  }
LABEL_30:
  *(void *)(a2 + 48) += 24;
  return v5;
}

void DecodeDYMTLPipelineLibraryInfo(unsigned int *a1, void *a2, int a3, int *a4)
{
  __int16 v55 = 0;
  int v54 = 0;
  unsigned int v4 = a1[8];
  if ((v4 & 0x1000) == 0) {
    return;
  }
  int v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      unsigned int v9 = *a4;
      *(_OWORD *)long long __s = 0u;
      long long v53 = 0u;
      newpool[0] = (apr_pool_t *)(v9 | 0x1F400000000);
      newpool[1] = (apr_pool_t *)"!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)newpool);
LABEL_41:
      unsigned __int16 v10 = 0;
      char v11 = 0;
      uint64_t v50 = 0;
      unsigned int v12 = 0;
LABEL_42:
      if (a3) {
        goto LABEL_43;
      }
      goto LABEL_55;
    }
  }
  else if ((v4 & 0x2000) != 0)
  {
    goto LABEL_41;
  }
  unsigned __int16 v10 = 0;
  char v11 = 0;
  uint64_t v50 = 0;
  unsigned int v12 = 0;
  while (1)
  {
    int v8 = (unsigned int *)((char *)v8 + *v8);
    unsigned int v13 = v8[1];
    if (a4) {
      break;
    }
    if (v13 != -12272) {
      goto LABEL_42;
    }
    *(_OWORD *)long long __s = 0u;
    long long v53 = 0u;
    *(_OWORD *)newpool = 0u;
    unint64_t v14 = *v8 - 36;
    uint64_t v15 = (uint64_t)v8;
    uint64_t v16 = 0;
LABEL_13:
    DYTraceDecode_InternalData((uint64_t)newpool, v15, v14, v16);
    if (LODWORD(newpool[1]) == 135)
    {
      if (!v10)
      {
        uint64_t v50 = (void *)a2[22];
        char v11 = v50 + 1;
      }
      uint64_t v21 = __s[0];
      if (__s[0])
      {
        size_t v22 = strlen(__s[0]);
        unsigned int v23 = (char *)a2[23];
        long long v24 = v23;
        size_t v25 = v22 + 1;
        if (v22 != -1)
        {
LABEL_29:
          a2[23] = &v23[v25];
          if (a3) {
            memcpy(v24, v21, v25);
          }
          long long v26 = __s[1];
          if (__s[1])
          {
            size_t v27 = strlen(__s[1]);
            int v28 = (char *)a2[23];
            uint64_t v29 = v28;
            size_t v30 = v27 + 1;
            if (v27 != -1) {
              goto LABEL_36;
            }
          }
          else
          {
            size_t v30 = 0;
            int v28 = (char *)a2[23];
          }
          uint64_t v29 = 0;
LABEL_36:
          a2[23] = &v28[v30];
          if (a3)
          {
            memcpy(v29, v26, v30);
            *(void *)a2[22] = v24;
            *(void *)(a2[22] + 8) = v29;
          }
          ++v10;
          a2[22] += 16;
          goto LABEL_39;
        }
      }
      else
      {
        size_t v25 = 0;
        unsigned int v23 = (char *)a2[23];
      }
      long long v24 = 0;
      goto LABEL_29;
    }
    if (LODWORD(newpool[1]) == 132)
    {
      size_t v17 = __s[0];
      if (__s[0])
      {
        size_t v18 = strlen(__s[0]);
        size_t v19 = (char *)a2[23];
        unsigned int v12 = v19;
        size_t v20 = v18 + 1;
        if (v18 != -1)
        {
LABEL_25:
          a2[23] = &v19[v20];
          if (a3) {
            memcpy(v12, v17, v20);
          }
          goto LABEL_39;
        }
      }
      else
      {
        size_t v20 = 0;
        size_t v19 = (char *)a2[23];
      }
      unsigned int v12 = 0;
      goto LABEL_25;
    }
LABEL_39:
    if ((*((unsigned char *)v8 + 33) & 0x20) != 0) {
      goto LABEL_42;
    }
  }
  if (v13 == -12272)
  {
    *(_OWORD *)long long __s = 0u;
    long long v53 = 0u;
    *(_OWORD *)newpool = 0u;
    unint64_t v14 = *v8 - 36;
    uint64_t v15 = (uint64_t)v8;
    uint64_t v16 = a4;
    goto LABEL_13;
  }
  unsigned int v49 = *a4;
  *(_OWORD *)long long __s = 0u;
  long long v53 = 0u;
  newpool[0] = (apr_pool_t *)(v49 | 0x1F400000000);
  newpool[1] = (apr_pool_t *)"header->fenum == kDYFEInternalData";
  GTError_addError(a4, (uint64_t)newpool);
  if (!a3) {
    goto LABEL_55;
  }
LABEL_43:
  if (v10)
  {
    newpool[0] = 0;
    apr_pool_create_ex(newpool, 0, 0, (apr_allocator_t *)a4);
    uint64_t v31 = v10;
    long long v32 = apr_palloc(newpool[0], 16 * v10);
    uint64_t v33 = v50;
    long long v34 = v50;
    int v35 = v32;
    uint64_t v36 = v10;
    do
    {
      uint64_t v37 = *v34;
      v34 += 2;
      *v35++ = v37;
      --v36;
    }
    while (v36);
    int v38 = &v32[v10];
    uint64_t v39 = v10;
    do
    {
      uint64_t v40 = *v11;
      v11 += 2;
      *v38++ = v40;
      --v39;
    }
    while (v39);
    size_t v41 = v32;
    uint64_t v42 = v50;
    uint64_t v43 = v10;
    do
    {
      uint64_t v44 = *v41++;
      *v42++ = v44;
      --v43;
    }
    while (v43);
    char v11 = &v50[v10];
    uint64_t v45 = &v32[v10];
    uint64_t v46 = v11;
    do
    {
      uint64_t v47 = *v45++;
      *v46++ = v47;
      --v31;
    }
    while (v31);
    apr_pool_destroy(newpool[0]);
  }
  else
  {
    uint64_t v33 = v50;
  }
  uint64_t v48 = a2[7];
  *(void *)uint64_t v48 = v12;
  *(void *)(v48 + 8) = v33;
  *(void *)(v48 + 16) = v11;
  *(_WORD *)(v48 + 24) = v10;
  *(_DWORD *)(v48 + 26) = v54;
  *(_WORD *)(v48 + 30) = v55;
LABEL_55:
  a2[7] += 32;
}

void *DecodeDYMTLRenderPassDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  memcpy(__dst, &GTMTLRenderPassDescriptorDefaults, 0x338uLL);
  int v8 = a4;
  uint64_t result = a5;
  unsigned int v10 = *(_DWORD *)a1;
  char v11 = (uint64_t *)(a1 + 16);
  __dst[99] = *(void *)(a1 + 8);
  uint64_t v108 = (uint64_t)result;
  unsigned int v88 = v10;
  int v89 = a4;
  while (1)
  {
    unsigned int v12 = v11;
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    char v15 = *((unsigned char *)v11 + 16);
    __int16 v16 = *((unsigned __int8 *)v11 + 24);
    __int16 v17 = *((unsigned __int8 *)v11 + 32);
    uint64_t v18 = v11[5];
    char v19 = *((unsigned char *)v11 + 48);
    __int16 v20 = *((_WORD *)v11 + 28);
    if (*v11 == -1) {
      break;
    }
    if (v10 <= 0x12)
    {
      char v21 = 0;
      char v24 = 0;
      long long v22 = *(_OWORD *)(v11 + 11);
      long long v23 = *(_OWORD *)(v11 + 13);
      v11 += 15;
      if (v8)
      {
LABEL_10:
        __int16 v25 = *((_WORD *)v12 + 32);
        char v26 = *((unsigned char *)v12 + 72);
        char v27 = *((unsigned char *)v12 + 80);
        if (result)
        {
          char v90 = *((unsigned char *)v12 + 72);
          char v91 = *((unsigned char *)v12 + 80);
          char v92 = v24;
          char v96 = v21;
          long long v100 = v23;
          long long v104 = v22;
          AliasStream2 = (uint64_t *)GetAliasStream2((uint64_t)result, v14);
          if (AliasStream2) {
            uint64_t v14 = *AliasStream2;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v29 = (uint64_t *)GetAliasStream2(v108, v18);
          if (v29) {
            uint64_t v18 = *v29;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t result = (void *)v108;
          unsigned int v10 = v88;
          int v8 = v89;
          long long v23 = v100;
          long long v22 = v104;
          char v24 = v92;
          char v21 = v96;
          char v26 = v90;
          char v27 = v91;
        }
        size_t v30 = &__dst[8 * v13];
        *size_t v30 = v18;
        v30[1] = v14;
        *((_WORD *)v30 + 8) = v17;
        *((_WORD *)v30 + 9) = v25;
        *((_WORD *)v30 + 10) = v20;
        *((_WORD *)v30 + 11) = v16;
        *((unsigned char *)v30 + 24) = v15;
        *((unsigned char *)v30 + 25) = v26;
        *((unsigned char *)v30 + 26) = v19;
        *((unsigned char *)v30 + 27) = v27;
        *((unsigned char *)v30 + 28) = v21;
        *((unsigned char *)v30 + 29) = v24;
        *((_WORD *)v30 + 15) = 0;
        *((_OWORD *)v30 + 2) = v22;
        *((_OWORD *)v30 + 3) = v23;
      }
    }
    else
    {
      char v21 = *((unsigned char *)v11 + 88);
      long long v22 = *((_OWORD *)v11 + 6);
      long long v23 = *((_OWORD *)v11 + 7);
      if (v10 < 0x27)
      {
        char v24 = 0;
        v11 += 16;
        if (v8) {
          goto LABEL_10;
        }
      }
      else
      {
        v11 += 17;
        char v24 = *((unsigned char *)v12 + 128);
        if (v8) {
          goto LABEL_10;
        }
      }
    }
  }
  if (v10 >= 0x13)
  {
    char v31 = *((unsigned char *)v11 + 88);
    uint64_t v32 = v11[12];
    if (v10 < 0x27)
    {
      char v34 = 0;
      uint64_t v33 = v11 + 16;
    }
    else
    {
      uint64_t v33 = v11 + 17;
      char v34 = *((unsigned char *)v11 + 128);
    }
    goto LABEL_26;
  }
  char v34 = 0;
  char v31 = 0;
  char v35 = 0;
  uint64_t v32 = v12[11];
  uint64_t v33 = v12 + 15;
  if (v10 >= 5)
  {
LABEL_26:
    uint64_t v36 = *v33++;
    char v37 = v36;
    if (v36 == 255) {
      char v35 = 0;
    }
    else {
      char v35 = v37;
    }
    if (v8) {
      goto LABEL_30;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_39;
    }
LABEL_30:
    __int16 v38 = *((_WORD *)v12 + 32);
    char v39 = *((unsigned char *)v12 + 72);
    char v40 = *((unsigned char *)v12 + 80);
    if (result)
    {
      char v93 = *((unsigned char *)v12 + 80);
      char v97 = v34;
      char v101 = v31;
      int v105 = v33;
      size_t v41 = (uint64_t *)GetAliasStream2((uint64_t)result, v14);
      if (v41) {
        uint64_t v14 = *v41;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v42 = (uint64_t *)GetAliasStream2(v108, v18);
      if (v42) {
        uint64_t v18 = *v42;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t result = (void *)v108;
      unsigned int v10 = v88;
      int v8 = v89;
      uint64_t v33 = v105;
      char v34 = v97;
      char v31 = v101;
      char v40 = v93;
    }
    __dst[84] = v18;
    __dst[85] = v14;
    LOWORD(__dst[86]) = v17;
    WORD1(__dst[86]) = v38;
    WORD2(__dst[86]) = v20;
    HIWORD(__dst[86]) = v16;
    LOBYTE(__dst[87]) = v15;
    BYTE1(__dst[87]) = v39;
    BYTE2(__dst[87]) = v19;
    BYTE3(__dst[87]) = v40;
    BYTE4(__dst[87]) = v31;
    BYTE5(__dst[87]) = v34;
    HIWORD(__dst[87]) = 0;
    __dst[88] = v32;
    LOBYTE(__dst[89]) = v35;
    *(_DWORD *)((char *)&__dst[89] + 1) = 0;
    HIDWORD(__dst[89]) = 0;
  }
LABEL_39:
  if (v10 <= 0x12)
  {
    char v43 = 0;
    char v46 = 0;
    double v44 = *((double *)v33 + 10);
    uint64_t v45 = (unsigned __int16 *)(v33 + 14);
    if (v8) {
      goto LABEL_46;
    }
  }
  else
  {
    char v43 = *((unsigned char *)v33 + 80);
    double v44 = *((double *)v33 + 11);
    if (v10 < 0x27)
    {
      char v46 = 0;
      uint64_t v45 = (unsigned __int16 *)(v33 + 15);
      if (!v8) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v45 = (unsigned __int16 *)(v33 + 16);
      char v46 = *((unsigned char *)v33 + 120);
      if (!v8) {
        goto LABEL_55;
      }
    }
LABEL_46:
    uint64_t v47 = *v33;
    uint64_t v48 = v33[4];
    char v49 = *((unsigned char *)v33 + 8);
    __int16 v50 = *((unsigned __int8 *)v33 + 16);
    __int16 v51 = *((unsigned __int8 *)v33 + 24);
    char v52 = *((unsigned char *)v33 + 40);
    __int16 v53 = *((unsigned __int8 *)v33 + 48);
    __int16 v54 = *((unsigned __int8 *)v33 + 56);
    char v55 = *((unsigned char *)v33 + 64);
    char v56 = *((unsigned char *)v33 + 72);
    unsigned int v57 = v44;
    if (result)
    {
      unsigned int v94 = v44;
      char v98 = v49;
      char v102 = v46;
      char v106 = v43;
      uint64_t v58 = (uint64_t *)GetAliasStream2((uint64_t)result, v47);
      if (v58) {
        uint64_t v47 = *v58;
      }
      else {
        uint64_t v47 = 0;
      }
      size_t v59 = (uint64_t *)GetAliasStream2(v108, v48);
      if (v59) {
        uint64_t v48 = *v59;
      }
      else {
        uint64_t v48 = 0;
      }
      uint64_t result = (void *)v108;
      unsigned int v10 = v88;
      int v8 = v89;
      char v43 = v106;
      char v49 = v98;
      char v46 = v102;
      unsigned int v57 = v94;
    }
    __dst[90] = v48;
    __dst[91] = v47;
    LOWORD(__dst[92]) = v51;
    WORD1(__dst[92]) = v54;
    WORD2(__dst[92]) = v53;
    HIWORD(__dst[92]) = v50;
    LOBYTE(__dst[93]) = v49;
    BYTE1(__dst[93]) = v55;
    BYTE2(__dst[93]) = v52;
    BYTE3(__dst[93]) = v56;
    BYTE4(__dst[93]) = v43;
    BYTE5(__dst[93]) = v46;
    HIWORD(__dst[93]) = 0;
    __dst[94] = v57;
  }
LABEL_55:
  if (v10 >= 7)
  {
    int v60 = *v45;
    HIWORD(__dst[100]) = *v45;
    if (v10 < 0xD)
    {
      int v67 = 0;
      int v66 = 0;
      int v65 = 0;
      int v64 = 0;
      int v63 = 0;
      int v62 = 0;
      int v61 = 0;
    }
    else
    {
      int v61 = v45[4];
      WORD2(__dst[100]) = v45[4];
      int v62 = *((_DWORD *)v45 + 4);
      LODWORD(__dst[100]) = v62;
      int v63 = v45[12];
      HIWORD(__dst[101]) = v45[12];
      int v64 = v45[16];
      WORD2(__dst[101]) = v45[16];
      int v65 = v45[20];
      WORD1(__dst[101]) = v45[20];
      int v66 = v45[24];
      LOWORD(__dst[101]) = v45[24];
      int v67 = *((unsigned __int8 *)v45 + 56);
      LOBYTE(__dst[102]) = *((unsigned char *)v45 + 56);
      if (v10 != 13)
      {
        uint64_t v68 = *((void *)v45 + 8);
        size_t v69 = v45 + 36;
        uint64_t v70 = *(_DWORD **)(a3 + 408);
        __dst[95] = v70;
        __dst[96] = (int)v68;
        if (v68 << 32)
        {
          unint64_t v71 = 2 * (int)v68;
          if (v71 <= 1) {
            unint64_t v71 = 1;
          }
          long long v72 = v70;
          do
          {
            if (v8) {
              _DWORD *v72 = *(_DWORD *)v69;
            }
            v69 += 4;
            ++v72;
            --v71;
          }
          while (v71);
        }
        *(void *)(a3 + 408) = &v70[2 * v68];
        if (v10 >= 0x14)
        {
          BYTE4(__dst[94]) = *(void *)v69;
          if (v10 >= 0x18)
          {
            BYTE2(__dst[102]) = *((void *)v69 + 1);
            if (v10 >= 0x21)
            {
              __dst[98] = *((void *)v69 + 2);
              if (v10 >= 0x27)
              {
                BYTE1(__dst[102]) = *((void *)v69 + 3);
                if (v10 >= 0x2A)
                {
                  __dst[97] = *((void *)v69 + 4);
                  BYTE3(__dst[102]) = *((void *)v69 + 5);
                  if (v10 >= 0x32)
                  {
                    int v95 = v66;
                    int v99 = v67;
                    for (unint64_t i = (uint64_t *)(v69 + 44); ; i += 6)
                    {
                      uint64_t v74 = *(i - 5);
                      if (v74 == -1) {
                        break;
                      }
                      if (v8)
                      {
                        uint64_t v75 = *(i - 4);
                        uint64_t v76 = *(i - 3);
                        uint64_t v78 = *(i - 2);
                        uint64_t v77 = *(i - 1);
                        uint64_t v79 = *i;
                        if (result)
                        {
                          uint64_t v103 = *(i - 1);
                          uint64_t v107 = *(i - 3);
                          long long v80 = (uint64_t *)GetAliasStream2((uint64_t)result, v75);
                          if (v80) {
                            uint64_t v75 = *v80;
                          }
                          else {
                            uint64_t v75 = 0;
                          }
                          uint64_t result = (void *)v108;
                          unsigned int v10 = v88;
                          int v8 = v89;
                          uint64_t v76 = v107;
                          uint64_t v77 = v103;
                        }
                        int v81 = &__dst[5 * v74 + 64];
                        *int v81 = v79;
                        v81[1] = v78;
                        v81[2] = v75;
                        v81[3] = v77;
                        v81[4] = v76;
                      }
                    }
                    int v66 = v95;
                    int v67 = v99;
                    if (v10 >= 0x43) {
                      BYTE4(__dst[102]) = *(i - 4);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v60 == 0xFFFF) {
      HIWORD(__dst[100]) = 0;
    }
    if (v61 == 0xFFFF) {
      WORD2(__dst[100]) = 0;
    }
    if (v62 == -1) {
      LODWORD(__dst[100]) = 0;
    }
    if (v63 == 0xFFFF) {
      HIWORD(__dst[101]) = 0;
    }
    if (v64 == 0xFFFF) {
      WORD2(__dst[101]) = 0;
    }
    if (v65 == 0xFFFF) {
      WORD1(__dst[101]) = 0;
    }
    if (v66 == 0xFFFF) {
      LOWORD(__dst[101]) = 0;
    }
    if (v67 == 255) {
      LOBYTE(__dst[102]) = 0;
    }
  }
  uint64_t v82 = *(char **)(a3 + 240);
  *(void *)(a3 + 240) = v82 + 824;
  if (v8)
  {
    if (!result)
    {
      uint64_t v85 = &__dst[98];
      goto LABEL_105;
    }
    uint64_t v83 = (uint64_t *)GetAliasStream2((uint64_t)result, __dst[99]);
    if (v83) {
      uint64_t v84 = *v83;
    }
    else {
      uint64_t v84 = 0;
    }
    __dst[99] = v84;
    uint64_t v85 = (uint64_t *)GetAliasStream2(v108, __dst[98]);
    if (v85) {
LABEL_105:
    }
      uint64_t v86 = *v85;
    else {
      uint64_t v86 = 0;
    }
    __dst[98] = v86;
    return memcpy(v82, __dst, 0x338uLL);
  }
  return result;
}

size_t DecodeDYMTLRenderPipelineDescriptor(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  v102[1] = a2;
  memcpy(v101, &GTMTLRenderPipelineDescriptorDefaults, sizeof(v101));
  unsigned int v9 = *(_DWORD *)a1;
  v101[162] = *(void *)(a1 + 8);
  v101[147] = *(void *)(a1 + 16);
  bzero(__src, 0x2E8uLL);
  if (v9 < 0x1A)
  {
    char v11 = (uint64_t *)(a1 + 24);
    uint64_t v10 = 31;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    char v11 = (uint64_t *)(a1 + 32);
    if ((int)v10 < 1) {
      goto LABEL_12;
    }
    uint64_t v10 = v10;
  }
  unsigned int v12 = &__src[11];
  do
  {
    if (a4)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = v11[1];
      uint64_t v15 = v11[2];
      if (*v11 == 0xFFFFFFFFLL) {
        uint64_t v13 = -1;
      }
      *(void *)(v12 - 11) = v13;
      *(_WORD *)(v12 - 3) = v14;
      *(v12 - 1) = v15;
      *(_DWORD *)unsigned int v12 = 0;
      v12[4] = 0;
    }
    v11 += 3;
    v12 += 16;
    --v10;
  }
  while (v10);
  v102[0] = v11;
  if (v9 <= 0x19)
  {
    uint64_t v16 = 31;
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v17 = *v11++;
  LODWORD(v16) = v17;
  v102[0] = v11;
  if ((int)v17 < 1) {
    goto LABEL_19;
  }
  uint64_t v16 = v16;
LABEL_15:
  uint64_t v18 = &__src[502];
  do
  {
    uint64_t v19 = *v11;
    uint64_t v20 = v11[1];
    uint64_t v21 = v11[2];
    v11 += 3;
    v102[0] = v11;
    if (a4)
    {
      *(_DWORD *)(v18 - 3) = v20;
      *((unsigned char *)v18 - 2) = v21;
      *((unsigned char *)v18 - 1) = v19;
      *uint64_t v18 = 0;
    }
    v18 += 4;
    --v16;
  }
  while (v16);
LABEL_19:
  if (a4) {
    memcpy(v101, __src, 0x2E8uLL);
  }
  v101[159] = *v11;
  v101[161] = v11[1];
  HIDWORD(v101[166]) = *((_DWORD *)v11 + 4);
  LOBYTE(v101[185]) = v11[3];
  BYTE1(v101[185]) = v11[4];
  BYTE5(v101[186]) = v11[5];
  WORD2(v101[167]) = v11[6];
  LOWORD(v101[169]) = v11[7];
  uint64_t v22 = v11[8];
  long long v23 = v11 + 9;
  v102[0] = v23;
  if (v22)
  {
    char v24 = &v101[93];
    do
    {
      MakeDYMTLRenderPipelineColorAttachmentDescriptor(v102, (uint64_t)v24, a4);
      v24 += 2;
      --v22;
    }
    while (v22);
    long long v23 = v102[0];
  }
  size_t result = strlen((const char *)v23);
  v102[0] = (void *)((char *)v23 + (result & 0xFFFFFFFFFFFFFFF8) + 8);
  int v26 = *(unsigned __int8 *)v23;
  if (!*(unsigned char *)v23) {
    long long v23 = 0;
  }
  if (v26)
  {
    size_t result = strlen((const char *)v23);
    char v27 = a3 + 52;
    uint64_t v28 = a3[52];
    size_t v29 = result + 1;
    if (result != -1)
    {
      size_t v30 = (void *)a3[52];
      goto LABEL_32;
    }
  }
  else
  {
    char v27 = a3 + 52;
    uint64_t v28 = a3[52];
  }
  size_t v29 = 0;
  size_t v30 = 0;
LABEL_32:
  *char v27 = v28 + v29;
  if (a4) {
    size_t result = (size_t)memcpy(v30, v23, v29);
  }
  v101[150] = v30;
  if (v9 > 6)
  {
    char v31 = v102[0];
    BYTE5(v101[185]) = *v102[0];
    if (v9 >= 9)
    {
      BYTE1(v101[188]) = v102[0][1];
      v101[151] = v102[0][2];
      BYTE6(v101[187]) = v102[0][3];
      BYTE5(v101[187]) = v102[0][4];
      BYTE4(v101[187]) = v102[0][5];
      uint64_t v32 = v102[0][6];
      v102[0] += 6;
      HIBYTE(v101[187]) = v32;
      LOBYTE(v101[188]) = v31[7];
      if (v9 >= 0x12)
      {
        uint64_t v33 = v31[8];
        char v34 = v31 + 9;
        if (v33)
        {
          char v35 = (char *)&v101[180] + 7;
          do
          {
            if (a4) {
              unsigned char *v35 = *v34;
            }
            ++v34;
            ++v35;
            --v33;
          }
          while (v33);
        }
        uint64_t v38 = *v34;
        uint64_t v36 = v34 + 1;
        uint64_t v37 = v38;
        v102[0] = v36;
        if (v38)
        {
          char v39 = (char *)&v101[169] + 2;
          do
          {
            uint64_t v41 = *v36++;
            char v40 = v41;
            v102[0] = v36;
            if (a4) {
              unsigned char *v39 = v40;
            }
            ++v39;
            --v37;
          }
          while (v37);
        }
        if (v9 >= 0x17)
        {
          BYTE3(v101[187]) = *v36;
          if (v9 >= 0x20)
          {
            BYTE3(v101[188]) = v36[1];
            uint64_t v42 = v36[2];
            v102[0] = v36 + 2;
            LODWORD(v101[166]) = v42;
            if (v9 >= 0x26)
            {
              v101[158] = v36[3];
              if (v9 != 38)
              {
                BYTE6(v101[185]) = v36[4];
                HIBYTE(v101[184]) = v36[5];
                LODWORD(v101[167]) = v36[6];
                HIDWORD(v101[165]) = v36[7];
                HIBYTE(v101[185]) = v36[8];
                BYTE1(v101[186]) = v36[9];
                BYTE2(v101[186]) = v36[10];
                BYTE3(v101[186]) = v36[11];
                BYTE2(v101[188]) = v36[12];
                BYTE6(v101[184]) = v36[13];
                BYTE4(v101[186]) = v36[14];
                BYTE2(v101[185]) = v36[15];
                if (v9 >= 0x29)
                {
                  v101[160] = v36[16];
                  if (v9 != 41)
                  {
                    v101[145] = v36[17];
                    v101[146] = v36[18];
                    BYTE6(v101[186]) = v36[19];
                    LOBYTE(v101[186]) = v36[20];
                    BYTE3(v101[185]) = v36[21];
                    BYTE4(v101[185]) = v36[22];
                    size_t v43 = v36[23];
                    double v44 = v36 + 24;
                    uint64_t v45 = (uint64_t *)((char *)v36 + ((v43 + 7) & 0xFFFFFFFFFFFFFFF8) + 192);
                    v102[0] = v45;
                    if (v43) {
                      char v46 = (void *)a3[52];
                    }
                    else {
                      char v46 = 0;
                    }
                    uint64_t v47 = (char *)(a3[52] + v43);
                    a3[52] = v47;
                    if (a4)
                    {
                      if (v43) {
                        uint64_t v48 = v44;
                      }
                      else {
                        uint64_t v48 = 0;
                      }
                      size_t result = (size_t)memcpy(v46, v48, v43);
                      uint64_t v47 = (char *)a3[52];
                    }
                    v101[143] = v46;
                    v101[144] = v43;
                    size_t v51 = *v45;
                    __int16 v50 = v45 + 1;
                    size_t v49 = v51;
                    char v52 = (void *)((char *)v50 + ((v51 + 7) & 0xFFFFFFFFFFFFFFF8));
                    v102[0] = v52;
                    if (v51) {
                      __int16 v53 = v47;
                    }
                    else {
                      __int16 v53 = 0;
                    }
                    a3[52] = &v47[v49];
                    if (a4)
                    {
                      if (v49) {
                        __int16 v54 = v50;
                      }
                      else {
                        __int16 v54 = 0;
                      }
                      size_t result = (size_t)memcpy(v53, v54, v49);
                    }
                    v101[141] = v53;
                    v101[142] = v49;
                    if (v9 >= 0x33)
                    {
                      unint64_t v57 = *v52;
                      char v56 = v52 + 1;
                      unint64_t v55 = v57;
                      v102[0] = v56;
                      v101[164] = v57;
                      if (v57)
                      {
                        unint64_t v58 = 0;
                        size_t v59 = (uint64_t *)a3[50];
                        v101[163] = v59;
                        do
                        {
                          uint64_t v61 = *v56++;
                          uint64_t v60 = v61;
                          v102[0] = v56;
                          if (a4)
                          {
                            if (a5)
                            {
                              size_t result = GetAliasStream2(a5, v60);
                              if (result) {
                                uint64_t v60 = *(void *)result;
                              }
                              else {
                                uint64_t v60 = 0;
                              }
                            }
                            size_t v59 = (uint64_t *)a3[50];
                            *size_t v59 = v60;
                            unint64_t v55 = v101[164];
                          }
                          a3[50] = ++v59;
                          ++v58;
                        }
                        while (v55 > v58);
                      }
                      else
                      {
                        v101[163] = 0;
                      }
                      unint64_t v62 = *v56;
                      v102[0] = v56 + 1;
                      v101[149] = v62;
                      if (v62)
                      {
                        unint64_t v63 = 0;
                        int v64 = (uint64_t *)a3[50];
                        v101[148] = v64;
                        int v65 = v56 + 2;
                        do
                        {
                          uint64_t v66 = *(v65 - 1);
                          v102[0] = v65;
                          if (a4)
                          {
                            if (a5)
                            {
                              size_t result = GetAliasStream2(a5, v66);
                              if (result) {
                                uint64_t v66 = *(void *)result;
                              }
                              else {
                                uint64_t v66 = 0;
                              }
                            }
                            int v64 = (uint64_t *)a3[50];
                            uint64_t *v64 = v66;
                            unint64_t v62 = v101[149];
                          }
                          ++v65;
                          a3[50] = ++v64;
                          ++v63;
                        }
                        while (v62 > v63);
                      }
                      else
                      {
                        v101[148] = 0;
                      }
                      if (v9 >= 0x37)
                      {
                        MakeDYMTLLinkedFunctions((size_t)v102, &v101[133], a3, a4, a5);
                        size_t result = MakeDYMTLLinkedFunctions((size_t)v102, &v101[109], a3, a4, a5);
                        if (v9 >= 0x3C)
                        {
                          v101[155] = *v102[0];
                          v101[152] = v102[0][1];
                          uint64_t v67 = v102[0][2];
                          uint64_t v68 = v102[0] + 3;
                          if (v67)
                          {
                            size_t v69 = &v101[177];
                            do
                            {
                              if (a4) {
                                *size_t v69 = *v68;
                              }
                              ++v68;
                              ++v69;
                              --v67;
                            }
                            while (v67);
                          }
                          uint64_t v72 = *v68;
                          unint64_t v71 = v68 + 1;
                          uint64_t v70 = v72;
                          v102[0] = v71;
                          if (v72)
                          {
                            long long v73 = (char *)&v101[173] + 1;
                            do
                            {
                              uint64_t v75 = *v71++;
                              char v74 = v75;
                              v102[0] = v71;
                              if (a4) {
                                unsigned char *v73 = v74;
                              }
                              ++v73;
                              --v70;
                            }
                            while (v70);
                          }
                          unint64_t v78 = *v71;
                          uint64_t v77 = v71 + 1;
                          unint64_t v76 = v78;
                          v102[0] = v77;
                          v101[157] = v78;
                          if (v78)
                          {
                            unint64_t v79 = 0;
                            long long v80 = (uint64_t *)a3[50];
                            v101[156] = v80;
                            do
                            {
                              uint64_t v82 = *v77++;
                              uint64_t v81 = v82;
                              v102[0] = v77;
                              if (a4)
                              {
                                if (a5)
                                {
                                  AliasStream2 = (uint64_t *)GetAliasStream2(a5, v81);
                                  if (AliasStream2) {
                                    uint64_t v81 = *AliasStream2;
                                  }
                                  else {
                                    uint64_t v81 = 0;
                                  }
                                }
                                long long v80 = (uint64_t *)a3[50];
                                *long long v80 = v81;
                                unint64_t v76 = v101[157];
                              }
                              a3[50] = ++v80;
                              ++v79;
                            }
                            while (v76 > v79);
                          }
                          else
                          {
                            v101[156] = 0;
                          }
                          unint64_t v84 = *v77;
                          v102[0] = v77 + 1;
                          v101[154] = v84;
                          if (v84)
                          {
                            unint64_t v85 = 0;
                            uint64_t v86 = (uint64_t *)a3[50];
                            v101[153] = v86;
                            uint64_t v87 = v77 + 2;
                            do
                            {
                              uint64_t v88 = *(v87 - 1);
                              v102[0] = v87;
                              if (a4)
                              {
                                if (a5)
                                {
                                  int v89 = (uint64_t *)GetAliasStream2(a5, v88);
                                  if (v89) {
                                    uint64_t v88 = *v89;
                                  }
                                  else {
                                    uint64_t v88 = 0;
                                  }
                                }
                                uint64_t v86 = (uint64_t *)a3[50];
                                *uint64_t v86 = v88;
                                unint64_t v84 = v101[154];
                              }
                              ++v87;
                              a3[50] = ++v86;
                              ++v85;
                            }
                            while (v84 > v85);
                          }
                          else
                          {
                            v101[153] = 0;
                          }
                          MakeDYMTLLinkedFunctions((size_t)v102, &v101[125], a3, a4, a5);
                          size_t result = MakeDYMTLLinkedFunctions((size_t)v102, &v101[117], a3, a4, a5);
                          if (v9 >= 0x42)
                          {
                            BYTE2(v101[187]) = *v102[0];
                            HIBYTE(v101[186]) = v102[0][1];
                            BYTE1(v101[187]) = v102[0][2];
                            LOBYTE(v101[187]) = v102[0][3];
                            if (v9 >= 0x44)
                            {
                              LODWORD(v101[165]) = v102[0][4];
                              if (v9 != 68)
                              {
                                HIWORD(v101[168]) = v102[0][5];
                                LOWORD(v101[168]) = v102[0][6];
                                WORD2(v101[168]) = v102[0][7];
                                WORD1(v101[168]) = v102[0][8];
                                if (v9 >= 0x4B) {
                                  HIWORD(v101[167]) = v102[0][9];
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (BYTE5(v101[185]) == 255) {
    BYTE5(v101[185]) = 0;
  }
  if (LODWORD(v101[166]) == -1)
  {
    BYTE3(v101[188]) = 0;
    LODWORD(v101[166]) = 1;
  }
  char v90 = (char *)a3[27];
  a3[27] = v90 + 1512;
  if (a4)
  {
    if (a5)
    {
      char v91 = (uint64_t *)GetAliasStream2(a5, v101[162]);
      if (v91) {
        uint64_t v92 = *v91;
      }
      else {
        uint64_t v92 = 0;
      }
      v101[162] = v92;
      unsigned int v94 = (uint64_t *)GetAliasStream2(a5, v101[147]);
      if (v94) {
        uint64_t v95 = *v94;
      }
      else {
        uint64_t v95 = 0;
      }
      v101[147] = v95;
      char v96 = (uint64_t *)GetAliasStream2(a5, v101[158]);
      if (v96) {
        uint64_t v97 = *v96;
      }
      else {
        uint64_t v97 = 0;
      }
      v101[158] = v97;
      char v98 = (uint64_t *)GetAliasStream2(a5, v101[155]);
      if (v98) {
        uint64_t v99 = *v98;
      }
      else {
        uint64_t v99 = 0;
      }
      v101[155] = v99;
      char v93 = (uint64_t *)GetAliasStream2(a5, v101[152]);
      if (!v93)
      {
        uint64_t v100 = 0;
        goto LABEL_153;
      }
    }
    else
    {
      char v93 = &v101[152];
    }
    uint64_t v100 = *v93;
LABEL_153:
    v101[152] = v100;
    return (size_t)memcpy(v90, v101, 0x5E8uLL);
  }
  return result;
}

void **MakeDYMTLRenderPipelineColorAttachmentDescriptor(void **result, uint64_t a2, int a3)
{
  int v3 = *result;
  uint64_t v4 = *(*result)++;
  uint64_t v5 = v3[1];
  *size_t result = v3 + 2;
  uint64_t v6 = v3[2];
  *size_t result = v3 + 3;
  uint64_t v7 = v3[3];
  *size_t result = v3 + 4;
  uint64_t v8 = v3[4];
  *size_t result = v3 + 5;
  uint64_t v9 = v3[5];
  *size_t result = v3 + 6;
  uint64_t v10 = v3[6];
  *size_t result = v3 + 7;
  uint64_t v11 = v3[7];
  *size_t result = v3 + 8;
  uint64_t v12 = v3[8];
  *size_t result = v3 + 9;
  if (a3)
  {
    *(_WORD *)a2 = v12;
    *(unsigned char *)(a2 + 2) = v10;
    *(unsigned char *)(a2 + 3) = v4;
    *(unsigned char *)(a2 + 4) = v9;
    *(unsigned char *)(a2 + 5) = v6;
    *(unsigned char *)(a2 + 6) = v7;
    *(unsigned char *)(a2 + 7) = v8;
    *(unsigned char *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 9) = v11;
    *(_DWORD *)(a2 + 10) = 0;
    *(_WORD *)(a2 + 14) = 0;
  }
  return result;
}

size_t MakeDYMTLLinkedFunctions(size_t result, void *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v9 = (const char **)result;
  uint64_t v10 = (const char *)(*(void *)result + 8);
  uint64_t v11 = **(void **)result;
  *(void *)size_t result = v10;
  if (v11)
  {
    uint64_t v46 = a3[50];
    uint64_t v12 = v11;
    do
    {
      uint64_t v13 = *(uint64_t **)*v9;
      *v9 += 8;
      if (a4)
      {
        if (a5)
        {
          size_t result = GetAliasStream2(a5, (uint64_t)v13);
          if (result) {
            uint64_t v13 = *(uint64_t **)result;
          }
          else {
            uint64_t v13 = 0;
          }
        }
        uint64_t v14 = (uint64_t **)a3[50];
        *uint64_t v14 = v13;
      }
      else
      {
        uint64_t v14 = (uint64_t **)a3[50];
      }
      a3[50] = v14 + 1;
      --v12;
    }
    while (v12);
    uint64_t v10 = *v9;
  }
  else
  {
    uint64_t v46 = 0;
  }
  uint64_t v17 = *(void *)v10;
  uint64_t v15 = v10 + 8;
  uint64_t v16 = v17;
  *uint64_t v9 = v15;
  uint64_t v49 = v17;
  if (v17)
  {
    uint64_t v45 = a3[50];
    uint64_t v18 = v16;
    do
    {
      uint64_t v19 = *(uint64_t **)*v9;
      *v9 += 8;
      if (a4)
      {
        if (a5)
        {
          size_t result = GetAliasStream2(a5, (uint64_t)v19);
          if (result) {
            uint64_t v19 = *(uint64_t **)result;
          }
          else {
            uint64_t v19 = 0;
          }
        }
        uint64_t v20 = (uint64_t **)a3[50];
        *uint64_t v20 = v19;
      }
      else
      {
        uint64_t v20 = (uint64_t **)a3[50];
      }
      a3[50] = v20 + 1;
      --v18;
    }
    while (v18);
    uint64_t v15 = *v9;
  }
  else
  {
    uint64_t v45 = 0;
  }
  uint64_t v22 = v15 + 8;
  uint64_t v21 = *(void *)v15;
  *uint64_t v9 = v15 + 8;
  uint64_t v47 = v11;
  uint64_t v48 = a2;
  if (v21)
  {
    uint64_t v23 = *((void *)v15 + 1);
    uint64_t v22 = v15 + 16;
    *uint64_t v9 = v15 + 16;
    if (v23)
    {
      uint64_t v24 = 0;
      uint64_t v50 = a3[42];
      size_t v51 = v15 + 16;
      *uint64_t v9 = &v22[8 * v23];
      a3[42] += 24 * v23;
      while (1)
      {
        __int16 v25 = *v9;
        size_t result = strlen(*v9);
        *v9 += (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if (*v25) {
          int v26 = v25;
        }
        else {
          int v26 = 0;
        }
        if (*v25)
        {
          size_t result = strlen(v26);
          uint64_t v27 = a3[52];
          size_t v28 = result + 1;
          if (result != -1)
          {
            size_t v29 = (void *)a3[52];
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v27 = a3[52];
        }
        size_t v28 = 0;
        size_t v29 = 0;
LABEL_36:
        a3[52] = v27 + v28;
        if (a4) {
          size_t result = (size_t)memcpy(v29, v26, v28);
        }
        uint64_t v30 = *(void *)&v22[8 * v24];
        if (v30)
        {
          uint64_t v31 = v23;
          uint64_t v32 = a3[50];
          int v33 = v30;
          do
          {
            char v34 = *(uint64_t **)*v9;
            *v9 += 8;
            if (a4)
            {
              if (a5)
              {
                size_t result = GetAliasStream2(a5, (uint64_t)v34);
                if (result) {
                  char v34 = *(uint64_t **)result;
                }
                else {
                  char v34 = 0;
                }
              }
              char v35 = (uint64_t **)a3[50];
              unsigned char *v35 = v34;
            }
            else
            {
              char v35 = (uint64_t **)a3[50];
            }
            a3[50] = v35 + 1;
            --v33;
          }
          while (v33);
          uint64_t v23 = v31;
          uint64_t v22 = v51;
          if ((a4 & 1) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v32 = 0;
          if ((a4 & 1) == 0) {
            goto LABEL_50;
          }
        }
        uint64_t v36 = v50 + 24 * v24;
        *(void *)uint64_t v36 = v29;
        *(void *)(v36 + 8) = v32;
        *(_DWORD *)(v36 + 16) = v30;
        *(_DWORD *)(v36 + 20) = 0;
LABEL_50:
        if (++v24 == v23)
        {
          uint64_t v22 = *v9;
          uint64_t v37 = v50;
          goto LABEL_56;
        }
      }
    }
    uint64_t v37 = 0;
LABEL_56:
    if (a4) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    if (a4) {
      uint64_t v39 = v23;
    }
    else {
      uint64_t v39 = 0;
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  uint64_t v40 = *(void *)v22;
  *uint64_t v9 = v22 + 8;
  if (v40)
  {
    uint64_t v41 = a3[50];
    uint64_t v42 = v40;
    do
    {
      size_t v43 = *(uint64_t **)*v9;
      *v9 += 8;
      if (a4)
      {
        if (a5)
        {
          size_t result = GetAliasStream2(a5, (uint64_t)v43);
          if (result) {
            size_t v43 = *(uint64_t **)result;
          }
          else {
            size_t v43 = 0;
          }
        }
        double v44 = (uint64_t **)a3[50];
        *double v44 = v43;
      }
      else
      {
        double v44 = (uint64_t **)a3[50];
      }
      a3[50] = v44 + 1;
      --v42;
    }
    while (v42);
  }
  else
  {
    uint64_t v41 = 0;
  }
  if (a4)
  {
    void *v48 = v45;
    v48[1] = v49;
    v48[2] = v46;
    v48[3] = v47;
    v48[4] = v38;
    v48[5] = v39;
    v48[6] = v41;
    v48[7] = v40;
  }
  return result;
}

size_t DecodeDYMTLMeshRenderPipelineDescriptor(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  v47[1] = a2;
  memcpy(v46, &GTMTLMeshRenderPipelineDescriptorDefaults, sizeof(v46));
  unsigned int v9 = *(_DWORD *)a1;
  size_t result = strlen((const char *)(a1 + 8));
  v47[0] = (void *)((result & 0xFFFFFFFFFFFFFFF8) + a1 + 8 + 8);
  int v11 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v12 = (const char *)(a1 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11)
  {
    size_t result = strlen(v12);
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v15 = result + 1;
    if (result != -1)
    {
      uint64_t v16 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }
  size_t v15 = 0;
  uint64_t v16 = 0;
LABEL_9:
  *uint64_t v13 = v14 + v15;
  if (a4) {
    size_t result = (size_t)memcpy(v16, v12, v15);
  }
  *(int8x16_t *)((char *)&v46[22] + 8) = vextq_s8(*(int8x16_t *)v47[0], *(int8x16_t *)v47[0], 8uLL);
  uint64_t v17 = v47[0][2];
  WORD3(v46[25]) = v47[0][3];
  uint64_t v18 = v47[0][5];
  WORD2(v46[25]) = v47[0][4];
  uint64_t v19 = v47[0][7];
  long long v20 = *((_OWORD *)v47[0] + 4);
  uint64_t v22 = v47[0][10];
  uint64_t v21 = v47[0][11];
  uint64_t v23 = v47[0] + 12;
  uint64_t v24 = v47[0][6];
  v47[0] += 6;
  BYTE11(v46[31]) = v18;
  BYTE10(v46[31]) = v24;
  *((void *)&v46[21] + 1) = v17;
  *(void *)&v46[22] = v16;
  *((void *)&v46[23] + 1) = v19;
  v46[20] = v20;
  *(void *)&v46[21] = v22;
  if (v21)
  {
    __int16 v25 = (char *)&v46[29] + 8;
    do
    {
      if (a4) {
        *__int16 v25 = *v23;
      }
      ++v23;
      ++v25;
      --v21;
    }
    while (v21);
  }
  uint64_t v28 = *v23;
  int v26 = v23 + 1;
  uint64_t v27 = v28;
  v47[0] = v26;
  if (v28)
  {
    size_t v29 = (char *)&v46[27] + 9;
    do
    {
      if (a4) {
        *size_t v29 = *v26;
      }
      ++v26;
      ++v29;
      --v27;
    }
    while (v27);
  }
  uint64_t v32 = *v26;
  uint64_t v30 = v26 + 1;
  uint64_t v31 = v32;
  v47[0] = v30;
  if (v32)
  {
    int v33 = (char *)&v46[25] + 10;
    do
    {
      if (a4) {
        *int v33 = *v30;
      }
      ++v30;
      ++v33;
      --v31;
    }
    while (v31);
  }
  BYTE12(v46[31]) = *v30;
  BYTE7(v46[31]) = v30[1];
  BYTE8(v46[31]) = v30[2];
  BYTE13(v46[31]) = v30[3];
  BYTE9(v46[31]) = v30[4];
  HIDWORD(v46[24]) = v30[5];
  uint64_t v34 = v30[6];
  char v35 = v30 + 7;
  v47[0] = v35;
  if (v34)
  {
    uint64_t v36 = v46;
    do
    {
      size_t result = (size_t)MakeDYMTLRenderPipelineColorAttachmentDescriptor(v47, (uint64_t)v36++, a4);
      --v34;
    }
    while (v34);
    char v35 = v47[0];
  }
  LOWORD(v46[25]) = *v35;
  WORD4(v46[25]) = v35[1];
  BYTE14(v46[31]) = v35[2];
  if (v9 > 0x43)
  {
    uint64_t v37 = v35[3];
    v47[0] = v35 + 4;
    DWORD2(v46[24]) = v37;
    if (v9 >= 0x46)
    {
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[16], a3, a4, a5);
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[12], a3, a4, a5);
      size_t result = MakeDYMTLLinkedFunctions((size_t)v47, &v46[8], a3, a4, a5);
      if (v9 >= 0x4B)
      {
        uint64_t v38 = v47[0][1];
        WORD1(v46[25]) = *v47[0];
        *(void *)&v46[24] = v38;
      }
    }
  }
  uint64_t v39 = (char *)a3[26];
  a3[26] = v39 + 512;
  if (a4)
  {
    if (a5)
    {
      AliasStream2 = (uint64_t *)GetAliasStream2(a5, *(uint64_t *)&v46[23]);
      if (AliasStream2) {
        uint64_t v41 = *AliasStream2;
      }
      else {
        uint64_t v41 = 0;
      }
      *(void *)&v46[23] = v41;
      size_t v43 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v46[22] + 1));
      if (v43) {
        uint64_t v44 = *v43;
      }
      else {
        uint64_t v44 = 0;
      }
      *((void *)&v46[22] + 1) = v44;
      uint64_t v42 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v46[21] + 1));
      if (!v42)
      {
        uint64_t v45 = 0;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v42 = (uint64_t *)&v46[21] + 1;
    }
    uint64_t v45 = *v42;
LABEL_46:
    *((void *)&v46[21] + 1) = v45;
    return (size_t)memcpy(v39, v46, 0x200uLL);
  }
  return result;
}

size_t DecodeDYMTLDepthStencilDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = (const char *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 16);
  size_t result = strlen((const char *)(a1 + 24));
  size_t v11 = result;
  int v12 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v12)
  {
    size_t result = strlen(v13);
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
    size_t v16 = result + 1;
    if (result != -1)
    {
      uint64_t v17 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
  }
  size_t v16 = 0;
  uint64_t v17 = 0;
LABEL_9:
  *uint64_t v14 = v15 + v16;
  if (a4)
  {
    size_t result = (size_t)memcpy(v17, v13, v16);
    uint64_t v19 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 32];
    uint64_t v18 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 40];
    uint64_t v21 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 16];
    uint64_t v20 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 24];
    int32x2_t v22 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 48]);
    uint64_t v24 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 88];
    uint64_t v23 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 96];
    uint64_t v26 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 72];
    uint64_t v25 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 80];
    uint64_t v27 = *(void *)(a3 + 200);
    int32x2_t v28 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 104]);
    *(void *)(a3 + 200) = v27 + 48;
    *(int32x2_t *)uint64_t v27 = v28;
    *(unsigned char *)(v27 + 8) = v24;
    *(unsigned char *)(v27 + 9) = v23;
    *(unsigned char *)(v27 + 10) = v26;
    *(unsigned char *)(v27 + 11) = v25;
    *(_DWORD *)(v27 + 12) = 0;
    *(int32x2_t *)(v27 + 16) = v22;
    *(unsigned char *)(v27 + 24) = v19;
    *(unsigned char *)(v27 + 25) = v18;
    *(unsigned char *)(v27 + 26) = v21;
    *(unsigned char *)(v27 + 27) = v20;
    *(_DWORD *)(v27 + 28) = 0;
    *(void *)(v27 + 32) = v17;
    *(unsigned char *)(v27 + 40) = v7;
    *(unsigned char *)(v27 + 41) = v9;
    *(_WORD *)(v27 + 46) = 0;
    *(_DWORD *)(v27 + 42) = 0;
  }
  else
  {
    *(void *)(a3 + 200) += 48;
  }
  return result;
}

uint64_t DecodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7 = *(_DWORD *)a1;
  char v33 = *(unsigned char *)(a1 + 16);
  char v34 = *(unsigned char *)(a1 + 24);
  char v35 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 32);
  char v36 = *(unsigned char *)(a1 + 40);
  char v37 = *(unsigned char *)(a1 + 48);
  char v9 = *(unsigned char *)(a1 + 56);
  char v10 = *(unsigned char *)(a1 + 64);
  int v11 = *(_DWORD *)(a1 + 72);
  int v12 = (const char *)(a1 + 88);
  int v13 = *(_DWORD *)(a1 + 80);
  size_t v14 = strlen((const char *)(a1 + 88));
  if (*(unsigned char *)(a1 + 88)) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(unsigned char *)(a1 + 88))
  {
    size_t v16 = strlen(v15);
    uint64_t v17 = (void *)(a3 + 416);
    uint64_t v18 = *(void *)(a3 + 416);
    size_t v19 = v16 + 1;
    if (v16 != -1)
    {
      uint64_t v20 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = (void *)(a3 + 416);
    uint64_t v18 = *(void *)(a3 + 416);
  }
  size_t v19 = 0;
  uint64_t v20 = 0;
LABEL_9:
  void *v17 = v18 + v19;
  if (a4) {
    memcpy(v20, v15, v19);
  }
  int32x4_t v21 = 0uLL;
  if (v7 < 2)
  {
    char v29 = 0;
    int v24 = 0;
    int v27 = 0;
    uint64_t v26 = 0;
    int v22 = 0;
LABEL_22:
    char v23 = 0;
LABEL_23:
    int v25 = 0;
LABEL_24:
    char v28 = 0;
    goto LABEL_25;
  }
  int v22 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 8];
  if (v7 < 8)
  {
    char v29 = 0;
    int v24 = 0;
    int v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_22;
  }
  char v23 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 16];
  if (v7 < 0xA)
  {
    char v29 = 0;
    int v24 = 0;
LABEL_41:
    int v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_23;
  }
  int v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 24];
  if (v7 < 0x11)
  {
    char v29 = 0;
    goto LABEL_41;
  }
  int v25 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 32];
  if (v7 < 0x16)
  {
    char v29 = 0;
    int v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 40];
  int v27 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 48];
  if (v7 < 0x1C)
  {
    char v29 = 0;
    goto LABEL_24;
  }
  char v28 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 56];
  if (v7 < 0x27)
  {
    char v29 = 0;
  }
  else
  {
    int v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 64];
    int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 72], *(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 88]);
    char v29 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 104];
    if (v7 >= 0x2A)
    {
      __int16 v30 = *(_WORD *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 112];
      goto LABEL_26;
    }
  }
LABEL_25:
  __int16 v30 = 0;
LABEL_26:
  uint64_t v31 = *(void *)(a3 + 192);
  uint64_t result = v31 + 64;
  *(void *)(a3 + 192) = v31 + 64;
  if (a4)
  {
    if (v27 == 255) {
      LOBYTE(v27) = 0;
    }
    *(void *)uint64_t v31 = v20;
    *(void *)(v31 + 8) = v8;
    if (v26 == -1) {
      uint64_t v26 = 0;
    }
    *(void *)(v31 + 16) = v26;
    if (v25 == 255) {
      LOBYTE(v25) = 0;
    }
    *(int32x4_t *)(v31 + 24) = v21;
    if (v24 == 255) {
      LOBYTE(v24) = 0;
    }
    if (v22 == 255) {
      LOBYTE(v22) = 0;
    }
    *(_DWORD *)(v31 + 40) = v13;
    *(_DWORD *)(v31 + 44) = v11;
    *(_WORD *)(v31 + 48) = v30;
    *(unsigned char *)(v31 + 50) = v24;
    *(unsigned char *)(v31 + 51) = v23;
    *(unsigned char *)(v31 + 52) = v27;
    *(unsigned char *)(v31 + 53) = v29;
    *(unsigned char *)(v31 + 54) = v22;
    *(unsigned char *)(v31 + 55) = v33;
    *(unsigned char *)(v31 + 56) = v35;
    *(unsigned char *)(v31 + 57) = v34;
    *(unsigned char *)(v31 + 58) = v10;
    *(unsigned char *)(v31 + 59) = v9;
    *(unsigned char *)(v31 + 60) = v28;
    *(unsigned char *)(v31 + 61) = v36;
    *(unsigned char *)(v31 + 62) = v25;
    *(unsigned char *)(v31 + 63) = v37;
  }
  return result;
}

unint64_t EncodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *(void *)a2 = 81;
    if (a3 >= 0x10)
    {
      *(void *)(a2 + 8) = *(unsigned __int8 *)(a1 + 56);
      if (a3 >= 0x18)
      {
        *(void *)(a2 + 16) = *(unsigned __int8 *)(a1 + 55);
        if (a3 >= 0x20)
        {
          *(void *)(a2 + 24) = *(unsigned __int8 *)(a1 + 57);
          if (a3 >= 0x28)
          {
            *(void *)(a2 + 32) = *(void *)(a1 + 8);
            if (a3 >= 0x30)
            {
              *(void *)(a2 + 40) = *(unsigned __int8 *)(a1 + 61);
              if (a3 >= 0x38)
              {
                *(void *)(a2 + 48) = *(unsigned __int8 *)(a1 + 63);
                if (a3 >= 0x40)
                {
                  *(void *)(a2 + 56) = *(unsigned __int8 *)(a1 + 59);
                  if (a3 >= 0x48)
                  {
                    *(void *)(a2 + 64) = *(unsigned __int8 *)(a1 + 58);
                    if (a3 >= 0x4C)
                    {
                      *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 44);
                      if (a3 >= 0x4D)
                      {
                        uint64_t v6 = (void *)(a2 + 76);
                        size_t v7 = a3 - 76 >= 4 ? 4 : a3 - 76;
                        bzero(v6, v7);
                        if (a3 >= 0x54)
                        {
                          *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 40);
                          if (a3 >= 0x55)
                          {
                            if (a3 - 84 >= 4) {
                              size_t v8 = 4;
                            }
                            else {
                              size_t v8 = a3 - 84;
                            }
                            bzero((void *)(a2 + 84), v8);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (*(void *)a1) {
    char v9 = *(const char **)a1;
  }
  else {
    char v9 = "";
  }
  size_t v10 = strlen(v9);
  size_t v11 = v10;
  size_t v12 = v10 + 89;
  if (a3 >= v10 + 89) {
    memcpy((void *)(a2 + 88), v9, v10 + 1);
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFF8;
  if (a3 > v12)
  {
    if (a3 - v12 >= v13 + ~v11 + 8) {
      size_t v14 = v13 + ~v11 + 8;
    }
    else {
      size_t v14 = a3 - v12;
    }
    bzero((void *)(a2 + v12), v14);
  }
  if (v13 + 104 <= a3) {
    *(void *)(v13 + a2 + 96) = *(unsigned __int8 *)(a1 + 54);
  }
  if (v13 + 112 <= a3) {
    *(void *)(a2 + v13 + 104) = *(unsigned __int8 *)(a1 + 51);
  }
  if (v13 + 120 <= a3) {
    *(void *)(a2 + v13 + 112) = *(unsigned __int8 *)(a1 + 50);
  }
  if (v13 + 128 <= a3) {
    *(void *)(a2 + v13 + 120) = *(unsigned __int8 *)(a1 + 62);
  }
  if (v13 + 136 <= a3) {
    *(void *)(a2 + v13 + 128) = *(void *)(a1 + 16);
  }
  if (v13 + 144 <= a3) {
    *(void *)(a2 + v13 + 136) = *(unsigned __int8 *)(a1 + 52);
  }
  if (v13 + 152 <= a3) {
    *(void *)(a2 + v13 + 144) = *(unsigned __int8 *)(a1 + 60);
  }
  if (v13 + 160 <= a3) {
    *(void *)(a2 + v13 + 152) = *(unsigned __int8 *)(a1 + 50);
  }
  if (v13 + 168 <= a3) {
    *(void *)(a2 + v13 + 160) = *(unsigned int *)(a1 + 24);
  }
  if (v13 + 176 <= a3) {
    *(void *)(a2 + v13 + 168) = *(unsigned int *)(a1 + 28);
  }
  if (v13 + 184 <= a3) {
    *(void *)(a2 + v13 + 176) = *(unsigned int *)(a1 + 32);
  }
  if (v13 + 192 <= a3) {
    *(void *)(a2 + v13 + 184) = *(unsigned int *)(a1 + 36);
  }
  if (v13 + 200 <= a3) {
    *(void *)(a2 + v13 + 192) = *(unsigned __int8 *)(a1 + 53);
  }
  unint64_t result = v13 + 208;
  if (v13 + 208 <= a3) {
    *(void *)(a2 + v13 + 200) = *(unsigned __int16 *)(a1 + 48);
  }
  return result;
}

void DecodeDYMTLComputePipelineDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  v66[1] = a2;
  memcpy(v65, &GTMTLComputePipelineDescriptorDefaults, sizeof(v65));
  unsigned int v9 = *(_DWORD *)a1;
  uint64_t v10 = *(void *)(a1 + 16);
  v65[106] = *(void *)(a1 + 8);
  BYTE6(v65[119]) = v10;
  v66[0] = (strlen((const char *)(a1 + 24)) & 0xFFFFFFFFFFFFFFF8) + a1 + 24 + 8;
  int v11 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    size_t v12 = (const char *)(a1 + 24);
  }
  else {
    size_t v12 = 0;
  }
  if (v11)
  {
    size_t v13 = strlen(v12);
    size_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
    size_t v16 = v13 + 1;
    if (v13 != -1)
    {
      uint64_t v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    size_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
  }
  size_t v16 = 0;
  uint64_t v17 = 0;
LABEL_9:
  *size_t v14 = v15 + v16;
  if (a4) {
    memcpy(v17, v12, v16);
  }
  v65[109] = v17;
  if (v9 < 0xB) {
    goto LABEL_87;
  }
  bzero(__src, 0x2F0uLL);
  uint64_t v18 = (uint64_t *)v66[0];
  if (v9 < 0x1A)
  {
    uint64_t v19 = 31;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v66[0] + 8);
    uint64_t v19 = *(unsigned int *)v66[0];
    if (!*(_DWORD *)v66[0]) {
      goto LABEL_23;
    }
  }
  uint64_t v20 = &__src[11];
  do
  {
    if (a4)
    {
      uint64_t v22 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v23 = *v18;
      if (*v18 == 0xFFFFFFFFLL) {
        uint64_t v23 = -1;
      }
      *(void *)(v20 - 11) = v23;
      *(_WORD *)(v20 - 3) = v22;
      *(v20 - 1) = v21;
      *(_DWORD *)uint64_t v20 = 0;
      void v20[4] = 0;
    }
    v18 += 3;
    v20 += 16;
    --v19;
  }
  while (v19);
  v66[0] = v18;
  if (v9 > 0x19)
  {
LABEL_23:
    unsigned int v25 = *(_DWORD *)v18++;
    uint64_t v24 = v25;
    v66[0] = v18;
    if (!v25) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v24 = 31;
LABEL_26:
  uint64_t v26 = &__src[502];
  do
  {
    if (a4)
    {
      uint64_t v27 = v18[2];
      uint64_t v28 = *v18;
      *(_DWORD *)(v26 - 3) = v18[1];
      *((unsigned char *)v26 - 2) = v27;
      *((unsigned char *)v26 - 1) = v28;
      *uint64_t v26 = 0;
    }
    v18 += 3;
    v26 += 4;
    --v24;
  }
  while (v24);
LABEL_30:
  __src[745] = *v18;
  uint64_t v29 = v18[1];
  __int16 v30 = v18 + 2;
  v66[0] = v18 + 2;
  unsigned char __src[744] = v29;
  if (a4) {
    memcpy(v65, __src, 0x2F0uLL);
  }
  HIBYTE(v65[118]) = -1;
  if (v9 >= 0x12)
  {
    if (v9 < 0x1A)
    {
      uint64_t v31 = 31;
    }
    else
    {
      uint64_t v31 = v18[2];
      __int16 v30 = v18 + 3;
      v66[0] = v18 + 3;
      if ((int)v31 < 1) {
        goto LABEL_39;
      }
      uint64_t v31 = v31;
    }
    uint64_t v32 = &v65[115];
    do
    {
      uint64_t v33 = *v30++;
      *v32++ = v33;
      --v31;
    }
    while (v31);
LABEL_39:
    if (v9 >= 0x1B)
    {
      BYTE4(v65[119]) = *v30;
      if (v9 >= 0x25)
      {
        HIWORD(v65[114]) = v30[1];
        if (v9 != 37)
        {
          v65[110] = v30[2];
          if (v9 >= 0x28)
          {
            uint64_t v34 = v30[3];
            char v35 = v30 + 4;
            v66[0] = v35;
            v65[108] = v34;
            if (v34)
            {
              char v36 = (uint64_t *)a3[50];
              v65[107] = v36;
              do
              {
                uint64_t v38 = *v35++;
                uint64_t v37 = v38;
                if (a4)
                {
                  if (a5)
                  {
                    AliasStream2 = (uint64_t *)GetAliasStream2(a5, v37);
                    if (AliasStream2) {
                      uint64_t v37 = *AliasStream2;
                    }
                    else {
                      uint64_t v37 = 0;
                    }
                  }
                  char v36 = (uint64_t *)a3[50];
                  *char v36 = v37;
                }
                a3[50] = ++v36;
                --v34;
              }
              while (v34);
            }
            else
            {
              v65[107] = 0;
            }
            if (v9 >= 0x29)
            {
              v65[113] = *v35;
              if (v9 != 41)
              {
                BYTE5(v65[119]) = v35[1];
                LOWORD(v65[114]) = v35[2];
                BYTE2(v65[119]) = v35[3];
                BYTE1(v65[119]) = v35[4];
                LOBYTE(v65[119]) = v35[5];
                size_t v40 = v35[6];
                uint64_t v41 = v35 + 7;
                uint64_t v42 = (size_t *)((char *)v35 + ((v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 56);
                v66[0] = v42;
                if (v40) {
                  size_t v43 = (void *)a3[52];
                }
                else {
                  size_t v43 = 0;
                }
                uint64_t v44 = (char *)(a3[52] + v40);
                a3[52] = v44;
                if (a4)
                {
                  if (v40) {
                    uint64_t v45 = v41;
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  memcpy(v43, v45, v40);
                  uint64_t v44 = (char *)a3[52];
                }
                v65[104] = v43;
                v65[105] = v40;
                size_t v48 = *v42;
                uint64_t v47 = v42 + 1;
                size_t v46 = v48;
                uint64_t v49 = (void *)((char *)v47 + ((v48 + 7) & 0xFFFFFFFFFFFFFFF8));
                v66[0] = v49;
                if (v48) {
                  uint64_t v50 = v44;
                }
                else {
                  uint64_t v50 = 0;
                }
                a3[52] = &v44[v46];
                if (a4)
                {
                  if (v46) {
                    size_t v51 = v47;
                  }
                  else {
                    size_t v51 = 0;
                  }
                  memcpy(v50, v51, v46);
                }
                v65[102] = v50;
                v65[103] = v46;
                if (v9 >= 0x2D)
                {
                  uint64_t v52 = *v49;
                  v66[0] = v49 + 1;
                  WORD2(v65[114]) = v52;
                  uint64_t v53 = v49[1];
                  v66[0] = v49 + 2;
                  BYTE3(v65[119]) = v53;
                  MakeDYMTLLinkedFunctions((size_t)v66, &v65[94], a3, a4, a5);
                  if (v9 >= 0x30)
                  {
                    __int16 v54 = (uint64_t *)(v66[0] + 8);
                    uint64_t v55 = *(void *)v66[0];
                    v65[112] = v55;
                    if (v55)
                    {
                      char v56 = (uint64_t *)a3[50];
                      v65[111] = v56;
                      do
                      {
                        uint64_t v58 = *v54++;
                        uint64_t v57 = v58;
                        if (a4)
                        {
                          if (a5)
                          {
                            size_t v59 = (uint64_t *)GetAliasStream2(a5, v57);
                            if (v59) {
                              uint64_t v57 = *v59;
                            }
                            else {
                              uint64_t v57 = 0;
                            }
                          }
                          char v56 = (uint64_t *)a3[50];
                          uint64_t *v56 = v57;
                        }
                        a3[50] = ++v56;
                        --v55;
                      }
                      while (v55);
                    }
                    else
                    {
                      v65[111] = 0;
                    }
                    if (v9 >= 0x4B) {
                      WORD1(v65[114]) = *v54;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_87:
  uint64_t v60 = (char *)a3[21];
  a3[21] = v60 + 960;
  if (!a4) {
    return;
  }
  if (a5)
  {
    uint64_t v61 = (uint64_t *)GetAliasStream2(a5, v65[106]);
    if (v61) {
      uint64_t v62 = *v61;
    }
    else {
      uint64_t v62 = 0;
    }
    v65[106] = v62;
    unint64_t v63 = (uint64_t *)GetAliasStream2(a5, v65[110]);
    if (!v63)
    {
      uint64_t v64 = 0;
      goto LABEL_96;
    }
  }
  else
  {
    unint64_t v63 = &v65[110];
  }
  uint64_t v64 = *v63;
LABEL_96:
  v65[110] = v64;
  memcpy(v60, v65, 0x3C0uLL);
}

double DecodeDYMTLTileRenderPipelineDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  v59[1] = a2;
  long long v56 = xmmword_4C9A28;
  long long v57 = unk_4C9A38;
  long long v58 = xmmword_4C9A48;
  long long v52 = xmmword_4C99E8;
  long long v53 = unk_4C99F8;
  long long v54 = xmmword_4C9A08;
  long long v55 = unk_4C9A18;
  long long v48 = GTMTLTileRenderPipelineDescriptorDefaults;
  long long v49 = unk_4C99B8;
  long long v50 = xmmword_4C99C8;
  long long v51 = unk_4C99D8;
  unsigned int v9 = (const char *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)a1;
  v59[0] = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8) + a1 + 8 + 8;
  int v12 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = 0;
  }
  if (v12)
  {
    size_t v14 = strlen(v13);
    uint64_t v15 = a3 + 52;
    uint64_t v16 = a3[52];
    size_t v17 = v14 + 1;
    if (v14 != -1)
    {
      uint64_t v18 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = a3 + 52;
    uint64_t v16 = a3[52];
  }
  size_t v17 = 0;
  uint64_t v18 = 0;
LABEL_9:
  *uint64_t v15 = v16 + v17;
  if (a4) {
    memcpy(v18, v13, v17);
  }
  uint64_t v19 = *(void *)v59[0];
  uint64_t v20 = *(void *)(v59[0] + 8);
  *(void *)&long long v54 = v18;
  *((void *)&v55 + 1) = v19;
  WORD3(v56) = v20;
  uint64_t v21 = *(void *)(v59[0] + 16);
  uint64_t v22 = (void *)(v59[0] + 24);
  if (v21)
  {
    uint64_t v23 = &v52;
    do
    {
      if (a4) {
        *(_WORD *)uint64_t v23 = *v22;
      }
      ++v22;
      uint64_t v23 = (long long *)((char *)v23 + 2);
      --v21;
    }
    while (v21);
  }
  BYTE9(v58) = *v22;
  uint64_t v24 = v22[1];
  unsigned int v25 = v22 + 2;
  v59[0] = v25;
  if (v24)
  {
    uint64_t v26 = (char *)&v56 + 8;
    do
    {
      if (a4) {
        *uint64_t v26 = *v25;
      }
      ++v25;
      ++v26;
      --v24;
    }
    while (v24);
  }
  if (v10 > 0x2D)
  {
    size_t v29 = *v25;
    uint64_t v27 = v25 + 1;
    size_t v28 = v29;
    __int16 v30 = (void *)((char *)v27 + ((v29 + 7) & 0xFFFFFFFFFFFFFFF8));
    v59[0] = v30;
    if (v29) {
      uint64_t v31 = (void *)a3[52];
    }
    else {
      uint64_t v31 = 0;
    }
    a3[52] += v28;
    if (a4)
    {
      if (v28) {
        uint64_t v32 = v27;
      }
      else {
        uint64_t v32 = 0;
      }
      memcpy(v31, v32, v28);
    }
    *(void *)&long long v53 = v31;
    *((void *)&v53 + 1) = v28;
    if (v10 >= 0x33)
    {
      uint64_t v35 = *v30;
      uint64_t v34 = v30 + 1;
      uint64_t v33 = v35;
      v59[0] = v34;
      *(void *)&long long v55 = v35;
      if (v35)
      {
        char v36 = (uint64_t *)a3[50];
        *((void *)&v54 + 1) = v36;
        do
        {
          uint64_t v38 = *v34++;
          uint64_t v37 = v38;
          if (a4)
          {
            if (a5)
            {
              AliasStream2 = (uint64_t *)GetAliasStream2(a5, v37);
              if (AliasStream2) {
                uint64_t v37 = *AliasStream2;
              }
              else {
                uint64_t v37 = 0;
              }
            }
            char v36 = (uint64_t *)a3[50];
            *char v36 = v37;
          }
          a3[50] = ++v36;
          --v33;
        }
        while (v33);
        v59[0] = v34;
      }
      else
      {
        *((void *)&v54 + 1) = 0;
      }
      if (v10 >= 0x37)
      {
        MakeDYMTLLinkedFunctions((size_t)v59, &v48, a3, a4, a5);
        if (v10 >= 0x42)
        {
          BYTE8(v58) = *(void *)v59[0];
          if (v10 >= 0x45)
          {
            WORD1(v56) = *(void *)(v59[0] + 8);
            if (v10 >= 0x4B) {
              LOWORD(v56) = *(void *)(v59[0] + 16);
            }
          }
        }
      }
    }
  }
  size_t v40 = (long long *)a3[20];
  a3[20] = v40 + 11;
  if (a4)
  {
    uint64_t v41 = *((void *)&v55 + 1);
    if (a5)
    {
      uint64_t v42 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v55 + 1));
      if (v42) {
        uint64_t v41 = *v42;
      }
      else {
        uint64_t v41 = 0;
      }
    }
    *((void *)&v55 + 1) = v41;
    long long v43 = v57;
    v40[8] = v56;
    v40[9] = v43;
    v40[10] = v58;
    long long v44 = v53;
    v40[4] = v52;
    v40[5] = v44;
    long long v45 = v49;
    *size_t v40 = v48;
    v40[1] = v45;
    long long v46 = v51;
    v40[2] = v50;
    v40[3] = v46;
    double result = *(double *)&v54;
    long long v47 = v55;
    v40[6] = v54;
    v40[7] = v47;
  }
  return result;
}

size_t DecodeDYMTLFunctionConstantValues(size_t result, uint64_t a2, void *a3, int a4)
{
  unint64_t v6 = result + 8;
  uint64_t v28 = a3[40];
  if (*(void *)(result + 8) != -1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = a3[40];
      a3[40] = v8 + 32;
      uint64_t v9 = *(void *)v6;
      unint64_t v10 = v6 + 8;
      double result = strlen((const char *)(v6 + 8));
      size_t v11 = result;
      int v12 = *(unsigned __int8 *)(v6 + 8);
      size_t v13 = *(unsigned char *)(v6 + 8) ? (const char *)(v6 + 8) : 0;
      if (!v12) {
        break;
      }
      double result = strlen(v13);
      uint64_t v14 = a3[52];
      size_t v15 = result + 1;
      if (result == -1) {
        goto LABEL_10;
      }
      uint64_t v16 = (void *)a3[52];
LABEL_11:
      size_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + v10;
      uint64_t v18 = (uint64_t *)(v17 + 8);
      size_t v19 = v14 + v15;
      a3[52] = v19;
      if (a4)
      {
        memcpy(v16, v13, v15);
        uint64_t v20 = (char *)a3[52];
        uint64_t v21 = v18[1];
        uint64_t v29 = *v18;
        size_t v22 = v18[2];
        uint64_t v23 = v18 + 3;
        unint64_t v6 = (unint64_t)v18 + ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
        a3[52] = &v20[v22];
        if (v22) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = 0;
        }
        if (v22) {
          unsigned int v25 = v23;
        }
        else {
          unsigned int v25 = 0;
        }
        double result = (size_t)memcpy(v24, v25, v22);
        *(void *)uint64_t v8 = v24;
        *(void *)(v8 + 8) = v22;
        *(void *)(v8 + 16) = v16;
        *(_WORD *)(v8 + 24) = v9;
        *(unsigned char *)(v8 + 26) = v21;
        *(unsigned char *)(v8 + 27) = v29;
        *(_DWORD *)(v8 + 28) = 0;
      }
      else
      {
        uint64_t v26 = *(void *)(v17 + 24);
        unint64_t v6 = (unint64_t)v18 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
        a3[52] = v19 + v26;
      }
      ++v7;
      if (*(void *)v6 == -1) {
        goto LABEL_23;
      }
    }
    uint64_t v14 = a3[52];
LABEL_10:
    size_t v15 = 0;
    uint64_t v16 = 0;
    goto LABEL_11;
  }
  uint64_t v7 = 0;
LABEL_23:
  uint64_t v27 = (void *)a3[15];
  a3[15] = v27 + 2;
  if (a4)
  {
    *uint64_t v27 = v28;
    v27[1] = v7;
  }
  return result;
}

size_t DecodeDYMTLRasterizationRateMapDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unsigned int v7 = *(_DWORD *)a1;
  uint64_t v8 = (const char *)(a1 + 8);
  size_t result = strlen((const char *)(a1 + 8));
  unint64_t v10 = (unint64_t)&v8[(result & 0xFFFFFFFFFFFFFFF8) + 8];
  if (*(unsigned char *)(a1 + 8))
  {
    size_t result = strlen(v8);
    size_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v11 = result + 1;
    if (result != -1)
    {
      int v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
    size_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }
  size_t v11 = 0;
  int v12 = 0;
LABEL_6:
  *size_t v13 = v14 + v11;
  if (a4) {
    size_t result = (size_t)memcpy(v12, v8, v11);
  }
  __int16 v15 = *(_WORD *)v10;
  __int16 v16 = *(_WORD *)(v10 + 8);
  __int16 v17 = *(_WORD *)(v10 + 16);
  unint64_t v18 = v10 + 32;
  uint64_t v19 = *(void *)(v10 + 24);
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = a3[36];
    while (1)
    {
      uint64_t v22 = a3[36];
      a3[36] = v22 + 24;
      uint64_t v24 = *(void *)v18;
      uint64_t v23 = *(void *)(v18 + 8);
      size_t result = *(unsigned __int16 *)(v18 + 16);
      v18 += 24;
      if ((_WORD)v24)
      {
        uint64_t v25 = 0;
        uint64_t v26 = a3[51];
        do
        {
          if (a4) {
            *(_DWORD *)(v26 + v25) = *(_DWORD *)v18;
          }
          v18 += 8;
          a3[51] = v26 + v25 + 4;
          v25 += 4;
        }
        while (4 * (unsigned __int16)v24 != v25);
      }
      else
      {
        uint64_t v26 = 0;
      }
      if ((_WORD)v23)
      {
        uint64_t v27 = 0;
        uint64_t v28 = a3[51];
        do
        {
          if (a4) {
            *(_DWORD *)(v28 + v27) = *(_DWORD *)v18;
          }
          v18 += 8;
          a3[51] = v28 + v27 + 4;
          v27 += 4;
        }
        while (4 * (unsigned __int16)v23 != v27);
        if ((a4 & 1) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v28 = 0;
        if ((a4 & 1) == 0) {
          goto LABEL_24;
        }
      }
      *(void *)uint64_t v22 = v26;
      *(void *)(v22 + 8) = v28;
      *(_WORD *)(v22 + 16) = v24;
      *(_WORD *)(v22 + 18) = result;
      *(_WORD *)(v22 + 20) = v23;
      *(_WORD *)(v22 + 22) = 0;
LABEL_24:
      if (++v20 == v19) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v21 = 0;
LABEL_29:
  if (v7 <= 0x39)
  {
    char v31 = 0;
    int v29 = 0;
    char v30 = 2;
  }
  else
  {
    int v29 = *(_DWORD *)v18;
    char v30 = *(unsigned char *)(v18 + 8);
    if (v7 < 0x44) {
      char v31 = 0;
    }
    else {
      char v31 = *(unsigned char *)(v18 + 16);
    }
  }
  uint64_t v32 = a3[13];
  a3[13] = v32 + 40;
  if (a4)
  {
    *(void *)uint64_t v32 = v12;
    *(void *)(v32 + 8) = v21;
    *(void *)(v32 + 16) = v19;
    *(_DWORD *)(v32 + 24) = v29;
    *(_WORD *)(v32 + 28) = v17;
    *(_WORD *)(v32 + 30) = v16;
    *(_WORD *)(v32 + 32) = v15;
    *(unsigned char *)(v32 + 34) = v30;
    *(unsigned char *)(v32 + 35) = v31;
    *(_DWORD *)(v32 + 36) = 0;
  }
  return result;
}

size_t DecodeDYMTLFunctionDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v9 = (const char *)(a1 + 16);
  char v38 = *(unsigned char *)(a1 + 8);
  unsigned int v39 = *(_DWORD *)a1;
  size_t v10 = strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8;
  size_t v11 = &v9[v10 + 8];
  if (*(unsigned char *)(a1 + 16)) {
    int v12 = v9;
  }
  else {
    int v12 = 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    size_t v13 = strlen(v12);
    uint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
    size_t v16 = v13 + 1;
    if (v13 != -1)
    {
      __int16 v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
  }
  size_t v16 = 0;
  __int16 v17 = 0;
LABEL_9:
  *uint64_t v14 = v15 + v16;
  if (a4) {
    memcpy(v17, v12, v16);
  }
  size_t result = strlen(v11);
  unint64_t v19 = result & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = &v11[result & 0xFFFFFFFFFFFFFFF8];
  if (*v11) {
    uint64_t v21 = v11;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v37 = v17;
  if (*v11)
  {
    size_t result = strlen(v21);
    uint64_t v22 = a3 + 52;
    uint64_t v23 = a3[52];
    size_t v24 = result + 1;
    if (result != -1)
    {
      uint64_t v25 = (void *)a3[52];
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v22 = a3 + 52;
    uint64_t v23 = a3[52];
  }
  size_t v24 = 0;
  uint64_t v25 = 0;
LABEL_19:
  void *v22 = v23 + v24;
  if (a4) {
    size_t result = (size_t)memcpy(v25, v21, v24);
  }
  size_t v27 = (size_t)(v20 + 16);
  uint64_t v26 = *((void *)v20 + 1);
  if (v26)
  {
    uint64_t v28 = a3[15];
    size_t result = DecodeDYMTLFunctionConstantValues(v27, v26, a3, a4);
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (v39 < 0x3E)
  {
    uint64_t v32 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    unint64_t v29 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = *(void *)(v27 + v29);
    if (v30)
    {
      uint64_t v40 = v28;
      uint64_t v31 = 0;
      uint64_t v32 = (uint64_t *)a3[50];
      uint64_t v33 = v10 + v19 + v29 + a1 + 48;
      uint64_t v34 = v32;
      do
      {
        if (a4)
        {
          uint64_t v35 = *(void *)(v33 + 8 * v31);
          if (a5)
          {
            size_t result = GetAliasStream2(a5, v35);
            if (result) {
              uint64_t v35 = *(void *)result;
            }
            else {
              uint64_t v35 = 0;
            }
          }
          uint64_t v34 = (uint64_t *)a3[50];
          uint64_t *v34 = v35;
        }
        a3[50] = ++v34;
        ++v31;
      }
      while (v30 != v31);
      uint64_t v28 = v40;
    }
    else
    {
      uint64_t v32 = 0;
    }
  }
  uint64_t v36 = a3[12];
  a3[12] = v36 + 48;
  if (a4)
  {
    *(void *)uint64_t v36 = v28;
    *(void *)(v36 + 8) = v37;
    *(void *)(v36 + 16) = v32;
    *(void *)(v36 + 24) = v30;
    *(void *)(v36 + 32) = v25;
    *(unsigned char *)(v36 + 40) = v38;
    *(_DWORD *)(v36 + 41) = 0;
    *(_DWORD *)(v36 + 44) = 0;
  }
  return result;
}

uint64_t DecodeDYMTLCompileOptions(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)a1;
  size_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = a1 + 16 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v9) {
    size_t v11 = (void *)a3[52];
  }
  else {
    size_t v11 = 0;
  }
  a3[52] += v9;
  if (a4)
  {
    if (v9) {
      int v12 = (const void *)(a1 + 16);
    }
    else {
      int v12 = 0;
    }
    memcpy(v11, v12, v9);
  }
  char v13 = *(unsigned char *)v10;
  char v15 = *(unsigned char *)v10 == 0;
  BOOL v14 = *(unsigned char *)v10 != 0;
  char v16 = 2 * v14;
  uint64_t result = *(unsigned __int8 *)(v10 + 8);
  if (v8 <= 0xF)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
    char v22 = 0;
    if (v8 < 6)
    {
      int v29 = 0;
      uint64_t v23 = 0;
      size_t v24 = 0;
      uint64_t v25 = 0;
      char v26 = 0;
      size_t v27 = 0;
      char v28 = 0;
    }
    else
    {
      uint64_t v23 = 0;
      size_t v24 = 0;
      uint64_t v25 = 0;
      char v26 = 0;
      size_t v27 = 0;
      char v28 = 0;
      int v29 = *(_DWORD *)(v10 + 40);
    }
    goto LABEL_60;
  }
  int v59 = *(_DWORD *)(v10 + 16);
  if (v8 < 0x28)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0;
    size_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
    size_t v27 = 0;
    char v28 = 0;
    int v29 = *(_DWORD *)(v10 + 16);
    goto LABEL_60;
  }
  unsigned int v55 = *(unsigned __int8 *)(v10 + 8);
  char v56 = 2 * v14;
  BOOL v57 = *(unsigned char *)v10 == 0;
  char v58 = *(unsigned char *)v10;
  unint64_t v30 = v10 + 24;
  size_t v31 = strlen((const char *)(v10 + 24));
  int v32 = *(unsigned __int8 *)(v10 + 24);
  if (*(unsigned char *)(v10 + 24)) {
    uint64_t v33 = (const char *)(v10 + 24);
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32)
  {
    size_t v34 = strlen(v33);
    uint64_t v35 = a3[52];
    size_t v36 = v34 + 1;
    if (v34 != -1)
    {
      __dst = (void *)a3[52];
      char v15 = v57;
      char v13 = v58;
      uint64_t result = v55;
      char v16 = v56;
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v35 = a3[52];
  }
  char v15 = v57;
  char v13 = v58;
  uint64_t result = v55;
  char v16 = v56;
  size_t v36 = 0;
  __dst = 0;
LABEL_23:
  a3[52] = v35 + v36;
  if (a4)
  {
    memcpy(__dst, v33, v36);
    uint64_t result = v55;
    char v16 = v56;
    char v15 = v57;
    char v13 = v58;
  }
  if (v8 < 0x2B)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
    char v22 = 0;
    size_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
    size_t v27 = 0;
    char v28 = 0;
    int v29 = v59;
    uint64_t v23 = __dst;
    goto LABEL_60;
  }
  unint64_t v37 = (v31 & 0xFFFFFFFFFFFFFFF8) + v30 + 8;
  char v53 = *(unsigned char *)v37;
  if (v8 < 0x30)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
    size_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
    size_t v27 = 0;
    char v28 = 0;
    int v29 = v59;
    uint64_t v23 = __dst;
    char v22 = v53;
    goto LABEL_60;
  }
  size_t v38 = (strlen((const char *)(v37 + 8)) & 0xFFFFFFFFFFFFFFF8) + v37 + 8 + 8;
  int v39 = *(unsigned __int8 *)(v37 + 8);
  if (*(unsigned char *)(v37 + 8)) {
    uint64_t v40 = (const char *)(v37 + 8);
  }
  else {
    uint64_t v40 = 0;
  }
  if (v39)
  {
    size_t v41 = strlen(v40);
    uint64_t v42 = a3[52];
    size_t v43 = v41 + 1;
    if (v41 != -1)
    {
      size_t v27 = (void *)a3[52];
      char v15 = v57;
      char v13 = v58;
      uint64_t result = v55;
      char v16 = v56;
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v42 = a3[52];
  }
  char v15 = v57;
  char v13 = v58;
  uint64_t result = v55;
  char v16 = v56;
  size_t v43 = 0;
  size_t v27 = 0;
LABEL_37:
  long long v52 = v11;
  a3[52] = v42 + v43;
  if (a4)
  {
    memcpy(v27, v40, v43);
    uint64_t result = v55;
    char v16 = v56;
    char v15 = v57;
    char v13 = v58;
  }
  char v51 = *(unsigned char *)v38;
  uint64_t v25 = *(void *)(v38 + 8);
  size_t v44 = v38 + 16;
  if (v25)
  {
    size_t v24 = (uint64_t *)a3[50];
    uint64_t v45 = v25;
    long long v46 = v24;
    do
    {
      uint64_t v48 = *(void *)v44;
      v44 += 8;
      uint64_t v47 = v48;
      if (a4)
      {
        if (a5)
        {
          AliasStream2 = (uint64_t *)GetAliasStream2(a5, v47);
          if (AliasStream2) {
            uint64_t v47 = *AliasStream2;
          }
          else {
            uint64_t v47 = 0;
          }
        }
        long long v46 = (uint64_t *)a3[50];
        *long long v46 = v47;
      }
      a3[50] = ++v46;
      --v45;
    }
    while (v45);
    char v15 = v57;
    char v13 = v58;
    uint64_t result = v55;
    char v16 = v56;
  }
  else
  {
    size_t v24 = 0;
  }
  if (v8 < 0x3B)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
LABEL_58:
    char v28 = 0;
LABEL_59:
    size_t v11 = v52;
    int v29 = v59;
    uint64_t v23 = __dst;
    char v22 = v53;
    char v26 = v51;
    goto LABEL_60;
  }
  char v21 = *(unsigned char *)v44;
  if (v8 < 0x40)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    goto LABEL_58;
  }
  char v28 = *(unsigned char *)(v44 + 8);
  if (v8 < 0x47)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    goto LABEL_59;
  }
  char v18 = *(unsigned char *)(v44 + 16);
  char v19 = *(unsigned char *)(v44 + 24);
  __int16 v20 = *(_WORD *)(v44 + 32);
  int v29 = v59;
  uint64_t v23 = __dst;
  char v22 = v53;
  char v26 = v51;
  if (v8 >= 0x4C)
  {
    char v15 = *(unsigned char *)(v44 + 40);
    char v16 = *(unsigned char *)(v44 + 48);
  }
  size_t v11 = v52;
LABEL_60:
  uint64_t v50 = a3[11];
  a3[11] = v50 + 64;
  if (a4)
  {
    *(void *)uint64_t v50 = v11;
    *(void *)(v50 + 8) = v9;
    *(void *)(v50 + 16) = v23;
    *(void *)(v50 + 24) = v27;
    *(void *)(v50 + 32) = v24;
    *(void *)(v50 + 40) = v25;
    *(_DWORD *)(v50 + 48) = v29;
    *(_WORD *)(v50 + 52) = v20;
    *(unsigned char *)(v50 + 54) = v19;
    *(unsigned char *)(v50 + 55) = v18;
    *(unsigned char *)(v50 + 56) = result;
    *(unsigned char *)(v50 + 57) = v13;
    *(unsigned char *)(v50 + 58) = v26;
    *(unsigned char *)(v50 + 59) = v15;
    *(unsigned char *)(v50 + 60) = v16;
    *(unsigned char *)(v50 + 61) = v28;
    *(unsigned char *)(v50 + 62) = v22;
    *(unsigned char *)(v50 + 63) = v21;
  }
  return result;
}

uint64_t *DecodeDYMTLRenderPipelineFunctionsDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8 = result[1];
  size_t v9 = result + 2;
  uint64_t v46 = v8;
  if (v8)
  {
    unint64_t v10 = *(uint64_t **)(a3 + 400);
    uint64_t v45 = v10;
    do
    {
      uint64_t v12 = *v9++;
      uint64_t v11 = v12;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v11);
          if (result) {
            uint64_t v11 = *result;
          }
          else {
            uint64_t v11 = 0;
          }
        }
        unint64_t v10 = *(uint64_t **)(a3 + 400);
        uint64_t *v10 = v11;
      }
      *(void *)(a3 + 400) = ++v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v45 = 0;
  }
  uint64_t v15 = *v9;
  BOOL v14 = v9 + 1;
  uint64_t v13 = v15;
  size_t v44 = (uint64_t *)v15;
  if (v15)
  {
    char v16 = *(uint64_t **)(a3 + 400);
    size_t v43 = v16;
    do
    {
      uint64_t v18 = *v14++;
      uint64_t v17 = v18;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v17);
          if (result) {
            uint64_t v17 = *result;
          }
          else {
            uint64_t v17 = 0;
          }
        }
        char v16 = *(uint64_t **)(a3 + 400);
        *char v16 = v17;
      }
      *(void *)(a3 + 400) = ++v16;
      --v13;
    }
    while (v13);
  }
  else
  {
    size_t v43 = 0;
  }
  uint64_t v21 = *v14;
  char v19 = v14 + 1;
  __int16 v20 = (uint64_t *)v21;
  if (v21)
  {
    char v22 = *(uint64_t **)(a3 + 400);
    uint64_t v23 = v20;
    uint64_t v42 = v22;
    do
    {
      uint64_t v25 = *v19++;
      uint64_t v24 = v25;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v24);
          if (result) {
            uint64_t v24 = *result;
          }
          else {
            uint64_t v24 = 0;
          }
        }
        char v22 = *(uint64_t **)(a3 + 400);
        uint64_t *v22 = v24;
      }
      *(void *)(a3 + 400) = ++v22;
      uint64_t v23 = (uint64_t *)((char *)v23 - 1);
    }
    while (v23);
  }
  else
  {
    uint64_t v42 = 0;
  }
  uint64_t v28 = *v19;
  size_t v27 = v19 + 1;
  char v26 = (uint64_t *)v28;
  if (v28)
  {
    int v29 = *(uint64_t **)(a3 + 400);
    unint64_t v30 = v26;
    size_t v31 = v29;
    do
    {
      uint64_t v33 = *v27++;
      uint64_t v32 = v33;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v32);
          if (result) {
            uint64_t v32 = *result;
          }
          else {
            uint64_t v32 = 0;
          }
        }
        size_t v31 = *(uint64_t **)(a3 + 400);
        uint64_t *v31 = v32;
      }
      *(void *)(a3 + 400) = ++v31;
      unint64_t v30 = (uint64_t *)((char *)v30 - 1);
    }
    while (v30);
  }
  else
  {
    int v29 = 0;
  }
  uint64_t v34 = *v27;
  if (*v27)
  {
    uint64_t v35 = *(uint64_t **)(a3 + 400);
    size_t v36 = v27 + 1;
    uint64_t v37 = v34;
    size_t v38 = v35;
    do
    {
      uint64_t v40 = *v36++;
      uint64_t v39 = v40;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v39);
          if (result) {
            uint64_t v39 = *result;
          }
          else {
            uint64_t v39 = 0;
          }
        }
        size_t v38 = *(uint64_t **)(a3 + 400);
        *size_t v38 = v39;
      }
      *(void *)(a3 + 400) = ++v38;
      --v37;
    }
    while (v37);
  }
  else
  {
    uint64_t v35 = 0;
  }
  size_t v41 = *(uint64_t ***)(a3 + 24);
  *(void *)(a3 + 24) = v41 + 10;
  if (a4)
  {
    *size_t v41 = v43;
    v41[1] = v44;
    v41[2] = v29;
    v41[3] = v26;
    v41[4] = v35;
    v41[5] = (uint64_t *)v34;
    _DWORD v41[6] = v42;
    v41[7] = v20;
    v41[8] = v45;
    v41[9] = (uint64_t *)v46;
  }
  return result;
}

size_t DecodeDYMTLIntersectionFunctionDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unsigned int v7 = (const char *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 8);
  size_t v9 = (const char *)((strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8) + a1 + 16 + 8);
  if (*(unsigned char *)(a1 + 16))
  {
    size_t v10 = strlen(v7);
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v11 = v10 + 1;
    if (v10 != -1)
    {
      uint64_t v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }
  size_t v11 = 0;
  uint64_t v12 = 0;
LABEL_6:
  *uint64_t v13 = v14 + v11;
  if (a4) {
    memcpy(v12, v7, v11);
  }
  size_t result = strlen(v9);
  char v16 = (uint64_t *)&v9[(result & 0xFFFFFFFFFFFFFFF8) + 8];
  int v17 = *(unsigned __int8 *)v9;
  if (!*v9) {
    size_t v9 = 0;
  }
  if (v17)
  {
    size_t result = strlen(v9);
    uint64_t v18 = a3 + 52;
    uint64_t v19 = a3[52];
    size_t v20 = result + 1;
    if (result != -1)
    {
      uint64_t v21 = (void *)a3[52];
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v18 = a3 + 52;
    uint64_t v19 = a3[52];
  }
  size_t v20 = 0;
  uint64_t v21 = 0;
LABEL_15:
  *uint64_t v18 = v19 + v20;
  if (a4) {
    size_t result = (size_t)memcpy(v21, v9, v20);
  }
  if (*v16)
  {
    uint64_t v22 = a3[15];
    size_t result = DecodeDYMTLFunctionConstantValues((size_t)(v16 + 1), *v16, a3, a4);
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = a3[1];
  a3[1] = v23 + 48;
  if (a4)
  {
    *(void *)uint64_t v23 = v22;
    *(void *)(v23 + 8) = v12;
    *(void *)(v23 + 16) = 0;
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = v21;
    *(unsigned char *)(v23 + 40) = v8;
    *(_DWORD *)(v23 + 41) = 0;
    *(_DWORD *)(v23 + 44) = 0;
  }
  return result;
}

size_t DecodeDYMTLResidencySetDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v8 = *(unsigned __int8 *)(a1 + 24);
  size_t result = a1 + 24;
  int v7 = v8;
  uint64_t v9 = *(void *)(result - 16);
  uint64_t v10 = *(void *)(result - 8);
  if (v8) {
    size_t v11 = (const char *)result;
  }
  else {
    size_t v11 = 0;
  }
  if (v7)
  {
    size_t result = strlen(v11);
    uint64_t v12 = a3 + 52;
    uint64_t v13 = a3[52];
    size_t v14 = result + 1;
    if (result != -1)
    {
      uint64_t v15 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = a3 + 52;
    uint64_t v13 = a3[52];
  }
  size_t v14 = 0;
  uint64_t v15 = 0;
LABEL_9:
  void *v12 = v13 + v14;
  if (a4)
  {
    size_t result = (size_t)memcpy(v15, v11, v14);
    uint64_t v16 = *a3;
    *a3 += 24;
    *(void *)uint64_t v16 = v10;
    *(void *)(v16 + 8) = v15;
    *(unsigned char *)(v16 + 16) = v9;
    *(_DWORD *)(v16 + 17) = 0;
    *(_DWORD *)(v16 + 20) = 0;
  }
  else
  {
    *a3 += 24;
  }
  return result;
}

int16x4_t DecodeDYIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  memset(v40, 0, sizeof(v40));
  size_t v41 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  unsigned int v6 = *(_DWORD *)a1;
  long long v35 = *(_OWORD *)(a1 + 8);
  WORD6(v40[0]) = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 48);
  int16x4_t result = vmovn_s32(vuzp1q_s32(*(int32x4_t *)(a1 + 32), *(int32x4_t *)(a1 + 56)));
  *(int16x4_t *)((char *)v40 + 14) = result;
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)&v40[0] = __PAIR64__(*(void *)(a1 + 72), v7);
  uint64_t v10 = (int32x4_t *)(a1 + 88);
  BYTE6(v40[1]) = v9;
  uint64_t v11 = v9;
  if ((_BYTE)v9)
  {
    uint64_t v12 = (int16x4_t *)((char *)&v36 + 12);
    do
    {
      int32x4_t v13 = *v10;
      v12[-2].i32[1] = v10[1].i64[1];
      *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
      LODWORD(v14) = v10[1].i32[0];
      HIDWORD(v14) = v10[2].i32[0];
      v13.i64[1] = v14;
      int16x4_t result = vmovn_s32(v13);
      v12[-1] = result;
      uint64_t v15 = v10[2].i64[1];
      v10 += 3;
      v12->i16[0] = v15;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  DWORD2(v40[0]) = v10->i64[0];
  if (v6 <= 0x29)
  {
    uint64_t v18 = (int32x4_t *)*((void *)&v40[1] + 1);
    size_t v16 = v41;
  }
  else
  {
    size_t v16 = v10->u64[1];
    int v17 = v10 + 1;
    if (v16) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v6 >= 0x2E)
    {
      if (v16) {
        uint64_t v19 = *(void **)(a3 + 416);
      }
      else {
        uint64_t v19 = 0;
      }
      *(void *)(a3 + 416) += v16;
      if (a4) {
        memcpy(v19, v18, v16);
      }
      goto LABEL_30;
    }
  }
  if (!v18) {
    goto LABEL_29;
  }
  CFErrorRef error = 0;
  CFDataRef v20 = (const __CFData *)[objc_alloc((Class)NSData) initWithBytesNoCopy:v18 length:v16 freeWhenDone:0];
  uint64_t v21 = (void *)CFPropertyListCreateWithData(0, v20, 0, 0, &error);
  if (error)
  {
    CFStringRef v22 = CFErrorCopyDescription(error);
    CFStringRef v23 = v22;
    if (s_logUsingOsLog)
    {
      uint64_t v24 = gt_default_log();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        CStringPtr = CFStringGetCStringPtr(v23, 0x8000100u);
        *(_DWORD *)long long buf = 136315138;
        size_t v44 = CStringPtr;
        _os_log_error_impl(&def_1C1270, v24, OS_LOG_TYPE_ERROR, "warning: %s", buf, 0xCu);
      }
    }
    else
    {
      char v26 = __stderrp;
      uint64_t v24 = +[NSString stringWithFormat:@"warning: %s", CFStringGetCStringPtr(v22, 0x8000100u)];
      fprintf(v26, "%s\n", (const char *)[v24 UTF8String]);
    }

    CFRelease(v23);
    CFRelease(error);
  }

  if (v21)
  {
    id v28 = +[NSKeyedArchiver archivedDataWithRootObject:v21 requiringSecureCoding:1 error:0];
    id v29 = [v28 bytes];
    size_t v30 = (size_t)[v28 length];
    size_t v16 = v30;
    if (v30) {
      uint64_t v19 = *(void **)(a3 + 416);
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)(a3 + 416) += v30;
    if (a4) {
      memcpy(v19, v29, v30);
    }
  }
  else
  {
LABEL_29:
    uint64_t v19 = 0;
    size_t v16 = 0;
  }
LABEL_30:
  *((void *)&v40[1] + 1) = v19;
  size_t v41 = v16;
  uint64_t v31 = *(void *)(a3 + 384);
  *(void *)(a3 + 384) = v31 + 120;
  if (a4)
  {
    long long v32 = v40[0];
    *(_OWORD *)(v31 + 64) = v39;
    *(_OWORD *)(v31 + 80) = v32;
    *(_OWORD *)(v31 + 96) = v40[1];
    *(void *)(v31 + 112) = v41;
    long long v33 = v36;
    *(_OWORD *)uint64_t v31 = v35;
    *(_OWORD *)(v31 + 16) = v33;
    int16x4_t result = (int16x4_t)v37;
    long long v34 = v38;
    *(_OWORD *)(v31 + 32) = v37;
    *(_OWORD *)(v31 + 48) = v34;
  }
  return result;
}

size_t DecodeDYMTLDeviceDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t v7 = *(void *)a1;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v9 = (const char *)(a1 + 16);
  size_t result = strlen((const char *)(a1 + 16));
  uint64_t v11 = &v9[result & 0xFFFFFFFFFFFFFFF8];
  int v12 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    int32x4_t v13 = v9;
  }
  else {
    int32x4_t v13 = 0;
  }
  uint64_t v60 = v13;
  uint64_t v14 = v11 + 40;
  __int16 v57 = *((_WORD *)v11 + 4);
  char v58 = v11[32];
  __int16 v55 = *((_WORD *)v11 + 12);
  __int16 v56 = *((_WORD *)v11 + 8);
  if (v8 == 1)
  {
    uint64_t v15 = 0;
    size_t v16 = 0;
    int v17 = 0;
    char v18 = 0;
    char v54 = 0;
  }
  else
  {
    uint64_t v19 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8];
    if (*v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    char v20 = v8;
    char v21 = v7;
    size_t v7 = (size_t)&v19[(strlen(v19 + 8) & 0xFFFFFFFFFFFFFFF8) + 8];
    CFStringRef v22 = (const char *)(v7 + 8);
    if (v19[8]) {
      size_t v16 = v19 + 8;
    }
    else {
      size_t v16 = 0;
    }
    size_t result = strlen((const char *)(v7 + 8));
    CFStringRef v23 = &v22[result & 0xFFFFFFFFFFFFFFF8];
    int v24 = *(unsigned __int8 *)(v7 + 8);
    LOBYTE(v7) = v21;
    LOBYTE(v8) = v20;
    if (v24) {
      int v17 = v22;
    }
    else {
      int v17 = 0;
    }
    char v18 = v23[8];
    uint64_t v14 = v23 + 24;
    char v54 = v23[16];
  }
  if (v7 < 0xCu)
  {
    uint64_t v47 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    char v52 = 0;
    char v48 = 0;
    long long v53 = 0u;
    int16x8_t v51 = 0u;
    long long v59 = 0u;
    if (v12) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  long long v53 = *(_OWORD *)v14;
  if (v7 < 0xFu)
  {
    uint64_t v47 = 0;
    BYTE4(v49) = 0;
    char v52 = 0;
    goto LABEL_25;
  }
  char v52 = v14[16];
  if (v7 < 0x19u)
  {
    uint64_t v47 = 0;
    BYTE4(v49) = 0;
LABEL_25:
    uint64_t v50 = 0;
    char v48 = 0;
    LOBYTE(v49) = 0;
    long long v59 = 0u;
    int16x8_t v51 = 0u;
    if (v12) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  uint64_t v25 = v14 + 32;
  int16x8_t v26 = 0uLL;
  long long v59 = 0u;
  if (*((void *)v14 + 3) == -1)
  {
    uint64_t v50 = 0;
  }
  else
  {
    v27.i32[0] = *((void *)v14 + 3);
    v27.i32[1] = *(_DWORD *)v25;
    int16x8_t v26 = vuzp1q_s16((int16x8_t)vmovn_hight_s64(v27, *(int64x2_t *)(v14 + 40)), (int16x8_t)vuzp1q_s32(*(int32x4_t *)(v14 + 56), *(int32x4_t *)(v14 + 72)));
    uint64_t v25 = v14 + 104;
    LOWORD(v50) = *((_WORD *)v14 + 48);
    WORD2(v50) = *((_WORD *)v14 + 44);
  }
  int16x8_t v51 = v26;
  if (v7 < 0x1Cu)
  {
    uint64_t v47 = 0;
    BYTE4(v49) = 0;
    goto LABEL_32;
  }
  BYTE4(v49) = *v25;
  if (v7 == 28)
  {
    uint64_t v47 = 0;
LABEL_32:
    LOBYTE(v49) = 0;
    goto LABEL_33;
  }
  LOBYTE(v49) = v25[8];
  if (v7 < 0x2Cu)
  {
    uint64_t v47 = 0;
LABEL_33:
    char v48 = 0;
    if (v12) {
      goto LABEL_34;
    }
LABEL_39:
    id v29 = (void *)(a3 + 416);
    uint64_t v30 = *(void *)(a3 + 416);
    id v28 = v60;
    goto LABEL_40;
  }
  uint64_t v47 = *((void *)v25 + 2);
  if (v7 < 0x35u) {
    goto LABEL_33;
  }
  long long v59 = *(_OWORD *)(v25 + 24);
  char v48 = v25[40];
  if (!v12) {
    goto LABEL_39;
  }
LABEL_34:
  id v28 = v60;
  size_t result = strlen(v60);
  id v29 = (void *)(a3 + 416);
  uint64_t v30 = *(void *)(a3 + 416);
  size_t v31 = result + 1;
  if (result != -1)
  {
    long long v32 = *(void **)(a3 + 416);
    goto LABEL_41;
  }
LABEL_40:
  size_t v31 = 0;
  long long v32 = 0;
LABEL_41:
  *id v29 = v30 + v31;
  if (a4) {
    size_t result = (size_t)memcpy(v32, v28, v31);
  }
  if (v15)
  {
    size_t result = strlen(v15);
    long long v33 = (void *)(a3 + 416);
    uint64_t v34 = *(void *)(a3 + 416);
    char v35 = v18;
    size_t v36 = result + 1;
    if (result != -1)
    {
      long long v37 = *(void **)(a3 + 416);
      goto LABEL_48;
    }
  }
  else
  {
    char v35 = v18;
    long long v33 = (void *)(a3 + 416);
    uint64_t v34 = *(void *)(a3 + 416);
  }
  size_t v36 = 0;
  long long v37 = 0;
LABEL_48:
  *long long v33 = v34 + v36;
  if (a4) {
    size_t result = (size_t)memcpy(v37, v15, v36);
  }
  if (v16)
  {
    size_t result = strlen(v16);
    long long v38 = (void *)(a3 + 416);
    uint64_t v39 = *(void *)(a3 + 416);
    size_t v40 = result + 1;
    if (result != -1)
    {
      size_t v41 = *(void **)(a3 + 416);
      goto LABEL_55;
    }
  }
  else
  {
    long long v38 = (void *)(a3 + 416);
    uint64_t v39 = *(void *)(a3 + 416);
  }
  size_t v40 = 0;
  size_t v41 = 0;
LABEL_55:
  *long long v38 = v39 + v40;
  if (a4) {
    size_t result = (size_t)memcpy(v41, v16, v40);
  }
  if (v17)
  {
    size_t result = strlen(v17);
    uint64_t v42 = (void *)(a3 + 416);
    uint64_t v43 = *(void *)(a3 + 416);
    size_t v44 = result + 1;
    if (result != -1)
    {
      uint64_t v45 = *(void **)(a3 + 416);
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v42 = (void *)(a3 + 416);
    uint64_t v43 = *(void *)(a3 + 416);
  }
  size_t v44 = 0;
  uint64_t v45 = 0;
LABEL_62:
  void *v42 = v43 + v44;
  if (a4)
  {
    size_t result = (size_t)memcpy(v45, v17, v44);
    uint64_t v46 = *(void *)(a3 + 312);
    *(void *)(a3 + 312) = v46 + 112;
    *(_OWORD *)uint64_t v46 = v53;
    *(void *)(v46 + 16) = v47;
    *(_OWORD *)(v46 + 24) = v59;
    *(int16x8_t *)(v46 + 40) = v51;
    *(_WORD *)(v46 + 56) = WORD2(v50);
    *(_WORD *)(v46 + 58) = v50;
    *(_DWORD *)(v46 + 60) = 0;
    *(void *)(v46 + 64) = v32;
    *(void *)(v46 + 72) = v37;
    *(void *)(v46 + 80) = v41;
    *(void *)(v46 + 88) = v45;
    *(_WORD *)(v46 + 96) = v57;
    *(_WORD *)(v46 + 98) = v56;
    *(_WORD *)(v46 + 100) = v55;
    *(unsigned char *)(v46 + 102) = v8;
    *(unsigned char *)(v46 + 103) = BYTE4(v49);
    *(unsigned char *)(v46 + 104) = v7;
    *(unsigned char *)(v46 + 105) = v58;
    *(unsigned char *)(v46 + 106) = v35;
    *(unsigned char *)(v46 + 107) = v54;
    *(unsigned char *)(v46 + 108) = v52;
    *(unsigned char *)(v46 + 109) = v49;
    *(unsigned char *)(v46 + 110) = v48;
    *(unsigned char *)(v46 + 111) = 0;
  }
  else
  {
    *(void *)(a3 + 312) += 112;
  }
  return result;
}

size_t DecodeDYMTLCounterSampleBufferDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  size_t v7 = (char *)(a1 + 8);
  size_t v8 = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8) + a1 + 8;
  int v9 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0;
  }
  long long __s = v10;
  size_t v11 = (strlen((const char *)(v8 + 8)) & 0xFFFFFFFFFFFFFFF8) + v8 + 8;
  int v53 = *(unsigned __int8 *)(v8 + 8);
  if (*(unsigned char *)(v8 + 8)) {
    int v12 = (char *)(v8 + 8);
  }
  else {
    int v12 = 0;
  }
  __int16 v55 = v12;
  unsigned int v13 = *(_DWORD *)(v11 + 16);
  uint64_t v14 = (const char *)(v11 + 24);
  unsigned int v52 = v13;
  if (v13)
  {
    uint64_t v51 = a3[49];
    while (1)
    {
      uint64_t v15 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8];
      size_t v16 = v15 + 8;
      int v17 = *(unsigned __int8 *)v14;
      if (*v14) {
        char v18 = v14;
      }
      else {
        char v18 = 0;
      }
      size_t v19 = strlen(v15 + 8);
      int v20 = *((unsigned __int8 *)v15 + 8);
      if (v20) {
        char v21 = v16;
      }
      else {
        char v21 = 0;
      }
      if (v17)
      {
        size_t v22 = strlen(v18);
        uint64_t v23 = a3[52];
        size_t v24 = v22 + 1;
        if (v22 != -1)
        {
          uint64_t v25 = (void *)a3[52];
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v23 = a3[52];
      }
      size_t v24 = 0;
      uint64_t v25 = 0;
LABEL_20:
      a3[52] = v23 + v24;
      if (a4) {
        memcpy(v25, v18, v24);
      }
      if (!v20)
      {
        uint64_t v27 = a3[52];
LABEL_26:
        size_t v28 = 0;
        id v29 = 0;
        goto LABEL_27;
      }
      size_t v26 = strlen(v21);
      uint64_t v27 = a3[52];
      size_t v28 = v26 + 1;
      if (v26 == -1) {
        goto LABEL_26;
      }
      id v29 = (void *)a3[52];
LABEL_27:
      a3[52] = v27 + v28;
      if (a4)
      {
        memcpy(v29, v21, v28);
        uint64_t v30 = (void *)a3[49];
        a3[49] = v30 + 2;
        *uint64_t v30 = v25;
        v30[1] = v29;
      }
      else
      {
        a3[49] += 16;
      }
      uint64_t v14 = &v16[(v19 & 0xFFFFFFFFFFFFFFF8) + 8];
      if (!--v13) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v51 = 0;
LABEL_33:
  size_t result = strlen(v14);
  long long v32 = &v14[result & 0xFFFFFFFFFFFFFFF8];
  int v33 = *(unsigned __int8 *)v14;
  if (*v14) {
    uint64_t v34 = v14;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = *((void *)v32 + 1);
  uint64_t v36 = *((void *)v32 + 2);
  if (v9)
  {
    size_t result = strlen(__s);
    long long v37 = a3 + 52;
    uint64_t v38 = a3[52];
    size_t v39 = result + 1;
    if (result != -1)
    {
      size_t v40 = (void *)a3[52];
      size_t v41 = v55;
      goto LABEL_41;
    }
  }
  else
  {
    long long v37 = a3 + 52;
    uint64_t v38 = a3[52];
  }
  size_t v41 = v55;
  size_t v39 = 0;
  size_t v40 = 0;
LABEL_41:
  *long long v37 = v38 + v39;
  if (a4) {
    size_t result = (size_t)memcpy(v40, __s, v39);
  }
  if (v53)
  {
    size_t result = strlen(v41);
    uint64_t v42 = a3 + 52;
    uint64_t v43 = a3[52];
    size_t v44 = result + 1;
    if (result != -1)
    {
      uint64_t v45 = (void *)a3[52];
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v42 = a3 + 52;
    uint64_t v43 = a3[52];
  }
  size_t v44 = 0;
  uint64_t v45 = 0;
LABEL_48:
  void *v42 = v43 + v44;
  if (a4) {
    size_t result = (size_t)memcpy(v45, v41, v44);
  }
  if (v33)
  {
    size_t result = strlen(v34);
    uint64_t v46 = a3 + 52;
    uint64_t v47 = a3[52];
    size_t v48 = result + 1;
    if (result != -1)
    {
      uint64_t v49 = (void *)a3[52];
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v46 = a3 + 52;
    uint64_t v47 = a3[52];
  }
  size_t v48 = 0;
  uint64_t v49 = 0;
LABEL_55:
  *uint64_t v46 = v47 + v48;
  if (a4)
  {
    size_t result = (size_t)memcpy(v49, v34, v48);
    uint64_t v50 = a3[38];
    a3[38] = v50 + 48;
    *(void *)uint64_t v50 = v49;
    *(void *)(v50 + 8) = v40;
    *(void *)(v50 + 16) = v45;
    *(void *)(v50 + 24) = v51;
    *(void *)(v50 + 32) = v52;
    *(_DWORD *)(v50 + 40) = v36;
    *(unsigned char *)(v50 + 44) = v35;
    *(_WORD *)(v50 + 45) = 0;
    *(unsigned char *)(v50 + 47) = 0;
  }
  else
  {
    a3[38] += 48;
  }
  return result;
}

size_t DecodeDYMTLAccelerationStructureDescriptor(size_t result, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)result;
  int v9 = *(unsigned __int8 *)(result + 8);
  unsigned int v104 = *(unsigned __int8 *)(result + 16);
  char v105 = *(unsigned char *)(result + 8);
  if (v9 == 3)
  {
    if (v8 < 0x4E)
    {
      unint64_t v65 = 0;
      char v66 = 0;
      char v67 = 0;
      if (!a4) {
        goto LABEL_193;
      }
    }
    else
    {
      unint64_t v65 = *(void *)(result + 120);
      char v66 = *(unsigned char *)(result + 128);
      char v67 = *(unsigned char *)(result + 136);
      if (!a4) {
        goto LABEL_193;
      }
    }
    uint64_t v94 = *(void *)(result + 24);
    uint64_t v107 = *(void *)(result + 32);
    unint64_t v92 = *(void *)(result + 40);
    unint64_t v90 = *(void *)(result + 48);
    uint64_t v86 = *(void *)(result + 56);
    uint64_t v85 = *(void *)(result + 64);
    unint64_t v70 = *(void *)(result + 72);
    unint64_t v69 = *(void *)(result + 80);
    int64x2_t v95 = *(int64x2_t *)(result + 88);
    int v79 = *(_DWORD *)(result + 104);
    char v78 = *(unsigned char *)(result + 112);
    if (a5)
    {
      int64x2_t v125 = *(int64x2_t *)(result + 88);
      char v127 = *(unsigned char *)(result + 112);
      uint64_t v129 = *(void *)(result + 64);
      char v132 = v67;
      AliasStream2 = (uint64_t *)GetAliasStream2(a5, v94);
      char v136 = v66;
      if (AliasStream2) {
        uint64_t v97 = *AliasStream2;
      }
      else {
        uint64_t v97 = 0;
      }
      uint64_t v99 = (unint64_t *)GetAliasStream2(a5, v92);
      if (v99) {
        unint64_t v92 = *v99;
      }
      else {
        unint64_t v92 = 0;
      }
      uint64_t v100 = (uint64_t *)GetAliasStream2(a5, v86);
      if (v100) {
        uint64_t v86 = *v100;
      }
      else {
        uint64_t v86 = 0;
      }
      char v101 = (unint64_t *)GetAliasStream2(a5, v70);
      if (v101) {
        unint64_t v70 = *v101;
      }
      else {
        unint64_t v70 = 0;
      }
      size_t result = v104;
      uint64_t v93 = v97;
      char v66 = v136;
      char v67 = v132;
      uint64_t v85 = v129;
      char v78 = v127;
      int64x2_t v95 = v125;
    }
    else
    {
      size_t result = *(unsigned __int8 *)(result + 16);
      uint64_t v93 = v94;
    }
    int32x2_t v98 = vmovn_s64(v95);
    unint64_t v91 = HIDWORD(v92);
    unint64_t v89 = HIDWORD(v90);
    unint64_t v88 = v90 >> 40;
    unint64_t v87 = HIWORD(v90);
    unint64_t v84 = HIDWORD(v70);
    uint64_t v83 = HIDWORD(v69);
    uint64_t v82 = v65 >> 8;
    unint64_t v80 = v65 & 0xFFFFFFFFFF000000;
    uint64_t v81 = v65 >> 16;
    goto LABEL_192;
  }
  unsigned int v126 = *(_DWORD *)result;
  if (v9 == 2)
  {
    uint64_t v107 = *(void *)(result + 24);
    unint64_t v135 = *(void *)(result + 32);
    int v68 = *(_DWORD *)(result + 40);
    LODWORD(v69) = *(_DWORD *)(result + 48);
    unint64_t v70 = *(unsigned int *)(result + 56);
    unint64_t v71 = (uint64_t *)(result + 64);
    uint64_t v72 = (uint64_t *)a3[50];
    a3[50] = &v72[v70];
    if (!a4) {
      goto LABEL_151;
    }
    if (a5)
    {
      size_t result = GetAliasStream2(a5, v107);
      if (!result)
      {
        uint64_t v107 = 0;
        if (!v70) {
          goto LABEL_151;
        }
        goto LABEL_145;
      }
      uint64_t v107 = *(void *)result;
    }
    if (!v70) {
      goto LABEL_151;
    }
LABEL_145:
    long long v73 = v72;
    unint64_t v74 = v70;
    do
    {
      uint64_t v76 = *v71++;
      uint64_t v75 = v76;
      if (a5)
      {
        size_t result = GetAliasStream2(a5, v75);
        if (result) {
          uint64_t v75 = *(void *)result;
        }
        else {
          uint64_t v75 = 0;
        }
      }
      *v73++ = v75;
      --v74;
    }
    while (v74);
LABEL_151:
    if (v126 < 0x39)
    {
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      uint64_t v86 = 0;
      unint64_t v77 = 0;
      uint64_t v85 = 0;
      LOBYTE(v82) = 0;
      LOBYTE(v81) = 0;
      uint64_t v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      if (!a4) {
        goto LABEL_193;
      }
    }
    else
    {
      LOBYTE(v65) = *(unsigned char *)v71;
      unint64_t v77 = v71[1];
      if (a5)
      {
        size_t result = GetAliasStream2(a5, v77);
        if (result) {
          unint64_t v77 = *(void *)result;
        }
        else {
          unint64_t v77 = 0;
        }
      }
      uint64_t v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      uint64_t v86 = v71[2];
      uint64_t v83 = v71[3];
      if (v126 < 0x4E)
      {
        uint64_t v85 = 0;
        LOBYTE(v82) = 0;
        LOBYTE(v81) = 0;
        if (!a4) {
          goto LABEL_193;
        }
      }
      else
      {
        uint64_t v85 = v71[4];
        uint64_t v82 = v71[5];
        uint64_t v81 = v71[6];
        if (!a4) {
          goto LABEL_193;
        }
      }
    }
    char v67 = 0;
    char v66 = 0;
    char v78 = 0;
    int v79 = 0;
    unint64_t v80 = 0;
    unint64_t v91 = HIDWORD(v77);
    LODWORD(v90) = v135;
    unint64_t v89 = HIDWORD(v135);
    unint64_t v88 = v135 >> 40;
    unint64_t v87 = HIWORD(v135);
    int32x2_t v98 = 0;
    LODWORD(v92) = v77;
    goto LABEL_179;
  }
  if (v9 == 1)
  {
    unint64_t v10 = result + 32;
    uint64_t v107 = *(void *)(result + 24);
    if (v107)
    {
      uint64_t v11 = 0;
      uint64_t v103 = a3[37];
      while (2)
      {
        int v12 = (int32x2_t *)a3[37];
        a3[37] = v12 + 17;
        __int8 v115 = *(unsigned char *)(v10 + 16);
        __int8 v116 = *(unsigned char *)v10;
        __int32 v113 = *(_DWORD *)(v10 + 8);
        __int8 v114 = *(unsigned char *)(v10 + 24);
        switch(*(unsigned char *)v10)
        {
          case 1:
            if (v8 < 0x3C)
            {
              uint64_t v14 = 0;
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              int v17 = (const char *)(v10 + 88);
              uint64_t v13 = 30;
              if (!a4) {
                goto LABEL_85;
              }
            }
            else
            {
              uint64_t v13 = *(unsigned __int8 *)(v10 + 88);
              uint64_t v15 = *(void *)(v10 + 96);
              uint64_t v14 = *(void *)(v10 + 104);
              if (v8 < 0x4E)
              {
                uint64_t v16 = 0;
                int v17 = (const char *)(v10 + 112);
                if (!a4) {
                  goto LABEL_85;
                }
              }
              else
              {
                uint64_t v16 = *(unsigned __int8 *)(v10 + 112);
                int v17 = (const char *)(v10 + 120);
                if (!a4) {
                  goto LABEL_85;
                }
              }
            }
            uint64_t v119 = v13;
            uint64_t v117 = v16;
            uint64_t v128 = v15;
            uint64_t v120 = v14;
            int32x2_t v130 = *(int32x2_t *)(v10 + 40);
            uint64_t v48 = *(void *)(v10 + 56);
            uint64_t v121 = *(void *)(v10 + 48);
            v124.i8[0] = *(unsigned char *)(v10 + 72);
            int32x2_t v122 = *(int32x2_t *)(v10 + 64);
            uint64_t v123 = *(void *)(v10 + 80);
            if (!a5)
            {
              uint64_t v118 = *(void *)(v10 + 32);
              uint64_t v133 = *(void *)(v10 + 56);
              goto LABEL_87;
            }
            uint64_t v49 = (uint64_t *)GetAliasStream2(a5, *(void *)(v10 + 32));
            if (v49) {
              uint64_t v118 = *v49;
            }
            else {
              uint64_t v118 = 0;
            }
            unsigned int v52 = (uint64_t *)GetAliasStream2(a5, v48);
            if (v52) {
              uint64_t v53 = *v52;
            }
            else {
              uint64_t v53 = 0;
            }
            uint64_t v55 = v128;
            uint64_t v133 = v53;
            uint64_t v54 = a5;
            goto LABEL_109;
          case 2:
            int v17 = (const char *)(v10 + 64);
            if (!a4) {
              goto LABEL_85;
            }
            int32x2_t v122 = *(int32x2_t *)(v10 + 40);
            uint64_t v120 = *(void *)(v10 + 48);
            uint64_t v128 = *(void *)(v10 + 56);
            if (a5)
            {
              size_t result = GetAliasStream2(a5, *(void *)(v10 + 32));
              if (result)
              {
                uint64_t v123 = 0;
                uint64_t v118 = 0;
                int32x2_t v130 = 0;
                uint64_t v121 = 0;
                v124.i8[0] = 0;
                uint64_t v117 = 0;
                uint64_t v119 = 0;
                unint64_t v18 = 0;
                uint64_t v111 = 0;
                uint64_t v112 = 0;
                uint64_t v109 = 0;
                uint64_t v110 = 0;
                uint64_t v108 = 0;
                uint64_t v133 = *(void *)result;
                goto LABEL_111;
              }
              uint64_t v133 = 0;
            }
            else
            {
              uint64_t v133 = *(void *)(v10 + 32);
            }
            goto LABEL_86;
          case 3:
            int32x2_t v19 = *(int32x2_t *)(v10 + 32);
            unint64_t v20 = v10 + 40;
            int32x2_t v130 = v19;
            if (v19)
            {
              uint64_t v118 = a3[43];
              do
              {
                char v21 = (uint64_t *)a3[43];
                a3[43] = v21 + 2;
                if (a4)
                {
                  uint64_t v22 = *(void *)v20;
                  uint64_t v23 = *(void *)(v20 + 8);
                  if (a5)
                  {
                    size_t result = GetAliasStream2(a5, v22);
                    if (result) {
                      uint64_t v22 = *(void *)result;
                    }
                    else {
                      uint64_t v22 = 0;
                    }
                  }
                  uint64_t *v21 = v22;
                  v21[1] = v23;
                }
                v20 += 16;
                --*(void *)&v19;
              }
              while (v19);
            }
            else
            {
              uint64_t v118 = 0;
            }
            uint64_t v121 = *(void *)(v20 + 8);
            uint64_t v133 = *(void *)(v20 + 16);
            v124.i8[0] = *(unsigned char *)(v20 + 32);
            uint64_t v123 = *(void *)(v20 + 40);
            if (v8 <= 0x3B)
            {
              uint64_t v120 = 0;
              uint64_t v128 = 0;
              uint64_t v117 = 0;
              int v17 = (const char *)(v20 + 48);
              uint64_t v119 = 30;
              if (!a4) {
                goto LABEL_85;
              }
            }
            else
            {
              uint64_t v119 = *(unsigned __int8 *)(v20 + 48);
              uint64_t v128 = *(void *)(v20 + 56);
              uint64_t v120 = *(void *)(v20 + 64);
              if (v8 < 0x4E)
              {
                uint64_t v117 = 0;
                int v17 = (const char *)(v20 + 72);
                if (!a4)
                {
LABEL_85:
                  uint64_t v133 = 0;
                  int32x2_t v122 = 0;
                  uint64_t v128 = 0;
                  uint64_t v120 = 0;
LABEL_86:
                  uint64_t v123 = 0;
                  uint64_t v118 = 0;
                  int32x2_t v130 = 0;
                  uint64_t v121 = 0;
                  v124.i8[0] = 0;
                  uint64_t v117 = 0;
                  uint64_t v119 = 0;
                  goto LABEL_87;
                }
              }
              else
              {
                uint64_t v117 = *(unsigned __int8 *)(v20 + 72);
                int v17 = (const char *)(v20 + 80);
                if (!a4) {
                  goto LABEL_85;
                }
              }
            }
            int32x2_t v122 = *(int32x2_t *)(v20 + 24);
            if (!a5) {
              goto LABEL_87;
            }
            uint64_t v50 = (uint64_t *)GetAliasStream2(a5, v133);
            if (v50) {
              uint64_t v133 = *v50;
            }
            else {
              uint64_t v133 = 0;
            }
            uint64_t v54 = a5;
            uint64_t v55 = v128;
LABEL_109:
            size_t result = GetAliasStream2(v54, v55);
            if (!result)
            {
              uint64_t v128 = 0;
LABEL_87:
              unint64_t v18 = 0;
              uint64_t v111 = 0;
              uint64_t v112 = 0;
              uint64_t v109 = 0;
              uint64_t v110 = 0;
              uint64_t v108 = 0;
              goto LABEL_111;
            }
            unint64_t v18 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v108 = 0;
            uint64_t v128 = *(void *)result;
LABEL_111:
            if (v8 < 0x38)
            {
              uint64_t v60 = 0;
              uint64_t v61 = 0;
              int32x2_t v62 = 0;
              int32x2_t v63 = 0;
              unint64_t v10 = (unint64_t)v17;
              if (!a4) {
                goto LABEL_134;
              }
              goto LABEL_128;
            }
            size_t result = strlen(v17);
            size_t v56 = result;
            if (*v17) {
              __int16 v57 = v17;
            }
            else {
              __int16 v57 = 0;
            }
            if (*v17)
            {
              size_t result = strlen(v57);
              uint64_t v58 = a3[52];
              size_t v59 = result + 1;
              if (result != -1)
              {
                uint64_t v60 = (void *)a3[52];
                goto LABEL_122;
              }
            }
            else
            {
              uint64_t v58 = a3[52];
            }
            size_t v59 = 0;
            uint64_t v60 = 0;
LABEL_122:
            a3[52] = v58 + v59;
            if (a4) {
              size_t result = (size_t)memcpy(v60, v57, v59);
            }
            unint64_t v10 = (unint64_t)&v17[(v56 & 0xFFFFFFFFFFFFFFF8) + 8];
            if (v126 < 0x3D)
            {
              uint64_t v61 = 0;
              int32x2_t v62 = 0;
              int32x2_t v63 = 0;
              if (!a4) {
                goto LABEL_134;
              }
            }
            else
            {
              uint64_t v61 = *(void *)v10;
              int32x2_t v62 = *(int32x2_t *)&v17[(v56 & 0xFFFFFFFFFFFFFFF8) + 16];
              int64x2_t v64 = *(int64x2_t *)(v10 + 16);
              v10 += 32;
              int32x2_t v63 = vmovn_s64(v64);
              if (!a4) {
                goto LABEL_134;
              }
            }
LABEL_128:
            if (a5)
            {
              int32x2_t v106 = v63;
              size_t result = GetAliasStream2(a5, v61);
              if (result) {
                uint64_t v61 = *(void *)result;
              }
              else {
                uint64_t v61 = 0;
              }
              int32x2_t v63 = v106;
            }
            int32x2_t *v12 = (int32x2_t)v60;
            v12[1] = (int32x2_t)v61;
            v12[2] = v62;
            v12[3] = v63;
            v12[4].i32[0] = v113;
            v12[4].i8[4] = v116;
            v12[4].i8[5] = v115;
            v12[4].i8[6] = v114;
            v12[4].i8[7] = 0;
            void v12[5] = (int32x2_t)v133;
            v12[6] = v122;
            v12[7] = (int32x2_t)v128;
            v12[8] = (int32x2_t)v120;
            v12[9] = (int32x2_t)v123;
            v12[10] = (int32x2_t)v118;
            v12[11] = v130;
            v12[12] = (int32x2_t)v121;
            v12[13] = (int32x2_t)(v18 | (v119 << 16) | (v117 << 8) | v124.u8[0]);
            v12[14] = (int32x2_t)v112;
            v12[15] = (int32x2_t)v111;
            v12[16].i8[0] = BYTE4(v110);
            v12[16].i8[1] = v110;
            v12[16].i8[2] = BYTE4(v109);
            v12[16].i8[3] = v109;
            v12[16].i8[4] = BYTE4(v108);
            v12[16].i8[5] = v108;
            v12[16].i16[3] = 0;
LABEL_134:
            ++v11;
            unsigned int v8 = v126;
            if (v11 != v107) {
              continue;
            }
            uint64_t v93 = v103;
            break;
          case 4:
            int32x2_t v24 = *(int32x2_t *)(v10 + 32);
            uint64_t v25 = (uint64_t *)(v10 + 40);
            int32x2_t v122 = v24;
            if (v24)
            {
              uint64_t v133 = a3[43];
              do
              {
                size_t v26 = (uint64_t *)a3[43];
                a3[43] = v26 + 2;
                if (a4)
                {
                  uint64_t v27 = *v25;
                  uint64_t v28 = v25[1];
                  if (a5)
                  {
                    size_t result = GetAliasStream2(a5, v27);
                    if (result) {
                      uint64_t v27 = *(void *)result;
                    }
                    else {
                      uint64_t v27 = 0;
                    }
                  }
                  *size_t v26 = v27;
                  v26[1] = v28;
                }
                v25 += 2;
                --*(void *)&v24;
              }
              while (v24);
            }
            else
            {
              uint64_t v133 = 0;
            }
            int v17 = (const char *)(v25 + 3);
            if ((a4 & 1) == 0) {
              goto LABEL_85;
            }
            uint64_t v123 = 0;
            uint64_t v118 = 0;
            int32x2_t v130 = 0;
            uint64_t v121 = 0;
            v124.i8[0] = 0;
            uint64_t v117 = 0;
            uint64_t v119 = 0;
            unint64_t v18 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v108 = 0;
            uint64_t v128 = v25[2];
            uint64_t v120 = v25[1];
            goto LABEL_111;
          case 5:
            int v17 = (const char *)(v10 + 168);
            if (!a4) {
              goto LABEL_85;
            }
            uint64_t v29 = *(void *)(v10 + 32);
            v124.i64[0] = *(void *)(v10 + 80);
            size_t result = *(unsigned __int8 *)(v10 + 144);
            uint64_t v121 = *(void *)(v10 + 56);
            int32x2_t v122 = *(int32x2_t *)(v10 + 40);
            uint64_t v120 = *(void *)(v10 + 72);
            uint64_t v128 = *(void *)(v10 + 64);
            uint64_t v118 = *(void *)(v10 + 96);
            uint64_t v123 = *(void *)(v10 + 88);
            uint64_t v111 = *(void *)(v10 + 104);
            uint64_t v112 = *(void *)(v10 + 112);
            LOBYTE(v110) = *(unsigned char *)(v10 + 152);
            BYTE4(v110) = *(unsigned char *)(v10 + 120);
            LOBYTE(v109) = *(unsigned char *)(v10 + 160);
            BYTE4(v109) = *(unsigned char *)(v10 + 144);
            LOBYTE(v108) = *(unsigned char *)(v10 + 128);
            BYTE4(v108) = *(unsigned char *)(v10 + 136);
            if (!a5)
            {
              int32x2_t v130 = *(int32x2_t *)(v10 + 48);
              uint64_t v133 = *(void *)(v10 + 32);
              goto LABEL_106;
            }
            uint64_t v30 = *(void *)(v10 + 48);
            size_t v31 = (uint64_t *)GetAliasStream2(a5, v29);
            if (v31) {
              uint64_t v32 = *v31;
            }
            else {
              uint64_t v32 = 0;
            }
            uint64_t v51 = (int32x2_t *)GetAliasStream2(a5, v30);
            if (v51) {
              int32x2_t v130 = *v51;
            }
            else {
              int32x2_t v130 = 0;
            }
            uint64_t v133 = v32;
            uint64_t v47 = a5;
            uint64_t v46 = v123;
            goto LABEL_103;
          case 6:
            int32x2_t v33 = *(int32x2_t *)(v10 + 32);
            uint64_t v34 = (uint64_t *)(v10 + 40);
            int32x2_t v122 = v33;
            if (v33)
            {
              uint64_t v134 = a3[43];
              do
              {
                uint64_t v35 = (uint64_t *)a3[43];
                a3[43] = v35 + 2;
                if (a4)
                {
                  uint64_t v36 = *v34;
                  uint64_t v37 = v34[1];
                  if (a5)
                  {
                    size_t result = GetAliasStream2(a5, v36);
                    if (result) {
                      uint64_t v36 = *(void *)result;
                    }
                    else {
                      uint64_t v36 = 0;
                    }
                  }
                  uint64_t *v35 = v36;
                  v35[1] = v37;
                }
                v34 += 2;
                --*(void *)&v33;
              }
              while (v33);
              uint64_t v38 = v134;
            }
            else
            {
              uint64_t v38 = 0;
            }
            uint64_t v41 = *v34;
            size_t v39 = v34 + 1;
            uint64_t v40 = v41;
            uint64_t v133 = v38;
            uint64_t v121 = v41;
            if (v41)
            {
              int32x2_t v131 = (int32x2_t)a3[43];
              do
              {
                uint64_t v42 = (uint64_t *)a3[43];
                a3[43] = v42 + 2;
                if (a4)
                {
                  uint64_t v43 = *v39;
                  uint64_t v44 = v39[1];
                  if (a5)
                  {
                    size_t result = GetAliasStream2(a5, v43);
                    if (result) {
                      uint64_t v43 = *(void *)result;
                    }
                    else {
                      uint64_t v43 = 0;
                    }
                  }
                  uint64_t *v42 = v43;
                  v42[1] = v44;
                }
                v39 += 2;
                --v40;
              }
              while (v40);
              int32x2_t v45 = v131;
            }
            else
            {
              int32x2_t v45 = 0;
            }
            int v17 = (const char *)(v39 + 13);
            if ((a4 & 1) == 0) {
              goto LABEL_85;
            }
            uint64_t v128 = *v39;
            v124.i64[0] = v39[2];
            uint64_t v46 = v39[3];
            uint64_t v118 = v39[4];
            BYTE4(v110) = *((unsigned char *)v39 + 48);
            LOBYTE(v108) = *((unsigned char *)v39 + 56);
            BYTE4(v108) = *((unsigned char *)v39 + 64);
            uint64_t v111 = v39[5];
            uint64_t v112 = v39[9];
            BYTE4(v109) = *((unsigned char *)v39 + 80);
            LOBYTE(v110) = *((unsigned char *)v39 + 88);
            LOBYTE(v109) = *((unsigned char *)v39 + 96);
            int32x2_t v130 = v45;
            uint64_t v120 = v39[1];
            if (a5)
            {
              uint64_t v47 = a5;
LABEL_103:
              size_t result = GetAliasStream2(v47, v46);
              if (result) {
                uint64_t v123 = *(void *)result;
              }
              else {
                uint64_t v123 = 0;
              }
            }
            else
            {
              uint64_t v123 = v39[3];
            }
LABEL_106:
            uint64_t v117 = v124.u8[1];
            uint64_t v119 = v124.u8[2];
            unint64_t v18 = v124.i64[0] & 0xFFFFFFFFFF000000;
            goto LABEL_111;
          default:
            uint64_t v133 = 0;
            int32x2_t v122 = 0;
            uint64_t v128 = 0;
            uint64_t v120 = 0;
            uint64_t v123 = 0;
            uint64_t v118 = 0;
            int32x2_t v130 = 0;
            uint64_t v121 = 0;
            v124.i8[0] = 0;
            uint64_t v117 = 0;
            uint64_t v119 = 0;
            unint64_t v18 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v108 = 0;
            int v17 = (const char *)(v10 + 32);
            goto LABEL_111;
        }
        break;
      }
    }
    else
    {
      uint64_t v93 = 0;
    }
    if (v8 > 0x38)
    {
      LODWORD(v90) = *(_DWORD *)v10;
      LODWORD(v92) = *(_DWORD *)(v10 + 8);
      LOBYTE(v88) = *(unsigned char *)(v10 + 16);
      LOBYTE(v89) = *(unsigned char *)(v10 + 24);
      LODWORD(v91) = *(_DWORD *)(v10 + 32);
      if ((a4 & 1) == 0) {
        goto LABEL_193;
      }
      goto LABEL_168;
    }
    LODWORD(v92) = 0;
    LODWORD(v90) = 0;
    LOBYTE(v89) = 0;
    LOBYTE(v88) = 0;
    LODWORD(v91) = 1;
    if (a4)
    {
LABEL_168:
      char v67 = 0;
      char v66 = 0;
      char v78 = 0;
      int v79 = 0;
      unint64_t v80 = 0;
      LOBYTE(v81) = 0;
      LOBYTE(v82) = 0;
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      LODWORD(v69) = 0;
      LODWORD(v84) = 0;
      LODWORD(v70) = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      LOWORD(v87) = 0;
      goto LABEL_169;
    }
  }
  else if (a4)
  {
    char v67 = 0;
    char v66 = 0;
    char v78 = 0;
    int v79 = 0;
    unint64_t v80 = 0;
    LOBYTE(v81) = 0;
    LOBYTE(v82) = 0;
    LOBYTE(v65) = 0;
    LODWORD(v83) = 0;
    LODWORD(v69) = 0;
    LODWORD(v84) = 0;
    LODWORD(v70) = 0;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    LOWORD(v87) = 0;
    LOBYTE(v88) = 0;
    LOBYTE(v89) = 0;
    LODWORD(v90) = 0;
    LODWORD(v91) = 0;
    LODWORD(v92) = 0;
    uint64_t v107 = 0;
    uint64_t v93 = 0;
LABEL_169:
    int32x2_t v98 = 0;
LABEL_179:
    size_t result = v104;
LABEL_192:
    uint64_t v102 = a3[10];
    *(unsigned char *)uint64_t v102 = v105;
    *(unsigned char *)(v102 + 1) = result;
    *(_DWORD *)(v102 + 2) = 0;
    *(_WORD *)(v102 + 6) = 0;
    *(void *)(v102 + 8) = v93;
    *(void *)(v102 + 16) = v107;
    *(_DWORD *)(v102 + 24) = v92;
    *(_DWORD *)(v102 + 28) = v91;
    *(_DWORD *)(v102 + 32) = v90;
    *(unsigned char *)(v102 + 36) = v89;
    *(unsigned char *)(v102 + 37) = v88;
    *(_WORD *)(v102 + 38) = v87;
    *(void *)(v102 + 40) = v86;
    *(void *)(v102 + 48) = v85;
    *(void *)(v102 + 56) = v70 | ((unint64_t)v84 << 32);
    *(void *)(v102 + 64) = v69 | ((unint64_t)v83 << 32);
    *(void *)(v102 + 72) = ((unint64_t)v81 << 16) | v80 | ((unint64_t)v82 << 8) | v65;
    *(int32x2_t *)(v102 + 80) = v98;
    *(_DWORD *)(v102 + 88) = v79;
    *(unsigned char *)(v102 + 92) = v78;
    *(unsigned char *)(v102 + 93) = v66;
    *(unsigned char *)(v102 + 94) = v67;
    *(unsigned char *)(v102 + 95) = 0;
  }
LABEL_193:
  a3[10] += 96;
  return result;
}

uint64_t DecodeDYMTLImageFilterFunctionInfoSPI(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    uint64_t v6 = 0;
    size_t v7 = (char *)(a1 + 16);
    do
    {
      char v8 = *v7;
      uint64_t v9 = *((void *)v7 + 1);
      v7 += 16;
      uint64_t v10 = *(void *)(a3 + 328);
      uint64_t v11 = v9;
      for (uint64_t i = v10; v11; --v11)
      {
        if (a4)
        {
          uint64_t v13 = *((void *)v7 + 2);
          *(_OWORD *)uint64_t i = *(_OWORD *)v7;
          *(void *)(i + 16) = v13;
          uint64_t i = *(void *)(a3 + 328);
        }
        v7 += 24;
        i += 24;
        *(void *)(a3 + 328) = i;
      }
      uint64_t v14 = *(void *)(a3 + 256);
      if (a4)
      {
        *(unsigned char *)uint64_t v14 = v8;
        *(_DWORD *)(v14 + 4) = 0;
        *(_DWORD *)(v14 + 1) = 0;
        *(void *)(v14 + 8) = v9;
        *(void *)(v14 + 16) = v10;
        uint64_t v14 = *(void *)(a3 + 256);
      }
      *(void *)(a3 + 256) = v14 + 24;
      ++v6;
    }
    while (v6 != result);
  }
  return result;
}

size_t DecodeDYMTLStitchedLibraryDescriptor(size_t result, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v5 = a5;
  char v8 = (_DWORD *)(result + 8);
  unsigned int v9 = *(_DWORD *)result;
  if (*(_DWORD *)result < 0x4Fu)
  {
    char v10 = 4;
  }
  else
  {
    char v8 = (_DWORD *)(result + 32);
    char v10 = *(unsigned char *)(result + 24);
  }
  int v12 = *v8;
  uint64_t v11 = (const char *)(v8 + 2);
  size_t v59 = v11;
  __int16 v54 = v12;
  int v55 = (unsigned __int16)v12;
  if ((_WORD)v12)
  {
    char v52 = v10;
    int v13 = 0;
    uint64_t v53 = a3[45];
    while (1)
    {
      uint64_t v14 = v59;
      uint64_t v15 = v59 + 8;
      char v16 = *v59;
      size_t v59 = v15;
      uint64_t result = strlen(v15);
      int v17 = &v15[(result & 0xFFFFFFFFFFFFFFF8) + 8];
      size_t v59 = v17;
      int v18 = *((unsigned __int8 *)v14 + 8);
      int32x2_t v19 = v14[8] ? v15 : 0;
      if (!v18) {
        break;
      }
      uint64_t result = strlen(v19);
      uint64_t v20 = a3[52];
      size_t v21 = result + 1;
      if (result == -1) {
        goto LABEL_13;
      }
      uint64_t v22 = (void *)a3[52];
LABEL_14:
      a3[52] = v20 + v21;
      if (a4)
      {
        uint64_t result = (size_t)memcpy(v22, v19, v21);
        int v17 = v59;
      }
      uint64_t v25 = *(void *)v17;
      uint64_t v23 = v17 + 8;
      __int16 v24 = v25;
      size_t v59 = v23;
      size_t v26 = (_OWORD *)a3[46];
      a3[46] = &v26[3 * (unsigned __int16)v25];
      int v27 = (unsigned __int16)v25;
      if ((_WORD)v25)
      {
        uint64_t v28 = v26;
        do
        {
          long long v57 = 0u;
          long long v58 = 0u;
          long long v56 = 0u;
          int v29 = *(unsigned __int8 *)v59;
          v59 += 8;
          uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v29, v9, (uint64_t)a3, a4);
          if (a4)
          {
            long long v30 = v56;
            long long v31 = v58;
            v28[1] = v57;
            v28[2] = v31;
            *uint64_t v28 = v30;
            v28 += 3;
          }
          --v27;
        }
        while (v27);
        uint64_t v23 = v59;
      }
      else
      {
        size_t v26 = 0;
      }
      int v34 = *(unsigned __int8 *)v23;
      int32x2_t v33 = v23 + 8;
      int v32 = v34;
      size_t v59 = v33;
      if (v34)
      {
        uint64_t v35 = (_OWORD *)a3[46];
        a3[46] = v35 + 3;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v56 = 0u;
        uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v32, v9, (uint64_t)a3, a4);
        if (a4)
        {
          long long v36 = v57;
          _OWORD *v35 = v56;
          v35[1] = v36;
          uint64_t v35[2] = v58;
        }
        int32x2_t v33 = v59;
      }
      else
      {
        uint64_t v35 = 0;
      }
      int v37 = *(_DWORD *)v33;
      size_t v59 = v33 + 8;
      uint64_t v38 = a3[47];
      int v39 = (unsigned __int16)v37;
      if ((_WORD)v37)
      {
        uint64_t v40 = v38 + 8;
        uint64_t v41 = v33 + 16;
        do
        {
          uint64_t v42 = *((void *)v41 - 1);
          size_t v59 = v41;
          if (a4) {
            *(unsigned char *)(v40 - 8) = v42;
          }
          v41 += 8;
          a3[47] = v40;
          v40 += 8;
          --v39;
        }
        while (v39);
      }
      uint64_t v43 = a3[45];
      if (a4)
      {
        *(void *)uint64_t v43 = v22;
        *(void *)(v43 + 8) = v26;
        *(void *)(v43 + 16) = v35;
        *(void *)(v43 + 24) = v38;
        *(_WORD *)(v43 + 32) = v24;
        *(_WORD *)(v43 + 34) = v37;
        *(unsigned char *)(v43 + 36) = v16;
        *(_WORD *)(v43 + 37) = 0;
        *(unsigned char *)(v43 + 39) = 0;
        uint64_t v43 = a3[45];
      }
      a3[45] = v43 + 40;
      if (++v13 == v55)
      {
        uint64_t v11 = v59;
        char v10 = v52;
        uint64_t v5 = a5;
        goto LABEL_38;
      }
    }
    uint64_t v20 = a3[52];
LABEL_13:
    size_t v21 = 0;
    uint64_t v22 = 0;
    goto LABEL_14;
  }
  uint64_t v53 = 0;
LABEL_38:
  int v45 = *(_DWORD *)v11;
  int v44 = *(_DWORD *)v11;
  size_t v59 = v11 + 8;
  int v46 = (unsigned __int16)v45;
  if (!(_WORD)v45)
  {
    uint64_t v47 = 0;
    if ((a4 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  uint64_t v47 = (uint64_t *)a3[50];
  uint64_t v48 = v47;
  do
  {
    uint64_t v49 = *(void *)v59;
    v59 += 8;
    if (a4)
    {
      if (v5)
      {
        uint64_t result = GetAliasStream2(v5, v49);
        if (result) {
          uint64_t v49 = *(void *)result;
        }
        else {
          uint64_t v49 = 0;
        }
      }
      uint64_t v48 = (uint64_t *)a3[50];
      uint64_t *v48 = v49;
    }
    a3[50] = ++v48;
    --v46;
  }
  while (v46);
  if (a4)
  {
LABEL_48:
    uint64_t v50 = a3[33];
    *(void *)uint64_t v50 = v53;
    *(void *)(v50 + 8) = v47;
    *(_WORD *)(v50 + 16) = v54;
    *(_WORD *)(v50 + 18) = v44;
    *(unsigned char *)(v50 + 20) = v10;
    *(_WORD *)(v50 + 21) = 0;
    *(unsigned char *)(v50 + 23) = 0;
  }
LABEL_49:
  a3[33] += 24;
  return result;
}

uint64_t DecodeDYMTLFunctionStitchingFunctionNode(uint64_t a1, const char **a2, int a3, unsigned int a4, uint64_t a5, int a6)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)a1 = a3;
  char v10 = *a2;
  if (a4 >= 0x4F)
  {
    uint64_t v11 = *(void *)v10;
    v10 += 8;
    *a2 = v10;
    *(void *)(a1 + 32) = v11;
  }
  if (a3 == 2)
  {
    uint64_t v12 = *(void *)v10;
    v10 += 8;
    *a2 = v10;
    *(unsigned char *)(a1 + 44) = v12;
  }
  *a2 = &v10[(strlen(v10) & 0xFFFFFFFFFFFFFFF8) + 8];
  if (*v10) {
    int v13 = v10;
  }
  else {
    int v13 = "";
  }
  uint64_t result = strlen(v13);
  size_t v15 = result + 1;
  if (result == -1) {
    char v16 = 0;
  }
  else {
    char v16 = *(void **)(a5 + 416);
  }
  *(void *)(a5 + 416) += v15;
  if (a6) {
    uint64_t result = (uint64_t)memcpy(v16, v13, v15);
  }
  uint64_t v17 = *(void *)*a2;
  *a2 += 8;
  unsigned int v18 = (unsigned __int16)v17;
  *(_WORD *)(a1 + 40) = v17;
  if ((_WORD)v17) {
    uint64_t v19 = *(void *)(a5 + 368);
  }
  else {
    uint64_t v19 = 0;
  }
  *(void *)(a5 + 368) += 48 * (unsigned __int16)v17;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v19;
  if ((_WORD)v17)
  {
    int v20 = 0;
    long long v21 = 0uLL;
    while (2)
    {
      int v22 = 0;
      memset(v35, 0, 7);
      long long v37 = v21;
      long long v38 = v21;
      char v39 = 0;
      uint64_t v23 = *a2;
      int v24 = *(unsigned __int8 *)*a2;
      *a2 += 8;
      __int16 v25 = 0;
      char v26 = 0;
      switch(v24)
      {
        case 1:
        case 2:
        case 12:
          uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
          long long v21 = 0uLL;
          LOBYTE(v24) = v36[0];
          v35[0] = *(_DWORD *)((char *)v36 + 1);
          *(_DWORD *)((char *)v35 + 3) = DWORD1(v36[0]);
          int v22 = DWORD2(v36[0]);
          __int16 v25 = WORD6(v36[0]);
          char v26 = BYTE14(v36[0]);
          long long v37 = *(_OWORD *)((char *)v36 + 15);
          long long v38 = *(_OWORD *)((char *)&v36[1] + 15);
          char v39 = HIBYTE(v36[2]);
          if (a6) {
            goto LABEL_25;
          }
          goto LABEL_26;
        case 3:
          int v22 = 0;
          char v26 = 0;
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          LOBYTE(v24) = 3;
          goto LABEL_24;
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          int v22 = 0;
          char v26 = 0;
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          if (!a6) {
            goto LABEL_26;
          }
          goto LABEL_25;
        case 5:
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          int v22 = *((_DWORD *)v23 + 4);
          *a2 = v23 + 24;
          char v26 = v23[24];
          *a2 = v23 + 32;
          LOBYTE(v24) = 5;
          if (!a6) {
            goto LABEL_26;
          }
          goto LABEL_25;
        default:
LABEL_24:
          if (a6)
          {
LABEL_25:
            *(unsigned char *)uint64_t v19 = v24;
            *(_DWORD *)(v19 + 4) = *(_DWORD *)((char *)v35 + 3);
            *(_DWORD *)(v19 + 8) = v22;
            *(_DWORD *)(v19 + 1) = v35[0];
            *(_WORD *)(v19 + 12) = v25;
            *(unsigned char *)(v19 + 14) = v26;
            long long v27 = v37;
            long long v28 = v38;
            *(unsigned char *)(v19 + 47) = v39;
            *(_OWORD *)(v19 + 31) = v28;
            *(_OWORD *)(v19 + 15) = v27;
            v19 += 48;
            unsigned int v18 = *(unsigned __int16 *)(a1 + 40);
          }
LABEL_26:
          if (++v20 >= v18) {
            break;
          }
          continue;
      }
      break;
    }
  }
  uint64_t v29 = *(void *)*a2;
  *a2 += 8;
  unsigned int v30 = (unsigned __int16)v29;
  *(_WORD *)(a1 + 42) = v29;
  if ((_WORD)v29) {
    long long v31 = *(_OWORD **)(a5 + 368);
  }
  else {
    long long v31 = 0;
  }
  *(void *)(a5 + 368) += 48 * (unsigned __int16)v29;
  *(void *)(a1 + 24) = v31;
  if ((_WORD)v29)
  {
    unsigned int v32 = 0;
    do
    {
      memset(v36, 0, sizeof(v36));
      *a2 += 8;
      uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
      if (a6)
      {
        long long v33 = v36[0];
        long long v34 = v36[2];
        v31[1] = v36[1];
        v31[2] = v34;
        _OWORD *v31 = v33;
        v31 += 3;
        unsigned int v30 = *(unsigned __int16 *)(a1 + 42);
      }
      ++v32;
    }
    while (v32 < v30);
  }
  return result;
}

void *DecodeDYMPSPluginCNNConvolutionDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result[1];
  int v6 = *((_DWORD *)result + 4);
  int v7 = *((_DWORD *)result + 6);
  int v8 = *((_DWORD *)result + 8);
  size_t v9 = result[5];
  unint64_t v10 = (unint64_t)result + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  int32x4_t v11 = *(int32x4_t *)v10;
  int64x2_t v12 = *(int64x2_t *)(v10 + 16);
  int32x4_t v13 = *(int32x4_t *)(v10 + 32);
  int64x2_t v14 = *(int64x2_t *)(v10 + 48);
  uint64_t v15 = *(void *)(v10 + 64);
  int64x2_t v16 = *(int64x2_t *)(v10 + 72);
  uint64_t v18 = *(void *)(v10 + 88);
  uint64_t v17 = *(void *)(v10 + 96);
  uint64_t v19 = *(char **)(a3 + 72);
  *(void *)(a3 + 72) = &v19[v9];
  if (a4)
  {
    if (v9) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v9) {
      long long v21 = result + 6;
    }
    else {
      long long v21 = 0;
    }
    int32x4_t v28 = v13;
    int32x4_t v29 = v11;
    int64x2_t v26 = v12;
    int64x2_t v27 = v14;
    int64x2_t v25 = v16;
    uint64_t result = memcpy(v20, v21, v9);
    v22.i64[1] = v26.i64[1];
    int32x2_t v23 = vmovn_s64(v25);
    *(int32x2_t *)v22.i8 = vmovn_s64(v26);
    uint64_t v24 = *(void *)(a3 + 16);
    *(void *)uint64_t v24 = v20;
    *(_DWORD *)(v24 + 8) = v9;
    *(_DWORD *)(v24 + 12) = v6;
    *(_DWORD *)(v24 + 16) = v7;
    *(_DWORD *)(v24 + 20) = v8;
    *(int32x4_t *)(v24 + 24) = vuzp1q_s32(v29, v28);
    *(int32x2_t *)(v24 + 40) = vmovn_s64(v27);
    *(_DWORD *)(v24 + 48) = v15;
    *(unsigned char *)(v24 + 52) = v5;
    v22.i16[1] = v22.i16[2];
    v22.i16[2] = v23.i16[0];
    v22.i16[3] = v23.i16[2];
    *(_DWORD *)(v24 + 53) = vmovn_s16(v22).u32[0];
    *(unsigned char *)(v24 + 57) = v18;
    *(unsigned char *)(v24 + 58) = v17;
    *(unsigned char *)(v24 + 63) = 0;
    *(_DWORD *)(v24 + 59) = 0;
  }
  *(void *)(a3 + 16) += 64;
  return result;
}

void *DecodeDYMPSPluginCNNConvolutionData(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int32x2_t v6 = vmovn_s64(*(int64x2_t *)(a1 + 8));
  __int32 v7 = *(_DWORD *)(a1 + 24);
  size_t v8 = *(void *)(a1 + 32);
  size_t v9 = (const void *)(a1 + 40);
  unint64_t v10 = (unint64_t *)(a1 + 40 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v13 = *v10;
  int32x4_t v11 = v10 + 1;
  unint64_t v12 = v13;
  int64x2_t v14 = (void *)((char *)v11 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v17 = *v14;
  uint64_t v15 = v14 + 1;
  uint64_t v16 = v17;
  if (v17) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = (void *)((char *)v15 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = *v19;
  int v20 = v19 + 1;
  uint64_t v21 = v22;
  if (v22) {
    int32x2_t v23 = v20;
  }
  else {
    int32x2_t v23 = 0;
  }
  uint64_t v24 = (void *)((char *)v20 + ((v21 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v27 = *v24;
  int64x2_t v25 = v24 + 1;
  uint64_t v26 = v27;
  if (v27) {
    int32x4_t v28 = v25;
  }
  else {
    int32x4_t v28 = 0;
  }
  int32x4_t v29 = (void *)((char *)v25 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v32 = *v29;
  unsigned int v30 = v29 + 1;
  uint64_t v31 = v32;
  if (v32) {
    long long v33 = v30;
  }
  else {
    long long v33 = 0;
  }
  if (v8) {
    uint64_t result = (void *)a3[9];
  }
  else {
    uint64_t result = 0;
  }
  a3[9] += v8;
  __int32 v53 = v7;
  int32x2_t v54 = v6;
  int32x2_t v52 = (int32x2_t)result;
  __srapr_vformatter_buff_t c = v28;
  uint64_t v50 = v33;
  if (a4)
  {
    if (v12) {
      uint64_t v35 = v11;
    }
    else {
      uint64_t v35 = 0;
    }
    if (v8) {
      long long v36 = v9;
    }
    else {
      long long v36 = 0;
    }
    memcpy(result, v36, v8);
    uint64_t v37 = (v12 >> 2);
    if ((v12 >> 2)) {
      long long v38 = (void *)a3[8];
    }
    else {
      long long v38 = 0;
    }
    a3[8] += 4 * v37;
    int32x2_t v51 = (int32x2_t)v38;
    uint64_t result = memcpy(v38, v35, 4 * v37);
    int32x2_t v6 = v54;
  }
  else
  {
    uint64_t v37 = (v12 >> 2);
    if ((v12 >> 2)) {
      int32x2_t v39 = (int32x2_t)a3[8];
    }
    else {
      int32x2_t v39 = 0;
    }
    int32x2_t v51 = v39;
    a3[8] += 4 * v37;
  }
  if (v6.i32[0] == 2)
  {
    uint64_t v41 = (char *)a3[8];
    a3[8] = v41 + 1024;
    if (a4)
    {
      uint64_t result = memcpy(v41, v18, 0x400uLL);
      int32x2_t v6 = v54;
    }
    goto LABEL_42;
  }
  if (v6.i32[0] != 1)
  {
    uint64_t v41 = 0;
LABEL_42:
    uint64_t v40 = 0;
    goto LABEL_43;
  }
  if (v37) {
    uint64_t v40 = (void *)a3[7];
  }
  else {
    uint64_t v40 = 0;
  }
  a3[7] += 8 * v37;
  if (a4)
  {
    uint64_t result = memcpy(v40, v23, 8 * v37);
    int32x2_t v6 = v54;
  }
  uint64_t v41 = 0;
LABEL_43:
  if (!(v26 + v31))
  {
    int32x2_t v42 = 0;
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v43 = (char *)a3[8];
  int v44 = &v43[4 * v37];
  a3[8] = v44;
  if (a4)
  {
    if (v37) {
      int v45 = v43;
    }
    else {
      int v45 = 0;
    }
    memcpy(v45, __src, 4 * v37);
    if (v37) {
      int v46 = (void *)a3[8];
    }
    else {
      int v46 = 0;
    }
    a3[8] += 4 * v37;
    uint64_t result = memcpy(v46, v50, 4 * v37);
    int32x2_t v6 = v54;
    uint64_t v47 = (void *)a3[6];
    *uint64_t v47 = v45;
    v47[1] = v46;
  }
  else
  {
    a3[8] = &v44[4 * v37];
  }
  int32x2_t v42 = (int32x2_t)a3[6];
  a3[6] = *(void *)&v42 + 16;
  if (a4)
  {
LABEL_56:
    uint64_t v48 = (int32x2_t *)a3[3];
    int32x2_t *v48 = v6;
    v48[1].i32[0] = v53;
    v48[1].i32[1] = 0;
    v48[2] = v52;
    v48[3] = v51;
    v48[4] = (int32x2_t)v41;
    v48[5] = (int32x2_t)v40;
    v48[6] = v42;
    v48[7].i32[0] = v8;
    v48[7].i32[1] = v12 >> 2;
  }
LABEL_57:
  a3[3] += 64;
  return result;
}

void GroupBuilder_popGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2
    && (uint64_t v3 = *(int *)(v2 + 12), v3)
    && (v4 = *(void *)(v2 + 24), v5 = *(int *)(v2 + 8), uint64_t v6 = v3 - 1, *(_DWORD *)(v2 + 12) = v6, v4))
  {
    uint64_t v7 = v6 * v5;
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(int *)(v4 + v7);
    uint64_t v10 = *(void *)(v8 + 24) + 32 * v9;
    *(void *)(v10 + 8) = a2;
    *(_DWORD *)(v10 + 20) = *(_DWORD *)(v8 + 12) + ~v9;
  }
  else
  {
    int v11 = *(_DWORD *)a1;
    long long v14 = 0u;
    long long v15 = 0u;
    v12[0] = v11;
    v12[1] = 500;
    unint64_t v13 = "last != ((void *)0)";
    GTError_addError((int *)a1, (uint64_t)v12);
  }
}

void *GroupBuilder_findInclusiveRange(int a1, void *a2, unint64_t a3)
{
  if (a1 < 1) {
    return 0;
  }
  uint64_t v3 = a2;
  do
  {
    uint64_t v4 = &v3[4 * (a1 >> 1)];
    unint64_t v6 = *v4;
    uint64_t v5 = v4 + 4;
    if (v6 > a3)
    {
      a1 = a1 >> 1;
    }
    else
    {
      uint64_t v3 = v5;
      a1 += ~(a1 >> 1);
    }
  }
  while (a1 > 0);
  if (v3 == a2) {
    return 0;
  }
  uint64_t result = v3 - 4;
  while (result[1] < a3)
  {
    uint64_t v8 = *((unsigned int *)result + 4);
    if (v8) {
      BOOL v9 = result == 0;
    }
    else {
      BOOL v9 = 1;
    }
    result -= 4 * v8;
    if (v9) {
      return 0;
    }
  }
  return result;
}

void *GroupBuilder_findExclusiveRange(int a1, void *a2, unint64_t a3)
{
  uint64_t result = GroupBuilder_findInclusiveRange(a1, a2, a3);
  if (result)
  {
    while (result[1] <= a3)
    {
      uint64_t v5 = *((unsigned int *)result + 4);
      if (v5) {
        BOOL v6 = result == 0;
      }
      else {
        BOOL v6 = 1;
      }
      result -= 4 * v5;
      if (v6) {
        return 0;
      }
    }
  }
  return result;
}

void *GroupBuilder_getCommandBuffer(int a1, void *a2, unint64_t a3)
{
  uint64_t result = GroupBuilder_findInclusiveRange(a1, a2, a3);
  if (result)
  {
    uint64_t v4 = result;
    while (1)
    {
      uint64_t v5 = v4;
      int FuncEnumConstructorType = GetFuncEnumConstructorType(*((_DWORD *)v4 + 7));
      if (FuncEnumConstructorType == 25 || FuncEnumConstructorType == 51) {
        break;
      }
      uint64_t result = 0;
      uint64_t v7 = *((unsigned int *)v5 + 4);
      if (v7)
      {
        uint64_t v4 = &v5[-4 * v7];
        if (v5) {
          continue;
        }
      }
      return result;
    }
    return v5;
  }
  return result;
}

uint64_t GroupRange_encoderWithIndirectResources(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    while (1)
    {
      uint64_t v2 = v1;
      int v3 = *(_DWORD *)(v1 + 28);
      if (v3 > -15674)
      {
        if (v3 == -15673 || v3 == -15586 || v3 == -15364) {
          return v2;
        }
      }
      else if ((v3 + 16353) < 2 || v3 == -16014 || v3 == -15712)
      {
        return v2;
      }
      uint64_t result = 0;
      uint64_t v8 = *(unsigned int *)(v2 + 16);
      if (v8)
      {
        uint64_t v1 = v2 - 32 * v8;
        if (v2) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t GetAliasStream(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a2;
  uint64_t v4 = (void *)*find_entry(a1, &v6, 8uLL, 0);
  if (v4)
  {
    while (1)
    {
      uint64_t v4 = (void *)v4[4];
      if (!v4) {
        break;
      }
      if (v4[2] <= a3)
      {
        if (v4[3] < a3) {
          return 0;
        }
        return v4[1];
      }
    }
  }
  return 0;
}

#error "35E080: too big function (funcsize=0)"

void CloseStream(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(*find_entry(*(void *)(a1 + 24), (unsigned char *)a2 + 8, 8uLL, 0) + 32);
    uint64_t v5 = *(void *)(a1 + 16);
    unint64_t v6 = atomic_load((unint64_t *)(v5 + 72));
    *(void *)(v4 + 24) = v6;
    pthread_mutex_lock((pthread_mutex_t *)v5);
    unsigned int v7 = atomic_load((unsigned int *)(v5 + 104));
    if (v7 == 1 || v7 == 2 && (char v8 = atomic_load(a2 + 7), (v8 & 0x10) != 0))
    {
      unint64_t v11 = atomic_load(a2 + 7);
      unint64_t v12 = v11;
      do
      {
        atomic_compare_exchange_strong(a2 + 7, &v12, v11 | 4);
        BOOL v13 = v12 == v11;
        unint64_t v11 = v12;
      }
      while (!v13);
      pthread_mutex_unlock((pthread_mutex_t *)v5);
    }
    else
    {
      long long v27 = 0uLL;
      *(void *)int32x4_t v28 = 0;
      apr_hash_set(*(apr_hash_t **)(v5 + 88), a2, 8, 0);
      int v9 = *(_DWORD *)(*(void *)(v5 + 88) + 48);
      uint64_t v10 = a2[3];
      if (atomic_fetch_add((atomic_uint *volatile)(v10 + 40), 0xFFFFFFFF) == 1)
      {
        long long v27 = *(_OWORD *)(v10 + 8);
        *(void *)int32x4_t v28 = *(void *)(v10 + 24);
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = 0;
        *(void *)uint64_t v10 = *(void *)(v5 + 96);
        *(void *)(v5 + 96) = v10;
      }
      long long v14 = (long long *)(a2 + 4);
      if (*((void *)&v27 + 1))
      {
        unsigned int v15 = atomic_load((unsigned int *)a2 + 12);
        atomic_fetch_add(v28, v15);
        unsigned int v16 = atomic_load((unsigned int *)a2 + 13);
        atomic_fetch_add(&v28[1], v16);
        *(void *)(*((void *)&v27 + 1) + 40) = a2[4];
      }
      else
      {
        long long v27 = *v14;
        *(void *)int32x4_t v28 = a2[6];
      }
      *(void *)long long v14 = 0;
      a2[5] = 0;
      a2[6] = 0;
      *a2 = *(void *)(v5 + 96);
      *(void *)(v5 + 96) = a2;
      pthread_mutex_unlock((pthread_mutex_t *)v5);
      uint64_t v17 = (unsigned int *)v27;
      if ((void)v27)
      {
        uint64_t v18 = *(void *)(v5 + 64);
        pthread_mutex_lock((pthread_mutex_t *)(v18 + 264));
        do
        {
          unint64_t v19 = *v17;
          if (v19 < 0x101)
          {
            int v20 = 0;
          }
          else
          {
            int v20 = 0;
            for (unint64_t i = 256; i < v19; i *= 2)
              ++v20;
          }
          uint64_t v22 = (unsigned int *)*((void *)v17 + 5);
          v17[1] = 64;
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 2) = 0;
          *((void *)v17 + 3) = 0;
          *((void *)v17 + 4) = v17;
          *((void *)v17 + 6) = 0;
          *((void *)v17 + 7) = 0;
          *((void *)v17 + 5) = 0;
          uint64_t v23 = v18 + 8 * v20;
          *((void *)v17 + 5) = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = v17;
          uint64_t v17 = v22;
        }
        while (v22);
        pthread_mutex_unlock((pthread_mutex_t *)(v18 + 264));
      }
      if (!v9)
      {
        pthread_mutex_destroy((pthread_mutex_t *)v5);
        uint64_t v24 = *(int **)(v5 + 64);
        if (*v24 >= 1)
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          do
          {
            vm_deallocate(mach_task_self_, *(void *)(*((void *)v24 + 1) + v25), *(void *)(*((void *)v24 + 1) + v25 + 8));
            ++v26;
            v25 += 16;
          }
          while (v26 < *v24);
        }
        pthread_mutex_destroy((pthread_mutex_t *)(v24 + 66));
        free(*((void **)v24 + 1));
        vm_deallocate(mach_task_self_, (vm_address_t)v24, 0x148uLL);
        apr_pool_destroy(**(apr_pool_t ***)(v5 + 88));
        if ((shared_initialized & 1) == 0
          && !--initialized
          && (apr_pools_shared_initialized & 1) == 0
          && apr_pools_initialized
          && !--apr_pools_initialized)
        {
          apr_pool_destroy((apr_pool_t *)global_pool);
          global_pool = 0;
          global_allocator = 0;
        }
      }
    }
  }
}

unint64_t *OpenStream(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  if (!a2) {
    return 0;
  }
  uint64_t v4 = GTTraceContext_openStream(*(void *)(a1 + 16), a2);
  uint64_t v5 = apr_palloc(**(apr_pool_t ***)(a1 + 24), 0x28uLL);
  void *v5 = a2;
  v5[1] = v4;
  unint64_t v6 = atomic_load((unint64_t *)(*(void *)(a1 + 16) + 72));
  v5[2] = v6;
  void v5[3] = -1;
  uint64_t v7 = *find_entry(*(void *)(a1 + 24), &v9, 8uLL, 0);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 32);
  }
  void v5[4] = v7;
  apr_hash_set(*(apr_hash_t **)(a1 + 24), v5, 8, v5);
  return v4;
}

uint64_t StoreBlob(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = GTTraceEncoder_storeBlob(a2, Data, v7);
  apr_pool_clear(v5);
  return v8;
}

uint64_t UnwrapMTLAccelerationStructureDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  size_t v9 = (size_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLAccelerationStructureDescriptor((size_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x5Bu, 1u);
  DecodeDYMTLAccelerationStructureDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StreamNSArray(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 48);
  Data = GTCaptureArchive_readData(*(const char ***)a1, *(apr_pool_t ***)(a1 + 8), a3, **(apr_pool_t ***)(a1 + 8), (int *)(a1 + 48));
  if (v7 <= 0xF)
  {
    unsigned int v19 = *v5;
    long long v24 = 0u;
    long long v25 = 0u;
    *(void *)&long long v23 = v19 | 0x1F400000000;
    int v20 = "sizeof(uint64_t) * 2 <= data.length";
LABEL_12:
    *((void *)&v23 + 1) = v20;
    GTError_addError((int *)(a1 + 48), (uint64_t)&v23);
    return 0;
  }
  uint64_t v8 = Data;
  uint64_t v9 = *((void *)Data + 1);
  if (v7 != ((v9 << 32) + 0x200000000) >> 29)
  {
    unsigned int v21 = *v5;
    long long v24 = 0u;
    long long v25 = 0u;
    *(void *)&long long v23 = v21 | 0x1F400000000;
    int v20 = "sizeof(uint64_t) * (2 + count) == data.length";
    goto LABEL_12;
  }
  uint64_t v10 = *((void *)Data + 1);
  uint64_t v11 = v9 << 32;
  long long v47 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v49 = 0;
  long long v48 = (unint64_t)(((v9 << 32) + 0x100000000) >> 29);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)&v23, 0, 1u);
  uint64_t v13 = v48;
  *(void *)long long v48 = v11 >> 32;
  if ((int)v10 >= 1)
  {
    uint64_t v14 = (void *)(v13 + 8);
    unsigned int v15 = (uint64_t *)(v8 + 16);
    do
    {
      uint64_t v16 = *v15++;
      AliasStream2 = (uint64_t *)GetAliasStream2(a1, v16);
      if (AliasStream2) {
        uint64_t v18 = *AliasStream2;
      }
      else {
        uint64_t v18 = 0;
      }
      *v14++ = v18;
      --v10;
    }
    while (v10);
  }
  return DescriptorWithCount;
}

uint64_t StreamArray(uint64_t a1, uint64_t a2, void *__src, uint64_t *a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v10 = __src;
    uint64_t v11 = a5;
    do
    {
      uint64_t v12 = *a4++;
      AliasStream2 = (uint64_t *)GetAliasStream2(a1, v12);
      if (AliasStream2) {
        uint64_t v14 = *AliasStream2;
      }
      else {
        uint64_t v14 = 0;
      }
      *v10++ = v14;
      --v11;
    }
    while (v11);
  }

  return GTTraceEncoder_storeBytes(a2, __src, 8 * a5);
}

uint64_t UnwrapMTLComputePipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLComputePipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x3Du, 1u);
  DecodeDYMTLComputePipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLStitchedLibraryDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  size_t v9 = (size_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLStitchedLibraryDescriptor((size_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x66u, 1u);
  DecodeDYMTLStitchedLibraryDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x32u, 1u);
  DecodeDYMTLRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLTileRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLTileRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x39u, 1u);
  DecodeDYMTLTileRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLTextureDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v17 = 0;
  long long v19 = 0u;
  memset(v16, 0, sizeof(v16));
  uint64_t v18 = 56;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v16, 0x29u, 1u);
  uint64_t v8 = v18;
  v18 += 56;
  *(void *)(v8 + 48) = 512;
  *(_OWORD *)uint64_t v8 = GTMTLTextureDescriptorDefaults;
  *(_OWORD *)(v8 + 16) = xmmword_4C9980;
  *(_OWORD *)(v8 + 32) = xmmword_4C9990;
  unsigned int v9 = *(_DWORD *)Data;
  *(unsigned char *)(v8 + 49) = *((void *)Data + 1);
  *(_WORD *)(v8 + 34) = *((void *)Data + 2);
  *(_DWORD *)(v8 + 24) = *((void *)Data + 3);
  *(_WORD *)(v8 + 32) = *((void *)Data + 4);
  *(_WORD *)(v8 + 30) = *((void *)Data + 5);
  *(unsigned char *)(v8 + 45) = *((void *)Data + 6);
  *(unsigned char *)(v8 + 47) = *((void *)Data + 7);
  *(_WORD *)(v8 + 28) = *((void *)Data + 8);
  uint64_t v10 = 72;
  if (v9 < 3) {
    uint64_t v10 = 80;
  }
  uint64_t v11 = &Data[v10];
  *(unsigned char *)(v8 + 43) = *(void *)v11;
  *(unsigned char *)(v8 + 44) = *((void *)v11 + 1);
  if (v9)
  {
    *(_DWORD *)(v8 + 20) = *((void *)v11 + 2);
    if (v9 <= 3)
    {
      if (v9 == 3) {
        *(_WORD *)(v8 + 36) = *((_WORD *)v11 + 16) | (16 * *((_WORD *)v11 + 12));
      }
    }
    else
    {
      int v12 = v11[24];
      *(unsigned char *)(v8 + 46) = v12;
      int v13 = *((_DWORD *)v11 + 10);
      int v14 = v13 | (16 * *((_DWORD *)v11 + 8));
      *(_WORD *)(v8 + 36) = v13 | (16 * *((_WORD *)v11 + 16));
      if (v9 >= 0x15)
      {
        *(unsigned char *)(v8 + 38) = *((void *)v11 + 6);
        *(unsigned char *)(v8 + 40) = *((void *)v11 + 7);
        if (v9 != 21)
        {
          *(void *)(v8 + 8) = *((void *)v11 + 8);
          *(unsigned char *)(v8 + 42) = *((void *)v11 + 9);
          if (v9 >= 0x23)
          {
            *(_DWORD *)(v8 + 16) = v11[80] | (unsigned __int16)(*((_DWORD *)v11 + 22) << 8) | (*((_DWORD *)v11 + 24) << 16) | (*((_DWORD *)v11 + 26) << 24);
            if (v9 >= 0x27)
            {
              *(_DWORD *)(v8 + 16) = *((void *)v11 + 14);
              if (v9 >= 0x2A)
              {
                *(_WORD *)(v8 + 36) = v14 | (*((_WORD *)v11 + 60) << 8);
                *(void *)uint64_t v8 = *((void *)v11 + 16);
                *(unsigned char *)(v8 + 48) = *((void *)v11 + 17);
                *(unsigned char *)(v8 + 50) = *((void *)v11 + 18);
                if (v9 >= 0x31)
                {
                  *(unsigned char *)(v8 + 41) = *((void *)v11 + 19);
                  *(unsigned char *)(v8 + 39) = *((void *)v11 + 20);
                }
              }
            }
          }
        }
      }
      if (v12 == 255) {
        *(unsigned char *)(v8 + 46) = 0;
      }
    }
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

unint64_t *OpenEncoderStream(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v21 = a2;
  uint64_t AliasStream2 = GetAliasStream2(a1, a3);
  if (a4)
  {
    if (!AliasStream2)
    {
      int v8 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      v17[0] = v8;
      v17[1] = 500;
      uint64_t v18 = "stream != ((void *)0)";
      GTError_addError(a4, (uint64_t)v17);
      return 0;
    }
  }
  else if (!AliasStream2)
  {
    return 0;
  }
  unint64_t v9 = *(void *)(AliasStream2 + 24);
  uint64_t v10 = *(void *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)v10);
  RetainFreeNode(v10);
  int v12 = v11;
  unint64_t *v11 = atomic_fetch_add((atomic_ullong *volatile)(v10 + 80), 1uLL);
  v11[1] = a2;
  v11[3] = v9;
  atomic_fetch_add((atomic_uint *volatile)(v9 + 40), 1u);
  atomic_store(0, v11 + 7);
  apr_hash_set(*(apr_hash_t **)(v10 + 88), v12, 8, v12);
  pthread_mutex_unlock((pthread_mutex_t *)v10);
  int v13 = apr_palloc(**(apr_pool_t ***)(a1 + 24), 0x28uLL);
  *int v13 = a2;
  v13[1] = v12;
  unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 16) + 72));
  void v13[2] = v14;
  v13[3] = -1;
  uint64_t v15 = *find_entry(*(void *)(a1 + 24), &v21, 8uLL, 0);
  if (v15) {
    uint64_t v15 = *(void *)(v15 + 32);
  }
  v13[4] = v15;
  apr_hash_set(*(apr_hash_t **)(a1 + 24), v13, 8, v13);
  return v12;
}

uint64_t UnwrapMTLAccelerationStructurePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  int v8 = Data;
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v20 = 0;
  long long v22 = 0u;
  memset(v19, 0, sizeof(v19));
  unint64_t v21 = (_OWORD *)(&stru_20 + 64);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x86u, 1u);
  uint64_t v10 = v21;
  _OWORD *v21 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  for (unint64_t i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    uint64_t v12 = *i;
    if (*i == -1) {
      break;
    }
    uint64_t v13 = i[2];
    uint64_t v14 = i[3];
    uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2) {
      uint64_t v16 = *AliasStream2;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (void *)v10 + 3 * v12;
    void *v17 = v14;
    v17[1] = v16;
    _DWORD v17[2] = v13;
  }
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLBlitPassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  int v8 = Data;
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  long long v20 = 0x60uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x24u, 1u);
  uint64_t v10 = (_OWORD *)v20;
  *(_OWORD *)long long v20 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  for (unint64_t i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    uint64_t v12 = *i;
    if (*i == -1) {
      break;
    }
    uint64_t v13 = i[2];
    uint64_t v14 = i[3];
    uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2) {
      uint64_t v16 = *AliasStream2;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (void *)v10 + 3 * v12;
    void *v17 = v14;
    v17[1] = v16;
    _DWORD v17[2] = v13;
  }
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLComputePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  int v8 = Data;
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  long long v22 = (_OWORD *)&stru_68;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v20, 0x26u, 1u);
  uint64_t v10 = v22;
  _OWORD *v22 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  *((void *)v10 + 12) = 0;
  uint64_t v11 = *((void *)v8 + 1);
  uint64_t v12 = (uint64_t *)(v8 + 16);
  *((unsigned char *)v10 + 96) = v11;
  while (1)
  {
    uint64_t v13 = *v12;
    if (*v12 == -1) {
      break;
    }
    uint64_t v14 = v12[2];
    uint64_t v15 = v12[3];
    uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, v12[1]);
    if (AliasStream2) {
      uint64_t v17 = *AliasStream2;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (void *)v10 + 3 * v13;
    *uint64_t v18 = v15;
    v18[1] = v17;
    v18[2] = v14;
    v12 += 4;
  }
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLRenderPassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPassDescriptor((uint64_t)Data, v8, (uint64_t)v13, 0, (void *)a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x22u, 1u);
  DecodeDYMTLRenderPassDescriptor(v9, v10, (uint64_t)v13, 1, (void *)a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLResourceStatePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v8 = Data;
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  memset(v19, 0, sizeof(v19));
  long long v20 = 0x60uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x28u, 1u);
  uint64_t v10 = (_OWORD *)v20;
  *(_OWORD *)long long v20 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  for (unint64_t i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    uint64_t v12 = *i;
    if (*i == -1) {
      break;
    }
    uint64_t v13 = i[2];
    uint64_t v14 = i[3];
    uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2) {
      uint64_t v16 = *AliasStream2;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (void *)v10 + 3 * v12;
    void *v17 = v14;
    v17[1] = v16;
    _DWORD v17[2] = v13;
  }
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLCommandBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v8 = Data;
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  long long v16 = 0x10uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v15, 0x4Eu, 1u);
  uint64_t v10 = v16;
  *(_OWORD *)long long v16 = GTMTLCommandBufferDescriptorDefaults;
  *(unsigned char *)(v10 + 8) = *((void *)v8 + 1);
  *(unsigned char *)(v10 + 9) = *((void *)v8 + 2);
  uint64_t v11 = *((void *)v8 + 3);
  *(void *)uint64_t v10 = v11;
  uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, v11);
  if (AliasStream2) {
    uint64_t v13 = *AliasStream2;
  }
  else {
    uint64_t v13 = 0;
  }
  *(void *)uint64_t v10 = v13;
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

double SaveMTLComputePipelineReflection_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  long long v26 = 0u;
  unint64_t v6 = (int *)(a1 + 48);
  memset(v25, 0, sizeof(v25));
  DecodeDYMTLComputePipelineReflection(a3, v25, 0, (int *)(a1 + 48));
  unint64_t v7 = (char *)PerformanceStatisticsURL(a3);
  if (v7)
  {
    FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(*(void *)a1, v7);
    uint64_t v9 = FileWithFilename;
    if (FileWithFilename)
    {
      char v10 = 0;
      uint64_t v11 = *FileWithFilename;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = 0;
  char v10 = 1;
LABEL_6:
  *((void *)&v26 + 1) += v11;
  *(unsigned char *)(*(void *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v25, 0x78u);
  uint64_t v12 = DecodeDYMTLComputePipelineReflection(a3, v25, 1, v6);
  if ((v10 & 1) == 0)
  {
    uint64_t v13 = *(const char ***)a1;
    uint64_t v14 = *(apr_pool_t ***)(a1 + 8);
    uint64_t v15 = *((void *)&v26 + 1);
    GTCaptureArchive_fillBuffer(v13, v14, v7, *((char **)&v26 + 1), *v9, v6);
    uint64_t v16 = *v9;
    *(void *)(v12 + 56) = v15;
    *(void *)(v12 + 64) = v16;
  }
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  uint64_t v17 = *(void *)(v12 + 24);
  if (v17) {
    CalculateBindingsAccess(v17, *(unsigned __int16 *)(v12 + 92), (uint64_t)&v21);
  }
  uint64_t v18 = *(void *)(v12 + 32);
  if (v18) {
    CalculateBindingsAccess(v18, *(unsigned __int16 *)(v12 + 94), (uint64_t)&v21);
  }
  long long v19 = v22;
  *(_OWORD *)(v12 + 104) = v21;
  *(_OWORD *)(v12 + 120) = v19;
  double result = *(double *)&v23;
  *(_OWORD *)(v12 + 136) = v23;
  *(void *)(v12 + 152) = v24;
  return result;
}

uint64_t StoreMTLIntersectionFunctionTableDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v12 = 0x10uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x5Cu, 1u);
  uint64_t v8 = v12;
  unsigned int v9 = *(_DWORD *)Data;
  *(_DWORD *)(v12 + 8) = *((void *)Data + 1);
  if (v9 >= 0x36)
  {
    *(void *)uint64_t v8 = *((void *)Data + 2);
    *(unsigned char *)(v8 + 12) = *((void *)Data + 3);
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLVisibleFunctionTableDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v12 = 0x18uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x52u, 1u);
  uint64_t v8 = v12;
  unsigned int v9 = *(_DWORD *)Data;
  *(void *)long long v12 = *((void *)Data + 1);
  if (v9 >= 0x2F)
  {
    *(void *)(v8 + 8) = *((void *)Data + 2);
    if (v9 >= 0x36) {
      *(unsigned char *)(v8 + 16) = *((void *)Data + 3);
    }
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLFunctionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLFunctionDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x51u, 1u);
  DecodeDYMTLFunctionDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

void SaveMTLFunctionInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLFunctionInfo(a3, v6, 0, (int *)(a1 + 48));
  *(unsigned char *)(*(void *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x7Bu);
  DecodeDYMTLFunctionInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLAccelerationStructureAllocationDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0x10uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)&v10, 0x87u, 1u);
  uint64_t v8 = v11;
  *(unsigned char *)(v11 + 9) = *((void *)Data + 1);
  *(unsigned char *)(v8 + 8) = *((void *)Data + 2);
  *(void *)uint64_t v8 = *((void *)Data + 3);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  long long v11 = 0x28uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x2Au, 1u);
  uint64_t v8 = v11;
  *(_OWORD *)long long v11 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0;
  *(void *)uint64_t v8 = *((void *)Data + 1);
  *(_WORD *)(v8 + 32) = *((void *)Data + 2);
  *(unsigned char *)(v8 + 34) = *((void *)Data + 6);
  *(void *)(v8 + 24) = *((void *)Data + 8);
  *(void *)(v8 + 8) = *((void *)Data + 9);
  *(void *)(v8 + 16) = *((void *)Data + 10);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreIOSurfaceUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYIOSurface((uint64_t)Data, v7, (uint64_t)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x3Fu, 1u);
  DecodeDYIOSurface((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLCommandQueueDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v12 = 0x10uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x43u, 1u);
  uint64_t v8 = v12;
  *(_OWORD *)long long v12 = GTMTLCommandQueueDescriptorDefaults;
  unsigned int v9 = *(_DWORD *)Data;
  *(_DWORD *)uint64_t v8 = *((void *)Data + 1);
  *(unsigned char *)(v8 + 8) = *((void *)Data + 2);
  *(unsigned char *)(v8 + 4) = *((void *)Data + 3);
  *(unsigned char *)(v8 + 7) = *((void *)Data + 4);
  if (v9 >= 0x2A)
  {
    *(unsigned char *)(v8 + 6) = *((void *)Data + 5);
    if (v9 >= 0x51) {
      *(unsigned char *)(v8 + 5) = *((void *)Data + 6);
    }
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLImageFilterFunctionInfoSPIUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  unsigned __int8 v9 = DecodeDYMTLImageFilterFunctionInfoSPI((uint64_t)Data, v7, (uint64_t)v12, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v12, 0x14u, v9);
  DecodeDYMTLImageFilterFunctionInfoSPI((uint64_t)Data, v8, (uint64_t)v12, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLCounterSampleBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLCounterSampleBufferDescriptor((uint64_t)Data, v7, v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x48u, 1u);
  DecodeDYMTLCounterSampleBufferDescriptor((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLDepthStencilDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLDepthStencilDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x34u, 1u);
  DecodeDYMTLDepthStencilDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void SaveMTLDynamicLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLDynamicLibraryInfo(a3, v6, 0, (int *)(a1 + 48));
  *(unsigned char *)(*(void *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x7Cu);
  DecodeDYMTLDynamicLibraryInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLIOCommandQueueDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v11 = 0;
  long long v13 = 0u;
  memset(v10, 0, sizeof(v10));
  uint64_t v12 = (void *)&dword_8;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x89u, 1u);
  uint64_t v8 = v12;
  void *v12 = 64;
  *(_DWORD *)uint64_t v8 = *((void *)Data + 1);
  *((unsigned char *)v8 + 4) = *((void *)Data + 2);
  *((unsigned char *)v8 + 5) = *((void *)Data + 3);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLIndirectCommandBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v12 = 0x18uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x37u, 1u);
  uint64_t v8 = v12;
  *(void *)(v12 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  unsigned int v9 = *(_DWORD *)Data;
  *(_WORD *)(v8 + 8) = *((void *)Data + 1);
  *(unsigned char *)(v8 + 11) = *((void *)Data + 2);
  *(unsigned char *)(v8 + 10) = *((void *)Data + 3);
  *(unsigned char *)(v8 + 18) = *((void *)Data + 4);
  *(unsigned char *)(v8 + 12) = *((void *)Data + 5);
  if (v9 >= 0x1B)
  {
    *(unsigned char *)(v8 + 13) = *((void *)Data + 6);
    *(unsigned char *)(v8 + 14) = *((void *)Data + 7);
    if (v9 >= 0x29)
    {
      *(void *)uint64_t v8 = *((void *)Data + 8);
      if (v9 >= 0x3C)
      {
        *(unsigned char *)(v8 + 20) = *((void *)Data + 9);
        if (v9 >= 0x48)
        {
          *(unsigned char *)(v8 + 16) = *((void *)Data + 10);
          *(unsigned char *)(v8 + 15) = *((void *)Data + 11);
          *(unsigned char *)(v8 + 17) = *((void *)Data + 12);
          if (v9 != 72)
          {
            *(unsigned char *)(v8 + 19) = *((void *)Data + 13);
            if (v9 >= 0x4A) {
              *(unsigned char *)(v8 + 21) = *((void *)Data + 14);
            }
          }
        }
      }
    }
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLMotionEstimationPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  long long v12 = &dword_4;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x42u, 1u);
  uint64_t v8 = v12;
  _DWORD *v12 = 0;
  v8[1] = *((void *)Data + 1);
  _WORD *v8 = *((void *)Data + 2);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void SaveMTLPipelineLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLPipelineLibraryInfo(a3, v6, 0, (int *)(a1 + 48));
  *(unsigned char *)(*(void *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x8Au);
  DecodeDYMTLPipelineLibraryInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLRasterizationRateMapDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLRasterizationRateMapDescriptor((uint64_t)Data, v7, v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x45u, 1u);
  DecodeDYMTLRasterizationRateMapDescriptor((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void *SaveMTLRenderPipelineReflection_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  long long v28 = 0u;
  unint64_t v6 = (int *)(a1 + 48);
  memset(v27, 0, sizeof(v27));
  DecodeDYMTLRenderPipelineReflection(a3, v27, 0, (int *)(a1 + 48));
  uint64_t v7 = (char *)PerformanceStatisticsURL(a3);
  if (v7)
  {
    FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(*(void *)a1, v7);
    unsigned int v9 = FileWithFilename;
    if (FileWithFilename)
    {
      char v10 = 0;
      uint64_t v11 = *FileWithFilename;
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v11 = 0;
  char v10 = 1;
LABEL_6:
  *((void *)&v28 + 1) += v11;
  *(unsigned char *)(*(void *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v27, 0x77u);
  uint64_t v12 = DecodeDYMTLRenderPipelineReflection(a3, v27, 1u, v6);
  if ((v10 & 1) == 0)
  {
    long long v13 = *(const char ***)a1;
    long long v14 = *(apr_pool_t ***)(a1 + 8);
    uint64_t v15 = *((void *)&v28 + 1);
    GTCaptureArchive_fillBuffer(v13, v14, v7, *((char **)&v28 + 1), *v9, v6);
    uint64_t v16 = *v9;
    *(void *)(v12 + 112) = v15;
    *(void *)(v12 + 120) = v16;
  }
  memset(v26, 0, 280);
  uint64_t v17 = *(void *)(v12 + 72);
  if (v17) {
    CalculateBindingsAccess(v17, *(unsigned __int16 *)(v12 + 208), (uint64_t)v26);
  }
  uint64_t v18 = *(void *)(v12 + 24);
  if (v18) {
    CalculateBindingsAccess(v18, *(unsigned __int16 *)(v12 + 198), (uint64_t)v26);
  }
  uint64_t v19 = *(void *)(v12 + 32);
  if (v19) {
    CalculateBindingsAccess(v19, *(unsigned __int16 *)(v12 + 200), (uint64_t)&v26[3] + 8);
  }
  uint64_t v20 = *(void *)(v12 + 40);
  if (v20) {
    CalculateBindingsAccess(v20, *(unsigned __int16 *)(v12 + 204), (uint64_t)&v26[7]);
  }
  uint64_t v21 = *(void *)(v12 + 80);
  if (v21) {
    CalculateBindingsAccess(v21, *(unsigned __int16 *)(v12 + 210), (uint64_t)&v26[7]);
  }
  uint64_t v22 = *(void *)(v12 + 48);
  if (v22) {
    CalculateBindingsAccess(v22, *(unsigned __int16 *)(v12 + 206), (uint64_t)&v26[10] + 8);
  }
  uint64_t v23 = *(void *)(v12 + 88);
  if (v23) {
    CalculateBindingsAccess(v23, *(unsigned __int16 *)(v12 + 212), (uint64_t)&v26[10] + 8);
  }
  uint64_t v24 = *(void *)(v12 + 56);
  if (v24) {
    CalculateBindingsAccess(v24, *(unsigned __int16 *)(v12 + 202), (uint64_t)&v26[14]);
  }
  return memcpy((void *)(v12 + 216), v26, 0x118uLL);
}

uint64_t UnwrapMTLMeshRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v9 = (uint64_t)Data;
  char v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLMeshRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x88u, 1u);
  DecodeDYMTLMeshRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLResidencySetDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLResidencySetDescriptor((uint64_t)Data, v7, (uint64_t *)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x8Eu, 1u);
  DecodeDYMTLResidencySetDescriptor((uint64_t)Data, v8, (uint64_t *)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLSamplerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLSamplerDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x35u, 1u);
  DecodeDYMTLSamplerDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLFunctionConstantValuesUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLFunctionConstantValues((size_t)Data, v7, v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x50u, 1u);
  DecodeDYMTLFunctionConstantValues((size_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLIntersectionFunctionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v8 = (uint64_t)Data;
  uint64_t v9 = v7;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  DecodeDYMTLIntersectionFunctionDescriptor((uint64_t)Data, v7, v12, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v12, 0x5Du, 1u);
  DecodeDYMTLIntersectionFunctionDescriptor(v8, v9, v12, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreBlobWithoutCaptureVersion(uint64_t a1, uint64_t a2, char *a3)
{
  if (a3)
  {
    uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
    uint64_t v5 = *v4;
    unint64_t v6 = (int *)(a1 + 48);
    Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
    if (v8 >= 8)
    {
      uint64_t v9 = GTTraceEncoder_storeBlob(a2, Data + 8, v8 - 8);
      apr_pool_clear(v5);
      return v9;
    }
    int v11 = *v6;
    long long v14 = 0u;
    long long v15 = 0u;
    v12[0] = v11;
    v12[1] = 500;
    uint64_t v13 = "data.length >= sizeof(uint64_t)";
    GTError_addError(v6, (uint64_t)v12);
  }
  return 0;
}

uint64_t UnwrapMTLRenderPipelineFunctionsDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = (uint64_t *)GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v9 = Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPipelineFunctionsDescriptor(Data, v8, (uint64_t)v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x60u, 1u);
  DecodeDYMTLRenderPipelineFunctionsDescriptor(v9, v10, (uint64_t)v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLDeviceDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLDeviceDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x41u, 1u);
  DecodeDYMTLDeviceDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMPSPluginCNNConvolutionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  memset(v11, 0, sizeof(v11));
  DecodeDYMPSPluginCNNConvolutionDescriptor(Data, v7, (uint64_t)v11, 0);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v11, 0x4Au);
  DecodeDYMPSPluginCNNConvolutionDescriptor(Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSPluginCNNConvolutionDataUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  memset(v11, 0, sizeof(v11));
  DecodeDYMPSPluginCNNConvolutionData((uint64_t)Data, v7, v11, 0);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v11, 0x1Bu);
  DecodeDYMPSPluginCNNConvolutionData((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSPluginNDArrayConvolutionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  long long v21 = 0u;
  long long v22 = 0u;
  memset(v19, 0, sizeof(v19));
  long long v20 = 0x2CuLL;
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v19, 0x4Cu);
  uint64_t v8 = 0;
  uint64_t v9 = (unsigned char *)v20;
  *(void *)&long long v20 = v20 + 44;
  uint64_t v10 = (uint64_t *)(Data + 8);
  do
  {
    int v11 = v10;
    uint64_t v12 = *v10++;
    *(_DWORD *)&v9[v8] = v12;
    v8 += 4;
  }
  while (v8 != 12);
  uint64_t v13 = 0;
  v9[36] = *v10;
  uint64_t v14 = v11 + 3;
  v9[37] = v10[1];
  do
  {
    uint64_t v15 = *v14++;
    *(_DWORD *)&v9[v13 + 12] = v15;
    v13 += 4;
  }
  while (v13 != 12);
  for (uint64_t i = 0; i != 12; i += 4)
  {
    uint64_t v17 = *v14++;
    *(_DWORD *)&v9[i + 24] = v17;
  }
  v9[38] = *v14;
  v9[39] = v14[1];
  v9[40] = v14[2];
  v9[41] = v14[3];
  v9[42] = v14[4];
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSSourceTextureInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v15 = 0;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  uint64_t v10 = (void *)(&stru_20 + 48);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)&v10, 0x18u);
  uint64_t v8 = v10;
  void *v10 = *((void *)Data + 1);
  v8[1] = *((void *)Data + 2);
  v8[2] = *((void *)Data + 3);
  v8[3] = *((void *)Data + 4);
  v8[4] = *((void *)Data + 5);
  v8[5] = *((void *)Data + 6);
  v8[6] = *((void *)Data + 7);
  v8[7] = *((void *)Data + 8);
  v8[8] = *((void *)Data + 9);
  v8[9] = *((void *)Data + 10);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSDestinationTextureInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v10 = 0;
  long long v11 = (void *)(&stru_20 + 48);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)&v10, 0x19u);
  uint64_t v8 = v11;
  void *v11 = *((void *)Data + 1);
  v8[1] = *((void *)Data + 2);
  v8[2] = *((void *)Data + 3);
  v8[3] = *((void *)Data + 4);
  v8[4] = *((void *)Data + 5);
  v8[5] = *((void *)Data + 6);
  v8[6] = *((void *)Data + 7);
  v8[7] = *((void *)Data + 8);
  v8[8] = *((void *)Data + 9);
  v8[9] = *((void *)Data + 10);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSNDArrayStructureUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  uint64_t v18 = (void *)(&stru_20 + 16);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v16, 0x1Cu);
  uint64_t v8 = 0;
  uint64_t v9 = v18;
  uint64_t v10 = v18;
  *uint64_t v18 = *((void *)Data + 1);
  uint64_t v18 = v10 + 6;
  long long v11 = (uint64_t *)(Data + 16);
  do
  {
    uint64_t v12 = *v11++;
    *(_DWORD *)((char *)v9 + v8 + 8) = v12;
    v8 += 4;
  }
  while (v8 != 16);
  uint64_t v13 = 0;
  long long v14 = v9 + 3;
  do
    *v14++ = v11[v13++];
  while (v13 != 4);
  *((_DWORD *)v9 + 10) = v11[4];
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMTLFXSpatialScalerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v10, 0, sizeof(v10));
  long long v11 = 0x28uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x8Bu, 1u);
  uint64_t v8 = v11;
  *(void *)long long v11 = *((void *)Data + 1);
  *(void *)(v8 + 8) = *((void *)Data + 2);
  *(void *)(v8 + 16) = *((void *)Data + 3);
  *(void *)(v8 + 24) = *((void *)Data + 4);
  *(_WORD *)(v8 + 32) = *((void *)Data + 5);
  *(_WORD *)(v8 + 34) = *((void *)Data + 6);
  *(unsigned char *)(v8 + 36) = *((void *)Data + 7);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLFXTemporalScalerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  long long v13 = (_WORD *)(&stru_20 + 32);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x8Cu, 1u);
  unsigned int v8 = *(_DWORD *)Data;
  uint64_t v9 = v13;
  *long long v13 = *((void *)Data + 1);
  v9[1] = *((void *)Data + 2);
  v9[2] = *((void *)Data + 3);
  v9[3] = *((void *)Data + 4);
  *((void *)v9 + 2) = *((void *)Data + 5);
  *((void *)v9 + 3) = *((void *)Data + 6);
  *((void *)v9 + 4) = *((void *)Data + 7);
  *((void *)v9 + 5) = *((void *)Data + 8);
  *((_DWORD *)v9 + 12) = *((_DWORD *)Data + 18);
  *((_DWORD *)v9 + 13) = *((_DWORD *)Data + 20);
  *((unsigned char *)v9 + 56) = *((void *)Data + 11);
  *((unsigned char *)v9 + 57) = *((void *)Data + 12);
  if (v8 >= 0x4D)
  {
    *((unsigned char *)v9 + 58) = *((void *)Data + 13);
    void v9[4] = *((void *)Data + 14);
    if (v8 >= 0x50) {
      *((unsigned char *)v9 + 59) = *((void *)Data + 15);
    }
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreSnapshot(uint64_t a1, uint64_t a2, char *__s, void *a4)
{
  unsigned int v8 = *(apr_pool_t **)(a1 + 40);
  size_t v9 = strlen(__s);
  uint64_t v10 = *find_entry(*(void *)(a1 + 32), __s, v9, 0);
  if (v10)
  {
    long long v11 = *(unsigned __int8 **)(v10 + 32);
    if (v11)
    {
      uint64_t v12 = v11[8];
      if (!a4) {
        return v12;
      }
      goto LABEL_11;
    }
  }
  Data = GTCaptureArchive_readData(*(const char ***)a1, *(apr_pool_t ***)(a1 + 8), __s, v8, (int *)(a1 + 48));
  if (v14 < 8)
  {
    int v16 = *(_DWORD *)(a1 + 48);
    long long v20 = 0u;
    long long v21 = 0u;
    v18[0] = v16;
    v18[1] = 500;
    long long v19 = "data.length >= sizeof(uint64_t)";
    GTError_addError((int *)(a1 + 48), (uint64_t)v18);
    return 0;
  }
  else
  {
    uint64_t v12 = GTTraceEncoder_storeBlob(a2, Data, v14);
    long long v11 = (unsigned __int8 *)apr_palloc(v8, 0x10uLL);
    *(void *)long long v11 = **(void **)(a2 + 16);
    v11[8] = v12;
    if (__s)
    {
      long long v15 = apr_palloc(v8, v9 + 1);
      memcpy(v15, __s, v9 + 1);
    }
    else
    {
      long long v15 = 0;
    }
    apr_hash_set(*(apr_hash_t **)(a1 + 32), v15, v9, v11);
    if (a4) {
LABEL_11:
    }
      *a4 = *(void *)v11;
  }
  return v12;
}

uint64_t StoreMTLHeapDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v13 = 24;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x36u, 1u);
  uint64_t v8 = v13;
  *(void *)(v13 + 16) = 32;
  *(_OWORD *)uint64_t v8 = GTMTLHeapDescriptorDefaults;
  unsigned int v9 = *(_DWORD *)Data;
  *(void *)(v8 + 8) = *((void *)Data + 1);
  *(unsigned char *)(v8 + 19) = *((void *)Data + 4);
  *(_WORD *)(v8 + 16) = *((void *)Data + 7);
  if (v9 >= 0x2A)
  {
    *(unsigned char *)(v8 + 18) = *((void *)Data + 8);
    if (v9 >= 0x34) {
      *(void *)uint64_t v8 = *((void *)Data + 9);
    }
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t SaveMTLLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  memset(v7, 0, sizeof(v7));
  DecodeDYMTLLibraryInfo(a3, (uint64_t)v7, 0, (int *)(a1 + 48));
  *(unsigned char *)(*(void *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v7, 0x85u);
  return DecodeDYMTLLibraryInfo(a3, (uint64_t)v7, 1, v5);
}

uint64_t UnwrapMTLCompileOptionsUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLCompileOptions((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x49u, 1u);
  DecodeDYMTLCompileOptions(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLTextureMipmapInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t v7 = Data[8];
  *((void *)&v18 + 1) = 16;
  *(void *)&long long v25 = 16 * v7;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v17, 0x5Fu, 1u);
  uint64_t v9 = *((void *)Data + 1);
  uint64_t v10 = (void *)*((void *)&v18 + 1);
  uint64_t v11 = v25;
  *(unsigned char *)(*((void *)&v18 + 1) + 8) = *((void *)Data + 1);
  if (v9) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  void *v10 = v12;
  if (v9)
  {
    uint64_t v13 = (_DWORD *)(v11 + 8);
    uint64_t v14 = (uint64_t *)(Data + 40);
    do
    {
      *(v13 - 2) = *(v14 - 2);
      *(v13 - 1) = *(v14 - 1);
      uint64_t v15 = *v14;
      v14 += 4;
      *uint64_t v13 = v15;
      v13 += 4;
      --v9;
    }
    while (v9);
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StreamArrayFromFile(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v7 = (int *)(a1 + 48);
  Data = GTCaptureArchive_readData(*(const char ***)a1, *(apr_pool_t ***)(a1 + 8), a3, **(apr_pool_t ***)(a1 + 8), (int *)(a1 + 48));
  if (v9 >= 8 * a4)
  {
    uint64_t v12 = (uint64_t *)Data;
    uint64_t v13 = a4;
    __chkstk_darwin();
    uint64_t v15 = (char *)&v17[-2] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v15, v14);
    return StreamArray(a1, a2, v15, v12, v13);
  }
  else
  {
    int v10 = *v7;
    long long v19 = 0u;
    long long v20 = 0u;
    v17[0] = v10;
    v17[1] = 500;
    long long v18 = "data.length >= count * sizeof(uint64_t)";
    GTError_addError((int *)(a1 + 48), (uint64_t)v17);
    return 0;
  }
}

uint64_t AllocateDescriptorWithCount(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    v6 += (*(void *)(a2 + v5) + 7) & 0xFFFFFFFFFFFFFFF8;
    v5 += 8;
  }
  while (v5 != 424);
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 42);
  *(unsigned char *)(a1 + 42) = v9 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v7, v8, (v6 << 32) | ((unint64_t)a3 << 16) | ((unint64_t)a4 << 8) | v9);
  uint64_t v11 = 0;
  uint64_t v12 = Bytes + 16;
  do
  {
    if (((*(void *)(a2 + v11) + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    v12 += (*(void *)(a2 + v11) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + v11) = v13;
    v11 += 8;
  }
  while (v11 != 424);
  return Bytes[8];
}

uint64_t AllocatePipelineReflectionWithType(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = 0;
  int64x2_t v5 = 0uLL;
  int64x2_t v6 = vdupq_n_s64(7uLL);
  int8x16_t v7 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF8);
  do
  {
    int64x2_t v5 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a2 + v4), v6), v7), v5);
    v4 += 16;
  }
  while (v4 != 192);
  uint64_t v8 = vaddvq_s64(v5);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 42);
  *(unsigned char *)(a1 + 42) = v11 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v9, v10, (v8 << 32) | ((unint64_t)a3 << 16) | v11 | 0x100);
  uint64_t v13 = 0;
  size_t v14 = Bytes + 16;
  do
  {
    if (((*(void *)(a2 + v13) + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    v14 += (*(void *)(a2 + v13) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + v13) = v15;
    v13 += 8;
  }
  while (v13 != 192);
  return Bytes[8];
}

uint64_t AllocateMPSDescriptorWithType(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = 0;
  int64x2_t v5 = 0uLL;
  int64x2_t v6 = vdupq_n_s64(0xFuLL);
  int8x16_t v7 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0);
  do
  {
    int64x2_t v5 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a2 + v4), v6), v7), v5);
    v4 += 16;
  }
  while (v4 != 80);
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 42);
  *(unsigned char *)(a1 + 42) = v10 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v8, v9, (vaddvq_s64(v5) << 32) | ((unint64_t)a3 << 16) | v10 | 0x100);
  uint64_t v12 = 0;
  uint64_t v13 = Bytes + 16;
  do
  {
    if (((*(void *)(a2 + v12) + 15) & 0xFFFFFFFFFFFFFFF0) != 0) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = 0;
    }
    v13 += (*(void *)(a2 + v12) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(a2 + v12) = v14;
    v12 += 8;
  }
  while (v12 != 80);
  return Bytes[8];
}

unint64_t *GTTraceContext_openStream(uint64_t a1, unint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  RetainFreeNode(a1);
  int64x2_t v5 = v4;
  RetainFreeNode(a1);
  void v5[3] = v6;
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 80), 1uLL);
  unint64_t *v5 = add;
  v5[1] = a2;
  v5[2] = 0;
  unint64_t v8 = v5[3];
  *(void *)unint64_t v8 = *(void *)(a1 + 64);
  *(void *)(v8 + 32) = add;
  atomic_fetch_add((atomic_uint *volatile)(v8 + 40), 1u);
  atomic_store(0, v5 + 7);
  apr_hash_set(*(apr_hash_t **)(a1 + 88), v5, 8, v5);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v5;
}

double RetainFreeNode(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (!v2)
  {
    uint64_t v2 = apr_palloc(**(apr_pool_t ***)(a1 + 88), 0x1000uLL);
    for (uint64_t i = 0; i != 504; i += 8)
      v2[i] = &v2[i + 8];
    v2[504] = 0;
    *(void *)(a1 + 96) = v2;
  }
  *(void *)(a1 + 96) = *v2;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  return result;
}

uint64_t GTTraceFunc_argumentBlobWithMap(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 < 0x40) {
    return 0;
  }
  v7[2] = v3;
  v7[3] = v4;
  v7[0] = *a1;
  v7[1] = a2;
  entry = find_entry(a3, v7, 9uLL, 0);
  if (*entry) {
    return *(void *)(*entry + 32);
  }
  else {
    return 0;
  }
}

char *GTTraceFunc_argumentBytesWithPool(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x40) {
    return (char *)a1 + a2;
  }
  uint64_t v3 = *(void *)(a3 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *a1;
  while (1)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v3 + 4));
    int v6 = v5 - 64;
    if (v6 >= 1) {
      break;
    }
LABEL_11:
    double result = 0;
    uint64_t v3 = *(void *)(v3 + 40);
    if (!v3) {
      return result;
    }
  }
  uint64_t v7 = v3 + 64;
  while (v4 != *(void *)v7 || *(unsigned __int8 *)(v7 + 8) != a2)
  {
    signed int v8 = (*(_DWORD *)(v7 + 12) + 23) & 0xFFFFFFF8;
    v7 += v8;
    BOOL v9 = __OFSUB__(v6, v8);
    v6 -= v8;
    if ((v6 < 0) ^ v9 | (v6 == 0)) {
      goto LABEL_11;
    }
  }
  return (char *)(v7 + 16);
}

char *GTTraceFunc_argumentBytesWithMap(void *a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x40) {
    return (char *)a1 + a2;
  }
  v8[2] = v3;
  v8[3] = v4;
  v8[0] = *a1;
  v8[1] = a2;
  entry = find_entry(a3, v8, 9uLL, 0);
  if (!*entry) {
    return 0;
  }
  uint64_t v6 = *(void *)(*entry + 32);
  if (v6) {
    return (char *)(v6 + 16);
  }
  else {
    return 0;
  }
}

char *GTTraceFunc_targetContext(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  double result = GTTraceFunc_argumentBytesWithMap((void *)a1, *(unsigned __int8 *)(a1 + 13), a2);
  if (v2 >> 1 == 2147475691)
  {
    result += 16;
  }
  else if (!result)
  {
    return result;
  }
  return *(char **)result;
}

uint64_t GTTraceMemoryMap_argumentBlobAtIndex(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0x40) {
    return 0;
  }
  v7[2] = v3;
  v7[3] = v4;
  v7[0] = a3;
  v7[1] = a1;
  entry = find_entry(a2, v7, 9uLL, 0);
  if (*entry) {
    return *(void *)(*entry + 32);
  }
  else {
    return 0;
  }
}

void GTTraceContext_pushEncoderWithStream(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v4 = (unint64_t *)(a1 + 32);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a2 + 72), 1uLL);
  *(void *)a1 = a2;
  *(void *)(a1 + 24) = add;
  s();
  unint64_t v8 = *v7;
  unint64_t *v7 = add;
  unint64_t *v4 = v8;
  char v9 = *((unsigned char *)v7 + 8);
  *(unsigned char *)(a1 + 40) = v9;
  *(_WORD *)(a1 + 41) = 16400;
  *(_DWORD *)(a1 + 43) = 0;
  *(unsigned char *)(a1 + 47) = 0;
  if (!v6) {
    uint64_t v6 = *(void *)(a2 + 112);
  }
  *(void *)(a1 + 8) = v6;
  PushFunc(v6);
  *(void *)(a1 + 16) = v10;
  *(void *)uint64_t v10 = add;
  *(_DWORD *)(v10 + 11) = 0;
  *(_DWORD *)(v10 + 8) = 0;
  *(unsigned char *)(v10 + 15) = v9;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  if (v8)
  {
    char v11 = GTTraceEncoder_storeBytes(a1, v4, 8uLL);
    uint64_t v10 = *(void *)(a1 + 16);
  }
  else
  {
    char v11 = 0;
  }
  *(unsigned char *)(v10 + 12) = v11;
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(a2 + 120));
  if (v12)
  {
    uint64_t v13 = *(void *)a1;
    uint64_t v14 = *(void *)(a1 + 24);
    GTTraceContext_backtrace_callstack();
    long long v16 = v15;
    int v17 = backtrace(v15, 512);
    if (v17 >= 1)
    {
      uint64_t v18 = v17 - 2;
      size_t v19 = 8 * v18;
      __uint64_t v43 = 0;
      pthread_threadid_np(0, &v43);
      unsigned int v20 = v43 & 0xF;
      __uint64_t v21 = v13 + 24 * (v43 & 0xF);
      unsigned int v22 = atomic_fetch_add((atomic_uint *volatile)(v21 + 144), 1u);
      long long v23 = (unsigned int *)(v21 + 148);
      do
        unsigned int v24 = atomic_load(v23);
      while (v24 != v22);
      unint64_t v25 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v26 = v13 + 24 * v20;
      uint64_t v29 = *(unsigned int **)(v26 + 128);
      long long v28 = (void *)(v26 + 128);
      long long v27 = v29;
      if (!v29) {
        goto LABEL_16;
      }
      unsigned int v30 = atomic_load(v27 + 1);
      while (1)
      {
        uint64_t v31 = v30;
        unint64_t v32 = v25 + v30;
        unint64_t v33 = *v27;
        if (v32 > v33) {
          break;
        }
        unsigned int v30 = v31;
        atomic_compare_exchange_strong((atomic_uint *volatile)v27 + 1, &v30, v32);
        if (v30 == v31)
        {
          unint64_t v33 = *v27;
          break;
        }
      }
      long long v34 = (void *)((char *)v27 + v31);
      if (v32 > v33)
      {
LABEL_16:
        long long v35 = (unsigned int *)GTTraceStoreAllocNode(*(int **)(v13 + 64), 0x3FC0uLL, 3, 0);
        *((void *)v35 + 5) = *v28;
        *long long v28 = v35;
        uint64_t v36 = v13 + 24 * v20;
        uint64_t v38 = *(void *)(v36 + 136);
        long long v37 = (void *)(v36 + 136);
        if (!v38) {
          *long long v37 = v35;
        }
        unsigned int v39 = atomic_load(v35 + 1);
        while (1)
        {
          uint64_t v40 = v39;
          unint64_t v41 = v25 + v39;
          unint64_t v42 = *v35;
          if (v41 > v42) {
            break;
          }
          unsigned int v39 = v40;
          atomic_compare_exchange_strong((atomic_uint *volatile)v35 + 1, &v39, v41);
          if (v39 == v40)
          {
            unint64_t v42 = *v35;
            break;
          }
        }
        long long v34 = (void *)((char *)v35 + v40);
        if (v41 > v42) {
          long long v34 = 0;
        }
      }
      atomic_store(v22 + 1, v23);
      void *v34 = v14;
      v34[1] = v18 | 0x800000000;
      memcpy(v34 + 2, v16 + 2, v19);
    }
  }
}

double PushFunc(uint64_t a1)
{
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 1u);
  do
    unsigned int v3 = atomic_load((unsigned int *)(a1 + 52));
  while (v3 != add);
  uint64_t v4 = *(unsigned int **)(a1 + 40);
  if (!v4) {
    goto LABEL_9;
  }
  unsigned int v5 = atomic_load(v4 + 1);
  while (1)
  {
    uint64_t v6 = v5;
    unint64_t v7 = v5 + 64;
    unint64_t v8 = *v4;
    if (v7 > v8) {
      break;
    }
    unsigned int v5 = v6;
    atomic_compare_exchange_strong((atomic_uint *volatile)v4 + 1, &v5, v7);
    if (v5 == v6)
    {
      unint64_t v8 = *v4;
      break;
    }
  }
  if (v7 <= v8)
  {
    size_t v19 = (_OWORD *)((char *)v4 + v6);
    signed int v9 = add + 1;
  }
  else
  {
LABEL_9:
    signed int v9 = add + 1;
    if ((unint64_t)((uint64_t)(int)(add + 1) << 7) >= 0x3FC0) {
      unint64_t v10 = 16320;
    }
    else {
      unint64_t v10 = (uint64_t)v9 << 7;
    }
    char v11 = (unsigned int *)GTTraceStoreAllocNode(**(int ***)(a1 + 24), v10, 1, *(void *)a1);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      uint64_t v13 = (void *)(v12 + 40);
    }
    else {
      uint64_t v13 = (void *)(a1 + 32);
    }
    *uint64_t v13 = v11;
    *(void *)(a1 + 40) = v11;
    *((void *)v11 + 5) = 0;
    unsigned int v14 = atomic_load(v11 + 1);
    while (1)
    {
      uint64_t v15 = v14;
      unint64_t v16 = v14 + 64;
      unint64_t v17 = *v11;
      if (v16 > v17) {
        break;
      }
      unsigned int v14 = v15;
      atomic_compare_exchange_strong((atomic_uint *volatile)v11 + 1, &v14, v16);
      if (v14 == v15)
      {
        unint64_t v17 = *v11;
        break;
      }
    }
    uint64_t v18 = (_OWORD *)((char *)v11 + v15);
    if (v16 <= v17) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = 0;
    }
  }
  double result = 0.0;
  _OWORD v19[2] = 0u;
  _OWORD v19[3] = 0u;
  *size_t v19 = 0u;
  v19[1] = 0u;
  atomic_store(v9, (unsigned int *)(a1 + 52));
  return result;
}

uint64_t GTTraceEncoder_storeBytes(uint64_t a1, void *__src, size_t __n)
{
  uint64_t v3 = 0;
  if (__src)
  {
    unsigned int v4 = __n;
    if (__n)
    {
      uint64_t v3 = *(unsigned __int8 *)(a1 + 41);
      if (v3 + __n > 0x40)
      {
        uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 24);
        uint64_t v3 = *(unsigned __int8 *)(a1 + 42);
        *(unsigned char *)(a1 + 42) = v3 + 1;
        if (__n)
        {
          Bytes = GTTraceMemPool_allocateBytes(v7, *(void *)(a1 + 24), v3 | ((unint64_t)__n << 32));
          memcpy(Bytes + 16, __src, v4);
        }
      }
      else
      {
        memcpy((void *)(*(void *)(a1 + 16) + v3), __src, __n);
        *(unsigned char *)(a1 + 41) += (v4 + 7) & 0xF8;
      }
    }
  }
  return v3;
}

char *GTTraceEncoder_allocateArguments(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(_DWORD *)(v3 + 8) = a2;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 41);
  if ((unint64_t)(v4 + a3) > 0x40)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 42);
    *(unsigned char *)(a1 + 42) = v7 + 1;
    unsigned int v5 = GTTraceMemPool_allocateBytes(v6, *(void *)(a1 + 24), v7 | (a3 << 32)) + 16;
    LOBYTE(v4) = v7;
  }
  else
  {
    unsigned int v5 = (char *)(v3 + v4);
    *(unsigned char *)(a1 + 41) = v4 + a3;
  }
  *(unsigned char *)(v3 + 13) = v4;
  return v5;
}

uint64_t GTTraceEncoder_storeBlob(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a2)
  {
    if (a3)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 24);
      uint64_t v3 = *(unsigned __int8 *)(a1 + 42);
      *(unsigned char *)(a1 + 42) = v3 + 1;
      if (a3)
      {
        size_t v6 = a3;
        Bytes = GTTraceMemPool_allocateBytes(v4, *(void *)(a1 + 24), v3 | ((unint64_t)a3 << 32));
        memcpy(Bytes + 16, a2, v6);
      }
    }
  }
  return v3;
}

uint64_t GTTraceStream_lastFunc(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    unsigned int v2 = atomic_load((unsigned int *)(v1 + 4));
    if (v2 < 0x80)
    {
LABEL_7:
      uint64_t v1 = *(void *)(a1 + 32);
      if (v1)
      {
        unsigned int v6 = 0;
        while (1)
        {
          unsigned int v7 = atomic_load((unsigned int *)(v1 + 4));
          int v8 = v6 + (v7 >> 6) - 1;
          if (v8 > 0) {
            break;
          }
          uint64_t v1 = *(void *)(v1 + 40);
          unsigned int v6 = v8;
          if (!v1) {
            return v1;
          }
        }
        uint64_t v9 = v6;
        uint64_t v10 = (uint64_t)(0xFFFFFFFF00000001 * v6) >> 32;
        if ((*(unsigned char *)(v1 + (v10 << 6) + 79) & 8) != 0)
        {
          do
          {
            uint64_t v11 = v1;
            uint64_t v12 = v10;
            unsigned int v13 = atomic_load((unsigned int *)(v1 + 4));
            uint64_t v14 = (HIDWORD(v9) + 1);
            if (v14 == v9 + (v13 >> 6) - 1)
            {
              uint64_t v1 = *(void *)(v11 + 40);
              if (!v1) {
                return v11 + (v12 << 6) + 64;
              }
              uint64_t v9 = (HIDWORD(v9) + 1);
            }
            else
            {
              uint64_t v9 = v9;
              uint64_t v1 = v11;
            }
            v9 |= v14 << 32;
            uint64_t v10 = (uint64_t)(0xFFFFFFFF00000001 * v9) >> 32;
          }
          while ((*(unsigned char *)(v1 + (v10 << 6) + 79) & 8) != 0);
          return v11 + (v12 << 6) + 64;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      int v3 = (v2 >> 6) - 2;
      uint64_t v4 = v1 + 64;
      while (1)
      {
        uint64_t v1 = v4 + ((unint64_t)v3 << 6);
        if ((*(unsigned char *)(v1 + 15) & 8) != 0) {
          break;
        }
        BOOL v5 = __OFSUB__(v3--, 1);
        if (v3 < 0 != v5) {
          goto LABEL_7;
        }
      }
    }
  }
  return v1;
}

uint64_t GTMTLGPUAddressResource_compare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

void *GTMTLGPUAddressResource_resourceForGPUAddress(void *a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a1;
  do
  {
    uint64_t v4 = &a1[3 * (a2 >> 1)];
    unint64_t v6 = *v4;
    BOOL v5 = v4 + 3;
    BOOL v7 = v6 > a3;
    if (v6 <= a3) {
      a2 += ~(a2 >> 1);
    }
    else {
      a2 >>= 1;
    }
    if (!v7) {
      a1 = v5;
    }
  }
  while (a2);
  if (a1 == v3) {
    return 0;
  }
  uint64_t v9 = *(a1 - 3);
  uint64_t v10 = *(a1 - 2);
  double result = a1 - 3;
  if (v10 + v9 <= a3) {
    return 0;
  }
  return result;
}

uint64_t GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  entry = find_entry(a1, &v5, 8uLL, 0);
  if (*entry && (uint64_t v3 = *(void *)(*entry + 32)) != 0) {
    return *(void *)(v3 + 8);
  }
  else {
    return 0;
  }
}

void GTMTLIndirectResources_optimizeByKey(uint64_t *a1, uint64_t *a2, int a3, apr_pool_t *pool)
{
  uint64_t v49 = *a2;
  *a1 = *a2;
  BOOL v7 = apr_hash_make(pool);
  a1[1] = (uint64_t)v7;
  int v8 = apr_hash_make(pool);
  a1[2] = (uint64_t)v8;
  uint64_t v9 = apr_hash_make(pool);
  a1[3] = (uint64_t)v9;
  uint64_t v10 = apr_hash_make(pool);
  a1[4] = (uint64_t)v10;
  uint64_t v11 = apr_hash_make(pool);
  a1[5] = (uint64_t)v11;
  uint64_t v12 = apr_hash_make(pool);
  a1[6] = (uint64_t)v12;
  unsigned int v13 = apr_hash_make(pool);
  a1[7] = (uint64_t)v13;
  ht = apr_hash_make(pool);
  a1[8] = (uint64_t)ht;
  uint64_t v50 = apr_hash_make(pool);
  a1[9] = (uint64_t)v50;
  a1[10] = 0;
  qsort(*(void **)(v49 + 24), *(int *)(v49 + 12), *(int *)(v49 + 8), (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
  uint64_t v14 = a2[1];
  uint64_t v15 = *(unsigned int *)(v14 + 12);
  if ((int)v15 >= 1)
  {
    unint64_t v16 = *(char **)(v14 + 24);
    do
    {
      if (a3 == 1) {
        unint64_t v17 = v16 + 16;
      }
      else {
        unint64_t v17 = v16;
      }
      apr_hash_set(v7, v17, 8, v16);
      v16 += 32;
      --v15;
    }
    while (v15);
  }
  uint64_t v18 = a2[2];
  uint64_t v19 = *(unsigned int *)(v18 + 12);
  if ((int)v19 >= 1)
  {
    unsigned int v20 = *(char **)(v18 + 24);
    do
    {
      if (a3 == 1) {
        __uint64_t v21 = v20 + 16;
      }
      else {
        __uint64_t v21 = v20;
      }
      apr_hash_set(v8, v21, 8, v20);
      v20 += 32;
      --v19;
    }
    while (v19);
  }
  uint64_t v22 = a2[3];
  uint64_t v23 = *(unsigned int *)(v22 + 12);
  if ((int)v23 >= 1)
  {
    unsigned int v24 = *(char **)(v22 + 24);
    do
    {
      if (a3 == 1) {
        unint64_t v25 = v24 + 16;
      }
      else {
        unint64_t v25 = v24;
      }
      apr_hash_set(v9, v25, 8, v24);
      v24 += 32;
      --v23;
    }
    while (v23);
  }
  uint64_t v26 = a2[4];
  uint64_t v27 = *(unsigned int *)(v26 + 12);
  if ((int)v27 >= 1)
  {
    long long v28 = *(char **)(v26 + 24);
    do
    {
      if (a3 == 1) {
        uint64_t v29 = v28 + 16;
      }
      else {
        uint64_t v29 = v28;
      }
      apr_hash_set(v10, v29, 8, v28);
      v28 += 32;
      --v27;
    }
    while (v27);
  }
  uint64_t v30 = a2[5];
  uint64_t v31 = *(unsigned int *)(v30 + 12);
  if ((int)v31 >= 1)
  {
    unint64_t v32 = *(char **)(v30 + 24);
    do
    {
      if (a3 == 1) {
        unint64_t v33 = v32 + 16;
      }
      else {
        unint64_t v33 = v32;
      }
      apr_hash_set(v11, v33, 8, v32);
      v32 += 32;
      --v31;
    }
    while (v31);
  }
  uint64_t v34 = a2[6];
  uint64_t v35 = *(unsigned int *)(v34 + 12);
  if ((int)v35 >= 1)
  {
    uint64_t v36 = *(char **)(v34 + 24);
    do
    {
      if (a3 == 1) {
        long long v37 = v36 + 16;
      }
      else {
        long long v37 = v36;
      }
      apr_hash_set(v12, v37, 8, v36);
      v36 += 32;
      --v35;
    }
    while (v35);
    uint64_t v38 = a2[6];
    uint64_t v39 = *(unsigned int *)(v38 + 12);
    if ((int)v39 >= 1)
    {
      uint64_t v40 = *(void *)(v38 + 24);
      do
      {
        apr_hash_set(v50, (const void *)(v40 + 24), 8, (const void *)v40);
        v40 += 32;
        --v39;
      }
      while (v39);
    }
  }
  uint64_t v41 = a2[7];
  uint64_t v42 = *(unsigned int *)(v41 + 12);
  if ((int)v42 >= 1)
  {
    __uint64_t v43 = *(char **)(v41 + 24);
    do
    {
      if (a3 == 1) {
        long long v44 = v43 + 16;
      }
      else {
        long long v44 = v43;
      }
      apr_hash_set(v13, v44, 8, v43);
      v43 += 32;
      --v42;
    }
    while (v42);
  }
  uint64_t v45 = a2[8];
  uint64_t v46 = *(unsigned int *)(v45 + 12);
  if ((int)v46 >= 1)
  {
    long long v47 = *(char **)(v45 + 24);
    do
    {
      if (a3 == 1) {
        long long v48 = v47 + 16;
      }
      else {
        long long v48 = v47;
      }
      apr_hash_set(ht, v48, 8, v47);
      v47 += 32;
      --v46;
    }
    while (v46);
  }
}

void GTMTLIndirectResources_allResourcesByKey(uint64_t *a1, _DWORD **a2, unint64_t a3, int a4, apr_pool_t *p)
{
  uint64_t v10 = apr_array_make(p, 32, 8);
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[1], a3, v10);
  uint64_t v11 = apr_array_make(p, v10->nelts, 24);
  v60[0] = (uint64_t)v11;
  if (v10->nelts >= 1)
  {
    uint64_t v12 = v11;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)&v10->elts[8 * v13];
      uint64_t v15 = (int8x16_t *)apr_array_push(v12);
      *uint64_t v15 = vextq_s8(*(int8x16_t *)(v14 + 104), *(int8x16_t *)(v14 + 104), 8uLL);
      v15[1].i64[0] = *(void *)(v14 + 8);
      ++v13;
    }
    while (v13 < v10->nelts);
  }
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[2], a3, v10);
  unint64_t v16 = apr_array_make(p, v10->nelts, 32);
  v60[1] = (uint64_t)v16;
  if (v10->nelts >= 1)
  {
    unint64_t v17 = v16;
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void **)&v10->elts[8 * v18];
      unsigned int v20 = apr_array_push(v17);
      v20[1] = v19[1];
      *unsigned int v20 = v19[21];
      v20[2] = v19[25];
      ++v18;
    }
    while (v18 < v10->nelts);
  }
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[3], a3, v10);
  __uint64_t v21 = apr_array_make(p, v10->nelts, 32);
  v60[2] = (uint64_t)v21;
  int nelts = v10->nelts;
  if (nelts >= 1)
  {
    uint64_t v23 = v21;
    for (uint64_t i = 0; i < nelts; ++i)
    {
      unint64_t v25 = *(void **)&v10->elts[8 * i];
      uint64_t v26 = v25[6];
      if (v26 && *(unsigned char *)(v26 + 62))
      {
        uint64_t v27 = apr_array_push(v23);
        v27[1] = v25[1];
        *uint64_t v27 = v25[8];
        v27[2] = v25[9];
        int nelts = v10->nelts;
      }
    }
  }
  uint64_t v61 = 0;
  int32x2_t v62 = 0;
  int32x2_t v63 = 0;
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[4], a3, v10);
  long long v28 = apr_array_make(p, v10->nelts, 32);
  v60[3] = (uint64_t)v28;
  int v29 = v10->nelts;
  if (v29 >= 1)
  {
    uint64_t v30 = v28;
    for (uint64_t j = 0; j < v29; ++j)
    {
      unint64_t v32 = *(void **)&v10->elts[8 * j];
      if (GTMTLSMPipelineState_supportsIndirectCommandBuffers((uint64_t)v32))
      {
        unint64_t v33 = apr_array_push(v30);
        v33[1] = v32[1];
        *unint64_t v33 = v32[12];
        v33[2] = v32[14];
        int v29 = v10->nelts;
      }
    }
  }
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[5], a3, v10);
  uint64_t v34 = apr_array_make(p, v10->nelts, 32);
  v60[4] = (uint64_t)v34;
  int v35 = v10->nelts;
  if (v35 >= 1)
  {
    uint64_t v36 = v34;
    for (uint64_t k = 0; k < v35; ++k)
    {
      uint64_t v38 = *(void **)&v10->elts[8 * k];
      if (GTMTLSMPipelineState_supportsIndirectCommandBuffers((uint64_t)v38))
      {
        uint64_t v39 = apr_array_push(v36);
        v39[1] = v38[1];
        void *v39 = v38[12];
        v39[2] = v38[14];
        int v35 = v10->nelts;
      }
    }
  }
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[6], a3, v10);
  uint64_t v40 = apr_array_make(p, v10->nelts, 32);
  v60[5] = (uint64_t)v40;
  if (v10->nelts >= 1)
  {
    uint64_t v41 = v40;
    uint64_t v42 = 0;
    do
    {
      __uint64_t v43 = *(void **)&v10->elts[8 * v42];
      long long v44 = apr_array_push(v41);
      v44[1] = v43[1];
      *long long v44 = v43[15];
      v44[2] = v43[16];
      ++v42;
    }
    while (v42 < v10->nelts);
  }
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[7], a3, v10);
  uint64_t v45 = apr_array_make(p, v10->nelts, 32);
  uint64_t v61 = v45;
  if (v10->nelts >= 1)
  {
    uint64_t v46 = v45;
    uint64_t v47 = 0;
    do
    {
      uint64_t v48 = *(void *)&v10->elts[8 * v47];
      uint64_t v49 = apr_array_push(v46);
      v49[1] = *(void *)(v48 + 8);
      void *v49 = *(void *)(v48 + 136);
      *((_OWORD *)v49 + 1) = *(_OWORD *)(v48 + 152);
      ++v47;
    }
    while (v47 < v10->nelts);
  }
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[8], a3, v10);
  uint64_t v50 = apr_array_make(p, v10->nelts, 32);
  int32x2_t v62 = v50;
  if (v10->nelts >= 1)
  {
    int32x2_t v51 = v50;
    uint64_t v52 = 0;
    do
    {
      __int32 v53 = *(void **)&v10->elts[8 * v52];
      int32x2_t v54 = apr_array_push(v51);
      v54[1] = v53[1];
      void *v54 = v53[18];
      _DWORD v54[2] = v53[19];
      ++v52;
    }
    while (v52 < v10->nelts);
  }
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[9], a3, v10);
  int v55 = apr_array_make(p, v10->nelts, 32);
  int32x2_t v63 = v55;
  if (v10->nelts >= 1)
  {
    long long v56 = v55;
    uint64_t v57 = 0;
    do
    {
      long long v58 = *(void **)&v10->elts[8 * v57];
      size_t v59 = apr_array_push(v56);
      v59[1] = v58[1];
      *size_t v59 = v58[16];
      void v59[2] = v58[17];
      ++v57;
    }
    while (v57 < v10->nelts);
  }
  GTMTLIndirectResources_optimizeByKey(a1, v60, a4, p);
}

apr_hash_index_t *GTMTLIndirectResources_rehash(apr_hash_index_t *result, uint64_t a2, int a3, apr_pool_t *p)
{
  uint64_t v5 = result;
  if (*(unsigned __int8 *)(a2 + 80) == a3)
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)result + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)result + 3) = v6;
    *((_OWORD *)result + 4) = *(_OWORD *)(a2 + 64);
    *((void *)result + 10) = *(void *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)double result = *(_OWORD *)a2;
    *((_OWORD *)result + 1) = v7;
  }
  else
  {
    *(void *)double result = apr_array_copy(p, *(const apr_array_header_t **)a2);
    uint64_t v10 = apr_hash_make(p);
    *((void *)v5 + 1) = v10;
    uint64_t v11 = apr_hash_make(p);
    *((void *)v5 + 2) = v11;
    uint64_t v12 = apr_hash_make(p);
    *((void *)v5 + 3) = v12;
    uint64_t v13 = apr_hash_make(p);
    *((void *)v5 + 4) = v13;
    uint64_t v14 = apr_hash_make(p);
    *((void *)v5 + 5) = v14;
    uint64_t v15 = apr_hash_make(p);
    *((void *)v5 + 6) = v15;
    uint64_t v19 = apr_hash_make(p);
    *((void *)v5 + 7) = v19;
    uint64_t v18 = apr_hash_make(p);
    *((void *)v5 + 8) = v18;
    unint64_t v16 = apr_hash_make(p);
    *((void *)v5 + 9) = v16;
    *((unsigned char *)v5 + 80) = a3;
    *(_DWORD *)((char *)v5 + 81) = 0;
    *((_DWORD *)v5 + 21) = 0;
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 8), a3, v10);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 16), a3, v11);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 24), a3, v12);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 32), a3, v13);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 40), a3, v14);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 48), a3, v15);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 72), 2, v16);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 56), a3, v19);
    uint64_t v17 = *(void *)(a2 + 64);
    return GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(v17, a3, v18);
  }
  return result;
}

apr_hash_index_t *GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(uint64_t a1, int a2, apr_hash_t *a3)
{
  uint64_t v5 = *(apr_pool_t **)a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = a1;
  *(_DWORD *)(a1 + 40) = 0;
  double result = apr_hash_next((apr_hash_index_t *)(a1 + 16));
  if (result)
  {
    long long v7 = result;
    do
    {
      int v8 = *(_OWORD **)(*((void *)v7 + 1) + 32);
      uint64_t v9 = apr_palloc(v5, 0x20uLL);
      long long v10 = v8[1];
      *uint64_t v9 = *v8;
      v9[1] = v10;
      uint64_t v11 = v9 + 1;
      if (a2 != 1) {
        uint64_t v11 = v9;
      }
      if (a2 == 2) {
        uint64_t v12 = (char *)v9 + 24;
      }
      else {
        uint64_t v12 = v11;
      }
      apr_hash_set(a3, v12, 8, v9);
      double result = apr_hash_next(v7);
      long long v7 = result;
    }
    while (result);
  }
  return result;
}

uint64_t GTCaptureArchive_cleanup(uint64_t a1)
{
  return 0;
}

size_t GTCaptureArchive_getFileWithFilename(uint64_t a1, char *a2)
{
  uint64_t v4 = *find_entry(*(void *)(a1 + 88), a2, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (!v4 || (size_t result = *(void *)(v4 + 32)) == 0)
  {
    size_t result = strlen(a2);
    if (result)
    {
      unsigned int v6 = -1640531527;
      size_t v7 = result - 1;
      if (result == 1) {
        goto LABEL_8;
      }
      size_t v8 = 0;
      do
      {
        unsigned int v9 = v6 + a2[v8];
        int v10 = (v9 << 16) ^ (a2[v8 + 1] << 11);
        unsigned int v6 = (v10 ^ v9) + ((v10 ^ v9) >> 11);
        v8 += 2;
      }
      while (v8 < v7);
      if (result) {
LABEL_8:
      }
        unsigned int v6 = ((v6 + a2[v7]) ^ ((v6 + a2[v7]) << 11))
           + (((v6 + a2[v7]) ^ ((v6 + a2[v7]) << 11)) >> 17);
      unsigned int v11 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
      unsigned int v12 = (v11 ^ (4 * v11)) + ((v11 ^ (4 * v11)) >> 15);
      unsigned int v13 = v12 ^ (v12 << 10);
      if (!v13) {
        unsigned int v13 = 0x40000000;
      }
      unsigned int v14 = *(_DWORD *)(a1 + 56);
      uint64_t v15 = *(void *)(a1 + 32);
      unsigned int v16 = v13 % v14;
      uint64_t v17 = (int)(v13 % v14);
      while (1)
      {
        unsigned int v18 = *(_DWORD *)(v15 + 12 * v17);
        if (v18 == -1) {
          return 0;
        }
        uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 24);
        if (!strcmp(a2, *(const char **)(v19 + 8 * *(unsigned int *)(v15 + 12 * v17 + 4)))) {
          break;
        }
        if (v14 <= ++v17)
        {
          if (v16)
          {
            uint64_t v20 = 0;
            for (uint64_t i = (unsigned int *)(v15 + 4); ; i += 3)
            {
              unsigned int v18 = *(i - 1);
              if (v18 == -1) {
                break;
              }
              if (!strcmp(a2, *(const char **)(v19 + 8 * *i))) {
                return *(void *)(a1 + 40) + 24 * v18;
              }
              size_t result = 0;
              if (++v20 >= (unint64_t)v16) {
                return result;
              }
            }
          }
          return 0;
        }
      }
      return *(void *)(a1 + 40) + 24 * v18;
    }
  }
  return result;
}

void *GTCaptureArchiveDecompressor_create(apr_pool_t *a1)
{
  unsigned int v2 = apr_palloc(a1, 0x10uLL);
  uint64_t v4 = v2;
  if (v2)
  {
    *unsigned int v2 = 0;
    v2[1] = 0;
  }
  apr_pool_create_ex((apr_pool_t **)v2, a1, 0, v3);
  apr_size_t v5 = compression_decode_scratch_buffer_size(COMPRESSION_ZLIB);
  v4[1] = apr_palloc(a1, v5);
  return v4;
}

void *GTCaptureArchive_mapDataSeperateFile(uint64_t a1, unsigned int *a2, apr_pool_t *a3, int *a4)
{
  unsigned int v7 = a2[4];
  if (!a4)
  {
    if ((v7 & 2) == 0) {
      return 0;
    }
    unsigned int v10 = a2[1];
    uint64_t v11 = *(void *)(a1 + 48);
    if (v10 >= *(_DWORD *)(v11 + 12)) {
      return 0;
    }
    goto LABEL_8;
  }
  if ((v7 & 2) != 0)
  {
    unsigned int v10 = a2[1];
    uint64_t v11 = *(void *)(a1 + 48);
    if (v10 >= *(_DWORD *)(v11 + 12))
    {
      int v16 = *a4;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v16;
      int v22 = 500;
      unsigned int v9 = "0 <= entry->name_entry && entry->name_entry < self->index.string_table->nelts";
      goto LABEL_12;
    }
LABEL_8:
    unsigned int v12 = gt_filepath_merge(*(const char **)a1, *(const char **)(*(void *)(v11 + 24) + 8 * v10), a3);
    int v13 = open(v12, 0);
    int v14 = v13;
    if (a4)
    {
      if (v13 < 0)
      {
        int v15 = *a4;
        long long v24 = 0u;
        long long v25 = 0u;
        int v21 = v15;
        int v22 = 500;
        unsigned int v9 = "0 <= fd";
        goto LABEL_12;
      }
    }
    else if (v13 < 0)
    {
      return 0;
    }
    uint64_t v17 = mmap(0, *a2, 1, 2, v13, 0);
    uint64_t v19 = *a2;
    close(v14);
    uint64_t v20 = apr_palloc(a3, 0x10uLL);
    *uint64_t v20 = v17;
    v20[1] = v19;
    apr_pool_cleanup_register(a3, v20, (apr_status_t (__cdecl *)(void *))GTData_munmap, apr_pool_cleanup_null);
    return v17;
  }
  int v8 = *a4;
  long long v24 = 0u;
  long long v25 = 0u;
  int v21 = v8;
  int v22 = 500;
  unsigned int v9 = "entry->flags & 0x00000002";
LABEL_12:
  uint64_t v23 = v9;
  GTError_addError(a4, (uint64_t)&v21);
  return 0;
}

uint64_t GTData_munmap(uint64_t a1)
{
  return 0;
}

unint64_t GTCaptureArchive_fileBackingStore(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (!a3)
  {
    if ((v3 & 2) != 0) {
      return 0;
    }
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 > *(void *)(a1 + 72)) {
      return 0;
    }
    return *(void *)(a1 + 64) + v4;
  }
  if ((v3 & 2) != 0)
  {
    int v8 = *a3;
    long long v12 = 0u;
    long long v13 = 0u;
    int v9 = v8;
    int v10 = 500;
    unsigned int v6 = "!(entry->flags & 0x00000002)";
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 <= *(void *)(a1 + 72)) {
    return *(void *)(a1 + 64) + v4;
  }
  int v5 = *a3;
  long long v12 = 0u;
  long long v13 = 0u;
  int v9 = v5;
  int v10 = 500;
  unsigned int v6 = "entry->storage_offset <= archive->backingStore.length";
LABEL_9:
  uint64_t v11 = v6;
  GTError_addError(a3, (uint64_t)&v9);
  return 0;
}

void GTCaptureArchive_fillBufferCompressedDeflate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5, int *a6)
{
  if (!a2 && a6)
  {
    int v12 = *a6;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v12;
    int v19 = 500;
    uint64_t v20 = "decompressor != NULL";
    GTError_addError(a6, (uint64_t)&v18);
LABEL_14:
    bzero(a4, a5);
    return;
  }
  if (!a2) {
    goto LABEL_14;
  }
  if (a6 && *(_DWORD *)(a3 + 4) <= 5u)
  {
    int v13 = *a6;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v13;
    int v19 = 500;
    uint64_t v20 = "ZLIB_HEADER_SIZE + ZLIB_ADLER_SIZE <= entry->storage_size";
    GTError_addError(a6, (uint64_t)&v18);
  }
  if (*(_DWORD *)(a3 + 4) < 6u) {
    goto LABEL_14;
  }
  unint64_t v14 = GTCaptureArchive_fileBackingStore(a1, a3, a6);
  if (!v14) {
    goto LABEL_14;
  }
  size_t v15 = compression_decode_buffer((uint8_t *)a4, a5, (const uint8_t *)(v14 + 2), (*(_DWORD *)(a3 + 4) - 6), *(void **)(a2 + 8), COMPRESSION_ZLIB);
  size_t v16 = v15;
  if (a6 && v15 != a5)
  {
    int v17 = *a6;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    uint64_t v20 = "total_out == destSize";
    GTError_addError(a6, (uint64_t)&v18);
  }
  if (v16 != a5) {
    goto LABEL_14;
  }
}

void GTCaptureArchive_fillBuffer(const char **a1, apr_pool_t **a2, char *a3, char *a4, size_t a5, int *a6)
{
  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)a1, a3);
  size_t v12 = *FileWithFilename;
  if (a6 && v12 < a5)
  {
    int v13 = *a6;
    long long v19 = 0u;
    long long v20 = 0u;
    v17[0] = v13;
    v17[1] = 500;
    int v18 = "destSize <= entry->size";
    GTError_addError(a6, (uint64_t)v17);
    size_t v12 = *FileWithFilename;
  }
  if (v12 >= a5)
  {
    if ((FileWithFilename[4] & 2) != 0)
    {
      unint64_t v14 = *(const char **)(*((void *)a1[6] + 3) + 8 * FileWithFilename[1]);
      size_t v15 = *a2;
      size_t v16 = *a1;
      GTCaptureArchive_fillBufferSeperateFile(v16, v14, a4, a5, v15, a6);
    }
    else
    {
      GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)a1, (uint64_t)a2, (uint64_t)FileWithFilename, a4, a5, a6);
    }
  }
  else
  {
    bzero(a4, a5);
  }
}

void GTCaptureArchive_fillBufferSeperateFile(const char *a1, const char *a2, char *a3, size_t a4, apr_pool_t *a5, int *a6)
{
  int v9 = gt_filepath_merge(a1, a2, a5);
  int v10 = open(v9, 0, 0);
  if (v10 < 0)
  {
    char v15 = 0;
    if (!a6) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  int v11 = v10;
  uint64_t v12 = 0;
  while (1)
  {
    size_t v13 = a4 - v12 >= 0x100000 ? 0x100000 : a4 - v12;
    ssize_t v14 = read(v11, &a3[v12], v13);
    if ((unint64_t)(v14 + 1) < 2) {
      break;
    }
    v12 += v14;
    if (v12 == a4)
    {
      char v15 = 1;
      goto LABEL_10;
    }
  }
  char v15 = 0;
LABEL_10:
  close(v11);
  if (a6)
  {
LABEL_13:
    if ((v15 & 1) == 0)
    {
      int v16 = *a6;
      long long v19 = 0u;
      long long v20 = 0u;
      v17[0] = v16;
      v17[1] = 500;
      int v18 = "mapped";
      GTError_addError(a6, (uint64_t)v17);
    }
  }
LABEL_15:
  if ((v15 & 1) == 0)
  {
    bzero(a3, a4);
  }
}

char *GTCaptureArchive_readData(const char **a1, apr_pool_t **a2, char *a3, apr_pool_t *a4, int *a5)
{
  if (!a3) {
    return 0;
  }
  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)a1, a3);
  if (!FileWithFilename) {
    return 0;
  }
  uint64_t v11 = (uint64_t)FileWithFilename;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  unsigned int v12 = FileWithFilename[4];
  apr_size_t v13 = *FileWithFilename;
  ssize_t v14 = (char *)apr_palloc(a4, v13);
  if ((v12 & 2) != 0) {
    GTCaptureArchive_fillBufferSeperateFile(*a1, a3, v14, v13, *a2, (int *)&v17);
  }
  else {
    GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)a1, (uint64_t)a2, v11, v14, v13, (int *)&v17);
  }
  if (DWORD1(v17))
  {
    v16[0] = v17;
    v16[1] = v18;
    _OWORD v16[2] = v19;
    GTError_addError(a5, (uint64_t)v16);
    return 0;
  }
  return v14;
}

unsigned int *GTCaptureArchive_mapData(uint64_t a1, uint64_t a2, char *a3, apr_pool_t *a4)
{
  size_t result = (unsigned int *)GTCaptureArchive_getFileWithFilename(a1, a3);
  if (result)
  {
    uint64_t v8 = (uint64_t)result;
    memset(v11, 0, sizeof(v11));
    if ((result[4] & 2) != 0)
    {
      int v10 = GTCaptureArchive_mapDataSeperateFile(a1, result, a4, (int *)v11);
    }
    else
    {
      apr_size_t v9 = *result;
      int v10 = apr_palloc(a4, v9);
      GTCaptureArchive_fillBufferCompressedDeflate(a1, a2, v8, v10, v9, (int *)v11);
    }
    if (DWORD1(v11[0])) {
      return 0;
    }
    else {
      return (unsigned int *)v10;
    }
  }
  return result;
}

uint64_t GTCaptureArchive_strcmp(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t GTCaptureArchive_filenamesWithPrefix(int a1, const char **a2, char *__s, apr_array_header_t *a4)
{
  uint64_t result = strlen(__s);
  size_t v9 = result;
  int v10 = &a2[a1];
  if (a1 >= 1)
  {
    unint64_t v11 = a1;
    do
    {
      unsigned int v12 = &a2[v11 >> 1];
      ssize_t v14 = *v12;
      apr_size_t v13 = v12 + 1;
      uint64_t result = strncmp(v14, __s, v9);
      if ((int)result >= 0)
      {
        v11 >>= 1;
      }
      else
      {
        a2 = v13;
        v11 += ~(v11 >> 1);
      }
    }
    while ((uint64_t)v11 > 0);
  }
  while (a2 != v10)
  {
    char v15 = *a2;
    uint64_t result = strncmp(*a2, __s, v9);
    if (result) {
      break;
    }
    uint64_t result = (uint64_t)apr_array_push(a4);
    *(void *)uint64_t result = v15;
    ++a2;
  }
  return result;
}

__n128 DYTraceDecode_CALayer_setAnchorPoint(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if ((*(unsigned __int8 *)(a2 + 36) | 4) != 0x74)
    {
      int v8 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v8;
      int v13 = 500;
      ssize_t v14 = "*(const char*)bytes == 'p' || *(const char*)bytes == 't'";
      GTError_addError(a4, (uint64_t)&v12);
    }
    if (*(_DWORD *)(a2 + 37) != 6566464)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      ssize_t v14 = "(memcmp((const char*)bytes + offset + 1, (\"p@2d\") + 1, sizeof(\"p@2d\") - 1) == 0)";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      ssize_t v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_CALayer_setTransform(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if ((*(unsigned __int8 *)(a2 + 36) | 4) != 0x74)
    {
      int v8 = *a4;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v8;
      int v19 = 500;
      long long v20 = "*(const char*)bytes == 'p' || *(const char*)bytes == 't'";
      GTError_addError(a4, (uint64_t)&v18);
    }
    if (*(_DWORD *)(a2 + 37) != 1681273152 || *(_DWORD *)(a2 + 40) != 6579300)
    {
      int v10 = *a4;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v10;
      int v19 = 500;
      long long v20 = "(memcmp((const char*)bytes + offset + 1, (\"p@16ddd\") + 1, sizeof(\"p@16ddd\") - 1) == 0)";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  long long v11 = *(_OWORD *)(a2 + 52);
  long long v12 = *(_OWORD *)(a2 + 68);
  long long v13 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 8) = v11;
  long long v14 = *(_OWORD *)(a2 + 116);
  long long v15 = *(_OWORD *)(a2 + 132);
  long long v16 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 104) = v16;
  *(_OWORD *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 72) = v14;
  *(void *)(a1 + 136) = *(void *)(a2 + 180);
  *(void *)(a1 + 144) = *(void *)(a2 + 188);
  if (a4)
  {
    if (a3 <= 0x9F)
    {
      int v17 = *a4;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }
}

void DYTraceDecode_CAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = a2 + 36;
  int v8 = strcmp((const char *)(a2 + 36), "C@4dd@4dulil");
  if (v8)
  {
    if (a4)
    {
      if (*(void *)v7 != 0x6434406464344043 || *(_DWORD *)(v7 + 8) != 7105653)
      {
        int v10 = *a4;
        long long v22 = 0u;
        long long v23 = 0u;
        int v19 = v10;
        int v20 = 500;
        long long v21 = "memcmp((const char*)bytes + offset, (\"C@4dd@4dull\"), sizeof(\"C@4dd@4dull\")) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }
    uint64_t v11 = 12;
  }
  else
  {
    if (a4)
    {
      if (*(void *)v7 != 0x6434406464344043 || *(void *)(v7 + 5) != 0x6C696C75643440)
      {
        int v13 = *a4;
        long long v22 = 0u;
        long long v23 = 0u;
        int v19 = v13;
        int v20 = 500;
        long long v21 = "memcmp((const char*)bytes + offset, (\"C@4dd@4dulil\"), sizeof(\"C@4dd@4dulil\")) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }
    uint64_t v11 = 16;
  }
  *(void *)a1 = *(void *)(v7 + v11);
  long long v14 = *(_OWORD *)(v7 + v11 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + v11 + 24);
  *(_OWORD *)(a1 + 8) = v14;
  *(void *)(a1 + 40) = *(void *)(v7 + v11 + 40);
  long long v15 = *(_OWORD *)(v7 + v11 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 + v11 + 48);
  *(_OWORD *)(a1 + 64) = v15;
  *(void *)(a1 + 80) = *(void *)(v7 + v11 + 80);
  uint64_t v16 = v11 + 88;
  if (v8)
  {
    unint64_t v17 = v11 | 0x60;
    *(_DWORD *)(a1 + 96) = *(void *)(v7 + v16);
    if (!a4) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v7 + v16);
    *(void *)(a1 + 88) = *(void *)(v11 + v7 + 92);
    unint64_t v17 = v11 + 100;
    if (!a4) {
      return;
    }
  }
  if (v17 > a3)
  {
    int v18 = *a4;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v18;
    int v20 = 500;
    long long v21 = "offset <= length";
    GTError_addError(a4, (uint64_t)&v19);
  }
}

const char *AppendString_12841(const char **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*(void *)(a2 + *a3) == g_null_string_token_12842) {
    int v5 = 0;
  }
  else {
    int v5 = (const char *)(a2 + *a3);
  }
  *a1 = v5;
  if (v5) {
    size_t v6 = strlen(v5) + 1;
  }
  else {
    size_t v6 = 8;
  }
  *a3 = v6 + v4;
  return v5;
}

void DYTraceDecode_InternalData(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  size_t v9 = (strlen((const char *)(a2 + 36)) & 0xFFFFFFFFFFFFFFFCLL) + a2 + 36;
  *(void *)a1 = *(void *)(v9 + 4);
  int v10 = *(_DWORD *)(v9 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  uint64_t v48 = 0;
  switch(v10)
  {
    case 101:
      int v20 = strcmp((const char *)v8, "CiulSlS");
      *(void *)(a1 + 40) = 0;
      if (v20)
      {
        if (!a4) {
          goto LABEL_89;
        }
        if (*(_DWORD *)v8 == 1819633987 && *(_DWORD *)((char *)v8 + 3) == 7099244) {
          goto LABEL_89;
        }
        int v22 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v22;
        int v44 = 500;
        long long v23 = "memcmp((const char*)bytes + offset, (\"CiulSl\"), sizeof(\"CiulSl\")) == 0";
      }
      else
      {
        if (!a4 || *(void *)v8 == 0x536C536C756943) {
          goto LABEL_89;
        }
        int v41 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v41;
        int v44 = 500;
        long long v23 = "memcmp((const char*)bytes + offset, (\"CiulSlS\"), sizeof(\"CiulSlS\")) == 0";
      }
      uint64_t v45 = v23;
      GTError_addError(a4, (uint64_t)&v43);
LABEL_89:
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      uint64_t v48 = 28;
      *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, &v48);
      unint64_t v42 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      *(void *)(a1 + 24) = *(void *)((char *)v8 + v42);
      uint64_t v39 = v42 + 8;
      uint64_t v48 = v39;
      if (v20) {
        goto LABEL_79;
      }
      *(void *)(a1 + 40) = AppendString_12841((const char **)(a1 + 40), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 112:
    case 113:
    case 114:
    case 115:
    case 121:
    case 122:
    case 123:
    case 124:
    case 130:
    case 131:
    case 133:
    case 134:
      goto LABEL_16;
    case 107:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1819633987 || *(_DWORD *)((char *)v8 + 3) != 7107948)
        {
          int v25 = *a4;
          long long v46 = 0u;
          long long v47 = 0u;
          int v43 = v25;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (\"Ciulul\"), sizeof(\"Ciulul\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      *(void *)(a1 + 24) = *(void *)(a2 + 64);
      unint64_t v18 = 36;
      goto LABEL_81;
    case 108:
      if (a4 && *(_DWORD *)v8 ^ 0x53746943 | *((unsigned __int8 *)v8 + 4))
      {
        int v26 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v26;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (\"CitS\"), sizeof(\"CitS\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      unint64_t v27 = 28;
      goto LABEL_76;
    case 109:
    case 120:
      if (a4 && *(void *)v8 ^ 0x626C756C75536943 | *((unsigned __int8 *)v8 + 8))
      {
        int v13 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v13;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (\"CiSululb\"), sizeof(\"CiSululb\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(void *)a1 = *(void *)(a2 + 48);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 56);
      uint64_t v48 = 24;
      *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, &v48);
      uint64_t v14 = v48;
      long long v15 = (char *)v8 + ((v48 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(void *)(a1 + 16) = *(void *)v15;
      *(void *)(a1 + 24) = *((void *)v15 + 1);
      *(unsigned char *)(a1 + 40) = v15[16];
      uint64_t v16 = v14 + 23;
      goto LABEL_80;
    case 110:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1819633987 || v8[2] != 105)
        {
          int v29 = *a4;
          long long v46 = 0u;
          long long v47 = 0u;
          int v43 = v29;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (\"Ciuli\"), sizeof(\"Ciuli\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 64);
      unint64_t v18 = 32;
      goto LABEL_81;
    case 111:
      if (!a4 || *(_DWORD *)v8 == 5597507) {
        goto LABEL_6;
      }
      int v30 = *a4;
      long long v46 = 0u;
      long long v47 = 0u;
      int v43 = v30;
      int v44 = 500;
      long long v12 = "memcmp((const char*)bytes + offset, (\"CiU\"), sizeof(\"CiU\")) == 0";
      goto LABEL_5;
    case 116:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1968531779 || v8[2] != 108)
        {
          int v32 = *a4;
          long long v46 = 0u;
          long long v47 = 0u;
          int v43 = v32;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (\"CiUul\"), sizeof(\"CiUul\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      uint64_t v48 = 20;
      *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v48);
      unint64_t v33 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      *(void *)(a1 + 24) = *(void *)((char *)v8 + v33);
      unint64_t v18 = v33 + 8;
      goto LABEL_81;
    case 117:
    case 127:
    case 128:
    case 129:
    case 132:
      if (!a4 || *(_DWORD *)v8 == 5466435) {
        goto LABEL_6;
      }
      int v11 = *a4;
      long long v46 = 0u;
      long long v47 = 0u;
      int v43 = v11;
      int v44 = 500;
      long long v12 = "memcmp((const char*)bytes + offset, (\"CiS\"), sizeof(\"CiS\")) == 0";
LABEL_5:
      uint64_t v45 = v12;
      GTError_addError(a4, (uint64_t)&v43);
LABEL_6:
      *(void *)a1 = *(void *)(a2 + 40);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
      uint64_t v48 = 16;
      *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 118:
      if (a4 && *(_DWORD *)v8 ^ 0x6C756943 | *((unsigned __int8 *)v8 + 4))
      {
        int v34 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v34;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (\"Ciul\"), sizeof(\"Ciul\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      goto LABEL_67;
    case 119:
      if (a4 && *(void *)v8 != 0x53535369756943)
      {
        int v35 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v35;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (\"CiuiSSS\"), sizeof(\"CiuiSSS\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 56);
      uint64_t v48 = 24;
      *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v48);
      *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v48);
      *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 125:
      if (a4 && *(_DWORD *)v8 ^ 0x6C756943 | *((unsigned __int8 *)v8 + 4))
      {
        int v36 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v36;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (\"Ciul\"), sizeof(\"Ciul\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 24) = *(void *)(a2 + 56);
LABEL_67:
      unint64_t v18 = 28;
      goto LABEL_81;
    case 126:
      if (a4 && *(_DWORD *)v8 ^ 0x53536943 | *((unsigned __int8 *)v8 + 4))
      {
        int v37 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v37;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (\"CiSS\"), sizeof(\"CiSS\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      uint64_t v48 = 20;
      *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v48);
      goto LABEL_77;
    case 135:
      if (a4 && *(_DWORD *)v8 ^ 0x53536943 | *((unsigned __int8 *)v8 + 4))
      {
        int v38 = *a4;
        long long v46 = 0u;
        long long v47 = 0u;
        int v43 = v38;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (\"CiSS\"), sizeof(\"CiSS\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      uint64_t v48 = 20;
      *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v48);
      unint64_t v27 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_76:
      uint64_t v48 = v27;
LABEL_77:
      *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v48);
LABEL_78:
      uint64_t v39 = v48;
LABEL_79:
      uint64_t v16 = v39 + 3;
LABEL_80:
      unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_81;
    default:
      if (v10 == 7)
      {
        if (a4 && *(_DWORD *)v8 ^ 0x69756943 | *((unsigned __int8 *)v8 + 4))
        {
          int v17 = *a4;
          long long v46 = 0u;
          long long v47 = 0u;
          int v43 = v17;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (\"Ciui\"), sizeof(\"Ciui\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
        *(void *)a1 = *(void *)(a2 + 44);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
        unint64_t v18 = 24;
      }
      else
      {
LABEL_16:
        if (a4 && *v8 ^ 0x6943 | *((unsigned __int8 *)v8 + 2))
        {
          int v19 = *a4;
          long long v46 = 0u;
          long long v47 = 0u;
          int v43 = v19;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (\"Ci\"), sizeof(\"Ci\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
        *(void *)a1 = *(void *)(a2 + 40);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
        unint64_t v18 = 16;
      }
LABEL_81:
      if (a4)
      {
        if (v18 > a3)
        {
          int v40 = *a4;
          long long v46 = 0u;
          long long v47 = 0u;
          int v43 = v40;
          int v44 = 500;
          uint64_t v45 = "offset <= length";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }
      return;
  }
}

void DYTraceDecode_MTLAccelerationStructure_allocatedSize(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (strcmp((const char *)(a2 + 36), "Cui"))
  {
    if (a4 && *v8 != 7107907)
    {
      int v9 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    unint64_t v10 = 20;
    if (!a4) {
      return;
    }
LABEL_11:
    if (v10 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
    return;
  }
  if (a4 && *v8 != 6911299)
  {
    int v11 = *a4;
    long long v16 = 0u;
    long long v17 = 0u;
    int v13 = v11;
    int v14 = 500;
    long long v15 = "memcmp((const char*)bytes + offset, (\"Cui\"), sizeof(\"Cui\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  *a1 = *(void *)(a2 + 40);
  a1[1] = *(unsigned int *)(a2 + 48);
  unint64_t v10 = 16;
  if (a4) {
    goto LABEL_11;
  }
}

void DYTraceDecode_MTLBuffer_newTextureWithDescriptor_offset_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CUululul"))
  {
    if (a4 && *(void *)v7 ^ 0x6C756C756C755543 | *(unsigned __int8 *)(v7 + 8))
    {
      int v12 = *a4;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v12;
      int v19 = 500;
      int v20 = "memcmp((const char*)bytes + offset, (\"CUululul\"), sizeof(\"CUululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v18);
    }
    uint64_t v10 = 12;
    uint64_t v11 = 24;
  }
  else
  {
    if (a4)
    {
      if (*(_DWORD *)v7 != 1819628867 || *(_DWORD *)(v7 + 3) != 7107948)
      {
        int v9 = *a4;
        long long v21 = 0u;
        long long v22 = 0u;
        int v18 = v9;
        int v19 = 500;
        int v20 = "memcmp((const char*)bytes + offset, (\"CUulul\"), sizeof(\"CUulul\")) == 0";
        GTError_addError(a4, (uint64_t)&v18);
      }
    }
    uint64_t v10 = 8;
    uint64_t v11 = 16;
  }
  *(void *)a1 = *(void *)(v7 + v10);
  uint64_t v23 = v10 + 8;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), v7, &v23);
  unint64_t v13 = (v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)(v7 + v13);
  *(void *)(a1 + 32) = *(void *)(v7 + v13 + 8);
  unint64_t v14 = v13 + v11;
  if (a4 && *(_WORD *)(v7 + v14) != 116)
  {
    int v15 = *a4;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v15;
    int v19 = 500;
    int v20 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v18);
  }
  unint64_t v16 = (v14 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)(v7 + v16);
  if (a4)
  {
    if (v16 + 8 > a3)
    {
      int v17 = *a4;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }
}

void DYTraceDecode_MTLBuffer_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
  }
}

void DYTraceDecode_MTLCommandQueue_continueCommandBuffer_retainReferences(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911043)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Cti\"), sizeof(\"Cti\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 16) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 56);
    if (*(_WORD *)(a2 + 60) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 64);
    if (a3 <= 0x23)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 16) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 56);
    *(void *)(a1 + 8) = *(void *)(a2 + 64);
  }
}

void DYTraceDecode_MTLComputePipelineState_resourceIndex(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = a2 + 36;
  size_t v8 = strlen((const char *)(a2 + 36));
  *a1 = *(void *)(v8 + v7 + 1);
  a1[1] = *(void *)(v8 + v7 + 9);
  if (a4)
  {
    if (v8 + 17 > a3)
    {
      int v9 = *a4;
      long long v12 = 0u;
      long long v13 = 0u;
      v10[0] = v9;
      v10[1] = 500;
      int v11 = "offset <= length";
      GTError_addError(a4, (uint64_t)v10);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithLength_options(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  int v9 = strcmp((const char *)(a2 + 36), "Culult");
  a1[4] = 0;
  int v10 = a1 + 4;
  if (v9)
  {
    if (a4)
    {
      if (*(_DWORD *)v8 != 1970042179 || *(_WORD *)(v8 + 4) != 108)
      {
        int v12 = *a4;
        long long v22 = 0u;
        long long v23 = 0u;
        int v19 = v12;
        int v20 = 500;
        long long v21 = "memcmp((const char*)bytes + offset, (\"Culul\"), sizeof(\"Culul\")) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    int v10 = a1 + 3;
    uint64_t v13 = 32;
    uint64_t v14 = 60;
  }
  else
  {
    if (a4)
    {
      if (*(_DWORD *)v8 != 1970042179 || *(_DWORD *)(v8 + 3) != 7629941)
      {
        int v16 = *a4;
        long long v22 = 0u;
        long long v23 = 0u;
        int v19 = v16;
        int v20 = 500;
        long long v21 = "memcmp((const char*)bytes + offset, (\"Culult\"), sizeof(\"Culult\")) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    uint64_t v13 = 40;
    uint64_t v14 = 68;
  }
  void *v10 = *(void *)(a2 + v14);
  if (a4)
  {
    if (*(_WORD *)(v8 + v13) != 116)
    {
      int v17 = *a4;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v17;
      int v20 = 500;
      long long v21 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }
    a1[1] = *(void *)(v8 + (v13 | 4));
    if (v13 + 12 > a3)
    {
      int v18 = *a4;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
  else
  {
    a1[1] = *(void *)(v8 + (v13 | 4));
  }
}

void DYTraceDecode_MTLDevice_newBufferWithBytes_length_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  int v9 = strcmp((const char *)(a2 + 36), "CU<b>ulult");
  *(void *)(a1 + 40) = 0;
  if (v9)
  {
    if (a4)
    {
      if (*(void *)v8 != 0x756C753E623C5543 || *(_WORD *)(v8 + 8) != 108)
      {
        int v11 = *a4;
        long long v23 = 0u;
        long long v24 = 0u;
        int v20 = v11;
        int v21 = 500;
        int v12 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul\"), sizeof(\"CU<b>ulul\")) == 0";
LABEL_14:
        long long v22 = v12;
        GTError_addError(a4, (uint64_t)&v20);
      }
    }
  }
  else if (a4)
  {
    if (*(void *)v8 != 0x756C753E623C5543 || *(void *)(v8 + 3) != 0x746C756C753E62)
    {
      int v14 = *a4;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v14;
      int v21 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"CU<b>ulult\"), sizeof(\"CU<b>ulult\")) == 0";
      goto LABEL_14;
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v25 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), v8, &v25);
  unint64_t v15 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)(v8 + v15);
  *(void *)(a1 + 32) = *(void *)(v8 + v15 + 8);
  unint64_t v16 = v15 + 16;
  if (!v9)
  {
    *(void *)(a1 + 40) = *(void *)(v8 + v16);
    unint64_t v16 = v15 + 24;
  }
  if (a4 && *(_WORD *)(v8 + v16) != 116)
  {
    int v17 = *a4;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v17;
    int v21 = 500;
    long long v22 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v20);
  }
  unint64_t v18 = (v16 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)(v8 + v18);
  if (a4)
  {
    if (v18 + 8 > a3)
    {
      int v19 = *a4;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v20);
    }
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (\"CUultt\"), sizeof(\"CUultt\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_options_reflection_error(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  a1[4] = 0;
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Ctultt\"), sizeof(\"Ctultt\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[5] = *(void *)(a2 + 76);
  if (a4)
  {
    if (*(_WORD *)(a2 + 84) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(void *)(a2 + 88);
    if (a3 <= 0x3B)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(void *)(a2 + 88);
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CUUt"))
  {
    if (a4 && *(_DWORD *)v7 ^ 0x74555543 | *(unsigned __int8 *)(v7 + 4))
    {
      int v11 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v11;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"CUUt\"), sizeof(\"CUUt\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
    uint64_t v10 = 8;
  }
  else
  {
    if (a4)
    {
      if (*(void *)v7 != 0x623C553E623C5543 || *(void *)(v7 + 3) != 0x743E623C553E62)
      {
        int v9 = *a4;
        long long v19 = 0u;
        long long v20 = 0u;
        int v16 = v9;
        int v17 = 500;
        long long v18 = "memcmp((const char*)bytes + offset, (\"CU<b>U<b>t\"), sizeof(\"CU<b>U<b>t\")) == 0";
        GTError_addError(a4, (uint64_t)&v16);
      }
    }
    uint64_t v10 = 12;
  }
  *(void *)a1 = *(void *)(v7 + v10);
  uint64_t v21 = v10 + 8;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), v7, &v21);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), v7, &v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)(v7 + v12);
  if (a4 && *(_WORD *)(v12 + v7 + 8) != 116)
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    long long v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)(v7 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_WORD *)(a2 + 44) != 108)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul\"), sizeof(\"CU<b>ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v20 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%llutU<b>t", a1 + 24);
  size_t v8 = strlen(v7);
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)(a1 + 16) = &v7[v9];
  unint64_t v19 = v9 + 8 * *(void *)(a1 + 24);
  *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v7, (uint64_t *)&v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)&v7[v10];
  if (a4 && *(_WORD *)&v7[v10 + 8] != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newLibraryWithFile_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"CUt\"), sizeof(\"CUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newLibraryWithSource_options_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  int v9 = strcmp((const char *)(a2 + 36), "CU<b>tt");
  *(void *)(a1 + 24) = 0;
  if (v9)
  {
    if (!a4 || *v8 == 0x74553E623C5543) {
      goto LABEL_9;
    }
    int v10 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v11 = "memcmp((const char*)bytes + offset, (\"CU<b>Ut\"), sizeof(\"CU<b>Ut\")) == 0";
  }
  else
  {
    if (!a4 || *v8 == 0x74743E623C5543) {
      goto LABEL_9;
    }
    int v12 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v12;
    int v18 = 500;
    int v11 = "memcmp((const char*)bytes + offset, (\"CU<b>tt\"), sizeof(\"CU<b>tt\")) == 0";
  }
  uint64_t v19 = v11;
  GTError_addError(a4, (uint64_t)&v17);
LABEL_9:
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v22 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v22);
  if (v9)
  {
    *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v22);
    unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  else
  {
    unint64_t v13 = ((v22 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 8;
  }
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v13);
  if (a4 && *(_WORD *)((char *)v8 + v13 + 8) != 116)
  {
    int v14 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    uint64_t v19 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  unint64_t v15 = (v13 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      uint64_t v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MTLDevice_newTextureWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (unsigned __int16 *)(a2 + 36);
  int v9 = strcmp((const char *)(a2 + 36), "CUt");
  *(void *)(a1 + 24) = 0;
  if (v9)
  {
    if (a4 && *v8 ^ 0x5543 | *((unsigned __int8 *)v8 + 2))
    {
      int v10 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v10;
      int v18 = 500;
      int v11 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
LABEL_8:
      uint64_t v19 = v11;
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  else if (a4 && *(_DWORD *)v8 != 7624003)
  {
    int v12 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v12;
    int v18 = 500;
    int v11 = "memcmp((const char*)bytes + offset, (\"CUt\"), sizeof(\"CUt\")) == 0";
    goto LABEL_8;
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v22 = 12;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (!v9)
  {
    *(void *)(a1 + 24) = *(void *)((char *)v8 + v13);
    v13 += 8;
  }
  if (a4 && *(unsigned __int16 *)((char *)v8 + v13) != 116)
  {
    int v14 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    uint64_t v19 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  unint64_t v15 = (v13 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      uint64_t v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  a1[3] = 0;
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x746C7543 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (\"Cult\"), sizeof(\"Cult\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 41);
    a1[2] = *(void *)(a2 + 49);
    if (*(_WORD *)(a2 + 65) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 68);
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 41);
    a1[2] = *(void *)(a2 + 49);
    a1[1] = *(void *)(a2 + 68);
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  int v9 = strcmp((const char *)(a2 + 36), "Cult");
  *(void *)(a1 + 16) = 0;
  if (v9)
  {
    if (a4 && *(void *)v8 != 0x3E623C556C7543)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (\"CulU<b>\"), sizeof(\"CulU<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    uint64_t v20 = 24;
    *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), v8, &v20);
    unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  else
  {
    if (a4 && *(_DWORD *)v8 ^ 0x746C7543 | *(unsigned __int8 *)(v8 + 4))
    {
      int v12 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v12;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (\"Cult\"), sizeof(\"Cult\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    unint64_t v11 = 32;
    if (a4 && *(void *)(a2 + 60))
    {
      int v13 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v13;
      int v16 = 500;
      int v17 = "viewMappings == 0";
      GTError_addError(a4, (uint64_t)&v15);
      unint64_t v11 = 32;
    }
  }
  if (a4)
  {
    if (v11 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x74555343 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"CSUt\"), sizeof(\"CSUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1953781059 || *(_WORD *)(a2 + 40) != 116)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      int v15 = "memcmp((const char*)bytes + offset, (\"CUttt\"), sizeof(\"CUttt\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 42);
  uint64_t v18 = 14;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628355 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      uint64_t v18 = "memcmp((const char*)bytes + offset, (\"CSultt\"), sizeof(\"CSultt\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v21 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  unint64_t v12 = (v11 + 19) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    uint64_t v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

__n128 DYTraceDecode_MTLRenderCommandEncoder_setScissorRect(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x6C344043 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"C@4l\"), sizeof(\"C@4l\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x2F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLRenderCommandEncoder_setScissorRects_count(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C755543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    long long v15 = 0u;
    long long v16 = 0u;
    int v12 = v9;
    int v13 = 500;
    long long v14 = "memcmp((const char*)bytes + offset, (\"CUul\"), sizeof(\"CUul\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v17 = 16;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v10);
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CU<b>ulul@6ulululul"))
  {
    if (a4)
    {
      BOOL v13 = *(void *)v8 == 0x756C753E623C5543 && *(void *)(v8 + 8) == 0x756C756C7536406CLL;
      if (!v13 || *(_DWORD *)(v8 + 16) != 7107948)
      {
        int v15 = *a4;
        long long v23 = 0u;
        long long v24 = 0u;
        int v20 = v15;
        int v21 = 500;
        uint64_t v22 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul@6ulululul\"), sizeof(\"CU<b>ulul@6ulululul\")) == 0";
        GTError_addError(a4, (uint64_t)&v20);
      }
    }
    uint64_t v12 = 88;
  }
  else
  {
    if (a4)
    {
      BOOL v9 = *(void *)v8 == 0x756C753E623C5543 && *(void *)(v8 + 8) == 0x756C756C7536406CLL;
      if (!v9 || *(_WORD *)(v8 + 16) != 108)
      {
        int v11 = *a4;
        long long v23 = 0u;
        long long v24 = 0u;
        int v20 = v11;
        int v21 = 500;
        uint64_t v22 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul@6ululul\"), sizeof(\"CU<b>ulul@6ululul\")) == 0";
        GTError_addError(a4, (uint64_t)&v20);
      }
    }
    uint64_t v12 = 80;
  }
  *(void *)a1 = *(void *)(a2 + 56);
  uint64_t v25 = 28;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), v8, &v25);
  unint64_t v16 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)(v8 + v16);
  *(void *)(a1 + 24) = *(void *)(v8 + v16 + 8);
  long long v17 = *(_OWORD *)(v8 + v16 + 16);
  long long v18 = *(_OWORD *)(v8 + v16 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 + v16 + 32);
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 32) = v17;
  *(void *)(a1 + 80) = *(void *)(v8 + v16 + 64);
  *(void *)(a1 + 88) = *(void *)(v8 + v16 + 72);
  if (a4)
  {
    if (v16 + v12 > a3)
    {
      int v19 = *a4;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      uint64_t v22 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v20);
    }
  }
}

void DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  int v9 = strcmp((const char *)(a2 + 36), "C@6ulululU<b>ulul");
  if (v9)
  {
    if (a4)
    {
      BOOL v10 = *(void *)v8 == 0x756C756C75364043 && *(void *)(v8 + 8) == 0x756C753E623C556CLL;
      if (!v10 || *(_DWORD *)(v8 + 16) != 7107948)
      {
        int v12 = *a4;
        long long v25 = 0u;
        long long v26 = 0u;
        int v22 = v12;
        int v23 = 500;
        BOOL v13 = "memcmp((const char*)bytes + offset, (\"C@6ulululU<b>ululul\"), sizeof(\"C@6ulululU<b>ululul\")) == 0";
LABEL_20:
        long long v24 = v13;
        GTError_addError(a4, (uint64_t)&v22);
      }
    }
  }
  else if (a4)
  {
    BOOL v14 = *(void *)v8 == 0x756C756C75364043 && *(void *)(v8 + 8) == 0x756C753E623C556CLL;
    if (!v14 || *(_WORD *)(v8 + 16) != 108)
    {
      int v16 = *a4;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v16;
      int v23 = 500;
      BOOL v13 = "memcmp((const char*)bytes + offset, (\"C@6ulululU<b>ulul\"), sizeof(\"C@6ulululU<b>ulul\")) == 0";
      goto LABEL_20;
    }
  }
  *(void *)a1 = *(void *)(a2 + 56);
  long long v17 = *(_OWORD *)(a2 + 64);
  long long v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 24) = v18;
  *(_OWORD *)(a1 + 8) = v17;
  *(void *)(a1 + 56) = *(void *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 120);
  uint64_t v27 = 92;
  *(void *)(a1 + 72) = AppendString_12841((const char **)(a1 + 72), v8, &v27);
  unint64_t v19 = (v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 80) = *(void *)(v8 + v19);
  *(void *)(a1 + 88) = *(void *)(v8 + v19 + 8);
  unint64_t v20 = v19 + 16;
  if (v9)
  {
    *(void *)(a1 + 96) = *(void *)(v8 + v20);
    unint64_t v20 = v19 + 24;
    if (!a4) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 96) = 0;
    if (!a4) {
      return;
    }
  }
  if (v20 > a3)
  {
    int v21 = *a4;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v21;
    int v23 = 500;
    long long v24 = "offset <= length";
    GTError_addError(a4, (uint64_t)&v22);
  }
}

void DYTraceDecode_Boundary_Frame(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x74747474747443)
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Ctttttt\"), sizeof(\"Ctttttt\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  a1[5] = *(void *)(a2 + 84);
  a1[6] = *(void *)(a2 + 92);
  if (a4)
  {
    if (a3 <= 0x3F)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_CAMetalDrawable_dealloc(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(void *)(a2 + 40);
    if (a3 <= 0xB)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
  }
}

void DYTraceDecode_CAMetalDrawable_presentAfterMinimumDuration(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6443 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"Cd\"), sizeof(\"Cd\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
  }
}

void DYTraceDecode_CAMetalDrawable_texture(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 40);
    if (*(_WORD *)(a2 + 48) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 52);
    if (a3 <= 0x17)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 52);
  }
}

void DYTraceDecode_CAMetalLayer_setBounds_contentsScale(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1681145923 || *(_WORD *)(a2 + 40) != 100)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"C@4dd\"), sizeof(\"C@4dd\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  long long v10 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 8) = v10;
  *(void *)(a1 + 40) = *(void *)(a2 + 84);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_CAMetalLayer_setColorspace(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v16 = 12;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_CAMetalLayer_setDevice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 5600323)
  {
    int v9 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"CtU\"), sizeof(\"CtU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 48);
  uint64_t v16 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

__n128 DYTraceDecode_CAMetalLayer_setDrawableSize(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x64324043 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"C@2d\"), sizeof(\"C@2d\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_CAMetalLayer_setFramebufferOnly(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911299)
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"Cui\"), sizeof(\"Cui\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }
}

void DYTraceDecode_CAMetalLayer_setPixelFormat(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
  }
}

void DYTraceDecode_MTLAccelerationStructure_allocationID(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7828803)
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"Cuw\"), sizeof(\"Cuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
  }
}

void DYTraceDecode_MTLAccelerationStructure_allocationInfo(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7577757775777543 || *(void *)(a2 + 42) != 0x6C756C756C7577)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Cuwuwuwululul\"), sizeof(\"Cuwuwuwululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  if (a4)
  {
    if (a3 <= 0x47)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructure_state(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7569756975697543 || *(_WORD *)(a2 + 44) != 105)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Cuiuiuiui\"), sizeof(\"Cuiuiuiui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructure_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x7775 | *(unsigned __int8 *)(a2 + 50))
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"uw\"), sizeof(\"uw\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 52);
    if (a3 <= 0x17)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 52);
  }
}

void DYTraceDecode_MTLAccelerationStructure_setLabel(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    long long v13 = "memcmp((const char*)bytes + offset, (\"CS\"), sizeof(\"CS\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v16 = 12;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructure_setResponsibleProcess(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6943 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"Ci\"), sizeof(\"Ci\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }
}

void DYTraceDecode_MTLAccelerationStructure_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 58))
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[1] = *(void *)(a2 + 60);
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_setAccelerationStructureState(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6975697569757443 || *(void *)(a2 + 39) != 0x69756975697569)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctuiuiuiui\"), sizeof(\"Ctuiuiuiui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1951757379 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"CtUtul\"), sizeof(\"CtUtul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  uint64_t v18 = 24;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) != 7631939)
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Ctt\"), sizeof(\"Ctt\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 40);
  a1[1] = *(void *)(a2 + 48);
  a1[2] = *(void *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x556C7574557443)
  {
    int v9 = *a4;
    long long v15 = 0u;
    long long v16 = 0u;
    int v12 = v9;
    int v13 = 500;
    long long v14 = "memcmp((const char*)bytes + offset, (\"CtUtulU\"), sizeof(\"CtUtulU\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  unint64_t v17 = 24;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10 + 8);
  unint64_t v17 = v10 + 16;
  *(void *)(a1 + 40) = AppendString_12841((const char **)(a1 + 40), (uint64_t)v8, (uint64_t *)&v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970566211 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cttul\"), sizeof(\"Cttul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1970566211 || *(_DWORD *)(a2 + 39) != 5598325)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"CttulU\"), sizeof(\"CttulU\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  uint64_t v17 = 40;
  *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x6C757474557443)
  {
    int v9 = *a4;
    long long v15 = 0u;
    long long v16 = 0u;
    int v12 = v9;
    int v13 = 500;
    long long v14 = "memcmp((const char*)bytes + offset, (\"CtUttul\"), sizeof(\"CtUttul\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  uint64_t v17 = 24;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v10 + 16);
  if (a4)
  {
    if (v10 + 24 > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C757474557443 || *(_WORD *)(a2 + 44) != 108)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"CtUttulul\"), sizeof(\"CtUttulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  uint64_t v18 = 28;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 16);
  *(void *)(a1 + 48) = *(void *)((char *)v8 + v11 + 24);
  if (a4)
  {
    if (v11 + 32 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 6911340)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Ctului\"), sizeof(\"Ctului\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_updateFence(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x7443 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"Ct\"), sizeof(\"Ct\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useHeaps_count(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  unint64_t v10 = v9 + 8 * v16;
  a1[2] = *(void *)&v7[v10];
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      int v11 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useResource_usage(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x6C757443 | *(unsigned __int8 *)(a2 + 40))
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Ctul\"), sizeof(\"Ctul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useResources_count_usage(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutulul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  unint64_t v10 = v9 + 8 * v16;
  a1[2] = *(void *)&v7[v10];
  a1[3] = *(void *)&v7[v10 + 8];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      int v11 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C756C75747443)
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Cttulul\"), sizeof(\"Cttulul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset_toBuffer_sizeBufferOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C75746C757443)
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Ctultul\"), sizeof(\"Ctultul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLArgumentEncoder_newArgumentEncoderForBufferAtIndex(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    if (*(_WORD *)(a2 + 56) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[1] = *(void *)(a2 + 60);
  }
}

void DYTraceDecode_MTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7107948)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctulul\"), sizeof(\"Ctulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLArgumentEncoder_setBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sscanf((const char *)(a2 + 36), "C@%zut@%zuul@2ul", &v18, &v17);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  uint64_t v10 = v18;
  *(void *)(a1 + 16) = &v7[8 * v18 + v9];
  unint64_t v11 = v9 + 8 * (v10 + v17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v7[v11];
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      v13[0] = v12;
      v13[1] = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)v13);
    }
  }
}

void DYTraceDecode_MTLArgumentEncoder_setIndirectCommandBuffers_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zut@2ul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  unint64_t v10 = v9 + 8 * v16;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      int v11 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    uint64_t v16 = "memcmp((const char*)bytes + offset, (\"CUt\"), sizeof(\"CUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v10);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10 + 8) ^ 0x6975 | *((unsigned __int8 *)v8 + v10 + 10))
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    uint64_t v16 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 4 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      uint64_t v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x75746C7532407443 || *(void *)(a2 + 42) != 0x3E623C556C7574)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Ct@2ultulU<b>\"), sizeof(\"Ct@2ultulU<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 68);
  *(void *)(a1 + 32) = *(void *)(a2 + 84);
  *(void *)(a1 + 40) = *(void *)(a2 + 92);
  uint64_t v17 = 64;
  *(void *)(a1 + 48) = AppendString_12841((const char **)(a1 + 48), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x6C756C756C757443 && *(void *)(a2 + 44) == 0x756C75746C753340;
    if (!v8 || *(void *)(a2 + 50) != 0x6C7533406C756CLL)
    {
      int v10 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"Ctululul@3ultulul@3ul\"), sizeof(\"Ctululul@3ultulul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  *(void *)(a1 + 32) = *(void *)(a2 + 92);
  long long v11 = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 56) = *(void *)(a2 + 116);
  *(_OWORD *)(a1 + 40) = v11;
  *(void *)(a1 + 64) = *(void *)(a2 + 124);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  long long v12 = *(_OWORD *)(a2 + 148);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  *(_OWORD *)(a1 + 88) = v12;
  if (a4)
  {
    if (a3 <= 0x87)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x6C756C756C757443 && *(void *)(a2 + 44) == 0x756C75746C753340;
    if (!v8 || *(void *)(a2 + 52) != 0x6C756C7533406CLL)
    {
      int v10 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"Ctululul@3ultulul@3ulul\"), sizeof(\"Ctululul@3ultulul@3ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  *(void *)(a1 + 32) = *(void *)(a2 + 92);
  long long v11 = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 56) = *(void *)(a2 + 116);
  *(_OWORD *)(a1 + 40) = v11;
  *(void *)(a1 + 64) = *(void *)(a2 + 124);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  long long v12 = *(_OWORD *)(a2 + 148);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  *(_OWORD *)(a1 + 88) = v12;
  *(void *)(a1 + 112) = *(void *)(a2 + 172);
  if (a4)
  {
    if (a3 <= 0x8F)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C75746C757443 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Ctultulul\"), sizeof(\"Ctultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443 && *(void *)(a2 + 44) == 0x75746C7533406C75;
    if (!v8 || *(void *)(a2 + 50) != 0x6C756C756C7574)
    {
      int v10 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ul@3ultululul\"), sizeof(\"Ctulul@3ul@3ultululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  long long v11 = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  long long v12 = *(_OWORD *)(a2 + 116);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  *(void *)(a1 + 96) = *(void *)(a2 + 156);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443 && *(void *)(a2 + 44) == 0x75746C7533406C75;
    if (!v8 || *(void *)(a2 + 52) != 0x6C756C756C756CLL)
    {
      int v10 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ul@3ultulululul\"), sizeof(\"Ctulul@3ul@3ultulululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  long long v11 = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  long long v12 = *(_OWORD *)(a2 + 116);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  *(void *)(a1 + 96) = *(void *)(a2 + 156);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  *(void *)(a1 + 112) = *(void *)(a2 + 172);
  if (a4)
  {
    if (a3 <= 0x8F)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443 && *(void *)(a2 + 44) == 0x75746C7533406C75;
    if (!v8 || *(void *)(a2 + 52) != 0x6C7533406C756CLL)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ul@3ultulul@3ul\"), sizeof(\"Ctulul@3ul@3ultulul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  long long v11 = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  long long v12 = *(_OWORD *)(a2 + 116);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  *(void *)(a1 + 96) = *(void *)(a2 + 156);
  long long v13 = *(_OWORD *)(a2 + 164);
  *(void *)(a1 + 120) = *(void *)(a2 + 180);
  *(_OWORD *)(a1 + 104) = v13;
  if (a4)
  {
    if (a3 <= 0x97)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443 && *(void *)(a2 + 44) == 0x75746C7533406C75;
    BOOL v9 = v8 && *(void *)(a2 + 52) == 0x756C7533406C756CLL;
    if (!v9 || *(_WORD *)(a2 + 60) != 108)
    {
      int v11 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v11;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ul@3ultulul@3ulul\"), sizeof(\"Ctulul@3ul@3ultulul@3ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 64);
  *(void *)(a1 + 8) = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 88);
  long long v12 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 48) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 32) = v12;
  long long v13 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 72) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 80) = *(void *)(a2 + 144);
  *(void *)(a1 + 88) = *(void *)(a2 + 152);
  *(void *)(a1 + 96) = *(void *)(a2 + 160);
  long long v14 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 120) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 104) = v14;
  *(void *)(a1 + 128) = *(void *)(a2 + 192);
  if (a4)
  {
    if (a3 <= 0xA3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C756C757443 || *(void *)(a2 + 44) != 0x6C756C756C756CLL)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctulultulululul\"), sizeof(\"Ctulultulululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  a1[7] = *(void *)(a2 + 108);
  a1[8] = *(void *)(a2 + 116);
  if (a4)
  {
    if (a3 <= 0x57)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C7532407443 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ct@2ultul\"), sizeof(\"Ct@2ultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 80);
  *(void *)(a1 + 40) = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillBuffer_range_pattern4(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x69756C7532407443 | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Ct@2ului\"), sizeof(\"Ct@2ului\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillBuffer_range_value(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x62756C7532407443 | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Ct@2ulub\"), sizeof(\"Ct@2ulub\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x36406C756C757443 | *(void *)(a2 + 44) ^ 0x6C753E623C556C75 | *(unsigned __int8 *)(a2 + 52))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@6ulU<b>ul\"), sizeof(\"Ctulul@6ulU<b>ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 72);
  *(void *)(a1 + 24) = *(void *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 88);
  long long v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  uint64_t v19 = 100;
  *(void *)(a1 + 80) = AppendString_12841((const char **)(a1 + 80), (uint64_t)v8, &v19);
  unint64_t v12 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 88) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x36406C756C757443 || *(void *)(a2 + 42) != 0x6434406C753640)
    {
      int v9 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      int v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@6ul@4d\"), sizeof(\"Ctulul@6ul@4d\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  long long v10 = *(_OWORD *)(a2 + 84);
  long long v11 = *(_OWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  long long v12 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 96) = v12;
  if (a4)
  {
    if (a3 <= 0x7F)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x36406C756C757443 || *(void *)(a2 + 44) != 0x6C756434406C75)
    {
      int v9 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      int v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@6ul@4dul\"), sizeof(\"Ctulul@6ul@4dul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  long long v10 = *(_OWORD *)(a2 + 84);
  long long v11 = *(_OWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  long long v12 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 96) = v12;
  *(void *)(a1 + 112) = *(void *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C756C7536407443 || *(void *)(a2 + 44) != 0x6C757469756C75)
    {
      int v9 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      int v15 = "memcmp((const char*)bytes + offset, (\"Ct@6ulululuitul\"), sizeof(\"Ct@6ulululuitul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  long long v10 = *(_OWORD *)(a2 + 68);
  long long v11 = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 116);
  *(void *)(a1 + 72) = *(void *)(a2 + 124);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 132);
  *(void *)(a1 + 80) = *(void *)(a2 + 136);
  *(void *)(a1 + 88) = *(void *)(a2 + 144);
  if (a4)
  {
    if (a3 <= 0x73)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 843084867 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Ct@2ul\"), sizeof(\"Ct@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C756C7536407443 || *(void *)(a2 + 39) != 0x6C756C756C7536)
    {
      int v9 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"Ct@6ululul\"), sizeof(\"Ct@6ululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  long long v10 = *(_OWORD *)(a2 + 64);
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 112);
  *(void *)(a1 + 72) = *(void *)(a2 + 120);
  if (a4)
  {
    if (a3 <= 0x5B)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLBuffer_parentGPUAddress_parentGPUSize(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970763075 || *(_WORD *)(a2 + 40) != 119)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cuwuw\"), sizeof(\"Cuwuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBuffer_addDebugMarker_range(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 843076419 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"CS@2ul\"), sizeof(\"CS@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v18 = 16;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)((char *)v8 + v11);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

__n128 DYTraceDecode_MTLBuffer_didModifyRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966227523 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"C@2ul\"), sizeof(\"C@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLBuffer_isAliasable(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x6975 | *(unsigned __int8 *)(a2 + 50))
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
    if (a3 <= 0x13)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  }
}

void DYTraceDecode_MTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C756C756C755543 | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CUululul\"), sizeof(\"CUululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v19 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v10 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 24) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBuffer_newRemoteBufferViewForDevice(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x7443 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Ct\"), sizeof(\"Ct\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    if (*(_WORD *)(a2 + 56) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[1] = *(void *)(a2 + 60);
  }
}

void DYTraceDecode_MTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_DWORD *)(a2 + 39) != 7107948)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CUulul\"), sizeof(\"CUulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75643440746C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Cult@4dul\"), sizeof(\"Cult@4dul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = v10;
  *(void *)(a1 + 56) = *(void *)(a2 + 104);
  if (a4)
  {
    if (a3 <= 0x4B)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

const char *DYTraceDecode_MTLCommandBuffer_restoreMTLBufferContents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 36;
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  uint64_t v6 = 28;
  __n128 result = AppendString_12841((const char **)(a1 + 16), a2 + 36, &v6);
  *(void *)(a1 + 16) = result;
  int v5 = (void *)(v3 + ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL));
  *(void *)(a1 + 24) = *v5;
  *(void *)(a1 + 32) = v5[1];
  return result;
}

void DYTraceDecode_MTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7828803)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cuw\"), sizeof(\"Cuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 8) = *(void *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6975 | *(unsigned __int8 *)(a2 + 58))
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
    if (a3 <= 0x1B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 8) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  }
}

void DYTraceDecode_MTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 105)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Cului\"), sizeof(\"Cului\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 16) = *(void *)(a2 + 52);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 68);
    if (a3 <= 0x27)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 16) = *(void *)(a2 + 52);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
    *(void *)(a1 + 8) = *(void *)(a2 + 68);
  }
}

void DYTraceDecode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x6C756C756C757443 | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Ctululul\"), sizeof(\"Ctululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x33)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sscanf((const char *)(a2 + 36), "Ctul@%zuul@%zuulul", &v19, &v18);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *a1 = *(void *)(v9 + 4);
  a1[1] = *(void *)(v9 + 12);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 28;
  a1[2] = *(void *)(v9 + 20);
  a1[3] = &v7[v10];
  uint64_t v11 = v19;
  a1[4] = &v7[8 * v19 + v10];
  unint64_t v12 = v10 + 8 * (v11 + v18);
  a1[5] = *(void *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      v14[0] = v13;
      v14[1] = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)v14);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_encodeSignalEvent_value(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x77757443 | *(unsigned __int8 *)(a2 + 40))
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    unint64_t v12 = "memcmp((const char*)bytes + offset, (\"Ctuw\"), sizeof(\"Ctuw\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      unint64_t v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_encodeWaitForEvent_value_timeout(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 2004186179 || *(_DWORD *)(a2 + 39) != 6911351)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctuwui\"), sizeof(\"Ctuwui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_presentDrawable_afterMinimumDuration(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) != 6583363)
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Ctd\"), sizeof(\"Ctd\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 40);
  a1[1] = *(void *)(a2 + 48);
  a1[2] = *(void *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C753E623C555543 | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CUU<b>ul\"), sizeof(\"CUU<b>ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v19 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLCommandQueue_getSPIStats(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_WORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 67)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    if (*(_DWORD *)(a2 + 48) ^ 0x3E623C55 | *(unsigned __int8 *)(a2 + 52))
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"U<b>\"), sizeof(\"U<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
  }
  uint64_t v17 = 20;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLCommandQueue_setBackgroundGPUPriority(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 8) = *(void *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6975 | *(unsigned __int8 *)(a2 + 58))
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
    if (a3 <= 0x1B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 8) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  }
}

void DYTraceDecode_MTLCommandQueue_setBackgroundGPUPriority_offset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 115)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Culus\"), sizeof(\"Culus\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 60);
    if (*(unsigned __int16 *)(a2 + 64) ^ 0x6975 | *(unsigned __int8 *)(a2 + 66))
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 68);
    if (a3 <= 0x23)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 60);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 68);
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x55556C75747443)
  {
    int v9 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"CttulUU\"), sizeof(\"CttulUU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  uint64_t v16 = 40;
  *(void *)(a1 + 40) = AppendString_12841((const char **)(a1 + 40), (uint64_t)v8, &v16);
  *(void *)(a1 + 48) = AppendString_12841((const char **)(a1 + 48), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_executeCommandsInBuffer_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x556C7532407443)
  {
    int v9 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"Ct@2ulU\"), sizeof(\"Ct@2ulU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  uint64_t v16 = 40;
  *(void *)(a1 + 40) = AppendString_12841((const char **)(a1 + 40), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7533406C75334043 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"C@3ul@3ul\"), sizeof(\"C@3ul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 32) = v11;
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x6C7533406C757443 | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v8;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"Ctul@3ul\"), sizeof(\"Ctul@3ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = v9;
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBufferOffset_atIndex(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Culul\"), sizeof(\"Culul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C756C756C7543)
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Cululul\"), sizeof(\"Cululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutU<b>U<b>@2ul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  unint64_t v17 = v9 + 8 * v16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v7, (uint64_t *)&v17);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v7, (uint64_t *)&v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      int v11 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBytes_length_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_WORD *)(a2 + 44) != 108)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul\"), sizeof(\"CU<b>ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v18 = 20;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_DWORD *)(a2 + 44) != 7107948)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"CU<b>ululul\"), sizeof(\"CU<b>ululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v18 = 20;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717990467 || *(_DWORD *)(a2 + 39) != 7107942)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Ctfful\"), sizeof(\"Ctfful\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v19 = 0;
  sscanf((const char *)(a2 + 36), "C@%zut@%zuf@%zuf@2ul", &v21, &v20, &v19);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  uint64_t v10 = v20;
  unint64_t v11 = v9 + 8 * v21;
  int v12 = &v7[4 * v20 + v11];
  *(void *)(a1 + 32) = &v7[v11];
  *(void *)(a1 + 40) = v12;
  unint64_t v13 = v11 + 4 * (v10 + v19);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v7[v13];
  if (a4)
  {
    if (v13 + 16 > a3)
    {
      int v14 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      v15[0] = v14;
      v15[1] = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)v15);
    }
  }
}

__n128 DYTraceDecode_MTLComputeCommandEncoder_setStageInRegion(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966489667 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"C@6ul\"), sizeof(\"C@6ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    long long v11 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v11;
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x3F)
    {
      int v12 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v12;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    long long v13 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v13;
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLCounterSampleBuffer_resolveCounterRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1966227523 || *(_WORD *)(a2 + 40) != 108)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      int v15 = "memcmp((const char*)bytes + offset, (\"C@2ul\"), sizeof(\"C@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 52);
    if (*(_DWORD *)(a2 + 68) ^ 0x3E623C55 | *(unsigned __int8 *)(a2 + 72))
    {
      int v11 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v11;
      int v14 = 500;
      int v15 = "memcmp((const char*)bytes + offset, (\"U<b>\"), sizeof(\"U<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 52);
  }
  uint64_t v18 = 40;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLDevice_compileVisibleFunction_withDescriptor_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x74557443 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CtUt\"), sizeof(\"CtUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 52);
  uint64_t v19 = 24;
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 5592387)
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CUU\"), sizeof(\"CUU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newSharedEvent(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911299)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cui\"), sizeof(\"Cui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 48);
    if (*(_WORD *)(a2 + 52) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 56);
    if (a3 <= 0x1B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 48);
    *(void *)(a1 + 8) = *(void *)(a2 + 56);
  }
}

void DYTraceDecode_MTLDevice_newSharedEventWithHandle(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1769305155 || *(_DWORD *)(a2 + 39) != 7828841)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Ctuiuw\"), sizeof(\"Ctuiuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 64);
  if (a4)
  {
    if (*(_WORD *)(a2 + 72) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 76);
    if (a3 <= 0x2F)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 76);
  }
}

void DYTraceDecode_MTLDevice_newSharedEventWithMachPort(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 119)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Cuiuw\"), sizeof(\"Cuiuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 52);
    *(void *)(a1 + 16) = *(void *)(a2 + 56);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 68);
    if (a3 <= 0x27)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 52);
    *(void *)(a1 + 16) = *(void *)(a2 + 56);
    *(void *)(a1 + 8) = *(void *)(a2 + 68);
  }
}

void DYTraceDecode_MTLDevice_setPluginData(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_WORD *)(a2 + 40) != 62)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"CU<b>\"), sizeof(\"CU<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v17 = 16;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1951757379 || *(_WORD *)(a2 + 40) != 116)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"CtUtt\"), sizeof(\"CtUtt\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  uint64_t v18 = 24;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLDevice_copyShaderCacheToPath(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CS\"), sizeof(\"CS\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) ^ 0x6975 | *((unsigned __int8 *)v8 + v10 + 2))
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 4 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x55553E623C557443 | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"CtU<b>UU\"), sizeof(\"CtU<b>UU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  uint64_t v16 = 28;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v16);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v16);
  *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x553E623C557443)
  {
    int v9 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"CtU<b>U\"), sizeof(\"CtU<b>U\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  uint64_t v16 = 24;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v16);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

__n128 DYTraceDecode_MTLDevice_heapBufferSizeAndAlignWithLength_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"Culul\"), sizeof(\"Culul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 24) = *(void *)(a2 + 52);
    *(void *)(a1 + 32) = *(void *)(a2 + 60);
    if (*(_DWORD *)(a2 + 68) ^ 0x6C753240 | *(unsigned __int8 *)(a2 + 72))
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"@2ul\"), sizeof(\"@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    __n128 result = *(__n128 *)(a2 + 76);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x37)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 24) = *(void *)(a2 + 52);
    *(void *)(a1 + 32) = *(void *)(a2 + 60);
    __n128 result = *(__n128 *)(a2 + 76);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

__n128 DYTraceDecode_MTLDevice_heapTextureSizeAndAlignWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12;
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4)
  {
    if (*(_DWORD *)((char *)v8 + v10) ^ 0x6C753240 | *((unsigned __int8 *)v8 + v10 + 4))
    {
      int v11 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v11;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"@2ul\"), sizeof(\"@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
    __n128 result = *(__n128 *)((char *)v8 + v10 + 8);
    *(__n128 *)(a1 + 8) = result;
    if (v10 + 24 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  else
  {
    __n128 result = *(__n128 *)((char *)v8 + v10 + 8);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_WORD *)(a2 + 40) != 116)
    {
      int v10 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"CUult\"), sizeof(\"CUult\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  unint64_t v19 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v19);
  unint64_t v11 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 85)
  {
    int v12 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v12;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"U\"), sizeof(\"U\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v19 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v19);
  if (a4)
  {
    if (((v19 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x6C75553E623C5543 || *(_WORD *)(a2 + 44) != 116)
    {
      int v10 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"CU<b>Uult\"), sizeof(\"CU<b>Uult\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  unint64_t v19 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v19);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, (uint64_t *)&v19);
  unint64_t v11 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 85)
  {
    int v12 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v12;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"U\"), sizeof(\"U\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v19 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v19);
  if (a4)
  {
    if (((v19 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) ^ 0x6C75 | *((unsigned __int8 *)v8 + v10 + 2))
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newAccelerationStructureWithBuffer_offset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x6C757443 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Ctul\"), sizeof(\"Ctul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    a1[1] = *(void *)(a2 + 72);
  }
}

void DYTraceDecode_MTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7828844)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Ctuluw\"), sizeof(\"Ctuluw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[4] = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(void *)(a2 + 80);
    if (a3 <= 0x33)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(void *)(a2 + 80);
  }
}

void DYTraceDecode_MTLDevice_newAccelerationStructureWithSize_resourceIndex(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 119)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Culuw\"), sizeof(\"Culuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    a1[1] = *(void *)(a2 + 72);
  }
}

void DYTraceDecode_MTLDevice_newAccelerationStructureWithSize_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x556C7543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CulU\"), sizeof(\"CulU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 52);
  uint64_t v19 = 24;
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithBytes_length_options_gpuAddress(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_DWORD *)(a2 + 44) != 7828844)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ululuw\"), sizeof(\"CU<b>ululuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v20 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithBytesNoCopy_length_options_deallocator(uint64_t a1, void *a2, unint64_t a3, int *a4)
{
  int v8 = (void *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(void *)((char *)a2 + 39) != 0x746C756C753E62)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ulult\"), sizeof(\"CU<b>ulult\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = a2[6];
  uint64_t v20 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithLength_options_gpuAddress(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x77756C756C7543)
  {
    int v8 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v8;
    int v12 = 500;
    unint64_t v13 = "memcmp((const char*)bytes + offset, (\"Cululuw\"), sizeof(\"Cululuw\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[4] = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 80);
    if (a3 <= 0x33)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    a1[1] = *(void *)(a2 + 80);
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_WORD *)(a2 + 40) != 116)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CUult\"), sizeof(\"CUult\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_completionHandler(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7631939)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (\"Ctt\"), sizeof(\"Ctt\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[3] = *(void *)(a2 + 56);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 68);
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[3] = *(void *)(a2 + 56);
    a1[1] = *(void *)(a2 + 68);
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_options_completionHandler(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_WORD *)(a2 + 40) != 116)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Ctult\"), sizeof(\"Ctult\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[4] = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(void *)(a2 + 80);
    if (a3 <= 0x33)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(void *)(a2 + 80);
  }
}

void DYTraceDecode_MTLDevice_newDefaultLibraryWithBundle_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_DWORD *)(a2 + 39) != 7618146)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CU<b>t\"), sizeof(\"CU<b>t\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newDynamicLibraryWithURL_options_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x746C753E623C5543 | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"CU<b>ult\"), sizeof(\"CU<b>ult\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v19 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 16) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newFunctionWithGLCoreIR_functionType(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x6C753E623C5543)
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"CU<b>ul\"), sizeof(\"CU<b>ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x623C553E623C5543 || *(_DWORD *)(a2 + 44) != 7107902)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CU<b>U<b>ul\"), sizeof(\"CU<b>U<b>ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v20 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error(uint64_t a1, void *a2, unint64_t a3, int *a4)
{
  int v8 = (void *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x623C553E623C5543 || *(void *)((char *)a2 + 39) != 0x743E623C553E62)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CU<b>U<b>t\"), sizeof(\"CU<b>U<b>t\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = a2[6];
  uint64_t v20 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x3E623C556C755543 || *(_WORD *)(a2 + 44) != 116)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"CUulU<b>t\"), sizeof(\"CUulU<b>t\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  unint64_t v21 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    long long v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_newResourceGroupFromResources_count(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v19 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutul", &v19);
  size_t v8 = strlen(v7);
  *a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  a1[2] = &v7[v9];
  unint64_t v10 = v9 + 8 * v19;
  a1[3] = *(void *)&v7[v10];
  if (a4 && *(_WORD *)&v7[v10 + 8] != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  a1[1] = *(void *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x69755543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"CUui\"), sizeof(\"CUui\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 4) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C753E623C5543 || *(_WORD *)(a2 + 44) != 116)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"CU<b>ulUt\"), sizeof(\"CU<b>ulUt\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  unint64_t v21 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    long long v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_newTextureWithDescriptor_iosurface_plane(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1968526659 || *(_WORD *)(a2 + 40) != 108)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (\"CUUul\"), sizeof(\"CUUul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C753E623C5543 || *(void *)(a2 + 42) != 0x6C756C7555746CLL)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"CU<b>ultUulul\"), sizeof(\"CU<b>ultUulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  unint64_t v21 = 24;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  unint64_t v21 = v11 + 16;
  *(void *)(a1 + 40) = AppendString_12841((const char **)(a1 + 40), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 48) = *(void *)((char *)v8 + v12);
  *(void *)(a1 + 56) = *(void *)((char *)v8 + v12 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 16) != 116)
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    long long v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C753E623C5543 || *(void *)(a2 + 41) != 0x6C756C75556C75)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"CU<b>ulUulul\"), sizeof(\"CU<b>ulUulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  unint64_t v21 = 24;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v12);
  *(void *)(a1 + 48) = *(void *)((char *)v8 + v12 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 16) != 116)
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    long long v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_serializeStructType_version(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x69753E623C5543)
  {
    int v9 = *a4;
    long long v16 = 0u;
    long long v17 = 0u;
    int v13 = v9;
    int v14 = 500;
    int v15 = "memcmp((const char*)bytes + offset, (\"CU<b>ui\"), sizeof(\"CU<b>ui\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  unint64_t v18 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v18);
  unint64_t v10 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_DWORD *)((char *)v8 + v10 + 4) ^ 0x3E623C55 | *((unsigned __int8 *)v8 + v10 + 8))
  {
    int v11 = *a4;
    long long v16 = 0u;
    long long v17 = 0u;
    int v13 = v11;
    int v14 = 500;
    int v15 = "memcmp((const char*)bytes + offset, (\"U<b>\"), sizeof(\"U<b>\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  unint64_t v18 = v10 + 12;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

__n128 DYTraceDecode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C756C756C7543)
  {
    int v8 = *a4;
    long long v15 = 0u;
    long long v16 = 0u;
    int v12 = v8;
    int v13 = 500;
    int v14 = "memcmp((const char*)bytes + offset, (\"Cululul\"), sizeof(\"Cululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 32) = *(void *)(a2 + 52);
  *(void *)(a1 + 40) = *(void *)(a2 + 60);
  *(void *)(a1 + 48) = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_DWORD *)(a2 + 76) ^ 0x6C753340 | *(unsigned __int8 *)(a2 + 80))
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"@3ul\"), sizeof(\"@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    __n128 result = *(__n128 *)(a2 + 84);
    *(void *)(a1 + 24) = *(void *)(a2 + 100);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x47)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    __n128 result = *(__n128 *)(a2 + 84);
    *(void *)(a1 + 24) = *(void *)(a2 + 100);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

__n128 DYTraceDecode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"Culululul\"), sizeof(\"Culululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 64);
  *(void *)(a1 + 48) = *(void *)(a2 + 72);
  *(void *)(a1 + 56) = *(void *)(a2 + 80);
  if (a4)
  {
    if (*(_DWORD *)(a2 + 88) ^ 0x6C753340 | *(unsigned __int8 *)(a2 + 92))
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"@3ul\"), sizeof(\"@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    __n128 result = *(__n128 *)(a2 + 96);
    *(void *)(a1 + 24) = *(void *)(a2 + 112);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x53)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    __n128 result = *(__n128 *)(a2 + 96);
    *(void *)(a1 + 24) = *(void *)(a2 + 112);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLDynamicLibrary_serializeToURL_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_DWORD *)(a2 + 39) != 7618146)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CU<b>t\"), sizeof(\"CU<b>t\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v11 + 8) ^ 0x6975 | *((unsigned __int8 *)v8 + v11 + 10))
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 4 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLFunction_setDescriptor_library(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    int v9 = *a4;
    long long v15 = 0u;
    long long v16 = 0u;
    int v12 = v9;
    int v13 = 500;
    int v14 = "memcmp((const char*)bytes + offset, (\"CUt\"), sizeof(\"CUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v17 = 12;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v10);
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x746C7543 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cult\"), sizeof(\"Cult\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    a1[1] = *(void *)(a2 + 72);
  }
}

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x743E623C556C7543 | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CulU<b>t\"), sizeof(\"CulU<b>t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 56);
  uint64_t v19 = 28;
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLFunction_newFunctionWithPluginData_bitcodeType(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x62753E623C5543)
  {
    int v9 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v9;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ub\"), sizeof(\"CU<b>ub\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v20);
  uint64_t v10 = v20;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)v8 + v20);
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v11 + 4) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLHeap_newAccelerationStructureWithDescriptor_offset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C755543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"CUul\"), sizeof(\"CUul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLHeap_newAccelerationStructureWithSize_offset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Culul\"), sizeof(\"Culul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    a1[1] = *(void *)(a2 + 72);
  }
}

void DYTraceDecode_MTLHeap_newBufferWithLength_options_offset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C756C756C7543)
  {
    int v8 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v8;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"Cululul\"), sizeof(\"Cululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[4] = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 80);
    if (a3 <= 0x33)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    a1[1] = *(void *)(a2 + 80);
  }
}

void DYTraceDecode_MTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C756C757443 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Ctulultul\"), sizeof(\"Ctulultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset(uint64_t a1, void *a2, unint64_t a3, int *a4)
{
  int v8 = (void *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C753E623C5543 || *(void *)((char *)a2 + 39) != 0x6C75746C753E62)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"CU<b>ultul\"), sizeof(\"CU<b>ultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = a2[6];
  uint64_t v18 = 20;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443 && *(void *)(a2 + 44) == 0x33406C756C756C75;
    if (!v8 || *(void *)(a2 + 50) != 0x6C75746C753340)
    {
      int v10 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ululul@3ultul\"), sizeof(\"Ctulul@3ululul@3ultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  long long v11 = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)(a1 + 56) = *(void *)(a2 + 116);
  *(void *)(a1 + 64) = *(void *)(a2 + 124);
  long long v12 = *(_OWORD *)(a2 + 132);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  *(_OWORD *)(a1 + 72) = v12;
  *(void *)(a1 + 96) = *(void *)(a2 + 156);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C756C7543 && *(void *)(a2 + 44) == 0x756C756C75746C75;
    if (!v8 || *(void *)(a2 + 51) != 0x6C756C75746C75)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Cululultultululultulul\"), sizeof(\"Cululultultululultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(void *)(a2 + 60);
  a1[1] = *(void *)(a2 + 68);
  a1[2] = *(void *)(a2 + 76);
  a1[3] = *(void *)(a2 + 84);
  a1[4] = *(void *)(a2 + 92);
  a1[5] = *(void *)(a2 + 100);
  a1[6] = *(void *)(a2 + 108);
  a1[7] = *(void *)(a2 + 116);
  a1[8] = *(void *)(a2 + 124);
  a1[9] = *(void *)(a2 + 132);
  a1[10] = *(void *)(a2 + 140);
  a1[11] = *(void *)(a2 + 148);
  a1[12] = *(void *)(a2 + 156);
  if (a4)
  {
    if (a3 <= 0x7F)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x746C756C756C7543 || *(void *)(a2 + 44) != 0x6C756C6C756C75)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cululultulullul\"), sizeof(\"Cululultulullul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  a1[7] = *(void *)(a2 + 108);
  a1[8] = *(void *)(a2 + 116);
  if (a4)
  {
    if (a3 <= 0x57)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7533406C75334043 || *(void *)(a2 + 42) != 0x6C7533406C7533)
    {
      int v9 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"C@3ul@3ul@3ul\"), sizeof(\"C@3ul@3ul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  long long v10 = *(_OWORD *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(_OWORD *)(a1 + 8) = v10;
  long long v11 = *(_OWORD *)(a2 + 84);
  *(void *)(a1 + 48) = *(void *)(a2 + 100);
  *(_OWORD *)(a1 + 32) = v11;
  long long v12 = *(_OWORD *)(a2 + 108);
  *(void *)(a1 + 72) = *(void *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v12;
  if (a4)
  {
    if (a3 <= 0x5F)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C756C7543 && *(void *)(a2 + 44) == 0x75746C756C756C75;
    if (!v8 || *(_DWORD *)(a2 + 52) != 7107948)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Cululultululultulul\"), sizeof(\"Cululultululultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(void *)(a2 + 56);
  a1[1] = *(void *)(a2 + 64);
  a1[2] = *(void *)(a2 + 72);
  a1[3] = *(void *)(a2 + 80);
  a1[4] = *(void *)(a2 + 88);
  a1[5] = *(void *)(a2 + 96);
  a1[6] = *(void *)(a2 + 104);
  a1[7] = *(void *)(a2 + 112);
  a1[8] = *(void *)(a2 + 120);
  a1[9] = *(void *)(a2 + 128);
  a1[10] = *(void *)(a2 + 136);
  if (a4)
  {
    if (a3 <= 0x6B)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543 || *(_DWORD *)(a2 + 44) != 7107948)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cululululul\"), sizeof(\"Cululululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C7532406C7543)
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Cul@2ul\"), sizeof(\"Cul@2ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLLateEvalEvent_waitUntilSignaledValue_timeoutMS(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970763075 || *(_WORD *)(a2 + 40) != 119)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Cuwuw\"), sizeof(\"Cuwuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    *(void *)(a1 + 16) = *(void *)(a2 + 60);
    if (*(unsigned __int16 *)(a2 + 68) ^ 0x6975 | *(unsigned __int8 *)(a2 + 70))
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
    if (a3 <= 0x27)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    *(void *)(a1 + 16) = *(void *)(a2 + 60);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
  }
}

void DYTraceDecode_MTLLibrary_type(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(void *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 50))
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(void *)(a2 + 52);
    if (a3 <= 0x17)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 52);
  }
}

void DYTraceDecode_MTLLibrary_newExternFunctionWithName(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CS\"), sizeof(\"CS\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x743E623C555343)
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CSU<b>t\"), sizeof(\"CSU<b>t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x74743E623C555343 | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CSU<b>tt\"), sizeof(\"CSU<b>tt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v19 = 20;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v10 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 16) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLPipelineLibrary_newComputePipelineDescriptorWithName_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7623491)
  {
    int v9 = *a4;
    long long v16 = 0u;
    long long v17 = 0u;
    int v13 = v9;
    int v14 = 500;
    int v15 = "memcmp((const char*)bytes + offset, (\"CSt\"), sizeof(\"CSt\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  *(void *)a1 = *(void *)(a2 + 40);
  unint64_t v18 = 12;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v18);
  unint64_t v10 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 85)
  {
    int v11 = *a4;
    long long v16 = 0u;
    long long v17 = 0u;
    int v13 = v11;
    int v14 = 500;
    int v15 = "memcmp((const char*)bytes + offset, (\"U\"), sizeof(\"U\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  unint64_t v18 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1714569283 || *(_DWORD *)(a2 + 39) != 7107942)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"C@2ful\"), sizeof(\"C@2ful\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *a1 = *(void *)(a2 + 44);
    a1[3] = *(void *)(a2 + 52);
    a1[1] = *(void *)(a2 + 60);
    if (*(_DWORD *)(a2 + 68) != 6697536)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"@2f\"), sizeof(\"@2f\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[2] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[3] = *(void *)(a2 + 52);
    a1[1] = *(void *)(a2 + 60);
    a1[2] = *(void *)(a2 + 72);
  }
}

__n128 DYTraceDecode_MTLRasterizationRateMap_physicalSizeForLayer(uint64_t a1, __n128 *a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (a2[2].n128_u32[1] != 7107907)
    {
      int v8 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v8;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = a2[2].n128_u64[1];
    *(void *)(a1 + 32) = a2[3].n128_u64[0];
    if (a2[3].n128_u32[2] ^ 0x6C753340 | a2[3].n128_u8[12])
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"@3ul\"), sizeof(\"@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    __n128 result = a2[4];
    *(void *)(a1 + 24) = a2[5].n128_u64[0];
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x33)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = a2[2].n128_u64[1];
    *(void *)(a1 + 32) = a2[3].n128_u64[0];
    __n128 result = a2[4];
    *(void *)(a1 + 24) = a2[5].n128_u64[0];
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

__n128 DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966293059 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"C@3ul\"), sizeof(\"C@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(void *)(a1 + 24) = *(void *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x27)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(void *)(a1 + 24) = *(void *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7536406C75334043 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"C@3ul@6ul\"), sizeof(\"C@3ul@6ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  if (a4)
  {
    if (a3 <= 0x5B)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7536406C75334043 || *(_DWORD *)(a2 + 44) != 6911340)
    {
      int v9 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"C@3ul@6ului\"), sizeof(\"C@3ul@6ului\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 128);
  if (a4)
  {
    if (a3 <= 0x5F)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C75746C7543 || *(void *)(a2 + 41) != 0x6C75746C75746CLL)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cultultultul\"), sizeof(\"Cultultultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  a1[7] = *(void *)(a2 + 108);
  if (a4)
  {
    if (a3 <= 0x4F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C756C7543 && *(void *)(a2 + 44) == 0x756C756C75746C75;
    if (!v8 || *(_WORD *)(a2 + 52) != 108)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Cululultultululul\"), sizeof(\"Cululultultululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(void *)(a2 + 56);
  a1[1] = *(void *)(a2 + 64);
  a1[2] = *(void *)(a2 + 72);
  a1[3] = *(void *)(a2 + 80);
  a1[4] = *(void *)(a2 + 88);
  a1[5] = *(void *)(a2 + 96);
  a1[6] = *(void *)(a2 + 104);
  a1[7] = *(void *)(a2 + 112);
  a1[8] = *(void *)(a2 + 120);
  a1[9] = *(void *)(a2 + 128);
  if (a4)
  {
    if (a3 <= 0x63)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset(void *a1, void *a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)((char *)a2 + 36) != 0x746C756C756C7543 || *(void *)((char *)a2 + 39) != 0x6C75746C756C75)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cululultul\"), sizeof(\"Cululultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x746C756C756C7543 || *(void *)(a2 + 41) != 0x6C756C75746C75)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cululultulul\"), sizeof(\"Cululultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  if (a4)
  {
    if (a3 <= 0x47)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C75746C756C7543 || *(_DWORD *)(a2 + 44) != 7107956)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Culultultul\"), sizeof(\"Culultultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  a1[6] = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C7533406C757443 || *(void *)(a2 + 41) != 0x6C7533406C7533)
    {
      int v9 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"Ctul@3ul@3ul\"), sizeof(\"Ctul@3ul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  long long v10 = *(_OWORD *)(a2 + 76);
  *(void *)(a1 + 40) = *(void *)(a2 + 92);
  *(_OWORD *)(a1 + 24) = v10;
  long long v11 = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 64) = *(void *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = v11;
  if (a4)
  {
    if (a3 <= 0x57)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C75746C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cultultul\"), sizeof(\"Cultultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x746C756C756C7543 || *(void *)(a2 + 43) != 0x6C756C756C7574)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cululultululul\"), sizeof(\"Cululultululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  a1[7] = *(void *)(a2 + 108);
  if (a4)
  {
    if (a3 <= 0x4F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1953264963 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Cultul\"), sizeof(\"Cultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Culululul\"), sizeof(\"Culululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x33)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutululul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  unint64_t v10 = v9 + 8 * v16;
  a1[2] = *(void *)&v7[v10];
  a1[3] = *(void *)&v7[v10 + 8];
  a1[4] = *(void *)&v7[v10 + 16];
  if (a4)
  {
    if (v10 + 24 > a3)
    {
      int v11 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setAlphaTestReferenceValue(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6643 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (\"Cf\"), sizeof(\"Cf\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717986883 || *(_WORD *)(a2 + 40) != 102)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Cffff\"), sizeof(\"Cffff\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 64);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex(void *a1, void *a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)((char *)a2 + 36) != 0x6C756C756C757443 || *(void *)((char *)a2 + 39) != 0x6C756C756C756CLL)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctulululul\"), sizeof(\"Ctulululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C756C756C757443 || *(void *)(a2 + 41) != 0x6C7569756C756CLL)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctulululuiul\"), sizeof(\"Ctulululuiul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 84);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 40) = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setDepthBias_slopeScale_clamp(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x66666643 | *(unsigned __int8 *)(a2 + 40))
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Cfff\"), sizeof(\"Cfff\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C756C756C757443 || *(void *)(a2 + 39) != 0x69756C756C756CLL)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctululului\"), sizeof(\"Ctululului\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setMeshBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  uint64_t v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutU<b>@2ul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  unint64_t v17 = v9 + 8 * v16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v7, (uint64_t *)&v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      int v11 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setPrimitiveRestartEnabled_index(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Cuiul\"), sizeof(\"Cuiul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 105)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Cuiui\"), sizeof(\"Cuiui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x17)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

__n128 DYTraceDecode_MTLRenderCommandEncoder_setViewport(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x64364043 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v8;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"C@6d\"), sizeof(\"C@6d\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    long long v10 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v10;
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x3F)
    {
      int v11 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v11;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    long long v12 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v12;
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C756C757443 || *(_DWORD *)(a2 + 44) != 7107948)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"Ctulultulul\"), sizeof(\"Ctulultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  a1[6] = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C7536406C757443 || *(void *)(a2 + 41) != 0x6C756C756C7536)
    {
      int v9 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"Ctul@6ululul\"), sizeof(\"Ctul@6ululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  long long v10 = *(_OWORD *)(a2 + 76);
  long long v11 = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  *(void *)(a1 + 72) = *(void *)(a2 + 124);
  *(void *)(a1 + 80) = *(void *)(a2 + 132);
  if (a4)
  {
    if (a3 <= 0x67)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions(uint64_t a1, void *a2, unint64_t a3, int *a4)
{
  int v8 = (void *)((char *)a2 + 36);
  if (a4)
  {
    BOOL v9 = *v8 == 0x3E623C556C757443 && *(void *)((char *)a2 + 44) == 0x3E623C553E623C55;
    if (!v9 || *(void *)((char *)a2 + 47) != 0x6C753E623C553ELL)
    {
      int v11 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v11;
      int v15 = 500;
      long long v16 = "memcmp((const char*)bytes + offset, (\"CtulU<b>U<b>U<b>ul\"), sizeof(\"CtulU<b>U<b>U<b>ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(void *)a1 = a2[7];
  *(void *)(a1 + 8) = a2[8];
  *(void *)(a1 + 16) = a2[9];
  uint64_t v19 = 44;
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, &v19);
  *(void *)(a1 + 40) = AppendString_12841((const char **)(a1 + 40), (uint64_t)v8, &v19);
  unint64_t v12 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 48) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLTexture_saveSlice_level_zPlane_normalize_blitOption_toPath(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C756C756C7543 || *(void *)(a2 + 41) != 0x536C7569756C75)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"CulululuiulS\"), sizeof(\"CulululuiulS\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 32) = *(void *)(a2 + 88);
  uint64_t v17 = 60;
  *(void *)(a1 + 40) = AppendString_12841((const char **)(a1 + 40), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLTexture_getBytes_bytesPerRow_fromRegion_mipmapLevel(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x406C753E623C5543 || *(void *)(a2 + 42) != 0x6C756C7536406CLL)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      uint64_t v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ul@6ulul\"), sizeof(\"CU<b>ul@6ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  uint64_t v20 = 24;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  long long v12 = *(_OWORD *)((char *)v8 + v11 + 24);
  long long v13 = *(_OWORD *)((char *)v8 + v11 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v8 + v11 + 8);
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 40) = v12;
  *(void *)(a1 + 72) = *(void *)((char *)v8 + v11 + 56);
  if (a4)
  {
    if (v11 + 64 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7532406C756C7543 || *(void *)(a2 + 42) != 0x6C7532406C7532)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Culul@2ul@2ul\"), sizeof(\"Culul@2ul@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 92);
  if (a4)
  {
    if (*(_WORD *)(a2 + 108) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 112);
    if (a3 <= 0x53)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 112);
  }
}

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7532406C756C7543 || *(void *)(a2 + 44) != 0x77756C7532406CLL)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Culul@2ul@2uluw\"), sizeof(\"Culul@2ul@2uluw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 64) = *(void *)(a2 + 108);
  if (a4)
  {
    if (*(_WORD *)(a2 + 116) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 120);
    if (a3 <= 0x5B)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 120);
  }
}

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x7532406C756C7543 && *(void *)(a2 + 44) == 0x7534406C7532406CLL;
    if (!v8 || *(_WORD *)(a2 + 52) != 98)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"Culul@2ul@2ul@4ub\"), sizeof(\"Culul@2ul@2ul@4ub\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 112);
  if (a4)
  {
    if (*(_WORD *)(a2 + 116) != 116)
    {
      int v11 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v11;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 120);
    if (a3 <= 0x5B)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 120);
  }
}

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x7532406C756C7543 && *(void *)(a2 + 44) == 0x7534406C7532406CLL;
    if (!v8 || *(_DWORD *)(a2 + 52) != 7828834)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"Culul@2ul@2ul@4ubuw\"), sizeof(\"Culul@2ul@2ul@4ubuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 116);
  if (a4)
  {
    if (*(_WORD *)(a2 + 124) != 116)
    {
      int v11 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v11;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 128);
    if (a3 <= 0x63)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 128);
  }
}

void DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C756C75364043 || *(void *)(a2 + 42) != 0x6C753E623C556CLL)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"C@6ululU<b>ul\"), sizeof(\"C@6ululU<b>ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  long long v11 = *(_OWORD *)(a2 + 60);
  long long v12 = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 8) = v11;
  *(void *)(a1 + 56) = *(void *)(a2 + 108);
  uint64_t v20 = 80;
  *(void *)(a1 + 64) = AppendString_12841((const char **)(a1 + 64), (uint64_t)v8, &v20);
  unint64_t v13 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 72) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLVideoCommandEncoder_generateMotionVectorsForTexture_previousTexture_resultBuffer_bufferOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1953788995 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (\"Ctttul\"), sizeof(\"Ctttul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLVisibleFunctionTable_setFunctions_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 843076931 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      int v10 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      long long v15 = "memcmp((const char*)bytes + offset, (\"CU@2ul\"), sizeof(\"CU@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v18 = 16;
  *(void *)(a1 + 8) = AppendString_12841((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)((char *)v8 + v11);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      long long v16 = 0u;
      long long v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      long long v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_NSHMDMetalSession_initWithMetalDevice_deviceReference_hmdName(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x53557443 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CtUS\"), sizeof(\"CtUS\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 52);
  uint64_t v19 = 24;
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  *(void *)(a1 + 32) = AppendString_12841((const char **)(a1 + 32), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x69555543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"CUUi\"), sizeof(\"CUUi\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16;
  *(void *)(a1 + 16) = AppendString_12841((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 4) != 116)
  {
    int v11 = *a4;
    long long v17 = 0u;
    long long v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    long long v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  unint64_t v12 = (v10 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      long long v17 = 0u;
      long long v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      long long v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterA_neuronParameterB_neuronParameterC(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717987651 || *(_WORD *)(a2 + 40) != 102)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Cifff\"), sizeof(\"Cifff\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 64);
  if (a4)
  {
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 72);
  }
}

void DYTraceDecode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1968531779 || *(_WORD *)(a2 + 40) != 108)
    {
      int v10 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      long long v17 = "memcmp((const char*)bytes + offset, (\"CiUul\"), sizeof(\"CiUul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  uint64_t v20 = 20;
  *(void *)(a1 + 24) = AppendString_12841((const char **)(a1 + 24), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    long long v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      long long v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_interiorColumns_alpha_beta(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C75696943 || *(_DWORD *)(a2 + 44) != 6579308)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"Ciiulululdd\"), sizeof(\"Ciiulululdd\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 88);
  *(void *)(a1 + 56) = *(void *)(a2 + 96);
  if (a4)
  {
    if (*(_WORD *)(a2 + 104) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 108);
    if (a3 <= 0x4F)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 108);
  }
}

void DYTraceDecode_MPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x64646C756C756943 | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v8;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (\"Ciululdd\"), sizeof(\"Ciululdd\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 60);
  *(void *)(a1 + 32) = *(void *)(a2 + 68);
  *(void *)(a1 + 40) = *(void *)(a2 + 76);
  *(void *)(a1 + 48) = *(void *)(a2 + 84);
  if (a4)
  {
    if (*(_WORD *)(a2 + 92) != 116)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 96);
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 96);
  }
}

void DYTraceDecode_MPSPlugin_newCNNPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Culululul\"), sizeof(\"Culululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[2] = *(void *)(a2 + 56);
  a1[3] = *(void *)(a2 + 64);
  a1[4] = *(void *)(a2 + 72);
  a1[5] = *(void *)(a2 + 80);
  if (a4)
  {
    if (*(_WORD *)(a2 + 88) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(void *)(a2 + 92);
    if (a3 <= 0x3F)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(void *)(a2 + 92);
  }
}

void DYTraceDecode_MPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543 || *(void *)(a2 + 42) != 0x6C756C756C756CLL)
    {
      int v9 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"Culululululul\"), sizeof(\"Culululululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  a1[5] = *(void *)(a2 + 84);
  a1[6] = *(void *)(a2 + 92);
  a1[7] = *(void *)(a2 + 100);
  if (a4)
  {
    if (*(_WORD *)(a2 + 108) != 116)
    {
      int v10 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      long long v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(void *)(a2 + 112);
    if (a3 <= 0x53)
    {
      int v11 = *a4;
      long long v15 = 0u;
      long long v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      long long v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(void *)(a2 + 112);
  }
}

void DYTraceDecode_MPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x7455746C75747443 || *(_WORD *)(a2 + 44) != 85)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"CttultUtU\"), sizeof(\"CttultUtU\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 80);
  unint64_t v21 = 52;
  *(void *)(a1 + 48) = AppendString_12841((const char **)(a1 + 48), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 56) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 64) = AppendString_12841((const char **)(a1 + 64), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 2))
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    long long v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceTexture_sourceInfo_destinationTexture_destinationInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C756C75747443 || *(_DWORD *)(a2 + 44) != 5600341)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"CttulultUtU\"), sizeof(\"CttulultUtU\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 88);
  unint64_t v21 = 60;
  *(void *)(a1 + 56) = AppendString_12841((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 72) = AppendString_12841((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 2))
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    long long v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MPSExternalCNNUnary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceTextures_sourceInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutUtul", a1 + 56, a1 + 80);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(void *)a1 = *(void *)(v9 + 4);
  *(void *)(a1 + 16) = *(void *)(v9 + 12);
  *(void *)(a1 + 24) = *(void *)(v9 + 20);
  *(void *)(a1 + 32) = *(void *)(v9 + 28);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(void *)(a1 + 40) = *(void *)(v9 + 36);
  *(void *)(a1 + 48) = &v7[v10];
  unint64_t v22 = v10 + 8 * *(void *)(a1 + 56);
  appended = AppendString_12841((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = appended;
  *(void *)(a1 + 72) = &v7[v12];
  unint64_t v22 = v12 + 8 * *(void *)(a1 + 80);
  *(void *)(a1 + 88) = AppendString_12841((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 96) = *(void *)&v7[v13];
  *(void *)(a1 + 104) = *(void *)&v7[v13 + 8];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 16] ^ 0x6C75 | v7[v13 + 18])
  {
    int v14 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    long long v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  unint64_t v15 = (v13 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MPSExternalCNNBinary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTexture_primaryInfo_secondaryTexture_secondaryInfo_destinationTexture_destinationInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C756C75747443 || *(void *)(a2 + 42) != 0x5574557455746CLL)
    {
      int v10 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v10;
      int v18 = 500;
      long long v19 = "memcmp((const char*)bytes + offset, (\"CttulultUtUtU\"), sizeof(\"CttulultUtUtU\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  *(void *)(a1 + 32) = *(void *)(a2 + 76);
  *(void *)(a1 + 40) = *(void *)(a2 + 84);
  *(void *)(a1 + 48) = *(void *)(a2 + 92);
  unint64_t v22 = 64;
  *(void *)(a1 + 56) = AppendString_12841((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v22);
  unint64_t v11 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = *(void *)((char *)v8 + v11);
  unint64_t v22 = v11 + 8;
  *(void *)(a1 + 72) = AppendString_12841((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v22);
  unint64_t v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 80) = *(void *)((char *)v8 + v12);
  unint64_t v22 = v12 + 8;
  *(void *)(a1 + 88) = AppendString_12841((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v13) ^ 0x6C75 | *((unsigned __int8 *)v8 + v13 + 2))
  {
    int v14 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    long long v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  unint64_t v15 = (v13 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MPSExternalCNNBinary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutU@%llutUtul", a1 + 56, a1 + 80, a1 + 104);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(void *)a1 = *(void *)(v9 + 4);
  *(void *)(a1 + 16) = *(void *)(v9 + 12);
  *(void *)(a1 + 24) = *(void *)(v9 + 20);
  *(void *)(a1 + 32) = *(void *)(v9 + 28);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(void *)(a1 + 40) = *(void *)(v9 + 36);
  *(void *)(a1 + 48) = &v7[v10];
  unint64_t v24 = v10 + 8 * *(void *)(a1 + 56);
  appended = AppendString_12841((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v24);
  unint64_t v12 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = appended;
  *(void *)(a1 + 72) = &v7[v12];
  unint64_t v24 = v12 + 8 * *(void *)(a1 + 80);
  unint64_t v13 = AppendString_12841((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v24);
  unint64_t v14 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = &v7[v14];
  unint64_t v24 = v14 + 8 * *(void *)(a1 + 104);
  *(void *)(a1 + 112) = AppendString_12841((const char **)(a1 + 112), (uint64_t)v7, (uint64_t *)&v24);
  unint64_t v15 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 120) = *(void *)&v7[v15];
  *(void *)(a1 + 128) = *(void *)&v7[v15 + 8];
  if (a4 && *(unsigned __int16 *)&v7[v15 + 16] ^ 0x6C75 | v7[v15 + 18])
  {
    int v16 = *a4;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v16;
    int v20 = 500;
    long long v21 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }
  unint64_t v17 = (v15 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v17];
  if (a4)
  {
    if (v17 + 8 > a3)
    {
      int v18 = *a4;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x6C75747474747443 | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    unint64_t v12 = "memcmp((const char*)bytes + offset, (\"Ctttttul\"), sizeof(\"Ctttttul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  a1[6] = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      unint64_t v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataType_biases_predicationBuffer_predicationOffset(void *a1, void *a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)((char *)a2 + 36) != 0x74746C7574747443 || *(void *)((char *)a2 + 39) != 0x6C7574746C7574)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctttulttul\"), sizeof(\"Ctttulttul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  a1[6] = a2[12];
  a1[7] = a2[13];
  if (a4)
  {
    if (a3 <= 0x4B)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C757474747443)
  {
    int v8 = *a4;
    long long v13 = 0u;
    long long v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (\"Cttttul\"), sizeof(\"Cttttul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  a1[5] = *(void *)(a2 + 84);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      int v9 = *a4;
      long long v13 = 0u;
      long long v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_weightsDataType_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C7574747443 || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      long long v13 = "memcmp((const char*)bytes + offset, (\"Ctttultul\"), sizeof(\"Ctttultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  a1[6] = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      long long v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolutionGradient_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_weightsGradient_biasesGradient_accumulate_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutUttitul", a1 + 56, a1 + 80);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(void *)a1 = *(void *)(v9 + 4);
  *(void *)(a1 + 16) = *(void *)(v9 + 12);
  *(void *)(a1 + 24) = *(void *)(v9 + 20);
  *(void *)(a1 + 32) = *(void *)(v9 + 28);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(void *)(a1 + 40) = *(void *)(v9 + 36);
  *(void *)(a1 + 48) = &v7[v10];
  unint64_t v22 = v10 + 8 * *(void *)(a1 + 56);
  appended = AppendString_12841((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = appended;
  *(void *)(a1 + 72) = &v7[v12];
  unint64_t v22 = v12 + 8 * *(void *)(a1 + 80);
  *(void *)(a1 + 88) = AppendString_12841((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 96) = *(void *)&v7[v13];
  *(void *)(a1 + 104) = *(void *)&v7[v13 + 8];
  *(_DWORD *)(a1 + 112) = *(_DWORD *)&v7[v13 + 16];
  *(void *)(a1 + 120) = *(void *)&v7[v13 + 20];
  *(void *)(a1 + 128) = *(void *)&v7[v13 + 28];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 36] ^ 0x6C75 | v7[v13 + 38])
  {
    int v14 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    int v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  unint64_t v15 = (v13 + 42) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_A_aInfo_B_bInfo_C_cInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C75747443 && *(void *)(a2 + 44) == 0x753440746C753440;
    if (!v8 || *(void *)(a2 + 51) != 0x6C753440746C75)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      int v18 = "memcmp((const char*)bytes + offset, (\"Cttulult@4ult@4ult@4ul\"), sizeof(\"Cttulult@4ult@4ult@4ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 84);
  *(void *)(a1 + 40) = *(void *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 100);
  long long v11 = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 88) = *(void *)(a2 + 140);
  long long v12 = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 112) = v12;
  *(void *)(a1 + 128) = *(void *)(a2 + 180);
  long long v13 = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 136) = v13;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 220) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 222))
    {
      int v14 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v14;
      int v17 = 500;
      int v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 224);
    if (a3 <= 0xC3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 224);
  }
}

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resultColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x756C756C75747443 && *(void *)(a2 + 44) == 0x7464646C756C756CLL;
    BOOL v9 = v8 && *(void *)(a2 + 52) == 0x753440746C753440;
    if (!v9 || *(void *)(a2 + 59) != 0x6C753440746C75)
    {
      int v11 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v11;
      int v18 = 500;
      long long v19 = "memcmp((const char*)bytes + offset, (\"Cttulululululddt@4ult@4ult@4ul\"), sizeof(\"Cttulululululddt@4ult@4ult@4ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  *(void *)a1 = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  *(void *)(a1 + 32) = *(void *)(a2 + 92);
  *(void *)(a1 + 40) = *(void *)(a2 + 100);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(void *)(a1 + 56) = *(void *)(a2 + 116);
  *(void *)(a1 + 64) = *(void *)(a2 + 124);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  long long v12 = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(a1 + 112) = v12;
  *(void *)(a1 + 128) = *(void *)(a2 + 188);
  long long v13 = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 212);
  *(_OWORD *)(a1 + 136) = v13;
  *(void *)(a1 + 168) = *(void *)(a2 + 228);
  long long v14 = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 192) = v14;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 268) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 270))
    {
      int v15 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v15;
      int v18 = 500;
      long long v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 272);
    if (a3 <= 0xF3)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 272);
  }
}

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRowsAndResultColumnsAndInteriorColumns_alphaAndBeta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && strcmp((const char *)(a2 + 36), "Cttulul@3ul@2dt@4ult@4ult@4ultul"))
  {
    int v8 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v8;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (\"Cttulul@3ul@2dt@4ult@4ult@4ultul\"), sizeof(\"Cttulul@3ul@2dt@4ult@4ult"
          "@4ultul\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  *(void *)a1 = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 88);
  *(void *)(a1 + 32) = *(void *)(a2 + 96);
  *(void *)(a1 + 40) = *(void *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 88) = *(void *)(a2 + 152);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 112) = v10;
  *(void *)(a1 + 128) = *(void *)(a2 + 192);
  long long v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 136) = v11;
  *(void *)(a1 + 168) = *(void *)(a2 + 232);
  long long v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 192) = v12;
  *(void *)(a1 + 208) = *(void *)(a2 + 272);
  *(void *)(a1 + 216) = *(void *)(a2 + 280);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 288) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 290))
    {
      int v13 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v13;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 292);
    if (a3 <= 0x107)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 292);
  }
}

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resultColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset_transA_transB(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && strcmp((const char *)(a2 + 36), "Cttulul@3ul@2dt@4ult@4ult@4ultulii"))
  {
    int v8 = *a4;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v8;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (\"Cttulul@3ul@2dt@4ult@4ult@4ultulii\"), sizeof(\"Cttulul@3ul@2dt@4ult@4u"
          "lt@4ultulii\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  *(void *)a1 = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 88);
  *(void *)(a1 + 32) = *(void *)(a2 + 96);
  *(void *)(a1 + 40) = *(void *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 88) = *(void *)(a2 + 152);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 112) = v10;
  *(void *)(a1 + 128) = *(void *)(a2 + 192);
  long long v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 136) = v11;
  *(void *)(a1 + 168) = *(void *)(a2 + 232);
  long long v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 192) = v12;
  *(void *)(a1 + 208) = *(void *)(a2 + 272);
  *(void *)(a1 + 216) = *(void *)(a2 + 280);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 292);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 296) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 298))
    {
      int v13 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v13;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 300);
    if (a3 <= 0x10F)
    {
      int v14 = *a4;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 300);
  }
}

void DYTraceDecode_MPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_matrixStructure_vector_vectorStructure_result_resultStructure(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C75747443 && *(void *)(a2 + 44) == 0x753340746C753440;
    if (!v8 || *(void *)(a2 + 51) != 0x6C753340746C75)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"Cttulult@4ult@3ult@3ul\"), sizeof(\"Cttulult@4ult@3ult@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 84);
  *(void *)(a1 + 40) = *(void *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 100);
  long long v11 = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 88) = *(void *)(a2 + 140);
  long long v12 = *(_OWORD *)(a2 + 148);
  *(void *)(a1 + 112) = *(void *)(a2 + 164);
  *(_OWORD *)(a1 + 96) = v12;
  *(void *)(a1 + 120) = *(void *)(a2 + 172);
  long long v13 = *(_OWORD *)(a2 + 180);
  *(void *)(a1 + 144) = *(void *)(a2 + 196);
  *(_OWORD *)(a1 + 128) = v13;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 204) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 206))
    {
      int v14 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v14;
      int v17 = 500;
      long long v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 208);
    if (a3 <= 0xB3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 208);
  }
}

void DYTraceDecode_MPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_matrixStructure_vector_vectorStructure_result_resultStructure_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C75747443 && *(void *)(a2 + 44) == 0x753340746C753440;
    BOOL v9 = v8 && *(void *)(a2 + 52) == 0x75746C753340746CLL;
    if (!v9 || *(_WORD *)(a2 + 60) != 108)
    {
      int v11 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v11;
      int v18 = 500;
      long long v19 = "memcmp((const char*)bytes + offset, (\"Cttulult@4ult@3ult@3ultul\"), sizeof(\"Cttulult@4ult@3ult@3ultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  *(void *)a1 = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 72);
  *(void *)(a1 + 24) = *(void *)(a2 + 80);
  *(void *)(a1 + 32) = *(void *)(a2 + 88);
  *(void *)(a1 + 40) = *(void *)(a2 + 96);
  *(void *)(a1 + 48) = *(void *)(a2 + 104);
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 88) = *(void *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 112) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 96) = v13;
  *(void *)(a1 + 120) = *(void *)(a2 + 176);
  long long v14 = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 144) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 128) = v14;
  *(void *)(a1 + 152) = *(void *)(a2 + 208);
  *(void *)(a1 + 160) = *(void *)(a2 + 216);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 224) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 226))
    {
      int v15 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v15;
      int v18 = 500;
      long long v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 228);
    if (a3 <= 0xC7)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 228);
  }
}

void DYTraceDecode_MPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_inputMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannels_neuronType_neuronParameters(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && strcmp((const char *)(a2 + 36), "Ctt@2ult@4ult@4ult@3ult@4uld@3uli@3f"))
  {
    int v8 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v8;
    int v18 = 500;
    long long v19 = "memcmp((const char*)bytes + offset, (\"Ctt@2ult@4ult@4ult@3ult@4uld@3uli@3f\"), sizeof(\"Ctt@2ult@4ult@4ult@3u"
          "lt@4uld@3uli@3f\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  *(void *)a1 = *(void *)(a2 + 76);
  *(void *)(a1 + 16) = *(void *)(a2 + 84);
  *(void *)(a1 + 24) = *(void *)(a2 + 92);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 48) = *(void *)(a2 + 116);
  long long v9 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 56) = v9;
  *(void *)(a1 + 88) = *(void *)(a2 + 156);
  long long v10 = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 112) = v10;
  *(void *)(a1 + 128) = *(void *)(a2 + 196);
  long long v11 = *(_OWORD *)(a2 + 204);
  *(void *)(a1 + 152) = *(void *)(a2 + 220);
  *(_OWORD *)(a1 + 136) = v11;
  *(void *)(a1 + 160) = *(void *)(a2 + 228);
  long long v12 = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 168) = v12;
  *(void *)(a1 + 200) = *(void *)(a2 + 268);
  long long v13 = *(_OWORD *)(a2 + 276);
  *(void *)(a1 + 224) = *(void *)(a2 + 292);
  *(_OWORD *)(a1 + 208) = v13;
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 300);
  uint64_t v14 = *(void *)(a2 + 304);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 312);
  *(void *)(a1 + 236) = v14;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 316) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 318))
    {
      int v15 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v15;
      int v18 = 500;
      long long v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 320);
    if (a3 <= 0x123)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 320);
  }
}

void DYTraceDecode_MPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_inputMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannelsAndNeuronTypeAndPredicationOffset_neuronParameters_predicationBuffer(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 268);
  if (a4 && strcmp((const char *)(a2 + 36), "Ctt@2ult@4ult@4ult@3ult@4uld@5ul@3ft"))
  {
    int v9 = *a4;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v9;
    int v20 = 500;
    long long v21 = "memcmp((const char*)bytes + offset, (\"Ctt@2ult@4ult@4ult@3ult@4uld@5ul@3ft\"), sizeof(\"Ctt@2ult@4ult@4ult@3u"
          "lt@4uld@5ul@3ft\")) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }
  *(void *)a1 = *(void *)(a2 + 76);
  *(void *)(a1 + 16) = *(void *)(a2 + 84);
  *(void *)(a1 + 24) = *(void *)(a2 + 92);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 48) = *(void *)(a2 + 116);
  long long v10 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 88) = *(void *)(a2 + 156);
  long long v11 = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 112) = v11;
  *(void *)(a1 + 128) = *(void *)(a2 + 196);
  long long v12 = *(_OWORD *)(a2 + 204);
  *(void *)(a1 + 152) = *(void *)(a2 + 220);
  *(_OWORD *)(a1 + 136) = v12;
  *(void *)(a1 + 160) = *(void *)(a2 + 228);
  long long v13 = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 168) = v13;
  *(void *)(a1 + 200) = *v8;
  long long v14 = *(_OWORD *)(a2 + 276);
  long long v15 = *(_OWORD *)(a2 + 292);
  *(void *)(a1 + 240) = *(void *)(a2 + 308);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  uint64_t v16 = *(void *)(a2 + 316);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 324);
  *(void *)(a1 + 248) = v16;
  *(void *)(a1 + 264) = *(void *)(a2 + 328);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 336) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 338))
    {
      int v17 = *a4;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v17;
      int v20 = 500;
      long long v21 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }
    *(void *)(a1 + 8) = v8[9];
    if (a3 <= 0x137)
    {
      int v18 = *a4;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v8[9];
  }
}

void DYTraceDecode_MPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo_zeroPadSizeX_zeroPadSizeY(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x7455746C75747443 || *(void *)(a2 + 42) != 0x6C756C75557455)
    {
      int v10 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      int v18 = "memcmp((const char*)bytes + offset, (\"CttultUtUulul\"), sizeof(\"CttultUtUulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  *(void *)(a1 + 32) = *(void *)(a2 + 76);
  *(void *)(a1 + 40) = *(void *)(a2 + 84);
  unint64_t v21 = 56;
  *(void *)(a1 + 48) = AppendString_12841((const char **)(a1 + 48), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 56) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 64) = AppendString_12841((const char **)(a1 + 64), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 72) = *(void *)((char *)v8 + v12);
  *(void *)(a1 + 80) = *(void *)((char *)v8 + v12 + 8);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12 + 16) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 18))
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    int v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MPSExternalCNNPoolingAverage_encodeBatchToCommandBuffer_computeCommandEncoder_options_sourceTextures_sourceInfo_destinationTextures_destinationInfo_zeroPadSizeX_zeroPadSizeY_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttul@%llutU@%llutUulultul", a1 + 48, a1 + 72);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(void *)a1 = *(void *)(v9 + 4);
  *(void *)(a1 + 16) = *(void *)(v9 + 12);
  *(void *)(a1 + 24) = *(void *)(v9 + 20);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 36;
  *(void *)(a1 + 32) = *(void *)(v9 + 28);
  *(void *)(a1 + 40) = &v7[v10];
  unint64_t v22 = v10 + 8 * *(void *)(a1 + 48);
  appended = AppendString_12841((const char **)(a1 + 56), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 56) = appended;
  *(void *)(a1 + 64) = &v7[v12];
  unint64_t v22 = v12 + 8 * *(void *)(a1 + 72);
  *(void *)(a1 + 80) = AppendString_12841((const char **)(a1 + 80), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 88) = *(void *)&v7[v13];
  *(void *)(a1 + 96) = *(void *)&v7[v13 + 8];
  *(void *)(a1 + 104) = *(void *)&v7[v13 + 16];
  *(void *)(a1 + 112) = *(void *)&v7[v13 + 24];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 32] ^ 0x6C75 | v7[v13 + 34])
  {
    int v14 = *a4;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    long long v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  unint64_t v15 = (v13 + 38) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MPSExternalNDArrayBinary_encodeToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_destinationBuffer_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x746C756C75747443 | *(void *)(a2 + 44) ^ 0x6C75745574557455 | *(unsigned __int8 *)(a2 + 52))
  {
    int v9 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v9;
    int v17 = 500;
    int v18 = "memcmp((const char*)bytes + offset, (\"CttulultUtUtUtul\"), sizeof(\"CttulultUtUtUtul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 80);
  *(void *)(a1 + 40) = *(void *)(a2 + 88);
  *(void *)(a1 + 48) = *(void *)(a2 + 96);
  unint64_t v21 = 68;
  *(void *)(a1 + 56) = AppendString_12841((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v10 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = *(void *)((char *)v8 + v10);
  unint64_t v21 = v10 + 8;
  *(void *)(a1 + 72) = AppendString_12841((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 80) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 88) = AppendString_12841((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 96) = *(void *)((char *)v8 + v12);
  *(void *)(a1 + 104) = *(void *)((char *)v8 + v12 + 8);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12 + 16) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 18))
  {
    int v13 = *a4;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    int v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  unint64_t v14 = (v12 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MPSExternalNDArrayBinaryGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_destinationInfo_accumulate_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    BOOL v9 = *v8 == 0x746C756C75747443 && *(void *)(a2 + 44) == 0x6955745574557455;
    if (!v9 || *(_DWORD *)(a2 + 52) != 7107956)
    {
      int v11 = *a4;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v11;
      int v20 = 500;
      unint64_t v21 = "memcmp((const char*)bytes + offset, (\"CttulultUtUtUtUitul\"), sizeof(\"CttulultUtUtUtUitul\")) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 80);
  *(void *)(a1 + 40) = *(void *)(a2 + 88);
  *(void *)(a1 + 48) = *(void *)(a2 + 96);
  unint64_t v24 = 68;
  *(void *)(a1 + 56) = AppendString_12841((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v24);
  unint64_t v12 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = *(void *)((char *)v8 + v12);
  unint64_t v24 = v12 + 8;
  *(void *)(a1 + 72) = AppendString_12841((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v24);
  unint64_t v13 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 80) = *(void *)((char *)v8 + v13);
  unint64_t v24 = v13 + 8;
  *(void *)(a1 + 88) = AppendString_12841((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v24);
  unint64_t v14 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 96) = *(void *)((char *)v8 + v14);
  unint64_t v24 = v14 + 8;
  *(void *)(a1 + 104) = AppendString_12841((const char **)(a1 + 104), (uint64_t)v8, (uint64_t *)&v24);
  unint64_t v15 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)((char *)v8 + v15);
  *(void *)(a1 + 120) = *(void *)((char *)v8 + v15 + 4);
  *(void *)(a1 + 128) = *(void *)((char *)v8 + v15 + 12);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v15 + 20) ^ 0x6C75 | *((unsigned __int8 *)v8 + v15 + 22))
  {
    int v16 = *a4;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v16;
    int v20 = 500;
    unint64_t v21 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }
  unint64_t v17 = (v15 + 26) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v17);
  if (a4)
  {
    if (v17 + 8 > a3)
    {
      int v18 = *a4;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      unint64_t v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
}

void *GTMTLSMContext_getObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v8 = a2;
  entry = find_entry(a1, &v8, 8uLL, 0);
  if (!*entry) {
    return 0;
  }
  int v5 = *(void **)(*entry + 32);
  if (!v5) {
    return 0;
  }
  __n128 result = 0;
  do
  {
    if (v5[2] > a3 || (uint64_t v7 = v5, v5[3] <= a3))
    {
      if (result) {
        return result;
      }
      uint64_t v7 = 0;
    }
    int v5 = (void *)v5[4];
    __n128 result = v7;
  }
  while (v5);
  return result;
}

uint64_t GTMTLSMContext_lastObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a2;
  entry = find_entry(a1, &v6, 8uLL, 0);
  if (!*entry) {
    return 0;
  }
  for (uint64_t result = *(void *)(*entry + 32); result; uint64_t result = *(void *)(result + 32))
  {
    if (*(void *)(result + 16) <= a3) {
      break;
    }
  }
  return result;
}

uint64_t GTMTLSMContext_getDrawableTexture(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v9 = *(void *)(a2 + 48);
  entry = find_entry(a1, &v9, 8uLL, 0);
  if (!*entry) {
    return 0;
  }
  uint64_t v6 = *(void *)(*entry + 32);
  if (!v6) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    if (*(void *)(a2 + 16) > a3 || (uint64_t v8 = v6, *(void *)(v6 + 24) <= a3))
    {
      if (result) {
        return result;
      }
      uint64_t v8 = 0;
    }
    uint64_t v6 = *(void *)(v6 + 32);
    uint64_t result = v8;
  }
  while (v6);
  return result;
}

_DWORD *GTMTLSMContext_getObjects(_DWORD *result, unint64_t a2, apr_array_header_t *arr)
{
  int v3 = result[3];
  if (v3 >= 1)
  {
    uint64_t v6 = result;
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v8 = *(void **)(*((void *)v6 + 3) + 8 * i);
      if (v8[2] > a2) {
        break;
      }
      if (v8[3] > a2)
      {
        uint64_t v9 = 0;
        do
        {
          if (v8[2] > a2 || (unint64_t v10 = v8, v8[3] <= a2))
          {
            if (v9) {
              break;
            }
            unint64_t v10 = 0;
          }
          uint64_t v8 = (void *)v8[4];
          uint64_t v9 = v10;
        }
        while (v8);
        uint64_t result = apr_array_push(arr);
        *(void *)uint64_t result = v9;
        int v3 = *((_DWORD *)v6 + 3);
      }
    }
  }
  return result;
}

uint64_t GTMTLSMObjectPtr_compare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

void GTMTLSMContext_buildResourceChildrenMap2(uint64_t *a1, uint64_t a2, unint64_t a3, apr_hash_t *a4)
{
  uint64_t v6 = *(apr_pool_t **)a4;
  uint64_t v7 = apr_array_make(*(apr_pool_t **)a2, 4, 8);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 24) + 8 * v9);
      uint64_t v11 = *find_entry((uint64_t)a4, (unsigned char *)(v10 + 8), 8uLL, 0);
      if (!v11 || !*(void *)(v11 + 32))
      {
        v8->int nelts = 0;
        AddObjectAncestors(a1, (void *)v10, a3, v8);
        if (v8->nelts >= 2)
        {
          uint64_t v12 = 1;
          while (1)
          {
            uint64_t v13 = *(void *)&v8->elts[8 * v12];
            uint64_t v14 = *find_entry((uint64_t)a4, (unsigned char *)(v13 + 8), 8uLL, 0);
            if (v14)
            {
              unint64_t v15 = *(apr_array_header_t **)(v14 + 32);
              if (v15) {
                break;
              }
            }
            int v16 = apr_array_make(v6, 1, 8);
            *(void *)apr_array_push(v16) = v10;
            apr_hash_set(a4, (const void *)(v13 + 8), 8, v16);
            ++v12;
            uint64_t v10 = v13;
            if (v12 >= v8->nelts) {
              goto LABEL_12;
            }
          }
          *(void *)apr_array_push(v15) = v10;
        }
      }
LABEL_12:
      ++v9;
    }
    while (v9 < *(int *)(a2 + 12));
  }
}

void *AddObjectAncestors(uint64_t *a1, void *a2, unint64_t a3, apr_array_header_t *a4)
{
  while (1)
  {
    uint64_t result = apr_array_push(a4);
    *uint64_t result = a2;
    int v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 16)
    {
      uint64_t v10 = a2[18];
      if (v10)
      {
        uint64_t Object = GTMTLSMContext_getObject(*a1, v10, a3);
        uint64_t result = (void *)AddObjectAncestors(a1, Object, a3, a4);
      }
      goto LABEL_7;
    }
    if (v9 != 80) {
      break;
    }
    uint64_t v12 = a2[17];
    if (!v12)
    {
      uint64_t v12 = a2[18];
      if (!v12) {
        goto LABEL_7;
      }
    }
LABEL_11:
    a2 = GTMTLSMContext_getObject(*a1, v12, a3);
  }
  if (v9 != 22) {
    return result;
  }
LABEL_7:
  uint64_t v12 = a2[6];
  if (v12) {
    goto LABEL_11;
  }
  return result;
}

apr_hash_index_t *GTMTLSMContext_buildResourceChildrenMap(uint64_t *a1, unint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, *(apr_pool_t **)a3, 0, a4);
  uint64_t v7 = newpool;
  int v8 = *(_DWORD *)(a1[1] + 12);
  if (v8 <= *(_DWORD *)(a1[2] + 12)) {
    int v8 = *(_DWORD *)(a1[2] + 12);
  }
  if (v8 <= *(_DWORD *)(a1[9] + 12)) {
    int v9 = *(_DWORD *)(a1[9] + 12);
  }
  else {
    int v9 = v8;
  }
  uint64_t v10 = apr_array_make(newpool, v9, 8);
  GTMTLSMContext_getObjects((_DWORD *)a1[1], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  v10->int nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)a1[2], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  v10->int nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)a1[9], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  apr_pool_destroy(v7);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = a3;
  *(_DWORD *)(a3 + 40) = 0;
  uint64_t result = apr_hash_next((apr_hash_index_t *)(a3 + 16));
  if (result)
  {
    uint64_t v12 = result;
    do
    {
      uint64_t v13 = *(void *)(*((void *)v12 + 1) + 32);
      size_t v14 = *(unsigned int *)(v13 + 12);
      if ((int)v14 >= 2)
      {
        qsort(*(void **)(v13 + 24), v14, *(int *)(v13 + 8), (int (__cdecl *)(const void *, const void *))GTMTLSMObjectPtr_compare);
        uint64_t v15 = *(unsigned int *)(v13 + 12);
        if ((int)v15 < 2)
        {
          int v20 = 1;
        }
        else
        {
          int v16 = *(uint64_t **)(v13 + 24);
          unint64_t v17 = v16 + 1;
          uint64_t v18 = *v16;
          uint64_t v19 = v15 - 1;
          int v20 = 1;
          do
          {
            uint64_t v21 = v18;
            uint64_t v18 = *v17;
            if (*v17 != v21)
            {
              uint64_t v22 = v16[v20];
              v16[v20++] = v18;
              uint64_t *v17 = v22;
            }
            ++v17;
            --v19;
          }
          while (v19);
        }
        *(_DWORD *)(v13 + 12) = v20;
      }
      uint64_t result = apr_hash_next(v12);
      uint64_t v12 = result;
    }
    while (result);
  }
  return result;
}

void *GTMTLSMContext_getTextureDescriptor(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  uint64_t result = GTMTLSMContext_getObject(*a1, a2, a3);
  if (result)
  {
    int v8 = result;
    uint64_t v9 = result[18];
    if (v9)
    {
      uint64_t result = (void *)GTMTLSMContext_getTextureDescriptor(a1, v9, a3, a4);
      *(_WORD *)(a4 + 34) = *((_WORD *)v8 + 76);
      int v10 = *((unsigned __int8 *)v8 + 158);
      *(unsigned char *)(a4 + 49) = v10;
      if (*((unsigned char *)v8 + 160)) {
        *(unsigned char *)(a4 + 45) = *((unsigned char *)v8 + 160);
      }
      int v11 = *((_DWORD *)v8 + 52);
      if (v11 != -1) {
        *(_DWORD *)(a4 + 16) = v11;
      }
      unsigned int v12 = *((unsigned __int16 *)v8 + 78);
      if (*((_WORD *)v8 + 78))
      {
        if ((v10 - 5) > 1)
        {
          *(_WORD *)(a4 + 28) = v12;
        }
        else
        {
          int v13 = *((unsigned __int16 *)v8 + 78) / 6;
          if (v12 < 6) {
            LOWORD(v13) = 1;
          }
          *(_WORD *)(a4 + 28) = v13;
        }
      }
    }
    else
    {
      size_t v14 = (long long *)result[13];
      if (v14)
      {
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[2];
        *(void *)(a4 + 48) = *((void *)v14 + 6);
        *(_OWORD *)(a4 + 16) = v16;
        *(_OWORD *)(a4 + 32) = v17;
        *(_OWORD *)a4 = v15;
      }
      else
      {
        uint64_t v18 = result[24];
        if (v18)
        {
          *(unsigned char *)(a4 + 49) = 2;
          *(unsigned char *)(a4 + 47) = 1;
          *(_DWORD *)(a4 + 28) = 65537;
          *(_WORD *)(a4 + 44) = 257;
          *(_DWORD *)(a4 + 16) = 84148994;
          uint64_t result = GTMTLSMContext_getObject(*a1, v18, result[2]);
          if (result)
          {
            uint64_t result = GTMTLSMContext_getObject(*a1, result[5], result[2]);
            if (result)
            {
              *(_WORD *)(a4 + 34) = *((_WORD *)result + 136);
              unint64_t v19 = (unint64_t)*((double *)result + 22);
              *(_WORD *)(a4 + 32) = (unint64_t)*((double *)result + 23);
              BOOL v20 = *((unsigned char *)result + 274) != 0;
              *(unsigned char *)(a4 + 43) = *((unsigned char *)result + 274);
              *(_DWORD *)(a4 + 20) = 4 * v20;
              *(_DWORD *)(a4 + 24) = v19;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *GTMTLSMComputePipelineState_computePipelineDescriptor(uint64_t *result, uint64_t a2, void *a3, apr_pool_t *a4)
{
  uint64_t v6 = *(const void **)(a2 + 56);
  if (!v6)
  {
    if (*(void *)(a2 + 48))
    {
      uint64_t result = (uint64_t *)memcpy(a3, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
      a3[106] = *(void *)(a2 + 48);
    }
    else
    {
      uint64_t v7 = *(void *)(a2 + 40);
      if (v7 && *(void *)(a2 + 184))
      {
        uint64_t v9 = result;
        uint64_t Object = GTMTLSMContext_getObject(*result, v7, *(void *)(a2 + 16));
        uint64_t result = (uint64_t *)GTMTLSMComputePipelineState_computePipelineDescriptor(v9, Object, a3, a4);
        uint64_t v11 = **(void **)(a2 + 184);
        if (v11)
        {
          uint64_t v12 = a3[95] + v11;
          uint64_t result = (uint64_t *)apr_palloc(a4, 8 * v12);
          if (a3[95])
          {
            unint64_t v13 = 0;
            uint64_t v14 = a3[94];
            do
            {
              result[v13] = *(void *)(v14 + 8 * v13);
              ++v13;
            }
            while (a3[95] > v13);
          }
          long long v15 = *(unint64_t **)(a2 + 184);
          if (*v15)
          {
            unint64_t v16 = 0;
            do
            {
              result[v16 + a3[95]] = v15[v16 + 1];
              ++v16;
            }
            while (*v15 > v16);
          }
          a3[94] = result;
          a3[95] = v12;
        }
      }
      else
      {
        if (*(_DWORD *)(a2 + 4) != -16101) {
          return result;
        }
        uint64_t result = (uint64_t *)memcpy(a3, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
      }
    }
    a3[113] = *(void *)(a2 + 104);
    return result;
  }

  return (uint64_t *)memcpy(a3, v6, 0x3C0uLL);
}

uint64_t GTMTLSMRenderPipelineState_renderPipelineDescriptorType(uint64_t *a1, void *a2)
{
  unsigned int v2 = a2;
  if (a1)
  {
    uint64_t v4 = a2[5];
    for (unint64_t i = v2[2]; ; unint64_t i = Object[2])
    {
      uint64_t Object = GTMTLSMContext_getObject(*a1, v4, i);
      if (!Object || *(_DWORD *)Object != 71) {
        break;
      }
      unsigned int v2 = Object;
      uint64_t v4 = Object[5];
    }
  }
  if (v2[6]) {
    return 1;
  }
  if (v2[8]) {
    return 2;
  }
  if (v2[9]) {
    return 3;
  }
  return 0;
}

_DWORD *GTMTLSMRenderPipelineState_renderPipelineDescriptor(uint64_t *a1, void *a2, uint64_t a3, apr_pool_t *a4)
{
  uint64_t v6 = (const void *)a2[6];
  if (v6)
  {
    return memcpy((void *)a3, v6, 0x5E8uLL);
  }
  else
  {
    uint64_t result = GTMTLSMContext_getObject(*a1, a2[5], a2[2]);
    if (result && *result == 71)
    {
      uint64_t result = (_DWORD *)GTMTLSMRenderPipelineState_renderPipelineDescriptor(a1, result, a3, a4);
      int v10 = (void *)a2[10];
      uint64_t v11 = v10[9];
      if (v11)
      {
        uint64_t v12 = (unsigned __int16)(*(_WORD *)(a3 + 1072) + v11);
        uint64_t result = apr_palloc(a4, 8 * v12);
        if (*(void *)(a3 + 1072))
        {
          unint64_t v13 = 0;
          uint64_t v14 = *(void *)(a3 + 1064);
          do
          {
            *(void *)&result[2 * v13] = *(void *)(v14 + 8 * v13);
            ++v13;
          }
          while (*(void *)(a3 + 1072) > v13);
        }
        int v10 = (void *)a2[10];
        if (v10[9])
        {
          unint64_t v15 = 0;
          uint64_t v16 = v10[8];
          do
          {
            *(void *)&result[2 * v15 + 2 * *(void *)(a3 + 1072)] = *(void *)(v16 + 8 * v15);
            ++v15;
          }
          while (v10[9] > v15);
        }
        *(void *)(a3 + 1064) = result;
        *(void *)(a3 + 1072) = v12;
      }
      uint64_t v17 = v10[1];
      if (v17)
      {
        uint64_t v18 = (unsigned __int16)(*(_DWORD *)(a3 + 880) + v17);
        uint64_t result = apr_palloc(a4, 8 * v18);
        if (*(void *)(a3 + 880))
        {
          unint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 872);
          do
          {
            *(void *)&result[2 * v19] = *(void *)(v20 + 8 * v19);
            ++v19;
          }
          while (*(void *)(a3 + 880) > v19);
        }
        uint64_t v21 = (uint64_t *)a2[10];
        if (v21[1])
        {
          unint64_t v22 = 0;
          uint64_t v23 = *v21;
          do
          {
            *(void *)&result[2 * v22 + 2 * *(void *)(a3 + 880)] = *(void *)(v23 + 8 * v22);
            ++v22;
          }
          while (v21[1] > v22);
        }
        *(void *)(a3 + 872) = result;
        *(void *)(a3 + 880) = v18;
      }
      *(void *)(a3 + 1280) = a2[13];
    }
  }
  return result;
}

uint64_t *GTMTLSMRenderPipelineState_tilePipelineDescriptor(uint64_t *result, void *a2, uint64_t **a3, apr_pool_t *a4)
{
  int v5 = (long long *)a2[8];
  if (v5)
  {
    long long v6 = *v5;
    long long v7 = v5[2];
    *((_OWORD *)a3 + 1) = v5[1];
    *((_OWORD *)a3 + 2) = v7;
    *(_OWORD *)a3 = v6;
    long long v8 = v5[3];
    long long v9 = v5[4];
    long long v10 = v5[6];
    *((_OWORD *)a3 + 5) = v5[5];
    *((_OWORD *)a3 + 6) = v10;
    *((_OWORD *)a3 + 3) = v8;
    *((_OWORD *)a3 + 4) = v9;
    long long v11 = v5[7];
    long long v12 = v5[8];
    long long v13 = v5[10];
    *((_OWORD *)a3 + 9) = v5[9];
    *((_OWORD *)a3 + 10) = v13;
    *((_OWORD *)a3 + 7) = v11;
    *((_OWORD *)a3 + 8) = v12;
  }
  else
  {
    uint64_t v16 = result;
    uint64_t result = GTMTLSMContext_getObject(*result, a2[5], a2[2]);
    if (result && *(_DWORD *)result == 71)
    {
      GTMTLSMRenderPipelineState_tilePipelineDescriptor(v16, result, a3, a4);
      uint64_t v17 = (uint64_t *)(unsigned __int16)(*(_DWORD *)(a2[10] + 56) + *((_WORD *)a3 + 4));
      uint64_t result = (uint64_t *)apr_palloc(a4, 8 * (void)v17);
      if (a3[1])
      {
        unint64_t v18 = 0;
        unint64_t v19 = *a3;
        do
        {
          result[v18] = v19[v18];
          ++v18;
        }
        while ((unint64_t)a3[1] > v18);
      }
      uint64_t v20 = a2[10];
      if (*(void *)(v20 + 56))
      {
        unint64_t v21 = 0;
        uint64_t v22 = *(void *)(v20 + 48);
        do
        {
          result[(void)a3[1] + v21] = *(void *)(v22 + 8 * v21);
          ++v21;
        }
        while (*(void *)(v20 + 56) > v21);
      }
      *a3 = result;
      a3[1] = v17;
    }
  }
  return result;
}

uint64_t GTMTLSMRenderPipelineState_fragmentFunction(uint64_t *a1, void *a2)
{
  if (a2[11]) {
    return 0;
  }
  uint64_t Object = a2;
  while (1)
  {
    uint64_t v5 = Object[6];
    if (v5)
    {
      uint64_t v7 = v5 + 1176;
      return *(void *)v7;
    }
    uint64_t v6 = Object[9];
    if (v6) {
      break;
    }
    uint64_t Object = GTMTLSMContext_getObject(*a1, Object[5], Object[2]);
    if (Object[11]) {
      return 0;
    }
  }
  uint64_t v7 = v6 + 344;
  return *(void *)v7;
}

BOOL GTMTLSMPipelineState_supportsIndirectCommandBuffers(uint64_t a1)
{
  if (*(_DWORD *)a1 == 29)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3)
    {
      int v2 = *(unsigned __int8 *)(v3 + 956);
      return v2 != 0;
    }
  }
  else if (*(_DWORD *)a1 == 71)
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      int v2 = *(unsigned __int8 *)(v1 + 1499);
      return v2 != 0;
    }
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4)
    {
      int v2 = *(unsigned __int8 *)(v4 + 510);
      return v2 != 0;
    }
  }
  return 0;
}

uint64_t GTMTLSMPipelineState_sortIndirectResources(uint64_t *a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  do
  {
    uint64_t v6 = *v5;
    if (GTMTLSMPipelineState_supportsIndirectCommandBuffers(*v5))
    {
      uint64_t *v5 = a1[(int)v3];
      a1[(int)v3] = v6;
      uint64_t v3 = (v3 + 1);
    }
    ++v5;
    --v4;
  }
  while (v4);
  return v3;
}

void GTMTLSMContext_indirectCommandBufferResources(uint64_t a1, _DWORD **a2, unint64_t a3, apr_pool_t *p)
{
  long long v8 = apr_array_make(p, 128, 8);
  GTMTLSMContext_getObjects(a2[1], a3, v8);
  elts = v8->elts;
  uint64_t nelts = v8->nelts;
  long long v11 = apr_array_make(p, v8->nelts, 24);
  if ((int)nelts >= 1)
  {
    do
    {
      uint64_t v12 = *(void *)elts;
      elts += 8;
      long long v13 = (int8x16_t *)apr_array_push(v11);
      *long long v13 = vextq_s8(*(int8x16_t *)(v12 + 104), *(int8x16_t *)(v12 + 104), 8uLL);
      v13[1].i64[0] = *(void *)(v12 + 8);
      --nelts;
    }
    while (nelts);
  }
  qsort(v11->elts, v11->nelts, v11->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  uint64_t v14 = apr_hash_make(p);
  *(void *)(a1 + 24) = v14;
  unint64_t v15 = apr_hash_make(p);
  *(void *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v8->uint64_t nelts = 0;
  GTMTLSMContext_getObjects(a2[4], a3, v8);
  uint64_t v16 = (uint64_t *)v8->elts;
  LODWORD(v17) = GTMTLSMPipelineState_sortIndirectResources(v16, v8->nelts);
  v8->uint64_t nelts = v17;
  unint64_t v18 = apr_array_make(p, v17, 32);
  if ((int)v17 >= 1)
  {
    uint64_t v17 = v17;
    do
    {
      unint64_t v19 = (void *)*v16++;
      uint64_t v20 = apr_array_push(v18);
      uint64_t v21 = v19[1];
      *uint64_t v20 = v19[12];
      v20[1] = v21;
      v20[2] = v19[14];
      --v17;
    }
    while (v17);
  }
  uint64_t v22 = v18->nelts;
  if ((int)v22 >= 1)
  {
    uint64_t v23 = v18->elts;
    do
    {
      apr_hash_set(v14, v23, 8, v23);
      v23 += 32;
      --v22;
    }
    while (v22);
  }
  v8->uint64_t nelts = 0;
  GTMTLSMContext_getObjects(a2[5], a3, v8);
  unint64_t v24 = (uint64_t *)v8->elts;
  int v25 = GTMTLSMPipelineState_sortIndirectResources(v24, v8->nelts);
  v8->uint64_t nelts = v25;
  long long v26 = apr_array_make(p, v25, 32);
  if (v25 >= 1)
  {
    uint64_t v27 = v25;
    do
    {
      long long v28 = (void *)*v24++;
      int v29 = apr_array_push(v26);
      uint64_t v30 = v28[1];
      *int v29 = v28[12];
      v29[1] = v30;
      _DWORD v29[2] = v28[14];
      --v27;
    }
    while (v27);
  }
  uint64_t v31 = v26->nelts;
  if ((int)v31 >= 1)
  {
    int v32 = v26->elts;
    do
    {
      apr_hash_set(v15, v32, 8, v32);
      v32 += 32;
      --v31;
    }
    while (v31);
  }
}

void GTMTLSMCommandEncoder_processTraceFunc(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8616;
  int v7 = *((_DWORD *)a2 + 2);
  if (v7 <= -16088)
  {
    if (v7 <= -16163)
    {
      switch(v7)
      {
        case -16354:
          uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v13 = *((void *)v12 + 1);
          if (!v13) {
            return;
          }
          int v14 = 21;
          goto LABEL_435;
        case -16353:
          long long v239 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v240 = *((void *)v239 + 1);
          if (!v240) {
            return;
          }
          *(_DWORD *)a1 = 70;
          uint64_t v241 = *a2;
          *(void *)(a1 + 8) = v240;
          *(void *)(a1 + 16) = v241;
          *(void *)(a1 + 24) = -1;
          *(void *)(a1 + 40) = *(void *)v239;
          long long v242 = GTTraceFunc_argumentBytesWithMap(a2, v239[16], a3);
          uint64_t v243 = a1 + 56;
          goto LABEL_276;
        case -16352:
          long long v244 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v245 = *((void *)v244 + 1);
          if (v245)
          {
            *(_DWORD *)a1 = 28;
            uint64_t v246 = *a2;
            *(void *)(a1 + 8) = v245;
            *(void *)(a1 + 16) = v246;
            *(void *)(a1 + 24) = -1;
            *(void *)(a1 + 40) = *(void *)v244;
            bzero((void *)(a1 + 56), 0x888uLL);
            memset_pattern16((void *)(a1 + 2240), &unk_4C80D0, 0x100uLL);
            *(void *)(a1 + 824) = -1;
            *(void *)&long long v247 = -1;
            *((void *)&v247 + 1) = -1;
            *(_OWORD *)(a1 + 792) = v247;
            *(_OWORD *)(a1 + 808) = v247;
            *(_OWORD *)(a1 + 760) = v247;
            *(_OWORD *)(a1 + 776) = v247;
            *(_OWORD *)(a1 + 728) = v247;
            *(_OWORD *)(a1 + 744) = v247;
            *(_OWORD *)(a1 + 696) = v247;
            *(_OWORD *)(a1 + 712) = v247;
            *(_OWORD *)(a1 + 664) = v247;
            *(_OWORD *)(a1 + 680) = v247;
            *(_OWORD *)(a1 + 632) = v247;
            *(_OWORD *)(a1 + 648) = v247;
            *(_OWORD *)(a1 + 600) = v247;
            *(_OWORD *)(a1 + 616) = v247;
            *(_OWORD *)(a1 + 584) = v247;
            *(unsigned char *)(a1 + 2304) = -1;
          }
          return;
        case -16351:
          long long v248 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v249 = *((void *)v248 + 1);
          if (v249)
          {
            *(_DWORD *)a1 = 65;
            uint64_t v250 = *a2;
            *(void *)(a1 + 8) = v249;
            *(void *)(a1 + 16) = v250;
            *(void *)(a1 + 24) = -1;
            *(void *)(a1 + 40) = *(void *)v248;
            long long v251 = GTTraceFunc_argumentBytesWithMap(a2, v248[16], a3);
            *(_OWORD *)(a1 + 128) = 0u;
            *(_OWORD *)(a1 + 144) = 0u;
            *(_OWORD *)(a1 + 160) = 0u;
            *(_OWORD *)(a1 + 176) = 0u;
            *(void *)(a1 + 192) = 0;
            *(void *)(a1 + 56) = v251;
            memset_pattern16((void *)(a1 + 64), &unk_4C80E0, 0x40uLL);
            *(_WORD *)(a1 + 192) = 1028;
          }
          return;
        case -16350:
        case -16349:
        case -16348:
        case -16347:
        case -16346:
        case -16345:
        case -16344:
        case -16343:
        case -16342:
        case -16341:
        case -16340:
        case -16338:
        case -16327:
        case -16326:
        case -16324:
        case -16323:
        case -16322:
        case -16321:
        case -16320:
        case -16319:
        case -16318:
        case -16317:
        case -16316:
        case -16315:
        case -16314:
        case -16313:
        case -16312:
        case -16311:
        case -16310:
        case -16309:
        case -16308:
        case -16307:
        case -16306:
        case -16305:
        case -16304:
        case -16303:
        case -16302:
        case -16301:
        case -16300:
        case -16299:
        case -16298:
        case -16297:
        case -16296:
        case -16295:
        case -16294:
        case -16293:
        case -16292:
        case -16291:
        case -16290:
        case -16289:
        case -16287:
        case -16284:
        case -16283:
        case -16282:
        case -16280:
        case -16251:
        case -16250:
        case -16249:
        case -16248:
        case -16245:
        case -16244:
        case -16243:
        case -16242:
        case -16241:
        case -16240:
        case -16239:
        case -16238:
        case -16237:
        case -16236:
        case -16235:
        case -16234:
        case -16233:
        case -16232:
        case -16231:
        case -16230:
        case -16229:
        case -16228:
        case -16221:
        case -16220:
        case -16218:
        case -16217:
        case -16216:
        case -16215:
          return;
        case -16339:
        case -16288:
        case -16281:
          goto LABEL_54;
        case -16337:
          *(void *)(a1 + 64) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
          return;
        case -16336:
          long long v252 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v253 = *((void *)v252 + 3);
          uint64_t v254 = 1 << v253;
          uint64_t v255 = a1 + 8 * (int)(v253 >> 6);
          *(void *)(v255 + 72) &= ~v254;
          *(void *)(a1 + 80 + 8 * *((void *)v252 + 3) + 8) = *((void *)v252 + 1);
          *(void *)(a1 + 80 + 8 * (int)(*((void *)v252 + 3) >> 6)) &= ~(1 << *((void *)v252 + 3));
          *(void *)(a1 + 80 + 8 * *((void *)v252 + 3) + 256) = *((void *)v252 + 2);
          return;
        case -16335:
          char v256 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v256;
          unint64_t v257 = *((void *)v256 + 1);
          unint64_t v258 = *((void *)v256 + 2) + v257;
          unint64_t v259 = 64;
          if (v258 >= 0x40) {
            unint64_t v258 = 64;
          }
          char v260 = v258 - v257;
          if (v258 < v257) {
            char v260 = 0;
          }
          uint64_t v261 = ~(-1 << v260);
          if (v257 <= v258) {
            char v262 = v257 & 0x3F;
          }
          else {
            char v262 = 0;
          }
          __int16 v264 = (uint64_t *)(a1 + 80);
          uint64_t v263 = *(void *)(a1 + 80);
          *(void *)(a1 + 72) &= ~(v261 << v262);
          unint64_t v265 = *((void *)v256 + 1);
          if (*((void *)v256 + 2) + v265 < 0x40) {
            unint64_t v259 = *((void *)v256 + 2) + v265;
          }
          char v266 = v259 - v265;
          if (v259 < v265) {
            char v266 = 0;
          }
          uint64_t v267 = ~(-1 << v266);
          if (v265 <= v259) {
            char v268 = v265 & 0x3F;
          }
          else {
            char v268 = 0;
          }
          *__int16 v264 = v263 & ~(v267 << v268);
          uint64_t v269 = *((void *)v256 + 1);
          long long v270 = GTTraceFunc_argumentBytesWithMap(a2, v256[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            long long v271 = &v264[v269 + 1];
            uint64_t v272 = *((void *)v27 + 2);
            do
            {
              uint64_t v273 = *(void *)v270;
              v270 += 8;
              *v271++ = v273;
              --v272;
            }
            while (v272);
          }
          uint64_t v162 = a1 + 8 * *((void *)v27 + 1) + 336;
          goto LABEL_354;
        case -16334:
          uint64_t v274 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v274 + 2) + 832) = *((void *)v274 + 1);
          return;
        case -16333:
          char v275 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unsigned __int8 v276 = v275;
          unint64_t v277 = *((void *)v275 + 1);
          unint64_t v278 = *((void *)v275 + 2) + v277;
          if (v278 >= 0x40) {
            unint64_t v278 = 64;
          }
          char v279 = v278 - v277;
          if (v278 < v277) {
            char v279 = 0;
          }
          uint64_t v280 = ~(-1 << v279);
          if (v277 <= v278) {
            char v281 = v277 & 0x3F;
          }
          else {
            char v281 = 0;
          }
          *(void *)(a1 + 80) &= ~(v280 << v281);
          uint64_t v282 = *((void *)v275 + 1);
          long long v283 = GTTraceFunc_argumentBytesWithMap(a2, v275[24], a3);
          if ((int)*((void *)v276 + 2) >= 1)
          {
            long long v284 = (void *)(a1 + 8 * v282 + 832);
            uint64_t v285 = *((void *)v276 + 2);
            do
            {
              uint64_t v286 = *(void *)v283;
              v283 += 8;
              *v284++ = v286;
              --v285;
            }
            while (v285);
          }
          return;
        case -16332:
          long long v287 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v287 + 2) + 1856) = *((void *)v287 + 1);
          return;
        case -16331:
          long long v288 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          long long v289 = v288;
          unint64_t v290 = *((void *)v288 + 1);
          unint64_t v291 = *((void *)v288 + 2) + v290;
          if (v291 >= 0x40) {
            unint64_t v291 = 64;
          }
          char v292 = v291 - v290;
          if (v291 < v290) {
            char v292 = 0;
          }
          uint64_t v293 = ~(-1 << v292);
          if (v290 <= v291) {
            char v294 = v290 & 0x3F;
          }
          else {
            char v294 = 0;
          }
          *(void *)(a1 + 80) &= ~(v293 << v294);
          uint64_t v295 = *((void *)v288 + 1);
          uint64_t v296 = GTTraceFunc_argumentBytesWithMap(a2, v288[24], a3);
          if ((int)*((void *)v289 + 2) >= 1)
          {
            char v297 = (void *)(a1 + 8 * v295 + 1856);
            uint64_t v298 = *((void *)v289 + 2);
            do
            {
              uint64_t v299 = *(void *)v296;
              v296 += 8;
              *v297++ = v299;
              --v298;
            }
            while (v298);
          }
          return;
        case -16330:
          long long v300 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v300 + 2) + 1856) = *((void *)v300 + 1);
          *(_DWORD *)(a1 + 1984 + 4 * *((void *)v300 + 2) + 192) = *((_DWORD *)v300 + 6);
          *(_DWORD *)(a1 + 1984 + 4 * *((void *)v300 + 2) + 256) = *((_DWORD *)v300 + 7);
          return;
        case -16329:
          long long v301 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          int v171 = v301;
          unint64_t v302 = *((void *)v301 + 1);
          unint64_t v303 = *((void *)v301 + 2) + v302;
          if (v303 >= 0x40) {
            unint64_t v303 = 64;
          }
          char v304 = v303 - v302;
          if (v303 < v302) {
            char v304 = 0;
          }
          uint64_t v305 = ~(-1 << v304);
          if (v302 <= v303) {
            char v306 = v302 & 0x3F;
          }
          else {
            char v306 = 0;
          }
          *(void *)(a1 + 80) &= ~(v305 << v306);
          uint64_t v307 = *((void *)v301 + 1);
          char v308 = GTTraceFunc_argumentBytesWithMap(a2, v301[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            unsigned __int8 v309 = (void *)(a1 + 8 * v307 + 1856);
            uint64_t v310 = *((void *)v171 + 2);
            do
            {
              uint64_t v311 = *(void *)v308;
              v308 += 8;
              *v309++ = v311;
              --v310;
            }
            while (v310);
          }
          uint64_t v312 = a1 + 1984;
          char v313 = (void *)(a1 + 1984 + 4 * *((void *)v171 + 1) + 192);
          long long v314 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v313, v314, 4 * *((void *)v171 + 2));
          uint64_t v162 = v312 + 4 * *((void *)v171 + 1) + 256;
          goto LABEL_514;
        case -16328:
          long long v315 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 4 * *((void *)v315 + 2) + 2040) = *((void *)v315 + 1);
          return;
        case -16325:
        case -16285:
        case -16246:
          goto LABEL_65;
        case -16286:
          long long v316 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v317 = *((void *)v316 + 1);
          if (!v317) {
            return;
          }
          *(_DWORD *)a1 = 70;
          uint64_t v318 = *a2;
          *(void *)(a1 + 8) = v317;
          *(void *)(a1 + 16) = v318;
          *(void *)(a1 + 24) = -1;
          *(void *)(a1 + 40) = *(void *)v316;
          uint64_t v243 = a1 + 56;
          long long v242 = 0;
LABEL_276:
          GTMTLSMRenderCommandEncoder_init(v243, (uint64_t)v242);
          return;
        case -16279:
          *(void *)(a1 + 8600) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16278:
          long long v319 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v320 = *((void *)v319 + 3);
          uint64_t v321 = 1 << v320;
          uint64_t v322 = a1 + 56 + 8 * (int)(v320 >> 6);
          *(void *)(v322 + 8) &= ~v321;
          *(void *)(a1 + 80 + 8 * *((void *)v319 + 3)) = *((void *)v319 + 1);
          unint64_t v323 = *((void *)v319 + 3);
          uint64_t v324 = 1 << v323;
          uint64_t v325 = a1 + 56 + 8 * (int)(v323 >> 6);
          *(void *)(v325 + 16) &= ~v324;
          uint64_t v326 = *((void *)v319 + 2);
          uint64_t v327 = a1 + 80 + 8 * *((void *)v319 + 3);
          goto LABEL_450;
        case -16277:
          long long v328 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v328;
          unint64_t v329 = *((void *)v328 + 1);
          unint64_t v330 = *((void *)v328 + 2) + v329;
          if (v330 >= 0x40) {
            unint64_t v330 = 64;
          }
          char v331 = v330 - v329;
          if (v330 < v329) {
            char v331 = 0;
          }
          uint64_t v332 = ~(-1 << v331);
          if (v329 <= v330) {
            char v333 = v329 & 0x3F;
          }
          else {
            char v333 = 0;
          }
          uint64_t v334 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v332 << v333);
          unint64_t v335 = *((void *)v328 + 1);
          unint64_t v336 = *((void *)v328 + 2) + v335;
          if (v336 >= 0x40) {
            unint64_t v336 = 64;
          }
          char v337 = v336 - v335;
          if (v336 < v335) {
            char v337 = 0;
          }
          uint64_t v338 = ~(-1 << v337);
          if (v335 <= v336) {
            char v339 = v335 & 0x3F;
          }
          else {
            char v339 = 0;
          }
          *(void *)(a1 + 72) = v334 & ~(v338 << v339);
          uint64_t v340 = *((void *)v328 + 1);
          uint64_t v341 = GTTraceFunc_argumentBytesWithMap(a2, v328[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v342 = (void *)(a1 + 8 * v340 + 80);
            uint64_t v343 = *((void *)v27 + 2);
            do
            {
              uint64_t v344 = *(void *)v341;
              v341 += 8;
              *v342++ = v344;
              --v343;
            }
            while (v343);
          }
          uint64_t v162 = a1 + 8 * *((void *)v27 + 1) + 328;
          goto LABEL_354;
        case -16276:
          unint64_t v345 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v345 + 2) + 824) = *((void *)v345 + 1);
          return;
        case -16275:
          uint64_t v346 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v347 = v346;
          unint64_t v348 = *((void *)v346 + 1);
          unint64_t v349 = *((void *)v346 + 2) + v348;
          if (v349 >= 0x40) {
            unint64_t v349 = 64;
          }
          char v350 = v349 - v348;
          if (v349 < v348) {
            char v350 = 0;
          }
          uint64_t v351 = ~(-1 << v350);
          if (v348 <= v349) {
            char v352 = v348 & 0x3F;
          }
          else {
            char v352 = 0;
          }
          *(void *)(a1 + 72) &= ~(v351 << v352);
          uint64_t v353 = *((void *)v346 + 1);
          v354 = GTTraceFunc_argumentBytesWithMap(a2, v346[24], a3);
          if ((int)*((void *)v347 + 2) >= 1)
          {
            uint64_t v355 = (void *)(a1 + 8 * v353 + 824);
            uint64_t v356 = *((void *)v347 + 2);
            do
            {
              uint64_t v357 = *(void *)v354;
              v354 += 8;
              *v355++ = v357;
              --v356;
            }
            while (v356);
          }
          return;
        case -16274:
          uint64_t v358 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v358 + 2) + 1848) = *((void *)v358 + 1);
          return;
        case -16273:
          uint64_t v359 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v360 = v359;
          unint64_t v361 = *((void *)v359 + 1);
          unint64_t v362 = *((void *)v359 + 2) + v361;
          if (v362 >= 0x40) {
            unint64_t v362 = 64;
          }
          char v363 = v362 - v361;
          if (v362 < v361) {
            char v363 = 0;
          }
          uint64_t v364 = ~(-1 << v363);
          if (v361 <= v362) {
            char v365 = v361 & 0x3F;
          }
          else {
            char v365 = 0;
          }
          *(void *)(a1 + 72) &= ~(v364 << v365);
          uint64_t v366 = *((void *)v359 + 1);
          uint64_t v367 = GTTraceFunc_argumentBytesWithMap(a2, v359[24], a3);
          if ((int)*((void *)v360 + 2) >= 1)
          {
            uint64_t v368 = (void *)(a1 + 8 * v366 + 1848);
            uint64_t v369 = *((void *)v360 + 2);
            do
            {
              uint64_t v370 = *(void *)v367;
              v367 += 8;
              *v368++ = v370;
              --v369;
            }
            while (v369);
          }
          return;
        case -16272:
          uint64_t v371 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v371 + 2) + 1792) = *((void *)v371 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v371 + 2) + 10036) = *((_DWORD *)v371 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v371 + 2) + 10100) = *((_DWORD *)v371 + 7);
          return;
        case -16271:
          uint64_t v372 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          int v171 = v372;
          unint64_t v373 = *((void *)v372 + 1);
          unint64_t v374 = *((void *)v372 + 2) + v373;
          if (v374 >= 0x40) {
            unint64_t v374 = 64;
          }
          char v375 = v374 - v373;
          if (v374 < v373) {
            char v375 = 0;
          }
          uint64_t v376 = ~(-1 << v375);
          if (v373 <= v374) {
            char v377 = v373 & 0x3F;
          }
          else {
            char v377 = 0;
          }
          *(void *)(a1 + 72) &= ~(v376 << v377);
          uint64_t v378 = *((void *)v372 + 1);
          uint64_t v379 = GTTraceFunc_argumentBytesWithMap(a2, v372[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v380 = (void *)(a1 + 8 * v378 + 1848);
            uint64_t v381 = *((void *)v171 + 2);
            do
            {
              uint64_t v382 = *(void *)v379;
              v379 += 8;
              *v380++ = v382;
              --v381;
            }
            while (v381);
          }
          uint64_t v383 = a1 + 56;
          uint64_t v384 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10036);
          uint64_t v385 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v384, v385, 4 * *((void *)v171 + 2));
          uint64_t v180 = v383 + 4 * *((void *)v171 + 1);
          uint64_t v181 = 10100;
          goto LABEL_513;
        case -16270:
          uint64_t v386 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8608) = 1;
          long long v387 = *(_OWORD *)(v386 + 24);
          long long v388 = *(_OWORD *)(v386 + 40);
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v386 + 8);
          *(_OWORD *)(v6 + 16) = v387;
          *(_OWORD *)(v6 + 32) = v388;
          return;
        case -16269:
          *(unsigned char *)(a1 + 11138) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16268:
          *(unsigned char *)(a1 + 11136) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16267:
          *(unsigned char *)(a1 + 11137) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16266:
          uint64_t v389 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10056) = *((_DWORD *)v389 + 2);
          *(_DWORD *)(a1 + 10060) = *((_DWORD *)v389 + 3);
          *(_DWORD *)(a1 + 10064) = *((_DWORD *)v389 + 4);
          return;
        case -16265:
          v390 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 9384) = 1;
          long long v391 = *(_OWORD *)(v390 + 24);
          *(_OWORD *)(a1 + 9392) = *(_OWORD *)(v390 + 8);
          *(_OWORD *)(a1 + 9408) = v391;
          return;
        case -16264:
          *(unsigned char *)(a1 + 11139) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16263:
          uint64_t v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v392 = *((void *)v144 + 3);
          uint64_t v393 = 1 << v392;
          uint64_t v394 = a1 + 8 * (int)(v392 >> 6);
          *(void *)(v394 + 1976) &= ~v393;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v198 = a1 + 1984;
          goto LABEL_449;
        case -16262:
          uint64_t v395 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v395;
          unint64_t v396 = *((void *)v395 + 1);
          unint64_t v397 = *((void *)v395 + 2) + v396;
          if (v397 >= 0x40) {
            unint64_t v397 = 64;
          }
          char v398 = v397 - v396;
          if (v397 < v396) {
            char v398 = 0;
          }
          uint64_t v399 = ~(-1 << v398);
          if (v396 <= v397) {
            char v400 = v396 & 0x3F;
          }
          else {
            char v400 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v399 << v400);
          uint64_t v401 = *((void *)v395 + 1);
          uint64_t v402 = GTTraceFunc_argumentBytesWithMap(a2, v395[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v403 = (void *)(a1 + 8 * v401 + 1984);
            uint64_t v404 = *((void *)v27 + 2);
            do
            {
              uint64_t v405 = *(void *)v402;
              v402 += 8;
              *v403++ = v405;
              --v404;
            }
            while (v404);
          }
          uint64_t v162 = a1 + 8 * *((void *)v27 + 1) + 2232;
LABEL_354:
          unsigned int v406 = v27[25];
LABEL_498:
          v572 = GTTraceFunc_argumentBytesWithMap(a2, v406, a3);
          size_t v573 = 8 * *((void *)v27 + 2);
          goto LABEL_515;
        case -16261:
          uint64_t v407 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v407 + 2) + 2480) = *((void *)v407 + 1);
          return;
        case -16260:
          v408 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v409 = *((void *)v408 + 1);
          v410 = GTTraceFunc_argumentBytesWithMap(a2, v408[24], a3);
          if ((int)*((void *)v408 + 2) >= 1)
          {
            uint64_t v411 = (void *)(a1 + 8 * v409 + 2480);
            uint64_t v412 = *((void *)v408 + 2);
            do
            {
              uint64_t v413 = *(void *)v410;
              v410 += 8;
              *v411++ = v413;
              --v412;
            }
            while (v412);
          }
          return;
        case -16259:
          uint64_t v414 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v414 + 2) + 3504) = *((void *)v414 + 1);
          return;
        case -16258:
          v415 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v416 = *((void *)v415 + 1);
          id v417 = GTTraceFunc_argumentBytesWithMap(a2, v415[24], a3);
          if ((int)*((void *)v415 + 2) >= 1)
          {
            unsigned int v418 = (void *)(a1 + 8 * v416 + 3504);
            uint64_t v419 = *((void *)v415 + 2);
            do
            {
              uint64_t v420 = *(void *)v417;
              v417 += 8;
              *v418++ = v420;
              --v419;
            }
            while (v419);
          }
          return;
        case -16257:
          uint64_t v421 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v421 + 2) + 3448) = *((void *)v421 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v421 + 2) + 10164) = *((_DWORD *)v421 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v421 + 2) + 10228) = *((_DWORD *)v421 + 7);
          return;
        case -16256:
          int v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v422 = *((void *)v171 + 1);
          uint64_t v423 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v424 = (void *)(a1 + 8 * v422 + 3504);
            uint64_t v425 = *((void *)v171 + 2);
            do
            {
              uint64_t v426 = *(void *)v423;
              v423 += 8;
              *v424++ = v426;
              --v425;
            }
            while (v425);
          }
          uint64_t v427 = a1 + 56;
          uint64_t v428 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10164);
          v429 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v428, v429, 4 * *((void *)v171 + 2));
          uint64_t v180 = v427 + 4 * *((void *)v171 + 1);
          uint64_t v181 = 10228;
LABEL_513:
          uint64_t v162 = v180 + v181;
LABEL_514:
          v572 = GTTraceFunc_argumentBytesWithMap(a2, v171[26], a3);
          size_t v573 = 4 * *((void *)v171 + 2);
LABEL_515:
          v601 = (void *)v162;
LABEL_516:
          memcpy(v601, v572, v573);
          return;
        case -16255:
          uint64_t v430 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10068) = *((_DWORD *)v430 + 2);
          *(_DWORD *)(a1 + 10072) = *((_DWORD *)v430 + 3);
          *(_DWORD *)(a1 + 10076) = *((_DWORD *)v430 + 4);
          *(_DWORD *)(a1 + 10080) = *((_DWORD *)v430 + 5);
          return;
        case -16254:
          *(void *)(a1 + 9904) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16253:
          int v431 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 2);
          *(_DWORD *)(a1 + 10088) = v431;
          *(_DWORD *)(a1 + 10084) = v431;
          return;
        case -16252:
          uint64_t v432 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(unsigned char *)(v6 + 2525) = *((void *)v432 + 1);
          *(_DWORD *)(a1 + 11132) = *((void *)v432 + 2);
          return;
        case -16247:
          *(_DWORD *)(a1 + 10736) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                    + 2);
          return;
        case -16227:
          uint64_t v433 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v434 = *((void *)v433 + 2);
          uint64_t v435 = 1 << v434;
          uint64_t v436 = a1 + 8 * (int)(v434 >> 6);
          *(void *)(v436 + 72) |= v435;
          *(void *)(a1 + 80 + 8 * *((void *)v433 + 2) + 8) = GTTraceFunc_argumentBytesWithMap(a2, v433[24], a3);
          *(void *)(a1 + 80 + 8 * (int)(*((void *)v433 + 2) >> 6)) &= ~(1 << *((void *)v433 + 2));
          *(void *)(a1 + 80 + 8 * *((void *)v433 + 2) + 256) = *((void *)v433 + 1);
          return;
        case -16226:
          uint64_t v437 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v437 + 2) + 336) = *((void *)v437 + 1);
          return;
        case -16225:
          int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v438 = *((void *)v163 + 2);
          uint64_t v439 = 1 << v438;
          uint64_t v440 = a1 + 56 + 8 * (int)(v438 >> 6);
          *(void *)(v440 + 8) |= v439;
          uint64_t v441 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 80;
          *(void *)(a1 + 80 + 8 * *((void *)v163 + 2)) = v441;
          unint64_t v442 = *((void *)v163 + 2);
          uint64_t v443 = 1 << v442;
          uint64_t v444 = a1 + 56 + 8 * (int)(v442 >> 6);
          *(void *)(v444 + 16) &= ~v443;
          goto LABEL_446;
        case -16224:
          int64x2_t v445 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v445 + 2) + 328) = *((void *)v445 + 1);
          return;
        case -16223:
          int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v446 = *((void *)v163 + 2);
          uint64_t v447 = 1 << v446;
          uint64_t v448 = a1 + 8 * (int)(v446 >> 6);
          *(void *)(v448 + 1976) |= v447;
          int v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 1984;
          goto LABEL_445;
        case -16222:
          long long v449 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v449 + 2) + 2232) = *((void *)v449 + 1);
          return;
        case -16219:
          uint64_t v450 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10084) = *((_DWORD *)v450 + 2);
          *(_DWORD *)(a1 + 10088) = *((_DWORD *)v450 + 3);
          return;
        case -16214:
          uint64_t v451 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v451 + 2) + 2424) = *((void *)v451 + 1);
          *(void *)(a1 + 56 + 8 * *((void *)v451 + 4) + 3448) = *((void *)v451 + 3);
          return;
        default:
          if (v7 == -16384) {
            goto LABEL_54;
          }
          if (v7 != -16376) {
            return;
          }
          goto LABEL_65;
      }
    }
    switch(v7)
    {
      case -16162:
        unint64_t v19 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v19 + 2) + 64) = *((void *)v19 + 1);
        break;
      case -16161:
        *(unsigned char *)(a1 + 192) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16160:
        *(unsigned char *)(a1 + 193) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16159:
        uint64_t v503 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v503 + 2) + 9928) = *((void *)v503 + 1);
        break;
      case -16158:
        *(unsigned char *)(a1 + 11142) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16157:
        *(unsigned char *)(a1 + 11143) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16156:
      case -16155:
      case -16154:
      case -16153:
      case -16152:
      case -16151:
      case -16150:
      case -16147:
      case -16146:
      case -16145:
      case -16144:
      case -16137:
      case -16136:
      case -16135:
      case -16134:
      case -16133:
        return;
      case -16149:
        v504 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_DWORD *)(a1 + 2164) = *((void *)v504 + 1);
        *(_DWORD *)(a1 + 2168) = *((void *)v504 + 2);
        break;
      case -16148:
        uint64_t v505 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 9920) = *((void *)v505 + 1);
        *(_DWORD *)(a1 + 10744) = *((void *)v505 + 2);
        *(_DWORD *)(a1 + 10748) = *((void *)v505 + 3);
        break;
      case -16143:
        int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        unint64_t v506 = *((void *)v163 + 2);
        uint64_t v507 = 1 << v506;
        uint64_t v508 = a1 + 8 * (int)(v506 >> 6);
        *(void *)(v508 + 6944) |= v507;
        int v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
        uint64_t v168 = 6952;
LABEL_444:
        uint64_t v214 = a1 + v168;
LABEL_445:
        *(void *)(v214 + 8 * *((void *)v163 + 2)) = v167;
LABEL_446:
        *(void *)(v214 + 8 * *((void *)v163 + 2) + 248) = *((void *)v163 + 1);
        break;
      case -16142:
        uint64_t v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        unint64_t v509 = *((void *)v144 + 3);
        uint64_t v510 = 1 << v509;
        uint64_t v511 = a1 + 8 * (int)(v509 >> 6);
        *(void *)(v511 + 6944) &= ~v510;
        uint64_t v148 = *((void *)v144 + 1);
        uint64_t v149 = 6952;
LABEL_448:
        uint64_t v198 = a1 + v149;
LABEL_449:
        *(void *)(v198 + 8 * *((void *)v144 + 3)) = v148;
        uint64_t v326 = *((void *)v144 + 2);
        uint64_t v327 = v198 + 8 * *((void *)v144 + 3);
LABEL_450:
        *(void *)(v327 + 248) = v326;
        break;
      case -16141:
        uint64_t v512 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v512 + 2) + 7200) = *((void *)v512 + 1);
        break;
      case -16140:
        v513 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v513 + 2) + 7448) = *((void *)v513 + 1);
        break;
      case -16139:
        uint64_t v514 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v514 + 2) + 8472) = *((void *)v514 + 1);
        break;
      case -16138:
        v515 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 56 + 8 * *((void *)v515 + 2) + 8416) = *((void *)v515 + 1);
        *(_DWORD *)(a1 + 56 + 4 * *((void *)v515 + 2) + 10548) = *((_DWORD *)v515 + 6);
        *(_DWORD *)(a1 + 56 + 4 * *((void *)v515 + 2) + 10612) = *((_DWORD *)v515 + 7);
        break;
      case -16132:
        *(_DWORD *)(a1 + 10732) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 2);
        break;
      default:
        if (v7 == -16100)
        {
          uint64_t v57 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v58 = *((void *)v57 + 3);
          *(_OWORD *)(a1 + 1984) = *(_OWORD *)(v57 + 8);
          *(void *)(a1 + 2000) = v58;
          uint64_t v59 = *((void *)v57 + 6);
          *(_OWORD *)(a1 + 2008) = *((_OWORD *)v57 + 2);
          *(void *)(a1 + 2024) = v59;
        }
        break;
    }
  }
  else
  {
    if (v7 > -15460)
    {
      switch(v7)
      {
        case -15459:
        case -15458:
        case -15456:
          long long v8 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v9 = *((void *)v8 + 2);
          uint64_t v10 = 1 << v9;
          uint64_t v11 = a1 + 56 + 8 * (int)(v9 >> 6);
          *(void *)(v11 + 1920) &= ~v10;
          *(void *)(a1 + 56 + 8 * *((void *)v8 + 2) + 1928) = *((void *)v8 + 1);
          break;
        case -15457:
          uint64_t v60 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v61 = v60;
          unint64_t v62 = *((void *)v60 + 1);
          unint64_t v63 = *((void *)v60 + 2) + v62;
          if (v63 >= 0x40) {
            unint64_t v63 = 64;
          }
          char v64 = v63 - v62;
          if (v63 < v62) {
            char v64 = 0;
          }
          uint64_t v65 = ~(-1 << v64);
          if (v62 <= v63) {
            char v66 = v62 & 0x3F;
          }
          else {
            char v66 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v65 << v66);
          uint64_t v67 = *((void *)v60 + 1);
          int v68 = GTTraceFunc_argumentBytesWithMap(a2, v60[24], a3);
          if ((int)*((void *)v61 + 2) >= 1)
          {
            unint64_t v69 = (void *)(a1 + 8 * v67 + 1984);
            uint64_t v70 = *((void *)v61 + 2);
            do
            {
              uint64_t v71 = *(void *)v68;
              v68 += 8;
              *v69++ = v71;
              --v70;
            }
            while (v70);
          }
          break;
        case -15455:
          uint64_t v72 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          long long v73 = v72;
          unint64_t v74 = *((void *)v72 + 1);
          unint64_t v75 = *((void *)v72 + 2) + v74;
          if (v75 >= 0x40) {
            unint64_t v75 = 64;
          }
          char v76 = v75 - v74;
          if (v75 < v74) {
            char v76 = 0;
          }
          uint64_t v77 = ~(-1 << v76);
          if (v74 <= v75) {
            char v78 = v74 & 0x3F;
          }
          else {
            char v78 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v77 << v78);
          uint64_t v79 = *((void *)v72 + 1);
          unint64_t v80 = GTTraceFunc_argumentBytesWithMap(a2, v72[24], a3);
          if ((int)*((void *)v73 + 2) >= 1)
          {
            uint64_t v81 = (void *)(a1 + 8 * v79 + 1984);
            uint64_t v82 = *((void *)v73 + 2);
            do
            {
              uint64_t v83 = *(void *)v80;
              v80 += 8;
              *v81++ = v83;
              --v82;
            }
            while (v82);
          }
          break;
        case -15454:
        case -15453:
        case -15451:
          int v40 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v41 = *((void *)v40 + 2);
          uint64_t v42 = 1 << v41;
          uint64_t v43 = a1 + 56 + 8 * (int)(v41 >> 6);
          *(void *)(v43 + 6888) &= ~v42;
          *(void *)(a1 + 56 + 8 * *((void *)v40 + 2) + 6896) = *((void *)v40 + 1);
          break;
        case -15452:
          unint64_t v84 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v85 = v84;
          unint64_t v86 = *((void *)v84 + 1);
          unint64_t v87 = *((void *)v84 + 2) + v86;
          if (v87 >= 0x40) {
            unint64_t v87 = 64;
          }
          char v88 = v87 - v86;
          if (v87 < v86) {
            char v88 = 0;
          }
          uint64_t v89 = ~(-1 << v88);
          if (v86 <= v87) {
            char v90 = v86 & 0x3F;
          }
          else {
            char v90 = 0;
          }
          *(void *)(a1 + 6944) &= ~(v89 << v90);
          uint64_t v91 = *((void *)v84 + 1);
          unint64_t v92 = GTTraceFunc_argumentBytesWithMap(a2, v84[24], a3);
          if ((int)*((void *)v85 + 2) >= 1)
          {
            uint64_t v93 = (void *)(a1 + 8 * v91 + 6952);
            uint64_t v94 = *((void *)v85 + 2);
            do
            {
              uint64_t v95 = *(void *)v92;
              v92 += 8;
              *v93++ = v95;
              --v94;
            }
            while (v94);
          }
          break;
        case -15450:
          char v96 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v97 = v96;
          unint64_t v98 = *((void *)v96 + 1);
          unint64_t v99 = *((void *)v96 + 2) + v98;
          if (v99 >= 0x40) {
            unint64_t v99 = 64;
          }
          char v100 = v99 - v98;
          if (v99 < v98) {
            char v100 = 0;
          }
          uint64_t v101 = ~(-1 << v100);
          if (v98 <= v99) {
            char v102 = v98 & 0x3F;
          }
          else {
            char v102 = 0;
          }
          *(void *)(a1 + 6944) &= ~(v101 << v102);
          uint64_t v103 = *((void *)v96 + 1);
          unsigned int v104 = GTTraceFunc_argumentBytesWithMap(a2, v96[24], a3);
          if ((int)*((void *)v97 + 2) >= 1)
          {
            char v105 = (void *)(a1 + 8 * v103 + 6952);
            uint64_t v106 = *((void *)v97 + 2);
            do
            {
              uint64_t v107 = *(void *)v104;
              v104 += 8;
              *v105++ = v107;
              --v106;
            }
            while (v106);
          }
          break;
        case -15449:
        case -15448:
        case -15446:
          int v44 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v45 = *((void *)v44 + 2);
          uint64_t v46 = 1 << v45;
          uint64_t v47 = a1 + 56 + 8 * (int)(v45 >> 6);
          *(void *)(v47 + 8) &= ~v46;
          *(void *)(a1 + 56 + 8 * *((void *)v44 + 2) + 24) = *((void *)v44 + 1);
          unint64_t v48 = *((void *)v44 + 2);
          uint64_t v49 = 1 << v48;
          uint64_t v50 = a1 + 56 + 8 * (int)(v48 >> 6);
          *(void *)(v50 + 16) &= ~v49;
          break;
        case -15447:
          uint64_t v108 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v109 = v108;
          unint64_t v110 = *((void *)v108 + 1);
          unint64_t v111 = *((void *)v108 + 2) + v110;
          if (v111 >= 0x40) {
            unint64_t v111 = 64;
          }
          char v112 = v111 - v110;
          if (v111 < v110) {
            char v112 = 0;
          }
          uint64_t v113 = ~(-1 << v112);
          if (v110 <= v111) {
            char v114 = v110 & 0x3F;
          }
          else {
            char v114 = 0;
          }
          uint64_t v115 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v113 << v114);
          unint64_t v116 = *((void *)v108 + 1);
          unint64_t v117 = *((void *)v108 + 2) + v116;
          if (v117 >= 0x40) {
            unint64_t v117 = 64;
          }
          char v118 = v117 - v116;
          if (v117 < v116) {
            char v118 = 0;
          }
          uint64_t v119 = ~(-1 << v118);
          if (v116 <= v117) {
            char v120 = v116 & 0x3F;
          }
          else {
            char v120 = 0;
          }
          *(void *)(a1 + 72) = v115 & ~(v119 << v120);
          uint64_t v121 = *((void *)v108 + 1);
          int32x2_t v122 = GTTraceFunc_argumentBytesWithMap(a2, v108[24], a3);
          if ((int)*((void *)v109 + 2) >= 1)
          {
            uint64_t v123 = (void *)(a1 + 8 * v121 + 80);
            uint64_t v124 = *((void *)v109 + 2);
            do
            {
              uint64_t v125 = *(void *)v122;
              v122 += 8;
              *v123++ = v125;
              --v124;
            }
            while (v124);
          }
          break;
        case -15445:
          unsigned int v126 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          char v127 = v126;
          unint64_t v128 = *((void *)v126 + 1);
          unint64_t v129 = *((void *)v126 + 2) + v128;
          if (v129 >= 0x40) {
            unint64_t v129 = 64;
          }
          char v130 = v129 - v128;
          if (v129 < v128) {
            char v130 = 0;
          }
          uint64_t v131 = ~(-1 << v130);
          if (v128 <= v129) {
            char v132 = v128 & 0x3F;
          }
          else {
            char v132 = 0;
          }
          uint64_t v133 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v131 << v132);
          unint64_t v134 = *((void *)v126 + 1);
          unint64_t v135 = *((void *)v126 + 2) + v134;
          if (v135 >= 0x40) {
            unint64_t v135 = 64;
          }
          char v136 = v135 - v134;
          if (v135 < v134) {
            char v136 = 0;
          }
          uint64_t v137 = ~(-1 << v136);
          if (v134 <= v135) {
            char v138 = v134 & 0x3F;
          }
          else {
            char v138 = 0;
          }
          *(void *)(a1 + 72) = v133 & ~(v137 << v138);
          uint64_t v139 = *((void *)v126 + 1);
          unint64_t v140 = GTTraceFunc_argumentBytesWithMap(a2, v126[24], a3);
          if ((int)*((void *)v127 + 2) >= 1)
          {
            int v141 = (void *)(a1 + 8 * v139 + 80);
            uint64_t v142 = *((void *)v127 + 2);
            do
            {
              uint64_t v143 = *(void *)v140;
              v140 += 8;
              *v141++ = v143;
              --v142;
            }
            while (v142);
          }
          break;
        case -15444:
        case -15443:
        case -15442:
        case -15441:
        case -15440:
        case -15439:
        case -15438:
        case -15437:
        case -15436:
        case -15435:
        case -15434:
        case -15433:
        case -15432:
        case -15431:
        case -15430:
        case -15429:
        case -15428:
        case -15427:
        case -15426:
        case -15425:
        case -15424:
        case -15423:
        case -15422:
        case -15421:
        case -15420:
        case -15419:
        case -15418:
        case -15417:
        case -15416:
        case -15415:
        case -15414:
        case -15413:
        case -15412:
        case -15411:
        case -15410:
        case -15409:
        case -15408:
        case -15407:
        case -15406:
        case -15405:
        case -15404:
        case -15403:
        case -15402:
          return;
        case -15401:
          uint64_t v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v145 = *((void *)v144 + 3);
          uint64_t v146 = 1 << v145;
          uint64_t v147 = a1 + 8 * (int)(v145 >> 6);
          *(void *)(v147 + 5288) &= ~v146;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v149 = 5296;
          goto LABEL_448;
        case -15400:
          size_t v150 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v150 + 2) + 5544) = *((void *)v150 + 1);
          break;
        case -15399:
          uint64_t v151 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v151;
          unint64_t v152 = *((void *)v151 + 1);
          unint64_t v153 = *((void *)v151 + 2) + v152;
          if (v153 >= 0x40) {
            unint64_t v153 = 64;
          }
          char v154 = v153 - v152;
          if (v153 < v152) {
            char v154 = 0;
          }
          uint64_t v155 = ~(-1 << v154);
          if (v152 <= v153) {
            char v156 = v152 & 0x3F;
          }
          else {
            char v156 = 0;
          }
          *(void *)(a1 + 5288) &= ~(v155 << v156);
          uint64_t v157 = *((void *)v151 + 1);
          size_t v158 = GTTraceFunc_argumentBytesWithMap(a2, v151[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            long long v159 = (void *)(a1 + 8 * v157 + 5296);
            uint64_t v160 = *((void *)v27 + 2);
            do
            {
              uint64_t v161 = *(void *)v158;
              v158 += 8;
              *v159++ = v161;
              --v160;
            }
            while (v160);
          }
          uint64_t v38 = a1 + 8 * *((void *)v27 + 1);
          uint64_t v39 = 5544;
          goto LABEL_164;
        case -15398:
          int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v164 = *((void *)v163 + 2);
          uint64_t v165 = 1 << v164;
          uint64_t v166 = a1 + 8 * (int)(v164 >> 6);
          *(void *)(v166 + 5288) |= v165;
          int v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v168 = 5296;
          goto LABEL_444;
        case -15397:
          long long v169 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v169 + 2) + 6816) = *((void *)v169 + 1);
          break;
        case -15396:
          int v170 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v170 + 2) + 6760) = *((void *)v170 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v170 + 2) + 10420) = *((_DWORD *)v170 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v170 + 2) + 10484) = *((_DWORD *)v170 + 7);
          break;
        case -15395:
          int v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v172 = *((void *)v171 + 1);
          unsigned int v173 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v174 = (void *)(a1 + 8 * v172 + 6816);
            uint64_t v175 = *((void *)v171 + 2);
            do
            {
              uint64_t v176 = *(void *)v173;
              v173 += 8;
              *v174++ = v176;
              --v175;
            }
            while (v175);
          }
          uint64_t v177 = a1 + 56;
          char v178 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10420);
          long long v179 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v178, v179, 4 * *((void *)v171 + 2));
          uint64_t v180 = v177 + 4 * *((void *)v171 + 1);
          uint64_t v181 = 10484;
          goto LABEL_513;
        case -15394:
          char v182 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v183 = *((void *)v182 + 1);
          uint64_t v184 = GTTraceFunc_argumentBytesWithMap(a2, v182[24], a3);
          if ((int)*((void *)v182 + 2) >= 1)
          {
            int v185 = (void *)(a1 + 8 * v183 + 6816);
            uint64_t v186 = *((void *)v182 + 2);
            do
            {
              uint64_t v187 = *(void *)v184;
              v184 += 8;
              *v185++ = v187;
              --v186;
            }
            while (v186);
          }
          break;
        case -15393:
          int v188 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v188 + 2) + 5792) = *((void *)v188 + 1);
          break;
        case -15392:
          uint64_t v189 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v190 = *((void *)v189 + 1);
          id v191 = GTTraceFunc_argumentBytesWithMap(a2, v189[24], a3);
          if ((int)*((void *)v189 + 2) >= 1)
          {
            unint64_t v192 = (void *)(a1 + 8 * v190 + 5792);
            uint64_t v193 = *((void *)v189 + 2);
            do
            {
              uint64_t v194 = *(void *)v191;
              v191 += 8;
              *v192++ = v194;
              --v193;
            }
            while (v193);
          }
          break;
        case -15391:
          uint64_t v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v195 = *((void *)v144 + 3);
          uint64_t v196 = 1 << v195;
          uint64_t v197 = a1 + 8 * (int)(v195 >> 6);
          *(void *)(v197 + 3632) &= ~v196;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v198 = a1 + 3640;
          goto LABEL_449;
        case -15390:
          va_list v199 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v199 + 2) + 3888) = *((void *)v199 + 1);
          break;
        case -15389:
          long long v200 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v200;
          unint64_t v201 = *((void *)v200 + 1);
          unint64_t v202 = *((void *)v200 + 2) + v201;
          if (v202 >= 0x40) {
            unint64_t v202 = 64;
          }
          char v203 = v202 - v201;
          if (v202 < v201) {
            char v203 = 0;
          }
          uint64_t v204 = ~(-1 << v203);
          if (v201 <= v202) {
            char v205 = v201 & 0x3F;
          }
          else {
            char v205 = 0;
          }
          *(void *)(a1 + 3632) &= ~(v204 << v205);
          uint64_t v206 = *((void *)v200 + 1);
          uint64_t v207 = GTTraceFunc_argumentBytesWithMap(a2, v200[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            char v208 = (void *)(a1 + 8 * v206 + 3640);
            uint64_t v209 = *((void *)v27 + 2);
            do
            {
              uint64_t v210 = *(void *)v207;
              v207 += 8;
              *v208++ = v210;
              --v209;
            }
            while (v209);
          }
          uint64_t v162 = a1 + 8 * *((void *)v27 + 1) + 3888;
          goto LABEL_354;
        case -15388:
          int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v211 = *((void *)v163 + 2);
          uint64_t v212 = 1 << v211;
          uint64_t v213 = a1 + 8 * (int)(v211 >> 6);
          *(void *)(v213 + 3632) |= v212;
          int v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 3640;
          goto LABEL_445;
        case -15387:
          unsigned __int8 v215 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v215 + 2) + 5160) = *((void *)v215 + 1);
          break;
        case -15386:
          __int16 v216 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v216 + 2) + 5104) = *((void *)v216 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v216 + 2) + 10292) = *((_DWORD *)v216 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v216 + 2) + 10356) = *((_DWORD *)v216 + 7);
          break;
        case -15385:
          int v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v217 = *((void *)v171 + 1);
          char v218 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            char v219 = (void *)(a1 + 8 * v217 + 5160);
            uint64_t v220 = *((void *)v171 + 2);
            do
            {
              uint64_t v221 = *(void *)v218;
              v218 += 8;
              *v219++ = v221;
              --v220;
            }
            while (v220);
          }
          uint64_t v222 = a1 + 56;
          long long v223 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10292);
          long long v224 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v223, v224, 4 * *((void *)v171 + 2));
          uint64_t v180 = v222 + 4 * *((void *)v171 + 1);
          uint64_t v181 = 10356;
          goto LABEL_513;
        case -15384:
          long long v225 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v226 = *((void *)v225 + 1);
          long long v227 = GTTraceFunc_argumentBytesWithMap(a2, v225[24], a3);
          if ((int)*((void *)v225 + 2) >= 1)
          {
            long long v228 = (void *)(a1 + 8 * v226 + 5160);
            uint64_t v229 = *((void *)v225 + 2);
            do
            {
              uint64_t v230 = *(void *)v227;
              v227 += 8;
              *v228++ = v230;
              --v229;
            }
            while (v229);
          }
          break;
        case -15383:
          long long v231 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v231 + 2) + 4136) = *((void *)v231 + 1);
          break;
        case -15382:
          long long v232 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v233 = *((void *)v232 + 1);
          long long v234 = GTTraceFunc_argumentBytesWithMap(a2, v232[24], a3);
          if ((int)*((void *)v232 + 2) >= 1)
          {
            long long v235 = (void *)(a1 + 8 * v233 + 4136);
            uint64_t v236 = *((void *)v232 + 2);
            do
            {
              uint64_t v237 = *(void *)v234;
              v234 += 8;
              *v235++ = v237;
              --v236;
            }
            while (v236);
          }
          break;
        case -15381:
          long long v238 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 4 * *((void *)v238 + 2) + 11000) = *((void *)v238 + 1);
          break;
        default:
          switch(v7)
          {
            case -15284:
              uint64_t v20 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v21 = *((void *)v20 + 4);
              uint64_t v22 = 1 << v21;
              uint64_t v23 = a1 + 56 + 8 * (int)(v21 >> 6);
              *(void *)(v23 + 16) &= ~v22;
              *(void *)(a1 + 80 + 8 * *((void *)v20 + 4) + 8) = *((void *)v20 + 1);
              *(void *)(a1 + 80 + 8 * (int)(*((void *)v20 + 4) >> 6)) |= 1 << *((void *)v20 + 4);
              *(void *)(a1 + 80 + 8 * *((void *)v20 + 4) + 256) = *((void *)v20 + 2);
              uint64_t v24 = *((void *)v20 + 3);
              uint64_t v25 = a1 + 56 + 8 * *((void *)v20 + 4);
              goto LABEL_476;
            case -15283:
              uint64_t v516 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(void *)(a1 + 56 + 8 * *((void *)v516 + 3) + 280) = *((void *)v516 + 1);
              uint64_t v24 = *((void *)v516 + 2);
              uint64_t v25 = a1 + 56 + 8 * *((void *)v516 + 3);
              goto LABEL_476;
            case -15282:
              uint64_t v517 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v27 = v517;
              unint64_t v518 = *((void *)v517 + 1);
              unint64_t v519 = *((void *)v517 + 2) + v518;
              unint64_t v520 = 64;
              if (v519 >= 0x40) {
                unint64_t v519 = 64;
              }
              char v521 = v519 - v518;
              if (v519 < v518) {
                char v521 = 0;
              }
              uint64_t v522 = ~(-1 << v521);
              if (v518 <= v519) {
                char v523 = v518 & 0x3F;
              }
              else {
                char v523 = 0;
              }
              uint64_t v525 = (uint64_t *)(a1 + 80);
              uint64_t v524 = *(void *)(a1 + 80);
              *(void *)(a1 + 72) &= ~(v522 << v523);
              unint64_t v526 = *((void *)v517 + 1);
              if (*((void *)v517 + 2) + v526 < 0x40) {
                unint64_t v520 = *((void *)v517 + 2) + v526;
              }
              char v527 = v520 - v526;
              if (v520 < v526) {
                char v527 = 0;
              }
              uint64_t v528 = ~(-1 << v527);
              if (v526 <= v520) {
                char v529 = v526 & 0x3F;
              }
              else {
                char v529 = 0;
              }
              *uint64_t v525 = (v528 << v529) | v524;
              uint64_t v530 = *((void *)v517 + 1);
              v531 = GTTraceFunc_argumentBytesWithMap(a2, v517[24], a3);
              if ((int)*((void *)v27 + 2) >= 1)
              {
                v532 = &v525[v530 + 1];
                uint64_t v533 = *((void *)v27 + 2);
                do
                {
                  uint64_t v534 = *(void *)v531;
                  v531 += 8;
                  *v532++ = v534;
                  --v533;
                }
                while (v533);
              }
              uint64_t v535 = a1 + 56;
              v536 = (void *)(a1 + 56 + 8 * *((void *)v27 + 1) + 280);
              v537 = GTTraceFunc_argumentBytesWithMap(a2, v27[25], a3);
              memcpy(v536, v537, 8 * *((void *)v27 + 2));
              uint64_t v162 = v535 + 8 * *((void *)v27 + 1) + 528;
              goto LABEL_497;
            case -15281:
              v538 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v539 = *((void *)v538 + 3);
              uint64_t v540 = 1 << v539;
              uint64_t v541 = a1 + 56 + 8 * (int)(v539 >> 6);
              *(void *)(v541 + 16) |= v540;
              *(void *)(a1 + 80 + 8 * *((void *)v538 + 3) + 8) = GTTraceFunc_argumentBytesWithMap(a2, v538[32], a3);
              *(void *)(a1 + 80 + 8 * (int)(*((void *)v538 + 3) >> 6)) |= 1 << *((void *)v538 + 3);
              *(void *)(a1 + 80 + 8 * *((void *)v538 + 3) + 256) = *((void *)v538 + 1);
              uint64_t v24 = *((void *)v538 + 2);
              uint64_t v25 = a1 + 56 + 8 * *((void *)v538 + 3);
LABEL_476:
              *(void *)(v25 + 528) = v24;
              return;
            case -15280:
            case -15279:
            case -15278:
            case -15277:
            case -15276:
              return;
            case -15275:
              v542 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v543 = *((void *)v542 + 4);
              uint64_t v544 = 1 << v543;
              uint64_t v545 = a1 + 56 + 8 * (int)(v543 >> 6);
              *(void *)(v545 + 8) &= ~v544;
              *(void *)(a1 + 80 + 8 * *((void *)v542 + 4)) = *((void *)v542 + 1);
              unint64_t v546 = *((void *)v542 + 4);
              uint64_t v547 = 1 << v546;
              uint64_t v548 = a1 + 56 + 8 * (int)(v546 >> 6);
              *(void *)(v548 + 16) |= v547;
              *(void *)(a1 + 80 + 8 * *((void *)v542 + 4) + 248) = *((void *)v542 + 2);
              uint64_t v549 = *((void *)v542 + 3);
              uint64_t v550 = a1 + 56 + 8 * *((void *)v542 + 4);
              goto LABEL_500;
            case -15274:
              v551 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(void *)(a1 + 56 + 8 * *((void *)v551 + 3) + 272) = *((void *)v551 + 1);
              uint64_t v549 = *((void *)v551 + 2);
              uint64_t v550 = a1 + 56 + 8 * *((void *)v551 + 3);
              goto LABEL_500;
            case -15273:
              v552 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v27 = v552;
              unint64_t v553 = *((void *)v552 + 1);
              unint64_t v554 = *((void *)v552 + 2) + v553;
              if (v554 >= 0x40) {
                unint64_t v554 = 64;
              }
              char v555 = v554 - v553;
              if (v554 < v553) {
                char v555 = 0;
              }
              uint64_t v556 = ~(-1 << v555);
              if (v553 <= v554) {
                char v557 = v553 & 0x3F;
              }
              else {
                char v557 = 0;
              }
              uint64_t v558 = *(void *)(a1 + 72);
              *(void *)(a1 + 64) &= ~(v556 << v557);
              unint64_t v559 = *((void *)v552 + 1);
              unint64_t v560 = *((void *)v552 + 2) + v559;
              if (v560 >= 0x40) {
                unint64_t v560 = 64;
              }
              char v561 = v560 - v559;
              if (v560 < v559) {
                char v561 = 0;
              }
              uint64_t v562 = ~(-1 << v561);
              if (v559 <= v560) {
                char v563 = v559 & 0x3F;
              }
              else {
                char v563 = 0;
              }
              *(void *)(a1 + 72) = (v562 << v563) | v558;
              uint64_t v564 = *((void *)v552 + 1);
              v565 = GTTraceFunc_argumentBytesWithMap(a2, v552[24], a3);
              if ((int)*((void *)v27 + 2) >= 1)
              {
                v566 = (void *)(a1 + 8 * v564 + 80);
                uint64_t v567 = *((void *)v27 + 2);
                do
                {
                  uint64_t v568 = *(void *)v565;
                  v565 += 8;
                  *v566++ = v568;
                  --v567;
                }
                while (v567);
              }
              uint64_t v569 = a1 + 56;
              v570 = (void *)(a1 + 56 + 8 * *((void *)v27 + 1) + 272);
              v571 = GTTraceFunc_argumentBytesWithMap(a2, v27[25], a3);
              memcpy(v570, v571, 8 * *((void *)v27 + 2));
              uint64_t v162 = v569 + 8 * *((void *)v27 + 1) + 520;
LABEL_497:
              unsigned int v406 = v27[26];
              goto LABEL_498;
            case -15272:
              v574 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v575 = *((void *)v574 + 3);
              uint64_t v576 = 1 << v575;
              uint64_t v577 = a1 + 56 + 8 * (int)(v575 >> 6);
              *(void *)(v577 + 8) |= v576;
              *(void *)(a1 + 80 + 8 * *((void *)v574 + 3)) = GTTraceFunc_argumentBytesWithMap(a2, v574[32], a3);
              unint64_t v578 = *((void *)v574 + 3);
              uint64_t v579 = 1 << v578;
              uint64_t v580 = a1 + 56 + 8 * (int)(v578 >> 6);
              *(void *)(v580 + 16) |= v579;
              *(void *)(a1 + 80 + 8 * *((void *)v574 + 3) + 248) = *((void *)v574 + 1);
              uint64_t v549 = *((void *)v574 + 2);
              uint64_t v550 = a1 + 56 + 8 * *((void *)v574 + 3);
LABEL_500:
              *(void *)(v550 + 520) = v549;
              return;
            default:
              if (v7 != -15364) {
                return;
              }
              unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 17;
              break;
          }
          goto LABEL_387;
      }
      return;
    }
    if (v7 <= -15891)
    {
      if (v7 <= -16029)
      {
        switch(v7)
        {
          case -16087:
            long long v26 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v27 = v26;
            unint64_t v28 = *((void *)v26 + 1);
            unint64_t v29 = *((void *)v26 + 2) + v28;
            if (v29 >= 0x40) {
              unint64_t v29 = 64;
            }
            char v30 = v29 - v28;
            if (v29 < v28) {
              char v30 = 0;
            }
            uint64_t v31 = ~(-1 << v30);
            if (v28 <= v29) {
              char v32 = v28 & 0x3F;
            }
            else {
              char v32 = 0;
            }
            *(void *)(a1 + 6944) &= ~(v31 << v32);
            uint64_t v33 = *((void *)v26 + 1);
            int v34 = GTTraceFunc_argumentBytesWithMap(a2, v26[24], a3);
            if ((int)*((void *)v27 + 2) >= 1)
            {
              int v35 = (void *)(a1 + 8 * v33 + 6952);
              uint64_t v36 = *((void *)v27 + 2);
              do
              {
                uint64_t v37 = *(void *)v34;
                v34 += 8;
                *v35++ = v37;
                --v36;
              }
              while (v36);
            }
            uint64_t v38 = a1 + 8 * *((void *)v27 + 1);
            uint64_t v39 = 7200;
LABEL_164:
            uint64_t v162 = v38 + v39;
            goto LABEL_354;
          case -16086:
            v581 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v582 = *((void *)v581 + 1);
            v583 = GTTraceFunc_argumentBytesWithMap(a2, v581[24], a3);
            if ((int)*((void *)v581 + 2) >= 1)
            {
              v584 = (void *)(a1 + 8 * v582 + 7448);
              uint64_t v585 = *((void *)v581 + 2);
              do
              {
                uint64_t v586 = *(void *)v583;
                v583 += 8;
                *v584++ = v586;
                --v585;
              }
              while (v585);
            }
            break;
          case -16085:
            v587 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v588 = *((void *)v587 + 1);
            v589 = GTTraceFunc_argumentBytesWithMap(a2, v587[24], a3);
            if ((int)*((void *)v587 + 2) >= 1)
            {
              v590 = (void *)(a1 + 8 * v588 + 8472);
              uint64_t v591 = *((void *)v587 + 2);
              do
              {
                uint64_t v592 = *(void *)v589;
                v589 += 8;
                *v590++ = v592;
                --v591;
              }
              while (v591);
            }
            break;
          case -16084:
            int v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v593 = *((void *)v171 + 1);
            v594 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
            if ((int)*((void *)v171 + 2) >= 1)
            {
              v595 = (void *)(a1 + 8 * v593 + 8472);
              uint64_t v596 = *((void *)v171 + 2);
              do
              {
                uint64_t v597 = *(void *)v594;
                v594 += 8;
                *v595++ = v597;
                --v596;
              }
              while (v596);
            }
            uint64_t v598 = a1 + 56;
            v599 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10548);
            v600 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
            memcpy(v599, v600, 4 * *((void *)v171 + 2));
            uint64_t v180 = v598 + 4 * *((void *)v171 + 1);
            uint64_t v181 = 10612;
            goto LABEL_513;
          case -16077:
            v602 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8608) = *((void *)v602 + 1);
            v572 = GTTraceFunc_argumentBytesWithMap(a2, v602[16], a3);
            v601 = (void *)(a1 + 8616);
            size_t v573 = 48 * *((void *)v602 + 1);
            goto LABEL_516;
          case -16076:
            v603 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 9384) = *((void *)v603 + 1);
            v572 = GTTraceFunc_argumentBytesWithMap(a2, v603[16], a3);
            v601 = (void *)(a1 + 9392);
            size_t v573 = 32 * *((void *)v603 + 1);
            goto LABEL_516;
          case -16074:
            v604 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_DWORD *)(a1 + 56 + 4 * *((void *)v604 + 3) + 10696) = *((void *)v604 + 1);
            *(_DWORD *)(a1 + 56 + 4 * *((void *)v604 + 3) + 10820) = *((void *)v604 + 2);
            break;
          default:
            return;
        }
      }
      else
      {
        switch(v7)
        {
          case -16028:
            unint64_t v18 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8 * *((void *)v18 + 2) + 128) = *((void *)v18 + 1);
            break;
          case -16027:
            *(unsigned char *)(a1 + 194) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
            break;
          case -16026:
            *(unsigned char *)(a1 + 195) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
            break;
          case -16025:
          case -16024:
          case -16023:
          case -16019:
          case -16018:
          case -16016:
          case -16015:
            return;
          case -16022:
            uint64_t v496 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8 * *((void *)v496 + 2) + 9992) = *((void *)v496 + 1);
            break;
          case -16021:
            *(unsigned char *)(a1 + 11144) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                     + 1);
            break;
          case -16020:
            *(unsigned char *)(a1 + 11145) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                     + 1);
            break;
          case -16017:
            v497 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 2032) = *((void *)v497 + 1);
            *(_DWORD *)(a1 + 2172) = *((void *)v497 + 2);
            break;
          case -16014:
            uint64_t v498 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            bzero((void *)a1, 0x2B90uLL);
            uint64_t v499 = *((void *)v498 + 1);
            if (v499)
            {
              *(_DWORD *)a1 = 28;
              uint64_t v500 = *a2;
              *(void *)(a1 + 8) = v499;
              *(void *)(a1 + 16) = v500;
              *(void *)(a1 + 24) = -1;
              *(void *)(a1 + 40) = *(void *)v498;
              bzero((void *)(a1 + 56), 0x888uLL);
              memset_pattern16((void *)(a1 + 2240), &unk_4C80D0, 0x100uLL);
              *(void *)(a1 + 824) = -1;
              *(void *)&long long v501 = -1;
              *((void *)&v501 + 1) = -1;
              *(_OWORD *)(a1 + 792) = v501;
              *(_OWORD *)(a1 + 808) = v501;
              *(_OWORD *)(a1 + 760) = v501;
              *(_OWORD *)(a1 + 776) = v501;
              *(_OWORD *)(a1 + 728) = v501;
              *(_OWORD *)(a1 + 744) = v501;
              *(_OWORD *)(a1 + 696) = v501;
              *(_OWORD *)(a1 + 712) = v501;
              *(_OWORD *)(a1 + 664) = v501;
              *(_OWORD *)(a1 + 680) = v501;
              *(_OWORD *)(a1 + 632) = v501;
              *(_OWORD *)(a1 + 648) = v501;
              *(_OWORD *)(a1 + 600) = v501;
              *(_OWORD *)(a1 + 616) = v501;
              *(_OWORD *)(a1 + 584) = v501;
              *(unsigned char *)(a1 + 2304) = *((void *)v498 + 2);
            }
            break;
          case -16013:
            uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            bzero((void *)a1, 0x2B90uLL);
            uint64_t v13 = *((void *)v12 + 1);
            if (v13)
            {
              int v14 = 82;
              goto LABEL_435;
            }
            break;
          default:
            if (v7 == -15984)
            {
              v605 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(unsigned char *)(v6 + 2530) = *((_DWORD *)v605 + 4);
              *(_DWORD *)(a1 + 10740) = *((void *)v605 + 1);
            }
            else if (v7 == -15970)
            {
              *(unsigned char *)(a1 + 11146) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)+ 2);
            }
            break;
        }
      }
    }
    else
    {
      if (v7 > -15649)
      {
        if (v7 > -15588)
        {
          switch(v7)
          {
            case -15587:
              unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 21;
              goto LABEL_387;
            case -15586:
              unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v452 = *((void *)v15 + 1);
              if (!v452) {
                return;
              }
              *(_DWORD *)a1 = 28;
              uint64_t v453 = *a2;
              *(void *)(a1 + 8) = v452;
              *(void *)(a1 + 16) = v453;
              *(void *)(a1 + 24) = -1;
              *(void *)(a1 + 40) = *(void *)v15;
              bzero((void *)(a1 + 56), 0x888uLL);
              memset_pattern16((void *)(a1 + 2240), &unk_4C80D0, 0x100uLL);
              *(void *)(a1 + 824) = -1;
              *(void *)&long long v454 = -1;
              *((void *)&v454 + 1) = -1;
              *(_OWORD *)(a1 + 792) = v454;
              *(_OWORD *)(a1 + 808) = v454;
              *(_OWORD *)(a1 + 760) = v454;
              *(_OWORD *)(a1 + 776) = v454;
              *(_OWORD *)(a1 + 728) = v454;
              *(_OWORD *)(a1 + 744) = v454;
              *(_OWORD *)(a1 + 696) = v454;
              *(_OWORD *)(a1 + 712) = v454;
              *(_OWORD *)(a1 + 664) = v454;
              *(_OWORD *)(a1 + 680) = v454;
              *(_OWORD *)(a1 + 632) = v454;
              *(_OWORD *)(a1 + 648) = v454;
              *(_OWORD *)(a1 + 600) = v454;
              *(_OWORD *)(a1 + 616) = v454;
              *(_OWORD *)(a1 + 584) = v454;
              *(unsigned char *)(a1 + 2304) = -1;
              goto LABEL_388;
            case -15585:
              unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 74;
LABEL_387:
              *(_DWORD *)a1 = v17;
              uint64_t v455 = *a2;
              *(void *)(a1 + 8) = v16;
              *(void *)(a1 + 16) = v455;
              *(void *)(a1 + 24) = -1;
              *(void *)(a1 + 40) = *(void *)v15;
LABEL_388:
              *(void *)(a1 + 56) = GTTraceFunc_argumentBytesWithMap(a2, v15[16], a3);
              break;
            case -15583:
            case -15581:
              goto LABEL_50;
            case -15582:
              v456 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v457 = v456;
              unint64_t v458 = *((void *)v456 + 1);
              unint64_t v459 = *((void *)v456 + 2) + v458;
              unint64_t v460 = 64;
              if (v459 >= 0x40) {
                unint64_t v459 = 64;
              }
              char v461 = v459 - v458;
              if (v459 < v458) {
                char v461 = 0;
              }
              uint64_t v462 = ~(-1 << v461);
              if (v458 <= v459) {
                char v463 = v458 & 0x3F;
              }
              else {
                char v463 = 0;
              }
              uint64_t v466 = *(void *)(a1 + 80);
              long long v465 = (uint64_t *)(a1 + 80);
              uint64_t v464 = v466;
              *(v465 - 1) &= ~(v462 << v463);
              unint64_t v467 = *((void *)v456 + 1);
              if (*((void *)v456 + 2) + v467 < 0x40) {
                unint64_t v460 = *((void *)v456 + 2) + v467;
              }
              char v468 = v460 - v467;
              if (v460 < v467) {
                char v468 = 0;
              }
              uint64_t v469 = ~(-1 << v468);
              if (v467 <= v460) {
                char v470 = v467 & 0x3F;
              }
              else {
                char v470 = 0;
              }
              *long long v465 = v464 & ~(v469 << v470);
              uint64_t v471 = *((void *)v456 + 1);
              CFStringRef v472 = GTTraceFunc_argumentBytesWithMap(a2, v456[24], a3);
              if ((int)*((void *)v457 + 2) >= 1)
              {
                uint64_t v473 = &v465[v471 + 1];
                uint64_t v474 = *((void *)v457 + 2);
                do
                {
                  uint64_t v475 = *(void *)v472;
                  v472 += 8;
                  *v473++ = v475;
                  --v474;
                }
                while (v474);
              }
              return;
            case -15580:
              CFStringRef v476 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v477 = v476;
              unint64_t v478 = *((void *)v476 + 1);
              unint64_t v479 = *((void *)v476 + 2) + v478;
              unint64_t v480 = 64;
              if (v479 >= 0x40) {
                unint64_t v479 = 64;
              }
              char v481 = v479 - v478;
              if (v479 < v478) {
                char v481 = 0;
              }
              uint64_t v482 = ~(-1 << v481);
              if (v478 <= v479) {
                char v483 = v478 & 0x3F;
              }
              else {
                char v483 = 0;
              }
              uint64_t v486 = *(void *)(a1 + 80);
              v485 = (uint64_t *)(a1 + 80);
              uint64_t v484 = v486;
              *(v485 - 1) &= ~(v482 << v483);
              unint64_t v487 = *((void *)v476 + 1);
              if (*((void *)v476 + 2) + v487 < 0x40) {
                unint64_t v480 = *((void *)v476 + 2) + v487;
              }
              char v488 = v480 - v487;
              if (v480 < v487) {
                char v488 = 0;
              }
              uint64_t v489 = ~(-1 << v488);
              if (v487 <= v480) {
                char v490 = v487 & 0x3F;
              }
              else {
                char v490 = 0;
              }
              uint64_t *v485 = v484 & ~(v489 << v490);
              uint64_t v491 = *((void *)v476 + 1);
              v492 = GTTraceFunc_argumentBytesWithMap(a2, v476[24], a3);
              if ((int)*((void *)v477 + 2) >= 1)
              {
                v493 = &v485[v491 + 1];
                uint64_t v494 = *((void *)v477 + 2);
                do
                {
                  uint64_t v495 = *(void *)v492;
                  v492 += 8;
                  *v493++ = v495;
                  --v494;
                }
                while (v494);
              }
              return;
            default:
              return;
          }
          return;
        }
        if (v7 != -15648)
        {
          if (v7 != -15642)
          {
            if (v7 == -15623)
            {
LABEL_50:
              int32x2_t v51 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v52 = *((void *)v51 + 2);
              uint64_t v53 = 1 << v52;
              uint64_t v54 = a1 + 8 * (int)(v52 >> 6);
              *(void *)(v54 + 72) &= ~v53;
              *(void *)(a1 + 80 + 8 * *((void *)v51 + 2) + 8) = *((void *)v51 + 1);
              *(void *)(a1 + 80 + 8 * (int)(*((void *)v51 + 2) >> 6)) &= ~(1 << *((void *)v51 + 2));
            }
            return;
          }
LABEL_65:
          *(void *)(a1 + 24) = *a2;
          return;
        }
LABEL_54:
        int v55 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 48) = GTTraceFunc_argumentBytesWithMap(a2, v55[8], a3);
        return;
      }
      if (v7 <= -15823)
      {
        if (v7 > -15885)
        {
          if (v7 == -15884) {
            goto LABEL_65;
          }
          if (v7 != -15870) {
            return;
          }
          uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v13 = *((void *)v12 + 1);
          if (!v13) {
            return;
          }
          int v14 = 74;
          goto LABEL_435;
        }
        if (v7 == -15890) {
          goto LABEL_54;
        }
        if (v7 == -15888) {
          *(void *)(a1 + 56) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        }
      }
      else
      {
        if (v7 > -15795)
        {
          if (v7 == -15794) {
            goto LABEL_54;
          }
          if (v7 == -15789) {
            goto LABEL_65;
          }
          if (v7 != -15673) {
            return;
          }
          uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v13 = *((void *)v12 + 1);
          if (!v13) {
            return;
          }
          int v14 = 17;
LABEL_435:
          *(_DWORD *)a1 = v14;
          uint64_t v502 = *a2;
          *(void *)(a1 + 8) = v13;
          *(void *)(a1 + 16) = v502;
          *(void *)(a1 + 24) = -1;
          *(void *)(a1 + 40) = *(void *)v12;
          return;
        }
        if (v7 == -15822)
        {
          v606 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 11128) = *((void *)v606 + 1);
          *(void *)(a1 + 9912) = GTTraceFunc_argumentBytesWithMap(a2, v606[16], a3);
        }
        else if (v7 == -15812)
        {
          long long v56 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(unsigned char *)(v6 + 2524) = *((void *)v56 + 1);
          *(_DWORD *)(a1 + 11124) = *((void *)v56 + 2);
        }
      }
    }
  }
}