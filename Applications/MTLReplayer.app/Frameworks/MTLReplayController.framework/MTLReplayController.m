uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned char *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void agxps_gpu_create()
{
}

BOOL agxps_gpu_is_valid(uint64_t a1)
{
  return a1 != 0;
}

uint64_t agxps_gpu_invalid_handle()
{
  return 0;
}

uint64_t agxps_gpu_get_gen(unsigned int *a1)
{
  return *a1;
}

uint64_t agxps_gpu_get_variant(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t agxps_gpu_get_rev(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_566C()
{
}

void sub_5684(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_56E0(exception, a1);
}

void sub_56CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_56E0(std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_5714(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_574C();
  }
  return operator new(8 * a2);
}

void sub_574C()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t sub_5780(uint64_t a1)
{
  sub_8240(a1 + 232);
  sub_8240(a1 + 192);
  sub_8318(a1 + 152);
  sub_84A4(a1 + 112);
  sub_852C(a1 + 72);
  sub_8634(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        sub_8700(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_5814(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6 = *a1;
  if (*a1) {
    return v6(a2, a3, a4, a5, a6);
  }
  v6 = a1[1];
  if (v6) {
    return v6(a2, a3, a4, a5, a6);
  }
  else {
    return agxps_gpu_invalid_handle();
  }
}

uint64_t sub_5840(uint64_t result, char *__s1, const char *a3, int a4)
{
  *(_OWORD *)(result + 24) = 0u;
  *(_DWORD *)(result + 16) = a4;
  *(_OWORD *)(result + 40) = 0u;
  *(_DWORD *)(result + 56) = 1065353216;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  if (a4)
  {
    if (__s1)
    {
      strnlen(__s1, 0x4000uLL);
      operator new[]();
    }
    *(void *)result = 0;
    if (a3)
    {
      strnlen(a3, 0x4000uLL);
      operator new[]();
    }
  }
  else
  {
    *(void *)result = __s1;
  }
  *(void *)(result + 8) = a3;
  return result;
}

void sub_5944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void **sub_5964(void **a1)
{
  uint64_t v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  return a1;
}

uint64_t sub_59A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a1) {
      operator delete[]();
    }
    if (*(void *)(a1 + 8)) {
      operator delete[]();
    }
  }
  uint64_t v3 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 24);
  return a1;
}

void __clang_call_terminate(void *a1)
{
}

uint64_t sub_5A3C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v8 = a3 | (a2 << 16);
  v9 = (int *)&v8;
  v6 = sub_B0D0(a1 + 24, &v8, (uint64_t)&unk_4C68ED, &v9);
  v6[3] = a4;
  v6[4] = 0;
  return a1;
}

uint64_t sub_5A9C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0x500000011;
  while (1)
  {
    unint64_t v8 = sub_878C(v8, HIDWORD(v8));
    if (!v9) {
      break;
    }
    if (v9 != 1) {
      sub_8894();
    }
  }
  unint64_t v10 = a2 | (unint64_t)(a3 << 32);
  do
  {
    unsigned int v14 = HIDWORD(v10) | (v10 << 16);
    v15 = (int *)&v14;
    v11 = sub_B0D0(a1 + 24, &v14, (uint64_t)&unk_4C68ED, &v15);
    v11[3] = a4;
    v11[4] = 0;
    unint64_t v10 = sub_878C(v10, HIDWORD(v10));
  }
  while (v12 == 1);
  return a1;
}

uint64_t sub_5B90(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = a2 | (unint64_t)(a3 << 32);
  unint64_t v9 = sub_878C(a4, a5);
  uint64_t v11 = v10;
  do
  {
    if (v11 && v8 == v9) {
      break;
    }
    unsigned int v15 = HIDWORD(v8) | (v8 << 16);
    v16 = (int *)&v15;
    char v12 = sub_B0D0(a1 + 24, &v15, (uint64_t)&unk_4C68ED, &v16);
    v12[3] = a6;
    v12[4] = 0;
    unint64_t v8 = sub_878C(v8, HIDWORD(v8));
  }
  while (v13 == 1);
  return a1;
}

uint64_t *sub_5C60(uint64_t *a1, char *a2)
{
  sub_B01C(__p, a2);
  unint64_t v3 = a1[10];
  unint64_t v4 = a1[9];
  if (v4 >= v3)
  {
    uint64_t v6 = a1[8];
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v6) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_566C();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    v19[4] = a1 + 10;
    if (v10) {
      uint64_t v11 = (char *)sub_A524((uint64_t)(a1 + 10), v10);
    }
    else {
      uint64_t v11 = 0;
    }
    char v12 = &v11[24 * v7];
    v19[0] = v11;
    v19[1] = v12;
    v19[3] = &v11[24 * v10];
    long long v13 = *(_OWORD *)__p;
    *((void *)v12 + 2) = v18;
    *(_OWORD *)char v12 = v13;
    __p[1] = 0;
    uint64_t v18 = 0;
    __p[0] = 0;
    v19[2] = v12 + 24;
    sub_B2F8(a1 + 8, v19);
    uint64_t v14 = a1[9];
    sub_B490((uint64_t)v19);
    int v15 = SHIBYTE(v18);
    a1[9] = v14;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v18;
    *(_OWORD *)unint64_t v4 = v5;
    a1[9] = v4 + 24;
  }
  return a1;
}

void sub_5DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_5DD0(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_WORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  return result;
}

uint64_t sub_5E0C(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v4 = a1 + 48;
  sub_B520(a1 + 8, (uint64_t)(a2 + 1));
  sub_BC14(v4, (uint64_t)(a2 + 6));
  *(_WORD *)(a1 + 88) = 257;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  sub_5ED8(a1);
  return a1;
}

void sub_5EA4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v3);
  sub_85AC(v2);
  sub_8240(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5ED8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 88))
  {
    *(unsigned char *)(result + 88) = 0;
    double result = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear((void *)(result + 96));
    for (i = *(uint64_t **)(v1 + 24); i; i = (uint64_t *)*i)
    {
      uint64_t v3 = i + 5;
      if (*((char *)i + 63) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      uint64_t v4 = i + 2;
      uint64_t v5 = *((unsigned __int8 *)i + 39);
      if ((v5 & 0x80u) != 0)
      {
        uint64_t v4 = (uint64_t *)i[2];
        uint64_t v5 = i[3];
      }
      *(void *)&long long v10 = v4;
      *((void *)&v10 + 1) = v5;
      *(void *)&long long v11 = v3;
      double result = sub_CA28((void *)(v1 + 96), (uint64_t)&v10);
    }
  }
  if (*(unsigned char *)(v1 + 89))
  {
    *(unsigned char *)(v1 + 89) = 0;
    uint64_t v6 = v1 + 136;
    double result = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear((void *)(v1 + 136));
    for (j = *(uint64_t **)(v1 + 64); j; j = (uint64_t *)*j)
    {
      uint64_t v8 = *((unsigned __int8 *)j + 39);
      if ((v8 & 0x80u) == 0) {
        unint64_t v9 = j + 2;
      }
      else {
        unint64_t v9 = (uint64_t *)j[2];
      }
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = j[3];
      }
      *(void *)&long long v10 = v9;
      *((void *)&v10 + 1) = v8;
      long long v11 = *(_OWORD *)(j + 5);
      double result = (uint64_t)sub_CF54(v6, (uint64_t)&v10, &v10);
    }
  }
  return result;
}

uint64_t sub_5FE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_6024(uint64_t a1, long long *a2, long long *a3)
{
  sub_88E0((char *)__dst, a2, a3);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = &v5;
  char v9 = 0;
  uint64_t v5 = (char *)operator new(0x30uLL);
  uint64_t v6 = v5;
  unint64_t v7 = (long long *)(v5 + 48);
  uint64_t v6 = sub_BFB8((uint64_t)&v7, (long long *)__dst, &v14, v5);
  sub_6148(a1, (long long **)&v5);
  uint64_t v8 = &v5;
  sub_C1D8((void ***)&v8);
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v11 < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_610C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  sub_C1D8((void ***)va);
  sub_61F8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_6148(uint64_t a1, long long **a2)
{
  *(unsigned char *)(a1 + 88) = 1;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = (char *)v4 + 24;
      sub_8A30((char *)v8, v4, (long long *)((char *)v4 + 24));
      sub_C270((void *)(a1 + 8), (uint64_t)v8);
      if (v11 < 0) {
        operator delete(__p);
      }
      if (v9 < 0) {
        operator delete(v8[0]);
      }
      uint64_t v4 = (long long *)(v6 + 24);
    }
    while (v6 + 24 != (char *)v5);
  }
  return a1;
}

void sub_61E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_61F8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_623C(uint64_t a1, uint64_t a2, double a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_8978(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }
  double v13 = a3;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  char v9 = &v6;
  char v10 = 0;
  uint64_t v6 = (long long *)operator new(0x20uLL);
  uint64_t v7 = v6;
  uint64_t v8 = v6 + 2;
  uint64_t v7 = (long long *)sub_C3A4((uint64_t)&v8, (long long *)__p, &v14, v6);
  sub_6390(a1, &v6);
  char v9 = &v6;
  sub_C4F0((void ***)&v9);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_634C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_6390(uint64_t a1, long long **a2)
{
  *(unsigned char *)(a1 + 89) = 1;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 3);
      if (*((char *)v3 + 23) < 0)
      {
        sub_8978(__p, *(void **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v6 = *v3;
        uint64_t v9 = *((void *)v3 + 2);
        *(_OWORD *)__p = v6;
      }
      uint64_t v10 = 0;
      uint64_t v11 = v5;
      sub_C594(a1 + 48, (unsigned __int8 *)__p, (uint64_t)__p);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
  return a1;
}

void sub_6444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6460(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_6488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 64);
  if (v4)
  {
    while (1)
    {
      if (*((char *)v4 + 39) < 0)
      {
        sub_8978(__p, (void *)v4[2], v4[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v4 + 1);
        uint64_t v12 = v4[4];
      }
      long long v13 = *(_OWORD *)(v4 + 5);
      uint64_t v5 = sub_ADC8((void *)(a1 + 48), (unsigned __int8 *)__p);
      if (v5) {
        int v6 = sub_D5E0(*((void *)v5 + 5), *((void *)v5 + 6), v13, *((uint64_t *)&v13 + 1));
      }
      else {
        int v6 = 3;
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
      if (v6 != 3 && v6) {
        return 0;
      }
      uint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    for (i = *(long long **)(a2 + 24); i; i = *(long long **)i)
    {
      sub_8AC8((char *)__p, i + 1);
      *(unsigned char *)(a1 + 88) = 1;
      sub_C8C0((void *)(a1 + 8), (long long *)__p);
      if (v14 < 0) {
        operator delete((void *)v13);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v8 = *(uint64_t **)(a2 + 64);
    uint64_t v9 = 1;
    if (v8)
    {
      do
      {
        if (*((char *)v8 + 39) < 0)
        {
          sub_8978(__p, (void *)v8[2], v8[3]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v8 + 1);
          uint64_t v12 = v8[4];
        }
        long long v13 = *(_OWORD *)(v8 + 5);
        *(unsigned char *)(a1 + 89) = 1;
        sub_BC8C(a1 + 48, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = (uint64_t *)*v8;
      }
      while (v8);
      return 1;
    }
  }
  return v9;
}

void sub_6638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_6668(unsigned int *a1)
{
  if (!agxps_gpu_is_valid((uint64_t)a1)) {
    return 0;
  }
  int gen = agxps_gpu_get_gen(a1);
  unsigned int v5 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16);
  if ((byte_771E60 & 1) == 0) {
    return 0;
  }
  uint64_t v4 = sub_8B60(&qword_771E80, &v5);
  if (v4) {
    return v4 + 3;
  }
  else {
    return 0;
  }
}

uint64_t *sub_66E4(unint64_t a1)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4) > a1
    && (uint64_t v1 = *(void *)(qword_771E68 + 80 * a1 + 72)) != 0)
  {
    return (uint64_t *)(v1 + 8);
  }
  else
  {
    return &qword_773100;
  }
}

BOOL agxps_counter_is_valid(unint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4) > a1;
}

BOOL agxps_counter_is_derived(unint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4) > a1
      && *(void *)(qword_771E68 + 80 * a1 + 72) != 0;
}

uint64_t agxps_initialize(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 v61 = 1;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_771F70);
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&byte_771E60);
  if (v6)
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)&byte_771E60);
    if (v7)
    {
      uint64_t v8 = qword_771E68;
      for (uint64_t i = qword_771E70; i != v8; sub_8700(i))
        i -= 80;
      qword_771E70 = v8;
      sub_8C14((uint64_t)&qword_771E80);
      sub_8C6C((uint64_t)qword_771EA8);
      sub_8CC4((uint64_t)&xmmword_771ED0);
      atomic_store(0, (unsigned __int8 *)&byte_771E60);
    }
  }
  v43 = a3;
  v44 = a1;
  v59 = &v61;
  v60 = &v61;
  uint64_t v10 = &dword_4F59A0;
  while (2)
  {
    switch(*v10)
    {
      case 1:
        uint64_t v11 = (unsigned int *)operator new(8uLL);
        v17 = v11;
        uint64_t v18 = 0xB0003000B0002;
        goto LABEL_28;
      case 2:
        v19 = (unsigned int *)operator new(4uLL);
        uint64_t v11 = v19;
        int v13 = 786434;
        goto LABEL_31;
      case 3:
        uint64_t v11 = (unsigned int *)operator new(4uLL);
        uint64_t v12 = v11;
        int v13 = 851971;
        goto LABEL_32;
      case 4:
        v19 = (unsigned int *)operator new(4uLL);
        uint64_t v11 = v19;
        int v13 = 851970;
        goto LABEL_31;
      case 5:
        char v14 = (unsigned int *)operator new(0xCuLL);
        uint64_t v11 = v14;
        int v15 = v14 + 3;
        *(void *)char v14 = 0xD0005000D0004;
        int v16 = 851971;
        goto LABEL_18;
      case 6:
        v19 = (unsigned int *)operator new(4uLL);
        uint64_t v11 = v19;
        int v21 = 917506;
        goto LABEL_26;
      case 7:
        uint64_t v11 = (unsigned int *)operator new(4uLL);
        uint64_t v12 = v11;
        int v13 = 917506;
        goto LABEL_32;
      case 8:
        char v14 = (unsigned int *)operator new(0xCuLL);
        uint64_t v11 = v14;
        int v15 = v14 + 3;
        *(void *)char v14 = 0xE0005000E0004;
        int v20 = 917510;
        goto LABEL_22;
      case 9:
      case 10:
        uint64_t v11 = (unsigned int *)operator new(4uLL);
        uint64_t v12 = v11;
        int v13 = 983043;
        goto LABEL_32;
      case 11:
        v19 = (unsigned int *)operator new(4uLL);
        uint64_t v11 = v19;
        int v13 = 983041;
        goto LABEL_31;
      case 12:
        v19 = (unsigned int *)operator new(4uLL);
        uint64_t v11 = v19;
        int v13 = 983042;
        goto LABEL_31;
      case 13:
      case 14:
        char v14 = (unsigned int *)operator new(0xCuLL);
        uint64_t v11 = v14;
        int v15 = v14 + 3;
        *(void *)char v14 = 0xF0005000F0004;
        int v16 = 983043;
LABEL_18:
        int v20 = v16 + 3;
LABEL_22:
        v14[2] = v20;
        goto LABEL_33;
      case 15:
        v19 = (unsigned int *)operator new(4uLL);
        uint64_t v11 = v19;
        int v21 = 1048578;
LABEL_26:
        int v13 = v21 + 1;
        goto LABEL_31;
      case 16:
      case 17:
        uint64_t v11 = (unsigned int *)operator new(4uLL);
        uint64_t v12 = v11;
        int v13 = 1048578;
        goto LABEL_32;
      case 18:
        uint64_t v11 = (unsigned int *)operator new(8uLL);
        v17 = v11;
        uint64_t v18 = 0x10000500100004;
LABEL_28:
        void *v17 = v18;
        int v15 = (unsigned int *)(v17 + 1);
        goto LABEL_33;
      case 19:
        uint64_t v11 = (unsigned int *)operator new(4uLL);
        uint64_t v12 = v11;
        int v13 = 1114115;
        goto LABEL_32;
      case 20:
        v19 = (unsigned int *)operator new(4uLL);
        uint64_t v11 = v19;
        int v13 = 1114114;
LABEL_31:
        uint64_t v12 = v19;
        goto LABEL_32;
      case 21:
      case 22:
        goto LABEL_52;
      default:
        uint64_t v11 = (unsigned int *)operator new(4uLL);
        uint64_t v12 = v11;
        int v13 = 655362;
LABEL_32:
        *uint64_t v12 = v13;
        int v15 = v12 + 1;
LABEL_33:
        v22 = (char *)*((void *)v10 + 1);
        v45 = v11;
        do
        {
          unsigned int v23 = *v11;
          sub_B01C(v50, v22);
          sub_B01C(v48, *((char **)v10 + 2));
          sub_B01C(v46, *((char **)v10 + 3));
          *(_OWORD *)v52 = *(_OWORD *)v50;
          uint64_t v55 = v49;
          uint64_t v57 = v47;
          uint64_t v24 = v51;
          v50[1] = 0;
          uint64_t v51 = 0;
          uint64_t v49 = 0;
          v50[0] = 0;
          long long v54 = *(_OWORD *)v48;
          v48[0] = 0;
          v48[1] = 0;
          long long __p = *(_OWORD *)v46;
          v46[1] = 0;
          uint64_t v47 = 0;
          v46[0] = 0;
          uint64_t v53 = v24;
          uint64_t v58 = 0;
          unint64_t v25 = sub_6F00(v23, (uint64_t)v52);
          uint64_t v26 = v58;
          uint64_t v58 = 0;
          if (v26)
          {
            v63[0] = (void **)(v26 + 24);
            std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v63);
            operator delete();
          }
          if (SHIBYTE(v57) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v55) < 0) {
            operator delete((void *)v54);
          }
          if (SHIBYTE(v53) < 0) {
            operator delete(v52[0]);
          }
          if (SHIBYTE(v47) < 0) {
            operator delete(v46[0]);
          }
          if (SHIBYTE(v49) < 0) {
            operator delete(v48[0]);
          }
          if (SHIBYTE(v51) < 0) {
            operator delete(v50[0]);
          }
          BOOL v27 = v61;
          if (v61) {
            BOOL v27 = 0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4) > v25;
          }
          unsigned __int8 v61 = v27;
          ++v11;
        }
        while (v11 != v15);
        operator delete(v45);
LABEL_52:
        v10 += 8;
        if (v10 != (int *)&unk_7418C0) {
          continue;
        }
        sub_124A60();
        v62 = &v61;
        v29 = (char *)v52[0];
        v28 = (char *)v52[1];
        v31 = v43;
        for (j = v44; v29 != v28; v29 += 176)
          sub_7720(&v62, (uint64_t)v29);
        v63[0] = v52;
        sub_D1C0(v63);
        sub_11131C();
        v62 = &v61;
        v33 = (char *)v52[0];
        v32 = (char *)v52[1];
        while (v33 != v32)
        {
          sub_746C(&v62, (uint64_t)v33);
          v33 += 88;
        }
        v63[0] = v52;
        sub_D2A4(v63);
        sub_106598();
        v62 = &v61;
        v35 = (char *)v52[0];
        v34 = (char *)v52[1];
        while (v35 != v34)
        {
          sub_746C(&v62, (uint64_t)v35);
          v35 += 88;
        }
        v63[0] = v52;
        sub_D2A4(v63);
        uint64_t v36 = a4;
        if (v43 && a4)
        {
          do
          {
            uint64_t v37 = *v31++;
            sub_746C(&v59, v37);
            --v36;
          }
          while (v36);
        }
        uint64_t v38 = a2;
        if (v44 && a2)
        {
          do
          {
            uint64_t v39 = *j++;
            sub_7720(&v60, v39);
            --v38;
          }
          while (v38);
        }
        atomic_store(1u, (unsigned __int8 *)&byte_771E60);
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_771F70);
        return v61;
    }
  }
}

void sub_6DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  *(void *)(v52 - 128) = &a34;
  sub_D2A4((void ***)(v52 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_6F00(unsigned int a1, uint64_t a2)
{
  unsigned int v62 = a1;
  if (byte_771E60) {
    return -1;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4);
  v63 = &v62;
  uint64_t v4 = sub_8D1C((uint64_t)qword_771EA8, &v62, (uint64_t)&unk_4C68ED, &v63);
  v63 = (unsigned int *)a2;
  *((void *)sub_9234((uint64_t)(v4 + 3), (unsigned __int8 *)a2, (uint64_t)&unk_4C68ED, (long long **)&v63) + 5) = v3;
  if (*(void *)(a2 + 72))
  {
    v63 = &v62;
    unsigned int v5 = sub_9B2C((uint64_t)&xmmword_771ED0, &v62, (uint64_t)&unk_4C68ED, &v63);
    unsigned __int8 v6 = v5;
    unsigned __int8 v7 = (unint64_t *)v5[4];
    uint64_t v8 = (uint64_t)(v5 + 5);
    unint64_t v9 = v5[5];
    if ((unint64_t)v7 >= v9)
    {
      uint64_t v11 = (unint64_t *)v5[3];
      uint64_t v12 = v7 - v11;
      if ((unint64_t)(v12 + 1) >> 61) {
LABEL_59:
      }
        sub_566C();
      unint64_t v13 = v9 - (void)v11;
      unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 2;
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      if (v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        int v16 = (char *)sub_5714(v8, v15);
        uint64_t v11 = (unint64_t *)v6[3];
        unsigned __int8 v7 = (unint64_t *)v6[4];
      }
      else
      {
        int v16 = 0;
      }
      v17 = (unint64_t *)&v16[8 * v12];
      uint64_t v18 = &v16[8 * v15];
      unint64_t *v17 = v3;
      uint64_t v10 = v17 + 1;
      while (v7 != v11)
      {
        unint64_t v19 = *--v7;
        *--v17 = v19;
      }
      v6[3] = v17;
      v6[4] = v10;
      v6[5] = v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *unsigned __int8 v7 = v3;
      uint64_t v10 = v7 + 1;
    }
    v6[4] = v10;
    v63 = &v62;
    int v20 = sub_9DE4((uint64_t)&unk_771EF8, &v62, (uint64_t)&unk_4C68ED, &v63);
    int v21 = sub_7F68(a2);
    v22 = (long long *)*v21;
    unsigned int v23 = (long long *)v21[1];
    if ((long long *)*v21 != v23)
    {
      uint64_t v24 = (uint64_t)(v20 + 3);
      do
      {
        v63 = (unsigned int *)v22;
        unint64_t v25 = sub_A0B0(v24, (unsigned __int8 *)v22, (uint64_t)&unk_4C68ED, (long long **)&v63);
        uint64_t v26 = v25;
        BOOL v27 = (unint64_t *)*((void *)v25 + 6);
        uint64_t v28 = (uint64_t)(v25 + 56);
        unint64_t v29 = *((void *)v25 + 7);
        if ((unint64_t)v27 >= v29)
        {
          v31 = (unint64_t *)*((void *)v25 + 5);
          uint64_t v32 = v27 - v31;
          if ((unint64_t)(v32 + 1) >> 61) {
            goto LABEL_59;
          }
          unint64_t v33 = v29 - (void)v31;
          unint64_t v34 = (uint64_t)(v29 - (void)v31) >> 2;
          if (v34 <= v32 + 1) {
            unint64_t v34 = v32 + 1;
          }
          if (v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35)
          {
            uint64_t v36 = (char *)sub_5714(v28, v35);
            v31 = (unint64_t *)*((void *)v26 + 5);
            BOOL v27 = (unint64_t *)*((void *)v26 + 6);
          }
          else
          {
            uint64_t v36 = 0;
          }
          uint64_t v37 = (unint64_t *)&v36[8 * v32];
          *uint64_t v37 = v3;
          v30 = v37 + 1;
          while (v27 != v31)
          {
            unint64_t v38 = *--v27;
            *--uint64_t v37 = v38;
          }
          *((void *)v26 + 5) = v37;
          *((void *)v26 + 6) = v30;
          *((void *)v26 + 7) = &v36[8 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *BOOL v27 = v3;
          v30 = v27 + 1;
        }
        *((void *)v26 + 6) = v30;
        v22 = (long long *)((char *)v22 + 24);
      }
      while (v22 != v23);
    }
  }
  uint64_t v39 = qword_771E70;
  if (qword_771E70 >= (unint64_t)qword_771E78)
  {
    unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4);
    unint64_t v46 = v45 + 1;
    if (v45 + 1 > 0x333333333333333) {
      sub_566C();
    }
    if (0x999999999999999ALL * ((qword_771E78 - qword_771E68) >> 4) > v46) {
      unint64_t v46 = 0x999999999999999ALL * ((qword_771E78 - qword_771E68) >> 4);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((qword_771E78 - qword_771E68) >> 4) >= 0x199999999999999) {
      unint64_t v47 = 0x333333333333333;
    }
    else {
      unint64_t v47 = v46;
    }
    if (v47 > 0x333333333333333) {
      sub_574C();
    }
    v48 = (char *)operator new(80 * v47);
    uint64_t v49 = &v48[80 * v45];
    *(_OWORD *)uint64_t v49 = *(_OWORD *)a2;
    *((void *)v49 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(v49 + 24) = *(_OWORD *)(a2 + 24);
    *((void *)v49 + 5) = *(void *)(a2 + 40);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    long long v50 = *(_OWORD *)(a2 + 48);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    uint64_t v51 = *(void *)(a2 + 64);
    uint64_t v52 = *(void *)(a2 + 72);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *((_OWORD *)v49 + 3) = v50;
    *((void *)v49 + 8) = v51;
    *((void *)v49 + 9) = v52;
    uint64_t v53 = qword_771E68;
    long long v54 = (char *)qword_771E70;
    if (qword_771E70 == qword_771E68)
    {
      uint64_t v44 = (uint64_t)(v49 + 80);
      qword_771E68 = (uint64_t)&v48[80 * v45];
      qword_771E70 = (uint64_t)(v49 + 80);
      qword_771E78 = (uint64_t)&v48[80 * v47];
    }
    else
    {
      uint64_t v55 = (uint64_t)&v48[80 * v45];
      do
      {
        long long v56 = *((_OWORD *)v54 - 5);
        *(void *)(v55 - 64) = *((void *)v54 - 8);
        *(_OWORD *)(v55 - 80) = v56;
        *((void *)v54 - 9) = 0;
        *((void *)v54 - 8) = 0;
        *((void *)v54 - 10) = 0;
        long long v57 = *(_OWORD *)(v54 - 56);
        *(void *)(v55 - 40) = *((void *)v54 - 5);
        *(_OWORD *)(v55 - 56) = v57;
        *((void *)v54 - 6) = 0;
        *((void *)v54 - 5) = 0;
        *((void *)v54 - 7) = 0;
        long long v58 = *((_OWORD *)v54 - 2);
        *(void *)(v55 - 16) = *((void *)v54 - 2);
        *(_OWORD *)(v55 - 32) = v58;
        *((void *)v54 - 4) = 0;
        *((void *)v54 - 3) = 0;
        uint64_t v59 = *((void *)v54 - 1);
        *((void *)v54 - 2) = 0;
        *((void *)v54 - 1) = 0;
        *(void *)(v55 - 8) = v59;
        v55 -= 80;
        v54 -= 80;
      }
      while (v54 != (char *)v53);
      long long v54 = (char *)qword_771E68;
      uint64_t v60 = qword_771E70;
      uint64_t v44 = (uint64_t)(v49 + 80);
      qword_771E68 = v55;
      qword_771E70 = (uint64_t)(v49 + 80);
      qword_771E78 = (uint64_t)&v48[80 * v47];
      while ((char *)v60 != v54)
      {
        v60 -= 80;
        sub_8700(v60);
      }
    }
    if (v54) {
      operator delete(v54);
    }
  }
  else
  {
    long long v40 = *(_OWORD *)a2;
    *(void *)(qword_771E70 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)uint64_t v39 = v40;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    long long v41 = *(_OWORD *)(a2 + 24);
    *(void *)(v39 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(v39 + 24) = v41;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    long long v42 = *(_OWORD *)(a2 + 48);
    *(void *)(v39 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(v39 + 48) = v42;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    uint64_t v43 = *(void *)(a2 + 72);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(v39 + 72) = v43;
    uint64_t v44 = v39 + 80;
  }
  qword_771E70 = v44;
  return v3;
}

uint64_t sub_73DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2)
  {
    uint64_t v4 = (void **)(v2 + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
    operator delete();
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char **sub_746C(unsigned char **result, uint64_t a2)
{
  if (**result)
  {
    if (*(void *)(a2 + 48))
    {
      if (*(void *)(a2 + 40))
      {
        sub_B01C(v7, *(char **)a2);
        sub_B01C(v5, *(char **)(a2 + 8));
        uint64_t v4 = 0;
        long long v3 = 0uLL;
        sub_A448((char *)&v3, *(long long **)(a2 + 64), *(long long **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
        *(_OWORD *)unint64_t v9 = *(_OWORD *)v7;
        uint64_t v10 = v8;
        v7[1] = 0;
        uint64_t v8 = 0;
        long long v11 = *(_OWORD *)v5;
        uint64_t v12 = v6;
        v5[0] = 0;
        v5[1] = 0;
        uint64_t v6 = 0;
        v7[0] = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        long long __p = 0;
        operator new();
      }
    }
    else
    {
      *std::logic_error *result = 0;
    }
  }
  return result;
}

void sub_7694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_73DC((uint64_t)&a27);
  *(void *)(v44 - 120) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)(v44 - 120));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

unsigned char **sub_7720(unsigned char **result, uint64_t a2)
{
  if (**result && (byte_771E60 & 1) == 0)
  {
    int v10 = *(_DWORD *)(a2 + 4) | (*(_DWORD *)a2 << 16);
    long long v3 = sub_8B60(&qword_771E80, (unsigned int *)&v10);
    if (v3)
    {
      return (unsigned char **)sub_6488((uint64_t)(v3 + 3), a2);
    }
    else
    {
      int v4 = v10;
      sub_5E0C((uint64_t)&v5, (void *)a2);
      sub_A750((uint64_t)&qword_771E80, (unsigned int *)&v4, (uint64_t)&v4);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v9);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v8);
      sub_85AC((uint64_t)&v7);
      return (unsigned char **)sub_8240((uint64_t)&v6);
    }
  }
  return result;
}

void sub_77DC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 144);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 104);
  sub_85AC(v1 + 56);
  sub_8240(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t agxps_load_counter_obfuscation_map(uint64_t a1)
{
  if (a1)
  {
    id v1 = [objc_alloc((Class)NSString) initWithUTF8String:a1];
  }
  else
  {
    uint64_t v2 = +[NSBundle bundleWithIdentifier:@"com.apple.gpusw.AGXProfilingSupport"];
    uint64_t v3 = [v2 pathForResource:@"RawCountersMapping" ofType:@"csv"];

    id v1 = (id)v3;
  }
  unint64_t v29 = v1;
  if (v1
    && (id v28 = [objc_alloc((Class)NSString) initWithContentsOfFile:v1 encoding:4 error:0]) != 0)
  {
    int v4 = +[NSCharacterSet newlineCharacterSet];
    uint64_t v5 = [v28 componentsSeparatedByCharactersInSet:v4];

    sub_AA70((uint64_t)&xmmword_771F20);
    id v6 = [v5 count];
    sub_8F90((uint64_t)&xmmword_771F20, vcvtps_u32_f32((float)(unint64_t)v6 / *(float *)&dword_771F40));
    sub_AA70((uint64_t)&unk_771F48);
    id v7 = [v5 count];
    sub_8F90((uint64_t)&unk_771F48, vcvtps_u32_f32((float)(unint64_t)v7 / *(float *)&dword_771F68));
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id obj = v5;
    id v8 = [obj countByEnumeratingWithState:&v31 objects:v41 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v32;
      do
      {
        int v10 = 0;
        do
        {
          if (*(void *)v32 != v9) {
            objc_enumerationMutation(obj);
          }
          long long v11 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v10);
          uint64_t v12 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
          unint64_t v13 = [v11 stringByTrimmingCharactersInSet:v12];
          uint64_t v14 = [v13 componentsSeparatedByString:@","];

          if ([v14 count] == (char *)&def_1C1270 + 2)
          {
            uint64_t v15 = [v14 firstObject];
            int v16 = [v14 lastObject];
            id v17 = v15;
            uint64_t v18 = (const std::string::value_type *)[v17 UTF8String];
            id v19 = v16;
            sub_B01C(__p, (char *)[v19 UTF8String]);
            unint64_t v35 = (long long *)__p;
            int v20 = sub_AAC8((uint64_t)&xmmword_771F20, __p, (uint64_t)&unk_4C68ED, &v35);
            std::string::assign((std::string *)(v20 + 40), v18);
            if (SBYTE3(v40) < 0) {
              operator delete(*(void **)__p);
            }
            id v21 = v19;
            v22 = (const std::string::value_type *)[v21 UTF8String];
            unsigned int v23 = v17;
            sub_B01C(__p, (char *)[v23 UTF8String]);
            unint64_t v35 = (long long *)__p;
            uint64_t v24 = sub_AAC8((uint64_t)&unk_771F48, __p, (uint64_t)&unk_4C68ED, &v35);
            std::string::assign((std::string *)(v24 + 40), v22);
            if (SBYTE3(v40) < 0) {
              operator delete(*(void **)__p);
            }
          }
          else
          {
            unsigned int v23 = sub_12C18C();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              id v25 = [v11 UTF8String];
              *(_DWORD *)long long __p = 136315650;
              *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport"
                                   "/AGXProfilingSupport/AGXPSCounters.mm";
              __int16 v37 = 1024;
              int v38 = 422;
              __int16 v39 = 2080;
              id v40 = v25;
              _os_log_error_impl(&def_1C1270, v23, OS_LOG_TYPE_ERROR, "%s:%u: WARNING: Skipping invalid raw counter mapping: '%s'", __p, 0x1Cu);
            }
          }

          int v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v31 objects:v41 count:16];
      }
      while (v8);
    }

    uint64_t v26 = 1;
  }
  else
  {
    uint64_t v26 = 0;
  }

  return v26;
}

void sub_7C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

char *agxps_counter_deobfuscate_name(char *__s)
{
  id v1 = __s;
  if (__s)
  {
    sub_B01C(__p, __s);
    uint64_t v2 = sub_ADC8(&xmmword_771F20, (unsigned __int8 *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v2)
    {
      id v1 = (char *)(v2 + 40);
      if ((char)v2[63] < 0) {
        return *(char **)v1;
      }
    }
  }
  return v1;
}

void sub_7D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t agxps_counter_get_ident(unsigned int *a1, char *a2)
{
  if (!agxps_gpu_is_valid((uint64_t)a1)) {
    return -1;
  }
  int gen = agxps_gpu_get_gen(a1);
  unsigned int v5 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16);
  sub_B01C(__p, a2);
  unsigned int v12 = v5;
  id v6 = sub_8B60(qword_771EA8, &v12);
  if (v6 && (id v7 = sub_AECC(v6 + 3, (unsigned __int8 *)__p)) != 0)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4) <= *((void *)v7 + 5)) {
      uint64_t v8 = -1;
    }
    else {
      uint64_t v8 = *((void *)v7 + 5);
    }
  }
  else
  {
    uint64_t v8 = -1;
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_7E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *agxps_counter_get_name(unint64_t a1)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4) <= a1) {
    return 0;
  }
  double result = (char *)(qword_771E68 + 80 * a1);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t agxps_counter_get_grc_enable_str(unint64_t a1)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((qword_771E70 - qword_771E68) >> 4) <= a1 || *(void *)(qword_771E68 + 80 * a1 + 72)) {
    return 0;
  }
  uint64_t v2 = qword_771E68 + 80 * a1;
  uint64_t result = v2 + 48;
  if (*(char *)(v2 + 71) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t *sub_7F68(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_771F90, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_771F90);
    a1 = v4;
    if (v3)
    {
      qword_771F78 = 0;
      unk_771F80 = 0;
      qword_771F88 = 0;
      __cxa_atexit((void (*)(void *))sub_5964, &qword_771F78, &def_1C1270);
      __cxa_guard_release(&qword_771F90);
      a1 = v4;
    }
  }
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1) {
    return (uint64_t *)(v1 + 24);
  }
  else {
    return &qword_771F78;
  }
}

uint64_t agxps_counter_group_get_derived_counters(unsigned int *a1, char *a2, void *a3, void *a4)
{
  BOOL is_valid = agxps_gpu_is_valid((uint64_t)a1);
  uint64_t result = 0;
  if (a4 && a3 && a2 && is_valid)
  {
    sub_B01C(__p, a2);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_771FA0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_771FA0))
    {
      qword_771FA8 = 0;
      unk_771FB0 = 0;
      qword_771FB8 = 0;
      __cxa_atexit((void (*)(void *))sub_8470, &qword_771FA8, &def_1C1270);
      qword_771F98 = (uint64_t)&qword_771FA8;
      __cxa_guard_release(&qword_771FA0);
    }
    if ((byte_771E60 & 1) != 0
      && (int gen = agxps_gpu_get_gen(a1),
          unsigned int v27 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16),
          (char v11 = sub_8B60(qword_771EF8, &v27)) != 0)
      && (unsigned int v12 = sub_AECC(v11 + 3, (unsigned __int8 *)__p)) != 0)
    {
      uint64_t v13 = (uint64_t)(v12 + 40);
    }
    else
    {
      uint64_t v13 = qword_771F98;
    }
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = *(void **)v13;
    uint64_t v15 = *(void **)(v13 + 8);
    if (*(void **)v13 == v15) {
      return 0;
    }
    uint64_t v16 = 0;
    do
    {
      id v17 = *(_DWORD **)(qword_771E68 + 80 * *v14 + 72);
      if (v17) {
        uint64_t v18 = (*v17 & 8) == 0;
      }
      else {
        uint64_t v18 = 1;
      }
      v16 += v18;
      ++v14;
    }
    while (v14 != v15);
    if (!v16)
    {
      return 0;
    }
    else
    {
      id v19 = malloc_type_malloc(8 * v16, 0x100004000313F17uLL);
      int v20 = *(void **)v13;
      id v21 = *(void **)(v13 + 8);
      if (*(void **)v13 != v21)
      {
        uint64_t v22 = qword_771E68;
        unsigned int v23 = v19;
        do
        {
          uint64_t v24 = *(unsigned char **)(v22 + 80 * *v20 + 72);
          if (!v24 || (*v24 & 8) == 0) {
            *v23++ = *v20;
          }
          ++v20;
        }
        while (v20 != v21);
      }
      *a4 = v16;
      *a3 = v19;
      return 1;
    }
  }
  return result;
}

void sub_8224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8240(uint64_t a1)
{
  sub_827C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_827C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_8318(uint64_t a1)
{
  sub_8354(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_8354(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      sub_8398((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_8398(uint64_t a1)
{
  sub_83D4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_83D4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      sub_8418((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_8418(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_8470(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_84A4(uint64_t a1)
{
  sub_84E0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_84E0(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_852C(uint64_t a1)
{
  sub_8568(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_8568(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      sub_85AC((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_85AC(uint64_t a1)
{
  sub_85E8(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_85E8(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      int v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_8634(uint64_t a1)
{
  sub_8670(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_8670(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      sub_86B4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_86B4(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 144);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 104);
  sub_85AC(a1 + 56);

  return sub_8240(a1 + 16);
}

void sub_8700(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2)
  {
    int v3 = (void **)(v2 + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
    operator delete();
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

unint64_t sub_878C(unint64_t result, uint64_t a2)
{
  switch((int)a2)
  {
    case 1:
      a2 = 2;
      break;
    case 2:
      a2 = 3;
      break;
    case 3:
      a2 = 4;
      break;
    case 4:
      a2 = 5;
      break;
    case 5:
      a2 = 6;
      break;
    case 6:
      int v2 = result - 10;
      uint64_t result = 0;
      switch(v2)
      {
        case 0:
          LODWORD(result) = 11;
          goto LABEL_15;
        case 1:
          LODWORD(result) = 12;
          goto LABEL_15;
        case 2:
          LODWORD(result) = 13;
          goto LABEL_15;
        case 3:
          LODWORD(result) = 14;
          goto LABEL_15;
        case 4:
          LODWORD(result) = 15;
          goto LABEL_15;
        case 5:
          LODWORD(result) = 16;
          goto LABEL_15;
        case 6:
          LODWORD(result) = 17;
          goto LABEL_15;
        case 7:
          return result;
        default:
LABEL_15:
          a2 = 1;
          break;
      }
      break;
    default:
      return result | (unint64_t)(a2 << 32);
  }
  return result | (unint64_t)(a2 << 32);
}

void sub_8894()
{
  exception = __cxa_allocate_exception(8uLL);
}

char *sub_88E0(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_8978(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  id v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_8978(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)id v6 = v7;
  }
  return __dst;
}

void sub_895C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_8978(unsigned char *__dst, void *__src, unint64_t a3)
{
  long long v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_8A18();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *long long v5 = v8;
    long long v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_8A18()
{
}

char *sub_8A30(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_8978(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_8978(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_8AAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_8AC8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_8978(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  long long v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_8978(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)long long v5 = v6;
  }
  return __dst;
}

void sub_8B44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_8B60(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  long long v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void sub_8C14(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_8670(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_8C6C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_8568(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_8CC4(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_84E0(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t *sub_8D1C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_8F90(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  id v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *id v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_91DC((uint64_t)v24, 0);
  return i;
}

void sub_8F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_91DC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_8F90(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_9080(a1, prime);
    }
  }
}

void sub_9080(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_574C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      char v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            char v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          char v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_91DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_85AC((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

unsigned __int8 *sub_9234(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_9578(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_9A24(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_94CC(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_8F90(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unsigned int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unsigned int v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_94A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_9ACC((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_94CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_8978(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_955C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_9ACC(v3, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_9578(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_95B8((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_95B8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_9964(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_98B8(a2, a3);
  }
  else
  {
    return sub_97C0(a2, a3);
  }
}

unint64_t sub_97C0(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_98B8(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_9964(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_9A24(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_9ACC(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_9B2C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  int v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_8F90(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v11 = *v21;
LABEL_38:
    *uint64_t v21 = v11;
    goto LABEL_39;
  }
  void *v11 = *v13;
  *unint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_9D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_9D84(v11, v10);
  _Unwind_Resume(a1);
}

void sub_9D84(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_9DE4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  float v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)float v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_8F90(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *uint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_A058((uint64_t)v24, 0);
  return i;
}

void sub_A040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A058((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_A058(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_8398((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

unsigned __int8 *sub_A0B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_9578(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_9A24(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_A34C(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_8F90(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_A3F0((uint64_t)v26, 0);
  return i;
}

void sub_A334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_A3F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_A34C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_8978(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_A3D8(_Unwind_Exception *a1)
{
  sub_A3F0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_A3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_8418((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

char *sub_A448(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_A4D0(result, a4);
    uint64_t result = sub_A56C((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_A4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

char *sub_A4D0(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_566C();
  }
  uint64_t result = (char *)sub_A524((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_A524(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_574C();
  }
  return operator new(24 * a2);
}

char *sub_A56C(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  long long v11 = __dst;
  uint8x8_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_8978(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint8x8_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_A62C((uint64_t)v9);
  return v4;
}

void sub_A618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_A62C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_A664(a1);
  }
  return a1;
}

void sub_A664(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t *sub_A750(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v10 = i[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)i + 4) == v5) {
            return i;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_A99C(a1, *a2, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_8F90(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  float v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    void *v17 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v20[0];
    }
  }
  uint64_t i = (uint64_t *)v20[0];
  v20[0] = 0;
  ++*(void *)(a1 + 24);
  sub_AA18((uint64_t)v20, 0);
  return i;
}

void sub_A984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_AA18((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_A99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0xC8uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  uint64_t result = sub_5E0C((uint64_t)(v8 + 3), (void *)(a3 + 8));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_AA00(_Unwind_Exception *a1)
{
  sub_AA18(v1, 0);
  _Unwind_Resume(a1);
}

void sub_AA18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_86B4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_AA70(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_827C(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *sub_AAC8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_9578(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_9A24(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  void *v17 = 0;
  v17[1] = v10;
  unint64_t v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)unint64_t v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_8F90(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  sub_AD70((uint64_t)v29, 0);
  return i;
}

void sub_AD58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_AD70((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_AD70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *sub_ADC8(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_9578((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_9A24(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *sub_AECC(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_9578((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_9A24(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_B01C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_8A18();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *sub_B0D0(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x28uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_8F90(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  float v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    *float v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    float v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_B2E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B2F8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_B370((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_B370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_B410((uint64_t)v12);
  return a6;
}

uint64_t sub_B410(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_B448(a1);
  }
  return a1;
}

void sub_B448(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_B490(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_B4C8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_B520(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_B594(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    sub_B854((void *)a1, i + 1);
  return a1;
}

void sub_B57C(_Unwind_Exception *a1)
{
  sub_8240(v1);
  _Unwind_Resume(a1);
}

void sub_B594(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_B684(a1, prime);
    }
  }
}

void sub_B684(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_574C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            long long v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              long long v15 = v12;
              while (1)
              {
                int v16 = sub_9A24(a1 + 32, v12 + 16, v14 + 16);
                unint64_t v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                long long v14 = *(unsigned __int8 **)v17;
                long long v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              long long v14 = *(unsigned __int8 **)v15;
              unint64_t v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              unint64_t v17 = v12;
            }
            *uint64_t v7 = v14;
            *(void *)unint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_B854(void *a1, long long *a2)
{
  sub_B8C0((uint64_t)a1, a2, (uint64_t)v5);
  unint64_t v3 = sub_B954(a1, v5[0]);
  v5[0] = 0;
  sub_AD70((uint64_t)v5, 0);
  return v3;
}

void sub_B8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_AD70((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_B8C0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_8AC8((char *)v7 + 16, a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = sub_9578(a1 + 24, (uint64_t)v7 + 16);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_B93C(_Unwind_Exception *a1)
{
  sub_AD70(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_B954(void *a1, void *a2)
{
  int8x8_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = sub_9578((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_B9B8((uint64_t)a1, v5, v4);
  sub_BB2C(a1, a2, v6);
  return a2;
}

unsigned __int8 *sub_B9B8(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_B594(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  unint64_t v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    unint64_t v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? sub_9A24(v6, v18 + 16, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        unint64_t v17 = *(unsigned __int8 **)v17;
        unint64_t v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

void *sub_BB2C(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t sub_BC14(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_8F90(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_BC8C(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_BC74(_Unwind_Exception *a1)
{
  sub_85AC(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_BC8C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  float v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_9578(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    size_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_9A24(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_BF0C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_8F90(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_BEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_9ACC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_BF0C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_8978(v9, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_BF9C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_9ACC(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_BFB8(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  unint64_t v10 = __dst;
  uint8x8_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      sub_C05C(v4, v6);
      v6 += 3;
      unint64_t v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_C0F4((uint64_t)v8);
  return v4;
}

void sub_C048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_C05C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_8978(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  uint8x8_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_8978(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint8x8_t v5 = v6;
  }
  return __dst;
}

void sub_C0D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C0F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_C12C((uint64_t *)a1);
  }
  return a1;
}

void sub_C12C(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      sub_C180(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_C180(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_C1D8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_C180((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_C270(void *a1, uint64_t a2)
{
  sub_C2DC((uint64_t)a1, a2, (uint64_t)v5);
  uint64_t v3 = sub_B954(a1, v5[0]);
  v5[0] = 0;
  sub_AD70((uint64_t)v5, 0);
  return v3;
}

void sub_C2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_AD70((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_C2DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x40uLL);
  unint64_t v8 = v7;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  char v9 = v7 + 16;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_8978(v7 + 16, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    _OWORD *v9 = *(_OWORD *)a2;
    *((void *)v7 + 4) = *(void *)(a2 + 16);
  }
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 7) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = sub_9578(a1 + 24, (uint64_t)v9);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_C38C(_Unwind_Exception *a1)
{
  sub_AD70(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_C3A4(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v12 = __dst;
  size_t v13 = __dst;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_8978(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4[2] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
        unint64_t v8 = v4;
      }
      v4[3] = *((void *)v6 + 3);
      v6 += 2;
      uint64_t v4 = v8 + 4;
      size_t v13 = v8 + 4;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  sub_C470((uint64_t)v10);
  return v4;
}

void sub_C45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_C470(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_C4A8(a1);
  }
  return a1;
}

void sub_C4A8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

void sub_C4F0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_C544((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_C544(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

unsigned __int8 *sub_C594(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_9578(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    size_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_9A24(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_C814(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_8F90(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_C7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_9ACC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_C814@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_8978(v9, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_C8A4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_9ACC(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_C8C0(void *a1, long long *a2)
{
  sub_C92C((uint64_t)a1, a2, (uint64_t)v5);
  uint64_t v3 = sub_B954(a1, v5[0]);
  v5[0] = 0;
  sub_AD70((uint64_t)v5, 0);
  return v3;
}

void sub_C914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_AD70((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_C92C@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_8AC8((char *)v7 + 16, a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = sub_9578(a1 + 24, (uint64_t)v7 + 16);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_C9A8(_Unwind_Exception *a1)
{
  sub_AD70(v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    unint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        unint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t sub_CA28(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  *(void *)uint64_t v4 = 0;
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((void *)v4 + 4) = *(void *)(a2 + 16);
  *((void *)v4 + 1) = sub_CB0C((uint64_t)(a1 + 3), *((uint64_t **)v4 + 2), *((void *)v4 + 3));
  return sub_CAA4(a1, (uint64_t)v4);
}

void sub_CA90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CAA4(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  unint64_t v5 = sub_CB0C((uint64_t)(a1 + 3), *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
  *(void *)(a2 + 8) = v5;
  uint64_t v6 = sub_CB34((uint64_t)a1, v5, v4);
  sub_BB2C(a1, (void *)a2, v6);
  return a2;
}

unint64_t sub_CB0C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_95B8((uint64_t)&v4, a2, a3);
}

uint64_t *sub_CB34(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    sub_CCC0(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  float v16 = *(uint64_t **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  unint64_t v19 = *(const void **)a3;
  size_t v18 = *(void *)(a3 + 8);
  do
  {
    unint64_t v20 = v16;
    float v16 = (uint64_t *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v21 = v16[1];
    if (v14 > 1)
    {
      unint64_t v22 = v16[1];
      if (v21 >= v6) {
        unint64_t v22 = v21 % v6;
      }
    }
    else
    {
      unint64_t v22 = v21 & (v6 - 1);
    }
    if (v22 != v15) {
      break;
    }
    BOOL v23 = v21 == a2 && v16[3] == v18 && memcmp((const void *)v16[2], v19, v18) == 0;
    int v24 = v17 & !v23;
    v17 |= v23;
  }
  while (v24 != 1);
  return v20;
}

void sub_CCC0(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_CDB0(a1, prime);
    }
  }
}

void sub_CDB0(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_574C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else
        {
          unint64_t v14 = i;
          if (*(void *)(*(void *)a1 + 8 * v13))
          {
            do
            {
              unint64_t v15 = v14;
              unint64_t v14 = (uint64_t *)*v14;
              if (!v14) {
                break;
              }
              size_t v16 = i[3];
              if (v16 != v14[3]) {
                break;
              }
            }
            while (!memcmp((const void *)i[2], (const void *)v14[2], v16));
            *uint64_t v7 = v14;
            void *v15 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v13;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_CF54(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_CB0C(a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        unint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v9)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v18 >= v10) {
                v18 %= v10;
              }
            }
            else
            {
              v18 &= v10 - 1;
            }
            if (v18 != v3) {
              break;
            }
          }
          unint64_t v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  unint64_t v14 = operator new(0x30uLL);
  *(void *)unint64_t v14 = 0;
  *((void *)v14 + 1) = v9;
  long long v19 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_8F90(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)unint64_t v14 = *v27;
LABEL_40:
    *unint64_t v27 = v14;
    goto LABEL_41;
  }
  *(void *)unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v28 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v7;
  return v14;
}

void sub_D1AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_D1C0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        sub_D258((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_D258(uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a2 + 136);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a2 + 96);
  sub_85AC(a2 + 48);

  return sub_8240(a2 + 8);
}

void sub_D2A4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_59A0(v4 - 88);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t agxps_timeseries_create(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
  return 0;
}

void sub_D390()
{
}

uint64_t sub_D3B4(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (a2 == 2) {
    goto LABEL_7;
  }
  unint64_t v5 = -1;
  if (!a2) {
    unint64_t v5 = 7;
  }
  if (a2 == 1) {
    unint64_t v5 = 7;
  }
  unsigned int v6 = __clz(v5);
  if (v6 >= 0x3E) {
LABEL_7:
  }
    size_t v7 = 8;
  else {
    size_t v7 = 1 << -(char)v6;
  }
  memptr = 0;
  char v8 = 3;
  if (a2 == 2) {
    char v8 = 0;
  }
  malloc_type_posix_memalign(&memptr, v7, a3 << v8, 0x1040A8DAuLL);
  uint64_t v9 = *v4;
  uint64_t *v4 = (uint64_t)memptr;
  if (v9) {
    sub_2DB68((uint64_t (**)(uint64_t))(a1 + 24), v9);
  }
  *(void *)(a1 + 24) = &_free;
  return a1;
}

void sub_D490(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v3;
  *unint64_t v3 = 0;
  if (v5) {
    sub_2DB68((uint64_t (**)(uint64_t))(v1 + 24), v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t agxps_timeseries_copy(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 0;
}

void sub_D52C()
{
}

uint64_t agxps_timeseries_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    *(void *)(result + 16) = 0;
    if (v1) {
      sub_2DB68((uint64_t (**)(uint64_t))(result + 24), v1);
    }
    operator delete();
  }
  return result;
}

uint64_t agxps_timeseries_get_data(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t agxps_timeseries_get_length(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

unsigned int *agxps_timeseries_get_datatype(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t sub_D5D4()
{
  return 0;
}

BOOL sub_D5E0(int a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a1 == a3)
  {
    BOOL v4 = a4 == a2;
    BOOL v5 = a2 == a4;
    BOOL v6 = *(double *)&a2 == *(double *)&a4;
    if (a1) {
      BOOL v6 = a4 == a2;
    }
    if (a1 != 1) {
      BOOL v5 = v6;
    }
    if (a1 != 2) {
      return v5;
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t sub_D634(unsigned int a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3 - 3;
  if (a1 - 3 > 0xFFFFFFFD)
  {
    unsigned int v4 = a3;
    if (v3 < 0xFFFFFFFE) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v4 = a1;
    if (v3 >= 0xFFFFFFFE)
    {
      if (!a1) {
        goto LABEL_21;
      }
LABEL_13:
      if (a1 == 2)
      {
        if (a3 == 2)
        {
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }
        else if (a3 == 1)
        {
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }
        else
        {
          if (a3) {
            return v4;
          }
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }
      }
      else
      {
        if (a1 != 1) {
          return v4;
        }
        if (a3 == 2)
        {
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }
        else if (a3 == 1)
        {
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }
        else
        {
          if (a3) {
            return v4;
          }
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }
      }
      return 2;
    }
  }
  if (a3 != 2 || a1 == 2) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = a1;
  }
  if (a1) {
    goto LABEL_13;
  }
LABEL_21:
  if (a3 == 2)
  {
    if (v4 != 2)
    {
      if (v4 != 1) {
        return v4;
      }
      return 1;
    }
    return 2;
  }
  if (a3 == 1)
  {
    if (v4 != 2)
    {
      if (v4 != 1) {
        return v4;
      }
      return 1;
    }
    return 2;
  }
  if (a3) {
    return v4;
  }
  switch(v4)
  {
    case 2u:
      return 2;
    case 1u:
      return 1;
    case 0u:
      return 0;
  }
  return v4;
}

uint64_t sub_D8B4(unsigned int a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3 - 3;
  if (a1 - 3 > 0xFFFFFFFD)
  {
    unsigned int v4 = a3;
    if (v3 < 0xFFFFFFFE) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v4 = a1;
    if (v3 >= 0xFFFFFFFE)
    {
      if (!a1) {
        goto LABEL_21;
      }
LABEL_13:
      if (a1 == 2)
      {
        if (a3 == 2)
        {
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }
        else if (a3 == 1)
        {
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }
        else
        {
          if (a3) {
            return v4;
          }
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }
      }
      else
      {
        if (a1 != 1) {
          return v4;
        }
        if (a3 == 2)
        {
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }
        else
        {
          if (a3 != 1)
          {
            if (a3) {
              return v4;
            }
            if (v4 != 2)
            {
              if (v4 != 1) {
                return v4;
              }
              return 1;
            }
            return 2;
          }
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }
      }
      return 1;
    }
  }
  if (a3 != 2 || a1 == 2) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = a1;
  }
  if (a1) {
    goto LABEL_13;
  }
LABEL_21:
  if (a3 == 2)
  {
    if (v4 == 2) {
      return 2;
    }
    if (v4 != 1) {
      return v4;
    }
    return 1;
  }
  if (a3 == 1)
  {
    if (v4 == 2) {
      return 2;
    }
    if (v4 != 1) {
      return v4;
    }
    return 1;
  }
  if (a3) {
    return v4;
  }
  if (v4 != 2)
  {
    if (v4 != 1) {
      return v4;
    }
    return 1;
  }
  return 2;
}

void sub_DB68(uint64_t a1)
{
  uint64_t v6 = a1;
  off_770D78();
  if (!*v3)
  {
    *(unsigned char *)v2(v1) = 1;
    off_770D60();
    *BOOL v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v5);
  }
  off_770D60();
  sub_2DBBC(v4, &v6);
}

uint64_t sub_DC14()
{
  off_770D78();
  if (!*v2)
  {
    *(unsigned char *)v1(v0) = 1;
    off_770D60();
    *BOOL v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v5);
  }
  off_770D60();
  --v3[5];

  return sub_2E3C8(v3, 1);
}

int *sub_DCCC(unsigned int *a1, unsigned int *a2)
{
  unsigned int v4 = (int *)sub_E9B4(a1, a2);

  return agxps_timeseries_add_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_add_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((unsigned char *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v275 = (char *)*((void *)a1 + 2);
                    v276 = (char *)*((void *)a2 + 2);
                    v277 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v279 = *v275++;
                      char v278 = v279;
                      char v280 = *v276++;
                      *v277++ = v280 + v278;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v119 = (char *)*((void *)a1 + 2);
                  v120 = (char *)*((void *)a2 + 2);
                  v121 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v123 = *v119++;
                    char v122 = v123;
                    char v124 = *v120++;
                    *v121++ = v124 + v122;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v281 = (unsigned __int8 *)*((void *)a1 + 2);
                    v282 = (unsigned __int8 *)*((void *)a2 + 2);
                    v283 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v285 = *v281++;
                      uint64_t v284 = v285;
                      unsigned int v286 = *v282++;
                      *v283++ = v286 + v284;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v125 = (unsigned __int8 *)*((void *)a1 + 2);
                  v126 = (unsigned __int8 *)*((void *)a2 + 2);
                  v127 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v129 = *v125++;
                    uint64_t v128 = v129;
                    unsigned int v130 = *v126++;
                    *v127++ = v130 + v128;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v195 = (unsigned __int8 *)*((void *)a1 + 2);
                    v196 = (unsigned __int8 *)*((void *)a2 + 2);
                    v197 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v198 = *v195++;
                      double v199 = (double)v198;
                      unsigned int v200 = *v196++;
                      *v197++ = v199 + (double)v200;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v39 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v40 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v41 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v42 = *v39++;
                    double v43 = (double)v42;
                    unsigned int v44 = *v40++;
                    *v41++ = v43 + (double)v44;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v287 = (char *)*((void *)a1 + 2);
                    v288 = (char *)*((void *)a2 + 2);
                    v289 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v291 = *v287++;
                      char v290 = v291;
                      char v292 = *v288;
                      v288 += 8;
                      *v289++ = v290 + v292;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v131 = (char *)*((void *)a1 + 2);
                  v132 = (char *)*((void *)a2 + 2);
                  v133 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v135 = *v131++;
                    char v134 = v135;
                    char v136 = *v132;
                    v132 += 8;
                    *v133++ = v134 + v136;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v293 = (unsigned __int8 *)*((void *)a1 + 2);
                    v294 = (uint64_t *)*((void *)a2 + 2);
                    v295 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v297 = *v293++;
                      uint64_t v296 = v297;
                      uint64_t v298 = *v294++;
                      *v295++ = v298 + v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((void *)a1 + 2);
                  v138 = (uint64_t *)*((void *)a2 + 2);
                  v139 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v141 = *v137++;
                    uint64_t v140 = v141;
                    uint64_t v142 = *v138++;
                    *v139++ = v142 + v140;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v201 = (unsigned __int8 *)*((void *)a1 + 2);
                    v202 = (unint64_t *)*((void *)a2 + 2);
                    v203 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v204 = *v201++;
                      double v205 = (double)v204;
                      unint64_t v206 = *v202++;
                      *v203++ = v205 + (double)v206;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unint64_t v50 = *v46++;
                    *v47++ = v49 + (double)v50;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v230 = (char *)*((void *)a1 + 2);
                    v231 = (double *)*((void *)a2 + 2);
                    v232 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v234 = *v230++;
                      char v233 = v234;
                      double v235 = *v231++;
                      *v232++ = v233 + (int)v235;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v74 = (char *)*((void *)a1 + 2);
                  v75 = (double *)*((void *)a2 + 2);
                  v76 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v78 = *v74++;
                    char v77 = v78;
                    double v79 = *v75++;
                    *v76++ = v77 + (int)v79;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v236 = (unsigned __int8 *)*((void *)a1 + 2);
                    v237 = (double *)*((void *)a2 + 2);
                    v238 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v240 = *v236++;
                      uint64_t v239 = v240;
                      double v241 = *v237++;
                      *v238++ = (unint64_t)v241 + v239;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v80 = (unsigned __int8 *)*((void *)a1 + 2);
                  v81 = (double *)*((void *)a2 + 2);
                  v82 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v84 = *v80++;
                    uint64_t v83 = v84;
                    double v85 = *v81++;
                    *v82++ = (unint64_t)v85 + v83;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v172 = (unsigned __int8 *)*((void *)a1 + 2);
                    v173 = (double *)*((void *)a2 + 2);
                    v174 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v175 = *v172++;
                      double v176 = (double)v175;
                      double v177 = *v173++;
                      *v174++ = v177 + v176;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  size_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a2 + 2);
                  unint64_t v18 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v19 = *v16++;
                    double v20 = (double)v19;
                    double v21 = *v17++;
                    *v18++ = v21 + v20;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v299 = (char *)*((void *)a1 + 2);
                    v300 = (char *)*((void *)a2 + 2);
                    v301 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v303 = *v299;
                      v299 += 8;
                      char v302 = v303;
                      char v304 = *v300++;
                      *v301++ = v304 + v302;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v143 = (char *)*((void *)a1 + 2);
                  v144 = (char *)*((void *)a2 + 2);
                  v145 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v147 = *v143;
                    v143 += 8;
                    char v146 = v147;
                    char v148 = *v144++;
                    *v145++ = v148 + v146;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (uint64_t *)*((void *)a1 + 2);
                    v306 = (unsigned __int8 *)*((void *)a2 + 2);
                    v307 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v309 = *v305++;
                      uint64_t v308 = v309;
                      LODWORD(v309) = *v306++;
                      *v307++ = v308 + v309;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v149 = (uint64_t *)*((void *)a1 + 2);
                  v150 = (unsigned __int8 *)*((void *)a2 + 2);
                  v151 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v153 = *v149++;
                    uint64_t v152 = v153;
                    LODWORD(v153) = *v150++;
                    *v151++ = v152 + v153;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v207 = (unint64_t *)*((void *)a1 + 2);
                    v208 = (unsigned __int8 *)*((void *)a2 + 2);
                    v209 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v210 = *v207++;
                      double v211 = (double)v210;
                      LODWORD(v210) = *v208++;
                      *v209++ = v211 + (double)v210;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v51 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v53 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v54 = *v51++;
                    double v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 + (double)v54;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v310 = (char *)*((void *)a1 + 2);
                    v311 = (char *)*((void *)a2 + 2);
                    v312 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v314 = *v310;
                      v310 += 8;
                      char v313 = v314;
                      char v315 = *v311;
                      v311 += 8;
                      *v312++ = v315 + v313;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v154 = (char *)*((void *)a1 + 2);
                  v155 = (char *)*((void *)a2 + 2);
                  v156 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v158 = *v154;
                    v154 += 8;
                    char v157 = v158;
                    char v159 = *v155;
                    v155 += 8;
                    *v156++ = v159 + v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v316 = (uint64_t *)*((void *)a1 + 2);
                    v317 = (uint64_t *)*((void *)a2 + 2);
                    v318 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v320 = *v316++;
                      uint64_t v319 = v320;
                      uint64_t v321 = *v317++;
                      *v318++ = v321 + v319;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v160 = (uint64_t *)*((void *)a1 + 2);
                  v161 = (uint64_t *)*((void *)a2 + 2);
                  v162 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v164 = *v160++;
                    uint64_t v163 = v164;
                    uint64_t v165 = *v161++;
                    *v162++ = v165 + v163;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v212 = (unint64_t *)*((void *)a1 + 2);
                    v213 = (unint64_t *)*((void *)a2 + 2);
                    v214 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v215 = *v212++;
                      unint64_t v216 = v215;
                      unint64_t v217 = *v213++;
                      *v214++ = (double)v216 + (double)v217;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  long long v56 = (unint64_t *)*((void *)a1 + 2);
                  long long v57 = (unint64_t *)*((void *)a2 + 2);
                  long long v58 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v59 = *v56++;
                    unint64_t v60 = v59;
                    unint64_t v61 = *v57++;
                    *v58++ = (double)v60 + (double)v61;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v242 = (char *)*((void *)a1 + 2);
                    v243 = (double *)*((void *)a2 + 2);
                    v244 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v246 = *v242;
                      v242 += 8;
                      char v245 = v246;
                      double v247 = *v243++;
                      *v244++ = (int)v247 + v245;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v86 = (char *)*((void *)a1 + 2);
                  v87 = (double *)*((void *)a2 + 2);
                  v88 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v90 = *v86;
                    v86 += 8;
                    char v89 = v90;
                    double v91 = *v87++;
                    *v88++ = (int)v91 + v89;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v248 = (uint64_t *)*((void *)a1 + 2);
                    v249 = (double *)*((void *)a2 + 2);
                    v250 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v252 = *v248++;
                      uint64_t v251 = v252;
                      double v253 = *v249++;
                      *v250++ = v251 + (unint64_t)v253;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v92 = (uint64_t *)*((void *)a1 + 2);
                  v93 = (double *)*((void *)a2 + 2);
                  v94 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v96 = *v92++;
                    uint64_t v95 = v96;
                    double v97 = *v93++;
                    *v94++ = v95 + (unint64_t)v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((void *)a1 + 2);
                    v179 = (double *)*((void *)a2 + 2);
                    v180 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v181 = *v178++;
                      double v182 = (double)v181;
                      double v183 = *v179++;
                      *v180++ = v183 + v182;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  BOOL v22 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a2 + 2);
                  unint64_t v24 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v25 = *v22++;
                    double v26 = (double)v25;
                    double v27 = *v23++;
                    *v24++ = v27 + v26;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v254 = (double *)*((void *)a1 + 2);
                    v255 = (unsigned char *)*((void *)a2 + 2);
                    v256 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v257 = *v254++;
                      int v258 = (int)v257;
                      LOBYTE(v257) = *v255++;
                      *v256++ = LOBYTE(v257) + v258;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v98 = (double *)*((void *)a1 + 2);
                  v99 = (unsigned char *)*((void *)a2 + 2);
                  v100 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v101 = *v98++;
                    int v102 = (int)v101;
                    LOBYTE(v101) = *v99++;
                    *v100++ = LOBYTE(v101) + v102;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((void *)a1 + 2);
                    v260 = (unsigned __int8 *)*((void *)a2 + 2);
                    v261 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v262 = *v259++;
                      unint64_t v263 = (unint64_t)v262;
                      LODWORD(v262) = *v260++;
                      *v261++ = LODWORD(v262) + v263;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v103 = (double *)*((void *)a1 + 2);
                  v104 = (unsigned __int8 *)*((void *)a2 + 2);
                  v105 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v106 = *v103++;
                    unint64_t v107 = (unint64_t)v106;
                    LODWORD(v106) = *v104++;
                    *v105++ = LODWORD(v106) + v107;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v184 = (double *)*((void *)a1 + 2);
                    v185 = (unsigned __int8 *)*((void *)a2 + 2);
                    v186 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v187 = *v184++;
                      double v188 = v187;
                      LODWORD(v187) = *v185++;
                      *v186++ = v188 + (double)LODWORD(v187);
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v28 = (double *)*((void *)a1 + 2);
                  uint64_t v29 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v30 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v31 = *v28++;
                    double v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 + (double)LODWORD(v31);
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v264 = (double *)*((void *)a1 + 2);
                    v265 = (unsigned char *)*((void *)a2 + 2);
                    v266 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v267 = *v264++;
                      int v268 = (int)v267;
                      LOBYTE(v267) = *v265;
                      v265 += 8;
                      *v266++ = LOBYTE(v267) + v268;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v108 = (double *)*((void *)a1 + 2);
                  v109 = (unsigned char *)*((void *)a2 + 2);
                  v110 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v111 = *v108++;
                    int v112 = (int)v111;
                    LOBYTE(v111) = *v109;
                    v109 += 8;
                    *v110++ = LOBYTE(v111) + v112;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v269 = (double *)*((void *)a1 + 2);
                    v270 = (uint64_t *)*((void *)a2 + 2);
                    v271 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v272 = *v269++;
                      unint64_t v273 = (unint64_t)v272;
                      uint64_t v274 = *v270++;
                      *v271++ = v274 + v273;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v113 = (double *)*((void *)a1 + 2);
                  v114 = (uint64_t *)*((void *)a2 + 2);
                  v115 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v116 = *v113++;
                    unint64_t v117 = (unint64_t)v116;
                    uint64_t v118 = *v114++;
                    *v115++ = v118 + v117;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v189 = (double *)*((void *)a1 + 2);
                    v190 = (unint64_t *)*((void *)a2 + 2);
                    v191 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v192 = *v189++;
                      double v193 = v192;
                      unint64_t v194 = *v190++;
                      *v191++ = v193 + (double)v194;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v33 = (double *)*((void *)a1 + 2);
                  uint64_t v34 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v35 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v36 = *v33++;
                    double v37 = v36;
                    unint64_t v38 = *v34++;
                    *v35++ = v37 + (double)v38;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v218 = (double *)*((void *)a1 + 2);
                    v219 = (double *)*((void *)a2 + 2);
                    v220 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v221 = *v218++;
                      int v222 = (int)v221;
                      double v223 = *v219++;
                      *v220++ = (int)v223 + v222;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v62 = (double *)*((void *)a1 + 2);
                  v63 = (double *)*((void *)a2 + 2);
                  v64 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v65 = *v62++;
                    int v66 = (int)v65;
                    double v67 = *v63++;
                    *v64++ = (int)v67 + v66;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v224 = (double *)*((void *)a1 + 2);
                    v225 = (double *)*((void *)a2 + 2);
                    v226 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v227 = *v224++;
                      unint64_t v228 = (unint64_t)v227;
                      double v229 = *v225++;
                      *v226++ = (unint64_t)v229 + v228;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v68 = (double *)*((void *)a1 + 2);
                  v69 = (double *)*((void *)a2 + 2);
                  v70 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v71 = *v68++;
                    unint64_t v72 = (unint64_t)v71;
                    double v73 = *v69++;
                    *v70++ = (unint64_t)v73 + v72;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v166 = (double *)*((void *)a1 + 2);
                    v167 = (double *)*((void *)a2 + 2);
                    v168 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v169 = *v166++;
                      double v170 = v169;
                      double v171 = *v167++;
                      *v168++ = v170 + v171;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  uint8x8_t v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    *v11++ = v13 + v14;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

uint64_t sub_E9B4(unsigned int *a1, unsigned int *a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (a2)
    {
LABEL_3:
      uint64_t v3 = *a2;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
LABEL_6:
  unsigned int v4 = v3 - 3;
  if ((v2 - 3) > 0xFFFFFFFD)
  {
    if (v4 < 0xFFFFFFFE) {
      goto LABEL_16;
    }
  }
  else if (v4 >= 0xFFFFFFFE)
  {
    uint64_t v3 = v2;
    goto LABEL_16;
  }
  if (v3 != 2 || v2 == 2) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = v2;
  }
LABEL_16:
  if (a1) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  else {
    uint64_t v6 = 0;
  }
  off_770D78();
  if (!*v9)
  {
    *(unsigned char *)v8(v7) = 1;
    off_770D60();
    *double v14 = 0u;
    v14[1] = 0u;
    v14[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v14);
  }
  off_770D60();
  unint64_t v11 = v10[5] + v10[4] - 1;
  uint64_t v12 = *(void *)(*(void *)(v10[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));

  return sub_176E24(v12, v3, v6);
}

uint64_t sub_EAF4(unsigned int *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    unsigned int v3 = a2 - 3;
    if ((v2 - 3) > 0xFFFFFFFD)
    {
      if (v3 < 0xFFFFFFFE)
      {
        uint64_t v2 = a2;
LABEL_16:
        uint64_t v4 = *((void *)a1 + 1);
        goto LABEL_17;
      }
    }
    else if (v3 >= 0xFFFFFFFE)
    {
      goto LABEL_16;
    }
    if (v2 != 2 && a2 == 2) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = a2;
    }
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  if ((a2 - 3) >= 0xFFFFFFFE) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = a2;
  }
LABEL_17:
  off_770D78();
  if (!*v8)
  {
    *(unsigned char *)v7(v6) = 1;
    off_770D60();
    *double v13 = 0u;
    v13[1] = 0u;
    v13[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v13);
  }
  off_770D60();
  unint64_t v10 = v9[5] + v9[4] - 1;
  uint64_t v11 = *(void *)(*(void *)(v9[1] + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF));

  return sub_176E24(v11, v2, v4);
}

int *sub_EC28(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = (int *)sub_E9B4(a1, a2);

  return agxps_timeseries_sub_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_sub_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((unsigned char *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v304 = (unsigned __int8 *)*((void *)a1 + 2);
                    v305 = (unsigned __int8 *)*((void *)a2 + 2);
                    v306 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v308 = *v304++;
                      unsigned int v307 = v308;
                      unsigned int v309 = *v305++;
                      BOOL v68 = v307 >= v309;
                      char v310 = v307 - v309;
                      if (!v68) {
                        char v310 = 0;
                      }
                      *v306++ = v310;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v130 = (unsigned __int8 *)*((void *)a1 + 2);
                  v131 = (unsigned __int8 *)*((void *)a2 + 2);
                  v132 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v134 = *v130++;
                    unsigned int v133 = v134;
                    unsigned int v135 = *v131++;
                    BOOL v68 = v133 >= v135;
                    char v136 = v133 - v135;
                    if (!v68) {
                      char v136 = 0;
                    }
                    *v132++ = v136;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v311 = (unsigned __int8 *)*((void *)a1 + 2);
                    v312 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v313 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v315 = *v311++;
                      unint64_t v314 = v315;
                      unsigned int v316 = *v312++;
                      BOOL v68 = v314 >= v316;
                      unint64_t v317 = v314 - v316;
                      if (!v68) {
                        unint64_t v317 = 0;
                      }
                      *v313++ = v317;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((void *)a1 + 2);
                  v138 = (unsigned __int8 *)*((void *)a2 + 2);
                  v139 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v141 = *v137++;
                    unint64_t v140 = v141;
                    unsigned int v142 = *v138++;
                    BOOL v68 = v140 >= v142;
                    unint64_t v143 = v140 - v142;
                    if (!v68) {
                      unint64_t v143 = 0;
                    }
                    *v139++ = v143;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v214 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v215 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v216 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v217 = *v214++;
                      double v218 = (double)v217;
                      unsigned int v219 = *v215++;
                      *v216++ = v218 - (double)v219;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v39 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v40 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v41 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v42 = *v39++;
                    double v43 = (double)v42;
                    unsigned int v44 = *v40++;
                    *v41++ = v43 - (double)v44;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v319 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v320 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v322 = *v318++;
                      unsigned int v321 = v322;
                      unsigned int v323 = *v319;
                      v319 += 8;
                      BOOL v68 = v321 >= v323;
                      char v324 = v321 - v323;
                      if (!v68) {
                        char v324 = 0;
                      }
                      *v320++ = v324;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v144 = (unsigned __int8 *)*((void *)a1 + 2);
                  v145 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v146 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v148 = *v144++;
                    unsigned int v147 = v148;
                    unsigned int v149 = *v145;
                    v145 += 8;
                    BOOL v68 = v147 >= v149;
                    char v150 = v147 - v149;
                    if (!v68) {
                      char v150 = 0;
                    }
                    *v146++ = v150;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((void *)a1 + 2);
                    v326 = (unint64_t *)*((void *)a2 + 2);
                    v327 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v329 = *v325++;
                      unint64_t v328 = v329;
                      unint64_t v330 = *v326++;
                      BOOL v68 = v328 >= v330;
                      unint64_t v331 = v328 - v330;
                      if (!v68) {
                        unint64_t v331 = 0;
                      }
                      *v327++ = v331;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v151 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v152 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v153 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v155 = *v151++;
                    unint64_t v154 = v155;
                    unint64_t v156 = *v152++;
                    BOOL v68 = v154 >= v156;
                    unint64_t v157 = v154 - v156;
                    if (!v68) {
                      unint64_t v157 = 0;
                    }
                    *v153++ = v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v220 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v221 = (unint64_t *)*((void *)a2 + 2);
                    int v222 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v223 = *v220++;
                      double v224 = (double)v223;
                      unint64_t v225 = *v221++;
                      *v222++ = v224 - (double)v225;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unint64_t v50 = *v46++;
                    *v47++ = v49 - (double)v50;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v251 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v252 = (double *)*((void *)a2 + 2);
                    double v253 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v255 = *v251++;
                      unsigned int v254 = v255;
                      double v256 = *v252++;
                      BOOL v68 = v254 >= (int)v256;
                      unsigned int v257 = v254 - (int)v256;
                      if (!v68) {
                        LOBYTE(v257) = 0;
                      }
                      *v253++ = v257;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v77 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v78 = (double *)*((void *)a2 + 2);
                  double v79 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v81 = *v77++;
                    unsigned int v80 = v81;
                    double v82 = *v78++;
                    BOOL v68 = v80 >= (int)v82;
                    unsigned int v83 = v80 - (int)v82;
                    if (!v68) {
                      LOBYTE(v83) = 0;
                    }
                    *v79++ = v83;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    int v258 = (unsigned __int8 *)*((void *)a1 + 2);
                    v259 = (double *)*((void *)a2 + 2);
                    v260 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v262 = *v258++;
                      unint64_t v261 = v262;
                      double v263 = *v259++;
                      BOOL v68 = v261 >= (unint64_t)v263;
                      unint64_t v264 = v261 - (unint64_t)v263;
                      if (!v68) {
                        unint64_t v264 = 0;
                      }
                      *v260++ = v264;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v84 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v85 = (double *)*((void *)a2 + 2);
                  v86 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v88 = *v84++;
                    unint64_t v87 = v88;
                    double v89 = *v85++;
                    BOOL v68 = v87 >= (unint64_t)v89;
                    unint64_t v90 = v87 - (unint64_t)v89;
                    if (!v68) {
                      unint64_t v90 = 0;
                    }
                    *v86++ = v90;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v191 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v192 = (double *)*((void *)a2 + 2);
                    double v193 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v194 = *v191++;
                      double v195 = (double)v194;
                      double v196 = *v192++;
                      *v193++ = v195 - v196;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  size_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a2 + 2);
                  unint64_t v18 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v19 = *v16++;
                    double v20 = (double)v19;
                    double v21 = *v17++;
                    *v18++ = v20 - v21;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((void *)a1 + 2);
                    v333 = (unsigned __int8 *)*((void *)a2 + 2);
                    v334 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v336 = *v332;
                      v332 += 8;
                      unsigned int v335 = v336;
                      unsigned int v337 = *v333++;
                      BOOL v68 = v335 >= v337;
                      char v338 = v335 - v337;
                      if (!v68) {
                        char v338 = 0;
                      }
                      *v334++ = v338;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v158 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v159 = (unsigned __int8 *)*((void *)a2 + 2);
                  v160 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v162 = *v158;
                    v158 += 8;
                    unsigned int v161 = v162;
                    unsigned int v163 = *v159++;
                    BOOL v68 = v161 >= v163;
                    char v164 = v161 - v163;
                    if (!v68) {
                      char v164 = 0;
                    }
                    *v160++ = v164;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unint64_t *)*((void *)a1 + 2);
                    v340 = (unsigned __int8 *)*((void *)a2 + 2);
                    v341 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v343 = *v339++;
                      unint64_t v342 = v343;
                      LODWORD(v343) = *v340++;
                      BOOL v68 = v342 >= v343;
                      unint64_t v344 = v342 - v343;
                      if (!v68) {
                        unint64_t v344 = 0;
                      }
                      *v341++ = v344;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v165 = (unint64_t *)*((void *)a1 + 2);
                  v166 = (unsigned __int8 *)*((void *)a2 + 2);
                  v167 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v169 = *v165++;
                    unint64_t v168 = v169;
                    LODWORD(v169) = *v166++;
                    BOOL v68 = v168 >= v169;
                    unint64_t v170 = v168 - v169;
                    if (!v68) {
                      unint64_t v170 = 0;
                    }
                    *v167++ = v170;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v226 = (unint64_t *)*((void *)a1 + 2);
                    double v227 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v228 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v229 = *v226++;
                      double v230 = (double)v229;
                      LODWORD(v229) = *v227++;
                      *v228++ = v230 - (double)v229;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v51 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v53 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v54 = *v51++;
                    double v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 - (double)v54;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v345 = (unsigned __int8 *)*((void *)a1 + 2);
                    v346 = (unsigned __int8 *)*((void *)a2 + 2);
                    v347 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v349 = *v345;
                      v345 += 8;
                      unsigned int v348 = v349;
                      unsigned int v350 = *v346;
                      v346 += 8;
                      BOOL v68 = v348 >= v350;
                      char v351 = v348 - v350;
                      if (!v68) {
                        char v351 = 0;
                      }
                      *v347++ = v351;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v171 = (unsigned __int8 *)*((void *)a1 + 2);
                  v172 = (unsigned __int8 *)*((void *)a2 + 2);
                  v173 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v175 = *v171;
                    v171 += 8;
                    unsigned int v174 = v175;
                    unsigned int v176 = *v172;
                    v172 += 8;
                    BOOL v68 = v174 >= v176;
                    char v177 = v174 - v176;
                    if (!v68) {
                      char v177 = 0;
                    }
                    *v173++ = v177;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v352 = (unint64_t *)*((void *)a1 + 2);
                    v353 = (unint64_t *)*((void *)a2 + 2);
                    v354 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v356 = *v352++;
                      unint64_t v355 = v356;
                      unint64_t v357 = *v353++;
                      BOOL v68 = v355 >= v357;
                      unint64_t v358 = v355 - v357;
                      if (!v68) {
                        unint64_t v358 = 0;
                      }
                      *v354++ = v358;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v178 = (unint64_t *)*((void *)a1 + 2);
                  v179 = (unint64_t *)*((void *)a2 + 2);
                  v180 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v182 = *v178++;
                    unint64_t v181 = v182;
                    unint64_t v183 = *v179++;
                    BOOL v68 = v181 >= v183;
                    unint64_t v184 = v181 - v183;
                    if (!v68) {
                      unint64_t v184 = 0;
                    }
                    *v180++ = v184;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v231 = (unint64_t *)*((void *)a1 + 2);
                    v232 = (unint64_t *)*((void *)a2 + 2);
                    char v233 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v234 = *v231++;
                      unint64_t v235 = v234;
                      unint64_t v236 = *v232++;
                      *v233++ = (double)v235 - (double)v236;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  long long v56 = (unint64_t *)*((void *)a1 + 2);
                  long long v57 = (unint64_t *)*((void *)a2 + 2);
                  long long v58 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v59 = *v56++;
                    unint64_t v60 = v59;
                    unint64_t v61 = *v57++;
                    *v58++ = (double)v60 - (double)v61;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (unsigned __int8 *)*((void *)a1 + 2);
                    v266 = (double *)*((void *)a2 + 2);
                    double v267 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v269 = *v265;
                      v265 += 8;
                      unsigned int v268 = v269;
                      double v270 = *v266++;
                      BOOL v68 = v268 >= (int)v270;
                      unsigned int v271 = v268 - (int)v270;
                      if (!v68) {
                        LOBYTE(v271) = 0;
                      }
                      *v267++ = v271;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v91 = (unsigned __int8 *)*((void *)a1 + 2);
                  v92 = (double *)*((void *)a2 + 2);
                  v93 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v95 = *v91;
                    v91 += 8;
                    unsigned int v94 = v95;
                    double v96 = *v92++;
                    BOOL v68 = v94 >= (int)v96;
                    unsigned int v97 = v94 - (int)v96;
                    if (!v68) {
                      LOBYTE(v97) = 0;
                    }
                    *v93++ = v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v272 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v273 = (double *)*((void *)a2 + 2);
                    uint64_t v274 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v276 = *v272++;
                      unint64_t v275 = v276;
                      double v277 = *v273++;
                      BOOL v68 = v275 >= (unint64_t)v277;
                      unint64_t v278 = v275 - (unint64_t)v277;
                      if (!v68) {
                        unint64_t v278 = 0;
                      }
                      *v274++ = v278;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v98 = (unint64_t *)*((void *)a1 + 2);
                  v99 = (double *)*((void *)a2 + 2);
                  v100 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v102 = *v98++;
                    unint64_t v101 = v102;
                    double v103 = *v99++;
                    BOOL v68 = v101 >= (unint64_t)v103;
                    unint64_t v104 = v101 - (unint64_t)v103;
                    if (!v68) {
                      unint64_t v104 = 0;
                    }
                    *v100++ = v104;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v197 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v198 = (double *)*((void *)a2 + 2);
                    double v199 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v200 = *v197++;
                      double v201 = (double)v200;
                      double v202 = *v198++;
                      *v199++ = v201 - v202;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  BOOL v22 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a2 + 2);
                  unint64_t v24 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v25 = *v22++;
                    double v26 = (double)v25;
                    double v27 = *v23++;
                    *v24++ = v26 - v27;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v279 = (double *)*((void *)a1 + 2);
                    char v280 = (unsigned __int8 *)*((void *)a2 + 2);
                    v281 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v282 = *v279++;
                      unsigned int v283 = (int)v282;
                      LODWORD(v282) = *v280++;
                      BOOL v68 = v283 >= LODWORD(v282);
                      char v284 = v283 - LOBYTE(v282);
                      if (!v68) {
                        char v284 = 0;
                      }
                      *v281++ = v284;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v105 = (double *)*((void *)a1 + 2);
                  double v106 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v107 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v108 = *v105++;
                    unsigned int v109 = (int)v108;
                    LODWORD(v108) = *v106++;
                    BOOL v68 = v109 >= LODWORD(v108);
                    char v110 = v109 - LOBYTE(v108);
                    if (!v68) {
                      char v110 = 0;
                    }
                    *v107++ = v110;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v285 = (double *)*((void *)a1 + 2);
                    unsigned int v286 = (unsigned __int8 *)*((void *)a2 + 2);
                    v287 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v288 = *v285++;
                      unint64_t v289 = (unint64_t)v288;
                      LODWORD(v288) = *v286++;
                      BOOL v68 = v289 >= LODWORD(v288);
                      unint64_t v290 = v289 - LODWORD(v288);
                      if (!v68) {
                        unint64_t v290 = 0;
                      }
                      *v287++ = v290;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v111 = (double *)*((void *)a1 + 2);
                  int v112 = (unsigned __int8 *)*((void *)a2 + 2);
                  v113 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v114 = *v111++;
                    unint64_t v115 = (unint64_t)v114;
                    LODWORD(v114) = *v112++;
                    BOOL v68 = v115 >= LODWORD(v114);
                    unint64_t v116 = v115 - LODWORD(v114);
                    if (!v68) {
                      unint64_t v116 = 0;
                    }
                    *v113++ = v116;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v203 = (double *)*((void *)a1 + 2);
                    unsigned int v204 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v205 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v206 = *v203++;
                      double v207 = v206;
                      LODWORD(v206) = *v204++;
                      *v205++ = v207 - (double)LODWORD(v206);
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v28 = (double *)*((void *)a1 + 2);
                  uint64_t v29 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v30 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v31 = *v28++;
                    double v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 - (double)LODWORD(v31);
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v291 = (double *)*((void *)a1 + 2);
                    char v292 = (unsigned __int8 *)*((void *)a2 + 2);
                    v293 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v294 = *v291++;
                      unsigned int v295 = (int)v294;
                      LODWORD(v294) = *v292;
                      v292 += 8;
                      BOOL v68 = v295 >= LODWORD(v294);
                      char v296 = v295 - LOBYTE(v294);
                      if (!v68) {
                        char v296 = 0;
                      }
                      *v293++ = v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v117 = (double *)*((void *)a1 + 2);
                  uint64_t v118 = (unsigned __int8 *)*((void *)a2 + 2);
                  v119 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v120 = *v117++;
                    unsigned int v121 = (int)v120;
                    LODWORD(v120) = *v118;
                    v118 += 8;
                    BOOL v68 = v121 >= LODWORD(v120);
                    char v122 = v121 - LOBYTE(v120);
                    if (!v68) {
                      char v122 = 0;
                    }
                    *v119++ = v122;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v297 = (double *)*((void *)a1 + 2);
                    uint64_t v298 = (unint64_t *)*((void *)a2 + 2);
                    v299 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v300 = *v297++;
                      unint64_t v301 = (unint64_t)v300;
                      unint64_t v302 = *v298++;
                      BOOL v68 = v301 >= v302;
                      unint64_t v303 = v301 - v302;
                      if (!v68) {
                        unint64_t v303 = 0;
                      }
                      *v299++ = v303;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v123 = (double *)*((void *)a1 + 2);
                  char v124 = (unint64_t *)*((void *)a2 + 2);
                  v125 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v126 = *v123++;
                    unint64_t v127 = (unint64_t)v126;
                    unint64_t v128 = *v124++;
                    BOOL v68 = v127 >= v128;
                    unint64_t v129 = v127 - v128;
                    if (!v68) {
                      unint64_t v129 = 0;
                    }
                    *v125++ = v129;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v208 = (double *)*((void *)a1 + 2);
                    v209 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v210 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v211 = *v208++;
                      double v212 = v211;
                      unint64_t v213 = *v209++;
                      *v210++ = v212 - (double)v213;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v33 = (double *)*((void *)a1 + 2);
                  uint64_t v34 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v35 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v36 = *v33++;
                    double v37 = v36;
                    unint64_t v38 = *v34++;
                    *v35++ = v37 - (double)v38;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (double *)*((void *)a1 + 2);
                    v238 = (double *)*((void *)a2 + 2);
                    uint64_t v239 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v240 = *v237++;
                      unsigned int v241 = (int)v240;
                      double v242 = *v238++;
                      BOOL v68 = v241 >= (int)v242;
                      unsigned int v243 = v241 - (int)v242;
                      if (!v68) {
                        LOBYTE(v243) = 0;
                      }
                      *v239++ = v243;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v62 = (double *)*((void *)a1 + 2);
                  v63 = (double *)*((void *)a2 + 2);
                  v64 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v65 = *v62++;
                    unsigned int v66 = (int)v65;
                    double v67 = *v63++;
                    BOOL v68 = v66 >= (int)v67;
                    unsigned int v69 = v66 - (int)v67;
                    if (!v68) {
                      LOBYTE(v69) = 0;
                    }
                    *v64++ = v69;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v244 = (double *)*((void *)a1 + 2);
                    char v245 = (double *)*((void *)a2 + 2);
                    char v246 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v247 = *v244++;
                      unint64_t v248 = (unint64_t)v247;
                      double v249 = *v245++;
                      BOOL v68 = v248 >= (unint64_t)v249;
                      unint64_t v250 = v248 - (unint64_t)v249;
                      if (!v68) {
                        unint64_t v250 = 0;
                      }
                      *v246++ = v250;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v70 = (double *)*((void *)a1 + 2);
                  double v71 = (double *)*((void *)a2 + 2);
                  unint64_t v72 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v73 = *v70++;
                    unint64_t v74 = (unint64_t)v73;
                    double v75 = *v71++;
                    BOOL v68 = v74 >= (unint64_t)v75;
                    unint64_t v76 = v74 - (unint64_t)v75;
                    if (!v68) {
                      unint64_t v76 = 0;
                    }
                    *v72++ = v76;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v185 = (double *)*((void *)a1 + 2);
                    v186 = (double *)*((void *)a2 + 2);
                    double v187 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v188 = *v185++;
                      double v189 = v188;
                      double v190 = *v186++;
                      *v187++ = v189 - v190;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  uint64_t v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    *v11++ = v13 - v14;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *agxps_timeseries_sub_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  unint64_t result = 0;
  if (a3 && a4)
  {
    if (*((unsigned char *)a4 + 32)) {
      return 0;
    }
    uint64_t v7 = *((void *)a3 + 1);
    if (v7 != *((void *)a4 + 1))
    {
      return 0;
    }
    else
    {
      int v8 = *a3;
      int v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v188 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v189 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v190 = *v188++;
                        char v191 = a2 - v190;
                        if (a2 < v190) {
                          char v191 = 0;
                        }
                        *v189++ = v191;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v83 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v84 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v85 = *v83++;
                      char v86 = a2 - v85;
                      if (a2 < v85) {
                        char v86 = 0;
                      }
                      *v84++ = v86;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v192 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v193 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v194 = *v192++;
                        unint64_t v195 = a2 - (unint64_t)v194;
                        if (a2 < (unint64_t)v194) {
                          unint64_t v195 = 0;
                        }
                        *v193++ = v195;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v87 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v88 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v89 = *v87++;
                      unint64_t v90 = a2 - (unint64_t)v89;
                      if (a2 < (unint64_t)v89) {
                        unint64_t v90 = 0;
                      }
                      *v88++ = v90;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v130 = (unsigned __int8 *)*((void *)a3 + 2);
                      v131 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v132 = *v130++;
                        *v131++ = (double)a2 - (double)v132;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v25 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v26 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v27 = *v25++;
                      *v26++ = (double)a2 - (double)v27;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v196 = (unsigned __int8 *)*((void *)a3 + 2);
                      v197 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v198 = *v196;
                        v196 += 8;
                        char v199 = a2 - v198;
                        if (a2 < v198) {
                          char v199 = 0;
                        }
                        *v197++ = v199;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v91 = (unsigned __int8 *)*((void *)a3 + 2);
                    v92 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v93 = *v91;
                      v91 += 8;
                      char v94 = a2 - v93;
                      if (a2 < v93) {
                        char v94 = 0;
                      }
                      *v92++ = v94;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v200 = (unint64_t *)*((void *)a3 + 2);
                      double v201 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v202 = *v200++;
                        unint64_t v203 = a2 - v202;
                        if (a2 < v202) {
                          unint64_t v203 = 0;
                        }
                        *v201++ = v203;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v95 = (unint64_t *)*((void *)a3 + 2);
                    double v96 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v97 = *v95++;
                      unint64_t v98 = a2 - v97;
                      if (a2 < v97) {
                        unint64_t v98 = 0;
                      }
                      *v96++ = v98;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v133 = (unint64_t *)*((void *)a3 + 2);
                      unsigned int v134 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v135 = *v133++;
                        *v134++ = (double)a2 - (double)v135;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v28 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v29 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v30 = *v28++;
                      *v29++ = (double)a2 - (double)v30;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v152 = (double *)*((void *)a3 + 2);
                      uint64_t v153 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        double v154 = *v152++;
                        int v155 = a2 - (int)v154;
                        if (a2 < (int)v154) {
                          LOBYTE(v155) = 0;
                        }
                        *v153++ = v155;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v47 = (double *)*((void *)a3 + 2);
                    unsigned int v48 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v49 = *v47++;
                      int v50 = a2 - (int)v49;
                      if (a2 < (int)v49) {
                        LOBYTE(v50) = 0;
                      }
                      *v48++ = v50;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v156 = (double *)*((void *)a3 + 2);
                      unint64_t v157 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v158 = *v156++;
                        unint64_t v159 = a2 - (unint64_t)v158;
                        if (a2 < (unint64_t)v158) {
                          unint64_t v159 = 0;
                        }
                        *v157++ = v159;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    uint64_t v51 = (double *)*((void *)a3 + 2);
                    uint64_t v52 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v53 = *v51++;
                      unint64_t v54 = a2 - (unint64_t)v53;
                      if (a2 < (unint64_t)v53) {
                        unint64_t v54 = 0;
                      }
                      *v52++ = v54;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v118 = (double *)*((void *)a3 + 2);
                      v119 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v120 = *v118++;
                        *v119++ = (double)a2 - v120;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v13 = (double *)*((void *)a3 + 2);
                    double v14 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v15 = *v13++;
                      *v14++ = (double)a2 - v15;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v204 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v205 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v206 = *v204++;
                        char v207 = a2 - v206;
                        if (a2 < v206) {
                          char v207 = 0;
                        }
                        *v205++ = v207;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v99 = (unsigned __int8 *)*((void *)a3 + 2);
                    v100 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v101 = *v99++;
                      char v102 = a2 - v101;
                      if (a2 < v101) {
                        char v102 = 0;
                      }
                      *v100++ = v102;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v208 = (unsigned __int8 *)*((void *)a3 + 2);
                      v209 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v210 = *v208++;
                        unint64_t v211 = a2 - v210;
                        if (a2 < v210) {
                          unint64_t v211 = 0;
                        }
                        *v209++ = v211;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v103 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v104 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v105 = *v103++;
                      unint64_t v106 = a2 - v105;
                      if (a2 < v105) {
                        unint64_t v106 = 0;
                      }
                      *v104++ = v106;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v136 = (unsigned __int8 *)*((void *)a3 + 2);
                      v137 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v138 = *v136++;
                        *v137++ = (double)a2 - (double)v138;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v31 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v32 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v33 = *v31++;
                      *v32++ = (double)a2 - (double)v33;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v212 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v213 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v214 = *v212;
                        v212 += 8;
                        char v215 = a2 - v214;
                        if (a2 < v214) {
                          char v215 = 0;
                        }
                        *v213++ = v215;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v107 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v108 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v109 = *v107;
                      v107 += 8;
                      char v110 = a2 - v109;
                      if (a2 < v109) {
                        char v110 = 0;
                      }
                      *v108++ = v110;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v216 = (unint64_t *)*((void *)a3 + 2);
                      unsigned int v217 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v218 = *v216++;
                        uint64_t v219 = a2 - v218;
                        if (a2 < v218) {
                          uint64_t v219 = 0;
                        }
                        *v217++ = v219;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v111 = (unint64_t *)*((void *)a3 + 2);
                    int v112 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v113 = *v111++;
                      uint64_t v114 = a2 - v113;
                      if (a2 < v113) {
                        uint64_t v114 = 0;
                      }
                      *v112++ = v114;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v139 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v140 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v141 = *v139++;
                        *v140++ = (double)a2 - (double)v141;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    uint64_t v34 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v35 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v36 = *v34++;
                      *v35++ = (double)a2 - (double)v36;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v160 = (double *)*((void *)a3 + 2);
                      unsigned int v161 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        double v162 = *v160++;
                        int v163 = a2 - (int)v162;
                        if (a2 < (int)v162) {
                          LOBYTE(v163) = 0;
                        }
                        *v161++ = v163;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v55 = (double *)*((void *)a3 + 2);
                    long long v56 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v57 = *v55++;
                      int v58 = a2 - (int)v57;
                      if (a2 < (int)v57) {
                        LOBYTE(v58) = 0;
                      }
                      *v56++ = v58;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v164 = (double *)*((void *)a3 + 2);
                      uint64_t v165 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v166 = *v164++;
                        unint64_t v167 = a2 - (unint64_t)v166;
                        if (a2 < (unint64_t)v166) {
                          unint64_t v167 = 0;
                        }
                        *v165++ = v167;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v59 = (double *)*((void *)a3 + 2);
                    unint64_t v60 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v61 = *v59++;
                      unint64_t v62 = a2 - (unint64_t)v61;
                      if (a2 < (unint64_t)v61) {
                        unint64_t v62 = 0;
                      }
                      *v60++ = v62;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v121 = (double *)*((void *)a3 + 2);
                      char v122 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v123 = *v121++;
                        *v122++ = (double)a2 - v123;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    size_t v16 = (double *)*((void *)a3 + 2);
                    uint64_t v17 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v18 = *v16++;
                      *v17++ = (double)a2 - v18;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v168 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v169 = (unsigned char *)*((void *)a4 + 2);
                      unsigned int v170 = (int)*(double *)&a2;
                      do
                      {
                        unsigned int v171 = *v168++;
                        char v172 = v170 - v171;
                        if (v170 < v171) {
                          char v172 = 0;
                        }
                        *v169++ = v172;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v63 = (unsigned __int8 *)*((void *)a3 + 2);
                    v64 = (unsigned char *)*((void *)a4 + 2);
                    unsigned int v65 = (int)*(double *)&a2;
                    do
                    {
                      unsigned int v66 = *v63++;
                      char v67 = v65 - v66;
                      if (v65 < v66) {
                        char v67 = 0;
                      }
                      *v64++ = v67;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v173 = (unsigned __int8 *)*((void *)a3 + 2);
                      unsigned int v174 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v175 = (unint64_t)*(double *)&a2;
                      do
                      {
                        unsigned int v176 = *v173++;
                        unint64_t v177 = v175 - v176;
                        if (v175 < v176) {
                          unint64_t v177 = 0;
                        }
                        *v174++ = v177;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    BOOL v68 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v69 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v70 = (unint64_t)*(double *)&a2;
                    do
                    {
                      unsigned int v71 = *v68++;
                      unint64_t v72 = v70 - v71;
                      if (v70 < v71) {
                        unint64_t v72 = 0;
                      }
                      *v69++ = v72;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v124 = (unsigned __int8 *)*((void *)a3 + 2);
                      v125 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v126 = *v124++;
                        *v125++ = *(double *)&a2 - (double)v126;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v19 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v20 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v21 = *v19++;
                      *v20++ = *(double *)&a2 - (double)v21;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v178 = (unsigned __int8 *)*((void *)a3 + 2);
                      v179 = (unsigned char *)*((void *)a4 + 2);
                      unsigned int v180 = (int)*(double *)&a2;
                      do
                      {
                        unsigned int v181 = *v178;
                        v178 += 8;
                        char v182 = v180 - v181;
                        if (v180 < v181) {
                          char v182 = 0;
                        }
                        *v179++ = v182;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v73 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v74 = (unsigned char *)*((void *)a4 + 2);
                    unsigned int v75 = (int)*(double *)&a2;
                    do
                    {
                      unsigned int v76 = *v73;
                      v73 += 8;
                      char v77 = v75 - v76;
                      if (v75 < v76) {
                        char v77 = 0;
                      }
                      *v74++ = v77;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v183 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v184 = (void *)*((void *)a4 + 2);
                      unint64_t v185 = (unint64_t)*(double *)&a2;
                      do
                      {
                        unint64_t v186 = *v183++;
                        uint64_t v187 = v185 - v186;
                        if (v185 < v186) {
                          uint64_t v187 = 0;
                        }
                        *v184++ = v187;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    char v78 = (unint64_t *)*((void *)a3 + 2);
                    double v79 = (void *)*((void *)a4 + 2);
                    unint64_t v80 = (unint64_t)*(double *)&a2;
                    do
                    {
                      unint64_t v81 = *v78++;
                      uint64_t v82 = v80 - v81;
                      if (v80 < v81) {
                        uint64_t v82 = 0;
                      }
                      *v79++ = v82;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v127 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v128 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v129 = *v127++;
                        *v128++ = *(double *)&a2 - (double)v129;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    BOOL v22 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v23 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v24 = *v22++;
                      *v23++ = *(double *)&a2 - (double)v24;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v142 = (double *)*((void *)a3 + 2);
                      unint64_t v143 = (unsigned char *)*((void *)a4 + 2);
                      unsigned int v144 = (int)*(double *)&a2;
                      do
                      {
                        double v145 = *v142++;
                        unsigned int v146 = v144 - (int)v145;
                        if (v144 < (int)v145) {
                          LOBYTE(v146) = 0;
                        }
                        *v143++ = v146;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v37 = (double *)*((void *)a3 + 2);
                    unint64_t v38 = (unsigned char *)*((void *)a4 + 2);
                    unsigned int v39 = (int)*(double *)&a2;
                    do
                    {
                      double v40 = *v37++;
                      unsigned int v41 = v39 - (int)v40;
                      if (v39 < (int)v40) {
                        LOBYTE(v41) = 0;
                      }
                      *v38++ = v41;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v147 = (double *)*((void *)a3 + 2);
                      unsigned int v148 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v149 = (unint64_t)*(double *)&a2;
                      do
                      {
                        double v150 = *v147++;
                        unint64_t v151 = v149 - (unint64_t)v150;
                        if (v149 < (unint64_t)v150) {
                          unint64_t v151 = 0;
                        }
                        *v148++ = v151;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v42 = (double *)*((void *)a3 + 2);
                    double v43 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v44 = (unint64_t)*(double *)&a2;
                    do
                    {
                      double v45 = *v42++;
                      unint64_t v46 = v44 - (unint64_t)v45;
                      if (v44 < (unint64_t)v45) {
                        unint64_t v46 = 0;
                      }
                      *v43++ = v46;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v115 = (double *)*((void *)a3 + 2);
                      unint64_t v116 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v117 = *v115++;
                        *v116++ = *(double *)&a2 - v117;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v10 = (double *)*((void *)a3 + 2);
                    uint64_t v11 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v12 = *v10++;
                      *v11++ = *(double *)&a2 - v12;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return a4;
    }
  }
  return result;
}

int *agxps_timeseries_mul_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((unsigned char *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v275 = (char *)*((void *)a1 + 2);
                    unint64_t v276 = (char *)*((void *)a2 + 2);
                    double v277 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v279 = *v275++;
                      char v278 = v279;
                      char v280 = *v276++;
                      *v277++ = v280 * v278;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v119 = (char *)*((void *)a1 + 2);
                  double v120 = (char *)*((void *)a2 + 2);
                  unsigned int v121 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v123 = *v119++;
                    char v122 = v123;
                    char v124 = *v120++;
                    *v121++ = v124 * v122;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v281 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v282 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v283 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v285 = *v281++;
                      unsigned int v284 = v285;
                      unsigned int v286 = *v282++;
                      *v283++ = v286 * (unint64_t)v284;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v125 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v126 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v127 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v129 = *v125++;
                    unsigned int v128 = v129;
                    unsigned int v130 = *v126++;
                    *v127++ = v130 * (unint64_t)v128;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v195 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v196 = (unsigned __int8 *)*((void *)a2 + 2);
                    v197 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v198 = *v195++;
                      double v199 = (double)v198;
                      unsigned int v200 = *v196++;
                      *v197++ = v199 * (double)v200;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v39 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v40 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v41 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v42 = *v39++;
                    double v43 = (double)v42;
                    unsigned int v44 = *v40++;
                    *v41++ = v43 * (double)v44;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v287 = (char *)*((void *)a1 + 2);
                    double v288 = (char *)*((void *)a2 + 2);
                    unint64_t v289 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v291 = *v287++;
                      char v290 = v291;
                      char v292 = *v288;
                      v288 += 8;
                      *v289++ = v290 * v292;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v131 = (char *)*((void *)a1 + 2);
                  unsigned int v132 = (char *)*((void *)a2 + 2);
                  unsigned int v133 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v135 = *v131++;
                    char v134 = v135;
                    char v136 = *v132;
                    v132 += 8;
                    *v133++ = v134 * v136;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v293 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v294 = (uint64_t *)*((void *)a2 + 2);
                    unsigned int v295 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v297 = *v293++;
                      uint64_t v296 = v297;
                      uint64_t v298 = *v294++;
                      *v295++ = v298 * v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v138 = (uint64_t *)*((void *)a2 + 2);
                  v139 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v141 = *v137++;
                    uint64_t v140 = v141;
                    uint64_t v142 = *v138++;
                    *v139++ = v142 * v140;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v201 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v202 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v203 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v204 = *v201++;
                      double v205 = (double)v204;
                      unint64_t v206 = *v202++;
                      *v203++ = v205 * (double)v206;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unint64_t v50 = *v46++;
                    *v47++ = v49 * (double)v50;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v230 = (char *)*((void *)a1 + 2);
                    v231 = (double *)*((void *)a2 + 2);
                    v232 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v234 = *v230++;
                      char v233 = v234;
                      double v235 = *v231++;
                      *v232++ = v233 * (int)v235;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v74 = (char *)*((void *)a1 + 2);
                  unsigned int v75 = (double *)*((void *)a2 + 2);
                  unsigned int v76 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v78 = *v74++;
                    char v77 = v78;
                    double v79 = *v75++;
                    *v76++ = v77 * (int)v79;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v236 = (unsigned __int8 *)*((void *)a1 + 2);
                    v237 = (double *)*((void *)a2 + 2);
                    v238 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v240 = *v236++;
                      uint64_t v239 = v240;
                      double v241 = *v237++;
                      *v238++ = (unint64_t)v241 * v239;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v80 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v81 = (double *)*((void *)a2 + 2);
                  uint64_t v82 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v84 = *v80++;
                    uint64_t v83 = v84;
                    double v85 = *v81++;
                    *v82++ = (unint64_t)v85 * v83;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v172 = (unsigned __int8 *)*((void *)a1 + 2);
                    v173 = (double *)*((void *)a2 + 2);
                    unsigned int v174 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v175 = *v172++;
                      double v176 = (double)v175;
                      double v177 = *v173++;
                      *v174++ = v177 * v176;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  size_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a2 + 2);
                  double v18 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v19 = *v16++;
                    double v20 = (double)v19;
                    double v21 = *v17++;
                    *v18++ = v21 * v20;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v299 = (char *)*((void *)a1 + 2);
                    double v300 = (char *)*((void *)a2 + 2);
                    unint64_t v301 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v303 = *v299;
                      v299 += 8;
                      char v302 = v303;
                      char v304 = *v300++;
                      *v301++ = v304 * v302;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v143 = (char *)*((void *)a1 + 2);
                  unsigned int v144 = (char *)*((void *)a2 + 2);
                  double v145 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v147 = *v143;
                    v143 += 8;
                    char v146 = v147;
                    char v148 = *v144++;
                    *v145++ = v148 * v146;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (uint64_t *)*((void *)a1 + 2);
                    v306 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v307 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v309 = *v305++;
                      uint64_t v308 = v309;
                      LODWORD(v309) = *v306++;
                      *v307++ = v308 * v309;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v149 = (uint64_t *)*((void *)a1 + 2);
                  double v150 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v151 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v153 = *v149++;
                    uint64_t v152 = v153;
                    LODWORD(v153) = *v150++;
                    *v151++ = v152 * v153;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v207 = (unint64_t *)*((void *)a1 + 2);
                    v208 = (unsigned __int8 *)*((void *)a2 + 2);
                    v209 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v210 = *v207++;
                      double v211 = (double)v210;
                      LODWORD(v210) = *v208++;
                      *v209++ = v211 * (double)v210;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v51 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v53 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v54 = *v51++;
                    double v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 * (double)v54;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v310 = (char *)*((void *)a1 + 2);
                    v311 = (char *)*((void *)a2 + 2);
                    v312 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v314 = *v310;
                      v310 += 8;
                      char v313 = v314;
                      char v315 = *v311;
                      v311 += 8;
                      *v312++ = v315 * v313;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v154 = (char *)*((void *)a1 + 2);
                  int v155 = (char *)*((void *)a2 + 2);
                  unint64_t v156 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v158 = *v154;
                    v154 += 8;
                    char v157 = v158;
                    char v159 = *v155;
                    v155 += 8;
                    *v156++ = v159 * v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v316 = (uint64_t *)*((void *)a1 + 2);
                    unint64_t v317 = (uint64_t *)*((void *)a2 + 2);
                    v318 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v320 = *v316++;
                      uint64_t v319 = v320;
                      uint64_t v321 = *v317++;
                      *v318++ = v321 * v319;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v160 = (uint64_t *)*((void *)a1 + 2);
                  unsigned int v161 = (uint64_t *)*((void *)a2 + 2);
                  double v162 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v164 = *v160++;
                    uint64_t v163 = v164;
                    uint64_t v165 = *v161++;
                    *v162++ = v165 * v163;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v212 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v213 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v214 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v215 = *v212++;
                      unint64_t v216 = v215;
                      unint64_t v217 = *v213++;
                      *v214++ = (double)v216 * (double)v217;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  long long v56 = (unint64_t *)*((void *)a1 + 2);
                  double v57 = (unint64_t *)*((void *)a2 + 2);
                  int v58 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v59 = *v56++;
                    unint64_t v60 = v59;
                    unint64_t v61 = *v57++;
                    *v58++ = (double)v60 * (double)v61;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v242 = (char *)*((void *)a1 + 2);
                    unsigned int v243 = (double *)*((void *)a2 + 2);
                    v244 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      char v246 = *v242;
                      v242 += 8;
                      char v245 = v246;
                      double v247 = *v243++;
                      *v244++ = (int)v247 * v245;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v86 = (char *)*((void *)a1 + 2);
                  unint64_t v87 = (double *)*((void *)a2 + 2);
                  unsigned int v88 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    char v90 = *v86;
                    v86 += 8;
                    char v89 = v90;
                    double v91 = *v87++;
                    *v88++ = (int)v91 * v89;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v248 = (uint64_t *)*((void *)a1 + 2);
                    double v249 = (double *)*((void *)a2 + 2);
                    unint64_t v250 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v252 = *v248++;
                      uint64_t v251 = v252;
                      double v253 = *v249++;
                      *v250++ = v251 * (unint64_t)v253;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v92 = (uint64_t *)*((void *)a1 + 2);
                  unsigned int v93 = (double *)*((void *)a2 + 2);
                  char v94 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v96 = *v92++;
                    uint64_t v95 = v96;
                    double v97 = *v93++;
                    *v94++ = v95 * (unint64_t)v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((void *)a1 + 2);
                    v179 = (double *)*((void *)a2 + 2);
                    unsigned int v180 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v181 = *v178++;
                      double v182 = (double)v181;
                      double v183 = *v179++;
                      *v180++ = v183 * v182;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  BOOL v22 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a2 + 2);
                  unint64_t v24 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v25 = *v22++;
                    double v26 = (double)v25;
                    double v27 = *v23++;
                    *v24++ = v27 * v26;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v254 = (double *)*((void *)a1 + 2);
                    unsigned int v255 = (unsigned char *)*((void *)a2 + 2);
                    double v256 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v257 = *v254++;
                      int v258 = (int)v257;
                      LOBYTE(v257) = *v255++;
                      *v256++ = LOBYTE(v257) * v258;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v98 = (double *)*((void *)a1 + 2);
                  v99 = (unsigned char *)*((void *)a2 + 2);
                  v100 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v101 = *v98++;
                    int v102 = (int)v101;
                    LOBYTE(v101) = *v99++;
                    *v100++ = LOBYTE(v101) * v102;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((void *)a1 + 2);
                    v260 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v261 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v262 = *v259++;
                      unint64_t v263 = (unint64_t)v262;
                      LODWORD(v262) = *v260++;
                      *v261++ = LODWORD(v262) * v263;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v103 = (double *)*((void *)a1 + 2);
                  unint64_t v104 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v105 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v106 = *v103++;
                    unint64_t v107 = (unint64_t)v106;
                    LODWORD(v106) = *v104++;
                    *v105++ = LODWORD(v106) * v107;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v184 = (double *)*((void *)a1 + 2);
                    unint64_t v185 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v186 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v187 = *v184++;
                      double v188 = v187;
                      LODWORD(v187) = *v185++;
                      *v186++ = v188 * (double)LODWORD(v187);
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v28 = (double *)*((void *)a1 + 2);
                  uint64_t v29 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v30 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v31 = *v28++;
                    double v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 * (double)LODWORD(v31);
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v264 = (double *)*((void *)a1 + 2);
                    v265 = (unsigned char *)*((void *)a2 + 2);
                    v266 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v267 = *v264++;
                      int v268 = (int)v267;
                      LOBYTE(v267) = *v265;
                      v265 += 8;
                      *v266++ = LOBYTE(v267) * v268;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v108 = (double *)*((void *)a1 + 2);
                  unsigned int v109 = (unsigned char *)*((void *)a2 + 2);
                  char v110 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v111 = *v108++;
                    int v112 = (int)v111;
                    LOBYTE(v111) = *v109;
                    v109 += 8;
                    *v110++ = LOBYTE(v111) * v112;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v269 = (double *)*((void *)a1 + 2);
                    double v270 = (uint64_t *)*((void *)a2 + 2);
                    unsigned int v271 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v272 = *v269++;
                      unint64_t v273 = (unint64_t)v272;
                      uint64_t v274 = *v270++;
                      *v271++ = v274 * v273;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v113 = (double *)*((void *)a1 + 2);
                  uint64_t v114 = (uint64_t *)*((void *)a2 + 2);
                  unint64_t v115 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v116 = *v113++;
                    unint64_t v117 = (unint64_t)v116;
                    uint64_t v118 = *v114++;
                    *v115++ = v118 * v117;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v189 = (double *)*((void *)a1 + 2);
                    unsigned int v190 = (unint64_t *)*((void *)a2 + 2);
                    char v191 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v192 = *v189++;
                      double v193 = v192;
                      unint64_t v194 = *v190++;
                      *v191++ = v193 * (double)v194;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v33 = (double *)*((void *)a1 + 2);
                  uint64_t v34 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v35 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v36 = *v33++;
                    double v37 = v36;
                    unint64_t v38 = *v34++;
                    *v35++ = v37 * (double)v38;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v218 = (double *)*((void *)a1 + 2);
                    uint64_t v219 = (double *)*((void *)a2 + 2);
                    v220 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v221 = *v218++;
                      int v222 = (int)v221;
                      double v223 = *v219++;
                      *v220++ = (int)v223 * v222;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v62 = (double *)*((void *)a1 + 2);
                  v63 = (double *)*((void *)a2 + 2);
                  v64 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v65 = *v62++;
                    int v66 = (int)v65;
                    double v67 = *v63++;
                    *v64++ = (int)v67 * v66;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v224 = (double *)*((void *)a1 + 2);
                    unint64_t v225 = (double *)*((void *)a2 + 2);
                    v226 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v227 = *v224++;
                      unint64_t v228 = (unint64_t)v227;
                      double v229 = *v225++;
                      *v226++ = (unint64_t)v229 * v228;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  BOOL v68 = (double *)*((void *)a1 + 2);
                  unsigned int v69 = (double *)*((void *)a2 + 2);
                  unint64_t v70 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v71 = *v68++;
                    unint64_t v72 = (unint64_t)v71;
                    double v73 = *v69++;
                    *v70++ = (unint64_t)v73 * v72;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v166 = (double *)*((void *)a1 + 2);
                    unint64_t v167 = (double *)*((void *)a2 + 2);
                    unint64_t v168 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v169 = *v166++;
                      double v170 = v169;
                      double v171 = *v167++;
                      *v168++ = v170 * v171;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  uint64_t v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    *v11++ = v13 * v14;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *sub_11210(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  int v5 = a1;
  int v6 = (int *)sub_EAF4(a3, a1);

  return agxps_timeseries_mul_st(v5, a2, (int *)a3, v6, 1);
}

int *agxps_timeseries_mul_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  unint64_t result = 0;
  if (a3 && a4)
  {
    if (*((unsigned char *)a4 + 32)) {
      return 0;
    }
    uint64_t v7 = *((void *)a3 + 1);
    if (v7 != *((void *)a4 + 1))
    {
      return 0;
    }
    else
    {
      int v8 = *a3;
      int v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v148 = (char *)*((void *)a3 + 2);
                      unint64_t v149 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        char v150 = *v148++;
                        *v149++ = v150 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v67 = (char *)*((void *)a3 + 2);
                    BOOL v68 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v69 = *v67++;
                      *v68++ = v69 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v151 = (unsigned __int8 *)*((void *)a3 + 2);
                      uint64_t v152 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v153 = *v151++;
                        *v152++ = a2 * (unint64_t)v153;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v70 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v71 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v72 = *v70++;
                      *v71++ = a2 * (unint64_t)v72;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v106 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v107 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v108 = *v106++;
                        *v107++ = (double)a2 * (double)v108;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v25 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v26 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v27 = *v25++;
                      *v26++ = (double)a2 * (double)v27;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v154 = (char *)*((void *)a3 + 2);
                      int v155 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        char v156 = *v154;
                        v154 += 8;
                        *v155++ = v156 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v73 = (char *)*((void *)a3 + 2);
                    unint64_t v74 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v75 = *v73;
                      v73 += 8;
                      *v74++ = v75 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v157 = (uint64_t *)*((void *)a3 + 2);
                      char v158 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v159 = *v157++;
                        *v158++ = v159 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v76 = (uint64_t *)*((void *)a3 + 2);
                    char v77 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v78 = *v76++;
                      *v77++ = v78 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v109 = (unint64_t *)*((void *)a3 + 2);
                      char v110 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v111 = *v109++;
                        *v110++ = (double)a2 * (double)v111;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v28 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v29 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v30 = *v28++;
                      *v29++ = (double)a2 * (double)v30;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v124 = (double *)*((void *)a3 + 2);
                      v125 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        double v126 = *v124++;
                        *v125++ = (int)v126 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v43 = (double *)*((void *)a3 + 2);
                    unsigned int v44 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v45 = *v43++;
                      *v44++ = (int)v45 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v127 = (double *)*((void *)a3 + 2);
                      unsigned int v128 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v129 = *v127++;
                        *v128++ = a2 * (unint64_t)v129;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v46 = (double *)*((void *)a3 + 2);
                    unint64_t v47 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v48 = *v46++;
                      *v47++ = a2 * (unint64_t)v48;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v94 = (double *)*((void *)a3 + 2);
                      uint64_t v95 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v96 = *v94++;
                        *v95++ = v96 * (double)a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v13 = (double *)*((void *)a3 + 2);
                    double v14 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v15 = *v13++;
                      *v14++ = v15 * (double)a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v160 = (char *)*((void *)a3 + 2);
                      unsigned int v161 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        char v162 = *v160++;
                        *v161++ = v162 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v79 = (char *)*((void *)a3 + 2);
                    unint64_t v80 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v81 = *v79++;
                      *v80++ = v81 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v163 = (unsigned __int8 *)*((void *)a3 + 2);
                      uint64_t v164 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v165 = *v163++;
                        *v164++ = a2 * v165;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    uint64_t v82 = (unsigned __int8 *)*((void *)a3 + 2);
                    uint64_t v83 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v84 = *v82++;
                      *v83++ = a2 * v84;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      int v112 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v113 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v114 = *v112++;
                        *v113++ = (double)a2 * (double)v114;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v31 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v32 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v33 = *v31++;
                      *v32++ = (double)a2 * (double)v33;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v166 = (char *)*((void *)a3 + 2);
                      unint64_t v167 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        char v168 = *v166;
                        v166 += 8;
                        *v167++ = v168 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v85 = (char *)*((void *)a3 + 2);
                    char v86 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v87 = *v85;
                      v85 += 8;
                      *v86++ = v87 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v169 = (uint64_t *)*((void *)a3 + 2);
                      double v170 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v171 = *v169++;
                        *v170++ = v171 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v88 = (uint64_t *)*((void *)a3 + 2);
                    char v89 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v90 = *v88++;
                      *v89++ = v90 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v115 = (unint64_t *)*((void *)a3 + 2);
                      double v116 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v117 = *v115++;
                        *v116++ = (double)a2 * (double)v117;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    uint64_t v34 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v35 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v36 = *v34++;
                      *v35++ = (double)a2 * (double)v36;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v130 = (double *)*((void *)a3 + 2);
                      v131 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        double v132 = *v130++;
                        *v131++ = (int)v132 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v49 = (double *)*((void *)a3 + 2);
                    unint64_t v50 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v51 = *v49++;
                      *v50++ = (int)v51 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v133 = (double *)*((void *)a3 + 2);
                      char v134 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v135 = *v133++;
                        *v134++ = a2 * (unint64_t)v135;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    uint64_t v52 = (double *)*((void *)a3 + 2);
                    double v53 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v54 = *v52++;
                      *v53++ = a2 * (unint64_t)v54;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v97 = (double *)*((void *)a3 + 2);
                      unint64_t v98 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v99 = *v97++;
                        *v98++ = v99 * (double)a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    size_t v16 = (double *)*((void *)a3 + 2);
                    uint64_t v17 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v18 = *v16++;
                      *v17++ = v18 * (double)a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v136 = (char *)*((void *)a3 + 2);
                      v137 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        char v138 = *v136++;
                        *v137++ = v138 * (int)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v55 = (char *)*((void *)a3 + 2);
                    long long v56 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v57 = *v55++;
                      *v56++ = v57 * (int)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v139 = (unsigned __int8 *)*((void *)a3 + 2);
                      uint64_t v140 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v141 = *v139++;
                        *v140++ = v141 * (unint64_t)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    int v58 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v59 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v60 = *v58++;
                      *v59++ = v60 * (unint64_t)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v100 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v101 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v102 = *v100++;
                        *v101++ = *(double *)&a2 * (double)v102;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v19 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v20 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v21 = *v19++;
                      *v20++ = *(double *)&a2 * (double)v21;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v142 = (char *)*((void *)a3 + 2);
                      unint64_t v143 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        char v144 = *v142;
                        v142 += 8;
                        *v143++ = v144 * (int)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v61 = (char *)*((void *)a3 + 2);
                    unint64_t v62 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v63 = *v61;
                      v61 += 8;
                      *v62++ = v63 * (int)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v145 = (uint64_t *)*((void *)a3 + 2);
                      char v146 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v147 = *v145++;
                        *v146++ = v147 * (unint64_t)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v64 = (uint64_t *)*((void *)a3 + 2);
                    double v65 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v66 = *v64++;
                      *v65++ = v66 * (unint64_t)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v103 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v104 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v105 = *v103++;
                        *v104++ = *(double *)&a2 * (double)v105;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    BOOL v22 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v23 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v24 = *v22++;
                      *v23++ = *(double *)&a2 * (double)v24;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v118 = (double *)*((void *)a3 + 2);
                      v119 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        double v120 = *v118++;
                        *v119++ = (int)v120 * (int)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v37 = (double *)*((void *)a3 + 2);
                    unint64_t v38 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v39 = *v37++;
                      *v38++ = (int)v39 * (int)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v121 = (double *)*((void *)a3 + 2);
                      char v122 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v123 = *v121++;
                        *v122++ = (unint64_t)v123 * (unint64_t)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v40 = (double *)*((void *)a3 + 2);
                    unsigned int v41 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v42 = *v40++;
                      *v41++ = (unint64_t)v42 * (unint64_t)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v91 = (double *)*((void *)a3 + 2);
                      v92 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v93 = *v91++;
                        *v92++ = v93 * *(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v10 = (double *)*((void *)a3 + 2);
                    uint64_t v11 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v12 = *v10++;
                      *v11++ = v12 * *(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return a4;
    }
  }
  return result;
}

int *sub_11D84(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  int v4 = a2;
  int v6 = (int *)sub_EAF4(a1, a2);

  return agxps_timeseries_mul_ts((int *)a1, v4, a3, v6, 1);
}

int *agxps_timeseries_mul_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5 = 0;
  if (a1 && a4)
  {
    if (*((unsigned char *)a4 + 32)) {
      return 0;
    }
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 != *((void *)a4 + 1))
    {
      return 0;
    }
    else
    {
      int v7 = *a1;
      int v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v148 = (char *)*((void *)a1 + 2);
                    unint64_t v149 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v150 = *v148++;
                      *v149++ = v150 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v67 = (char *)*((void *)a1 + 2);
                  BOOL v68 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    char v69 = *v67++;
                    *v68++ = v69 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v151 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v152 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v153 = *v151++;
                      *v152++ = a3 * (unint64_t)v153;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v70 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v71 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v72 = *v70++;
                    *v71++ = a3 * (unint64_t)v72;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v106 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v107 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v108 = *v106++;
                      *v107++ = (double)a3 * (double)v108;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v25 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v26 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v27 = *v25++;
                    *v26++ = (double)a3 * (double)v27;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v154 = (char *)*((void *)a1 + 2);
                    int v155 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v156 = *v154++;
                      *v155++ = v156 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v73 = (char *)*((void *)a1 + 2);
                  unint64_t v74 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    char v75 = *v73++;
                    *v74++ = v75 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v157 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v158 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v159 = *v157++;
                      *v158++ = a3 * v159;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v76 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v77 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v78 = *v76++;
                    *v77++ = a3 * v78;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v109 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v110 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v111 = *v109++;
                      *v110++ = (double)a3 * (double)v111;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v29 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v30 = *v28++;
                    *v29++ = (double)a3 * (double)v30;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v124 = (char *)*((void *)a1 + 2);
                    v125 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v126 = *v124++;
                      *v125++ = v126 * (int)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v43 = (char *)*((void *)a1 + 2);
                  unsigned int v44 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    char v45 = *v43++;
                    *v44++ = v45 * (int)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v127 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v128 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v129 = *v127++;
                      *v128++ = v129 * (unint64_t)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v46 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v47 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v48 = *v46++;
                    *v47++ = v48 * (unint64_t)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v95 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v96 = *v94++;
                      *v95++ = *(double *)&a3 * (double)v96;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v13 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v14 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v15 = *v13++;
                    *v14++ = *(double *)&a3 * (double)v15;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v160 = (char *)*((void *)a1 + 2);
                    unsigned int v161 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v162 = *v160;
                      v160 += 8;
                      *v161++ = v162 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v79 = (char *)*((void *)a1 + 2);
                  unint64_t v80 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    char v81 = *v79;
                    v79 += 8;
                    *v80++ = v81 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v163 = (uint64_t *)*((void *)a1 + 2);
                    uint64_t v164 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v165 = *v163++;
                      *v164++ = v165 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v82 = (uint64_t *)*((void *)a1 + 2);
                  uint64_t v83 = (void *)*((void *)a4 + 2);
                  do
                  {
                    uint64_t v84 = *v82++;
                    *v83++ = v84 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    int v112 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v113 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v114 = *v112++;
                      *v113++ = (double)a3 * (double)v114;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v31 = (unint64_t *)*((void *)a1 + 2);
                  double v32 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v33 = *v31++;
                    *v32++ = (double)a3 * (double)v33;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v166 = (char *)*((void *)a1 + 2);
                    unint64_t v167 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v168 = *v166;
                      v166 += 8;
                      *v167++ = v168 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v85 = (char *)*((void *)a1 + 2);
                  char v86 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    char v87 = *v85;
                    v85 += 8;
                    *v86++ = v87 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v169 = (uint64_t *)*((void *)a1 + 2);
                    double v170 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v171 = *v169++;
                      *v170++ = v171 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v88 = (uint64_t *)*((void *)a1 + 2);
                  char v89 = (void *)*((void *)a4 + 2);
                  do
                  {
                    uint64_t v90 = *v88++;
                    *v89++ = v90 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v115 = (unint64_t *)*((void *)a1 + 2);
                    double v116 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v117 = *v115++;
                      *v116++ = (double)a3 * (double)v117;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v34 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v35 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v36 = *v34++;
                    *v35++ = (double)a3 * (double)v36;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v130 = (char *)*((void *)a1 + 2);
                    v131 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      char v132 = *v130;
                      v130 += 8;
                      *v131++ = v132 * (int)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v49 = (char *)*((void *)a1 + 2);
                  unint64_t v50 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    char v51 = *v49;
                    v49 += 8;
                    *v50++ = v51 * (int)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v133 = (uint64_t *)*((void *)a1 + 2);
                    char v134 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v135 = *v133++;
                      *v134++ = v135 * (unint64_t)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v52 = (uint64_t *)*((void *)a1 + 2);
                  double v53 = (void *)*((void *)a4 + 2);
                  do
                  {
                    uint64_t v54 = *v52++;
                    *v53++ = v54 * (unint64_t)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v97 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v98 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v99 = *v97++;
                      *v98++ = *(double *)&a3 * (double)v99;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  size_t v16 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v18 = *v16++;
                    *v17++ = *(double *)&a3 * (double)v18;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v136 = (double *)*((void *)a1 + 2);
                    v137 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v138 = *v136++;
                      *v137++ = (int)v138 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v55 = (double *)*((void *)a1 + 2);
                  long long v56 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v57 = *v55++;
                    *v56++ = (int)v57 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v139 = (double *)*((void *)a1 + 2);
                    uint64_t v140 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v141 = *v139++;
                      *v140++ = a3 * (unint64_t)v141;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  int v58 = (double *)*((void *)a1 + 2);
                  unint64_t v59 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v60 = *v58++;
                    *v59++ = a3 * (unint64_t)v60;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v100 = (double *)*((void *)a1 + 2);
                    double v101 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v102 = *v100++;
                      *v101++ = v102 * (double)a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v19 = (double *)*((void *)a1 + 2);
                  double v20 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v21 = *v19++;
                    *v20++ = v21 * (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v142 = (double *)*((void *)a1 + 2);
                    unint64_t v143 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v144 = *v142++;
                      *v143++ = (int)v144 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v61 = (double *)*((void *)a1 + 2);
                  unint64_t v62 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v63 = *v61++;
                    *v62++ = (int)v63 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v145 = (double *)*((void *)a1 + 2);
                    char v146 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v147 = *v145++;
                      *v146++ = a3 * (unint64_t)v147;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v64 = (double *)*((void *)a1 + 2);
                  double v65 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v66 = *v64++;
                    *v65++ = a3 * (unint64_t)v66;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v103 = (double *)*((void *)a1 + 2);
                    unint64_t v104 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v105 = *v103++;
                      *v104++ = v105 * (double)a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  BOOL v22 = (double *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v24 = *v22++;
                    *v23++ = v24 * (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v118 = (double *)*((void *)a1 + 2);
                    v119 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v120 = *v118++;
                      *v119++ = (int)v120 * (int)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v37 = (double *)*((void *)a1 + 2);
                  unint64_t v38 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v39 = *v37++;
                    *v38++ = (int)v39 * (int)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v121 = (double *)*((void *)a1 + 2);
                    char v122 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v123 = *v121++;
                      *v122++ = (unint64_t)v123 * (unint64_t)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v40 = (double *)*((void *)a1 + 2);
                  unsigned int v41 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v42 = *v40++;
                    *v41++ = (unint64_t)v42 * (unint64_t)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v91 = (double *)*((void *)a1 + 2);
                    v92 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v93 = *v91++;
                      *v92++ = v93 * *(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v11 = *v9++;
                    *v10++ = v11 * *(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      return a4;
    }
  }
  return (int *)v5;
}

int *sub_128EC(unsigned int *a1, unsigned int *a2)
{
  int v4 = (int *)sub_E9B4(a1, a2);

  return agxps_timeseries_div_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_div_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((unsigned char *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v269 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v270 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v271 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v273 = *v270++;
                      unsigned int v272 = v273;
                      if (v273) {
                        unsigned int v272 = *v269 / v272;
                      }
                      *v271++ = v272;
                      ++v269;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v116 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v117 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v118 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v120 = *v117++;
                    unsigned int v119 = v120;
                    if (v120) {
                      unsigned int v121 = *v116 / v119;
                    }
                    else {
                      LOBYTE(v121) = -1;
                    }
                    *v118++ = v121;
                    ++v116;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v274 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v275 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v276 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v278 = *v275++;
                      unsigned int v277 = v278;
                      if (v278) {
                        uint64_t v279 = *v274 / v277;
                      }
                      else {
                        uint64_t v279 = 0;
                      }
                      *v276++ = v279;
                      ++v274;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v122 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v123 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v124 = (uint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v126 = *v123++;
                    unsigned int v125 = v126;
                    if (v126) {
                      uint64_t v127 = *v122 / v125;
                    }
                    else {
                      uint64_t v127 = -1;
                    }
                    *v124++ = v127;
                    ++v122;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v198 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v199 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v200 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v201 = *v198++;
                      double v202 = (double)v201;
                      unsigned int v203 = *v199++;
                      double v204 = v202 / (double)v203;
                      if (!v203) {
                        double v204 = 0.0;
                      }
                      *v200++ = v204;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v39 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v40 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v41 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v42 = *v39++;
                    double v43 = (double)v42;
                    unsigned int v44 = *v40++;
                    *v41++ = v43 / (double)v44;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v280 = (unsigned __int8 *)*((void *)a1 + 2);
                    v281 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v282 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v284 = *v281;
                      v281 += 8;
                      unsigned int v283 = v284;
                      if (v284) {
                        unsigned int v283 = *v280 / v283;
                      }
                      *v282++ = v283;
                      ++v280;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v128 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v129 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v130 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v132 = *v129;
                    v129 += 8;
                    unsigned int v131 = v132;
                    if (v132) {
                      unsigned int v133 = *v128 / v131;
                    }
                    else {
                      LOBYTE(v133) = -1;
                    }
                    *v130++ = v133;
                    ++v128;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v285 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v286 = (unint64_t *)*((void *)a2 + 2);
                    v287 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v289 = *v286++;
                      unint64_t v288 = v289;
                      if (v289) {
                        unint64_t v288 = *v285 / v288;
                      }
                      *v287++ = v288;
                      ++v285;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v134 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v135 = (unint64_t *)*((void *)a2 + 2);
                  char v136 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v138 = *v135++;
                    unint64_t v137 = v138;
                    if (v138) {
                      unint64_t v139 = *v134 / v137;
                    }
                    else {
                      unint64_t v139 = -1;
                    }
                    *v136++ = v139;
                    ++v134;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v205 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v206 = (unint64_t *)*((void *)a2 + 2);
                    char v207 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v208 = *v205++;
                      double v209 = (double)v208;
                      unint64_t v210 = *v206++;
                      double v211 = v209 / (double)v210;
                      if (!v210) {
                        double v211 = 0.0;
                      }
                      *v207++ = v211;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unint64_t v50 = *v46++;
                    *v47++ = v49 / (double)v50;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v233 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v234 = (double *)*((void *)a2 + 2);
                    double v235 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v236 = (int)*v234;
                      if (v236) {
                        unsigned int v236 = *v233 / v236;
                      }
                      *v235++ = v236;
                      ++v233;
                      ++v234;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v72 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v73 = (double *)*((void *)a2 + 2);
                  unint64_t v74 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v75 = (int)*v73;
                    if (v75) {
                      unsigned int v76 = *v72 / v75;
                    }
                    else {
                      LOBYTE(v76) = -1;
                    }
                    *v74++ = v76;
                    ++v72;
                    ++v73;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((void *)a1 + 2);
                    v238 = (double *)*((void *)a2 + 2);
                    uint64_t v239 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v240 = (unint64_t)*v238;
                      if (v240) {
                        unint64_t v240 = *v237 / v240;
                      }
                      *v239++ = v240;
                      ++v237;
                      ++v238;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v77 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v78 = (double *)*((void *)a2 + 2);
                  double v79 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v80 = (unint64_t)*v78;
                    if (v80) {
                      unint64_t v81 = *v77 / v80;
                    }
                    else {
                      unint64_t v81 = -1;
                    }
                    *v79++ = v81;
                    ++v77;
                    ++v78;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v171 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v172 = (double *)*((void *)a2 + 2);
                    v173 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v174 = *v171++;
                      double v175 = (double)v174;
                      double v176 = *v172++;
                      double v177 = v175 / v176;
                      if (v176 == 0.0) {
                        double v177 = 0.0;
                      }
                      *v173++ = v177;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  size_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a2 + 2);
                  unint64_t v18 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v19 = *v16++;
                    double v20 = (double)v19;
                    double v21 = *v17++;
                    *v18++ = v20 / v21;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v290 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v291 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v292 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v294 = *v291++;
                      unsigned int v293 = v294;
                      if (v294) {
                        unsigned int v293 = *v290 / v293;
                      }
                      *v292++ = v293;
                      v290 += 8;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v140 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v141 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v142 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v144 = *v141++;
                    unsigned int v143 = v144;
                    if (v144) {
                      unsigned int v145 = *v140 / v143;
                    }
                    else {
                      LOBYTE(v145) = -1;
                    }
                    *v142++ = v145;
                    v140 += 8;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v295 = (void *)*((void *)a1 + 2);
                    uint64_t v296 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v297 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v299 = *v296++;
                      unint64_t v298 = v299;
                      if (v299) {
                        unint64_t v298 = *v295 / v298;
                      }
                      *v297++ = v298;
                      ++v295;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v146 = (void *)*((void *)a1 + 2);
                  double v147 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v148 = (uint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v150 = *v147++;
                    unint64_t v149 = v150;
                    if (v150) {
                      uint64_t v151 = *v146 / v149;
                    }
                    else {
                      uint64_t v151 = -1;
                    }
                    *v148++ = v151;
                    ++v146;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v212 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v213 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v214 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v215 = *v212++;
                      double v216 = (double)v215;
                      LODWORD(v215) = *v213++;
                      double v217 = v216 / (double)v215;
                      if (!v215) {
                        double v217 = 0.0;
                      }
                      *v214++ = v217;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v51 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v53 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v54 = *v51++;
                    double v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 / (double)v54;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v300 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v301 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v302 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v304 = *v301;
                      v301 += 8;
                      unsigned int v303 = v304;
                      if (v304) {
                        unsigned int v303 = *v300 / v303;
                      }
                      *v302++ = v303;
                      v300 += 8;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v152 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v153 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v154 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v156 = *v153;
                    v153 += 8;
                    unsigned int v155 = v156;
                    if (v156) {
                      unsigned int v157 = *v152 / v155;
                    }
                    else {
                      LOBYTE(v157) = -1;
                    }
                    *v154++ = v157;
                    v152 += 8;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (void *)*((void *)a1 + 2);
                    v306 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v307 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v309 = *v306++;
                      unint64_t v308 = v309;
                      if (v309) {
                        unint64_t v308 = *v305 / v308;
                      }
                      *v307++ = v308;
                      ++v305;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v158 = (void *)*((void *)a1 + 2);
                  unsigned int v159 = (unint64_t *)*((void *)a2 + 2);
                  v160 = (uint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v162 = *v159++;
                    unint64_t v161 = v162;
                    if (v162) {
                      uint64_t v163 = *v158 / v161;
                    }
                    else {
                      uint64_t v163 = -1;
                    }
                    *v160++ = v163;
                    ++v158;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v218 = (unint64_t *)*((void *)a1 + 2);
                    uint64_t v219 = (unint64_t *)*((void *)a2 + 2);
                    v220 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v221 = *v218++;
                      double v222 = (double)v221;
                      unint64_t v223 = *v219++;
                      double v224 = v222 / (double)v223;
                      if (!v223) {
                        double v224 = 0.0;
                      }
                      *v220++ = v224;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  long long v56 = (unint64_t *)*((void *)a1 + 2);
                  double v57 = (unint64_t *)*((void *)a2 + 2);
                  int v58 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v59 = *v56++;
                    unint64_t v60 = v59;
                    unint64_t v61 = *v57++;
                    *v58++ = (double)v60 / (double)v61;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v241 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v242 = (double *)*((void *)a2 + 2);
                    unsigned int v243 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v244 = (int)*v242;
                      if (v244) {
                        unsigned int v244 = *v241 / v244;
                      }
                      *v243++ = v244;
                      v241 += 8;
                      ++v242;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v82 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v83 = (double *)*((void *)a2 + 2);
                  uint64_t v84 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v85 = (int)*v83;
                    if (v85) {
                      unsigned int v86 = *v82 / v85;
                    }
                    else {
                      LOBYTE(v86) = -1;
                    }
                    *v84++ = v86;
                    v82 += 8;
                    ++v83;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v245 = (void *)*((void *)a1 + 2);
                    char v246 = (double *)*((void *)a2 + 2);
                    double v247 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v248 = (unint64_t)*v246;
                      if (v248) {
                        unint64_t v248 = *v245 / v248;
                      }
                      *v247++ = v248;
                      ++v245;
                      ++v246;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v87 = (void *)*((void *)a1 + 2);
                  unsigned int v88 = (double *)*((void *)a2 + 2);
                  char v89 = (uint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v90 = (unint64_t)*v88;
                    if (v90) {
                      uint64_t v91 = *v87 / v90;
                    }
                    else {
                      uint64_t v91 = -1;
                    }
                    *v89++ = v91;
                    ++v87;
                    ++v88;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((void *)a1 + 2);
                    v179 = (double *)*((void *)a2 + 2);
                    unsigned int v180 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v181 = *v178++;
                      double v182 = (double)v181;
                      double v183 = *v179++;
                      double v184 = v182 / v183;
                      if (v183 == 0.0) {
                        double v184 = 0.0;
                      }
                      *v180++ = v184;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  BOOL v22 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a2 + 2);
                  double v24 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v25 = *v22++;
                    double v26 = (double)v25;
                    double v27 = *v23++;
                    *v24++ = v26 / v27;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v249 = (double *)*((void *)a1 + 2);
                    unint64_t v250 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v251 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v253 = *v250++;
                      unsigned int v252 = v253;
                      if (v253) {
                        unsigned int v252 = (int)*v249 / v252;
                      }
                      *v251++ = v252;
                      ++v249;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v92 = (double *)*((void *)a1 + 2);
                  double v93 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v94 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v96 = *v93++;
                    unsigned int v95 = v96;
                    if (v96) {
                      unsigned int v97 = (int)*v92 / v95;
                    }
                    else {
                      LOBYTE(v97) = -1;
                    }
                    *v94++ = v97;
                    ++v92;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v254 = (double *)*((void *)a1 + 2);
                    unsigned int v255 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v256 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v258 = *v255++;
                      unint64_t v257 = v258;
                      if (v258) {
                        unint64_t v257 = (unint64_t)*v254 / v257;
                      }
                      *v256++ = v257;
                      ++v254;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v98 = (double *)*((void *)a1 + 2);
                  unint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
                  v100 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v102 = *v99++;
                    unint64_t v101 = v102;
                    if (v102) {
                      unint64_t v103 = (unint64_t)*v98 / v101;
                    }
                    else {
                      unint64_t v103 = -1;
                    }
                    *v100++ = v103;
                    ++v98;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v185 = (double *)*((void *)a1 + 2);
                    unint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v187 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v188 = *v185++;
                      double v189 = v188;
                      LODWORD(v188) = *v186++;
                      double v190 = v189 / (double)LODWORD(v188);
                      if (!LODWORD(v188)) {
                        double v190 = 0.0;
                      }
                      *v187++ = v190;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v28 = (double *)*((void *)a1 + 2);
                  uint64_t v29 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v30 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v31 = *v28++;
                    double v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 / (double)LODWORD(v31);
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((void *)a1 + 2);
                    v260 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v261 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v263 = *v260;
                      v260 += 8;
                      unsigned int v262 = v263;
                      if (v263) {
                        unsigned int v262 = (int)*v259 / v262;
                      }
                      *v261++ = v262;
                      ++v259;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v104 = (double *)*((void *)a1 + 2);
                  double v105 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v106 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v108 = *v105;
                    v105 += 8;
                    unsigned int v107 = v108;
                    if (v108) {
                      unsigned int v109 = (int)*v104 / v107;
                    }
                    else {
                      LOBYTE(v109) = -1;
                    }
                    *v106++ = v109;
                    ++v104;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v264 = (double *)*((void *)a1 + 2);
                    v265 = (unint64_t *)*((void *)a2 + 2);
                    v266 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v268 = *v265++;
                      unint64_t v267 = v268;
                      if (v268) {
                        unint64_t v267 = (unint64_t)*v264 / v267;
                      }
                      *v266++ = v267;
                      ++v264;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v110 = (double *)*((void *)a1 + 2);
                  unsigned int v111 = (uint64_t *)*((void *)a2 + 2);
                  int v112 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v114 = *v111++;
                    unint64_t v113 = v114;
                    if (v114) {
                      unint64_t v115 = (unint64_t)*v110 / v113;
                    }
                    else {
                      unint64_t v115 = -1;
                    }
                    *v112++ = v115;
                    ++v110;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v191 = (double *)*((void *)a1 + 2);
                    double v192 = (unint64_t *)*((void *)a2 + 2);
                    double v193 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v194 = *v191++;
                      double v195 = v194;
                      unint64_t v196 = *v192++;
                      double v197 = v195 / (double)v196;
                      if (!v196) {
                        double v197 = 0.0;
                      }
                      *v193++ = v197;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v33 = (double *)*((void *)a1 + 2);
                  uint64_t v34 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v35 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v36 = *v33++;
                    double v37 = v36;
                    unint64_t v38 = *v34++;
                    *v35++ = v37 / (double)v38;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v225 = (double *)*((void *)a1 + 2);
                    v226 = (double *)*((void *)a2 + 2);
                    double v227 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v228 = (int)*v226;
                      if (v228) {
                        unsigned int v228 = (int)*v225 / v228;
                      }
                      *v227++ = v228;
                      ++v225;
                      ++v226;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v62 = (double *)*((void *)a1 + 2);
                  double v63 = (double *)*((void *)a2 + 2);
                  v64 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v65 = (int)*v63;
                    if (v65) {
                      unsigned int v66 = (int)*v62 / v65;
                    }
                    else {
                      LOBYTE(v66) = -1;
                    }
                    *v64++ = v66;
                    ++v62;
                    ++v63;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v229 = (double *)*((void *)a1 + 2);
                    double v230 = (double *)*((void *)a2 + 2);
                    v231 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v232 = (unint64_t)*v230;
                      if (v232) {
                        unint64_t v232 = (unint64_t)*v229 / v232;
                      }
                      *v231++ = v232;
                      ++v229;
                      ++v230;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v67 = (double *)*((void *)a1 + 2);
                  BOOL v68 = (double *)*((void *)a2 + 2);
                  char v69 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v70 = (unint64_t)*v68;
                    if (v70) {
                      unint64_t v71 = (unint64_t)*v67 / v70;
                    }
                    else {
                      unint64_t v71 = -1;
                    }
                    *v69++ = v71;
                    ++v67;
                    ++v68;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v164 = (double *)*((void *)a1 + 2);
                    uint64_t v165 = (double *)*((void *)a2 + 2);
                    double v166 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v167 = *v164++;
                      double v168 = v167;
                      double v169 = *v165++;
                      double v170 = v168 / v169;
                      if (v169 == 0.0) {
                        double v170 = 0.0;
                      }
                      *v166++ = v170;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  double v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    *v11++ = v13 / v14;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *sub_13828(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  int v4 = a2;
  int v6 = (int *)sub_EAF4(a1, a2);

  return agxps_timeseries_div_ts((int *)a1, v4, a3, v6, 1);
}

int *agxps_timeseries_div_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5 = 0;
  if (a1 && a4)
  {
    if (*((unsigned char *)a4 + 32)) {
      return 0;
    }
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 != *((void *)a4 + 1))
    {
      return 0;
    }
    else
    {
      int v7 = *a1;
      int v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v169 = (unsigned char *)*((void *)a1 + 2);
                    double v170 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        char v171 = *v169 / a3;
                      }
                      else {
                        char v171 = 0;
                      }
                      *v170++ = v171;
                      ++v169;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v73 = (unsigned char *)*((void *)a1 + 2);
                  unint64_t v74 = (char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      char v75 = *v73 / a3;
                    }
                    else {
                      char v75 = -1;
                    }
                    *v74++ = v75;
                    ++v73;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v172 = (unsigned __int8 *)*((void *)a1 + 2);
                    v173 = (void *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        uint64_t v174 = *v172 / a3;
                      }
                      else {
                        uint64_t v174 = 0;
                      }
                      *v173++ = v174;
                      ++v172;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v76 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v77 = (uint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      uint64_t v78 = *v76 / a3;
                    }
                    else {
                      uint64_t v78 = -1;
                    }
                    *v77++ = v78;
                    ++v76;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v117 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v118 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v119 = *v117++;
                      double v120 = (double)v119 / (double)a3;
                      if (!(_BYTE)a3) {
                        double v120 = 0.0;
                      }
                      *v118++ = v120;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v25 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v26 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v27 = *v25++;
                    *v26++ = (double)v27 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v175 = (unsigned char *)*((void *)a1 + 2);
                    double v176 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        char v177 = *v175 / a3;
                      }
                      else {
                        char v177 = 0;
                      }
                      *v176++ = v177;
                      ++v175;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v79 = (unsigned char *)*((void *)a1 + 2);
                  unint64_t v80 = (char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      char v81 = *v79 / a3;
                    }
                    else {
                      char v81 = -1;
                    }
                    *v80++ = v81;
                    ++v79;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v178 = (unsigned __int8 *)*((void *)a1 + 2);
                    v179 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      if (*(double *)&a3 == 0.0) {
                        unint64_t v180 = 0;
                      }
                      else {
                        unint64_t v180 = *v178 / a3;
                      }
                      *v179++ = v180;
                      ++v178;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v82 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v83 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if (*(double *)&a3 == 0.0) {
                      unint64_t v84 = -1;
                    }
                    else {
                      unint64_t v84 = *v82 / a3;
                    }
                    *v83++ = v84;
                    ++v82;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v121 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v122 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v123 = *v121++;
                      double v124 = (double)v123 / (double)a3;
                      if (*(double *)&a3 == 0.0) {
                        double v124 = 0.0;
                      }
                      *v122++ = v124;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v29 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v30 = *v28++;
                    *v29++ = (double)v30 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v141 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v142 = (unsigned char *)*((void *)a4 + 2);
                    unsigned int v143 = (int)*(double *)&a3;
                    do
                    {
                      if (v143) {
                        unsigned int v144 = *v141 / v143;
                      }
                      else {
                        LOBYTE(v144) = 0;
                      }
                      *v142++ = v144;
                      ++v141;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  char v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unsigned char *)*((void *)a4 + 2);
                  unsigned int v47 = (int)*(double *)&a3;
                  do
                  {
                    if (v47) {
                      unsigned int v48 = *v45 / v47;
                    }
                    else {
                      LOBYTE(v48) = -1;
                    }
                    *v46++ = v48;
                    ++v45;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v145 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v146 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v147 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v147) {
                        unint64_t v148 = *v145 / v147;
                      }
                      else {
                        unint64_t v148 = 0;
                      }
                      *v146++ = v148;
                      ++v145;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v49 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v50 = (unint64_t *)*((void *)a4 + 2);
                  unint64_t v51 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v51) {
                      unint64_t v52 = *v49 / v51;
                    }
                    else {
                      unint64_t v52 = -1;
                    }
                    *v50++ = v52;
                    ++v49;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v101 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v102 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v103 = *v101++;
                      double v104 = (double)v103 / *(double *)&a3;
                      if (*(double *)&a3 == 0.0) {
                        double v104 = 0.0;
                      }
                      *v102++ = v104;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v13 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v14 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v15 = *v13++;
                    *v14++ = (double)v15 / *(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v181 = (unsigned char *)*((void *)a1 + 2);
                    double v182 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        char v183 = *v181 / a3;
                      }
                      else {
                        char v183 = 0;
                      }
                      *v182++ = v183;
                      v181 += 8;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v85 = (unsigned char *)*((void *)a1 + 2);
                  unsigned int v86 = (char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      char v87 = *v85 / a3;
                    }
                    else {
                      char v87 = -1;
                    }
                    *v86++ = v87;
                    v85 += 8;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v184 = (void *)*((void *)a1 + 2);
                    unint64_t v185 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        unint64_t v186 = *v184 / (unint64_t)a3;
                      }
                      else {
                        unint64_t v186 = 0;
                      }
                      *v185++ = v186;
                      ++v184;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v88 = (void *)*((void *)a1 + 2);
                  char v89 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      unint64_t v90 = *v88 / (unint64_t)a3;
                    }
                    else {
                      unint64_t v90 = -1;
                    }
                    *v89++ = v90;
                    ++v88;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v125 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v126 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v127 = *v125++;
                      double v128 = (double)v127 / (double)a3;
                      if (!(_BYTE)a3) {
                        double v128 = 0.0;
                      }
                      *v126++ = v128;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v31 = (unint64_t *)*((void *)a1 + 2);
                  double v32 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v33 = *v31++;
                    *v32++ = (double)v33 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v187 = (unsigned char *)*((void *)a1 + 2);
                    double v188 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        char v189 = *v187 / a3;
                      }
                      else {
                        char v189 = 0;
                      }
                      *v188++ = v189;
                      v187 += 8;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v91 = (unsigned char *)*((void *)a1 + 2);
                  v92 = (char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      char v93 = *v91 / a3;
                    }
                    else {
                      char v93 = -1;
                    }
                    *v92++ = v93;
                    v91 += 8;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v190 = (void *)*((void *)a1 + 2);
                    char v191 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      if (*(double *)&a3 == 0.0) {
                        unint64_t v192 = 0;
                      }
                      else {
                        unint64_t v192 = *v190 / a3;
                      }
                      *v191++ = v192;
                      ++v190;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  char v94 = (void *)*((void *)a1 + 2);
                  unsigned int v95 = (uint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if (*(double *)&a3 == 0.0) {
                      uint64_t v96 = -1;
                    }
                    else {
                      uint64_t v96 = *v94 / a3;
                    }
                    *v95++ = v96;
                    ++v94;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v129 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v130 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v131 = *v129++;
                      double v132 = (double)v131 / (double)a3;
                      if (*(double *)&a3 == 0.0) {
                        double v132 = 0.0;
                      }
                      *v130++ = v132;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v34 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v35 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v36 = *v34++;
                    *v35++ = (double)v36 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v149 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v150 = (unsigned char *)*((void *)a4 + 2);
                    unsigned int v151 = (int)*(double *)&a3;
                    do
                    {
                      if (v151) {
                        unsigned int v152 = *v149 / v151;
                      }
                      else {
                        LOBYTE(v152) = 0;
                      }
                      *v150++ = v152;
                      v149 += 8;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v53 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v54 = (unsigned char *)*((void *)a4 + 2);
                  unsigned int v55 = (int)*(double *)&a3;
                  do
                  {
                    if (v55) {
                      unsigned int v56 = *v53 / v55;
                    }
                    else {
                      LOBYTE(v56) = -1;
                    }
                    *v54++ = v56;
                    v53 += 8;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v153 = (void *)*((void *)a1 + 2);
                    double v154 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v155 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v155) {
                        unint64_t v156 = *v153 / v155;
                      }
                      else {
                        unint64_t v156 = 0;
                      }
                      *v154++ = v156;
                      ++v153;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v57 = (void *)*((void *)a1 + 2);
                  int v58 = (uint64_t *)*((void *)a4 + 2);
                  unint64_t v59 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v59) {
                      uint64_t v60 = *v57 / v59;
                    }
                    else {
                      uint64_t v60 = -1;
                    }
                    *v58++ = v60;
                    ++v57;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v105 = (unint64_t *)*((void *)a1 + 2);
                    double v106 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v107 = *v105++;
                      double v108 = (double)v107 / *(double *)&a3;
                      if (*(double *)&a3 == 0.0) {
                        double v108 = 0.0;
                      }
                      *v106++ = v108;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  size_t v16 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v18 = *v16++;
                    *v17++ = (double)v18 / *(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v157 = (double *)*((void *)a1 + 2);
                    char v158 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        unsigned int v159 = (int)*v157 / a3;
                      }
                      else {
                        LOBYTE(v159) = 0;
                      }
                      *v158++ = v159;
                      ++v157;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v61 = (double *)*((void *)a1 + 2);
                  unint64_t v62 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      unsigned int v63 = (int)*v61 / a3;
                    }
                    else {
                      LOBYTE(v63) = -1;
                    }
                    *v62++ = v63;
                    ++v61;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v160 = (double *)*((void *)a1 + 2);
                    unint64_t v161 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        unint64_t v162 = (unint64_t)*v160 / a3;
                      }
                      else {
                        unint64_t v162 = 0;
                      }
                      *v161++ = v162;
                      ++v160;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v64 = (double *)*((void *)a1 + 2);
                  unsigned int v65 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      unint64_t v66 = (unint64_t)*v64 / a3;
                    }
                    else {
                      unint64_t v66 = -1;
                    }
                    *v65++ = v66;
                    ++v64;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v109 = (double *)*((void *)a1 + 2);
                    char v110 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v111 = *v109++;
                      double v112 = v111 / (double)a3;
                      if (!(_BYTE)a3) {
                        double v112 = 0.0;
                      }
                      *v110++ = v112;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v19 = (double *)*((void *)a1 + 2);
                  double v20 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v21 = *v19++;
                    *v20++ = v21 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v163 = (double *)*((void *)a1 + 2);
                    uint64_t v164 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        unsigned int v165 = (int)*v163 / a3;
                      }
                      else {
                        LOBYTE(v165) = 0;
                      }
                      *v164++ = v165;
                      ++v163;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v67 = (double *)*((void *)a1 + 2);
                  BOOL v68 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      unsigned int v69 = (int)*v67 / a3;
                    }
                    else {
                      LOBYTE(v69) = -1;
                    }
                    *v68++ = v69;
                    ++v67;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v166 = (double *)*((void *)a1 + 2);
                    double v167 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      if (*(double *)&a3 == 0.0) {
                        unint64_t v168 = 0;
                      }
                      else {
                        unint64_t v168 = (unint64_t)*v166 / a3;
                      }
                      *v167++ = v168;
                      ++v166;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v70 = (double *)*((void *)a1 + 2);
                  unint64_t v71 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if (*(double *)&a3 == 0.0) {
                      unint64_t v72 = -1;
                    }
                    else {
                      unint64_t v72 = (unint64_t)*v70 / a3;
                    }
                    *v71++ = v72;
                    ++v70;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v113 = (double *)*((void *)a1 + 2);
                    unint64_t v114 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v115 = *v113++;
                      double v116 = v115 / (double)a3;
                      if (*(double *)&a3 == 0.0) {
                        double v116 = 0.0;
                      }
                      *v114++ = v116;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  BOOL v22 = (double *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v24 = *v22++;
                    *v23++ = v24 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v133 = (double *)*((void *)a1 + 2);
                    char v134 = (unsigned char *)*((void *)a4 + 2);
                    unsigned int v135 = (int)*(double *)&a3;
                    do
                    {
                      if (v135) {
                        unsigned int v136 = (int)*v133 / v135;
                      }
                      else {
                        LOBYTE(v136) = 0;
                      }
                      *v134++ = v136;
                      ++v133;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v37 = (double *)*((void *)a1 + 2);
                  unint64_t v38 = (unsigned char *)*((void *)a4 + 2);
                  unsigned int v39 = (int)*(double *)&a3;
                  do
                  {
                    if (v39) {
                      unsigned int v40 = (int)*v37 / v39;
                    }
                    else {
                      LOBYTE(v40) = -1;
                    }
                    *v38++ = v40;
                    ++v37;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v137 = (double *)*((void *)a1 + 2);
                    unint64_t v138 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v139 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v139) {
                        unint64_t v140 = (unint64_t)*v137 / v139;
                      }
                      else {
                        unint64_t v140 = 0;
                      }
                      *v138++ = v140;
                      ++v137;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v41 = (double *)*((void *)a1 + 2);
                  unsigned int v42 = (unint64_t *)*((void *)a4 + 2);
                  unint64_t v43 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v43) {
                      unint64_t v44 = (unint64_t)*v41 / v43;
                    }
                    else {
                      unint64_t v44 = -1;
                    }
                    *v42++ = v44;
                    ++v41;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v97 = (double *)*((void *)a1 + 2);
                    unint64_t v98 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v99 = *v97++;
                      double v100 = v99 / *(double *)&a3;
                      if (*(double *)&a3 == 0.0) {
                        double v100 = 0.0;
                      }
                      *v98++ = v100;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v11 = *v9++;
                    *v10++ = v11 / *(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      return a4;
    }
  }
  return (int *)v5;
}

int *sub_14684(unsigned int *a1, unsigned int *a2)
{
  int v4 = (int *)sub_E9B4(a1, a2);

  return agxps_timeseries_min_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_min_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((unsigned char *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((void *)a1 + 2);
                    v326 = (unsigned __int8 *)*((void *)a2 + 2);
                    v327 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v329 = *v325++;
                      unsigned int v328 = v329;
                      unsigned int v331 = *v326++;
                      char v330 = v331;
                      if (v328 >= v331) {
                        LOBYTE(v328) = v330;
                      }
                      *v327++ = v328;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v140 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v141 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v142 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v144 = *v140++;
                    unsigned int v143 = v144;
                    unsigned int v146 = *v141++;
                    char v145 = v146;
                    if (v143 >= v146) {
                      LOBYTE(v143) = v145;
                    }
                    *v142++ = v143;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((void *)a1 + 2);
                    v333 = (unsigned __int8 *)*((void *)a2 + 2);
                    v334 = (void *)*((void *)a3 + 2);
                    do
                    {
                      int v336 = *v332++;
                      LODWORD(v335) = v336;
                      unsigned int v338 = *v333++;
                      unsigned int v337 = v338;
                      if (v335 >= v338) {
                        uint64_t v335 = v337;
                      }
                      else {
                        uint64_t v335 = v335;
                      }
                      *v334++ = v335;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v147 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v149 = (void *)*((void *)a3 + 2);
                  do
                  {
                    int v151 = *v147++;
                    LODWORD(v150) = v151;
                    unsigned int v153 = *v148++;
                    unsigned int v152 = v153;
                    if (v150 >= v153) {
                      uint64_t v150 = v152;
                    }
                    else {
                      uint64_t v150 = v150;
                    }
                    *v149++ = v150;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v230 = (unsigned __int8 *)*((void *)a1 + 2);
                    v231 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v232 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v233 = *v230++;
                      double v234 = (double)v233;
                      unsigned int v235 = *v231++;
                      double v236 = (double)v235;
                      if (v234 >= (double)v235) {
                        double v234 = v236;
                      }
                      *v232++ = v234;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unsigned int v50 = *v46++;
                    double v51 = (double)v50;
                    if (v49 >= (double)v50) {
                      double v49 = v51;
                    }
                    *v47++ = v49;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unsigned __int8 *)*((void *)a1 + 2);
                    v340 = (unsigned __int8 *)*((void *)a2 + 2);
                    v341 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v343 = *v339++;
                      unsigned int v342 = v343;
                      unsigned int v345 = *v340;
                      v340 += 8;
                      char v344 = v345;
                      if (v342 >= v345) {
                        LOBYTE(v342) = v344;
                      }
                      *v341++ = v342;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v154 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v155 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v156 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v158 = *v154++;
                    unsigned int v157 = v158;
                    unsigned int v160 = *v155;
                    v155 += 8;
                    char v159 = v160;
                    if (v157 >= v160) {
                      LOBYTE(v157) = v159;
                    }
                    *v156++ = v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v346 = (unsigned __int8 *)*((void *)a1 + 2);
                    v347 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v348 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v350 = *v346++;
                      unint64_t v349 = v350;
                      unint64_t v352 = *v347++;
                      unint64_t v351 = v352;
                      if (v349 >= v352) {
                        unint64_t v349 = v351;
                      }
                      *v348++ = v349;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v161 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v162 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v163 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v165 = *v161++;
                    unint64_t v164 = v165;
                    unint64_t v167 = *v162++;
                    unint64_t v166 = v167;
                    if (v164 >= v167) {
                      unint64_t v164 = v166;
                    }
                    *v163++ = v164;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((void *)a1 + 2);
                    v238 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v239 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v240 = *v237++;
                      double v241 = (double)v240;
                      unint64_t v242 = *v238++;
                      double v243 = (double)v242;
                      if (v241 >= (double)v242) {
                        double v241 = v243;
                      }
                      *v239++ = v241;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v52 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v53 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v54 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v55 = *v52++;
                    double v56 = (double)v55;
                    unint64_t v57 = *v53++;
                    double v58 = (double)v57;
                    if (v56 >= (double)v57) {
                      double v56 = v58;
                    }
                    *v54++ = v56;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v272 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v273 = (double *)*((void *)a2 + 2);
                    uint64_t v274 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v276 = *v272++;
                      unsigned int v275 = v276;
                      double v277 = *v273++;
                      int v278 = (int)v277;
                      if (v275 >= (int)v277) {
                        LOBYTE(v275) = v278;
                      }
                      *v274++ = v275;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v87 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v88 = (double *)*((void *)a2 + 2);
                  char v89 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v91 = *v87++;
                    unsigned int v90 = v91;
                    double v92 = *v88++;
                    int v93 = (int)v92;
                    if (v90 >= (int)v92) {
                      LOBYTE(v90) = v93;
                    }
                    *v89++ = v90;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v279 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v280 = (double *)*((void *)a2 + 2);
                    v281 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v283 = *v279++;
                      unint64_t v282 = v283;
                      double v284 = *v280++;
                      unint64_t v285 = (unint64_t)v284;
                      if (v282 >= (unint64_t)v284) {
                        unint64_t v282 = v285;
                      }
                      *v281++ = v282;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v95 = (double *)*((void *)a2 + 2);
                  uint64_t v96 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v98 = *v94++;
                    unint64_t v97 = v98;
                    double v99 = *v95++;
                    unint64_t v100 = (unint64_t)v99;
                    if (v97 >= (unint64_t)v99) {
                      unint64_t v97 = v100;
                    }
                    *v96++ = v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v202 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v203 = (double *)*((void *)a2 + 2);
                    double v204 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v205 = *v202++;
                      double v206 = (double)v205;
                      double v207 = *v203++;
                      double v208 = v207;
                      if (v207 <= v206) {
                        double v206 = v208;
                      }
                      *v204++ = v206;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  uint64_t v17 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v18 = (double *)*((void *)a2 + 2);
                  unsigned int v19 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v20 = *v17++;
                    double v21 = (double)v20;
                    double v22 = *v18++;
                    double v23 = v22;
                    if (v22 <= v21) {
                      double v21 = v23;
                    }
                    *v19++ = v21;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v353 = (unsigned __int8 *)*((void *)a1 + 2);
                    v354 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v355 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v357 = *v353;
                      v353 += 8;
                      unsigned int v356 = v357;
                      unsigned int v359 = *v354++;
                      char v358 = v359;
                      if (v356 >= v359) {
                        LOBYTE(v356) = v358;
                      }
                      *v355++ = v356;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v168 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v169 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v170 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v172 = *v168;
                    v168 += 8;
                    unsigned int v171 = v172;
                    unsigned int v174 = *v169++;
                    char v173 = v174;
                    if (v171 >= v174) {
                      LOBYTE(v171) = v173;
                    }
                    *v170++ = v171;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v360 = (unint64_t *)*((void *)a1 + 2);
                    v361 = (unsigned __int8 *)*((void *)a2 + 2);
                    v362 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v364 = *v360++;
                      unint64_t v363 = v364;
                      LODWORD(v364) = *v361++;
                      unint64_t v365 = v364;
                      if (v363 >= v364) {
                        unint64_t v363 = v365;
                      }
                      *v362++ = v363;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v175 = (unint64_t *)*((void *)a1 + 2);
                  double v176 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v177 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v179 = *v175++;
                    unint64_t v178 = v179;
                    LODWORD(v179) = *v176++;
                    unint64_t v180 = v179;
                    if (v178 >= v179) {
                      unint64_t v178 = v180;
                    }
                    *v177++ = v178;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v244 = (unint64_t *)*((void *)a1 + 2);
                    char v245 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v246 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v247 = *v244++;
                      unint64_t v248 = v247;
                      LODWORD(v247) = *v245++;
                      double v249 = (double)v247;
                      double v250 = (double)v248;
                      if (v250 >= (double)v247) {
                        double v250 = v249;
                      }
                      *v246++ = v250;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v59 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v60 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v61 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v62 = *v59++;
                    unint64_t v63 = v62;
                    LODWORD(v62) = *v60++;
                    double v64 = (double)v62;
                    double v65 = (double)v63;
                    if (v65 >= (double)v62) {
                      double v65 = v64;
                    }
                    *v61++ = v65;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v366 = (unsigned __int8 *)*((void *)a1 + 2);
                    v367 = (unsigned __int8 *)*((void *)a2 + 2);
                    v368 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v370 = *v366;
                      v366 += 8;
                      unsigned int v369 = v370;
                      unsigned int v372 = *v367;
                      v367 += 8;
                      char v371 = v372;
                      if (v369 >= v372) {
                        LOBYTE(v369) = v371;
                      }
                      *v368++ = v369;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v181 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v182 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v183 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v185 = *v181;
                    v181 += 8;
                    unsigned int v184 = v185;
                    unsigned int v187 = *v182;
                    v182 += 8;
                    char v186 = v187;
                    if (v184 >= v187) {
                      LOBYTE(v184) = v186;
                    }
                    *v183++ = v184;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v373 = (unint64_t *)*((void *)a1 + 2);
                    v374 = (unint64_t *)*((void *)a2 + 2);
                    v375 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v377 = *v373++;
                      unint64_t v376 = v377;
                      unint64_t v379 = *v374++;
                      unint64_t v378 = v379;
                      if (v376 >= v379) {
                        unint64_t v376 = v378;
                      }
                      *v375++ = v376;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v188 = (unint64_t *)*((void *)a1 + 2);
                  char v189 = (unint64_t *)*((void *)a2 + 2);
                  double v190 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v192 = *v188++;
                    unint64_t v191 = v192;
                    unint64_t v194 = *v189++;
                    unint64_t v193 = v194;
                    if (v191 >= v194) {
                      unint64_t v191 = v193;
                    }
                    *v190++ = v191;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v251 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v252 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v253 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v254 = *v251++;
                      double v255 = (double)v254;
                      unint64_t v256 = *v252++;
                      double v257 = (double)v256;
                      if (v255 >= (double)v256) {
                        double v255 = v257;
                      }
                      *v253++ = v255;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v66 = (unint64_t *)*((void *)a1 + 2);
                  double v67 = (unint64_t *)*((void *)a2 + 2);
                  BOOL v68 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v69 = *v66++;
                    double v70 = (double)v69;
                    unint64_t v71 = *v67++;
                    double v72 = (double)v71;
                    if (v70 >= (double)v71) {
                      double v70 = v72;
                    }
                    *v68++ = v70;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v286 = (unsigned __int8 *)*((void *)a1 + 2);
                    v287 = (double *)*((void *)a2 + 2);
                    unint64_t v288 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v290 = *v286;
                      v286 += 8;
                      unsigned int v289 = v290;
                      double v291 = *v287++;
                      int v292 = (int)v291;
                      if (v289 >= (int)v291) {
                        LOBYTE(v289) = v292;
                      }
                      *v288++ = v289;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v101 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v102 = (double *)*((void *)a2 + 2);
                  unsigned int v103 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v105 = *v101;
                    v101 += 8;
                    unsigned int v104 = v105;
                    double v106 = *v102++;
                    int v107 = (int)v106;
                    if (v104 >= (int)v106) {
                      LOBYTE(v104) = v107;
                    }
                    *v103++ = v104;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v293 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v294 = (double *)*((void *)a2 + 2);
                    unsigned int v295 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v297 = *v293++;
                      unint64_t v296 = v297;
                      double v298 = *v294++;
                      unint64_t v299 = (unint64_t)v298;
                      if (v296 >= (unint64_t)v298) {
                        unint64_t v296 = v299;
                      }
                      *v295++ = v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v108 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v109 = (double *)*((void *)a2 + 2);
                  char v110 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v112 = *v108++;
                    unint64_t v111 = v112;
                    double v113 = *v109++;
                    unint64_t v114 = (unint64_t)v113;
                    if (v111 >= (unint64_t)v113) {
                      unint64_t v111 = v114;
                    }
                    *v110++ = v111;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v209 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v210 = (double *)*((void *)a2 + 2);
                    double v211 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v212 = *v209++;
                      unint64_t v213 = v212;
                      double v214 = *v210++;
                      double v215 = v214;
                      double v216 = (double)v213;
                      if (v214 <= v216) {
                        double v216 = v215;
                      }
                      *v211++ = v216;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v24 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v25 = (double *)*((void *)a2 + 2);
                  double v26 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v27 = *v24++;
                    unint64_t v28 = v27;
                    double v29 = *v25++;
                    double v30 = v29;
                    double v31 = (double)v28;
                    if (v29 <= v31) {
                      double v31 = v30;
                    }
                    *v26++ = v31;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v300 = (double *)*((void *)a1 + 2);
                    unint64_t v301 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v302 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v303 = *v300++;
                      unsigned int v304 = (int)v303;
                      LODWORD(v303) = *v301++;
                      char v305 = LOBYTE(v303);
                      if (v304 >= LODWORD(v303)) {
                        LOBYTE(v304) = v305;
                      }
                      *v302++ = v304;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v115 = (double *)*((void *)a1 + 2);
                  double v116 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v117 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v118 = *v115++;
                    unsigned int v119 = (int)v118;
                    LODWORD(v118) = *v116++;
                    char v120 = LOBYTE(v118);
                    if (v119 >= LODWORD(v118)) {
                      LOBYTE(v119) = v120;
                    }
                    *v117++ = v119;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v306 = (double *)*((void *)a1 + 2);
                    unsigned int v307 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v308 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v309 = *v306++;
                      unint64_t v310 = (unint64_t)v309;
                      LODWORD(v309) = *v307++;
                      unint64_t v311 = LODWORD(v309);
                      if (v310 >= LODWORD(v309)) {
                        unint64_t v310 = v311;
                      }
                      *v308++ = v310;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v121 = (double *)*((void *)a1 + 2);
                  char v122 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v123 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v124 = *v121++;
                    unint64_t v125 = (unint64_t)v124;
                    LODWORD(v124) = *v122++;
                    unint64_t v126 = LODWORD(v124);
                    if (v125 >= LODWORD(v124)) {
                      unint64_t v125 = v126;
                    }
                    *v123++ = v125;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v217 = (double *)*((void *)a1 + 2);
                    unint64_t v218 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v219 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v220 = *v217++;
                      double v221 = v220;
                      LODWORD(v220) = *v218++;
                      double v222 = (double)LODWORD(v220);
                      if (v221 >= (double)LODWORD(v220)) {
                        double v221 = v222;
                      }
                      *v219++ = v221;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v32 = (double *)*((void *)a1 + 2);
                  unint64_t v33 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v34 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v35 = *v32++;
                    double v36 = v35;
                    LODWORD(v35) = *v33++;
                    double v37 = (double)LODWORD(v35);
                    if (v36 >= (double)LODWORD(v35)) {
                      double v36 = v37;
                    }
                    *v34++ = v36;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v312 = (double *)*((void *)a1 + 2);
                    char v313 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v314 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v315 = *v312++;
                      unsigned int v316 = (int)v315;
                      LODWORD(v315) = *v313;
                      v313 += 8;
                      char v317 = LOBYTE(v315);
                      if (v316 >= LODWORD(v315)) {
                        LOBYTE(v316) = v317;
                      }
                      *v314++ = v316;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v127 = (double *)*((void *)a1 + 2);
                  double v128 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v129 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v130 = *v127++;
                    unsigned int v131 = (int)v130;
                    LODWORD(v130) = *v128;
                    v128 += 8;
                    char v132 = LOBYTE(v130);
                    if (v131 >= LODWORD(v130)) {
                      LOBYTE(v131) = v132;
                    }
                    *v129++ = v131;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (double *)*((void *)a1 + 2);
                    uint64_t v319 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v320 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v321 = *v318++;
                      unint64_t v322 = (unint64_t)v321;
                      unint64_t v324 = *v319++;
                      unint64_t v323 = v324;
                      if (v322 >= v324) {
                        unint64_t v322 = v323;
                      }
                      *v320++ = v322;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v133 = (double *)*((void *)a1 + 2);
                  char v134 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v135 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v136 = *v133++;
                    unint64_t v137 = (unint64_t)v136;
                    unint64_t v139 = *v134++;
                    unint64_t v138 = v139;
                    if (v137 >= v139) {
                      unint64_t v137 = v138;
                    }
                    *v135++ = v137;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v223 = (double *)*((void *)a1 + 2);
                    double v224 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v225 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v226 = *v223++;
                      double v227 = v226;
                      unint64_t v228 = *v224++;
                      double v229 = (double)v228;
                      if (v227 >= (double)v228) {
                        double v227 = v229;
                      }
                      *v225++ = v227;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v38 = (double *)*((void *)a1 + 2);
                  unsigned int v39 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v40 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v41 = *v38++;
                    double v42 = v41;
                    unint64_t v43 = *v39++;
                    double v44 = (double)v43;
                    if (v42 >= (double)v43) {
                      double v42 = v44;
                    }
                    *v40++ = v42;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v258 = (double *)*((void *)a1 + 2);
                    v259 = (double *)*((void *)a2 + 2);
                    v260 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v261 = *v258++;
                      unsigned int v262 = (int)v261;
                      double v263 = *v259++;
                      int v264 = (int)v263;
                      if (v262 >= (int)v263) {
                        LOBYTE(v262) = v264;
                      }
                      *v260++ = v262;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v73 = (double *)*((void *)a1 + 2);
                  unint64_t v74 = (double *)*((void *)a2 + 2);
                  char v75 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v76 = *v73++;
                    unsigned int v77 = (int)v76;
                    double v78 = *v74++;
                    int v79 = (int)v78;
                    if (v77 >= (int)v78) {
                      LOBYTE(v77) = v79;
                    }
                    *v75++ = v77;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (double *)*((void *)a1 + 2);
                    v266 = (double *)*((void *)a2 + 2);
                    unint64_t v267 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v268 = *v265++;
                      unint64_t v269 = (unint64_t)v268;
                      double v270 = *v266++;
                      unint64_t v271 = (unint64_t)v270;
                      if (v269 >= (unint64_t)v270) {
                        unint64_t v269 = v271;
                      }
                      *v267++ = v269;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v80 = (double *)*((void *)a1 + 2);
                  char v81 = (double *)*((void *)a2 + 2);
                  uint64_t v82 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v83 = *v80++;
                    unint64_t v84 = (unint64_t)v83;
                    double v85 = *v81++;
                    unint64_t v86 = (unint64_t)v85;
                    if (v84 >= (unint64_t)v85) {
                      unint64_t v84 = v86;
                    }
                    *v82++ = v84;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v195 = (double *)*((void *)a1 + 2);
                    unint64_t v196 = (double *)*((void *)a2 + 2);
                    double v197 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v198 = *v195++;
                      double v199 = v198;
                      double v200 = *v196++;
                      double v201 = v200;
                      if (v199 >= v200) {
                        double v199 = v201;
                      }
                      *v197++ = v199;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  double v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    double v15 = v14;
                    if (v13 >= v14) {
                      double v13 = v15;
                    }
                    *v11++ = v13;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *sub_15444(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  int v4 = a2;
  int v6 = (int *)sub_EAF4(a1, a2);

  return agxps_timeseries_min_ts((int *)a1, v4, a3, v6, 1);
}

int *agxps_timeseries_min_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5 = 0;
  if (a1 && a4)
  {
    if (*((unsigned char *)a4 + 32)) {
      return 0;
    }
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 != *((void *)a4 + 1))
    {
      return 0;
    }
    else
    {
      int v7 = *a1;
      int v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v194 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v195 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v197 = *v194++;
                      char v196 = v197;
                      if (v197 >= a3) {
                        char v196 = a3;
                      }
                      *v195++ = v196;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v86 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v87 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v89 = *v86++;
                    char v88 = v89;
                    if (v89 >= a3) {
                      char v88 = a3;
                    }
                    *v87++ = v88;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v198 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v199 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v201 = *v198++;
                      uint64_t v200 = v201;
                      if (v201 >= (unint64_t)a3) {
                        uint64_t v200 = a3;
                      }
                      *v199++ = v200;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v90 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v91 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v93 = *v90++;
                    uint64_t v92 = v93;
                    if (v93 >= (unint64_t)a3) {
                      uint64_t v92 = a3;
                    }
                    *v91++ = v92;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v138 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v139 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v140 = *v138++;
                      double v141 = (double)v140;
                      if ((double)v140 >= (double)a3) {
                        double v141 = (double)a3;
                      }
                      *v139++ = v141;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v30 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v31 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v32 = *v30++;
                    double v33 = (double)v32;
                    if ((double)v32 >= (double)a3) {
                      double v33 = (double)a3;
                    }
                    *v31++ = v33;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v202 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v203 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v205 = *v202++;
                      char v204 = v205;
                      if (v205 >= a3) {
                        char v204 = a3;
                      }
                      *v203++ = v204;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v95 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v97 = *v94++;
                    char v96 = v97;
                    if (v97 >= a3) {
                      char v96 = a3;
                    }
                    *v95++ = v96;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v206 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v207 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v209 = *v206++;
                      unint64_t v208 = v209;
                      if (v209 >= a3) {
                        unint64_t v208 = a3;
                      }
                      *v207++ = v208;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v98 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v99 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v101 = *v98++;
                    unint64_t v100 = v101;
                    if (v101 >= a3) {
                      unint64_t v100 = a3;
                    }
                    *v99++ = v100;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v142 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v143 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v144 = *v142++;
                      double v145 = (double)v144;
                      if ((double)v144 >= (double)a3) {
                        double v145 = (double)a3;
                      }
                      *v143++ = v145;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v34 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v35 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v36 = *v34++;
                    double v37 = (double)v36;
                    if ((double)v36 >= (double)a3) {
                      double v37 = (double)a3;
                    }
                    *v35++ = v37;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v162 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v163 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v165 = *v162++;
                      char v164 = v165;
                      if (v165 >= (int)*(double *)&a3) {
                        char v164 = (int)*(double *)&a3;
                      }
                      *v163++ = v164;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v54 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v55 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v57 = *v54++;
                    char v56 = v57;
                    if (v57 >= (int)*(double *)&a3) {
                      char v56 = (int)*(double *)&a3;
                    }
                    *v55++ = v56;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v166 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v167 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v169 = *v166++;
                      unint64_t v168 = v169;
                      if (v169 >= (unint64_t)*(double *)&a3) {
                        unint64_t v168 = (unint64_t)*(double *)&a3;
                      }
                      *v167++ = v168;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v58 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v59 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v61 = *v58++;
                    unint64_t v60 = v61;
                    if (v61 >= (unint64_t)*(double *)&a3) {
                      unint64_t v60 = (unint64_t)*(double *)&a3;
                    }
                    *v59++ = v60;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v122 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v123 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v124 = *v122++;
                      double v125 = (double)v124;
                      if (*(double *)&a3 <= (double)v124) {
                        double v125 = *(double *)&a3;
                      }
                      *v123++ = v125;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v14 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v15 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v16 = *v14++;
                    double v17 = (double)v16;
                    if (*(double *)&a3 <= (double)v16) {
                      double v17 = *(double *)&a3;
                    }
                    *v15++ = v17;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v210 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v211 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v213 = *v210;
                      v210 += 8;
                      char v212 = v213;
                      if (v213 >= a3) {
                        char v212 = a3;
                      }
                      *v211++ = v212;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v102 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v103 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v105 = *v102;
                    v102 += 8;
                    char v104 = v105;
                    if (v105 >= a3) {
                      char v104 = a3;
                    }
                    *v103++ = v104;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v214 = (unint64_t *)*((void *)a1 + 2);
                    double v215 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v217 = *v214++;
                      unint64_t v216 = v217;
                      if (v217 >= a3) {
                        unint64_t v216 = a3;
                      }
                      *v215++ = v216;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v106 = (unint64_t *)*((void *)a1 + 2);
                  int v107 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v109 = *v106++;
                    unint64_t v108 = v109;
                    if (v109 >= a3) {
                      unint64_t v108 = a3;
                    }
                    *v107++ = v108;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v146 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v147 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v148 = *v146++;
                      double v149 = (double)v148;
                      if ((double)v148 >= (double)a3) {
                        double v149 = (double)a3;
                      }
                      *v147++ = v149;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v38 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v39 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v40 = *v38++;
                    double v41 = (double)v40;
                    if ((double)v40 >= (double)a3) {
                      double v41 = (double)a3;
                    }
                    *v39++ = v41;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v218 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v219 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v221 = *v218;
                      v218 += 8;
                      char v220 = v221;
                      if (v221 >= a3) {
                        char v220 = a3;
                      }
                      *v219++ = v220;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  char v110 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v111 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v113 = *v110;
                    v110 += 8;
                    char v112 = v113;
                    if (v113 >= a3) {
                      char v112 = a3;
                    }
                    *v111++ = v112;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v222 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v223 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v225 = *v222++;
                      unint64_t v224 = v225;
                      if (v225 >= a3) {
                        unint64_t v224 = a3;
                      }
                      *v223++ = v224;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v114 = (unint64_t *)*((void *)a1 + 2);
                  double v115 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v117 = *v114++;
                    unint64_t v116 = v117;
                    if (v117 >= a3) {
                      unint64_t v116 = a3;
                    }
                    *v115++ = v116;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v150 = (unint64_t *)*((void *)a1 + 2);
                    int v151 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v152 = *v150++;
                      double v153 = (double)v152;
                      if ((double)v152 >= (double)a3) {
                        double v153 = (double)a3;
                      }
                      *v151++ = v153;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v42 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v43 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v44 = *v42++;
                    double v45 = (double)v44;
                    if ((double)v44 >= (double)a3) {
                      double v45 = (double)a3;
                    }
                    *v43++ = v45;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v170 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v171 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v173 = *v170;
                      v170 += 8;
                      char v172 = v173;
                      if (v173 >= (int)*(double *)&a3) {
                        char v172 = (int)*(double *)&a3;
                      }
                      *v171++ = v172;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v62 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v63 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v65 = *v62;
                    v62 += 8;
                    char v64 = v65;
                    if (v65 >= (int)*(double *)&a3) {
                      char v64 = (int)*(double *)&a3;
                    }
                    *v63++ = v64;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v174 = (unint64_t *)*((void *)a1 + 2);
                    double v175 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v177 = *v174++;
                      unint64_t v176 = v177;
                      if (v177 >= (unint64_t)*(double *)&a3) {
                        unint64_t v176 = (unint64_t)*(double *)&a3;
                      }
                      *v175++ = v176;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v66 = (unint64_t *)*((void *)a1 + 2);
                  double v67 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v69 = *v66++;
                    unint64_t v68 = v69;
                    if (v69 >= (unint64_t)*(double *)&a3) {
                      unint64_t v68 = (unint64_t)*(double *)&a3;
                    }
                    *v67++ = v68;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v126 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v127 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v128 = *v126++;
                      double v129 = (double)v128;
                      if (*(double *)&a3 <= (double)v128) {
                        double v129 = *(double *)&a3;
                      }
                      *v127++ = v129;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v18 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v19 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v20 = *v18++;
                    double v21 = (double)v20;
                    if (*(double *)&a3 <= (double)v20) {
                      double v21 = *(double *)&a3;
                    }
                    *v19++ = v21;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v178 = (double *)*((void *)a1 + 2);
                    unint64_t v179 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v180 = *v178++;
                      int v181 = (int)v180;
                      if ((int)v180 >= a3) {
                        LOBYTE(v181) = a3;
                      }
                      *v179++ = v181;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v70 = (double *)*((void *)a1 + 2);
                  unint64_t v71 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v72 = *v70++;
                    int v73 = (int)v72;
                    if ((int)v72 >= a3) {
                      LOBYTE(v73) = a3;
                    }
                    *v71++ = v73;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v182 = (double *)*((void *)a1 + 2);
                    char v183 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v184 = *v182++;
                      unint64_t v185 = (unint64_t)v184;
                      if ((unint64_t)v184 >= a3) {
                        unint64_t v185 = a3;
                      }
                      *v183++ = v185;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v74 = (double *)*((void *)a1 + 2);
                  char v75 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v76 = *v74++;
                    unint64_t v77 = (unint64_t)v76;
                    if ((unint64_t)v76 >= a3) {
                      unint64_t v77 = a3;
                    }
                    *v75++ = v77;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v130 = (double *)*((void *)a1 + 2);
                    unsigned int v131 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v132 = *v130++;
                      double v133 = v132;
                      if (v132 >= (double)a3) {
                        double v133 = (double)a3;
                      }
                      *v131++ = v133;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v22 = (double *)*((void *)a1 + 2);
                  double v23 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v24 = *v22++;
                    double v25 = v24;
                    if (v24 >= (double)a3) {
                      double v25 = (double)a3;
                    }
                    *v23++ = v25;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v186 = (double *)*((void *)a1 + 2);
                    unsigned int v187 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v188 = *v186++;
                      int v189 = (int)v188;
                      if ((int)v188 >= a3) {
                        LOBYTE(v189) = a3;
                      }
                      *v187++ = v189;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v78 = (double *)*((void *)a1 + 2);
                  int v79 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v80 = *v78++;
                    int v81 = (int)v80;
                    if ((int)v80 >= a3) {
                      LOBYTE(v81) = a3;
                    }
                    *v79++ = v81;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v190 = (double *)*((void *)a1 + 2);
                    unint64_t v191 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v192 = *v190++;
                      unint64_t v193 = (unint64_t)v192;
                      if ((unint64_t)v192 >= a3) {
                        unint64_t v193 = a3;
                      }
                      *v191++ = v193;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v82 = (double *)*((void *)a1 + 2);
                  double v83 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v84 = *v82++;
                    unint64_t v85 = (unint64_t)v84;
                    if ((unint64_t)v84 >= a3) {
                      unint64_t v85 = a3;
                    }
                    *v83++ = v85;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v134 = (double *)*((void *)a1 + 2);
                    unsigned int v135 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v136 = *v134++;
                      double v137 = v136;
                      if (v136 >= (double)a3) {
                        double v137 = (double)a3;
                      }
                      *v135++ = v137;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v26 = (double *)*((void *)a1 + 2);
                  unint64_t v27 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v28 = *v26++;
                    double v29 = v28;
                    if (v28 >= (double)a3) {
                      double v29 = (double)a3;
                    }
                    *v27++ = v29;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v154 = (double *)*((void *)a1 + 2);
                    unint64_t v155 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v156 = *v154++;
                      int v157 = (int)v156;
                      if ((int)v156 >= (int)*(double *)&a3) {
                        LOBYTE(v157) = (int)*(double *)&a3;
                      }
                      *v155++ = v157;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v46 = (double *)*((void *)a1 + 2);
                  unsigned int v47 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v48 = *v46++;
                    int v49 = (int)v48;
                    if ((int)v48 >= (int)*(double *)&a3) {
                      LOBYTE(v49) = (int)*(double *)&a3;
                    }
                    *v47++ = v49;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v158 = (double *)*((void *)a1 + 2);
                    char v159 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v160 = *v158++;
                      unint64_t v161 = (unint64_t)v160;
                      if ((unint64_t)v160 >= (unint64_t)*(double *)&a3) {
                        unint64_t v161 = (unint64_t)*(double *)&a3;
                      }
                      *v159++ = v161;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v50 = (double *)*((void *)a1 + 2);
                  double v51 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v52 = *v50++;
                    unint64_t v53 = (unint64_t)v52;
                    if ((unint64_t)v52 >= (unint64_t)*(double *)&a3) {
                      unint64_t v53 = (unint64_t)*(double *)&a3;
                    }
                    *v51++ = v53;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v118 = (double *)*((void *)a1 + 2);
                    unsigned int v119 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v120 = *v118++;
                      double v121 = v120;
                      if (v120 >= *(double *)&a3) {
                        double v121 = *(double *)&a3;
                      }
                      *v119++ = v121;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v11 = *v9++;
                    double v12 = v11;
                    if (v11 >= *(double *)&a3) {
                      double v12 = *(double *)&a3;
                    }
                    *v10++ = v12;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      return a4;
    }
  }
  return (int *)v5;
}

int *sub_160B4(unsigned int *a1, unsigned int *a2)
{
  int v4 = (int *)sub_E9B4(a1, a2);

  return agxps_timeseries_max_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_max_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((unsigned char *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((void *)a1 + 2);
                    v326 = (unsigned __int8 *)*((void *)a2 + 2);
                    v327 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v329 = *v325++;
                      unsigned int v328 = v329;
                      unsigned int v331 = *v326++;
                      char v330 = v331;
                      if (v328 <= v331) {
                        LOBYTE(v328) = v330;
                      }
                      *v327++ = v328;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v140 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v141 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v142 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v144 = *v140++;
                    unsigned int v143 = v144;
                    unsigned int v146 = *v141++;
                    char v145 = v146;
                    if (v143 <= v146) {
                      LOBYTE(v143) = v145;
                    }
                    *v142++ = v143;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((void *)a1 + 2);
                    v333 = (unsigned __int8 *)*((void *)a2 + 2);
                    v334 = (void *)*((void *)a3 + 2);
                    do
                    {
                      int v336 = *v332++;
                      LODWORD(v335) = v336;
                      unsigned int v338 = *v333++;
                      unsigned int v337 = v338;
                      if (v335 <= v338) {
                        uint64_t v335 = v337;
                      }
                      else {
                        uint64_t v335 = v335;
                      }
                      *v334++ = v335;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v147 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v149 = (void *)*((void *)a3 + 2);
                  do
                  {
                    int v151 = *v147++;
                    LODWORD(v150) = v151;
                    unsigned int v153 = *v148++;
                    unsigned int v152 = v153;
                    if (v150 <= v153) {
                      uint64_t v150 = v152;
                    }
                    else {
                      uint64_t v150 = v150;
                    }
                    *v149++ = v150;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v230 = (unsigned __int8 *)*((void *)a1 + 2);
                    v231 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v232 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v233 = *v230++;
                      double v234 = (double)v233;
                      unsigned int v235 = *v231++;
                      double v236 = (double)v235;
                      if (v234 <= (double)v235) {
                        double v234 = v236;
                      }
                      *v232++ = v234;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unsigned int v50 = *v46++;
                    double v51 = (double)v50;
                    if (v49 <= (double)v50) {
                      double v49 = v51;
                    }
                    *v47++ = v49;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unsigned __int8 *)*((void *)a1 + 2);
                    v340 = (unsigned __int8 *)*((void *)a2 + 2);
                    v341 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v343 = *v339++;
                      unsigned int v342 = v343;
                      unsigned int v345 = *v340;
                      v340 += 8;
                      char v344 = v345;
                      if (v342 <= v345) {
                        LOBYTE(v342) = v344;
                      }
                      *v341++ = v342;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v154 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v155 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v156 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v158 = *v154++;
                    unsigned int v157 = v158;
                    unsigned int v160 = *v155;
                    v155 += 8;
                    char v159 = v160;
                    if (v157 <= v160) {
                      LOBYTE(v157) = v159;
                    }
                    *v156++ = v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v346 = (unsigned __int8 *)*((void *)a1 + 2);
                    v347 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v348 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v350 = *v346++;
                      unint64_t v349 = v350;
                      unint64_t v352 = *v347++;
                      unint64_t v351 = v352;
                      if (v349 <= v352) {
                        unint64_t v349 = v351;
                      }
                      *v348++ = v349;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v161 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v162 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v163 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v165 = *v161++;
                    unint64_t v164 = v165;
                    unint64_t v167 = *v162++;
                    unint64_t v166 = v167;
                    if (v164 <= v167) {
                      unint64_t v164 = v166;
                    }
                    *v163++ = v164;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((void *)a1 + 2);
                    v238 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v239 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v240 = *v237++;
                      double v241 = (double)v240;
                      unint64_t v242 = *v238++;
                      double v243 = (double)v242;
                      if (v241 <= (double)v242) {
                        double v241 = v243;
                      }
                      *v239++ = v241;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v52 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v53 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v54 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v55 = *v52++;
                    double v56 = (double)v55;
                    unint64_t v57 = *v53++;
                    double v58 = (double)v57;
                    if (v56 <= (double)v57) {
                      double v56 = v58;
                    }
                    *v54++ = v56;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v272 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v273 = (double *)*((void *)a2 + 2);
                    uint64_t v274 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v276 = *v272++;
                      unsigned int v275 = v276;
                      double v277 = *v273++;
                      int v278 = (int)v277;
                      if (v275 <= (int)v277) {
                        LOBYTE(v275) = v278;
                      }
                      *v274++ = v275;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v87 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v88 = (double *)*((void *)a2 + 2);
                  unsigned int v89 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v91 = *v87++;
                    unsigned int v90 = v91;
                    double v92 = *v88++;
                    int v93 = (int)v92;
                    if (v90 <= (int)v92) {
                      LOBYTE(v90) = v93;
                    }
                    *v89++ = v90;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v279 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v280 = (double *)*((void *)a2 + 2);
                    v281 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v283 = *v279++;
                      unint64_t v282 = v283;
                      double v284 = *v280++;
                      unint64_t v285 = (unint64_t)v284;
                      if (v282 <= (unint64_t)v284) {
                        unint64_t v282 = v285;
                      }
                      *v281++ = v282;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v95 = (double *)*((void *)a2 + 2);
                  char v96 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v98 = *v94++;
                    unint64_t v97 = v98;
                    double v99 = *v95++;
                    unint64_t v100 = (unint64_t)v99;
                    if (v97 <= (unint64_t)v99) {
                      unint64_t v97 = v100;
                    }
                    *v96++ = v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v202 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v203 = (double *)*((void *)a2 + 2);
                    char v204 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v205 = *v202++;
                      double v206 = (double)v205;
                      double v207 = *v203++;
                      double v208 = v207;
                      if (v207 >= v206) {
                        double v206 = v208;
                      }
                      *v204++ = v206;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v17 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v18 = (double *)*((void *)a2 + 2);
                  unsigned int v19 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v20 = *v17++;
                    double v21 = (double)v20;
                    double v22 = *v18++;
                    double v23 = v22;
                    if (v22 >= v21) {
                      double v21 = v23;
                    }
                    *v19++ = v21;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v353 = (unsigned __int8 *)*((void *)a1 + 2);
                    v354 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v355 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v357 = *v353;
                      v353 += 8;
                      unsigned int v356 = v357;
                      unsigned int v359 = *v354++;
                      char v358 = v359;
                      if (v356 <= v359) {
                        LOBYTE(v356) = v358;
                      }
                      *v355++ = v356;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v168 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v169 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v170 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v172 = *v168;
                    v168 += 8;
                    unsigned int v171 = v172;
                    unsigned int v174 = *v169++;
                    char v173 = v174;
                    if (v171 <= v174) {
                      LOBYTE(v171) = v173;
                    }
                    *v170++ = v171;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v360 = (unint64_t *)*((void *)a1 + 2);
                    v361 = (unsigned __int8 *)*((void *)a2 + 2);
                    v362 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v364 = *v360++;
                      unint64_t v363 = v364;
                      LODWORD(v364) = *v361++;
                      unint64_t v365 = v364;
                      if (v363 <= v364) {
                        unint64_t v363 = v365;
                      }
                      *v362++ = v363;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v175 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v176 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v177 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v179 = *v175++;
                    unint64_t v178 = v179;
                    LODWORD(v179) = *v176++;
                    unint64_t v180 = v179;
                    if (v178 <= v179) {
                      unint64_t v178 = v180;
                    }
                    *v177++ = v178;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v244 = (unint64_t *)*((void *)a1 + 2);
                    char v245 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v246 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v247 = *v244++;
                      unint64_t v248 = v247;
                      LODWORD(v247) = *v245++;
                      double v249 = (double)v247;
                      double v250 = (double)v248;
                      if (v250 <= (double)v247) {
                        double v250 = v249;
                      }
                      *v246++ = v250;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v59 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v60 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v61 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v62 = *v59++;
                    unint64_t v63 = v62;
                    LODWORD(v62) = *v60++;
                    double v64 = (double)v62;
                    double v65 = (double)v63;
                    if (v65 <= (double)v62) {
                      double v65 = v64;
                    }
                    *v61++ = v65;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v366 = (unsigned __int8 *)*((void *)a1 + 2);
                    v367 = (unsigned __int8 *)*((void *)a2 + 2);
                    v368 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v370 = *v366;
                      v366 += 8;
                      unsigned int v369 = v370;
                      unsigned int v372 = *v367;
                      v367 += 8;
                      char v371 = v372;
                      if (v369 <= v372) {
                        LOBYTE(v369) = v371;
                      }
                      *v368++ = v369;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  int v181 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v182 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v183 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v185 = *v181;
                    v181 += 8;
                    unsigned int v184 = v185;
                    unsigned int v187 = *v182;
                    v182 += 8;
                    char v186 = v187;
                    if (v184 <= v187) {
                      LOBYTE(v184) = v186;
                    }
                    *v183++ = v184;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v373 = (unint64_t *)*((void *)a1 + 2);
                    v374 = (unint64_t *)*((void *)a2 + 2);
                    v375 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v377 = *v373++;
                      unint64_t v376 = v377;
                      unint64_t v379 = *v374++;
                      unint64_t v378 = v379;
                      if (v376 <= v379) {
                        unint64_t v376 = v378;
                      }
                      *v375++ = v376;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v188 = (unint64_t *)*((void *)a1 + 2);
                  int v189 = (unint64_t *)*((void *)a2 + 2);
                  double v190 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v192 = *v188++;
                    unint64_t v191 = v192;
                    unint64_t v194 = *v189++;
                    unint64_t v193 = v194;
                    if (v191 <= v194) {
                      unint64_t v191 = v193;
                    }
                    *v190++ = v191;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v251 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v252 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v253 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v254 = *v251++;
                      double v255 = (double)v254;
                      unint64_t v256 = *v252++;
                      double v257 = (double)v256;
                      if (v255 <= (double)v256) {
                        double v255 = v257;
                      }
                      *v253++ = v255;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v66 = (unint64_t *)*((void *)a1 + 2);
                  double v67 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v68 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v69 = *v66++;
                    double v70 = (double)v69;
                    unint64_t v71 = *v67++;
                    double v72 = (double)v71;
                    if (v70 <= (double)v71) {
                      double v70 = v72;
                    }
                    *v68++ = v70;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v286 = (unsigned __int8 *)*((void *)a1 + 2);
                    v287 = (double *)*((void *)a2 + 2);
                    unint64_t v288 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v290 = *v286;
                      v286 += 8;
                      unsigned int v289 = v290;
                      double v291 = *v287++;
                      int v292 = (int)v291;
                      if (v289 <= (int)v291) {
                        LOBYTE(v289) = v292;
                      }
                      *v288++ = v289;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v101 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v102 = (double *)*((void *)a2 + 2);
                  unsigned int v103 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v105 = *v101;
                    v101 += 8;
                    unsigned int v104 = v105;
                    double v106 = *v102++;
                    int v107 = (int)v106;
                    if (v104 <= (int)v106) {
                      LOBYTE(v104) = v107;
                    }
                    *v103++ = v104;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v293 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v294 = (double *)*((void *)a2 + 2);
                    unsigned int v295 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v297 = *v293++;
                      unint64_t v296 = v297;
                      double v298 = *v294++;
                      unint64_t v299 = (unint64_t)v298;
                      if (v296 <= (unint64_t)v298) {
                        unint64_t v296 = v299;
                      }
                      *v295++ = v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v108 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v109 = (double *)*((void *)a2 + 2);
                  char v110 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v112 = *v108++;
                    unint64_t v111 = v112;
                    double v113 = *v109++;
                    unint64_t v114 = (unint64_t)v113;
                    if (v111 <= (unint64_t)v113) {
                      unint64_t v111 = v114;
                    }
                    *v110++ = v111;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v209 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v210 = (double *)*((void *)a2 + 2);
                    double v211 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v212 = *v209++;
                      unint64_t v213 = v212;
                      double v214 = *v210++;
                      double v215 = v214;
                      double v216 = (double)v213;
                      if (v214 >= v216) {
                        double v216 = v215;
                      }
                      *v211++ = v216;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v24 = (unint64_t *)*((void *)a1 + 2);
                  double v25 = (double *)*((void *)a2 + 2);
                  double v26 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v27 = *v24++;
                    unint64_t v28 = v27;
                    double v29 = *v25++;
                    double v30 = v29;
                    double v31 = (double)v28;
                    if (v29 >= v31) {
                      double v31 = v30;
                    }
                    *v26++ = v31;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v300 = (double *)*((void *)a1 + 2);
                    unint64_t v301 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v302 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v303 = *v300++;
                      unsigned int v304 = (int)v303;
                      LODWORD(v303) = *v301++;
                      char v305 = LOBYTE(v303);
                      if (v304 <= LODWORD(v303)) {
                        LOBYTE(v304) = v305;
                      }
                      *v302++ = v304;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v115 = (double *)*((void *)a1 + 2);
                  unint64_t v116 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v117 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v118 = *v115++;
                    unsigned int v119 = (int)v118;
                    LODWORD(v118) = *v116++;
                    char v120 = LOBYTE(v118);
                    if (v119 <= LODWORD(v118)) {
                      LOBYTE(v119) = v120;
                    }
                    *v117++ = v119;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v306 = (double *)*((void *)a1 + 2);
                    unsigned int v307 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v308 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v309 = *v306++;
                      unint64_t v310 = (unint64_t)v309;
                      LODWORD(v309) = *v307++;
                      unint64_t v311 = LODWORD(v309);
                      if (v310 <= LODWORD(v309)) {
                        unint64_t v310 = v311;
                      }
                      *v308++ = v310;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v121 = (double *)*((void *)a1 + 2);
                  char v122 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v123 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v124 = *v121++;
                    unint64_t v125 = (unint64_t)v124;
                    LODWORD(v124) = *v122++;
                    unint64_t v126 = LODWORD(v124);
                    if (v125 <= LODWORD(v124)) {
                      unint64_t v125 = v126;
                    }
                    *v123++ = v125;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v217 = (double *)*((void *)a1 + 2);
                    unint64_t v218 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v219 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v220 = *v217++;
                      double v221 = v220;
                      LODWORD(v220) = *v218++;
                      double v222 = (double)LODWORD(v220);
                      if (v221 <= (double)LODWORD(v220)) {
                        double v221 = v222;
                      }
                      *v219++ = v221;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unsigned int v32 = (double *)*((void *)a1 + 2);
                  double v33 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v34 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v35 = *v32++;
                    double v36 = v35;
                    LODWORD(v35) = *v33++;
                    double v37 = (double)LODWORD(v35);
                    if (v36 <= (double)LODWORD(v35)) {
                      double v36 = v37;
                    }
                    *v34++ = v36;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v312 = (double *)*((void *)a1 + 2);
                    char v313 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v314 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v315 = *v312++;
                      unsigned int v316 = (int)v315;
                      LODWORD(v315) = *v313;
                      v313 += 8;
                      char v317 = LOBYTE(v315);
                      if (v316 <= LODWORD(v315)) {
                        LOBYTE(v316) = v317;
                      }
                      *v314++ = v316;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v127 = (double *)*((void *)a1 + 2);
                  unint64_t v128 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v129 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v130 = *v127++;
                    unsigned int v131 = (int)v130;
                    LODWORD(v130) = *v128;
                    v128 += 8;
                    char v132 = LOBYTE(v130);
                    if (v131 <= LODWORD(v130)) {
                      LOBYTE(v131) = v132;
                    }
                    *v129++ = v131;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (double *)*((void *)a1 + 2);
                    uint64_t v319 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v320 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v321 = *v318++;
                      unint64_t v322 = (unint64_t)v321;
                      unint64_t v324 = *v319++;
                      unint64_t v323 = v324;
                      if (v322 <= v324) {
                        unint64_t v322 = v323;
                      }
                      *v320++ = v322;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v133 = (double *)*((void *)a1 + 2);
                  char v134 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v135 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v136 = *v133++;
                    unint64_t v137 = (unint64_t)v136;
                    unint64_t v139 = *v134++;
                    unint64_t v138 = v139;
                    if (v137 <= v139) {
                      unint64_t v137 = v138;
                    }
                    *v135++ = v137;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v223 = (double *)*((void *)a1 + 2);
                    unint64_t v224 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v225 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v226 = *v223++;
                      double v227 = v226;
                      unint64_t v228 = *v224++;
                      double v229 = (double)v228;
                      if (v227 <= (double)v228) {
                        double v227 = v229;
                      }
                      *v225++ = v227;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  unint64_t v38 = (double *)*((void *)a1 + 2);
                  unsigned int v39 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v40 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v41 = *v38++;
                    double v42 = v41;
                    unint64_t v43 = *v39++;
                    double v44 = (double)v43;
                    if (v42 <= (double)v43) {
                      double v42 = v44;
                    }
                    *v40++ = v42;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v258 = (double *)*((void *)a1 + 2);
                    v259 = (double *)*((void *)a2 + 2);
                    v260 = (unsigned char *)*((void *)a3 + 2);
                    do
                    {
                      double v261 = *v258++;
                      unsigned int v262 = (int)v261;
                      double v263 = *v259++;
                      int v264 = (int)v263;
                      if (v262 <= (int)v263) {
                        LOBYTE(v262) = v264;
                      }
                      *v260++ = v262;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  int v73 = (double *)*((void *)a1 + 2);
                  unint64_t v74 = (double *)*((void *)a2 + 2);
                  char v75 = (unsigned char *)*((void *)a3 + 2);
                  do
                  {
                    double v76 = *v73++;
                    unsigned int v77 = (int)v76;
                    double v78 = *v74++;
                    int v79 = (int)v78;
                    if (v77 <= (int)v78) {
                      LOBYTE(v77) = v79;
                    }
                    *v75++ = v77;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (double *)*((void *)a1 + 2);
                    v266 = (double *)*((void *)a2 + 2);
                    unint64_t v267 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v268 = *v265++;
                      unint64_t v269 = (unint64_t)v268;
                      double v270 = *v266++;
                      unint64_t v271 = (unint64_t)v270;
                      if (v269 <= (unint64_t)v270) {
                        unint64_t v269 = v271;
                      }
                      *v267++ = v269;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  double v80 = (double *)*((void *)a1 + 2);
                  int v81 = (double *)*((void *)a2 + 2);
                  uint64_t v82 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v83 = *v80++;
                    unint64_t v84 = (unint64_t)v83;
                    double v85 = *v81++;
                    unint64_t v86 = (unint64_t)v85;
                    if (v84 <= (unint64_t)v85) {
                      unint64_t v84 = v86;
                    }
                    *v82++ = v84;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v195 = (double *)*((void *)a1 + 2);
                    char v196 = (double *)*((void *)a2 + 2);
                    unsigned int v197 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v198 = *v195++;
                      double v199 = v198;
                      double v200 = *v196++;
                      double v201 = v200;
                      if (v199 <= v200) {
                        double v199 = v201;
                      }
                      *v197++ = v199;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  double v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    double v15 = v14;
                    if (v13 <= v14) {
                      double v13 = v15;
                    }
                    *v11++ = v13;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *sub_16E74(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  int v5 = a1;
  int v6 = (int *)sub_EAF4(a3, a1);

  return agxps_timeseries_max_st(v5, a2, (int *)a3, v6, 1);
}

int *agxps_timeseries_max_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  unint64_t result = 0;
  if (a3 && a4)
  {
    if (*((unsigned char *)a4 + 32)) {
      return 0;
    }
    uint64_t v7 = *((void *)a3 + 1);
    if (v7 != *((void *)a4 + 1))
    {
      return 0;
    }
    else
    {
      int v8 = *a3;
      int v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v194 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v195 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v197 = *v194++;
                        char v196 = v197;
                        if (a2 > v197) {
                          char v196 = a2;
                        }
                        *v195++ = v196;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v86 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v87 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v89 = *v86++;
                      char v88 = v89;
                      if (a2 > v89) {
                        char v88 = a2;
                      }
                      *v87++ = v88;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v198 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v199 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v201 = *v198++;
                        uint64_t v200 = v201;
                        if (a2 > (unint64_t)v201) {
                          uint64_t v200 = a2;
                        }
                        *v199++ = v200;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v90 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v91 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v93 = *v90++;
                      uint64_t v92 = v93;
                      if (a2 > (unint64_t)v93) {
                        uint64_t v92 = a2;
                      }
                      *v91++ = v92;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v138 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v139 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v140 = *v138++;
                        double v141 = (double)v140;
                        if ((double)a2 > (double)v140) {
                          double v141 = (double)a2;
                        }
                        *v139++ = v141;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v30 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v31 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v32 = *v30++;
                      double v33 = (double)v32;
                      if ((double)a2 > (double)v32) {
                        double v33 = (double)a2;
                      }
                      *v31++ = v33;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v202 = (unsigned __int8 *)*((void *)a3 + 2);
                      unsigned int v203 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v205 = *v202;
                        v202 += 8;
                        char v204 = v205;
                        if (a2 > v205) {
                          char v204 = a2;
                        }
                        *v203++ = v204;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    char v94 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v95 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v97 = *v94;
                      v94 += 8;
                      char v96 = v97;
                      if (a2 > v97) {
                        char v96 = a2;
                      }
                      *v95++ = v96;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v206 = (unint64_t *)*((void *)a3 + 2);
                      double v207 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v209 = *v206++;
                        unint64_t v208 = v209;
                        if (a2 > v209) {
                          unint64_t v208 = a2;
                        }
                        *v207++ = v208;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v98 = (unint64_t *)*((void *)a3 + 2);
                    double v99 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v101 = *v98++;
                      unint64_t v100 = v101;
                      if (a2 > v101) {
                        unint64_t v100 = a2;
                      }
                      *v99++ = v100;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v142 = (unint64_t *)*((void *)a3 + 2);
                      unsigned int v143 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v144 = *v142++;
                        double v145 = (double)v144;
                        if ((double)a2 > (double)v144) {
                          double v145 = (double)a2;
                        }
                        *v143++ = v145;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    uint64_t v34 = (unint64_t *)*((void *)a3 + 2);
                    double v35 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v36 = *v34++;
                      double v37 = (double)v36;
                      if ((double)a2 > (double)v36) {
                        double v37 = (double)a2;
                      }
                      *v35++ = v37;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v162 = (double *)*((void *)a3 + 2);
                      uint64_t v163 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        double v164 = *v162++;
                        int v165 = (int)v164;
                        if (a2 > (int)v164) {
                          LOBYTE(v165) = a2;
                        }
                        *v163++ = v165;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v54 = (double *)*((void *)a3 + 2);
                    unsigned int v55 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v56 = *v54++;
                      int v57 = (int)v56;
                      if (a2 > (int)v56) {
                        LOBYTE(v57) = a2;
                      }
                      *v55++ = v57;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v166 = (double *)*((void *)a3 + 2);
                      unint64_t v167 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v168 = *v166++;
                        unint64_t v169 = (unint64_t)v168;
                        if (a2 > (unint64_t)v168) {
                          unint64_t v169 = a2;
                        }
                        *v167++ = v169;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v58 = (double *)*((void *)a3 + 2);
                    unint64_t v59 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v60 = *v58++;
                      unint64_t v61 = (unint64_t)v60;
                      if (a2 > (unint64_t)v60) {
                        unint64_t v61 = a2;
                      }
                      *v59++ = v61;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v122 = (double *)*((void *)a3 + 2);
                      unsigned int v123 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v124 = *v122++;
                        double v125 = v124;
                        if (v124 < (double)a2) {
                          double v125 = (double)a2;
                        }
                        *v123++ = v125;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v14 = (double *)*((void *)a3 + 2);
                    double v15 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v16 = *v14++;
                      double v17 = v16;
                      if (v16 < (double)a2) {
                        double v17 = (double)a2;
                      }
                      *v15++ = v17;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v210 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v211 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v213 = *v210++;
                        char v212 = v213;
                        if (a2 > v213) {
                          char v212 = a2;
                        }
                        *v211++ = v212;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v102 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v103 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v105 = *v102++;
                      char v104 = v105;
                      if (a2 > v105) {
                        char v104 = a2;
                      }
                      *v103++ = v104;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v214 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v215 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v217 = *v214++;
                        unint64_t v216 = v217;
                        if (a2 > v217) {
                          unint64_t v216 = a2;
                        }
                        *v215++ = v216;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v106 = (unsigned __int8 *)*((void *)a3 + 2);
                    int v107 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v109 = *v106++;
                      unint64_t v108 = v109;
                      if (a2 > v109) {
                        unint64_t v108 = a2;
                      }
                      *v107++ = v108;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v146 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v147 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v148 = *v146++;
                        double v149 = (double)v148;
                        if ((double)a2 > (double)v148) {
                          double v149 = (double)a2;
                        }
                        *v147++ = v149;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v38 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v39 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v40 = *v38++;
                      double v41 = (double)v40;
                      if ((double)a2 > (double)v40) {
                        double v41 = (double)a2;
                      }
                      *v39++ = v41;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v218 = (unsigned __int8 *)*((void *)a3 + 2);
                      uint64_t v219 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v221 = *v218;
                        v218 += 8;
                        char v220 = v221;
                        if (a2 > v221) {
                          char v220 = a2;
                        }
                        *v219++ = v220;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    char v110 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v111 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v113 = *v110;
                      v110 += 8;
                      char v112 = v113;
                      if (a2 > v113) {
                        char v112 = a2;
                      }
                      *v111++ = v112;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v222 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v223 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v225 = *v222++;
                        unint64_t v224 = v225;
                        if (a2 > v225) {
                          unint64_t v224 = a2;
                        }
                        *v223++ = v224;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v114 = (unint64_t *)*((void *)a3 + 2);
                    double v115 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v117 = *v114++;
                      unint64_t v116 = v117;
                      if (a2 > v117) {
                        unint64_t v116 = a2;
                      }
                      *v115++ = v116;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v150 = (unint64_t *)*((void *)a3 + 2);
                      int v151 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v152 = *v150++;
                        double v153 = (double)v152;
                        if ((double)a2 > (double)v152) {
                          double v153 = (double)a2;
                        }
                        *v151++ = v153;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v42 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v43 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v44 = *v42++;
                      double v45 = (double)v44;
                      if ((double)a2 > (double)v44) {
                        double v45 = (double)a2;
                      }
                      *v43++ = v45;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v170 = (double *)*((void *)a3 + 2);
                      unsigned int v171 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        double v172 = *v170++;
                        int v173 = (int)v172;
                        if (a2 > (int)v172) {
                          LOBYTE(v173) = a2;
                        }
                        *v171++ = v173;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v62 = (double *)*((void *)a3 + 2);
                    unint64_t v63 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v64 = *v62++;
                      int v65 = (int)v64;
                      if (a2 > (int)v64) {
                        LOBYTE(v65) = a2;
                      }
                      *v63++ = v65;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v174 = (double *)*((void *)a3 + 2);
                      double v175 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v176 = *v174++;
                        unint64_t v177 = (unint64_t)v176;
                        if (a2 > (unint64_t)v176) {
                          unint64_t v177 = a2;
                        }
                        *v175++ = v177;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v66 = (double *)*((void *)a3 + 2);
                    double v67 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v68 = *v66++;
                      unint64_t v69 = (unint64_t)v68;
                      if (a2 > (unint64_t)v68) {
                        unint64_t v69 = a2;
                      }
                      *v67++ = v69;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v126 = (double *)*((void *)a3 + 2);
                      unint64_t v127 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v128 = *v126++;
                        double v129 = v128;
                        if (v128 < (double)a2) {
                          double v129 = (double)a2;
                        }
                        *v127++ = v129;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v18 = (double *)*((void *)a3 + 2);
                    unsigned int v19 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v20 = *v18++;
                      double v21 = v20;
                      if (v20 < (double)a2) {
                        double v21 = (double)a2;
                      }
                      *v19++ = v21;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v178 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v179 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v181 = *v178++;
                        char v180 = v181;
                        if ((int)*(double *)&a2 > v181) {
                          char v180 = (int)*(double *)&a2;
                        }
                        *v179++ = v180;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v70 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v71 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v73 = *v70++;
                      char v72 = v73;
                      if ((int)*(double *)&a2 > v73) {
                        char v72 = (int)*(double *)&a2;
                      }
                      *v71++ = v72;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v182 = (unsigned __int8 *)*((void *)a3 + 2);
                      char v183 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v185 = *v182++;
                        unint64_t v184 = v185;
                        if ((unint64_t)*(double *)&a2 > v185) {
                          unint64_t v184 = (unint64_t)*(double *)&a2;
                        }
                        *v183++ = v184;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v74 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v75 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v77 = *v74++;
                      unint64_t v76 = v77;
                      if ((unint64_t)*(double *)&a2 > v77) {
                        unint64_t v76 = (unint64_t)*(double *)&a2;
                      }
                      *v75++ = v76;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v130 = (unsigned __int8 *)*((void *)a3 + 2);
                      unsigned int v131 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v132 = *v130++;
                        double v133 = (double)v132;
                        if (*(double *)&a2 > (double)v132) {
                          double v133 = *(double *)&a2;
                        }
                        *v131++ = v133;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v22 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v23 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v24 = *v22++;
                      double v25 = (double)v24;
                      if (*(double *)&a2 > (double)v24) {
                        double v25 = *(double *)&a2;
                      }
                      *v23++ = v25;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v186 = (unsigned __int8 *)*((void *)a3 + 2);
                      unsigned int v187 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v189 = *v186;
                        v186 += 8;
                        char v188 = v189;
                        if ((int)*(double *)&a2 > v189) {
                          char v188 = (int)*(double *)&a2;
                        }
                        *v187++ = v188;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v78 = (unsigned __int8 *)*((void *)a3 + 2);
                    int v79 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v81 = *v78;
                      v78 += 8;
                      char v80 = v81;
                      if ((int)*(double *)&a2 > v81) {
                        char v80 = (int)*(double *)&a2;
                      }
                      *v79++ = v80;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v190 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v191 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v193 = *v190++;
                        unint64_t v192 = v193;
                        if ((unint64_t)*(double *)&a2 > v193) {
                          unint64_t v192 = (unint64_t)*(double *)&a2;
                        }
                        *v191++ = v192;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    uint64_t v82 = (unint64_t *)*((void *)a3 + 2);
                    double v83 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v85 = *v82++;
                      unint64_t v84 = v85;
                      if ((unint64_t)*(double *)&a2 > v85) {
                        unint64_t v84 = (unint64_t)*(double *)&a2;
                      }
                      *v83++ = v84;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v134 = (unint64_t *)*((void *)a3 + 2);
                      unsigned int v135 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v136 = *v134++;
                        double v137 = (double)v136;
                        if (*(double *)&a2 > (double)v136) {
                          double v137 = *(double *)&a2;
                        }
                        *v135++ = v137;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    double v26 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v27 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v28 = *v26++;
                      double v29 = (double)v28;
                      if (*(double *)&a2 > (double)v28) {
                        double v29 = *(double *)&a2;
                      }
                      *v27++ = v29;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v154 = (double *)*((void *)a3 + 2);
                      unint64_t v155 = (unsigned char *)*((void *)a4 + 2);
                      do
                      {
                        double v156 = *v154++;
                        int v157 = (int)v156;
                        if ((int)*(double *)&a2 > (int)v156) {
                          LOBYTE(v157) = (int)*(double *)&a2;
                        }
                        *v155++ = v157;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v46 = (double *)*((void *)a3 + 2);
                    unsigned int v47 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v48 = *v46++;
                      int v49 = (int)v48;
                      if ((int)*(double *)&a2 > (int)v48) {
                        LOBYTE(v49) = (int)*(double *)&a2;
                      }
                      *v47++ = v49;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v158 = (double *)*((void *)a3 + 2);
                      char v159 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v160 = *v158++;
                        unint64_t v161 = (unint64_t)v160;
                        if ((unint64_t)*(double *)&a2 > (unint64_t)v160) {
                          unint64_t v161 = (unint64_t)*(double *)&a2;
                        }
                        *v159++ = v161;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unsigned int v50 = (double *)*((void *)a3 + 2);
                    double v51 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v52 = *v50++;
                      unint64_t v53 = (unint64_t)v52;
                      if ((unint64_t)*(double *)&a2 > (unint64_t)v52) {
                        unint64_t v53 = (unint64_t)*(double *)&a2;
                      }
                      *v51++ = v53;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v118 = (double *)*((void *)a3 + 2);
                      unsigned int v119 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v120 = *v118++;
                        double v121 = v120;
                        if (v120 < *(double *)&a2) {
                          double v121 = *(double *)&a2;
                        }
                        *v119++ = v121;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    unint64_t v10 = (double *)*((void *)a3 + 2);
                    double v11 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v12 = *v10++;
                      double v13 = v12;
                      if (v12 < *(double *)&a2) {
                        double v13 = *(double *)&a2;
                      }
                      *v11++ = v13;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return a4;
    }
  }
  return result;
}

int *sub_17AF0(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  int v4 = a2;
  int v6 = (int *)sub_EAF4(a1, a2);

  return agxps_timeseries_max_ts((int *)a1, v4, a3, v6, 1);
}

int *agxps_timeseries_max_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5 = 0;
  if (a1 && a4)
  {
    if (*((unsigned char *)a4 + 32)) {
      return 0;
    }
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 != *((void *)a4 + 1))
    {
      return 0;
    }
    else
    {
      int v7 = *a1;
      int v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v194 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v195 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v197 = *v194++;
                      char v196 = v197;
                      if (v197 <= a3) {
                        char v196 = a3;
                      }
                      *v195++ = v196;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v86 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v87 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v89 = *v86++;
                    char v88 = v89;
                    if (v89 <= a3) {
                      char v88 = a3;
                    }
                    *v87++ = v88;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v198 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v199 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v201 = *v198++;
                      uint64_t v200 = v201;
                      if (v201 <= (unint64_t)a3) {
                        uint64_t v200 = a3;
                      }
                      *v199++ = v200;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v90 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v91 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v93 = *v90++;
                    uint64_t v92 = v93;
                    if (v93 <= (unint64_t)a3) {
                      uint64_t v92 = a3;
                    }
                    *v91++ = v92;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v138 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v139 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v140 = *v138++;
                      double v141 = (double)v140;
                      if ((double)v140 <= (double)a3) {
                        double v141 = (double)a3;
                      }
                      *v139++ = v141;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v30 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v31 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v32 = *v30++;
                    double v33 = (double)v32;
                    if ((double)v32 <= (double)a3) {
                      double v33 = (double)a3;
                    }
                    *v31++ = v33;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v202 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v203 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v205 = *v202++;
                      char v204 = v205;
                      if (v205 <= a3) {
                        char v204 = a3;
                      }
                      *v203++ = v204;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v95 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v97 = *v94++;
                    char v96 = v97;
                    if (v97 <= a3) {
                      char v96 = a3;
                    }
                    *v95++ = v96;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v206 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v207 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v209 = *v206++;
                      unint64_t v208 = v209;
                      if (v209 <= a3) {
                        unint64_t v208 = a3;
                      }
                      *v207++ = v208;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v98 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v99 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v101 = *v98++;
                    unint64_t v100 = v101;
                    if (v101 <= a3) {
                      unint64_t v100 = a3;
                    }
                    *v99++ = v100;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v142 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v143 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v144 = *v142++;
                      double v145 = (double)v144;
                      if ((double)v144 <= (double)a3) {
                        double v145 = (double)a3;
                      }
                      *v143++ = v145;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v34 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v35 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v36 = *v34++;
                    double v37 = (double)v36;
                    if ((double)v36 <= (double)a3) {
                      double v37 = (double)a3;
                    }
                    *v35++ = v37;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v162 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v163 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v165 = *v162++;
                      char v164 = v165;
                      if (v165 <= (int)*(double *)&a3) {
                        char v164 = (int)*(double *)&a3;
                      }
                      *v163++ = v164;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v54 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v55 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v57 = *v54++;
                    char v56 = v57;
                    if (v57 <= (int)*(double *)&a3) {
                      char v56 = (int)*(double *)&a3;
                    }
                    *v55++ = v56;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v166 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v167 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v169 = *v166++;
                      unint64_t v168 = v169;
                      if (v169 <= (unint64_t)*(double *)&a3) {
                        unint64_t v168 = (unint64_t)*(double *)&a3;
                      }
                      *v167++ = v168;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v58 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v59 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v61 = *v58++;
                    unint64_t v60 = v61;
                    if (v61 <= (unint64_t)*(double *)&a3) {
                      unint64_t v60 = (unint64_t)*(double *)&a3;
                    }
                    *v59++ = v60;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v122 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v123 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v124 = *v122++;
                      double v125 = (double)v124;
                      if (*(double *)&a3 >= (double)v124) {
                        double v125 = *(double *)&a3;
                      }
                      *v123++ = v125;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v14 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v15 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v16 = *v14++;
                    double v17 = (double)v16;
                    if (*(double *)&a3 >= (double)v16) {
                      double v17 = *(double *)&a3;
                    }
                    *v15++ = v17;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v210 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v211 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v213 = *v210;
                      v210 += 8;
                      char v212 = v213;
                      if (v213 <= a3) {
                        char v212 = a3;
                      }
                      *v211++ = v212;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v102 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v103 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v105 = *v102;
                    v102 += 8;
                    char v104 = v105;
                    if (v105 <= a3) {
                      char v104 = a3;
                    }
                    *v103++ = v104;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v214 = (unint64_t *)*((void *)a1 + 2);
                    double v215 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v217 = *v214++;
                      unint64_t v216 = v217;
                      if (v217 <= a3) {
                        unint64_t v216 = a3;
                      }
                      *v215++ = v216;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v106 = (unint64_t *)*((void *)a1 + 2);
                  int v107 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v109 = *v106++;
                    unint64_t v108 = v109;
                    if (v109 <= a3) {
                      unint64_t v108 = a3;
                    }
                    *v107++ = v108;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v146 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v147 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v148 = *v146++;
                      double v149 = (double)v148;
                      if ((double)v148 <= (double)a3) {
                        double v149 = (double)a3;
                      }
                      *v147++ = v149;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v38 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v39 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v40 = *v38++;
                    double v41 = (double)v40;
                    if ((double)v40 <= (double)a3) {
                      double v41 = (double)a3;
                    }
                    *v39++ = v41;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v218 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v219 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v221 = *v218;
                      v218 += 8;
                      char v220 = v221;
                      if (v221 <= a3) {
                        char v220 = a3;
                      }
                      *v219++ = v220;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  char v110 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v111 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v113 = *v110;
                    v110 += 8;
                    char v112 = v113;
                    if (v113 <= a3) {
                      char v112 = a3;
                    }
                    *v111++ = v112;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v222 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v223 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v225 = *v222++;
                      unint64_t v224 = v225;
                      if (v225 <= a3) {
                        unint64_t v224 = a3;
                      }
                      *v223++ = v224;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v114 = (unint64_t *)*((void *)a1 + 2);
                  double v115 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v117 = *v114++;
                    unint64_t v116 = v117;
                    if (v117 <= a3) {
                      unint64_t v116 = a3;
                    }
                    *v115++ = v116;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v150 = (unint64_t *)*((void *)a1 + 2);
                    int v151 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v152 = *v150++;
                      double v153 = (double)v152;
                      if ((double)v152 <= (double)a3) {
                        double v153 = (double)a3;
                      }
                      *v151++ = v153;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v42 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v43 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v44 = *v42++;
                    double v45 = (double)v44;
                    if ((double)v44 <= (double)a3) {
                      double v45 = (double)a3;
                    }
                    *v43++ = v45;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v170 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v171 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v173 = *v170;
                      v170 += 8;
                      char v172 = v173;
                      if (v173 <= (int)*(double *)&a3) {
                        char v172 = (int)*(double *)&a3;
                      }
                      *v171++ = v172;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v62 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v63 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v65 = *v62;
                    v62 += 8;
                    char v64 = v65;
                    if (v65 <= (int)*(double *)&a3) {
                      char v64 = (int)*(double *)&a3;
                    }
                    *v63++ = v64;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v174 = (unint64_t *)*((void *)a1 + 2);
                    double v175 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v177 = *v174++;
                      unint64_t v176 = v177;
                      if (v177 <= (unint64_t)*(double *)&a3) {
                        unint64_t v176 = (unint64_t)*(double *)&a3;
                      }
                      *v175++ = v176;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v66 = (unint64_t *)*((void *)a1 + 2);
                  double v67 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v69 = *v66++;
                    unint64_t v68 = v69;
                    if (v69 <= (unint64_t)*(double *)&a3) {
                      unint64_t v68 = (unint64_t)*(double *)&a3;
                    }
                    *v67++ = v68;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v126 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v127 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v128 = *v126++;
                      double v129 = (double)v128;
                      if (*(double *)&a3 >= (double)v128) {
                        double v129 = *(double *)&a3;
                      }
                      *v127++ = v129;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v18 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v19 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v20 = *v18++;
                    double v21 = (double)v20;
                    if (*(double *)&a3 >= (double)v20) {
                      double v21 = *(double *)&a3;
                    }
                    *v19++ = v21;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v178 = (double *)*((void *)a1 + 2);
                    unint64_t v179 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v180 = *v178++;
                      int v181 = (int)v180;
                      if ((int)v180 <= a3) {
                        LOBYTE(v181) = a3;
                      }
                      *v179++ = v181;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v70 = (double *)*((void *)a1 + 2);
                  unint64_t v71 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v72 = *v70++;
                    int v73 = (int)v72;
                    if ((int)v72 <= a3) {
                      LOBYTE(v73) = a3;
                    }
                    *v71++ = v73;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v182 = (double *)*((void *)a1 + 2);
                    char v183 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v184 = *v182++;
                      unint64_t v185 = (unint64_t)v184;
                      if ((unint64_t)v184 <= a3) {
                        unint64_t v185 = a3;
                      }
                      *v183++ = v185;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v74 = (double *)*((void *)a1 + 2);
                  char v75 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v76 = *v74++;
                    unint64_t v77 = (unint64_t)v76;
                    if ((unint64_t)v76 <= a3) {
                      unint64_t v77 = a3;
                    }
                    *v75++ = v77;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v130 = (double *)*((void *)a1 + 2);
                    unsigned int v131 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v132 = *v130++;
                      double v133 = v132;
                      if (v132 <= (double)a3) {
                        double v133 = (double)a3;
                      }
                      *v131++ = v133;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v22 = (double *)*((void *)a1 + 2);
                  double v23 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v24 = *v22++;
                    double v25 = v24;
                    if (v24 <= (double)a3) {
                      double v25 = (double)a3;
                    }
                    *v23++ = v25;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v186 = (double *)*((void *)a1 + 2);
                    unsigned int v187 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v188 = *v186++;
                      int v189 = (int)v188;
                      if ((int)v188 <= a3) {
                        LOBYTE(v189) = a3;
                      }
                      *v187++ = v189;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v78 = (double *)*((void *)a1 + 2);
                  int v79 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v80 = *v78++;
                    int v81 = (int)v80;
                    if ((int)v80 <= a3) {
                      LOBYTE(v81) = a3;
                    }
                    *v79++ = v81;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v190 = (double *)*((void *)a1 + 2);
                    unint64_t v191 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v192 = *v190++;
                      unint64_t v193 = (unint64_t)v192;
                      if ((unint64_t)v192 <= a3) {
                        unint64_t v193 = a3;
                      }
                      *v191++ = v193;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  uint64_t v82 = (double *)*((void *)a1 + 2);
                  double v83 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v84 = *v82++;
                    unint64_t v85 = (unint64_t)v84;
                    if ((unint64_t)v84 <= a3) {
                      unint64_t v85 = a3;
                    }
                    *v83++ = v85;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v134 = (double *)*((void *)a1 + 2);
                    unsigned int v135 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v136 = *v134++;
                      double v137 = v136;
                      if (v136 <= (double)a3) {
                        double v137 = (double)a3;
                      }
                      *v135++ = v137;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  double v26 = (double *)*((void *)a1 + 2);
                  unint64_t v27 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v28 = *v26++;
                    double v29 = v28;
                    if (v28 <= (double)a3) {
                      double v29 = (double)a3;
                    }
                    *v27++ = v29;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v154 = (double *)*((void *)a1 + 2);
                    unint64_t v155 = (unsigned char *)*((void *)a4 + 2);
                    do
                    {
                      double v156 = *v154++;
                      int v157 = (int)v156;
                      if ((int)v156 <= (int)*(double *)&a3) {
                        LOBYTE(v157) = (int)*(double *)&a3;
                      }
                      *v155++ = v157;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unint64_t v46 = (double *)*((void *)a1 + 2);
                  unsigned int v47 = (unsigned char *)*((void *)a4 + 2);
                  do
                  {
                    double v48 = *v46++;
                    int v49 = (int)v48;
                    if ((int)v48 <= (int)*(double *)&a3) {
                      LOBYTE(v49) = (int)*(double *)&a3;
                    }
                    *v47++ = v49;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v158 = (double *)*((void *)a1 + 2);
                    char v159 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v160 = *v158++;
                      unint64_t v161 = (unint64_t)v160;
                      if ((unint64_t)v160 <= (unint64_t)*(double *)&a3) {
                        unint64_t v161 = (unint64_t)*(double *)&a3;
                      }
                      *v159++ = v161;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  unsigned int v50 = (double *)*((void *)a1 + 2);
                  double v51 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v52 = *v50++;
                    unint64_t v53 = (unint64_t)v52;
                    if ((unint64_t)v52 <= (unint64_t)*(double *)&a3) {
                      unint64_t v53 = (unint64_t)*(double *)&a3;
                    }
                    *v51++ = v53;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v118 = (double *)*((void *)a1 + 2);
                    unsigned int v119 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v120 = *v118++;
                      double v121 = v120;
                      if (v120 <= *(double *)&a3) {
                        double v121 = *(double *)&a3;
                      }
                      *v119++ = v121;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v11 = *v9++;
                    double v12 = v11;
                    if (v11 <= *(double *)&a3) {
                      double v12 = *(double *)&a3;
                    }
                    *v10++ = v12;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      return a4;
    }
  }
  return (int *)v5;
}

int *sub_18764(int *result, int *a2, int *a3, int *a4, int a5)
{
  switch((int)result)
  {
    case 0:
      unint64_t result = 0;
      if (a2 && a3 && a4)
      {
        if (*((unsigned char *)a4 + 32)) {
          return 0;
        }
        uint64_t v5 = *((void *)a2 + 1);
        if (v5 != *((void *)a3 + 1) || v5 != *((void *)a4 + 1)) {
          return 0;
        }
        int v6 = *a2;
        int v7 = *a3;
        int v8 = *a4;
        if (*a2 == 2)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1727 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1728 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1729 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1731 = *v1727++;
                        int v1730 = v1731;
                        int v1732 = *v1728++;
                        *v1729++ = v1730 == v1732;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v737 = (unsigned __int8 *)*((void *)a2 + 2);
                    v738 = (unsigned __int8 *)*((void *)a3 + 2);
                    v739 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v741 = *v737++;
                      int v740 = v741;
                      int v742 = *v738++;
                      *v739++ = v740 == v742;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1733 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1734 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1735 = (void *)*((void *)a4 + 2);
                      do
                      {
                        int v1737 = *v1733++;
                        int v1736 = v1737;
                        int v1738 = *v1734++;
                        *v1735++ = v1736 == v1738;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v743 = (unsigned __int8 *)*((void *)a2 + 2);
                    v744 = (unsigned __int8 *)*((void *)a3 + 2);
                    v745 = (void *)*((void *)a4 + 2);
                    do
                    {
                      int v747 = *v743++;
                      int v746 = v747;
                      int v748 = *v744++;
                      *v745++ = v746 == v748;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1223 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1224 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1225 = (double *)*((void *)a4 + 2);
                      do
                      {
                        int v1227 = *v1223++;
                        int v1226 = v1227;
                        int v1228 = *v1224++;
                        if (v1226 == v1228) {
                          double v1229 = 1.0;
                        }
                        else {
                          double v1229 = 0.0;
                        }
                        *v1225++ = v1229;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    unsigned int v233 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v234 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v235 = (double *)*((void *)a4 + 2);
                    do
                    {
                      int v237 = *v233++;
                      int v236 = v237;
                      int v238 = *v234++;
                      if (v236 == v238) {
                        double v239 = 1.0;
                      }
                      else {
                        double v239 = 0.0;
                      }
                      *v235++ = v239;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1739 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1740 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1741 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1743 = *v1739++;
                        int v1742 = v1743;
                        int v1744 = *v1740;
                        v1740 += 8;
                        *v1741++ = v1742 == v1744;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v749 = (unsigned __int8 *)*((void *)a2 + 2);
                    v750 = (unsigned __int8 *)*((void *)a3 + 2);
                    v751 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v753 = *v749++;
                      int v752 = v753;
                      int v754 = *v750;
                      v750 += 8;
                      *v751++ = v752 == v754;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1745 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1746 = (uint64_t *)*((void *)a3 + 2);
                      v1747 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1749 = *v1745++;
                        uint64_t v1748 = v1749;
                        uint64_t v1750 = *v1746++;
                        *v1747++ = v1750 == v1748;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v755 = (unsigned __int8 *)*((void *)a2 + 2);
                    v756 = (uint64_t *)*((void *)a3 + 2);
                    v757 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v759 = *v755++;
                      uint64_t v758 = v759;
                      uint64_t v760 = *v756++;
                      *v757++ = v760 == v758;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1230 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1231 = (unint64_t *)*((void *)a3 + 2);
                      v1232 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1233 = *v1230++;
                        double v1234 = (double)v1233;
                        unint64_t v1235 = *v1231++;
                        if (v1234 == (double)v1235) {
                          double v1236 = 1.0;
                        }
                        else {
                          double v1236 = 0.0;
                        }
                        *v1232++ = v1236;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    unsigned int v240 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v241 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v242 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v243 = *v240++;
                      double v244 = (double)v243;
                      unint64_t v245 = *v241++;
                      if (v244 == (double)v245) {
                        double v246 = 1.0;
                      }
                      else {
                        double v246 = 0.0;
                      }
                      *v242++ = v246;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1457 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1458 = (double *)*((void *)a3 + 2);
                      v1459 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1461 = *v1457++;
                        int v1460 = v1461;
                        double v1462 = *v1458++;
                        *v1459++ = v1460 == (int)v1462;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v467 = (unsigned __int8 *)*((void *)a2 + 2);
                    v468 = (double *)*((void *)a3 + 2);
                    v469 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v471 = *v467++;
                      int v470 = v471;
                      double v472 = *v468++;
                      *v469++ = v470 == (int)v472;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1463 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1464 = (double *)*((void *)a3 + 2);
                      v1465 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1467 = *v1463++;
                        uint64_t v1466 = v1467;
                        double v1468 = *v1464++;
                        *v1465++ = v1466 == (unint64_t)v1468;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v473 = (unsigned __int8 *)*((void *)a2 + 2);
                    v474 = (double *)*((void *)a3 + 2);
                    v475 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v477 = *v473++;
                      uint64_t v476 = v477;
                      double v478 = *v474++;
                      *v475++ = v476 == (unint64_t)v478;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1061 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1062 = (double *)*((void *)a3 + 2);
                      v1063 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1064 = *v1061++;
                        double v1065 = (double)v1064;
                        double v1066 = *v1062++;
                        if (v1066 == v1065) {
                          double v1067 = 1.0;
                        }
                        else {
                          double v1067 = 0.0;
                        }
                        *v1063++ = v1067;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    unint64_t v71 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v72 = (double *)*((void *)a3 + 2);
                    int v73 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v74 = *v71++;
                      double v75 = (double)v74;
                      double v76 = *v72++;
                      if (v76 == v75) {
                        double v77 = 1.0;
                      }
                      else {
                        double v77 = 0.0;
                      }
                      *v73++ = v77;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
          }
        }
        else if (v6 == 1)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1751 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1752 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1753 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1755 = *v1751;
                        v1751 += 8;
                        int v1754 = v1755;
                        int v1756 = *v1752++;
                        *v1753++ = v1756 == v1754;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v761 = (unsigned __int8 *)*((void *)a2 + 2);
                    v762 = (unsigned __int8 *)*((void *)a3 + 2);
                    v763 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v765 = *v761;
                      v761 += 8;
                      int v764 = v765;
                      int v766 = *v762++;
                      *v763++ = v766 == v764;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1757 = (uint64_t *)*((void *)a2 + 2);
                      v1758 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1759 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1761 = *v1757++;
                        uint64_t v1760 = v1761;
                        LODWORD(v1761) = *v1758++;
                        *v1759++ = v1760 == v1761;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v767 = (uint64_t *)*((void *)a2 + 2);
                    v768 = (unsigned __int8 *)*((void *)a3 + 2);
                    v769 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v771 = *v767++;
                      uint64_t v770 = v771;
                      LODWORD(v771) = *v768++;
                      *v769++ = v770 == v771;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1237 = (unint64_t *)*((void *)a2 + 2);
                      v1238 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1239 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1240 = *v1237++;
                        unint64_t v1241 = v1240;
                        LODWORD(v1240) = *v1238++;
                        if ((double)v1241 == (double)v1240) {
                          double v1242 = 1.0;
                        }
                        else {
                          double v1242 = 0.0;
                        }
                        *v1239++ = v1242;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    unint64_t v247 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v248 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v249 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v250 = *v247++;
                      unint64_t v251 = v250;
                      LODWORD(v250) = *v248++;
                      if ((double)v251 == (double)v250) {
                        double v252 = 1.0;
                      }
                      else {
                        double v252 = 0.0;
                      }
                      *v249++ = v252;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1762 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1763 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1764 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1766 = *v1762;
                        v1762 += 8;
                        int v1765 = v1766;
                        int v1767 = *v1763;
                        v1763 += 8;
                        *v1764++ = v1765 == v1767;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v772 = (unsigned __int8 *)*((void *)a2 + 2);
                    v773 = (unsigned __int8 *)*((void *)a3 + 2);
                    v774 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v776 = *v772;
                      v772 += 8;
                      int v775 = v776;
                      int v777 = *v773;
                      v773 += 8;
                      *v774++ = v775 == v777;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1768 = (uint64_t *)*((void *)a2 + 2);
                      v1769 = (uint64_t *)*((void *)a3 + 2);
                      v1770 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1772 = *v1768++;
                        uint64_t v1771 = v1772;
                        uint64_t v1773 = *v1769++;
                        *v1770++ = v1771 == v1773;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v778 = (uint64_t *)*((void *)a2 + 2);
                    v779 = (uint64_t *)*((void *)a3 + 2);
                    v780 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v782 = *v778++;
                      uint64_t v781 = v782;
                      uint64_t v783 = *v779++;
                      *v780++ = v781 == v783;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1243 = (unint64_t *)*((void *)a2 + 2);
                      v1244 = (unint64_t *)*((void *)a3 + 2);
                      v1245 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1246 = *v1243++;
                        double v1247 = (double)v1246;
                        unint64_t v1248 = *v1244++;
                        if (v1247 == (double)v1248) {
                          double v1249 = 1.0;
                        }
                        else {
                          double v1249 = 0.0;
                        }
                        *v1245++ = v1249;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    unsigned int v253 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v254 = (unint64_t *)*((void *)a3 + 2);
                    double v255 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v256 = *v253++;
                      double v257 = (double)v256;
                      unint64_t v258 = *v254++;
                      if (v257 == (double)v258) {
                        double v259 = 1.0;
                      }
                      else {
                        double v259 = 0.0;
                      }
                      *v255++ = v259;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1469 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1470 = (double *)*((void *)a3 + 2);
                      v1471 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1473 = *v1469;
                        v1469 += 8;
                        int v1472 = v1473;
                        double v1474 = *v1470++;
                        *v1471++ = v1472 == (int)v1474;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v479 = (unsigned __int8 *)*((void *)a2 + 2);
                    v480 = (double *)*((void *)a3 + 2);
                    v481 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v483 = *v479;
                      v479 += 8;
                      int v482 = v483;
                      double v484 = *v480++;
                      *v481++ = v482 == (int)v484;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1475 = (uint64_t *)*((void *)a2 + 2);
                      v1476 = (double *)*((void *)a3 + 2);
                      v1477 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1479 = *v1475++;
                        uint64_t v1478 = v1479;
                        double v1480 = *v1476++;
                        *v1477++ = v1478 == (unint64_t)v1480;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v485 = (uint64_t *)*((void *)a2 + 2);
                    v486 = (double *)*((void *)a3 + 2);
                    v487 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v489 = *v485++;
                      uint64_t v488 = v489;
                      double v490 = *v486++;
                      *v487++ = v488 == (unint64_t)v490;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1068 = (unint64_t *)*((void *)a2 + 2);
                      v1069 = (double *)*((void *)a3 + 2);
                      v1070 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1071 = *v1068++;
                        unint64_t v1072 = v1071;
                        double v1073 = *v1069++;
                        if (v1073 == (double)v1072) {
                          double v1074 = 1.0;
                        }
                        else {
                          double v1074 = 0.0;
                        }
                        *v1070++ = v1074;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    double v78 = (unint64_t *)*((void *)a2 + 2);
                    int v79 = (double *)*((void *)a3 + 2);
                    double v80 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v81 = *v78++;
                      unint64_t v82 = v81;
                      double v83 = *v79++;
                      if (v83 == (double)v82) {
                        double v84 = 1.0;
                      }
                      else {
                        double v84 = 0.0;
                      }
                      *v80++ = v84;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v6)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1601 = (double *)*((void *)a2 + 2);
                      v1602 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1603 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1604 = *v1601++;
                        int v1605 = (int)v1604;
                        LODWORD(v1604) = *v1602++;
                        *v1603++ = LODWORD(v1604) == v1605;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v611 = (double *)*((void *)a2 + 2);
                    v612 = (unsigned __int8 *)*((void *)a3 + 2);
                    v613 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v614 = *v611++;
                      int v615 = (int)v614;
                      LODWORD(v614) = *v612++;
                      *v613++ = LODWORD(v614) == v615;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1606 = (double *)*((void *)a2 + 2);
                      v1607 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1608 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1609 = *v1606++;
                        unint64_t v1610 = (unint64_t)v1609;
                        LODWORD(v1609) = *v1607++;
                        *v1608++ = v1610 == LODWORD(v1609);
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v616 = (double *)*((void *)a2 + 2);
                    v617 = (unsigned __int8 *)*((void *)a3 + 2);
                    v618 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v619 = *v616++;
                      unint64_t v620 = (unint64_t)v619;
                      LODWORD(v619) = *v617++;
                      *v618++ = v620 == LODWORD(v619);
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1145 = (double *)*((void *)a2 + 2);
                      v1146 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1147 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1148 = *v1145++;
                        double v1149 = v1148;
                        LODWORD(v1148) = *v1146++;
                        if (v1149 == (double)LODWORD(v1148)) {
                          double v1150 = 1.0;
                        }
                        else {
                          double v1150 = 0.0;
                        }
                        *v1147++ = v1150;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    unint64_t v155 = (double *)*((void *)a2 + 2);
                    double v156 = (unsigned __int8 *)*((void *)a3 + 2);
                    int v157 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v158 = *v155++;
                      double v159 = v158;
                      LODWORD(v158) = *v156++;
                      if (v159 == (double)LODWORD(v158)) {
                        double v160 = 1.0;
                      }
                      else {
                        double v160 = 0.0;
                      }
                      *v157++ = v160;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1611 = (double *)*((void *)a2 + 2);
                      v1612 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1613 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1614 = *v1611++;
                        int v1615 = (int)v1614;
                        LODWORD(v1614) = *v1612;
                        v1612 += 8;
                        *v1613++ = v1615 == LODWORD(v1614);
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v621 = (double *)*((void *)a2 + 2);
                    v622 = (unsigned __int8 *)*((void *)a3 + 2);
                    v623 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v624 = *v621++;
                      int v625 = (int)v624;
                      LODWORD(v624) = *v622;
                      v622 += 8;
                      *v623++ = v625 == LODWORD(v624);
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1616 = (double *)*((void *)a2 + 2);
                      v1617 = (uint64_t *)*((void *)a3 + 2);
                      v1618 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1619 = *v1616++;
                        unint64_t v1620 = (unint64_t)v1619;
                        uint64_t v1621 = *v1617++;
                        *v1618++ = v1621 == v1620;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v626 = (double *)*((void *)a2 + 2);
                    v627 = (uint64_t *)*((void *)a3 + 2);
                    v628 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v629 = *v626++;
                      unint64_t v630 = (unint64_t)v629;
                      uint64_t v631 = *v627++;
                      *v628++ = v631 == v630;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1151 = (double *)*((void *)a2 + 2);
                      v1152 = (unint64_t *)*((void *)a3 + 2);
                      v1153 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1154 = *v1151++;
                        double v1155 = v1154;
                        unint64_t v1156 = *v1152++;
                        if (v1155 == (double)v1156) {
                          double v1157 = 1.0;
                        }
                        else {
                          double v1157 = 0.0;
                        }
                        *v1153++ = v1157;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    unint64_t v161 = (double *)*((void *)a2 + 2);
                    unint64_t v162 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v163 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v164 = *v161++;
                      double v165 = v164;
                      unint64_t v166 = *v162++;
                      if (v165 == (double)v166) {
                        double v167 = 1.0;
                      }
                      else {
                        double v167 = 0.0;
                      }
                      *v163++ = v167;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1385 = (double *)*((void *)a2 + 2);
                      v1386 = (double *)*((void *)a3 + 2);
                      v1387 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1388 = *v1385++;
                        int v1389 = (int)v1388;
                        double v1390 = *v1386++;
                        *v1387++ = v1389 == (int)v1390;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v395 = (double *)*((void *)a2 + 2);
                    v396 = (double *)*((void *)a3 + 2);
                    v397 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v398 = *v395++;
                      int v399 = (int)v398;
                      double v400 = *v396++;
                      *v397++ = v399 == (int)v400;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1391 = (double *)*((void *)a2 + 2);
                      v1392 = (double *)*((void *)a3 + 2);
                      v1393 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1394 = *v1391++;
                        unint64_t v1395 = (unint64_t)v1394;
                        double v1396 = *v1392++;
                        *v1393++ = v1395 == (unint64_t)v1396;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v401 = (double *)*((void *)a2 + 2);
                    v402 = (double *)*((void *)a3 + 2);
                    v403 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v404 = *v401++;
                      unint64_t v405 = (unint64_t)v404;
                      double v406 = *v402++;
                      *v403++ = v405 == (unint64_t)v406;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1019 = (double *)*((void *)a2 + 2);
                      v1020 = (double *)*((void *)a3 + 2);
                      v1021 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1022 = *v1019++;
                        double v1023 = v1022;
                        double v1024 = *v1020++;
                        if (v1023 == v1024) {
                          double v1025 = 1.0;
                        }
                        else {
                          double v1025 = 0.0;
                        }
                        *v1021++ = v1025;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    int v9 = (double *)*((void *)a2 + 2);
                    unint64_t v10 = (double *)*((void *)a3 + 2);
                    double v11 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v12 = *v9++;
                      double v13 = v12;
                      double v14 = *v10++;
                      if (v13 == v14) {
                        double v15 = 1.0;
                      }
                      else {
                        double v15 = 0.0;
                      }
                      *v11++ = v15;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 1:
      unint64_t result = 0;
      if (a2 && a3 && a4)
      {
        if (*((unsigned char *)a4 + 32)) {
          return 0;
        }
        uint64_t v16 = *((void *)a2 + 1);
        if (v16 != *((void *)a3 + 1) || v16 != *((void *)a4 + 1)) {
          return 0;
        }
        int v17 = *a2;
        int v18 = *a3;
        int v19 = *a4;
        if (*a2 == 2)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1774 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1775 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1776 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1778 = *v1774++;
                        int v1777 = v1778;
                        int v1779 = *v1775++;
                        *v1776++ = v1777 != v1779;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v784 = (unsigned __int8 *)*((void *)a2 + 2);
                    v785 = (unsigned __int8 *)*((void *)a3 + 2);
                    v786 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v788 = *v784++;
                      int v787 = v788;
                      int v789 = *v785++;
                      *v786++ = v787 != v789;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1780 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1781 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1782 = (void *)*((void *)a4 + 2);
                      do
                      {
                        int v1784 = *v1780++;
                        int v1783 = v1784;
                        int v1785 = *v1781++;
                        *v1782++ = v1783 != v1785;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v790 = (unsigned __int8 *)*((void *)a2 + 2);
                    v791 = (unsigned __int8 *)*((void *)a3 + 2);
                    v792 = (void *)*((void *)a4 + 2);
                    do
                    {
                      int v794 = *v790++;
                      int v793 = v794;
                      int v795 = *v791++;
                      *v792++ = v793 != v795;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1250 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1251 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1252 = (double *)*((void *)a4 + 2);
                      do
                      {
                        int v1254 = *v1250++;
                        int v1253 = v1254;
                        int v1255 = *v1251++;
                        if (v1253 == v1255) {
                          double v1256 = 0.0;
                        }
                        else {
                          double v1256 = 1.0;
                        }
                        *v1252++ = v1256;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v260 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v261 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v262 = (double *)*((void *)a4 + 2);
                    do
                    {
                      int v264 = *v260++;
                      int v263 = v264;
                      int v265 = *v261++;
                      if (v263 == v265) {
                        double v266 = 0.0;
                      }
                      else {
                        double v266 = 1.0;
                      }
                      *v262++ = v266;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1786 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1787 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1788 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1790 = *v1786++;
                        int v1789 = v1790;
                        int v1791 = *v1787;
                        v1787 += 8;
                        *v1788++ = v1789 != v1791;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v796 = (unsigned __int8 *)*((void *)a2 + 2);
                    v797 = (unsigned __int8 *)*((void *)a3 + 2);
                    v798 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v800 = *v796++;
                      int v799 = v800;
                      int v801 = *v797;
                      v797 += 8;
                      *v798++ = v799 != v801;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1792 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1793 = (uint64_t *)*((void *)a3 + 2);
                      v1794 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1796 = *v1792++;
                        uint64_t v1795 = v1796;
                        uint64_t v1797 = *v1793++;
                        *v1794++ = v1797 != v1795;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v802 = (unsigned __int8 *)*((void *)a2 + 2);
                    v803 = (uint64_t *)*((void *)a3 + 2);
                    v804 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v806 = *v802++;
                      uint64_t v805 = v806;
                      uint64_t v807 = *v803++;
                      *v804++ = v807 != v805;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1257 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1258 = (unint64_t *)*((void *)a3 + 2);
                      v1259 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1260 = *v1257++;
                        double v1261 = (double)v1260;
                        unint64_t v1262 = *v1258++;
                        if (v1261 == (double)v1262) {
                          double v1263 = 0.0;
                        }
                        else {
                          double v1263 = 1.0;
                        }
                        *v1259++ = v1263;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    unint64_t v267 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v268 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v269 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v270 = *v267++;
                      double v271 = (double)v270;
                      unint64_t v272 = *v268++;
                      if (v271 == (double)v272) {
                        double v273 = 0.0;
                      }
                      else {
                        double v273 = 1.0;
                      }
                      *v269++ = v273;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1481 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1482 = (double *)*((void *)a3 + 2);
                      v1483 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1485 = *v1481++;
                        int v1484 = v1485;
                        double v1486 = *v1482++;
                        *v1483++ = v1484 != (int)v1486;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v491 = (unsigned __int8 *)*((void *)a2 + 2);
                    v492 = (double *)*((void *)a3 + 2);
                    v493 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v495 = *v491++;
                      int v494 = v495;
                      double v496 = *v492++;
                      *v493++ = v494 != (int)v496;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1487 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1488 = (double *)*((void *)a3 + 2);
                      v1489 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1491 = *v1487++;
                        uint64_t v1490 = v1491;
                        double v1492 = *v1488++;
                        *v1489++ = v1490 != (unint64_t)v1492;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v497 = (unsigned __int8 *)*((void *)a2 + 2);
                    v498 = (double *)*((void *)a3 + 2);
                    v499 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v501 = *v497++;
                      uint64_t v500 = v501;
                      double v502 = *v498++;
                      *v499++ = v500 != (unint64_t)v502;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1075 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1076 = (double *)*((void *)a3 + 2);
                      v1077 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1078 = *v1075++;
                        double v1079 = (double)v1078;
                        double v1080 = *v1076++;
                        if (v1080 == v1079) {
                          double v1081 = 0.0;
                        }
                        else {
                          double v1081 = 1.0;
                        }
                        *v1077++ = v1081;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    unint64_t v85 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v86 = (double *)*((void *)a3 + 2);
                    char v87 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v88 = *v85++;
                      double v89 = (double)v88;
                      double v90 = *v86++;
                      if (v90 == v89) {
                        double v91 = 0.0;
                      }
                      else {
                        double v91 = 1.0;
                      }
                      *v87++ = v91;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
          }
        }
        else if (v17 == 1)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1798 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1799 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1800 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1802 = *v1798;
                        v1798 += 8;
                        int v1801 = v1802;
                        int v1803 = *v1799++;
                        *v1800++ = v1803 != v1801;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v808 = (unsigned __int8 *)*((void *)a2 + 2);
                    v809 = (unsigned __int8 *)*((void *)a3 + 2);
                    v810 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v812 = *v808;
                      v808 += 8;
                      int v811 = v812;
                      int v813 = *v809++;
                      *v810++ = v813 != v811;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1804 = (uint64_t *)*((void *)a2 + 2);
                      v1805 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1806 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1808 = *v1804++;
                        uint64_t v1807 = v1808;
                        LODWORD(v1808) = *v1805++;
                        *v1806++ = v1807 != v1808;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v814 = (uint64_t *)*((void *)a2 + 2);
                    v815 = (unsigned __int8 *)*((void *)a3 + 2);
                    v816 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v818 = *v814++;
                      uint64_t v817 = v818;
                      LODWORD(v818) = *v815++;
                      *v816++ = v817 != v818;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1264 = (unint64_t *)*((void *)a2 + 2);
                      v1265 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1266 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1267 = *v1264++;
                        unint64_t v1268 = v1267;
                        LODWORD(v1267) = *v1265++;
                        if ((double)v1268 == (double)v1267) {
                          double v1269 = 0.0;
                        }
                        else {
                          double v1269 = 1.0;
                        }
                        *v1266++ = v1269;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    uint64_t v274 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v275 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v276 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v277 = *v274++;
                      unint64_t v278 = v277;
                      LODWORD(v277) = *v275++;
                      if ((double)v278 == (double)v277) {
                        double v279 = 0.0;
                      }
                      else {
                        double v279 = 1.0;
                      }
                      *v276++ = v279;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1809 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1810 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1811 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1813 = *v1809;
                        v1809 += 8;
                        int v1812 = v1813;
                        int v1814 = *v1810;
                        v1810 += 8;
                        *v1811++ = v1812 != v1814;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v819 = (unsigned __int8 *)*((void *)a2 + 2);
                    v820 = (unsigned __int8 *)*((void *)a3 + 2);
                    v821 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v823 = *v819;
                      v819 += 8;
                      int v822 = v823;
                      int v824 = *v820;
                      v820 += 8;
                      *v821++ = v822 != v824;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1815 = (uint64_t *)*((void *)a2 + 2);
                      v1816 = (uint64_t *)*((void *)a3 + 2);
                      v1817 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1819 = *v1815++;
                        uint64_t v1818 = v1819;
                        uint64_t v1820 = *v1816++;
                        *v1817++ = v1818 != v1820;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v825 = (uint64_t *)*((void *)a2 + 2);
                    v826 = (uint64_t *)*((void *)a3 + 2);
                    v827 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v829 = *v825++;
                      uint64_t v828 = v829;
                      uint64_t v830 = *v826++;
                      *v827++ = v828 != v830;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1270 = (unint64_t *)*((void *)a2 + 2);
                      v1271 = (unint64_t *)*((void *)a3 + 2);
                      v1272 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1273 = *v1270++;
                        double v1274 = (double)v1273;
                        unint64_t v1275 = *v1271++;
                        if (v1274 == (double)v1275) {
                          double v1276 = 0.0;
                        }
                        else {
                          double v1276 = 1.0;
                        }
                        *v1272++ = v1276;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    char v280 = (unint64_t *)*((void *)a2 + 2);
                    v281 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v282 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v283 = *v280++;
                      double v284 = (double)v283;
                      unint64_t v285 = *v281++;
                      if (v284 == (double)v285) {
                        double v286 = 0.0;
                      }
                      else {
                        double v286 = 1.0;
                      }
                      *v282++ = v286;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1493 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1494 = (double *)*((void *)a3 + 2);
                      v1495 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1497 = *v1493;
                        v1493 += 8;
                        int v1496 = v1497;
                        double v1498 = *v1494++;
                        *v1495++ = v1496 != (int)v1498;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v503 = (unsigned __int8 *)*((void *)a2 + 2);
                    v504 = (double *)*((void *)a3 + 2);
                    v505 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v507 = *v503;
                      v503 += 8;
                      int v506 = v507;
                      double v508 = *v504++;
                      *v505++ = v506 != (int)v508;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1499 = (uint64_t *)*((void *)a2 + 2);
                      v1500 = (double *)*((void *)a3 + 2);
                      v1501 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1503 = *v1499++;
                        uint64_t v1502 = v1503;
                        double v1504 = *v1500++;
                        *v1501++ = v1502 != (unint64_t)v1504;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v509 = (uint64_t *)*((void *)a2 + 2);
                    v510 = (double *)*((void *)a3 + 2);
                    v511 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v513 = *v509++;
                      uint64_t v512 = v513;
                      double v514 = *v510++;
                      *v511++ = v512 != (unint64_t)v514;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1082 = (unint64_t *)*((void *)a2 + 2);
                      v1083 = (double *)*((void *)a3 + 2);
                      v1084 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1085 = *v1082++;
                        unint64_t v1086 = v1085;
                        double v1087 = *v1083++;
                        if (v1087 == (double)v1086) {
                          double v1088 = 0.0;
                        }
                        else {
                          double v1088 = 1.0;
                        }
                        *v1084++ = v1088;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    uint64_t v92 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v93 = (double *)*((void *)a3 + 2);
                    char v94 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v95 = *v92++;
                      unint64_t v96 = v95;
                      double v97 = *v93++;
                      if (v97 == (double)v96) {
                        double v98 = 0.0;
                      }
                      else {
                        double v98 = 1.0;
                      }
                      *v94++ = v98;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v17)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1622 = (double *)*((void *)a2 + 2);
                      v1623 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1624 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1625 = *v1622++;
                        int v1626 = (int)v1625;
                        LODWORD(v1625) = *v1623++;
                        *v1624++ = LODWORD(v1625) != v1626;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v632 = (double *)*((void *)a2 + 2);
                    v633 = (unsigned __int8 *)*((void *)a3 + 2);
                    v634 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v635 = *v632++;
                      int v636 = (int)v635;
                      LODWORD(v635) = *v633++;
                      *v634++ = LODWORD(v635) != v636;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1627 = (double *)*((void *)a2 + 2);
                      v1628 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1629 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1630 = *v1627++;
                        unint64_t v1631 = (unint64_t)v1630;
                        LODWORD(v1630) = *v1628++;
                        *v1629++ = v1631 != LODWORD(v1630);
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v637 = (double *)*((void *)a2 + 2);
                    v638 = (unsigned __int8 *)*((void *)a3 + 2);
                    v639 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v640 = *v637++;
                      unint64_t v641 = (unint64_t)v640;
                      LODWORD(v640) = *v638++;
                      *v639++ = v641 != LODWORD(v640);
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1158 = (double *)*((void *)a2 + 2);
                      v1159 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1160 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1161 = *v1158++;
                        double v1162 = v1161;
                        LODWORD(v1161) = *v1159++;
                        if (v1162 == (double)LODWORD(v1161)) {
                          double v1163 = 0.0;
                        }
                        else {
                          double v1163 = 1.0;
                        }
                        *v1160++ = v1163;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    unint64_t v168 = (double *)*((void *)a2 + 2);
                    unsigned int v169 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v170 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v171 = *v168++;
                      double v172 = v171;
                      LODWORD(v171) = *v169++;
                      if (v172 == (double)LODWORD(v171)) {
                        double v173 = 0.0;
                      }
                      else {
                        double v173 = 1.0;
                      }
                      *v170++ = v173;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1632 = (double *)*((void *)a2 + 2);
                      v1633 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1634 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1635 = *v1632++;
                        int v1636 = (int)v1635;
                        LODWORD(v1635) = *v1633;
                        v1633 += 8;
                        *v1634++ = v1636 != LODWORD(v1635);
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v642 = (double *)*((void *)a2 + 2);
                    v643 = (unsigned __int8 *)*((void *)a3 + 2);
                    v644 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v645 = *v642++;
                      int v646 = (int)v645;
                      LODWORD(v645) = *v643;
                      v643 += 8;
                      *v644++ = v646 != LODWORD(v645);
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1637 = (double *)*((void *)a2 + 2);
                      v1638 = (uint64_t *)*((void *)a3 + 2);
                      v1639 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1640 = *v1637++;
                        unint64_t v1641 = (unint64_t)v1640;
                        uint64_t v1642 = *v1638++;
                        *v1639++ = v1642 != v1641;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v647 = (double *)*((void *)a2 + 2);
                    v648 = (uint64_t *)*((void *)a3 + 2);
                    v649 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v650 = *v647++;
                      unint64_t v651 = (unint64_t)v650;
                      uint64_t v652 = *v648++;
                      *v649++ = v652 != v651;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1164 = (double *)*((void *)a2 + 2);
                      v1165 = (unint64_t *)*((void *)a3 + 2);
                      v1166 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1167 = *v1164++;
                        double v1168 = v1167;
                        unint64_t v1169 = *v1165++;
                        if (v1168 == (double)v1169) {
                          double v1170 = 0.0;
                        }
                        else {
                          double v1170 = 1.0;
                        }
                        *v1166++ = v1170;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    unsigned int v174 = (double *)*((void *)a2 + 2);
                    double v175 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v176 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v177 = *v174++;
                      double v178 = v177;
                      unint64_t v179 = *v175++;
                      if (v178 == (double)v179) {
                        double v180 = 0.0;
                      }
                      else {
                        double v180 = 1.0;
                      }
                      *v176++ = v180;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1397 = (double *)*((void *)a2 + 2);
                      v1398 = (double *)*((void *)a3 + 2);
                      v1399 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1400 = *v1397++;
                        int v1401 = (int)v1400;
                        double v1402 = *v1398++;
                        *v1399++ = v1401 != (int)v1402;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v407 = (double *)*((void *)a2 + 2);
                    v408 = (double *)*((void *)a3 + 2);
                    v409 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v410 = *v407++;
                      int v411 = (int)v410;
                      double v412 = *v408++;
                      *v409++ = v411 != (int)v412;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1403 = (double *)*((void *)a2 + 2);
                      v1404 = (double *)*((void *)a3 + 2);
                      v1405 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1406 = *v1403++;
                        unint64_t v1407 = (unint64_t)v1406;
                        double v1408 = *v1404++;
                        *v1405++ = v1407 != (unint64_t)v1408;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v413 = (double *)*((void *)a2 + 2);
                    v414 = (double *)*((void *)a3 + 2);
                    v415 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v416 = *v413++;
                      unint64_t v417 = (unint64_t)v416;
                      double v418 = *v414++;
                      *v415++ = v417 != (unint64_t)v418;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1026 = (double *)*((void *)a2 + 2);
                      v1027 = (double *)*((void *)a3 + 2);
                      v1028 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1029 = *v1026++;
                        double v1030 = v1029;
                        double v1031 = *v1027++;
                        if (v1030 == v1031) {
                          double v1032 = 0.0;
                        }
                        else {
                          double v1032 = 1.0;
                        }
                        *v1028++ = v1032;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    unint64_t v20 = (double *)*((void *)a2 + 2);
                    double v21 = (double *)*((void *)a3 + 2);
                    double v22 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v23 = *v20++;
                      double v24 = v23;
                      double v25 = *v21++;
                      if (v24 == v25) {
                        double v26 = 0.0;
                      }
                      else {
                        double v26 = 1.0;
                      }
                      *v22++ = v26;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 2:
      unint64_t result = 0;
      if (a2 && a3 && a4)
      {
        if (*((unsigned char *)a4 + 32)) {
          return 0;
        }
        uint64_t v27 = *((void *)a2 + 1);
        if (v27 != *((void *)a3 + 1) || v27 != *((void *)a4 + 1)) {
          return 0;
        }
        int v28 = *a2;
        int v29 = *a3;
        int v30 = *a4;
        if (*a2 == 2)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1821 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1822 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1823 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1825 = *v1821++;
                        unsigned int v1824 = v1825;
                        unsigned int v1826 = *v1822++;
                        *v1823++ = v1824 < v1826;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v831 = (unsigned __int8 *)*((void *)a2 + 2);
                    v832 = (unsigned __int8 *)*((void *)a3 + 2);
                    v833 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v835 = *v831++;
                      unsigned int v834 = v835;
                      unsigned int v836 = *v832++;
                      *v833++ = v834 < v836;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1827 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1828 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1829 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1831 = *v1827++;
                        unsigned int v1830 = v1831;
                        unsigned int v1832 = *v1828++;
                        *v1829++ = v1830 < v1832;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v837 = (unsigned __int8 *)*((void *)a2 + 2);
                    v838 = (unsigned __int8 *)*((void *)a3 + 2);
                    v839 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v841 = *v837++;
                      unsigned int v840 = v841;
                      unsigned int v842 = *v838++;
                      *v839++ = v840 < v842;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1277 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1278 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1279 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1281 = *v1277++;
                        unsigned int v1280 = v1281;
                        unsigned int v1282 = *v1278++;
                        if (v1280 >= v1282) {
                          double v1283 = 0.0;
                        }
                        else {
                          double v1283 = 1.0;
                        }
                        *v1279++ = v1283;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v287 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v288 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v289 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v291 = *v287++;
                      unsigned int v290 = v291;
                      unsigned int v292 = *v288++;
                      if (v290 >= v292) {
                        double v293 = 0.0;
                      }
                      else {
                        double v293 = 1.0;
                      }
                      *v289++ = v293;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1833 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1834 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1835 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1837 = *v1833++;
                        unsigned int v1836 = v1837;
                        unsigned int v1838 = *v1834;
                        v1834 += 8;
                        *v1835++ = v1836 < v1838;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v843 = (unsigned __int8 *)*((void *)a2 + 2);
                    v844 = (unsigned __int8 *)*((void *)a3 + 2);
                    v845 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v847 = *v843++;
                      unsigned int v846 = v847;
                      unsigned int v848 = *v844;
                      v844 += 8;
                      *v845++ = v846 < v848;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1839 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1840 = (unint64_t *)*((void *)a3 + 2);
                      v1841 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1843 = *v1839++;
                        unint64_t v1842 = v1843;
                        unint64_t v1844 = *v1840++;
                        *v1841++ = v1844 > v1842;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v849 = (unsigned __int8 *)*((void *)a2 + 2);
                    v850 = (unint64_t *)*((void *)a3 + 2);
                    v851 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v853 = *v849++;
                      unint64_t v852 = v853;
                      unint64_t v854 = *v850++;
                      *v851++ = v854 > v852;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1284 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1285 = (unint64_t *)*((void *)a3 + 2);
                      v1286 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1287 = *v1284++;
                        double v1288 = (double)v1287;
                        unint64_t v1289 = *v1285++;
                        if (v1288 >= (double)v1289) {
                          double v1290 = 0.0;
                        }
                        else {
                          double v1290 = 1.0;
                        }
                        *v1286++ = v1290;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    unsigned int v294 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v295 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v296 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v297 = *v294++;
                      double v298 = (double)v297;
                      unint64_t v299 = *v295++;
                      if (v298 >= (double)v299) {
                        double v300 = 0.0;
                      }
                      else {
                        double v300 = 1.0;
                      }
                      *v296++ = v300;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1505 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1506 = (double *)*((void *)a3 + 2);
                      v1507 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1509 = *v1505++;
                        unsigned int v1508 = v1509;
                        double v1510 = *v1506++;
                        *v1507++ = v1508 < (int)v1510;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v515 = (unsigned __int8 *)*((void *)a2 + 2);
                    v516 = (double *)*((void *)a3 + 2);
                    v517 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v519 = *v515++;
                      unsigned int v518 = v519;
                      double v520 = *v516++;
                      *v517++ = v518 < (int)v520;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1511 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1512 = (double *)*((void *)a3 + 2);
                      v1513 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1515 = *v1511++;
                        unint64_t v1514 = v1515;
                        double v1516 = *v1512++;
                        *v1513++ = v1514 < (unint64_t)v1516;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v521 = (unsigned __int8 *)*((void *)a2 + 2);
                    v522 = (double *)*((void *)a3 + 2);
                    v523 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v525 = *v521++;
                      unint64_t v524 = v525;
                      double v526 = *v522++;
                      *v523++ = v524 < (unint64_t)v526;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1089 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1090 = (double *)*((void *)a3 + 2);
                      v1091 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1092 = *v1089++;
                        double v1093 = (double)v1092;
                        double v1094 = *v1090++;
                        if (v1094 <= v1093) {
                          double v1095 = 0.0;
                        }
                        else {
                          double v1095 = 1.0;
                        }
                        *v1091++ = v1095;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    double v99 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v100 = (double *)*((void *)a3 + 2);
                    unsigned int v101 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v102 = *v99++;
                      double v103 = (double)v102;
                      double v104 = *v100++;
                      if (v104 <= v103) {
                        double v105 = 0.0;
                      }
                      else {
                        double v105 = 1.0;
                      }
                      *v101++ = v105;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        else if (v28 == 1)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1845 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1846 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1847 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1849 = *v1845;
                        v1845 += 8;
                        unsigned int v1848 = v1849;
                        unsigned int v1850 = *v1846++;
                        *v1847++ = v1850 > v1848;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v855 = (unsigned __int8 *)*((void *)a2 + 2);
                    v856 = (unsigned __int8 *)*((void *)a3 + 2);
                    v857 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v859 = *v855;
                      v855 += 8;
                      unsigned int v858 = v859;
                      unsigned int v860 = *v856++;
                      *v857++ = v860 > v858;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1851 = (unint64_t *)*((void *)a2 + 2);
                      v1852 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1853 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1855 = *v1851++;
                        unint64_t v1854 = v1855;
                        LODWORD(v1855) = *v1852++;
                        *v1853++ = v1854 < v1855;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v861 = (unint64_t *)*((void *)a2 + 2);
                    v862 = (unsigned __int8 *)*((void *)a3 + 2);
                    v863 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v865 = *v861++;
                      unint64_t v864 = v865;
                      LODWORD(v865) = *v862++;
                      *v863++ = v864 < v865;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1291 = (unint64_t *)*((void *)a2 + 2);
                      v1292 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1293 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1294 = *v1291++;
                        unint64_t v1295 = v1294;
                        LODWORD(v1294) = *v1292++;
                        if ((double)v1295 >= (double)v1294) {
                          double v1296 = 0.0;
                        }
                        else {
                          double v1296 = 1.0;
                        }
                        *v1293++ = v1296;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    unint64_t v301 = (unint64_t *)*((void *)a2 + 2);
                    char v302 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v303 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v304 = *v301++;
                      unint64_t v305 = v304;
                      LODWORD(v304) = *v302++;
                      if ((double)v305 >= (double)v304) {
                        double v306 = 0.0;
                      }
                      else {
                        double v306 = 1.0;
                      }
                      *v303++ = v306;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1856 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1857 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1858 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1860 = *v1856;
                        v1856 += 8;
                        unsigned int v1859 = v1860;
                        unsigned int v1861 = *v1857;
                        v1857 += 8;
                        *v1858++ = v1859 < v1861;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v866 = (unsigned __int8 *)*((void *)a2 + 2);
                    v867 = (unsigned __int8 *)*((void *)a3 + 2);
                    v868 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v870 = *v866;
                      v866 += 8;
                      unsigned int v869 = v870;
                      unsigned int v871 = *v867;
                      v867 += 8;
                      *v868++ = v869 < v871;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1862 = (unint64_t *)*((void *)a2 + 2);
                      v1863 = (unint64_t *)*((void *)a3 + 2);
                      v1864 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1866 = *v1862++;
                        unint64_t v1865 = v1866;
                        unint64_t v1867 = *v1863++;
                        *v1864++ = v1865 < v1867;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v872 = (unint64_t *)*((void *)a2 + 2);
                    v873 = (unint64_t *)*((void *)a3 + 2);
                    v874 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v876 = *v872++;
                      unint64_t v875 = v876;
                      unint64_t v877 = *v873++;
                      *v874++ = v875 < v877;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1297 = (unint64_t *)*((void *)a2 + 2);
                      v1298 = (unint64_t *)*((void *)a3 + 2);
                      v1299 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1300 = *v1297++;
                        double v1301 = (double)v1300;
                        unint64_t v1302 = *v1298++;
                        if (v1301 >= (double)v1302) {
                          double v1303 = 0.0;
                        }
                        else {
                          double v1303 = 1.0;
                        }
                        *v1299++ = v1303;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    unsigned int v307 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v308 = (unint64_t *)*((void *)a3 + 2);
                    double v309 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v310 = *v307++;
                      double v311 = (double)v310;
                      unint64_t v312 = *v308++;
                      if (v311 >= (double)v312) {
                        double v313 = 0.0;
                      }
                      else {
                        double v313 = 1.0;
                      }
                      *v309++ = v313;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1517 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1518 = (double *)*((void *)a3 + 2);
                      v1519 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1521 = *v1517;
                        v1517 += 8;
                        unsigned int v1520 = v1521;
                        double v1522 = *v1518++;
                        *v1519++ = v1520 < (int)v1522;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v527 = (unsigned __int8 *)*((void *)a2 + 2);
                    v528 = (double *)*((void *)a3 + 2);
                    v529 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v531 = *v527;
                      v527 += 8;
                      unsigned int v530 = v531;
                      double v532 = *v528++;
                      *v529++ = v530 < (int)v532;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1523 = (unint64_t *)*((void *)a2 + 2);
                      v1524 = (double *)*((void *)a3 + 2);
                      v1525 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1527 = *v1523++;
                        unint64_t v1526 = v1527;
                        double v1528 = *v1524++;
                        *v1525++ = v1526 < (unint64_t)v1528;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v533 = (unint64_t *)*((void *)a2 + 2);
                    v534 = (double *)*((void *)a3 + 2);
                    v535 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v537 = *v533++;
                      unint64_t v536 = v537;
                      double v538 = *v534++;
                      *v535++ = v536 < (unint64_t)v538;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1096 = (unint64_t *)*((void *)a2 + 2);
                      v1097 = (double *)*((void *)a3 + 2);
                      v1098 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1099 = *v1096++;
                        unint64_t v1100 = v1099;
                        double v1101 = *v1097++;
                        if (v1101 <= (double)v1100) {
                          double v1102 = 0.0;
                        }
                        else {
                          double v1102 = 1.0;
                        }
                        *v1098++ = v1102;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    double v106 = (unint64_t *)*((void *)a2 + 2);
                    int v107 = (double *)*((void *)a3 + 2);
                    unint64_t v108 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v109 = *v106++;
                      unint64_t v110 = v109;
                      double v111 = *v107++;
                      if (v111 <= (double)v110) {
                        double v112 = 0.0;
                      }
                      else {
                        double v112 = 1.0;
                      }
                      *v108++ = v112;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v28)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1643 = (double *)*((void *)a2 + 2);
                      v1644 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1645 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1646 = *v1643++;
                        unsigned int v1647 = (int)v1646;
                        LODWORD(v1646) = *v1644++;
                        *v1645++ = LODWORD(v1646) > v1647;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v653 = (double *)*((void *)a2 + 2);
                    v654 = (unsigned __int8 *)*((void *)a3 + 2);
                    v655 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v656 = *v653++;
                      unsigned int v657 = (int)v656;
                      LODWORD(v656) = *v654++;
                      *v655++ = LODWORD(v656) > v657;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1648 = (double *)*((void *)a2 + 2);
                      v1649 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1650 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1651 = *v1648++;
                        unint64_t v1652 = (unint64_t)v1651;
                        LODWORD(v1651) = *v1649++;
                        *v1650++ = v1652 < LODWORD(v1651);
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v658 = (double *)*((void *)a2 + 2);
                    v659 = (unsigned __int8 *)*((void *)a3 + 2);
                    v660 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v661 = *v658++;
                      unint64_t v662 = (unint64_t)v661;
                      LODWORD(v661) = *v659++;
                      *v660++ = v662 < LODWORD(v661);
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1171 = (double *)*((void *)a2 + 2);
                      v1172 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1173 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1174 = *v1171++;
                        double v1175 = v1174;
                        LODWORD(v1174) = *v1172++;
                        if (v1175 >= (double)LODWORD(v1174)) {
                          double v1176 = 0.0;
                        }
                        else {
                          double v1176 = 1.0;
                        }
                        *v1173++ = v1176;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    int v181 = (double *)*((void *)a2 + 2);
                    double v182 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v183 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v184 = *v181++;
                      double v185 = v184;
                      LODWORD(v184) = *v182++;
                      if (v185 >= (double)LODWORD(v184)) {
                        double v186 = 0.0;
                      }
                      else {
                        double v186 = 1.0;
                      }
                      *v183++ = v186;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1653 = (double *)*((void *)a2 + 2);
                      v1654 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1655 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1656 = *v1653++;
                        unsigned int v1657 = (int)v1656;
                        LODWORD(v1656) = *v1654;
                        v1654 += 8;
                        *v1655++ = v1657 < LODWORD(v1656);
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v663 = (double *)*((void *)a2 + 2);
                    v664 = (unsigned __int8 *)*((void *)a3 + 2);
                    v665 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v666 = *v663++;
                      unsigned int v667 = (int)v666;
                      LODWORD(v666) = *v664;
                      v664 += 8;
                      *v665++ = v667 < LODWORD(v666);
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1658 = (double *)*((void *)a2 + 2);
                      v1659 = (unint64_t *)*((void *)a3 + 2);
                      v1660 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1661 = *v1658++;
                        unint64_t v1662 = (unint64_t)v1661;
                        unint64_t v1663 = *v1659++;
                        *v1660++ = v1663 > v1662;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v668 = (double *)*((void *)a2 + 2);
                    v669 = (unint64_t *)*((void *)a3 + 2);
                    v670 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v671 = *v668++;
                      unint64_t v672 = (unint64_t)v671;
                      unint64_t v673 = *v669++;
                      *v670++ = v673 > v672;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1177 = (double *)*((void *)a2 + 2);
                      v1178 = (unint64_t *)*((void *)a3 + 2);
                      v1179 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1180 = *v1177++;
                        double v1181 = v1180;
                        unint64_t v1182 = *v1178++;
                        if (v1181 >= (double)v1182) {
                          double v1183 = 0.0;
                        }
                        else {
                          double v1183 = 1.0;
                        }
                        *v1179++ = v1183;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    unsigned int v187 = (double *)*((void *)a2 + 2);
                    double v188 = (unint64_t *)*((void *)a3 + 2);
                    int v189 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v190 = *v187++;
                      double v191 = v190;
                      unint64_t v192 = *v188++;
                      if (v191 >= (double)v192) {
                        double v193 = 0.0;
                      }
                      else {
                        double v193 = 1.0;
                      }
                      *v189++ = v193;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1409 = (double *)*((void *)a2 + 2);
                      v1410 = (double *)*((void *)a3 + 2);
                      v1411 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1412 = *v1409++;
                        unsigned int v1413 = (int)v1412;
                        double v1414 = *v1410++;
                        *v1411++ = v1413 < (int)v1414;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v419 = (double *)*((void *)a2 + 2);
                    v420 = (double *)*((void *)a3 + 2);
                    v421 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v422 = *v419++;
                      unsigned int v423 = (int)v422;
                      double v424 = *v420++;
                      *v421++ = v423 < (int)v424;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1415 = (double *)*((void *)a2 + 2);
                      v1416 = (double *)*((void *)a3 + 2);
                      v1417 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1418 = *v1415++;
                        unint64_t v1419 = (unint64_t)v1418;
                        double v1420 = *v1416++;
                        *v1417++ = v1419 < (unint64_t)v1420;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v425 = (double *)*((void *)a2 + 2);
                    v426 = (double *)*((void *)a3 + 2);
                    v427 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v428 = *v425++;
                      unint64_t v429 = (unint64_t)v428;
                      double v430 = *v426++;
                      *v427++ = v429 < (unint64_t)v430;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1033 = (double *)*((void *)a2 + 2);
                      v1034 = (double *)*((void *)a3 + 2);
                      v1035 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1036 = *v1033++;
                        double v1037 = v1036;
                        double v1038 = *v1034++;
                        if (v1037 >= v1038) {
                          double v1039 = 0.0;
                        }
                        else {
                          double v1039 = 1.0;
                        }
                        *v1035++ = v1039;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    double v31 = (double *)*((void *)a2 + 2);
                    unsigned int v32 = (double *)*((void *)a3 + 2);
                    double v33 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v34 = *v31++;
                      double v35 = v34;
                      double v36 = *v32++;
                      if (v35 >= v36) {
                        double v37 = 0.0;
                      }
                      else {
                        double v37 = 1.0;
                      }
                      *v33++ = v37;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 3:
      unint64_t result = 0;
      if (a2 && a3 && a4)
      {
        if (*((unsigned char *)a4 + 32)) {
          return 0;
        }
        uint64_t v38 = *((void *)a2 + 1);
        if (v38 != *((void *)a3 + 1) || v38 != *((void *)a4 + 1)) {
          return 0;
        }
        int v39 = *a2;
        int v40 = *a3;
        int v41 = *a4;
        if (*a2 == 2)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1868 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1869 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1870 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1872 = *v1868++;
                        unsigned int v1871 = v1872;
                        unsigned int v1873 = *v1869++;
                        *v1870++ = v1871 > v1873;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v878 = (unsigned __int8 *)*((void *)a2 + 2);
                    v879 = (unsigned __int8 *)*((void *)a3 + 2);
                    v880 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v882 = *v878++;
                      unsigned int v881 = v882;
                      unsigned int v883 = *v879++;
                      *v880++ = v881 > v883;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1874 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1875 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1876 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1878 = *v1874++;
                        unsigned int v1877 = v1878;
                        unsigned int v1879 = *v1875++;
                        *v1876++ = v1877 > v1879;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v884 = (unsigned __int8 *)*((void *)a2 + 2);
                    v885 = (unsigned __int8 *)*((void *)a3 + 2);
                    v886 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v888 = *v884++;
                      unsigned int v887 = v888;
                      unsigned int v889 = *v885++;
                      *v886++ = v887 > v889;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1304 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1305 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1306 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1308 = *v1304++;
                        unsigned int v1307 = v1308;
                        unsigned int v1309 = *v1305++;
                        if (v1307 <= v1309) {
                          double v1310 = 0.0;
                        }
                        else {
                          double v1310 = 1.0;
                        }
                        *v1306++ = v1310;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    char v314 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v315 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v316 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v318 = *v314++;
                      unsigned int v317 = v318;
                      unsigned int v319 = *v315++;
                      if (v317 <= v319) {
                        double v320 = 0.0;
                      }
                      else {
                        double v320 = 1.0;
                      }
                      *v316++ = v320;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1880 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1881 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1882 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1884 = *v1880++;
                        unsigned int v1883 = v1884;
                        unsigned int v1885 = *v1881;
                        v1881 += 8;
                        *v1882++ = v1883 > v1885;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v890 = (unsigned __int8 *)*((void *)a2 + 2);
                    v891 = (unsigned __int8 *)*((void *)a3 + 2);
                    v892 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v894 = *v890++;
                      unsigned int v893 = v894;
                      unsigned int v895 = *v891;
                      v891 += 8;
                      *v892++ = v893 > v895;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1886 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1887 = (unint64_t *)*((void *)a3 + 2);
                      v1888 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1890 = *v1886++;
                        unint64_t v1889 = v1890;
                        unint64_t v1891 = *v1887++;
                        *v1888++ = v1891 < v1889;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v896 = (unsigned __int8 *)*((void *)a2 + 2);
                    v897 = (unint64_t *)*((void *)a3 + 2);
                    v898 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v900 = *v896++;
                      unint64_t v899 = v900;
                      unint64_t v901 = *v897++;
                      *v898++ = v901 < v899;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1311 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1312 = (unint64_t *)*((void *)a3 + 2);
                      v1313 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1314 = *v1311++;
                        double v1315 = (double)v1314;
                        unint64_t v1316 = *v1312++;
                        if (v1315 <= (double)v1316) {
                          double v1317 = 0.0;
                        }
                        else {
                          double v1317 = 1.0;
                        }
                        *v1313++ = v1317;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    double v321 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v322 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v323 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v324 = *v321++;
                      double v325 = (double)v324;
                      unint64_t v326 = *v322++;
                      if (v325 <= (double)v326) {
                        double v327 = 0.0;
                      }
                      else {
                        double v327 = 1.0;
                      }
                      *v323++ = v327;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1529 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1530 = (double *)*((void *)a3 + 2);
                      v1531 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1533 = *v1529++;
                        unsigned int v1532 = v1533;
                        double v1534 = *v1530++;
                        *v1531++ = v1532 > (int)v1534;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v539 = (unsigned __int8 *)*((void *)a2 + 2);
                    v540 = (double *)*((void *)a3 + 2);
                    v541 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v543 = *v539++;
                      unsigned int v542 = v543;
                      double v544 = *v540++;
                      *v541++ = v542 > (int)v544;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1535 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1536 = (double *)*((void *)a3 + 2);
                      v1537 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1539 = *v1535++;
                        unint64_t v1538 = v1539;
                        double v1540 = *v1536++;
                        *v1537++ = v1538 > (unint64_t)v1540;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v545 = (unsigned __int8 *)*((void *)a2 + 2);
                    v546 = (double *)*((void *)a3 + 2);
                    v547 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v549 = *v545++;
                      unint64_t v548 = v549;
                      double v550 = *v546++;
                      *v547++ = v548 > (unint64_t)v550;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1103 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1104 = (double *)*((void *)a3 + 2);
                      v1105 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1106 = *v1103++;
                        double v1107 = (double)v1106;
                        double v1108 = *v1104++;
                        if (v1108 >= v1107) {
                          double v1109 = 0.0;
                        }
                        else {
                          double v1109 = 1.0;
                        }
                        *v1105++ = v1109;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    unsigned int v113 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v114 = (double *)*((void *)a3 + 2);
                    double v115 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v116 = *v113++;
                      double v117 = (double)v116;
                      double v118 = *v114++;
                      if (v118 >= v117) {
                        double v119 = 0.0;
                      }
                      else {
                        double v119 = 1.0;
                      }
                      *v115++ = v119;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
          }
        }
        else if (v39 == 1)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1892 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1893 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1894 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1896 = *v1892;
                        v1892 += 8;
                        unsigned int v1895 = v1896;
                        unsigned int v1897 = *v1893++;
                        *v1894++ = v1897 < v1895;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v902 = (unsigned __int8 *)*((void *)a2 + 2);
                    v903 = (unsigned __int8 *)*((void *)a3 + 2);
                    v904 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v906 = *v902;
                      v902 += 8;
                      unsigned int v905 = v906;
                      unsigned int v907 = *v903++;
                      *v904++ = v907 < v905;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1898 = (unint64_t *)*((void *)a2 + 2);
                      v1899 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1900 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1902 = *v1898++;
                        unint64_t v1901 = v1902;
                        LODWORD(v1902) = *v1899++;
                        *v1900++ = v1901 > v1902;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v908 = (unint64_t *)*((void *)a2 + 2);
                    v909 = (unsigned __int8 *)*((void *)a3 + 2);
                    v910 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v912 = *v908++;
                      unint64_t v911 = v912;
                      LODWORD(v912) = *v909++;
                      *v910++ = v911 > v912;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1318 = (unint64_t *)*((void *)a2 + 2);
                      v1319 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1320 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1321 = *v1318++;
                        unint64_t v1322 = v1321;
                        LODWORD(v1321) = *v1319++;
                        if ((double)v1322 <= (double)v1321) {
                          double v1323 = 0.0;
                        }
                        else {
                          double v1323 = 1.0;
                        }
                        *v1320++ = v1323;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    unsigned int v328 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v329 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v330 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v331 = *v328++;
                      unint64_t v332 = v331;
                      LODWORD(v331) = *v329++;
                      if ((double)v332 <= (double)v331) {
                        double v333 = 0.0;
                      }
                      else {
                        double v333 = 1.0;
                      }
                      *v330++ = v333;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1903 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1904 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1905 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1907 = *v1903;
                        v1903 += 8;
                        unsigned int v1906 = v1907;
                        unsigned int v1908 = *v1904;
                        v1904 += 8;
                        *v1905++ = v1906 > v1908;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v913 = (unsigned __int8 *)*((void *)a2 + 2);
                    v914 = (unsigned __int8 *)*((void *)a3 + 2);
                    v915 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v917 = *v913;
                      v913 += 8;
                      unsigned int v916 = v917;
                      unsigned int v918 = *v914;
                      v914 += 8;
                      *v915++ = v916 > v918;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1909 = (unint64_t *)*((void *)a2 + 2);
                      v1910 = (unint64_t *)*((void *)a3 + 2);
                      v1911 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1913 = *v1909++;
                        unint64_t v1912 = v1913;
                        unint64_t v1914 = *v1910++;
                        *v1911++ = v1912 > v1914;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v919 = (unint64_t *)*((void *)a2 + 2);
                    v920 = (unint64_t *)*((void *)a3 + 2);
                    v921 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v923 = *v919++;
                      unint64_t v922 = v923;
                      unint64_t v924 = *v920++;
                      *v921++ = v922 > v924;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1324 = (unint64_t *)*((void *)a2 + 2);
                      v1325 = (unint64_t *)*((void *)a3 + 2);
                      v1326 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1327 = *v1324++;
                        double v1328 = (double)v1327;
                        unint64_t v1329 = *v1325++;
                        if (v1328 <= (double)v1329) {
                          double v1330 = 0.0;
                        }
                        else {
                          double v1330 = 1.0;
                        }
                        *v1326++ = v1330;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v334 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v335 = (unint64_t *)*((void *)a3 + 2);
                    int v336 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v337 = *v334++;
                      double v338 = (double)v337;
                      unint64_t v339 = *v335++;
                      if (v338 <= (double)v339) {
                        double v340 = 0.0;
                      }
                      else {
                        double v340 = 1.0;
                      }
                      *v336++ = v340;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1541 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1542 = (double *)*((void *)a3 + 2);
                      v1543 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1545 = *v1541;
                        v1541 += 8;
                        unsigned int v1544 = v1545;
                        double v1546 = *v1542++;
                        *v1543++ = v1544 > (int)v1546;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v551 = (unsigned __int8 *)*((void *)a2 + 2);
                    v552 = (double *)*((void *)a3 + 2);
                    v553 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v555 = *v551;
                      v551 += 8;
                      unsigned int v554 = v555;
                      double v556 = *v552++;
                      *v553++ = v554 > (int)v556;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1547 = (unint64_t *)*((void *)a2 + 2);
                      v1548 = (double *)*((void *)a3 + 2);
                      v1549 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1551 = *v1547++;
                        unint64_t v1550 = v1551;
                        double v1552 = *v1548++;
                        *v1549++ = v1550 > (unint64_t)v1552;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v557 = (unint64_t *)*((void *)a2 + 2);
                    v558 = (double *)*((void *)a3 + 2);
                    v559 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v561 = *v557++;
                      unint64_t v560 = v561;
                      double v562 = *v558++;
                      *v559++ = v560 > (unint64_t)v562;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1110 = (unint64_t *)*((void *)a2 + 2);
                      v1111 = (double *)*((void *)a3 + 2);
                      v1112 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1113 = *v1110++;
                        unint64_t v1114 = v1113;
                        double v1115 = *v1111++;
                        if (v1115 >= (double)v1114) {
                          double v1116 = 0.0;
                        }
                        else {
                          double v1116 = 1.0;
                        }
                        *v1112++ = v1116;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    double v120 = (unint64_t *)*((void *)a2 + 2);
                    double v121 = (double *)*((void *)a3 + 2);
                    char v122 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v123 = *v120++;
                      unint64_t v124 = v123;
                      double v125 = *v121++;
                      if (v125 >= (double)v124) {
                        double v126 = 0.0;
                      }
                      else {
                        double v126 = 1.0;
                      }
                      *v122++ = v126;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v39)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1664 = (double *)*((void *)a2 + 2);
                      v1665 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1666 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1667 = *v1664++;
                        unsigned int v1668 = (int)v1667;
                        LODWORD(v1667) = *v1665++;
                        *v1666++ = LODWORD(v1667) < v1668;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v674 = (double *)*((void *)a2 + 2);
                    v675 = (unsigned __int8 *)*((void *)a3 + 2);
                    v676 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v677 = *v674++;
                      unsigned int v678 = (int)v677;
                      LODWORD(v677) = *v675++;
                      *v676++ = LODWORD(v677) < v678;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1669 = (double *)*((void *)a2 + 2);
                      v1670 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1671 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1672 = *v1669++;
                        unint64_t v1673 = (unint64_t)v1672;
                        LODWORD(v1672) = *v1670++;
                        *v1671++ = v1673 > LODWORD(v1672);
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v679 = (double *)*((void *)a2 + 2);
                    v680 = (unsigned __int8 *)*((void *)a3 + 2);
                    v681 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v682 = *v679++;
                      unint64_t v683 = (unint64_t)v682;
                      LODWORD(v682) = *v680++;
                      *v681++ = v683 > LODWORD(v682);
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1184 = (double *)*((void *)a2 + 2);
                      v1185 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1186 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1187 = *v1184++;
                        double v1188 = v1187;
                        LODWORD(v1187) = *v1185++;
                        if (v1188 <= (double)LODWORD(v1187)) {
                          double v1189 = 0.0;
                        }
                        else {
                          double v1189 = 1.0;
                        }
                        *v1186++ = v1189;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    unint64_t v194 = (double *)*((void *)a2 + 2);
                    double v195 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v196 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v197 = *v194++;
                      double v198 = v197;
                      LODWORD(v197) = *v195++;
                      if (v198 <= (double)LODWORD(v197)) {
                        double v199 = 0.0;
                      }
                      else {
                        double v199 = 1.0;
                      }
                      *v196++ = v199;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1674 = (double *)*((void *)a2 + 2);
                      v1675 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1676 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1677 = *v1674++;
                        unsigned int v1678 = (int)v1677;
                        LODWORD(v1677) = *v1675;
                        v1675 += 8;
                        *v1676++ = v1678 > LODWORD(v1677);
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v684 = (double *)*((void *)a2 + 2);
                    v685 = (unsigned __int8 *)*((void *)a3 + 2);
                    v686 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v687 = *v684++;
                      unsigned int v688 = (int)v687;
                      LODWORD(v687) = *v685;
                      v685 += 8;
                      *v686++ = v688 > LODWORD(v687);
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1679 = (double *)*((void *)a2 + 2);
                      v1680 = (unint64_t *)*((void *)a3 + 2);
                      v1681 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1682 = *v1679++;
                        unint64_t v1683 = (unint64_t)v1682;
                        unint64_t v1684 = *v1680++;
                        *v1681++ = v1684 < v1683;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v689 = (double *)*((void *)a2 + 2);
                    v690 = (unint64_t *)*((void *)a3 + 2);
                    v691 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v692 = *v689++;
                      unint64_t v693 = (unint64_t)v692;
                      unint64_t v694 = *v690++;
                      *v691++ = v694 < v693;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1190 = (double *)*((void *)a2 + 2);
                      v1191 = (unint64_t *)*((void *)a3 + 2);
                      v1192 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1193 = *v1190++;
                        double v1194 = v1193;
                        unint64_t v1195 = *v1191++;
                        if (v1194 <= (double)v1195) {
                          double v1196 = 0.0;
                        }
                        else {
                          double v1196 = 1.0;
                        }
                        *v1192++ = v1196;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    uint64_t v200 = (double *)*((void *)a2 + 2);
                    unsigned int v201 = (unint64_t *)*((void *)a3 + 2);
                    double v202 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v203 = *v200++;
                      double v204 = v203;
                      unint64_t v205 = *v201++;
                      if (v204 <= (double)v205) {
                        double v206 = 0.0;
                      }
                      else {
                        double v206 = 1.0;
                      }
                      *v202++ = v206;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1421 = (double *)*((void *)a2 + 2);
                      v1422 = (double *)*((void *)a3 + 2);
                      v1423 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1424 = *v1421++;
                        unsigned int v1425 = (int)v1424;
                        double v1426 = *v1422++;
                        *v1423++ = v1425 > (int)v1426;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v431 = (double *)*((void *)a2 + 2);
                    v432 = (double *)*((void *)a3 + 2);
                    v433 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v434 = *v431++;
                      unsigned int v435 = (int)v434;
                      double v436 = *v432++;
                      *v433++ = v435 > (int)v436;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1427 = (double *)*((void *)a2 + 2);
                      v1428 = (double *)*((void *)a3 + 2);
                      v1429 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1430 = *v1427++;
                        unint64_t v1431 = (unint64_t)v1430;
                        double v1432 = *v1428++;
                        *v1429++ = v1431 > (unint64_t)v1432;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v437 = (double *)*((void *)a2 + 2);
                    v438 = (double *)*((void *)a3 + 2);
                    v439 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v440 = *v437++;
                      unint64_t v441 = (unint64_t)v440;
                      double v442 = *v438++;
                      *v439++ = v441 > (unint64_t)v442;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1040 = (double *)*((void *)a2 + 2);
                      v1041 = (double *)*((void *)a3 + 2);
                      v1042 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1043 = *v1040++;
                        double v1044 = v1043;
                        double v1045 = *v1041++;
                        if (v1044 <= v1045) {
                          double v1046 = 0.0;
                        }
                        else {
                          double v1046 = 1.0;
                        }
                        *v1042++ = v1046;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    double v42 = (double *)*((void *)a2 + 2);
                    unint64_t v43 = (double *)*((void *)a3 + 2);
                    unint64_t v44 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v45 = *v42++;
                      double v46 = v45;
                      double v47 = *v43++;
                      if (v46 <= v47) {
                        double v48 = 0.0;
                      }
                      else {
                        double v48 = 1.0;
                      }
                      *v44++ = v48;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 4:
      unint64_t result = 0;
      if (a2 && a3 && a4)
      {
        if (*((unsigned char *)a4 + 32)) {
          return 0;
        }
        uint64_t v49 = *((void *)a2 + 1);
        if (v49 != *((void *)a3 + 1) || v49 != *((void *)a4 + 1)) {
          return 0;
        }
        int v50 = *a2;
        int v51 = *a3;
        int v52 = *a4;
        if (*a2 == 2)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1915 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1916 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1917 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1919 = *v1915++;
                        unsigned int v1918 = v1919;
                        unsigned int v1920 = *v1916++;
                        *v1917++ = v1918 <= v1920;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v925 = (unsigned __int8 *)*((void *)a2 + 2);
                    v926 = (unsigned __int8 *)*((void *)a3 + 2);
                    v927 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v929 = *v925++;
                      unsigned int v928 = v929;
                      unsigned int v930 = *v926++;
                      *v927++ = v928 <= v930;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1921 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1922 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1923 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1925 = *v1921++;
                        unsigned int v1924 = v1925;
                        unsigned int v1926 = *v1922++;
                        *v1923++ = v1924 <= v1926;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v931 = (unsigned __int8 *)*((void *)a2 + 2);
                    v932 = (unsigned __int8 *)*((void *)a3 + 2);
                    v933 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v935 = *v931++;
                      unsigned int v934 = v935;
                      unsigned int v936 = *v932++;
                      *v933++ = v934 <= v936;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1331 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1332 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1333 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1335 = *v1331++;
                        unsigned int v1334 = v1335;
                        unsigned int v1336 = *v1332++;
                        if (v1334 > v1336) {
                          double v1337 = 0.0;
                        }
                        else {
                          double v1337 = 1.0;
                        }
                        *v1333++ = v1337;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v341 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v342 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v343 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v345 = *v341++;
                      unsigned int v344 = v345;
                      unsigned int v346 = *v342++;
                      if (v344 > v346) {
                        double v347 = 0.0;
                      }
                      else {
                        double v347 = 1.0;
                      }
                      *v343++ = v347;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1927 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1928 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1929 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1931 = *v1927++;
                        unsigned int v1930 = v1931;
                        unsigned int v1932 = *v1928;
                        v1928 += 8;
                        *v1929++ = v1930 <= v1932;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v937 = (unsigned __int8 *)*((void *)a2 + 2);
                    v938 = (unsigned __int8 *)*((void *)a3 + 2);
                    v939 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v941 = *v937++;
                      unsigned int v940 = v941;
                      unsigned int v942 = *v938;
                      v938 += 8;
                      *v939++ = v940 <= v942;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1933 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1934 = (unint64_t *)*((void *)a3 + 2);
                      v1935 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1937 = *v1933++;
                        unint64_t v1936 = v1937;
                        unint64_t v1938 = *v1934++;
                        *v1935++ = v1938 >= v1936;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v943 = (unsigned __int8 *)*((void *)a2 + 2);
                    v944 = (unint64_t *)*((void *)a3 + 2);
                    v945 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v947 = *v943++;
                      unint64_t v946 = v947;
                      unint64_t v948 = *v944++;
                      *v945++ = v948 >= v946;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1338 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1339 = (unint64_t *)*((void *)a3 + 2);
                      v1340 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1341 = *v1338++;
                        double v1342 = (double)v1341;
                        unint64_t v1343 = *v1339++;
                        if (v1342 > (double)v1343) {
                          double v1344 = 0.0;
                        }
                        else {
                          double v1344 = 1.0;
                        }
                        *v1340++ = v1344;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    unsigned int v348 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v349 = (unint64_t *)*((void *)a3 + 2);
                    unsigned int v350 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v351 = *v348++;
                      double v352 = (double)v351;
                      unint64_t v353 = *v349++;
                      if (v352 > (double)v353) {
                        double v354 = 0.0;
                      }
                      else {
                        double v354 = 1.0;
                      }
                      *v350++ = v354;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1553 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1554 = (double *)*((void *)a3 + 2);
                      v1555 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1557 = *v1553++;
                        unsigned int v1556 = v1557;
                        double v1558 = *v1554++;
                        *v1555++ = v1556 <= (int)v1558;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v563 = (unsigned __int8 *)*((void *)a2 + 2);
                    v564 = (double *)*((void *)a3 + 2);
                    v565 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v567 = *v563++;
                      unsigned int v566 = v567;
                      double v568 = *v564++;
                      *v565++ = v566 <= (int)v568;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1559 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1560 = (double *)*((void *)a3 + 2);
                      v1561 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1563 = *v1559++;
                        unint64_t v1562 = v1563;
                        double v1564 = *v1560++;
                        *v1561++ = v1562 <= (unint64_t)v1564;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v569 = (unsigned __int8 *)*((void *)a2 + 2);
                    v570 = (double *)*((void *)a3 + 2);
                    v571 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v573 = *v569++;
                      unint64_t v572 = v573;
                      double v574 = *v570++;
                      *v571++ = v572 <= (unint64_t)v574;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1117 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1118 = (double *)*((void *)a3 + 2);
                      v1119 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1120 = *v1117++;
                        double v1121 = (double)v1120;
                        double v1122 = *v1118++;
                        if (v1122 < v1121) {
                          double v1123 = 0.0;
                        }
                        else {
                          double v1123 = 1.0;
                        }
                        *v1119++ = v1123;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    unint64_t v127 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v128 = (double *)*((void *)a3 + 2);
                    double v129 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v130 = *v127++;
                      double v131 = (double)v130;
                      double v132 = *v128++;
                      if (v132 < v131) {
                        double v133 = 0.0;
                      }
                      else {
                        double v133 = 1.0;
                      }
                      *v129++ = v133;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
          }
        }
        else if (v50 == 1)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1939 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1940 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1941 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1943 = *v1939;
                        v1939 += 8;
                        unsigned int v1942 = v1943;
                        unsigned int v1944 = *v1940++;
                        *v1941++ = v1944 >= v1942;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v949 = (unsigned __int8 *)*((void *)a2 + 2);
                    v950 = (unsigned __int8 *)*((void *)a3 + 2);
                    v951 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v953 = *v949;
                      v949 += 8;
                      unsigned int v952 = v953;
                      unsigned int v954 = *v950++;
                      *v951++ = v954 >= v952;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1945 = (unint64_t *)*((void *)a2 + 2);
                      v1946 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1947 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1949 = *v1945++;
                        unint64_t v1948 = v1949;
                        LODWORD(v1949) = *v1946++;
                        *v1947++ = v1948 <= v1949;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v955 = (unint64_t *)*((void *)a2 + 2);
                    v956 = (unsigned __int8 *)*((void *)a3 + 2);
                    v957 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v959 = *v955++;
                      unint64_t v958 = v959;
                      LODWORD(v959) = *v956++;
                      *v957++ = v958 <= v959;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1345 = (unint64_t *)*((void *)a2 + 2);
                      v1346 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1347 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1348 = *v1345++;
                        unint64_t v1349 = v1348;
                        LODWORD(v1348) = *v1346++;
                        if ((double)v1349 > (double)v1348) {
                          double v1350 = 0.0;
                        }
                        else {
                          double v1350 = 1.0;
                        }
                        *v1347++ = v1350;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    unint64_t v355 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v356 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v357 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v358 = *v355++;
                      unint64_t v359 = v358;
                      LODWORD(v358) = *v356++;
                      if ((double)v359 > (double)v358) {
                        double v360 = 0.0;
                      }
                      else {
                        double v360 = 1.0;
                      }
                      *v357++ = v360;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1950 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1951 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1952 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1954 = *v1950;
                        v1950 += 8;
                        unsigned int v1953 = v1954;
                        unsigned int v1955 = *v1951;
                        v1951 += 8;
                        *v1952++ = v1953 <= v1955;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v960 = (unsigned __int8 *)*((void *)a2 + 2);
                    v961 = (unsigned __int8 *)*((void *)a3 + 2);
                    v962 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v964 = *v960;
                      v960 += 8;
                      unsigned int v963 = v964;
                      unsigned int v965 = *v961;
                      v961 += 8;
                      *v962++ = v963 <= v965;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1956 = (unint64_t *)*((void *)a2 + 2);
                      v1957 = (unint64_t *)*((void *)a3 + 2);
                      v1958 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1960 = *v1956++;
                        unint64_t v1959 = v1960;
                        unint64_t v1961 = *v1957++;
                        *v1958++ = v1959 <= v1961;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v966 = (unint64_t *)*((void *)a2 + 2);
                    v967 = (unint64_t *)*((void *)a3 + 2);
                    v968 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v970 = *v966++;
                      unint64_t v969 = v970;
                      unint64_t v971 = *v967++;
                      *v968++ = v969 <= v971;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1351 = (unint64_t *)*((void *)a2 + 2);
                      v1352 = (unint64_t *)*((void *)a3 + 2);
                      v1353 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1354 = *v1351++;
                        double v1355 = (double)v1354;
                        unint64_t v1356 = *v1352++;
                        if (v1355 > (double)v1356) {
                          double v1357 = 0.0;
                        }
                        else {
                          double v1357 = 1.0;
                        }
                        *v1353++ = v1357;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v361 = (unint64_t *)*((void *)a2 + 2);
                    v362 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v363 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v364 = *v361++;
                      double v365 = (double)v364;
                      unint64_t v366 = *v362++;
                      if (v365 > (double)v366) {
                        double v367 = 0.0;
                      }
                      else {
                        double v367 = 1.0;
                      }
                      *v363++ = v367;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1565 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1566 = (double *)*((void *)a3 + 2);
                      v1567 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1569 = *v1565;
                        v1565 += 8;
                        unsigned int v1568 = v1569;
                        double v1570 = *v1566++;
                        *v1567++ = v1568 <= (int)v1570;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v575 = (unsigned __int8 *)*((void *)a2 + 2);
                    v576 = (double *)*((void *)a3 + 2);
                    v577 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v579 = *v575;
                      v575 += 8;
                      unsigned int v578 = v579;
                      double v580 = *v576++;
                      *v577++ = v578 <= (int)v580;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1571 = (unint64_t *)*((void *)a2 + 2);
                      v1572 = (double *)*((void *)a3 + 2);
                      v1573 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1575 = *v1571++;
                        unint64_t v1574 = v1575;
                        double v1576 = *v1572++;
                        *v1573++ = v1574 <= (unint64_t)v1576;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v581 = (unint64_t *)*((void *)a2 + 2);
                    v582 = (double *)*((void *)a3 + 2);
                    v583 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v585 = *v581++;
                      unint64_t v584 = v585;
                      double v586 = *v582++;
                      *v583++ = v584 <= (unint64_t)v586;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1124 = (unint64_t *)*((void *)a2 + 2);
                      v1125 = (double *)*((void *)a3 + 2);
                      v1126 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1127 = *v1124++;
                        unint64_t v1128 = v1127;
                        double v1129 = *v1125++;
                        if (v1129 < (double)v1128) {
                          double v1130 = 0.0;
                        }
                        else {
                          double v1130 = 1.0;
                        }
                        *v1126++ = v1130;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    char v134 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v135 = (double *)*((void *)a3 + 2);
                    double v136 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v137 = *v134++;
                      unint64_t v138 = v137;
                      double v139 = *v135++;
                      if (v139 < (double)v138) {
                        double v140 = 0.0;
                      }
                      else {
                        double v140 = 1.0;
                      }
                      *v136++ = v140;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v50)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1685 = (double *)*((void *)a2 + 2);
                      v1686 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1687 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1688 = *v1685++;
                        unsigned int v1689 = (int)v1688;
                        LODWORD(v1688) = *v1686++;
                        *v1687++ = LODWORD(v1688) >= v1689;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v695 = (double *)*((void *)a2 + 2);
                    v696 = (unsigned __int8 *)*((void *)a3 + 2);
                    v697 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v698 = *v695++;
                      unsigned int v699 = (int)v698;
                      LODWORD(v698) = *v696++;
                      *v697++ = LODWORD(v698) >= v699;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1690 = (double *)*((void *)a2 + 2);
                      v1691 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1692 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1693 = *v1690++;
                        unint64_t v1694 = (unint64_t)v1693;
                        LODWORD(v1693) = *v1691++;
                        *v1692++ = v1694 <= LODWORD(v1693);
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v700 = (double *)*((void *)a2 + 2);
                    v701 = (unsigned __int8 *)*((void *)a3 + 2);
                    v702 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v703 = *v700++;
                      unint64_t v704 = (unint64_t)v703;
                      LODWORD(v703) = *v701++;
                      *v702++ = v704 <= LODWORD(v703);
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1197 = (double *)*((void *)a2 + 2);
                      v1198 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1199 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1200 = *v1197++;
                        double v1201 = v1200;
                        LODWORD(v1200) = *v1198++;
                        if (v1201 > (double)LODWORD(v1200)) {
                          double v1202 = 0.0;
                        }
                        else {
                          double v1202 = 1.0;
                        }
                        *v1199++ = v1202;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    double v207 = (double *)*((void *)a2 + 2);
                    unint64_t v208 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v209 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v210 = *v207++;
                      double v211 = v210;
                      LODWORD(v210) = *v208++;
                      if (v211 > (double)LODWORD(v210)) {
                        double v212 = 0.0;
                      }
                      else {
                        double v212 = 1.0;
                      }
                      *v209++ = v212;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1695 = (double *)*((void *)a2 + 2);
                      v1696 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1697 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1698 = *v1695++;
                        unsigned int v1699 = (int)v1698;
                        LODWORD(v1698) = *v1696;
                        v1696 += 8;
                        *v1697++ = v1699 <= LODWORD(v1698);
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v705 = (double *)*((void *)a2 + 2);
                    v706 = (unsigned __int8 *)*((void *)a3 + 2);
                    v707 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v708 = *v705++;
                      unsigned int v709 = (int)v708;
                      LODWORD(v708) = *v706;
                      v706 += 8;
                      *v707++ = v709 <= LODWORD(v708);
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1700 = (double *)*((void *)a2 + 2);
                      v1701 = (unint64_t *)*((void *)a3 + 2);
                      v1702 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1703 = *v1700++;
                        unint64_t v1704 = (unint64_t)v1703;
                        unint64_t v1705 = *v1701++;
                        *v1702++ = v1705 >= v1704;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v710 = (double *)*((void *)a2 + 2);
                    v711 = (unint64_t *)*((void *)a3 + 2);
                    v712 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v713 = *v710++;
                      unint64_t v714 = (unint64_t)v713;
                      unint64_t v715 = *v711++;
                      *v712++ = v715 >= v714;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1203 = (double *)*((void *)a2 + 2);
                      v1204 = (unint64_t *)*((void *)a3 + 2);
                      v1205 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1206 = *v1203++;
                        double v1207 = v1206;
                        unint64_t v1208 = *v1204++;
                        if (v1207 > (double)v1208) {
                          double v1209 = 0.0;
                        }
                        else {
                          double v1209 = 1.0;
                        }
                        *v1205++ = v1209;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    unsigned int v213 = (double *)*((void *)a2 + 2);
                    double v214 = (unint64_t *)*((void *)a3 + 2);
                    double v215 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v216 = *v213++;
                      double v217 = v216;
                      unint64_t v218 = *v214++;
                      if (v217 > (double)v218) {
                        double v219 = 0.0;
                      }
                      else {
                        double v219 = 1.0;
                      }
                      *v215++ = v219;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1433 = (double *)*((void *)a2 + 2);
                      v1434 = (double *)*((void *)a3 + 2);
                      v1435 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1436 = *v1433++;
                        unsigned int v1437 = (int)v1436;
                        double v1438 = *v1434++;
                        *v1435++ = v1437 <= (int)v1438;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v443 = (double *)*((void *)a2 + 2);
                    v444 = (double *)*((void *)a3 + 2);
                    v445 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v446 = *v443++;
                      unsigned int v447 = (int)v446;
                      double v448 = *v444++;
                      *v445++ = v447 <= (int)v448;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1439 = (double *)*((void *)a2 + 2);
                      v1440 = (double *)*((void *)a3 + 2);
                      v1441 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1442 = *v1439++;
                        unint64_t v1443 = (unint64_t)v1442;
                        double v1444 = *v1440++;
                        *v1441++ = v1443 <= (unint64_t)v1444;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v449 = (double *)*((void *)a2 + 2);
                    v450 = (double *)*((void *)a3 + 2);
                    v451 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v452 = *v449++;
                      unint64_t v453 = (unint64_t)v452;
                      double v454 = *v450++;
                      *v451++ = v453 <= (unint64_t)v454;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1047 = (double *)*((void *)a2 + 2);
                      v1048 = (double *)*((void *)a3 + 2);
                      v1049 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1050 = *v1047++;
                        double v1051 = v1050;
                        double v1052 = *v1048++;
                        if (v1051 > v1052) {
                          double v1053 = 0.0;
                        }
                        else {
                          double v1053 = 1.0;
                        }
                        *v1049++ = v1053;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    unint64_t v53 = (double *)*((void *)a2 + 2);
                    unint64_t v54 = (double *)*((void *)a3 + 2);
                    unsigned int v55 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v56 = *v53++;
                      double v57 = v56;
                      double v58 = *v54++;
                      if (v57 > v58) {
                        double v59 = 0.0;
                      }
                      else {
                        double v59 = 1.0;
                      }
                      *v55++ = v59;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 5:
      unint64_t result = 0;
      if (!a2 || !a3 || !a4) {
        return result;
      }
      if (*((unsigned char *)a4 + 32)) {
        return 0;
      }
      uint64_t v60 = *((void *)a2 + 1);
      if (v60 != *((void *)a3 + 1) || v60 != *((void *)a4 + 1)) {
        return 0;
      }
      int v61 = *a2;
      int v62 = *a3;
      int v63 = *a4;
      if (*a2 == 2)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1962 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1963 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1964 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1966 = *v1962++;
                      unsigned int v1965 = v1966;
                      unsigned int v1967 = *v1963++;
                      *v1964++ = v1965 >= v1967;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v972 = (unsigned __int8 *)*((void *)a2 + 2);
                  v973 = (unsigned __int8 *)*((void *)a3 + 2);
                  v974 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v976 = *v972++;
                    unsigned int v975 = v976;
                    unsigned int v977 = *v973++;
                    *v974++ = v975 >= v977;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1968 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1969 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1970 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1972 = *v1968++;
                      unsigned int v1971 = v1972;
                      unsigned int v1973 = *v1969++;
                      *v1970++ = v1971 >= v1973;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v978 = (unsigned __int8 *)*((void *)a2 + 2);
                  v979 = (unsigned __int8 *)*((void *)a3 + 2);
                  v980 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v982 = *v978++;
                    unsigned int v981 = v982;
                    unsigned int v983 = *v979++;
                    *v980++ = v981 >= v983;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1358 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1359 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1360 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1362 = *v1358++;
                      unsigned int v1361 = v1362;
                      unsigned int v1363 = *v1359++;
                      if (v1361 < v1363) {
                        double v1364 = 0.0;
                      }
                      else {
                        double v1364 = 1.0;
                      }
                      *v1360++ = v1364;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v368 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v369 = (unsigned __int8 *)*((void *)a3 + 2);
                  unsigned int v370 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v372 = *v368++;
                    unsigned int v371 = v372;
                    unsigned int v373 = *v369++;
                    if (v371 < v373) {
                      double v374 = 0.0;
                    }
                    else {
                      double v374 = 1.0;
                    }
                    *v370++ = v374;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1974 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1975 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1976 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1978 = *v1974++;
                      unsigned int v1977 = v1978;
                      unsigned int v1979 = *v1975;
                      v1975 += 8;
                      *v1976++ = v1977 >= v1979;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v984 = (unsigned __int8 *)*((void *)a2 + 2);
                  v985 = (unsigned __int8 *)*((void *)a3 + 2);
                  v986 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v988 = *v984++;
                    unsigned int v987 = v988;
                    unsigned int v989 = *v985;
                    v985 += 8;
                    *v986++ = v987 >= v989;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1980 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1981 = (unint64_t *)*((void *)a3 + 2);
                    v1982 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1984 = *v1980++;
                      unint64_t v1983 = v1984;
                      unint64_t v1985 = *v1981++;
                      *v1982++ = v1985 <= v1983;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v990 = (unsigned __int8 *)*((void *)a2 + 2);
                  v991 = (unint64_t *)*((void *)a3 + 2);
                  v992 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v994 = *v990++;
                    unint64_t v993 = v994;
                    unint64_t v995 = *v991++;
                    *v992++ = v995 <= v993;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1365 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1366 = (unint64_t *)*((void *)a3 + 2);
                    v1367 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1368 = *v1365++;
                      double v1369 = (double)v1368;
                      unint64_t v1370 = *v1366++;
                      if (v1369 < (double)v1370) {
                        double v1371 = 0.0;
                      }
                      else {
                        double v1371 = 1.0;
                      }
                      *v1367++ = v1371;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v375 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v376 = (unint64_t *)*((void *)a3 + 2);
                  unint64_t v377 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v378 = *v375++;
                    double v379 = (double)v378;
                    unint64_t v380 = *v376++;
                    if (v379 < (double)v380) {
                      double v381 = 0.0;
                    }
                    else {
                      double v381 = 1.0;
                    }
                    *v377++ = v381;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1577 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1578 = (double *)*((void *)a3 + 2);
                    v1579 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1581 = *v1577++;
                      unsigned int v1580 = v1581;
                      double v1582 = *v1578++;
                      *v1579++ = v1580 >= (int)v1582;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v587 = (unsigned __int8 *)*((void *)a2 + 2);
                  v588 = (double *)*((void *)a3 + 2);
                  v589 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v591 = *v587++;
                    unsigned int v590 = v591;
                    double v592 = *v588++;
                    *v589++ = v590 >= (int)v592;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1583 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1584 = (double *)*((void *)a3 + 2);
                    v1585 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1587 = *v1583++;
                      unint64_t v1586 = v1587;
                      double v1588 = *v1584++;
                      *v1585++ = v1586 >= (unint64_t)v1588;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v593 = (unsigned __int8 *)*((void *)a2 + 2);
                  v594 = (double *)*((void *)a3 + 2);
                  v595 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v597 = *v593++;
                    unint64_t v596 = v597;
                    double v598 = *v594++;
                    *v595++ = v596 >= (unint64_t)v598;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1131 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1132 = (double *)*((void *)a3 + 2);
                    v1133 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1134 = *v1131++;
                      double v1135 = (double)v1134;
                      double v1136 = *v1132++;
                      if (v1136 > v1135) {
                        double v1137 = 0.0;
                      }
                      else {
                        double v1137 = 1.0;
                      }
                      *v1133++ = v1137;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  double v141 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v142 = (double *)*((void *)a3 + 2);
                  unsigned int v143 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v144 = *v141++;
                    double v145 = (double)v144;
                    double v146 = *v142++;
                    if (v146 > v145) {
                      double v147 = 0.0;
                    }
                    else {
                      double v147 = 1.0;
                    }
                    *v143++ = v147;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
        }
      }
      else if (v61 == 1)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1986 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1987 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1988 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1990 = *v1986;
                      v1986 += 8;
                      unsigned int v1989 = v1990;
                      unsigned int v1991 = *v1987++;
                      *v1988++ = v1991 <= v1989;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v996 = (unsigned __int8 *)*((void *)a2 + 2);
                  v997 = (unsigned __int8 *)*((void *)a3 + 2);
                  v998 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v1000 = *v996;
                    v996 += 8;
                    unsigned int v999 = v1000;
                    unsigned int v1001 = *v997++;
                    *v998++ = v1001 <= v999;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1992 = (unint64_t *)*((void *)a2 + 2);
                    v1993 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1994 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1996 = *v1992++;
                      unint64_t v1995 = v1996;
                      LODWORD(v1996) = *v1993++;
                      *v1994++ = v1995 >= v1996;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v1002 = (unint64_t *)*((void *)a2 + 2);
                  v1003 = (unsigned __int8 *)*((void *)a3 + 2);
                  v1004 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v1006 = *v1002++;
                    unint64_t v1005 = v1006;
                    LODWORD(v1006) = *v1003++;
                    *v1004++ = v1005 >= v1006;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1372 = (unint64_t *)*((void *)a2 + 2);
                    v1373 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1374 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1375 = *v1372++;
                      unint64_t v1376 = v1375;
                      LODWORD(v1375) = *v1373++;
                      if ((double)v1376 < (double)v1375) {
                        double v1377 = 0.0;
                      }
                      else {
                        double v1377 = 1.0;
                      }
                      *v1374++ = v1377;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v382 = (unint64_t *)*((void *)a2 + 2);
                  v383 = (unsigned __int8 *)*((void *)a3 + 2);
                  v384 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v385 = *v382++;
                    unint64_t v386 = v385;
                    LODWORD(v385) = *v383++;
                    if ((double)v386 < (double)v385) {
                      double v387 = 0.0;
                    }
                    else {
                      double v387 = 1.0;
                    }
                    *v384++ = v387;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1997 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1998 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1999 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v2001 = *v1997;
                      v1997 += 8;
                      unsigned int v2000 = v2001;
                      unsigned int v2002 = *v1998;
                      v1998 += 8;
                      *v1999++ = v2000 >= v2002;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v1007 = (unsigned __int8 *)*((void *)a2 + 2);
                  v1008 = (unsigned __int8 *)*((void *)a3 + 2);
                  v1009 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v1011 = *v1007;
                    v1007 += 8;
                    unsigned int v1010 = v1011;
                    unsigned int v1012 = *v1008;
                    v1008 += 8;
                    *v1009++ = v1010 >= v1012;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v2003 = (unint64_t *)*((void *)a2 + 2);
                    v2004 = (unint64_t *)*((void *)a3 + 2);
                    v2005 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v2007 = *v2003++;
                      unint64_t v2006 = v2007;
                      unint64_t v2008 = *v2004++;
                      *v2005++ = v2006 >= v2008;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v1013 = (unint64_t *)*((void *)a2 + 2);
                  v1014 = (unint64_t *)*((void *)a3 + 2);
                  v1015 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v1017 = *v1013++;
                    unint64_t v1016 = v1017;
                    unint64_t v1018 = *v1014++;
                    *v1015++ = v1016 >= v1018;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1378 = (unint64_t *)*((void *)a2 + 2);
                    v1379 = (unint64_t *)*((void *)a3 + 2);
                    v1380 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1381 = *v1378++;
                      double v1382 = (double)v1381;
                      unint64_t v1383 = *v1379++;
                      if (v1382 < (double)v1383) {
                        double v1384 = 0.0;
                      }
                      else {
                        double v1384 = 1.0;
                      }
                      *v1380++ = v1384;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v388 = (unint64_t *)*((void *)a2 + 2);
                  v389 = (unint64_t *)*((void *)a3 + 2);
                  v390 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v391 = *v388++;
                    double v392 = (double)v391;
                    unint64_t v393 = *v389++;
                    if (v392 < (double)v393) {
                      double v394 = 0.0;
                    }
                    else {
                      double v394 = 1.0;
                    }
                    *v390++ = v394;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1589 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1590 = (double *)*((void *)a3 + 2);
                    v1591 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1593 = *v1589;
                      v1589 += 8;
                      unsigned int v1592 = v1593;
                      double v1594 = *v1590++;
                      *v1591++ = v1592 >= (int)v1594;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v599 = (unsigned __int8 *)*((void *)a2 + 2);
                  v600 = (double *)*((void *)a3 + 2);
                  v601 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v603 = *v599;
                    v599 += 8;
                    unsigned int v602 = v603;
                    double v604 = *v600++;
                    *v601++ = v602 >= (int)v604;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1595 = (unint64_t *)*((void *)a2 + 2);
                    v1596 = (double *)*((void *)a3 + 2);
                    v1597 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1599 = *v1595++;
                      unint64_t v1598 = v1599;
                      double v1600 = *v1596++;
                      *v1597++ = v1598 >= (unint64_t)v1600;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v605 = (unint64_t *)*((void *)a2 + 2);
                  v606 = (double *)*((void *)a3 + 2);
                  v607 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v609 = *v605++;
                    unint64_t v608 = v609;
                    double v610 = *v606++;
                    *v607++ = v608 >= (unint64_t)v610;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1138 = (unint64_t *)*((void *)a2 + 2);
                    v1139 = (double *)*((void *)a3 + 2);
                    v1140 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1141 = *v1138++;
                      unint64_t v1142 = v1141;
                      double v1143 = *v1139++;
                      if (v1143 > (double)v1142) {
                        double v1144 = 0.0;
                      }
                      else {
                        double v1144 = 1.0;
                      }
                      *v1140++ = v1144;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  unint64_t v148 = (unint64_t *)*((void *)a2 + 2);
                  double v149 = (double *)*((void *)a3 + 2);
                  uint64_t v150 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v151 = *v148++;
                    unint64_t v152 = v151;
                    double v153 = *v149++;
                    if (v153 > (double)v152) {
                      double v154 = 0.0;
                    }
                    else {
                      double v154 = 1.0;
                    }
                    *v150++ = v154;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
        }
      }
      else if (!v61)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1706 = (double *)*((void *)a2 + 2);
                    v1707 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1708 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v1709 = *v1706++;
                      unsigned int v1710 = (int)v1709;
                      LODWORD(v1709) = *v1707++;
                      *v1708++ = LODWORD(v1709) <= v1710;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v716 = (double *)*((void *)a2 + 2);
                  v717 = (unsigned __int8 *)*((void *)a3 + 2);
                  v718 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    double v719 = *v716++;
                    unsigned int v720 = (int)v719;
                    LODWORD(v719) = *v717++;
                    *v718++ = LODWORD(v719) <= v720;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1711 = (double *)*((void *)a2 + 2);
                    v1712 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1713 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v1714 = *v1711++;
                      unint64_t v1715 = (unint64_t)v1714;
                      LODWORD(v1714) = *v1712++;
                      *v1713++ = v1715 >= LODWORD(v1714);
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v721 = (double *)*((void *)a2 + 2);
                  v722 = (unsigned __int8 *)*((void *)a3 + 2);
                  v723 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v724 = *v721++;
                    unint64_t v725 = (unint64_t)v724;
                    LODWORD(v724) = *v722++;
                    *v723++ = v725 >= LODWORD(v724);
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1210 = (double *)*((void *)a2 + 2);
                    v1211 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1212 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v1213 = *v1210++;
                      double v1214 = v1213;
                      LODWORD(v1213) = *v1211++;
                      if (v1214 < (double)LODWORD(v1213)) {
                        double v1215 = 0.0;
                      }
                      else {
                        double v1215 = 1.0;
                      }
                      *v1212++ = v1215;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  char v220 = (double *)*((void *)a2 + 2);
                  unsigned int v221 = (unsigned __int8 *)*((void *)a3 + 2);
                  double v222 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v223 = *v220++;
                    double v224 = v223;
                    LODWORD(v223) = *v221++;
                    if (v224 < (double)LODWORD(v223)) {
                      double v225 = 0.0;
                    }
                    else {
                      double v225 = 1.0;
                    }
                    *v222++ = v225;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1716 = (double *)*((void *)a2 + 2);
                    v1717 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1718 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v1719 = *v1716++;
                      unsigned int v1720 = (int)v1719;
                      LODWORD(v1719) = *v1717;
                      v1717 += 8;
                      *v1718++ = v1720 >= LODWORD(v1719);
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v726 = (double *)*((void *)a2 + 2);
                  v727 = (unsigned __int8 *)*((void *)a3 + 2);
                  v728 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    double v729 = *v726++;
                    unsigned int v730 = (int)v729;
                    LODWORD(v729) = *v727;
                    v727 += 8;
                    *v728++ = v730 >= LODWORD(v729);
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1721 = (double *)*((void *)a2 + 2);
                    v1722 = (unint64_t *)*((void *)a3 + 2);
                    v1723 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v1724 = *v1721++;
                      unint64_t v1725 = (unint64_t)v1724;
                      unint64_t v1726 = *v1722++;
                      *v1723++ = v1726 <= v1725;
                      --v60;
                    }
                    while (v60);
                  }
                  return a4;
                }
                if (!a5)
                {
                  if (v60)
                  {
                    v731 = (double *)*((void *)a2 + 2);
                    v732 = (unint64_t *)*((void *)a3 + 2);
                    v733 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v734 = *v731++;
                      unint64_t v735 = (unint64_t)v734;
                      unint64_t v736 = *v732++;
                      *v733++ = v736 <= v735;
                      --v60;
                    }
                    while (v60);
                  }
                  return a4;
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1216 = (double *)*((void *)a2 + 2);
                    v1217 = (unint64_t *)*((void *)a3 + 2);
                    v1218 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v1219 = *v1216++;
                      double v1220 = v1219;
                      unint64_t v1221 = *v1217++;
                      if (v1220 < (double)v1221) {
                        double v1222 = 0.0;
                      }
                      else {
                        double v1222 = 1.0;
                      }
                      *v1218++ = v1222;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  double v226 = (double *)*((void *)a2 + 2);
                  double v227 = (unint64_t *)*((void *)a3 + 2);
                  unint64_t v228 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v229 = *v226++;
                    double v230 = v229;
                    unint64_t v231 = *v227++;
                    if (v230 < (double)v231) {
                      double v232 = 0.0;
                    }
                    else {
                      double v232 = 1.0;
                    }
                    *v228++ = v232;
                    --v60;
                  }
                  while (v60);
                }
                return a4;
            }
            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1445 = (double *)*((void *)a2 + 2);
                    v1446 = (double *)*((void *)a3 + 2);
                    v1447 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v1448 = *v1445++;
                      unsigned int v1449 = (int)v1448;
                      double v1450 = *v1446++;
                      *v1447++ = v1449 >= (int)v1450;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v455 = (double *)*((void *)a2 + 2);
                  v456 = (double *)*((void *)a3 + 2);
                  v457 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    double v458 = *v455++;
                    unsigned int v459 = (int)v458;
                    double v460 = *v456++;
                    *v457++ = v459 >= (int)v460;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1451 = (double *)*((void *)a2 + 2);
                    v1452 = (double *)*((void *)a3 + 2);
                    v1453 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v1454 = *v1451++;
                      unint64_t v1455 = (unint64_t)v1454;
                      double v1456 = *v1452++;
                      *v1453++ = v1455 >= (unint64_t)v1456;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v461 = (double *)*((void *)a2 + 2);
                  v462 = (double *)*((void *)a3 + 2);
                  v463 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v464 = *v461++;
                    unint64_t v465 = (unint64_t)v464;
                    double v466 = *v462++;
                    *v463++ = v465 >= (unint64_t)v466;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1054 = (double *)*((void *)a2 + 2);
                    v1055 = (double *)*((void *)a3 + 2);
                    v1056 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v1057 = *v1054++;
                      double v1058 = v1057;
                      double v1059 = *v1055++;
                      if (v1058 < v1059) {
                        double v1060 = 0.0;
                      }
                      else {
                        double v1060 = 1.0;
                      }
                      *v1056++ = v1060;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  char v64 = (double *)*((void *)a2 + 2);
                  unsigned int v65 = (double *)*((void *)a3 + 2);
                  unint64_t v66 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v67 = *v64++;
                    double v68 = v67;
                    double v69 = *v65++;
                    if (v68 < v69) {
                      double v70 = 0.0;
                    }
                    else {
                      double v70 = 1.0;
                    }
                    *v66++ = v70;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            return a4;
        }
      }
      return a4;
    default:
      return result;
  }
}

int *sub_1DB30(int *result, int a2, unint64_t a3, int *a4, int *a5, int a6)
{
  switch((int)result)
  {
    case 0:
      unint64_t result = 0;
      if (a4 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v6 = *((void *)a4 + 1);
        if (v6 != *((void *)a5 + 1)) {
          return 0;
        }
        int v7 = *a4;
        int v8 = *a5;
        switch(a2)
        {
          case 2:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v960 = (unsigned __int8 *)*((void *)a4 + 2);
                        v961 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v962 = *v960++;
                          *v961++ = v962 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v420 = (unsigned __int8 *)*((void *)a4 + 2);
                      v421 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v422 = *v420++;
                        *v421++ = v422 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v963 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v964 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v965 = *v963++;
                          *v964++ = v965 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v423 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v424 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v425 = *v423++;
                        *v424++ = v425 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v684 = (unsigned __int8 *)*((void *)a4 + 2);
                        v685 = (double *)*((void *)a5 + 2);
                        do
                        {
                          int v686 = *v684++;
                          if (v686 == a3) {
                            double v687 = 1.0;
                          }
                          else {
                            double v687 = 0.0;
                          }
                          *v685++ = v687;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v144 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v145 = (double *)*((void *)a5 + 2);
                      do
                      {
                        int v146 = *v144++;
                        if (v146 == a3) {
                          double v147 = 1.0;
                        }
                        else {
                          double v147 = 0.0;
                        }
                        *v145++ = v147;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v966 = (unsigned __int8 *)*((void *)a4 + 2);
                        v967 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v968 = *v966;
                          v966 += 8;
                          *v967++ = a3 == v968;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v426 = (unsigned __int8 *)*((void *)a4 + 2);
                      v427 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v428 = *v426;
                        v426 += 8;
                        *v427++ = a3 == v428;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unint64_t v969 = (uint64_t *)*((void *)a4 + 2);
                        unint64_t v970 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v971 = *v969++;
                          *v970++ = a3 == v971;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unint64_t v429 = (uint64_t *)*((void *)a4 + 2);
                      double v430 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v431 = *v429++;
                        *v430++ = a3 == v431;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v688 = (unint64_t *)*((void *)a4 + 2);
                        v689 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v690 = *v688++;
                          if ((double)a3 == (double)v690) {
                            double v691 = 1.0;
                          }
                          else {
                            double v691 = 0.0;
                          }
                          *v689++ = v691;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unint64_t v148 = (unint64_t *)*((void *)a4 + 2);
                      double v149 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v150 = *v148++;
                        if ((double)a3 == (double)v150) {
                          double v151 = 1.0;
                        }
                        else {
                          double v151 = 0.0;
                        }
                        *v149++ = v151;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v816 = (double *)*((void *)a4 + 2);
                        uint64_t v817 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v818 = *v816++;
                          *v817++ = (int)v818 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v276 = (double *)*((void *)a4 + 2);
                      unint64_t v277 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v278 = *v276++;
                        *v277++ = (int)v278 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v819 = (double *)*((void *)a4 + 2);
                        v820 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v821 = *v819++;
                          *v820++ = a3 == (unint64_t)v821;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      double v279 = (double *)*((void *)a4 + 2);
                      char v280 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v281 = *v279++;
                        *v280++ = a3 == (unint64_t)v281;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v588 = (double *)*((void *)a4 + 2);
                        v589 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v590 = *v588++;
                          if (v590 == (double)a3) {
                            double v591 = 1.0;
                          }
                          else {
                            double v591 = 0.0;
                          }
                          *v589++ = v591;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      double v48 = (double *)*((void *)a4 + 2);
                      uint64_t v49 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v50 = *v48++;
                        if (v50 == (double)a3) {
                          double v51 = 1.0;
                        }
                        else {
                          double v51 = 0.0;
                        }
                        *v49++ = v51;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v972 = (unsigned __int8 *)*((void *)a4 + 2);
                        v973 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v974 = *v972++;
                          *v973++ = v974 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v432 = (unsigned __int8 *)*((void *)a4 + 2);
                      v433 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v434 = *v432++;
                        *v433++ = v434 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v975 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v976 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v977 = *v975++;
                          *v976++ = a3 == v977;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v435 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v436 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v437 = *v435++;
                        *v436++ = a3 == v437;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        double v692 = (unsigned __int8 *)*((void *)a4 + 2);
                        unint64_t v693 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v694 = *v692++;
                          if ((double)a3 == (double)v694) {
                            double v695 = 1.0;
                          }
                          else {
                            double v695 = 0.0;
                          }
                          *v693++ = v695;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unint64_t v152 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v153 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v154 = *v152++;
                        if ((double)a3 == (double)v154) {
                          double v155 = 1.0;
                        }
                        else {
                          double v155 = 0.0;
                        }
                        *v153++ = v155;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v978 = (unsigned __int8 *)*((void *)a4 + 2);
                        v979 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v980 = *v978;
                          v978 += 8;
                          *v979++ = a3 == v980;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v438 = (unsigned __int8 *)*((void *)a4 + 2);
                      v439 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v440 = *v438;
                        v438 += 8;
                        *v439++ = a3 == v440;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v981 = (uint64_t *)*((void *)a4 + 2);
                        unsigned int v982 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v983 = *v981++;
                          *v982++ = v983 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unint64_t v441 = (uint64_t *)*((void *)a4 + 2);
                      double v442 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v443 = *v441++;
                        *v442++ = v443 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v696 = (unint64_t *)*((void *)a4 + 2);
                        v697 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v698 = *v696++;
                          if ((double)a3 == (double)v698) {
                            double v699 = 1.0;
                          }
                          else {
                            double v699 = 0.0;
                          }
                          *v697++ = v699;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      double v156 = (unint64_t *)*((void *)a4 + 2);
                      int v157 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v158 = *v156++;
                        if ((double)a3 == (double)v158) {
                          double v159 = 1.0;
                        }
                        else {
                          double v159 = 0.0;
                        }
                        *v157++ = v159;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        int v822 = (double *)*((void *)a4 + 2);
                        int v823 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v824 = *v822++;
                          *v823++ = (int)v824 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unint64_t v282 = (double *)*((void *)a4 + 2);
                      unint64_t v283 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v284 = *v282++;
                        *v283++ = (int)v284 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v825 = (double *)*((void *)a4 + 2);
                        v826 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v827 = *v825++;
                          *v826++ = a3 == (unint64_t)v827;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unint64_t v285 = (double *)*((void *)a4 + 2);
                      double v286 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v287 = *v285++;
                        *v286++ = a3 == (unint64_t)v287;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        double v592 = (double *)*((void *)a4 + 2);
                        v593 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v594 = *v592++;
                          if (v594 == (double)a3) {
                            double v595 = 1.0;
                          }
                          else {
                            double v595 = 0.0;
                          }
                          *v593++ = v595;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      int v52 = (double *)*((void *)a4 + 2);
                      unint64_t v53 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v54 = *v52++;
                        if (v54 == (double)a3) {
                          double v55 = 1.0;
                        }
                        else {
                          double v55 = 0.0;
                        }
                        *v53++ = v55;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v888 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v889 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v890 = *v888++;
                          *v889++ = v890 == (int)*(double *)&a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v348 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v349 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v350 = *v348++;
                        *v349++ = v350 == (int)*(double *)&a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v891 = (unsigned __int8 *)*((void *)a4 + 2);
                        v892 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v893 = *v891++;
                          *v892++ = (unint64_t)*(double *)&a3 == v893;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v351 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v352 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v353 = *v351++;
                        *v352++ = (unint64_t)*(double *)&a3 == v353;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        int v636 = (unsigned __int8 *)*((void *)a4 + 2);
                        v637 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v638 = *v636++;
                          if (*(double *)&a3 == (double)v638) {
                            double v639 = 1.0;
                          }
                          else {
                            double v639 = 0.0;
                          }
                          *v637++ = v639;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unint64_t v96 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v97 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v98 = *v96++;
                        if (*(double *)&a3 == (double)v98) {
                          double v99 = 1.0;
                        }
                        else {
                          double v99 = 0.0;
                        }
                        *v97++ = v99;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v894 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v895 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v896 = *v894;
                          v894 += 8;
                          *v895++ = (int)*(double *)&a3 == v896;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      double v354 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v355 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v356 = *v354;
                        v354 += 8;
                        *v355++ = (int)*(double *)&a3 == v356;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v897 = (uint64_t *)*((void *)a4 + 2);
                        v898 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v899 = *v897++;
                          *v898++ = v899 == (unint64_t)*(double *)&a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v357 = (uint64_t *)*((void *)a4 + 2);
                      unint64_t v358 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v359 = *v357++;
                        *v358++ = v359 == (unint64_t)*(double *)&a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        double v640 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v641 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v642 = *v640++;
                          if (*(double *)&a3 == (double)v642) {
                            double v643 = 1.0;
                          }
                          else {
                            double v643 = 0.0;
                          }
                          *v641++ = v643;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unint64_t v100 = (unint64_t *)*((void *)a4 + 2);
                      unsigned int v101 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v102 = *v100++;
                        if (*(double *)&a3 == (double)v102) {
                          double v103 = 1.0;
                        }
                        else {
                          double v103 = 0.0;
                        }
                        *v101++ = v103;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v780 = (double *)*((void *)a4 + 2);
                        uint64_t v781 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v782 = *v780++;
                          *v781++ = (int)*(double *)&a3 == (int)v782;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v240 = (double *)*((void *)a4 + 2);
                      double v241 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v242 = *v240++;
                        *v241++ = (int)*(double *)&a3 == (int)v242;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        uint64_t v783 = (double *)*((void *)a4 + 2);
                        v784 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v785 = *v783++;
                          *v784++ = a3 == *(uint64_t *)&v785;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      unsigned int v243 = (double *)*((void *)a4 + 2);
                      double v244 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v245 = *v243++;
                        *v244++ = a3 == *(uint64_t *)&v245;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v564 = (double *)*((void *)a4 + 2);
                        v565 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v566 = *v564++;
                          if (v566 == *(double *)&a3) {
                            double v567 = 1.0;
                          }
                          else {
                            double v567 = 0.0;
                          }
                          *v565++ = v567;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      int v9 = (double *)*((void *)a4 + 2);
                      unint64_t v10 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v11 = *v9++;
                        if (v11 == *(double *)&a3) {
                          double v12 = 1.0;
                        }
                        else {
                          double v12 = 0.0;
                        }
                        *v10++ = v12;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 1:
      unint64_t result = 0;
      if (a4 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v13 = *((void *)a4 + 1);
        if (v13 != *((void *)a5 + 1)) {
          return 0;
        }
        int v14 = *a4;
        int v15 = *a5;
        switch(a2)
        {
          case 2:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v984 = (unsigned __int8 *)*((void *)a4 + 2);
                        v985 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v986 = *v984++;
                          *v985++ = v986 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v444 = (unsigned __int8 *)*((void *)a4 + 2);
                      v445 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v446 = *v444++;
                        *v445++ = v446 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v987 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v988 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v989 = *v987++;
                          *v988++ = v989 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unsigned int v447 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v448 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v449 = *v447++;
                        *v448++ = v449 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v700 = (unsigned __int8 *)*((void *)a4 + 2);
                        v701 = (double *)*((void *)a5 + 2);
                        do
                        {
                          int v702 = *v700++;
                          if (v702 == a3) {
                            double v703 = 0.0;
                          }
                          else {
                            double v703 = 1.0;
                          }
                          *v701++ = v703;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      double v160 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v161 = (double *)*((void *)a5 + 2);
                      do
                      {
                        int v162 = *v160++;
                        if (v162 == a3) {
                          double v163 = 0.0;
                        }
                        else {
                          double v163 = 1.0;
                        }
                        *v161++ = v163;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v990 = (unsigned __int8 *)*((void *)a4 + 2);
                        v991 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v992 = *v990;
                          v990 += 8;
                          *v991++ = a3 != v992;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v450 = (unsigned __int8 *)*((void *)a4 + 2);
                      v451 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v452 = *v450;
                        v450 += 8;
                        *v451++ = a3 != v452;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unint64_t v993 = (uint64_t *)*((void *)a4 + 2);
                        unsigned int v994 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v995 = *v993++;
                          *v994++ = a3 != v995;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unint64_t v453 = (uint64_t *)*((void *)a4 + 2);
                      double v454 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v455 = *v453++;
                        *v454++ = a3 != v455;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unint64_t v704 = (unint64_t *)*((void *)a4 + 2);
                        v705 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v706 = *v704++;
                          if ((double)a3 == (double)v706) {
                            double v707 = 0.0;
                          }
                          else {
                            double v707 = 1.0;
                          }
                          *v705++ = v707;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      double v164 = (unint64_t *)*((void *)a4 + 2);
                      double v165 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v166 = *v164++;
                        if ((double)a3 == (double)v166) {
                          double v167 = 0.0;
                        }
                        else {
                          double v167 = 1.0;
                        }
                        *v165++ = v167;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        uint64_t v828 = (double *)*((void *)a4 + 2);
                        uint64_t v829 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v830 = *v828++;
                          *v829++ = (int)v830 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unint64_t v288 = (double *)*((void *)a4 + 2);
                      unsigned int v289 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v290 = *v288++;
                        *v289++ = (int)v290 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v831 = (double *)*((void *)a4 + 2);
                        v832 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v833 = *v831++;
                          *v832++ = a3 != (unint64_t)v833;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unsigned int v291 = (double *)*((void *)a4 + 2);
                      unsigned int v292 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v293 = *v291++;
                        *v292++ = a3 != (unint64_t)v293;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unint64_t v596 = (double *)*((void *)a4 + 2);
                        unsigned int v597 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v598 = *v596++;
                          if (v598 == (double)a3) {
                            double v599 = 0.0;
                          }
                          else {
                            double v599 = 1.0;
                          }
                          *v597++ = v599;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      double v56 = (double *)*((void *)a4 + 2);
                      double v57 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v58 = *v56++;
                        if (v58 == (double)a3) {
                          double v59 = 0.0;
                        }
                        else {
                          double v59 = 1.0;
                        }
                        *v57++ = v59;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v996 = (unsigned __int8 *)*((void *)a4 + 2);
                        v997 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v998 = *v996++;
                          *v997++ = v998 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v456 = (unsigned __int8 *)*((void *)a4 + 2);
                      v457 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v458 = *v456++;
                        *v457++ = v458 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v999 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v1000 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v1001 = *v999++;
                          *v1000++ = a3 != v1001;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unsigned int v459 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v460 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v461 = *v459++;
                        *v460++ = a3 != v461;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        double v708 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v709 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v710 = *v708++;
                          if ((double)a3 == (double)v710) {
                            double v711 = 0.0;
                          }
                          else {
                            double v711 = 1.0;
                          }
                          *v709++ = v711;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unint64_t v168 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v169 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v170 = *v168++;
                        if ((double)a3 == (double)v170) {
                          double v171 = 0.0;
                        }
                        else {
                          double v171 = 1.0;
                        }
                        *v169++ = v171;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v1002 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1003 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v1004 = *v1002;
                          v1002 += 8;
                          *v1003++ = a3 != v1004;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v462 = (unsigned __int8 *)*((void *)a4 + 2);
                      v463 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v464 = *v462;
                        v462 += 8;
                        *v463++ = a3 != v464;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unint64_t v1005 = (uint64_t *)*((void *)a4 + 2);
                        unint64_t v1006 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v1007 = *v1005++;
                          *v1006++ = v1007 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unint64_t v465 = (uint64_t *)*((void *)a4 + 2);
                      double v466 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v467 = *v465++;
                        *v466++ = v467 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v712 = (unint64_t *)*((void *)a4 + 2);
                        double v713 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v714 = *v712++;
                          if ((double)a3 == (double)v714) {
                            double v715 = 0.0;
                          }
                          else {
                            double v715 = 1.0;
                          }
                          *v713++ = v715;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      double v172 = (unint64_t *)*((void *)a4 + 2);
                      double v173 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v174 = *v172++;
                        if ((double)a3 == (double)v174) {
                          double v175 = 0.0;
                        }
                        else {
                          double v175 = 1.0;
                        }
                        *v173++ = v175;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v834 = (double *)*((void *)a4 + 2);
                        unsigned int v835 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v836 = *v834++;
                          *v835++ = (int)v836 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unsigned int v294 = (double *)*((void *)a4 + 2);
                      unsigned int v295 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v296 = *v294++;
                        *v295++ = (int)v296 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v837 = (double *)*((void *)a4 + 2);
                        v838 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v839 = *v837++;
                          *v838++ = a3 != (unint64_t)v839;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unsigned int v297 = (double *)*((void *)a4 + 2);
                      double v298 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v299 = *v297++;
                        *v298++ = a3 != (unint64_t)v299;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v600 = (double *)*((void *)a4 + 2);
                        v601 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v602 = *v600++;
                          if (v602 == (double)a3) {
                            double v603 = 0.0;
                          }
                          else {
                            double v603 = 1.0;
                          }
                          *v601++ = v603;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      uint64_t v60 = (double *)*((void *)a4 + 2);
                      int v61 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v62 = *v60++;
                        if (v62 == (double)a3) {
                          double v63 = 0.0;
                        }
                        else {
                          double v63 = 1.0;
                        }
                        *v61++ = v63;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v900 = (unsigned __int8 *)*((void *)a4 + 2);
                        unint64_t v901 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v902 = *v900++;
                          *v901++ = v902 != (int)*(double *)&a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      double v360 = (unsigned __int8 *)*((void *)a4 + 2);
                      v361 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v362 = *v360++;
                        *v361++ = v362 != (int)*(double *)&a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v903 = (unsigned __int8 *)*((void *)a4 + 2);
                        v904 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v905 = *v903++;
                          *v904++ = (unint64_t)*(double *)&a3 != v905;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unint64_t v363 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v364 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v365 = *v363++;
                        *v364++ = (unint64_t)*(double *)&a3 != v365;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v644 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v645 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v646 = *v644++;
                          if (*(double *)&a3 == (double)v646) {
                            double v647 = 0.0;
                          }
                          else {
                            double v647 = 1.0;
                          }
                          *v645++ = v647;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      double v104 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v105 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v106 = *v104++;
                        if (*(double *)&a3 == (double)v106) {
                          double v107 = 0.0;
                        }
                        else {
                          double v107 = 1.0;
                        }
                        *v105++ = v107;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v906 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v907 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v908 = *v906;
                          v906 += 8;
                          *v907++ = (int)*(double *)&a3 != v908;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unint64_t v366 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v367 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v368 = *v366;
                        v366 += 8;
                        *v367++ = (int)*(double *)&a3 != v368;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v909 = (uint64_t *)*((void *)a4 + 2);
                        v910 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v911 = *v909++;
                          *v910++ = v911 != (unint64_t)*(double *)&a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unsigned int v369 = (uint64_t *)*((void *)a4 + 2);
                      unsigned int v370 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v371 = *v369++;
                        *v370++ = v371 != (unint64_t)*(double *)&a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v648 = (unint64_t *)*((void *)a4 + 2);
                        v649 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v650 = *v648++;
                          if (*(double *)&a3 == (double)v650) {
                            double v651 = 0.0;
                          }
                          else {
                            double v651 = 1.0;
                          }
                          *v649++ = v651;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      unint64_t v108 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v109 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v110 = *v108++;
                        if (*(double *)&a3 == (double)v110) {
                          double v111 = 0.0;
                        }
                        else {
                          double v111 = 1.0;
                        }
                        *v109++ = v111;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v786 = (double *)*((void *)a4 + 2);
                        int v787 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v788 = *v786++;
                          *v787++ = (int)*(double *)&a3 != (int)v788;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      double v246 = (double *)*((void *)a4 + 2);
                      unint64_t v247 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v248 = *v246++;
                        *v247++ = (int)*(double *)&a3 != (int)v248;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        int v789 = (double *)*((void *)a4 + 2);
                        v790 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v791 = *v789++;
                          *v790++ = a3 != *(uint64_t *)&v791;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      double v249 = (double *)*((void *)a4 + 2);
                      unint64_t v250 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v251 = *v249++;
                        *v250++ = a3 != *(uint64_t *)&v251;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        double v568 = (double *)*((void *)a4 + 2);
                        v569 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v570 = *v568++;
                          if (v570 == *(double *)&a3) {
                            double v571 = 0.0;
                          }
                          else {
                            double v571 = 1.0;
                          }
                          *v569++ = v571;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      uint64_t v16 = (double *)*((void *)a4 + 2);
                      int v17 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v18 = *v16++;
                        if (v18 == *(double *)&a3) {
                          double v19 = 0.0;
                        }
                        else {
                          double v19 = 1.0;
                        }
                        *v17++ = v19;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 2:
      unint64_t result = 0;
      if (a4 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v20 = *((void *)a4 + 1);
        if (v20 != *((void *)a5 + 1)) {
          return 0;
        }
        int v21 = *a4;
        int v22 = *a5;
        switch(a2)
        {
          case 2:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1008 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1009 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1010 = *v1008++;
                          *v1009++ = v1010 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v468 = (unsigned __int8 *)*((void *)a4 + 2);
                      v469 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v470 = *v468++;
                        *v469++ = v470 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v1011 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v1012 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1013 = *v1011++;
                          *v1012++ = a3 < (unint64_t)v1013;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      int v471 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v472 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v473 = *v471++;
                        *v472++ = a3 < (unint64_t)v473;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v716 = (unsigned __int8 *)*((void *)a4 + 2);
                        v717 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v718 = *v716++;
                          if (a3 >= v718) {
                            double v719 = 0.0;
                          }
                          else {
                            double v719 = 1.0;
                          }
                          *v717++ = v719;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      unint64_t v176 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v177 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v178 = *v176++;
                        if (a3 >= v178) {
                          double v179 = 0.0;
                        }
                        else {
                          double v179 = 1.0;
                        }
                        *v177++ = v179;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1014 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1015 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1016 = *v1014;
                          v1014 += 8;
                          *v1015++ = a3 < v1016;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v474 = (unsigned __int8 *)*((void *)a4 + 2);
                      v475 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v476 = *v474;
                        v474 += 8;
                        *v475++ = a3 < v476;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unint64_t v1017 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v1018 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1019 = *v1017++;
                          *v1018++ = a3 < v1019;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      unsigned int v477 = (unint64_t *)*((void *)a4 + 2);
                      double v478 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v479 = *v477++;
                        *v478++ = a3 < v479;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v720 = (unint64_t *)*((void *)a4 + 2);
                        v721 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v722 = *v720++;
                          if ((double)a3 >= (double)v722) {
                            double v723 = 0.0;
                          }
                          else {
                            double v723 = 1.0;
                          }
                          *v721++ = v723;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v180 = (unint64_t *)*((void *)a4 + 2);
                      int v181 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v182 = *v180++;
                        if ((double)a3 >= (double)v182) {
                          double v183 = 0.0;
                        }
                        else {
                          double v183 = 1.0;
                        }
                        *v181++ = v183;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v840 = (double *)*((void *)a4 + 2);
                        unsigned int v841 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v842 = *v840++;
                          *v841++ = (int)v842 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v300 = (double *)*((void *)a4 + 2);
                      unint64_t v301 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v302 = *v300++;
                        *v301++ = (int)v302 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v843 = (double *)*((void *)a4 + 2);
                        v844 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v845 = *v843++;
                          *v844++ = a3 < (unint64_t)v845;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v303 = (double *)*((void *)a4 + 2);
                      unint64_t v304 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v305 = *v303++;
                        *v304++ = a3 < (unint64_t)v305;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v604 = (double *)*((void *)a4 + 2);
                        v605 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v606 = *v604++;
                          if (v606 <= (double)a3) {
                            double v607 = 0.0;
                          }
                          else {
                            double v607 = 1.0;
                          }
                          *v605++ = v607;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      char v64 = (double *)*((void *)a4 + 2);
                      unsigned int v65 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v66 = *v64++;
                        if (v66 <= (double)a3) {
                          double v67 = 0.0;
                        }
                        else {
                          double v67 = 1.0;
                        }
                        *v65++ = v67;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1020 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1021 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1022 = *v1020++;
                          *v1021++ = v1022 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v480 = (unsigned __int8 *)*((void *)a4 + 2);
                      v481 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v482 = *v480++;
                        *v481++ = v482 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v1023 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1024 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1025 = *v1023++;
                          *v1024++ = a3 < v1025;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      int v483 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v484 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v485 = *v483++;
                        *v484++ = a3 < v485;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v724 = (unsigned __int8 *)*((void *)a4 + 2);
                        unint64_t v725 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v726 = *v724++;
                          if ((double)a3 >= (double)v726) {
                            double v727 = 0.0;
                          }
                          else {
                            double v727 = 1.0;
                          }
                          *v725++ = v727;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v184 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v185 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v186 = *v184++;
                        if ((double)a3 >= (double)v186) {
                          double v187 = 0.0;
                        }
                        else {
                          double v187 = 1.0;
                        }
                        *v185++ = v187;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1026 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1027 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1028 = *v1026;
                          v1026 += 8;
                          *v1027++ = a3 < v1028;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v486 = (unsigned __int8 *)*((void *)a4 + 2);
                      v487 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v488 = *v486;
                        v486 += 8;
                        *v487++ = a3 < v488;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v1029 = (unint64_t *)*((void *)a4 + 2);
                        double v1030 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1031 = *v1029++;
                          *v1030++ = v1031 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      uint64_t v489 = (unint64_t *)*((void *)a4 + 2);
                      double v490 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v491 = *v489++;
                        *v490++ = v491 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v728 = (unint64_t *)*((void *)a4 + 2);
                        double v729 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v730 = *v728++;
                          if ((double)a3 >= (double)v730) {
                            double v731 = 0.0;
                          }
                          else {
                            double v731 = 1.0;
                          }
                          *v729++ = v731;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v188 = (unint64_t *)*((void *)a4 + 2);
                      int v189 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v190 = *v188++;
                        if ((double)a3 >= (double)v190) {
                          double v191 = 0.0;
                        }
                        else {
                          double v191 = 1.0;
                        }
                        *v189++ = v191;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v846 = (double *)*((void *)a4 + 2);
                        unsigned int v847 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v848 = *v846++;
                          *v847++ = (int)v848 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v306 = (double *)*((void *)a4 + 2);
                      unsigned int v307 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v308 = *v306++;
                        *v307++ = (int)v308 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v849 = (double *)*((void *)a4 + 2);
                        v850 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v851 = *v849++;
                          *v850++ = a3 < (unint64_t)v851;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v309 = (double *)*((void *)a4 + 2);
                      unint64_t v310 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v311 = *v309++;
                        *v310++ = a3 < (unint64_t)v311;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unint64_t v608 = (double *)*((void *)a4 + 2);
                        unint64_t v609 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v610 = *v608++;
                          if (v610 <= (double)a3) {
                            double v611 = 0.0;
                          }
                          else {
                            double v611 = 1.0;
                          }
                          *v609++ = v611;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v68 = (double *)*((void *)a4 + 2);
                      double v69 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v70 = *v68++;
                        if (v70 <= (double)a3) {
                          double v71 = 0.0;
                        }
                        else {
                          double v71 = 1.0;
                        }
                        *v69++ = v71;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unint64_t v912 = (unsigned __int8 *)*((void *)a4 + 2);
                        v913 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v914 = *v912++;
                          *v913++ = v914 > (int)*(double *)&a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      unsigned int v372 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v373 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v374 = *v372++;
                        *v373++ = v374 > (int)*(double *)&a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v915 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v916 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v917 = *v915++;
                          *v916++ = (unint64_t)*(double *)&a3 < v917;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v375 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v376 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v377 = *v375++;
                        *v376++ = (unint64_t)*(double *)&a3 < v377;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        uint64_t v652 = (unsigned __int8 *)*((void *)a4 + 2);
                        v653 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v654 = *v652++;
                          if (*(double *)&a3 >= (double)v654) {
                            double v655 = 0.0;
                          }
                          else {
                            double v655 = 1.0;
                          }
                          *v653++ = v655;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v112 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v113 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v114 = *v112++;
                        if (*(double *)&a3 >= (double)v114) {
                          double v115 = 0.0;
                        }
                        else {
                          double v115 = 1.0;
                        }
                        *v113++ = v115;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v918 = (unsigned __int8 *)*((void *)a4 + 2);
                        v919 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v920 = *v918;
                          v918 += 8;
                          *v919++ = (int)*(double *)&a3 < v920;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      unsigned int v378 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v379 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v380 = *v378;
                        v378 += 8;
                        *v379++ = (int)*(double *)&a3 < v380;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v921 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v922 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v923 = *v921++;
                          *v922++ = v923 > (unint64_t)*(double *)&a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v381 = (unint64_t *)*((void *)a4 + 2);
                      v382 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v383 = *v381++;
                        *v382++ = v383 > (unint64_t)*(double *)&a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v656 = (unint64_t *)*((void *)a4 + 2);
                        unsigned int v657 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v658 = *v656++;
                          if (*(double *)&a3 >= (double)v658) {
                            double v659 = 0.0;
                          }
                          else {
                            double v659 = 1.0;
                          }
                          *v657++ = v659;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      unsigned int v116 = (unint64_t *)*((void *)a4 + 2);
                      double v117 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v118 = *v116++;
                        if (*(double *)&a3 >= (double)v118) {
                          double v119 = 0.0;
                        }
                        else {
                          double v119 = 1.0;
                        }
                        *v117++ = v119;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v792 = (double *)*((void *)a4 + 2);
                        int v793 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v794 = *v792++;
                          *v793++ = (int)*(double *)&a3 < (int)v794;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v252 = (double *)*((void *)a4 + 2);
                      unsigned int v253 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v254 = *v252++;
                        *v253++ = (int)*(double *)&a3 < (int)v254;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        int v795 = (double *)*((void *)a4 + 2);
                        v796 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v797 = *v795++;
                          *v796++ = (unint64_t)*(double *)&a3 < (unint64_t)v797;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v255 = (double *)*((void *)a4 + 2);
                      unint64_t v256 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v257 = *v255++;
                        *v256++ = (unint64_t)*(double *)&a3 < (unint64_t)v257;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unint64_t v572 = (double *)*((void *)a4 + 2);
                        unsigned int v573 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v574 = *v572++;
                          if (v574 <= *(double *)&a3) {
                            double v575 = 0.0;
                          }
                          else {
                            double v575 = 1.0;
                          }
                          *v573++ = v575;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      double v23 = (double *)*((void *)a4 + 2);
                      double v24 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v25 = *v23++;
                        if (v25 <= *(double *)&a3) {
                          double v26 = 0.0;
                        }
                        else {
                          double v26 = 1.0;
                        }
                        *v24++ = v26;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 3:
      unint64_t result = 0;
      if (a4 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v27 = *((void *)a4 + 1);
        if (v27 != *((void *)a5 + 1)) {
          return 0;
        }
        int v28 = *a4;
        int v29 = *a5;
        switch(a2)
        {
          case 2:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1032 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1033 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1034 = *v1032++;
                          *v1033++ = v1034 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v492 = (unsigned __int8 *)*((void *)a4 + 2);
                      v493 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v494 = *v492++;
                        *v493++ = v494 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1035 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1036 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1037 = *v1035++;
                          *v1036++ = a3 > (unint64_t)v1037;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      int v495 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v496 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v497 = *v495++;
                        *v496++ = a3 > (unint64_t)v497;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v732 = (unsigned __int8 *)*((void *)a4 + 2);
                        v733 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v734 = *v732++;
                          if (a3 <= v734) {
                            double v735 = 0.0;
                          }
                          else {
                            double v735 = 1.0;
                          }
                          *v733++ = v735;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      unint64_t v192 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v193 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v194 = *v192++;
                        if (a3 <= v194) {
                          double v195 = 0.0;
                        }
                        else {
                          double v195 = 1.0;
                        }
                        *v193++ = v195;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1038 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1039 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1040 = *v1038;
                          v1038 += 8;
                          *v1039++ = a3 > v1040;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v498 = (unsigned __int8 *)*((void *)a4 + 2);
                      v499 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v500 = *v498;
                        v498 += 8;
                        *v499++ = a3 > v500;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1041 = (unint64_t *)*((void *)a4 + 2);
                        v1042 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1043 = *v1041++;
                          *v1042++ = a3 > v1043;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      unsigned int v501 = (unint64_t *)*((void *)a4 + 2);
                      double v502 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v503 = *v501++;
                        *v502++ = a3 > v503;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unint64_t v736 = (unint64_t *)*((void *)a4 + 2);
                        v737 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v738 = *v736++;
                          if ((double)a3 <= (double)v738) {
                            double v739 = 0.0;
                          }
                          else {
                            double v739 = 1.0;
                          }
                          *v737++ = v739;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      char v196 = (unint64_t *)*((void *)a4 + 2);
                      double v197 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v198 = *v196++;
                        if ((double)a3 <= (double)v198) {
                          double v199 = 0.0;
                        }
                        else {
                          double v199 = 1.0;
                        }
                        *v197++ = v199;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unint64_t v852 = (double *)*((void *)a4 + 2);
                        unsigned int v853 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v854 = *v852++;
                          *v853++ = (int)v854 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      unint64_t v312 = (double *)*((void *)a4 + 2);
                      double v313 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v314 = *v312++;
                        *v313++ = (int)v314 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v855 = (double *)*((void *)a4 + 2);
                        v856 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v857 = *v855++;
                          *v856++ = a3 > (unint64_t)v857;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      double v315 = (double *)*((void *)a4 + 2);
                      unsigned int v316 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v317 = *v315++;
                        *v316++ = a3 > (unint64_t)v317;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v612 = (double *)*((void *)a4 + 2);
                        v613 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v614 = *v612++;
                          if (v614 >= (double)a3) {
                            double v615 = 0.0;
                          }
                          else {
                            double v615 = 1.0;
                          }
                          *v613++ = v615;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      double v72 = (double *)*((void *)a4 + 2);
                      int v73 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v74 = *v72++;
                        if (v74 >= (double)a3) {
                          double v75 = 0.0;
                        }
                        else {
                          double v75 = 1.0;
                        }
                        *v73++ = v75;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1044 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1045 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1046 = *v1044++;
                          *v1045++ = v1046 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v504 = (unsigned __int8 *)*((void *)a4 + 2);
                      v505 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v506 = *v504++;
                        *v505++ = v506 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1047 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1048 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1049 = *v1047++;
                          *v1048++ = a3 > v1049;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      int v507 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v508 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v509 = *v507++;
                        *v508++ = a3 > v509;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        int v740 = (unsigned __int8 *)*((void *)a4 + 2);
                        int v741 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v742 = *v740++;
                          if ((double)a3 <= (double)v742) {
                            double v743 = 0.0;
                          }
                          else {
                            double v743 = 1.0;
                          }
                          *v741++ = v743;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      uint64_t v200 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v201 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v202 = *v200++;
                        if ((double)a3 <= (double)v202) {
                          double v203 = 0.0;
                        }
                        else {
                          double v203 = 1.0;
                        }
                        *v201++ = v203;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1050 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1051 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1052 = *v1050;
                          v1050 += 8;
                          *v1051++ = a3 > v1052;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v510 = (unsigned __int8 *)*((void *)a4 + 2);
                      v511 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v512 = *v510;
                        v510 += 8;
                        *v511++ = a3 > v512;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1053 = (unint64_t *)*((void *)a4 + 2);
                        v1054 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1055 = *v1053++;
                          *v1054++ = v1055 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      uint64_t v513 = (unint64_t *)*((void *)a4 + 2);
                      double v514 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v515 = *v513++;
                        *v514++ = v515 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v744 = (unint64_t *)*((void *)a4 + 2);
                        v745 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v746 = *v744++;
                          if ((double)a3 <= (double)v746) {
                            double v747 = 0.0;
                          }
                          else {
                            double v747 = 1.0;
                          }
                          *v745++ = v747;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      double v204 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v205 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v206 = *v204++;
                        if ((double)a3 <= (double)v206) {
                          double v207 = 0.0;
                        }
                        else {
                          double v207 = 1.0;
                        }
                        *v205++ = v207;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unsigned int v858 = (double *)*((void *)a4 + 2);
                        unsigned int v859 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v860 = *v858++;
                          *v859++ = (int)v860 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      unsigned int v318 = (double *)*((void *)a4 + 2);
                      unsigned int v319 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v320 = *v318++;
                        *v319++ = (int)v320 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v861 = (double *)*((void *)a4 + 2);
                        v862 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v863 = *v861++;
                          *v862++ = a3 > (unint64_t)v863;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      double v321 = (double *)*((void *)a4 + 2);
                      unint64_t v322 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v323 = *v321++;
                        *v322++ = a3 > (unint64_t)v323;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v616 = (double *)*((void *)a4 + 2);
                        v617 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v618 = *v616++;
                          if (v618 >= (double)a3) {
                            double v619 = 0.0;
                          }
                          else {
                            double v619 = 1.0;
                          }
                          *v617++ = v619;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      double v76 = (double *)*((void *)a4 + 2);
                      double v77 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v78 = *v76++;
                        if (v78 >= (double)a3) {
                          double v79 = 0.0;
                        }
                        else {
                          double v79 = 1.0;
                        }
                        *v77++ = v79;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unint64_t v924 = (unsigned __int8 *)*((void *)a4 + 2);
                        v925 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v926 = *v924++;
                          *v925++ = v926 < (int)*(double *)&a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v384 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v385 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v386 = *v384++;
                        *v385++ = v386 < (int)*(double *)&a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v927 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v928 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v929 = *v927++;
                          *v928++ = (unint64_t)*(double *)&a3 > v929;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      double v387 = (unsigned __int8 *)*((void *)a4 + 2);
                      v388 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v389 = *v387++;
                        *v388++ = (unint64_t)*(double *)&a3 > v389;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v660 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v661 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v662 = *v660++;
                          if (*(double *)&a3 <= (double)v662) {
                            double v663 = 0.0;
                          }
                          else {
                            double v663 = 1.0;
                          }
                          *v661++ = v663;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      double v120 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v121 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v122 = *v120++;
                        if (*(double *)&a3 <= (double)v122) {
                          double v123 = 0.0;
                        }
                        else {
                          double v123 = 1.0;
                        }
                        *v121++ = v123;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unsigned int v930 = (unsigned __int8 *)*((void *)a4 + 2);
                        v931 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v932 = *v930;
                          v930 += 8;
                          *v931++ = (int)*(double *)&a3 > v932;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v390 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v391 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v392 = *v390;
                        v390 += 8;
                        *v391++ = (int)*(double *)&a3 > v392;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v933 = (unint64_t *)*((void *)a4 + 2);
                        unsigned int v934 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v935 = *v933++;
                          *v934++ = v935 < (unint64_t)*(double *)&a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      unint64_t v393 = (unint64_t *)*((void *)a4 + 2);
                      double v394 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v395 = *v393++;
                        *v394++ = v395 < (unint64_t)*(double *)&a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v664 = (unint64_t *)*((void *)a4 + 2);
                        v665 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v666 = *v664++;
                          if (*(double *)&a3 <= (double)v666) {
                            double v667 = 0.0;
                          }
                          else {
                            double v667 = 1.0;
                          }
                          *v665++ = v667;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      unint64_t v124 = (unint64_t *)*((void *)a4 + 2);
                      double v125 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v126 = *v124++;
                        if (*(double *)&a3 <= (double)v126) {
                          double v127 = 0.0;
                        }
                        else {
                          double v127 = 1.0;
                        }
                        *v125++ = v127;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v798 = (double *)*((void *)a4 + 2);
                        int v799 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v800 = *v798++;
                          *v799++ = (int)*(double *)&a3 > (int)v800;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      unint64_t v258 = (double *)*((void *)a4 + 2);
                      double v259 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v260 = *v258++;
                        *v259++ = (int)*(double *)&a3 > (int)v260;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        int v801 = (double *)*((void *)a4 + 2);
                        v802 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v803 = *v801++;
                          *v802++ = (unint64_t)*(double *)&a3 > (unint64_t)v803;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      double v261 = (double *)*((void *)a4 + 2);
                      unsigned int v262 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v263 = *v261++;
                        *v262++ = (unint64_t)*(double *)&a3 > (unint64_t)v263;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v576 = (double *)*((void *)a4 + 2);
                        v577 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v578 = *v576++;
                          if (v578 >= *(double *)&a3) {
                            double v579 = 0.0;
                          }
                          else {
                            double v579 = 1.0;
                          }
                          *v577++ = v579;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      int v30 = (double *)*((void *)a4 + 2);
                      double v31 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v32 = *v30++;
                        if (v32 >= *(double *)&a3) {
                          double v33 = 0.0;
                        }
                        else {
                          double v33 = 1.0;
                        }
                        *v31++ = v33;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 4:
      unint64_t result = 0;
      if (a4 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v34 = *((void *)a4 + 1);
        if (v34 != *((void *)a5 + 1)) {
          return 0;
        }
        int v35 = *a4;
        int v36 = *a5;
        switch(a2)
        {
          case 2:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1056 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1057 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1058 = *v1056++;
                          *v1057++ = v1058 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v516 = (unsigned __int8 *)*((void *)a4 + 2);
                      v517 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v518 = *v516++;
                        *v517++ = v518 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v1059 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1060 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1061 = *v1059++;
                          *v1060++ = a3 <= (unint64_t)v1061;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unsigned int v519 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v520 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v521 = *v519++;
                        *v520++ = a3 <= (unint64_t)v521;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        int v748 = (unsigned __int8 *)*((void *)a4 + 2);
                        v749 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v750 = *v748++;
                          if (a3 > v750) {
                            double v751 = 0.0;
                          }
                          else {
                            double v751 = 1.0;
                          }
                          *v749++ = v751;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unint64_t v208 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v209 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v210 = *v208++;
                        if (a3 > v210) {
                          double v211 = 0.0;
                        }
                        else {
                          double v211 = 1.0;
                        }
                        *v209++ = v211;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1062 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1063 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1064 = *v1062;
                          v1062 += 8;
                          *v1063++ = a3 <= v1064;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v522 = (unsigned __int8 *)*((void *)a4 + 2);
                      v523 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v524 = *v522;
                        v522 += 8;
                        *v523++ = a3 <= v524;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v1065 = (unint64_t *)*((void *)a4 + 2);
                        double v1066 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1067 = *v1065++;
                          *v1066++ = a3 <= v1067;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unsigned int v525 = (unint64_t *)*((void *)a4 + 2);
                      double v526 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v527 = *v525++;
                        *v526++ = a3 <= v527;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        int v752 = (unint64_t *)*((void *)a4 + 2);
                        int v753 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v754 = *v752++;
                          if ((double)a3 > (double)v754) {
                            double v755 = 0.0;
                          }
                          else {
                            double v755 = 1.0;
                          }
                          *v753++ = v755;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      double v212 = (unint64_t *)*((void *)a4 + 2);
                      unsigned int v213 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v214 = *v212++;
                        if ((double)a3 > (double)v214) {
                          double v215 = 0.0;
                        }
                        else {
                          double v215 = 1.0;
                        }
                        *v213++ = v215;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unint64_t v864 = (double *)*((void *)a4 + 2);
                        unint64_t v865 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v866 = *v864++;
                          *v865++ = (int)v866 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unsigned int v324 = (double *)*((void *)a4 + 2);
                      double v325 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v326 = *v324++;
                        *v325++ = (int)v326 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v867 = (double *)*((void *)a4 + 2);
                        v868 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v869 = *v867++;
                          *v868++ = a3 <= (unint64_t)v869;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      double v327 = (double *)*((void *)a4 + 2);
                      unsigned int v328 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v329 = *v327++;
                        *v328++ = a3 <= (unint64_t)v329;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unint64_t v620 = (double *)*((void *)a4 + 2);
                        v621 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v622 = *v620++;
                          if (v622 < (double)a3) {
                            double v623 = 0.0;
                          }
                          else {
                            double v623 = 1.0;
                          }
                          *v621++ = v623;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      double v80 = (double *)*((void *)a4 + 2);
                      unint64_t v81 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v82 = *v80++;
                        if (v82 < (double)a3) {
                          double v83 = 0.0;
                        }
                        else {
                          double v83 = 1.0;
                        }
                        *v81++ = v83;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1068 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1069 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1070 = *v1068++;
                          *v1069++ = v1070 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v528 = (unsigned __int8 *)*((void *)a4 + 2);
                      v529 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v530 = *v528++;
                        *v529++ = v530 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unint64_t v1071 = (unsigned __int8 *)*((void *)a4 + 2);
                        unint64_t v1072 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1073 = *v1071++;
                          *v1072++ = a3 <= v1073;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unsigned int v531 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v532 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v533 = *v531++;
                        *v532++ = a3 <= v533;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v756 = (unsigned __int8 *)*((void *)a4 + 2);
                        v757 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v758 = *v756++;
                          if ((double)a3 > (double)v758) {
                            double v759 = 0.0;
                          }
                          else {
                            double v759 = 1.0;
                          }
                          *v757++ = v759;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      double v216 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v217 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v218 = *v216++;
                        if ((double)a3 > (double)v218) {
                          double v219 = 0.0;
                        }
                        else {
                          double v219 = 1.0;
                        }
                        *v217++ = v219;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v1074 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1075 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1076 = *v1074;
                          v1074 += 8;
                          *v1075++ = a3 <= v1076;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v534 = (unsigned __int8 *)*((void *)a4 + 2);
                      v535 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v536 = *v534;
                        v534 += 8;
                        *v535++ = a3 <= v536;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1077 = (unint64_t *)*((void *)a4 + 2);
                        unsigned int v1078 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1079 = *v1077++;
                          *v1078++ = v1079 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unint64_t v537 = (unint64_t *)*((void *)a4 + 2);
                      double v538 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v539 = *v537++;
                        *v538++ = v539 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        uint64_t v760 = (unint64_t *)*((void *)a4 + 2);
                        v761 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v762 = *v760++;
                          if ((double)a3 > (double)v762) {
                            double v763 = 0.0;
                          }
                          else {
                            double v763 = 1.0;
                          }
                          *v761++ = v763;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      char v220 = (unint64_t *)*((void *)a4 + 2);
                      unsigned int v221 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v222 = *v220++;
                        if ((double)a3 > (double)v222) {
                          double v223 = 0.0;
                        }
                        else {
                          double v223 = 1.0;
                        }
                        *v221++ = v223;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unsigned int v870 = (double *)*((void *)a4 + 2);
                        unsigned int v871 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v872 = *v870++;
                          *v871++ = (int)v872 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      char v330 = (double *)*((void *)a4 + 2);
                      unint64_t v331 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v332 = *v330++;
                        *v331++ = (int)v332 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v873 = (double *)*((void *)a4 + 2);
                        v874 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v875 = *v873++;
                          *v874++ = a3 <= (unint64_t)v875;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      double v333 = (double *)*((void *)a4 + 2);
                      v334 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v335 = *v333++;
                        *v334++ = a3 <= (unint64_t)v335;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v624 = (double *)*((void *)a4 + 2);
                        int v625 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v626 = *v624++;
                          if (v626 < (double)a3) {
                            double v627 = 0.0;
                          }
                          else {
                            double v627 = 1.0;
                          }
                          *v625++ = v627;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      double v84 = (double *)*((void *)a4 + 2);
                      unint64_t v85 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v86 = *v84++;
                        if (v86 < (double)a3) {
                          double v87 = 0.0;
                        }
                        else {
                          double v87 = 1.0;
                        }
                        *v85++ = v87;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unsigned int v936 = (unsigned __int8 *)*((void *)a4 + 2);
                        v937 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v938 = *v936++;
                          *v937++ = v938 >= (int)*(double *)&a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v396 = (unsigned __int8 *)*((void *)a4 + 2);
                      v397 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v398 = *v396++;
                        *v397++ = v398 >= (int)*(double *)&a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v939 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v940 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v941 = *v939++;
                          *v940++ = (unint64_t)*(double *)&a3 <= v941;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      int v399 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v400 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v401 = *v399++;
                        *v400++ = (unint64_t)*(double *)&a3 <= v401;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v668 = (unsigned __int8 *)*((void *)a4 + 2);
                        v669 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v670 = *v668++;
                          if (*(double *)&a3 > (double)v670) {
                            double v671 = 0.0;
                          }
                          else {
                            double v671 = 1.0;
                          }
                          *v669++ = v671;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unint64_t v128 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v129 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v130 = *v128++;
                        if (*(double *)&a3 > (double)v130) {
                          double v131 = 0.0;
                        }
                        else {
                          double v131 = 1.0;
                        }
                        *v129++ = v131;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unsigned int v942 = (unsigned __int8 *)*((void *)a4 + 2);
                        v943 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v944 = *v942;
                          v942 += 8;
                          *v943++ = (int)*(double *)&a3 <= v944;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v402 = (unsigned __int8 *)*((void *)a4 + 2);
                      v403 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v404 = *v402;
                        v402 += 8;
                        *v403++ = (int)*(double *)&a3 <= v404;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v945 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v946 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v947 = *v945++;
                          *v946++ = v947 >= (unint64_t)*(double *)&a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unint64_t v405 = (unint64_t *)*((void *)a4 + 2);
                      double v406 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v407 = *v405++;
                        *v406++ = v407 >= (unint64_t)*(double *)&a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unint64_t v672 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v673 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v674 = *v672++;
                          if (*(double *)&a3 > (double)v674) {
                            double v675 = 0.0;
                          }
                          else {
                            double v675 = 1.0;
                          }
                          *v673++ = v675;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      double v132 = (unint64_t *)*((void *)a4 + 2);
                      double v133 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v134 = *v132++;
                        if (*(double *)&a3 > (double)v134) {
                          double v135 = 0.0;
                        }
                        else {
                          double v135 = 1.0;
                        }
                        *v133++ = v135;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v804 = (double *)*((void *)a4 + 2);
                        uint64_t v805 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v806 = *v804++;
                          *v805++ = (int)*(double *)&a3 <= (int)v806;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      int v264 = (double *)*((void *)a4 + 2);
                      int v265 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v266 = *v264++;
                        *v265++ = (int)*(double *)&a3 <= (int)v266;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        uint64_t v807 = (double *)*((void *)a4 + 2);
                        v808 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v809 = *v807++;
                          *v808++ = (unint64_t)*(double *)&a3 <= (unint64_t)v809;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      unint64_t v267 = (double *)*((void *)a4 + 2);
                      double v268 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v269 = *v267++;
                        *v268++ = (unint64_t)*(double *)&a3 <= (unint64_t)v269;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v580 = (double *)*((void *)a4 + 2);
                        v581 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v582 = *v580++;
                          if (v582 < *(double *)&a3) {
                            double v583 = 0.0;
                          }
                          else {
                            double v583 = 1.0;
                          }
                          *v581++ = v583;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      double v37 = (double *)*((void *)a4 + 2);
                      uint64_t v38 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v39 = *v37++;
                        if (v39 < *(double *)&a3) {
                          double v40 = 0.0;
                        }
                        else {
                          double v40 = 1.0;
                        }
                        *v38++ = v40;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 5:
      unint64_t result = 0;
      if (!a4 || !a5) {
        return result;
      }
      if (*((unsigned char *)a5 + 32)) {
        return 0;
      }
      uint64_t v41 = *((void *)a4 + 1);
      if (v41 != *((void *)a5 + 1)) {
        return 0;
      }
      int v42 = *a4;
      int v43 = *a5;
      switch(a2)
      {
        case 2:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      double v1080 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v1081 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1082 = *v1080++;
                        *v1081++ = v1082 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v540 = (unsigned __int8 *)*((void *)a4 + 2);
                    v541 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v542 = *v540++;
                      *v541++ = v542 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1083 = (unsigned __int8 *)*((void *)a4 + 2);
                      v1084 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1085 = *v1083++;
                        *v1084++ = a3 >= (unint64_t)v1085;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unsigned int v543 = (unsigned __int8 *)*((void *)a4 + 2);
                    double v544 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v545 = *v543++;
                      *v544++ = a3 >= (unint64_t)v545;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      int v764 = (unsigned __int8 *)*((void *)a4 + 2);
                      int v765 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v766 = *v764++;
                        if (a3 < v766) {
                          double v767 = 0.0;
                        }
                        else {
                          double v767 = 1.0;
                        }
                        *v765++ = v767;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    double v224 = (unsigned __int8 *)*((void *)a4 + 2);
                    double v225 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v226 = *v224++;
                      if (a3 < v226) {
                        double v227 = 0.0;
                      }
                      else {
                        double v227 = 1.0;
                      }
                      *v225++ = v227;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unint64_t v1086 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v1087 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1088 = *v1086;
                        v1086 += 8;
                        *v1087++ = a3 >= v1088;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v546 = (unsigned __int8 *)*((void *)a4 + 2);
                    v547 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v548 = *v546;
                      v546 += 8;
                      *v547++ = a3 >= v548;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1089 = (unint64_t *)*((void *)a4 + 2);
                      v1090 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1091 = *v1089++;
                        *v1090++ = a3 >= v1091;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unsigned int v549 = (unint64_t *)*((void *)a4 + 2);
                    double v550 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v551 = *v549++;
                      *v550++ = a3 >= v551;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v768 = (unint64_t *)*((void *)a4 + 2);
                      v769 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v770 = *v768++;
                        if ((double)a3 < (double)v770) {
                          double v771 = 0.0;
                        }
                        else {
                          double v771 = 1.0;
                        }
                        *v769++ = v771;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unint64_t v228 = (unint64_t *)*((void *)a4 + 2);
                    double v229 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v230 = *v228++;
                      if ((double)a3 < (double)v230) {
                        double v231 = 0.0;
                      }
                      else {
                        double v231 = 1.0;
                      }
                      *v229++ = v231;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unint64_t v876 = (double *)*((void *)a4 + 2);
                      unint64_t v877 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v878 = *v876++;
                        *v877++ = (int)v878 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    int v336 = (double *)*((void *)a4 + 2);
                    unint64_t v337 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v338 = *v336++;
                      *v337++ = (int)v338 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v879 = (double *)*((void *)a4 + 2);
                      v880 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v881 = *v879++;
                        *v880++ = a3 >= (unint64_t)v881;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unint64_t v339 = (double *)*((void *)a4 + 2);
                    double v340 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v341 = *v339++;
                      *v340++ = a3 >= (unint64_t)v341;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v628 = (double *)*((void *)a4 + 2);
                      double v629 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v630 = *v628++;
                        if (v630 > (double)a3) {
                          double v631 = 0.0;
                        }
                        else {
                          double v631 = 1.0;
                        }
                        *v629++ = v631;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unsigned int v88 = (double *)*((void *)a4 + 2);
                    double v89 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v90 = *v88++;
                      if (v90 > (double)a3) {
                        double v91 = 0.0;
                      }
                      else {
                        double v91 = 1.0;
                      }
                      *v89++ = v91;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unsigned int v1092 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v1093 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1094 = *v1092++;
                        *v1093++ = v1094 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v552 = (unsigned __int8 *)*((void *)a4 + 2);
                    v553 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v554 = *v552++;
                      *v553++ = v554 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      double v1095 = (unsigned __int8 *)*((void *)a4 + 2);
                      v1096 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1097 = *v1095++;
                        *v1096++ = a3 >= v1097;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unsigned int v555 = (unsigned __int8 *)*((void *)a4 + 2);
                    double v556 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v557 = *v555++;
                      *v556++ = a3 >= v557;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v772 = (unsigned __int8 *)*((void *)a4 + 2);
                      v773 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v774 = *v772++;
                        if ((double)a3 < (double)v774) {
                          double v775 = 0.0;
                        }
                        else {
                          double v775 = 1.0;
                        }
                        *v773++ = v775;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    double v232 = (unsigned __int8 *)*((void *)a4 + 2);
                    unsigned int v233 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v234 = *v232++;
                      if ((double)a3 < (double)v234) {
                        double v235 = 0.0;
                      }
                      else {
                        double v235 = 1.0;
                      }
                      *v233++ = v235;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1098 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v1099 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1100 = *v1098;
                        v1098 += 8;
                        *v1099++ = a3 >= v1100;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v558 = (unsigned __int8 *)*((void *)a4 + 2);
                    v559 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v560 = *v558;
                      v558 += 8;
                      *v559++ = a3 >= v560;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      double v1101 = (unint64_t *)*((void *)a4 + 2);
                      double v1102 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1103 = *v1101++;
                        *v1102++ = v1103 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unint64_t v561 = (unint64_t *)*((void *)a4 + 2);
                    double v562 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v563 = *v561++;
                      *v562++ = v563 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      int v776 = (unint64_t *)*((void *)a4 + 2);
                      int v777 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v778 = *v776++;
                        if ((double)a3 < (double)v778) {
                          double v779 = 0.0;
                        }
                        else {
                          double v779 = 1.0;
                        }
                        *v777++ = v779;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    int v236 = (unint64_t *)*((void *)a4 + 2);
                    int v237 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v238 = *v236++;
                      if ((double)a3 < (double)v238) {
                        double v239 = 0.0;
                      }
                      else {
                        double v239 = 1.0;
                      }
                      *v237++ = v239;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unsigned int v882 = (double *)*((void *)a4 + 2);
                      unsigned int v883 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v884 = *v882++;
                        *v883++ = (int)v884 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unsigned int v342 = (double *)*((void *)a4 + 2);
                    unsigned int v343 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v344 = *v342++;
                      *v343++ = (int)v344 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v885 = (double *)*((void *)a4 + 2);
                      v886 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v887 = *v885++;
                        *v886++ = a3 >= (unint64_t)v887;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unsigned int v345 = (double *)*((void *)a4 + 2);
                    unsigned int v346 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v347 = *v345++;
                      *v346++ = a3 >= (unint64_t)v347;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v632 = (double *)*((void *)a4 + 2);
                      v633 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v634 = *v632++;
                        if (v634 > (double)a3) {
                          double v635 = 0.0;
                        }
                        else {
                          double v635 = 1.0;
                        }
                        *v633++ = v635;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    uint64_t v92 = (double *)*((void *)a4 + 2);
                    unsigned int v93 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v94 = *v92++;
                      if (v94 > (double)a3) {
                        double v95 = 0.0;
                      }
                      else {
                        double v95 = 1.0;
                      }
                      *v93++ = v95;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unint64_t v948 = (unsigned __int8 *)*((void *)a4 + 2);
                      v949 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v950 = *v948++;
                        *v949++ = v950 <= (int)*(double *)&a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v408 = (unsigned __int8 *)*((void *)a4 + 2);
                    v409 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v410 = *v408++;
                      *v409++ = v410 <= (int)*(double *)&a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v951 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v952 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v953 = *v951++;
                        *v952++ = (unint64_t)*(double *)&a3 >= v953;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    int v411 = (unsigned __int8 *)*((void *)a4 + 2);
                    double v412 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v413 = *v411++;
                      *v412++ = (unint64_t)*(double *)&a3 >= v413;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v676 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v677 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v678 = *v676++;
                        if (*(double *)&a3 < (double)v678) {
                          double v679 = 0.0;
                        }
                        else {
                          double v679 = 1.0;
                        }
                        *v677++ = v679;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    double v136 = (unsigned __int8 *)*((void *)a4 + 2);
                    unint64_t v137 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v138 = *v136++;
                      if (*(double *)&a3 < (double)v138) {
                        double v139 = 0.0;
                      }
                      else {
                        double v139 = 1.0;
                      }
                      *v137++ = v139;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unsigned int v954 = (unsigned __int8 *)*((void *)a4 + 2);
                      v955 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v956 = *v954;
                        v954 += 8;
                        *v955++ = (int)*(double *)&a3 >= v956;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v414 = (unsigned __int8 *)*((void *)a4 + 2);
                    v415 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v416 = *v414;
                      v414 += 8;
                      *v415++ = (int)*(double *)&a3 >= v416;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v957 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v958 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v959 = *v957++;
                        *v958++ = v959 <= (unint64_t)*(double *)&a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unint64_t v417 = (unint64_t *)*((void *)a4 + 2);
                    double v418 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v419 = *v417++;
                      *v418++ = v419 <= (unint64_t)*(double *)&a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v680 = (unint64_t *)*((void *)a4 + 2);
                      v681 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v682 = *v680++;
                        if (*(double *)&a3 < (double)v682) {
                          double v683 = 0.0;
                        }
                        else {
                          double v683 = 1.0;
                        }
                        *v681++ = v683;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6)
                  {
                    if (v41)
                    {
                      double v140 = (unint64_t *)*((void *)a4 + 2);
                      double v141 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v142 = *v140++;
                        if (*(double *)&a3 < (double)v142) {
                          double v143 = 0.0;
                        }
                        else {
                          double v143 = 1.0;
                        }
                        *v141++ = v143;
                        --v41;
                      }
                      while (v41);
                    }
                    return a5;
                  }
                  break;
              }
              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v810 = (double *)*((void *)a4 + 2);
                      int v811 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v812 = *v810++;
                        *v811++ = (int)*(double *)&a3 >= (int)v812;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unsigned int v270 = (double *)*((void *)a4 + 2);
                    double v271 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v272 = *v270++;
                      *v271++ = (int)*(double *)&a3 >= (int)v272;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      int v813 = (double *)*((void *)a4 + 2);
                      v814 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v815 = *v813++;
                        *v814++ = (unint64_t)*(double *)&a3 >= (unint64_t)v815;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    double v273 = (double *)*((void *)a4 + 2);
                    uint64_t v274 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v275 = *v273++;
                      *v274++ = (unint64_t)*(double *)&a3 >= (unint64_t)v275;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unint64_t v584 = (double *)*((void *)a4 + 2);
                      unint64_t v585 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v586 = *v584++;
                        if (v586 > *(double *)&a3) {
                          double v587 = 0.0;
                        }
                        else {
                          double v587 = 1.0;
                        }
                        *v585++ = v587;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    unint64_t v44 = (double *)*((void *)a4 + 2);
                    double v45 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v46 = *v44++;
                      if (v46 > *(double *)&a3) {
                        double v47 = 0.0;
                      }
                      else {
                        double v47 = 1.0;
                      }
                      *v45++ = v47;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              return a5;
          }
          break;
      }
      return a5;
    default:
      return result;
  }
}

int *sub_2265C(int *result, int *a2, int a3, unint64_t a4, int *a5, int a6)
{
  switch((int)result)
  {
    case 0:
      unint64_t result = 0;
      if (a2 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v6 = *((void *)a2 + 1);
        if (v6 != *((void *)a5 + 1)) {
          return 0;
        }
        int v7 = *a2;
        int v8 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v960 = (unsigned __int8 *)*((void *)a2 + 2);
                      v961 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v962 = *v960++;
                        *v961++ = v962 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v420 = (unsigned __int8 *)*((void *)a2 + 2);
                    v421 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v422 = *v420++;
                      *v421++ = v422 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v963 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v964 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v965 = *v963++;
                        *v964++ = v965 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v423 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v424 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v425 = *v423++;
                      *v424++ = v425 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v684 = (unsigned __int8 *)*((void *)a2 + 2);
                      v685 = (double *)*((void *)a5 + 2);
                      do
                      {
                        int v686 = *v684++;
                        if (v686 == a4) {
                          double v687 = 1.0;
                        }
                        else {
                          double v687 = 0.0;
                        }
                        *v685++ = v687;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v144 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v145 = (double *)*((void *)a5 + 2);
                    do
                    {
                      int v146 = *v144++;
                      if (v146 == a4) {
                        double v147 = 1.0;
                      }
                      else {
                        double v147 = 0.0;
                      }
                      *v145++ = v147;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v966 = (unsigned __int8 *)*((void *)a2 + 2);
                      v967 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v968 = *v966++;
                        *v967++ = v968 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v426 = (unsigned __int8 *)*((void *)a2 + 2);
                    v427 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v428 = *v426++;
                      *v427++ = v428 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unint64_t v969 = (unsigned __int8 *)*((void *)a2 + 2);
                      unint64_t v970 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v971 = *v969++;
                        *v970++ = a4 == v971;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unint64_t v429 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v430 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v431 = *v429++;
                      *v430++ = a4 == v431;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v688 = (unsigned __int8 *)*((void *)a2 + 2);
                      v689 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v690 = *v688++;
                        if ((double)v690 == (double)a4) {
                          double v691 = 1.0;
                        }
                        else {
                          double v691 = 0.0;
                        }
                        *v689++ = v691;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v149 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v150 = *v148++;
                      if ((double)v150 == (double)a4) {
                        double v151 = 1.0;
                      }
                      else {
                        double v151 = 0.0;
                      }
                      *v149++ = v151;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v816 = (unsigned __int8 *)*((void *)a2 + 2);
                      uint64_t v817 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v818 = *v816++;
                        *v817++ = v818 == (int)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v276 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v277 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v278 = *v276++;
                      *v277++ = v278 == (int)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v819 = (unsigned __int8 *)*((void *)a2 + 2);
                      v820 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v821 = *v819++;
                        *v820++ = v821 == (unint64_t)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    double v279 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v280 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v281 = *v279++;
                      *v280++ = v281 == (unint64_t)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v588 = (unsigned __int8 *)*((void *)a2 + 2);
                      v589 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v590 = *v588++;
                        if (*(double *)&a4 == (double)v590) {
                          double v591 = 1.0;
                        }
                        else {
                          double v591 = 0.0;
                        }
                        *v589++ = v591;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    double v48 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v49 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v50 = *v48++;
                      if (*(double *)&a4 == (double)v50) {
                        double v51 = 1.0;
                      }
                      else {
                        double v51 = 0.0;
                      }
                      *v49++ = v51;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
          }
        }
        else if (v7 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v972 = (unsigned __int8 *)*((void *)a2 + 2);
                      v973 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v974 = *v972;
                        v972 += 8;
                        *v973++ = v974 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v432 = (unsigned __int8 *)*((void *)a2 + 2);
                    v433 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v434 = *v432;
                      v432 += 8;
                      *v433++ = v434 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v975 = (uint64_t *)*((void *)a2 + 2);
                      unsigned int v976 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v977 = *v975++;
                        *v976++ = v977 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v435 = (uint64_t *)*((void *)a2 + 2);
                    double v436 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v437 = *v435++;
                      *v436++ = v437 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      double v692 = (unint64_t *)*((void *)a2 + 2);
                      unint64_t v693 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v694 = *v692++;
                        if ((double)v694 == (double)a4) {
                          double v695 = 1.0;
                        }
                        else {
                          double v695 = 0.0;
                        }
                        *v693++ = v695;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unint64_t v152 = (unint64_t *)*((void *)a2 + 2);
                    double v153 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v154 = *v152++;
                      if ((double)v154 == (double)a4) {
                        double v155 = 1.0;
                      }
                      else {
                        double v155 = 0.0;
                      }
                      *v153++ = v155;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v978 = (unsigned __int8 *)*((void *)a2 + 2);
                      v979 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v980 = *v978;
                        v978 += 8;
                        *v979++ = v980 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v438 = (unsigned __int8 *)*((void *)a2 + 2);
                    v439 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v440 = *v438;
                      v438 += 8;
                      *v439++ = v440 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v981 = (uint64_t *)*((void *)a2 + 2);
                      unsigned int v982 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v983 = *v981++;
                        *v982++ = v983 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unint64_t v441 = (uint64_t *)*((void *)a2 + 2);
                    double v442 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v443 = *v441++;
                      *v442++ = v443 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v696 = (unint64_t *)*((void *)a2 + 2);
                      v697 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v698 = *v696++;
                        if ((double)v698 == (double)a4) {
                          double v699 = 1.0;
                        }
                        else {
                          double v699 = 0.0;
                        }
                        *v697++ = v699;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    double v156 = (unint64_t *)*((void *)a2 + 2);
                    int v157 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v158 = *v156++;
                      if ((double)v158 == (double)a4) {
                        double v159 = 1.0;
                      }
                      else {
                        double v159 = 0.0;
                      }
                      *v157++ = v159;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      int v822 = (unsigned __int8 *)*((void *)a2 + 2);
                      int v823 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v824 = *v822;
                        v822 += 8;
                        *v823++ = v824 == (int)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unint64_t v282 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v283 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v284 = *v282;
                      v282 += 8;
                      *v283++ = v284 == (int)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v825 = (uint64_t *)*((void *)a2 + 2);
                      v826 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v827 = *v825++;
                        *v826++ = v827 == (unint64_t)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unint64_t v285 = (uint64_t *)*((void *)a2 + 2);
                    double v286 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v287 = *v285++;
                      *v286++ = v287 == (unint64_t)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      double v592 = (unint64_t *)*((void *)a2 + 2);
                      v593 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v594 = *v592++;
                        if (*(double *)&a4 == (double)v594) {
                          double v595 = 1.0;
                        }
                        else {
                          double v595 = 0.0;
                        }
                        *v593++ = v595;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    int v52 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v53 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v54 = *v52++;
                      if (*(double *)&a4 == (double)v54) {
                        double v55 = 1.0;
                      }
                      else {
                        double v55 = 0.0;
                      }
                      *v53++ = v55;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v7)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v888 = (double *)*((void *)a2 + 2);
                      unsigned int v889 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v890 = *v888++;
                        *v889++ = (int)v890 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v348 = (double *)*((void *)a2 + 2);
                    unint64_t v349 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v350 = *v348++;
                      *v349++ = (int)v350 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v891 = (double *)*((void *)a2 + 2);
                      v892 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v893 = *v891++;
                        *v892++ = a4 == (unint64_t)v893;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v351 = (double *)*((void *)a2 + 2);
                    double v352 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v353 = *v351++;
                      *v352++ = a4 == (unint64_t)v353;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      int v636 = (double *)*((void *)a2 + 2);
                      v637 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v638 = *v636++;
                        if (v638 == (double)a4) {
                          double v639 = 1.0;
                        }
                        else {
                          double v639 = 0.0;
                        }
                        *v637++ = v639;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unint64_t v96 = (double *)*((void *)a2 + 2);
                    double v97 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v98 = *v96++;
                      if (v98 == (double)a4) {
                        double v99 = 1.0;
                      }
                      else {
                        double v99 = 0.0;
                      }
                      *v97++ = v99;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v894 = (double *)*((void *)a2 + 2);
                      unsigned int v895 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v896 = *v894++;
                        *v895++ = (int)v896 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    double v354 = (double *)*((void *)a2 + 2);
                    unint64_t v355 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v356 = *v354++;
                      *v355++ = (int)v356 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v897 = (double *)*((void *)a2 + 2);
                      v898 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v899 = *v897++;
                        *v898++ = a4 == (unint64_t)v899;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v357 = (double *)*((void *)a2 + 2);
                    unint64_t v358 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v359 = *v357++;
                      *v358++ = a4 == (unint64_t)v359;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      double v640 = (double *)*((void *)a2 + 2);
                      unint64_t v641 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v642 = *v640++;
                        if (v642 == (double)a4) {
                          double v643 = 1.0;
                        }
                        else {
                          double v643 = 0.0;
                        }
                        *v641++ = v643;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unint64_t v100 = (double *)*((void *)a2 + 2);
                    unsigned int v101 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v102 = *v100++;
                      if (v102 == (double)a4) {
                        double v103 = 1.0;
                      }
                      else {
                        double v103 = 0.0;
                      }
                      *v101++ = v103;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v780 = (double *)*((void *)a2 + 2);
                      uint64_t v781 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v782 = *v780++;
                        *v781++ = (int)v782 == (int)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v240 = (double *)*((void *)a2 + 2);
                    double v241 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v242 = *v240++;
                      *v241++ = (int)v242 == (int)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      uint64_t v783 = (double *)*((void *)a2 + 2);
                      v784 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v785 = *v783++;
                        *v784++ = *(uint64_t *)&v785 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    unsigned int v243 = (double *)*((void *)a2 + 2);
                    double v244 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v245 = *v243++;
                      *v244++ = *(uint64_t *)&v245 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v564 = (double *)*((void *)a2 + 2);
                      v565 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v566 = *v564++;
                        if (v566 == *(double *)&a4) {
                          double v567 = 1.0;
                        }
                        else {
                          double v567 = 0.0;
                        }
                        *v565++ = v567;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    int v9 = (double *)*((void *)a2 + 2);
                    unint64_t v10 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v11 = *v9++;
                      if (v11 == *(double *)&a4) {
                        double v12 = 1.0;
                      }
                      else {
                        double v12 = 0.0;
                      }
                      *v10++ = v12;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 1:
      unint64_t result = 0;
      if (a2 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v13 = *((void *)a2 + 1);
        if (v13 != *((void *)a5 + 1)) {
          return 0;
        }
        int v14 = *a2;
        int v15 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v984 = (unsigned __int8 *)*((void *)a2 + 2);
                      v985 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v986 = *v984++;
                        *v985++ = v986 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v444 = (unsigned __int8 *)*((void *)a2 + 2);
                    v445 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v446 = *v444++;
                      *v445++ = v446 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v987 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v988 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v989 = *v987++;
                        *v988++ = v989 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unsigned int v447 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v448 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v449 = *v447++;
                      *v448++ = v449 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v700 = (unsigned __int8 *)*((void *)a2 + 2);
                      v701 = (double *)*((void *)a5 + 2);
                      do
                      {
                        int v702 = *v700++;
                        if (v702 == a4) {
                          double v703 = 0.0;
                        }
                        else {
                          double v703 = 1.0;
                        }
                        *v701++ = v703;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    double v160 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v161 = (double *)*((void *)a5 + 2);
                    do
                    {
                      int v162 = *v160++;
                      if (v162 == a4) {
                        double v163 = 0.0;
                      }
                      else {
                        double v163 = 1.0;
                      }
                      *v161++ = v163;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v990 = (unsigned __int8 *)*((void *)a2 + 2);
                      v991 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v992 = *v990++;
                        *v991++ = v992 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v450 = (unsigned __int8 *)*((void *)a2 + 2);
                    v451 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v452 = *v450++;
                      *v451++ = v452 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unint64_t v993 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v994 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v995 = *v993++;
                        *v994++ = a4 != v995;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unint64_t v453 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v454 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v455 = *v453++;
                      *v454++ = a4 != v455;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unint64_t v704 = (unsigned __int8 *)*((void *)a2 + 2);
                      v705 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v706 = *v704++;
                        if ((double)v706 == (double)a4) {
                          double v707 = 0.0;
                        }
                        else {
                          double v707 = 1.0;
                        }
                        *v705++ = v707;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    double v164 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v165 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v166 = *v164++;
                      if ((double)v166 == (double)a4) {
                        double v167 = 0.0;
                      }
                      else {
                        double v167 = 1.0;
                      }
                      *v165++ = v167;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      uint64_t v828 = (unsigned __int8 *)*((void *)a2 + 2);
                      uint64_t v829 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v830 = *v828++;
                        *v829++ = v830 != (int)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unint64_t v288 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v289 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v290 = *v288++;
                      *v289++ = v290 != (int)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v831 = (unsigned __int8 *)*((void *)a2 + 2);
                      v832 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v833 = *v831++;
                        *v832++ = v833 != (unint64_t)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unsigned int v291 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v292 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v293 = *v291++;
                      *v292++ = v293 != (unint64_t)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unint64_t v596 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v597 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v598 = *v596++;
                        if (*(double *)&a4 == (double)v598) {
                          double v599 = 0.0;
                        }
                        else {
                          double v599 = 1.0;
                        }
                        *v597++ = v599;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    double v56 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v57 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v58 = *v56++;
                      if (*(double *)&a4 == (double)v58) {
                        double v59 = 0.0;
                      }
                      else {
                        double v59 = 1.0;
                      }
                      *v57++ = v59;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
          }
        }
        else if (v14 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v996 = (unsigned __int8 *)*((void *)a2 + 2);
                      v997 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v998 = *v996;
                        v996 += 8;
                        *v997++ = v998 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v456 = (unsigned __int8 *)*((void *)a2 + 2);
                    v457 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v458 = *v456;
                      v456 += 8;
                      *v457++ = v458 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v999 = (uint64_t *)*((void *)a2 + 2);
                      unsigned int v1000 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v1001 = *v999++;
                        *v1000++ = v1001 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unsigned int v459 = (uint64_t *)*((void *)a2 + 2);
                    double v460 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v461 = *v459++;
                      *v460++ = v461 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      double v708 = (unint64_t *)*((void *)a2 + 2);
                      unsigned int v709 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v710 = *v708++;
                        if ((double)v710 == (double)a4) {
                          double v711 = 0.0;
                        }
                        else {
                          double v711 = 1.0;
                        }
                        *v709++ = v711;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unint64_t v168 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v169 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v170 = *v168++;
                      if ((double)v170 == (double)a4) {
                        double v171 = 0.0;
                      }
                      else {
                        double v171 = 1.0;
                      }
                      *v169++ = v171;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v1002 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1003 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v1004 = *v1002;
                        v1002 += 8;
                        *v1003++ = v1004 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v462 = (unsigned __int8 *)*((void *)a2 + 2);
                    v463 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v464 = *v462;
                      v462 += 8;
                      *v463++ = v464 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unint64_t v1005 = (uint64_t *)*((void *)a2 + 2);
                      unint64_t v1006 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v1007 = *v1005++;
                        *v1006++ = v1007 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unint64_t v465 = (uint64_t *)*((void *)a2 + 2);
                    double v466 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v467 = *v465++;
                      *v466++ = v467 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v712 = (unint64_t *)*((void *)a2 + 2);
                      double v713 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v714 = *v712++;
                        if ((double)v714 == (double)a4) {
                          double v715 = 0.0;
                        }
                        else {
                          double v715 = 1.0;
                        }
                        *v713++ = v715;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    double v172 = (unint64_t *)*((void *)a2 + 2);
                    double v173 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v174 = *v172++;
                      if ((double)v174 == (double)a4) {
                        double v175 = 0.0;
                      }
                      else {
                        double v175 = 1.0;
                      }
                      *v173++ = v175;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v834 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v835 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v836 = *v834;
                        v834 += 8;
                        *v835++ = v836 != (int)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unsigned int v294 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v295 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v296 = *v294;
                      v294 += 8;
                      *v295++ = v296 != (int)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v837 = (uint64_t *)*((void *)a2 + 2);
                      v838 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v839 = *v837++;
                        *v838++ = v839 != (unint64_t)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unsigned int v297 = (uint64_t *)*((void *)a2 + 2);
                    double v298 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v299 = *v297++;
                      *v298++ = v299 != (unint64_t)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v600 = (unint64_t *)*((void *)a2 + 2);
                      v601 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v602 = *v600++;
                        if (*(double *)&a4 == (double)v602) {
                          double v603 = 0.0;
                        }
                        else {
                          double v603 = 1.0;
                        }
                        *v601++ = v603;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    uint64_t v60 = (unint64_t *)*((void *)a2 + 2);
                    int v61 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v62 = *v60++;
                      if (*(double *)&a4 == (double)v62) {
                        double v63 = 0.0;
                      }
                      else {
                        double v63 = 1.0;
                      }
                      *v61++ = v63;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v14)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v900 = (double *)*((void *)a2 + 2);
                      unint64_t v901 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v902 = *v900++;
                        *v901++ = (int)v902 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    double v360 = (double *)*((void *)a2 + 2);
                    v361 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v362 = *v360++;
                      *v361++ = (int)v362 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v903 = (double *)*((void *)a2 + 2);
                      v904 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v905 = *v903++;
                        *v904++ = a4 != (unint64_t)v905;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unint64_t v363 = (double *)*((void *)a2 + 2);
                    unint64_t v364 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v365 = *v363++;
                      *v364++ = a4 != (unint64_t)v365;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v644 = (double *)*((void *)a2 + 2);
                      double v645 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v646 = *v644++;
                        if (v646 == (double)a4) {
                          double v647 = 0.0;
                        }
                        else {
                          double v647 = 1.0;
                        }
                        *v645++ = v647;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    double v104 = (double *)*((void *)a2 + 2);
                    double v105 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v106 = *v104++;
                      if (v106 == (double)a4) {
                        double v107 = 0.0;
                      }
                      else {
                        double v107 = 1.0;
                      }
                      *v105++ = v107;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v906 = (double *)*((void *)a2 + 2);
                      unsigned int v907 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v908 = *v906++;
                        *v907++ = (int)v908 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unint64_t v366 = (double *)*((void *)a2 + 2);
                    double v367 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v368 = *v366++;
                      *v367++ = (int)v368 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v909 = (double *)*((void *)a2 + 2);
                      v910 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v911 = *v909++;
                        *v910++ = a4 != (unint64_t)v911;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unsigned int v369 = (double *)*((void *)a2 + 2);
                    unsigned int v370 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v371 = *v369++;
                      *v370++ = a4 != (unint64_t)v371;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v648 = (double *)*((void *)a2 + 2);
                      v649 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v650 = *v648++;
                        if (v650 == (double)a4) {
                          double v651 = 0.0;
                        }
                        else {
                          double v651 = 1.0;
                        }
                        *v649++ = v651;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    unint64_t v108 = (double *)*((void *)a2 + 2);
                    unint64_t v109 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v110 = *v108++;
                      if (v110 == (double)a4) {
                        double v111 = 0.0;
                      }
                      else {
                        double v111 = 1.0;
                      }
                      *v109++ = v111;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v786 = (double *)*((void *)a2 + 2);
                      int v787 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v788 = *v786++;
                        *v787++ = (int)v788 != (int)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    double v246 = (double *)*((void *)a2 + 2);
                    unint64_t v247 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v248 = *v246++;
                      *v247++ = (int)v248 != (int)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      int v789 = (double *)*((void *)a2 + 2);
                      v790 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v791 = *v789++;
                        *v790++ = *(uint64_t *)&v791 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    double v249 = (double *)*((void *)a2 + 2);
                    unint64_t v250 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v251 = *v249++;
                      *v250++ = *(uint64_t *)&v251 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      double v568 = (double *)*((void *)a2 + 2);
                      v569 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v570 = *v568++;
                        if (v570 == *(double *)&a4) {
                          double v571 = 0.0;
                        }
                        else {
                          double v571 = 1.0;
                        }
                        *v569++ = v571;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    uint64_t v16 = (double *)*((void *)a2 + 2);
                    int v17 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v18 = *v16++;
                      if (v18 == *(double *)&a4) {
                        double v19 = 0.0;
                      }
                      else {
                        double v19 = 1.0;
                      }
                      *v17++ = v19;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 2:
      unint64_t result = 0;
      if (a2 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v20 = *((void *)a2 + 1);
        if (v20 != *((void *)a5 + 1)) {
          return 0;
        }
        int v21 = *a2;
        int v22 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1008 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1009 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1010 = *v1008++;
                        *v1009++ = v1010 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v468 = (unsigned __int8 *)*((void *)a2 + 2);
                    v469 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v470 = *v468++;
                      *v469++ = v470 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v1011 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v1012 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1013 = *v1011++;
                        *v1012++ = a4 > (unint64_t)v1013;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    int v471 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v472 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v473 = *v471++;
                      *v472++ = a4 > (unint64_t)v473;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v716 = (unsigned __int8 *)*((void *)a2 + 2);
                      v717 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v718 = *v716++;
                        if (a4 <= v718) {
                          double v719 = 0.0;
                        }
                        else {
                          double v719 = 1.0;
                        }
                        *v717++ = v719;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    unint64_t v176 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v177 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v178 = *v176++;
                      if (a4 <= v178) {
                        double v179 = 0.0;
                      }
                      else {
                        double v179 = 1.0;
                      }
                      *v177++ = v179;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1014 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1015 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1016 = *v1014++;
                        *v1015++ = v1016 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v474 = (unsigned __int8 *)*((void *)a2 + 2);
                    v475 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v476 = *v474++;
                      *v475++ = v476 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unint64_t v1017 = (unsigned __int8 *)*((void *)a2 + 2);
                      unint64_t v1018 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1019 = *v1017++;
                        *v1018++ = a4 > v1019;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    unsigned int v477 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v478 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v479 = *v477++;
                      *v478++ = a4 > v479;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v720 = (unsigned __int8 *)*((void *)a2 + 2);
                      v721 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v722 = *v720++;
                        if ((double)v722 >= (double)a4) {
                          double v723 = 0.0;
                        }
                        else {
                          double v723 = 1.0;
                        }
                        *v721++ = v723;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v180 = (unsigned __int8 *)*((void *)a2 + 2);
                    int v181 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v182 = *v180++;
                      if ((double)v182 >= (double)a4) {
                        double v183 = 0.0;
                      }
                      else {
                        double v183 = 1.0;
                      }
                      *v181++ = v183;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v840 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v841 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v842 = *v840++;
                        *v841++ = v842 < (int)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v300 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v301 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v302 = *v300++;
                      *v301++ = v302 < (int)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v843 = (unsigned __int8 *)*((void *)a2 + 2);
                      v844 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v845 = *v843++;
                        *v844++ = v845 < (unint64_t)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v303 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v304 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v305 = *v303++;
                      *v304++ = v305 < (unint64_t)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v604 = (unsigned __int8 *)*((void *)a2 + 2);
                      v605 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v606 = *v604++;
                        if (*(double *)&a4 <= (double)v606) {
                          double v607 = 0.0;
                        }
                        else {
                          double v607 = 1.0;
                        }
                        *v605++ = v607;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    char v64 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v65 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v66 = *v64++;
                      if (*(double *)&a4 <= (double)v66) {
                        double v67 = 0.0;
                      }
                      else {
                        double v67 = 1.0;
                      }
                      *v65++ = v67;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
          }
        }
        else if (v21 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1020 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1021 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1022 = *v1020;
                        v1020 += 8;
                        *v1021++ = v1022 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v480 = (unsigned __int8 *)*((void *)a2 + 2);
                    v481 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v482 = *v480;
                      v480 += 8;
                      *v481++ = v482 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v1023 = (unint64_t *)*((void *)a2 + 2);
                      double v1024 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1025 = *v1023++;
                        *v1024++ = v1025 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    int v483 = (unint64_t *)*((void *)a2 + 2);
                    double v484 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v485 = *v483++;
                      *v484++ = v485 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v724 = (unint64_t *)*((void *)a2 + 2);
                      unint64_t v725 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v726 = *v724++;
                        if ((double)v726 >= (double)a4) {
                          double v727 = 0.0;
                        }
                        else {
                          double v727 = 1.0;
                        }
                        *v725++ = v727;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v184 = (unint64_t *)*((void *)a2 + 2);
                    double v185 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v186 = *v184++;
                      if ((double)v186 >= (double)a4) {
                        double v187 = 0.0;
                      }
                      else {
                        double v187 = 1.0;
                      }
                      *v185++ = v187;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1026 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1027 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1028 = *v1026;
                        v1026 += 8;
                        *v1027++ = v1028 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v486 = (unsigned __int8 *)*((void *)a2 + 2);
                    v487 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v488 = *v486;
                      v486 += 8;
                      *v487++ = v488 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v1029 = (unint64_t *)*((void *)a2 + 2);
                      double v1030 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1031 = *v1029++;
                        *v1030++ = v1031 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    uint64_t v489 = (unint64_t *)*((void *)a2 + 2);
                    double v490 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v491 = *v489++;
                      *v490++ = v491 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v728 = (unint64_t *)*((void *)a2 + 2);
                      double v729 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v730 = *v728++;
                        if ((double)v730 >= (double)a4) {
                          double v731 = 0.0;
                        }
                        else {
                          double v731 = 1.0;
                        }
                        *v729++ = v731;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v188 = (unint64_t *)*((void *)a2 + 2);
                    int v189 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v190 = *v188++;
                      if ((double)v190 >= (double)a4) {
                        double v191 = 0.0;
                      }
                      else {
                        double v191 = 1.0;
                      }
                      *v189++ = v191;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v846 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v847 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v848 = *v846;
                        v846 += 8;
                        *v847++ = v848 < (int)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v306 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v307 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v308 = *v306;
                      v306 += 8;
                      *v307++ = v308 < (int)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v849 = (unint64_t *)*((void *)a2 + 2);
                      v850 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v851 = *v849++;
                        *v850++ = v851 < (unint64_t)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v309 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v310 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v311 = *v309++;
                      *v310++ = v311 < (unint64_t)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unint64_t v608 = (unint64_t *)*((void *)a2 + 2);
                      unint64_t v609 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v610 = *v608++;
                        if (*(double *)&a4 <= (double)v610) {
                          double v611 = 0.0;
                        }
                        else {
                          double v611 = 1.0;
                        }
                        *v609++ = v611;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v68 = (unint64_t *)*((void *)a2 + 2);
                    double v69 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v70 = *v68++;
                      if (*(double *)&a4 <= (double)v70) {
                        double v71 = 0.0;
                      }
                      else {
                        double v71 = 1.0;
                      }
                      *v69++ = v71;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v21)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unint64_t v912 = (double *)*((void *)a2 + 2);
                      v913 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v914 = *v912++;
                        *v913++ = (int)v914 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    unsigned int v372 = (double *)*((void *)a2 + 2);
                    unsigned int v373 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v374 = *v372++;
                      *v373++ = (int)v374 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v915 = (double *)*((void *)a2 + 2);
                      unsigned int v916 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v917 = *v915++;
                        *v916++ = a4 > (unint64_t)v917;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v375 = (double *)*((void *)a2 + 2);
                    unint64_t v376 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v377 = *v375++;
                      *v376++ = a4 > (unint64_t)v377;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      uint64_t v652 = (double *)*((void *)a2 + 2);
                      v653 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v654 = *v652++;
                        if (v654 >= (double)a4) {
                          double v655 = 0.0;
                        }
                        else {
                          double v655 = 1.0;
                        }
                        *v653++ = v655;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v112 = (double *)*((void *)a2 + 2);
                    unsigned int v113 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v114 = *v112++;
                      if (v114 >= (double)a4) {
                        double v115 = 0.0;
                      }
                      else {
                        double v115 = 1.0;
                      }
                      *v113++ = v115;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v918 = (double *)*((void *)a2 + 2);
                      v919 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v920 = *v918++;
                        *v919++ = (int)v920 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    unsigned int v378 = (double *)*((void *)a2 + 2);
                    double v379 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v380 = *v378++;
                      *v379++ = (int)v380 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v921 = (double *)*((void *)a2 + 2);
                      unint64_t v922 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v923 = *v921++;
                        *v922++ = a4 > (unint64_t)v923;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v381 = (double *)*((void *)a2 + 2);
                    v382 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v383 = *v381++;
                      *v382++ = a4 > (unint64_t)v383;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v656 = (double *)*((void *)a2 + 2);
                      unsigned int v657 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v658 = *v656++;
                        if (v658 >= (double)a4) {
                          double v659 = 0.0;
                        }
                        else {
                          double v659 = 1.0;
                        }
                        *v657++ = v659;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    unsigned int v116 = (double *)*((void *)a2 + 2);
                    double v117 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v118 = *v116++;
                      if (v118 >= (double)a4) {
                        double v119 = 0.0;
                      }
                      else {
                        double v119 = 1.0;
                      }
                      *v117++ = v119;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v792 = (double *)*((void *)a2 + 2);
                      int v793 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v794 = *v792++;
                        *v793++ = (int)v794 < (int)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v252 = (double *)*((void *)a2 + 2);
                    unsigned int v253 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v254 = *v252++;
                      *v253++ = (int)v254 < (int)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      int v795 = (double *)*((void *)a2 + 2);
                      v796 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v797 = *v795++;
                        *v796++ = (unint64_t)v797 < (unint64_t)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v255 = (double *)*((void *)a2 + 2);
                    unint64_t v256 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v257 = *v255++;
                      *v256++ = (unint64_t)v257 < (unint64_t)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unint64_t v572 = (double *)*((void *)a2 + 2);
                      unsigned int v573 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v574 = *v572++;
                        if (v574 >= *(double *)&a4) {
                          double v575 = 0.0;
                        }
                        else {
                          double v575 = 1.0;
                        }
                        *v573++ = v575;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    double v23 = (double *)*((void *)a2 + 2);
                    double v24 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v25 = *v23++;
                      if (v25 >= *(double *)&a4) {
                        double v26 = 0.0;
                      }
                      else {
                        double v26 = 1.0;
                      }
                      *v24++ = v26;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 3:
      unint64_t result = 0;
      if (a2 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v27 = *((void *)a2 + 1);
        if (v27 != *((void *)a5 + 1)) {
          return 0;
        }
        int v28 = *a2;
        int v29 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1032 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1033 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1034 = *v1032++;
                        *v1033++ = v1034 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v492 = (unsigned __int8 *)*((void *)a2 + 2);
                    v493 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v494 = *v492++;
                      *v493++ = v494 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1035 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1036 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1037 = *v1035++;
                        *v1036++ = a4 < (unint64_t)v1037;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    int v495 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v496 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v497 = *v495++;
                      *v496++ = a4 < (unint64_t)v497;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v732 = (unsigned __int8 *)*((void *)a2 + 2);
                      v733 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v734 = *v732++;
                        if (a4 >= v734) {
                          double v735 = 0.0;
                        }
                        else {
                          double v735 = 1.0;
                        }
                        *v733++ = v735;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    unint64_t v192 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v193 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v194 = *v192++;
                      if (a4 >= v194) {
                        double v195 = 0.0;
                      }
                      else {
                        double v195 = 1.0;
                      }
                      *v193++ = v195;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1038 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1039 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1040 = *v1038++;
                        *v1039++ = v1040 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v498 = (unsigned __int8 *)*((void *)a2 + 2);
                    v499 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v500 = *v498++;
                      *v499++ = v500 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1041 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1042 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1043 = *v1041++;
                        *v1042++ = a4 < v1043;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    unsigned int v501 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v502 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v503 = *v501++;
                      *v502++ = a4 < v503;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unint64_t v736 = (unsigned __int8 *)*((void *)a2 + 2);
                      v737 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v738 = *v736++;
                        if ((double)v738 <= (double)a4) {
                          double v739 = 0.0;
                        }
                        else {
                          double v739 = 1.0;
                        }
                        *v737++ = v739;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    char v196 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v197 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v198 = *v196++;
                      if ((double)v198 <= (double)a4) {
                        double v199 = 0.0;
                      }
                      else {
                        double v199 = 1.0;
                      }
                      *v197++ = v199;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unint64_t v852 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v853 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v854 = *v852++;
                        *v853++ = v854 > (int)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    unint64_t v312 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v313 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v314 = *v312++;
                      *v313++ = v314 > (int)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v855 = (unsigned __int8 *)*((void *)a2 + 2);
                      v856 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v857 = *v855++;
                        *v856++ = v857 > (unint64_t)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    double v315 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v316 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v317 = *v315++;
                      *v316++ = v317 > (unint64_t)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v612 = (unsigned __int8 *)*((void *)a2 + 2);
                      v613 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v614 = *v612++;
                        if (*(double *)&a4 >= (double)v614) {
                          double v615 = 0.0;
                        }
                        else {
                          double v615 = 1.0;
                        }
                        *v613++ = v615;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    double v72 = (unsigned __int8 *)*((void *)a2 + 2);
                    int v73 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v74 = *v72++;
                      if (*(double *)&a4 >= (double)v74) {
                        double v75 = 0.0;
                      }
                      else {
                        double v75 = 1.0;
                      }
                      *v73++ = v75;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        else if (v28 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1044 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1045 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1046 = *v1044;
                        v1044 += 8;
                        *v1045++ = v1046 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v504 = (unsigned __int8 *)*((void *)a2 + 2);
                    v505 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v506 = *v504;
                      v504 += 8;
                      *v505++ = v506 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1047 = (unint64_t *)*((void *)a2 + 2);
                      v1048 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1049 = *v1047++;
                        *v1048++ = v1049 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    int v507 = (unint64_t *)*((void *)a2 + 2);
                    double v508 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v509 = *v507++;
                      *v508++ = v509 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      int v740 = (unint64_t *)*((void *)a2 + 2);
                      int v741 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v742 = *v740++;
                        if ((double)v742 <= (double)a4) {
                          double v743 = 0.0;
                        }
                        else {
                          double v743 = 1.0;
                        }
                        *v741++ = v743;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    uint64_t v200 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v201 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v202 = *v200++;
                      if ((double)v202 <= (double)a4) {
                        double v203 = 0.0;
                      }
                      else {
                        double v203 = 1.0;
                      }
                      *v201++ = v203;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1050 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1051 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1052 = *v1050;
                        v1050 += 8;
                        *v1051++ = v1052 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v510 = (unsigned __int8 *)*((void *)a2 + 2);
                    v511 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v512 = *v510;
                      v510 += 8;
                      *v511++ = v512 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1053 = (unint64_t *)*((void *)a2 + 2);
                      v1054 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1055 = *v1053++;
                        *v1054++ = v1055 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    uint64_t v513 = (unint64_t *)*((void *)a2 + 2);
                    double v514 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v515 = *v513++;
                      *v514++ = v515 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v744 = (unint64_t *)*((void *)a2 + 2);
                      v745 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v746 = *v744++;
                        if ((double)v746 <= (double)a4) {
                          double v747 = 0.0;
                        }
                        else {
                          double v747 = 1.0;
                        }
                        *v745++ = v747;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    double v204 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v205 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v206 = *v204++;
                      if ((double)v206 <= (double)a4) {
                        double v207 = 0.0;
                      }
                      else {
                        double v207 = 1.0;
                      }
                      *v205++ = v207;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unsigned int v858 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v859 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v860 = *v858;
                        v858 += 8;
                        *v859++ = v860 > (int)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    unsigned int v318 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v319 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v320 = *v318;
                      v318 += 8;
                      *v319++ = v320 > (int)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v861 = (unint64_t *)*((void *)a2 + 2);
                      v862 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v863 = *v861++;
                        *v862++ = v863 > (unint64_t)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    double v321 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v322 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v323 = *v321++;
                      *v322++ = v323 > (unint64_t)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v616 = (unint64_t *)*((void *)a2 + 2);
                      v617 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v618 = *v616++;
                        if (*(double *)&a4 >= (double)v618) {
                          double v619 = 0.0;
                        }
                        else {
                          double v619 = 1.0;
                        }
                        *v617++ = v619;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    double v76 = (unint64_t *)*((void *)a2 + 2);
                    double v77 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v78 = *v76++;
                      if (*(double *)&a4 >= (double)v78) {
                        double v79 = 0.0;
                      }
                      else {
                        double v79 = 1.0;
                      }
                      *v77++ = v79;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v28)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unint64_t v924 = (double *)*((void *)a2 + 2);
                      v925 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v926 = *v924++;
                        *v925++ = (int)v926 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v384 = (double *)*((void *)a2 + 2);
                    unint64_t v385 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v386 = *v384++;
                      *v385++ = (int)v386 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v927 = (double *)*((void *)a2 + 2);
                      unsigned int v928 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v929 = *v927++;
                        *v928++ = a4 < (unint64_t)v929;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    double v387 = (double *)*((void *)a2 + 2);
                    v388 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v389 = *v387++;
                      *v388++ = a4 < (unint64_t)v389;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v660 = (double *)*((void *)a2 + 2);
                      double v661 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v662 = *v660++;
                        if (v662 <= (double)a4) {
                          double v663 = 0.0;
                        }
                        else {
                          double v663 = 1.0;
                        }
                        *v661++ = v663;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    double v120 = (double *)*((void *)a2 + 2);
                    double v121 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v122 = *v120++;
                      if (v122 <= (double)a4) {
                        double v123 = 0.0;
                      }
                      else {
                        double v123 = 1.0;
                      }
                      *v121++ = v123;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unsigned int v930 = (double *)*((void *)a2 + 2);
                      v931 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v932 = *v930++;
                        *v931++ = (int)v932 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v390 = (double *)*((void *)a2 + 2);
                    unint64_t v391 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v392 = *v390++;
                      *v391++ = (int)v392 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v933 = (double *)*((void *)a2 + 2);
                      unsigned int v934 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v935 = *v933++;
                        *v934++ = a4 < (unint64_t)v935;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    unint64_t v393 = (double *)*((void *)a2 + 2);
                    double v394 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v395 = *v393++;
                      *v394++ = a4 < (unint64_t)v395;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v664 = (double *)*((void *)a2 + 2);
                      v665 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v666 = *v664++;
                        if (v666 <= (double)a4) {
                          double v667 = 0.0;
                        }
                        else {
                          double v667 = 1.0;
                        }
                        *v665++ = v667;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    unint64_t v124 = (double *)*((void *)a2 + 2);
                    double v125 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v126 = *v124++;
                      if (v126 <= (double)a4) {
                        double v127 = 0.0;
                      }
                      else {
                        double v127 = 1.0;
                      }
                      *v125++ = v127;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v798 = (double *)*((void *)a2 + 2);
                      int v799 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v800 = *v798++;
                        *v799++ = (int)v800 > (int)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    unint64_t v258 = (double *)*((void *)a2 + 2);
                    double v259 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v260 = *v258++;
                      *v259++ = (int)v260 > (int)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      int v801 = (double *)*((void *)a2 + 2);
                      v802 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v803 = *v801++;
                        *v802++ = (unint64_t)v803 > (unint64_t)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    double v261 = (double *)*((void *)a2 + 2);
                    unsigned int v262 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v263 = *v261++;
                      *v262++ = (unint64_t)v263 > (unint64_t)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v576 = (double *)*((void *)a2 + 2);
                      v577 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v578 = *v576++;
                        if (v578 <= *(double *)&a4) {
                          double v579 = 0.0;
                        }
                        else {
                          double v579 = 1.0;
                        }
                        *v577++ = v579;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    int v30 = (double *)*((void *)a2 + 2);
                    double v31 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v32 = *v30++;
                      if (v32 <= *(double *)&a4) {
                        double v33 = 0.0;
                      }
                      else {
                        double v33 = 1.0;
                      }
                      *v31++ = v33;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 4:
      unint64_t result = 0;
      if (a2 && a5)
      {
        if (*((unsigned char *)a5 + 32)) {
          return 0;
        }
        uint64_t v34 = *((void *)a2 + 1);
        if (v34 != *((void *)a5 + 1)) {
          return 0;
        }
        int v35 = *a2;
        int v36 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1056 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1057 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1058 = *v1056++;
                        *v1057++ = v1058 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v516 = (unsigned __int8 *)*((void *)a2 + 2);
                    v517 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v518 = *v516++;
                      *v517++ = v518 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v1059 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1060 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1061 = *v1059++;
                        *v1060++ = a4 >= (unint64_t)v1061;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unsigned int v519 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v520 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v521 = *v519++;
                      *v520++ = a4 >= (unint64_t)v521;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      int v748 = (unsigned __int8 *)*((void *)a2 + 2);
                      v749 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v750 = *v748++;
                        if (a4 < v750) {
                          double v751 = 0.0;
                        }
                        else {
                          double v751 = 1.0;
                        }
                        *v749++ = v751;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unint64_t v208 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v209 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v210 = *v208++;
                      if (a4 < v210) {
                        double v211 = 0.0;
                      }
                      else {
                        double v211 = 1.0;
                      }
                      *v209++ = v211;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1062 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1063 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1064 = *v1062++;
                        *v1063++ = v1064 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v522 = (unsigned __int8 *)*((void *)a2 + 2);
                    v523 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v524 = *v522++;
                      *v523++ = v524 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v1065 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1066 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1067 = *v1065++;
                        *v1066++ = a4 >= v1067;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unsigned int v525 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v526 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v527 = *v525++;
                      *v526++ = a4 >= v527;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      int v752 = (unsigned __int8 *)*((void *)a2 + 2);
                      int v753 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v754 = *v752++;
                        if ((double)v754 > (double)a4) {
                          double v755 = 0.0;
                        }
                        else {
                          double v755 = 1.0;
                        }
                        *v753++ = v755;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    double v212 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v213 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v214 = *v212++;
                      if ((double)v214 > (double)a4) {
                        double v215 = 0.0;
                      }
                      else {
                        double v215 = 1.0;
                      }
                      *v213++ = v215;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unint64_t v864 = (unsigned __int8 *)*((void *)a2 + 2);
                      unint64_t v865 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v866 = *v864++;
                        *v865++ = v866 <= (int)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unsigned int v324 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v325 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v326 = *v324++;
                      *v325++ = v326 <= (int)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v867 = (unsigned __int8 *)*((void *)a2 + 2);
                      v868 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v869 = *v867++;
                        *v868++ = v869 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    double v327 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v328 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v329 = *v327++;
                      *v328++ = v329 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unint64_t v620 = (unsigned __int8 *)*((void *)a2 + 2);
                      v621 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v622 = *v620++;
                        if (*(double *)&a4 < (double)v622) {
                          double v623 = 0.0;
                        }
                        else {
                          double v623 = 1.0;
                        }
                        *v621++ = v623;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    double v80 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v81 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v82 = *v80++;
                      if (*(double *)&a4 < (double)v82) {
                        double v83 = 0.0;
                      }
                      else {
                        double v83 = 1.0;
                      }
                      *v81++ = v83;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
          }
        }
        else if (v35 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1068 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1069 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1070 = *v1068;
                        v1068 += 8;
                        *v1069++ = v1070 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v528 = (unsigned __int8 *)*((void *)a2 + 2);
                    v529 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v530 = *v528;
                      v528 += 8;
                      *v529++ = v530 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unint64_t v1071 = (unint64_t *)*((void *)a2 + 2);
                      unint64_t v1072 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1073 = *v1071++;
                        *v1072++ = v1073 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unsigned int v531 = (unint64_t *)*((void *)a2 + 2);
                    double v532 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v533 = *v531++;
                      *v532++ = v533 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v756 = (unint64_t *)*((void *)a2 + 2);
                      v757 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v758 = *v756++;
                        if ((double)v758 > (double)a4) {
                          double v759 = 0.0;
                        }
                        else {
                          double v759 = 1.0;
                        }
                        *v757++ = v759;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    double v216 = (unint64_t *)*((void *)a2 + 2);
                    double v217 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v218 = *v216++;
                      if ((double)v218 > (double)a4) {
                        double v219 = 0.0;
                      }
                      else {
                        double v219 = 1.0;
                      }
                      *v217++ = v219;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v1074 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1075 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1076 = *v1074;
                        v1074 += 8;
                        *v1075++ = v1076 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v534 = (unsigned __int8 *)*((void *)a2 + 2);
                    v535 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v536 = *v534;
                      v534 += 8;
                      *v535++ = v536 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1077 = (unint64_t *)*((void *)a2 + 2);
                      unsigned int v1078 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1079 = *v1077++;
                        *v1078++ = v1079 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unint64_t v537 = (unint64_t *)*((void *)a2 + 2);
                    double v538 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v539 = *v537++;
                      *v538++ = v539 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      uint64_t v760 = (unint64_t *)*((void *)a2 + 2);
                      v761 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v762 = *v760++;
                        if ((double)v762 > (double)a4) {
                          double v763 = 0.0;
                        }
                        else {
                          double v763 = 1.0;
                        }
                        *v761++ = v763;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    char v220 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v221 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v222 = *v220++;
                      if ((double)v222 > (double)a4) {
                        double v223 = 0.0;
                      }
                      else {
                        double v223 = 1.0;
                      }
                      *v221++ = v223;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unsigned int v870 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v871 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v872 = *v870;
                        v870 += 8;
                        *v871++ = v872 <= (int)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    char v330 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v331 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v332 = *v330;
                      v330 += 8;
                      *v331++ = v332 <= (int)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v873 = (unint64_t *)*((void *)a2 + 2);
                      v874 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v875 = *v873++;
                        *v874++ = v875 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    double v333 = (unint64_t *)*((void *)a2 + 2);
                    v334 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v335 = *v333++;
                      *v334++ = v335 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v624 = (unint64_t *)*((void *)a2 + 2);
                      int v625 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v626 = *v624++;
                        if (*(double *)&a4 < (double)v626) {
                          double v627 = 0.0;
                        }
                        else {
                          double v627 = 1.0;
                        }
                        *v625++ = v627;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    double v84 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v85 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v86 = *v84++;
                      if (*(double *)&a4 < (double)v86) {
                        double v87 = 0.0;
                      }
                      else {
                        double v87 = 1.0;
                      }
                      *v85++ = v87;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v35)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unsigned int v936 = (double *)*((void *)a2 + 2);
                      v937 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v938 = *v936++;
                        *v937++ = (int)v938 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v396 = (double *)*((void *)a2 + 2);
                    v397 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v398 = *v396++;
                      *v397++ = (int)v398 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v939 = (double *)*((void *)a2 + 2);
                      unsigned int v940 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v941 = *v939++;
                        *v940++ = a4 >= (unint64_t)v941;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    int v399 = (double *)*((void *)a2 + 2);
                    double v400 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v401 = *v399++;
                      *v400++ = a4 >= (unint64_t)v401;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v668 = (double *)*((void *)a2 + 2);
                      v669 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v670 = *v668++;
                        if (v670 > (double)a4) {
                          double v671 = 0.0;
                        }
                        else {
                          double v671 = 1.0;
                        }
                        *v669++ = v671;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unint64_t v128 = (double *)*((void *)a2 + 2);
                    double v129 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v130 = *v128++;
                      if (v130 > (double)a4) {
                        double v131 = 0.0;
                      }
                      else {
                        double v131 = 1.0;
                      }
                      *v129++ = v131;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unsigned int v942 = (double *)*((void *)a2 + 2);
                      v943 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v944 = *v942++;
                        *v943++ = (int)v944 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v402 = (double *)*((void *)a2 + 2);
                    v403 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v404 = *v402++;
                      *v403++ = (int)v404 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v945 = (double *)*((void *)a2 + 2);
                      unint64_t v946 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v947 = *v945++;
                        *v946++ = a4 >= (unint64_t)v947;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unint64_t v405 = (double *)*((void *)a2 + 2);
                    double v406 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v407 = *v405++;
                      *v406++ = a4 >= (unint64_t)v407;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unint64_t v672 = (double *)*((void *)a2 + 2);
                      unint64_t v673 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v674 = *v672++;
                        if (v674 > (double)a4) {
                          double v675 = 0.0;
                        }
                        else {
                          double v675 = 1.0;
                        }
                        *v673++ = v675;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    double v132 = (double *)*((void *)a2 + 2);
                    double v133 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v134 = *v132++;
                      if (v134 > (double)a4) {
                        double v135 = 0.0;
                      }
                      else {
                        double v135 = 1.0;
                      }
                      *v133++ = v135;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v804 = (double *)*((void *)a2 + 2);
                      uint64_t v805 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v806 = *v804++;
                        *v805++ = (int)v806 <= (int)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    int v264 = (double *)*((void *)a2 + 2);
                    int v265 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v266 = *v264++;
                      *v265++ = (int)v266 <= (int)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      uint64_t v807 = (double *)*((void *)a2 + 2);
                      v808 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v809 = *v807++;
                        *v808++ = (unint64_t)v809 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    unint64_t v267 = (double *)*((void *)a2 + 2);
                    double v268 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v269 = *v267++;
                      *v268++ = (unint64_t)v269 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v580 = (double *)*((void *)a2 + 2);
                      v581 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v582 = *v580++;
                        if (v582 > *(double *)&a4) {
                          double v583 = 0.0;
                        }
                        else {
                          double v583 = 1.0;
                        }
                        *v581++ = v583;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    double v37 = (double *)*((void *)a2 + 2);
                    uint64_t v38 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v39 = *v37++;
                      if (v39 > *(double *)&a4) {
                        double v40 = 0.0;
                      }
                      else {
                        double v40 = 1.0;
                      }
                      *v38++ = v40;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 5:
      unint64_t result = 0;
      if (!a2 || !a5) {
        return result;
      }
      if (*((unsigned char *)a5 + 32)) {
        return 0;
      }
      uint64_t v41 = *((void *)a2 + 1);
      if (v41 != *((void *)a5 + 1)) {
        return 0;
      }
      int v42 = *a2;
      int v43 = *a5;
      if (*a2 == 2)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    double v1080 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v1081 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1082 = *v1080++;
                      *v1081++ = v1082 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v540 = (unsigned __int8 *)*((void *)a2 + 2);
                  v541 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v542 = *v540++;
                    *v541++ = v542 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1083 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1084 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1085 = *v1083++;
                      *v1084++ = a4 <= (unint64_t)v1085;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unsigned int v543 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v544 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v545 = *v543++;
                    *v544++ = a4 <= (unint64_t)v545;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    int v764 = (unsigned __int8 *)*((void *)a2 + 2);
                    int v765 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v766 = *v764++;
                      if (a4 > v766) {
                        double v767 = 0.0;
                      }
                      else {
                        double v767 = 1.0;
                      }
                      *v765++ = v767;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  double v224 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v225 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v226 = *v224++;
                    if (a4 > v226) {
                      double v227 = 0.0;
                    }
                    else {
                      double v227 = 1.0;
                    }
                    *v225++ = v227;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unint64_t v1086 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v1087 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1088 = *v1086++;
                      *v1087++ = v1088 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v546 = (unsigned __int8 *)*((void *)a2 + 2);
                  v547 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v548 = *v546++;
                    *v547++ = v548 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1089 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1090 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1091 = *v1089++;
                      *v1090++ = a4 <= v1091;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unsigned int v549 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v550 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v551 = *v549++;
                    *v550++ = a4 <= v551;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v768 = (unsigned __int8 *)*((void *)a2 + 2);
                    v769 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v770 = *v768++;
                      if ((double)v770 < (double)a4) {
                        double v771 = 0.0;
                      }
                      else {
                        double v771 = 1.0;
                      }
                      *v769++ = v771;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unint64_t v228 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v229 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v230 = *v228++;
                    if ((double)v230 < (double)a4) {
                      double v231 = 0.0;
                    }
                    else {
                      double v231 = 1.0;
                    }
                    *v229++ = v231;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unint64_t v876 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v877 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v878 = *v876++;
                      *v877++ = v878 >= (int)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  int v336 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v337 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v338 = *v336++;
                    *v337++ = v338 >= (int)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v879 = (unsigned __int8 *)*((void *)a2 + 2);
                    v880 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v881 = *v879++;
                      *v880++ = v881 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unint64_t v339 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v340 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v341 = *v339++;
                    *v340++ = v341 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v628 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v629 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v630 = *v628++;
                      if (*(double *)&a4 > (double)v630) {
                        double v631 = 0.0;
                      }
                      else {
                        double v631 = 1.0;
                      }
                      *v629++ = v631;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unsigned int v88 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v89 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v90 = *v88++;
                    if (*(double *)&a4 > (double)v90) {
                      double v91 = 0.0;
                    }
                    else {
                      double v91 = 1.0;
                    }
                    *v89++ = v91;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
        }
      }
      else if (v42 == 1)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unsigned int v1092 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v1093 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1094 = *v1092;
                      v1092 += 8;
                      *v1093++ = v1094 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v552 = (unsigned __int8 *)*((void *)a2 + 2);
                  v553 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v554 = *v552;
                    v552 += 8;
                    *v553++ = v554 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    double v1095 = (unint64_t *)*((void *)a2 + 2);
                    v1096 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v1097 = *v1095++;
                      *v1096++ = v1097 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unsigned int v555 = (unint64_t *)*((void *)a2 + 2);
                  double v556 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v557 = *v555++;
                    *v556++ = v557 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v772 = (unint64_t *)*((void *)a2 + 2);
                    v773 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v774 = *v772++;
                      if ((double)v774 < (double)a4) {
                        double v775 = 0.0;
                      }
                      else {
                        double v775 = 1.0;
                      }
                      *v773++ = v775;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  double v232 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v233 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v234 = *v232++;
                    if ((double)v234 < (double)a4) {
                      double v235 = 0.0;
                    }
                    else {
                      double v235 = 1.0;
                    }
                    *v233++ = v235;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1098 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v1099 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1100 = *v1098;
                      v1098 += 8;
                      *v1099++ = v1100 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v558 = (unsigned __int8 *)*((void *)a2 + 2);
                  v559 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v560 = *v558;
                    v558 += 8;
                    *v559++ = v560 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    double v1101 = (unint64_t *)*((void *)a2 + 2);
                    double v1102 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v1103 = *v1101++;
                      *v1102++ = v1103 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unint64_t v561 = (unint64_t *)*((void *)a2 + 2);
                  double v562 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v563 = *v561++;
                    *v562++ = v563 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    int v776 = (unint64_t *)*((void *)a2 + 2);
                    int v777 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v778 = *v776++;
                      if ((double)v778 < (double)a4) {
                        double v779 = 0.0;
                      }
                      else {
                        double v779 = 1.0;
                      }
                      *v777++ = v779;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  int v236 = (unint64_t *)*((void *)a2 + 2);
                  int v237 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v238 = *v236++;
                    if ((double)v238 < (double)a4) {
                      double v239 = 0.0;
                    }
                    else {
                      double v239 = 1.0;
                    }
                    *v237++ = v239;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unsigned int v882 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v883 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v884 = *v882;
                      v882 += 8;
                      *v883++ = v884 >= (int)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unsigned int v342 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v343 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v344 = *v342;
                    v342 += 8;
                    *v343++ = v344 >= (int)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v885 = (unint64_t *)*((void *)a2 + 2);
                    v886 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v887 = *v885++;
                      *v886++ = v887 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unsigned int v345 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v346 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v347 = *v345++;
                    *v346++ = v347 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v632 = (unint64_t *)*((void *)a2 + 2);
                    v633 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v634 = *v632++;
                      if (*(double *)&a4 > (double)v634) {
                        double v635 = 0.0;
                      }
                      else {
                        double v635 = 1.0;
                      }
                      *v633++ = v635;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  uint64_t v92 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v93 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v94 = *v92++;
                    if (*(double *)&a4 > (double)v94) {
                      double v95 = 0.0;
                    }
                    else {
                      double v95 = 1.0;
                    }
                    *v93++ = v95;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
        }
      }
      else if (!v42)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unint64_t v948 = (double *)*((void *)a2 + 2);
                    v949 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v950 = *v948++;
                      *v949++ = (int)v950 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v408 = (double *)*((void *)a2 + 2);
                  v409 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    double v410 = *v408++;
                    *v409++ = (int)v410 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v951 = (double *)*((void *)a2 + 2);
                    unsigned int v952 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v953 = *v951++;
                      *v952++ = a4 <= (unint64_t)v953;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  int v411 = (double *)*((void *)a2 + 2);
                  double v412 = (void *)*((void *)a5 + 2);
                  do
                  {
                    double v413 = *v411++;
                    *v412++ = a4 <= (unint64_t)v413;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v676 = (double *)*((void *)a2 + 2);
                    double v677 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v678 = *v676++;
                      if (v678 < (double)a4) {
                        double v679 = 0.0;
                      }
                      else {
                        double v679 = 1.0;
                      }
                      *v677++ = v679;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  double v136 = (double *)*((void *)a2 + 2);
                  unint64_t v137 = (double *)*((void *)a5 + 2);
                  do
                  {
                    double v138 = *v136++;
                    if (v138 < (double)a4) {
                      double v139 = 0.0;
                    }
                    else {
                      double v139 = 1.0;
                    }
                    *v137++ = v139;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unsigned int v954 = (double *)*((void *)a2 + 2);
                    v955 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v956 = *v954++;
                      *v955++ = (int)v956 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v414 = (double *)*((void *)a2 + 2);
                  v415 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    double v416 = *v414++;
                    *v415++ = (int)v416 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v957 = (double *)*((void *)a2 + 2);
                    unint64_t v958 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v959 = *v957++;
                      *v958++ = a4 <= (unint64_t)v959;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unint64_t v417 = (double *)*((void *)a2 + 2);
                  double v418 = (void *)*((void *)a5 + 2);
                  do
                  {
                    double v419 = *v417++;
                    *v418++ = a4 <= (unint64_t)v419;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v680 = (double *)*((void *)a2 + 2);
                    v681 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v682 = *v680++;
                      if (v682 < (double)a4) {
                        double v683 = 0.0;
                      }
                      else {
                        double v683 = 1.0;
                      }
                      *v681++ = v683;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6)
                {
                  if (v41)
                  {
                    double v140 = (double *)*((void *)a2 + 2);
                    double v141 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v142 = *v140++;
                      if (v142 < (double)a4) {
                        double v143 = 0.0;
                      }
                      else {
                        double v143 = 1.0;
                      }
                      *v141++ = v143;
                      --v41;
                    }
                    while (v41);
                  }
                  return a5;
                }
                break;
            }
            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v810 = (double *)*((void *)a2 + 2);
                    int v811 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v812 = *v810++;
                      *v811++ = (int)v812 >= (int)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unsigned int v270 = (double *)*((void *)a2 + 2);
                  double v271 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    double v272 = *v270++;
                    *v271++ = (int)v272 >= (int)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    int v813 = (double *)*((void *)a2 + 2);
                    v814 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v815 = *v813++;
                      *v814++ = (unint64_t)v815 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  double v273 = (double *)*((void *)a2 + 2);
                  uint64_t v274 = (void *)*((void *)a5 + 2);
                  do
                  {
                    double v275 = *v273++;
                    *v274++ = (unint64_t)v275 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unint64_t v584 = (double *)*((void *)a2 + 2);
                    unint64_t v585 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v586 = *v584++;
                      if (v586 < *(double *)&a4) {
                        double v587 = 0.0;
                      }
                      else {
                        double v587 = 1.0;
                      }
                      *v585++ = v587;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  unint64_t v44 = (double *)*((void *)a2 + 2);
                  double v45 = (double *)*((void *)a5 + 2);
                  do
                  {
                    double v46 = *v44++;
                    if (v46 < *(double *)&a4) {
                      double v47 = 0.0;
                    }
                    else {
                      double v47 = 1.0;
                    }
                    *v45++ = v47;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            return a5;
        }
      }
      return a5;
    default:
      return result;
  }
}

uint64_t agxps_timeseries_select_ttt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (!*(unsigned char *)(a4 + 32)
      && (uint64_t v7 = *(void *)(a1 + 8), v7 == *(void *)(a2 + 8))
      && v7 == *(void *)(a3 + 8)
      && v7 == *(void *)(a4 + 8))
    {
      sub_27208((int *)a1, a2, a3, (int *)a4, *(_DWORD *)a2, *(_DWORD *)a3, a5);
      return a4;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

int *sub_27208(int *a1, uint64_t a2, uint64_t a3, int *a4, int a5, int a6, double a7)
{
  if (a4)
  {
    uint64_t v7 = *((void *)a4 + 1);
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    int v8 = 0;
    if (a4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v7 = 0;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  int v8 = *a1;
  if (a4)
  {
LABEL_4:
    int v9 = *a4;
    goto LABEL_8;
  }
LABEL_7:
  int v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v738 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v738 = 0;
                  }
                  if (a2) {
                    int v741 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    int v741 = 0;
                  }
                  if (a3) {
                    v744 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    v744 = 0;
                  }
                  if (a4) {
                    double v747 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v747 = 0;
                  }
                  for (; v7; --v7)
                  {
                    if (*v738++) {
                      int v752 = v741;
                    }
                    else {
                      int v752 = v744;
                    }
                    *v747++ = *v752;
                    ++v744;
                    ++v741;
                  }
                  break;
                case 1:
                  if (a1) {
                    double v739 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v739 = 0;
                  }
                  if (a2) {
                    unint64_t v742 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v742 = 0;
                  }
                  if (a3) {
                    v745 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    v745 = 0;
                  }
                  if (a4) {
                    int v748 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    int v748 = 0;
                  }
                  for (; v7; --v7)
                  {
                    if (*v739++) {
                      unsigned int v754 = v742;
                    }
                    else {
                      unsigned int v754 = v745;
                    }
                    *v748++ = *v754;
                    ++v745;
                    ++v742;
                  }
                  break;
                case 0:
                  v737 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  int v740 = a2 ? *(unsigned char **)(a2 + 16) : 0;
                  double v743 = a3 ? *(unsigned char **)(a3 + 16) : 0;
                  for (uint64_t i = a4 ? (double *)*((void *)a4 + 2) : 0; v7; --v7)
                  {
                    if (*v737++) {
                      unsigned int v750 = v740;
                    }
                    else {
                      unsigned int v750 = v743;
                    }
                    LOBYTE(a7) = *v750;
                    a7 = (double)*(unint64_t *)&a7;
                    *i++ = a7;
                    ++v743;
                    ++v740;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v689 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v689 = 0;
                  }
                  if (a2) {
                    double v695 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v695 = 0;
                  }
                  if (a3) {
                    v701 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    v701 = 0;
                  }
                  if (a4) {
                    double v707 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v707 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v734 = v7;
                    do
                    {
                      if (*v689++) {
                        unint64_t v736 = v695;
                      }
                      else {
                        unint64_t v736 = v701;
                      }
                      *v707++ = *v736;
                      v701 += 8;
                      ++v695;
                      --v734;
                    }
                    while (v734);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v690 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v690 = 0;
                  }
                  if (a2) {
                    v696 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    v696 = 0;
                  }
                  if (a3) {
                    int v702 = *(uint64_t **)(a3 + 16);
                  }
                  else {
                    int v702 = 0;
                  }
                  if (a4) {
                    double v708 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    double v708 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v756 = *v690++;
                    int v755 = v756;
                    unsigned int v758 = *v696++;
                    uint64_t v757 = v758;
                    uint64_t v760 = *v702++;
                    uint64_t v759 = v760;
                    if (v755) {
                      uint64_t v761 = v757;
                    }
                    else {
                      uint64_t v761 = v759;
                    }
                    *v708++ = v761;
                  }
                  break;
                case 0:
                  int v686 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  double v692 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  unint64_t v698 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  for (j = a4 ? (double *)*((void *)a4 + 2) : 0; v7; --v7)
                  {
                    int v716 = *v686++;
                    int v715 = v716;
                    unsigned int v717 = *v692++;
                    double v718 = (double)v717;
                    unint64_t v719 = *v698++;
                    double v720 = (double)v719;
                    if (!v715) {
                      double v718 = v720;
                    }
                    *j++ = v718;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v687 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v687 = 0;
                  }
                  if (a2) {
                    unint64_t v693 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    unint64_t v693 = 0;
                  }
                  if (a3) {
                    double v699 = *(double **)(a3 + 16);
                  }
                  else {
                    double v699 = 0;
                  }
                  if (a4) {
                    v705 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    v705 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v722 = *v687++;
                    int v721 = v722;
                    LOBYTE(v722) = *v693++;
                    char v723 = v722;
                    double v724 = *v699++;
                    int v725 = (int)v724;
                    if (v721) {
                      char v726 = v723;
                    }
                    else {
                      char v726 = v725;
                    }
                    *v705++ = v726;
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v688 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v688 = 0;
                  }
                  if (a2) {
                    unint64_t v694 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v694 = 0;
                  }
                  if (a3) {
                    v700 = *(double **)(a3 + 16);
                  }
                  else {
                    v700 = 0;
                  }
                  if (a4) {
                    unsigned int v706 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v706 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v728 = *v688++;
                    int v727 = v728;
                    unsigned int v730 = *v694++;
                    unint64_t v729 = v730;
                    double v731 = *v700++;
                    unint64_t v732 = (unint64_t)v731;
                    if (v727) {
                      unint64_t v733 = v729;
                    }
                    else {
                      unint64_t v733 = v732;
                    }
                    *v706++ = v733;
                  }
                  break;
                case 0:
                  v685 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  double v691 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v697 = a3 ? *(double **)(a3 + 16) : 0;
                  for (k = a4 ? (double *)*((void *)a4 + 2) : 0; v7; --v7)
                  {
                    int v710 = *v685++;
                    int v709 = v710;
                    unsigned int v711 = *v691++;
                    double v712 = (double)v711;
                    double v713 = *v697++;
                    double v714 = v713;
                    if (!v709) {
                      double v712 = v714;
                    }
                    *k++ = v712;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v654 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v654 = 0;
                  }
                  if (a2) {
                    unsigned int v657 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    unsigned int v657 = 0;
                  }
                  if (a3) {
                    v660 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    v660 = 0;
                  }
                  if (a4) {
                    double v663 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v663 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v672 = v7;
                    do
                    {
                      if (*v654++) {
                        double v674 = v657;
                      }
                      else {
                        double v674 = v660;
                      }
                      *v663++ = *v674;
                      ++v660;
                      v657 += 8;
                      --v672;
                    }
                    while (v672);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v655 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v655 = 0;
                  }
                  if (a2) {
                    double v658 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v658 = 0;
                  }
                  if (a3) {
                    double v661 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v661 = 0;
                  }
                  if (a4) {
                    v664 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    v664 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v675 = v7;
                    do
                    {
                      int v677 = *v655++;
                      int v676 = v677;
                      uint64_t v679 = *v658++;
                      uint64_t v678 = v679;
                      LODWORD(v679) = *v661++;
                      uint64_t v680 = v679;
                      if (v676) {
                        uint64_t v681 = v678;
                      }
                      else {
                        uint64_t v681 = v680;
                      }
                      *v664++ = v681;
                      --v675;
                    }
                    while (v675);
                  }
                  break;
                case 0:
                  v653 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  double v656 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  double v659 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  double v662 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v665 = v7;
                    do
                    {
                      int v667 = *v653++;
                      int v666 = v667;
                      unint64_t v668 = *v656++;
                      unint64_t v669 = v668;
                      LODWORD(v668) = *v659++;
                      double v670 = (double)v668;
                      double v671 = (double)v669;
                      if (!v666) {
                        double v671 = v670;
                      }
                      *v662++ = v671;
                      --v665;
                    }
                    while (v665);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v524 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v524 = 0;
                  }
                  if (a2) {
                    unsigned int v536 = *(void **)(a2 + 16);
                  }
                  else {
                    unsigned int v536 = 0;
                  }
                  if (a3) {
                    unsigned int v548 = *(void **)(a3 + 16);
                  }
                  else {
                    unsigned int v548 = 0;
                  }
                  if (a4) {
                    unsigned int v560 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v560 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v650 = v7;
                    do
                    {
                      if (*v524++) {
                        uint64_t v652 = v536;
                      }
                      else {
                        uint64_t v652 = v548;
                      }
                      *v560++ = *v652;
                      ++v548;
                      ++v536;
                      --v650;
                    }
                    while (v650);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v525 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v525 = 0;
                  }
                  if (a2) {
                    unint64_t v537 = *(void **)(a2 + 16);
                  }
                  else {
                    unint64_t v537 = 0;
                  }
                  if (a3) {
                    unsigned int v549 = *(void **)(a3 + 16);
                  }
                  else {
                    unsigned int v549 = 0;
                  }
                  if (a4) {
                    unint64_t v561 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v561 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v682 = v7;
                    do
                    {
                      if (*v525++) {
                        v684 = v537;
                      }
                      else {
                        v684 = v549;
                      }
                      *v561++ = *v684;
                      ++v549;
                      ++v537;
                      --v682;
                    }
                    while (v682);
                  }
                  break;
                case 0:
                  v517 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  v529 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v541 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v553 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v580 = v7;
                    do
                    {
                      if (*v517++) {
                        double v582 = v529;
                      }
                      else {
                        double v582 = v541;
                      }
                      *v553++ = (double)*v582;
                      ++v541;
                      ++v529;
                      --v580;
                    }
                    while (v580);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v520 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v520 = 0;
                  }
                  if (a2) {
                    double v532 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v532 = 0;
                  }
                  if (a3) {
                    double v544 = *(double **)(a3 + 16);
                  }
                  else {
                    double v544 = 0;
                  }
                  if (a4) {
                    double v556 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v556 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v589 = v7;
                    do
                    {
                      int v591 = *v520++;
                      int v590 = v591;
                      LOBYTE(v591) = *v532;
                      v532 += 8;
                      char v592 = v591;
                      double v593 = *v544++;
                      int v594 = (int)v593;
                      if (v590) {
                        char v595 = v592;
                      }
                      else {
                        char v595 = v594;
                      }
                      *v556++ = v595;
                      --v589;
                    }
                    while (v589);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v521 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v521 = 0;
                  }
                  if (a2) {
                    unint64_t v533 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    unint64_t v533 = 0;
                  }
                  if (a3) {
                    unsigned int v545 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v545 = 0;
                  }
                  if (a4) {
                    unint64_t v557 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v557 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v596 = v7;
                    do
                    {
                      int v598 = *v521++;
                      int v597 = v598;
                      unint64_t v600 = *v533++;
                      unint64_t v599 = v600;
                      double v601 = *v545++;
                      unint64_t v602 = (unint64_t)v601;
                      if (v597) {
                        unint64_t v603 = v599;
                      }
                      else {
                        unint64_t v603 = v602;
                      }
                      *v557++ = v603;
                      --v596;
                    }
                    while (v596);
                  }
                  break;
                case 0:
                  unint64_t v515 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unsigned int v527 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  unint64_t v539 = a3 ? *(double **)(a3 + 16) : 0;
                  unsigned int v551 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v565 = v7;
                    do
                    {
                      int v567 = *v515++;
                      int v566 = v567;
                      unint64_t v568 = *v527++;
                      unint64_t v569 = v568;
                      double v570 = *v539++;
                      double v571 = v570;
                      double v572 = (double)v569;
                      if (!v566) {
                        double v572 = v571;
                      }
                      *v551++ = v572;
                      --v565;
                    }
                    while (v565);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v612 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v612 = 0;
                  }
                  if (a2) {
                    double v615 = *(double **)(a2 + 16);
                  }
                  else {
                    double v615 = 0;
                  }
                  if (a3) {
                    unint64_t v618 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    unint64_t v618 = 0;
                  }
                  if (a4) {
                    v621 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    v621 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v630 = *v612++;
                    int v629 = v630;
                    double v631 = *v615++;
                    int v632 = (int)v631;
                    LOBYTE(v631) = *v618++;
                    char v633 = LOBYTE(v631);
                    if (v629) {
                      char v634 = v632;
                    }
                    else {
                      char v634 = v633;
                    }
                    *v621++ = v634;
                  }
                  break;
                case 1:
                  if (a1) {
                    v613 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v613 = 0;
                  }
                  if (a2) {
                    v616 = *(double **)(a2 + 16);
                  }
                  else {
                    v616 = 0;
                  }
                  if (a3) {
                    double v619 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v619 = 0;
                  }
                  if (a4) {
                    unsigned int v622 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v622 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v635 = v7;
                    do
                    {
                      int v637 = *v613++;
                      int v636 = v637;
                      double v638 = *v616++;
                      unint64_t v639 = (unint64_t)v638;
                      LODWORD(v638) = *v619++;
                      unint64_t v640 = LODWORD(v638);
                      if (v636) {
                        unint64_t v641 = v639;
                      }
                      else {
                        unint64_t v641 = v640;
                      }
                      *v622++ = v641;
                      --v635;
                    }
                    while (v635);
                  }
                  break;
                case 0:
                  double v611 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unsigned int v614 = a2 ? *(double **)(a2 + 16) : 0;
                  v617 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  unint64_t v620 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v623 = v7;
                    do
                    {
                      int v625 = *v611++;
                      int v624 = v625;
                      double v626 = *v614++;
                      double v627 = v626;
                      LODWORD(v626) = *v617++;
                      double v628 = (double)LODWORD(v626);
                      if (!v624) {
                        double v627 = v628;
                      }
                      *v620++ = v627;
                      --v623;
                    }
                    while (v623);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v522 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v522 = 0;
                  }
                  if (a2) {
                    v534 = *(double **)(a2 + 16);
                  }
                  else {
                    v534 = 0;
                  }
                  if (a3) {
                    v546 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    v546 = 0;
                  }
                  if (a4) {
                    v558 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    v558 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v604 = v7;
                    do
                    {
                      int v606 = *v522++;
                      int v605 = v606;
                      double v607 = *v534++;
                      int v608 = (int)v607;
                      LOBYTE(v607) = *v546;
                      v546 += 8;
                      char v609 = LOBYTE(v607);
                      if (v605) {
                        char v610 = v608;
                      }
                      else {
                        char v610 = v609;
                      }
                      *v558++ = v610;
                      --v604;
                    }
                    while (v604);
                  }
                  break;
                case 1:
                  if (a1) {
                    v523 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v523 = 0;
                  }
                  if (a2) {
                    v535 = *(double **)(a2 + 16);
                  }
                  else {
                    v535 = 0;
                  }
                  if (a3) {
                    v547 = *(unint64_t **)(a3 + 16);
                  }
                  else {
                    v547 = 0;
                  }
                  if (a4) {
                    v559 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    v559 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v642 = v7;
                    do
                    {
                      int v644 = *v523++;
                      int v643 = v644;
                      double v645 = *v535++;
                      unint64_t v646 = (unint64_t)v645;
                      unint64_t v648 = *v547++;
                      unint64_t v647 = v648;
                      if (v643) {
                        unint64_t v649 = v646;
                      }
                      else {
                        unint64_t v649 = v647;
                      }
                      *v559++ = v649;
                      --v642;
                    }
                    while (v642);
                  }
                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  v528 = a2 ? *(double **)(a2 + 16) : 0;
                  v540 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v552 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v573 = v7;
                    do
                    {
                      int v575 = *v516++;
                      int v574 = v575;
                      double v576 = *v528++;
                      double v577 = v576;
                      unint64_t v578 = *v540++;
                      double v579 = (double)v578;
                      if (!v574) {
                        double v577 = v579;
                      }
                      *v552++ = v577;
                      --v573;
                    }
                    while (v573);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v518 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v518 = 0;
                  }
                  if (a2) {
                    unsigned int v530 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v530 = 0;
                  }
                  if (a3) {
                    unsigned int v542 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v542 = 0;
                  }
                  if (a4) {
                    unsigned int v554 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v554 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v583 = v7;
                    do
                    {
                      if (*v518++) {
                        unint64_t v585 = v530;
                      }
                      else {
                        unint64_t v585 = v542;
                      }
                      *v554++ = (int)*v585;
                      ++v542;
                      ++v530;
                      --v583;
                    }
                    while (v583);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v519 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v519 = 0;
                  }
                  if (a2) {
                    unsigned int v531 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v531 = 0;
                  }
                  if (a3) {
                    unsigned int v543 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v543 = 0;
                  }
                  if (a4) {
                    unsigned int v555 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v555 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v586 = v7;
                    do
                    {
                      if (*v519++) {
                        v588 = v531;
                      }
                      else {
                        v588 = v543;
                      }
                      *v555++ = (unint64_t)*v588;
                      ++v543;
                      ++v531;
                      --v586;
                    }
                    while (v586);
                  }
                  break;
                case 0:
                  double v514 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  double v526 = a2 ? *(void **)(a2 + 16) : 0;
                  double v538 = a3 ? *(void **)(a3 + 16) : 0;
                  double v550 = a4 ? (void *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v562 = v7;
                    do
                    {
                      if (*v514++) {
                        v564 = v526;
                      }
                      else {
                        v564 = v538;
                      }
                      *v550++ = *v564;
                      ++v538;
                      ++v526;
                      --v562;
                    }
                    while (v562);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v487 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v487 = 0;
                  }
                  if (a2) {
                    double v490 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v490 = 0;
                  }
                  if (a3) {
                    v493 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    v493 = 0;
                  }
                  if (a4) {
                    double v496 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v496 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v501 = v7;
                    do
                    {
                      int v502 = *v487;
                      v487 += 8;
                      if (v502) {
                        unsigned int v503 = v490;
                      }
                      else {
                        unsigned int v503 = v493;
                      }
                      *v496++ = *v503;
                      ++v493;
                      ++v490;
                      --v501;
                    }
                    while (v501);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v488 = (void *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v488 = 0;
                  }
                  if (a2) {
                    unint64_t v491 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v491 = 0;
                  }
                  if (a3) {
                    unsigned int v494 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    unsigned int v494 = 0;
                  }
                  if (a4) {
                    unsigned int v497 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v497 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v504 = v7;
                    do
                    {
                      if (*v488++) {
                        unsigned int v506 = v491;
                      }
                      else {
                        unsigned int v506 = v494;
                      }
                      *v497++ = *v506;
                      ++v494;
                      ++v491;
                      --v504;
                    }
                    while (v504);
                  }
                  break;
                case 0:
                  v486 = a1 ? (void *)*((void *)a1 + 2) : 0;
                  uint64_t v489 = a2 ? *(unsigned char **)(a2 + 16) : 0;
                  v492 = a3 ? *(unsigned char **)(a3 + 16) : 0;
                  int v495 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v498 = v7;
                    do
                    {
                      if (*v486++) {
                        unsigned int v500 = v489;
                      }
                      else {
                        unsigned int v500 = v492;
                      }
                      LOBYTE(a7) = *v500;
                      a7 = (double)*(unint64_t *)&a7;
                      *v495++ = a7;
                      ++v492;
                      ++v489;
                      --v498;
                    }
                    while (v498);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v437 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v437 = 0;
                  }
                  if (a2) {
                    uint64_t v443 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    uint64_t v443 = 0;
                  }
                  if (a3) {
                    int v449 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    int v449 = 0;
                  }
                  if (a4) {
                    int v455 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    int v455 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v483 = v7;
                    do
                    {
                      int v484 = *v437;
                      v437 += 8;
                      if (v484) {
                        unint64_t v485 = v443;
                      }
                      else {
                        unint64_t v485 = v449;
                      }
                      *v455++ = *v485;
                      v449 += 8;
                      ++v443;
                      --v483;
                    }
                    while (v483);
                  }
                  break;
                case 1:
                  if (a1) {
                    v438 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    v438 = 0;
                  }
                  if (a2) {
                    v444 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    v444 = 0;
                  }
                  if (a3) {
                    v450 = *(uint64_t **)(a3 + 16);
                  }
                  else {
                    v450 = 0;
                  }
                  if (a4) {
                    v456 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    v456 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v507 = v7;
                    do
                    {
                      uint64_t v509 = *v438++;
                      uint64_t v508 = v509;
                      LODWORD(v509) = *v444++;
                      uint64_t v510 = v509;
                      uint64_t v512 = *v450++;
                      uint64_t v511 = v512;
                      if (v508) {
                        uint64_t v513 = v510;
                      }
                      else {
                        uint64_t v513 = v511;
                      }
                      *v456++ = v513;
                      --v507;
                    }
                    while (v507);
                  }
                  break;
                case 0:
                  int v434 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  int v440 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  int v446 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  int v452 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v463 = v7;
                    do
                    {
                      uint64_t v465 = *v434++;
                      uint64_t v464 = v465;
                      LODWORD(v465) = *v440++;
                      double v466 = (double)v465;
                      unint64_t v467 = *v446++;
                      double v468 = (double)v467;
                      if (!v464) {
                        double v466 = v468;
                      }
                      *v452++ = v466;
                      --v463;
                    }
                    while (v463);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v435 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v435 = 0;
                  }
                  if (a2) {
                    unint64_t v441 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    unint64_t v441 = 0;
                  }
                  if (a3) {
                    unsigned int v447 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v447 = 0;
                  }
                  if (a4) {
                    unint64_t v453 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v453 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v469 = v7;
                    do
                    {
                      unsigned int v471 = *v435;
                      v435 += 8;
                      uint64_t v470 = v471;
                      LOBYTE(v471) = *v441++;
                      char v472 = v471;
                      double v473 = *v447++;
                      int v474 = (int)v473;
                      if (v470) {
                        char v475 = v472;
                      }
                      else {
                        char v475 = v474;
                      }
                      *v453++ = v475;
                      --v469;
                    }
                    while (v469);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v436 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v436 = 0;
                  }
                  if (a2) {
                    double v442 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    double v442 = 0;
                  }
                  if (a3) {
                    double v448 = *(double **)(a3 + 16);
                  }
                  else {
                    double v448 = 0;
                  }
                  if (a4) {
                    double v454 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v454 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v476 = v7;
                    do
                    {
                      uint64_t v478 = *v436++;
                      uint64_t v477 = v478;
                      LODWORD(v478) = *v442++;
                      unint64_t v479 = v478;
                      double v480 = *v448++;
                      unint64_t v481 = (unint64_t)v480;
                      if (v477) {
                        unint64_t v482 = v479;
                      }
                      else {
                        unint64_t v482 = v481;
                      }
                      *v454++ = v482;
                      --v476;
                    }
                    while (v476);
                  }
                  break;
                case 0:
                  v433 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  v439 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v445 = a3 ? *(double **)(a3 + 16) : 0;
                  v451 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v457 = v7;
                    do
                    {
                      uint64_t v459 = *v433++;
                      uint64_t v458 = v459;
                      LODWORD(v459) = *v439++;
                      double v460 = (double)v459;
                      double v461 = *v445++;
                      double v462 = v461;
                      if (!v458) {
                        double v460 = v462;
                      }
                      *v451++ = v460;
                      --v457;
                    }
                    while (v457);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v241 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v241 = 0;
                  }
                  if (a2) {
                    unint64_t v256 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    unint64_t v256 = 0;
                  }
                  if (a3) {
                    double v268 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    double v268 = 0;
                  }
                  if (a4) {
                    char v280 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    char v280 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v423 = v7;
                    do
                    {
                      int v424 = *v241;
                      v241 += 8;
                      if (v424) {
                        int v425 = v256;
                      }
                      else {
                        int v425 = v268;
                      }
                      *v280++ = *v425;
                      ++v268;
                      v256 += 8;
                      --v423;
                    }
                    while (v423);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v242 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v242 = 0;
                  }
                  if (a2) {
                    double v257 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v257 = 0;
                  }
                  if (a3) {
                    double v269 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v269 = 0;
                  }
                  if (a4) {
                    int v281 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    int v281 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v426 = v7;
                    do
                    {
                      uint64_t v428 = *v242++;
                      uint64_t v427 = v428;
                      uint64_t v430 = *v257++;
                      uint64_t v429 = v430;
                      LODWORD(v430) = *v269++;
                      uint64_t v431 = v430;
                      if (v427) {
                        uint64_t v432 = v429;
                      }
                      else {
                        uint64_t v432 = v431;
                      }
                      *v281++ = v432;
                      --v426;
                    }
                    while (v426);
                  }
                  break;
                case 0:
                  unsigned int v240 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  double v255 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  unint64_t v267 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  double v279 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v416 = v7;
                    do
                    {
                      uint64_t v418 = *v240++;
                      uint64_t v417 = v418;
                      unint64_t v419 = *v255++;
                      unint64_t v420 = v419;
                      LODWORD(v419) = *v267++;
                      double v421 = (double)v419;
                      double v422 = (double)v420;
                      if (!v417) {
                        double v422 = v421;
                      }
                      *v279++ = v422;
                      --v416;
                    }
                    while (v416);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v32 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v32 = 0;
                  }
                  if (a2) {
                    double v56 = *(void **)(a2 + 16);
                  }
                  else {
                    double v56 = 0;
                  }
                  if (a3) {
                    double v80 = *(void **)(a3 + 16);
                  }
                  else {
                    double v80 = 0;
                  }
                  if (a4) {
                    double v104 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v104 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v237 = v7;
                    do
                    {
                      int v238 = *v32;
                      v32 += 8;
                      if (v238) {
                        double v239 = v56;
                      }
                      else {
                        double v239 = v80;
                      }
                      *v104++ = *v239;
                      ++v80;
                      ++v56;
                      --v237;
                    }
                    while (v237);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v33 = (void *)*((void *)a1 + 2);
                  }
                  else {
                    double v33 = 0;
                  }
                  if (a2) {
                    double v57 = *(void **)(a2 + 16);
                  }
                  else {
                    double v57 = 0;
                  }
                  if (a3) {
                    unint64_t v81 = *(void **)(a3 + 16);
                  }
                  else {
                    unint64_t v81 = 0;
                  }
                  if (a4) {
                    double v105 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    double v105 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v243 = v7;
                    do
                    {
                      if (*v33++) {
                        double v245 = v57;
                      }
                      else {
                        double v245 = v81;
                      }
                      *v105++ = *v245;
                      ++v81;
                      ++v57;
                      --v243;
                    }
                    while (v243);
                  }
                  break;
                case 0:
                  int v17 = a1 ? (void *)*((void *)a1 + 2) : 0;
                  uint64_t v41 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  unsigned int v65 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  double v89 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v147 = v7;
                    do
                    {
                      if (*v17++) {
                        double v149 = v41;
                      }
                      else {
                        double v149 = v65;
                      }
                      *v89++ = (double)*v149;
                      ++v65;
                      ++v41;
                      --v147;
                    }
                    while (v147);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v24 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v24 = 0;
                  }
                  if (a2) {
                    double v48 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v48 = 0;
                  }
                  if (a3) {
                    double v72 = *(double **)(a3 + 16);
                  }
                  else {
                    double v72 = 0;
                  }
                  if (a4) {
                    unint64_t v96 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v96 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v177 = v7;
                    do
                    {
                      unsigned int v179 = *v24;
                      v24 += 8;
                      uint64_t v178 = v179;
                      LOBYTE(v179) = *v48;
                      v48 += 8;
                      char v180 = v179;
                      double v181 = *v72++;
                      int v182 = (int)v181;
                      if (v178) {
                        char v183 = v180;
                      }
                      else {
                        char v183 = v182;
                      }
                      *v96++ = v183;
                      --v177;
                    }
                    while (v177);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v25 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v25 = 0;
                  }
                  if (a2) {
                    uint64_t v49 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v49 = 0;
                  }
                  if (a3) {
                    int v73 = *(double **)(a3 + 16);
                  }
                  else {
                    int v73 = 0;
                  }
                  if (a4) {
                    double v97 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v97 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v184 = v7;
                    do
                    {
                      uint64_t v186 = *v25++;
                      uint64_t v185 = v186;
                      unint64_t v188 = *v49++;
                      unint64_t v187 = v188;
                      double v189 = *v73++;
                      unint64_t v190 = (unint64_t)v189;
                      if (v185) {
                        unint64_t v191 = v187;
                      }
                      else {
                        unint64_t v191 = v190;
                      }
                      *v97++ = v191;
                      --v184;
                    }
                    while (v184);
                  }
                  break;
                case 0:
                  uint64_t v13 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  double v37 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  int v61 = a3 ? *(double **)(a3 + 16) : 0;
                  unint64_t v85 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v121 = v7;
                    do
                    {
                      uint64_t v123 = *v13++;
                      uint64_t v122 = v123;
                      unint64_t v124 = *v37++;
                      unint64_t v125 = v124;
                      double v126 = *v61++;
                      double v127 = v126;
                      double v128 = (double)v125;
                      if (!v122) {
                        double v128 = v127;
                      }
                      *v85++ = v128;
                      --v121;
                    }
                    while (v121);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unint64_t v218 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v218 = 0;
                  }
                  if (a2) {
                    unint64_t v250 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v250 = 0;
                  }
                  if (a3) {
                    unsigned int v262 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    unsigned int v262 = 0;
                  }
                  if (a4) {
                    uint64_t v274 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    uint64_t v274 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v308 = v7;
                    do
                    {
                      unsigned int v310 = *v218;
                      v218 += 8;
                      uint64_t v309 = v310;
                      double v311 = *v250++;
                      int v312 = (int)v311;
                      LOBYTE(v311) = *v262++;
                      char v313 = LOBYTE(v311);
                      if (v309) {
                        char v314 = v312;
                      }
                      else {
                        char v314 = v313;
                      }
                      *v274++ = v314;
                      --v308;
                    }
                    while (v308);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v219 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v219 = 0;
                  }
                  if (a2) {
                    double v251 = *(double **)(a2 + 16);
                  }
                  else {
                    double v251 = 0;
                  }
                  if (a3) {
                    double v263 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v263 = 0;
                  }
                  if (a4) {
                    double v275 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v275 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v315 = v7;
                    do
                    {
                      uint64_t v317 = *v219++;
                      uint64_t v316 = v317;
                      double v318 = *v251++;
                      unint64_t v319 = (unint64_t)v318;
                      LODWORD(v318) = *v263++;
                      unint64_t v320 = LODWORD(v318);
                      if (v316) {
                        unint64_t v321 = v319;
                      }
                      else {
                        unint64_t v321 = v320;
                      }
                      *v275++ = v321;
                      --v315;
                    }
                    while (v315);
                  }
                  break;
                case 0:
                  double v217 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  double v249 = a2 ? *(double **)(a2 + 16) : 0;
                  double v261 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  double v273 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v302 = v7;
                    do
                    {
                      uint64_t v304 = *v217++;
                      uint64_t v303 = v304;
                      double v305 = *v249++;
                      double v306 = v305;
                      LODWORD(v305) = *v261++;
                      double v307 = (double)LODWORD(v305);
                      if (!v303) {
                        double v306 = v307;
                      }
                      *v273++ = v306;
                      --v302;
                    }
                    while (v302);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v28 = 0;
                  }
                  if (a2) {
                    int v52 = *(double **)(a2 + 16);
                  }
                  else {
                    int v52 = 0;
                  }
                  if (a3) {
                    double v76 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    double v76 = 0;
                  }
                  if (a4) {
                    unint64_t v100 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v100 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v210 = v7;
                    do
                    {
                      unsigned int v212 = *v28;
                      v28 += 8;
                      uint64_t v211 = v212;
                      double v213 = *v52++;
                      int v214 = (int)v213;
                      LOBYTE(v213) = *v76;
                      v76 += 8;
                      char v215 = LOBYTE(v213);
                      if (v211) {
                        char v216 = v214;
                      }
                      else {
                        char v216 = v215;
                      }
                      *v100++ = v216;
                      --v210;
                    }
                    while (v210);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v29 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v29 = 0;
                  }
                  if (a2) {
                    unint64_t v53 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v53 = 0;
                  }
                  if (a3) {
                    double v77 = *(unint64_t **)(a3 + 16);
                  }
                  else {
                    double v77 = 0;
                  }
                  if (a4) {
                    unsigned int v101 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v101 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v220 = v7;
                    do
                    {
                      uint64_t v222 = *v29++;
                      uint64_t v221 = v222;
                      double v223 = *v53++;
                      unint64_t v224 = (unint64_t)v223;
                      unint64_t v226 = *v77++;
                      unint64_t v225 = v226;
                      if (v221) {
                        unint64_t v227 = v224;
                      }
                      else {
                        unint64_t v227 = v225;
                      }
                      *v101++ = v227;
                      --v220;
                    }
                    while (v220);
                  }
                  break;
                case 0:
                  int v15 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  double v39 = a2 ? *(double **)(a2 + 16) : 0;
                  double v63 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  double v87 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v137 = v7;
                    do
                    {
                      uint64_t v139 = *v15++;
                      uint64_t v138 = v139;
                      double v140 = *v39++;
                      double v141 = v140;
                      unint64_t v142 = *v63++;
                      double v143 = (double)v142;
                      if (!v138) {
                        double v141 = v143;
                      }
                      *v87++ = v141;
                      --v137;
                    }
                    while (v137);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v20 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v20 = 0;
                  }
                  if (a2) {
                    unint64_t v44 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v44 = 0;
                  }
                  if (a3) {
                    double v68 = *(double **)(a3 + 16);
                  }
                  else {
                    double v68 = 0;
                  }
                  if (a4) {
                    uint64_t v92 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    uint64_t v92 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v156 = v7;
                    do
                    {
                      int v157 = *v20;
                      v20 += 8;
                      if (v157) {
                        unint64_t v158 = v44;
                      }
                      else {
                        unint64_t v158 = v68;
                      }
                      *v92++ = (int)*v158;
                      ++v68;
                      ++v44;
                      --v156;
                    }
                    while (v156);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v21 = (void *)*((void *)a1 + 2);
                  }
                  else {
                    int v21 = 0;
                  }
                  if (a2) {
                    double v45 = *(double **)(a2 + 16);
                  }
                  else {
                    double v45 = 0;
                  }
                  if (a3) {
                    double v69 = *(double **)(a3 + 16);
                  }
                  else {
                    double v69 = 0;
                  }
                  if (a4) {
                    unsigned int v93 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v93 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v159 = v7;
                    do
                    {
                      if (*v21++) {
                        unint64_t v161 = v45;
                      }
                      else {
                        unint64_t v161 = v69;
                      }
                      *v93++ = (unint64_t)*v161;
                      ++v69;
                      ++v45;
                      --v159;
                    }
                    while (v159);
                  }
                  break;
                case 0:
                  double v11 = a1 ? (void *)*((void *)a1 + 2) : 0;
                  int v35 = a2 ? *(void **)(a2 + 16) : 0;
                  double v59 = a3 ? *(void **)(a3 + 16) : 0;
                  double v83 = a4 ? (void *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v109 = v7;
                    do
                    {
                      if (*v11++) {
                        double v111 = v35;
                      }
                      else {
                        double v111 = v59;
                      }
                      *v83++ = *v111;
                      ++v59;
                      ++v35;
                      --v109;
                    }
                    while (v109);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 0:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v392 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v392 = 0;
                  }
                  if (a2) {
                    double v395 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v395 = 0;
                  }
                  if (a3) {
                    double v398 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    double v398 = 0;
                  }
                  if (a4) {
                    double v401 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v401 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v406 = *v392++;
                    if ((int)v406) {
                      double v407 = v395;
                    }
                    else {
                      double v407 = v398;
                    }
                    *v401++ = *v407;
                    ++v398;
                    ++v395;
                  }
                  break;
                case 1:
                  if (a1) {
                    unint64_t v393 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v393 = 0;
                  }
                  if (a2) {
                    v396 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    v396 = 0;
                  }
                  if (a3) {
                    int v399 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    int v399 = 0;
                  }
                  if (a4) {
                    v402 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    v402 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v408 = *v393++;
                    if ((unint64_t)v408) {
                      v409 = v396;
                    }
                    else {
                      v409 = v399;
                    }
                    *v402++ = *v409;
                    ++v399;
                    ++v396;
                  }
                  break;
                case 0:
                  unint64_t v391 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  double v394 = a2 ? *(unsigned char **)(a2 + 16) : 0;
                  v397 = a3 ? *(unsigned char **)(a3 + 16) : 0;
                  for (m = a4 ? (double *)*((void *)a4 + 2) : 0; v7; --v7)
                  {
                    double v403 = *v391++;
                    unint64_t v404 = *(void *)&v403;
                    if (v403 == 0.0) {
                      unint64_t v405 = v397;
                    }
                    else {
                      unint64_t v405 = v394;
                    }
                    LOBYTE(v404) = *v405;
                    *m++ = (double)v404;
                    ++v397;
                    ++v394;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v344 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v344 = 0;
                  }
                  if (a2) {
                    double v350 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v350 = 0;
                  }
                  if (a3) {
                    double v356 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    double v356 = 0;
                  }
                  if (a4) {
                    double v362 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v362 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v388 = v7;
                    do
                    {
                      double v389 = *v344++;
                      if ((int)v389) {
                        v390 = v350;
                      }
                      else {
                        v390 = v356;
                      }
                      *v362++ = *v390;
                      v356 += 8;
                      ++v350;
                      --v388;
                    }
                    while (v388);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v345 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v345 = 0;
                  }
                  if (a2) {
                    unsigned int v351 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unsigned int v351 = 0;
                  }
                  if (a3) {
                    unsigned int v357 = *(uint64_t **)(a3 + 16);
                  }
                  else {
                    unsigned int v357 = 0;
                  }
                  if (a4) {
                    unint64_t v363 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v363 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v410 = *v345++;
                    unint64_t v411 = (unint64_t)v410;
                    LODWORD(v410) = *v351++;
                    uint64_t v412 = LODWORD(v410);
                    uint64_t v414 = *v357++;
                    uint64_t v413 = v414;
                    if (v411) {
                      uint64_t v415 = v412;
                    }
                    else {
                      uint64_t v415 = v413;
                    }
                    *v363++ = v415;
                  }
                  break;
                case 0:
                  unsigned int v341 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  unint64_t v347 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  double v353 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  for (n = a4 ? (double *)*((void *)a4 + 2) : 0; v7; --v7)
                  {
                    double v370 = *v341++;
                    double v371 = v370;
                    LODWORD(v370) = *v347++;
                    double v372 = (double)LODWORD(v370);
                    unint64_t v373 = *v353++;
                    double v374 = (double)v373;
                    if (v371 == 0.0) {
                      double v375 = v374;
                    }
                    else {
                      double v375 = v372;
                    }
                    *n++ = v375;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v342 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v342 = 0;
                  }
                  if (a2) {
                    unsigned int v348 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    unsigned int v348 = 0;
                  }
                  if (a3) {
                    double v354 = *(double **)(a3 + 16);
                  }
                  else {
                    double v354 = 0;
                  }
                  if (a4) {
                    double v360 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v360 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v376 = *v342++;
                    int v377 = (int)v376;
                    LOBYTE(v376) = *v348++;
                    char v378 = LOBYTE(v376);
                    double v379 = *v354++;
                    int v380 = (int)v379;
                    if (v377) {
                      char v381 = v378;
                    }
                    else {
                      char v381 = v380;
                    }
                    *v360++ = v381;
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v343 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v343 = 0;
                  }
                  if (a2) {
                    unint64_t v349 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v349 = 0;
                  }
                  if (a3) {
                    unint64_t v355 = *(double **)(a3 + 16);
                  }
                  else {
                    unint64_t v355 = 0;
                  }
                  if (a4) {
                    v361 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    v361 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v382 = *v343++;
                    unint64_t v383 = (unint64_t)v382;
                    LODWORD(v382) = *v349++;
                    unint64_t v384 = LODWORD(v382);
                    double v385 = *v355++;
                    unint64_t v386 = (unint64_t)v385;
                    if (v383) {
                      unint64_t v387 = v384;
                    }
                    else {
                      unint64_t v387 = v386;
                    }
                    *v361++ = v387;
                  }
                  break;
                case 0:
                  double v340 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  unsigned int v346 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  double v352 = a3 ? *(double **)(a3 + 16) : 0;
                  for (iuint64_t i = a4 ? (double *)*((void *)a4 + 2) : 0; v7; --v7)
                  {
                    double v364 = *v340++;
                    double v365 = v364;
                    LODWORD(v364) = *v346++;
                    double v366 = (double)LODWORD(v364);
                    double v367 = *v352++;
                    double v368 = v367;
                    if (v365 == 0.0) {
                      double v369 = v368;
                    }
                    else {
                      double v369 = v366;
                    }
                    *ii++ = v369;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v232 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v232 = 0;
                  }
                  if (a2) {
                    unsigned int v253 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    unsigned int v253 = 0;
                  }
                  if (a3) {
                    int v265 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    int v265 = 0;
                  }
                  if (a4) {
                    unint64_t v277 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v277 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v330 = v7;
                    do
                    {
                      double v331 = *v232++;
                      if ((int)v331) {
                        unsigned int v332 = v253;
                      }
                      else {
                        unsigned int v332 = v265;
                      }
                      *v277++ = *v332;
                      ++v265;
                      v253 += 8;
                      --v330;
                    }
                    while (v330);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v233 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v233 = 0;
                  }
                  if (a2) {
                    double v254 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v254 = 0;
                  }
                  if (a3) {
                    double v266 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v266 = 0;
                  }
                  if (a4) {
                    int v278 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    int v278 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v333 = v7;
                    do
                    {
                      double v334 = *v233++;
                      unint64_t v335 = (unint64_t)v334;
                      uint64_t v337 = *v254++;
                      uint64_t v336 = v337;
                      LODWORD(v337) = *v266++;
                      uint64_t v338 = v337;
                      if (v335) {
                        uint64_t v339 = v336;
                      }
                      else {
                        uint64_t v339 = v338;
                      }
                      *v278++ = v339;
                      --v333;
                    }
                    while (v333);
                  }
                  break;
                case 0:
                  double v231 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  double v252 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  int v264 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  unsigned int v276 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v322 = v7;
                    do
                    {
                      double v323 = *v231++;
                      double v324 = v323;
                      unint64_t v325 = *v252++;
                      unint64_t v326 = v325;
                      LODWORD(v325) = *v264++;
                      double v327 = (double)v325;
                      double v328 = (double)v326;
                      if (v324 == 0.0) {
                        double v329 = v327;
                      }
                      else {
                        double v329 = v328;
                      }
                      *v276++ = v329;
                      --v322;
                    }
                    while (v322);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v30 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v30 = 0;
                  }
                  if (a2) {
                    unint64_t v54 = *(void **)(a2 + 16);
                  }
                  else {
                    unint64_t v54 = 0;
                  }
                  if (a3) {
                    unint64_t v78 = *(void **)(a3 + 16);
                  }
                  else {
                    unint64_t v78 = 0;
                  }
                  if (a4) {
                    double v102 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v102 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v228 = v7;
                    do
                    {
                      double v229 = *v30++;
                      if ((int)v229) {
                        unsigned int v230 = v54;
                      }
                      else {
                        unsigned int v230 = v78;
                      }
                      *v102++ = *v230;
                      ++v78;
                      ++v54;
                      --v228;
                    }
                    while (v228);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v31 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v31 = 0;
                  }
                  if (a2) {
                    double v55 = *(void **)(a2 + 16);
                  }
                  else {
                    double v55 = 0;
                  }
                  if (a3) {
                    double v79 = *(void **)(a3 + 16);
                  }
                  else {
                    double v79 = 0;
                  }
                  if (a4) {
                    double v103 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    double v103 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v234 = v7;
                    do
                    {
                      double v235 = *v31++;
                      if ((unint64_t)v235) {
                        int v236 = v55;
                      }
                      else {
                        int v236 = v79;
                      }
                      *v103++ = *v236;
                      ++v79;
                      ++v55;
                      --v234;
                    }
                    while (v234);
                  }
                  break;
                case 0:
                  uint64_t v16 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  double v40 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  char v64 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  unsigned int v88 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v144 = v7;
                    do
                    {
                      double v145 = *v16++;
                      if (v145 == 0.0) {
                        int v146 = v64;
                      }
                      else {
                        int v146 = v40;
                      }
                      *v88++ = (double)*v146;
                      ++v64;
                      ++v40;
                      --v144;
                    }
                    while (v144);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v22 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v22 = 0;
                  }
                  if (a2) {
                    double v46 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v46 = 0;
                  }
                  if (a3) {
                    unint64_t v70 = *(double **)(a3 + 16);
                  }
                  else {
                    unint64_t v70 = 0;
                  }
                  if (a4) {
                    unint64_t v94 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v94 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v162 = v7;
                    do
                    {
                      double v163 = *v22++;
                      int v164 = (int)v163;
                      LOBYTE(v163) = *v46;
                      v46 += 8;
                      char v165 = LOBYTE(v163);
                      double v166 = *v70++;
                      int v167 = (int)v166;
                      if (v164) {
                        char v168 = v165;
                      }
                      else {
                        char v168 = v167;
                      }
                      *v94++ = v168;
                      --v162;
                    }
                    while (v162);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v23 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v23 = 0;
                  }
                  if (a2) {
                    double v47 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    double v47 = 0;
                  }
                  if (a3) {
                    double v71 = *(double **)(a3 + 16);
                  }
                  else {
                    double v71 = 0;
                  }
                  if (a4) {
                    double v95 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v95 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v169 = v7;
                    do
                    {
                      double v170 = *v23++;
                      unint64_t v171 = (unint64_t)v170;
                      unint64_t v173 = *v47++;
                      unint64_t v172 = v173;
                      double v174 = *v71++;
                      unint64_t v175 = (unint64_t)v174;
                      if (v171) {
                        unint64_t v176 = v172;
                      }
                      else {
                        unint64_t v176 = v175;
                      }
                      *v95++ = v176;
                      --v169;
                    }
                    while (v169);
                  }
                  break;
                case 0:
                  double v12 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  int v36 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  uint64_t v60 = a3 ? *(double **)(a3 + 16) : 0;
                  double v84 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v112 = v7;
                    do
                    {
                      double v113 = *v12++;
                      double v114 = v113;
                      unint64_t v115 = *v36++;
                      unint64_t v116 = v115;
                      double v117 = *v60++;
                      double v118 = v117;
                      double v119 = (double)v116;
                      if (v114 == 0.0) {
                        double v120 = v118;
                      }
                      else {
                        double v120 = v119;
                      }
                      *v84++ = v120;
                      --v112;
                    }
                    while (v112);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v200 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v200 = 0;
                  }
                  if (a2) {
                    unint64_t v247 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v247 = 0;
                  }
                  if (a3) {
                    double v259 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    double v259 = 0;
                  }
                  if (a4) {
                    double v271 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v271 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v289 = *v200++;
                    int v290 = (int)v289;
                    double v291 = *v247++;
                    int v292 = (int)v291;
                    LOBYTE(v291) = *v259++;
                    char v293 = LOBYTE(v291);
                    if (v290) {
                      char v294 = v292;
                    }
                    else {
                      char v294 = v293;
                    }
                    *v271++ = v294;
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v201 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v201 = 0;
                  }
                  if (a2) {
                    double v248 = *(double **)(a2 + 16);
                  }
                  else {
                    double v248 = 0;
                  }
                  if (a3) {
                    double v260 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v260 = 0;
                  }
                  if (a4) {
                    double v272 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v272 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v295 = v7;
                    do
                    {
                      double v296 = *v201++;
                      unint64_t v297 = (unint64_t)v296;
                      double v298 = *v248++;
                      unint64_t v299 = (unint64_t)v298;
                      LODWORD(v298) = *v260++;
                      unint64_t v300 = LODWORD(v298);
                      if (v297) {
                        unint64_t v301 = v299;
                      }
                      else {
                        unint64_t v301 = v300;
                      }
                      *v272++ = v301;
                      --v295;
                    }
                    while (v295);
                  }
                  break;
                case 0:
                  double v199 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  double v246 = a2 ? *(double **)(a2 + 16) : 0;
                  unint64_t v258 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  unsigned int v270 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v282 = v7;
                    do
                    {
                      double v283 = *v199++;
                      double v284 = v283;
                      double v285 = *v246++;
                      double v286 = v285;
                      LODWORD(v285) = *v258++;
                      double v287 = (double)LODWORD(v285);
                      if (v284 == 0.0) {
                        double v288 = v287;
                      }
                      else {
                        double v288 = v286;
                      }
                      *v270++ = v288;
                      --v282;
                    }
                    while (v282);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v26 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v26 = 0;
                  }
                  if (a2) {
                    unsigned int v50 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v50 = 0;
                  }
                  if (a3) {
                    unsigned int v74 = *(unsigned char **)(a3 + 16);
                  }
                  else {
                    unsigned int v74 = 0;
                  }
                  if (a4) {
                    double v98 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    double v98 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v192 = v7;
                    do
                    {
                      double v193 = *v26++;
                      int v194 = (int)v193;
                      double v195 = *v50++;
                      int v196 = (int)v195;
                      LOBYTE(v195) = *v74;
                      v74 += 8;
                      char v197 = LOBYTE(v195);
                      if (v194) {
                        char v198 = v196;
                      }
                      else {
                        char v198 = v197;
                      }
                      *v98++ = v198;
                      --v192;
                    }
                    while (v192);
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v27 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v27 = 0;
                  }
                  if (a2) {
                    double v51 = *(double **)(a2 + 16);
                  }
                  else {
                    double v51 = 0;
                  }
                  if (a3) {
                    double v75 = *(unint64_t **)(a3 + 16);
                  }
                  else {
                    double v75 = 0;
                  }
                  if (a4) {
                    double v99 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v99 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v202 = v7;
                    do
                    {
                      double v203 = *v27++;
                      unint64_t v204 = (unint64_t)v203;
                      double v205 = *v51++;
                      unint64_t v206 = (unint64_t)v205;
                      unint64_t v208 = *v75++;
                      unint64_t v207 = v208;
                      if (v204) {
                        unint64_t v209 = v206;
                      }
                      else {
                        unint64_t v209 = v207;
                      }
                      *v99++ = v209;
                      --v202;
                    }
                    while (v202);
                  }
                  break;
                case 0:
                  int v14 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  uint64_t v38 = a2 ? *(double **)(a2 + 16) : 0;
                  unint64_t v62 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  unint64_t v86 = a4 ? (double *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v129 = v7;
                    do
                    {
                      double v130 = *v14++;
                      double v131 = v130;
                      double v132 = *v38++;
                      double v133 = v132;
                      unint64_t v134 = *v62++;
                      double v135 = (double)v134;
                      if (v131 == 0.0) {
                        double v136 = v135;
                      }
                      else {
                        double v136 = v133;
                      }
                      *v86++ = v136;
                      --v129;
                    }
                    while (v129);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v18 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v18 = 0;
                  }
                  if (a2) {
                    int v42 = *(double **)(a2 + 16);
                  }
                  else {
                    int v42 = 0;
                  }
                  if (a3) {
                    unsigned int v66 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v66 = 0;
                  }
                  if (a4) {
                    unsigned int v90 = (unsigned char *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v90 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v150 = v7;
                    do
                    {
                      double v151 = *v18++;
                      if ((int)v151) {
                        unint64_t v152 = v42;
                      }
                      else {
                        unint64_t v152 = v66;
                      }
                      *v90++ = (int)*v152;
                      ++v66;
                      ++v42;
                      --v150;
                    }
                    while (v150);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v19 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v19 = 0;
                  }
                  if (a2) {
                    int v43 = *(double **)(a2 + 16);
                  }
                  else {
                    int v43 = 0;
                  }
                  if (a3) {
                    double v67 = *(double **)(a3 + 16);
                  }
                  else {
                    double v67 = 0;
                  }
                  if (a4) {
                    double v91 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    double v91 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v153 = v7;
                    do
                    {
                      double v154 = *v19++;
                      if ((unint64_t)v154) {
                        double v155 = v43;
                      }
                      else {
                        double v155 = v67;
                      }
                      *v91++ = (unint64_t)*v155;
                      ++v67;
                      ++v43;
                      --v153;
                    }
                    while (v153);
                  }
                  break;
                case 0:
                  unint64_t v10 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  uint64_t v34 = a2 ? *(void **)(a2 + 16) : 0;
                  unsigned int v58 = a3 ? *(void **)(a3 + 16) : 0;
                  unsigned int v82 = a4 ? (void *)*((void *)a4 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v106 = v7;
                    do
                    {
                      double v107 = *v10++;
                      if (v107 == 0.0) {
                        unint64_t v108 = v58;
                      }
                      else {
                        unint64_t v108 = v34;
                      }
                      *v82++ = *v108;
                      ++v58;
                      ++v34;
                      --v106;
                    }
                    while (v106);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  return a4;
}

uint64_t agxps_timeseries_select_tst(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  if (a1 && a4 && a5)
  {
    if (!*(unsigned char *)(a5 + 32) && (uint64_t v7 = *(void *)(a1 + 8), v7 == *(void *)(a4 + 8)) && v7 == *(void *)(a5 + 8))
    {
      sub_299A4((int *)a1, a2, a3, a4, (int *)a5, a2, *(_DWORD *)a4);
      return a5;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

int *sub_299A4(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, int *a5, int a6, int a7)
{
  if (a5)
  {
    uint64_t v7 = *((void *)a5 + 1);
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    int v8 = 0;
    if (a5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v7 = 0;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  int v8 = *a1;
  if (a5)
  {
LABEL_4:
    int v9 = *a5;
    goto LABEL_8;
  }
LABEL_7:
  int v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v615 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v615 = 0;
                  }
                  if (a4) {
                    uint64_t v623 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    uint64_t v623 = 0;
                  }
                  if (a5) {
                    double v626 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v626 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v633 = *v615++;
                    int v632 = v633;
                    LOBYTE(v633) = *v623++;
                    char v634 = v633;
                    if (v632) {
                      char v635 = a3;
                    }
                    else {
                      char v635 = v634;
                    }
                    *v626++ = v635;
                  }
                  break;
                case 1:
                  if (a1) {
                    v616 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v616 = 0;
                  }
                  if (a4) {
                    int v624 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    int v624 = 0;
                  }
                  if (a5) {
                    double v627 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v627 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v637 = *v616++;
                    int v636 = v637;
                    unsigned int v639 = *v624++;
                    uint64_t v638 = v639;
                    if (v636) {
                      uint64_t v640 = a3;
                    }
                    else {
                      uint64_t v640 = v638;
                    }
                    *v627++ = v640;
                  }
                  break;
                case 0:
                  unsigned int v614 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unsigned int v622 = a4 ? *(unsigned char **)(a4 + 16) : 0;
                  for (uint64_t i = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v629 = *v614++;
                    int v628 = v629;
                    LOBYTE(v629) = *v622++;
                    unsigned __int8 v630 = v629;
                    if (v628) {
                      unsigned __int8 v631 = a3;
                    }
                    else {
                      unsigned __int8 v631 = v630;
                    }
                    *i++ = (double)v631;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v571 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v571 = 0;
                  }
                  if (a4) {
                    double v582 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v582 = 0;
                  }
                  if (a5) {
                    v588 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    v588 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v608 = v7;
                    do
                    {
                      int v610 = *v571++;
                      int v609 = v610;
                      uint64_t v612 = *v582++;
                      char v611 = v612;
                      if (v609) {
                        char v613 = a3;
                      }
                      else {
                        char v613 = v611;
                      }
                      *v588++ = v613;
                      --v608;
                    }
                    while (v608);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v572 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v572 = 0;
                  }
                  if (a4) {
                    uint64_t v583 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    uint64_t v583 = 0;
                  }
                  if (a5) {
                    uint64_t v589 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v589 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v618 = *v572++;
                    int v617 = v618;
                    uint64_t v620 = *v583++;
                    uint64_t v619 = v620;
                    if (v617) {
                      uint64_t v621 = a3;
                    }
                    else {
                      uint64_t v621 = v619;
                    }
                    *v589++ = v621;
                  }
                  break;
                case 0:
                  unint64_t v568 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  double v579 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (j = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v595 = *v568++;
                    int v594 = v595;
                    unint64_t v596 = *v579++;
                    double v597 = (double)v596;
                    if (v594) {
                      double v597 = (double)a3;
                    }
                    *j++ = v597;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unint64_t v569 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v569 = 0;
                  }
                  if (a4) {
                    uint64_t v580 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v580 = 0;
                  }
                  if (a5) {
                    uint64_t v586 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v586 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v599 = *v569++;
                    int v598 = v599;
                    double v600 = *v580++;
                    int v601 = (int)v600;
                    if (v598) {
                      char v602 = a3;
                    }
                    else {
                      char v602 = v601;
                    }
                    *v586++ = v602;
                  }
                  break;
                case 1:
                  if (a1) {
                    double v570 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v570 = 0;
                  }
                  if (a4) {
                    v581 = *(double **)(a4 + 16);
                  }
                  else {
                    v581 = 0;
                  }
                  if (a5) {
                    double v587 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v587 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v604 = *v570++;
                    int v603 = v604;
                    double v605 = *v581++;
                    unint64_t v606 = (unint64_t)v605;
                    if (v603) {
                      unint64_t v607 = a3;
                    }
                    else {
                      unint64_t v607 = v606;
                    }
                    *v587++ = v607;
                  }
                  break;
                case 0:
                  int v567 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unint64_t v578 = a4 ? *(double **)(a4 + 16) : 0;
                  for (k = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v591 = *v567++;
                    int v590 = v591;
                    double v592 = *v578++;
                    double v593 = v592;
                    if (v590) {
                      double v593 = (double)a3;
                    }
                    *k++ = v593;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v550 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v550 = 0;
                  }
                  if (a4) {
                    v553 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    v553 = 0;
                  }
                  if (a5) {
                    double v556 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v556 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v562 = v7;
                    do
                    {
                      int v564 = *v550++;
                      int v563 = v564;
                      LOBYTE(v564) = *v553++;
                      char v565 = v564;
                      if (v563) {
                        char v566 = a3;
                      }
                      else {
                        char v566 = v565;
                      }
                      *v556++ = v566;
                      --v562;
                    }
                    while (v562);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v551 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v551 = 0;
                  }
                  if (a4) {
                    unsigned int v554 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    unsigned int v554 = 0;
                  }
                  if (a5) {
                    unint64_t v557 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v557 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v574 = *v551++;
                    int v573 = v574;
                    unsigned int v576 = *v554++;
                    unint64_t v575 = v576;
                    if (v573) {
                      unint64_t v577 = a3;
                    }
                    else {
                      unint64_t v577 = v575;
                    }
                    *v557++ = v577;
                  }
                  break;
                case 0:
                  unsigned int v549 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  v552 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  for (m = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v559 = *v549++;
                    int v558 = v559;
                    unsigned int v560 = *v552++;
                    double v561 = (double)v560;
                    if (v558) {
                      double v561 = (double)a3;
                    }
                    *m++ = v561;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v450 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v450 = 0;
                  }
                  if (a4) {
                    double v462 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v462 = 0;
                  }
                  if (a5) {
                    int v474 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    int v474 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v543 = v7;
                    do
                    {
                      int v545 = *v450++;
                      int v544 = v545;
                      uint64_t v547 = *v462++;
                      char v546 = v547;
                      if (v544) {
                        char v548 = a3;
                      }
                      else {
                        char v548 = v546;
                      }
                      *v474++ = v548;
                      --v543;
                    }
                    while (v543);
                  }
                  break;
                case 1:
                  if (a1) {
                    v451 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v451 = 0;
                  }
                  if (a4) {
                    uint64_t v463 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    uint64_t v463 = 0;
                  }
                  if (a5) {
                    char v475 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    char v475 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v642 = *v451++;
                    int v641 = v642;
                    unint64_t v644 = *v463++;
                    unint64_t v643 = v644;
                    if (v641) {
                      unint64_t v645 = a3;
                    }
                    else {
                      unint64_t v645 = v643;
                    }
                    *v475++ = v645;
                  }
                  break;
                case 0:
                  uint64_t v443 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  int v455 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (n = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v489 = *v443++;
                    int v488 = v489;
                    unint64_t v491 = *v455++;
                    unint64_t v490 = v491;
                    if (v488) {
                      unint64_t v492 = a3;
                    }
                    else {
                      unint64_t v492 = v490;
                    }
                    *n++ = (double)v492;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v446 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v446 = 0;
                  }
                  if (a4) {
                    uint64_t v458 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v458 = 0;
                  }
                  if (a5) {
                    uint64_t v470 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v470 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v502 = *v446++;
                    int v501 = v502;
                    double v503 = *v458++;
                    int v504 = (int)v503;
                    if (v501) {
                      char v505 = a3;
                    }
                    else {
                      char v505 = v504;
                    }
                    *v470++ = v505;
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v447 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v447 = 0;
                  }
                  if (a4) {
                    uint64_t v459 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v459 = 0;
                  }
                  if (a5) {
                    unsigned int v471 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v471 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v507 = *v447++;
                    int v506 = v507;
                    double v508 = *v459++;
                    unint64_t v509 = (unint64_t)v508;
                    if (v506) {
                      unint64_t v510 = a3;
                    }
                    else {
                      unint64_t v510 = v509;
                    }
                    *v471++ = v510;
                  }
                  break;
                case 0:
                  unint64_t v441 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unint64_t v453 = a4 ? *(double **)(a4 + 16) : 0;
                  for (iuint64_t i = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v481 = *v441++;
                    int v480 = v481;
                    double v482 = *v453++;
                    double v483 = v482;
                    if (v480) {
                      double v483 = (double)a3;
                    }
                    *ii++ = v483;
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v517 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v517 = 0;
                  }
                  if (a4) {
                    double v520 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    double v520 = 0;
                  }
                  if (a5) {
                    v523 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    v523 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v530 = *v517++;
                    int v529 = v530;
                    LOBYTE(v530) = *v520++;
                    char v531 = v530;
                    if (v529) {
                      char v532 = (int)*(double *)&a3;
                    }
                    else {
                      char v532 = v531;
                    }
                    *v523++ = v532;
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v518 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v518 = 0;
                  }
                  if (a4) {
                    unsigned int v521 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    unsigned int v521 = 0;
                  }
                  if (a5) {
                    unsigned int v524 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v524 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v534 = *v518++;
                    int v533 = v534;
                    unsigned int v536 = *v521++;
                    unint64_t v535 = v536;
                    if (v533) {
                      unint64_t v537 = (unint64_t)*(double *)&a3;
                    }
                    else {
                      unint64_t v537 = v535;
                    }
                    *v524++ = v537;
                  }
                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unsigned int v519 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  for (jj = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v526 = *v516++;
                    int v525 = v526;
                    unsigned int v527 = *v519++;
                    double v528 = (double)v527;
                    if (v525) {
                      double v528 = *(double *)&a3;
                    }
                    *jj++ = v528;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v448 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v448 = 0;
                  }
                  if (a4) {
                    double v460 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    double v460 = 0;
                  }
                  if (a5) {
                    char v472 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    char v472 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v511 = v7;
                    do
                    {
                      int v513 = *v448++;
                      int v512 = v513;
                      LOBYTE(v513) = *v460;
                      v460 += 8;
                      char v514 = v513;
                      if (v512) {
                        char v515 = (int)*(double *)&a3;
                      }
                      else {
                        char v515 = v514;
                      }
                      *v472++ = v515;
                      --v511;
                    }
                    while (v511);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v449 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v449 = 0;
                  }
                  if (a4) {
                    double v461 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    double v461 = 0;
                  }
                  if (a5) {
                    double v473 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v473 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v539 = *v449++;
                    int v538 = v539;
                    unint64_t v541 = *v461++;
                    unint64_t v540 = v541;
                    if (v538) {
                      unint64_t v542 = (unint64_t)*(double *)&a3;
                    }
                    else {
                      unint64_t v542 = v540;
                    }
                    *v473++ = v542;
                  }
                  break;
                case 0:
                  double v442 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  double v454 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (kk = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v485 = *v442++;
                    int v484 = v485;
                    unint64_t v486 = *v454++;
                    double v487 = (double)v486;
                    if (v484) {
                      double v487 = *(double *)&a3;
                    }
                    *kk++ = v487;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v444 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v444 = 0;
                  }
                  if (a4) {
                    v456 = *(double **)(a4 + 16);
                  }
                  else {
                    v456 = 0;
                  }
                  if (a5) {
                    double v468 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v468 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v494 = *v444++;
                    int v493 = v494;
                    double v495 = *v456++;
                    double v496 = v495;
                    if (v493) {
                      double v496 = *(double *)&a3;
                    }
                    *v468++ = (int)v496;
                  }
                  break;
                case 1:
                  if (a1) {
                    v445 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v445 = 0;
                  }
                  if (a4) {
                    uint64_t v457 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v457 = 0;
                  }
                  if (a5) {
                    uint64_t v469 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v469 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v498 = *v445++;
                    int v497 = v498;
                    double v499 = *v457++;
                    double v500 = v499;
                    if (v497) {
                      double v500 = *(double *)&a3;
                    }
                    *v469++ = (unint64_t)v500;
                  }
                  break;
                case 0:
                  int v440 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  int v452 = a4 ? *(double **)(a4 + 16) : 0;
                  for (mm = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v477 = *v440++;
                    int v476 = v477;
                    double v478 = *v452++;
                    double v479 = v478;
                    if (v476) {
                      double v479 = *(double *)&a3;
                    }
                    *mm++ = v479;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v394 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v394 = 0;
                  }
                  if (a4) {
                    double v406 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    double v406 = 0;
                  }
                  if (a5) {
                    uint64_t v412 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v412 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v430 = v7;
                    do
                    {
                      unsigned int v432 = *v394;
                      v394 += 8;
                      uint64_t v431 = v432;
                      LOBYTE(v432) = *v406++;
                      char v433 = v432;
                      if (v431) {
                        char v434 = a3;
                      }
                      else {
                        char v434 = v433;
                      }
                      *v412++ = v434;
                      --v430;
                    }
                    while (v430);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v395 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v395 = 0;
                  }
                  if (a4) {
                    double v407 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    double v407 = 0;
                  }
                  if (a5) {
                    uint64_t v413 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v413 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v435 = v7;
                    do
                    {
                      uint64_t v437 = *v395++;
                      uint64_t v436 = v437;
                      LODWORD(v437) = *v407++;
                      uint64_t v438 = v437;
                      if (v436) {
                        uint64_t v439 = a3;
                      }
                      else {
                        uint64_t v439 = v438;
                      }
                      *v413++ = v439;
                      --v435;
                    }
                    while (v435);
                  }
                  break;
                case 0:
                  unint64_t v393 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  unint64_t v405 = a4 ? *(unsigned char **)(a4 + 16) : 0;
                  unint64_t v411 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v425 = v7;
                    do
                    {
                      uint64_t v427 = *v393++;
                      uint64_t v426 = v427;
                      LOBYTE(v427) = *v405++;
                      unsigned __int8 v428 = v427;
                      if (v426) {
                        unsigned __int8 v429 = a3;
                      }
                      else {
                        unsigned __int8 v429 = v428;
                      }
                      *v411++ = (double)v429;
                      --v425;
                    }
                    while (v425);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unint64_t v300 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v300 = 0;
                  }
                  if (a4) {
                    uint64_t v317 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    uint64_t v317 = 0;
                  }
                  if (a5) {
                    double v329 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v329 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v387 = v7;
                    do
                    {
                      unsigned int v389 = *v300;
                      v300 += 8;
                      uint64_t v388 = v389;
                      uint64_t v391 = *v317++;
                      char v390 = v391;
                      if (v388) {
                        char v392 = a3;
                      }
                      else {
                        char v392 = v390;
                      }
                      *v329++ = v392;
                      --v387;
                    }
                    while (v387);
                  }
                  break;
                case 1:
                  if (a1) {
                    unint64_t v301 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v301 = 0;
                  }
                  if (a4) {
                    double v318 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v318 = 0;
                  }
                  if (a5) {
                    uint64_t v330 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v330 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v396 = v7;
                    do
                    {
                      uint64_t v398 = *v301++;
                      uint64_t v397 = v398;
                      uint64_t v400 = *v318++;
                      uint64_t v399 = v400;
                      if (v397) {
                        uint64_t v401 = a3;
                      }
                      else {
                        uint64_t v401 = v399;
                      }
                      *v330++ = v401;
                      --v396;
                    }
                    while (v396);
                  }
                  break;
                case 0:
                  unint64_t v297 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  char v314 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  unint64_t v326 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v370 = v7;
                    do
                    {
                      uint64_t v372 = *v297++;
                      uint64_t v371 = v372;
                      unint64_t v373 = *v314++;
                      double v374 = (double)v373;
                      if (v371) {
                        double v374 = (double)a3;
                      }
                      *v326++ = v374;
                      --v370;
                    }
                    while (v370);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v298 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v298 = 0;
                  }
                  if (a4) {
                    uint64_t v315 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v315 = 0;
                  }
                  if (a5) {
                    double v327 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v327 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v375 = v7;
                    do
                    {
                      unsigned int v377 = *v298;
                      v298 += 8;
                      uint64_t v376 = v377;
                      double v378 = *v315++;
                      int v379 = (int)v378;
                      if (v376) {
                        char v380 = a3;
                      }
                      else {
                        char v380 = v379;
                      }
                      *v327++ = v380;
                      --v375;
                    }
                    while (v375);
                  }
                  break;
                case 1:
                  if (a1) {
                    unint64_t v299 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v299 = 0;
                  }
                  if (a4) {
                    uint64_t v316 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v316 = 0;
                  }
                  if (a5) {
                    double v328 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v328 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v381 = v7;
                    do
                    {
                      uint64_t v383 = *v299++;
                      uint64_t v382 = v383;
                      double v384 = *v316++;
                      unint64_t v385 = (unint64_t)v384;
                      if (v382) {
                        unint64_t v386 = a3;
                      }
                      else {
                        unint64_t v386 = v385;
                      }
                      *v328++ = v386;
                      --v381;
                    }
                    while (v381);
                  }
                  break;
                case 0:
                  double v296 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  char v313 = a4 ? *(double **)(a4 + 16) : 0;
                  unint64_t v325 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v365 = v7;
                    do
                    {
                      uint64_t v367 = *v296++;
                      uint64_t v366 = v367;
                      double v368 = *v313++;
                      double v369 = v368;
                      if (v366) {
                        double v369 = (double)a3;
                      }
                      *v325++ = v369;
                      --v365;
                    }
                    while (v365);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v210 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v210 = 0;
                  }
                  if (a4) {
                    uint64_t v228 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    uint64_t v228 = 0;
                  }
                  if (a5) {
                    unsigned int v240 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v240 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v291 = v7;
                    do
                    {
                      unsigned int v293 = *v210;
                      v210 += 8;
                      uint64_t v292 = v293;
                      LOBYTE(v293) = *v228++;
                      char v294 = v293;
                      if (v292) {
                        char v295 = a3;
                      }
                      else {
                        char v295 = v294;
                      }
                      *v240++ = v295;
                      --v291;
                    }
                    while (v291);
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v211 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v211 = 0;
                  }
                  if (a4) {
                    double v229 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    double v229 = 0;
                  }
                  if (a5) {
                    double v241 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v241 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v302 = v7;
                    do
                    {
                      uint64_t v304 = *v211++;
                      uint64_t v303 = v304;
                      LODWORD(v304) = *v229++;
                      unint64_t v305 = v304;
                      if (v303) {
                        unint64_t v306 = a3;
                      }
                      else {
                        unint64_t v306 = v305;
                      }
                      *v241++ = v306;
                      --v302;
                    }
                    while (v302);
                  }
                  break;
                case 0:
                  unint64_t v209 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  unint64_t v227 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  double v239 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v287 = v7;
                    do
                    {
                      uint64_t v289 = *v209++;
                      uint64_t v288 = v289;
                      LODWORD(v289) = *v227++;
                      double v290 = (double)v289;
                      if (v288) {
                        double v290 = (double)a3;
                      }
                      *v239++ = v290;
                      --v287;
                    }
                    while (v287);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v32 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v32 = 0;
                  }
                  if (a4) {
                    double v56 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v56 = 0;
                  }
                  if (a5) {
                    double v80 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v80 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v203 = v7;
                    do
                    {
                      unsigned int v205 = *v32;
                      v32 += 8;
                      uint64_t v204 = v205;
                      uint64_t v207 = *v56++;
                      char v206 = v207;
                      if (v204) {
                        char v208 = a3;
                      }
                      else {
                        char v208 = v206;
                      }
                      *v80++ = v208;
                      --v203;
                    }
                    while (v203);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v33 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v33 = 0;
                  }
                  if (a4) {
                    double v57 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    double v57 = 0;
                  }
                  if (a5) {
                    unint64_t v81 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v81 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v212 = v7;
                    do
                    {
                      uint64_t v214 = *v33++;
                      uint64_t v213 = v214;
                      unint64_t v216 = *v57++;
                      unint64_t v215 = v216;
                      if (v213) {
                        unint64_t v217 = a3;
                      }
                      else {
                        unint64_t v217 = v215;
                      }
                      *v81++ = v217;
                      --v212;
                    }
                    while (v212);
                  }
                  break;
                case 0:
                  int v17 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  uint64_t v41 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  unsigned int v65 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v116 = v7;
                    do
                    {
                      uint64_t v118 = *v17++;
                      uint64_t v117 = v118;
                      unint64_t v120 = *v41++;
                      unint64_t v119 = v120;
                      if (v117) {
                        unint64_t v121 = a3;
                      }
                      else {
                        unint64_t v121 = v119;
                      }
                      *v65++ = (double)v121;
                      --v116;
                    }
                    while (v116);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v24 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v24 = 0;
                  }
                  if (a4) {
                    double v48 = *(double **)(a4 + 16);
                  }
                  else {
                    double v48 = 0;
                  }
                  if (a5) {
                    double v72 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v72 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v150 = v7;
                    do
                    {
                      unsigned int v152 = *v24;
                      v24 += 8;
                      uint64_t v151 = v152;
                      double v153 = *v48++;
                      int v154 = (int)v153;
                      if (v151) {
                        char v155 = a3;
                      }
                      else {
                        char v155 = v154;
                      }
                      *v72++ = v155;
                      --v150;
                    }
                    while (v150);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v25 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v25 = 0;
                  }
                  if (a4) {
                    uint64_t v49 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v49 = 0;
                  }
                  if (a5) {
                    int v73 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v73 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v156 = v7;
                    do
                    {
                      uint64_t v158 = *v25++;
                      uint64_t v157 = v158;
                      double v159 = *v49++;
                      unint64_t v160 = (unint64_t)v159;
                      if (v157) {
                        unint64_t v161 = a3;
                      }
                      else {
                        unint64_t v161 = v160;
                      }
                      *v73++ = v161;
                      --v156;
                    }
                    while (v156);
                  }
                  break;
                case 0:
                  uint64_t v13 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  double v37 = a4 ? *(double **)(a4 + 16) : 0;
                  int v61 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v97 = v7;
                    do
                    {
                      uint64_t v99 = *v13++;
                      uint64_t v98 = v99;
                      double v100 = *v37++;
                      double v101 = v100;
                      if (v98) {
                        double v101 = (double)a3;
                      }
                      *v61++ = v101;
                      --v97;
                    }
                    while (v97);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v181 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v181 = 0;
                  }
                  if (a4) {
                    uint64_t v222 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    uint64_t v222 = 0;
                  }
                  if (a5) {
                    uint64_t v234 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v234 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v258 = v7;
                    do
                    {
                      unsigned int v260 = *v181;
                      v181 += 8;
                      uint64_t v259 = v260;
                      LOBYTE(v260) = *v222++;
                      char v261 = v260;
                      if (v259) {
                        char v262 = (int)*(double *)&a3;
                      }
                      else {
                        char v262 = v261;
                      }
                      *v234++ = v262;
                      --v258;
                    }
                    while (v258);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v182 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v182 = 0;
                  }
                  if (a4) {
                    double v223 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    double v223 = 0;
                  }
                  if (a5) {
                    double v235 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v235 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v263 = v7;
                    do
                    {
                      uint64_t v265 = *v182++;
                      uint64_t v264 = v265;
                      LODWORD(v265) = *v223++;
                      unint64_t v266 = v265;
                      if (v264) {
                        unint64_t v267 = (unint64_t)*(double *)&a3;
                      }
                      else {
                        unint64_t v267 = v266;
                      }
                      *v235++ = v267;
                      --v263;
                    }
                    while (v263);
                  }
                  break;
                case 0:
                  char v180 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  uint64_t v221 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  unsigned int v233 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v254 = v7;
                    do
                    {
                      uint64_t v256 = *v180++;
                      uint64_t v255 = v256;
                      LODWORD(v256) = *v221++;
                      double v257 = (double)v256;
                      if (v255) {
                        double v257 = *(double *)&a3;
                      }
                      *v233++ = v257;
                      --v254;
                    }
                    while (v254);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v28 = 0;
                  }
                  if (a4) {
                    int v52 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    int v52 = 0;
                  }
                  if (a5) {
                    double v76 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v76 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v175 = v7;
                    do
                    {
                      unsigned int v177 = *v28;
                      v28 += 8;
                      uint64_t v176 = v177;
                      LOBYTE(v177) = *v52;
                      v52 += 8;
                      char v178 = v177;
                      if (v176) {
                        char v179 = (int)*(double *)&a3;
                      }
                      else {
                        char v179 = v178;
                      }
                      *v76++ = v179;
                      --v175;
                    }
                    while (v175);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v29 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v29 = 0;
                  }
                  if (a4) {
                    unint64_t v53 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    unint64_t v53 = 0;
                  }
                  if (a5) {
                    double v77 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v77 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v183 = v7;
                    do
                    {
                      uint64_t v185 = *v29++;
                      uint64_t v184 = v185;
                      unint64_t v187 = *v53++;
                      unint64_t v186 = v187;
                      if (v184) {
                        unint64_t v188 = (unint64_t)*(double *)&a3;
                      }
                      else {
                        unint64_t v188 = v186;
                      }
                      *v77++ = v188;
                      --v183;
                    }
                    while (v183);
                  }
                  break;
                case 0:
                  int v15 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  double v39 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  double v63 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v107 = v7;
                    do
                    {
                      uint64_t v109 = *v15++;
                      uint64_t v108 = v109;
                      unint64_t v110 = *v39++;
                      double v111 = (double)v110;
                      if (v108) {
                        double v111 = *(double *)&a3;
                      }
                      *v63++ = v111;
                      --v107;
                    }
                    while (v107);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v20 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v20 = 0;
                  }
                  if (a4) {
                    unint64_t v44 = *(double **)(a4 + 16);
                  }
                  else {
                    unint64_t v44 = 0;
                  }
                  if (a5) {
                    double v68 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v68 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v130 = v7;
                    do
                    {
                      unsigned int v132 = *v20;
                      v20 += 8;
                      uint64_t v131 = v132;
                      double v133 = *v44++;
                      double v134 = v133;
                      if (v131) {
                        double v134 = *(double *)&a3;
                      }
                      *v68++ = (int)v134;
                      --v130;
                    }
                    while (v130);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v21 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v21 = 0;
                  }
                  if (a4) {
                    double v45 = *(double **)(a4 + 16);
                  }
                  else {
                    double v45 = 0;
                  }
                  if (a5) {
                    double v69 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v69 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v135 = v7;
                    do
                    {
                      uint64_t v137 = *v21++;
                      uint64_t v136 = v137;
                      double v138 = *v45++;
                      double v139 = v138;
                      if (v136) {
                        double v139 = *(double *)&a3;
                      }
                      *v69++ = (unint64_t)v139;
                      --v135;
                    }
                    while (v135);
                  }
                  break;
                case 0:
                  double v11 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  int v35 = a4 ? *(double **)(a4 + 16) : 0;
                  double v59 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v87 = v7;
                    do
                    {
                      uint64_t v89 = *v11++;
                      uint64_t v88 = v89;
                      double v90 = *v35++;
                      double v91 = v90;
                      if (v88) {
                        double v91 = *(double *)&a3;
                      }
                      *v59++ = v91;
                      --v87;
                    }
                    while (v87);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 0:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unint64_t v358 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v358 = 0;
                  }
                  if (a4) {
                    double v403 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    double v403 = 0;
                  }
                  if (a5) {
                    v409 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    v409 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v417 = *v358++;
                    int v418 = (int)v417;
                    LOBYTE(v417) = *v403++;
                    char v419 = LOBYTE(v417);
                    if (v418) {
                      char v420 = a3;
                    }
                    else {
                      char v420 = v419;
                    }
                    *v409++ = v420;
                  }
                  break;
                case 1:
                  if (a1) {
                    double v359 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v359 = 0;
                  }
                  if (a4) {
                    unint64_t v404 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    unint64_t v404 = 0;
                  }
                  if (a5) {
                    double v410 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v410 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v421 = *v359++;
                    unint64_t v422 = (unint64_t)v421;
                    LODWORD(v421) = *v404++;
                    uint64_t v423 = LODWORD(v421);
                    if (v422) {
                      uint64_t v424 = a3;
                    }
                    else {
                      uint64_t v424 = v423;
                    }
                    *v410++ = v424;
                  }
                  break;
                case 0:
                  unsigned int v357 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  v402 = a4 ? *(unsigned char **)(a4 + 16) : 0;
                  for (nn = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v414 = *v357++;
                    double v415 = v414;
                    LOBYTE(v414) = *v402++;
                    unsigned __int8 v416 = LOBYTE(v414);
                    if (v415 != 0.0) {
                      unsigned __int8 v416 = a3;
                    }
                    *nn++ = (double)v416;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v281 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v281 = 0;
                  }
                  if (a4) {
                    double v311 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v311 = 0;
                  }
                  if (a5) {
                    double v323 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v323 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v351 = v7;
                    do
                    {
                      double v352 = *v281++;
                      int v353 = (int)v352;
                      uint64_t v355 = *v311++;
                      char v354 = v355;
                      if (v353) {
                        char v356 = a3;
                      }
                      else {
                        char v356 = v354;
                      }
                      *v323++ = v356;
                      --v351;
                    }
                    while (v351);
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v282 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v282 = 0;
                  }
                  if (a4) {
                    int v312 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    int v312 = 0;
                  }
                  if (a5) {
                    double v324 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v324 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v360 = *v282++;
                    unint64_t v361 = (unint64_t)v360;
                    uint64_t v363 = *v312++;
                    uint64_t v362 = v363;
                    if (v361) {
                      uint64_t v364 = a3;
                    }
                    else {
                      uint64_t v364 = v362;
                    }
                    *v324++ = v364;
                  }
                  break;
                case 0:
                  int v278 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  uint64_t v308 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (i1 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v336 = *v278++;
                    double v337 = v336;
                    unint64_t v338 = *v308++;
                    double v339 = (double)v338;
                    if (v337 == 0.0) {
                      double v340 = v339;
                    }
                    else {
                      double v340 = (double)a3;
                    }
                    *i1++ = v340;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v279 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v279 = 0;
                  }
                  if (a4) {
                    uint64_t v309 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v309 = 0;
                  }
                  if (a5) {
                    unint64_t v321 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v321 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v341 = *v279++;
                    int v342 = (int)v341;
                    double v343 = *v309++;
                    int v344 = (int)v343;
                    if (v342) {
                      char v345 = a3;
                    }
                    else {
                      char v345 = v344;
                    }
                    *v321++ = v345;
                  }
                  break;
                case 1:
                  if (a1) {
                    char v280 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v280 = 0;
                  }
                  if (a4) {
                    unsigned int v310 = *(double **)(a4 + 16);
                  }
                  else {
                    unsigned int v310 = 0;
                  }
                  if (a5) {
                    uint64_t v322 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v322 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v346 = *v280++;
                    unint64_t v347 = (unint64_t)v346;
                    double v348 = *v310++;
                    unint64_t v349 = (unint64_t)v348;
                    if (v347) {
                      unint64_t v350 = a3;
                    }
                    else {
                      unint64_t v350 = v349;
                    }
                    *v322++ = v350;
                  }
                  break;
                case 0:
                  unint64_t v277 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  double v307 = a4 ? *(double **)(a4 + 16) : 0;
                  for (i2 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v331 = *v277++;
                    double v332 = v331;
                    double v333 = *v307++;
                    double v334 = v333;
                    if (v332 == 0.0) {
                      double v335 = v334;
                    }
                    else {
                      double v335 = (double)a3;
                    }
                    *i2++ = v335;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v196 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v196 = 0;
                  }
                  if (a4) {
                    unint64_t v225 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    unint64_t v225 = 0;
                  }
                  if (a5) {
                    uint64_t v237 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v237 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v272 = v7;
                    do
                    {
                      double v273 = *v196++;
                      int v274 = (int)v273;
                      LOBYTE(v273) = *v225++;
                      char v275 = LOBYTE(v273);
                      if (v274) {
                        char v276 = a3;
                      }
                      else {
                        char v276 = v275;
                      }
                      *v237++ = v276;
                      --v272;
                    }
                    while (v272);
                  }
                  break;
                case 1:
                  if (a1) {
                    char v197 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v197 = 0;
                  }
                  if (a4) {
                    unint64_t v226 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    unint64_t v226 = 0;
                  }
                  if (a5) {
                    int v238 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v238 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v283 = *v197++;
                    unint64_t v284 = (unint64_t)v283;
                    LODWORD(v283) = *v226++;
                    unint64_t v285 = LODWORD(v283);
                    if (v284) {
                      unint64_t v286 = a3;
                    }
                    else {
                      unint64_t v286 = v285;
                    }
                    *v238++ = v286;
                  }
                  break;
                case 0:
                  double v195 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  unint64_t v224 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  for (i3 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v268 = *v195++;
                    double v269 = v268;
                    LODWORD(v268) = *v224++;
                    double v270 = (double)LODWORD(v268);
                    if (v269 == 0.0) {
                      double v271 = v270;
                    }
                    else {
                      double v271 = (double)a3;
                    }
                    *i3++ = v271;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v30 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v30 = 0;
                  }
                  if (a4) {
                    unint64_t v54 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    unint64_t v54 = 0;
                  }
                  if (a5) {
                    unint64_t v78 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v78 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v189 = v7;
                    do
                    {
                      double v190 = *v30++;
                      int v191 = (int)v190;
                      uint64_t v193 = *v54++;
                      char v192 = v193;
                      if (v191) {
                        char v194 = a3;
                      }
                      else {
                        char v194 = v192;
                      }
                      *v78++ = v194;
                      --v189;
                    }
                    while (v189);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v31 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v31 = 0;
                  }
                  if (a4) {
                    double v55 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    double v55 = 0;
                  }
                  if (a5) {
                    double v79 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v79 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v198 = *v31++;
                    unint64_t v199 = (unint64_t)v198;
                    unint64_t v201 = *v55++;
                    unint64_t v200 = v201;
                    if (v199) {
                      unint64_t v202 = a3;
                    }
                    else {
                      unint64_t v202 = v200;
                    }
                    *v79++ = v202;
                  }
                  break;
                case 0:
                  uint64_t v16 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  double v40 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (i4 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v112 = *v16++;
                    double v113 = v112;
                    unint64_t v115 = *v40++;
                    unint64_t v114 = v115;
                    if (v113 != 0.0) {
                      unint64_t v114 = a3;
                    }
                    *i4++ = (double)v114;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v22 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v22 = 0;
                  }
                  if (a4) {
                    double v46 = *(double **)(a4 + 16);
                  }
                  else {
                    double v46 = 0;
                  }
                  if (a5) {
                    unint64_t v70 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v70 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v140 = *v22++;
                    int v141 = (int)v140;
                    double v142 = *v46++;
                    int v143 = (int)v142;
                    if (v141) {
                      char v144 = a3;
                    }
                    else {
                      char v144 = v143;
                    }
                    *v70++ = v144;
                  }
                  break;
                case 1:
                  if (a1) {
                    double v23 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v23 = 0;
                  }
                  if (a4) {
                    double v47 = *(double **)(a4 + 16);
                  }
                  else {
                    double v47 = 0;
                  }
                  if (a5) {
                    double v71 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v71 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v145 = *v23++;
                    unint64_t v146 = (unint64_t)v145;
                    double v147 = *v47++;
                    unint64_t v148 = (unint64_t)v147;
                    if (v146) {
                      unint64_t v149 = a3;
                    }
                    else {
                      unint64_t v149 = v148;
                    }
                    *v71++ = v149;
                  }
                  break;
                case 0:
                  double v12 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  int v36 = a4 ? *(double **)(a4 + 16) : 0;
                  for (i5 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v92 = *v12++;
                    double v93 = v92;
                    double v94 = *v36++;
                    double v95 = v94;
                    if (v93 == 0.0) {
                      double v96 = v95;
                    }
                    else {
                      double v96 = (double)a3;
                    }
                    *i5++ = v96;
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    char v168 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v168 = 0;
                  }
                  if (a4) {
                    double v219 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    double v219 = 0;
                  }
                  if (a5) {
                    double v231 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v231 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v246 = *v168++;
                    int v247 = (int)v246;
                    LOBYTE(v246) = *v219++;
                    char v248 = LOBYTE(v246);
                    if (v247) {
                      char v249 = (int)*(double *)&a3;
                    }
                    else {
                      char v249 = v248;
                    }
                    *v231++ = v249;
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v169 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v169 = 0;
                  }
                  if (a4) {
                    uint64_t v220 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    uint64_t v220 = 0;
                  }
                  if (a5) {
                    double v232 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v232 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v250 = *v169++;
                    unint64_t v251 = (unint64_t)v250;
                    LODWORD(v250) = *v220++;
                    unint64_t v252 = LODWORD(v250);
                    if (v251) {
                      unint64_t v253 = (unint64_t)*(double *)&a3;
                    }
                    else {
                      unint64_t v253 = v252;
                    }
                    *v232++ = v253;
                  }
                  break;
                case 0:
                  int v167 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  unint64_t v218 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  for (i6 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v242 = *v167++;
                    double v243 = v242;
                    LODWORD(v242) = *v218++;
                    double v244 = (double)LODWORD(v242);
                    if (v243 == 0.0) {
                      double v245 = v244;
                    }
                    else {
                      double v245 = *(double *)&a3;
                    }
                    *i6++ = v245;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v26 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v26 = 0;
                  }
                  if (a4) {
                    unsigned int v50 = *(unsigned char **)(a4 + 16);
                  }
                  else {
                    unsigned int v50 = 0;
                  }
                  if (a5) {
                    unsigned int v74 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v74 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v162 = v7;
                    do
                    {
                      double v163 = *v26++;
                      int v164 = (int)v163;
                      LOBYTE(v163) = *v50;
                      v50 += 8;
                      char v165 = LOBYTE(v163);
                      if (v164) {
                        char v166 = (int)*(double *)&a3;
                      }
                      else {
                        char v166 = v165;
                      }
                      *v74++ = v166;
                      --v162;
                    }
                    while (v162);
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v27 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v27 = 0;
                  }
                  if (a4) {
                    double v51 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    double v51 = 0;
                  }
                  if (a5) {
                    double v75 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v75 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v170 = *v27++;
                    unint64_t v171 = (unint64_t)v170;
                    unint64_t v173 = *v51++;
                    unint64_t v172 = v173;
                    if (v171) {
                      unint64_t v174 = (unint64_t)*(double *)&a3;
                    }
                    else {
                      unint64_t v174 = v172;
                    }
                    *v75++ = v174;
                  }
                  break;
                case 0:
                  int v14 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  uint64_t v38 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (i7 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v102 = *v14++;
                    double v103 = v102;
                    unint64_t v104 = *v38++;
                    double v105 = (double)v104;
                    if (v103 == 0.0) {
                      double v106 = v105;
                    }
                    else {
                      double v106 = *(double *)&a3;
                    }
                    *i7++ = v106;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v18 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v18 = 0;
                  }
                  if (a4) {
                    int v42 = *(double **)(a4 + 16);
                  }
                  else {
                    int v42 = 0;
                  }
                  if (a5) {
                    unsigned int v66 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v66 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v122 = *v18++;
                    int v123 = (int)v122;
                    double v124 = *v42++;
                    double v125 = v124;
                    if (v123) {
                      double v125 = *(double *)&a3;
                    }
                    *v66++ = (int)v125;
                  }
                  break;
                case 1:
                  if (a1) {
                    double v19 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v19 = 0;
                  }
                  if (a4) {
                    int v43 = *(double **)(a4 + 16);
                  }
                  else {
                    int v43 = 0;
                  }
                  if (a5) {
                    double v67 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v67 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v126 = *v19++;
                    unint64_t v127 = (unint64_t)v126;
                    double v128 = *v43++;
                    double v129 = v128;
                    if (v127) {
                      double v129 = *(double *)&a3;
                    }
                    *v67++ = (unint64_t)v129;
                  }
                  break;
                case 0:
                  unint64_t v10 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  uint64_t v34 = a4 ? *(double **)(a4 + 16) : 0;
                  for (i8 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v82 = *v10++;
                    double v83 = v82;
                    double v84 = *v34++;
                    double v85 = v84;
                    if (v83 == 0.0) {
                      double v86 = v85;
                    }
                    else {
                      double v86 = *(double *)&a3;
                    }
                    *i8++ = v86;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  return a5;
}

uint64_t agxps_timeseries_select_tts(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  if (a1 && a2 && a5)
  {
    if (!*(unsigned char *)(a5 + 32) && (uint64_t v7 = *(void *)(a1 + 8), v7 == *(void *)(a2 + 8)) && v7 == *(void *)(a5 + 8))
    {
      sub_2BA44((int *)a1, a2, a3, a4, (int *)a5, *(_DWORD *)a2, a3);
      return a5;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

int *sub_2BA44(int *a1, uint64_t a2, uint64_t a3, unint64_t a4, int *a5, int a6, int a7)
{
  if (a5)
  {
    uint64_t v7 = *((void *)a5 + 1);
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    int v8 = 0;
    if (a5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v7 = 0;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  int v8 = *a1;
  if (a5)
  {
LABEL_4:
    int v9 = *a5;
    goto LABEL_8;
  }
LABEL_7:
  int v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v615 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v615 = 0;
                  }
                  if (a2) {
                    uint64_t v623 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    uint64_t v623 = 0;
                  }
                  if (a5) {
                    double v626 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v626 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v633 = *v615++;
                    int v632 = v633;
                    LOBYTE(v633) = *v623++;
                    char v634 = v633;
                    if (v632) {
                      char v635 = v634;
                    }
                    else {
                      char v635 = a4;
                    }
                    *v626++ = v635;
                  }
                  break;
                case 1:
                  if (a1) {
                    v616 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v616 = 0;
                  }
                  if (a2) {
                    int v624 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    int v624 = 0;
                  }
                  if (a5) {
                    double v627 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v627 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v637 = *v616++;
                    int v636 = v637;
                    unsigned int v639 = *v624++;
                    uint64_t v638 = v639;
                    if (v636) {
                      uint64_t v640 = v638;
                    }
                    else {
                      uint64_t v640 = a4;
                    }
                    *v627++ = v640;
                  }
                  break;
                case 0:
                  unsigned int v614 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unsigned int v622 = a2 ? *(unsigned char **)(a2 + 16) : 0;
                  for (uint64_t i = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v629 = *v614++;
                    int v628 = v629;
                    LOBYTE(v629) = *v622++;
                    unsigned __int8 v630 = v629;
                    if (v628) {
                      unsigned __int8 v631 = v630;
                    }
                    else {
                      unsigned __int8 v631 = a4;
                    }
                    *i++ = (double)v631;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v573 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v573 = 0;
                  }
                  if (a2) {
                    unint64_t v584 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    unint64_t v584 = 0;
                  }
                  if (a5) {
                    int v590 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    int v590 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v609 = v7;
                    do
                    {
                      int v611 = *v573++;
                      int v610 = v611;
                      LOBYTE(v611) = *v584++;
                      char v612 = v611;
                      if (v610) {
                        char v613 = v612;
                      }
                      else {
                        char v613 = a4;
                      }
                      *v590++ = v613;
                      --v609;
                    }
                    while (v609);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v574 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v574 = 0;
                  }
                  if (a2) {
                    unint64_t v585 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v585 = 0;
                  }
                  if (a5) {
                    int v591 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v591 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v618 = *v574++;
                    int v617 = v618;
                    unsigned int v620 = *v585++;
                    unint64_t v619 = v620;
                    if (v617) {
                      unint64_t v621 = v619;
                    }
                    else {
                      unint64_t v621 = a4;
                    }
                    *v591++ = v621;
                  }
                  break;
                case 0:
                  double v570 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  v581 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  for (j = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v597 = *v570++;
                    int v596 = v597;
                    unsigned int v598 = *v581++;
                    double v599 = (double)v598;
                    if (!v596) {
                      double v599 = (double)a4;
                    }
                    *j++ = v599;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v571 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v571 = 0;
                  }
                  if (a2) {
                    double v582 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v582 = 0;
                  }
                  if (a5) {
                    v588 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    v588 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v601 = *v571++;
                    int v600 = v601;
                    LOBYTE(v601) = *v582++;
                    char v602 = v601;
                    if (v600) {
                      char v603 = v602;
                    }
                    else {
                      char v603 = (int)*(double *)&a4;
                    }
                    *v588++ = v603;
                  }
                  break;
                case 1:
                  if (a1) {
                    double v572 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v572 = 0;
                  }
                  if (a2) {
                    uint64_t v583 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    uint64_t v583 = 0;
                  }
                  if (a5) {
                    uint64_t v589 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v589 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v605 = *v572++;
                    int v604 = v605;
                    unsigned int v607 = *v583++;
                    unint64_t v606 = v607;
                    if (v604) {
                      unint64_t v608 = v606;
                    }
                    else {
                      unint64_t v608 = (unint64_t)*(double *)&a4;
                    }
                    *v589++ = v608;
                  }
                  break;
                case 0:
                  unint64_t v569 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  uint64_t v580 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  for (k = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v593 = *v569++;
                    int v592 = v593;
                    unsigned int v594 = *v580++;
                    double v595 = (double)v594;
                    if (!v592) {
                      double v595 = *(double *)&a4;
                    }
                    *k++ = v595;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v551 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v551 = 0;
                  }
                  if (a2) {
                    unsigned int v554 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unsigned int v554 = 0;
                  }
                  if (a5) {
                    unint64_t v557 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v557 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v563 = v7;
                    do
                    {
                      int v565 = *v551++;
                      int v564 = v565;
                      uint64_t v567 = *v554++;
                      char v566 = v567;
                      if (v564) {
                        char v568 = v566;
                      }
                      else {
                        char v568 = a4;
                      }
                      *v557++ = v568;
                      --v563;
                    }
                    while (v563);
                  }
                  break;
                case 1:
                  if (a1) {
                    v552 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v552 = 0;
                  }
                  if (a2) {
                    unsigned int v555 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unsigned int v555 = 0;
                  }
                  if (a5) {
                    int v558 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    int v558 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v576 = *v552++;
                    int v575 = v576;
                    uint64_t v578 = *v555++;
                    uint64_t v577 = v578;
                    if (v575) {
                      uint64_t v579 = v577;
                    }
                    else {
                      uint64_t v579 = a4;
                    }
                    *v558++ = v579;
                  }
                  break;
                case 0:
                  double v550 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  v553 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (m = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v560 = *v550++;
                    int v559 = v560;
                    unint64_t v561 = *v553++;
                    double v562 = (double)v561;
                    if (!v559) {
                      double v562 = (double)a4;
                    }
                    *m++ = v562;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v450 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v450 = 0;
                  }
                  if (a2) {
                    double v462 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v462 = 0;
                  }
                  if (a5) {
                    int v474 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    int v474 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v544 = v7;
                    do
                    {
                      int v546 = *v450++;
                      int v545 = v546;
                      uint64_t v548 = *v462++;
                      char v547 = v548;
                      if (v545) {
                        char v549 = v547;
                      }
                      else {
                        char v549 = a4;
                      }
                      *v474++ = v549;
                      --v544;
                    }
                    while (v544);
                  }
                  break;
                case 1:
                  if (a1) {
                    v451 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v451 = 0;
                  }
                  if (a2) {
                    uint64_t v463 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v463 = 0;
                  }
                  if (a5) {
                    char v475 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    char v475 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v642 = *v451++;
                    int v641 = v642;
                    unint64_t v644 = *v463++;
                    unint64_t v643 = v644;
                    if (v641) {
                      unint64_t v645 = v643;
                    }
                    else {
                      unint64_t v645 = a4;
                    }
                    *v475++ = v645;
                  }
                  break;
                case 0:
                  uint64_t v443 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  int v455 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (n = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v489 = *v443++;
                    int v488 = v489;
                    unint64_t v491 = *v455++;
                    unint64_t v490 = v491;
                    if (v488) {
                      unint64_t v492 = v490;
                    }
                    else {
                      unint64_t v492 = a4;
                    }
                    *n++ = (double)v492;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v446 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v446 = 0;
                  }
                  if (a2) {
                    uint64_t v458 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    uint64_t v458 = 0;
                  }
                  if (a5) {
                    uint64_t v470 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v470 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v502 = *v446++;
                    int v501 = v502;
                    LOBYTE(v502) = *v458;
                    v458 += 8;
                    char v503 = v502;
                    if (v501) {
                      char v504 = v503;
                    }
                    else {
                      char v504 = (int)*(double *)&a4;
                    }
                    *v470++ = v504;
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v447 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v447 = 0;
                  }
                  if (a2) {
                    uint64_t v459 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v459 = 0;
                  }
                  if (a5) {
                    unsigned int v471 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v471 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v506 = *v447++;
                    int v505 = v506;
                    unint64_t v508 = *v459++;
                    unint64_t v507 = v508;
                    if (v505) {
                      unint64_t v509 = v507;
                    }
                    else {
                      unint64_t v509 = (unint64_t)*(double *)&a4;
                    }
                    *v471++ = v509;
                  }
                  break;
                case 0:
                  unint64_t v441 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unint64_t v453 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (iuint64_t i = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v481 = *v441++;
                    int v480 = v481;
                    unint64_t v482 = *v453++;
                    double v483 = (double)v482;
                    if (!v480) {
                      double v483 = *(double *)&a4;
                    }
                    *ii++ = v483;
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v517 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v517 = 0;
                  }
                  if (a2) {
                    double v520 = *(double **)(a2 + 16);
                  }
                  else {
                    double v520 = 0;
                  }
                  if (a5) {
                    v523 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    v523 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v530 = *v517++;
                    int v529 = v530;
                    double v531 = *v520++;
                    int v532 = (int)v531;
                    if (v529) {
                      char v533 = v532;
                    }
                    else {
                      char v533 = a4;
                    }
                    *v523++ = v533;
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v518 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v518 = 0;
                  }
                  if (a2) {
                    unsigned int v521 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v521 = 0;
                  }
                  if (a5) {
                    unsigned int v524 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v524 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v535 = *v518++;
                    int v534 = v535;
                    double v536 = *v521++;
                    unint64_t v537 = (unint64_t)v536;
                    if (v534) {
                      unint64_t v538 = v537;
                    }
                    else {
                      unint64_t v538 = a4;
                    }
                    *v524++ = v538;
                  }
                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  unsigned int v519 = a2 ? *(double **)(a2 + 16) : 0;
                  for (jj = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v526 = *v516++;
                    int v525 = v526;
                    double v527 = *v519++;
                    double v528 = v527;
                    if (!v525) {
                      double v528 = (double)a4;
                    }
                    *jj++ = v528;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v448 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v448 = 0;
                  }
                  if (a2) {
                    double v460 = *(double **)(a2 + 16);
                  }
                  else {
                    double v460 = 0;
                  }
                  if (a5) {
                    char v472 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    char v472 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v510 = v7;
                    do
                    {
                      int v512 = *v448++;
                      int v511 = v512;
                      double v513 = *v460++;
                      int v514 = (int)v513;
                      if (v511) {
                        char v515 = v514;
                      }
                      else {
                        char v515 = a4;
                      }
                      *v472++ = v515;
                      --v510;
                    }
                    while (v510);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v449 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v449 = 0;
                  }
                  if (a2) {
                    double v461 = *(double **)(a2 + 16);
                  }
                  else {
                    double v461 = 0;
                  }
                  if (a5) {
                    double v473 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v473 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v540 = *v449++;
                    int v539 = v540;
                    double v541 = *v461++;
                    unint64_t v542 = (unint64_t)v541;
                    if (v539) {
                      unint64_t v543 = v542;
                    }
                    else {
                      unint64_t v543 = a4;
                    }
                    *v473++ = v543;
                  }
                  break;
                case 0:
                  double v442 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  double v454 = a2 ? *(double **)(a2 + 16) : 0;
                  for (kk = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v485 = *v442++;
                    int v484 = v485;
                    double v486 = *v454++;
                    double v487 = v486;
                    if (!v484) {
                      double v487 = (double)a4;
                    }
                    *kk++ = v487;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v444 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v444 = 0;
                  }
                  if (a2) {
                    v456 = *(double **)(a2 + 16);
                  }
                  else {
                    v456 = 0;
                  }
                  if (a5) {
                    double v468 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v468 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v494 = *v444++;
                    int v493 = v494;
                    double v495 = *v456++;
                    double v496 = v495;
                    if (!v493) {
                      double v496 = *(double *)&a4;
                    }
                    *v468++ = (int)v496;
                  }
                  break;
                case 1:
                  if (a1) {
                    v445 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v445 = 0;
                  }
                  if (a2) {
                    uint64_t v457 = *(double **)(a2 + 16);
                  }
                  else {
                    uint64_t v457 = 0;
                  }
                  if (a5) {
                    uint64_t v469 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v469 = 0;
                  }
                  for (; v7; --v7)
                  {
                    int v498 = *v445++;
                    int v497 = v498;
                    double v499 = *v457++;
                    double v500 = v499;
                    if (!v497) {
                      double v500 = *(double *)&a4;
                    }
                    *v469++ = (unint64_t)v500;
                  }
                  break;
                case 0:
                  int v440 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0;
                  int v452 = a2 ? *(double **)(a2 + 16) : 0;
                  for (mm = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    int v477 = *v440++;
                    int v476 = v477;
                    double v478 = *v452++;
                    double v479 = v478;
                    if (!v476) {
                      double v479 = *(double *)&a4;
                    }
                    *mm++ = v479;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v395 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v395 = 0;
                  }
                  if (a2) {
                    double v406 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v406 = 0;
                  }
                  if (a5) {
                    uint64_t v412 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v412 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v430 = v7;
                    do
                    {
                      unsigned int v432 = *v395;
                      v395 += 8;
                      uint64_t v431 = v432;
                      LOBYTE(v432) = *v406++;
                      char v433 = v432;
                      if (v431) {
                        char v434 = v433;
                      }
                      else {
                        char v434 = a4;
                      }
                      *v412++ = v434;
                      --v430;
                    }
                    while (v430);
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v396 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v396 = 0;
                  }
                  if (a2) {
                    double v407 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    double v407 = 0;
                  }
                  if (a5) {
                    uint64_t v413 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v413 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v435 = v7;
                    do
                    {
                      uint64_t v437 = *v396++;
                      uint64_t v436 = v437;
                      LODWORD(v437) = *v407++;
                      uint64_t v438 = v437;
                      if (v436) {
                        uint64_t v439 = v438;
                      }
                      else {
                        uint64_t v439 = a4;
                      }
                      *v413++ = v439;
                      --v435;
                    }
                    while (v435);
                  }
                  break;
                case 0:
                  double v394 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  unint64_t v405 = a2 ? *(unsigned char **)(a2 + 16) : 0;
                  unint64_t v411 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v425 = v7;
                    do
                    {
                      uint64_t v427 = *v394++;
                      uint64_t v426 = v427;
                      LOBYTE(v427) = *v405++;
                      unsigned __int8 v428 = v427;
                      if (v426) {
                        unsigned __int8 v429 = v428;
                      }
                      else {
                        unsigned __int8 v429 = a4;
                      }
                      *v411++ = (double)v429;
                      --v425;
                    }
                    while (v425);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v311 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v311 = 0;
                  }
                  if (a2) {
                    double v329 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v329 = 0;
                  }
                  if (a5) {
                    double v341 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v341 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v389 = v7;
                    do
                    {
                      unsigned int v391 = *v311;
                      v311 += 8;
                      uint64_t v390 = v391;
                      LOBYTE(v391) = *v329++;
                      char v392 = v391;
                      if (v390) {
                        char v393 = v392;
                      }
                      else {
                        char v393 = a4;
                      }
                      *v341++ = v393;
                      --v389;
                    }
                    while (v389);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v312 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v312 = 0;
                  }
                  if (a2) {
                    uint64_t v330 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    uint64_t v330 = 0;
                  }
                  if (a5) {
                    int v342 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v342 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v397 = v7;
                    do
                    {
                      uint64_t v399 = *v312++;
                      uint64_t v398 = v399;
                      LODWORD(v399) = *v330++;
                      unint64_t v400 = v399;
                      if (v398) {
                        unint64_t v401 = v400;
                      }
                      else {
                        unint64_t v401 = a4;
                      }
                      *v342++ = v401;
                      --v397;
                    }
                    while (v397);
                  }
                  break;
                case 0:
                  uint64_t v308 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  unint64_t v326 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  unint64_t v338 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v375 = v7;
                    do
                    {
                      uint64_t v377 = *v308++;
                      uint64_t v376 = v377;
                      LODWORD(v377) = *v326++;
                      double v378 = (double)v377;
                      if (!v376) {
                        double v378 = (double)a4;
                      }
                      *v338++ = v378;
                      --v375;
                    }
                    while (v375);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v309 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v309 = 0;
                  }
                  if (a2) {
                    double v327 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v327 = 0;
                  }
                  if (a5) {
                    double v339 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v339 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v379 = v7;
                    do
                    {
                      unsigned int v381 = *v309;
                      v309 += 8;
                      uint64_t v380 = v381;
                      LOBYTE(v381) = *v327++;
                      char v382 = v381;
                      if (v380) {
                        char v383 = v382;
                      }
                      else {
                        char v383 = (int)*(double *)&a4;
                      }
                      *v339++ = v383;
                      --v379;
                    }
                    while (v379);
                  }
                  break;
                case 1:
                  if (a1) {
                    unsigned int v310 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v310 = 0;
                  }
                  if (a2) {
                    double v328 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    double v328 = 0;
                  }
                  if (a5) {
                    double v340 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v340 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v384 = v7;
                    do
                    {
                      uint64_t v386 = *v310++;
                      uint64_t v385 = v386;
                      LODWORD(v386) = *v328++;
                      unint64_t v387 = v386;
                      if (v385) {
                        unint64_t v388 = v387;
                      }
                      else {
                        unint64_t v388 = (unint64_t)*(double *)&a4;
                      }
                      *v340++ = v388;
                      --v384;
                    }
                    while (v384);
                  }
                  break;
                case 0:
                  double v307 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  unint64_t v325 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  double v337 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v371 = v7;
                    do
                    {
                      uint64_t v373 = *v307++;
                      uint64_t v372 = v373;
                      LODWORD(v373) = *v325++;
                      double v374 = (double)v373;
                      if (!v372) {
                        double v374 = *(double *)&a4;
                      }
                      *v337++ = v374;
                      --v371;
                    }
                    while (v371);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v210 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v210 = 0;
                  }
                  if (a2) {
                    uint64_t v228 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v228 = 0;
                  }
                  if (a5) {
                    unsigned int v240 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v240 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v301 = v7;
                    do
                    {
                      unsigned int v303 = *v210;
                      v210 += 8;
                      uint64_t v302 = v303;
                      uint64_t v305 = *v228++;
                      char v304 = v305;
                      if (v302) {
                        char v306 = v304;
                      }
                      else {
                        char v306 = a4;
                      }
                      *v240++ = v306;
                      --v301;
                    }
                    while (v301);
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v211 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v211 = 0;
                  }
                  if (a2) {
                    double v229 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v229 = 0;
                  }
                  if (a5) {
                    double v241 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v241 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v313 = v7;
                    do
                    {
                      uint64_t v315 = *v211++;
                      uint64_t v314 = v315;
                      uint64_t v317 = *v229++;
                      uint64_t v316 = v317;
                      if (v314) {
                        uint64_t v318 = v316;
                      }
                      else {
                        uint64_t v318 = a4;
                      }
                      *v241++ = v318;
                      --v313;
                    }
                    while (v313);
                  }
                  break;
                case 0:
                  unint64_t v209 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  unint64_t v227 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  double v239 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v296 = v7;
                    do
                    {
                      uint64_t v298 = *v209++;
                      uint64_t v297 = v298;
                      unint64_t v299 = *v227++;
                      double v300 = (double)v299;
                      if (!v297) {
                        double v300 = (double)a4;
                      }
                      *v239++ = v300;
                      --v296;
                    }
                    while (v296);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v32 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v32 = 0;
                  }
                  if (a2) {
                    double v56 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v56 = 0;
                  }
                  if (a5) {
                    double v80 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v80 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v203 = v7;
                    do
                    {
                      unsigned int v205 = *v32;
                      v32 += 8;
                      uint64_t v204 = v205;
                      uint64_t v207 = *v56++;
                      char v206 = v207;
                      if (v204) {
                        char v208 = v206;
                      }
                      else {
                        char v208 = a4;
                      }
                      *v80++ = v208;
                      --v203;
                    }
                    while (v203);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v33 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v33 = 0;
                  }
                  if (a2) {
                    double v57 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    double v57 = 0;
                  }
                  if (a5) {
                    unint64_t v81 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v81 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v212 = v7;
                    do
                    {
                      uint64_t v214 = *v33++;
                      uint64_t v213 = v214;
                      unint64_t v216 = *v57++;
                      unint64_t v215 = v216;
                      if (v213) {
                        unint64_t v217 = v215;
                      }
                      else {
                        unint64_t v217 = a4;
                      }
                      *v81++ = v217;
                      --v212;
                    }
                    while (v212);
                  }
                  break;
                case 0:
                  int v17 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  uint64_t v41 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  unsigned int v65 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v116 = v7;
                    do
                    {
                      uint64_t v118 = *v17++;
                      uint64_t v117 = v118;
                      unint64_t v120 = *v41++;
                      unint64_t v119 = v120;
                      if (v117) {
                        unint64_t v121 = v119;
                      }
                      else {
                        unint64_t v121 = a4;
                      }
                      *v65++ = (double)v121;
                      --v116;
                    }
                    while (v116);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v24 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v24 = 0;
                  }
                  if (a2) {
                    double v48 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v48 = 0;
                  }
                  if (a5) {
                    double v72 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v72 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v149 = v7;
                    do
                    {
                      unsigned int v151 = *v24;
                      v24 += 8;
                      uint64_t v150 = v151;
                      LOBYTE(v151) = *v48;
                      v48 += 8;
                      char v152 = v151;
                      if (v150) {
                        char v153 = v152;
                      }
                      else {
                        char v153 = (int)*(double *)&a4;
                      }
                      *v72++ = v153;
                      --v149;
                    }
                    while (v149);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v25 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v25 = 0;
                  }
                  if (a2) {
                    uint64_t v49 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v49 = 0;
                  }
                  if (a5) {
                    int v73 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v73 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v154 = v7;
                    do
                    {
                      uint64_t v156 = *v25++;
                      uint64_t v155 = v156;
                      unint64_t v158 = *v49++;
                      unint64_t v157 = v158;
                      if (v155) {
                        unint64_t v159 = v157;
                      }
                      else {
                        unint64_t v159 = (unint64_t)*(double *)&a4;
                      }
                      *v73++ = v159;
                      --v154;
                    }
                    while (v154);
                  }
                  break;
                case 0:
                  uint64_t v13 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  double v37 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  int v61 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v97 = v7;
                    do
                    {
                      uint64_t v99 = *v13++;
                      uint64_t v98 = v99;
                      unint64_t v100 = *v37++;
                      double v101 = (double)v100;
                      if (!v98) {
                        double v101 = *(double *)&a4;
                      }
                      *v61++ = v101;
                      --v97;
                    }
                    while (v97);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v181 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v181 = 0;
                  }
                  if (a2) {
                    uint64_t v222 = *(double **)(a2 + 16);
                  }
                  else {
                    uint64_t v222 = 0;
                  }
                  if (a5) {
                    uint64_t v234 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v234 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v262 = v7;
                    do
                    {
                      unsigned int v264 = *v181;
                      v181 += 8;
                      uint64_t v263 = v264;
                      double v265 = *v222++;
                      int v266 = (int)v265;
                      if (v263) {
                        char v267 = v266;
                      }
                      else {
                        char v267 = a4;
                      }
                      *v234++ = v267;
                      --v262;
                    }
                    while (v262);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v182 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v182 = 0;
                  }
                  if (a2) {
                    double v223 = *(double **)(a2 + 16);
                  }
                  else {
                    double v223 = 0;
                  }
                  if (a5) {
                    double v235 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v235 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v268 = v7;
                    do
                    {
                      uint64_t v270 = *v182++;
                      uint64_t v269 = v270;
                      double v271 = *v223++;
                      unint64_t v272 = (unint64_t)v271;
                      if (v269) {
                        unint64_t v273 = v272;
                      }
                      else {
                        unint64_t v273 = a4;
                      }
                      *v235++ = v273;
                      --v268;
                    }
                    while (v268);
                  }
                  break;
                case 0:
                  char v180 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  uint64_t v221 = a2 ? *(double **)(a2 + 16) : 0;
                  unsigned int v233 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v257 = v7;
                    do
                    {
                      uint64_t v259 = *v180++;
                      uint64_t v258 = v259;
                      double v260 = *v221++;
                      double v261 = v260;
                      if (!v258) {
                        double v261 = (double)a4;
                      }
                      *v233++ = v261;
                      --v257;
                    }
                    while (v257);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v28 = 0;
                  }
                  if (a2) {
                    int v52 = *(double **)(a2 + 16);
                  }
                  else {
                    int v52 = 0;
                  }
                  if (a5) {
                    double v76 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v76 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v174 = v7;
                    do
                    {
                      unsigned int v176 = *v28;
                      v28 += 8;
                      uint64_t v175 = v176;
                      double v177 = *v52++;
                      int v178 = (int)v177;
                      if (v175) {
                        char v179 = v178;
                      }
                      else {
                        char v179 = a4;
                      }
                      *v76++ = v179;
                      --v174;
                    }
                    while (v174);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v29 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v29 = 0;
                  }
                  if (a2) {
                    unint64_t v53 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v53 = 0;
                  }
                  if (a5) {
                    double v77 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v77 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v183 = v7;
                    do
                    {
                      uint64_t v185 = *v29++;
                      uint64_t v184 = v185;
                      double v186 = *v53++;
                      unint64_t v187 = (unint64_t)v186;
                      if (v184) {
                        unint64_t v188 = v187;
                      }
                      else {
                        unint64_t v188 = a4;
                      }
                      *v77++ = v188;
                      --v183;
                    }
                    while (v183);
                  }
                  break;
                case 0:
                  int v15 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  double v39 = a2 ? *(double **)(a2 + 16) : 0;
                  double v63 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v107 = v7;
                    do
                    {
                      uint64_t v109 = *v15++;
                      uint64_t v108 = v109;
                      double v110 = *v39++;
                      double v111 = v110;
                      if (!v108) {
                        double v111 = (double)a4;
                      }
                      *v63++ = v111;
                      --v107;
                    }
                    while (v107);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v20 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v20 = 0;
                  }
                  if (a2) {
                    unint64_t v44 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v44 = 0;
                  }
                  if (a5) {
                    double v68 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v68 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v130 = v7;
                    do
                    {
                      unsigned int v132 = *v20;
                      v20 += 8;
                      uint64_t v131 = v132;
                      double v133 = *v44++;
                      double v134 = v133;
                      if (!v131) {
                        double v134 = *(double *)&a4;
                      }
                      *v68++ = (int)v134;
                      --v130;
                    }
                    while (v130);
                  }
                  break;
                case 1:
                  if (a1) {
                    int v21 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v21 = 0;
                  }
                  if (a2) {
                    double v45 = *(double **)(a2 + 16);
                  }
                  else {
                    double v45 = 0;
                  }
                  if (a5) {
                    double v69 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v69 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v135 = v7;
                    do
                    {
                      uint64_t v137 = *v21++;
                      uint64_t v136 = v137;
                      double v138 = *v45++;
                      double v139 = v138;
                      if (!v136) {
                        double v139 = *(double *)&a4;
                      }
                      *v69++ = (unint64_t)v139;
                      --v135;
                    }
                    while (v135);
                  }
                  break;
                case 0:
                  double v11 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0;
                  int v35 = a2 ? *(double **)(a2 + 16) : 0;
                  double v59 = a5 ? (double *)*((void *)a5 + 2) : 0;
                  if (v7)
                  {
                    uint64_t v87 = v7;
                    do
                    {
                      uint64_t v89 = *v11++;
                      uint64_t v88 = v89;
                      double v90 = *v35++;
                      double v91 = v90;
                      if (!v88) {
                        double v91 = *(double *)&a4;
                      }
                      *v59++ = v91;
                      --v87;
                    }
                    while (v87);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 0:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v365 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v365 = 0;
                  }
                  if (a2) {
                    double v403 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v403 = 0;
                  }
                  if (a5) {
                    v409 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    v409 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v417 = *v365++;
                    int v418 = (int)v417;
                    LOBYTE(v417) = *v403++;
                    char v419 = LOBYTE(v417);
                    if (v418) {
                      char v420 = v419;
                    }
                    else {
                      char v420 = a4;
                    }
                    *v409++ = v420;
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v366 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v366 = 0;
                  }
                  if (a2) {
                    unint64_t v404 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v404 = 0;
                  }
                  if (a5) {
                    double v410 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v410 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v421 = *v366++;
                    unint64_t v422 = (unint64_t)v421;
                    LODWORD(v421) = *v404++;
                    uint64_t v423 = LODWORD(v421);
                    if (v422) {
                      uint64_t v424 = v423;
                    }
                    else {
                      uint64_t v424 = a4;
                    }
                    *v410++ = v424;
                  }
                  break;
                case 0:
                  uint64_t v364 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  v402 = a2 ? *(unsigned char **)(a2 + 16) : 0;
                  for (nn = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v414 = *v364++;
                    double v415 = v414;
                    LOBYTE(v414) = *v402++;
                    unsigned __int8 v416 = LOBYTE(v414);
                    if (v415 == 0.0) {
                      unsigned __int8 v416 = a4;
                    }
                    *nn++ = (double)v416;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v289 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v289 = 0;
                  }
                  if (a2) {
                    double v323 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v323 = 0;
                  }
                  if (a5) {
                    double v335 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v335 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v359 = v7;
                    do
                    {
                      double v360 = *v289++;
                      int v361 = (int)v360;
                      LOBYTE(v360) = *v323++;
                      char v362 = LOBYTE(v360);
                      if (v361) {
                        char v363 = v362;
                      }
                      else {
                        char v363 = a4;
                      }
                      *v335++ = v363;
                      --v359;
                    }
                    while (v359);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v290 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v290 = 0;
                  }
                  if (a2) {
                    double v324 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    double v324 = 0;
                  }
                  if (a5) {
                    double v336 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v336 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v367 = *v290++;
                    unint64_t v368 = (unint64_t)v367;
                    LODWORD(v367) = *v324++;
                    unint64_t v369 = LODWORD(v367);
                    if (v368) {
                      unint64_t v370 = v369;
                    }
                    else {
                      unint64_t v370 = a4;
                    }
                    *v336++ = v370;
                  }
                  break;
                case 0:
                  unint64_t v286 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  unint64_t v320 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  for (i1 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v347 = *v286++;
                    double v348 = v347;
                    LODWORD(v347) = *v320++;
                    double v349 = (double)LODWORD(v347);
                    if (v348 == 0.0) {
                      double v350 = (double)a4;
                    }
                    else {
                      double v350 = v349;
                    }
                    *i1++ = v350;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v287 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v287 = 0;
                  }
                  if (a2) {
                    unint64_t v321 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    unint64_t v321 = 0;
                  }
                  if (a5) {
                    double v333 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v333 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v351 = *v287++;
                    int v352 = (int)v351;
                    LOBYTE(v351) = *v321++;
                    char v353 = LOBYTE(v351);
                    if (v352) {
                      char v354 = v353;
                    }
                    else {
                      char v354 = (int)*(double *)&a4;
                    }
                    *v333++ = v354;
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v288 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v288 = 0;
                  }
                  if (a2) {
                    uint64_t v322 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    uint64_t v322 = 0;
                  }
                  if (a5) {
                    double v334 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v334 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v355 = *v288++;
                    unint64_t v356 = (unint64_t)v355;
                    LODWORD(v355) = *v322++;
                    unint64_t v357 = LODWORD(v355);
                    if (v356) {
                      unint64_t v358 = v357;
                    }
                    else {
                      unint64_t v358 = (unint64_t)*(double *)&a4;
                    }
                    *v334++ = v358;
                  }
                  break;
                case 0:
                  unint64_t v285 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  unint64_t v319 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  for (i2 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v343 = *v285++;
                    double v344 = v343;
                    LODWORD(v343) = *v319++;
                    double v345 = (double)LODWORD(v343);
                    if (v344 == 0.0) {
                      double v346 = *(double *)&a4;
                    }
                    else {
                      double v346 = v345;
                    }
                    *i2++ = v346;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v196 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v196 = 0;
                  }
                  if (a2) {
                    unint64_t v225 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unint64_t v225 = 0;
                  }
                  if (a5) {
                    uint64_t v237 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v237 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v279 = v7;
                    do
                    {
                      double v280 = *v196++;
                      int v281 = (int)v280;
                      uint64_t v283 = *v225++;
                      char v282 = v283;
                      if (v281) {
                        char v284 = v282;
                      }
                      else {
                        char v284 = a4;
                      }
                      *v237++ = v284;
                      --v279;
                    }
                    while (v279);
                  }
                  break;
                case 1:
                  if (a1) {
                    char v197 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v197 = 0;
                  }
                  if (a2) {
                    unint64_t v226 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unint64_t v226 = 0;
                  }
                  if (a5) {
                    int v238 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    int v238 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v291 = *v197++;
                    unint64_t v292 = (unint64_t)v291;
                    uint64_t v294 = *v226++;
                    uint64_t v293 = v294;
                    if (v292) {
                      uint64_t v295 = v293;
                    }
                    else {
                      uint64_t v295 = a4;
                    }
                    *v238++ = v295;
                  }
                  break;
                case 0:
                  double v195 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  unint64_t v224 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (i3 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v274 = *v195++;
                    double v275 = v274;
                    unint64_t v276 = *v224++;
                    double v277 = (double)v276;
                    if (v275 == 0.0) {
                      double v278 = (double)a4;
                    }
                    else {
                      double v278 = v277;
                    }
                    *i3++ = v278;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v30 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v30 = 0;
                  }
                  if (a2) {
                    unint64_t v54 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unint64_t v54 = 0;
                  }
                  if (a5) {
                    unint64_t v78 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v78 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v189 = v7;
                    do
                    {
                      double v190 = *v30++;
                      int v191 = (int)v190;
                      uint64_t v193 = *v54++;
                      char v192 = v193;
                      if (v191) {
                        char v194 = v192;
                      }
                      else {
                        char v194 = a4;
                      }
                      *v78++ = v194;
                      --v189;
                    }
                    while (v189);
                  }
                  break;
                case 1:
                  if (a1) {
                    double v31 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v31 = 0;
                  }
                  if (a2) {
                    double v55 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    double v55 = 0;
                  }
                  if (a5) {
                    double v79 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v79 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v198 = *v31++;
                    unint64_t v199 = (unint64_t)v198;
                    unint64_t v201 = *v55++;
                    unint64_t v200 = v201;
                    if (v199) {
                      unint64_t v202 = v200;
                    }
                    else {
                      unint64_t v202 = a4;
                    }
                    *v79++ = v202;
                  }
                  break;
                case 0:
                  uint64_t v16 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  double v40 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (i4 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v112 = *v16++;
                    double v113 = v112;
                    unint64_t v115 = *v40++;
                    unint64_t v114 = v115;
                    if (v113 == 0.0) {
                      unint64_t v114 = a4;
                    }
                    *i4++ = (double)v114;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v22 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v22 = 0;
                  }
                  if (a2) {
                    double v46 = *(unsigned char **)(a2 + 16);
                  }
                  else {
                    double v46 = 0;
                  }
                  if (a5) {
                    unint64_t v70 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v70 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v140 = *v22++;
                    int v141 = (int)v140;
                    LOBYTE(v140) = *v46;
                    v46 += 8;
                    char v142 = LOBYTE(v140);
                    if (v141) {
                      char v143 = v142;
                    }
                    else {
                      char v143 = (int)*(double *)&a4;
                    }
                    *v70++ = v143;
                  }
                  break;
                case 1:
                  if (a1) {
                    double v23 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v23 = 0;
                  }
                  if (a2) {
                    double v47 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    double v47 = 0;
                  }
                  if (a5) {
                    double v71 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v71 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v144 = *v23++;
                    unint64_t v145 = (unint64_t)v144;
                    unint64_t v147 = *v47++;
                    unint64_t v146 = v147;
                    if (v145) {
                      unint64_t v148 = v146;
                    }
                    else {
                      unint64_t v148 = (unint64_t)*(double *)&a4;
                    }
                    *v71++ = v148;
                  }
                  break;
                case 0:
                  double v12 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  int v36 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (i5 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v92 = *v12++;
                    double v93 = v92;
                    unint64_t v94 = *v36++;
                    double v95 = (double)v94;
                    if (v93 == 0.0) {
                      double v96 = *(double *)&a4;
                    }
                    else {
                      double v96 = v95;
                    }
                    *i5++ = v96;
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v167 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v167 = 0;
                  }
                  if (a2) {
                    double v219 = *(double **)(a2 + 16);
                  }
                  else {
                    double v219 = 0;
                  }
                  if (a5) {
                    double v231 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    double v231 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v247 = *v167++;
                    int v248 = (int)v247;
                    double v249 = *v219++;
                    int v250 = (int)v249;
                    if (v248) {
                      char v251 = v250;
                    }
                    else {
                      char v251 = a4;
                    }
                    *v231++ = v251;
                  }
                  break;
                case 1:
                  if (a1) {
                    char v168 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v168 = 0;
                  }
                  if (a2) {
                    uint64_t v220 = *(double **)(a2 + 16);
                  }
                  else {
                    uint64_t v220 = 0;
                  }
                  if (a5) {
                    double v232 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v232 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v252 = *v168++;
                    unint64_t v253 = (unint64_t)v252;
                    double v254 = *v220++;
                    unint64_t v255 = (unint64_t)v254;
                    if (v253) {
                      unint64_t v256 = v255;
                    }
                    else {
                      unint64_t v256 = a4;
                    }
                    *v232++ = v256;
                  }
                  break;
                case 0:
                  char v166 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  unint64_t v218 = a2 ? *(double **)(a2 + 16) : 0;
                  for (i6 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v242 = *v166++;
                    double v243 = v242;
                    double v244 = *v218++;
                    double v245 = v244;
                    if (v243 == 0.0) {
                      double v246 = (double)a4;
                    }
                    else {
                      double v246 = v245;
                    }
                    *i6++ = v246;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v26 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v26 = 0;
                  }
                  if (a2) {
                    unsigned int v50 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v50 = 0;
                  }
                  if (a5) {
                    unsigned int v74 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v74 = 0;
                  }
                  if (v7)
                  {
                    uint64_t v160 = v7;
                    do
                    {
                      double v161 = *v26++;
                      int v162 = (int)v161;
                      double v163 = *v50++;
                      int v164 = (int)v163;
                      if (v162) {
                        char v165 = v164;
                      }
                      else {
                        char v165 = a4;
                      }
                      *v74++ = v165;
                      --v160;
                    }
                    while (v160);
                  }
                  break;
                case 1:
                  if (a1) {
                    uint64_t v27 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v27 = 0;
                  }
                  if (a2) {
                    double v51 = *(double **)(a2 + 16);
                  }
                  else {
                    double v51 = 0;
                  }
                  if (a5) {
                    double v75 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v75 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v169 = *v27++;
                    unint64_t v170 = (unint64_t)v169;
                    double v171 = *v51++;
                    unint64_t v172 = (unint64_t)v171;
                    if (v170) {
                      unint64_t v173 = v172;
                    }
                    else {
                      unint64_t v173 = a4;
                    }
                    *v75++ = v173;
                  }
                  break;
                case 0:
                  int v14 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  uint64_t v38 = a2 ? *(double **)(a2 + 16) : 0;
                  for (i7 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v102 = *v14++;
                    double v103 = v102;
                    double v104 = *v38++;
                    double v105 = v104;
                    if (v103 == 0.0) {
                      double v106 = (double)a4;
                    }
                    else {
                      double v106 = v105;
                    }
                    *i7++ = v106;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v18 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v18 = 0;
                  }
                  if (a2) {
                    int v42 = *(double **)(a2 + 16);
                  }
                  else {
                    int v42 = 0;
                  }
                  if (a5) {
                    unsigned int v66 = (unsigned char *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v66 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v122 = *v18++;
                    int v123 = (int)v122;
                    double v124 = *v42++;
                    double v125 = v124;
                    if (!v123) {
                      double v125 = *(double *)&a4;
                    }
                    *v66++ = (int)v125;
                  }
                  break;
                case 1:
                  if (a1) {
                    double v19 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v19 = 0;
                  }
                  if (a2) {
                    int v43 = *(double **)(a2 + 16);
                  }
                  else {
                    int v43 = 0;
                  }
                  if (a5) {
                    double v67 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v67 = 0;
                  }
                  for (; v7; --v7)
                  {
                    double v126 = *v19++;
                    unint64_t v127 = (unint64_t)v126;
                    double v128 = *v43++;
                    double v129 = v128;
                    if (!v127) {
                      double v129 = *(double *)&a4;
                    }
                    *v67++ = (unint64_t)v129;
                  }
                  break;
                case 0:
                  unint64_t v10 = a1 ? (double *)*((void *)a1 + 2) : 0;
                  uint64_t v34 = a2 ? *(double **)(a2 + 16) : 0;
                  for (i8 = a5 ? (double *)*((void *)a5 + 2) : 0; v7; --v7)
                  {
                    double v82 = *v10++;
                    double v83 = v82;
                    double v84 = *v34++;
                    double v85 = v84;
                    if (v83 == 0.0) {
                      double v86 = *(double *)&a4;
                    }
                    else {
                      double v86 = v85;
                    }
                    *i8++ = v86;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  return a5;
}

uint64_t std::deque<ProfileEvent>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unsigned int v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unsigned int v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<ProfileEvent *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<ProfileEvent *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2DB68(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  if (!*a1)
  {
    operator delete[]();
  }
  return (*a1)(a2);
}

void sub_2DBBC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_2DC44(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_2DC44(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_2DF5C(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_2E074((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_5714((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_2E194(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2E2AC((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2DF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2DF5C(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      double v19 = (char *)sub_5714(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_2E074(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_5714(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_2E194(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_5714(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_2E2AC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_5714(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_2E3C8(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *agxps_aps_parser_create(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = (unsigned int **)result;
    if (!agxps_gpu_is_valid(*result)) {
      return 0;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_771FD8, memory_order_acquire) & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_771FD8))
      {
        uint64_t v6 = 0x30000000FLL;
        int v7 = 1;
        uint64_t v8 = sub_2F050;
        uint64_t v9 = 0x30000000FLL;
        int v10 = 3;
        unint64_t v11 = sub_6305C;
        uint64_t v12 = 0x30000000FLL;
        int v13 = 5;
        uint64_t v14 = sub_1785D0;
        uint64_t v15 = 0x40000000FLL;
        int v16 = 1;
        uint64_t v17 = sub_6305C;
        uint64_t v18 = 0x40000000FLL;
        int v19 = 3;
        uint64_t v20 = sub_1785D0;
        uint64_t v21 = 0x40000000FLL;
        int v22 = 4;
        uint64_t v23 = sub_1785D0;
        uint64_t v24 = 0x50000000FLL;
        int v25 = 1;
        uint64_t v26 = sub_6305C;
        uint64_t v27 = 0x50000000FLL;
        int v28 = 3;
        int v29 = sub_1785D0;
        uint64_t v30 = 0x50000000FLL;
        int v31 = 4;
        long long v32 = sub_1785D0;
        uint64_t v33 = 0x60000000FLL;
        int v34 = 1;
        int v35 = sub_1785D0;
        uint64_t v36 = 0x60000000FLL;
        int v37 = 3;
        uint64_t v38 = sub_1785D0;
        uint64_t v39 = 0x200000010;
        int v40 = 1;
        uint64_t v41 = sub_6305C;
        uint64_t v42 = 0x200000010;
        int v43 = 3;
        unint64_t v44 = sub_1785D0;
        uint64_t v45 = 0x200000010;
        int v46 = 4;
        uint64_t v47 = sub_1785D0;
        uint64_t v48 = 0x300000010;
        int v49 = 1;
        uint64_t v50 = sub_12C198;
        uint64_t v51 = 0x300000010;
        int v52 = 3;
        unint64_t v53 = sub_12C198;
        uint64_t v54 = 0x400000010;
        int v55 = 1;
        double v56 = sub_12C198;
        uint64_t v57 = 0x500000010;
        int v58 = 1;
        double v59 = sub_12C198;
        uint64_t v60 = 0x200000011;
        int v61 = 1;
        unint64_t v62 = sub_12C198;
        uint64_t v63 = 0x300000011;
        int v64 = 1;
        unsigned int v65 = sub_95918;
        sub_2EA78((uint64_t)&unk_771FC0, (int *)&v6, 20);
        __cxa_atexit((void (*)(void *))sub_2E6C8, &unk_771FC0, &def_1C1270);
        __cxa_guard_release(&qword_771FD8);
      }
    }
    unsigned int gen = agxps_gpu_get_gen(*v1);
    uint64_t variant = agxps_gpu_get_variant((uint64_t)*v1);
    int rev = agxps_gpu_get_rev((uint64_t)*v1);
    uint64_t v6 = gen | (unint64_t)(variant << 32);
    int v7 = rev;
    unint64_t v5 = sub_2EEA0((uint64_t)&unk_771FC0, (int *)&v6);
    if (v5 == (uint64_t *)&unk_771FC8) {
      return 0;
    }
    else {
      return (uint64_t *)((uint64_t (*)(unsigned int **))v5[6])(v1);
    }
  }
  return result;
}

void sub_2E6A8(_Unwind_Exception *a1)
{
}

uint64_t sub_2E6C8(uint64_t a1)
{
  return a1;
}

uint64_t agxps_aps_parser_destroy(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t agxps_aps_parser_set_counter_filter(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    long long __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_2EF90(&__p, a2, (uint64_t)a2 + 8 * a3, a3);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 8))(v3, &__p);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  return v3;
}

void sub_2E7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (***agxps_aps_parser_parse(uint64_t (***result)(void), uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5))(void)
{
  if (result) {
    return (uint64_t (***)(void))(**result)(result);
  }
  *a5 = 1;
  return result;
}

uint64_t agxps_aps_profile_data_get_usc_timestamps(uint64_t a1, void *__dst, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a1 && __dst)
  {
    uint64_t v6 = *(void *)(a1 + 26072);
    uint64_t v7 = *(void *)(a1 + 26064);
    if (a4 + a3 <= (unint64_t)((v6 - v7) >> 3))
    {
      uint64_t v8 = (void *)(v7 + 8 * a3);
      if (a4 == 1) {
        *__dst = *v8;
      }
      else {
        memcpy(__dst, v8, 8 * a4);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_kick_start(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (a4 + a3 <= (unint64_t)((*(void *)(a1 + 16) - v6) >> 3))
    {
      if (a4)
      {
        uint64_t v7 = 8 * a4;
        uint64_t v8 = (uint64_t *)(v6 + 8 * a3);
        do
        {
          uint64_t v9 = *v8++;
          *a2++ = v9;
          v7 -= 8;
        }
        while (v7);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_kick_software_id(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (a4 + a3 <= (unint64_t)((*(void *)(a1 + 64) - v6) >> 3))
    {
      if (a4)
      {
        uint64_t v7 = 8 * a4;
        uint64_t v8 = (uint64_t *)(v6 + 8 * a3);
        do
        {
          uint64_t v9 = *v8++;
          *a2++ = v9;
          v7 -= 8;
        }
        while (v7);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_kicks_num(uint64_t result)
{
  if (result) {
    return (uint64_t)(*(void *)(result + 16) - *(void *)(result + 8)) >> 3;
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_num(uint64_t result)
{
  if (result) {
    return (uint64_t)(*(void *)(result + 25984) - *(void *)(result + 25976)) >> 3;
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_index(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)result + 16))();
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_values_by_index(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(*(void *)a1 + 8) == a3)
    {
      return 0;
    }
    else
    {
      *a2 = *(void *)(a1 + 24 * a3 + 776);
      return 1;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_group_metadata_by_index(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(*a1 + 8) == a3)
    {
      return 0;
    }
    else
    {
      *a2 = a1[3 * (*(unsigned int (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a3) + 3097];
      return 1;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_values_num_by_index(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(*(void *)a1 + 8) == a3)
    {
      return 0;
    }
    else
    {
      *a2 = (uint64_t)(*(void *)(a1 + 24 * a3 + 784) - *(void *)(a1 + 24 * a3 + 776)) >> 3;
      return 1;
    }
  }
  return result;
}

uint64_t sub_2EA78(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_2EAFC((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_2EAE4(_Unwind_Exception *a1)
{
  sub_2EE4C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_2EAFC(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = sub_2EB8C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_2EB8C(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_3;
  }
  int v5 = *a5;
  int v6 = *((_DWORD *)a2 + 8);
  if (*a5 < v6) {
    goto LABEL_3;
  }
  if (v6 < v5)
  {
LABEL_9:
    uint64_t v10 = a2[1];
    if (v10)
    {
      unint64_t v11 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v11;
        unint64_t v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      int v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        BOOL v13 = *a4 == v22;
        int v22 = (uint64_t *)a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      int v23 = *((_DWORD *)a4 + 8);
      if (v5 >= v23)
      {
        if (v23 < v5) {
          return sub_2EDB4((uint64_t)a1, a3, a5);
        }
        int v24 = a5[1];
        int v25 = *((_DWORD *)a4 + 9);
        if (v24 >= v25 && (v25 < v24 || a5[2] >= *((_DWORD *)a4 + 10))) {
          return sub_2EDB4((uint64_t)a1, a3, a5);
        }
      }
    }
    if (v10)
    {
      *a3 = (uint64_t *)a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return (uint64_t *)a4;
  }
  int v16 = a5[1];
  int v17 = *((_DWORD *)a2 + 9);
  if (v16 >= v17 && (v17 < v16 || a5[2] >= *((_DWORD *)a2 + 10)))
  {
    int v18 = *((_DWORD *)a2 + 9);
    int v19 = a5[1];
    if (v18 >= v19 && (v19 < v18 || *((_DWORD *)a2 + 10) >= a5[2]))
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v7 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    uint64_t v9 = a2;
  }
  else
  {
    if (v7)
    {
      uint64_t v8 = (uint64_t *)*a2;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      uint64_t v12 = a2;
      do
      {
        uint64_t v9 = (uint64_t *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        uint64_t v12 = v9;
      }
      while (v13);
    }
    int v14 = *((_DWORD *)v9 + 8);
    if (v14 >= *a5)
    {
      if (*a5 < v14) {
        return sub_2EDB4((uint64_t)a1, a3, a5);
      }
      int v20 = *((_DWORD *)v9 + 9);
      int v21 = a5[1];
      if (v20 >= v21 && (v21 < v20 || *((_DWORD *)v9 + 10) >= a5[2])) {
        return sub_2EDB4((uint64_t)a1, a3, a5);
      }
    }
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_2EDB4(uint64_t a1, void *a2, int *a3)
{
  int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    int v7 = a3[1];
    int v8 = a3[2];
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v4;
        int v10 = *((_DWORD *)v4 + 8);
        if (v6 >= v10) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v9;
        uint64_t result = v9;
        if (!*v9) {
          goto LABEL_17;
        }
      }
      if (v10 >= v6)
      {
        int v11 = *((_DWORD *)v9 + 9);
        if (v7 < v11 || v11 >= v7 && v8 < *((_DWORD *)v9 + 10)) {
          goto LABEL_4;
        }
        int v12 = *((_DWORD *)v9 + 9);
        if (v12 >= v7 && (v7 < v12 || *((_DWORD *)v9 + 10) >= v8)) {
          goto LABEL_17;
        }
      }
      uint64_t result = v9 + 1;
      uint64_t v4 = (uint64_t *)v9[1];
      if (!v4) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v9 = result;
LABEL_17:
  *a2 = v9;
  return result;
}

void sub_2EE4C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2EE4C(a1, *a2);
    sub_2EE4C(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_2EEA0(uint64_t a1, int *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t result = sub_2EF1C(a1, a2, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  int v5 = *((_DWORD *)result + 8);
  if (*a2 < v5) {
    return v3;
  }
  if (v5 >= *a2)
  {
    int v6 = a2[1];
    int v7 = *((_DWORD *)result + 9);
    if (v6 < v7 || v7 >= v6 && a2[2] < *((_DWORD *)result + 10)) {
      return v3;
    }
  }
  return result;
}

uint64_t *sub_2EF1C(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    int v5 = *a2;
    int v6 = a2[1];
    while (1)
    {
      int v7 = *((_DWORD *)a3 + 8);
      if (v7 >= v5)
      {
        if (v5 < v7) {
          goto LABEL_6;
        }
        int v8 = *((_DWORD *)a3 + 9);
        if (v8 >= v6) {
          break;
        }
      }
      ++a3;
LABEL_7:
      a3 = (uint64_t *)*a3;
      if (!a3) {
        return result;
      }
    }
    if (v6 >= v8)
    {
      if (*((_DWORD *)a3 + 10) < a2[2]) {
        ++a3;
      }
      else {
        uint64_t result = a3;
      }
      goto LABEL_7;
    }
LABEL_6:
    uint64_t result = a3;
    goto LABEL_7;
  }
  return result;
}

void *sub_2EF90(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_2F00C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2EFF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2F00C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_566C();
  }
  uint64_t result = (char *)sub_5714((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

unsigned int *sub_2F050(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = 0;
    uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1[2]);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.i32[0] == 1 && v1[2] - 2049 >= 0xFFFFF80F)
    {
      uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[3]);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.i32[0] == 1 && v1[3] - 8193 >= 0xFFFFE03F)
      {
        uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1[4]);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.i32[0] == 1 && v1[4] - 32769 >= 0xFFFF807F) {
          operator new();
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_2F124(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_7418D0;
  uint8x8_t v3 = (unsigned char *)(a1 + 35148);
  long long v4 = *a2;
  long long v5 = a2[1];
  int v6 = (unsigned char *)(a1 + 29904);
  *(void *)(a1 + 48) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 86) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v7 = (unsigned char *)(a1 + 384);
  uint64_t v8 = 128;
  do
  {
    *(v7 - 224) = 0;
    *uint64_t v7 = 0;
    v7 += 232;
    --v8;
  }
  while (v8);
  uint64_t v9 = 8;
  do
  {
    *(v6 - 48) = 0;
    unsigned char *v6 = 0;
    v6 += 56;
    --v9;
  }
  while (v9);
  int v10 = (unsigned char *)(a1 + 30336);
  uint64_t v11 = 16;
  do
  {
    *(v10 - 32) = 0;
    *int v10 = 0;
    v10 += 40;
    --v11;
  }
  while (v11);
  int v12 = (unsigned char *)(a1 + 31048);
  uint64_t v13 = 255;
  do
  {
    *(v12 - 8) = 0;
    *int v12 = 0;
    v12 += 16;
    --v13;
  }
  while (v13);
  uint64_t v14 = 8;
  do
  {
    *(v3 - 12) = 0;
    *uint8x8_t v3 = 0;
    v3 += 16;
    --v14;
  }
  while (v14);
  uint64_t v15 = (unsigned char *)(a1 + 35276);
  uint64_t v16 = 8;
  do
  {
    *(v15 - 12) = 0;
    unsigned char *v15 = 0;
    v15 += 16;
    --v16;
  }
  while (v16);
  int v17 = (unsigned char *)(a1 + 35404);
  uint64_t v18 = 8;
  do
  {
    *(v17 - 12) = 0;
    unsigned char *v17 = 0;
    v17 += 16;
    --v18;
  }
  while (v18);
  int v19 = (unsigned char *)(a1 + 35528);
  uint64_t v20 = 128;
  do
  {
    *(v19 - 8) = 0;
    unsigned char *v19 = 0;
    v19 += 16;
    --v20;
  }
  while (v20);
  *(_OWORD *)(a1 + 35120) = 0u;
  bzero((void *)(a1 + 37568), 0x1830uLL);
  int v21 = *(_DWORD *)(a1 + 28);
  if (v21 > 1023)
  {
    if (v21 > 4095)
    {
      if (v21 == 4096)
      {
        int v22 = 6;
        goto LABEL_36;
      }
      if (v21 == 0x2000)
      {
        int v22 = 7;
        goto LABEL_36;
      }
    }
    else
    {
      if (v21 == 1024)
      {
        int v22 = 4;
        goto LABEL_36;
      }
      if (v21 == 2048)
      {
        int v22 = 5;
        goto LABEL_36;
      }
    }
  }
  else if (v21 > 255)
  {
    if (v21 == 256)
    {
      int v22 = 2;
      goto LABEL_36;
    }
    if (v21 == 512)
    {
      int v22 = 3;
      goto LABEL_36;
    }
  }
  else
  {
    if (v21 == 64)
    {
      int v22 = 0;
      goto LABEL_36;
    }
    if (v21 == 128)
    {
      int v22 = 1;
LABEL_36:
      *(_DWORD *)(a1 + 100) = v22;
    }
  }
  return a1;
}

uint64_t sub_2F31C(uint64_t a1)
{
  uint8x8_t v2 = *(void ***)(a1 + 8);
  uint8x8_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint8x8_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    long long v5 = &v2[v4 >> 4];
    uint64_t v6 = (uint64_t)*v5 + 272 * (v4 & 0xF);
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 272 * ((*(_DWORD *)(a1 + 40) + (int)v4) & 0xF);
    if (v6 != v7)
    {
      do
      {
        sub_3EE00(v6);
        v6 += 272;
        if (v6 - (void)*v5 == 4352)
        {
          uint64_t v8 = (uint64_t)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != v7);
      uint8x8_t v2 = *(void ***)(a1 + 8);
      uint8x8_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint8x8_t v3 = *(void ***)(a1 + 16);
      uint8x8_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 8;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 16;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      int v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_2F468(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD *a5)
{
  if (a2 && a3)
  {
    unsigned int v620 = 0;
    uint64_t v8 = *(void *)(a1 + 128);
    if (!v8) {
      operator new();
    }
    unsigned int v620 = *(void **)(a1 + 128);
    if (*(unsigned char *)(a1 + 92)) {
      uint64_t v9 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned char *)(a1 + 93)) {
      uint64_t v11 = *(void *)(a1 + 72);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_F63C8(v8, (uint64_t *)(a1 + 136), 1 << (*(_DWORD *)(a1 + 100) + 6), v9, v11);
    uint64_t v582 = *(void *)(v8 + 26024);
    if (a5) {
      *a5 = 0;
    }
    uint64_t v13 = 8 * a3;
    unint64_t v619 = 0;
    if (8 * a3)
    {
      char v576 = a4;
      unint64_t v569 = a5;
      unint64_t v14 = 0;
      uint64_t v585 = 0;
      v581 = (void **)(a1 + 37568);
      uint64_t v573 = a1 + 37616;
      uint64_t v572 = a1 + 35120;
      uint64_t v571 = a1 + 31040;
      uint64_t v568 = a1 + 35520;
      uint64_t v570 = a1 + 30944;
      uint64_t v574 = a1 + 29856;
      uint64_t v575 = a1 + 30304;
      uint64_t v579 = a1 + 160;
      uint64_t v580 = (unint64_t *)(a1 + 72);
      uint64_t v577 = (uint64_t *)(a1 + 56);
      uint64_t v578 = (unsigned char *)(a1 + 93);
      while (1)
      {
        if (v13 - v14 <= 0x2C0)
        {
          memset(__s1, 0, sizeof(__s1));
          uint64_t v12 = memcmp(__s1, (const void *)(a2 + (v14 >> 3)), a3 - (v14 >> 3));
          if (!v12) {
            goto LABEL_880;
          }
        }
        char v618 = 0;
        uint64_t v12 = sub_3F5D8((uint64_t)&v634, a2, (uint64_t *)&v619, &v618);
        if (!v618) {
          break;
        }
        if (v634 >= 0x11)
        {
          int v17 = sub_12C18C();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s1 = 136315650;
            *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/"
                                  "AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
            *(_WORD *)&__s1[12] = 1024;
            *(_DWORD *)&__s1[14] = 994;
            *(_WORD *)&__s1[18] = 2080;
            *(void *)&__s1[20] = "tokenTypeIndex < numTokenTypes";
            _os_log_error_impl(&def_1C1270, v17, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
          }
          uint64_t v12 = sub_12C17C();
          if (v12) {
            uint64_t v12 = sub_12C184();
          }
        }
        else
        {
          uint64_t v15 = (void *)(v582 + 16 * v634);
          uint64_t v16 = v15[1];
          ++*v15;
          v15[1] = v619 - v14 + v16;
        }
        switch(v634)
        {
          case 0u:
            unsigned int v18 = (unsigned __int16)v635;
            if (v635 <= 0x7Fu)
            {
              uint64_t v19 = v579 + 232 * v635;
              uint64_t v20 = v620;
              if (!*(unsigned char *)(v19 + 224))
              {
                char v21 = *(unsigned char *)(a1 + 8);
                *(void *)__s1 = (((v620[3259] - v620[3258]) << 29) - 0x100000000) | (((v620[3256] - v620[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v635;
                char v630 = 0;
                memset(&__s1[40], 0, 48);
                long long v622 = 0u;
                long long v623 = 0u;
                long long v624 = 0u;
                long long __p = 0u;
                long long v626 = 0u;
                char v627 = 0;
                int v631 = 0;
                char v632 = v21;
                sub_45934(v19, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v623 + 1))
                {
                  *(void *)&long long v624 = *((void *)&v623 + 1);
                  operator delete(*((void **)&v623 + 1));
                }
                if ((void)v622)
                {
                  *((void *)&v622 + 1) = v622;
                  operator delete((void *)v622);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                uint64_t v20 = v620;
                unsigned int v18 = (unsigned __int16)v635;
              }
              int v22 = (char **)(v19 + 40);
              sub_47ECC((void *)(v19 + 40), v20);
              sub_48030((void *)(v19 + 40), 0);
              int v23 = (v18 >> 6) & 0x100 | (v18 >> 8) & 0x3F;
              uint64_t v12 = v19 + 56;
              unint64_t v24 = *(void *)(v19 + 56);
              int v25 = *(_WORD **)(v19 + 48);
              if ((unint64_t)v25 >= v24)
              {
                uint64_t v176 = (char *)v25 - *v22;
                if (v176 <= -3) {
                  sub_566C();
                }
                uint64_t v177 = v176 >> 1;
                unint64_t v178 = v24 - (void)*v22;
                if (v178 <= (v176 >> 1) + 1) {
                  unint64_t v179 = v177 + 1;
                }
                else {
                  unint64_t v179 = v178;
                }
                if (v178 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v180 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v180 = v179;
                }
                if (v180) {
                  uint64_t v12 = (uint64_t)sub_45900(v12, v180);
                }
                else {
                  uint64_t v12 = 0;
                }
                uint64_t v287 = (_WORD *)(v12 + 2 * v177);
                _WORD *v287 = v23;
                uint64_t v26 = v287 + 1;
                uint64_t v289 = *(char **)(v19 + 40);
                uint64_t v288 = *(char **)(v19 + 48);
                if (v288 != v289)
                {
                  do
                  {
                    __int16 v290 = *((_WORD *)v288 - 1);
                    v288 -= 2;
                    *--uint64_t v287 = v290;
                  }
                  while (v288 != v289);
                  uint64_t v288 = *v22;
                }
                *(void *)(v19 + 40) = v287;
                *(void *)(v19 + 48) = v26;
                *(void *)(v19 + 56) = v12 + 2 * v180;
                if (v288) {
                  operator delete(v288);
                }
              }
              else
              {
                *int v25 = v23;
                uint64_t v26 = v25 + 1;
              }
              *(void *)(v19 + 48) = v26;
            }
            goto LABEL_864;
          case 1u:
            unint64_t v78 = *(unsigned int *)(a1 + 24);
            unint64_t v79 = *(void *)(a1 + 72);
            if (v79 % v78)
            {
              unint64_t v80 = (v79 + v78 - 1) / v78 * v78;
            }
            else
            {
              if (*(void *)(a1 + 80) == v79 && !*(_DWORD *)(a1 + 96) && *v578) {
                goto LABEL_360;
              }
              unint64_t v80 = v79 + v78;
            }
            *uint64_t v580 = v80;
            uint64_t v150 = v620;
            unsigned int v151 = (unint64_t *)v620[3259];
            unint64_t v152 = v620[3260];
            if ((unint64_t)v151 >= v152)
            {
              uint64_t v12 = v620[3258];
              uint64_t v154 = ((uint64_t)v151 - v12) >> 3;
              if ((unint64_t)(v154 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v155 = v152 - v12;
              unint64_t v156 = (uint64_t)(v152 - v12) >> 2;
              if (v156 <= v154 + 1) {
                unint64_t v156 = v154 + 1;
              }
              if (v155 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v157 = v156;
              }
              if (v157)
              {
                unint64_t v158 = (char *)sub_5714((uint64_t)(v620 + 3260), v157);
                unsigned int v151 = (unint64_t *)v150[3259];
                uint64_t v12 = v150[3258];
              }
              else
              {
                unint64_t v158 = 0;
              }
              double v247 = (unint64_t *)&v158[8 * v154];
              *double v247 = v80;
              char v153 = v247 + 1;
              while (v151 != (unint64_t *)v12)
              {
                unint64_t v248 = *--v151;
                *--double v247 = v248;
              }
              v150[3258] = v247;
              v150[3259] = v153;
              v150[3260] = &v158[8 * v157];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              unint64_t *v151 = v80;
              char v153 = v151 + 1;
            }
            v150[3259] = v153;
            if (!(v80 % v78)) {
              v150[3264] = ((((void)v153 - v150[3258]) << 29) - 0x100000000) | (((v150[3256]
            }
                                                                                                  - v150[3255]) >> 3)
                                                                                  - 1);
LABEL_360:
            ++*(_DWORD *)(a1 + 96);
            goto LABEL_864;
          case 2u:
            uint64_t v47 = v620;
            uint64_t v48 = v620[3259];
            uint64_t v49 = v620[3258];
            if (v48 - v49 == 8 && !*(void *)(v48 - 8)) {
              v620[3259] = v49;
            }
            uint64_t v50 = *(void *)(a1 + 56) + (1 << (*(_DWORD *)(a1 + 100) + 6));
            unint64_t v51 = sub_3EFB8(a1, (uint64_t)v47, v635 & 0xFFFFF, v50);
            uint64_t v12 = sub_F6A5C((uint64_t)v47, v578, *(unsigned int *)(a1 + 24), v580, v51);
            if (v51 < *(void *)(a1 + 72))
            {
              int v52 = sub_12C18C();
              if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1091;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "uscTimestamp >= parser->lastUSCTimestamp";
                _os_log_error_impl(&def_1C1270, v52, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            unint64_t v53 = v620;
            unint64_t v54 = *(unsigned int *)(a1 + 24);
            int v55 = (unint64_t *)v620[3259];
            unint64_t v56 = v620[3260];
            if ((unint64_t)v55 >= v56)
            {
              uint64_t v12 = v620[3258];
              uint64_t v140 = ((uint64_t)v55 - v12) >> 3;
              if ((unint64_t)(v140 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v141 = v56 - v12;
              unint64_t v142 = (uint64_t)(v56 - v12) >> 2;
              if (v142 <= v140 + 1) {
                unint64_t v142 = v140 + 1;
              }
              if (v141 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v143 = v142;
              }
              if (v143)
              {
                double v144 = (char *)sub_5714((uint64_t)(v620 + 3260), v143);
                int v55 = (unint64_t *)v53[3259];
                uint64_t v12 = v53[3258];
              }
              else
              {
                double v144 = 0;
              }
              unsigned int v205 = (unint64_t *)&v144[8 * v140];
              *unsigned int v205 = v51;
              uint64_t v57 = v205 + 1;
              while (v55 != (unint64_t *)v12)
              {
                unint64_t v206 = *--v55;
                *--unsigned int v205 = v206;
              }
              v53[3258] = v205;
              v53[3259] = v57;
              v53[3260] = &v144[8 * v143];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *int v55 = v51;
              uint64_t v57 = v55 + 1;
            }
            v53[3259] = v57;
            if (!(v51 % v54)) {
              v53[3264] = ((((void)v57 - v53[3258]) << 29) - 0x100000000) | (((v53[3256] - v53[3255]) >> 3)
            }
                                                                               - 1);
            *(void *)(a1 + 72) = v51;
            *(void *)(a1 + 80) = v51;
            *(_DWORD *)(a1 + 88) = v635 & 0xFFFFF;
            *(_DWORD *)(a1 + 96) = 0;
            uint64_t v207 = v620;
            char v208 = (uint64_t *)v620[3256];
            unint64_t v209 = v620[3257];
            if ((unint64_t)v208 >= v209)
            {
              uint64_t v12 = v620[3255];
              uint64_t v211 = ((uint64_t)v208 - v12) >> 3;
              if ((unint64_t)(v211 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v212 = v209 - v12;
              unint64_t v213 = (uint64_t)(v209 - v12) >> 2;
              if (v213 <= v211 + 1) {
                unint64_t v213 = v211 + 1;
              }
              if (v212 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v214 = v213;
              }
              if (v214)
              {
                unint64_t v215 = (char *)sub_5714((uint64_t)(v620 + 3257), v214);
                char v208 = (uint64_t *)v207[3256];
                uint64_t v12 = v207[3255];
              }
              else
              {
                unint64_t v215 = 0;
              }
              unint64_t v216 = (uint64_t *)&v215[8 * v211];
              *unint64_t v216 = v50;
              uint64_t v210 = v216 + 1;
              while (v208 != (uint64_t *)v12)
              {
                uint64_t v217 = *--v208;
                *--unint64_t v216 = v217;
              }
              v207[3255] = v216;
              v207[3256] = v210;
              v207[3257] = &v215[8 * v214];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              uint64_t *v208 = v50;
              uint64_t v210 = v208 + 1;
            }
            v207[3256] = v210;
            uint64_t *v577 = v50;
            unint64_t v218 = v620;
            uint64_t v219 = (((v620[3259] - v620[3258]) << 29) - 0x100000000) | (((v620[3256] - v620[3255]) >> 3)
                                                                        - 1);
            uint64_t v220 = (uint64_t *)v620[3262];
            unint64_t v221 = v620[3263];
            if ((unint64_t)v220 >= v221)
            {
              double v223 = (void **)(v620 + 3261);
              uint64_t v224 = v620[3261];
              uint64_t v225 = ((uint64_t)v220 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v226 = v221 - v224;
              uint64_t v227 = v226 >> 2;
              if (v226 >> 2 <= (unint64_t)(v225 + 1)) {
                uint64_t v227 = v225 + 1;
              }
              if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v620 + 3263), v228);
              }
              else {
                uint64_t v12 = 0;
              }
              double v243 = (uint64_t *)(v12 + 8 * v225);
              uint64_t *v243 = v219;
              uint64_t v222 = v243 + 1;
              double v244 = (char *)v218[3262];
              double v245 = (char *)v218[3261];
              if (v244 != v245)
              {
                do
                {
                  uint64_t v246 = *((void *)v244 - 1);
                  v244 -= 8;
                  *--double v243 = v246;
                }
                while (v244 != v245);
                double v244 = (char *)*v223;
              }
              v218[3261] = v243;
              v218[3262] = v222;
              v218[3263] = v12 + 8 * v228;
              if (v244) {
                operator delete(v244);
              }
            }
            else
            {
              uint64_t *v220 = v219;
              uint64_t v222 = v220 + 1;
            }
            v218[3262] = v222;
            goto LABEL_864;
          case 3u:
            uint64_t v63 = v620;
            uint64_t v64 = v620[3256];
            uint64_t v65 = v620[3255];
            if (v64 - v65 == 8 && !*(void *)(v64 - 8)) {
              v620[3256] = v65;
            }
            uint64_t v66 = v63[3259];
            uint64_t v67 = v63[3258];
            if (v66 - v67 == 8 && !*(void *)(v66 - 8)) {
              v63[3259] = v67;
            }
            unint64_t v68 = *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v69 = sub_3EFB8(a1, (uint64_t)v63, v635 & 0xFFFFF, *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL);
            sub_F6A04((uint64_t)v63, (unsigned char *)(a1 + 92), 1 << (*(_DWORD *)(a1 + 100) + 6), v577, v68);
            uint64_t v12 = sub_F6A5C((uint64_t)v620, v578, *(unsigned int *)(a1 + 24), v580, v69);
            if ((*((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFuLL) <= *(void *)(a1 + 56))
            {
              unint64_t v70 = sub_12C18C();
              if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1035;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "token.bits.tok.timeStamp.systemTime > parser->lastSystemTimestamp";
                _os_log_error_impl(&def_1C1270, v70, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            double v71 = v620;
            uint64_t v72 = *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL;
            int v73 = (uint64_t *)v620[3256];
            unint64_t v74 = v620[3257];
            if ((unint64_t)v73 >= v74)
            {
              uint64_t v12 = v620[3255];
              uint64_t v145 = ((uint64_t)v73 - v12) >> 3;
              if ((unint64_t)(v145 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v146 = v74 - v12;
              unint64_t v147 = (uint64_t)(v74 - v12) >> 2;
              if (v147 <= v145 + 1) {
                unint64_t v147 = v145 + 1;
              }
              if (v146 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v148 = v147;
              }
              if (v148)
              {
                uint64_t v149 = (char *)sub_5714((uint64_t)(v620 + 3257), v148);
                int v73 = (uint64_t *)v71[3256];
                uint64_t v12 = v71[3255];
              }
              else
              {
                uint64_t v149 = 0;
              }
              double v229 = (uint64_t *)&v149[8 * v145];
              *double v229 = v72;
              double v75 = v229 + 1;
              while (v73 != (uint64_t *)v12)
              {
                uint64_t v230 = *--v73;
                *--double v229 = v230;
              }
              v71[3255] = v229;
              v71[3256] = v75;
              v71[3257] = &v149[8 * v148];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *int v73 = v72;
              double v75 = v73 + 1;
            }
            v71[3256] = v75;
            unint64_t v231 = *v580;
            if (v69 <= *v580)
            {
              if (v69 >= *v580) {
                goto LABEL_483;
              }
              *(void *)(a1 + 80) = v231;
              int v237 = (v635 & 0xFFFFF) + v69 - v231;
            }
            else
            {
              double v232 = v620;
              unint64_t v233 = *(unsigned int *)(a1 + 24);
              uint64_t v234 = (unint64_t *)v620[3259];
              unint64_t v235 = v620[3260];
              if ((unint64_t)v234 >= v235)
              {
                uint64_t v12 = v620[3258];
                uint64_t v238 = ((uint64_t)v234 - v12) >> 3;
                if ((unint64_t)(v238 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v239 = v235 - v12;
                unint64_t v240 = (uint64_t)(v235 - v12) >> 2;
                if (v240 <= v238 + 1) {
                  unint64_t v240 = v238 + 1;
                }
                if (v239 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v241 = v240;
                }
                if (v241)
                {
                  double v242 = (char *)sub_5714((uint64_t)(v620 + 3260), v241);
                  uint64_t v234 = (unint64_t *)v232[3259];
                  uint64_t v12 = v232[3258];
                }
                else
                {
                  double v242 = 0;
                }
                uint64_t v315 = (unint64_t *)&v242[8 * v238];
                *uint64_t v315 = v69;
                int v236 = v315 + 1;
                while (v234 != (unint64_t *)v12)
                {
                  unint64_t v316 = *--v234;
                  *--uint64_t v315 = v316;
                }
                v232[3258] = v315;
                v232[3259] = v236;
                v232[3260] = &v242[8 * v241];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v234 = v69;
                int v236 = v234 + 1;
              }
              v232[3259] = v236;
              if (!(v69 % v233)) {
                v232[3264] = ((((void)v236 - v232[3258]) << 29) - 0x100000000) | (((v232[3256] - v232[3255]) >> 3)
              }
                                                                                    - 1);
              *(void *)(a1 + 72) = v69;
              *(void *)(a1 + 80) = v69;
              int v237 = v635 & 0xFFFFF;
            }
            *(_DWORD *)(a1 + 88) = v237;
LABEL_483:
            *(_DWORD *)(a1 + 96) = 0;
            uint64_t v317 = v620;
            uint64_t v318 = (((v620[3259] - v620[3258]) << 29) - 0x100000000) | (((v620[3256] - v620[3255]) >> 3)
                                                                        - 1);
            unint64_t v319 = (uint64_t *)v620[3262];
            unint64_t v320 = v620[3263];
            if ((unint64_t)v319 >= v320)
            {
              uint64_t v322 = (void **)(v620 + 3261);
              uint64_t v323 = v620[3261];
              uint64_t v324 = ((uint64_t)v319 - v323) >> 3;
              if ((unint64_t)(v324 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v325 = v320 - v323;
              uint64_t v326 = v325 >> 2;
              if (v325 >> 2 <= (unint64_t)(v324 + 1)) {
                uint64_t v326 = v324 + 1;
              }
              if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v327 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v327 = v326;
              }
              if (v327) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v620 + 3263), v327);
              }
              else {
                uint64_t v12 = 0;
              }
              double v328 = (uint64_t *)(v12 + 8 * v324);
              *double v328 = v318;
              unint64_t v321 = v328 + 1;
              double v329 = (char *)v317[3262];
              uint64_t v330 = (char *)v317[3261];
              if (v329 != v330)
              {
                do
                {
                  uint64_t v331 = *((void *)v329 - 1);
                  v329 -= 8;
                  *--double v328 = v331;
                }
                while (v329 != v330);
                double v329 = (char *)*v322;
              }
              v317[3261] = v328;
              v317[3262] = v321;
              v317[3263] = v12 + 8 * v327;
              if (v329) {
                operator delete(v329);
              }
            }
            else
            {
              *unint64_t v319 = v318;
              unint64_t v321 = v319 + 1;
            }
            v317[3262] = v321;
            uint64_t v332 = *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 56) = *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 64) = v332;
            *(_DWORD *)(a1 + 100) = v636;
            goto LABEL_864;
          case 4u:
            uint64_t v30 = sub_12C18C();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1153;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "false";
              _os_log_error_impl(&def_1C1270, v30, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            goto LABEL_864;
          case 5u:
            int v81 = v635;
            unsigned int v82 = BYTE4(v635);
            BOOL v83 = v635 == 1;
            unsigned __int8 v84 = BYTE4(v635) & 7 | 0x60;
            if (v635 != 1) {
              unsigned __int8 v84 = BYTE4(v635);
            }
            if ((v84 & 0x80) != 0) {
              goto LABEL_864;
            }
            char v85 = BYTE5(v635);
            unsigned int v86 = DWORD2(v635);
            unsigned __int8 v87 = v84;
            unsigned int v88 = v84;
            uint64_t v89 = v579 + 232 * v84;
            if (!*(unsigned char *)(v89 + 224))
            {
              char v90 = *(unsigned char *)(a1 + 8);
              *(void *)__s1 = (((v620[3259] - v620[3258]) << 29) - 0x100000000) | (((v620[3256] - v620[3255]) >> 3)
                                                                                     - 1);
              memset(&__s1[16], 255, 20);
              __s1[36] = v84;
              char v630 = 0;
              memset(&__s1[40], 0, 48);
              long long v622 = 0u;
              long long v623 = 0u;
              long long v624 = 0u;
              long long __p = 0u;
              long long v626 = 0u;
              char v627 = 0;
              int v631 = 0;
              char v632 = v90;
              sub_45934(v89, (uint64_t)__s1);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (*((void *)&v623 + 1))
              {
                *(void *)&long long v624 = *((void *)&v623 + 1);
                operator delete(*((void **)&v623 + 1));
              }
              if ((void)v622)
              {
                *((void *)&v622 + 1) = v622;
                operator delete((void *)v622);
              }
              if (*(void *)&__s1[64])
              {
                *(void *)&__s1[72] = *(void *)&__s1[64];
                operator delete(*(void **)&__s1[64]);
              }
              uint64_t v12 = *(void *)&__s1[40];
              if (*(void *)&__s1[40])
              {
                *(void *)&__s1[48] = *(void *)&__s1[40];
                operator delete(*(void **)&__s1[40]);
              }
              if (!*(unsigned char *)(v89 + 224)) {
                sub_8894();
              }
            }
            *(unsigned char *)(v89 + 215) = v83;
            *(unsigned char *)(v89 + 214) = 1;
            *(unsigned char *)(v89 + 36) = v87;
            if (v81)
            {
              uint64_t v91 = *(void *)(a1 + 104);
              if (v91 == -1) {
                uint64_t v91 = 0;
              }
              *(void *)(a1 + 104) = v91 + 1;
              *(void *)(v89 + 16) = v91;
              uint64_t v92 = v568 + 16 * (v85 & 0x7F);
              *(void *)uint64_t v92 = v91;
              *(unsigned char *)(v92 + 8) = 1;
              unsigned int v82 = *(unsigned __int8 *)(v89 + 36);
            }
            else
            {
              *(unsigned char *)(v89 + 36) = v82;
              if (v86 <= 7)
              {
                unsigned int v181 = *(_DWORD *)(v570 + 12 * v86);
                *(_DWORD *)(v89 + 208) = v181;
                if (v181 <= 7)
                {
                  uint64_t v182 = v574 + 56 * v181;
                  if (*(unsigned char *)(v182 + 48)) {
                    *(_DWORD *)(v89 + 32) = *(_DWORD *)(v182 + 24);
                  }
                }
                uint64_t v183 = v568 + 16 * (*(unsigned char *)(v570 + 12 * v86 + 8) & 0x7F);
                if (*(unsigned char *)(v183 + 8)) {
                  *(void *)(v89 + 16) = *(void *)v183;
                }
                if (v86 - 4 <= 2)
                {
                  uint64_t v184 = v575 + 40 * (v86 - 4);
                  if (*(unsigned char *)(v184 + 32)) {
                    *(void *)(v89 + 24) = *(void *)(v184 + 16);
                  }
                }
              }
            }
            if (v82 < 0x60) {
              goto LABEL_257;
            }
            if (v82 >= 0x68)
            {
              if (v82 < 0x98) {
                goto LABEL_864;
              }
            }
            else if (*(unsigned char *)(v89 + 215))
            {
              goto LABEL_864;
            }
LABEL_257:
            BOOL v185 = (*(_DWORD *)(v89 + 208) - 5) >= 0xFFFFFFFE && *(unsigned char *)(v89 + 216) == 0;
            if (!v185 && *(void *)(v573 + 48 * v88 + 40))
            {
              uint64_t v186 = v573 + 48 * v88;
              uint64_t v188 = *(void *)(v186 + 8);
              unint64_t v187 = (void *)(v186 + 8);
              if (*(unsigned char *)(*(void *)(*(void *)(v188 + ((v187[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v187[3] & 0x1FFLL))
                            + 32))
              {
                uint64_t v189 = sub_12C18C();
                if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__s1 = 136315650;
                  *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSu"
                                        "pport/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                  *(_WORD *)&__s1[12] = 1024;
                  *(_DWORD *)&__s1[14] = 1429;
                  *(_WORD *)&__s1[18] = 2080;
                  *(void *)&__s1[20] = "!pendingPositionsForClique.front()->cliqueStartSeen";
                  _os_log_error_impl(&def_1C1270, v189, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
                }
                if (sub_12C17C()) {
                  sub_12C184();
                }
              }
              *(unsigned char *)(*(void *)(*(void *)(*v187 + ((v187[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (v187[3] & 0x1FFLL))
                       + 32) = 1;
              *(unsigned char *)(v89 + 213) = 1;
              sub_45B1C(a1, v620);
            }
            goto LABEL_864;
          case 6u:
            sub_3F3AC(a1, v620, v635, 0);
            goto LABEL_864;
          case 7u:
            if (DWORD1(v635) == 1)
            {
              uint64_t v76 = (*((void *)&v635 + 1) >> 5) & 0x7FFFFFFFFFFLL;
              uint64_t v77 = v571 + 16 * (BYTE8(v635) & 0x1F);
              *(void *)uint64_t v77 = v76;
              *(unsigned char *)(v77 + 8) = 1;
            }
            else
            {
              if (BYTE8(v635) == 255) {
                goto LABEL_864;
              }
              uint64_t v134 = v571 + 16 * BYTE8(v635);
              if (!*(unsigned char *)(v134 + 8)) {
                goto LABEL_864;
              }
              uint64_t v76 = *(void *)v134;
            }
            if (((char)v635 & 0x80000000) == 0)
            {
              uint64_t v135 = v579 + 232 * v635;
              if (!*(unsigned char *)(v135 + 224))
              {
                char v136 = *(unsigned char *)(a1 + 8);
                *(void *)__s1 = (((v620[3259] - v620[3258]) << 29) - 0x100000000) | (((v620[3256] - v620[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v635;
                char v630 = 0;
                memset(&__s1[40], 0, 48);
                long long v622 = 0u;
                long long v623 = 0u;
                long long v624 = 0u;
                long long __p = 0u;
                long long v626 = 0u;
                char v627 = 0;
                int v631 = 0;
                char v632 = v136;
                sub_45934(v135, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v623 + 1))
                {
                  *(void *)&long long v624 = *((void *)&v623 + 1);
                  operator delete(*((void **)&v623 + 1));
                }
                if ((void)v622)
                {
                  *((void *)&v622 + 1) = v622;
                  operator delete((void *)v622);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                uint64_t v12 = *(void *)&__s1[40];
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
              }
              unint64_t v137 = *(void *)(v135 + 80);
              double v138 = *(uint64_t **)(v135 + 72);
              if ((unint64_t)v138 >= v137)
              {
                uint64_t v12 = *(void *)(v135 + 64);
                uint64_t v190 = ((uint64_t)v138 - v12) >> 3;
                if ((unint64_t)(v190 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v191 = v137 - v12;
                unint64_t v192 = (uint64_t)(v137 - v12) >> 2;
                if (v192 <= v190 + 1) {
                  unint64_t v192 = v190 + 1;
                }
                if (v191 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v193 = v192;
                }
                if (v193)
                {
                  char v194 = (char *)sub_5714(v135 + 80, v193);
                  uint64_t v12 = *(void *)(v135 + 64);
                  double v138 = *(uint64_t **)(v135 + 72);
                }
                else
                {
                  char v194 = 0;
                }
                double v333 = (uint64_t *)&v194[8 * v190];
                uint64_t *v333 = v76;
                double v139 = v333 + 1;
                while (v138 != (uint64_t *)v12)
                {
                  uint64_t v334 = *--v138;
                  *--double v333 = v334;
                }
                *(void *)(v135 + 64) = v333;
                *(void *)(v135 + 72) = v139;
                *(void *)(v135 + 80) = &v194[8 * v193];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                uint64_t *v138 = v76;
                double v139 = v138 + 1;
              }
              *(void *)(v135 + 72) = v139;
            }
            goto LABEL_864;
          case 8u:
            double v110 = (void *)(a1 + 37568);
            double v111 = *(char **)(a1 + 37584);
            unsigned int v112 = v635;
            double v113 = *(char **)(a1 + 37576);
            uint64_t v114 = v111 - v113;
            *(_OWORD *)__s1 = v635;
            *(_OWORD *)&__s1[16] = v636;
            __s1[32] = 0;
            __s1[40] = 0;
            unsigned __int8 v633 = 0;
            if (v111 == v113) {
              uint64_t v115 = 0;
            }
            else {
              uint64_t v115 = 2 * (v111 - v113) - 1;
            }
            unint64_t v116 = *(void *)(a1 + 37600);
            if (v115 != *(void *)(a1 + 37608) + v116) {
              goto LABEL_751;
            }
            BOOL v117 = v116 >= 0x10;
            unint64_t v118 = v116 - 16;
            if (v117)
            {
              double v110 = (void *)(a1 + 37568);
              *(void *)(a1 + 37600) = v118;
              uint64_t v121 = *(void *)v113;
              unint64_t v120 = v113 + 8;
              uint64_t v119 = v121;
              *(void *)(a1 + 37576) = v120;
              if (v111 == *(char **)(a1 + 37592))
              {
                double v122 = (char *)*v581;
                if (v120 <= *v581)
                {
                  if (v111 == v122) {
                    unint64_t v342 = 1;
                  }
                  else {
                    unint64_t v342 = (v111 - v122) >> 2;
                  }
                  if (v342 >> 61) {
LABEL_922:
                  }
                    sub_574C();
                  double v343 = (char *)operator new(8 * v342);
                  double v344 = &v343[8 * (v342 >> 2)];
                  uint64_t v345 = v111 - v120;
                  BOOL v185 = v111 == v120;
                  double v111 = v344;
                  if (!v185)
                  {
                    double v111 = &v344[v345 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v346 = 8 * (v345 >> 3);
                    double v347 = &v343[8 * (v342 >> 2)];
                    do
                    {
                      uint64_t v348 = *(void *)v120;
                      v120 += 8;
                      *(void *)double v347 = v348;
                      v347 += 8;
                      v346 -= 8;
                    }
                    while (v346);
                  }
                  double v110 = (void *)(a1 + 37568);
                  unsigned __int8 *v581 = v343;
                  *(void *)(a1 + 37576) = v344;
                  *(void *)(a1 + 37584) = v111;
                  *(void *)(a1 + 37592) = &v343[8 * v342];
                  if (v122)
                  {
                    operator delete(v122);
                    double v111 = *(char **)(a1 + 37584);
                  }
                }
                else
                {
                  uint64_t v123 = (v120 - (unsigned char *)*v581) >> 3;
                  if (v123 >= -1) {
                    uint64_t v124 = v123 + 1;
                  }
                  else {
                    uint64_t v124 = v123 + 2;
                  }
                  double v125 = &v120[-8 * (v124 >> 1)];
                  int64_t v126 = v111 - v120;
                  double v110 = (void *)(a1 + 37568);
                  if (v111 != v120)
                  {
                    memmove(&v120[-8 * (v124 >> 1)], v120, v111 - v120);
                    double v111 = *(char **)(a1 + 37576);
                  }
                  unint64_t v127 = &v111[-8 * (v124 >> 1)];
                  double v111 = &v125[v126];
                  *(void *)(a1 + 37576) = v127;
                  *(void *)(a1 + 37584) = &v125[v126];
                }
              }
              *(void *)double v111 = v119;
              goto LABEL_750;
            }
            uint64_t v170 = v114 >> 3;
            double v171 = *(char **)(a1 + 37592);
            unint64_t v172 = (char *)*v581;
            uint64_t v173 = v171 - (unsigned char *)*v581;
            if (v114 >> 3 < (unint64_t)(v173 >> 3))
            {
              uint64_t v174 = operator new(0x1100uLL);
              uint64_t v175 = v174;
              if (v171 == v111)
              {
                if (v113 == v172)
                {
                  if (v111 == v113) {
                    unint64_t v441 = 1;
                  }
                  else {
                    unint64_t v441 = (v171 - v113) >> 2;
                  }
                  if (v441 >> 61) {
                    goto LABEL_922;
                  }
                  double v442 = (char *)operator new(8 * v441);
                  double v349 = &v442[(2 * v441 + 6) & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v443 = v349;
                  if (v111 != v113)
                  {
                    uint64_t v444 = 8 * v170;
                    v445 = &v442[(2 * v441 + 6) & 0xFFFFFFFFFFFFFFF8];
                    int v446 = v113;
                    uint64_t v443 = &v349[8 * v170];
                    do
                    {
                      uint64_t v447 = *(void *)v446;
                      v446 += 8;
                      *(void *)v445 = v447;
                      v445 += 8;
                      v444 -= 8;
                    }
                    while (v444);
                  }
                  double v350 = (void *)(a1 + 37568);
                  unsigned __int8 *v581 = v442;
                  *(void *)(a1 + 37576) = v349;
                  *(void *)(a1 + 37584) = v443;
                  *(void *)(a1 + 37592) = &v442[8 * v441];
                  if (v113)
                  {
                    operator delete(v113);
                    double v349 = *(char **)(a1 + 37576);
                  }
                }
                else
                {
                  double v349 = v113;
                  double v350 = (void *)(a1 + 37568);
                }
                *((void *)v349 - 1) = v175;
                int v449 = (char *)v350[1];
                double v448 = (char *)v350[2];
                v350[1] = v449 - 8;
                uint64_t v450 = *((void *)v449 - 1);
                v350[1] = v449;
                if (v448 == (char *)v350[3])
                {
                  v451 = (char *)*v581;
                  if (v449 <= *v581)
                  {
                    if (v448 == v451) {
                      unint64_t v458 = 1;
                    }
                    else {
                      unint64_t v458 = (v448 - v451) >> 2;
                    }
                    if (v458 >> 61) {
                      goto LABEL_922;
                    }
                    uint64_t v459 = (char *)operator new(8 * v458);
                    double v460 = &v459[8 * (v458 >> 2)];
                    uint64_t v461 = v448 - v449;
                    BOOL v185 = v448 == v449;
                    double v448 = v460;
                    if (!v185)
                    {
                      double v448 = &v460[v461 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v462 = 8 * (v461 >> 3);
                      uint64_t v463 = &v459[8 * (v458 >> 2)];
                      do
                      {
                        uint64_t v464 = *(void *)v449;
                        v449 += 8;
                        *(void *)uint64_t v463 = v464;
                        v463 += 8;
                        v462 -= 8;
                      }
                      while (v462);
                    }
                    unsigned __int8 *v581 = v459;
                    *(void *)(a1 + 37576) = v460;
                    *(void *)(a1 + 37584) = v448;
                    *(void *)(a1 + 37592) = &v459[8 * v458];
                    if (v451)
                    {
                      operator delete(v451);
                      double v448 = *(char **)(a1 + 37584);
                    }
                  }
                  else
                  {
                    unsigned int v452 = v112;
                    uint64_t v453 = (v449 - (unsigned char *)*v581) >> 3;
                    if (v453 >= -1) {
                      uint64_t v454 = v453 + 1;
                    }
                    else {
                      uint64_t v454 = v453 + 2;
                    }
                    int v455 = &v449[-8 * (v454 >> 1)];
                    int64_t v456 = v448 - v449;
                    if (v448 == v449)
                    {
                      uint64_t v457 = a1 + 37568;
                    }
                    else
                    {
                      memmove(&v449[-8 * (v454 >> 1)], v449, v448 - v449);
                      uint64_t v457 = a1 + 37568;
                      int v449 = *(char **)(a1 + 37576);
                    }
                    double v448 = &v455[v456];
                    *(void *)(v457 + 8) = &v449[-8 * (v454 >> 1)];
                    *(void *)(v457 + 16) = &v455[v456];
                    unsigned int v112 = v452;
                  }
                }
                *(void *)double v448 = v450;
              }
              else
              {
                *(void *)double v111 = v174;
              }
              double v110 = (void *)(a1 + 37568);
LABEL_750:
              v110[2] += 8;
              goto LABEL_751;
            }
            uint64_t v253 = v173 >> 2;
            if (v171 == v172) {
              unint64_t v254 = 1;
            }
            else {
              unint64_t v254 = v253;
            }
            if (v254 >> 61) {
              goto LABEL_922;
            }
            unint64_t v255 = (char *)operator new(8 * v254);
            unsigned int v565 = v112;
            unint64_t v256 = operator new(0x1100uLL);
            uint64_t v257 = &v255[8 * v170];
            uint64_t v258 = &v255[8 * v254];
            if (v170 == v254)
            {
              if (v114 < 1)
              {
                if (v111 == v113) {
                  unint64_t v425 = 1;
                }
                else {
                  unint64_t v425 = v114 >> 2;
                }
                if (v425 >> 61) {
                  sub_574C();
                }
                uint64_t v426 = (char *)operator new(8 * v425);
                uint64_t v257 = &v426[8 * (v425 >> 2)];
                uint64_t v258 = &v426[8 * v425];
                operator delete(v255);
                double v113 = *(char **)(a1 + 37576);
                double v111 = *(char **)(a1 + 37584);
                unint64_t v255 = v426;
              }
              else
              {
                unint64_t v259 = v170 + 2;
                if (v170 >= -1) {
                  unint64_t v259 = v170 + 1;
                }
                v257 -= 8 * (v259 >> 1);
              }
            }
            *(void *)uint64_t v257 = v256;
            uint64_t v427 = v257 + 8;
            if (v111 != v113)
            {
              do
              {
                if (v257 == v255)
                {
                  if (v427 >= v258)
                  {
                    if (v258 == v257) {
                      unint64_t v432 = 1;
                    }
                    else {
                      unint64_t v432 = (v258 - v257) >> 2;
                    }
                    if (v432 >> 61) {
                      sub_574C();
                    }
                    char v433 = (char *)operator new(8 * v432);
                    unint64_t v255 = v433;
                    unsigned __int8 v428 = &v433[(2 * v432 + 6) & 0xFFFFFFFFFFFFFFF8];
                    unsigned __int8 v429 = v428;
                    uint64_t v434 = v427 - v257;
                    if (v427 != v257)
                    {
                      unsigned __int8 v429 = &v428[v434 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v435 = 8 * (v434 >> 3);
                      uint64_t v436 = &v433[(2 * v432 + 6) & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v437 = v257;
                      do
                      {
                        uint64_t v438 = *(void *)v437;
                        v437 += 8;
                        *(void *)uint64_t v436 = v438;
                        v436 += 8;
                        v435 -= 8;
                      }
                      while (v435);
                    }
                    uint64_t v258 = &v433[8 * v432];
                    operator delete(v257);
                  }
                  else
                  {
                    uint64_t v430 = (v258 - v427) >> 3;
                    if (v430 >= -1) {
                      unint64_t v431 = v430 + 1;
                    }
                    else {
                      unint64_t v431 = v430 + 2;
                    }
                    unsigned __int8 v429 = &v427[8 * (v431 >> 1)];
                    unsigned __int8 v428 = &v257[8 * (v431 >> 1)];
                    if (v427 == v257)
                    {
                      unint64_t v255 = v427;
                    }
                    else
                    {
                      memmove(&v257[8 * (v431 >> 1)], v257, v427 - v257);
                      unint64_t v255 = v257;
                    }
                  }
                }
                else
                {
                  unsigned __int8 v428 = v257;
                  unsigned __int8 v429 = v427;
                }
                uint64_t v439 = *((void *)v111 - 1);
                v111 -= 8;
                *((void *)v428 - 1) = v439;
                uint64_t v257 = v428 - 8;
                uint64_t v427 = v429;
              }
              while (v111 != *(char **)(a1 + 37576));
            }
            double v110 = (void *)(a1 + 37568);
            int v440 = *v581;
            unsigned __int8 *v581 = v255;
            *(void *)(a1 + 37576) = v257;
            *(void *)(a1 + 37584) = v427;
            *(void *)(a1 + 37592) = v258;
            unsigned int v112 = v565;
            if (v440) {
              operator delete(v440);
            }
LABEL_751:
            unint64_t v465 = v110[5] + v110[4];
            uint64_t v466 = *(void *)(v110[1] + ((v465 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v465 & 0xF);
            long long v467 = *(_OWORD *)__s1;
            long long v468 = *(_OWORD *)&__s1[16];
            *(unsigned char *)(v466 + 32) = __s1[32];
            *(_OWORD *)uint64_t v466 = v467;
            *(_OWORD *)(v466 + 16) = v468;
            *(unsigned char *)(v466 + 264) = 0;
            *(unsigned char *)(v466 + 40) = 0;
            uint64_t v12 = v466 + 40;
            if (v633)
            {
              sub_459E8(v12, (long long *)&__s1[40]);
              int v469 = v633;
              ++v110[5];
              if (v469)
              {
                if (v628)
                {
                  int v629 = v628;
                  operator delete(v628);
                }
                if ((void)v626) {
                  operator delete((void *)v626);
                }
                if (*((void *)&v624 + 1)) {
                  operator delete(*((void **)&v624 + 1));
                }
                if ((void)v623) {
                  operator delete((void *)v623);
                }
                uint64_t v12 = *(void *)&__s1[80];
                if (*(void *)&__s1[80]) {
                  operator delete(*(void **)&__s1[80]);
                }
              }
              if ((v112 & 0x80) != 0) {
                goto LABEL_864;
              }
            }
            else
            {
              ++v110[5];
              if ((v112 & 0x80) != 0) {
                goto LABEL_864;
              }
            }
            uint64_t v470 = (uint64_t *)(v573 + 48 * v112);
            unsigned int v471 = (uint64_t *)v470[2];
            char v472 = (uint64_t *)v470[1];
            uint64_t v473 = (((char *)v471 - (char *)v472) << 6) - 1;
            uint64_t v474 = (char *)v471 - (char *)v472;
            uint64_t v475 = *(void *)(a1 + 37608) + *(void *)(a1 + 37600) - 1;
            uint64_t v476 = *(void *)(*(void *)(a1 + 37576) + (((unint64_t)v475 >> 1) & 0x7FFFFFFFFFFFFFF8));
            double v478 = (unint64_t *)(v470 + 4);
            unint64_t v477 = v470[4];
            if (v471 == v472) {
              uint64_t v473 = 0;
            }
            double v479 = v470 + 5;
            if (v473 == v470[5] + v477)
            {
              uint64_t v567 = *(void *)(*(void *)(a1 + 37576) + (((unint64_t)v475 >> 1) & 0x7FFFFFFFFFFFFFF8));
              BOOL v117 = v477 >= 0x200;
              unint64_t v480 = v477 - 512;
              if (v117)
              {
                *double v478 = v480;
                uint64_t v483 = *v472;
                unint64_t v482 = (char *)(v472 + 1);
                uint64_t v481 = v483;
                v470[1] = (uint64_t)v482;
                if (v471 == (uint64_t *)v470[3])
                {
                  char v563 = v475;
                  int v484 = (uint64_t *)*v470;
                  if ((unint64_t)v482 <= *v470)
                  {
                    if (v471 == v484) {
                      uint64_t v475 = 1;
                    }
                    else {
                      uint64_t v475 = ((char *)v471 - (char *)v484) >> 2;
                    }
                    if ((unint64_t)v475 >> 61) {
                      sub_574C();
                    }
                    uint64_t v12 = (uint64_t)operator new(8 * v475);
                    unint64_t v501 = v12 + 8 * ((unint64_t)v475 >> 2);
                    int v502 = (uint64_t *)v501;
                    if (v471 != (uint64_t *)v482)
                    {
                      int v502 = (uint64_t *)(v501 + (((char *)v471 - v482) & 0xFFFFFFFFFFFFFFF8));
                      uint64_t v503 = 8 * (((char *)v471 - v482) >> 3);
                      char v504 = (void *)(v12 + 8 * ((unint64_t)v475 >> 2));
                      do
                      {
                        uint64_t v505 = *(void *)v482;
                        v482 += 8;
                        *v504++ = v505;
                        v503 -= 8;
                      }
                      while (v503);
                    }
                    *uint64_t v470 = v12;
                    v470[1] = v501;
                    v470[2] = (uint64_t)v502;
                    v470[3] = v12 + 8 * v475;
                    unsigned int v471 = v502;
                    LOBYTE(v475) = v563;
                    if (v484)
                    {
                      operator delete(v484);
                      unsigned int v471 = (uint64_t *)v470[2];
                    }
                  }
                  else
                  {
                    uint64_t v485 = (uint64_t)&v482[-*v470] >> 3;
                    if (v485 >= -1) {
                      uint64_t v475 = v485 + 1;
                    }
                    else {
                      uint64_t v475 = v485 + 2;
                    }
                    double v486 = &v482[-8 * (v475 >> 1)];
                    int64_t v487 = (char *)v471 - v482;
                    if (v471 != (uint64_t *)v482)
                    {
                      uint64_t v12 = (uint64_t)memmove(&v482[-8 * (v475 >> 1)], v482, (char *)v471 - v482);
                      unsigned int v471 = (uint64_t *)v470[1];
                    }
                    int v488 = &v471[-(v475 >> 1)];
                    unsigned int v471 = (uint64_t *)&v486[v487];
                    v470[1] = (uint64_t)v488;
                    v470[2] = (uint64_t)&v486[v487];
                    double v478 = (unint64_t *)(v470 + 4);
                    LOBYTE(v475) = v563;
                  }
                }
                *unsigned int v471 = v481;
                v470[2] += 8;
                uint64_t v476 = v567;
              }
              else
              {
                uint64_t v564 = *(void *)(a1 + 37608) + *(void *)(a1 + 37600) - 1;
                unsigned int v566 = v112;
                uint64_t v489 = v474 >> 3;
                unint64_t v490 = (uint64_t *)v470[3];
                unint64_t v491 = (uint64_t *)*v470;
                uint64_t v492 = (uint64_t)v490 - *v470;
                if (v474 >> 3 >= (unint64_t)(v492 >> 3))
                {
                  uint64_t v494 = v492 >> 2;
                  if (v490 == v491) {
                    unint64_t v495 = 1;
                  }
                  else {
                    unint64_t v495 = v494;
                  }
                  if (v495 >> 61) {
                    sub_574C();
                  }
                  double v496 = (char *)operator new(8 * v495);
                  int v497 = operator new(0x1000uLL);
                  int v498 = &v496[8 * v489];
                  double v499 = &v496[8 * v495];
                  if (v489 == v495)
                  {
                    double v562 = v497;
                    double v479 = v470 + 5;
                    if (v474 < 1)
                    {
                      if (v471 == v472) {
                        unint64_t v507 = 1;
                      }
                      else {
                        unint64_t v507 = v474 >> 2;
                      }
                      if (v507 >> 61) {
                        sub_574C();
                      }
                      unint64_t v508 = (char *)operator new(8 * v507);
                      int v498 = &v508[8 * (v507 >> 2)];
                      double v499 = &v508[8 * v507];
                      operator delete(v496);
                      char v472 = (uint64_t *)v470[1];
                      unsigned int v471 = (uint64_t *)v470[2];
                      double v496 = v508;
                    }
                    else
                    {
                      unint64_t v500 = v489 + 2;
                      if (v489 >= -1) {
                        unint64_t v500 = v489 + 1;
                      }
                      v498 -= 8 * (v500 >> 1);
                    }
                    int v497 = v562;
                  }
                  else
                  {
                    double v479 = v470 + 5;
                  }
                  *(void *)int v498 = v497;
                  uint64_t v475 = (uint64_t)(v498 + 8);
                  if (v471 != v472)
                  {
                    do
                    {
                      if (v498 == v496)
                      {
                        if (v475 >= (unint64_t)v499)
                        {
                          if (v499 == v498) {
                            unint64_t v513 = 1;
                          }
                          else {
                            unint64_t v513 = (v499 - v498) >> 2;
                          }
                          if (v513 >> 61) {
                            sub_574C();
                          }
                          int v514 = (char *)operator new(8 * v513);
                          double v496 = v514;
                          unint64_t v509 = &v514[(2 * v513 + 6) & 0xFFFFFFFFFFFFFFF8];
                          uint64_t v510 = (uint64_t)v509;
                          uint64_t v515 = v475 - (void)v498;
                          if ((char *)v475 != v498)
                          {
                            uint64_t v510 = (uint64_t)&v509[v515 & 0xFFFFFFFFFFFFFFF8];
                            uint64_t v516 = 8 * (v515 >> 3);
                            v517 = &v514[(2 * v513 + 6) & 0xFFFFFFFFFFFFFFF8];
                            unsigned int v518 = v498;
                            do
                            {
                              uint64_t v519 = *(void *)v518;
                              v518 += 8;
                              *(void *)v517 = v519;
                              v517 += 8;
                              v516 -= 8;
                            }
                            while (v516);
                          }
                          double v499 = &v514[8 * v513];
                          operator delete(v498);
                        }
                        else
                        {
                          uint64_t v511 = (uint64_t)&v499[-v475] >> 3;
                          if (v511 >= -1) {
                            unint64_t v512 = v511 + 1;
                          }
                          else {
                            unint64_t v512 = v511 + 2;
                          }
                          uint64_t v510 = v475 + 8 * (v512 >> 1);
                          unint64_t v509 = &v498[8 * (v512 >> 1)];
                          if ((char *)v475 == v498)
                          {
                            double v496 = (char *)v475;
                          }
                          else
                          {
                            memmove(&v498[8 * (v512 >> 1)], v498, v475 - (void)v498);
                            double v496 = v498;
                          }
                        }
                      }
                      else
                      {
                        unint64_t v509 = v498;
                        uint64_t v510 = v475;
                      }
                      uint64_t v520 = *--v471;
                      *((void *)v509 - 1) = v520;
                      int v498 = v509 - 8;
                      uint64_t v475 = v510;
                    }
                    while (v471 != (uint64_t *)v470[1]);
                  }
                  uint64_t v12 = *v470;
                  *uint64_t v470 = (uint64_t)v496;
                  v470[1] = (uint64_t)v498;
                  v470[2] = v475;
                  v470[3] = (uint64_t)v499;
                  LOBYTE(v475) = v564;
                  unsigned int v112 = v566;
                  double v478 = (unint64_t *)(v470 + 4);
                  uint64_t v476 = v567;
                  if (v12) {
                    operator delete((void *)v12);
                  }
                }
                else
                {
                  uint64_t v12 = (uint64_t)operator new(0x1000uLL);
                  uint64_t v493 = v12;
                  if (v490 == v471)
                  {
                    if (v472 == v491)
                    {
                      if (v471 == v472) {
                        unint64_t v521 = 1;
                      }
                      else {
                        unint64_t v521 = ((char *)v490 - (char *)v472) >> 2;
                      }
                      if (v521 >> 61) {
                        sub_574C();
                      }
                      uint64_t v12 = (uint64_t)operator new(8 * v521);
                      int v506 = (uint64_t *)(v12 + 8 * ((v521 + 3) >> 2));
                      v522 = v506;
                      double v479 = v470 + 5;
                      if (v471 != v472)
                      {
                        uint64_t v523 = 8 * v489;
                        unsigned int v524 = (void *)(v12 + 8 * ((v521 + 3) >> 2));
                        int v525 = v472;
                        v522 = &v506[v489];
                        do
                        {
                          uint64_t v526 = *v525++;
                          *v524++ = v526;
                          v523 -= 8;
                        }
                        while (v523);
                      }
                      *uint64_t v470 = v12;
                      v470[1] = (uint64_t)v506;
                      v470[2] = (uint64_t)v522;
                      v470[3] = v12 + 8 * v521;
                      if (v472)
                      {
                        operator delete(v472);
                        int v506 = (uint64_t *)v470[1];
                      }
                    }
                    else
                    {
                      int v506 = v472;
                      double v479 = v470 + 5;
                    }
                    *(v506 - 1) = v493;
                    double v528 = (char *)v470[1];
                    double v527 = (char *)v470[2];
                    v470[1] = (uint64_t)(v528 - 8);
                    uint64_t v529 = *((void *)v528 - 1);
                    v470[1] = (uint64_t)v528;
                    uint64_t v476 = v567;
                    if (v527 == (char *)v470[3])
                    {
                      int v530 = (char *)*v470;
                      if ((unint64_t)v528 <= *v470)
                      {
                        if (v527 == v530) {
                          unint64_t v535 = 1;
                        }
                        else {
                          unint64_t v535 = (v527 - v530) >> 2;
                        }
                        if (v535 >> 61) {
                          sub_574C();
                        }
                        uint64_t v12 = (uint64_t)operator new(8 * v535);
                        unint64_t v536 = v12 + 8 * (v535 >> 2);
                        unint64_t v537 = (char *)v536;
                        double v479 = v470 + 5;
                        if (v527 != v528)
                        {
                          unint64_t v537 = (char *)(v536 + ((v527 - v528) & 0xFFFFFFFFFFFFFFF8));
                          uint64_t v538 = 8 * ((v527 - v528) >> 3);
                          int v539 = (void *)(v12 + 8 * (v535 >> 2));
                          do
                          {
                            uint64_t v540 = *(void *)v528;
                            v528 += 8;
                            *v539++ = v540;
                            v538 -= 8;
                          }
                          while (v538);
                        }
                        *uint64_t v470 = v12;
                        v470[1] = v536;
                        v470[2] = (uint64_t)v537;
                        v470[3] = v12 + 8 * v535;
                        double v527 = v537;
                        uint64_t v476 = v567;
                        if (v530)
                        {
                          operator delete(v530);
                          double v527 = (char *)v470[2];
                        }
                      }
                      else
                      {
                        uint64_t v531 = (uint64_t)&v528[-*v470] >> 3;
                        if (v531 >= -1) {
                          uint64_t v532 = v531 + 1;
                        }
                        else {
                          uint64_t v532 = v531 + 2;
                        }
                        char v533 = &v528[-8 * (v532 >> 1)];
                        int64_t v534 = v527 - v528;
                        if (v527 != v528)
                        {
                          uint64_t v12 = (uint64_t)memmove(&v528[-8 * (v532 >> 1)], v528, v527 - v528);
                          double v528 = (char *)v470[1];
                        }
                        double v527 = &v533[v534];
                        v470[1] = (uint64_t)&v528[-8 * (v532 >> 1)];
                        v470[2] = (uint64_t)&v533[v534];
                        unsigned int v112 = v566;
                        uint64_t v476 = v567;
                      }
                    }
                    *(void *)double v527 = v529;
                  }
                  else
                  {
                    *unsigned int v471 = v12;
                    double v479 = v470 + 5;
                    uint64_t v476 = v567;
                  }
                  v470[2] += 8;
                  double v478 = (unint64_t *)(v470 + 4);
                  LOBYTE(v475) = v564;
                }
              }
            }
            uint64_t v541 = *v479;
            *(void *)(*(void *)(v470[1] + (((*v478 + *v479) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*v478 + *v479) & 0x1FF)) = v476 + 272 * (v475 & 0xF);
            uint64_t *v479 = v541 + 1;
            uint64_t v542 = v579 + 232 * v112;
            if (*(unsigned char *)(v542 + 224)) {
              BOOL v543 = *(unsigned char *)(v542 + 214) == 0;
            }
            else {
              BOOL v543 = 1;
            }
            if (!v543 && !*(unsigned char *)(v542 + 213))
            {
              unsigned int v544 = *(unsigned __int8 *)(v542 + 36);
              if (v544 >= 0x60)
              {
                if (v544 >= 0x68)
                {
                  if (v544 < 0x98) {
                    goto LABEL_864;
                  }
                }
                else if (*(unsigned char *)(v542 + 215))
                {
                  goto LABEL_864;
                }
              }
              if ((*(_DWORD *)(v542 + 208) - 5) < 0xFFFFFFFE || *(unsigned char *)(v542 + 216) != 0)
              {
                unint64_t v546 = *(void *)(a1 + 37608) + *(void *)(a1 + 37600) - 1;
                *(unsigned char *)(*(void *)(*(void *)(a1 + 37576) + ((v546 >> 1) & 0x7FFFFFFFFFFFFFF8))
                         + 272 * (v546 & 0xF)
                         + 32) = 1;
                *(unsigned char *)(v542 + 213) = 1;
                sub_45B1C(a1, v620);
              }
            }
LABEL_864:
            ++v585;
            unint64_t v14 = v619;
            uint64_t v13 = 8 * a3;
            if (v619 >= 8 * a3) {
              goto LABEL_880;
            }
            break;
          case 9u:
            if (((char)v635 & 0x80000000) == 0)
            {
              uint64_t v40 = v579 + 232 * v635;
              uint64_t v41 = v620;
              if (!*(unsigned char *)(v40 + 224))
              {
                char v42 = *(unsigned char *)(a1 + 8);
                *(void *)__s1 = (((v620[3259] - v620[3258]) << 29) - 0x100000000) | (((v620[3256] - v620[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v635;
                char v630 = 0;
                memset(&__s1[40], 0, 48);
                long long v622 = 0u;
                long long v623 = 0u;
                long long v624 = 0u;
                long long __p = 0u;
                long long v626 = 0u;
                char v627 = 0;
                int v631 = 0;
                char v632 = v42;
                sub_45934(v40, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v623 + 1))
                {
                  *(void *)&long long v624 = *((void *)&v623 + 1);
                  operator delete(*((void **)&v623 + 1));
                }
                if ((void)v622)
                {
                  *((void *)&v622 + 1) = v622;
                  operator delete((void *)v622);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                uint64_t v41 = v620;
              }
              int v43 = DWORD1(v635);
              sub_47ECC((void *)(v40 + 40), v41);
              sub_48030((void *)(v40 + 40), 1);
              unint64_t v44 = *(void *)(v40 + 104);
              uint64_t v45 = *(_DWORD **)(v40 + 96);
              if ((unint64_t)v45 >= v44)
              {
                uint64_t v12 = *(void *)(v40 + 88);
                uint64_t v165 = ((uint64_t)v45 - v12) >> 2;
                if ((unint64_t)(v165 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v166 = v44 - v12;
                unint64_t v167 = (uint64_t)(v44 - v12) >> 1;
                if (v167 <= v165 + 1) {
                  unint64_t v167 = v165 + 1;
                }
                if (v166 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v168 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v168 = v167;
                }
                if (v168)
                {
                  double v169 = (char *)sub_458C8(v40 + 104, v168);
                  uint64_t v12 = *(void *)(v40 + 88);
                  uint64_t v45 = *(_DWORD **)(v40 + 96);
                }
                else
                {
                  double v169 = 0;
                }
                double v260 = &v169[4 * v165];
                *(_DWORD *)double v260 = v43;
                int v46 = v260 + 4;
                while (v45 != (_DWORD *)v12)
                {
                  int v261 = *--v45;
                  *((_DWORD *)v260 - 1) = v261;
                  v260 -= 4;
                }
                *(void *)(v40 + 88) = v260;
                *(void *)(v40 + 96) = v46;
                *(void *)(v40 + 104) = &v169[4 * v168];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                _DWORD *v45 = v43;
                int v46 = v45 + 1;
              }
              *(void *)(v40 + 96) = v46;
            }
            goto LABEL_864;
          case 0xAu:
            unint64_t v100 = v620[3264];
            uint64_t v101 = v635;
            *(_DWORD *)__s1 = v635;
            double v102 = &v620[3 * v635];
            double v103 = (unint64_t *)v102[3097];
            double v104 = (unint64_t *)v102[3098];
            if (v103 == v104
              || (unint64_t v105 = v635,
                  *(void *)(v620[3258] + ((v100 >> 29) & 0x7FFFFFFF8))
                - *(void *)(v620[3258] + ((*(v104 - 1) >> 29) & 0x7FFFFFFF8)) >= (unint64_t)*(unsigned int *)(a1 + 32)))
            {
              double v106 = (void **)(v102 + 3098);
              uint64_t v107 = &v620[3 * v635];
              unint64_t v108 = v107[3099];
              if ((unint64_t)v104 >= v108)
              {
                unint64_t v159 = (void **)(v102 + 3097);
                uint64_t v160 = v104 - v103;
                if ((unint64_t)(v160 + 1) >> 61) {
                  sub_566C();
                }
                double v161 = v107 + 3099;
                uint64_t v162 = v108 - (void)v103;
                uint64_t v163 = v162 >> 2;
                if (v162 >> 2 <= (unint64_t)(v160 + 1)) {
                  uint64_t v163 = v160 + 1;
                }
                if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v164 = v163;
                }
                if (v164) {
                  uint64_t v12 = (uint64_t)sub_5714((uint64_t)v161, v164);
                }
                else {
                  uint64_t v12 = 0;
                }
                double v249 = (unint64_t *)(v12 + 8 * v160);
                unint64_t *v249 = v100;
                uint64_t v109 = v249 + 1;
                int v250 = (char *)*v106;
                char v251 = (char *)*v159;
                if (*v106 != *v159)
                {
                  do
                  {
                    unint64_t v252 = *((void *)v250 - 1);
                    v250 -= 8;
                    *--double v249 = v252;
                  }
                  while (v250 != v251);
                  int v250 = (char *)*v159;
                }
                *unint64_t v159 = v249;
                *double v106 = v109;
                void *v161 = v12 + 8 * v164;
                if (v250) {
                  operator delete(v250);
                }
              }
              else
              {
                unint64_t *v104 = v100;
                uint64_t v109 = v104 + 1;
              }
              *double v106 = v109;
              unint64_t v105 = *(unsigned int *)__s1;
              if (*(_DWORD *)__s1 <= 0xFu) {
                *(unsigned char *)(v572 + *(unsigned int *)__s1) = 0;
              }
            }
            if (*(void *)(a1 + 136) == *(void *)(a1 + 144))
            {
              switch(v101)
              {
                case 0:
                  v617[0] = a1;
                  v617[1] = (uint64_t)&v620;
                  v617[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_481B0(v617, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 1:
                  v616[0] = a1;
                  v616[1] = (uint64_t)&v620;
                  v616[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_49440(v616, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 2:
                  v615[0] = a1;
                  v615[1] = (uint64_t)&v620;
                  v615[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_49DD4(v615, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 3:
                  v614[0] = a1;
                  v614[1] = (uint64_t)&v620;
                  v614[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_4BADC(v614, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 4:
                  v613[0] = a1;
                  v613[1] = (uint64_t)&v620;
                  v613[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_4C5B4(v613, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 5:
                  v612[0] = a1;
                  v612[1] = (uint64_t)&v620;
                  v612[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_4CFE8(v612, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 6:
                  v611[0] = a1;
                  v611[1] = (uint64_t)&v620;
                  v611[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_4D404(v611, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 7:
                  v610[0] = a1;
                  v610[1] = (uint64_t)&v620;
                  v610[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_4E514(v610, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 8:
                  v609[0] = a1;
                  v609[1] = (uint64_t)&v620;
                  v609[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_4F538(v609, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 9:
                  v608[0] = a1;
                  v608[1] = (uint64_t)&v620;
                  v608[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_4FA04(v608, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 10:
                  v607[0] = a1;
                  v607[1] = (uint64_t)&v620;
                  v607[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5170C(v607, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 11:
                  v606[0] = a1;
                  v606[1] = (uint64_t)&v620;
                  v606[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_51DAC(v606, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 12:
                  v605[0] = a1;
                  v605[1] = (uint64_t)&v620;
                  v605[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_51FE0(v605, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 13:
                  v604[0] = a1;
                  v604[1] = (uint64_t)&v620;
                  v604[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_52754(v604, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 14:
                  v603[0] = a1;
                  v603[1] = (uint64_t)&v620;
                  v603[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_53514(v603, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 15:
                  v602[0] = a1;
                  v602[1] = (uint64_t)&v620;
                  v602[2] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_53910(v602, (unsigned char *)(v572 + v105));
                  }
                  break;
                default:
                  goto LABEL_864;
              }
            }
            else
            {
              switch(v101)
              {
                case 0:
                  v601[0] = a1;
                  v601[1] = (uint64_t)__s1;
                  v601[2] = (uint64_t)&v620;
                  v601[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_542B4(v601, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 1:
                  v600[0] = a1;
                  v600[1] = (uint64_t)__s1;
                  v600[2] = (uint64_t)&v620;
                  v600[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_555F4(v600, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 2:
                  v599[0] = a1;
                  v599[1] = (uint64_t)__s1;
                  v599[2] = (uint64_t)&v620;
                  v599[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5606C(v599, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 3:
                  v598[0] = a1;
                  v598[1] = (uint64_t)__s1;
                  v598[2] = (uint64_t)&v620;
                  v598[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_57E34(v598, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 4:
                  v597[0] = a1;
                  v597[1] = (uint64_t)__s1;
                  v597[2] = (uint64_t)&v620;
                  v597[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_589B4(v597, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 5:
                  v596[0] = a1;
                  v596[1] = (uint64_t)__s1;
                  v596[2] = (uint64_t)&v620;
                  v596[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5948C(v596, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 6:
                  v595[0] = a1;
                  v595[1] = (uint64_t)__s1;
                  v595[2] = (uint64_t)&v620;
                  v595[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5998C(v595, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 7:
                  v594[0] = a1;
                  v594[1] = (uint64_t)__s1;
                  v594[2] = (uint64_t)&v620;
                  v594[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5AB34(v594, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 8:
                  v593[0] = a1;
                  v593[1] = (uint64_t)__s1;
                  v593[2] = (uint64_t)&v620;
                  v593[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5BC30(v593, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 9:
                  v592[0] = a1;
                  v592[1] = (uint64_t)__s1;
                  v592[2] = (uint64_t)&v620;
                  v592[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5C1D0(v592, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 10:
                  v591[0] = a1;
                  v591[1] = (uint64_t)__s1;
                  v591[2] = (uint64_t)&v620;
                  v591[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5DF98(v591, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 11:
                  v590[0] = a1;
                  v590[1] = (uint64_t)__s1;
                  v590[2] = (uint64_t)&v620;
                  v590[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5E700(v590, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 12:
                  v589[0] = a1;
                  v589[1] = (uint64_t)__s1;
                  v589[2] = (uint64_t)&v620;
                  v589[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5E9C8(v589, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 13:
                  v588[0] = a1;
                  v588[1] = (uint64_t)__s1;
                  v588[2] = (uint64_t)&v620;
                  v588[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_5F200(v588, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 14:
                  v587[0] = a1;
                  v587[1] = (uint64_t)__s1;
                  v587[2] = (uint64_t)&v620;
                  v587[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_60060(v587, (unsigned char *)(v572 + v105));
                  }
                  break;
                case 15:
                  v586[0] = a1;
                  v586[1] = (uint64_t)__s1;
                  v586[2] = (uint64_t)&v620;
                  v586[3] = (uint64_t)&v634;
                  if (v105 <= 0xF) {
                    sub_60530(v586, (unsigned char *)(v572 + v105));
                  }
                  break;
                default:
                  goto LABEL_864;
              }
            }
            goto LABEL_864;
          case 0xBu:
            unsigned int v27 = v635;
            if (v635 > 7)
            {
              int v28 = 0;
              __int16 v29 = -1;
            }
            else
            {
              int v28 = dword_4C694C[(int)v635];
              __int16 v29 = word_4C7D30[(int)v635];
            }
            uint64_t v128 = (((v620[3259] - v620[3258]) << 29) - 0x100000000) | (((v620[3256] - v620[3255]) >> 3)
                                                                        - 1);
            uint64_t v129 = *((void *)&v635 + 1);
            if (*(_DWORD *)(a1 + 120) == -1) {
              int v130 = 0;
            }
            else {
              int v130 = *(_DWORD *)(a1 + 120);
            }
            *(_DWORD *)(a1 + 120) = v130 + 1;
            if (v27 > 7) {
              goto LABEL_281;
            }
            uint64_t v131 = v574 + 56 * v27;
            if (!*(unsigned char *)(v131 + 48))
            {
              *(void *)uint64_t v131 = v128;
              *(void *)(v131 + 16) = v129;
              *(_DWORD *)(v131 + 24) = v130;
              *(_DWORD *)(v131 + 28) = v28;
              *(_WORD *)(v131 + 32) = v29;
              *(void *)(v131 + 40) = 0;
LABEL_280:
              *(unsigned char *)(v131 + 48) = 1;
              goto LABEL_281;
            }
            unsigned int v132 = sub_12C18C();
            if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1206;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "!currentKick";
              _os_log_error_impl(&def_1C1270, v132, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            int v133 = *(unsigned __int8 *)(v131 + 48);
            *(void *)uint64_t v131 = v128;
            *(void *)(v131 + 16) = v129;
            *(_DWORD *)(v131 + 24) = v130;
            *(_DWORD *)(v131 + 28) = v28;
            *(_WORD *)(v131 + 32) = v29;
            *(void *)(v131 + 40) = 0;
            if (!v133) {
              goto LABEL_280;
            }
LABEL_281:
            if ((v576 & 2) != 0)
            {
              double v195 = v620;
              int v196 = (uint64_t *)v620[2];
              uint64_t v12 = (uint64_t)(v620 + 3);
              unint64_t v197 = v620[3];
              if ((unint64_t)v196 >= v197)
              {
                unint64_t v199 = (void **)(v620 + 1);
                uint64_t v200 = v620[1];
                uint64_t v201 = ((uint64_t)v196 - v200) >> 3;
                if ((unint64_t)(v201 + 1) >> 61) {
                  sub_566C();
                }
                uint64_t v202 = v197 - v200;
                uint64_t v203 = v202 >> 2;
                if (v202 >> 2 <= (unint64_t)(v201 + 1)) {
                  uint64_t v203 = v201 + 1;
                }
                if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v204 = v203;
                }
                if (v204) {
                  uint64_t v12 = (uint64_t)sub_5714(v12, v204);
                }
                else {
                  uint64_t v12 = 0;
                }
                uint64_t v262 = (uint64_t *)(v12 + 8 * v201);
                *uint64_t v262 = v128;
                double v198 = v262 + 1;
                unsigned int v264 = (char *)v195[1];
                uint64_t v263 = (char *)v195[2];
                if (v263 != v264)
                {
                  do
                  {
                    uint64_t v265 = *((void *)v263 - 1);
                    v263 -= 8;
                    *--uint64_t v262 = v265;
                  }
                  while (v263 != v264);
                  uint64_t v263 = (char *)*v199;
                }
                v195[1] = v262;
                v195[2] = v198;
                v195[3] = v12 + 8 * v204;
                if (v263) {
                  operator delete(v263);
                }
              }
              else
              {
                uint64_t *v196 = v128;
                double v198 = v196 + 1;
              }
              v195[2] = v198;
              int v266 = v620;
              char v267 = (_DWORD *)v620[14];
              unint64_t v268 = v620[15];
              if ((unint64_t)v267 >= v268)
              {
                uint64_t v12 = v620[13];
                uint64_t v270 = ((uint64_t)v267 - v12) >> 2;
                if ((unint64_t)(v270 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v271 = v268 - v12;
                unint64_t v272 = (uint64_t)(v268 - v12) >> 1;
                if (v272 <= v270 + 1) {
                  unint64_t v272 = v270 + 1;
                }
                if (v271 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v273 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v273 = v272;
                }
                if (v273)
                {
                  double v274 = (char *)sub_458C8((uint64_t)(v620 + 15), v273);
                  uint64_t v12 = v266[13];
                  char v267 = (_DWORD *)v266[14];
                }
                else
                {
                  double v274 = 0;
                }
                double v275 = &v274[4 * v270];
                *(_DWORD *)double v275 = v130;
                uint64_t v269 = v275 + 4;
                while (v267 != (_DWORD *)v12)
                {
                  int v276 = *--v267;
                  *((_DWORD *)v275 - 1) = v276;
                  v275 -= 4;
                }
                v266[13] = v275;
                v266[14] = v269;
                v266[15] = &v274[4 * v273];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *char v267 = v130;
                uint64_t v269 = v267 + 1;
              }
              v266[14] = v269;
              double v277 = v620;
              double v278 = (__int16 *)v620[20];
              unint64_t v279 = v620[21];
              if ((unint64_t)v278 >= v279)
              {
                uint64_t v12 = v620[19];
                uint64_t v281 = (uint64_t)v278 - v12;
                if ((uint64_t)v278 - v12 <= -3) {
                  sub_566C();
                }
                uint64_t v282 = v281 >> 1;
                unint64_t v283 = v279 - v12;
                if (v283 <= (v281 >> 1) + 1) {
                  unint64_t v284 = v282 + 1;
                }
                else {
                  unint64_t v284 = v283;
                }
                if (v283 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v285 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v285 = v284;
                }
                if (v285)
                {
                  unint64_t v286 = (char *)sub_45900((uint64_t)(v620 + 21), v285);
                  uint64_t v12 = v277[19];
                  double v278 = (__int16 *)v277[20];
                }
                else
                {
                  unint64_t v286 = 0;
                }
                double v291 = (__int16 *)&v286[2 * v282];
                *double v291 = v29;
                double v280 = v291 + 1;
                while (v278 != (__int16 *)v12)
                {
                  __int16 v292 = *--v278;
                  *--double v291 = v292;
                }
                v277[19] = v291;
                v277[20] = v280;
                v277[21] = &v286[2 * v285];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *double v278 = v29;
                double v280 = v278 + 1;
              }
              v277[20] = v280;
              uint64_t v293 = v620;
              uint64_t v294 = (_DWORD *)v620[17];
              unint64_t v295 = v620[18];
              if ((unint64_t)v294 >= v295)
              {
                uint64_t v12 = v620[16];
                uint64_t v297 = ((uint64_t)v294 - v12) >> 2;
                if ((unint64_t)(v297 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v298 = v295 - v12;
                unint64_t v299 = (uint64_t)(v295 - v12) >> 1;
                if (v299 <= v297 + 1) {
                  unint64_t v299 = v297 + 1;
                }
                if (v298 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v300 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v300 = v299;
                }
                if (v300)
                {
                  uint64_t v301 = (char *)sub_458C8((uint64_t)(v620 + 18), v300);
                  uint64_t v12 = v293[16];
                  uint64_t v294 = (_DWORD *)v293[17];
                }
                else
                {
                  uint64_t v301 = 0;
                }
                uint64_t v302 = &v301[4 * v297];
                *(_DWORD *)uint64_t v302 = v28;
                uint64_t v296 = v302 + 4;
                while (v294 != (_DWORD *)v12)
                {
                  int v303 = *--v294;
                  *((_DWORD *)v302 - 1) = v303;
                  v302 -= 4;
                }
                v293[16] = v302;
                v293[17] = v296;
                v293[18] = &v301[4 * v300];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                _DWORD *v294 = v28;
                uint64_t v296 = v294 + 1;
              }
              v293[17] = v296;
              char v304 = v620;
              uint64_t v305 = (void *)v620[8];
              unint64_t v306 = v620[9];
              if ((unint64_t)v305 >= v306)
              {
                uint64_t v12 = v620[7];
                uint64_t v308 = ((uint64_t)v305 - v12) >> 3;
                if ((unint64_t)(v308 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v309 = v306 - v12;
                unint64_t v310 = (uint64_t)(v306 - v12) >> 2;
                if (v310 <= v308 + 1) {
                  unint64_t v310 = v308 + 1;
                }
                if (v309 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v311 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v311 = v310;
                }
                if (v311)
                {
                  int v312 = (char *)sub_5714((uint64_t)(v620 + 9), v311);
                  uint64_t v12 = v304[7];
                  uint64_t v305 = (void *)v304[8];
                }
                else
                {
                  int v312 = 0;
                }
                uint64_t v313 = &v312[8 * v308];
                *(void *)uint64_t v313 = v129;
                double v307 = v313 + 8;
                while (v305 != (void *)v12)
                {
                  uint64_t v314 = *--v305;
                  *((void *)v313 - 1) = v314;
                  v313 -= 8;
                }
                v304[7] = v313;
                v304[8] = v307;
                v304[9] = &v312[8 * v311];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                void *v305 = v129;
                double v307 = v305 + 1;
              }
              v304[8] = v307;
            }
            goto LABEL_864;
          case 0xCu:
            if (v635 <= 7)
            {
              uint64_t v31 = v574 + 56 * v635;
              if (*(unsigned char *)(v31 + 48))
              {
                uint64_t v32 = 0;
                *(void *)(v31 + 8) = (((v620[3259] - v620[3258]) << 29) - 0x100000000) | (((v620[3256] - v620[3255]) >> 3)
                                                                                            - 1);
                *(void *)(v31 + 40) = 0;
                *(_WORD *)(v31 + 40) = WORD2(v635);
                uint64_t v33 = a1 + 192;
                do
                {
                  if (*(unsigned char *)(v33 + 192) && *(_DWORD *)v33 == *(_DWORD *)(v31 + 24)) {
                    sub_3F3AC(a1, v620, v32, 1);
                  }
                  ++v32;
                  v33 += 232;
                }
                while (v32 != 128);
                uint64_t v34 = 0;
                int v35 = (unsigned char *)(a1 + 30336);
                do
                {
                  if (*v35 && *((_DWORD *)v35 - 2) == *(_DWORD *)(v31 + 24)) {
                    sub_3F02C(a1, v620, v34);
                  }
                  ++v34;
                  v35 += 40;
                }
                while (v34 != 16);
                if ((v576 & 2) == 0)
                {
                  uint64_t v36 = v620;
                  int v37 = (void *)v620[2];
                  unint64_t v38 = v620[3];
                  if ((unint64_t)v37 >= v38)
                  {
                    double v335 = (void **)(v620 + 1);
                    uint64_t v336 = v620[1];
                    uint64_t v337 = ((uint64_t)v37 - v336) >> 3;
                    if ((unint64_t)(v337 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v338 = v38 - v336;
                    uint64_t v339 = v338 >> 2;
                    if (v338 >> 2 <= (unint64_t)(v337 + 1)) {
                      uint64_t v339 = v337 + 1;
                    }
                    if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v340 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v340 = v339;
                    }
                    if (v340) {
                      double v341 = (char *)sub_5714((uint64_t)(v620 + 3), v340);
                    }
                    else {
                      double v341 = 0;
                    }
                    double v351 = &v341[8 * v337];
                    *(void *)double v351 = *(void *)v31;
                    uint64_t v39 = v351 + 8;
                    char v353 = (char *)v36[1];
                    int v352 = (char *)v36[2];
                    if (v352 != v353)
                    {
                      do
                      {
                        uint64_t v354 = *((void *)v352 - 1);
                        v352 -= 8;
                        *((void *)v351 - 1) = v354;
                        v351 -= 8;
                      }
                      while (v352 != v353);
                      int v352 = (char *)*v335;
                    }
                    v36[1] = v351;
                    v36[2] = v39;
                    v36[3] = &v341[8 * v340];
                    if (v352) {
                      operator delete(v352);
                    }
                  }
                  else
                  {
                    *int v37 = *(void *)v31;
                    uint64_t v39 = v37 + 1;
                  }
                  v36[2] = v39;
                  double v355 = v620;
                  unint64_t v356 = (void *)v620[5];
                  uint64_t v12 = (uint64_t)(v620 + 6);
                  unint64_t v357 = v620[6];
                  if ((unint64_t)v356 >= v357)
                  {
                    uint64_t v359 = (void **)(v620 + 4);
                    uint64_t v360 = v620[4];
                    uint64_t v361 = ((uint64_t)v356 - v360) >> 3;
                    if ((unint64_t)(v361 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v362 = v357 - v360;
                    uint64_t v363 = v362 >> 2;
                    if (v362 >> 2 <= (unint64_t)(v361 + 1)) {
                      uint64_t v363 = v361 + 1;
                    }
                    if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v364 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v364 = v363;
                    }
                    if (v364) {
                      uint64_t v12 = (uint64_t)sub_5714(v12, v364);
                    }
                    else {
                      uint64_t v12 = 0;
                    }
                    uint64_t v365 = (void *)(v12 + 8 * v361);
                    *uint64_t v365 = *(void *)(v31 + 8);
                    unint64_t v358 = v365 + 1;
                    double v367 = (char *)v355[4];
                    uint64_t v366 = (char *)v355[5];
                    if (v366 != v367)
                    {
                      do
                      {
                        uint64_t v368 = *((void *)v366 - 1);
                        v366 -= 8;
                        *--uint64_t v365 = v368;
                      }
                      while (v366 != v367);
                      uint64_t v366 = (char *)*v359;
                    }
                    v355[4] = v365;
                    v355[5] = v358;
                    v355[6] = v12 + 8 * v364;
                    if (v366) {
                      operator delete(v366);
                    }
                  }
                  else
                  {
                    *unint64_t v356 = *(void *)(v31 + 8);
                    unint64_t v358 = v356 + 1;
                  }
                  v355[5] = v358;
                  unint64_t v369 = v620;
                  unint64_t v370 = (_DWORD *)v620[14];
                  unint64_t v371 = v620[15];
                  if ((unint64_t)v370 >= v371)
                  {
                    uint64_t v12 = v620[13];
                    uint64_t v373 = ((uint64_t)v370 - v12) >> 2;
                    if ((unint64_t)(v373 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v374 = v371 - v12;
                    unint64_t v375 = (uint64_t)(v371 - v12) >> 1;
                    if (v375 <= v373 + 1) {
                      unint64_t v375 = v373 + 1;
                    }
                    if (v374 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v376 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v376 = v375;
                    }
                    if (v376)
                    {
                      uint64_t v377 = (char *)sub_458C8((uint64_t)(v620 + 15), v376);
                      uint64_t v12 = v369[13];
                      unint64_t v370 = (_DWORD *)v369[14];
                    }
                    else
                    {
                      uint64_t v377 = 0;
                    }
                    double v378 = &v377[4 * v373];
                    *(_DWORD *)double v378 = *(_DWORD *)(v31 + 24);
                    uint64_t v372 = v378 + 4;
                    while (v370 != (_DWORD *)v12)
                    {
                      int v379 = *--v370;
                      *((_DWORD *)v378 - 1) = v379;
                      v378 -= 4;
                    }
                    v369[13] = v378;
                    v369[14] = v372;
                    v369[15] = &v377[4 * v376];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *unint64_t v370 = *(_DWORD *)(v31 + 24);
                    uint64_t v372 = v370 + 1;
                  }
                  v369[14] = v372;
                  uint64_t v380 = v620;
                  unsigned int v381 = (_WORD *)v620[20];
                  unint64_t v382 = v620[21];
                  if ((unint64_t)v381 >= v382)
                  {
                    uint64_t v12 = v620[19];
                    uint64_t v384 = (uint64_t)v381 - v12;
                    if ((uint64_t)v381 - v12 <= -3) {
                      sub_566C();
                    }
                    uint64_t v385 = v384 >> 1;
                    unint64_t v386 = v382 - v12;
                    if (v386 <= (v384 >> 1) + 1) {
                      unint64_t v387 = v385 + 1;
                    }
                    else {
                      unint64_t v387 = v386;
                    }
                    if (v386 >= 0x7FFFFFFFFFFFFFFELL) {
                      uint64_t v388 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v388 = v387;
                    }
                    if (v388)
                    {
                      uint64_t v389 = (char *)sub_45900((uint64_t)(v620 + 21), v388);
                      uint64_t v12 = v380[19];
                      unsigned int v381 = (_WORD *)v380[20];
                    }
                    else
                    {
                      uint64_t v389 = 0;
                    }
                    uint64_t v390 = &v389[2 * v385];
                    *(_WORD *)uint64_t v390 = *(_WORD *)(v31 + 32);
                    char v383 = v390 + 2;
                    while (v381 != (_WORD *)v12)
                    {
                      __int16 v391 = *--v381;
                      *((_WORD *)v390 - 1) = v391;
                      v390 -= 2;
                    }
                    v380[19] = v390;
                    v380[20] = v383;
                    v380[21] = &v389[2 * v388];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *unsigned int v381 = *(_WORD *)(v31 + 32);
                    char v383 = v381 + 1;
                  }
                  v380[20] = v383;
                  char v392 = v620;
                  char v393 = (_DWORD *)v620[17];
                  unint64_t v394 = v620[18];
                  if ((unint64_t)v393 >= v394)
                  {
                    uint64_t v12 = v620[16];
                    uint64_t v396 = ((uint64_t)v393 - v12) >> 2;
                    if ((unint64_t)(v396 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v397 = v394 - v12;
                    unint64_t v398 = (uint64_t)(v394 - v12) >> 1;
                    if (v398 <= v396 + 1) {
                      unint64_t v398 = v396 + 1;
                    }
                    if (v397 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v399 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v399 = v398;
                    }
                    if (v399)
                    {
                      unint64_t v400 = (char *)sub_458C8((uint64_t)(v620 + 18), v399);
                      uint64_t v12 = v392[16];
                      char v393 = (_DWORD *)v392[17];
                    }
                    else
                    {
                      unint64_t v400 = 0;
                    }
                    unint64_t v401 = &v400[4 * v396];
                    *(_DWORD *)unint64_t v401 = *(_DWORD *)(v31 + 28);
                    double v395 = v401 + 4;
                    while (v393 != (_DWORD *)v12)
                    {
                      int v402 = *--v393;
                      *((_DWORD *)v401 - 1) = v402;
                      v401 -= 4;
                    }
                    v392[16] = v401;
                    v392[17] = v395;
                    v392[18] = &v400[4 * v399];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *char v393 = *(_DWORD *)(v31 + 28);
                    double v395 = v393 + 1;
                  }
                  v392[17] = v395;
                  double v403 = v620;
                  unint64_t v404 = (void *)v620[8];
                  unint64_t v405 = v620[9];
                  if ((unint64_t)v404 >= v405)
                  {
                    uint64_t v12 = v620[7];
                    uint64_t v407 = ((uint64_t)v404 - v12) >> 3;
                    if ((unint64_t)(v407 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v408 = v405 - v12;
                    unint64_t v409 = (uint64_t)(v405 - v12) >> 2;
                    if (v409 <= v407 + 1) {
                      unint64_t v409 = v407 + 1;
                    }
                    if (v408 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v410 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v410 = v409;
                    }
                    if (v410)
                    {
                      unint64_t v411 = (char *)sub_5714((uint64_t)(v620 + 9), v410);
                      uint64_t v12 = v403[7];
                      unint64_t v404 = (void *)v403[8];
                    }
                    else
                    {
                      unint64_t v411 = 0;
                    }
                    uint64_t v412 = &v411[8 * v407];
                    *(void *)uint64_t v412 = *(void *)(v31 + 16);
                    double v406 = v412 + 8;
                    while (v404 != (void *)v12)
                    {
                      uint64_t v413 = *--v404;
                      *((void *)v412 - 1) = v413;
                      v412 -= 8;
                    }
                    v403[7] = v412;
                    v403[8] = v406;
                    v403[9] = &v411[8 * v410];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *unint64_t v404 = *(void *)(v31 + 16);
                    double v406 = v404 + 1;
                  }
                  v403[8] = v406;
                  double v414 = v620;
                  double v415 = (void *)v620[11];
                  unint64_t v416 = v620[12];
                  if ((unint64_t)v415 >= v416)
                  {
                    uint64_t v12 = v620[10];
                    uint64_t v418 = ((uint64_t)v415 - v12) >> 3;
                    if ((unint64_t)(v418 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v419 = v416 - v12;
                    unint64_t v420 = (uint64_t)(v416 - v12) >> 2;
                    if (v420 <= v418 + 1) {
                      unint64_t v420 = v418 + 1;
                    }
                    if (v419 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v421 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v421 = v420;
                    }
                    if (v421)
                    {
                      unint64_t v422 = (char *)sub_5714((uint64_t)(v620 + 12), v421);
                      uint64_t v12 = v414[10];
                      double v415 = (void *)v414[11];
                    }
                    else
                    {
                      unint64_t v422 = 0;
                    }
                    uint64_t v423 = &v422[8 * v418];
                    *(void *)uint64_t v423 = *(void *)(v31 + 40);
                    double v417 = v423 + 8;
                    while (v415 != (void *)v12)
                    {
                      uint64_t v424 = *--v415;
                      *((void *)v423 - 1) = v424;
                      v423 -= 8;
                    }
                    v414[10] = v423;
                    v414[11] = v417;
                    v414[12] = &v422[8 * v421];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    void *v415 = *(void *)(v31 + 40);
                    double v417 = v415 + 1;
                  }
                  v414[11] = v417;
                }
                if (*(unsigned char *)(v31 + 48)) {
                  *(unsigned char *)(v31 + 48) = 0;
                }
              }
            }
            goto LABEL_864;
          case 0xDu:
            uint64_t v93 = v575 + 40 * (v635 & 3);
            if (*(unsigned char *)(v93 + 32))
            {
              unint64_t v94 = sub_12C18C();
              if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1287;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "!currentTile.has_value()";
                _os_log_error_impl(&def_1C1270, v94, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            uint64_t v95 = v620[3256];
            uint64_t v96 = v620[3255];
            uint64_t v97 = v620[3259];
            uint64_t v98 = v620[3258];
            uint64_t v99 = *(void *)(a1 + 112);
            if (v99 == -1) {
              uint64_t v99 = 0;
            }
            *(void *)(a1 + 112) = v99 + 1;
            if (!*(unsigned char *)(v93 + 32)) {
              *(unsigned char *)(v93 + 32) = 1;
            }
            *(void *)uint64_t v93 = (((v97 - v98) << 29) - 0x100000000) | (((unint64_t)(v95 - v96) >> 3)
                                                                    - 1);
            *(void *)(v93 + 16) = v99;
            *(_DWORD *)(v93 + 24) = -1;
            goto LABEL_864;
          case 0xEu:
            sub_3F02C(a1, v620, v635 & 3);
            goto LABEL_864;
          case 0xFu:
            int v58 = DWORD1(v635);
            if (DWORD1(v635) <= 7)
            {
              uint64_t v59 = v570 + 12 * DWORD1(v635);
              *(void *)uint64_t v59 = v635;
              *(_DWORD *)(v59 + 8) = DWORD2(v635);
              unsigned int v60 = v58 - 4;
              if (v60 <= 2)
              {
                uint64_t v61 = v575 + 40 * v60;
                if (*(unsigned char *)(v61 + 32))
                {
                  if (v635 <= 7)
                  {
                    uint64_t v62 = v574 + 56 * v635;
                    if (*(unsigned char *)(v62 + 48)) {
                      *(_DWORD *)(v61 + 24) = *(_DWORD *)(v62 + 24);
                    }
                  }
                }
              }
            }
            goto LABEL_864;
          case 0x10u:
            unint64_t v619 = (v619 & 0xFFFFFFFFFFFF8000) + 0x8000;
            goto LABEL_864;
          default:
            goto LABEL_864;
        }
      }
      if (v569) {
        _DWORD *v569 = 2;
      }
    }
    else
    {
      uint64_t v585 = 0;
    }
LABEL_880:
    uint64_t v547 = 0;
    *(_DWORD *)&__s1[8] = 207;
    *(void *)__s1 = off_741900;
    do
    {
      uint64_t v548 = v620;
      if (v620[3 * v547 + 97] != v620[3 * v547 + 98])
      {
        uint64_t v12 = (uint64_t)sub_3F57C(v12, v547);
        uint64_t v549 = v12;
        double v550 = (uint64_t *)v548[3248];
        unint64_t v551 = v548[3249];
        if ((unint64_t)v550 >= v551)
        {
          uint64_t v553 = v548[3247];
          uint64_t v554 = ((uint64_t)v550 - v553) >> 3;
          if ((unint64_t)(v554 + 1) >> 61) {
            sub_566C();
          }
          uint64_t v555 = v551 - v553;
          uint64_t v556 = v555 >> 2;
          if (v555 >> 2 <= (unint64_t)(v554 + 1)) {
            uint64_t v556 = v554 + 1;
          }
          if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v557 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v557 = v556;
          }
          if (v557) {
            uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v548 + 3249), v557);
          }
          else {
            uint64_t v12 = 0;
          }
          int v558 = (uint64_t *)(v12 + 8 * v554);
          uint64_t *v558 = v549;
          v552 = v558 + 1;
          int v559 = (char *)v548[3248];
          int v560 = (char *)v548[3247];
          if (v559 != v560)
          {
            do
            {
              uint64_t v561 = *((void *)v559 - 1);
              v559 -= 8;
              *--int v558 = v561;
            }
            while (v559 != v560);
            int v559 = (char *)v548[3247];
          }
          v548[3247] = v558;
          v548[3248] = v552;
          v548[3249] = v12 + 8 * v557;
          if (v559) {
            operator delete(v559);
          }
        }
        else
        {
          *double v550 = v12;
          v552 = v550 + 1;
        }
        v548[3248] = v552;
      }
      ++v547;
    }
    while (v547 != 207);
    uint64_t result = v620;
    v620[3250] = v585;
    result[3251] = v619;
  }
  else
  {
    uint64_t result = 0;
    if (a5) {
      *a5 = 1;
    }
  }
  return result;
}

void sub_32ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_33064(uint64_t a1, char ***a2)
{
  int v2796 = 207;
  uint64_t v2794 = 0;
  v2795 = off_741900;
  long long __p = 0;
  unint64_t v2793 = 0;
  sub_626EC((uint64_t)&__p, 0xCFuLL, 0);
  char v2791 = 0;
  sub_62870((uint64_t)&__p, v2793, &v2791);
  uint64_t v6 = a2;
  long long v5 = *a2;
  uint64_t v7 = (char *)v6[1] - (char *)v5;
  if (!v7) {
    goto LABEL_11;
  }
  unint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)__p;
  uint64_t v10 = v8 <= 1 ? 1 : v8;
  char v11 = 1;
  do
  {
    unsigned int v4 = sub_60FCC(v4, *v5);
    if (v4 == 207) {
      char v11 = 0;
    }
    else {
      *(void *)&v9[((unint64_t)v4 >> 3) & 0x1FFFFFF8] |= 1 << v4;
    }
    ++v5;
    --v10;
  }
  while (v10);
  if ((v11 & 1) == 0)
  {
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)(a1 + 136));
    uint64_t v2789 = 0;
  }
  else
  {
LABEL_11:
    uint64_t v12 = (void *)(a1 + 136);
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)(a1 + 136));
    sub_62984((uint64_t *)(a1 + 136), 0x10uLL);
    uint64_t v13 = 0;
    unint64_t v14 = (_DWORD *)(a1 + 48);
    do
    {
      switch((int)v13)
      {
        case 0:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 16) & 1) == 0) {
              goto LABEL_374;
            }
            uint64_t v15 = *v12 + 24 * v13;
            int v17 = (_DWORD **)(v15 + 8);
            uint64_t v16 = *(_DWORD **)(v15 + 8);
            uint64_t v19 = (void *)(v15 + 16);
            unint64_t v18 = *(void *)(v15 + 16);
            if ((unint64_t)v16 >= v18)
            {
              uint64_t v165 = *(_DWORD **)v15;
              uint64_t v166 = ((uint64_t)v16 - *(void *)v15) >> 2;
              unint64_t v167 = v166 + 1;
              if ((unint64_t)(v166 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v168 = v18 - (void)v165;
              if (v168 >> 1 > v167) {
                unint64_t v167 = v168 >> 1;
              }
              if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v167;
              }
              if (v169)
              {
                uint64_t v170 = (char *)sub_458C8((uint64_t)v19, v169);
                uint64_t v16 = *v17;
                uint64_t v165 = *(_DWORD **)v15;
              }
              else
              {
                uint64_t v170 = 0;
              }
              double v333 = &v170[4 * v166];
              *(_DWORD *)double v333 = 128;
              uint64_t v20 = v333 + 4;
              while (v16 != v165)
              {
                int v334 = *--v16;
                *((_DWORD *)v333 - 1) = v334;
                v333 -= 4;
              }
              *(void *)uint64_t v15 = v333;
              NSObject *v17 = v20;
              void *v19 = &v170[4 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              _DWORD *v16 = 128;
              uint64_t v20 = v16 + 1;
            }
            NSObject *v17 = v20;
            if (!*v14)
            {
LABEL_374:
              if ((*((unsigned char *)__p + 16) & 2) == 0) {
                goto LABEL_3256;
              }
              uint64_t v335 = *v12 + 24 * v13;
              uint64_t v337 = (_DWORD **)(v335 + 8);
              uint64_t v336 = *(_DWORD **)(v335 + 8);
              uint64_t v339 = (void *)(v335 + 16);
              unint64_t v338 = *(void *)(v335 + 16);
              if ((unint64_t)v336 >= v338)
              {
                double v341 = *(_DWORD **)v335;
                uint64_t v342 = ((uint64_t)v336 - *(void *)v335) >> 2;
                unint64_t v343 = v342 + 1;
                if ((unint64_t)(v342 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v344 = v338 - (void)v341;
                if (v344 >> 1 > v343) {
                  unint64_t v343 = v344 >> 1;
                }
                if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v345 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v345 = v343;
                }
                if (v345)
                {
                  uint64_t v346 = (char *)sub_458C8((uint64_t)v339, v345);
                  uint64_t v336 = *v337;
                  double v341 = *(_DWORD **)v335;
                }
                else
                {
                  uint64_t v346 = 0;
                }
                int v558 = &v346[4 * v342];
                *(_DWORD *)int v558 = 129;
                unint64_t v340 = v558 + 4;
                while (v336 != v341)
                {
                  int v559 = *--v336;
                  *((_DWORD *)v558 - 1) = v559;
                  v558 -= 4;
                }
                *(void *)uint64_t v335 = v558;
                *uint64_t v337 = v340;
                void *v339 = &v346[4 * v345];
                if (v341) {
                  operator delete(v341);
                }
              }
              else
              {
                *uint64_t v336 = 129;
                unint64_t v340 = v336 + 1;
              }
              *uint64_t v337 = v340;
              if (!*v14)
              {
LABEL_3256:
                if ((*((unsigned char *)__p + 16) & 4) == 0) {
                  goto LABEL_3932;
                }
                uint64_t v560 = *v12 + 24 * v13;
                double v562 = (_DWORD **)(v560 + 8);
                uint64_t v561 = *(_DWORD **)(v560 + 8);
                uint64_t v564 = (void *)(v560 + 16);
                unint64_t v563 = *(void *)(v560 + 16);
                if ((unint64_t)v561 >= v563)
                {
                  unsigned int v566 = *(_DWORD **)v560;
                  uint64_t v567 = ((uint64_t)v561 - *(void *)v560) >> 2;
                  unint64_t v568 = v567 + 1;
                  if ((unint64_t)(v567 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v569 = v563 - (void)v566;
                  if (v569 >> 1 > v568) {
                    unint64_t v568 = v569 >> 1;
                  }
                  if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v570 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v570 = v568;
                  }
                  if (v570)
                  {
                    uint64_t v571 = (char *)sub_458C8((uint64_t)v564, v570);
                    uint64_t v561 = *v562;
                    unsigned int v566 = *(_DWORD **)v560;
                  }
                  else
                  {
                    uint64_t v571 = 0;
                  }
                  unint64_t v762 = &v571[4 * v567];
                  *(_DWORD *)unint64_t v762 = 130;
                  unsigned int v565 = v762 + 4;
                  while (v561 != v566)
                  {
                    int v763 = *--v561;
                    *((_DWORD *)v762 - 1) = v763;
                    v762 -= 4;
                  }
                  *(void *)uint64_t v560 = v762;
                  *double v562 = v565;
                  void *v564 = &v571[4 * v570];
                  if (v566) {
                    operator delete(v566);
                  }
                }
                else
                {
                  *uint64_t v561 = 130;
                  unsigned int v565 = v561 + 1;
                }
                *double v562 = v565;
                if (!*v14)
                {
LABEL_3932:
                  if ((*((unsigned char *)__p + 16) & 8) == 0) {
                    goto LABEL_3933;
                  }
                  uint64_t v764 = *v12 + 24 * v13;
                  unsigned int v766 = (_DWORD **)(v764 + 8);
                  int v765 = *(_DWORD **)(v764 + 8);
                  v768 = (void *)(v764 + 16);
                  unint64_t v767 = *(void *)(v764 + 16);
                  if ((unint64_t)v765 >= v767)
                  {
                    unsigned int v770 = *(_DWORD **)v764;
                    uint64_t v771 = ((uint64_t)v765 - *(void *)v764) >> 2;
                    unint64_t v772 = v771 + 1;
                    if ((unint64_t)(v771 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v773 = v767 - (void)v770;
                    if (v773 >> 1 > v772) {
                      unint64_t v772 = v773 >> 1;
                    }
                    if ((unint64_t)v773 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v774 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v774 = v772;
                    }
                    if (v774)
                    {
                      double v775 = (char *)sub_458C8((uint64_t)v768, v774);
                      int v765 = *v766;
                      unsigned int v770 = *(_DWORD **)v764;
                    }
                    else
                    {
                      double v775 = 0;
                    }
                    v951 = &v775[4 * v771];
                    *(_DWORD *)v951 = 131;
                    v769 = v951 + 4;
                    while (v765 != v770)
                    {
                      int v952 = *--v765;
                      *((_DWORD *)v951 - 1) = v952;
                      v951 -= 4;
                    }
                    *(void *)uint64_t v764 = v951;
                    *unsigned int v766 = v769;
                    void *v768 = &v775[4 * v774];
                    if (v770) {
                      operator delete(v770);
                    }
                  }
                  else
                  {
                    *int v765 = 131;
                    v769 = v765 + 1;
                  }
                  *unsigned int v766 = v769;
                  if (!*v14)
                  {
LABEL_3933:
                    if ((*((unsigned char *)__p + 16) & 0x10) == 0) {
                      goto LABEL_3934;
                    }
                    uint64_t v953 = *v12 + 24 * v13;
                    v955 = (_DWORD **)(v953 + 8);
                    unsigned int v954 = *(_DWORD **)(v953 + 8);
                    v957 = (void *)(v953 + 16);
                    unint64_t v956 = *(void *)(v953 + 16);
                    if ((unint64_t)v954 >= v956)
                    {
                      double v959 = *(_DWORD **)v953;
                      uint64_t v960 = ((uint64_t)v954 - *(void *)v953) >> 2;
                      unint64_t v961 = v960 + 1;
                      if ((unint64_t)(v960 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v962 = v956 - (void)v959;
                      if (v962 >> 1 > v961) {
                        unint64_t v961 = v962 >> 1;
                      }
                      if ((unint64_t)v962 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v963 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v963 = v961;
                      }
                      if (v963)
                      {
                        unsigned int v964 = (char *)sub_458C8((uint64_t)v957, v963);
                        unsigned int v954 = *v955;
                        double v959 = *(_DWORD **)v953;
                      }
                      else
                      {
                        unsigned int v964 = 0;
                      }
                      v1138 = &v964[4 * v960];
                      *(_DWORD *)v1138 = 132;
                      unint64_t v958 = v1138 + 4;
                      while (v954 != v959)
                      {
                        int v1139 = *--v954;
                        *((_DWORD *)v1138 - 1) = v1139;
                        v1138 -= 4;
                      }
                      *(void *)uint64_t v953 = v1138;
                      BOOL *v955 = v958;
                      void *v957 = &v964[4 * v963];
                      if (v959) {
                        operator delete(v959);
                      }
                    }
                    else
                    {
                      *unsigned int v954 = 132;
                      unint64_t v958 = v954 + 1;
                    }
                    BOOL *v955 = v958;
                    if (!*v14)
                    {
LABEL_3934:
                      if ((*((unsigned char *)__p + 16) & 0x20) == 0) {
                        goto LABEL_3935;
                      }
                      uint64_t v1140 = *v12 + 24 * v13;
                      unint64_t v1142 = (_DWORD **)(v1140 + 8);
                      unint64_t v1141 = *(_DWORD **)(v1140 + 8);
                      double v1144 = (void *)(v1140 + 16);
                      unint64_t v1143 = *(void *)(v1140 + 16);
                      if ((unint64_t)v1141 >= v1143)
                      {
                        v1146 = *(_DWORD **)v1140;
                        uint64_t v1147 = ((uint64_t)v1141 - *(void *)v1140) >> 2;
                        unint64_t v1148 = v1147 + 1;
                        if ((unint64_t)(v1147 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1149 = v1143 - (void)v1146;
                        if (v1149 >> 1 > v1148) {
                          unint64_t v1148 = v1149 >> 1;
                        }
                        if ((unint64_t)v1149 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1150 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1150 = v1148;
                        }
                        if (v1150)
                        {
                          v1151 = (char *)sub_458C8((uint64_t)v1144, v1150);
                          unint64_t v1141 = *v1142;
                          v1146 = *(_DWORD **)v1140;
                        }
                        else
                        {
                          v1151 = 0;
                        }
                        v1285 = &v1151[4 * v1147];
                        *(_DWORD *)v1285 = 133;
                        v1145 = v1285 + 4;
                        while (v1141 != v1146)
                        {
                          int v1286 = *--v1141;
                          *((_DWORD *)v1285 - 1) = v1286;
                          v1285 -= 4;
                        }
                        *(void *)uint64_t v1140 = v1285;
                        *unint64_t v1142 = v1145;
                        *double v1144 = &v1151[4 * v1150];
                        if (v1146) {
                          operator delete(v1146);
                        }
                      }
                      else
                      {
                        *unint64_t v1141 = 133;
                        v1145 = v1141 + 1;
                      }
                      *unint64_t v1142 = v1145;
                      if (!*v14)
                      {
LABEL_3935:
                        if ((*((unsigned char *)__p + 16) & 0x40) == 0) {
                          goto LABEL_3936;
                        }
                        uint64_t v1287 = *v12 + 24 * v13;
                        unint64_t v1289 = (_DWORD **)(v1287 + 8);
                        double v1288 = *(_DWORD **)(v1287 + 8);
                        v1291 = (void *)(v1287 + 16);
                        unint64_t v1290 = *(void *)(v1287 + 16);
                        if ((unint64_t)v1288 >= v1290)
                        {
                          v1293 = *(_DWORD **)v1287;
                          uint64_t v1294 = ((uint64_t)v1288 - *(void *)v1287) >> 2;
                          unint64_t v1295 = v1294 + 1;
                          if ((unint64_t)(v1294 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1296 = v1290 - (void)v1293;
                          if (v1296 >> 1 > v1295) {
                            unint64_t v1295 = v1296 >> 1;
                          }
                          if ((unint64_t)v1296 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1297 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1297 = v1295;
                          }
                          if (v1297)
                          {
                            v1298 = (char *)sub_458C8((uint64_t)v1291, v1297);
                            double v1288 = *v1289;
                            v1293 = *(_DWORD **)v1287;
                          }
                          else
                          {
                            v1298 = 0;
                          }
                          v1434 = &v1298[4 * v1294];
                          *(_DWORD *)v1434 = 134;
                          v1292 = v1434 + 4;
                          while (v1288 != v1293)
                          {
                            int v1435 = *--v1288;
                            *((_DWORD *)v1434 - 1) = v1435;
                            v1434 -= 4;
                          }
                          *(void *)uint64_t v1287 = v1434;
                          *unint64_t v1289 = v1292;
                          void *v1291 = &v1298[4 * v1297];
                          if (v1293) {
                            operator delete(v1293);
                          }
                        }
                        else
                        {
                          *double v1288 = 134;
                          v1292 = v1288 + 1;
                        }
                        *unint64_t v1289 = v1292;
                        if (!*v14)
                        {
LABEL_3936:
                          if ((*((unsigned char *)__p + 16) & 0x80) == 0) {
                            goto LABEL_3937;
                          }
                          uint64_t v1436 = *v12 + 24 * v13;
                          double v1438 = (_DWORD **)(v1436 + 8);
                          unsigned int v1437 = *(_DWORD **)(v1436 + 8);
                          v1440 = (void *)(v1436 + 16);
                          unint64_t v1439 = *(void *)(v1436 + 16);
                          if ((unint64_t)v1437 >= v1439)
                          {
                            double v1442 = *(_DWORD **)v1436;
                            uint64_t v1443 = ((uint64_t)v1437 - *(void *)v1436) >> 2;
                            unint64_t v1444 = v1443 + 1;
                            if ((unint64_t)(v1443 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1445 = v1439 - (void)v1442;
                            if (v1445 >> 1 > v1444) {
                              unint64_t v1444 = v1445 >> 1;
                            }
                            if ((unint64_t)v1445 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1446 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1446 = v1444;
                            }
                            if (v1446)
                            {
                              v1447 = (char *)sub_458C8((uint64_t)v1440, v1446);
                              unsigned int v1437 = *v1438;
                              double v1442 = *(_DWORD **)v1436;
                            }
                            else
                            {
                              v1447 = 0;
                            }
                            unint64_t v1574 = &v1447[4 * v1443];
                            *(_DWORD *)unint64_t v1574 = 135;
                            v1441 = v1574 + 4;
                            while (v1437 != v1442)
                            {
                              int v1575 = *--v1437;
                              *((_DWORD *)v1574 - 1) = v1575;
                              v1574 -= 4;
                            }
                            *(void *)uint64_t v1436 = v1574;
                            *double v1438 = v1441;
                            void *v1440 = &v1447[4 * v1446];
                            if (v1442) {
                              operator delete(v1442);
                            }
                          }
                          else
                          {
                            *unsigned int v1437 = 135;
                            v1441 = v1437 + 1;
                          }
                          *double v1438 = v1441;
                          if (!*v14)
                          {
LABEL_3937:
                            if ((*((unsigned char *)__p + 17) & 1) == 0) {
                              goto LABEL_3938;
                            }
                            uint64_t v1576 = *v12 + 24 * v13;
                            v1578 = (_DWORD **)(v1576 + 8);
                            v1577 = *(_DWORD **)(v1576 + 8);
                            unsigned int v1580 = (void *)(v1576 + 16);
                            unint64_t v1579 = *(void *)(v1576 + 16);
                            if ((unint64_t)v1577 >= v1579)
                            {
                              double v1582 = *(_DWORD **)v1576;
                              uint64_t v1583 = ((uint64_t)v1577 - *(void *)v1576) >> 2;
                              unint64_t v1584 = v1583 + 1;
                              if ((unint64_t)(v1583 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1585 = v1579 - (void)v1582;
                              if (v1585 >> 1 > v1584) {
                                unint64_t v1584 = v1585 >> 1;
                              }
                              if ((unint64_t)v1585 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1586 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1586 = v1584;
                              }
                              if (v1586)
                              {
                                unsigned int v1587 = (char *)sub_458C8((uint64_t)v1580, v1586);
                                v1577 = *v1578;
                                double v1582 = *(_DWORD **)v1576;
                              }
                              else
                              {
                                unsigned int v1587 = 0;
                              }
                              v1707 = &v1587[4 * v1583];
                              *(_DWORD *)v1707 = 136;
                              unsigned int v1581 = v1707 + 4;
                              while (v1577 != v1582)
                              {
                                int v1708 = *--v1577;
                                *((_DWORD *)v1707 - 1) = v1708;
                                v1707 -= 4;
                              }
                              *(void *)uint64_t v1576 = v1707;
                              double *v1578 = v1581;
                              *unsigned int v1580 = &v1587[4 * v1586];
                              if (v1582) {
                                operator delete(v1582);
                              }
                            }
                            else
                            {
                              _DWORD *v1577 = 136;
                              unsigned int v1581 = v1577 + 1;
                            }
                            double *v1578 = v1581;
                            if (!*v14)
                            {
LABEL_3938:
                              if ((*((unsigned char *)__p + 17) & 2) == 0) {
                                goto LABEL_3939;
                              }
                              uint64_t v1709 = *v12 + 24 * v13;
                              v1711 = (_DWORD **)(v1709 + 8);
                              unsigned int v1710 = *(_DWORD **)(v1709 + 8);
                              v1713 = (void *)(v1709 + 16);
                              unint64_t v1712 = *(void *)(v1709 + 16);
                              if ((unint64_t)v1710 >= v1712)
                              {
                                unint64_t v1715 = *(_DWORD **)v1709;
                                uint64_t v1716 = ((uint64_t)v1710 - *(void *)v1709) >> 2;
                                unint64_t v1717 = v1716 + 1;
                                if ((unint64_t)(v1716 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1718 = v1712 - (void)v1715;
                                if (v1718 >> 1 > v1717) {
                                  unint64_t v1717 = v1718 >> 1;
                                }
                                if ((unint64_t)v1718 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1719 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1719 = v1717;
                                }
                                if (v1719)
                                {
                                  unsigned int v1720 = (char *)sub_458C8((uint64_t)v1713, v1719);
                                  unsigned int v1710 = *v1711;
                                  unint64_t v1715 = *(_DWORD **)v1709;
                                }
                                else
                                {
                                  unsigned int v1720 = 0;
                                }
                                unsigned int v1826 = &v1720[4 * v1716];
                                *(_DWORD *)unsigned int v1826 = 137;
                                double v1714 = v1826 + 4;
                                while (v1710 != v1715)
                                {
                                  int v1827 = *--v1710;
                                  *((_DWORD *)v1826 - 1) = v1827;
                                  v1826 -= 4;
                                }
                                *(void *)uint64_t v1709 = v1826;
                                double *v1711 = v1714;
                                void *v1713 = &v1720[4 * v1719];
                                if (v1715) {
                                  operator delete(v1715);
                                }
                              }
                              else
                              {
                                *unsigned int v1710 = 137;
                                double v1714 = v1710 + 1;
                              }
                              double *v1711 = v1714;
                              if (!*v14)
                              {
LABEL_3939:
                                if ((*((unsigned char *)__p + 17) & 4) == 0) {
                                  goto LABEL_3940;
                                }
                                uint64_t v1828 = *v12 + 24 * v13;
                                unsigned int v1830 = (_DWORD **)(v1828 + 8);
                                v1829 = *(_DWORD **)(v1828 + 8);
                                unsigned int v1832 = (void *)(v1828 + 16);
                                unint64_t v1831 = *(void *)(v1828 + 16);
                                if ((unint64_t)v1829 >= v1831)
                                {
                                  v1834 = *(_DWORD **)v1828;
                                  uint64_t v1835 = ((uint64_t)v1829 - *(void *)v1828) >> 2;
                                  unint64_t v1836 = v1835 + 1;
                                  if ((unint64_t)(v1835 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1837 = v1831 - (void)v1834;
                                  if (v1837 >> 1 > v1836) {
                                    unint64_t v1836 = v1837 >> 1;
                                  }
                                  if ((unint64_t)v1837 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1838 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1838 = v1836;
                                  }
                                  if (v1838)
                                  {
                                    v1839 = (char *)sub_458C8((uint64_t)v1832, v1838);
                                    v1829 = *v1830;
                                    v1834 = *(_DWORD **)v1828;
                                  }
                                  else
                                  {
                                    v1839 = 0;
                                  }
                                  unsigned int v1920 = &v1839[4 * v1835];
                                  *(_DWORD *)unsigned int v1920 = 138;
                                  v1833 = v1920 + 4;
                                  while (v1829 != v1834)
                                  {
                                    int v1921 = *--v1829;
                                    *((_DWORD *)v1920 - 1) = v1921;
                                    v1920 -= 4;
                                  }
                                  *(void *)uint64_t v1828 = v1920;
                                  *unsigned int v1830 = v1833;
                                  *unsigned int v1832 = &v1839[4 * v1838];
                                  if (v1834) {
                                    operator delete(v1834);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1829 = 138;
                                  v1833 = v1829 + 1;
                                }
                                *unsigned int v1830 = v1833;
                                if (!*v14)
                                {
LABEL_3940:
                                  if ((*((unsigned char *)__p + 17) & 8) == 0) {
                                    goto LABEL_3941;
                                  }
                                  uint64_t v1922 = *v12 + 24 * v13;
                                  unsigned int v1924 = (_DWORD **)(v1922 + 8);
                                  v1923 = *(_DWORD **)(v1922 + 8);
                                  unsigned int v1926 = (void *)(v1922 + 16);
                                  unint64_t v1925 = *(void *)(v1922 + 16);
                                  if ((unint64_t)v1923 >= v1925)
                                  {
                                    v1928 = *(_DWORD **)v1922;
                                    uint64_t v1929 = ((uint64_t)v1923 - *(void *)v1922) >> 2;
                                    unint64_t v1930 = v1929 + 1;
                                    if ((unint64_t)(v1929 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1931 = v1925 - (void)v1928;
                                    if (v1931 >> 1 > v1930) {
                                      unint64_t v1930 = v1931 >> 1;
                                    }
                                    if ((unint64_t)v1931 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1932 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1932 = v1930;
                                    }
                                    if (v1932)
                                    {
                                      v1933 = (char *)sub_458C8((uint64_t)v1926, v1932);
                                      v1923 = *v1924;
                                      v1928 = *(_DWORD **)v1922;
                                    }
                                    else
                                    {
                                      v1933 = 0;
                                    }
                                    v2005 = &v1933[4 * v1929];
                                    *(_DWORD *)v2005 = 139;
                                    v1927 = v2005 + 4;
                                    while (v1923 != v1928)
                                    {
                                      int v2006 = *--v1923;
                                      *((_DWORD *)v2005 - 1) = v2006;
                                      v2005 -= 4;
                                    }
                                    *(void *)uint64_t v1922 = v2005;
                                    *unsigned int v1924 = v1927;
                                    *unsigned int v1926 = &v1933[4 * v1932];
                                    if (v1928) {
                                      operator delete(v1928);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1923 = 139;
                                    v1927 = v1923 + 1;
                                  }
                                  *unsigned int v1924 = v1927;
                                  if (!*v14)
                                  {
LABEL_3941:
                                    if ((*((unsigned char *)__p + 17) & 0x10) == 0) {
                                      goto LABEL_3942;
                                    }
                                    uint64_t v2007 = *v12 + 24 * v13;
                                    v2009 = (_DWORD **)(v2007 + 8);
                                    unint64_t v2008 = *(_DWORD **)(v2007 + 8);
                                    v2011 = (void *)(v2007 + 16);
                                    unint64_t v2010 = *(void *)(v2007 + 16);
                                    if ((unint64_t)v2008 >= v2010)
                                    {
                                      v2013 = *(_DWORD **)v2007;
                                      uint64_t v2014 = ((uint64_t)v2008 - *(void *)v2007) >> 2;
                                      unint64_t v2015 = v2014 + 1;
                                      if ((unint64_t)(v2014 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2016 = v2010 - (void)v2013;
                                      if (v2016 >> 1 > v2015) {
                                        unint64_t v2015 = v2016 >> 1;
                                      }
                                      if ((unint64_t)v2016 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v2017 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v2017 = v2015;
                                      }
                                      if (v2017)
                                      {
                                        v2018 = (char *)sub_458C8((uint64_t)v2011, v2017);
                                        unint64_t v2008 = *v2009;
                                        v2013 = *(_DWORD **)v2007;
                                      }
                                      else
                                      {
                                        v2018 = 0;
                                      }
                                      v2089 = &v2018[4 * v2014];
                                      *(_DWORD *)v2089 = 140;
                                      v2012 = v2089 + 4;
                                      while (v2008 != v2013)
                                      {
                                        int v2090 = *--v2008;
                                        *((_DWORD *)v2089 - 1) = v2090;
                                        v2089 -= 4;
                                      }
                                      *(void *)uint64_t v2007 = v2089;
                                      *v2009 = v2012;
                                      void *v2011 = &v2018[4 * v2017];
                                      if (v2013) {
                                        operator delete(v2013);
                                      }
                                    }
                                    else
                                    {
                                      *unint64_t v2008 = 140;
                                      v2012 = v2008 + 1;
                                    }
                                    *v2009 = v2012;
                                    if (!*v14)
                                    {
LABEL_3942:
                                      if ((*((unsigned char *)__p + 17) & 0x20) == 0) {
                                        goto LABEL_3943;
                                      }
                                      uint64_t v2091 = *v12 + 24 * v13;
                                      v2093 = (_DWORD **)(v2091 + 8);
                                      v2092 = *(_DWORD **)(v2091 + 8);
                                      v2095 = (void *)(v2091 + 16);
                                      unint64_t v2094 = *(void *)(v2091 + 16);
                                      if ((unint64_t)v2092 >= v2094)
                                      {
                                        v2097 = *(_DWORD **)v2091;
                                        uint64_t v2098 = ((uint64_t)v2092 - *(void *)v2091) >> 2;
                                        unint64_t v2099 = v2098 + 1;
                                        if ((unint64_t)(v2098 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2100 = v2094 - (void)v2097;
                                        if (v2100 >> 1 > v2099) {
                                          unint64_t v2099 = v2100 >> 1;
                                        }
                                        if ((unint64_t)v2100 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2101 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2101 = v2099;
                                        }
                                        if (v2101)
                                        {
                                          v2102 = (char *)sub_458C8((uint64_t)v2095, v2101);
                                          v2092 = *v2093;
                                          v2097 = *(_DWORD **)v2091;
                                        }
                                        else
                                        {
                                          v2102 = 0;
                                        }
                                        v2173 = &v2102[4 * v2098];
                                        *(_DWORD *)v2173 = 141;
                                        v2096 = v2173 + 4;
                                        while (v2092 != v2097)
                                        {
                                          int v2174 = *--v2092;
                                          *((_DWORD *)v2173 - 1) = v2174;
                                          v2173 -= 4;
                                        }
                                        *(void *)uint64_t v2091 = v2173;
                                        *v2093 = v2096;
                                        void *v2095 = &v2102[4 * v2101];
                                        if (v2097) {
                                          operator delete(v2097);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2092 = 141;
                                        v2096 = v2092 + 1;
                                      }
                                      *v2093 = v2096;
                                      if (!*v14)
                                      {
LABEL_3943:
                                        if ((*((unsigned char *)__p + 17) & 0x40) == 0) {
                                          goto LABEL_3944;
                                        }
                                        uint64_t v2175 = *v12 + 24 * v13;
                                        v2177 = (_DWORD **)(v2175 + 8);
                                        v2176 = *(_DWORD **)(v2175 + 8);
                                        v2179 = (void *)(v2175 + 16);
                                        unint64_t v2178 = *(void *)(v2175 + 16);
                                        if ((unint64_t)v2176 >= v2178)
                                        {
                                          v2181 = *(_DWORD **)v2175;
                                          uint64_t v2182 = ((uint64_t)v2176 - *(void *)v2175) >> 2;
                                          unint64_t v2183 = v2182 + 1;
                                          if ((unint64_t)(v2182 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2184 = v2178 - (void)v2181;
                                          if (v2184 >> 1 > v2183) {
                                            unint64_t v2183 = v2184 >> 1;
                                          }
                                          if ((unint64_t)v2184 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2185 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2185 = v2183;
                                          }
                                          if (v2185)
                                          {
                                            v2186 = (char *)sub_458C8((uint64_t)v2179, v2185);
                                            v2176 = *v2177;
                                            v2181 = *(_DWORD **)v2175;
                                          }
                                          else
                                          {
                                            v2186 = 0;
                                          }
                                          v2249 = &v2186[4 * v2182];
                                          *(_DWORD *)v2249 = 142;
                                          v2180 = v2249 + 4;
                                          while (v2176 != v2181)
                                          {
                                            int v2250 = *--v2176;
                                            *((_DWORD *)v2249 - 1) = v2250;
                                            v2249 -= 4;
                                          }
                                          *(void *)uint64_t v2175 = v2249;
                                          *v2177 = v2180;
                                          void *v2179 = &v2186[4 * v2185];
                                          if (v2181) {
                                            operator delete(v2181);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2176 = 142;
                                          v2180 = v2176 + 1;
                                        }
                                        *v2177 = v2180;
                                        if (!*v14)
                                        {
LABEL_3944:
                                          if ((*((unsigned char *)__p + 17) & 0x80) == 0) {
                                            goto LABEL_3945;
                                          }
                                          uint64_t v2251 = *v12 + 24 * v13;
                                          v2253 = (_DWORD **)(v2251 + 8);
                                          v2252 = *(_DWORD **)(v2251 + 8);
                                          v2255 = (void *)(v2251 + 16);
                                          unint64_t v2254 = *(void *)(v2251 + 16);
                                          if ((unint64_t)v2252 >= v2254)
                                          {
                                            v2257 = *(_DWORD **)v2251;
                                            uint64_t v2258 = ((uint64_t)v2252 - *(void *)v2251) >> 2;
                                            unint64_t v2259 = v2258 + 1;
                                            if ((unint64_t)(v2258 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2260 = v2254 - (void)v2257;
                                            if (v2260 >> 1 > v2259) {
                                              unint64_t v2259 = v2260 >> 1;
                                            }
                                            if ((unint64_t)v2260 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2261 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2261 = v2259;
                                            }
                                            if (v2261)
                                            {
                                              v2262 = (char *)sub_458C8((uint64_t)v2255, v2261);
                                              v2252 = *v2253;
                                              v2257 = *(_DWORD **)v2251;
                                            }
                                            else
                                            {
                                              v2262 = 0;
                                            }
                                            v2312 = &v2262[4 * v2258];
                                            *(_DWORD *)v2312 = 143;
                                            v2256 = v2312 + 4;
                                            while (v2252 != v2257)
                                            {
                                              int v2313 = *--v2252;
                                              *((_DWORD *)v2312 - 1) = v2313;
                                              v2312 -= 4;
                                            }
                                            *(void *)uint64_t v2251 = v2312;
                                            *v2253 = v2256;
                                            void *v2255 = &v2262[4 * v2261];
                                            if (v2257) {
                                              operator delete(v2257);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2252 = 143;
                                            v2256 = v2252 + 1;
                                          }
                                          *v2253 = v2256;
                                          if (!*v14)
                                          {
LABEL_3945:
                                            if ((*((unsigned char *)__p + 18) & 1) == 0) {
                                              goto LABEL_3946;
                                            }
                                            uint64_t v2314 = *v12 + 24 * v13;
                                            v2316 = (_DWORD **)(v2314 + 8);
                                            v2315 = *(_DWORD **)(v2314 + 8);
                                            v2318 = (void *)(v2314 + 16);
                                            unint64_t v2317 = *(void *)(v2314 + 16);
                                            if ((unint64_t)v2315 >= v2317)
                                            {
                                              v2320 = *(_DWORD **)v2314;
                                              uint64_t v2321 = ((uint64_t)v2315 - *(void *)v2314) >> 2;
                                              unint64_t v2322 = v2321 + 1;
                                              if ((unint64_t)(v2321 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2323 = v2317 - (void)v2320;
                                              if (v2323 >> 1 > v2322) {
                                                unint64_t v2322 = v2323 >> 1;
                                              }
                                              if ((unint64_t)v2323 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2324 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2324 = v2322;
                                              }
                                              if (v2324)
                                              {
                                                v2325 = (char *)sub_458C8((uint64_t)v2318, v2324);
                                                v2315 = *v2316;
                                                v2320 = *(_DWORD **)v2314;
                                              }
                                              else
                                              {
                                                v2325 = 0;
                                              }
                                              v2369 = &v2325[4 * v2321];
                                              *(_DWORD *)v2369 = 144;
                                              v2319 = v2369 + 4;
                                              while (v2315 != v2320)
                                              {
                                                int v2370 = *--v2315;
                                                *((_DWORD *)v2369 - 1) = v2370;
                                                v2369 -= 4;
                                              }
                                              *(void *)uint64_t v2314 = v2369;
                                              *v2316 = v2319;
                                              void *v2318 = &v2325[4 * v2324];
                                              if (v2320) {
                                                operator delete(v2320);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2315 = 144;
                                              v2319 = v2315 + 1;
                                            }
                                            *v2316 = v2319;
                                            if (!*v14)
                                            {
LABEL_3946:
                                              if ((*((unsigned char *)__p + 18) & 2) == 0) {
                                                goto LABEL_3947;
                                              }
                                              uint64_t v2371 = *v12 + 24 * v13;
                                              v2373 = (_DWORD **)(v2371 + 8);
                                              v2372 = *(_DWORD **)(v2371 + 8);
                                              v2375 = (void *)(v2371 + 16);
                                              unint64_t v2374 = *(void *)(v2371 + 16);
                                              if ((unint64_t)v2372 >= v2374)
                                              {
                                                v2377 = *(_DWORD **)v2371;
                                                uint64_t v2378 = ((uint64_t)v2372 - *(void *)v2371) >> 2;
                                                unint64_t v2379 = v2378 + 1;
                                                if ((unint64_t)(v2378 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2380 = v2374 - (void)v2377;
                                                if (v2380 >> 1 > v2379) {
                                                  unint64_t v2379 = v2380 >> 1;
                                                }
                                                if ((unint64_t)v2380 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v2381 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v2381 = v2379;
                                                }
                                                if (v2381)
                                                {
                                                  v2382 = (char *)sub_458C8((uint64_t)v2375, v2381);
                                                  v2372 = *v2373;
                                                  v2377 = *(_DWORD **)v2371;
                                                }
                                                else
                                                {
                                                  v2382 = 0;
                                                }
                                                v2417 = &v2382[4 * v2378];
                                                *(_DWORD *)v2417 = 145;
                                                v2376 = v2417 + 4;
                                                while (v2372 != v2377)
                                                {
                                                  int v2418 = *--v2372;
                                                  *((_DWORD *)v2417 - 1) = v2418;
                                                  v2417 -= 4;
                                                }
                                                *(void *)uint64_t v2371 = v2417;
                                                *v2373 = v2376;
                                                void *v2375 = &v2382[4 * v2381];
                                                if (v2377) {
                                                  operator delete(v2377);
                                                }
                                              }
                                              else
                                              {
                                                _DWORD *v2372 = 145;
                                                v2376 = v2372 + 1;
                                              }
                                              *v2373 = v2376;
                                              if (!*v14)
                                              {
LABEL_3947:
                                                if ((*((unsigned char *)__p + 18) & 4) == 0) {
                                                  goto LABEL_3948;
                                                }
                                                uint64_t v2419 = *v12 + 24 * v13;
                                                v2421 = (_DWORD **)(v2419 + 8);
                                                v2420 = *(_DWORD **)(v2419 + 8);
                                                v2423 = (void *)(v2419 + 16);
                                                unint64_t v2422 = *(void *)(v2419 + 16);
                                                if ((unint64_t)v2420 >= v2422)
                                                {
                                                  v2425 = *(_DWORD **)v2419;
                                                  uint64_t v2426 = ((uint64_t)v2420 - *(void *)v2419) >> 2;
                                                  unint64_t v2427 = v2426 + 1;
                                                  if ((unint64_t)(v2426 + 1) >> 62) {
                                                    sub_566C();
                                                  }
                                                  uint64_t v2428 = v2422 - (void)v2425;
                                                  if (v2428 >> 1 > v2427) {
                                                    unint64_t v2427 = v2428 >> 1;
                                                  }
                                                  if ((unint64_t)v2428 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                    unint64_t v2429 = 0x3FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v2429 = v2427;
                                                  }
                                                  if (v2429)
                                                  {
                                                    v2430 = (char *)sub_458C8((uint64_t)v2423, v2429);
                                                    v2420 = *v2421;
                                                    v2425 = *(_DWORD **)v2419;
                                                  }
                                                  else
                                                  {
                                                    v2430 = 0;
                                                  }
                                                  v2460 = &v2430[4 * v2426];
                                                  *(_DWORD *)v2460 = 146;
                                                  v2424 = v2460 + 4;
                                                  while (v2420 != v2425)
                                                  {
                                                    int v2461 = *--v2420;
                                                    *((_DWORD *)v2460 - 1) = v2461;
                                                    v2460 -= 4;
                                                  }
                                                  *(void *)uint64_t v2419 = v2460;
                                                  *v2421 = v2424;
                                                  void *v2423 = &v2430[4 * v2429];
                                                  if (v2425) {
                                                    operator delete(v2425);
                                                  }
                                                }
                                                else
                                                {
                                                  _DWORD *v2420 = 146;
                                                  v2424 = v2420 + 1;
                                                }
                                                *v2421 = v2424;
                                                if (!*v14)
                                                {
LABEL_3948:
                                                  if ((*((unsigned char *)__p + 18) & 8) != 0)
                                                  {
                                                    uint64_t v1723 = *v12 + 24 * v13;
                                                    unint64_t v1725 = (int **)(v1723 + 8);
                                                    double v1724 = *(int **)(v1723 + 8);
                                                    v1727 = (void *)(v1723 + 16);
                                                    unint64_t v2462 = *(void *)(v1723 + 16);
                                                    if ((unint64_t)v1724 < v2462)
                                                    {
                                                      int v1728 = 147;
                                                      goto LABEL_2504;
                                                    }
                                                    v1729 = *(int **)v1723;
                                                    uint64_t v2463 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                                    unint64_t v2464 = v2463 + 1;
                                                    if ((unint64_t)(v2463 + 1) >> 62) {
                                                      sub_566C();
                                                    }
                                                    uint64_t v2465 = v2462 - (void)v1729;
                                                    if (v2465 >> 1 > v2464) {
                                                      unint64_t v2464 = v2465 >> 1;
                                                    }
                                                    if ((unint64_t)v2465 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                      unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v1733 = v2464;
                                                    }
                                                    if (v1733)
                                                    {
                                                      v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                                      double v1724 = *v1725;
                                                      v1729 = *(int **)v1723;
                                                    }
                                                    else
                                                    {
                                                      v1734 = 0;
                                                    }
                                                    v1840 = &v1734[4 * v2463];
                                                    *(_DWORD *)v1840 = 147;
                                                    v1841 = (int *)(v1840 + 4);
                                                    while (v1724 != v1729)
                                                    {
                                                      int v2494 = *--v1724;
                                                      *((_DWORD *)v1840 - 1) = v2494;
                                                      v1840 -= 4;
                                                    }
                                                    goto LABEL_3716;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 1:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 19) & 0x40) == 0) {
              goto LABEL_392;
            }
            uint64_t v75 = *v12 + 24 * v13;
            uint64_t v77 = (_DWORD **)(v75 + 8);
            uint64_t v76 = *(_DWORD **)(v75 + 8);
            unint64_t v79 = (void *)(v75 + 16);
            unint64_t v78 = *(void *)(v75 + 16);
            if ((unint64_t)v76 >= v78)
            {
              double v171 = *(_DWORD **)v75;
              uint64_t v172 = ((uint64_t)v76 - *(void *)v75) >> 2;
              unint64_t v173 = v172 + 1;
              if ((unint64_t)(v172 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v174 = v78 - (void)v171;
              if (v174 >> 1 > v173) {
                unint64_t v173 = v174 >> 1;
              }
              if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v175 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v173;
              }
              if (v175)
              {
                uint64_t v176 = (char *)sub_458C8((uint64_t)v79, v175);
                uint64_t v76 = *v77;
                double v171 = *(_DWORD **)v75;
              }
              else
              {
                uint64_t v176 = 0;
              }
              double v347 = &v176[4 * v172];
              *(_DWORD *)double v347 = 158;
              unint64_t v80 = v347 + 4;
              while (v76 != v171)
              {
                int v348 = *--v76;
                *((_DWORD *)v347 - 1) = v348;
                v347 -= 4;
              }
              *(void *)uint64_t v75 = v347;
              *uint64_t v77 = v80;
              *unint64_t v79 = &v176[4 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              _DWORD *v76 = 158;
              unint64_t v80 = v76 + 1;
            }
            *uint64_t v77 = v80;
            if (!*v14)
            {
LABEL_392:
              if ((*((unsigned char *)__p + 19) & 0x80) == 0) {
                goto LABEL_2237;
              }
              uint64_t v349 = *v12 + 24 * v13;
              double v351 = (_DWORD **)(v349 + 8);
              double v350 = *(_DWORD **)(v349 + 8);
              char v353 = (void *)(v349 + 16);
              unint64_t v352 = *(void *)(v349 + 16);
              if ((unint64_t)v350 >= v352)
              {
                double v355 = *(_DWORD **)v349;
                uint64_t v356 = ((uint64_t)v350 - *(void *)v349) >> 2;
                unint64_t v357 = v356 + 1;
                if ((unint64_t)(v356 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v358 = v352 - (void)v355;
                if (v358 >> 1 > v357) {
                  unint64_t v357 = v358 >> 1;
                }
                if ((unint64_t)v358 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v359 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v359 = v357;
                }
                if (v359)
                {
                  uint64_t v360 = (char *)sub_458C8((uint64_t)v353, v359);
                  double v350 = *v351;
                  double v355 = *(_DWORD **)v349;
                }
                else
                {
                  uint64_t v360 = 0;
                }
                uint64_t v572 = &v360[4 * v356];
                *(_DWORD *)uint64_t v572 = 159;
                uint64_t v354 = v572 + 4;
                while (v350 != v355)
                {
                  int v573 = *--v350;
                  *((_DWORD *)v572 - 1) = v573;
                  v572 -= 4;
                }
                *(void *)uint64_t v349 = v572;
                *double v351 = v354;
                void *v353 = &v360[4 * v359];
                if (v355) {
                  operator delete(v355);
                }
              }
              else
              {
                *double v350 = 159;
                uint64_t v354 = v350 + 1;
              }
              *double v351 = v354;
              if (!*v14)
              {
LABEL_2237:
                if ((*((unsigned char *)__p + 20) & 1) == 0) {
                  goto LABEL_3949;
                }
                uint64_t v574 = *v12 + 24 * v13;
                char v576 = (_DWORD **)(v574 + 8);
                uint64_t v575 = *(_DWORD **)(v574 + 8);
                uint64_t v578 = (void *)(v574 + 16);
                unint64_t v577 = *(void *)(v574 + 16);
                if ((unint64_t)v575 >= v577)
                {
                  uint64_t v580 = *(_DWORD **)v574;
                  uint64_t v581 = ((uint64_t)v575 - *(void *)v574) >> 2;
                  unint64_t v582 = v581 + 1;
                  if ((unint64_t)(v581 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v583 = v577 - (void)v580;
                  if (v583 >> 1 > v582) {
                    unint64_t v582 = v583 >> 1;
                  }
                  if ((unint64_t)v583 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v584 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v584 = v582;
                  }
                  if (v584)
                  {
                    uint64_t v585 = (char *)sub_458C8((uint64_t)v578, v584);
                    uint64_t v575 = *v576;
                    uint64_t v580 = *(_DWORD **)v574;
                  }
                  else
                  {
                    uint64_t v585 = 0;
                  }
                  int v776 = &v585[4 * v581];
                  *(_DWORD *)int v776 = 160;
                  uint64_t v579 = v776 + 4;
                  while (v575 != v580)
                  {
                    int v777 = *--v575;
                    *((_DWORD *)v776 - 1) = v777;
                    v776 -= 4;
                  }
                  *(void *)uint64_t v574 = v776;
                  double *v576 = v579;
                  *uint64_t v578 = &v585[4 * v584];
                  if (v580) {
                    operator delete(v580);
                  }
                }
                else
                {
                  _DWORD *v575 = 160;
                  uint64_t v579 = v575 + 1;
                }
                double *v576 = v579;
                if (!*v14)
                {
LABEL_3949:
                  if ((*((unsigned char *)__p + 20) & 2) == 0) {
                    goto LABEL_3950;
                  }
                  uint64_t v778 = *v12 + 24 * v13;
                  v780 = (_DWORD **)(v778 + 8);
                  double v779 = *(_DWORD **)(v778 + 8);
                  double v782 = (void *)(v778 + 16);
                  unint64_t v781 = *(void *)(v778 + 16);
                  if ((unint64_t)v779 >= v781)
                  {
                    v784 = *(_DWORD **)v778;
                    uint64_t v785 = ((uint64_t)v779 - *(void *)v778) >> 2;
                    unint64_t v786 = v785 + 1;
                    if ((unint64_t)(v785 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v787 = v781 - (void)v784;
                    if (v787 >> 1 > v786) {
                      unint64_t v786 = v787 >> 1;
                    }
                    if ((unint64_t)v787 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v788 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v788 = v786;
                    }
                    if (v788)
                    {
                      int v789 = (char *)sub_458C8((uint64_t)v782, v788);
                      double v779 = *v780;
                      v784 = *(_DWORD **)v778;
                    }
                    else
                    {
                      int v789 = 0;
                    }
                    int v965 = &v789[4 * v785];
                    *(_DWORD *)int v965 = 161;
                    uint64_t v783 = v965 + 4;
                    while (v779 != v784)
                    {
                      int v966 = *--v779;
                      *((_DWORD *)v965 - 1) = v966;
                      v965 -= 4;
                    }
                    *(void *)uint64_t v778 = v965;
                    double *v780 = v783;
                    *double v782 = &v789[4 * v788];
                    if (v784) {
                      operator delete(v784);
                    }
                  }
                  else
                  {
                    _DWORD *v779 = 161;
                    uint64_t v783 = v779 + 1;
                  }
                  double *v780 = v783;
                  if (!*v14)
                  {
LABEL_3950:
                    if ((*((unsigned char *)__p + 20) & 4) == 0) {
                      goto LABEL_3951;
                    }
                    uint64_t v967 = *v12 + 24 * v13;
                    unint64_t v969 = (_DWORD **)(v967 + 8);
                    int v968 = *(_DWORD **)(v967 + 8);
                    int v971 = (void *)(v967 + 16);
                    unint64_t v970 = *(void *)(v967 + 16);
                    if ((unint64_t)v968 >= v970)
                    {
                      v973 = *(_DWORD **)v967;
                      uint64_t v974 = ((uint64_t)v968 - *(void *)v967) >> 2;
                      unint64_t v975 = v974 + 1;
                      if ((unint64_t)(v974 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v976 = v970 - (void)v973;
                      if (v976 >> 1 > v975) {
                        unint64_t v975 = v976 >> 1;
                      }
                      if ((unint64_t)v976 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v977 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v977 = v975;
                      }
                      if (v977)
                      {
                        v978 = (char *)sub_458C8((uint64_t)v971, v977);
                        int v968 = *v969;
                        v973 = *(_DWORD **)v967;
                      }
                      else
                      {
                        v978 = 0;
                      }
                      v1152 = &v978[4 * v974];
                      *(_DWORD *)v1152 = 162;
                      v972 = v1152 + 4;
                      while (v968 != v973)
                      {
                        int v1153 = *--v968;
                        *((_DWORD *)v1152 - 1) = v1153;
                        v1152 -= 4;
                      }
                      *(void *)uint64_t v967 = v1152;
                      *unint64_t v969 = v972;
                      *int v971 = &v978[4 * v977];
                      if (v973) {
                        operator delete(v973);
                      }
                    }
                    else
                    {
                      _DWORD *v968 = 162;
                      v972 = v968 + 1;
                    }
                    *unint64_t v969 = v972;
                    if (!*v14)
                    {
LABEL_3951:
                      if ((*((unsigned char *)__p + 20) & 8) == 0) {
                        goto LABEL_3952;
                      }
                      uint64_t v1154 = *v12 + 24 * v13;
                      unint64_t v1156 = (_DWORD **)(v1154 + 8);
                      double v1155 = *(_DWORD **)(v1154 + 8);
                      v1158 = (void *)(v1154 + 16);
                      unint64_t v1157 = *(void *)(v1154 + 16);
                      if ((unint64_t)v1155 >= v1157)
                      {
                        v1160 = *(_DWORD **)v1154;
                        uint64_t v1161 = ((uint64_t)v1155 - *(void *)v1154) >> 2;
                        unint64_t v1162 = v1161 + 1;
                        if ((unint64_t)(v1161 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1163 = v1157 - (void)v1160;
                        if (v1163 >> 1 > v1162) {
                          unint64_t v1162 = v1163 >> 1;
                        }
                        if ((unint64_t)v1163 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1164 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1164 = v1162;
                        }
                        if (v1164)
                        {
                          v1165 = (char *)sub_458C8((uint64_t)v1158, v1164);
                          double v1155 = *v1156;
                          v1160 = *(_DWORD **)v1154;
                        }
                        else
                        {
                          v1165 = 0;
                        }
                        v1299 = &v1165[4 * v1161];
                        *(_DWORD *)v1299 = 163;
                        v1159 = v1299 + 4;
                        while (v1155 != v1160)
                        {
                          int v1300 = *--v1155;
                          *((_DWORD *)v1299 - 1) = v1300;
                          v1299 -= 4;
                        }
                        *(void *)uint64_t v1154 = v1299;
                        *unint64_t v1156 = v1159;
                        void *v1158 = &v1165[4 * v1164];
                        if (v1160) {
                          operator delete(v1160);
                        }
                      }
                      else
                      {
                        *double v1155 = 163;
                        v1159 = v1155 + 1;
                      }
                      *unint64_t v1156 = v1159;
                      if (!*v14)
                      {
LABEL_3952:
                        if ((*((unsigned char *)__p + 20) & 0x10) == 0) {
                          goto LABEL_3953;
                        }
                        uint64_t v1301 = *v12 + 24 * v13;
                        double v1303 = (_DWORD **)(v1301 + 8);
                        unint64_t v1302 = *(_DWORD **)(v1301 + 8);
                        v1305 = (void *)(v1301 + 16);
                        unint64_t v1304 = *(void *)(v1301 + 16);
                        if ((unint64_t)v1302 >= v1304)
                        {
                          unsigned int v1307 = *(_DWORD **)v1301;
                          uint64_t v1308 = ((uint64_t)v1302 - *(void *)v1301) >> 2;
                          unint64_t v1309 = v1308 + 1;
                          if ((unint64_t)(v1308 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1310 = v1304 - (void)v1307;
                          if (v1310 >> 1 > v1309) {
                            unint64_t v1309 = v1310 >> 1;
                          }
                          if ((unint64_t)v1310 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1311 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1311 = v1309;
                          }
                          if (v1311)
                          {
                            v1312 = (char *)sub_458C8((uint64_t)v1305, v1311);
                            unint64_t v1302 = *v1303;
                            unsigned int v1307 = *(_DWORD **)v1301;
                          }
                          else
                          {
                            v1312 = 0;
                          }
                          double v1448 = &v1312[4 * v1308];
                          *(_DWORD *)double v1448 = 164;
                          v1306 = v1448 + 4;
                          while (v1302 != v1307)
                          {
                            int v1449 = *--v1302;
                            *((_DWORD *)v1448 - 1) = v1449;
                            v1448 -= 4;
                          }
                          *(void *)uint64_t v1301 = v1448;
                          *double v1303 = v1306;
                          void *v1305 = &v1312[4 * v1311];
                          if (v1307) {
                            operator delete(v1307);
                          }
                        }
                        else
                        {
                          *unint64_t v1302 = 164;
                          v1306 = v1302 + 1;
                        }
                        *double v1303 = v1306;
                        if (!*v14)
                        {
LABEL_3953:
                          if ((*((unsigned char *)__p + 20) & 0x20) == 0) {
                            goto LABEL_3954;
                          }
                          uint64_t v1450 = *v12 + 24 * v13;
                          v1452 = (_DWORD **)(v1450 + 8);
                          v1451 = *(_DWORD **)(v1450 + 8);
                          double v1454 = (void *)(v1450 + 16);
                          unint64_t v1453 = *(void *)(v1450 + 16);
                          if ((unint64_t)v1451 >= v1453)
                          {
                            double v1456 = *(_DWORD **)v1450;
                            uint64_t v1457 = ((uint64_t)v1451 - *(void *)v1450) >> 2;
                            unint64_t v1458 = v1457 + 1;
                            if ((unint64_t)(v1457 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1459 = v1453 - (void)v1456;
                            if (v1459 >> 1 > v1458) {
                              unint64_t v1458 = v1459 >> 1;
                            }
                            if ((unint64_t)v1459 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1460 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1460 = v1458;
                            }
                            if (v1460)
                            {
                              int v1461 = (char *)sub_458C8((uint64_t)v1454, v1460);
                              v1451 = *v1452;
                              double v1456 = *(_DWORD **)v1450;
                            }
                            else
                            {
                              int v1461 = 0;
                            }
                            double v1588 = &v1461[4 * v1457];
                            *(_DWORD *)double v1588 = 165;
                            unint64_t v1455 = v1588 + 4;
                            while (v1451 != v1456)
                            {
                              int v1589 = *--v1451;
                              *((_DWORD *)v1588 - 1) = v1589;
                              v1588 -= 4;
                            }
                            *(void *)uint64_t v1450 = v1588;
                            double *v1452 = v1455;
                            *double v1454 = &v1461[4 * v1460];
                            if (v1456) {
                              operator delete(v1456);
                            }
                          }
                          else
                          {
                            _DWORD *v1451 = 165;
                            unint64_t v1455 = v1451 + 1;
                          }
                          double *v1452 = v1455;
                          if (!*v14)
                          {
LABEL_3954:
                            if ((*((unsigned char *)__p + 20) & 0x40) == 0) {
                              goto LABEL_3955;
                            }
                            uint64_t v1590 = *v12 + 24 * v13;
                            unsigned int v1592 = (_DWORD **)(v1590 + 8);
                            v1591 = *(_DWORD **)(v1590 + 8);
                            double v1594 = (void *)(v1590 + 16);
                            unint64_t v1593 = *(void *)(v1590 + 16);
                            if ((unint64_t)v1591 >= v1593)
                            {
                              v1596 = *(_DWORD **)v1590;
                              uint64_t v1597 = ((uint64_t)v1591 - *(void *)v1590) >> 2;
                              unint64_t v1598 = v1597 + 1;
                              if ((unint64_t)(v1597 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1599 = v1593 - (void)v1596;
                              if (v1599 >> 1 > v1598) {
                                unint64_t v1598 = v1599 >> 1;
                              }
                              if ((unint64_t)v1599 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1600 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1600 = v1598;
                              }
                              if (v1600)
                              {
                                v1601 = (char *)sub_458C8((uint64_t)v1594, v1600);
                                v1591 = *v1592;
                                v1596 = *(_DWORD **)v1590;
                              }
                              else
                              {
                                v1601 = 0;
                              }
                              v1721 = &v1601[4 * v1597];
                              *(_DWORD *)v1721 = 166;
                              v1595 = v1721 + 4;
                              while (v1591 != v1596)
                              {
                                int v1722 = *--v1591;
                                *((_DWORD *)v1721 - 1) = v1722;
                                v1721 -= 4;
                              }
                              *(void *)uint64_t v1590 = v1721;
                              *unsigned int v1592 = v1595;
                              *double v1594 = &v1601[4 * v1600];
                              if (v1596) {
                                operator delete(v1596);
                              }
                            }
                            else
                            {
                              _DWORD *v1591 = 166;
                              v1595 = v1591 + 1;
                            }
                            *unsigned int v1592 = v1595;
                            if (!*v14)
                            {
LABEL_3955:
                              if ((*((unsigned char *)__p + 20) & 0x80) != 0)
                              {
                                uint64_t v1723 = *v12 + 24 * v13;
                                unint64_t v1725 = (int **)(v1723 + 8);
                                double v1724 = *(int **)(v1723 + 8);
                                v1727 = (void *)(v1723 + 16);
                                unint64_t v1726 = *(void *)(v1723 + 16);
                                if ((unint64_t)v1724 < v1726)
                                {
                                  int v1728 = 167;
                                  goto LABEL_2504;
                                }
                                v1729 = *(int **)v1723;
                                uint64_t v1730 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                unint64_t v1731 = v1730 + 1;
                                if ((unint64_t)(v1730 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1732 = v1726 - (void)v1729;
                                if (v1732 >> 1 > v1731) {
                                  unint64_t v1731 = v1732 >> 1;
                                }
                                if ((unint64_t)v1732 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1733 = v1731;
                                }
                                if (v1733)
                                {
                                  v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                  double v1724 = *v1725;
                                  v1729 = *(int **)v1723;
                                }
                                else
                                {
                                  v1734 = 0;
                                }
                                v1840 = &v1734[4 * v1730];
                                *(_DWORD *)v1840 = 167;
                                v1841 = (int *)(v1840 + 4);
                                while (v1724 != v1729)
                                {
                                  int v1842 = *--v1724;
                                  *((_DWORD *)v1840 - 1) = v1842;
                                  v1840 -= 4;
                                }
                                goto LABEL_3716;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 2:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 3) & 0x10) == 0) {
              goto LABEL_302;
            }
            uint64_t v51 = *v12 + 24 * v13;
            unint64_t v53 = (_DWORD **)(v51 + 8);
            int v52 = *(_DWORD **)(v51 + 8);
            int v55 = (void *)(v51 + 16);
            unint64_t v54 = *(void *)(v51 + 16);
            if ((unint64_t)v52 >= v54)
            {
              unint64_t v141 = *(_DWORD **)v51;
              uint64_t v142 = ((uint64_t)v52 - *(void *)v51) >> 2;
              unint64_t v143 = v142 + 1;
              if ((unint64_t)(v142 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v144 = v54 - (void)v141;
              if (v144 >> 1 > v143) {
                unint64_t v143 = v144 >> 1;
              }
              if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v143;
              }
              if (v145)
              {
                unint64_t v146 = (char *)sub_458C8((uint64_t)v55, v145);
                int v52 = *v53;
                unint64_t v141 = *(_DWORD **)v51;
              }
              else
              {
                unint64_t v146 = 0;
              }
              double v277 = &v146[4 * v142];
              *(_DWORD *)double v277 = 28;
              unint64_t v56 = v277 + 4;
              while (v52 != v141)
              {
                int v278 = *--v52;
                *((_DWORD *)v277 - 1) = v278;
                v277 -= 4;
              }
              *(void *)uint64_t v51 = v277;
              *unint64_t v53 = v56;
              *int v55 = &v146[4 * v145];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              *int v52 = 28;
              unint64_t v56 = v52 + 1;
            }
            *unint64_t v53 = v56;
            if (!*v14)
            {
LABEL_302:
              if ((*((unsigned char *)__p + 3) & 0x20) == 0) {
                goto LABEL_3692;
              }
              uint64_t v279 = *v12 + 24 * v13;
              uint64_t v281 = (_DWORD **)(v279 + 8);
              double v280 = *(_DWORD **)(v279 + 8);
              unint64_t v283 = (void *)(v279 + 16);
              unint64_t v282 = *(void *)(v279 + 16);
              if ((unint64_t)v280 >= v282)
              {
                uint64_t v285 = *(_DWORD **)v279;
                uint64_t v286 = ((uint64_t)v280 - *(void *)v279) >> 2;
                unint64_t v287 = v286 + 1;
                if ((unint64_t)(v286 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v288 = v282 - (void)v285;
                if (v288 >> 1 > v287) {
                  unint64_t v287 = v288 >> 1;
                }
                if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v289 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v289 = v287;
                }
                if (v289)
                {
                  __int16 v290 = (char *)sub_458C8((uint64_t)v283, v289);
                  double v280 = *v281;
                  uint64_t v285 = *(_DWORD **)v279;
                }
                else
                {
                  __int16 v290 = 0;
                }
                int v502 = &v290[4 * v286];
                *(_DWORD *)int v502 = 29;
                unint64_t v284 = v502 + 4;
                while (v280 != v285)
                {
                  int v503 = *--v280;
                  *((_DWORD *)v502 - 1) = v503;
                  v502 -= 4;
                }
                *(void *)uint64_t v279 = v502;
                double *v281 = v284;
                void *v283 = &v290[4 * v289];
                if (v285) {
                  operator delete(v285);
                }
              }
              else
              {
                *double v280 = 29;
                unint64_t v284 = v280 + 1;
              }
              double *v281 = v284;
              if (!*v14)
              {
LABEL_3692:
                if ((*((unsigned char *)__p + 3) & 0x40) == 0) {
                  goto LABEL_3956;
                }
                uint64_t v504 = *v12 + 24 * v13;
                int v506 = (_DWORD **)(v504 + 8);
                uint64_t v505 = *(_DWORD **)(v504 + 8);
                unint64_t v508 = (void *)(v504 + 16);
                unint64_t v507 = *(void *)(v504 + 16);
                if ((unint64_t)v505 >= v507)
                {
                  uint64_t v510 = *(_DWORD **)v504;
                  uint64_t v511 = ((uint64_t)v505 - *(void *)v504) >> 2;
                  unint64_t v512 = v511 + 1;
                  if ((unint64_t)(v511 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v513 = v507 - (void)v510;
                  if (v513 >> 1 > v512) {
                    unint64_t v512 = v513 >> 1;
                  }
                  if ((unint64_t)v513 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v514 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v514 = v512;
                  }
                  if (v514)
                  {
                    uint64_t v515 = (char *)sub_458C8((uint64_t)v508, v514);
                    uint64_t v505 = *v506;
                    uint64_t v510 = *(_DWORD **)v504;
                  }
                  else
                  {
                    uint64_t v515 = 0;
                  }
                  unsigned int v706 = &v515[4 * v511];
                  *(_DWORD *)unsigned int v706 = 30;
                  unint64_t v509 = v706 + 4;
                  while (v505 != v510)
                  {
                    int v707 = *--v505;
                    *((_DWORD *)v706 - 1) = v707;
                    v706 -= 4;
                  }
                  *(void *)uint64_t v504 = v706;
                  *int v506 = v509;
                  *unint64_t v508 = &v515[4 * v514];
                  if (v510) {
                    operator delete(v510);
                  }
                }
                else
                {
                  _DWORD *v505 = 30;
                  unint64_t v509 = v505 + 1;
                }
                *int v506 = v509;
                if (!*v14)
                {
LABEL_3956:
                  if ((*((unsigned char *)__p + 3) & 0x80) == 0) {
                    goto LABEL_3957;
                  }
                  uint64_t v708 = *v12 + 24 * v13;
                  int v710 = (_DWORD **)(v708 + 8);
                  int v709 = *(_DWORD **)(v708 + 8);
                  double v712 = (void *)(v708 + 16);
                  unint64_t v711 = *(void *)(v708 + 16);
                  if ((unint64_t)v709 >= v711)
                  {
                    double v714 = *(_DWORD **)v708;
                    uint64_t v715 = ((uint64_t)v709 - *(void *)v708) >> 2;
                    unint64_t v716 = v715 + 1;
                    if ((unint64_t)(v715 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v717 = v711 - (void)v714;
                    if (v717 >> 1 > v716) {
                      unint64_t v716 = v717 >> 1;
                    }
                    if ((unint64_t)v717 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v718 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v718 = v716;
                    }
                    if (v718)
                    {
                      unint64_t v719 = (char *)sub_458C8((uint64_t)v712, v718);
                      int v709 = *v710;
                      double v714 = *(_DWORD **)v708;
                    }
                    else
                    {
                      unint64_t v719 = 0;
                    }
                    unsigned int v895 = &v719[4 * v715];
                    *(_DWORD *)unsigned int v895 = 31;
                    double v713 = v895 + 4;
                    while (v709 != v714)
                    {
                      int v896 = *--v709;
                      *((_DWORD *)v895 - 1) = v896;
                      v895 -= 4;
                    }
                    *(void *)uint64_t v708 = v895;
                    double *v710 = v713;
                    void *v712 = &v719[4 * v718];
                    if (v714) {
                      operator delete(v714);
                    }
                  }
                  else
                  {
                    *int v709 = 31;
                    double v713 = v709 + 1;
                  }
                  double *v710 = v713;
                  if (!*v14)
                  {
LABEL_3957:
                    if ((*((unsigned char *)__p + 4) & 1) == 0) {
                      goto LABEL_3958;
                    }
                    uint64_t v897 = *v12 + 24 * v13;
                    double v899 = (_DWORD **)(v897 + 8);
                    v898 = *(_DWORD **)(v897 + 8);
                    unint64_t v901 = (void *)(v897 + 16);
                    unint64_t v900 = *(void *)(v897 + 16);
                    if ((unint64_t)v898 >= v900)
                    {
                      v903 = *(_DWORD **)v897;
                      uint64_t v904 = ((uint64_t)v898 - *(void *)v897) >> 2;
                      unint64_t v905 = v904 + 1;
                      if ((unint64_t)(v904 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v906 = v900 - (void)v903;
                      if (v906 >> 1 > v905) {
                        unint64_t v905 = v906 >> 1;
                      }
                      if ((unint64_t)v906 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v907 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v907 = v905;
                      }
                      if (v907)
                      {
                        double v908 = (char *)sub_458C8((uint64_t)v901, v907);
                        v898 = *v899;
                        v903 = *(_DWORD **)v897;
                      }
                      else
                      {
                        double v908 = 0;
                      }
                      unsigned int v1070 = &v908[4 * v904];
                      *(_DWORD *)unsigned int v1070 = 32;
                      double v902 = v1070 + 4;
                      while (v898 != v903)
                      {
                        int v1071 = *--v898;
                        *((_DWORD *)v1070 - 1) = v1071;
                        v1070 -= 4;
                      }
                      *(void *)uint64_t v897 = v1070;
                      *double v899 = v902;
                      *unint64_t v901 = &v908[4 * v907];
                      if (v903) {
                        operator delete(v903);
                      }
                    }
                    else
                    {
                      _DWORD *v898 = 32;
                      double v902 = v898 + 1;
                    }
                    *double v899 = v902;
                    if (!*v14)
                    {
LABEL_3958:
                      if ((*((unsigned char *)__p + 4) & 2) == 0) {
                        goto LABEL_3959;
                      }
                      uint64_t v1072 = *v12 + 24 * v13;
                      double v1074 = (_DWORD **)(v1072 + 8);
                      unint64_t v1073 = *(_DWORD **)(v1072 + 8);
                      unsigned int v1076 = (void *)(v1072 + 16);
                      unint64_t v1075 = *(void *)(v1072 + 16);
                      if ((unint64_t)v1073 >= v1075)
                      {
                        unsigned int v1078 = *(_DWORD **)v1072;
                        uint64_t v1079 = ((uint64_t)v1073 - *(void *)v1072) >> 2;
                        unint64_t v1080 = v1079 + 1;
                        if ((unint64_t)(v1079 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1081 = v1075 - (void)v1078;
                        if (v1081 >> 1 > v1080) {
                          unint64_t v1080 = v1081 >> 1;
                        }
                        if ((unint64_t)v1081 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1082 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1082 = v1080;
                        }
                        if (v1082)
                        {
                          v1083 = (char *)sub_458C8((uint64_t)v1076, v1082);
                          unint64_t v1073 = *v1074;
                          unsigned int v1078 = *(_DWORD **)v1072;
                        }
                        else
                        {
                          v1083 = 0;
                        }
                        v1243 = &v1083[4 * v1079];
                        *(_DWORD *)v1243 = 33;
                        v1077 = v1243 + 4;
                        while (v1073 != v1078)
                        {
                          int v1244 = *--v1073;
                          *((_DWORD *)v1243 - 1) = v1244;
                          v1243 -= 4;
                        }
                        *(void *)uint64_t v1072 = v1243;
                        *double v1074 = v1077;
                        void *v1076 = &v1083[4 * v1082];
                        if (v1078) {
                          operator delete(v1078);
                        }
                      }
                      else
                      {
                        *unint64_t v1073 = 33;
                        v1077 = v1073 + 1;
                      }
                      *double v1074 = v1077;
                      if (!*v14)
                      {
LABEL_3959:
                        if ((*((unsigned char *)__p + 4) & 4) == 0) {
                          goto LABEL_3960;
                        }
                        uint64_t v1245 = *v12 + 24 * v13;
                        double v1247 = (_DWORD **)(v1245 + 8);
                        unint64_t v1246 = *(_DWORD **)(v1245 + 8);
                        double v1249 = (void *)(v1245 + 16);
                        unint64_t v1248 = *(void *)(v1245 + 16);
                        if ((unint64_t)v1246 >= v1248)
                        {
                          v1251 = *(_DWORD **)v1245;
                          uint64_t v1252 = ((uint64_t)v1246 - *(void *)v1245) >> 2;
                          unint64_t v1253 = v1252 + 1;
                          if ((unint64_t)(v1252 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1254 = v1248 - (void)v1251;
                          if (v1254 >> 1 > v1253) {
                            unint64_t v1253 = v1254 >> 1;
                          }
                          if ((unint64_t)v1254 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1255 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1255 = v1253;
                          }
                          if (v1255)
                          {
                            double v1256 = (char *)sub_458C8((uint64_t)v1249, v1255);
                            unint64_t v1246 = *v1247;
                            v1251 = *(_DWORD **)v1245;
                          }
                          else
                          {
                            double v1256 = 0;
                          }
                          v1392 = &v1256[4 * v1252];
                          *(_DWORD *)v1392 = 34;
                          v1250 = v1392 + 4;
                          while (v1246 != v1251)
                          {
                            int v1393 = *--v1246;
                            *((_DWORD *)v1392 - 1) = v1393;
                            v1392 -= 4;
                          }
                          *(void *)uint64_t v1245 = v1392;
                          *double v1247 = v1250;
                          *double v1249 = &v1256[4 * v1255];
                          if (v1251) {
                            operator delete(v1251);
                          }
                        }
                        else
                        {
                          *unint64_t v1246 = 34;
                          v1250 = v1246 + 1;
                        }
                        *double v1247 = v1250;
                        if (!*v14)
                        {
LABEL_3960:
                          if ((*((unsigned char *)__p + 4) & 8) == 0) {
                            goto LABEL_3961;
                          }
                          uint64_t v1394 = *v12 + 24 * v13;
                          double v1396 = (_DWORD **)(v1394 + 8);
                          unint64_t v1395 = *(_DWORD **)(v1394 + 8);
                          v1398 = (void *)(v1394 + 16);
                          unint64_t v1397 = *(void *)(v1394 + 16);
                          if ((unint64_t)v1395 >= v1397)
                          {
                            double v1400 = *(_DWORD **)v1394;
                            uint64_t v1401 = ((uint64_t)v1395 - *(void *)v1394) >> 2;
                            unint64_t v1402 = v1401 + 1;
                            if ((unint64_t)(v1401 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1403 = v1397 - (void)v1400;
                            if (v1403 >> 1 > v1402) {
                              unint64_t v1402 = v1403 >> 1;
                            }
                            if ((unint64_t)v1403 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1404 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1404 = v1402;
                            }
                            if (v1404)
                            {
                              v1405 = (char *)sub_458C8((uint64_t)v1398, v1404);
                              unint64_t v1395 = *v1396;
                              double v1400 = *(_DWORD **)v1394;
                            }
                            else
                            {
                              v1405 = 0;
                            }
                            unsigned int v1532 = &v1405[4 * v1401];
                            *(_DWORD *)unsigned int v1532 = 35;
                            v1399 = v1532 + 4;
                            while (v1395 != v1400)
                            {
                              int v1533 = *--v1395;
                              *((_DWORD *)v1532 - 1) = v1533;
                              v1532 -= 4;
                            }
                            *(void *)uint64_t v1394 = v1532;
                            *double v1396 = v1399;
                            void *v1398 = &v1405[4 * v1404];
                            if (v1400) {
                              operator delete(v1400);
                            }
                          }
                          else
                          {
                            *unint64_t v1395 = 35;
                            v1399 = v1395 + 1;
                          }
                          *double v1396 = v1399;
                          if (!*v14)
                          {
LABEL_3961:
                            if ((*((unsigned char *)__p + 4) & 0x10) == 0) {
                              goto LABEL_3962;
                            }
                            uint64_t v1534 = *v12 + 24 * v13;
                            v1536 = (_DWORD **)(v1534 + 8);
                            v1535 = *(_DWORD **)(v1534 + 8);
                            unint64_t v1538 = (void *)(v1534 + 16);
                            unint64_t v1537 = *(void *)(v1534 + 16);
                            if ((unint64_t)v1535 >= v1537)
                            {
                              double v1540 = *(_DWORD **)v1534;
                              uint64_t v1541 = ((uint64_t)v1535 - *(void *)v1534) >> 2;
                              unint64_t v1542 = v1541 + 1;
                              if ((unint64_t)(v1541 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1543 = v1537 - (void)v1540;
                              if (v1543 >> 1 > v1542) {
                                unint64_t v1542 = v1543 >> 1;
                              }
                              if ((unint64_t)v1543 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1544 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1544 = v1542;
                              }
                              if (v1544)
                              {
                                unsigned int v1545 = (char *)sub_458C8((uint64_t)v1538, v1544);
                                v1535 = *v1536;
                                double v1540 = *(_DWORD **)v1534;
                              }
                              else
                              {
                                unsigned int v1545 = 0;
                              }
                              unint64_t v1673 = &v1545[4 * v1541];
                              *(_DWORD *)unint64_t v1673 = 36;
                              unsigned int v1539 = v1673 + 4;
                              while (v1535 != v1540)
                              {
                                int v1674 = *--v1535;
                                *((_DWORD *)v1673 - 1) = v1674;
                                v1673 -= 4;
                              }
                              *(void *)uint64_t v1534 = v1673;
                              double *v1536 = v1539;
                              *unint64_t v1538 = &v1545[4 * v1544];
                              if (v1540) {
                                operator delete(v1540);
                              }
                            }
                            else
                            {
                              _DWORD *v1535 = 36;
                              unsigned int v1539 = v1535 + 1;
                            }
                            double *v1536 = v1539;
                            if (!*v14)
                            {
LABEL_3962:
                              if ((*((unsigned char *)__p + 4) & 0x20) == 0) {
                                goto LABEL_3963;
                              }
                              uint64_t v1675 = *v12 + 24 * v13;
                              double v1677 = (_DWORD **)(v1675 + 8);
                              v1676 = *(_DWORD **)(v1675 + 8);
                              v1679 = (void *)(v1675 + 16);
                              unint64_t v1678 = *(void *)(v1675 + 16);
                              if ((unint64_t)v1676 >= v1678)
                              {
                                v1681 = *(_DWORD **)v1675;
                                uint64_t v1682 = ((uint64_t)v1676 - *(void *)v1675) >> 2;
                                unint64_t v1683 = v1682 + 1;
                                if ((unint64_t)(v1682 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1684 = v1678 - (void)v1681;
                                if (v1684 >> 1 > v1683) {
                                  unint64_t v1683 = v1684 >> 1;
                                }
                                if ((unint64_t)v1684 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1685 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1685 = v1683;
                                }
                                if (v1685)
                                {
                                  v1686 = (char *)sub_458C8((uint64_t)v1679, v1685);
                                  v1676 = *v1677;
                                  v1681 = *(_DWORD **)v1675;
                                }
                                else
                                {
                                  v1686 = 0;
                                }
                                uint64_t v1797 = &v1686[4 * v1682];
                                *(_DWORD *)uint64_t v1797 = 37;
                                v1680 = v1797 + 4;
                                while (v1676 != v1681)
                                {
                                  int v1798 = *--v1676;
                                  *((_DWORD *)v1797 - 1) = v1798;
                                  v1797 -= 4;
                                }
                                *(void *)uint64_t v1675 = v1797;
                                *double v1677 = v1680;
                                void *v1679 = &v1686[4 * v1685];
                                if (v1681) {
                                  operator delete(v1681);
                                }
                              }
                              else
                              {
                                _DWORD *v1676 = 37;
                                v1680 = v1676 + 1;
                              }
                              *double v1677 = v1680;
                              if (!*v14)
                              {
LABEL_3963:
                                if ((*((unsigned char *)__p + 4) & 0x40) == 0) {
                                  goto LABEL_3964;
                                }
                                uint64_t v1799 = *v12 + 24 * v13;
                                int v1801 = (_DWORD **)(v1799 + 8);
                                v1800 = *(_DWORD **)(v1799 + 8);
                                int v1803 = (void *)(v1799 + 16);
                                unint64_t v1802 = *(void *)(v1799 + 16);
                                if ((unint64_t)v1800 >= v1802)
                                {
                                  v1805 = *(_DWORD **)v1799;
                                  uint64_t v1806 = ((uint64_t)v1800 - *(void *)v1799) >> 2;
                                  unint64_t v1807 = v1806 + 1;
                                  if ((unint64_t)(v1806 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1808 = v1802 - (void)v1805;
                                  if (v1808 >> 1 > v1807) {
                                    unint64_t v1807 = v1808 >> 1;
                                  }
                                  if ((unint64_t)v1808 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1809 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1809 = v1807;
                                  }
                                  if (v1809)
                                  {
                                    v1810 = (char *)sub_458C8((uint64_t)v1803, v1809);
                                    v1800 = *v1801;
                                    v1805 = *(_DWORD **)v1799;
                                  }
                                  else
                                  {
                                    v1810 = 0;
                                  }
                                  v1900 = &v1810[4 * v1806];
                                  *(_DWORD *)v1900 = 38;
                                  v1804 = v1900 + 4;
                                  while (v1800 != v1805)
                                  {
                                    int v1901 = *--v1800;
                                    *((_DWORD *)v1900 - 1) = v1901;
                                    v1900 -= 4;
                                  }
                                  *(void *)uint64_t v1799 = v1900;
                                  *int v1801 = v1804;
                                  *int v1803 = &v1810[4 * v1809];
                                  if (v1805) {
                                    operator delete(v1805);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1800 = 38;
                                  v1804 = v1800 + 1;
                                }
                                *int v1801 = v1804;
                                if (!*v14)
                                {
LABEL_3964:
                                  if ((*((unsigned char *)__p + 4) & 0x80) == 0) {
                                    goto LABEL_3965;
                                  }
                                  uint64_t v1902 = *v12 + 24 * v13;
                                  v1904 = (_DWORD **)(v1902 + 8);
                                  v1903 = *(_DWORD **)(v1902 + 8);
                                  unsigned int v1906 = (void *)(v1902 + 16);
                                  unint64_t v1905 = *(void *)(v1902 + 16);
                                  if ((unint64_t)v1903 >= v1905)
                                  {
                                    unsigned int v1908 = *(_DWORD **)v1902;
                                    uint64_t v1909 = ((uint64_t)v1903 - *(void *)v1902) >> 2;
                                    unint64_t v1910 = v1909 + 1;
                                    if ((unint64_t)(v1909 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1911 = v1905 - (void)v1908;
                                    if (v1911 >> 1 > v1910) {
                                      unint64_t v1910 = v1911 >> 1;
                                    }
                                    if ((unint64_t)v1911 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1912 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1912 = v1910;
                                    }
                                    if (v1912)
                                    {
                                      unint64_t v1913 = (char *)sub_458C8((uint64_t)v1906, v1912);
                                      v1903 = *v1904;
                                      unsigned int v1908 = *(_DWORD **)v1902;
                                    }
                                    else
                                    {
                                      unint64_t v1913 = 0;
                                    }
                                    unsigned int v1990 = &v1913[4 * v1909];
                                    *(_DWORD *)unsigned int v1990 = 39;
                                    unsigned int v1907 = v1990 + 4;
                                    while (v1903 != v1908)
                                    {
                                      int v1991 = *--v1903;
                                      *((_DWORD *)v1990 - 1) = v1991;
                                      v1990 -= 4;
                                    }
                                    *(void *)uint64_t v1902 = v1990;
                                    unsigned __int8 *v1904 = v1907;
                                    *unsigned int v1906 = &v1913[4 * v1912];
                                    if (v1908) {
                                      operator delete(v1908);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1903 = 39;
                                    unsigned int v1907 = v1903 + 1;
                                  }
                                  unsigned __int8 *v1904 = v1907;
                                  if (!*v14)
                                  {
LABEL_3965:
                                    if ((*((unsigned char *)__p + 5) & 1) == 0) {
                                      goto LABEL_3966;
                                    }
                                    uint64_t v1992 = *v12 + 24 * v13;
                                    v1994 = (_DWORD **)(v1992 + 8);
                                    v1993 = *(_DWORD **)(v1992 + 8);
                                    unint64_t v1996 = (void *)(v1992 + 16);
                                    unint64_t v1995 = *(void *)(v1992 + 16);
                                    if ((unint64_t)v1993 >= v1995)
                                    {
                                      v1998 = *(_DWORD **)v1992;
                                      uint64_t v1999 = ((uint64_t)v1993 - *(void *)v1992) >> 2;
                                      unint64_t v2000 = v1999 + 1;
                                      if ((unint64_t)(v1999 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2001 = v1995 - (void)v1998;
                                      if (v2001 >> 1 > v2000) {
                                        unint64_t v2000 = v2001 >> 1;
                                      }
                                      if ((unint64_t)v2001 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v2002 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v2002 = v2000;
                                      }
                                      if (v2002)
                                      {
                                        v2003 = (char *)sub_458C8((uint64_t)v1996, v2002);
                                        v1993 = *v1994;
                                        v1998 = *(_DWORD **)v1992;
                                      }
                                      else
                                      {
                                        v2003 = 0;
                                      }
                                      v2075 = &v2003[4 * v1999];
                                      *(_DWORD *)v2075 = 40;
                                      v1997 = v2075 + 4;
                                      while (v1993 != v1998)
                                      {
                                        int v2076 = *--v1993;
                                        *((_DWORD *)v2075 - 1) = v2076;
                                        v2075 -= 4;
                                      }
                                      *(void *)uint64_t v1992 = v2075;
                                      void *v1994 = v1997;
                                      *unint64_t v1996 = &v2003[4 * v2002];
                                      if (v1998) {
                                        operator delete(v1998);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v1993 = 40;
                                      v1997 = v1993 + 1;
                                    }
                                    void *v1994 = v1997;
                                    if (!*v14)
                                    {
LABEL_3966:
                                      if ((*((unsigned char *)__p + 5) & 2) == 0) {
                                        goto LABEL_3967;
                                      }
                                      uint64_t v2077 = *v12 + 24 * v13;
                                      v2079 = (_DWORD **)(v2077 + 8);
                                      v2078 = *(_DWORD **)(v2077 + 8);
                                      v2081 = (void *)(v2077 + 16);
                                      unint64_t v2080 = *(void *)(v2077 + 16);
                                      if ((unint64_t)v2078 >= v2080)
                                      {
                                        v2083 = *(_DWORD **)v2077;
                                        uint64_t v2084 = ((uint64_t)v2078 - *(void *)v2077) >> 2;
                                        unint64_t v2085 = v2084 + 1;
                                        if ((unint64_t)(v2084 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2086 = v2080 - (void)v2083;
                                        if (v2086 >> 1 > v2085) {
                                          unint64_t v2085 = v2086 >> 1;
                                        }
                                        if ((unint64_t)v2086 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2087 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2087 = v2085;
                                        }
                                        if (v2087)
                                        {
                                          v2088 = (char *)sub_458C8((uint64_t)v2081, v2087);
                                          v2078 = *v2079;
                                          v2083 = *(_DWORD **)v2077;
                                        }
                                        else
                                        {
                                          v2088 = 0;
                                        }
                                        v2159 = &v2088[4 * v2084];
                                        *(_DWORD *)v2159 = 41;
                                        v2082 = v2159 + 4;
                                        while (v2078 != v2083)
                                        {
                                          int v2160 = *--v2078;
                                          *((_DWORD *)v2159 - 1) = v2160;
                                          v2159 -= 4;
                                        }
                                        *(void *)uint64_t v2077 = v2159;
                                        *v2079 = v2082;
                                        void *v2081 = &v2088[4 * v2087];
                                        if (v2083) {
                                          operator delete(v2083);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2078 = 41;
                                        v2082 = v2078 + 1;
                                      }
                                      *v2079 = v2082;
                                      if (!*v14)
                                      {
LABEL_3967:
                                        if ((*((unsigned char *)__p + 5) & 4) == 0) {
                                          goto LABEL_3968;
                                        }
                                        uint64_t v2161 = *v12 + 24 * v13;
                                        v2163 = (_DWORD **)(v2161 + 8);
                                        v2162 = *(_DWORD **)(v2161 + 8);
                                        v2165 = (void *)(v2161 + 16);
                                        unint64_t v2164 = *(void *)(v2161 + 16);
                                        if ((unint64_t)v2162 >= v2164)
                                        {
                                          v2167 = *(_DWORD **)v2161;
                                          uint64_t v2168 = ((uint64_t)v2162 - *(void *)v2161) >> 2;
                                          unint64_t v2169 = v2168 + 1;
                                          if ((unint64_t)(v2168 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2170 = v2164 - (void)v2167;
                                          if (v2170 >> 1 > v2169) {
                                            unint64_t v2169 = v2170 >> 1;
                                          }
                                          if ((unint64_t)v2170 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2171 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2171 = v2169;
                                          }
                                          if (v2171)
                                          {
                                            v2172 = (char *)sub_458C8((uint64_t)v2165, v2171);
                                            v2162 = *v2163;
                                            v2167 = *(_DWORD **)v2161;
                                          }
                                          else
                                          {
                                            v2172 = 0;
                                          }
                                          v2235 = &v2172[4 * v2168];
                                          *(_DWORD *)v2235 = 42;
                                          v2166 = v2235 + 4;
                                          while (v2162 != v2167)
                                          {
                                            int v2236 = *--v2162;
                                            *((_DWORD *)v2235 - 1) = v2236;
                                            v2235 -= 4;
                                          }
                                          *(void *)uint64_t v2161 = v2235;
                                          *v2163 = v2166;
                                          void *v2165 = &v2172[4 * v2171];
                                          if (v2167) {
                                            operator delete(v2167);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2162 = 42;
                                          v2166 = v2162 + 1;
                                        }
                                        *v2163 = v2166;
                                        if (!*v14)
                                        {
LABEL_3968:
                                          if ((*((unsigned char *)__p + 5) & 8) == 0) {
                                            goto LABEL_3969;
                                          }
                                          uint64_t v2237 = *v12 + 24 * v13;
                                          v2239 = (_DWORD **)(v2237 + 8);
                                          v2238 = *(_DWORD **)(v2237 + 8);
                                          v2241 = (void *)(v2237 + 16);
                                          unint64_t v2240 = *(void *)(v2237 + 16);
                                          if ((unint64_t)v2238 >= v2240)
                                          {
                                            v2243 = *(_DWORD **)v2237;
                                            uint64_t v2244 = ((uint64_t)v2238 - *(void *)v2237) >> 2;
                                            unint64_t v2245 = v2244 + 1;
                                            if ((unint64_t)(v2244 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2246 = v2240 - (void)v2243;
                                            if (v2246 >> 1 > v2245) {
                                              unint64_t v2245 = v2246 >> 1;
                                            }
                                            if ((unint64_t)v2246 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2247 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2247 = v2245;
                                            }
                                            if (v2247)
                                            {
                                              v2248 = (char *)sub_458C8((uint64_t)v2241, v2247);
                                              v2238 = *v2239;
                                              v2243 = *(_DWORD **)v2237;
                                            }
                                            else
                                            {
                                              v2248 = 0;
                                            }
                                            v2298 = &v2248[4 * v2244];
                                            *(_DWORD *)v2298 = 43;
                                            v2242 = v2298 + 4;
                                            while (v2238 != v2243)
                                            {
                                              int v2299 = *--v2238;
                                              *((_DWORD *)v2298 - 1) = v2299;
                                              v2298 -= 4;
                                            }
                                            *(void *)uint64_t v2237 = v2298;
                                            *v2239 = v2242;
                                            void *v2241 = &v2248[4 * v2247];
                                            if (v2243) {
                                              operator delete(v2243);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2238 = 43;
                                            v2242 = v2238 + 1;
                                          }
                                          *v2239 = v2242;
                                          if (!*v14)
                                          {
LABEL_3969:
                                            if ((*((unsigned char *)__p + 5) & 0x10) == 0) {
                                              goto LABEL_3970;
                                            }
                                            uint64_t v2300 = *v12 + 24 * v13;
                                            v2302 = (_DWORD **)(v2300 + 8);
                                            v2301 = *(_DWORD **)(v2300 + 8);
                                            v2304 = (void *)(v2300 + 16);
                                            unint64_t v2303 = *(void *)(v2300 + 16);
                                            if ((unint64_t)v2301 >= v2303)
                                            {
                                              v2306 = *(_DWORD **)v2300;
                                              uint64_t v2307 = ((uint64_t)v2301 - *(void *)v2300) >> 2;
                                              unint64_t v2308 = v2307 + 1;
                                              if ((unint64_t)(v2307 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2309 = v2303 - (void)v2306;
                                              if (v2309 >> 1 > v2308) {
                                                unint64_t v2308 = v2309 >> 1;
                                              }
                                              if ((unint64_t)v2309 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2310 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2310 = v2308;
                                              }
                                              if (v2310)
                                              {
                                                v2311 = (char *)sub_458C8((uint64_t)v2304, v2310);
                                                v2301 = *v2302;
                                                v2306 = *(_DWORD **)v2300;
                                              }
                                              else
                                              {
                                                v2311 = 0;
                                              }
                                              v2355 = &v2311[4 * v2307];
                                              *(_DWORD *)v2355 = 44;
                                              v2305 = v2355 + 4;
                                              while (v2301 != v2306)
                                              {
                                                int v2356 = *--v2301;
                                                *((_DWORD *)v2355 - 1) = v2356;
                                                v2355 -= 4;
                                              }
                                              *(void *)uint64_t v2300 = v2355;
                                              *v2302 = v2305;
                                              void *v2304 = &v2311[4 * v2310];
                                              if (v2306) {
                                                operator delete(v2306);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2301 = 44;
                                              v2305 = v2301 + 1;
                                            }
                                            *v2302 = v2305;
                                            if (!*v14)
                                            {
LABEL_3970:
                                              if ((*((unsigned char *)__p + 5) & 0x20) == 0) {
                                                goto LABEL_3971;
                                              }
                                              uint64_t v2357 = *v12 + 24 * v13;
                                              v2359 = (_DWORD **)(v2357 + 8);
                                              v2358 = *(_DWORD **)(v2357 + 8);
                                              v2361 = (void *)(v2357 + 16);
                                              unint64_t v2360 = *(void *)(v2357 + 16);
                                              if ((unint64_t)v2358 >= v2360)
                                              {
                                                v2363 = *(_DWORD **)v2357;
                                                uint64_t v2364 = ((uint64_t)v2358 - *(void *)v2357) >> 2;
                                                unint64_t v2365 = v2364 + 1;
                                                if ((unint64_t)(v2364 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2366 = v2360 - (void)v2363;
                                                if (v2366 >> 1 > v2365) {
                                                  unint64_t v2365 = v2366 >> 1;
                                                }
                                                if ((unint64_t)v2366 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v2367 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v2367 = v2365;
                                                }
                                                if (v2367)
                                                {
                                                  v2368 = (char *)sub_458C8((uint64_t)v2361, v2367);
                                                  v2358 = *v2359;
                                                  v2363 = *(_DWORD **)v2357;
                                                }
                                                else
                                                {
                                                  v2368 = 0;
                                                }
                                                v2403 = &v2368[4 * v2364];
                                                *(_DWORD *)v2403 = 45;
                                                v2362 = v2403 + 4;
                                                while (v2358 != v2363)
                                                {
                                                  int v2404 = *--v2358;
                                                  *((_DWORD *)v2403 - 1) = v2404;
                                                  v2403 -= 4;
                                                }
                                                *(void *)uint64_t v2357 = v2403;
                                                *v2359 = v2362;
                                                void *v2361 = &v2368[4 * v2367];
                                                if (v2363) {
                                                  operator delete(v2363);
                                                }
                                              }
                                              else
                                              {
                                                _DWORD *v2358 = 45;
                                                v2362 = v2358 + 1;
                                              }
                                              *v2359 = v2362;
                                              if (!*v14)
                                              {
LABEL_3971:
                                                if ((*((unsigned char *)__p + 5) & 0x40) == 0) {
                                                  goto LABEL_3972;
                                                }
                                                uint64_t v2405 = *v12 + 24 * v13;
                                                v2407 = (_DWORD **)(v2405 + 8);
                                                v2406 = *(_DWORD **)(v2405 + 8);
                                                v2409 = (void *)(v2405 + 16);
                                                unint64_t v2408 = *(void *)(v2405 + 16);
                                                if ((unint64_t)v2406 >= v2408)
                                                {
                                                  v2411 = *(_DWORD **)v2405;
                                                  uint64_t v2412 = ((uint64_t)v2406 - *(void *)v2405) >> 2;
                                                  unint64_t v2413 = v2412 + 1;
                                                  if ((unint64_t)(v2412 + 1) >> 62) {
                                                    sub_566C();
                                                  }
                                                  uint64_t v2414 = v2408 - (void)v2411;
                                                  if (v2414 >> 1 > v2413) {
                                                    unint64_t v2413 = v2414 >> 1;
                                                  }
                                                  if ((unint64_t)v2414 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                    unint64_t v2415 = 0x3FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v2415 = v2413;
                                                  }
                                                  if (v2415)
                                                  {
                                                    v2416 = (char *)sub_458C8((uint64_t)v2409, v2415);
                                                    v2406 = *v2407;
                                                    v2411 = *(_DWORD **)v2405;
                                                  }
                                                  else
                                                  {
                                                    v2416 = 0;
                                                  }
                                                  v2446 = &v2416[4 * v2412];
                                                  *(_DWORD *)v2446 = 46;
                                                  v2410 = v2446 + 4;
                                                  while (v2406 != v2411)
                                                  {
                                                    int v2447 = *--v2406;
                                                    *((_DWORD *)v2446 - 1) = v2447;
                                                    v2446 -= 4;
                                                  }
                                                  *(void *)uint64_t v2405 = v2446;
                                                  *v2407 = v2410;
                                                  void *v2409 = &v2416[4 * v2415];
                                                  if (v2411) {
                                                    operator delete(v2411);
                                                  }
                                                }
                                                else
                                                {
                                                  _DWORD *v2406 = 46;
                                                  v2410 = v2406 + 1;
                                                }
                                                *v2407 = v2410;
                                                if (!*v14)
                                                {
LABEL_3972:
                                                  if ((*((unsigned char *)__p + 5) & 0x80) == 0) {
                                                    goto LABEL_3973;
                                                  }
                                                  uint64_t v2448 = *v12 + 24 * v13;
                                                  v2450 = (_DWORD **)(v2448 + 8);
                                                  v2449 = *(_DWORD **)(v2448 + 8);
                                                  v2452 = (void *)(v2448 + 16);
                                                  unint64_t v2451 = *(void *)(v2448 + 16);
                                                  if ((unint64_t)v2449 >= v2451)
                                                  {
                                                    v2454 = *(_DWORD **)v2448;
                                                    uint64_t v2455 = ((uint64_t)v2449 - *(void *)v2448) >> 2;
                                                    unint64_t v2456 = v2455 + 1;
                                                    if ((unint64_t)(v2455 + 1) >> 62) {
                                                      sub_566C();
                                                    }
                                                    uint64_t v2457 = v2451 - (void)v2454;
                                                    if (v2457 >> 1 > v2456) {
                                                      unint64_t v2456 = v2457 >> 1;
                                                    }
                                                    if ((unint64_t)v2457 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                      unint64_t v2458 = 0x3FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v2458 = v2456;
                                                    }
                                                    if (v2458)
                                                    {
                                                      v2459 = (char *)sub_458C8((uint64_t)v2452, v2458);
                                                      v2449 = *v2450;
                                                      v2454 = *(_DWORD **)v2448;
                                                    }
                                                    else
                                                    {
                                                      v2459 = 0;
                                                    }
                                                    v2480 = &v2459[4 * v2455];
                                                    *(_DWORD *)v2480 = 47;
                                                    v2453 = v2480 + 4;
                                                    while (v2449 != v2454)
                                                    {
                                                      int v2481 = *--v2449;
                                                      *((_DWORD *)v2480 - 1) = v2481;
                                                      v2480 -= 4;
                                                    }
                                                    *(void *)uint64_t v2448 = v2480;
                                                    *v2450 = v2453;
                                                    void *v2452 = &v2459[4 * v2458];
                                                    if (v2454) {
                                                      operator delete(v2454);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    _DWORD *v2449 = 47;
                                                    v2453 = v2449 + 1;
                                                  }
                                                  *v2450 = v2453;
                                                  if (!*v14)
                                                  {
LABEL_3973:
                                                    if ((*((unsigned char *)__p + 6) & 1) == 0) {
                                                      goto LABEL_3974;
                                                    }
                                                    uint64_t v2482 = *v12 + 24 * v13;
                                                    v2484 = (_DWORD **)(v2482 + 8);
                                                    v2483 = *(_DWORD **)(v2482 + 8);
                                                    v2486 = (void *)(v2482 + 16);
                                                    unint64_t v2485 = *(void *)(v2482 + 16);
                                                    if ((unint64_t)v2483 >= v2485)
                                                    {
                                                      v2488 = *(_DWORD **)v2482;
                                                      uint64_t v2489 = ((uint64_t)v2483 - *(void *)v2482) >> 2;
                                                      unint64_t v2490 = v2489 + 1;
                                                      if ((unint64_t)(v2489 + 1) >> 62) {
                                                        sub_566C();
                                                      }
                                                      uint64_t v2491 = v2485 - (void)v2488;
                                                      if (v2491 >> 1 > v2490) {
                                                        unint64_t v2490 = v2491 >> 1;
                                                      }
                                                      if ((unint64_t)v2491 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                        unint64_t v2492 = 0x3FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        unint64_t v2492 = v2490;
                                                      }
                                                      if (v2492)
                                                      {
                                                        v2493 = (char *)sub_458C8((uint64_t)v2486, v2492);
                                                        v2483 = *v2484;
                                                        v2488 = *(_DWORD **)v2482;
                                                      }
                                                      else
                                                      {
                                                        v2493 = 0;
                                                      }
                                                      v2509 = &v2493[4 * v2489];
                                                      *(_DWORD *)v2509 = 48;
                                                      v2487 = v2509 + 4;
                                                      while (v2483 != v2488)
                                                      {
                                                        int v2510 = *--v2483;
                                                        *((_DWORD *)v2509 - 1) = v2510;
                                                        v2509 -= 4;
                                                      }
                                                      *(void *)uint64_t v2482 = v2509;
                                                      *v2484 = v2487;
                                                      void *v2486 = &v2493[4 * v2492];
                                                      if (v2488) {
                                                        operator delete(v2488);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      _DWORD *v2483 = 48;
                                                      v2487 = v2483 + 1;
                                                    }
                                                    *v2484 = v2487;
                                                    if (!*v14)
                                                    {
LABEL_3974:
                                                      if ((*((unsigned char *)__p + 6) & 2) == 0) {
                                                        goto LABEL_3975;
                                                      }
                                                      uint64_t v2511 = *v12 + 24 * v13;
                                                      v2513 = (_DWORD **)(v2511 + 8);
                                                      v2512 = *(_DWORD **)(v2511 + 8);
                                                      v2515 = (void *)(v2511 + 16);
                                                      unint64_t v2514 = *(void *)(v2511 + 16);
                                                      if ((unint64_t)v2512 >= v2514)
                                                      {
                                                        v2517 = *(_DWORD **)v2511;
                                                        uint64_t v2518 = ((uint64_t)v2512 - *(void *)v2511) >> 2;
                                                        unint64_t v2519 = v2518 + 1;
                                                        if ((unint64_t)(v2518 + 1) >> 62) {
                                                          sub_566C();
                                                        }
                                                        uint64_t v2520 = v2514 - (void)v2517;
                                                        if (v2520 >> 1 > v2519) {
                                                          unint64_t v2519 = v2520 >> 1;
                                                        }
                                                        if ((unint64_t)v2520 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                          unint64_t v2521 = 0x3FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          unint64_t v2521 = v2519;
                                                        }
                                                        if (v2521)
                                                        {
                                                          v2522 = (char *)sub_458C8((uint64_t)v2515, v2521);
                                                          v2512 = *v2513;
                                                          v2517 = *(_DWORD **)v2511;
                                                        }
                                                        else
                                                        {
                                                          v2522 = 0;
                                                        }
                                                        v2537 = &v2522[4 * v2518];
                                                        *(_DWORD *)v2537 = 49;
                                                        v2516 = v2537 + 4;
                                                        while (v2512 != v2517)
                                                        {
                                                          int v2538 = *--v2512;
                                                          *((_DWORD *)v2537 - 1) = v2538;
                                                          v2537 -= 4;
                                                        }
                                                        *(void *)uint64_t v2511 = v2537;
                                                        *v2513 = v2516;
                                                        void *v2515 = &v2522[4 * v2521];
                                                        if (v2517) {
                                                          operator delete(v2517);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        _DWORD *v2512 = 49;
                                                        v2516 = v2512 + 1;
                                                      }
                                                      *v2513 = v2516;
                                                      if (!*v14)
                                                      {
LABEL_3975:
                                                        if ((*((unsigned char *)__p + 6) & 4) == 0) {
                                                          goto LABEL_3976;
                                                        }
                                                        uint64_t v2539 = *v12 + 24 * v13;
                                                        v2541 = (_DWORD **)(v2539 + 8);
                                                        v2540 = *(_DWORD **)(v2539 + 8);
                                                        v2543 = (void *)(v2539 + 16);
                                                        unint64_t v2542 = *(void *)(v2539 + 16);
                                                        if ((unint64_t)v2540 >= v2542)
                                                        {
                                                          v2545 = *(_DWORD **)v2539;
                                                          uint64_t v2546 = ((uint64_t)v2540 - *(void *)v2539) >> 2;
                                                          unint64_t v2547 = v2546 + 1;
                                                          if ((unint64_t)(v2546 + 1) >> 62) {
                                                            sub_566C();
                                                          }
                                                          uint64_t v2548 = v2542 - (void)v2545;
                                                          if (v2548 >> 1 > v2547) {
                                                            unint64_t v2547 = v2548 >> 1;
                                                          }
                                                          if ((unint64_t)v2548 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                            unint64_t v2549 = 0x3FFFFFFFFFFFFFFFLL;
                                                          }
                                                          else {
                                                            unint64_t v2549 = v2547;
                                                          }
                                                          if (v2549)
                                                          {
                                                            v2550 = (char *)sub_458C8((uint64_t)v2543, v2549);
                                                            v2540 = *v2541;
                                                            v2545 = *(_DWORD **)v2539;
                                                          }
                                                          else
                                                          {
                                                            v2550 = 0;
                                                          }
                                                          v2565 = &v2550[4 * v2546];
                                                          *(_DWORD *)v2565 = 50;
                                                          v2544 = v2565 + 4;
                                                          while (v2540 != v2545)
                                                          {
                                                            int v2566 = *--v2540;
                                                            *((_DWORD *)v2565 - 1) = v2566;
                                                            v2565 -= 4;
                                                          }
                                                          *(void *)uint64_t v2539 = v2565;
                                                          *v2541 = v2544;
                                                          void *v2543 = &v2550[4 * v2549];
                                                          if (v2545) {
                                                            operator delete(v2545);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          _DWORD *v2540 = 50;
                                                          v2544 = v2540 + 1;
                                                        }
                                                        *v2541 = v2544;
                                                        if (!*v14)
                                                        {
LABEL_3976:
                                                          if ((*((unsigned char *)__p + 6) & 8) == 0) {
                                                            goto LABEL_3977;
                                                          }
                                                          uint64_t v2567 = *v12 + 24 * v13;
                                                          v2569 = (_DWORD **)(v2567 + 8);
                                                          v2568 = *(_DWORD **)(v2567 + 8);
                                                          v2571 = (void *)(v2567 + 16);
                                                          unint64_t v2570 = *(void *)(v2567 + 16);
                                                          if ((unint64_t)v2568 >= v2570)
                                                          {
                                                            v2573 = *(_DWORD **)v2567;
                                                            uint64_t v2574 = ((uint64_t)v2568 - *(void *)v2567) >> 2;
                                                            unint64_t v2575 = v2574 + 1;
                                                            if ((unint64_t)(v2574 + 1) >> 62) {
                                                              sub_566C();
                                                            }
                                                            uint64_t v2576 = v2570 - (void)v2573;
                                                            if (v2576 >> 1 > v2575) {
                                                              unint64_t v2575 = v2576 >> 1;
                                                            }
                                                            if ((unint64_t)v2576 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                              unint64_t v2577 = 0x3FFFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              unint64_t v2577 = v2575;
                                                            }
                                                            if (v2577)
                                                            {
                                                              v2578 = (char *)sub_458C8((uint64_t)v2571, v2577);
                                                              v2568 = *v2569;
                                                              v2573 = *(_DWORD **)v2567;
                                                            }
                                                            else
                                                            {
                                                              v2578 = 0;
                                                            }
                                                            v2593 = &v2578[4 * v2574];
                                                            *(_DWORD *)v2593 = 51;
                                                            v2572 = v2593 + 4;
                                                            while (v2568 != v2573)
                                                            {
                                                              int v2594 = *--v2568;
                                                              *((_DWORD *)v2593 - 1) = v2594;
                                                              v2593 -= 4;
                                                            }
                                                            *(void *)uint64_t v2567 = v2593;
                                                            *v2569 = v2572;
                                                            void *v2571 = &v2578[4 * v2577];
                                                            if (v2573) {
                                                              operator delete(v2573);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            _DWORD *v2568 = 51;
                                                            v2572 = v2568 + 1;
                                                          }
                                                          *v2569 = v2572;
                                                          if (!*v14)
                                                          {
LABEL_3977:
                                                            if ((*((unsigned char *)__p + 6) & 0x10) == 0) {
                                                              goto LABEL_3978;
                                                            }
                                                            uint64_t v2595 = *v12 + 24 * v13;
                                                            v2597 = (_DWORD **)(v2595 + 8);
                                                            v2596 = *(_DWORD **)(v2595 + 8);
                                                            v2599 = (void *)(v2595 + 16);
                                                            unint64_t v2598 = *(void *)(v2595 + 16);
                                                            if ((unint64_t)v2596 >= v2598)
                                                            {
                                                              v2601 = *(_DWORD **)v2595;
                                                              uint64_t v2602 = ((uint64_t)v2596 - *(void *)v2595) >> 2;
                                                              unint64_t v2603 = v2602 + 1;
                                                              if ((unint64_t)(v2602 + 1) >> 62) {
                                                                sub_566C();
                                                              }
                                                              uint64_t v2604 = v2598 - (void)v2601;
                                                              if (v2604 >> 1 > v2603) {
                                                                unint64_t v2603 = v2604 >> 1;
                                                              }
                                                              if ((unint64_t)v2604 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                unint64_t v2605 = 0x3FFFFFFFFFFFFFFFLL;
                                                              }
                                                              else {
                                                                unint64_t v2605 = v2603;
                                                              }
                                                              if (v2605)
                                                              {
                                                                v2606 = (char *)sub_458C8((uint64_t)v2599, v2605);
                                                                v2596 = *v2597;
                                                                v2601 = *(_DWORD **)v2595;
                                                              }
                                                              else
                                                              {
                                                                v2606 = 0;
                                                              }
                                                              v2621 = &v2606[4 * v2602];
                                                              *(_DWORD *)v2621 = 52;
                                                              v2600 = v2621 + 4;
                                                              while (v2596 != v2601)
                                                              {
                                                                int v2622 = *--v2596;
                                                                *((_DWORD *)v2621 - 1) = v2622;
                                                                v2621 -= 4;
                                                              }
                                                              *(void *)uint64_t v2595 = v2621;
                                                              *v2597 = v2600;
                                                              void *v2599 = &v2606[4 * v2605];
                                                              if (v2601) {
                                                                operator delete(v2601);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              _DWORD *v2596 = 52;
                                                              v2600 = v2596 + 1;
                                                            }
                                                            *v2597 = v2600;
                                                            if (!*v14)
                                                            {
LABEL_3978:
                                                              if ((*((unsigned char *)__p + 6) & 0x20) == 0) {
                                                                goto LABEL_3979;
                                                              }
                                                              uint64_t v2623 = *v12 + 24 * v13;
                                                              v2625 = (_DWORD **)(v2623 + 8);
                                                              v2624 = *(_DWORD **)(v2623 + 8);
                                                              v2627 = (void *)(v2623 + 16);
                                                              unint64_t v2626 = *(void *)(v2623 + 16);
                                                              if ((unint64_t)v2624 >= v2626)
                                                              {
                                                                v2629 = *(_DWORD **)v2623;
                                                                uint64_t v2630 = ((uint64_t)v2624 - *(void *)v2623) >> 2;
                                                                unint64_t v2631 = v2630 + 1;
                                                                if ((unint64_t)(v2630 + 1) >> 62) {
                                                                  sub_566C();
                                                                }
                                                                uint64_t v2632 = v2626 - (void)v2629;
                                                                if (v2632 >> 1 > v2631) {
                                                                  unint64_t v2631 = v2632 >> 1;
                                                                }
                                                                if ((unint64_t)v2632 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                  unint64_t v2633 = 0x3FFFFFFFFFFFFFFFLL;
                                                                }
                                                                else {
                                                                  unint64_t v2633 = v2631;
                                                                }
                                                                if (v2633)
                                                                {
                                                                  v2634 = (char *)sub_458C8((uint64_t)v2627, v2633);
                                                                  v2624 = *v2625;
                                                                  v2629 = *(_DWORD **)v2623;
                                                                }
                                                                else
                                                                {
                                                                  v2634 = 0;
                                                                }
                                                                v2649 = &v2634[4 * v2630];
                                                                *(_DWORD *)v2649 = 53;
                                                                v2628 = v2649 + 4;
                                                                while (v2624 != v2629)
                                                                {
                                                                  int v2650 = *--v2624;
                                                                  *((_DWORD *)v2649 - 1) = v2650;
                                                                  v2649 -= 4;
                                                                }
                                                                *(void *)uint64_t v2623 = v2649;
                                                                *v2625 = v2628;
                                                                void *v2627 = &v2634[4 * v2633];
                                                                if (v2629) {
                                                                  operator delete(v2629);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                _DWORD *v2624 = 53;
                                                                v2628 = v2624 + 1;
                                                              }
                                                              *v2625 = v2628;
                                                              if (!*v14)
                                                              {
LABEL_3979:
                                                                if ((*((unsigned char *)__p + 6) & 0x40) == 0) {
                                                                  goto LABEL_3980;
                                                                }
                                                                uint64_t v2651 = *v12 + 24 * v13;
                                                                v2653 = (_DWORD **)(v2651 + 8);
                                                                v2652 = *(_DWORD **)(v2651 + 8);
                                                                v2655 = (void *)(v2651 + 16);
                                                                unint64_t v2654 = *(void *)(v2651 + 16);
                                                                if ((unint64_t)v2652 >= v2654)
                                                                {
                                                                  v2657 = *(_DWORD **)v2651;
                                                                  uint64_t v2658 = ((uint64_t)v2652 - *(void *)v2651) >> 2;
                                                                  unint64_t v2659 = v2658 + 1;
                                                                  if ((unint64_t)(v2658 + 1) >> 62) {
                                                                    sub_566C();
                                                                  }
                                                                  uint64_t v2660 = v2654 - (void)v2657;
                                                                  if (v2660 >> 1 > v2659) {
                                                                    unint64_t v2659 = v2660 >> 1;
                                                                  }
                                                                  if ((unint64_t)v2660 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                    unint64_t v2661 = 0x3FFFFFFFFFFFFFFFLL;
                                                                  }
                                                                  else {
                                                                    unint64_t v2661 = v2659;
                                                                  }
                                                                  if (v2661)
                                                                  {
                                                                    v2662 = (char *)sub_458C8((uint64_t)v2655, v2661);
                                                                    v2652 = *v2653;
                                                                    v2657 = *(_DWORD **)v2651;
                                                                  }
                                                                  else
                                                                  {
                                                                    v2662 = 0;
                                                                  }
                                                                  v2677 = &v2662[4 * v2658];
                                                                  *(_DWORD *)v2677 = 54;
                                                                  v2656 = v2677 + 4;
                                                                  while (v2652 != v2657)
                                                                  {
                                                                    int v2678 = *--v2652;
                                                                    *((_DWORD *)v2677 - 1) = v2678;
                                                                    v2677 -= 4;
                                                                  }
                                                                  *(void *)uint64_t v2651 = v2677;
                                                                  *v2653 = v2656;
                                                                  void *v2655 = &v2662[4 * v2661];
                                                                  if (v2657) {
                                                                    operator delete(v2657);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  _DWORD *v2652 = 54;
                                                                  v2656 = v2652 + 1;
                                                                }
                                                                *v2653 = v2656;
                                                                if (!*v14)
                                                                {
LABEL_3980:
                                                                  if ((*((unsigned char *)__p + 6) & 0x80) == 0) {
                                                                    goto LABEL_3981;
                                                                  }
                                                                  uint64_t v2679 = *v12 + 24 * v13;
                                                                  v2681 = (_DWORD **)(v2679 + 8);
                                                                  v2680 = *(_DWORD **)(v2679 + 8);
                                                                  v2683 = (void *)(v2679 + 16);
                                                                  unint64_t v2682 = *(void *)(v2679 + 16);
                                                                  if ((unint64_t)v2680 >= v2682)
                                                                  {
                                                                    v2685 = *(_DWORD **)v2679;
                                                                    uint64_t v2686 = ((uint64_t)v2680 - *(void *)v2679) >> 2;
                                                                    unint64_t v2687 = v2686 + 1;
                                                                    if ((unint64_t)(v2686 + 1) >> 62) {
                                                                      sub_566C();
                                                                    }
                                                                    uint64_t v2688 = v2682 - (void)v2685;
                                                                    if (v2688 >> 1 > v2687) {
                                                                      unint64_t v2687 = v2688 >> 1;
                                                                    }
                                                                    if ((unint64_t)v2688 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                      unint64_t v2689 = 0x3FFFFFFFFFFFFFFFLL;
                                                                    }
                                                                    else {
                                                                      unint64_t v2689 = v2687;
                                                                    }
                                                                    if (v2689)
                                                                    {
                                                                      v2690 = (char *)sub_458C8((uint64_t)v2683, v2689);
                                                                      v2680 = *v2681;
                                                                      v2685 = *(_DWORD **)v2679;
                                                                    }
                                                                    else
                                                                    {
                                                                      v2690 = 0;
                                                                    }
                                                                    v2705 = &v2690[4 * v2686];
                                                                    *(_DWORD *)v2705 = 55;
                                                                    v2684 = v2705 + 4;
                                                                    while (v2680 != v2685)
                                                                    {
                                                                      int v2706 = *--v2680;
                                                                      *((_DWORD *)v2705 - 1) = v2706;
                                                                      v2705 -= 4;
                                                                    }
                                                                    *(void *)uint64_t v2679 = v2705;
                                                                    *v2681 = v2684;
                                                                    void *v2683 = &v2690[4 * v2689];
                                                                    if (v2685) {
                                                                      operator delete(v2685);
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    _DWORD *v2680 = 55;
                                                                    v2684 = v2680 + 1;
                                                                  }
                                                                  *v2681 = v2684;
                                                                  if (!*v14)
                                                                  {
LABEL_3981:
                                                                    if ((*((unsigned char *)__p + 7) & 1) == 0) {
                                                                      goto LABEL_3982;
                                                                    }
                                                                    uint64_t v2707 = *v12 + 24 * v13;
                                                                    v2709 = (_DWORD **)(v2707 + 8);
                                                                    v2708 = *(_DWORD **)(v2707 + 8);
                                                                    v2711 = (void *)(v2707 + 16);
                                                                    unint64_t v2710 = *(void *)(v2707 + 16);
                                                                    if ((unint64_t)v2708 >= v2710)
                                                                    {
                                                                      v2713 = *(_DWORD **)v2707;
                                                                      uint64_t v2714 = ((uint64_t)v2708 - *(void *)v2707) >> 2;
                                                                      unint64_t v2715 = v2714 + 1;
                                                                      if ((unint64_t)(v2714 + 1) >> 62) {
                                                                        sub_566C();
                                                                      }
                                                                      uint64_t v2716 = v2710 - (void)v2713;
                                                                      if (v2716 >> 1 > v2715) {
                                                                        unint64_t v2715 = v2716 >> 1;
                                                                      }
                                                                      if ((unint64_t)v2716 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                        unint64_t v2717 = 0x3FFFFFFFFFFFFFFFLL;
                                                                      }
                                                                      else {
                                                                        unint64_t v2717 = v2715;
                                                                      }
                                                                      if (v2717)
                                                                      {
                                                                        v2718 = (char *)sub_458C8((uint64_t)v2711, v2717);
                                                                        v2708 = *v2709;
                                                                        v2713 = *(_DWORD **)v2707;
                                                                      }
                                                                      else
                                                                      {
                                                                        v2718 = 0;
                                                                      }
                                                                      v2733 = &v2718[4 * v2714];
                                                                      *(_DWORD *)v2733 = 56;
                                                                      v2712 = v2733 + 4;
                                                                      while (v2708 != v2713)
                                                                      {
                                                                        int v2734 = *--v2708;
                                                                        *((_DWORD *)v2733 - 1) = v2734;
                                                                        v2733 -= 4;
                                                                      }
                                                                      *(void *)uint64_t v2707 = v2733;
                                                                      *v2709 = v2712;
                                                                      void *v2711 = &v2718[4 * v2717];
                                                                      if (v2713) {
                                                                        operator delete(v2713);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      _DWORD *v2708 = 56;
                                                                      v2712 = v2708 + 1;
                                                                    }
                                                                    *v2709 = v2712;
                                                                    if (!*v14)
                                                                    {
LABEL_3982:
                                                                      if ((*((unsigned char *)__p + 7) & 2) == 0) {
                                                                        goto LABEL_3983;
                                                                      }
                                                                      uint64_t v2735 = *v12 + 24 * v13;
                                                                      v2737 = (_DWORD **)(v2735 + 8);
                                                                      v2736 = *(_DWORD **)(v2735 + 8);
                                                                      v2739 = (void *)(v2735 + 16);
                                                                      unint64_t v2738 = *(void *)(v2735 + 16);
                                                                      if ((unint64_t)v2736 >= v2738)
                                                                      {
                                                                        v2741 = *(_DWORD **)v2735;
                                                                        uint64_t v2742 = ((uint64_t)v2736 - *(void *)v2735) >> 2;
                                                                        unint64_t v2743 = v2742 + 1;
                                                                        if ((unint64_t)(v2742 + 1) >> 62) {
                                                                          sub_566C();
                                                                        }
                                                                        uint64_t v2744 = v2738 - (void)v2741;
                                                                        if (v2744 >> 1 > v2743) {
                                                                          unint64_t v2743 = v2744 >> 1;
                                                                        }
                                                                        if ((unint64_t)v2744 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                          unint64_t v2745 = 0x3FFFFFFFFFFFFFFFLL;
                                                                        }
                                                                        else {
                                                                          unint64_t v2745 = v2743;
                                                                        }
                                                                        if (v2745)
                                                                        {
                                                                          v2746 = (char *)sub_458C8((uint64_t)v2739, v2745);
                                                                          v2736 = *v2737;
                                                                          v2741 = *(_DWORD **)v2735;
                                                                        }
                                                                        else
                                                                        {
                                                                          v2746 = 0;
                                                                        }
                                                                        v2761 = &v2746[4 * v2742];
                                                                        *(_DWORD *)v2761 = 57;
                                                                        v2740 = v2761 + 4;
                                                                        while (v2736 != v2741)
                                                                        {
                                                                          int v2762 = *--v2736;
                                                                          *((_DWORD *)v2761 - 1) = v2762;
                                                                          v2761 -= 4;
                                                                        }
                                                                        *(void *)uint64_t v2735 = v2761;
                                                                        *v2737 = v2740;
                                                                        void *v2739 = &v2746[4 * v2745];
                                                                        if (v2741) {
                                                                          operator delete(v2741);
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        _DWORD *v2736 = 57;
                                                                        v2740 = v2736 + 1;
                                                                      }
                                                                      *v2737 = v2740;
                                                                      if (!*v14)
                                                                      {
LABEL_3983:
                                                                        if ((*((unsigned char *)__p + 7) & 4) == 0) {
                                                                          goto LABEL_3984;
                                                                        }
                                                                        uint64_t v2763 = *v12 + 24 * v13;
                                                                        v2765 = (_DWORD **)(v2763 + 8);
                                                                        v2764 = *(_DWORD **)(v2763 + 8);
                                                                        v2767 = (void *)(v2763 + 16);
                                                                        unint64_t v2766 = *(void *)(v2763 + 16);
                                                                        if ((unint64_t)v2764 >= v2766)
                                                                        {
                                                                          v2769 = *(_DWORD **)v2763;
                                                                          uint64_t v2770 = ((uint64_t)v2764 - *(void *)v2763) >> 2;
                                                                          unint64_t v2771 = v2770 + 1;
                                                                          if ((unint64_t)(v2770 + 1) >> 62) {
                                                                            sub_566C();
                                                                          }
                                                                          uint64_t v2772 = v2766 - (void)v2769;
                                                                          if (v2772 >> 1 > v2771) {
                                                                            unint64_t v2771 = v2772 >> 1;
                                                                          }
                                                                          if ((unint64_t)v2772 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                            unint64_t v2773 = 0x3FFFFFFFFFFFFFFFLL;
                                                                          }
                                                                          else {
                                                                            unint64_t v2773 = v2771;
                                                                          }
                                                                          if (v2773)
                                                                          {
                                                                            v2774 = (char *)sub_458C8((uint64_t)v2767, v2773);
                                                                            v2764 = *v2765;
                                                                            v2769 = *(_DWORD **)v2763;
                                                                          }
                                                                          else
                                                                          {
                                                                            v2774 = 0;
                                                                          }
                                                                          v2781 = &v2774[4 * v2770];
                                                                          *(_DWORD *)v2781 = 58;
                                                                          v2768 = v2781 + 4;
                                                                          while (v2764 != v2769)
                                                                          {
                                                                            int v2782 = *--v2764;
                                                                            *((_DWORD *)v2781 - 1) = v2782;
                                                                            v2781 -= 4;
                                                                          }
                                                                          *(void *)uint64_t v2763 = v2781;
                                                                          *v2765 = v2768;
                                                                          void *v2767 = &v2774[4 * v2773];
                                                                          if (v2769) {
                                                                            operator delete(v2769);
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          _DWORD *v2764 = 58;
                                                                          v2768 = v2764 + 1;
                                                                        }
                                                                        *v2765 = v2768;
                                                                        if (!*v14)
                                                                        {
LABEL_3984:
                                                                          if ((*((unsigned char *)__p + 7) & 8) != 0)
                                                                          {
                                                                            uint64_t v1723 = *v12 + 24 * v13;
                                                                            unint64_t v1725 = (int **)(v1723 + 8);
                                                                            double v1724 = *(int **)(v1723 + 8);
                                                                            v1727 = (void *)(v1723 + 16);
                                                                            unint64_t v2783 = *(void *)(v1723 + 16);
                                                                            if ((unint64_t)v1724 < v2783)
                                                                            {
                                                                              int v1728 = 59;
                                                                              goto LABEL_2504;
                                                                            }
                                                                            v1729 = *(int **)v1723;
                                                                            uint64_t v2784 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                                                            unint64_t v2785 = v2784 + 1;
                                                                            if ((unint64_t)(v2784 + 1) >> 62) {
                                                                              sub_566C();
                                                                            }
                                                                            uint64_t v2786 = v2783 - (void)v1729;
                                                                            if (v2786 >> 1 > v2785) {
                                                                              unint64_t v2785 = v2786 >> 1;
                                                                            }
                                                                            if ((unint64_t)v2786 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                              unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                                                            }
                                                                            else {
                                                                              unint64_t v1733 = v2785;
                                                                            }
                                                                            if (v1733)
                                                                            {
                                                                              v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                                                              double v1724 = *v1725;
                                                                              v1729 = *(int **)v1723;
                                                                            }
                                                                            else
                                                                            {
                                                                              v1734 = 0;
                                                                            }
                                                                            v1840 = &v1734[4 * v2784];
                                                                            *(_DWORD *)v1840 = 59;
                                                                            v1841 = (int *)(v1840 + 4);
                                                                            while (v1724 != v1729)
                                                                            {
                                                                              int v2788 = *--v1724;
                                                                              *((_DWORD *)v1840 - 1) = v2788;
                                                                              v1840 -= 4;
                                                                            }
                                                                            goto LABEL_3716;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 3:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 1) & 8) == 0) {
              goto LABEL_338;
            }
            uint64_t v63 = *v12 + 24 * v13;
            uint64_t v65 = (_DWORD **)(v63 + 8);
            uint64_t v64 = *(_DWORD **)(v63 + 8);
            uint64_t v67 = (void *)(v63 + 16);
            unint64_t v66 = *(void *)(v63 + 16);
            if ((unint64_t)v64 >= v66)
            {
              char v153 = *(_DWORD **)v63;
              uint64_t v154 = ((uint64_t)v64 - *(void *)v63) >> 2;
              unint64_t v155 = v154 + 1;
              if ((unint64_t)(v154 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v156 = v66 - (void)v153;
              if (v156 >> 1 > v155) {
                unint64_t v155 = v156 >> 1;
              }
              if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v157 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v157 = v155;
              }
              if (v157)
              {
                unint64_t v158 = (char *)sub_458C8((uint64_t)v67, v157);
                uint64_t v64 = *v65;
                char v153 = *(_DWORD **)v63;
              }
              else
              {
                unint64_t v158 = 0;
              }
              uint64_t v305 = &v158[4 * v154];
              *(_DWORD *)uint64_t v305 = 11;
              unint64_t v68 = v305 + 4;
              while (v64 != v153)
              {
                int v306 = *--v64;
                *((_DWORD *)v305 - 1) = v306;
                v305 -= 4;
              }
              *(void *)uint64_t v63 = v305;
              *uint64_t v65 = v68;
              *uint64_t v67 = &v158[4 * v157];
              if (v153) {
                operator delete(v153);
              }
            }
            else
            {
              _DWORD *v64 = 11;
              unint64_t v68 = v64 + 1;
            }
            *uint64_t v65 = v68;
            if (!*v14)
            {
LABEL_338:
              if ((*((unsigned char *)__p + 1) & 0x10) == 0) {
                goto LABEL_2501;
              }
              uint64_t v307 = *v12 + 24 * v13;
              unint64_t v309 = (_DWORD **)(v307 + 8);
              uint64_t v308 = *(_DWORD **)(v307 + 8);
              unint64_t v311 = (void *)(v307 + 16);
              unint64_t v310 = *(void *)(v307 + 16);
              if ((unint64_t)v308 >= v310)
              {
                uint64_t v313 = *(_DWORD **)v307;
                uint64_t v314 = ((uint64_t)v308 - *(void *)v307) >> 2;
                unint64_t v315 = v314 + 1;
                if ((unint64_t)(v314 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v316 = v310 - (void)v313;
                if (v316 >> 1 > v315) {
                  unint64_t v315 = v316 >> 1;
                }
                if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v317 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v317 = v315;
                }
                if (v317)
                {
                  uint64_t v318 = (char *)sub_458C8((uint64_t)v311, v317);
                  uint64_t v308 = *v309;
                  uint64_t v313 = *(_DWORD **)v307;
                }
                else
                {
                  uint64_t v318 = 0;
                }
                int v530 = &v318[4 * v314];
                *(_DWORD *)int v530 = 12;
                int v312 = v530 + 4;
                while (v308 != v313)
                {
                  int v531 = *--v308;
                  *((_DWORD *)v530 - 1) = v531;
                  v530 -= 4;
                }
                *(void *)uint64_t v307 = v530;
                *unint64_t v309 = v312;
                void *v311 = &v318[4 * v317];
                if (v313) {
                  operator delete(v313);
                }
              }
              else
              {
                *uint64_t v308 = 12;
                int v312 = v308 + 1;
              }
              *unint64_t v309 = v312;
              if (!*v14)
              {
LABEL_2501:
                if ((*((unsigned char *)__p + 1) & 0x20) == 0) {
                  goto LABEL_3985;
                }
                uint64_t v532 = *v12 + 24 * v13;
                int64_t v534 = (_DWORD **)(v532 + 8);
                char v533 = *(_DWORD **)(v532 + 8);
                unint64_t v536 = (void *)(v532 + 16);
                unint64_t v535 = *(void *)(v532 + 16);
                if ((unint64_t)v533 >= v535)
                {
                  uint64_t v538 = *(_DWORD **)v532;
                  uint64_t v539 = ((uint64_t)v533 - *(void *)v532) >> 2;
                  unint64_t v540 = v539 + 1;
                  if ((unint64_t)(v539 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v541 = v535 - (void)v538;
                  if (v541 >> 1 > v540) {
                    unint64_t v540 = v541 >> 1;
                  }
                  if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v542 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v542 = v540;
                  }
                  if (v542)
                  {
                    BOOL v543 = (char *)sub_458C8((uint64_t)v536, v542);
                    char v533 = *v534;
                    uint64_t v538 = *(_DWORD **)v532;
                  }
                  else
                  {
                    BOOL v543 = 0;
                  }
                  uint64_t v734 = &v543[4 * v539];
                  *(_DWORD *)uint64_t v734 = 13;
                  unint64_t v537 = v734 + 4;
                  while (v533 != v538)
                  {
                    int v735 = *--v533;
                    *((_DWORD *)v734 - 1) = v735;
                    v734 -= 4;
                  }
                  *(void *)uint64_t v532 = v734;
                  double *v534 = v537;
                  *unint64_t v536 = &v543[4 * v542];
                  if (v538) {
                    operator delete(v538);
                  }
                }
                else
                {
                  _DWORD *v533 = 13;
                  unint64_t v537 = v533 + 1;
                }
                double *v534 = v537;
                if (!*v14)
                {
LABEL_3985:
                  if ((*((unsigned char *)__p + 1) & 0x40) == 0) {
                    goto LABEL_3986;
                  }
                  uint64_t v736 = *v12 + 24 * v13;
                  unsigned int v738 = (_DWORD **)(v736 + 8);
                  v737 = *(_DWORD **)(v736 + 8);
                  int v740 = (void *)(v736 + 16);
                  unint64_t v739 = *(void *)(v736 + 16);
                  if ((unint64_t)v737 >= v739)
                  {
                    unint64_t v742 = *(_DWORD **)v736;
                    uint64_t v743 = ((uint64_t)v737 - *(void *)v736) >> 2;
                    unint64_t v744 = v743 + 1;
                    if ((unint64_t)(v743 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v745 = v739 - (void)v742;
                    if (v745 >> 1 > v744) {
                      unint64_t v744 = v745 >> 1;
                    }
                    if ((unint64_t)v745 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v746 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v746 = v744;
                    }
                    if (v746)
                    {
                      double v747 = (char *)sub_458C8((uint64_t)v740, v746);
                      v737 = *v738;
                      unint64_t v742 = *(_DWORD **)v736;
                    }
                    else
                    {
                      double v747 = 0;
                    }
                    double v923 = &v747[4 * v743];
                    *(_DWORD *)double v923 = 14;
                    int v741 = v923 + 4;
                    while (v737 != v742)
                    {
                      int v924 = *--v737;
                      *((_DWORD *)v923 - 1) = v924;
                      v923 -= 4;
                    }
                    *(void *)uint64_t v736 = v923;
                    unsigned __int8 *v738 = v741;
                    *int v740 = &v747[4 * v746];
                    if (v742) {
                      operator delete(v742);
                    }
                  }
                  else
                  {
                    _DWORD *v737 = 14;
                    int v741 = v737 + 1;
                  }
                  unsigned __int8 *v738 = v741;
                  if (!*v14)
                  {
LABEL_3986:
                    if ((*((unsigned char *)__p + 1) & 0x80) == 0) {
                      goto LABEL_3987;
                    }
                    uint64_t v925 = *v12 + 24 * v13;
                    v927 = (_DWORD **)(v925 + 8);
                    double v926 = *(_DWORD **)(v925 + 8);
                    double v929 = (void *)(v925 + 16);
                    unint64_t v928 = *(void *)(v925 + 16);
                    if ((unint64_t)v926 >= v928)
                    {
                      v931 = *(_DWORD **)v925;
                      uint64_t v932 = ((uint64_t)v926 - *(void *)v925) >> 2;
                      unint64_t v933 = v932 + 1;
                      if ((unint64_t)(v932 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v934 = v928 - (void)v931;
                      if (v934 >> 1 > v933) {
                        unint64_t v933 = v934 >> 1;
                      }
                      if ((unint64_t)v934 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v935 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v935 = v933;
                      }
                      if (v935)
                      {
                        unsigned int v936 = (char *)sub_458C8((uint64_t)v929, v935);
                        double v926 = *v927;
                        v931 = *(_DWORD **)v925;
                      }
                      else
                      {
                        unsigned int v936 = 0;
                      }
                      v1098 = &v936[4 * v932];
                      *(_DWORD *)v1098 = 15;
                      unsigned int v930 = v1098 + 4;
                      while (v926 != v931)
                      {
                        int v1099 = *--v926;
                        *((_DWORD *)v1098 - 1) = v1099;
                        v1098 -= 4;
                      }
                      *(void *)uint64_t v925 = v1098;
                      double *v927 = v930;
                      *double v929 = &v936[4 * v935];
                      if (v931) {
                        operator delete(v931);
                      }
                    }
                    else
                    {
                      _DWORD *v926 = 15;
                      unsigned int v930 = v926 + 1;
                    }
                    double *v927 = v930;
                    if (!*v14)
                    {
LABEL_3987:
                      if ((*((unsigned char *)__p + 2) & 1) == 0) {
                        goto LABEL_3988;
                      }
                      uint64_t v1100 = *v12 + 24 * v13;
                      double v1102 = (_DWORD **)(v1100 + 8);
                      double v1101 = *(_DWORD **)(v1100 + 8);
                      v1104 = (void *)(v1100 + 16);
                      unint64_t v1103 = *(void *)(v1100 + 16);
                      if ((unint64_t)v1101 >= v1103)
                      {
                        unsigned int v1106 = *(_DWORD **)v1100;
                        uint64_t v1107 = ((uint64_t)v1101 - *(void *)v1100) >> 2;
                        unint64_t v1108 = v1107 + 1;
                        if ((unint64_t)(v1107 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1109 = v1103 - (void)v1106;
                        if (v1109 >> 1 > v1108) {
                          unint64_t v1108 = v1109 >> 1;
                        }
                        if ((unint64_t)v1109 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1110 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1110 = v1108;
                        }
                        if (v1110)
                        {
                          v1111 = (char *)sub_458C8((uint64_t)v1104, v1110);
                          double v1101 = *v1102;
                          unsigned int v1106 = *(_DWORD **)v1100;
                        }
                        else
                        {
                          v1111 = 0;
                        }
                        v1271 = &v1111[4 * v1107];
                        *(_DWORD *)v1271 = 16;
                        v1105 = v1271 + 4;
                        while (v1101 != v1106)
                        {
                          int v1272 = *--v1101;
                          *((_DWORD *)v1271 - 1) = v1272;
                          v1271 -= 4;
                        }
                        *(void *)uint64_t v1100 = v1271;
                        *double v1102 = v1105;
                        void *v1104 = &v1111[4 * v1110];
                        if (v1106) {
                          operator delete(v1106);
                        }
                      }
                      else
                      {
                        *double v1101 = 16;
                        v1105 = v1101 + 1;
                      }
                      *double v1102 = v1105;
                      if (!*v14)
                      {
LABEL_3988:
                        if ((*((unsigned char *)__p + 2) & 2) == 0) {
                          goto LABEL_3989;
                        }
                        uint64_t v1273 = *v12 + 24 * v13;
                        unint64_t v1275 = (_DWORD **)(v1273 + 8);
                        double v1274 = *(_DWORD **)(v1273 + 8);
                        v1277 = (void *)(v1273 + 16);
                        unint64_t v1276 = *(void *)(v1273 + 16);
                        if ((unint64_t)v1274 >= v1276)
                        {
                          v1279 = *(_DWORD **)v1273;
                          uint64_t v1280 = ((uint64_t)v1274 - *(void *)v1273) >> 2;
                          unint64_t v1281 = v1280 + 1;
                          if ((unint64_t)(v1280 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1282 = v1276 - (void)v1279;
                          if (v1282 >> 1 > v1281) {
                            unint64_t v1281 = v1282 >> 1;
                          }
                          if ((unint64_t)v1282 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1283 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1283 = v1281;
                          }
                          if (v1283)
                          {
                            v1284 = (char *)sub_458C8((uint64_t)v1277, v1283);
                            double v1274 = *v1275;
                            v1279 = *(_DWORD **)v1273;
                          }
                          else
                          {
                            v1284 = 0;
                          }
                          double v1420 = &v1284[4 * v1280];
                          *(_DWORD *)double v1420 = 17;
                          v1278 = v1420 + 4;
                          while (v1274 != v1279)
                          {
                            int v1421 = *--v1274;
                            *((_DWORD *)v1420 - 1) = v1421;
                            v1420 -= 4;
                          }
                          *(void *)uint64_t v1273 = v1420;
                          *unint64_t v1275 = v1278;
                          void *v1277 = &v1284[4 * v1283];
                          if (v1279) {
                            operator delete(v1279);
                          }
                        }
                        else
                        {
                          *double v1274 = 17;
                          v1278 = v1274 + 1;
                        }
                        *unint64_t v1275 = v1278;
                        if (!*v14)
                        {
LABEL_3989:
                          if ((*((unsigned char *)__p + 2) & 4) == 0) {
                            goto LABEL_3990;
                          }
                          uint64_t v1422 = *v12 + 24 * v13;
                          double v1424 = (_DWORD **)(v1422 + 8);
                          v1423 = *(_DWORD **)(v1422 + 8);
                          double v1426 = (void *)(v1422 + 16);
                          unint64_t v1425 = *(void *)(v1422 + 16);
                          if ((unint64_t)v1423 >= v1425)
                          {
                            v1428 = *(_DWORD **)v1422;
                            uint64_t v1429 = ((uint64_t)v1423 - *(void *)v1422) >> 2;
                            unint64_t v1430 = v1429 + 1;
                            if ((unint64_t)(v1429 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1431 = v1425 - (void)v1428;
                            if (v1431 >> 1 > v1430) {
                              unint64_t v1430 = v1431 >> 1;
                            }
                            if ((unint64_t)v1431 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1432 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1432 = v1430;
                            }
                            if (v1432)
                            {
                              v1433 = (char *)sub_458C8((uint64_t)v1426, v1432);
                              v1423 = *v1424;
                              v1428 = *(_DWORD **)v1422;
                            }
                            else
                            {
                              v1433 = 0;
                            }
                            v1560 = &v1433[4 * v1429];
                            *(_DWORD *)v1560 = 18;
                            v1427 = v1560 + 4;
                            while (v1423 != v1428)
                            {
                              int v1561 = *--v1423;
                              *((_DWORD *)v1560 - 1) = v1561;
                              v1560 -= 4;
                            }
                            *(void *)uint64_t v1422 = v1560;
                            *double v1424 = v1427;
                            *double v1426 = &v1433[4 * v1432];
                            if (v1428) {
                              operator delete(v1428);
                            }
                          }
                          else
                          {
                            _DWORD *v1423 = 18;
                            v1427 = v1423 + 1;
                          }
                          *double v1424 = v1427;
                          if (!*v14)
                          {
LABEL_3990:
                            if ((*((unsigned char *)__p + 2) & 8) == 0) {
                              goto LABEL_3991;
                            }
                            uint64_t v1562 = *v12 + 24 * v13;
                            double v1564 = (_DWORD **)(v1562 + 8);
                            unsigned int v1563 = *(_DWORD **)(v1562 + 8);
                            v1566 = (void *)(v1562 + 16);
                            unint64_t v1565 = *(void *)(v1562 + 16);
                            if ((unint64_t)v1563 >= v1565)
                            {
                              unsigned int v1568 = *(_DWORD **)v1562;
                              uint64_t v1569 = ((uint64_t)v1563 - *(void *)v1562) >> 2;
                              unint64_t v1570 = v1569 + 1;
                              if ((unint64_t)(v1569 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1571 = v1565 - (void)v1568;
                              if (v1571 >> 1 > v1570) {
                                unint64_t v1570 = v1571 >> 1;
                              }
                              if ((unint64_t)v1571 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1572 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1572 = v1570;
                              }
                              if (v1572)
                              {
                                v1573 = (char *)sub_458C8((uint64_t)v1566, v1572);
                                unsigned int v1563 = *v1564;
                                unsigned int v1568 = *(_DWORD **)v1562;
                              }
                              else
                              {
                                v1573 = 0;
                              }
                              double v1693 = &v1573[4 * v1569];
                              *(_DWORD *)double v1693 = 19;
                              v1567 = v1693 + 4;
                              while (v1563 != v1568)
                              {
                                int v1694 = *--v1563;
                                *((_DWORD *)v1693 - 1) = v1694;
                                v1693 -= 4;
                              }
                              *(void *)uint64_t v1562 = v1693;
                              *double v1564 = v1567;
                              void *v1566 = &v1573[4 * v1572];
                              if (v1568) {
                                operator delete(v1568);
                              }
                            }
                            else
                            {
                              *unsigned int v1563 = 19;
                              v1567 = v1563 + 1;
                            }
                            *double v1564 = v1567;
                            if (!*v14)
                            {
LABEL_3991:
                              if ((*((unsigned char *)__p + 2) & 0x10) == 0) {
                                goto LABEL_3992;
                              }
                              uint64_t v1695 = *v12 + 24 * v13;
                              v1697 = (_DWORD **)(v1695 + 8);
                              v1696 = *(_DWORD **)(v1695 + 8);
                              unsigned int v1699 = (void *)(v1695 + 16);
                              unint64_t v1698 = *(void *)(v1695 + 16);
                              if ((unint64_t)v1696 >= v1698)
                              {
                                v1701 = *(_DWORD **)v1695;
                                uint64_t v1702 = ((uint64_t)v1696 - *(void *)v1695) >> 2;
                                unint64_t v1703 = v1702 + 1;
                                if ((unint64_t)(v1702 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1704 = v1698 - (void)v1701;
                                if (v1704 >> 1 > v1703) {
                                  unint64_t v1703 = v1704 >> 1;
                                }
                                if ((unint64_t)v1704 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1705 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1705 = v1703;
                                }
                                if (v1705)
                                {
                                  v1706 = (char *)sub_458C8((uint64_t)v1699, v1705);
                                  v1696 = *v1697;
                                  v1701 = *(_DWORD **)v1695;
                                }
                                else
                                {
                                  v1706 = 0;
                                }
                                int v1812 = &v1706[4 * v1702];
                                *(_DWORD *)int v1812 = 20;
                                v1700 = v1812 + 4;
                                while (v1696 != v1701)
                                {
                                  int v1813 = *--v1696;
                                  *((_DWORD *)v1812 - 1) = v1813;
                                  v1812 -= 4;
                                }
                                *(void *)uint64_t v1695 = v1812;
                                BOOL *v1697 = v1700;
                                *unsigned int v1699 = &v1706[4 * v1705];
                                if (v1701) {
                                  operator delete(v1701);
                                }
                              }
                              else
                              {
                                _DWORD *v1696 = 20;
                                v1700 = v1696 + 1;
                              }
                              BOOL *v1697 = v1700;
                              if (!*v14)
                              {
LABEL_3992:
                                if ((*((unsigned char *)__p + 2) & 0x20) == 0) {
                                  goto LABEL_3993;
                                }
                                uint64_t v1814 = *v12 + 24 * v13;
                                v1816 = (_DWORD **)(v1814 + 8);
                                v1815 = *(_DWORD **)(v1814 + 8);
                                uint64_t v1818 = (void *)(v1814 + 16);
                                unint64_t v1817 = *(void *)(v1814 + 16);
                                if ((unint64_t)v1815 >= v1817)
                                {
                                  uint64_t v1820 = *(_DWORD **)v1814;
                                  uint64_t v1821 = ((uint64_t)v1815 - *(void *)v1814) >> 2;
                                  unint64_t v1822 = v1821 + 1;
                                  if ((unint64_t)(v1821 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1823 = v1817 - (void)v1820;
                                  if (v1823 >> 1 > v1822) {
                                    unint64_t v1822 = v1823 >> 1;
                                  }
                                  if ((unint64_t)v1823 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1824 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1824 = v1822;
                                  }
                                  if (v1824)
                                  {
                                    unsigned int v1825 = (char *)sub_458C8((uint64_t)v1818, v1824);
                                    v1815 = *v1816;
                                    uint64_t v1820 = *(_DWORD **)v1814;
                                  }
                                  else
                                  {
                                    unsigned int v1825 = 0;
                                  }
                                  unint64_t v1914 = &v1825[4 * v1821];
                                  *(_DWORD *)unint64_t v1914 = 21;
                                  uint64_t v1819 = v1914 + 4;
                                  while (v1815 != v1820)
                                  {
                                    int v1915 = *--v1815;
                                    *((_DWORD *)v1914 - 1) = v1915;
                                    v1914 -= 4;
                                  }
                                  *(void *)uint64_t v1814 = v1914;
                                  uint64_t *v1816 = v1819;
                                  *uint64_t v1818 = &v1825[4 * v1824];
                                  if (v1820) {
                                    operator delete(v1820);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1815 = 21;
                                  uint64_t v1819 = v1815 + 1;
                                }
                                uint64_t *v1816 = v1819;
                                if (!*v14)
                                {
LABEL_3993:
                                  if ((*((unsigned char *)__p + 2) & 0x40) != 0)
                                  {
                                    uint64_t v1723 = *v12 + 24 * v13;
                                    unint64_t v1725 = (int **)(v1723 + 8);
                                    double v1724 = *(int **)(v1723 + 8);
                                    v1727 = (void *)(v1723 + 16);
                                    unint64_t v1916 = *(void *)(v1723 + 16);
                                    if ((unint64_t)v1724 < v1916)
                                    {
                                      int v1728 = 22;
                                      goto LABEL_2504;
                                    }
                                    v1729 = *(int **)v1723;
                                    uint64_t v1917 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                    unint64_t v1918 = v1917 + 1;
                                    if ((unint64_t)(v1917 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1919 = v1916 - (void)v1729;
                                    if (v1919 >> 1 > v1918) {
                                      unint64_t v1918 = v1919 >> 1;
                                    }
                                    if ((unint64_t)v1919 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1733 = v1918;
                                    }
                                    if (v1733)
                                    {
                                      v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                      double v1724 = *v1725;
                                      v1729 = *(int **)v1723;
                                    }
                                    else
                                    {
                                      v1734 = 0;
                                    }
                                    v1840 = &v1734[4 * v1917];
                                    *(_DWORD *)v1840 = 22;
                                    v1841 = (int *)(v1840 + 4);
                                    while (v1724 != v1729)
                                    {
                                      int v2004 = *--v1724;
                                      *((_DWORD *)v1840 - 1) = v2004;
                                      v1840 -= 4;
                                    }
                                    goto LABEL_3716;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 4:
          if (!*v14)
          {
            if ((*(unsigned char *)__p & 1) == 0) {
              goto LABEL_248;
            }
            uint64_t v33 = *v12 + 24 * v13;
            int v35 = (_DWORD **)(v33 + 8);
            uint64_t v34 = *(_DWORD **)(v33 + 8);
            int v37 = (void *)(v33 + 16);
            unint64_t v36 = *(void *)(v33 + 16);
            if ((unint64_t)v34 >= v36)
            {
              uint64_t v123 = *(_DWORD **)v33;
              uint64_t v124 = ((uint64_t)v34 - *(void *)v33) >> 2;
              unint64_t v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v126 = v36 - (void)v123;
              if (v126 >> 1 > v125) {
                unint64_t v125 = v126 >> 1;
              }
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v125;
              }
              if (v127)
              {
                uint64_t v128 = (char *)sub_458C8((uint64_t)v37, v127);
                uint64_t v34 = *v35;
                uint64_t v123 = *(_DWORD **)v33;
              }
              else
              {
                uint64_t v128 = 0;
              }
              unint64_t v235 = &v128[4 * v124];
              *(_DWORD *)unint64_t v235 = 0;
              unint64_t v38 = v235 + 4;
              while (v34 != v123)
              {
                int v236 = *--v34;
                *((_DWORD *)v235 - 1) = v236;
                v235 -= 4;
              }
              *(void *)uint64_t v33 = v235;
              unsigned char *v35 = v38;
              *int v37 = &v128[4 * v127];
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              _DWORD *v34 = 0;
              unint64_t v38 = v34 + 1;
            }
            unsigned char *v35 = v38;
            if (!*v14)
            {
LABEL_248:
              if ((*(unsigned char *)__p & 2) == 0) {
                goto LABEL_2309;
              }
              uint64_t v237 = *v12 + 24 * v13;
              unint64_t v239 = (_DWORD **)(v237 + 8);
              uint64_t v238 = *(_DWORD **)(v237 + 8);
              unint64_t v241 = (void *)(v237 + 16);
              unint64_t v240 = *(void *)(v237 + 16);
              if ((unint64_t)v238 >= v240)
              {
                double v243 = *(_DWORD **)v237;
                uint64_t v244 = ((uint64_t)v238 - *(void *)v237) >> 2;
                unint64_t v245 = v244 + 1;
                if ((unint64_t)(v244 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v246 = v240 - (void)v243;
                if (v246 >> 1 > v245) {
                  unint64_t v245 = v246 >> 1;
                }
                if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v247 = v245;
                }
                if (v247)
                {
                  unint64_t v248 = (char *)sub_458C8((uint64_t)v241, v247);
                  uint64_t v238 = *v239;
                  double v243 = *(_DWORD **)v237;
                }
                else
                {
                  unint64_t v248 = 0;
                }
                double v460 = &v248[4 * v244];
                *(_DWORD *)double v460 = 1;
                double v242 = v460 + 4;
                while (v238 != v243)
                {
                  int v461 = *--v238;
                  *((_DWORD *)v460 - 1) = v461;
                  v460 -= 4;
                }
                *(void *)uint64_t v237 = v460;
                *unint64_t v239 = v242;
                *unint64_t v241 = &v248[4 * v247];
                if (v243) {
                  operator delete(v243);
                }
              }
              else
              {
                _DWORD *v238 = 1;
                double v242 = v238 + 1;
              }
              *unint64_t v239 = v242;
              if (!*v14)
              {
LABEL_2309:
                if ((*(unsigned char *)__p & 4) == 0) {
                  goto LABEL_3994;
                }
                uint64_t v462 = *v12 + 24 * v13;
                uint64_t v464 = (_DWORD **)(v462 + 8);
                uint64_t v463 = *(_DWORD **)(v462 + 8);
                uint64_t v466 = (void *)(v462 + 16);
                unint64_t v465 = *(void *)(v462 + 16);
                if ((unint64_t)v463 >= v465)
                {
                  long long v468 = *(_DWORD **)v462;
                  uint64_t v469 = ((uint64_t)v463 - *(void *)v462) >> 2;
                  unint64_t v470 = v469 + 1;
                  if ((unint64_t)(v469 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v471 = v465 - (void)v468;
                  if (v471 >> 1 > v470) {
                    unint64_t v470 = v471 >> 1;
                  }
                  if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v472 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v472 = v470;
                  }
                  if (v472)
                  {
                    uint64_t v473 = (char *)sub_458C8((uint64_t)v466, v472);
                    uint64_t v463 = *v464;
                    long long v468 = *(_DWORD **)v462;
                  }
                  else
                  {
                    uint64_t v473 = 0;
                  }
                  v664 = &v473[4 * v469];
                  *(_DWORD *)v664 = 2;
                  long long v467 = v664 + 4;
                  while (v463 != v468)
                  {
                    int v665 = *--v463;
                    *((_DWORD *)v664 - 1) = v665;
                    v664 -= 4;
                  }
                  *(void *)uint64_t v462 = v664;
                  *uint64_t v464 = v467;
                  *uint64_t v466 = &v473[4 * v472];
                  if (v468) {
                    operator delete(v468);
                  }
                }
                else
                {
                  _DWORD *v463 = 2;
                  long long v467 = v463 + 1;
                }
                *uint64_t v464 = v467;
                if (!*v14)
                {
LABEL_3994:
                  if ((*(unsigned char *)__p & 8) == 0) {
                    goto LABEL_3995;
                  }
                  uint64_t v666 = *v12 + 24 * v13;
                  unint64_t v668 = (_DWORD **)(v666 + 8);
                  int v667 = *(_DWORD **)(v666 + 8);
                  double v670 = (void *)(v666 + 16);
                  unint64_t v669 = *(void *)(v666 + 16);
                  if ((unint64_t)v667 >= v669)
                  {
                    uint64_t v672 = *(_DWORD **)v666;
                    uint64_t v673 = ((uint64_t)v667 - *(void *)v666) >> 2;
                    unint64_t v674 = v673 + 1;
                    if ((unint64_t)(v673 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v675 = v669 - (void)v672;
                    if (v675 >> 1 > v674) {
                      unint64_t v674 = v675 >> 1;
                    }
                    if ((unint64_t)v675 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v676 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v676 = v674;
                    }
                    if (v676)
                    {
                      int v677 = (char *)sub_458C8((uint64_t)v670, v676);
                      int v667 = *v668;
                      uint64_t v672 = *(_DWORD **)v666;
                    }
                    else
                    {
                      int v677 = 0;
                    }
                    unsigned int v853 = &v677[4 * v673];
                    *(_DWORD *)unsigned int v853 = 3;
                    double v671 = v853 + 4;
                    while (v667 != v672)
                    {
                      int v854 = *--v667;
                      *((_DWORD *)v853 - 1) = v854;
                      v853 -= 4;
                    }
                    *(void *)uint64_t v666 = v853;
                    double *v668 = v671;
                    void *v670 = &v677[4 * v676];
                    if (v672) {
                      operator delete(v672);
                    }
                  }
                  else
                  {
                    *int v667 = 3;
                    double v671 = v667 + 1;
                  }
                  double *v668 = v671;
                  if (!*v14)
                  {
LABEL_3995:
                    if ((*(unsigned char *)__p & 0x10) == 0) {
                      goto LABEL_3996;
                    }
                    uint64_t v855 = *v12 + 24 * v13;
                    unsigned int v857 = (_DWORD **)(v855 + 8);
                    v856 = *(_DWORD **)(v855 + 8);
                    unsigned int v859 = (void *)(v855 + 16);
                    unint64_t v858 = *(void *)(v855 + 16);
                    if ((unint64_t)v856 >= v858)
                    {
                      v861 = *(_DWORD **)v855;
                      uint64_t v862 = ((uint64_t)v856 - *(void *)v855) >> 2;
                      unint64_t v863 = v862 + 1;
                      if ((unint64_t)(v862 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v864 = v858 - (void)v861;
                      if (v864 >> 1 > v863) {
                        unint64_t v863 = v864 >> 1;
                      }
                      if ((unint64_t)v864 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v865 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v865 = v863;
                      }
                      if (v865)
                      {
                        unsigned int v866 = (char *)sub_458C8((uint64_t)v859, v865);
                        v856 = *v857;
                        v861 = *(_DWORD **)v855;
                      }
                      else
                      {
                        unsigned int v866 = 0;
                      }
                      unsigned int v1028 = &v866[4 * v862];
                      *(_DWORD *)unsigned int v1028 = 4;
                      unsigned int v860 = v1028 + 4;
                      while (v856 != v861)
                      {
                        int v1029 = *--v856;
                        *((_DWORD *)v1028 - 1) = v1029;
                        v1028 -= 4;
                      }
                      *(void *)uint64_t v855 = v1028;
                      BOOL *v857 = v860;
                      *unsigned int v859 = &v866[4 * v865];
                      if (v861) {
                        operator delete(v861);
                      }
                    }
                    else
                    {
                      _DWORD *v856 = 4;
                      unsigned int v860 = v856 + 1;
                    }
                    BOOL *v857 = v860;
                    if (!*v14)
                    {
LABEL_3996:
                      if ((*(unsigned char *)__p & 0x20) == 0) {
                        goto LABEL_3997;
                      }
                      uint64_t v1030 = *v12 + 24 * v13;
                      double v1032 = (_DWORD **)(v1030 + 8);
                      unint64_t v1031 = *(_DWORD **)(v1030 + 8);
                      unsigned int v1034 = (void *)(v1030 + 16);
                      unint64_t v1033 = *(void *)(v1030 + 16);
                      if ((unint64_t)v1031 >= v1033)
                      {
                        double v1036 = *(_DWORD **)v1030;
                        uint64_t v1037 = ((uint64_t)v1031 - *(void *)v1030) >> 2;
                        unint64_t v1038 = v1037 + 1;
                        if ((unint64_t)(v1037 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1039 = v1033 - (void)v1036;
                        if (v1039 >> 1 > v1038) {
                          unint64_t v1038 = v1039 >> 1;
                        }
                        if ((unint64_t)v1039 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1040 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1040 = v1038;
                        }
                        if (v1040)
                        {
                          v1041 = (char *)sub_458C8((uint64_t)v1034, v1040);
                          unint64_t v1031 = *v1032;
                          double v1036 = *(_DWORD **)v1030;
                        }
                        else
                        {
                          v1041 = 0;
                        }
                        double v1201 = &v1041[4 * v1037];
                        *(_DWORD *)double v1201 = 5;
                        v1035 = v1201 + 4;
                        while (v1031 != v1036)
                        {
                          int v1202 = *--v1031;
                          *((_DWORD *)v1201 - 1) = v1202;
                          v1201 -= 4;
                        }
                        *(void *)uint64_t v1030 = v1201;
                        *double v1032 = v1035;
                        void *v1034 = &v1041[4 * v1040];
                        if (v1036) {
                          operator delete(v1036);
                        }
                      }
                      else
                      {
                        *unint64_t v1031 = 5;
                        v1035 = v1031 + 1;
                      }
                      *double v1032 = v1035;
                      if (!*v14)
                      {
LABEL_3997:
                        if ((*(unsigned char *)__p & 0x40) == 0) {
                          goto LABEL_3998;
                        }
                        uint64_t v1203 = *v12 + 24 * v13;
                        v1205 = (_DWORD **)(v1203 + 8);
                        v1204 = *(_DWORD **)(v1203 + 8);
                        double v1207 = (void *)(v1203 + 16);
                        unint64_t v1206 = *(void *)(v1203 + 16);
                        if ((unint64_t)v1204 >= v1206)
                        {
                          double v1209 = *(_DWORD **)v1203;
                          uint64_t v1210 = ((uint64_t)v1204 - *(void *)v1203) >> 2;
                          unint64_t v1211 = v1210 + 1;
                          if ((unint64_t)(v1210 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1212 = v1206 - (void)v1209;
                          if (v1212 >> 1 > v1211) {
                            unint64_t v1211 = v1212 >> 1;
                          }
                          if ((unint64_t)v1212 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1213 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1213 = v1211;
                          }
                          if (v1213)
                          {
                            double v1214 = (char *)sub_458C8((uint64_t)v1207, v1213);
                            v1204 = *v1205;
                            double v1209 = *(_DWORD **)v1203;
                          }
                          else
                          {
                            double v1214 = 0;
                          }
                          v1358 = &v1214[4 * v1210];
                          *(_DWORD *)v1358 = 6;
                          unint64_t v1208 = v1358 + 4;
                          while (v1204 != v1209)
                          {
                            int v1359 = *--v1204;
                            *((_DWORD *)v1358 - 1) = v1359;
                            v1358 -= 4;
                          }
                          *(void *)uint64_t v1203 = v1358;
                          double *v1205 = v1208;
                          *double v1207 = &v1214[4 * v1213];
                          if (v1209) {
                            operator delete(v1209);
                          }
                        }
                        else
                        {
                          _DWORD *v1204 = 6;
                          unint64_t v1208 = v1204 + 1;
                        }
                        double *v1205 = v1208;
                        if (!*v14)
                        {
LABEL_3998:
                          if ((*(unsigned char *)__p & 0x80) == 0) {
                            goto LABEL_3999;
                          }
                          uint64_t v1360 = *v12 + 24 * v13;
                          unsigned int v1362 = (_DWORD **)(v1360 + 8);
                          unsigned int v1361 = *(_DWORD **)(v1360 + 8);
                          double v1364 = (void *)(v1360 + 16);
                          unint64_t v1363 = *(void *)(v1360 + 16);
                          if ((unint64_t)v1361 >= v1363)
                          {
                            v1366 = *(_DWORD **)v1360;
                            uint64_t v1367 = ((uint64_t)v1361 - *(void *)v1360) >> 2;
                            unint64_t v1368 = v1367 + 1;
                            if ((unint64_t)(v1367 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1369 = v1363 - (void)v1366;
                            if (v1369 >> 1 > v1368) {
                              unint64_t v1368 = v1369 >> 1;
                            }
                            if ((unint64_t)v1369 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1370 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1370 = v1368;
                            }
                            if (v1370)
                            {
                              double v1371 = (char *)sub_458C8((uint64_t)v1364, v1370);
                              unsigned int v1361 = *v1362;
                              v1366 = *(_DWORD **)v1360;
                            }
                            else
                            {
                              double v1371 = 0;
                            }
                            double v1504 = &v1371[4 * v1367];
                            *(_DWORD *)double v1504 = 7;
                            v1365 = v1504 + 4;
                            while (v1361 != v1366)
                            {
                              int v1505 = *--v1361;
                              *((_DWORD *)v1504 - 1) = v1505;
                              v1504 -= 4;
                            }
                            *(void *)uint64_t v1360 = v1504;
                            *unsigned int v1362 = v1365;
                            *double v1364 = &v1371[4 * v1370];
                            if (v1366) {
                              operator delete(v1366);
                            }
                          }
                          else
                          {
                            *unsigned int v1361 = 7;
                            v1365 = v1361 + 1;
                          }
                          *unsigned int v1362 = v1365;
                          if (!*v14)
                          {
LABEL_3999:
                            if ((*((unsigned char *)__p + 1) & 1) == 0) {
                              goto LABEL_4000;
                            }
                            uint64_t v1506 = *v12 + 24 * v13;
                            unsigned int v1508 = (_DWORD **)(v1506 + 8);
                            v1507 = *(_DWORD **)(v1506 + 8);
                            double v1510 = (void *)(v1506 + 16);
                            unint64_t v1509 = *(void *)(v1506 + 16);
                            if ((unint64_t)v1507 >= v1509)
                            {
                              v1512 = *(_DWORD **)v1506;
                              uint64_t v1513 = ((uint64_t)v1507 - *(void *)v1506) >> 2;
                              unint64_t v1514 = v1513 + 1;
                              if ((unint64_t)(v1513 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1515 = v1509 - (void)v1512;
                              if (v1515 >> 1 > v1514) {
                                unint64_t v1514 = v1515 >> 1;
                              }
                              if ((unint64_t)v1515 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1516 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1516 = v1514;
                              }
                              if (v1516)
                              {
                                v1517 = (char *)sub_458C8((uint64_t)v1510, v1516);
                                v1507 = *v1508;
                                v1512 = *(_DWORD **)v1506;
                              }
                              else
                              {
                                v1517 = 0;
                              }
                              v1645 = &v1517[4 * v1513];
                              *(_DWORD *)v1645 = 8;
                              v1511 = v1645 + 4;
                              while (v1507 != v1512)
                              {
                                int v1646 = *--v1507;
                                *((_DWORD *)v1645 - 1) = v1646;
                                v1645 -= 4;
                              }
                              *(void *)uint64_t v1506 = v1645;
                              *unsigned int v1508 = v1511;
                              *double v1510 = &v1517[4 * v1516];
                              if (v1512) {
                                operator delete(v1512);
                              }
                            }
                            else
                            {
                              _DWORD *v1507 = 8;
                              v1511 = v1507 + 1;
                            }
                            *unsigned int v1508 = v1511;
                            if (!*v14)
                            {
LABEL_4000:
                              if ((*((unsigned char *)__p + 1) & 2) == 0) {
                                goto LABEL_4001;
                              }
                              uint64_t v1647 = *v12 + 24 * v13;
                              v1649 = (_DWORD **)(v1647 + 8);
                              v1648 = *(_DWORD **)(v1647 + 8);
                              double v1651 = (void *)(v1647 + 16);
                              unint64_t v1650 = *(void *)(v1647 + 16);
                              if ((unint64_t)v1648 >= v1650)
                              {
                                v1653 = *(_DWORD **)v1647;
                                uint64_t v1654 = ((uint64_t)v1648 - *(void *)v1647) >> 2;
                                unint64_t v1655 = v1654 + 1;
                                if ((unint64_t)(v1654 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1656 = v1650 - (void)v1653;
                                if (v1656 >> 1 > v1655) {
                                  unint64_t v1655 = v1656 >> 1;
                                }
                                if ((unint64_t)v1656 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1657 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1657 = v1655;
                                }
                                if (v1657)
                                {
                                  v1658 = (char *)sub_458C8((uint64_t)v1651, v1657);
                                  v1648 = *v1649;
                                  v1653 = *(_DWORD **)v1647;
                                }
                                else
                                {
                                  v1658 = 0;
                                }
                                int v1777 = &v1658[4 * v1654];
                                *(_DWORD *)int v1777 = 9;
                                unint64_t v1652 = v1777 + 4;
                                while (v1648 != v1653)
                                {
                                  int v1778 = *--v1648;
                                  *((_DWORD *)v1777 - 1) = v1778;
                                  v1777 -= 4;
                                }
                                *(void *)uint64_t v1647 = v1777;
                                unsigned __int8 *v1649 = v1652;
                                *double v1651 = &v1658[4 * v1657];
                                if (v1653) {
                                  operator delete(v1653);
                                }
                              }
                              else
                              {
                                _DWORD *v1648 = 9;
                                unint64_t v1652 = v1648 + 1;
                              }
                              unsigned __int8 *v1649 = v1652;
                              if (!*v14)
                              {
LABEL_4001:
                                if ((*((unsigned char *)__p + 1) & 4) != 0)
                                {
                                  uint64_t v1723 = *v12 + 24 * v13;
                                  unint64_t v1725 = (int **)(v1723 + 8);
                                  double v1724 = *(int **)(v1723 + 8);
                                  v1727 = (void *)(v1723 + 16);
                                  unint64_t v1779 = *(void *)(v1723 + 16);
                                  if ((unint64_t)v1724 >= v1779)
                                  {
                                    v1729 = *(int **)v1723;
                                    uint64_t v1780 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                    unint64_t v1781 = v1780 + 1;
                                    if ((unint64_t)(v1780 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1782 = v1779 - (void)v1729;
                                    if (v1782 >> 1 > v1781) {
                                      unint64_t v1781 = v1782 >> 1;
                                    }
                                    if ((unint64_t)v1782 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1733 = v1781;
                                    }
                                    if (v1733)
                                    {
                                      v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                      double v1724 = *v1725;
                                      v1729 = *(int **)v1723;
                                    }
                                    else
                                    {
                                      v1734 = 0;
                                    }
                                    v1840 = &v1734[4 * v1780];
                                    *(_DWORD *)v1840 = 10;
                                    v1841 = (int *)(v1840 + 4);
                                    while (v1724 != v1729)
                                    {
                                      int v1885 = *--v1724;
                                      *((_DWORD *)v1840 - 1) = v1885;
                                      v1840 -= 4;
                                    }
LABEL_3716:
                                    *(void *)uint64_t v1723 = v1840;
                                    *unint64_t v1725 = v1841;
                                    void *v1727 = &v1734[4 * v1733];
                                    if (v1729) {
                                      operator delete(v1729);
                                    }
                                  }
                                  else
                                  {
                                    int v1728 = 10;
LABEL_2504:
                                    *double v1724 = v1728;
                                    v1841 = v1724 + 1;
                                  }
                                  *unint64_t v1725 = v1841;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 5:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 25) & 8) == 0) {
              goto LABEL_410;
            }
            uint64_t v81 = *v12 + 24 * v13;
            BOOL v83 = (_DWORD **)(v81 + 8);
            unsigned int v82 = *(_DWORD **)(v81 + 8);
            char v85 = (void *)(v81 + 16);
            unint64_t v84 = *(void *)(v81 + 16);
            if ((unint64_t)v82 >= v84)
            {
              uint64_t v177 = *(_DWORD **)v81;
              uint64_t v178 = ((uint64_t)v82 - *(void *)v81) >> 2;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v180 = v84 - (void)v177;
              if (v180 >> 1 > v179) {
                unint64_t v179 = v180 >> 1;
              }
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v179;
              }
              if (v181)
              {
                uint64_t v182 = (char *)sub_458C8((uint64_t)v85, v181);
                unsigned int v82 = *v83;
                uint64_t v177 = *(_DWORD **)v81;
              }
              else
              {
                uint64_t v182 = 0;
              }
              uint64_t v361 = &v182[4 * v178];
              *(_DWORD *)uint64_t v361 = 203;
              unsigned int v86 = v361 + 4;
              while (v82 != v177)
              {
                int v362 = *--v82;
                *((_DWORD *)v361 - 1) = v362;
                v361 -= 4;
              }
              *(void *)uint64_t v81 = v361;
              *BOOL v83 = v86;
              *char v85 = &v182[4 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              _DWORD *v82 = 203;
              unsigned int v86 = v82 + 1;
            }
            *BOOL v83 = v86;
            if (!*v14)
            {
LABEL_410:
              if ((*((unsigned char *)__p + 25) & 0x10) == 0) {
                goto LABEL_973;
              }
              uint64_t v363 = *v12 + 24 * v13;
              uint64_t v365 = (_DWORD **)(v363 + 8);
              unint64_t v364 = *(_DWORD **)(v363 + 8);
              double v367 = (void *)(v363 + 16);
              unint64_t v366 = *(void *)(v363 + 16);
              if ((unint64_t)v364 >= v366)
              {
                unint64_t v369 = *(_DWORD **)v363;
                uint64_t v370 = ((uint64_t)v364 - *(void *)v363) >> 2;
                unint64_t v371 = v370 + 1;
                if ((unint64_t)(v370 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v372 = v366 - (void)v369;
                if (v372 >> 1 > v371) {
                  unint64_t v371 = v372 >> 1;
                }
                if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v373 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v373 = v371;
                }
                if (v373)
                {
                  unint64_t v374 = (char *)sub_458C8((uint64_t)v367, v373);
                  unint64_t v364 = *v365;
                  unint64_t v369 = *(_DWORD **)v363;
                }
                else
                {
                  unint64_t v374 = 0;
                }
                uint64_t v586 = &v374[4 * v370];
                *(_DWORD *)uint64_t v586 = 204;
                uint64_t v368 = v586 + 4;
                while (v364 != v369)
                {
                  int v587 = *--v364;
                  *((_DWORD *)v586 - 1) = v587;
                  v586 -= 4;
                }
                *(void *)uint64_t v363 = v586;
                *uint64_t v365 = v368;
                void *v367 = &v374[4 * v373];
                if (v369) {
                  operator delete(v369);
                }
              }
              else
              {
                *unint64_t v364 = 204;
                uint64_t v368 = v364 + 1;
              }
              *uint64_t v365 = v368;
              if (!*v14)
              {
LABEL_973:
                if ((*((unsigned char *)__p + 25) & 0x20) == 0) {
                  goto LABEL_4002;
                }
                uint64_t v588 = *v12 + 24 * v13;
                int v590 = (_DWORD **)(v588 + 8);
                uint64_t v589 = *(_DWORD **)(v588 + 8);
                int v592 = (void *)(v588 + 16);
                unint64_t v591 = *(void *)(v588 + 16);
                if ((unint64_t)v589 >= v591)
                {
                  unsigned int v594 = *(_DWORD **)v588;
                  uint64_t v595 = ((uint64_t)v589 - *(void *)v588) >> 2;
                  unint64_t v596 = v595 + 1;
                  if ((unint64_t)(v595 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v597 = v591 - (void)v594;
                  if (v597 >> 1 > v596) {
                    unint64_t v596 = v597 >> 1;
                  }
                  if ((unint64_t)v597 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v598 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v598 = v596;
                  }
                  if (v598)
                  {
                    double v599 = (char *)sub_458C8((uint64_t)v592, v598);
                    uint64_t v589 = *v590;
                    unsigned int v594 = *(_DWORD **)v588;
                  }
                  else
                  {
                    double v599 = 0;
                  }
                  v790 = &v599[4 * v595];
                  *(_DWORD *)v790 = 205;
                  int v593 = v790 + 4;
                  while (v589 != v594)
                  {
                    int v791 = *--v589;
                    *((_DWORD *)v790 - 1) = v791;
                    v790 -= 4;
                  }
                  *(void *)uint64_t v588 = v790;
                  *int v590 = v593;
                  *int v592 = &v599[4 * v598];
                  if (v594) {
                    operator delete(v594);
                  }
                }
                else
                {
                  _DWORD *v589 = 205;
                  int v593 = v589 + 1;
                }
                *int v590 = v593;
                if (!*v14)
                {
LABEL_4002:
                  if ((*((unsigned char *)__p + 25) & 0x40) != 0)
                  {
                    uint64_t v223 = *v12 + 24 * v13;
                    uint64_t v225 = (int **)(v223 + 8);
                    uint64_t v224 = *(int **)(v223 + 8);
                    uint64_t v227 = (void *)(v223 + 16);
                    unint64_t v792 = *(void *)(v223 + 16);
                    if ((unint64_t)v224 < v792)
                    {
                      int v228 = 206;
                      goto LABEL_2185;
                    }
                    double v229 = *(int **)v223;
                    uint64_t v793 = ((uint64_t)v224 - *(void *)v223) >> 2;
                    unint64_t v794 = v793 + 1;
                    if ((unint64_t)(v793 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v795 = v792 - (void)v229;
                    if (v795 >> 1 > v794) {
                      unint64_t v794 = v795 >> 1;
                    }
                    if ((unint64_t)v795 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v233 = v794;
                    }
                    if (v233)
                    {
                      uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                      uint64_t v224 = *v225;
                      double v229 = *(int **)v223;
                    }
                    else
                    {
                      uint64_t v234 = 0;
                    }
                    uint64_t v457 = &v234[4 * v793];
                    *(_DWORD *)uint64_t v457 = 206;
                    unint64_t v458 = (int *)(v457 + 4);
                    while (v224 != v229)
                    {
                      int v979 = *--v224;
                      *((_DWORD *)v457 - 1) = v979;
                      v457 -= 4;
                    }
                    goto LABEL_3707;
                  }
                }
              }
            }
          }
          break;
        case 6:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 21) & 1) == 0) {
              goto LABEL_446;
            }
            uint64_t v93 = *v12 + 24 * v13;
            uint64_t v95 = (_DWORD **)(v93 + 8);
            unint64_t v94 = *(_DWORD **)(v93 + 8);
            uint64_t v97 = (void *)(v93 + 16);
            unint64_t v96 = *(void *)(v93 + 16);
            if ((unint64_t)v94 >= v96)
            {
              uint64_t v189 = *(_DWORD **)v93;
              uint64_t v190 = ((uint64_t)v94 - *(void *)v93) >> 2;
              unint64_t v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v192 = v96 - (void)v189;
              if (v192 >> 1 > v191) {
                unint64_t v191 = v192 >> 1;
              }
              if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v193 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v191;
              }
              if (v193)
              {
                char v194 = (char *)sub_458C8((uint64_t)v97, v193);
                unint64_t v94 = *v95;
                uint64_t v189 = *(_DWORD **)v93;
              }
              else
              {
                char v194 = 0;
              }
              uint64_t v389 = &v194[4 * v190];
              *(_DWORD *)uint64_t v389 = 168;
              uint64_t v98 = v389 + 4;
              while (v94 != v189)
              {
                int v390 = *--v94;
                *((_DWORD *)v389 - 1) = v390;
                v389 -= 4;
              }
              *(void *)uint64_t v93 = v389;
              *uint64_t v95 = v98;
              *uint64_t v97 = &v194[4 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              _DWORD *v94 = 168;
              uint64_t v98 = v94 + 1;
            }
            *uint64_t v95 = v98;
            if (!*v14)
            {
LABEL_446:
              if ((*((unsigned char *)__p + 21) & 2) == 0) {
                goto LABEL_3144;
              }
              uint64_t v391 = *v12 + 24 * v13;
              char v393 = (_DWORD **)(v391 + 8);
              char v392 = *(_DWORD **)(v391 + 8);
              double v395 = (void *)(v391 + 16);
              unint64_t v394 = *(void *)(v391 + 16);
              if ((unint64_t)v392 >= v394)
              {
                unint64_t v397 = *(_DWORD **)v391;
                uint64_t v398 = ((uint64_t)v392 - *(void *)v391) >> 2;
                unint64_t v399 = v398 + 1;
                if ((unint64_t)(v398 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v400 = v394 - (void)v397;
                if (v400 >> 1 > v399) {
                  unint64_t v399 = v400 >> 1;
                }
                if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v401 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v401 = v399;
                }
                if (v401)
                {
                  int v402 = (char *)sub_458C8((uint64_t)v395, v401);
                  char v392 = *v393;
                  unint64_t v397 = *(_DWORD **)v391;
                }
                else
                {
                  int v402 = 0;
                }
                unsigned int v614 = &v402[4 * v398];
                *(_DWORD *)unsigned int v614 = 169;
                uint64_t v396 = v614 + 4;
                while (v392 != v397)
                {
                  int v615 = *--v392;
                  *((_DWORD *)v614 - 1) = v615;
                  v614 -= 4;
                }
                *(void *)uint64_t v391 = v614;
                *char v393 = v396;
                void *v395 = &v402[4 * v401];
                if (v397) {
                  operator delete(v397);
                }
              }
              else
              {
                *char v392 = 169;
                uint64_t v396 = v392 + 1;
              }
              *char v393 = v396;
              if (!*v14)
              {
LABEL_3144:
                if ((*((unsigned char *)__p + 21) & 4) == 0) {
                  goto LABEL_4003;
                }
                uint64_t v616 = *v12 + 24 * v13;
                char v618 = (_DWORD **)(v616 + 8);
                int v617 = *(_DWORD **)(v616 + 8);
                unsigned int v620 = (void *)(v616 + 16);
                unint64_t v619 = *(void *)(v616 + 16);
                if ((unint64_t)v617 >= v619)
                {
                  long long v622 = *(_DWORD **)v616;
                  uint64_t v623 = ((uint64_t)v617 - *(void *)v616) >> 2;
                  unint64_t v624 = v623 + 1;
                  if ((unint64_t)(v623 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v625 = v619 - (void)v622;
                  if (v625 >> 1 > v624) {
                    unint64_t v624 = v625 >> 1;
                  }
                  if ((unint64_t)v625 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v626 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v626 = v624;
                  }
                  if (v626)
                  {
                    char v627 = (char *)sub_458C8((uint64_t)v620, v626);
                    int v617 = *v618;
                    long long v622 = *(_DWORD **)v616;
                  }
                  else
                  {
                    char v627 = 0;
                  }
                  v810 = &v627[4 * v623];
                  *(_DWORD *)v810 = 170;
                  unint64_t v621 = v810 + 4;
                  while (v617 != v622)
                  {
                    int v811 = *--v617;
                    *((_DWORD *)v810 - 1) = v811;
                    v810 -= 4;
                  }
                  *(void *)uint64_t v616 = v810;
                  unsigned char *v618 = v621;
                  *unsigned int v620 = &v627[4 * v626];
                  if (v622) {
                    operator delete(v622);
                  }
                }
                else
                {
                  _DWORD *v617 = 170;
                  unint64_t v621 = v617 + 1;
                }
                unsigned char *v618 = v621;
                if (!*v14)
                {
LABEL_4003:
                  if ((*((unsigned char *)__p + 21) & 8) == 0) {
                    goto LABEL_4004;
                  }
                  uint64_t v812 = *v12 + 24 * v13;
                  v814 = (_DWORD **)(v812 + 8);
                  int v813 = *(_DWORD **)(v812 + 8);
                  v816 = (void *)(v812 + 16);
                  unint64_t v815 = *(void *)(v812 + 16);
                  if ((unint64_t)v813 >= v815)
                  {
                    int v818 = *(_DWORD **)v812;
                    uint64_t v819 = ((uint64_t)v813 - *(void *)v812) >> 2;
                    unint64_t v820 = v819 + 1;
                    if ((unint64_t)(v819 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v821 = v815 - (void)v818;
                    if (v821 >> 1 > v820) {
                      unint64_t v820 = v821 >> 1;
                    }
                    if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v822 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v822 = v820;
                    }
                    if (v822)
                    {
                      int v823 = (char *)sub_458C8((uint64_t)v816, v822);
                      int v813 = *v814;
                      int v818 = *(_DWORD **)v812;
                    }
                    else
                    {
                      int v823 = 0;
                    }
                    unsigned int v994 = &v823[4 * v819];
                    *(_DWORD *)unsigned int v994 = 171;
                    uint64_t v817 = v994 + 4;
                    while (v813 != v818)
                    {
                      int v995 = *--v813;
                      *((_DWORD *)v994 - 1) = v995;
                      v994 -= 4;
                    }
                    *(void *)uint64_t v812 = v994;
                    void *v814 = v817;
                    void *v816 = &v823[4 * v822];
                    if (v818) {
                      operator delete(v818);
                    }
                  }
                  else
                  {
                    *int v813 = 171;
                    uint64_t v817 = v813 + 1;
                  }
                  void *v814 = v817;
                  if (!*v14)
                  {
LABEL_4004:
                    if ((*((unsigned char *)__p + 21) & 0x10) == 0) {
                      goto LABEL_4005;
                    }
                    uint64_t v996 = *v12 + 24 * v13;
                    int v998 = (_DWORD **)(v996 + 8);
                    v997 = *(_DWORD **)(v996 + 8);
                    unsigned int v1000 = (void *)(v996 + 16);
                    unint64_t v999 = *(void *)(v996 + 16);
                    if ((unint64_t)v997 >= v999)
                    {
                      v1002 = *(_DWORD **)v996;
                      uint64_t v1003 = ((uint64_t)v997 - *(void *)v996) >> 2;
                      unint64_t v1004 = v1003 + 1;
                      if ((unint64_t)(v1003 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v1005 = v999 - (void)v1002;
                      if (v1005 >> 1 > v1004) {
                        unint64_t v1004 = v1005 >> 1;
                      }
                      if ((unint64_t)v1005 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v1006 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v1006 = v1004;
                      }
                      if (v1006)
                      {
                        uint64_t v1007 = (char *)sub_458C8((uint64_t)v1000, v1006);
                        v997 = *v998;
                        v1002 = *(_DWORD **)v996;
                      }
                      else
                      {
                        uint64_t v1007 = 0;
                      }
                      double v1180 = &v1007[4 * v1003];
                      *(_DWORD *)double v1180 = 172;
                      uint64_t v1001 = v1180 + 4;
                      while (v997 != v1002)
                      {
                        int v1181 = *--v997;
                        *((_DWORD *)v1180 - 1) = v1181;
                        v1180 -= 4;
                      }
                      *(void *)uint64_t v996 = v1180;
                      BOOL *v998 = v1001;
                      *unsigned int v1000 = &v1007[4 * v1006];
                      if (v1002) {
                        operator delete(v1002);
                      }
                    }
                    else
                    {
                      _DWORD *v997 = 172;
                      uint64_t v1001 = v997 + 1;
                    }
                    BOOL *v998 = v1001;
                    if (!*v14)
                    {
LABEL_4005:
                      if ((*((unsigned char *)__p + 21) & 0x20) == 0) {
                        goto LABEL_4006;
                      }
                      uint64_t v1182 = *v12 + 24 * v13;
                      v1184 = (_DWORD **)(v1182 + 8);
                      double v1183 = *(_DWORD **)(v1182 + 8);
                      v1186 = (void *)(v1182 + 16);
                      unint64_t v1185 = *(void *)(v1182 + 16);
                      if ((unint64_t)v1183 >= v1185)
                      {
                        double v1188 = *(_DWORD **)v1182;
                        uint64_t v1189 = ((uint64_t)v1183 - *(void *)v1182) >> 2;
                        unint64_t v1190 = v1189 + 1;
                        if ((unint64_t)(v1189 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1191 = v1185 - (void)v1188;
                        if (v1191 >> 1 > v1190) {
                          unint64_t v1190 = v1191 >> 1;
                        }
                        if ((unint64_t)v1191 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1192 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1192 = v1190;
                        }
                        if (v1192)
                        {
                          double v1193 = (char *)sub_458C8((uint64_t)v1186, v1192);
                          double v1183 = *v1184;
                          double v1188 = *(_DWORD **)v1182;
                        }
                        else
                        {
                          double v1193 = 0;
                        }
                        unint64_t v1327 = &v1193[4 * v1189];
                        *(_DWORD *)unint64_t v1327 = 173;
                        double v1187 = v1327 + 4;
                        while (v1183 != v1188)
                        {
                          int v1328 = *--v1183;
                          *((_DWORD *)v1327 - 1) = v1328;
                          v1327 -= 4;
                        }
                        *(void *)uint64_t v1182 = v1327;
                        double *v1184 = v1187;
                        void *v1186 = &v1193[4 * v1192];
                        if (v1188) {
                          operator delete(v1188);
                        }
                      }
                      else
                      {
                        *double v1183 = 173;
                        double v1187 = v1183 + 1;
                      }
                      double *v1184 = v1187;
                      if (!*v14)
                      {
LABEL_4006:
                        if ((*((unsigned char *)__p + 21) & 0x40) == 0) {
                          goto LABEL_4007;
                        }
                        uint64_t v1329 = *v12 + 24 * v13;
                        v1331 = (_DWORD **)(v1329 + 8);
                        double v1330 = *(_DWORD **)(v1329 + 8);
                        v1333 = (void *)(v1329 + 16);
                        unint64_t v1332 = *(void *)(v1329 + 16);
                        if ((unint64_t)v1330 >= v1332)
                        {
                          unsigned int v1335 = *(_DWORD **)v1329;
                          uint64_t v1336 = ((uint64_t)v1330 - *(void *)v1329) >> 2;
                          unint64_t v1337 = v1336 + 1;
                          if ((unint64_t)(v1336 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1338 = v1332 - (void)v1335;
                          if (v1338 >> 1 > v1337) {
                            unint64_t v1337 = v1338 >> 1;
                          }
                          if ((unint64_t)v1338 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1339 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1339 = v1337;
                          }
                          if (v1339)
                          {
                            v1340 = (char *)sub_458C8((uint64_t)v1333, v1339);
                            double v1330 = *v1331;
                            unsigned int v1335 = *(_DWORD **)v1329;
                          }
                          else
                          {
                            v1340 = 0;
                          }
                          v1476 = &v1340[4 * v1336];
                          *(_DWORD *)v1476 = 174;
                          unsigned int v1334 = v1476 + 4;
                          while (v1330 != v1335)
                          {
                            int v1477 = *--v1330;
                            *((_DWORD *)v1476 - 1) = v1477;
                            v1476 -= 4;
                          }
                          *(void *)uint64_t v1329 = v1476;
                          unsigned __int8 *v1331 = v1334;
                          void *v1333 = &v1340[4 * v1339];
                          if (v1335) {
                            operator delete(v1335);
                          }
                        }
                        else
                        {
                          *double v1330 = 174;
                          unsigned int v1334 = v1330 + 1;
                        }
                        unsigned __int8 *v1331 = v1334;
                        if (!*v14)
                        {
LABEL_4007:
                          if ((*((unsigned char *)__p + 21) & 0x80) == 0) {
                            goto LABEL_4008;
                          }
                          uint64_t v1478 = *v12 + 24 * v13;
                          double v1480 = (_DWORD **)(v1478 + 8);
                          uint64_t v1479 = *(_DWORD **)(v1478 + 8);
                          v1482 = (void *)(v1478 + 16);
                          unint64_t v1481 = *(void *)(v1478 + 16);
                          if ((unint64_t)v1479 >= v1481)
                          {
                            int v1484 = *(_DWORD **)v1478;
                            uint64_t v1485 = ((uint64_t)v1479 - *(void *)v1478) >> 2;
                            unint64_t v1486 = v1485 + 1;
                            if ((unint64_t)(v1485 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1487 = v1481 - (void)v1484;
                            if (v1487 >> 1 > v1486) {
                              unint64_t v1486 = v1487 >> 1;
                            }
                            if ((unint64_t)v1487 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1488 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1488 = v1486;
                            }
                            if (v1488)
                            {
                              v1489 = (char *)sub_458C8((uint64_t)v1482, v1488);
                              uint64_t v1479 = *v1480;
                              int v1484 = *(_DWORD **)v1478;
                            }
                            else
                            {
                              v1489 = 0;
                            }
                            v1616 = &v1489[4 * v1485];
                            *(_DWORD *)v1616 = 175;
                            v1483 = v1616 + 4;
                            while (v1479 != v1484)
                            {
                              int v1617 = *--v1479;
                              *((_DWORD *)v1616 - 1) = v1617;
                              v1616 -= 4;
                            }
                            *(void *)uint64_t v1478 = v1616;
                            *double v1480 = v1483;
                            void *v1482 = &v1489[4 * v1488];
                            if (v1484) {
                              operator delete(v1484);
                            }
                          }
                          else
                          {
                            *uint64_t v1479 = 175;
                            v1483 = v1479 + 1;
                          }
                          *double v1480 = v1483;
                          if (!*v14)
                          {
LABEL_4008:
                            if ((*((unsigned char *)__p + 22) & 1) == 0) {
                              goto LABEL_4009;
                            }
                            uint64_t v1618 = *v12 + 24 * v13;
                            unint64_t v1620 = (_DWORD **)(v1618 + 8);
                            double v1619 = *(_DWORD **)(v1618 + 8);
                            v1622 = (void *)(v1618 + 16);
                            unint64_t v1621 = *(void *)(v1618 + 16);
                            if ((unint64_t)v1619 >= v1621)
                            {
                              v1624 = *(_DWORD **)v1618;
                              uint64_t v1625 = ((uint64_t)v1619 - *(void *)v1618) >> 2;
                              unint64_t v1626 = v1625 + 1;
                              if ((unint64_t)(v1625 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1627 = v1621 - (void)v1624;
                              if (v1627 >> 1 > v1626) {
                                unint64_t v1626 = v1627 >> 1;
                              }
                              if ((unint64_t)v1627 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1628 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1628 = v1626;
                              }
                              if (v1628)
                              {
                                v1629 = (char *)sub_458C8((uint64_t)v1622, v1628);
                                double v1619 = *v1620;
                                v1624 = *(_DWORD **)v1618;
                              }
                              else
                              {
                                v1629 = 0;
                              }
                              unsigned int v1749 = &v1629[4 * v1625];
                              *(_DWORD *)unsigned int v1749 = 176;
                              v1623 = v1749 + 4;
                              while (v1619 != v1624)
                              {
                                int v1750 = *--v1619;
                                *((_DWORD *)v1749 - 1) = v1750;
                                v1749 -= 4;
                              }
                              *(void *)uint64_t v1618 = v1749;
                              *unint64_t v1620 = v1623;
                              void *v1622 = &v1629[4 * v1628];
                              if (v1624) {
                                operator delete(v1624);
                              }
                            }
                            else
                            {
                              *double v1619 = 176;
                              v1623 = v1619 + 1;
                            }
                            *unint64_t v1620 = v1623;
                            if (!*v14)
                            {
LABEL_4009:
                              if ((*((unsigned char *)__p + 22) & 2) == 0) {
                                goto LABEL_4010;
                              }
                              uint64_t v1751 = *v12 + 24 * v13;
                              v1753 = (_DWORD **)(v1751 + 8);
                              v1752 = *(_DWORD **)(v1751 + 8);
                              int v1755 = (void *)(v1751 + 16);
                              unint64_t v1754 = *(void *)(v1751 + 16);
                              if ((unint64_t)v1752 >= v1754)
                              {
                                v1757 = *(_DWORD **)v1751;
                                uint64_t v1758 = ((uint64_t)v1752 - *(void *)v1751) >> 2;
                                unint64_t v1759 = v1758 + 1;
                                if ((unint64_t)(v1758 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1760 = v1754 - (void)v1757;
                                if (v1760 >> 1 > v1759) {
                                  unint64_t v1759 = v1760 >> 1;
                                }
                                if ((unint64_t)v1760 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1761 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1761 = v1759;
                                }
                                if (v1761)
                                {
                                  v1762 = (char *)sub_458C8((uint64_t)v1755, v1761);
                                  v1752 = *v1753;
                                  v1757 = *(_DWORD **)v1751;
                                }
                                else
                                {
                                  v1762 = 0;
                                }
                                v1857 = &v1762[4 * v1758];
                                *(_DWORD *)v1857 = 177;
                                int v1756 = v1857 + 4;
                                while (v1752 != v1757)
                                {
                                  int v1858 = *--v1752;
                                  *((_DWORD *)v1857 - 1) = v1858;
                                  v1857 -= 4;
                                }
                                *(void *)uint64_t v1751 = v1857;
                                BOOL *v1753 = v1756;
                                *int v1755 = &v1762[4 * v1761];
                                if (v1757) {
                                  operator delete(v1757);
                                }
                              }
                              else
                              {
                                _DWORD *v1752 = 177;
                                int v1756 = v1752 + 1;
                              }
                              BOOL *v1753 = v1756;
                              if (!*v14)
                              {
LABEL_4010:
                                if ((*((unsigned char *)__p + 22) & 4) == 0) {
                                  goto LABEL_4011;
                                }
                                uint64_t v1859 = *v12 + 24 * v13;
                                unsigned int v1861 = (_DWORD **)(v1859 + 8);
                                unsigned int v1860 = *(_DWORD **)(v1859 + 8);
                                v1863 = (void *)(v1859 + 16);
                                unint64_t v1862 = *(void *)(v1859 + 16);
                                if ((unint64_t)v1860 >= v1862)
                                {
                                  unint64_t v1865 = *(_DWORD **)v1859;
                                  uint64_t v1866 = ((uint64_t)v1860 - *(void *)v1859) >> 2;
                                  unint64_t v1867 = v1866 + 1;
                                  if ((unint64_t)(v1866 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1868 = v1862 - (void)v1865;
                                  if (v1868 >> 1 > v1867) {
                                    unint64_t v1867 = v1868 >> 1;
                                  }
                                  if ((unint64_t)v1868 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1869 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1869 = v1867;
                                  }
                                  if (v1869)
                                  {
                                    v1870 = (char *)sub_458C8((uint64_t)v1863, v1869);
                                    unsigned int v1860 = *v1861;
                                    unint64_t v1865 = *(_DWORD **)v1859;
                                  }
                                  else
                                  {
                                    v1870 = 0;
                                  }
                                  unint64_t v1948 = &v1870[4 * v1866];
                                  *(_DWORD *)unint64_t v1948 = 178;
                                  v1864 = v1948 + 4;
                                  while (v1860 != v1865)
                                  {
                                    int v1949 = *--v1860;
                                    *((_DWORD *)v1948 - 1) = v1949;
                                    v1948 -= 4;
                                  }
                                  *(void *)uint64_t v1859 = v1948;
                                  *unsigned int v1861 = v1864;
                                  void *v1863 = &v1870[4 * v1869];
                                  if (v1865) {
                                    operator delete(v1865);
                                  }
                                }
                                else
                                {
                                  *unsigned int v1860 = 178;
                                  v1864 = v1860 + 1;
                                }
                                *unsigned int v1861 = v1864;
                                if (!*v14)
                                {
LABEL_4011:
                                  if ((*((unsigned char *)__p + 22) & 8) == 0) {
                                    goto LABEL_4012;
                                  }
                                  uint64_t v1950 = *v12 + 24 * v13;
                                  v1952 = (_DWORD **)(v1950 + 8);
                                  v1951 = *(_DWORD **)(v1950 + 8);
                                  unsigned int v1954 = (void *)(v1950 + 16);
                                  unint64_t v1953 = *(void *)(v1950 + 16);
                                  if ((unint64_t)v1951 >= v1953)
                                  {
                                    v1956 = *(_DWORD **)v1950;
                                    uint64_t v1957 = ((uint64_t)v1951 - *(void *)v1950) >> 2;
                                    unint64_t v1958 = v1957 + 1;
                                    if ((unint64_t)(v1957 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1959 = v1953 - (void)v1956;
                                    if (v1959 >> 1 > v1958) {
                                      unint64_t v1958 = v1959 >> 1;
                                    }
                                    if ((unint64_t)v1959 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1960 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1960 = v1958;
                                    }
                                    if (v1960)
                                    {
                                      unint64_t v1961 = (char *)sub_458C8((uint64_t)v1954, v1960);
                                      v1951 = *v1952;
                                      v1956 = *(_DWORD **)v1950;
                                    }
                                    else
                                    {
                                      unint64_t v1961 = 0;
                                    }
                                    v2033 = &v1961[4 * v1957];
                                    *(_DWORD *)v2033 = 179;
                                    unsigned int v1955 = v2033 + 4;
                                    while (v1951 != v1956)
                                    {
                                      int v2034 = *--v1951;
                                      *((_DWORD *)v2033 - 1) = v2034;
                                      v2033 -= 4;
                                    }
                                    *(void *)uint64_t v1950 = v2033;
                                    BOOL *v1952 = v1955;
                                    *unsigned int v1954 = &v1961[4 * v1960];
                                    if (v1956) {
                                      operator delete(v1956);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1951 = 179;
                                    unsigned int v1955 = v1951 + 1;
                                  }
                                  BOOL *v1952 = v1955;
                                  if (!*v14)
                                  {
LABEL_4012:
                                    if ((*((unsigned char *)__p + 22) & 0x10) == 0) {
                                      goto LABEL_4013;
                                    }
                                    uint64_t v2035 = *v12 + 24 * v13;
                                    v2037 = (_DWORD **)(v2035 + 8);
                                    v2036 = *(_DWORD **)(v2035 + 8);
                                    v2039 = (void *)(v2035 + 16);
                                    unint64_t v2038 = *(void *)(v2035 + 16);
                                    if ((unint64_t)v2036 >= v2038)
                                    {
                                      v2041 = *(_DWORD **)v2035;
                                      uint64_t v2042 = ((uint64_t)v2036 - *(void *)v2035) >> 2;
                                      unint64_t v2043 = v2042 + 1;
                                      if ((unint64_t)(v2042 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2044 = v2038 - (void)v2041;
                                      if (v2044 >> 1 > v2043) {
                                        unint64_t v2043 = v2044 >> 1;
                                      }
                                      if ((unint64_t)v2044 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v2045 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v2045 = v2043;
                                      }
                                      if (v2045)
                                      {
                                        v2046 = (char *)sub_458C8((uint64_t)v2039, v2045);
                                        v2036 = *v2037;
                                        v2041 = *(_DWORD **)v2035;
                                      }
                                      else
                                      {
                                        v2046 = 0;
                                      }
                                      v2117 = &v2046[4 * v2042];
                                      *(_DWORD *)v2117 = 180;
                                      v2040 = v2117 + 4;
                                      while (v2036 != v2041)
                                      {
                                        int v2118 = *--v2036;
                                        *((_DWORD *)v2117 - 1) = v2118;
                                        v2117 -= 4;
                                      }
                                      *(void *)uint64_t v2035 = v2117;
                                      *v2037 = v2040;
                                      void *v2039 = &v2046[4 * v2045];
                                      if (v2041) {
                                        operator delete(v2041);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v2036 = 180;
                                      v2040 = v2036 + 1;
                                    }
                                    *v2037 = v2040;
                                    if (!*v14)
                                    {
LABEL_4013:
                                      if ((*((unsigned char *)__p + 22) & 0x20) == 0) {
                                        goto LABEL_4014;
                                      }
                                      uint64_t v2119 = *v12 + 24 * v13;
                                      v2121 = (_DWORD **)(v2119 + 8);
                                      v2120 = *(_DWORD **)(v2119 + 8);
                                      v2123 = (void *)(v2119 + 16);
                                      unint64_t v2122 = *(void *)(v2119 + 16);
                                      if ((unint64_t)v2120 >= v2122)
                                      {
                                        v2125 = *(_DWORD **)v2119;
                                        uint64_t v2126 = ((uint64_t)v2120 - *(void *)v2119) >> 2;
                                        unint64_t v2127 = v2126 + 1;
                                        if ((unint64_t)(v2126 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2128 = v2122 - (void)v2125;
                                        if (v2128 >> 1 > v2127) {
                                          unint64_t v2127 = v2128 >> 1;
                                        }
                                        if ((unint64_t)v2128 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2129 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2129 = v2127;
                                        }
                                        if (v2129)
                                        {
                                          v2130 = (char *)sub_458C8((uint64_t)v2123, v2129);
                                          v2120 = *v2121;
                                          v2125 = *(_DWORD **)v2119;
                                        }
                                        else
                                        {
                                          v2130 = 0;
                                        }
                                        v2193 = &v2130[4 * v2126];
                                        *(_DWORD *)v2193 = 181;
                                        v2124 = v2193 + 4;
                                        while (v2120 != v2125)
                                        {
                                          int v2194 = *--v2120;
                                          *((_DWORD *)v2193 - 1) = v2194;
                                          v2193 -= 4;
                                        }
                                        *(void *)uint64_t v2119 = v2193;
                                        *v2121 = v2124;
                                        void *v2123 = &v2130[4 * v2129];
                                        if (v2125) {
                                          operator delete(v2125);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2120 = 181;
                                        v2124 = v2120 + 1;
                                      }
                                      *v2121 = v2124;
                                      if (!*v14)
                                      {
LABEL_4014:
                                        if ((*((unsigned char *)__p + 22) & 0x40) == 0) {
                                          goto LABEL_4015;
                                        }
                                        uint64_t v2195 = *v12 + 24 * v13;
                                        v2197 = (_DWORD **)(v2195 + 8);
                                        v2196 = *(_DWORD **)(v2195 + 8);
                                        v2199 = (void *)(v2195 + 16);
                                        unint64_t v2198 = *(void *)(v2195 + 16);
                                        if ((unint64_t)v2196 >= v2198)
                                        {
                                          v2201 = *(_DWORD **)v2195;
                                          uint64_t v2202 = ((uint64_t)v2196 - *(void *)v2195) >> 2;
                                          unint64_t v2203 = v2202 + 1;
                                          if ((unint64_t)(v2202 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2204 = v2198 - (void)v2201;
                                          if (v2204 >> 1 > v2203) {
                                            unint64_t v2203 = v2204 >> 1;
                                          }
                                          if ((unint64_t)v2204 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2205 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2205 = v2203;
                                          }
                                          if (v2205)
                                          {
                                            v2206 = (char *)sub_458C8((uint64_t)v2199, v2205);
                                            v2196 = *v2197;
                                            v2201 = *(_DWORD **)v2195;
                                          }
                                          else
                                          {
                                            v2206 = 0;
                                          }
                                          v2264 = &v2206[4 * v2202];
                                          *(_DWORD *)v2264 = 182;
                                          v2200 = v2264 + 4;
                                          while (v2196 != v2201)
                                          {
                                            int v2265 = *--v2196;
                                            *((_DWORD *)v2264 - 1) = v2265;
                                            v2264 -= 4;
                                          }
                                          *(void *)uint64_t v2195 = v2264;
                                          *v2197 = v2200;
                                          void *v2199 = &v2206[4 * v2205];
                                          if (v2201) {
                                            operator delete(v2201);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2196 = 182;
                                          v2200 = v2196 + 1;
                                        }
                                        *v2197 = v2200;
                                        if (!*v14)
                                        {
LABEL_4015:
                                          if ((*((unsigned char *)__p + 22) & 0x80) == 0) {
                                            goto LABEL_4016;
                                          }
                                          uint64_t v2266 = *v12 + 24 * v13;
                                          v2268 = (_DWORD **)(v2266 + 8);
                                          v2267 = *(_DWORD **)(v2266 + 8);
                                          v2270 = (void *)(v2266 + 16);
                                          unint64_t v2269 = *(void *)(v2266 + 16);
                                          if ((unint64_t)v2267 >= v2269)
                                          {
                                            v2272 = *(_DWORD **)v2266;
                                            uint64_t v2273 = ((uint64_t)v2267 - *(void *)v2266) >> 2;
                                            unint64_t v2274 = v2273 + 1;
                                            if ((unint64_t)(v2273 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2275 = v2269 - (void)v2272;
                                            if (v2275 >> 1 > v2274) {
                                              unint64_t v2274 = v2275 >> 1;
                                            }
                                            if ((unint64_t)v2275 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2276 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2276 = v2274;
                                            }
                                            if (v2276)
                                            {
                                              v2277 = (char *)sub_458C8((uint64_t)v2270, v2276);
                                              v2267 = *v2268;
                                              v2272 = *(_DWORD **)v2266;
                                            }
                                            else
                                            {
                                              v2277 = 0;
                                            }
                                            v2326 = &v2277[4 * v2273];
                                            *(_DWORD *)v2326 = 183;
                                            v2271 = v2326 + 4;
                                            while (v2267 != v2272)
                                            {
                                              int v2327 = *--v2267;
                                              *((_DWORD *)v2326 - 1) = v2327;
                                              v2326 -= 4;
                                            }
                                            *(void *)uint64_t v2266 = v2326;
                                            *v2268 = v2271;
                                            void *v2270 = &v2277[4 * v2276];
                                            if (v2272) {
                                              operator delete(v2272);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2267 = 183;
                                            v2271 = v2267 + 1;
                                          }
                                          *v2268 = v2271;
                                          if (!*v14)
                                          {
LABEL_4016:
                                            if ((*((unsigned char *)__p + 23) & 1) == 0) {
                                              goto LABEL_4017;
                                            }
                                            uint64_t v2328 = *v12 + 24 * v13;
                                            v2330 = (_DWORD **)(v2328 + 8);
                                            v2329 = *(_DWORD **)(v2328 + 8);
                                            v2332 = (void *)(v2328 + 16);
                                            unint64_t v2331 = *(void *)(v2328 + 16);
                                            if ((unint64_t)v2329 >= v2331)
                                            {
                                              v2334 = *(_DWORD **)v2328;
                                              uint64_t v2335 = ((uint64_t)v2329 - *(void *)v2328) >> 2;
                                              unint64_t v2336 = v2335 + 1;
                                              if ((unint64_t)(v2335 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2337 = v2331 - (void)v2334;
                                              if (v2337 >> 1 > v2336) {
                                                unint64_t v2336 = v2337 >> 1;
                                              }
                                              if ((unint64_t)v2337 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2338 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2338 = v2336;
                                              }
                                              if (v2338)
                                              {
                                                v2339 = (char *)sub_458C8((uint64_t)v2332, v2338);
                                                v2329 = *v2330;
                                                v2334 = *(_DWORD **)v2328;
                                              }
                                              else
                                              {
                                                v2339 = 0;
                                              }
                                              v2383 = &v2339[4 * v2335];
                                              *(_DWORD *)v2383 = 184;
                                              v2333 = v2383 + 4;
                                              while (v2329 != v2334)
                                              {
                                                int v2384 = *--v2329;
                                                *((_DWORD *)v2383 - 1) = v2384;
                                                v2383 -= 4;
                                              }
                                              *(void *)uint64_t v2328 = v2383;
                                              *v2330 = v2333;
                                              void *v2332 = &v2339[4 * v2338];
                                              if (v2334) {
                                                operator delete(v2334);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2329 = 184;
                                              v2333 = v2329 + 1;
                                            }
                                            *v2330 = v2333;
                                            if (!*v14)
                                            {
LABEL_4017:
                                              if ((*((unsigned char *)__p + 23) & 2) != 0)
                                              {
                                                uint64_t v223 = *v12 + 24 * v13;
                                                uint64_t v225 = (int **)(v223 + 8);
                                                uint64_t v224 = *(int **)(v223 + 8);
                                                uint64_t v227 = (void *)(v223 + 16);
                                                unint64_t v2385 = *(void *)(v223 + 16);
                                                if ((unint64_t)v224 < v2385)
                                                {
                                                  int v228 = 185;
                                                  goto LABEL_2185;
                                                }
                                                double v229 = *(int **)v223;
                                                uint64_t v2386 = ((uint64_t)v224 - *(void *)v223) >> 2;
                                                unint64_t v2387 = v2386 + 1;
                                                if ((unint64_t)(v2386 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2388 = v2385 - (void)v229;
                                                if (v2388 >> 1 > v2387) {
                                                  unint64_t v2387 = v2388 >> 1;
                                                }
                                                if ((unint64_t)v2388 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v233 = v2387;
                                                }
                                                if (v233)
                                                {
                                                  uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                                                  uint64_t v224 = *v225;
                                                  double v229 = *(int **)v223;
                                                }
                                                else
                                                {
                                                  uint64_t v234 = 0;
                                                }
                                                uint64_t v457 = &v234[4 * v2386];
                                                *(_DWORD *)uint64_t v457 = 185;
                                                unint64_t v458 = (int *)(v457 + 4);
                                                while (v224 != v229)
                                                {
                                                  int v2431 = *--v224;
                                                  *((_DWORD *)v457 - 1) = v2431;
                                                  v457 -= 4;
                                                }
                                                goto LABEL_3707;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 7:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 23) & 4) == 0) {
              goto LABEL_356;
            }
            uint64_t v69 = *v12 + 24 * v13;
            double v71 = (_DWORD **)(v69 + 8);
            unint64_t v70 = *(_DWORD **)(v69 + 8);
            int v73 = (void *)(v69 + 16);
            unint64_t v72 = *(void *)(v69 + 16);
            if ((unint64_t)v70 >= v72)
            {
              unint64_t v159 = *(_DWORD **)v69;
              uint64_t v160 = ((uint64_t)v70 - *(void *)v69) >> 2;
              unint64_t v161 = v160 + 1;
              if ((unint64_t)(v160 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v162 = v72 - (void)v159;
              if (v162 >> 1 > v161) {
                unint64_t v161 = v162 >> 1;
              }
              if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v163 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v163 = v161;
              }
              if (v163)
              {
                unint64_t v164 = (char *)sub_458C8((uint64_t)v73, v163);
                unint64_t v70 = *v71;
                unint64_t v159 = *(_DWORD **)v69;
              }
              else
              {
                unint64_t v164 = 0;
              }
              unint64_t v319 = &v164[4 * v160];
              *(_DWORD *)unint64_t v319 = 186;
              unint64_t v74 = v319 + 4;
              while (v70 != v159)
              {
                int v320 = *--v70;
                *((_DWORD *)v319 - 1) = v320;
                v319 -= 4;
              }
              *(void *)uint64_t v69 = v319;
              *double v71 = v74;
              *int v73 = &v164[4 * v163];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              _DWORD *v70 = 186;
              unint64_t v74 = v70 + 1;
            }
            *double v71 = v74;
            if (!*v14)
            {
LABEL_356:
              if ((*((unsigned char *)__p + 23) & 8) == 0) {
                goto LABEL_2996;
              }
              uint64_t v321 = *v12 + 24 * v13;
              uint64_t v323 = (_DWORD **)(v321 + 8);
              uint64_t v322 = *(_DWORD **)(v321 + 8);
              uint64_t v325 = (void *)(v321 + 16);
              unint64_t v324 = *(void *)(v321 + 16);
              if ((unint64_t)v322 >= v324)
              {
                unint64_t v327 = *(_DWORD **)v321;
                uint64_t v328 = ((uint64_t)v322 - *(void *)v321) >> 2;
                unint64_t v329 = v328 + 1;
                if ((unint64_t)(v328 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v330 = v324 - (void)v327;
                if (v330 >> 1 > v329) {
                  unint64_t v329 = v330 >> 1;
                }
                if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v331 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v331 = v329;
                }
                if (v331)
                {
                  uint64_t v332 = (char *)sub_458C8((uint64_t)v325, v331);
                  uint64_t v322 = *v323;
                  unint64_t v327 = *(_DWORD **)v321;
                }
                else
                {
                  uint64_t v332 = 0;
                }
                unsigned int v544 = &v332[4 * v328];
                *(_DWORD *)unsigned int v544 = 187;
                uint64_t v326 = v544 + 4;
                while (v322 != v327)
                {
                  int v545 = *--v322;
                  *((_DWORD *)v544 - 1) = v545;
                  v544 -= 4;
                }
                *(void *)uint64_t v321 = v544;
                *uint64_t v323 = v326;
                void *v325 = &v332[4 * v331];
                if (v327) {
                  operator delete(v327);
                }
              }
              else
              {
                *uint64_t v322 = 187;
                uint64_t v326 = v322 + 1;
              }
              *uint64_t v323 = v326;
              if (!*v14)
              {
LABEL_2996:
                if ((*((unsigned char *)__p + 23) & 0x10) == 0) {
                  goto LABEL_4018;
                }
                uint64_t v546 = *v12 + 24 * v13;
                uint64_t v548 = (_DWORD **)(v546 + 8);
                uint64_t v547 = *(_DWORD **)(v546 + 8);
                double v550 = (void *)(v546 + 16);
                unint64_t v549 = *(void *)(v546 + 16);
                if ((unint64_t)v547 >= v549)
                {
                  v552 = *(_DWORD **)v546;
                  uint64_t v553 = ((uint64_t)v547 - *(void *)v546) >> 2;
                  unint64_t v554 = v553 + 1;
                  if ((unint64_t)(v553 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v555 = v549 - (void)v552;
                  if (v555 >> 1 > v554) {
                    unint64_t v554 = v555 >> 1;
                  }
                  if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v556 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v556 = v554;
                  }
                  if (v556)
                  {
                    unint64_t v557 = (char *)sub_458C8((uint64_t)v550, v556);
                    uint64_t v547 = *v548;
                    v552 = *(_DWORD **)v546;
                  }
                  else
                  {
                    unint64_t v557 = 0;
                  }
                  int v748 = &v557[4 * v553];
                  *(_DWORD *)int v748 = 188;
                  unint64_t v551 = v748 + 4;
                  while (v547 != v552)
                  {
                    int v749 = *--v547;
                    *((_DWORD *)v748 - 1) = v749;
                    v748 -= 4;
                  }
                  *(void *)uint64_t v546 = v748;
                  *uint64_t v548 = v551;
                  *double v550 = &v557[4 * v556];
                  if (v552) {
                    operator delete(v552);
                  }
                }
                else
                {
                  _DWORD *v547 = 188;
                  unint64_t v551 = v547 + 1;
                }
                *uint64_t v548 = v551;
                if (!*v14)
                {
LABEL_4018:
                  if ((*((unsigned char *)__p + 23) & 0x20) == 0) {
                    goto LABEL_4019;
                  }
                  uint64_t v750 = *v12 + 24 * v13;
                  int v752 = (_DWORD **)(v750 + 8);
                  double v751 = *(_DWORD **)(v750 + 8);
                  unsigned int v754 = (void *)(v750 + 16);
                  unint64_t v753 = *(void *)(v750 + 16);
                  if ((unint64_t)v751 >= v753)
                  {
                    int v756 = *(_DWORD **)v750;
                    uint64_t v757 = ((uint64_t)v751 - *(void *)v750) >> 2;
                    unint64_t v758 = v757 + 1;
                    if ((unint64_t)(v757 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v759 = v753 - (void)v756;
                    if (v759 >> 1 > v758) {
                      unint64_t v758 = v759 >> 1;
                    }
                    if ((unint64_t)v759 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v760 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v760 = v758;
                    }
                    if (v760)
                    {
                      uint64_t v761 = (char *)sub_458C8((uint64_t)v754, v760);
                      double v751 = *v752;
                      int v756 = *(_DWORD **)v750;
                    }
                    else
                    {
                      uint64_t v761 = 0;
                    }
                    v937 = &v761[4 * v757];
                    *(_DWORD *)v937 = 189;
                    int v755 = v937 + 4;
                    while (v751 != v756)
                    {
                      int v938 = *--v751;
                      *((_DWORD *)v937 - 1) = v938;
                      v937 -= 4;
                    }
                    *(void *)uint64_t v750 = v937;
                    *int v752 = v755;
                    *unsigned int v754 = &v761[4 * v760];
                    if (v756) {
                      operator delete(v756);
                    }
                  }
                  else
                  {
                    _DWORD *v751 = 189;
                    int v755 = v751 + 1;
                  }
                  *int v752 = v755;
                  if (!*v14)
                  {
LABEL_4019:
                    if ((*((unsigned char *)__p + 23) & 0x40) == 0) {
                      goto LABEL_4020;
                    }
                    uint64_t v939 = *v12 + 24 * v13;
                    double v941 = (_DWORD **)(v939 + 8);
                    unsigned int v940 = *(_DWORD **)(v939 + 8);
                    v943 = (void *)(v939 + 16);
                    unint64_t v942 = *(void *)(v939 + 16);
                    if ((unint64_t)v940 >= v942)
                    {
                      v945 = *(_DWORD **)v939;
                      uint64_t v946 = ((uint64_t)v940 - *(void *)v939) >> 2;
                      unint64_t v947 = v946 + 1;
                      if ((unint64_t)(v946 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v948 = v942 - (void)v945;
                      if (v948 >> 1 > v947) {
                        unint64_t v947 = v948 >> 1;
                      }
                      if ((unint64_t)v948 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v949 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v949 = v947;
                      }
                      if (v949)
                      {
                        double v950 = (char *)sub_458C8((uint64_t)v943, v949);
                        unsigned int v940 = *v941;
                        v945 = *(_DWORD **)v939;
                      }
                      else
                      {
                        double v950 = 0;
                      }
                      v1112 = &v950[4 * v946];
                      *(_DWORD *)v1112 = 190;
                      double v944 = v1112 + 4;
                      while (v940 != v945)
                      {
                        int v1113 = *--v940;
                        *((_DWORD *)v1112 - 1) = v1113;
                        v1112 -= 4;
                      }
                      *(void *)uint64_t v939 = v1112;
                      *double v941 = v944;
                      void *v943 = &v950[4 * v949];
                      if (v945) {
                        operator delete(v945);
                      }
                    }
                    else
                    {
                      *unsigned int v940 = 190;
                      double v944 = v940 + 1;
                    }
                    *double v941 = v944;
                    if (!*v14)
                    {
LABEL_4020:
                      if ((*((void *)__p + 2) & 0x8000000000000000) == 0) {
                        goto LABEL_4021;
                      }
                      uint64_t v1120 = *v12 + 24 * v13;
                      double v1122 = (_DWORD **)(v1120 + 8);
                      double v1121 = *(_DWORD **)(v1120 + 8);
                      v1124 = (void *)(v1120 + 16);
                      unint64_t v1123 = *(void *)(v1120 + 16);
                      if ((unint64_t)v1121 >= v1123)
                      {
                        v1132 = *(_DWORD **)v1120;
                        uint64_t v1133 = ((uint64_t)v1121 - *(void *)v1120) >> 2;
                        unint64_t v1134 = v1133 + 1;
                        if ((unint64_t)(v1133 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1135 = v1123 - (void)v1132;
                        if (v1135 >> 1 > v1134) {
                          unint64_t v1134 = v1135 >> 1;
                        }
                        if ((unint64_t)v1135 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1136 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1136 = v1134;
                        }
                        if (v1136)
                        {
                          double v1137 = (char *)sub_458C8((uint64_t)v1124, v1136);
                          double v1121 = *v1122;
                          v1132 = *(_DWORD **)v1120;
                        }
                        else
                        {
                          double v1137 = 0;
                        }
                        unint64_t v1356 = &v1137[4 * v1133];
                        *(_DWORD *)unint64_t v1356 = 191;
                        v1125 = v1356 + 4;
                        while (v1121 != v1132)
                        {
                          int v1357 = *--v1121;
                          *((_DWORD *)v1356 - 1) = v1357;
                          v1356 -= 4;
                        }
                        *(void *)uint64_t v1120 = v1356;
                        *double v1122 = v1125;
                        void *v1124 = &v1137[4 * v1136];
                        if (v1132) {
                          operator delete(v1132);
                        }
                      }
                      else
                      {
                        *double v1121 = 191;
                        v1125 = v1121 + 1;
                      }
                      *double v1122 = v1125;
                      if (!*v14)
                      {
LABEL_4021:
                        if ((*((unsigned char *)__p + 24) & 1) == 0) {
                          goto LABEL_4022;
                        }
                        uint64_t v1114 = *v12 + 24 * v13;
                        double v1116 = (_DWORD **)(v1114 + 8);
                        double v1115 = *(_DWORD **)(v1114 + 8);
                        v1118 = (void *)(v1114 + 16);
                        unint64_t v1117 = *(void *)(v1114 + 16);
                        if ((unint64_t)v1115 >= v1117)
                        {
                          v1126 = *(_DWORD **)v1114;
                          uint64_t v1127 = ((uint64_t)v1115 - *(void *)v1114) >> 2;
                          unint64_t v1128 = v1127 + 1;
                          if ((unint64_t)(v1127 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1129 = v1117 - (void)v1126;
                          if (v1129 >> 1 > v1128) {
                            unint64_t v1128 = v1129 >> 1;
                          }
                          if ((unint64_t)v1129 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1130 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1130 = v1128;
                          }
                          if (v1130)
                          {
                            v1131 = (char *)sub_458C8((uint64_t)v1118, v1130);
                            double v1115 = *v1116;
                            v1126 = *(_DWORD **)v1114;
                          }
                          else
                          {
                            v1131 = 0;
                          }
                          unsigned int v1341 = &v1131[4 * v1127];
                          *(_DWORD *)unsigned int v1341 = 192;
                          v1119 = v1341 + 4;
                          while (v1115 != v1126)
                          {
                            int v1342 = *--v1115;
                            *((_DWORD *)v1341 - 1) = v1342;
                            v1341 -= 4;
                          }
                          *(void *)uint64_t v1114 = v1341;
                          *double v1116 = v1119;
                          void *v1118 = &v1131[4 * v1130];
                          if (v1126) {
                            operator delete(v1126);
                          }
                        }
                        else
                        {
                          *double v1115 = 192;
                          v1119 = v1115 + 1;
                        }
                        *double v1116 = v1119;
                        if (!*v14)
                        {
LABEL_4022:
                          if ((*((unsigned char *)__p + 24) & 2) == 0) {
                            goto LABEL_4023;
                          }
                          uint64_t v1343 = *v12 + 24 * v13;
                          v1345 = (_DWORD **)(v1343 + 8);
                          double v1344 = *(_DWORD **)(v1343 + 8);
                          v1347 = (void *)(v1343 + 16);
                          unint64_t v1346 = *(void *)(v1343 + 16);
                          if ((unint64_t)v1344 >= v1346)
                          {
                            unint64_t v1349 = *(_DWORD **)v1343;
                            uint64_t v1350 = ((uint64_t)v1344 - *(void *)v1343) >> 2;
                            unint64_t v1351 = v1350 + 1;
                            if ((unint64_t)(v1350 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1352 = v1346 - (void)v1349;
                            if (v1352 >> 1 > v1351) {
                              unint64_t v1351 = v1352 >> 1;
                            }
                            if ((unint64_t)v1352 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1353 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1353 = v1351;
                            }
                            if (v1353)
                            {
                              unint64_t v1354 = (char *)sub_458C8((uint64_t)v1347, v1353);
                              double v1344 = *v1345;
                              unint64_t v1349 = *(_DWORD **)v1343;
                            }
                            else
                            {
                              unint64_t v1354 = 0;
                            }
                            uint64_t v1490 = &v1354[4 * v1350];
                            *(_DWORD *)uint64_t v1490 = 193;
                            unint64_t v1348 = v1490 + 4;
                            while (v1344 != v1349)
                            {
                              int v1491 = *--v1344;
                              *((_DWORD *)v1490 - 1) = v1491;
                              v1490 -= 4;
                            }
                            *(void *)uint64_t v1343 = v1490;
                            unint64_t *v1345 = v1348;
                            void *v1347 = &v1354[4 * v1353];
                            if (v1349) {
                              operator delete(v1349);
                            }
                          }
                          else
                          {
                            *double v1344 = 193;
                            unint64_t v1348 = v1344 + 1;
                          }
                          unint64_t *v1345 = v1348;
                          if (!*v14)
                          {
LABEL_4023:
                            if ((*((unsigned char *)__p + 24) & 4) == 0) {
                              goto LABEL_4024;
                            }
                            uint64_t v1492 = *v12 + 24 * v13;
                            v1494 = (_DWORD **)(v1492 + 8);
                            v1493 = *(_DWORD **)(v1492 + 8);
                            int v1496 = (void *)(v1492 + 16);
                            unint64_t v1495 = *(void *)(v1492 + 16);
                            if ((unint64_t)v1493 >= v1495)
                            {
                              double v1498 = *(_DWORD **)v1492;
                              uint64_t v1499 = ((uint64_t)v1493 - *(void *)v1492) >> 2;
                              unint64_t v1500 = v1499 + 1;
                              if ((unint64_t)(v1499 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1501 = v1495 - (void)v1498;
                              if (v1501 >> 1 > v1500) {
                                unint64_t v1500 = v1501 >> 1;
                              }
                              if ((unint64_t)v1501 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1502 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1502 = v1500;
                              }
                              if (v1502)
                              {
                                uint64_t v1503 = (char *)sub_458C8((uint64_t)v1496, v1502);
                                v1493 = *v1494;
                                double v1498 = *(_DWORD **)v1492;
                              }
                              else
                              {
                                uint64_t v1503 = 0;
                              }
                              double v1630 = &v1503[4 * v1499];
                              *(_DWORD *)double v1630 = 194;
                              int v1497 = v1630 + 4;
                              while (v1493 != v1498)
                              {
                                int v1631 = *--v1493;
                                *((_DWORD *)v1630 - 1) = v1631;
                                v1630 -= 4;
                              }
                              *(void *)uint64_t v1492 = v1630;
                              double *v1494 = v1497;
                              *int v1496 = &v1503[4 * v1502];
                              if (v1498) {
                                operator delete(v1498);
                              }
                            }
                            else
                            {
                              _DWORD *v1493 = 194;
                              int v1497 = v1493 + 1;
                            }
                            double *v1494 = v1497;
                            if (!*v14)
                            {
LABEL_4024:
                              if ((*((unsigned char *)__p + 24) & 8) == 0) {
                                goto LABEL_4025;
                              }
                              uint64_t v1632 = *v12 + 24 * v13;
                              v1634 = (_DWORD **)(v1632 + 8);
                              v1633 = *(_DWORD **)(v1632 + 8);
                              int v1636 = (void *)(v1632 + 16);
                              unint64_t v1635 = *(void *)(v1632 + 16);
                              if ((unint64_t)v1633 >= v1635)
                              {
                                v1638 = *(_DWORD **)v1632;
                                uint64_t v1639 = ((uint64_t)v1633 - *(void *)v1632) >> 2;
                                unint64_t v1640 = v1639 + 1;
                                if ((unint64_t)(v1639 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1641 = v1635 - (void)v1638;
                                if (v1641 >> 1 > v1640) {
                                  unint64_t v1640 = v1641 >> 1;
                                }
                                if ((unint64_t)v1641 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1642 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1642 = v1640;
                                }
                                if (v1642)
                                {
                                  v1643 = (char *)sub_458C8((uint64_t)v1636, v1642);
                                  v1633 = *v1634;
                                  v1638 = *(_DWORD **)v1632;
                                }
                                else
                                {
                                  v1643 = 0;
                                }
                                v1763 = &v1643[4 * v1639];
                                *(_DWORD *)v1763 = 195;
                                v1637 = v1763 + 4;
                                while (v1633 != v1638)
                                {
                                  int v1764 = *--v1633;
                                  *((_DWORD *)v1763 - 1) = v1764;
                                  v1763 -= 4;
                                }
                                *(void *)uint64_t v1632 = v1763;
                                BOOL *v1634 = v1637;
                                *int v1636 = &v1643[4 * v1642];
                                if (v1638) {
                                  operator delete(v1638);
                                }
                              }
                              else
                              {
                                _DWORD *v1633 = 195;
                                v1637 = v1633 + 1;
                              }
                              BOOL *v1634 = v1637;
                              if (!*v14)
                              {
LABEL_4025:
                                if ((*((unsigned char *)__p + 24) & 0x10) == 0) {
                                  goto LABEL_4026;
                                }
                                uint64_t v1765 = *v12 + 24 * v13;
                                int v1767 = (_DWORD **)(v1765 + 8);
                                int v1766 = *(_DWORD **)(v1765 + 8);
                                v1769 = (void *)(v1765 + 16);
                                unint64_t v1768 = *(void *)(v1765 + 16);
                                if ((unint64_t)v1766 >= v1768)
                                {
                                  uint64_t v1771 = *(_DWORD **)v1765;
                                  uint64_t v1772 = ((uint64_t)v1766 - *(void *)v1765) >> 2;
                                  unint64_t v1773 = v1772 + 1;
                                  if ((unint64_t)(v1772 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1774 = v1768 - (void)v1771;
                                  if (v1774 >> 1 > v1773) {
                                    unint64_t v1773 = v1774 >> 1;
                                  }
                                  if ((unint64_t)v1774 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1775 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1775 = v1773;
                                  }
                                  if (v1775)
                                  {
                                    v1776 = (char *)sub_458C8((uint64_t)v1769, v1775);
                                    int v1766 = *v1767;
                                    uint64_t v1771 = *(_DWORD **)v1765;
                                  }
                                  else
                                  {
                                    v1776 = 0;
                                  }
                                  unsigned int v1871 = &v1776[4 * v1772];
                                  *(_DWORD *)unsigned int v1871 = 196;
                                  v1770 = v1871 + 4;
                                  while (v1766 != v1771)
                                  {
                                    int v1872 = *--v1766;
                                    *((_DWORD *)v1871 - 1) = v1872;
                                    v1871 -= 4;
                                  }
                                  *(void *)uint64_t v1765 = v1871;
                                  *int v1767 = v1770;
                                  void *v1769 = &v1776[4 * v1775];
                                  if (v1771) {
                                    operator delete(v1771);
                                  }
                                }
                                else
                                {
                                  *int v1766 = 196;
                                  v1770 = v1766 + 1;
                                }
                                *int v1767 = v1770;
                                if (!*v14)
                                {
LABEL_4026:
                                  if ((*((unsigned char *)__p + 24) & 0x20) == 0) {
                                    goto LABEL_4027;
                                  }
                                  uint64_t v1873 = *v12 + 24 * v13;
                                  v1875 = (_DWORD **)(v1873 + 8);
                                  v1874 = *(_DWORD **)(v1873 + 8);
                                  unsigned int v1877 = (void *)(v1873 + 16);
                                  unint64_t v1876 = *(void *)(v1873 + 16);
                                  if ((unint64_t)v1874 >= v1876)
                                  {
                                    unsigned int v1879 = *(_DWORD **)v1873;
                                    uint64_t v1880 = ((uint64_t)v1874 - *(void *)v1873) >> 2;
                                    unint64_t v1881 = v1880 + 1;
                                    if ((unint64_t)(v1880 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1882 = v1876 - (void)v1879;
                                    if (v1882 >> 1 > v1881) {
                                      unint64_t v1881 = v1882 >> 1;
                                    }
                                    if ((unint64_t)v1882 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1883 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1883 = v1881;
                                    }
                                    if (v1883)
                                    {
                                      unsigned int v1884 = (char *)sub_458C8((uint64_t)v1877, v1883);
                                      v1874 = *v1875;
                                      unsigned int v1879 = *(_DWORD **)v1873;
                                    }
                                    else
                                    {
                                      unsigned int v1884 = 0;
                                    }
                                    v1962 = &v1884[4 * v1880];
                                    *(_DWORD *)v1962 = 197;
                                    unsigned int v1878 = v1962 + 4;
                                    while (v1874 != v1879)
                                    {
                                      int v1963 = *--v1874;
                                      *((_DWORD *)v1962 - 1) = v1963;
                                      v1962 -= 4;
                                    }
                                    *(void *)uint64_t v1873 = v1962;
                                    unsigned __int8 *v1875 = v1878;
                                    *unsigned int v1877 = &v1884[4 * v1883];
                                    if (v1879) {
                                      operator delete(v1879);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1874 = 197;
                                    unsigned int v1878 = v1874 + 1;
                                  }
                                  unsigned __int8 *v1875 = v1878;
                                  if (!*v14)
                                  {
LABEL_4027:
                                    if ((*((unsigned char *)__p + 24) & 0x40) == 0) {
                                      goto LABEL_4028;
                                    }
                                    uint64_t v1964 = *v12 + 24 * v13;
                                    unsigned int v1966 = (_DWORD **)(v1964 + 8);
                                    unsigned int v1965 = *(_DWORD **)(v1964 + 8);
                                    v1968 = (void *)(v1964 + 16);
                                    unint64_t v1967 = *(void *)(v1964 + 16);
                                    if ((unint64_t)v1965 >= v1967)
                                    {
                                      v1970 = *(_DWORD **)v1964;
                                      uint64_t v1971 = ((uint64_t)v1965 - *(void *)v1964) >> 2;
                                      unint64_t v1972 = v1971 + 1;
                                      if ((unint64_t)(v1971 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v1973 = v1967 - (void)v1970;
                                      if (v1973 >> 1 > v1972) {
                                        unint64_t v1972 = v1973 >> 1;
                                      }
                                      if ((unint64_t)v1973 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v1974 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v1974 = v1972;
                                      }
                                      if (v1974)
                                      {
                                        v1975 = (char *)sub_458C8((uint64_t)v1968, v1974);
                                        unsigned int v1965 = *v1966;
                                        v1970 = *(_DWORD **)v1964;
                                      }
                                      else
                                      {
                                        v1975 = 0;
                                      }
                                      v2047 = &v1975[4 * v1971];
                                      *(_DWORD *)v2047 = 198;
                                      v1969 = v2047 + 4;
                                      while (v1965 != v1970)
                                      {
                                        int v2048 = *--v1965;
                                        *((_DWORD *)v2047 - 1) = v2048;
                                        v2047 -= 4;
                                      }
                                      *(void *)uint64_t v1964 = v2047;
                                      *unsigned int v1966 = v1969;
                                      void *v1968 = &v1975[4 * v1974];
                                      if (v1970) {
                                        operator delete(v1970);
                                      }
                                    }
                                    else
                                    {
                                      *unsigned int v1965 = 198;
                                      v1969 = v1965 + 1;
                                    }
                                    *unsigned int v1966 = v1969;
                                    if (!*v14)
                                    {
LABEL_4028:
                                      if ((*((unsigned char *)__p + 24) & 0x80) == 0) {
                                        goto LABEL_4029;
                                      }
                                      uint64_t v2049 = *v12 + 24 * v13;
                                      v2051 = (_DWORD **)(v2049 + 8);
                                      v2050 = *(_DWORD **)(v2049 + 8);
                                      v2053 = (void *)(v2049 + 16);
                                      unint64_t v2052 = *(void *)(v2049 + 16);
                                      if ((unint64_t)v2050 >= v2052)
                                      {
                                        v2055 = *(_DWORD **)v2049;
                                        uint64_t v2056 = ((uint64_t)v2050 - *(void *)v2049) >> 2;
                                        unint64_t v2057 = v2056 + 1;
                                        if ((unint64_t)(v2056 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2058 = v2052 - (void)v2055;
                                        if (v2058 >> 1 > v2057) {
                                          unint64_t v2057 = v2058 >> 1;
                                        }
                                        if ((unint64_t)v2058 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2059 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2059 = v2057;
                                        }
                                        if (v2059)
                                        {
                                          v2060 = (char *)sub_458C8((uint64_t)v2053, v2059);
                                          v2050 = *v2051;
                                          v2055 = *(_DWORD **)v2049;
                                        }
                                        else
                                        {
                                          v2060 = 0;
                                        }
                                        v2131 = &v2060[4 * v2056];
                                        *(_DWORD *)v2131 = 199;
                                        v2054 = v2131 + 4;
                                        while (v2050 != v2055)
                                        {
                                          int v2132 = *--v2050;
                                          *((_DWORD *)v2131 - 1) = v2132;
                                          v2131 -= 4;
                                        }
                                        *(void *)uint64_t v2049 = v2131;
                                        *v2051 = v2054;
                                        void *v2053 = &v2060[4 * v2059];
                                        if (v2055) {
                                          operator delete(v2055);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2050 = 199;
                                        v2054 = v2050 + 1;
                                      }
                                      *v2051 = v2054;
                                      if (!*v14)
                                      {
LABEL_4029:
                                        if ((*((unsigned char *)__p + 25) & 1) == 0) {
                                          goto LABEL_4030;
                                        }
                                        uint64_t v2133 = *v12 + 24 * v13;
                                        v2135 = (_DWORD **)(v2133 + 8);
                                        v2134 = *(_DWORD **)(v2133 + 8);
                                        v2137 = (void *)(v2133 + 16);
                                        unint64_t v2136 = *(void *)(v2133 + 16);
                                        if ((unint64_t)v2134 >= v2136)
                                        {
                                          v2139 = *(_DWORD **)v2133;
                                          uint64_t v2140 = ((uint64_t)v2134 - *(void *)v2133) >> 2;
                                          unint64_t v2141 = v2140 + 1;
                                          if ((unint64_t)(v2140 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2142 = v2136 - (void)v2139;
                                          if (v2142 >> 1 > v2141) {
                                            unint64_t v2141 = v2142 >> 1;
                                          }
                                          if ((unint64_t)v2142 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2143 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2143 = v2141;
                                          }
                                          if (v2143)
                                          {
                                            v2144 = (char *)sub_458C8((uint64_t)v2137, v2143);
                                            v2134 = *v2135;
                                            v2139 = *(_DWORD **)v2133;
                                          }
                                          else
                                          {
                                            v2144 = 0;
                                          }
                                          v2207 = &v2144[4 * v2140];
                                          *(_DWORD *)v2207 = 200;
                                          v2138 = v2207 + 4;
                                          while (v2134 != v2139)
                                          {
                                            int v2208 = *--v2134;
                                            *((_DWORD *)v2207 - 1) = v2208;
                                            v2207 -= 4;
                                          }
                                          *(void *)uint64_t v2133 = v2207;
                                          *v2135 = v2138;
                                          void *v2137 = &v2144[4 * v2143];
                                          if (v2139) {
                                            operator delete(v2139);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2134 = 200;
                                          v2138 = v2134 + 1;
                                        }
                                        *v2135 = v2138;
                                        if (!*v14)
                                        {
LABEL_4030:
                                          if ((*((unsigned char *)__p + 25) & 2) == 0) {
                                            goto LABEL_4031;
                                          }
                                          uint64_t v2209 = *v12 + 24 * v13;
                                          v2211 = (_DWORD **)(v2209 + 8);
                                          v2210 = *(_DWORD **)(v2209 + 8);
                                          v2213 = (void *)(v2209 + 16);
                                          unint64_t v2212 = *(void *)(v2209 + 16);
                                          if ((unint64_t)v2210 >= v2212)
                                          {
                                            v2215 = *(_DWORD **)v2209;
                                            uint64_t v2216 = ((uint64_t)v2210 - *(void *)v2209) >> 2;
                                            unint64_t v2217 = v2216 + 1;
                                            if ((unint64_t)(v2216 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2218 = v2212 - (void)v2215;
                                            if (v2218 >> 1 > v2217) {
                                              unint64_t v2217 = v2218 >> 1;
                                            }
                                            if ((unint64_t)v2218 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2219 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2219 = v2217;
                                            }
                                            if (v2219)
                                            {
                                              v2220 = (char *)sub_458C8((uint64_t)v2213, v2219);
                                              v2210 = *v2211;
                                              v2215 = *(_DWORD **)v2209;
                                            }
                                            else
                                            {
                                              v2220 = 0;
                                            }
                                            v2278 = &v2220[4 * v2216];
                                            *(_DWORD *)v2278 = 201;
                                            v2214 = v2278 + 4;
                                            while (v2210 != v2215)
                                            {
                                              int v2279 = *--v2210;
                                              *((_DWORD *)v2278 - 1) = v2279;
                                              v2278 -= 4;
                                            }
                                            *(void *)uint64_t v2209 = v2278;
                                            *v2211 = v2214;
                                            void *v2213 = &v2220[4 * v2219];
                                            if (v2215) {
                                              operator delete(v2215);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2210 = 201;
                                            v2214 = v2210 + 1;
                                          }
                                          *v2211 = v2214;
                                          if (!*v14)
                                          {
LABEL_4031:
                                            if ((*((unsigned char *)__p + 25) & 4) != 0)
                                            {
                                              uint64_t v223 = *v12 + 24 * v13;
                                              uint64_t v225 = (int **)(v223 + 8);
                                              uint64_t v224 = *(int **)(v223 + 8);
                                              uint64_t v227 = (void *)(v223 + 16);
                                              unint64_t v2280 = *(void *)(v223 + 16);
                                              if ((unint64_t)v224 < v2280)
                                              {
                                                int v228 = 202;
                                                goto LABEL_2185;
                                              }
                                              double v229 = *(int **)v223;
                                              uint64_t v2281 = ((uint64_t)v224 - *(void *)v223) >> 2;
                                              unint64_t v2282 = v2281 + 1;
                                              if ((unint64_t)(v2281 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2283 = v2280 - (void)v229;
                                              if (v2283 >> 1 > v2282) {
                                                unint64_t v2282 = v2283 >> 1;
                                              }
                                              if ((unint64_t)v2283 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v233 = v2282;
                                              }
                                              if (v233)
                                              {
                                                uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                                                uint64_t v224 = *v225;
                                                double v229 = *(int **)v223;
                                              }
                                              else
                                              {
                                                uint64_t v234 = 0;
                                              }
                                              uint64_t v457 = &v234[4 * v2281];
                                              *(_DWORD *)uint64_t v457 = 202;
                                              unint64_t v458 = (int *)(v457 + 4);
                                              while (v224 != v229)
                                              {
                                                int v2340 = *--v224;
                                                *((_DWORD *)v457 - 1) = v2340;
                                                v457 -= 4;
                                              }
                                              goto LABEL_3707;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 8:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 2) & 0x80) == 0) {
              goto LABEL_493;
            }
            uint64_t v105 = *v12 + 24 * v13;
            uint64_t v107 = (_DWORD **)(v105 + 8);
            double v106 = *(_DWORD **)(v105 + 8);
            uint64_t v109 = (void *)(v105 + 16);
            unint64_t v108 = *(void *)(v105 + 16);
            if ((unint64_t)v106 >= v108)
            {
              uint64_t v201 = *(_DWORD **)v105;
              uint64_t v202 = ((uint64_t)v106 - *(void *)v105) >> 2;
              unint64_t v203 = v202 + 1;
              if ((unint64_t)(v202 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v204 = v108 - (void)v201;
              if (v204 >> 1 > v203) {
                unint64_t v203 = v204 >> 1;
              }
              if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v205 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v205 = v203;
              }
              if (v205)
              {
                unint64_t v206 = (char *)sub_458C8((uint64_t)v109, v205);
                double v106 = *v107;
                uint64_t v201 = *(_DWORD **)v105;
              }
              else
              {
                unint64_t v206 = 0;
              }
              unsigned __int8 v429 = &v206[4 * v202];
              *(_DWORD *)unsigned __int8 v429 = 23;
              double v110 = v429 + 4;
              while (v106 != v201)
              {
                int v430 = *--v106;
                *((_DWORD *)v429 - 1) = v430;
                v429 -= 4;
              }
              *(void *)uint64_t v105 = v429;
              *uint64_t v107 = v110;
              void *v109 = &v206[4 * v205];
              if (v201) {
                operator delete(v201);
              }
            }
            else
            {
              *double v106 = 23;
              double v110 = v106 + 1;
            }
            *uint64_t v107 = v110;
            if (!*v14)
            {
LABEL_493:
              if ((*((unsigned char *)__p + 3) & 1) == 0) {
                goto LABEL_1269;
              }
              uint64_t v431 = *v12 + 24 * v13;
              char v433 = (_DWORD **)(v431 + 8);
              unint64_t v432 = *(_DWORD **)(v431 + 8);
              uint64_t v435 = (void *)(v431 + 16);
              unint64_t v434 = *(void *)(v431 + 16);
              if ((unint64_t)v432 >= v434)
              {
                uint64_t v437 = *(_DWORD **)v431;
                uint64_t v438 = ((uint64_t)v432 - *(void *)v431) >> 2;
                unint64_t v439 = v438 + 1;
                if ((unint64_t)(v438 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v440 = v434 - (void)v437;
                if (v440 >> 1 > v439) {
                  unint64_t v439 = v440 >> 1;
                }
                if ((unint64_t)v440 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v441 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v441 = v439;
                }
                if (v441)
                {
                  double v442 = (char *)sub_458C8((uint64_t)v435, v441);
                  unint64_t v432 = *v433;
                  uint64_t v437 = *(_DWORD **)v431;
                }
                else
                {
                  double v442 = 0;
                }
                int v628 = &v442[4 * v438];
                *(_DWORD *)int v628 = 24;
                uint64_t v436 = v628 + 4;
                while (v432 != v437)
                {
                  int v629 = *--v432;
                  *((_DWORD *)v628 - 1) = v629;
                  v628 -= 4;
                }
                *(void *)uint64_t v431 = v628;
                char *v433 = v436;
                *uint64_t v435 = &v442[4 * v441];
                if (v437) {
                  operator delete(v437);
                }
              }
              else
              {
                _DWORD *v432 = 24;
                uint64_t v436 = v432 + 1;
              }
              char *v433 = v436;
              if (!*v14)
              {
LABEL_1269:
                if ((*((unsigned char *)__p + 3) & 2) == 0) {
                  goto LABEL_4032;
                }
                uint64_t v630 = *v12 + 24 * v13;
                char v632 = (_DWORD **)(v630 + 8);
                int v631 = *(_DWORD **)(v630 + 8);
                unsigned int v634 = (void *)(v630 + 16);
                unint64_t v633 = *(void *)(v630 + 16);
                if ((unint64_t)v631 >= v633)
                {
                  long long v636 = *(_DWORD **)v630;
                  uint64_t v637 = ((uint64_t)v631 - *(void *)v630) >> 2;
                  unint64_t v638 = v637 + 1;
                  if ((unint64_t)(v637 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v639 = v633 - (void)v636;
                  if (v639 >> 1 > v638) {
                    unint64_t v638 = v639 >> 1;
                  }
                  if ((unint64_t)v639 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v640 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v640 = v638;
                  }
                  if (v640)
                  {
                    int v641 = (char *)sub_458C8((uint64_t)v634, v640);
                    int v631 = *v632;
                    long long v636 = *(_DWORD **)v630;
                  }
                  else
                  {
                    int v641 = 0;
                  }
                  int v824 = &v641[4 * v637];
                  *(_DWORD *)int v824 = 25;
                  long long v635 = v824 + 4;
                  while (v631 != v636)
                  {
                    int v825 = *--v631;
                    *((_DWORD *)v824 - 1) = v825;
                    v824 -= 4;
                  }
                  *(void *)uint64_t v630 = v824;
                  unint64_t *v632 = v635;
                  void *v634 = &v641[4 * v640];
                  if (v636) {
                    operator delete(v636);
                  }
                }
                else
                {
                  *int v631 = 25;
                  long long v635 = v631 + 1;
                }
                unint64_t *v632 = v635;
                if (!*v14)
                {
LABEL_4032:
                  if ((*((unsigned char *)__p + 3) & 4) == 0) {
                    goto LABEL_4033;
                  }
                  uint64_t v826 = *v12 + 24 * v13;
                  uint64_t v828 = (_DWORD **)(v826 + 8);
                  uint64_t v827 = *(_DWORD **)(v826 + 8);
                  int v830 = (void *)(v826 + 16);
                  unint64_t v829 = *(void *)(v826 + 16);
                  if ((unint64_t)v827 >= v829)
                  {
                    v832 = *(_DWORD **)v826;
                    uint64_t v833 = ((uint64_t)v827 - *(void *)v826) >> 2;
                    unint64_t v834 = v833 + 1;
                    if ((unint64_t)(v833 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v835 = v829 - (void)v832;
                    if (v835 >> 1 > v834) {
                      unint64_t v834 = v835 >> 1;
                    }
                    if ((unint64_t)v835 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v836 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v836 = v834;
                    }
                    if (v836)
                    {
                      v837 = (char *)sub_458C8((uint64_t)v830, v836);
                      uint64_t v827 = *v828;
                      v832 = *(_DWORD **)v826;
                    }
                    else
                    {
                      v837 = 0;
                    }
                    v1008 = &v837[4 * v833];
                    *(_DWORD *)v1008 = 26;
                    v831 = v1008 + 4;
                    while (v827 != v832)
                    {
                      int v1009 = *--v827;
                      *((_DWORD *)v1008 - 1) = v1009;
                      v1008 -= 4;
                    }
                    *(void *)uint64_t v826 = v1008;
                    *uint64_t v828 = v831;
                    *int v830 = &v837[4 * v836];
                    if (v832) {
                      operator delete(v832);
                    }
                  }
                  else
                  {
                    _DWORD *v827 = 26;
                    v831 = v827 + 1;
                  }
                  *uint64_t v828 = v831;
                  if (!*v14)
                  {
LABEL_4033:
                    if ((*((unsigned char *)__p + 3) & 8) != 0)
                    {
                      uint64_t v223 = *v12 + 24 * v13;
                      uint64_t v225 = (int **)(v223 + 8);
                      uint64_t v224 = *(int **)(v223 + 8);
                      uint64_t v227 = (void *)(v223 + 16);
                      unint64_t v1010 = *(void *)(v223 + 16);
                      if ((unint64_t)v224 < v1010)
                      {
                        int v228 = 27;
                        goto LABEL_2185;
                      }
                      double v229 = *(int **)v223;
                      uint64_t v1011 = ((uint64_t)v224 - *(void *)v223) >> 2;
                      unint64_t v1012 = v1011 + 1;
                      if ((unint64_t)(v1011 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v1013 = v1010 - (void)v229;
                      if (v1013 >> 1 > v1012) {
                        unint64_t v1012 = v1013 >> 1;
                      }
                      if ((unint64_t)v1013 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v233 = v1012;
                      }
                      if (v233)
                      {
                        uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                        uint64_t v224 = *v225;
                        double v229 = *(int **)v223;
                      }
                      else
                      {
                        uint64_t v234 = 0;
                      }
                      uint64_t v457 = &v234[4 * v1011];
                      *(_DWORD *)uint64_t v457 = 27;
                      unint64_t v458 = (int *)(v457 + 4);
                      while (v224 != v229)
                      {
                        int v1194 = *--v224;
                        *((_DWORD *)v457 - 1) = v1194;
                        v457 -= 4;
                      }
                      goto LABEL_3707;
                    }
                  }
                }
              }
            }
          }
          break;
        case 9:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 8) & 0x20) == 0) {
              goto LABEL_284;
            }
            uint64_t v45 = *v12 + 24 * v13;
            uint64_t v47 = (_DWORD **)(v45 + 8);
            int v46 = *(_DWORD **)(v45 + 8);
            uint64_t v49 = (void *)(v45 + 16);
            unint64_t v48 = *(void *)(v45 + 16);
            if ((unint64_t)v46 >= v48)
            {
              uint64_t v135 = *(_DWORD **)v45;
              uint64_t v136 = ((uint64_t)v46 - *(void *)v45) >> 2;
              unint64_t v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v138 = v48 - (void)v135;
              if (v138 >> 1 > v137) {
                unint64_t v137 = v138 >> 1;
              }
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v139 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v137;
              }
              if (v139)
              {
                uint64_t v140 = (char *)sub_458C8((uint64_t)v49, v139);
                int v46 = *v47;
                uint64_t v135 = *(_DWORD **)v45;
              }
              else
              {
                uint64_t v140 = 0;
              }
              uint64_t v263 = &v140[4 * v136];
              *(_DWORD *)uint64_t v263 = 69;
              uint64_t v50 = v263 + 4;
              while (v46 != v135)
              {
                int v264 = *--v46;
                *((_DWORD *)v263 - 1) = v264;
                v263 -= 4;
              }
              *(void *)uint64_t v45 = v263;
              *uint64_t v47 = v50;
              *uint64_t v49 = &v140[4 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *int v46 = 69;
              uint64_t v50 = v46 + 1;
            }
            *uint64_t v47 = v50;
            if (!*v14)
            {
LABEL_284:
              if ((*((unsigned char *)__p + 8) & 0x40) == 0) {
                goto LABEL_3674;
              }
              uint64_t v265 = *v12 + 24 * v13;
              char v267 = (_DWORD **)(v265 + 8);
              int v266 = *(_DWORD **)(v265 + 8);
              uint64_t v269 = (void *)(v265 + 16);
              unint64_t v268 = *(void *)(v265 + 16);
              if ((unint64_t)v266 >= v268)
              {
                unint64_t v271 = *(_DWORD **)v265;
                uint64_t v272 = ((uint64_t)v266 - *(void *)v265) >> 2;
                unint64_t v273 = v272 + 1;
                if ((unint64_t)(v272 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v274 = v268 - (void)v271;
                if (v274 >> 1 > v273) {
                  unint64_t v273 = v274 >> 1;
                }
                if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v275 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v275 = v273;
                }
                if (v275)
                {
                  int v276 = (char *)sub_458C8((uint64_t)v269, v275);
                  int v266 = *v267;
                  unint64_t v271 = *(_DWORD **)v265;
                }
                else
                {
                  int v276 = 0;
                }
                int v488 = &v276[4 * v272];
                *(_DWORD *)int v488 = 70;
                uint64_t v270 = v488 + 4;
                while (v266 != v271)
                {
                  int v489 = *--v266;
                  *((_DWORD *)v488 - 1) = v489;
                  v488 -= 4;
                }
                *(void *)uint64_t v265 = v488;
                *char v267 = v270;
                void *v269 = &v276[4 * v275];
                if (v271) {
                  operator delete(v271);
                }
              }
              else
              {
                _DWORD *v266 = 70;
                uint64_t v270 = v266 + 1;
              }
              *char v267 = v270;
              if (!*v14)
              {
LABEL_3674:
                if ((*((unsigned char *)__p + 8) & 0x80) == 0) {
                  goto LABEL_4034;
                }
                uint64_t v490 = *v12 + 24 * v13;
                uint64_t v492 = (_DWORD **)(v490 + 8);
                unint64_t v491 = *(_DWORD **)(v490 + 8);
                uint64_t v494 = (void *)(v490 + 16);
                unint64_t v493 = *(void *)(v490 + 16);
                if ((unint64_t)v491 >= v493)
                {
                  double v496 = *(_DWORD **)v490;
                  uint64_t v497 = ((uint64_t)v491 - *(void *)v490) >> 2;
                  unint64_t v498 = v497 + 1;
                  if ((unint64_t)(v497 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v499 = v493 - (void)v496;
                  if (v499 >> 1 > v498) {
                    unint64_t v498 = v499 >> 1;
                  }
                  if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v500 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v500 = v498;
                  }
                  if (v500)
                  {
                    unint64_t v501 = (char *)sub_458C8((uint64_t)v494, v500);
                    unint64_t v491 = *v492;
                    double v496 = *(_DWORD **)v490;
                  }
                  else
                  {
                    unint64_t v501 = 0;
                  }
                  double v692 = &v501[4 * v497];
                  *(_DWORD *)double v692 = 71;
                  unint64_t v495 = v692 + 4;
                  while (v491 != v496)
                  {
                    int v693 = *--v491;
                    *((_DWORD *)v692 - 1) = v693;
                    v692 -= 4;
                  }
                  *(void *)uint64_t v490 = v692;
                  unsigned char *v492 = v495;
                  *uint64_t v494 = &v501[4 * v500];
                  if (v496) {
                    operator delete(v496);
                  }
                }
                else
                {
                  _DWORD *v491 = 71;
                  unint64_t v495 = v491 + 1;
                }
                unsigned char *v492 = v495;
                if (!*v14)
                {
LABEL_4034:
                  if ((*((unsigned char *)__p + 9) & 1) == 0) {
                    goto LABEL_4035;
                  }
                  uint64_t v694 = *v12 + 24 * v13;
                  v696 = (_DWORD **)(v694 + 8);
                  double v695 = *(_DWORD **)(v694 + 8);
                  unint64_t v698 = (void *)(v694 + 16);
                  unint64_t v697 = *(void *)(v694 + 16);
                  if ((unint64_t)v695 >= v697)
                  {
                    v700 = *(_DWORD **)v694;
                    uint64_t v701 = ((uint64_t)v695 - *(void *)v694) >> 2;
                    unint64_t v702 = v701 + 1;
                    if ((unint64_t)(v701 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v703 = v697 - (void)v700;
                    if (v703 >> 1 > v702) {
                      unint64_t v702 = v703 >> 1;
                    }
                    if ((unint64_t)v703 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v704 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v704 = v702;
                    }
                    if (v704)
                    {
                      v705 = (char *)sub_458C8((uint64_t)v698, v704);
                      double v695 = *v696;
                      v700 = *(_DWORD **)v694;
                    }
                    else
                    {
                      v705 = 0;
                    }
                    unsigned int v881 = &v705[4 * v701];
                    *(_DWORD *)unsigned int v881 = 72;
                    double v699 = v881 + 4;
                    while (v695 != v700)
                    {
                      int v882 = *--v695;
                      *((_DWORD *)v881 - 1) = v882;
                      v881 -= 4;
                    }
                    *(void *)uint64_t v694 = v881;
                    unsigned __int8 *v696 = v699;
                    *unint64_t v698 = &v705[4 * v704];
                    if (v700) {
                      operator delete(v700);
                    }
                  }
                  else
                  {
                    _DWORD *v695 = 72;
                    double v699 = v695 + 1;
                  }
                  unsigned __int8 *v696 = v699;
                  if (!*v14)
                  {
LABEL_4035:
                    if ((*((unsigned char *)__p + 9) & 2) == 0) {
                      goto LABEL_4036;
                    }
                    uint64_t v883 = *v12 + 24 * v13;
                    v885 = (_DWORD **)(v883 + 8);
                    unsigned int v884 = *(_DWORD **)(v883 + 8);
                    unint64_t v887 = (void *)(v883 + 16);
                    unint64_t v886 = *(void *)(v883 + 16);
                    if ((unint64_t)v884 >= v886)
                    {
                      unsigned int v889 = *(_DWORD **)v883;
                      uint64_t v890 = ((uint64_t)v884 - *(void *)v883) >> 2;
                      unint64_t v891 = v890 + 1;
                      if ((unint64_t)(v890 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v892 = v886 - (void)v889;
                      if (v892 >> 1 > v891) {
                        unint64_t v891 = v892 >> 1;
                      }
                      if ((unint64_t)v892 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v893 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v893 = v891;
                      }
                      if (v893)
                      {
                        unsigned int v894 = (char *)sub_458C8((uint64_t)v887, v893);
                        unsigned int v884 = *v885;
                        unsigned int v889 = *(_DWORD **)v883;
                      }
                      else
                      {
                        unsigned int v894 = 0;
                      }
                      v1056 = &v894[4 * v890];
                      *(_DWORD *)v1056 = 73;
                      unsigned int v888 = v1056 + 4;
                      while (v884 != v889)
                      {
                        int v1057 = *--v884;
                        *((_DWORD *)v1056 - 1) = v1057;
                        v1056 -= 4;
                      }
                      *(void *)uint64_t v883 = v1056;
                      unint64_t *v885 = v888;
                      *unint64_t v887 = &v894[4 * v893];
                      if (v889) {
                        operator delete(v889);
                      }
                    }
                    else
                    {
                      _DWORD *v884 = 73;
                      unsigned int v888 = v884 + 1;
                    }
                    unint64_t *v885 = v888;
                    if (!*v14)
                    {
LABEL_4036:
                      if ((*((unsigned char *)__p + 9) & 4) == 0) {
                        goto LABEL_4037;
                      }
                      uint64_t v1058 = *v12 + 24 * v13;
                      double v1060 = (_DWORD **)(v1058 + 8);
                      double v1059 = *(_DWORD **)(v1058 + 8);
                      v1062 = (void *)(v1058 + 16);
                      unint64_t v1061 = *(void *)(v1058 + 16);
                      if ((unint64_t)v1059 >= v1061)
                      {
                        unsigned int v1064 = *(_DWORD **)v1058;
                        uint64_t v1065 = ((uint64_t)v1059 - *(void *)v1058) >> 2;
                        unint64_t v1066 = v1065 + 1;
                        if ((unint64_t)(v1065 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1067 = v1061 - (void)v1064;
                        if (v1067 >> 1 > v1066) {
                          unint64_t v1066 = v1067 >> 1;
                        }
                        if ((unint64_t)v1067 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1068 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1068 = v1066;
                        }
                        if (v1068)
                        {
                          v1069 = (char *)sub_458C8((uint64_t)v1062, v1068);
                          double v1059 = *v1060;
                          unsigned int v1064 = *(_DWORD **)v1058;
                        }
                        else
                        {
                          v1069 = 0;
                        }
                        double v1229 = &v1069[4 * v1065];
                        *(_DWORD *)double v1229 = 74;
                        v1063 = v1229 + 4;
                        while (v1059 != v1064)
                        {
                          int v1230 = *--v1059;
                          *((_DWORD *)v1229 - 1) = v1230;
                          v1229 -= 4;
                        }
                        *(void *)uint64_t v1058 = v1229;
                        *double v1060 = v1063;
                        void *v1062 = &v1069[4 * v1068];
                        if (v1064) {
                          operator delete(v1064);
                        }
                      }
                      else
                      {
                        *double v1059 = 74;
                        v1063 = v1059 + 1;
                      }
                      *double v1060 = v1063;
                      if (!*v14)
                      {
LABEL_4037:
                        if ((*((unsigned char *)__p + 9) & 8) == 0) {
                          goto LABEL_4038;
                        }
                        uint64_t v1231 = *v12 + 24 * v13;
                        unsigned int v1233 = (_DWORD **)(v1231 + 8);
                        v1232 = *(_DWORD **)(v1231 + 8);
                        unint64_t v1235 = (void *)(v1231 + 16);
                        unint64_t v1234 = *(void *)(v1231 + 16);
                        if ((unint64_t)v1232 >= v1234)
                        {
                          v1237 = *(_DWORD **)v1231;
                          uint64_t v1238 = ((uint64_t)v1232 - *(void *)v1231) >> 2;
                          unint64_t v1239 = v1238 + 1;
                          if ((unint64_t)(v1238 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1240 = v1234 - (void)v1237;
                          if (v1240 >> 1 > v1239) {
                            unint64_t v1239 = v1240 >> 1;
                          }
                          if ((unint64_t)v1240 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1241 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1241 = v1239;
                          }
                          if (v1241)
                          {
                            double v1242 = (char *)sub_458C8((uint64_t)v1235, v1241);
                            v1232 = *v1233;
                            v1237 = *(_DWORD **)v1231;
                          }
                          else
                          {
                            double v1242 = 0;
                          }
                          v1378 = &v1242[4 * v1238];
                          *(_DWORD *)v1378 = 75;
                          double v1236 = v1378 + 4;
                          while (v1232 != v1237)
                          {
                            int v1379 = *--v1232;
                            *((_DWORD *)v1378 - 1) = v1379;
                            v1378 -= 4;
                          }
                          *(void *)uint64_t v1231 = v1378;
                          *unsigned int v1233 = v1236;
                          *unint64_t v1235 = &v1242[4 * v1241];
                          if (v1237) {
                            operator delete(v1237);
                          }
                        }
                        else
                        {
                          _DWORD *v1232 = 75;
                          double v1236 = v1232 + 1;
                        }
                        *unsigned int v1233 = v1236;
                        if (!*v14)
                        {
LABEL_4038:
                          if ((*((unsigned char *)__p + 9) & 0x10) == 0) {
                            goto LABEL_4039;
                          }
                          uint64_t v1380 = *v12 + 24 * v13;
                          double v1382 = (_DWORD **)(v1380 + 8);
                          unint64_t v1381 = *(_DWORD **)(v1380 + 8);
                          double v1384 = (void *)(v1380 + 16);
                          unint64_t v1383 = *(void *)(v1380 + 16);
                          if ((unint64_t)v1381 >= v1383)
                          {
                            v1386 = *(_DWORD **)v1380;
                            uint64_t v1387 = ((uint64_t)v1381 - *(void *)v1380) >> 2;
                            unint64_t v1388 = v1387 + 1;
                            if ((unint64_t)(v1387 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1389 = v1383 - (void)v1386;
                            if (v1389 >> 1 > v1388) {
                              unint64_t v1388 = v1389 >> 1;
                            }
                            if ((unint64_t)v1389 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1390 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1390 = v1388;
                            }
                            if (v1390)
                            {
                              v1391 = (char *)sub_458C8((uint64_t)v1384, v1390);
                              unint64_t v1381 = *v1382;
                              v1386 = *(_DWORD **)v1380;
                            }
                            else
                            {
                              v1391 = 0;
                            }
                            v1518 = &v1391[4 * v1387];
                            *(_DWORD *)v1518 = 76;
                            v1385 = v1518 + 4;
                            while (v1381 != v1386)
                            {
                              int v1519 = *--v1381;
                              *((_DWORD *)v1518 - 1) = v1519;
                              v1518 -= 4;
                            }
                            *(void *)uint64_t v1380 = v1518;
                            *double v1382 = v1385;
                            *double v1384 = &v1391[4 * v1390];
                            if (v1386) {
                              operator delete(v1386);
                            }
                          }
                          else
                          {
                            *unint64_t v1381 = 76;
                            v1385 = v1381 + 1;
                          }
                          *double v1382 = v1385;
                          if (!*v14)
                          {
LABEL_4039:
                            if ((*((unsigned char *)__p + 9) & 0x20) == 0) {
                              goto LABEL_4040;
                            }
                            uint64_t v1520 = *v12 + 24 * v13;
                            double v1522 = (_DWORD **)(v1520 + 8);
                            unsigned int v1521 = *(_DWORD **)(v1520 + 8);
                            v1524 = (void *)(v1520 + 16);
                            unint64_t v1523 = *(void *)(v1520 + 16);
                            if ((unint64_t)v1521 >= v1523)
                            {
                              unint64_t v1526 = *(_DWORD **)v1520;
                              uint64_t v1527 = ((uint64_t)v1521 - *(void *)v1520) >> 2;
                              unint64_t v1528 = v1527 + 1;
                              if ((unint64_t)(v1527 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1529 = v1523 - (void)v1526;
                              if (v1529 >> 1 > v1528) {
                                unint64_t v1528 = v1529 >> 1;
                              }
                              if ((unint64_t)v1529 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1530 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1530 = v1528;
                              }
                              if (v1530)
                              {
                                v1531 = (char *)sub_458C8((uint64_t)v1524, v1530);
                                unsigned int v1521 = *v1522;
                                unint64_t v1526 = *(_DWORD **)v1520;
                              }
                              else
                              {
                                v1531 = 0;
                              }
                              v1659 = &v1531[4 * v1527];
                              *(_DWORD *)v1659 = 77;
                              v1525 = v1659 + 4;
                              while (v1521 != v1526)
                              {
                                int v1660 = *--v1521;
                                *((_DWORD *)v1659 - 1) = v1660;
                                v1659 -= 4;
                              }
                              *(void *)uint64_t v1520 = v1659;
                              *double v1522 = v1525;
                              void *v1524 = &v1531[4 * v1530];
                              if (v1526) {
                                operator delete(v1526);
                              }
                            }
                            else
                            {
                              *unsigned int v1521 = 77;
                              v1525 = v1521 + 1;
                            }
                            *double v1522 = v1525;
                            if (!*v14)
                            {
LABEL_4040:
                              if ((*((unsigned char *)__p + 9) & 0x40) == 0) {
                                goto LABEL_4041;
                              }
                              uint64_t v1661 = *v12 + 24 * v13;
                              unint64_t v1663 = (_DWORD **)(v1661 + 8);
                              unint64_t v1662 = *(_DWORD **)(v1661 + 8);
                              v1665 = (void *)(v1661 + 16);
                              unint64_t v1664 = *(void *)(v1661 + 16);
                              if ((unint64_t)v1662 >= v1664)
                              {
                                double v1667 = *(_DWORD **)v1661;
                                uint64_t v1668 = ((uint64_t)v1662 - *(void *)v1661) >> 2;
                                unint64_t v1669 = v1668 + 1;
                                if ((unint64_t)(v1668 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1670 = v1664 - (void)v1667;
                                if (v1670 >> 1 > v1669) {
                                  unint64_t v1669 = v1670 >> 1;
                                }
                                if ((unint64_t)v1670 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1671 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1671 = v1669;
                                }
                                if (v1671)
                                {
                                  double v1672 = (char *)sub_458C8((uint64_t)v1665, v1671);
                                  unint64_t v1662 = *v1663;
                                  double v1667 = *(_DWORD **)v1661;
                                }
                                else
                                {
                                  double v1672 = 0;
                                }
                                int v1783 = &v1672[4 * v1668];
                                *(_DWORD *)int v1783 = 78;
                                v1666 = v1783 + 4;
                                while (v1662 != v1667)
                                {
                                  int v1784 = *--v1662;
                                  *((_DWORD *)v1783 - 1) = v1784;
                                  v1783 -= 4;
                                }
                                *(void *)uint64_t v1661 = v1783;
                                *unint64_t v1663 = v1666;
                                void *v1665 = &v1672[4 * v1671];
                                if (v1667) {
                                  operator delete(v1667);
                                }
                              }
                              else
                              {
                                *unint64_t v1662 = 78;
                                v1666 = v1662 + 1;
                              }
                              *unint64_t v1663 = v1666;
                              if (!*v14)
                              {
LABEL_4041:
                                if ((*((unsigned char *)__p + 9) & 0x80) == 0) {
                                  goto LABEL_4042;
                                }
                                uint64_t v1785 = *v12 + 24 * v13;
                                v1787 = (_DWORD **)(v1785 + 8);
                                v1786 = *(_DWORD **)(v1785 + 8);
                                int v1789 = (void *)(v1785 + 16);
                                unint64_t v1788 = *(void *)(v1785 + 16);
                                if ((unint64_t)v1786 >= v1788)
                                {
                                  int v1791 = *(_DWORD **)v1785;
                                  uint64_t v1792 = ((uint64_t)v1786 - *(void *)v1785) >> 2;
                                  unint64_t v1793 = v1792 + 1;
                                  if ((unint64_t)(v1792 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1794 = v1788 - (void)v1791;
                                  if (v1794 >> 1 > v1793) {
                                    unint64_t v1793 = v1794 >> 1;
                                  }
                                  if ((unint64_t)v1794 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1795 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1795 = v1793;
                                  }
                                  if (v1795)
                                  {
                                    unsigned int v1796 = (char *)sub_458C8((uint64_t)v1789, v1795);
                                    v1786 = *v1787;
                                    int v1791 = *(_DWORD **)v1785;
                                  }
                                  else
                                  {
                                    unsigned int v1796 = 0;
                                  }
                                  v1886 = &v1796[4 * v1792];
                                  *(_DWORD *)v1886 = 79;
                                  int v1790 = v1886 + 4;
                                  while (v1786 != v1791)
                                  {
                                    int v1887 = *--v1786;
                                    *((_DWORD *)v1886 - 1) = v1887;
                                    v1886 -= 4;
                                  }
                                  *(void *)uint64_t v1785 = v1886;
                                  unsigned __int8 *v1787 = v1790;
                                  *int v1789 = &v1796[4 * v1795];
                                  if (v1791) {
                                    operator delete(v1791);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1786 = 79;
                                  int v1790 = v1786 + 1;
                                }
                                unsigned __int8 *v1787 = v1790;
                                if (!*v14)
                                {
LABEL_4042:
                                  if ((*((unsigned char *)__p + 10) & 1) == 0) {
                                    goto LABEL_4043;
                                  }
                                  uint64_t v1888 = *v12 + 24 * v13;
                                  unsigned int v1890 = (_DWORD **)(v1888 + 8);
                                  unint64_t v1889 = *(_DWORD **)(v1888 + 8);
                                  v1892 = (void *)(v1888 + 16);
                                  unint64_t v1891 = *(void *)(v1888 + 16);
                                  if ((unint64_t)v1889 >= v1891)
                                  {
                                    v1894 = *(_DWORD **)v1888;
                                    uint64_t v1895 = ((uint64_t)v1889 - *(void *)v1888) >> 2;
                                    unint64_t v1896 = v1895 + 1;
                                    if ((unint64_t)(v1895 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1897 = v1891 - (void)v1894;
                                    if (v1897 >> 1 > v1896) {
                                      unint64_t v1896 = v1897 >> 1;
                                    }
                                    if ((unint64_t)v1897 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1898 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1898 = v1896;
                                    }
                                    if (v1898)
                                    {
                                      v1899 = (char *)sub_458C8((uint64_t)v1892, v1898);
                                      unint64_t v1889 = *v1890;
                                      v1894 = *(_DWORD **)v1888;
                                    }
                                    else
                                    {
                                      v1899 = 0;
                                    }
                                    v1976 = &v1899[4 * v1895];
                                    *(_DWORD *)v1976 = 80;
                                    v1893 = v1976 + 4;
                                    while (v1889 != v1894)
                                    {
                                      int v1977 = *--v1889;
                                      *((_DWORD *)v1976 - 1) = v1977;
                                      v1976 -= 4;
                                    }
                                    *(void *)uint64_t v1888 = v1976;
                                    *unsigned int v1890 = v1893;
                                    void *v1892 = &v1899[4 * v1898];
                                    if (v1894) {
                                      operator delete(v1894);
                                    }
                                  }
                                  else
                                  {
                                    *unint64_t v1889 = 80;
                                    v1893 = v1889 + 1;
                                  }
                                  *unsigned int v1890 = v1893;
                                  if (!*v14)
                                  {
LABEL_4043:
                                    if ((*((unsigned char *)__p + 10) & 2) == 0) {
                                      goto LABEL_4044;
                                    }
                                    uint64_t v1978 = *v12 + 24 * v13;
                                    v1980 = (_DWORD **)(v1978 + 8);
                                    unsigned int v1979 = *(_DWORD **)(v1978 + 8);
                                    v1982 = (void *)(v1978 + 16);
                                    unint64_t v1981 = *(void *)(v1978 + 16);
                                    if ((unint64_t)v1979 >= v1981)
                                    {
                                      unsigned int v1984 = *(_DWORD **)v1978;
                                      uint64_t v1985 = ((uint64_t)v1979 - *(void *)v1978) >> 2;
                                      unint64_t v1986 = v1985 + 1;
                                      if ((unint64_t)(v1985 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v1987 = v1981 - (void)v1984;
                                      if (v1987 >> 1 > v1986) {
                                        unint64_t v1986 = v1987 >> 1;
                                      }
                                      if ((unint64_t)v1987 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v1988 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v1988 = v1986;
                                      }
                                      if (v1988)
                                      {
                                        unsigned int v1989 = (char *)sub_458C8((uint64_t)v1982, v1988);
                                        unsigned int v1979 = *v1980;
                                        unsigned int v1984 = *(_DWORD **)v1978;
                                      }
                                      else
                                      {
                                        unsigned int v1989 = 0;
                                      }
                                      v2061 = &v1989[4 * v1985];
                                      *(_DWORD *)v2061 = 81;
                                      unint64_t v1983 = v2061 + 4;
                                      while (v1979 != v1984)
                                      {
                                        int v2062 = *--v1979;
                                        *((_DWORD *)v2061 - 1) = v2062;
                                        v2061 -= 4;
                                      }
                                      *(void *)uint64_t v1978 = v2061;
                                      unsigned __int8 *v1980 = v1983;
                                      void *v1982 = &v1989[4 * v1988];
                                      if (v1984) {
                                        operator delete(v1984);
                                      }
                                    }
                                    else
                                    {
                                      *unsigned int v1979 = 81;
                                      unint64_t v1983 = v1979 + 1;
                                    }
                                    unsigned __int8 *v1980 = v1983;
                                    if (!*v14)
                                    {
LABEL_4044:
                                      if ((*((unsigned char *)__p + 10) & 4) == 0) {
                                        goto LABEL_4045;
                                      }
                                      uint64_t v2063 = *v12 + 24 * v13;
                                      v2065 = (_DWORD **)(v2063 + 8);
                                      v2064 = *(_DWORD **)(v2063 + 8);
                                      v2067 = (void *)(v2063 + 16);
                                      unint64_t v2066 = *(void *)(v2063 + 16);
                                      if ((unint64_t)v2064 >= v2066)
                                      {
                                        v2069 = *(_DWORD **)v2063;
                                        uint64_t v2070 = ((uint64_t)v2064 - *(void *)v2063) >> 2;
                                        unint64_t v2071 = v2070 + 1;
                                        if ((unint64_t)(v2070 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2072 = v2066 - (void)v2069;
                                        if (v2072 >> 1 > v2071) {
                                          unint64_t v2071 = v2072 >> 1;
                                        }
                                        if ((unint64_t)v2072 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2073 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2073 = v2071;
                                        }
                                        if (v2073)
                                        {
                                          v2074 = (char *)sub_458C8((uint64_t)v2067, v2073);
                                          v2064 = *v2065;
                                          v2069 = *(_DWORD **)v2063;
                                        }
                                        else
                                        {
                                          v2074 = 0;
                                        }
                                        v2145 = &v2074[4 * v2070];
                                        *(_DWORD *)v2145 = 82;
                                        v2068 = v2145 + 4;
                                        while (v2064 != v2069)
                                        {
                                          int v2146 = *--v2064;
                                          *((_DWORD *)v2145 - 1) = v2146;
                                          v2145 -= 4;
                                        }
                                        *(void *)uint64_t v2063 = v2145;
                                        *v2065 = v2068;
                                        void *v2067 = &v2074[4 * v2073];
                                        if (v2069) {
                                          operator delete(v2069);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2064 = 82;
                                        v2068 = v2064 + 1;
                                      }
                                      *v2065 = v2068;
                                      if (!*v14)
                                      {
LABEL_4045:
                                        if ((*((unsigned char *)__p + 10) & 8) == 0) {
                                          goto LABEL_4046;
                                        }
                                        uint64_t v2147 = *v12 + 24 * v13;
                                        v2149 = (_DWORD **)(v2147 + 8);
                                        v2148 = *(_DWORD **)(v2147 + 8);
                                        v2151 = (void *)(v2147 + 16);
                                        unint64_t v2150 = *(void *)(v2147 + 16);
                                        if ((unint64_t)v2148 >= v2150)
                                        {
                                          v2153 = *(_DWORD **)v2147;
                                          uint64_t v2154 = ((uint64_t)v2148 - *(void *)v2147) >> 2;
                                          unint64_t v2155 = v2154 + 1;
                                          if ((unint64_t)(v2154 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2156 = v2150 - (void)v2153;
                                          if (v2156 >> 1 > v2155) {
                                            unint64_t v2155 = v2156 >> 1;
                                          }
                                          if ((unint64_t)v2156 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2157 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2157 = v2155;
                                          }
                                          if (v2157)
                                          {
                                            v2158 = (char *)sub_458C8((uint64_t)v2151, v2157);
                                            v2148 = *v2149;
                                            v2153 = *(_DWORD **)v2147;
                                          }
                                          else
                                          {
                                            v2158 = 0;
                                          }
                                          v2221 = &v2158[4 * v2154];
                                          *(_DWORD *)v2221 = 83;
                                          v2152 = v2221 + 4;
                                          while (v2148 != v2153)
                                          {
                                            int v2222 = *--v2148;
                                            *((_DWORD *)v2221 - 1) = v2222;
                                            v2221 -= 4;
                                          }
                                          *(void *)uint64_t v2147 = v2221;
                                          *v2149 = v2152;
                                          void *v2151 = &v2158[4 * v2157];
                                          if (v2153) {
                                            operator delete(v2153);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2148 = 83;
                                          v2152 = v2148 + 1;
                                        }
                                        *v2149 = v2152;
                                        if (!*v14)
                                        {
LABEL_4046:
                                          if ((*((unsigned char *)__p + 10) & 0x10) == 0) {
                                            goto LABEL_4047;
                                          }
                                          uint64_t v2223 = *v12 + 24 * v13;
                                          v2225 = (_DWORD **)(v2223 + 8);
                                          v2224 = *(_DWORD **)(v2223 + 8);
                                          v2227 = (void *)(v2223 + 16);
                                          unint64_t v2226 = *(void *)(v2223 + 16);
                                          if ((unint64_t)v2224 >= v2226)
                                          {
                                            v2229 = *(_DWORD **)v2223;
                                            uint64_t v2230 = ((uint64_t)v2224 - *(void *)v2223) >> 2;
                                            unint64_t v2231 = v2230 + 1;
                                            if ((unint64_t)(v2230 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2232 = v2226 - (void)v2229;
                                            if (v2232 >> 1 > v2231) {
                                              unint64_t v2231 = v2232 >> 1;
                                            }
                                            if ((unint64_t)v2232 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2233 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2233 = v2231;
                                            }
                                            if (v2233)
                                            {
                                              v2234 = (char *)sub_458C8((uint64_t)v2227, v2233);
                                              v2224 = *v2225;
                                              v2229 = *(_DWORD **)v2223;
                                            }
                                            else
                                            {
                                              v2234 = 0;
                                            }
                                            v2284 = &v2234[4 * v2230];
                                            *(_DWORD *)v2284 = 84;
                                            v2228 = v2284 + 4;
                                            while (v2224 != v2229)
                                            {
                                              int v2285 = *--v2224;
                                              *((_DWORD *)v2284 - 1) = v2285;
                                              v2284 -= 4;
                                            }
                                            *(void *)uint64_t v2223 = v2284;
                                            *v2225 = v2228;
                                            void *v2227 = &v2234[4 * v2233];
                                            if (v2229) {
                                              operator delete(v2229);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2224 = 84;
                                            v2228 = v2224 + 1;
                                          }
                                          *v2225 = v2228;
                                          if (!*v14)
                                          {
LABEL_4047:
                                            if ((*((unsigned char *)__p + 10) & 0x20) == 0) {
                                              goto LABEL_4048;
                                            }
                                            uint64_t v2286 = *v12 + 24 * v13;
                                            v2288 = (_DWORD **)(v2286 + 8);
                                            v2287 = *(_DWORD **)(v2286 + 8);
                                            v2290 = (void *)(v2286 + 16);
                                            unint64_t v2289 = *(void *)(v2286 + 16);
                                            if ((unint64_t)v2287 >= v2289)
                                            {
                                              v2292 = *(_DWORD **)v2286;
                                              uint64_t v2293 = ((uint64_t)v2287 - *(void *)v2286) >> 2;
                                              unint64_t v2294 = v2293 + 1;
                                              if ((unint64_t)(v2293 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2295 = v2289 - (void)v2292;
                                              if (v2295 >> 1 > v2294) {
                                                unint64_t v2294 = v2295 >> 1;
                                              }
                                              if ((unint64_t)v2295 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2296 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2296 = v2294;
                                              }
                                              if (v2296)
                                              {
                                                v2297 = (char *)sub_458C8((uint64_t)v2290, v2296);
                                                v2287 = *v2288;
                                                v2292 = *(_DWORD **)v2286;
                                              }
                                              else
                                              {
                                                v2297 = 0;
                                              }
                                              v2341 = &v2297[4 * v2293];
                                              *(_DWORD *)v2341 = 85;
                                              v2291 = v2341 + 4;
                                              while (v2287 != v2292)
                                              {
                                                int v2342 = *--v2287;
                                                *((_DWORD *)v2341 - 1) = v2342;
                                                v2341 -= 4;
                                              }
                                              *(void *)uint64_t v2286 = v2341;
                                              *v2288 = v2291;
                                              void *v2290 = &v2297[4 * v2296];
                                              if (v2292) {
                                                operator delete(v2292);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2287 = 85;
                                              v2291 = v2287 + 1;
                                            }
                                            *v2288 = v2291;
                                            if (!*v14)
                                            {
LABEL_4048:
                                              if ((*((unsigned char *)__p + 10) & 0x40) == 0) {
                                                goto LABEL_4049;
                                              }
                                              uint64_t v2343 = *v12 + 24 * v13;
                                              v2345 = (_DWORD **)(v2343 + 8);
                                              v2344 = *(_DWORD **)(v2343 + 8);
                                              v2347 = (void *)(v2343 + 16);
                                              unint64_t v2346 = *(void *)(v2343 + 16);
                                              if ((unint64_t)v2344 >= v2346)
                                              {
                                                v2349 = *(_DWORD **)v2343;
                                                uint64_t v2350 = ((uint64_t)v2344 - *(void *)v2343) >> 2;
                                                unint64_t v2351 = v2350 + 1;
                                                if ((unint64_t)(v2350 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2352 = v2346 - (void)v2349;
                                                if (v2352 >> 1 > v2351) {
                                                  unint64_t v2351 = v2352 >> 1;
                                                }
                                                if ((unint64_t)v2352 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v2353 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v2353 = v2351;
                                                }
                                                if (v2353)
                                                {
                                                  v2354 = (char *)sub_458C8((uint64_t)v2347, v2353);
                                                  v2344 = *v2345;
                                                  v2349 = *(_DWORD **)v2343;
                                                }
                                                else
                                                {
                                                  v2354 = 0;
                                                }
                                                v2389 = &v2354[4 * v2350];
                                                *(_DWORD *)v2389 = 86;
                                                v2348 = v2389 + 4;
                                                while (v2344 != v2349)
                                                {
                                                  int v2390 = *--v2344;
                                                  *((_DWORD *)v2389 - 1) = v2390;
                                                  v2389 -= 4;
                                                }
                                                *(void *)uint64_t v2343 = v2389;
                                                *v2345 = v2348;
                                                void *v2347 = &v2354[4 * v2353];
                                                if (v2349) {
                                                  operator delete(v2349);
                                                }
                                              }
                                              else
                                              {
                                                _DWORD *v2344 = 86;
                                                v2348 = v2344 + 1;
                                              }
                                              *v2345 = v2348;
                                              if (!*v14)
                                              {
LABEL_4049:
                                                if ((*((unsigned char *)__p + 10) & 0x80) == 0) {
                                                  goto LABEL_4050;
                                                }
                                                uint64_t v2391 = *v12 + 24 * v13;
                                                v2393 = (_DWORD **)(v2391 + 8);
                                                v2392 = *(_DWORD **)(v2391 + 8);
                                                v2395 = (void *)(v2391 + 16);
                                                unint64_t v2394 = *(void *)(v2391 + 16);
                                                if ((unint64_t)v2392 >= v2394)
                                                {
                                                  v2397 = *(_DWORD **)v2391;
                                                  uint64_t v2398 = ((uint64_t)v2392 - *(void *)v2391) >> 2;
                                                  unint64_t v2399 = v2398 + 1;
                                                  if ((unint64_t)(v2398 + 1) >> 62) {
                                                    sub_566C();
                                                  }
                                                  uint64_t v2400 = v2394 - (void)v2397;
                                                  if (v2400 >> 1 > v2399) {
                                                    unint64_t v2399 = v2400 >> 1;
                                                  }
                                                  if ((unint64_t)v2400 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                    unint64_t v2401 = 0x3FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v2401 = v2399;
                                                  }
                                                  if (v2401)
                                                  {
                                                    v2402 = (char *)sub_458C8((uint64_t)v2395, v2401);
                                                    v2392 = *v2393;
                                                    v2397 = *(_DWORD **)v2391;
                                                  }
                                                  else
                                                  {
                                                    v2402 = 0;
                                                  }
                                                  v2432 = &v2402[4 * v2398];
                                                  *(_DWORD *)v2432 = 87;
                                                  v2396 = v2432 + 4;
                                                  while (v2392 != v2397)
                                                  {
                                                    int v2433 = *--v2392;
                                                    *((_DWORD *)v2432 - 1) = v2433;
                                                    v2432 -= 4;
                                                  }
                                                  *(void *)uint64_t v2391 = v2432;
                                                  *v2393 = v2396;
                                                  void *v2395 = &v2402[4 * v2401];
                                                  if (v2397) {
                                                    operator delete(v2397);
                                                  }
                                                }
                                                else
                                                {
                                                  _DWORD *v2392 = 87;
                                                  v2396 = v2392 + 1;
                                                }
                                                *v2393 = v2396;
                                                if (!*v14)
                                                {
LABEL_4050:
                                                  if ((*((unsigned char *)__p + 11) & 1) == 0) {
                                                    goto LABEL_4051;
                                                  }
                                                  uint64_t v2434 = *v12 + 24 * v13;
                                                  v2436 = (_DWORD **)(v2434 + 8);
                                                  v2435 = *(_DWORD **)(v2434 + 8);
                                                  v2438 = (void *)(v2434 + 16);
                                                  unint64_t v2437 = *(void *)(v2434 + 16);
                                                  if ((unint64_t)v2435 >= v2437)
                                                  {
                                                    v2440 = *(_DWORD **)v2434;
                                                    uint64_t v2441 = ((uint64_t)v2435 - *(void *)v2434) >> 2;
                                                    unint64_t v2442 = v2441 + 1;
                                                    if ((unint64_t)(v2441 + 1) >> 62) {
                                                      sub_566C();
                                                    }
                                                    uint64_t v2443 = v2437 - (void)v2440;
                                                    if (v2443 >> 1 > v2442) {
                                                      unint64_t v2442 = v2443 >> 1;
                                                    }
                                                    if ((unint64_t)v2443 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                      unint64_t v2444 = 0x3FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v2444 = v2442;
                                                    }
                                                    if (v2444)
                                                    {
                                                      v2445 = (char *)sub_458C8((uint64_t)v2438, v2444);
                                                      v2435 = *v2436;
                                                      v2440 = *(_DWORD **)v2434;
                                                    }
                                                    else
                                                    {
                                                      v2445 = 0;
                                                    }
                                                    v2466 = &v2445[4 * v2441];
                                                    *(_DWORD *)v2466 = 88;
                                                    v2439 = v2466 + 4;
                                                    while (v2435 != v2440)
                                                    {
                                                      int v2467 = *--v2435;
                                                      *((_DWORD *)v2466 - 1) = v2467;
                                                      v2466 -= 4;
                                                    }
                                                    *(void *)uint64_t v2434 = v2466;
                                                    *v2436 = v2439;
                                                    void *v2438 = &v2445[4 * v2444];
                                                    if (v2440) {
                                                      operator delete(v2440);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    _DWORD *v2435 = 88;
                                                    v2439 = v2435 + 1;
                                                  }
                                                  *v2436 = v2439;
                                                  if (!*v14)
                                                  {
LABEL_4051:
                                                    if ((*((unsigned char *)__p + 11) & 2) == 0) {
                                                      goto LABEL_4052;
                                                    }
                                                    uint64_t v2468 = *v12 + 24 * v13;
                                                    v2470 = (_DWORD **)(v2468 + 8);
                                                    v2469 = *(_DWORD **)(v2468 + 8);
                                                    v2472 = (void *)(v2468 + 16);
                                                    unint64_t v2471 = *(void *)(v2468 + 16);
                                                    if ((unint64_t)v2469 >= v2471)
                                                    {
                                                      v2474 = *(_DWORD **)v2468;
                                                      uint64_t v2475 = ((uint64_t)v2469 - *(void *)v2468) >> 2;
                                                      unint64_t v2476 = v2475 + 1;
                                                      if ((unint64_t)(v2475 + 1) >> 62) {
                                                        sub_566C();
                                                      }
                                                      uint64_t v2477 = v2471 - (void)v2474;
                                                      if (v2477 >> 1 > v2476) {
                                                        unint64_t v2476 = v2477 >> 1;
                                                      }
                                                      if ((unint64_t)v2477 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                        unint64_t v2478 = 0x3FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        unint64_t v2478 = v2476;
                                                      }
                                                      if (v2478)
                                                      {
                                                        v2479 = (char *)sub_458C8((uint64_t)v2472, v2478);
                                                        v2469 = *v2470;
                                                        v2474 = *(_DWORD **)v2468;
                                                      }
                                                      else
                                                      {
                                                        v2479 = 0;
                                                      }
                                                      v2495 = &v2479[4 * v2475];
                                                      *(_DWORD *)v2495 = 89;
                                                      v2473 = v2495 + 4;
                                                      while (v2469 != v2474)
                                                      {
                                                        int v2496 = *--v2469;
                                                        *((_DWORD *)v2495 - 1) = v2496;
                                                        v2495 -= 4;
                                                      }
                                                      *(void *)uint64_t v2468 = v2495;
                                                      *v2470 = v2473;
                                                      void *v2472 = &v2479[4 * v2478];
                                                      if (v2474) {
                                                        operator delete(v2474);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      _DWORD *v2469 = 89;
                                                      v2473 = v2469 + 1;
                                                    }
                                                    *v2470 = v2473;
                                                    if (!*v14)
                                                    {
LABEL_4052:
                                                      if ((*((unsigned char *)__p + 11) & 4) == 0) {
                                                        goto LABEL_4053;
                                                      }
                                                      uint64_t v2497 = *v12 + 24 * v13;
                                                      v2499 = (_DWORD **)(v2497 + 8);
                                                      v2498 = *(_DWORD **)(v2497 + 8);
                                                      v2501 = (void *)(v2497 + 16);
                                                      unint64_t v2500 = *(void *)(v2497 + 16);
                                                      if ((unint64_t)v2498 >= v2500)
                                                      {
                                                        v2503 = *(_DWORD **)v2497;
                                                        uint64_t v2504 = ((uint64_t)v2498 - *(void *)v2497) >> 2;
                                                        unint64_t v2505 = v2504 + 1;
                                                        if ((unint64_t)(v2504 + 1) >> 62) {
                                                          sub_566C();
                                                        }
                                                        uint64_t v2506 = v2500 - (void)v2503;
                                                        if (v2506 >> 1 > v2505) {
                                                          unint64_t v2505 = v2506 >> 1;
                                                        }
                                                        if ((unint64_t)v2506 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                          unint64_t v2507 = 0x3FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          unint64_t v2507 = v2505;
                                                        }
                                                        if (v2507)
                                                        {
                                                          v2508 = (char *)sub_458C8((uint64_t)v2501, v2507);
                                                          v2498 = *v2499;
                                                          v2503 = *(_DWORD **)v2497;
                                                        }
                                                        else
                                                        {
                                                          v2508 = 0;
                                                        }
                                                        v2523 = &v2508[4 * v2504];
                                                        *(_DWORD *)v2523 = 90;
                                                        v2502 = v2523 + 4;
                                                        while (v2498 != v2503)
                                                        {
                                                          int v2524 = *--v2498;
                                                          *((_DWORD *)v2523 - 1) = v2524;
                                                          v2523 -= 4;
                                                        }
                                                        *(void *)uint64_t v2497 = v2523;
                                                        *v2499 = v2502;
                                                        void *v2501 = &v2508[4 * v2507];
                                                        if (v2503) {
                                                          operator delete(v2503);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        _DWORD *v2498 = 90;
                                                        v2502 = v2498 + 1;
                                                      }
                                                      *v2499 = v2502;
                                                      if (!*v14)
                                                      {
LABEL_4053:
                                                        if ((*((unsigned char *)__p + 11) & 8) == 0) {
                                                          goto LABEL_4054;
                                                        }
                                                        uint64_t v2525 = *v12 + 24 * v13;
                                                        v2527 = (_DWORD **)(v2525 + 8);
                                                        v2526 = *(_DWORD **)(v2525 + 8);
                                                        v2529 = (void *)(v2525 + 16);
                                                        unint64_t v2528 = *(void *)(v2525 + 16);
                                                        if ((unint64_t)v2526 >= v2528)
                                                        {
                                                          v2531 = *(_DWORD **)v2525;
                                                          uint64_t v2532 = ((uint64_t)v2526 - *(void *)v2525) >> 2;
                                                          unint64_t v2533 = v2532 + 1;
                                                          if ((unint64_t)(v2532 + 1) >> 62) {
                                                            sub_566C();
                                                          }
                                                          uint64_t v2534 = v2528 - (void)v2531;
                                                          if (v2534 >> 1 > v2533) {
                                                            unint64_t v2533 = v2534 >> 1;
                                                          }
                                                          if ((unint64_t)v2534 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                            unint64_t v2535 = 0x3FFFFFFFFFFFFFFFLL;
                                                          }
                                                          else {
                                                            unint64_t v2535 = v2533;
                                                          }
                                                          if (v2535)
                                                          {
                                                            v2536 = (char *)sub_458C8((uint64_t)v2529, v2535);
                                                            v2526 = *v2527;
                                                            v2531 = *(_DWORD **)v2525;
                                                          }
                                                          else
                                                          {
                                                            v2536 = 0;
                                                          }
                                                          v2551 = &v2536[4 * v2532];
                                                          *(_DWORD *)v2551 = 91;
                                                          v2530 = v2551 + 4;
                                                          while (v2526 != v2531)
                                                          {
                                                            int v2552 = *--v2526;
                                                            *((_DWORD *)v2551 - 1) = v2552;
                                                            v2551 -= 4;
                                                          }
                                                          *(void *)uint64_t v2525 = v2551;
                                                          *v2527 = v2530;
                                                          void *v2529 = &v2536[4 * v2535];
                                                          if (v2531) {
                                                            operator delete(v2531);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          _DWORD *v2526 = 91;
                                                          v2530 = v2526 + 1;
                                                        }
                                                        *v2527 = v2530;
                                                        if (!*v14)
                                                        {
LABEL_4054:
                                                          if ((*((unsigned char *)__p + 11) & 0x10) == 0) {
                                                            goto LABEL_4055;
                                                          }
                                                          uint64_t v2553 = *v12 + 24 * v13;
                                                          v2555 = (_DWORD **)(v2553 + 8);
                                                          v2554 = *(_DWORD **)(v2553 + 8);
                                                          v2557 = (void *)(v2553 + 16);
                                                          unint64_t v2556 = *(void *)(v2553 + 16);
                                                          if ((unint64_t)v2554 >= v2556)
                                                          {
                                                            v2559 = *(_DWORD **)v2553;
                                                            uint64_t v2560 = ((uint64_t)v2554 - *(void *)v2553) >> 2;
                                                            unint64_t v2561 = v2560 + 1;
                                                            if ((unint64_t)(v2560 + 1) >> 62) {
                                                              sub_566C();
                                                            }
                                                            uint64_t v2562 = v2556 - (void)v2559;
                                                            if (v2562 >> 1 > v2561) {
                                                              unint64_t v2561 = v2562 >> 1;
                                                            }
                                                            if ((unint64_t)v2562 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                              unint64_t v2563 = 0x3FFFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              unint64_t v2563 = v2561;
                                                            }
                                                            if (v2563)
                                                            {
                                                              v2564 = (char *)sub_458C8((uint64_t)v2557, v2563);
                                                              v2554 = *v2555;
                                                              v2559 = *(_DWORD **)v2553;
                                                            }
                                                            else
                                                            {
                                                              v2564 = 0;
                                                            }
                                                            v2579 = &v2564[4 * v2560];
                                                            *(_DWORD *)v2579 = 92;
                                                            v2558 = v2579 + 4;
                                                            while (v2554 != v2559)
                                                            {
                                                              int v2580 = *--v2554;
                                                              *((_DWORD *)v2579 - 1) = v2580;
                                                              v2579 -= 4;
                                                            }
                                                            *(void *)uint64_t v2553 = v2579;
                                                            *v2555 = v2558;
                                                            void *v2557 = &v2564[4 * v2563];
                                                            if (v2559) {
                                                              operator delete(v2559);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            _DWORD *v2554 = 92;
                                                            v2558 = v2554 + 1;
                                                          }
                                                          *v2555 = v2558;
                                                          if (!*v14)
                                                          {
LABEL_4055:
                                                            if ((*((unsigned char *)__p + 11) & 0x20) == 0) {
                                                              goto LABEL_4056;
                                                            }
                                                            uint64_t v2581 = *v12 + 24 * v13;
                                                            v2583 = (_DWORD **)(v2581 + 8);
                                                            v2582 = *(_DWORD **)(v2581 + 8);
                                                            v2585 = (void *)(v2581 + 16);
                                                            unint64_t v2584 = *(void *)(v2581 + 16);
                                                            if ((unint64_t)v2582 >= v2584)
                                                            {
                                                              v2587 = *(_DWORD **)v2581;
                                                              uint64_t v2588 = ((uint64_t)v2582 - *(void *)v2581) >> 2;
                                                              unint64_t v2589 = v2588 + 1;
                                                              if ((unint64_t)(v2588 + 1) >> 62) {
                                                                sub_566C();
                                                              }
                                                              uint64_t v2590 = v2584 - (void)v2587;
                                                              if (v2590 >> 1 > v2589) {
                                                                unint64_t v2589 = v2590 >> 1;
                                                              }
                                                              if ((unint64_t)v2590 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                unint64_t v2591 = 0x3FFFFFFFFFFFFFFFLL;
                                                              }
                                                              else {
                                                                unint64_t v2591 = v2589;
                                                              }
                                                              if (v2591)
                                                              {
                                                                v2592 = (char *)sub_458C8((uint64_t)v2585, v2591);
                                                                v2582 = *v2583;
                                                                v2587 = *(_DWORD **)v2581;
                                                              }
                                                              else
                                                              {
                                                                v2592 = 0;
                                                              }
                                                              v2607 = &v2592[4 * v2588];
                                                              *(_DWORD *)v2607 = 93;
                                                              v2586 = v2607 + 4;
                                                              while (v2582 != v2587)
                                                              {
                                                                int v2608 = *--v2582;
                                                                *((_DWORD *)v2607 - 1) = v2608;
                                                                v2607 -= 4;
                                                              }
                                                              *(void *)uint64_t v2581 = v2607;
                                                              *v2583 = v2586;
                                                              void *v2585 = &v2592[4 * v2591];
                                                              if (v2587) {
                                                                operator delete(v2587);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              _DWORD *v2582 = 93;
                                                              v2586 = v2582 + 1;
                                                            }
                                                            *v2583 = v2586;
                                                            if (!*v14)
                                                            {
LABEL_4056:
                                                              if ((*((unsigned char *)__p + 11) & 0x40) == 0) {
                                                                goto LABEL_4057;
                                                              }
                                                              uint64_t v2609 = *v12 + 24 * v13;
                                                              v2611 = (_DWORD **)(v2609 + 8);
                                                              v2610 = *(_DWORD **)(v2609 + 8);
                                                              v2613 = (void *)(v2609 + 16);
                                                              unint64_t v2612 = *(void *)(v2609 + 16);
                                                              if ((unint64_t)v2610 >= v2612)
                                                              {
                                                                v2615 = *(_DWORD **)v2609;
                                                                uint64_t v2616 = ((uint64_t)v2610 - *(void *)v2609) >> 2;
                                                                unint64_t v2617 = v2616 + 1;
                                                                if ((unint64_t)(v2616 + 1) >> 62) {
                                                                  sub_566C();
                                                                }
                                                                uint64_t v2618 = v2612 - (void)v2615;
                                                                if (v2618 >> 1 > v2617) {
                                                                  unint64_t v2617 = v2618 >> 1;
                                                                }
                                                                if ((unint64_t)v2618 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                  unint64_t v2619 = 0x3FFFFFFFFFFFFFFFLL;
                                                                }
                                                                else {
                                                                  unint64_t v2619 = v2617;
                                                                }
                                                                if (v2619)
                                                                {
                                                                  v2620 = (char *)sub_458C8((uint64_t)v2613, v2619);
                                                                  v2610 = *v2611;
                                                                  v2615 = *(_DWORD **)v2609;
                                                                }
                                                                else
                                                                {
                                                                  v2620 = 0;
                                                                }
                                                                v2635 = &v2620[4 * v2616];
                                                                *(_DWORD *)v2635 = 94;
                                                                v2614 = v2635 + 4;
                                                                while (v2610 != v2615)
                                                                {
                                                                  int v2636 = *--v2610;
                                                                  *((_DWORD *)v2635 - 1) = v2636;
                                                                  v2635 -= 4;
                                                                }
                                                                *(void *)uint64_t v2609 = v2635;
                                                                *v2611 = v2614;
                                                                void *v2613 = &v2620[4 * v2619];
                                                                if (v2615) {
                                                                  operator delete(v2615);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                _DWORD *v2610 = 94;
                                                                v2614 = v2610 + 1;
                                                              }
                                                              *v2611 = v2614;
                                                              if (!*v14)
                                                              {
LABEL_4057:
                                                                if ((*((unsigned char *)__p + 11) & 0x80) == 0) {
                                                                  goto LABEL_4058;
                                                                }
                                                                uint64_t v2637 = *v12 + 24 * v13;
                                                                v2639 = (_DWORD **)(v2637 + 8);
                                                                v2638 = *(_DWORD **)(v2637 + 8);
                                                                v2641 = (void *)(v2637 + 16);
                                                                unint64_t v2640 = *(void *)(v2637 + 16);
                                                                if ((unint64_t)v2638 >= v2640)
                                                                {
                                                                  v2643 = *(_DWORD **)v2637;
                                                                  uint64_t v2644 = ((uint64_t)v2638 - *(void *)v2637) >> 2;
                                                                  unint64_t v2645 = v2644 + 1;
                                                                  if ((unint64_t)(v2644 + 1) >> 62) {
                                                                    sub_566C();
                                                                  }
                                                                  uint64_t v2646 = v2640 - (void)v2643;
                                                                  if (v2646 >> 1 > v2645) {
                                                                    unint64_t v2645 = v2646 >> 1;
                                                                  }
                                                                  if ((unint64_t)v2646 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                    unint64_t v2647 = 0x3FFFFFFFFFFFFFFFLL;
                                                                  }
                                                                  else {
                                                                    unint64_t v2647 = v2645;
                                                                  }
                                                                  if (v2647)
                                                                  {
                                                                    v2648 = (char *)sub_458C8((uint64_t)v2641, v2647);
                                                                    v2638 = *v2639;
                                                                    v2643 = *(_DWORD **)v2637;
                                                                  }
                                                                  else
                                                                  {
                                                                    v2648 = 0;
                                                                  }
                                                                  v2663 = &v2648[4 * v2644];
                                                                  *(_DWORD *)v2663 = 95;
                                                                  v2642 = v2663 + 4;
                                                                  while (v2638 != v2643)
                                                                  {
                                                                    int v2664 = *--v2638;
                                                                    *((_DWORD *)v2663 - 1) = v2664;
                                                                    v2663 -= 4;
                                                                  }
                                                                  *(void *)uint64_t v2637 = v2663;
                                                                  *v2639 = v2642;
                                                                  void *v2641 = &v2648[4 * v2647];
                                                                  if (v2643) {
                                                                    operator delete(v2643);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  _DWORD *v2638 = 95;
                                                                  v2642 = v2638 + 1;
                                                                }
                                                                *v2639 = v2642;
                                                                if (!*v14)
                                                                {
LABEL_4058:
                                                                  if ((*((unsigned char *)__p + 12) & 1) == 0) {
                                                                    goto LABEL_4059;
                                                                  }
                                                                  uint64_t v2665 = *v12 + 24 * v13;
                                                                  v2667 = (_DWORD **)(v2665 + 8);
                                                                  v2666 = *(_DWORD **)(v2665 + 8);
                                                                  v2669 = (void *)(v2665 + 16);
                                                                  unint64_t v2668 = *(void *)(v2665 + 16);
                                                                  if ((unint64_t)v2666 >= v2668)
                                                                  {
                                                                    v2671 = *(_DWORD **)v2665;
                                                                    uint64_t v2672 = ((uint64_t)v2666 - *(void *)v2665) >> 2;
                                                                    unint64_t v2673 = v2672 + 1;
                                                                    if ((unint64_t)(v2672 + 1) >> 62) {
                                                                      sub_566C();
                                                                    }
                                                                    uint64_t v2674 = v2668 - (void)v2671;
                                                                    if (v2674 >> 1 > v2673) {
                                                                      unint64_t v2673 = v2674 >> 1;
                                                                    }
                                                                    if ((unint64_t)v2674 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                      unint64_t v2675 = 0x3FFFFFFFFFFFFFFFLL;
                                                                    }
                                                                    else {
                                                                      unint64_t v2675 = v2673;
                                                                    }
                                                                    if (v2675)
                                                                    {
                                                                      v2676 = (char *)sub_458C8((uint64_t)v2669, v2675);
                                                                      v2666 = *v2667;
                                                                      v2671 = *(_DWORD **)v2665;
                                                                    }
                                                                    else
                                                                    {
                                                                      v2676 = 0;
                                                                    }
                                                                    v2691 = &v2676[4 * v2672];
                                                                    *(_DWORD *)v2691 = 96;
                                                                    v2670 = v2691 + 4;
                                                                    while (v2666 != v2671)
                                                                    {
                                                                      int v2692 = *--v2666;
                                                                      *((_DWORD *)v2691 - 1) = v2692;
                                                                      v2691 -= 4;
                                                                    }
                                                                    *(void *)uint64_t v2665 = v2691;
                                                                    *v2667 = v2670;
                                                                    void *v2669 = &v2676[4 * v2675];
                                                                    if (v2671) {
                                                                      operator delete(v2671);
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    _DWORD *v2666 = 96;
                                                                    v2670 = v2666 + 1;
                                                                  }
                                                                  *v2667 = v2670;
                                                                  if (!*v14)
                                                                  {
LABEL_4059:
                                                                    if ((*((unsigned char *)__p + 12) & 2) == 0) {
                                                                      goto LABEL_4060;
                                                                    }
                                                                    uint64_t v2693 = *v12 + 24 * v13;
                                                                    v2695 = (_DWORD **)(v2693 + 8);
                                                                    v2694 = *(_DWORD **)(v2693 + 8);
                                                                    v2697 = (void *)(v2693 + 16);
                                                                    unint64_t v2696 = *(void *)(v2693 + 16);
                                                                    if ((unint64_t)v2694 >= v2696)
                                                                    {
                                                                      v2699 = *(_DWORD **)v2693;
                                                                      uint64_t v2700 = ((uint64_t)v2694 - *(void *)v2693) >> 2;
                                                                      unint64_t v2701 = v2700 + 1;
                                                                      if ((unint64_t)(v2700 + 1) >> 62) {
                                                                        sub_566C();
                                                                      }
                                                                      uint64_t v2702 = v2696 - (void)v2699;
                                                                      if (v2702 >> 1 > v2701) {
                                                                        unint64_t v2701 = v2702 >> 1;
                                                                      }
                                                                      if ((unint64_t)v2702 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                        unint64_t v2703 = 0x3FFFFFFFFFFFFFFFLL;
                                                                      }
                                                                      else {
                                                                        unint64_t v2703 = v2701;
                                                                      }
                                                                      if (v2703)
                                                                      {
                                                                        v2704 = (char *)sub_458C8((uint64_t)v2697, v2703);
                                                                        v2694 = *v2695;
                                                                        v2699 = *(_DWORD **)v2693;
                                                                      }
                                                                      else
                                                                      {
                                                                        v2704 = 0;
                                                                      }
                                                                      v2719 = &v2704[4 * v2700];
                                                                      *(_DWORD *)v2719 = 97;
                                                                      v2698 = v2719 + 4;
                                                                      while (v2694 != v2699)
                                                                      {
                                                                        int v2720 = *--v2694;
                                                                        *((_DWORD *)v2719 - 1) = v2720;
                                                                        v2719 -= 4;
                                                                      }
                                                                      *(void *)uint64_t v2693 = v2719;
                                                                      *v2695 = v2698;
                                                                      void *v2697 = &v2704[4 * v2703];
                                                                      if (v2699) {
                                                                        operator delete(v2699);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      _DWORD *v2694 = 97;
                                                                      v2698 = v2694 + 1;
                                                                    }
                                                                    *v2695 = v2698;
                                                                    if (!*v14)
                                                                    {
LABEL_4060:
                                                                      if ((*((unsigned char *)__p + 12) & 4) == 0) {
                                                                        goto LABEL_4061;
                                                                      }
                                                                      uint64_t v2721 = *v12 + 24 * v13;
                                                                      v2723 = (_DWORD **)(v2721 + 8);
                                                                      v2722 = *(_DWORD **)(v2721 + 8);
                                                                      v2725 = (void *)(v2721 + 16);
                                                                      unint64_t v2724 = *(void *)(v2721 + 16);
                                                                      if ((unint64_t)v2722 >= v2724)
                                                                      {
                                                                        v2727 = *(_DWORD **)v2721;
                                                                        uint64_t v2728 = ((uint64_t)v2722 - *(void *)v2721) >> 2;
                                                                        unint64_t v2729 = v2728 + 1;
                                                                        if ((unint64_t)(v2728 + 1) >> 62) {
                                                                          sub_566C();
                                                                        }
                                                                        uint64_t v2730 = v2724 - (void)v2727;
                                                                        if (v2730 >> 1 > v2729) {
                                                                          unint64_t v2729 = v2730 >> 1;
                                                                        }
                                                                        if ((unint64_t)v2730 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                          unint64_t v2731 = 0x3FFFFFFFFFFFFFFFLL;
                                                                        }
                                                                        else {
                                                                          unint64_t v2731 = v2729;
                                                                        }
                                                                        if (v2731)
                                                                        {
                                                                          v2732 = (char *)sub_458C8((uint64_t)v2725, v2731);
                                                                          v2722 = *v2723;
                                                                          v2727 = *(_DWORD **)v2721;
                                                                        }
                                                                        else
                                                                        {
                                                                          v2732 = 0;
                                                                        }
                                                                        v2747 = &v2732[4 * v2728];
                                                                        *(_DWORD *)v2747 = 98;
                                                                        v2726 = v2747 + 4;
                                                                        while (v2722 != v2727)
                                                                        {
                                                                          int v2748 = *--v2722;
                                                                          *((_DWORD *)v2747 - 1) = v2748;
                                                                          v2747 -= 4;
                                                                        }
                                                                        *(void *)uint64_t v2721 = v2747;
                                                                        *v2723 = v2726;
                                                                        void *v2725 = &v2732[4 * v2731];
                                                                        if (v2727) {
                                                                          operator delete(v2727);
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        _DWORD *v2722 = 98;
                                                                        v2726 = v2722 + 1;
                                                                      }
                                                                      *v2723 = v2726;
                                                                      if (!*v14)
                                                                      {
LABEL_4061:
                                                                        if ((*((unsigned char *)__p + 12) & 8) == 0) {
                                                                          goto LABEL_4062;
                                                                        }
                                                                        uint64_t v2749 = *v12 + 24 * v13;
                                                                        v2751 = (_DWORD **)(v2749 + 8);
                                                                        v2750 = *(_DWORD **)(v2749 + 8);
                                                                        v2753 = (void *)(v2749 + 16);
                                                                        unint64_t v2752 = *(void *)(v2749 + 16);
                                                                        if ((unint64_t)v2750 >= v2752)
                                                                        {
                                                                          v2755 = *(_DWORD **)v2749;
                                                                          uint64_t v2756 = ((uint64_t)v2750 - *(void *)v2749) >> 2;
                                                                          unint64_t v2757 = v2756 + 1;
                                                                          if ((unint64_t)(v2756 + 1) >> 62) {
                                                                            sub_566C();
                                                                          }
                                                                          uint64_t v2758 = v2752 - (void)v2755;
                                                                          if (v2758 >> 1 > v2757) {
                                                                            unint64_t v2757 = v2758 >> 1;
                                                                          }
                                                                          if ((unint64_t)v2758 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                            unint64_t v2759 = 0x3FFFFFFFFFFFFFFFLL;
                                                                          }
                                                                          else {
                                                                            unint64_t v2759 = v2757;
                                                                          }
                                                                          if (v2759)
                                                                          {
                                                                            v2760 = (char *)sub_458C8((uint64_t)v2753, v2759);
                                                                            v2750 = *v2751;
                                                                            v2755 = *(_DWORD **)v2749;
                                                                          }
                                                                          else
                                                                          {
                                                                            v2760 = 0;
                                                                          }
                                                                          v2775 = &v2760[4 * v2756];
                                                                          *(_DWORD *)v2775 = 99;
                                                                          v2754 = v2775 + 4;
                                                                          while (v2750 != v2755)
                                                                          {
                                                                            int v2776 = *--v2750;
                                                                            *((_DWORD *)v2775 - 1) = v2776;
                                                                            v2775 -= 4;
                                                                          }
                                                                          *(void *)uint64_t v2749 = v2775;
                                                                          *v2751 = v2754;
                                                                          void *v2753 = &v2760[4 * v2759];
                                                                          if (v2755) {
                                                                            operator delete(v2755);
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          _DWORD *v2750 = 99;
                                                                          v2754 = v2750 + 1;
                                                                        }
                                                                        *v2751 = v2754;
                                                                        if (!*v14)
                                                                        {
LABEL_4062:
                                                                          if ((*((unsigned char *)__p + 12) & 0x10) != 0)
                                                                          {
                                                                            uint64_t v223 = *v12 + 24 * v13;
                                                                            uint64_t v225 = (int **)(v223 + 8);
                                                                            uint64_t v224 = *(int **)(v223 + 8);
                                                                            uint64_t v227 = (void *)(v223 + 16);
                                                                            unint64_t v2777 = *(void *)(v223 + 16);
                                                                            if ((unint64_t)v224 < v2777)
                                                                            {
                                                                              int v228 = 100;
                                                                              goto LABEL_2185;
                                                                            }
                                                                            double v229 = *(int **)v223;
                                                                            uint64_t v2778 = ((uint64_t)v224 - *(void *)v223) >> 2;
                                                                            unint64_t v2779 = v2778 + 1;
                                                                            if ((unint64_t)(v2778 + 1) >> 62) {
                                                                              sub_566C();
                                                                            }
                                                                            uint64_t v2780 = v2777 - (void)v229;
                                                                            if (v2780 >> 1 > v2779) {
                                                                              unint64_t v2779 = v2780 >> 1;
                                                                            }
                                                                            if ((unint64_t)v2780 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                              unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                                                                            }
                                                                            else {
                                                                              unint64_t v233 = v2779;
                                                                            }
                                                                            if (v233)
                                                                            {
                                                                              uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                                                                              uint64_t v224 = *v225;
                                                                              double v229 = *(int **)v223;
                                                                            }
                                                                            else
                                                                            {
                                                                              uint64_t v234 = 0;
                                                                            }
                                                                            uint64_t v457 = &v234[4 * v2778];
                                                                            *(_DWORD *)uint64_t v457 = 100;
                                                                            unint64_t v458 = (int *)(v457 + 4);
                                                                            while (v224 != v229)
                                                                            {
                                                                              int v2787 = *--v224;
                                                                              *((_DWORD *)v457 - 1) = v2787;
                                                                              v457 -= 4;
                                                                            }
                                                                            goto LABEL_3707;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 10:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 7) & 0x40) == 0) {
              goto LABEL_464;
            }
            uint64_t v99 = *v12 + 24 * v13;
            uint64_t v101 = (_DWORD **)(v99 + 8);
            unint64_t v100 = *(_DWORD **)(v99 + 8);
            double v103 = (void *)(v99 + 16);
            unint64_t v102 = *(void *)(v99 + 16);
            if ((unint64_t)v100 >= v102)
            {
              double v195 = *(_DWORD **)v99;
              uint64_t v196 = ((uint64_t)v100 - *(void *)v99) >> 2;
              unint64_t v197 = v196 + 1;
              if ((unint64_t)(v196 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v198 = v102 - (void)v195;
              if (v198 >> 1 > v197) {
                unint64_t v197 = v198 >> 1;
              }
              if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v199 = v197;
              }
              if (v199)
              {
                uint64_t v200 = (char *)sub_458C8((uint64_t)v103, v199);
                unint64_t v100 = *v101;
                double v195 = *(_DWORD **)v99;
              }
              else
              {
                uint64_t v200 = 0;
              }
              double v403 = &v200[4 * v196];
              *(_DWORD *)double v403 = 62;
              double v104 = v403 + 4;
              while (v100 != v195)
              {
                int v404 = *--v100;
                *((_DWORD *)v403 - 1) = v404;
                v403 -= 4;
              }
              *(void *)uint64_t v99 = v403;
              *uint64_t v101 = v104;
              void *v103 = &v200[4 * v199];
              if (v195) {
                operator delete(v195);
              }
            }
            else
            {
              _DWORD *v100 = 62;
              double v104 = v100 + 1;
            }
            *uint64_t v101 = v104;
            if (!*v14)
            {
LABEL_464:
              if ((*(void *)__p & 0x8000000000000000) == 0) {
                goto LABEL_1518;
              }
              uint64_t v411 = *v12 + 24 * v13;
              uint64_t v413 = (_DWORD **)(v411 + 8);
              uint64_t v412 = *(_DWORD **)(v411 + 8);
              double v415 = (void *)(v411 + 16);
              unint64_t v414 = *(void *)(v411 + 16);
              if ((unint64_t)v412 >= v414)
              {
                uint64_t v423 = *(_DWORD **)v411;
                uint64_t v424 = ((uint64_t)v412 - *(void *)v411) >> 2;
                unint64_t v425 = v424 + 1;
                if ((unint64_t)(v424 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v426 = v414 - (void)v423;
                if (v426 >> 1 > v425) {
                  unint64_t v425 = v426 >> 1;
                }
                if ((unint64_t)v426 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v427 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v427 = v425;
                }
                if (v427)
                {
                  unsigned __int8 v428 = (char *)sub_458C8((uint64_t)v415, v427);
                  uint64_t v412 = *v413;
                  uint64_t v423 = *(_DWORD **)v411;
                }
                else
                {
                  unsigned __int8 v428 = 0;
                }
                double v656 = &v428[4 * v424];
                *(_DWORD *)double v656 = 63;
                unint64_t v416 = v656 + 4;
                while (v412 != v423)
                {
                  int v657 = *--v412;
                  *((_DWORD *)v656 - 1) = v657;
                  v656 -= 4;
                }
                *(void *)uint64_t v411 = v656;
                void *v413 = v416;
                void *v415 = &v428[4 * v427];
                if (v423) {
                  operator delete(v423);
                }
              }
              else
              {
                *uint64_t v412 = 63;
                unint64_t v416 = v412 + 1;
              }
              void *v413 = v416;
              if (!*v14)
              {
LABEL_1518:
                if ((*((unsigned char *)__p + 8) & 1) == 0) {
                  goto LABEL_4063;
                }
                uint64_t v405 = *v12 + 24 * v13;
                uint64_t v407 = (_DWORD **)(v405 + 8);
                double v406 = *(_DWORD **)(v405 + 8);
                unint64_t v409 = (void *)(v405 + 16);
                unint64_t v408 = *(void *)(v405 + 16);
                if ((unint64_t)v406 >= v408)
                {
                  double v417 = *(_DWORD **)v405;
                  uint64_t v418 = ((uint64_t)v406 - *(void *)v405) >> 2;
                  unint64_t v419 = v418 + 1;
                  if ((unint64_t)(v418 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v420 = v408 - (void)v417;
                  if (v420 >> 1 > v419) {
                    unint64_t v419 = v420 >> 1;
                  }
                  if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v421 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v421 = v419;
                  }
                  if (v421)
                  {
                    unint64_t v422 = (char *)sub_458C8((uint64_t)v409, v421);
                    double v406 = *v407;
                    double v417 = *(_DWORD **)v405;
                  }
                  else
                  {
                    unint64_t v422 = 0;
                  }
                  int v642 = &v422[4 * v418];
                  *(_DWORD *)int v642 = 64;
                  unint64_t v410 = v642 + 4;
                  while (v406 != v417)
                  {
                    int v643 = *--v406;
                    *((_DWORD *)v642 - 1) = v643;
                    v642 -= 4;
                  }
                  *(void *)uint64_t v405 = v642;
                  unsigned __int8 *v407 = v410;
                  void *v409 = &v422[4 * v421];
                  if (v417) {
                    operator delete(v417);
                  }
                }
                else
                {
                  *double v406 = 64;
                  unint64_t v410 = v406 + 1;
                }
                unsigned __int8 *v407 = v410;
                if (!*v14)
                {
LABEL_4063:
                  if ((*((unsigned char *)__p + 8) & 2) == 0) {
                    goto LABEL_4064;
                  }
                  uint64_t v644 = *v12 + 24 * v13;
                  unint64_t v646 = (_DWORD **)(v644 + 8);
                  unint64_t v645 = *(_DWORD **)(v644 + 8);
                  unint64_t v648 = (void *)(v644 + 16);
                  unint64_t v647 = *(void *)(v644 + 16);
                  if ((unint64_t)v645 >= v647)
                  {
                    uint64_t v650 = *(_DWORD **)v644;
                    uint64_t v651 = ((uint64_t)v645 - *(void *)v644) >> 2;
                    unint64_t v652 = v651 + 1;
                    if ((unint64_t)(v651 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v653 = v647 - (void)v650;
                    if (v653 >> 1 > v652) {
                      unint64_t v652 = v653 >> 1;
                    }
                    if ((unint64_t)v653 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v654 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v654 = v652;
                    }
                    if (v654)
                    {
                      double v655 = (char *)sub_458C8((uint64_t)v648, v654);
                      unint64_t v645 = *v646;
                      uint64_t v650 = *(_DWORD **)v644;
                    }
                    else
                    {
                      double v655 = 0;
                    }
                    v838 = &v655[4 * v651];
                    *(_DWORD *)v838 = 65;
                    unint64_t v649 = v838 + 4;
                    while (v645 != v650)
                    {
                      int v839 = *--v645;
                      *((_DWORD *)v838 - 1) = v839;
                      v838 -= 4;
                    }
                    *(void *)uint64_t v644 = v838;
                    *unint64_t v646 = v649;
                    void *v648 = &v655[4 * v654];
                    if (v650) {
                      operator delete(v650);
                    }
                  }
                  else
                  {
                    *unint64_t v645 = 65;
                    unint64_t v649 = v645 + 1;
                  }
                  *unint64_t v646 = v649;
                  if (!*v14)
                  {
LABEL_4064:
                    if ((*((unsigned char *)__p + 8) & 4) == 0) {
                      goto LABEL_4065;
                    }
                    uint64_t v840 = *v12 + 24 * v13;
                    unsigned int v842 = (_DWORD **)(v840 + 8);
                    unsigned int v841 = *(_DWORD **)(v840 + 8);
                    v844 = (void *)(v840 + 16);
                    unint64_t v843 = *(void *)(v840 + 16);
                    if ((unint64_t)v841 >= v843)
                    {
                      unsigned int v846 = *(_DWORD **)v840;
                      uint64_t v847 = ((uint64_t)v841 - *(void *)v840) >> 2;
                      unint64_t v848 = v847 + 1;
                      if ((unint64_t)(v847 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v849 = v843 - (void)v846;
                      if (v849 >> 1 > v848) {
                        unint64_t v848 = v849 >> 1;
                      }
                      if ((unint64_t)v849 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v850 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v850 = v848;
                      }
                      if (v850)
                      {
                        unint64_t v851 = (char *)sub_458C8((uint64_t)v844, v850);
                        unsigned int v841 = *v842;
                        unsigned int v846 = *(_DWORD **)v840;
                      }
                      else
                      {
                        unint64_t v851 = 0;
                      }
                      v1014 = &v851[4 * v847];
                      *(_DWORD *)v1014 = 66;
                      unsigned int v845 = v1014 + 4;
                      while (v841 != v846)
                      {
                        int v1015 = *--v841;
                        *((_DWORD *)v1014 - 1) = v1015;
                        v1014 -= 4;
                      }
                      *(void *)uint64_t v840 = v1014;
                      *unsigned int v842 = v845;
                      void *v844 = &v851[4 * v850];
                      if (v846) {
                        operator delete(v846);
                      }
                    }
                    else
                    {
                      *unsigned int v841 = 66;
                      unsigned int v845 = v841 + 1;
                    }
                    *unsigned int v842 = v845;
                    if (!*v14)
                    {
LABEL_4065:
                      if ((*((unsigned char *)__p + 8) & 8) == 0) {
                        goto LABEL_4066;
                      }
                      uint64_t v1016 = *v12 + 24 * v13;
                      unint64_t v1018 = (_DWORD **)(v1016 + 8);
                      unint64_t v1017 = *(_DWORD **)(v1016 + 8);
                      v1020 = (void *)(v1016 + 16);
                      unint64_t v1019 = *(void *)(v1016 + 16);
                      if ((unint64_t)v1017 >= v1019)
                      {
                        unsigned int v1022 = *(_DWORD **)v1016;
                        uint64_t v1023 = ((uint64_t)v1017 - *(void *)v1016) >> 2;
                        unint64_t v1024 = v1023 + 1;
                        if ((unint64_t)(v1023 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1025 = v1019 - (void)v1022;
                        if (v1025 >> 1 > v1024) {
                          unint64_t v1024 = v1025 >> 1;
                        }
                        if ((unint64_t)v1025 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1026 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1026 = v1024;
                        }
                        if (v1026)
                        {
                          v1027 = (char *)sub_458C8((uint64_t)v1020, v1026);
                          unint64_t v1017 = *v1018;
                          unsigned int v1022 = *(_DWORD **)v1016;
                        }
                        else
                        {
                          v1027 = 0;
                        }
                        unint64_t v1195 = &v1027[4 * v1023];
                        *(_DWORD *)unint64_t v1195 = 67;
                        v1021 = v1195 + 4;
                        while (v1017 != v1022)
                        {
                          int v1196 = *--v1017;
                          *((_DWORD *)v1195 - 1) = v1196;
                          v1195 -= 4;
                        }
                        *(void *)uint64_t v1016 = v1195;
                        *unint64_t v1018 = v1021;
                        void *v1020 = &v1027[4 * v1026];
                        if (v1022) {
                          operator delete(v1022);
                        }
                      }
                      else
                      {
                        *unint64_t v1017 = 67;
                        v1021 = v1017 + 1;
                      }
                      *unint64_t v1018 = v1021;
                      if (!*v14)
                      {
LABEL_4066:
                        if ((*((unsigned char *)__p + 8) & 0x10) != 0)
                        {
                          uint64_t v223 = *v12 + 24 * v13;
                          uint64_t v225 = (int **)(v223 + 8);
                          uint64_t v224 = *(int **)(v223 + 8);
                          uint64_t v227 = (void *)(v223 + 16);
                          unint64_t v1197 = *(void *)(v223 + 16);
                          if ((unint64_t)v224 < v1197)
                          {
                            int v228 = 68;
                            goto LABEL_2185;
                          }
                          double v229 = *(int **)v223;
                          uint64_t v1198 = ((uint64_t)v224 - *(void *)v223) >> 2;
                          unint64_t v1199 = v1198 + 1;
                          if ((unint64_t)(v1198 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1200 = v1197 - (void)v229;
                          if (v1200 >> 1 > v1199) {
                            unint64_t v1199 = v1200 >> 1;
                          }
                          if ((unint64_t)v1200 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v233 = v1199;
                          }
                          if (v233)
                          {
                            uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                            uint64_t v224 = *v225;
                            double v229 = *(int **)v223;
                          }
                          else
                          {
                            uint64_t v234 = 0;
                          }
                          uint64_t v457 = &v234[4 * v1198];
                          *(_DWORD *)uint64_t v457 = 68;
                          unint64_t v458 = (int *)(v457 + 4);
                          while (v224 != v229)
                          {
                            int v1355 = *--v224;
                            *((_DWORD *)v457 - 1) = v1355;
                            v457 -= 4;
                          }
                          goto LABEL_3707;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 11:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 7) & 0x10) == 0) {
              goto LABEL_230;
            }
            uint64_t v27 = *v12 + 24 * v13;
            __int16 v29 = (_DWORD **)(v27 + 8);
            int v28 = *(_DWORD **)(v27 + 8);
            uint64_t v31 = (void *)(v27 + 16);
            unint64_t v30 = *(void *)(v27 + 16);
            if ((unint64_t)v28 >= v30)
            {
              BOOL v117 = *(_DWORD **)v27;
              uint64_t v118 = ((uint64_t)v28 - *(void *)v27) >> 2;
              unint64_t v119 = v118 + 1;
              if ((unint64_t)(v118 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v120 = v30 - (void)v117;
              if (v120 >> 1 > v119) {
                unint64_t v119 = v120 >> 1;
              }
              if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v119;
              }
              if (v121)
              {
                double v122 = (char *)sub_458C8((uint64_t)v31, v121);
                int v28 = *v29;
                BOOL v117 = *(_DWORD **)v27;
              }
              else
              {
                double v122 = 0;
              }
              unint64_t v221 = &v122[4 * v118];
              *(_DWORD *)unint64_t v221 = 60;
              uint64_t v32 = v221 + 4;
              while (v28 != v117)
              {
                int v222 = *--v28;
                *((_DWORD *)v221 - 1) = v222;
                v221 -= 4;
              }
              *(void *)uint64_t v27 = v221;
              char *v29 = v32;
              void *v31 = &v122[4 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              _DWORD *v28 = 60;
              uint64_t v32 = v28 + 1;
            }
            char *v29 = v32;
            if (!*v14)
            {
LABEL_230:
              if ((*((unsigned char *)__p + 7) & 0x20) != 0)
              {
                uint64_t v223 = *v12 + 24 * v13;
                uint64_t v225 = (int **)(v223 + 8);
                uint64_t v224 = *(int **)(v223 + 8);
                uint64_t v227 = (void *)(v223 + 16);
                unint64_t v226 = *(void *)(v223 + 16);
                if ((unint64_t)v224 < v226)
                {
                  int v228 = 61;
                  goto LABEL_2185;
                }
                double v229 = *(int **)v223;
                uint64_t v230 = ((uint64_t)v224 - *(void *)v223) >> 2;
                unint64_t v231 = v230 + 1;
                if ((unint64_t)(v230 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v232 = v226 - (void)v229;
                if (v232 >> 1 > v231) {
                  unint64_t v231 = v232 >> 1;
                }
                if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v233 = v231;
                }
                if (v233)
                {
                  uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                  uint64_t v224 = *v225;
                  double v229 = *(int **)v223;
                }
                else
                {
                  uint64_t v234 = 0;
                }
                uint64_t v457 = &v234[4 * v230];
                *(_DWORD *)uint64_t v457 = 61;
                unint64_t v458 = (int *)(v457 + 4);
                while (v224 != v229)
                {
                  int v459 = *--v224;
                  *((_DWORD *)v457 - 1) = v459;
                  v457 -= 4;
                }
                goto LABEL_3707;
              }
            }
          }
          break;
        case 12:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 15) & 1) == 0) {
              goto LABEL_266;
            }
            uint64_t v39 = *v12 + 24 * v13;
            uint64_t v41 = (_DWORD **)(v39 + 8);
            uint64_t v40 = *(_DWORD **)(v39 + 8);
            int v43 = (void *)(v39 + 16);
            unint64_t v42 = *(void *)(v39 + 16);
            if ((unint64_t)v40 >= v42)
            {
              uint64_t v129 = *(_DWORD **)v39;
              uint64_t v130 = ((uint64_t)v40 - *(void *)v39) >> 2;
              unint64_t v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v132 = v42 - (void)v129;
              if (v132 >> 1 > v131) {
                unint64_t v131 = v132 >> 1;
              }
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v131;
              }
              if (v133)
              {
                uint64_t v134 = (char *)sub_458C8((uint64_t)v43, v133);
                uint64_t v40 = *v41;
                uint64_t v129 = *(_DWORD **)v39;
              }
              else
              {
                uint64_t v134 = 0;
              }
              double v249 = &v134[4 * v130];
              *(_DWORD *)double v249 = 120;
              unint64_t v44 = v249 + 4;
              while (v40 != v129)
              {
                int v250 = *--v40;
                *((_DWORD *)v249 - 1) = v250;
                v249 -= 4;
              }
              *(void *)uint64_t v39 = v249;
              *uint64_t v41 = v44;
              void *v43 = &v134[4 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              *uint64_t v40 = 120;
              unint64_t v44 = v40 + 1;
            }
            *uint64_t v41 = v44;
            if (!*v14)
            {
LABEL_266:
              if ((*((unsigned char *)__p + 15) & 2) == 0) {
                goto LABEL_1764;
              }
              uint64_t v251 = *v12 + 24 * v13;
              uint64_t v253 = (_DWORD **)(v251 + 8);
              unint64_t v252 = *(_DWORD **)(v251 + 8);
              unint64_t v255 = (void *)(v251 + 16);
              unint64_t v254 = *(void *)(v251 + 16);
              if ((unint64_t)v252 >= v254)
              {
                uint64_t v257 = *(_DWORD **)v251;
                uint64_t v258 = ((uint64_t)v252 - *(void *)v251) >> 2;
                unint64_t v259 = v258 + 1;
                if ((unint64_t)(v258 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v260 = v254 - (void)v257;
                if (v260 >> 1 > v259) {
                  unint64_t v259 = v260 >> 1;
                }
                if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v261 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v261 = v259;
                }
                if (v261)
                {
                  uint64_t v262 = (char *)sub_458C8((uint64_t)v255, v261);
                  unint64_t v252 = *v253;
                  uint64_t v257 = *(_DWORD **)v251;
                }
                else
                {
                  uint64_t v262 = 0;
                }
                uint64_t v474 = &v262[4 * v258];
                *(_DWORD *)uint64_t v474 = 121;
                unint64_t v256 = v474 + 4;
                while (v252 != v257)
                {
                  int v475 = *--v252;
                  *((_DWORD *)v474 - 1) = v475;
                  v474 -= 4;
                }
                *(void *)uint64_t v251 = v474;
                *uint64_t v253 = v256;
                void *v255 = &v262[4 * v261];
                if (v257) {
                  operator delete(v257);
                }
              }
              else
              {
                *unint64_t v252 = 121;
                unint64_t v256 = v252 + 1;
              }
              *uint64_t v253 = v256;
              if (!*v14)
              {
LABEL_1764:
                if ((*((unsigned char *)__p + 15) & 4) == 0) {
                  goto LABEL_4067;
                }
                uint64_t v476 = *v12 + 24 * v13;
                double v478 = (_DWORD **)(v476 + 8);
                unint64_t v477 = *(_DWORD **)(v476 + 8);
                unint64_t v480 = (void *)(v476 + 16);
                unint64_t v479 = *(void *)(v476 + 16);
                if ((unint64_t)v477 >= v479)
                {
                  unint64_t v482 = *(_DWORD **)v476;
                  uint64_t v483 = ((uint64_t)v477 - *(void *)v476) >> 2;
                  unint64_t v484 = v483 + 1;
                  if ((unint64_t)(v483 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v485 = v479 - (void)v482;
                  if (v485 >> 1 > v484) {
                    unint64_t v484 = v485 >> 1;
                  }
                  if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v486 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v486 = v484;
                  }
                  if (v486)
                  {
                    int64_t v487 = (char *)sub_458C8((uint64_t)v480, v486);
                    unint64_t v477 = *v478;
                    unint64_t v482 = *(_DWORD **)v476;
                  }
                  else
                  {
                    int64_t v487 = 0;
                  }
                  uint64_t v678 = &v487[4 * v483];
                  *(_DWORD *)uint64_t v678 = 122;
                  uint64_t v481 = v678 + 4;
                  while (v477 != v482)
                  {
                    int v679 = *--v477;
                    *((_DWORD *)v678 - 1) = v679;
                    v678 -= 4;
                  }
                  *(void *)uint64_t v476 = v678;
                  *double v478 = v481;
                  void *v480 = &v487[4 * v486];
                  if (v482) {
                    operator delete(v482);
                  }
                }
                else
                {
                  *unint64_t v477 = 122;
                  uint64_t v481 = v477 + 1;
                }
                *double v478 = v481;
                if (!*v14)
                {
LABEL_4067:
                  if ((*((unsigned char *)__p + 15) & 8) == 0) {
                    goto LABEL_4068;
                  }
                  uint64_t v680 = *v12 + 24 * v13;
                  uint64_t v682 = (_DWORD **)(v680 + 8);
                  uint64_t v681 = *(_DWORD **)(v680 + 8);
                  v684 = (void *)(v680 + 16);
                  unint64_t v683 = *(void *)(v680 + 16);
                  if ((unint64_t)v681 >= v683)
                  {
                    int v686 = *(_DWORD **)v680;
                    uint64_t v687 = ((uint64_t)v681 - *(void *)v680) >> 2;
                    unint64_t v688 = v687 + 1;
                    if ((unint64_t)(v687 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v689 = v683 - (void)v686;
                    if (v689 >> 1 > v688) {
                      unint64_t v688 = v689 >> 1;
                    }
                    if ((unint64_t)v689 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v690 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v690 = v688;
                    }
                    if (v690)
                    {
                      double v691 = (char *)sub_458C8((uint64_t)v684, v690);
                      uint64_t v681 = *v682;
                      int v686 = *(_DWORD **)v680;
                    }
                    else
                    {
                      double v691 = 0;
                    }
                    v867 = &v691[4 * v687];
                    *(_DWORD *)v867 = 123;
                    v685 = v867 + 4;
                    while (v681 != v686)
                    {
                      int v868 = *--v681;
                      *((_DWORD *)v867 - 1) = v868;
                      v867 -= 4;
                    }
                    *(void *)uint64_t v680 = v867;
                    *uint64_t v682 = v685;
                    void *v684 = &v691[4 * v690];
                    if (v686) {
                      operator delete(v686);
                    }
                  }
                  else
                  {
                    _DWORD *v681 = 123;
                    v685 = v681 + 1;
                  }
                  *uint64_t v682 = v685;
                  if (!*v14)
                  {
LABEL_4068:
                    if ((*((unsigned char *)__p + 15) & 0x10) == 0) {
                      goto LABEL_4069;
                    }
                    uint64_t v869 = *v12 + 24 * v13;
                    unsigned int v871 = (_DWORD **)(v869 + 8);
                    unsigned int v870 = *(_DWORD **)(v869 + 8);
                    v873 = (void *)(v869 + 16);
                    unint64_t v872 = *(void *)(v869 + 16);
                    if ((unint64_t)v870 >= v872)
                    {
                      unint64_t v875 = *(_DWORD **)v869;
                      uint64_t v876 = ((uint64_t)v870 - *(void *)v869) >> 2;
                      unint64_t v877 = v876 + 1;
                      if ((unint64_t)(v876 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v878 = v872 - (void)v875;
                      if (v878 >> 1 > v877) {
                        unint64_t v877 = v878 >> 1;
                      }
                      if ((unint64_t)v878 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v879 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v879 = v877;
                      }
                      if (v879)
                      {
                        v880 = (char *)sub_458C8((uint64_t)v873, v879);
                        unsigned int v870 = *v871;
                        unint64_t v875 = *(_DWORD **)v869;
                      }
                      else
                      {
                        v880 = 0;
                      }
                      v1042 = &v880[4 * v876];
                      *(_DWORD *)v1042 = 124;
                      v874 = v1042 + 4;
                      while (v870 != v875)
                      {
                        int v1043 = *--v870;
                        *((_DWORD *)v1042 - 1) = v1043;
                        v1042 -= 4;
                      }
                      *(void *)uint64_t v869 = v1042;
                      *unsigned int v871 = v874;
                      void *v873 = &v880[4 * v879];
                      if (v875) {
                        operator delete(v875);
                      }
                    }
                    else
                    {
                      *unsigned int v870 = 124;
                      v874 = v870 + 1;
                    }
                    *unsigned int v871 = v874;
                    if (!*v14)
                    {
LABEL_4069:
                      if ((*((unsigned char *)__p + 15) & 0x20) == 0) {
                        goto LABEL_4070;
                      }
                      uint64_t v1044 = *v12 + 24 * v13;
                      unsigned int v1046 = (_DWORD **)(v1044 + 8);
                      double v1045 = *(_DWORD **)(v1044 + 8);
                      v1048 = (void *)(v1044 + 16);
                      unint64_t v1047 = *(void *)(v1044 + 16);
                      if ((unint64_t)v1045 >= v1047)
                      {
                        double v1050 = *(_DWORD **)v1044;
                        uint64_t v1051 = ((uint64_t)v1045 - *(void *)v1044) >> 2;
                        unint64_t v1052 = v1051 + 1;
                        if ((unint64_t)(v1051 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1053 = v1047 - (void)v1050;
                        if (v1053 >> 1 > v1052) {
                          unint64_t v1052 = v1053 >> 1;
                        }
                        if ((unint64_t)v1053 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1054 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1054 = v1052;
                        }
                        if (v1054)
                        {
                          unint64_t v1055 = (char *)sub_458C8((uint64_t)v1048, v1054);
                          double v1045 = *v1046;
                          double v1050 = *(_DWORD **)v1044;
                        }
                        else
                        {
                          unint64_t v1055 = 0;
                        }
                        double v1215 = &v1055[4 * v1051];
                        *(_DWORD *)double v1215 = 125;
                        unint64_t v1049 = v1215 + 4;
                        while (v1045 != v1050)
                        {
                          int v1216 = *--v1045;
                          *((_DWORD *)v1215 - 1) = v1216;
                          v1215 -= 4;
                        }
                        *(void *)uint64_t v1044 = v1215;
                        *unsigned int v1046 = v1049;
                        void *v1048 = &v1055[4 * v1054];
                        if (v1050) {
                          operator delete(v1050);
                        }
                      }
                      else
                      {
                        *double v1045 = 125;
                        unint64_t v1049 = v1045 + 1;
                      }
                      *unsigned int v1046 = v1049;
                      if (!*v14)
                      {
LABEL_4070:
                        if ((*((unsigned char *)__p + 15) & 0x40) == 0) {
                          goto LABEL_4071;
                        }
                        uint64_t v1217 = *v12 + 24 * v13;
                        double v1219 = (_DWORD **)(v1217 + 8);
                        v1218 = *(_DWORD **)(v1217 + 8);
                        unint64_t v1221 = (void *)(v1217 + 16);
                        unint64_t v1220 = *(void *)(v1217 + 16);
                        if ((unint64_t)v1218 >= v1220)
                        {
                          v1223 = *(_DWORD **)v1217;
                          uint64_t v1224 = ((uint64_t)v1218 - *(void *)v1217) >> 2;
                          unint64_t v1225 = v1224 + 1;
                          if ((unint64_t)(v1224 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1226 = v1220 - (void)v1223;
                          if (v1226 >> 1 > v1225) {
                            unint64_t v1225 = v1226 >> 1;
                          }
                          if ((unint64_t)v1226 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1227 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1227 = v1225;
                          }
                          if (v1227)
                          {
                            int v1228 = (char *)sub_458C8((uint64_t)v1221, v1227);
                            v1218 = *v1219;
                            v1223 = *(_DWORD **)v1217;
                          }
                          else
                          {
                            int v1228 = 0;
                          }
                          v1372 = &v1228[4 * v1224];
                          *(_DWORD *)v1372 = 126;
                          double v1222 = v1372 + 4;
                          while (v1218 != v1223)
                          {
                            int v1373 = *--v1218;
                            *((_DWORD *)v1372 - 1) = v1373;
                            v1372 -= 4;
                          }
                          *(void *)uint64_t v1217 = v1372;
                          *double v1219 = v1222;
                          *unint64_t v1221 = &v1228[4 * v1227];
                          if (v1223) {
                            operator delete(v1223);
                          }
                        }
                        else
                        {
                          _DWORD *v1218 = 126;
                          double v1222 = v1218 + 1;
                        }
                        *double v1219 = v1222;
                        if (!*v14)
                        {
LABEL_4071:
                          if ((*((void *)__p + 1) & 0x8000000000000000) != 0)
                          {
                            uint64_t v223 = *v12 + 24 * v13;
                            uint64_t v225 = (int **)(v223 + 8);
                            uint64_t v224 = *(int **)(v223 + 8);
                            uint64_t v227 = (void *)(v223 + 16);
                            unint64_t v1374 = *(void *)(v223 + 16);
                            if ((unint64_t)v224 < v1374)
                            {
                              int v228 = 127;
                              goto LABEL_2185;
                            }
                            double v229 = *(int **)v223;
                            uint64_t v1375 = ((uint64_t)v224 - *(void *)v223) >> 2;
                            unint64_t v1376 = v1375 + 1;
                            if ((unint64_t)(v1375 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1377 = v1374 - (void)v229;
                            if (v1377 >> 1 > v1376) {
                              unint64_t v1376 = v1377 >> 1;
                            }
                            if ((unint64_t)v1377 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v233 = v1376;
                            }
                            if (v233)
                            {
                              uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                              uint64_t v224 = *v225;
                              double v229 = *(int **)v223;
                            }
                            else
                            {
                              uint64_t v234 = 0;
                            }
                            uint64_t v457 = &v234[4 * v1375];
                            *(_DWORD *)uint64_t v457 = 127;
                            unint64_t v458 = (int *)(v457 + 4);
                            while (v224 != v229)
                            {
                              int v1644 = *--v224;
                              *((_DWORD *)v457 - 1) = v1644;
                              v457 -= 4;
                            }
                            goto LABEL_3707;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 13:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 12) & 0x20) == 0) {
              goto LABEL_428;
            }
            uint64_t v87 = *v12 + 24 * v13;
            uint64_t v89 = (_DWORD **)(v87 + 8);
            unsigned int v88 = *(_DWORD **)(v87 + 8);
            uint64_t v91 = (void *)(v87 + 16);
            unint64_t v90 = *(void *)(v87 + 16);
            if ((unint64_t)v88 >= v90)
            {
              uint64_t v183 = *(_DWORD **)v87;
              uint64_t v184 = ((uint64_t)v88 - *(void *)v87) >> 2;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v186 = v90 - (void)v183;
              if (v186 >> 1 > v185) {
                unint64_t v185 = v186 >> 1;
              }
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v185;
              }
              if (v187)
              {
                uint64_t v188 = (char *)sub_458C8((uint64_t)v91, v187);
                unsigned int v88 = *v89;
                uint64_t v183 = *(_DWORD **)v87;
              }
              else
              {
                uint64_t v188 = 0;
              }
              unint64_t v375 = &v188[4 * v184];
              *(_DWORD *)unint64_t v375 = 101;
              uint64_t v92 = v375 + 4;
              while (v88 != v183)
              {
                int v376 = *--v88;
                *((_DWORD *)v375 - 1) = v376;
                v375 -= 4;
              }
              *(void *)uint64_t v87 = v375;
              *uint64_t v89 = v92;
              *uint64_t v91 = &v188[4 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              _DWORD *v88 = 101;
              uint64_t v92 = v88 + 1;
            }
            *uint64_t v89 = v92;
            if (!*v14)
            {
LABEL_428:
              if ((*((unsigned char *)__p + 12) & 0x40) == 0) {
                goto LABEL_2866;
              }
              uint64_t v377 = *v12 + 24 * v13;
              int v379 = (_DWORD **)(v377 + 8);
              double v378 = *(_DWORD **)(v377 + 8);
              unsigned int v381 = (void *)(v377 + 16);
              unint64_t v380 = *(void *)(v377 + 16);
              if ((unint64_t)v378 >= v380)
              {
                char v383 = *(_DWORD **)v377;
                uint64_t v384 = ((uint64_t)v378 - *(void *)v377) >> 2;
                unint64_t v385 = v384 + 1;
                if ((unint64_t)(v384 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v386 = v380 - (void)v383;
                if (v386 >> 1 > v385) {
                  unint64_t v385 = v386 >> 1;
                }
                if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v387 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v387 = v385;
                }
                if (v387)
                {
                  uint64_t v388 = (char *)sub_458C8((uint64_t)v381, v387);
                  double v378 = *v379;
                  char v383 = *(_DWORD **)v377;
                }
                else
                {
                  uint64_t v388 = 0;
                }
                int v600 = &v388[4 * v384];
                *(_DWORD *)int v600 = 102;
                unint64_t v382 = v600 + 4;
                while (v378 != v383)
                {
                  int v601 = *--v378;
                  *((_DWORD *)v600 - 1) = v601;
                  v600 -= 4;
                }
                *(void *)uint64_t v377 = v600;
                *int v379 = v382;
                *unsigned int v381 = &v388[4 * v387];
                if (v383) {
                  operator delete(v383);
                }
              }
              else
              {
                *double v378 = 102;
                unint64_t v382 = v378 + 1;
              }
              *int v379 = v382;
              if (!*v14)
              {
LABEL_2866:
                if ((*((unsigned char *)__p + 12) & 0x80) == 0) {
                  goto LABEL_4072;
                }
                uint64_t v602 = *v12 + 24 * v13;
                int v604 = (_DWORD **)(v602 + 8);
                char v603 = *(_DWORD **)(v602 + 8);
                unint64_t v606 = (void *)(v602 + 16);
                unint64_t v605 = *(void *)(v602 + 16);
                if ((unint64_t)v603 >= v605)
                {
                  unint64_t v608 = *(_DWORD **)v602;
                  uint64_t v609 = ((uint64_t)v603 - *(void *)v602) >> 2;
                  unint64_t v610 = v609 + 1;
                  if ((unint64_t)(v609 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v611 = v605 - (void)v608;
                  if (v611 >> 1 > v610) {
                    unint64_t v610 = v611 >> 1;
                  }
                  if ((unint64_t)v611 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v612 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v612 = v610;
                  }
                  if (v612)
                  {
                    char v613 = (char *)sub_458C8((uint64_t)v606, v612);
                    char v603 = *v604;
                    unint64_t v608 = *(_DWORD **)v602;
                  }
                  else
                  {
                    char v613 = 0;
                  }
                  v796 = &v613[4 * v609];
                  *(_DWORD *)v796 = 103;
                  unsigned int v607 = v796 + 4;
                  while (v603 != v608)
                  {
                    int v797 = *--v603;
                    *((_DWORD *)v796 - 1) = v797;
                    v796 -= 4;
                  }
                  *(void *)uint64_t v602 = v796;
                  *int v604 = v607;
                  void *v606 = &v613[4 * v612];
                  if (v608) {
                    operator delete(v608);
                  }
                }
                else
                {
                  *char v603 = 103;
                  unsigned int v607 = v603 + 1;
                }
                *int v604 = v607;
                if (!*v14)
                {
LABEL_4072:
                  if ((*((unsigned char *)__p + 13) & 1) == 0) {
                    goto LABEL_4073;
                  }
                  uint64_t v798 = *v12 + 24 * v13;
                  double v800 = (_DWORD **)(v798 + 8);
                  int v799 = *(_DWORD **)(v798 + 8);
                  v802 = (void *)(v798 + 16);
                  unint64_t v801 = *(void *)(v798 + 16);
                  if ((unint64_t)v799 >= v801)
                  {
                    v804 = *(_DWORD **)v798;
                    uint64_t v805 = ((uint64_t)v799 - *(void *)v798) >> 2;
                    unint64_t v806 = v805 + 1;
                    if ((unint64_t)(v805 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v807 = v801 - (void)v804;
                    if (v807 >> 1 > v806) {
                      unint64_t v806 = v807 >> 1;
                    }
                    if ((unint64_t)v807 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v808 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v808 = v806;
                    }
                    if (v808)
                    {
                      double v809 = (char *)sub_458C8((uint64_t)v802, v808);
                      int v799 = *v800;
                      v804 = *(_DWORD **)v798;
                    }
                    else
                    {
                      double v809 = 0;
                    }
                    int v980 = &v809[4 * v805];
                    *(_DWORD *)int v980 = 104;
                    double v803 = v980 + 4;
                    while (v799 != v804)
                    {
                      int v981 = *--v799;
                      *((_DWORD *)v980 - 1) = v981;
                      v980 -= 4;
                    }
                    *(void *)uint64_t v798 = v980;
                    *double v800 = v803;
                    void *v802 = &v809[4 * v808];
                    if (v804) {
                      operator delete(v804);
                    }
                  }
                  else
                  {
                    *int v799 = 104;
                    double v803 = v799 + 1;
                  }
                  *double v800 = v803;
                  if (!*v14)
                  {
LABEL_4073:
                    if ((*((unsigned char *)__p + 13) & 2) == 0) {
                      goto LABEL_4074;
                    }
                    uint64_t v982 = *v12 + 24 * v13;
                    v984 = (_DWORD **)(v982 + 8);
                    uint64_t v983 = *(_DWORD **)(v982 + 8);
                    int v986 = (void *)(v982 + 16);
                    unint64_t v985 = *(void *)(v982 + 16);
                    if ((unint64_t)v983 >= v985)
                    {
                      unsigned int v988 = *(_DWORD **)v982;
                      uint64_t v989 = ((uint64_t)v983 - *(void *)v982) >> 2;
                      unint64_t v990 = v989 + 1;
                      if ((unint64_t)(v989 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v991 = v985 - (void)v988;
                      if (v991 >> 1 > v990) {
                        unint64_t v990 = v991 >> 1;
                      }
                      if ((unint64_t)v991 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v992 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v992 = v990;
                      }
                      if (v992)
                      {
                        unint64_t v993 = (char *)sub_458C8((uint64_t)v986, v992);
                        uint64_t v983 = *v984;
                        unsigned int v988 = *(_DWORD **)v982;
                      }
                      else
                      {
                        unint64_t v993 = 0;
                      }
                      v1166 = &v993[4 * v989];
                      *(_DWORD *)v1166 = 105;
                      unsigned int v987 = v1166 + 4;
                      while (v983 != v988)
                      {
                        int v1167 = *--v983;
                        *((_DWORD *)v1166 - 1) = v1167;
                        v1166 -= 4;
                      }
                      *(void *)uint64_t v982 = v1166;
                      unsigned __int8 *v984 = v987;
                      void *v986 = &v993[4 * v992];
                      if (v988) {
                        operator delete(v988);
                      }
                    }
                    else
                    {
                      *uint64_t v983 = 105;
                      unsigned int v987 = v983 + 1;
                    }
                    unsigned __int8 *v984 = v987;
                    if (!*v14)
                    {
LABEL_4074:
                      if ((*((unsigned char *)__p + 13) & 4) == 0) {
                        goto LABEL_4075;
                      }
                      uint64_t v1168 = *v12 + 24 * v13;
                      double v1170 = (_DWORD **)(v1168 + 8);
                      unint64_t v1169 = *(_DWORD **)(v1168 + 8);
                      v1172 = (void *)(v1168 + 16);
                      unint64_t v1171 = *(void *)(v1168 + 16);
                      if ((unint64_t)v1169 >= v1171)
                      {
                        double v1174 = *(_DWORD **)v1168;
                        uint64_t v1175 = ((uint64_t)v1169 - *(void *)v1168) >> 2;
                        unint64_t v1176 = v1175 + 1;
                        if ((unint64_t)(v1175 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1177 = v1171 - (void)v1174;
                        if (v1177 >> 1 > v1176) {
                          unint64_t v1176 = v1177 >> 1;
                        }
                        if ((unint64_t)v1177 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1178 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1178 = v1176;
                        }
                        if (v1178)
                        {
                          v1179 = (char *)sub_458C8((uint64_t)v1172, v1178);
                          unint64_t v1169 = *v1170;
                          double v1174 = *(_DWORD **)v1168;
                        }
                        else
                        {
                          v1179 = 0;
                        }
                        v1313 = &v1179[4 * v1175];
                        *(_DWORD *)v1313 = 106;
                        v1173 = v1313 + 4;
                        while (v1169 != v1174)
                        {
                          int v1314 = *--v1169;
                          *((_DWORD *)v1313 - 1) = v1314;
                          v1313 -= 4;
                        }
                        *(void *)uint64_t v1168 = v1313;
                        *double v1170 = v1173;
                        void *v1172 = &v1179[4 * v1178];
                        if (v1174) {
                          operator delete(v1174);
                        }
                      }
                      else
                      {
                        *unint64_t v1169 = 106;
                        v1173 = v1169 + 1;
                      }
                      *double v1170 = v1173;
                      if (!*v14)
                      {
LABEL_4075:
                        if ((*((unsigned char *)__p + 13) & 8) == 0) {
                          goto LABEL_4076;
                        }
                        uint64_t v1315 = *v12 + 24 * v13;
                        double v1317 = (_DWORD **)(v1315 + 8);
                        unint64_t v1316 = *(_DWORD **)(v1315 + 8);
                        v1319 = (void *)(v1315 + 16);
                        unint64_t v1318 = *(void *)(v1315 + 16);
                        if ((unint64_t)v1316 >= v1318)
                        {
                          unint64_t v1321 = *(_DWORD **)v1315;
                          uint64_t v1322 = ((uint64_t)v1316 - *(void *)v1315) >> 2;
                          unint64_t v1323 = v1322 + 1;
                          if ((unint64_t)(v1322 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1324 = v1318 - (void)v1321;
                          if (v1324 >> 1 > v1323) {
                            unint64_t v1323 = v1324 >> 1;
                          }
                          if ((unint64_t)v1324 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1325 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1325 = v1323;
                          }
                          if (v1325)
                          {
                            v1326 = (char *)sub_458C8((uint64_t)v1319, v1325);
                            unint64_t v1316 = *v1317;
                            unint64_t v1321 = *(_DWORD **)v1315;
                          }
                          else
                          {
                            v1326 = 0;
                          }
                          double v1462 = &v1326[4 * v1322];
                          *(_DWORD *)double v1462 = 107;
                          v1320 = v1462 + 4;
                          while (v1316 != v1321)
                          {
                            int v1463 = *--v1316;
                            *((_DWORD *)v1462 - 1) = v1463;
                            v1462 -= 4;
                          }
                          *(void *)uint64_t v1315 = v1462;
                          *double v1317 = v1320;
                          void *v1319 = &v1326[4 * v1325];
                          if (v1321) {
                            operator delete(v1321);
                          }
                        }
                        else
                        {
                          *unint64_t v1316 = 107;
                          v1320 = v1316 + 1;
                        }
                        *double v1317 = v1320;
                        if (!*v14)
                        {
LABEL_4076:
                          if ((*((unsigned char *)__p + 13) & 0x10) == 0) {
                            goto LABEL_4077;
                          }
                          uint64_t v1464 = *v12 + 24 * v13;
                          uint64_t v1466 = (_DWORD **)(v1464 + 8);
                          v1465 = *(_DWORD **)(v1464 + 8);
                          double v1468 = (void *)(v1464 + 16);
                          unint64_t v1467 = *(void *)(v1464 + 16);
                          if ((unint64_t)v1465 >= v1467)
                          {
                            v1470 = *(_DWORD **)v1464;
                            uint64_t v1471 = ((uint64_t)v1465 - *(void *)v1464) >> 2;
                            unint64_t v1472 = v1471 + 1;
                            if ((unint64_t)(v1471 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1473 = v1467 - (void)v1470;
                            if (v1473 >> 1 > v1472) {
                              unint64_t v1472 = v1473 >> 1;
                            }
                            if ((unint64_t)v1473 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1474 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1474 = v1472;
                            }
                            if (v1474)
                            {
                              v1475 = (char *)sub_458C8((uint64_t)v1468, v1474);
                              v1465 = *v1466;
                              v1470 = *(_DWORD **)v1464;
                            }
                            else
                            {
                              v1475 = 0;
                            }
                            v1602 = &v1475[4 * v1471];
                            *(_DWORD *)v1602 = 108;
                            v1469 = v1602 + 4;
                            while (v1465 != v1470)
                            {
                              int v1603 = *--v1465;
                              *((_DWORD *)v1602 - 1) = v1603;
                              v1602 -= 4;
                            }
                            *(void *)uint64_t v1464 = v1602;
                            *uint64_t v1466 = v1469;
                            *double v1468 = &v1475[4 * v1474];
                            if (v1470) {
                              operator delete(v1470);
                            }
                          }
                          else
                          {
                            _DWORD *v1465 = 108;
                            v1469 = v1465 + 1;
                          }
                          *uint64_t v1466 = v1469;
                          if (!*v14)
                          {
LABEL_4077:
                            if ((*((unsigned char *)__p + 13) & 0x20) == 0) {
                              goto LABEL_4078;
                            }
                            uint64_t v1604 = *v12 + 24 * v13;
                            v1606 = (_DWORD **)(v1604 + 8);
                            int v1605 = *(_DWORD **)(v1604 + 8);
                            v1608 = (void *)(v1604 + 16);
                            unint64_t v1607 = *(void *)(v1604 + 16);
                            if ((unint64_t)v1605 >= v1607)
                            {
                              unint64_t v1610 = *(_DWORD **)v1604;
                              uint64_t v1611 = ((uint64_t)v1605 - *(void *)v1604) >> 2;
                              unint64_t v1612 = v1611 + 1;
                              if ((unint64_t)(v1611 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1613 = v1607 - (void)v1610;
                              if (v1613 >> 1 > v1612) {
                                unint64_t v1612 = v1613 >> 1;
                              }
                              if ((unint64_t)v1613 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1614 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1614 = v1612;
                              }
                              if (v1614)
                              {
                                int v1615 = (char *)sub_458C8((uint64_t)v1608, v1614);
                                int v1605 = *v1606;
                                unint64_t v1610 = *(_DWORD **)v1604;
                              }
                              else
                              {
                                int v1615 = 0;
                              }
                              v1735 = &v1615[4 * v1611];
                              *(_DWORD *)v1735 = 109;
                              double v1609 = v1735 + 4;
                              while (v1605 != v1610)
                              {
                                int v1736 = *--v1605;
                                *((_DWORD *)v1735 - 1) = v1736;
                                v1735 -= 4;
                              }
                              *(void *)uint64_t v1604 = v1735;
                              double *v1606 = v1609;
                              void *v1608 = &v1615[4 * v1614];
                              if (v1610) {
                                operator delete(v1610);
                              }
                            }
                            else
                            {
                              *int v1605 = 109;
                              double v1609 = v1605 + 1;
                            }
                            double *v1606 = v1609;
                            if (!*v14)
                            {
LABEL_4078:
                              if ((*((unsigned char *)__p + 13) & 0x40) == 0) {
                                goto LABEL_4079;
                              }
                              uint64_t v1737 = *v12 + 24 * v13;
                              v1739 = (_DWORD **)(v1737 + 8);
                              int v1738 = *(_DWORD **)(v1737 + 8);
                              v1741 = (void *)(v1737 + 16);
                              unint64_t v1740 = *(void *)(v1737 + 16);
                              if ((unint64_t)v1738 >= v1740)
                              {
                                int v1743 = *(_DWORD **)v1737;
                                uint64_t v1744 = ((uint64_t)v1738 - *(void *)v1737) >> 2;
                                unint64_t v1745 = v1744 + 1;
                                if ((unint64_t)(v1744 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1746 = v1740 - (void)v1743;
                                if (v1746 >> 1 > v1745) {
                                  unint64_t v1745 = v1746 >> 1;
                                }
                                if ((unint64_t)v1746 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1747 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1747 = v1745;
                                }
                                if (v1747)
                                {
                                  uint64_t v1748 = (char *)sub_458C8((uint64_t)v1741, v1747);
                                  int v1738 = *v1739;
                                  int v1743 = *(_DWORD **)v1737;
                                }
                                else
                                {
                                  uint64_t v1748 = 0;
                                }
                                unsigned int v1843 = &v1748[4 * v1744];
                                *(_DWORD *)unsigned int v1843 = 110;
                                int v1742 = v1843 + 4;
                                while (v1738 != v1743)
                                {
                                  int v1844 = *--v1738;
                                  *((_DWORD *)v1843 - 1) = v1844;
                                  v1843 -= 4;
                                }
                                *(void *)uint64_t v1737 = v1843;
                                unsigned __int8 *v1739 = v1742;
                                void *v1741 = &v1748[4 * v1747];
                                if (v1743) {
                                  operator delete(v1743);
                                }
                              }
                              else
                              {
                                *int v1738 = 110;
                                int v1742 = v1738 + 1;
                              }
                              unsigned __int8 *v1739 = v1742;
                              if (!*v14)
                              {
LABEL_4079:
                                if ((*((unsigned char *)__p + 13) & 0x80) == 0) {
                                  goto LABEL_4080;
                                }
                                uint64_t v1845 = *v12 + 24 * v13;
                                v1847 = (_DWORD **)(v1845 + 8);
                                v1846 = *(_DWORD **)(v1845 + 8);
                                unsigned int v1849 = (void *)(v1845 + 16);
                                unint64_t v1848 = *(void *)(v1845 + 16);
                                if ((unint64_t)v1846 >= v1848)
                                {
                                  v1851 = *(_DWORD **)v1845;
                                  uint64_t v1852 = ((uint64_t)v1846 - *(void *)v1845) >> 2;
                                  unint64_t v1853 = v1852 + 1;
                                  if ((unint64_t)(v1852 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1854 = v1848 - (void)v1851;
                                  if (v1854 >> 1 > v1853) {
                                    unint64_t v1853 = v1854 >> 1;
                                  }
                                  if ((unint64_t)v1854 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1855 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1855 = v1853;
                                  }
                                  if (v1855)
                                  {
                                    v1856 = (char *)sub_458C8((uint64_t)v1849, v1855);
                                    v1846 = *v1847;
                                    v1851 = *(_DWORD **)v1845;
                                  }
                                  else
                                  {
                                    v1856 = 0;
                                  }
                                  v1934 = &v1856[4 * v1852];
                                  *(_DWORD *)v1934 = 111;
                                  unsigned int v1850 = v1934 + 4;
                                  while (v1846 != v1851)
                                  {
                                    int v1935 = *--v1846;
                                    *((_DWORD *)v1934 - 1) = v1935;
                                    v1934 -= 4;
                                  }
                                  *(void *)uint64_t v1845 = v1934;
                                  BOOL *v1847 = v1850;
                                  *unsigned int v1849 = &v1856[4 * v1855];
                                  if (v1851) {
                                    operator delete(v1851);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1846 = 111;
                                  unsigned int v1850 = v1846 + 1;
                                }
                                BOOL *v1847 = v1850;
                                if (!*v14)
                                {
LABEL_4080:
                                  if ((*((unsigned char *)__p + 14) & 1) == 0) {
                                    goto LABEL_4081;
                                  }
                                  uint64_t v1936 = *v12 + 24 * v13;
                                  unint64_t v1938 = (_DWORD **)(v1936 + 8);
                                  unsigned int v1937 = *(_DWORD **)(v1936 + 8);
                                  v1940 = (void *)(v1936 + 16);
                                  unint64_t v1939 = *(void *)(v1936 + 16);
                                  if ((unint64_t)v1937 >= v1939)
                                  {
                                    unsigned int v1942 = *(_DWORD **)v1936;
                                    uint64_t v1943 = ((uint64_t)v1937 - *(void *)v1936) >> 2;
                                    unint64_t v1944 = v1943 + 1;
                                    if ((unint64_t)(v1943 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1945 = v1939 - (void)v1942;
                                    if (v1945 >> 1 > v1944) {
                                      unint64_t v1944 = v1945 >> 1;
                                    }
                                    if ((unint64_t)v1945 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1946 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1946 = v1944;
                                    }
                                    if (v1946)
                                    {
                                      v1947 = (char *)sub_458C8((uint64_t)v1940, v1946);
                                      unsigned int v1937 = *v1938;
                                      unsigned int v1942 = *(_DWORD **)v1936;
                                    }
                                    else
                                    {
                                      v1947 = 0;
                                    }
                                    v2019 = &v1947[4 * v1943];
                                    *(_DWORD *)v2019 = 112;
                                    v1941 = v2019 + 4;
                                    while (v1937 != v1942)
                                    {
                                      int v2020 = *--v1937;
                                      *((_DWORD *)v2019 - 1) = v2020;
                                      v2019 -= 4;
                                    }
                                    *(void *)uint64_t v1936 = v2019;
                                    *unint64_t v1938 = v1941;
                                    void *v1940 = &v1947[4 * v1946];
                                    if (v1942) {
                                      operator delete(v1942);
                                    }
                                  }
                                  else
                                  {
                                    *unsigned int v1937 = 112;
                                    v1941 = v1937 + 1;
                                  }
                                  *unint64_t v1938 = v1941;
                                  if (!*v14)
                                  {
LABEL_4081:
                                    if ((*((unsigned char *)__p + 14) & 2) == 0) {
                                      goto LABEL_4082;
                                    }
                                    uint64_t v2021 = *v12 + 24 * v13;
                                    v2023 = (_DWORD **)(v2021 + 8);
                                    v2022 = *(_DWORD **)(v2021 + 8);
                                    v2025 = (void *)(v2021 + 16);
                                    unint64_t v2024 = *(void *)(v2021 + 16);
                                    if ((unint64_t)v2022 >= v2024)
                                    {
                                      v2027 = *(_DWORD **)v2021;
                                      uint64_t v2028 = ((uint64_t)v2022 - *(void *)v2021) >> 2;
                                      unint64_t v2029 = v2028 + 1;
                                      if ((unint64_t)(v2028 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2030 = v2024 - (void)v2027;
                                      if (v2030 >> 1 > v2029) {
                                        unint64_t v2029 = v2030 >> 1;
                                      }
                                      if ((unint64_t)v2030 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v2031 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v2031 = v2029;
                                      }
                                      if (v2031)
                                      {
                                        v2032 = (char *)sub_458C8((uint64_t)v2025, v2031);
                                        v2022 = *v2023;
                                        v2027 = *(_DWORD **)v2021;
                                      }
                                      else
                                      {
                                        v2032 = 0;
                                      }
                                      v2103 = &v2032[4 * v2028];
                                      *(_DWORD *)v2103 = 113;
                                      v2026 = v2103 + 4;
                                      while (v2022 != v2027)
                                      {
                                        int v2104 = *--v2022;
                                        *((_DWORD *)v2103 - 1) = v2104;
                                        v2103 -= 4;
                                      }
                                      *(void *)uint64_t v2021 = v2103;
                                      *v2023 = v2026;
                                      void *v2025 = &v2032[4 * v2031];
                                      if (v2027) {
                                        operator delete(v2027);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v2022 = 113;
                                      v2026 = v2022 + 1;
                                    }
                                    *v2023 = v2026;
                                    if (!*v14)
                                    {
LABEL_4082:
                                      if ((*((unsigned char *)__p + 14) & 4) == 0) {
                                        goto LABEL_4083;
                                      }
                                      uint64_t v2105 = *v12 + 24 * v13;
                                      v2107 = (_DWORD **)(v2105 + 8);
                                      v2106 = *(_DWORD **)(v2105 + 8);
                                      v2109 = (void *)(v2105 + 16);
                                      unint64_t v2108 = *(void *)(v2105 + 16);
                                      if ((unint64_t)v2106 >= v2108)
                                      {
                                        v2111 = *(_DWORD **)v2105;
                                        uint64_t v2112 = ((uint64_t)v2106 - *(void *)v2105) >> 2;
                                        unint64_t v2113 = v2112 + 1;
                                        if ((unint64_t)(v2112 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2114 = v2108 - (void)v2111;
                                        if (v2114 >> 1 > v2113) {
                                          unint64_t v2113 = v2114 >> 1;
                                        }
                                        if ((unint64_t)v2114 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2115 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2115 = v2113;
                                        }
                                        if (v2115)
                                        {
                                          v2116 = (char *)sub_458C8((uint64_t)v2109, v2115);
                                          v2106 = *v2107;
                                          v2111 = *(_DWORD **)v2105;
                                        }
                                        else
                                        {
                                          v2116 = 0;
                                        }
                                        v2187 = &v2116[4 * v2112];
                                        *(_DWORD *)v2187 = 114;
                                        v2110 = v2187 + 4;
                                        while (v2106 != v2111)
                                        {
                                          int v2188 = *--v2106;
                                          *((_DWORD *)v2187 - 1) = v2188;
                                          v2187 -= 4;
                                        }
                                        *(void *)uint64_t v2105 = v2187;
                                        *v2107 = v2110;
                                        void *v2109 = &v2116[4 * v2115];
                                        if (v2111) {
                                          operator delete(v2111);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2106 = 114;
                                        v2110 = v2106 + 1;
                                      }
                                      *v2107 = v2110;
                                      if (!*v14)
                                      {
LABEL_4083:
                                        if ((*((unsigned char *)__p + 14) & 8) != 0)
                                        {
                                          uint64_t v223 = *v12 + 24 * v13;
                                          uint64_t v225 = (int **)(v223 + 8);
                                          uint64_t v224 = *(int **)(v223 + 8);
                                          uint64_t v227 = (void *)(v223 + 16);
                                          unint64_t v2189 = *(void *)(v223 + 16);
                                          if ((unint64_t)v224 < v2189)
                                          {
                                            int v228 = 115;
                                            goto LABEL_2185;
                                          }
                                          double v229 = *(int **)v223;
                                          uint64_t v2190 = ((uint64_t)v224 - *(void *)v223) >> 2;
                                          unint64_t v2191 = v2190 + 1;
                                          if ((unint64_t)(v2190 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2192 = v2189 - (void)v229;
                                          if (v2192 >> 1 > v2191) {
                                            unint64_t v2191 = v2192 >> 1;
                                          }
                                          if ((unint64_t)v2192 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v233 = v2191;
                                          }
                                          if (v233)
                                          {
                                            uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                                            uint64_t v224 = *v225;
                                            double v229 = *(int **)v223;
                                          }
                                          else
                                          {
                                            uint64_t v234 = 0;
                                          }
                                          uint64_t v457 = &v234[4 * v2190];
                                          *(_DWORD *)uint64_t v457 = 115;
                                          unint64_t v458 = (int *)(v457 + 4);
                                          while (v224 != v229)
                                          {
                                            int v2263 = *--v224;
                                            *((_DWORD *)v457 - 1) = v2263;
                                            v457 -= 4;
                                          }
                                          goto LABEL_3707;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 14:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 14) & 0x10) == 0) {
              goto LABEL_212;
            }
            uint64_t v21 = *v12 + 24 * v13;
            int v23 = (_DWORD **)(v21 + 8);
            int v22 = *(_DWORD **)(v21 + 8);
            int v25 = (void *)(v21 + 16);
            unint64_t v24 = *(void *)(v21 + 16);
            if ((unint64_t)v22 >= v24)
            {
              double v111 = *(_DWORD **)v21;
              uint64_t v112 = ((uint64_t)v22 - *(void *)v21) >> 2;
              unint64_t v113 = v112 + 1;
              if ((unint64_t)(v112 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v114 = v24 - (void)v111;
              if (v114 >> 1 > v113) {
                unint64_t v113 = v114 >> 1;
              }
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v113;
              }
              if (v115)
              {
                unint64_t v116 = (char *)sub_458C8((uint64_t)v25, v115);
                int v22 = *v23;
                double v111 = *(_DWORD **)v21;
              }
              else
              {
                unint64_t v116 = 0;
              }
              uint64_t v207 = &v116[4 * v112];
              *(_DWORD *)uint64_t v207 = 116;
              uint64_t v26 = v207 + 4;
              while (v22 != v111)
              {
                int v208 = *--v22;
                *((_DWORD *)v207 - 1) = v208;
                v207 -= 4;
              }
              *(void *)uint64_t v21 = v207;
              *int v23 = v26;
              *int v25 = &v116[4 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              _DWORD *v22 = 116;
              uint64_t v26 = v22 + 1;
            }
            *int v23 = v26;
            if (!*v14)
            {
LABEL_212:
              if ((*((unsigned char *)__p + 14) & 0x20) == 0) {
                goto LABEL_793;
              }
              uint64_t v209 = *v12 + 24 * v13;
              uint64_t v211 = (_DWORD **)(v209 + 8);
              uint64_t v210 = *(_DWORD **)(v209 + 8);
              unint64_t v213 = (void *)(v209 + 16);
              unint64_t v212 = *(void *)(v209 + 16);
              if ((unint64_t)v210 >= v212)
              {
                unint64_t v215 = *(_DWORD **)v209;
                uint64_t v216 = ((uint64_t)v210 - *(void *)v209) >> 2;
                unint64_t v217 = v216 + 1;
                if ((unint64_t)(v216 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v218 = v212 - (void)v215;
                if (v218 >> 1 > v217) {
                  unint64_t v217 = v218 >> 1;
                }
                if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v219 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v219 = v217;
                }
                if (v219)
                {
                  uint64_t v220 = (char *)sub_458C8((uint64_t)v213, v219);
                  uint64_t v210 = *v211;
                  unint64_t v215 = *(_DWORD **)v209;
                }
                else
                {
                  uint64_t v220 = 0;
                }
                uint64_t v443 = &v220[4 * v216];
                *(_DWORD *)uint64_t v443 = 117;
                unint64_t v214 = v443 + 4;
                while (v210 != v215)
                {
                  int v444 = *--v210;
                  *((_DWORD *)v443 - 1) = v444;
                  v443 -= 4;
                }
                *(void *)uint64_t v209 = v443;
                *uint64_t v211 = v214;
                void *v213 = &v220[4 * v219];
                if (v215) {
                  operator delete(v215);
                }
              }
              else
              {
                *uint64_t v210 = 117;
                unint64_t v214 = v210 + 1;
              }
              *uint64_t v211 = v214;
              if (!*v14)
              {
LABEL_793:
                if ((*((unsigned char *)__p + 14) & 0x40) == 0) {
                  goto LABEL_4084;
                }
                uint64_t v445 = *v12 + 24 * v13;
                uint64_t v447 = (_DWORD **)(v445 + 8);
                int v446 = *(_DWORD **)(v445 + 8);
                int v449 = (void *)(v445 + 16);
                unint64_t v448 = *(void *)(v445 + 16);
                if ((unint64_t)v446 >= v448)
                {
                  v451 = *(_DWORD **)v445;
                  uint64_t v452 = ((uint64_t)v446 - *(void *)v445) >> 2;
                  unint64_t v453 = v452 + 1;
                  if ((unint64_t)(v452 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v454 = v448 - (void)v451;
                  if (v454 >> 1 > v453) {
                    unint64_t v453 = v454 >> 1;
                  }
                  if ((unint64_t)v454 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v455 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v455 = v453;
                  }
                  if (v455)
                  {
                    int64_t v456 = (char *)sub_458C8((uint64_t)v449, v455);
                    int v446 = *v447;
                    v451 = *(_DWORD **)v445;
                  }
                  else
                  {
                    int64_t v456 = 0;
                  }
                  double v658 = &v456[4 * v452];
                  *(_DWORD *)double v658 = 118;
                  uint64_t v450 = v658 + 4;
                  while (v446 != v451)
                  {
                    int v659 = *--v446;
                    *((_DWORD *)v658 - 1) = v659;
                    v658 -= 4;
                  }
                  *(void *)uint64_t v445 = v658;
                  *uint64_t v447 = v450;
                  void *v449 = &v456[4 * v455];
                  if (v451) {
                    operator delete(v451);
                  }
                }
                else
                {
                  *int v446 = 118;
                  uint64_t v450 = v446 + 1;
                }
                *uint64_t v447 = v450;
                if (!*v14)
                {
LABEL_4084:
                  if ((*((unsigned char *)__p + 14) & 0x80) != 0)
                  {
                    uint64_t v223 = *v12 + 24 * v13;
                    uint64_t v225 = (int **)(v223 + 8);
                    uint64_t v224 = *(int **)(v223 + 8);
                    uint64_t v227 = (void *)(v223 + 16);
                    unint64_t v660 = *(void *)(v223 + 16);
                    if ((unint64_t)v224 < v660)
                    {
                      int v228 = 119;
                      goto LABEL_2185;
                    }
                    double v229 = *(int **)v223;
                    uint64_t v661 = ((uint64_t)v224 - *(void *)v223) >> 2;
                    unint64_t v662 = v661 + 1;
                    if ((unint64_t)(v661 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v663 = v660 - (void)v229;
                    if (v663 >> 1 > v662) {
                      unint64_t v662 = v663 >> 1;
                    }
                    if ((unint64_t)v663 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v233 = v662;
                    }
                    if (v233)
                    {
                      uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                      uint64_t v224 = *v225;
                      double v229 = *(int **)v223;
                    }
                    else
                    {
                      uint64_t v234 = 0;
                    }
                    uint64_t v457 = &v234[4 * v661];
                    *(_DWORD *)uint64_t v457 = 119;
                    unint64_t v458 = (int *)(v457 + 4);
                    while (v224 != v229)
                    {
                      int v852 = *--v224;
                      *((_DWORD *)v457 - 1) = v852;
                      v457 -= 4;
                    }
                    goto LABEL_3707;
                  }
                }
              }
            }
          }
          break;
        case 15:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 18) & 0x10) == 0) {
              goto LABEL_320;
            }
            uint64_t v57 = *v12 + 24 * v13;
            uint64_t v59 = (_DWORD **)(v57 + 8);
            int v58 = *(_DWORD **)(v57 + 8);
            uint64_t v61 = (void *)(v57 + 16);
            unint64_t v60 = *(void *)(v57 + 16);
            if ((unint64_t)v58 >= v60)
            {
              unint64_t v147 = *(_DWORD **)v57;
              uint64_t v148 = ((uint64_t)v58 - *(void *)v57) >> 2;
              unint64_t v149 = v148 + 1;
              if ((unint64_t)(v148 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v150 = v60 - (void)v147;
              if (v150 >> 1 > v149) {
                unint64_t v149 = v150 >> 1;
              }
              if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v151 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v149;
              }
              if (v151)
              {
                unint64_t v152 = (char *)sub_458C8((uint64_t)v61, v151);
                int v58 = *v59;
                unint64_t v147 = *(_DWORD **)v57;
              }
              else
              {
                unint64_t v152 = 0;
              }
              double v291 = &v152[4 * v148];
              *(_DWORD *)double v291 = 148;
              uint64_t v62 = v291 + 4;
              while (v58 != v147)
              {
                int v292 = *--v58;
                *((_DWORD *)v291 - 1) = v292;
                v291 -= 4;
              }
              *(void *)uint64_t v57 = v291;
              double *v59 = v62;
              *uint64_t v61 = &v152[4 * v151];
              if (v147) {
                operator delete(v147);
              }
            }
            else
            {
              *int v58 = 148;
              uint64_t v62 = v58 + 1;
            }
            double *v59 = v62;
            if (!*v14)
            {
LABEL_320:
              if ((*((unsigned char *)__p + 18) & 0x20) == 0) {
                goto LABEL_2182;
              }
              uint64_t v293 = *v12 + 24 * v13;
              unint64_t v295 = (_DWORD **)(v293 + 8);
              uint64_t v294 = *(_DWORD **)(v293 + 8);
              uint64_t v297 = (void *)(v293 + 16);
              unint64_t v296 = *(void *)(v293 + 16);
              if ((unint64_t)v294 >= v296)
              {
                unint64_t v299 = *(_DWORD **)v293;
                uint64_t v300 = ((uint64_t)v294 - *(void *)v293) >> 2;
                unint64_t v301 = v300 + 1;
                if ((unint64_t)(v300 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v302 = v296 - (void)v299;
                if (v302 >> 1 > v301) {
                  unint64_t v301 = v302 >> 1;
                }
                if ((unint64_t)v302 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v303 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v303 = v301;
                }
                if (v303)
                {
                  char v304 = (char *)sub_458C8((uint64_t)v297, v303);
                  uint64_t v294 = *v295;
                  unint64_t v299 = *(_DWORD **)v293;
                }
                else
                {
                  char v304 = 0;
                }
                uint64_t v516 = &v304[4 * v300];
                *(_DWORD *)uint64_t v516 = 149;
                unint64_t v298 = v516 + 4;
                while (v294 != v299)
                {
                  int v517 = *--v294;
                  *((_DWORD *)v516 - 1) = v517;
                  v516 -= 4;
                }
                *(void *)uint64_t v293 = v516;
                BOOL *v295 = v298;
                *uint64_t v297 = &v304[4 * v303];
                if (v299) {
                  operator delete(v299);
                }
              }
              else
              {
                _DWORD *v294 = 149;
                unint64_t v298 = v294 + 1;
              }
              BOOL *v295 = v298;
              if (!*v14)
              {
LABEL_2182:
                if ((*((unsigned char *)__p + 18) & 0x40) == 0) {
                  goto LABEL_4085;
                }
                uint64_t v518 = *v12 + 24 * v13;
                uint64_t v520 = (_DWORD **)(v518 + 8);
                uint64_t v519 = *(_DWORD **)(v518 + 8);
                v522 = (void *)(v518 + 16);
                unint64_t v521 = *(void *)(v518 + 16);
                if ((unint64_t)v519 >= v521)
                {
                  unsigned int v524 = *(_DWORD **)v518;
                  uint64_t v525 = ((uint64_t)v519 - *(void *)v518) >> 2;
                  unint64_t v526 = v525 + 1;
                  if ((unint64_t)(v525 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v527 = v521 - (void)v524;
                  if (v527 >> 1 > v526) {
                    unint64_t v526 = v527 >> 1;
                  }
                  if ((unint64_t)v527 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v528 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v528 = v526;
                  }
                  if (v528)
                  {
                    uint64_t v529 = (char *)sub_458C8((uint64_t)v522, v528);
                    uint64_t v519 = *v520;
                    unsigned int v524 = *(_DWORD **)v518;
                  }
                  else
                  {
                    uint64_t v529 = 0;
                  }
                  double v720 = &v529[4 * v525];
                  *(_DWORD *)double v720 = 150;
                  uint64_t v523 = v720 + 4;
                  while (v519 != v524)
                  {
                    int v721 = *--v519;
                    *((_DWORD *)v720 - 1) = v721;
                    v720 -= 4;
                  }
                  *(void *)uint64_t v518 = v720;
                  *uint64_t v520 = v523;
                  void *v522 = &v529[4 * v528];
                  if (v524) {
                    operator delete(v524);
                  }
                }
                else
                {
                  *uint64_t v519 = 150;
                  uint64_t v523 = v519 + 1;
                }
                *uint64_t v520 = v523;
                if (!*v14)
                {
LABEL_4085:
                  if ((*((unsigned char *)__p + 18) & 0x80) == 0) {
                    goto LABEL_4086;
                  }
                  uint64_t v722 = *v12 + 24 * v13;
                  double v724 = (_DWORD **)(v722 + 8);
                  char v723 = *(_DWORD **)(v722 + 8);
                  char v726 = (void *)(v722 + 16);
                  unint64_t v725 = *(void *)(v722 + 16);
                  if ((unint64_t)v723 >= v725)
                  {
                    int v728 = *(_DWORD **)v722;
                    uint64_t v729 = ((uint64_t)v723 - *(void *)v722) >> 2;
                    unint64_t v730 = v729 + 1;
                    if ((unint64_t)(v729 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v731 = v725 - (void)v728;
                    if (v731 >> 1 > v730) {
                      unint64_t v730 = v731 >> 1;
                    }
                    if ((unint64_t)v731 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v732 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v732 = v730;
                    }
                    if (v732)
                    {
                      unint64_t v733 = (char *)sub_458C8((uint64_t)v726, v732);
                      char v723 = *v724;
                      int v728 = *(_DWORD **)v722;
                    }
                    else
                    {
                      unint64_t v733 = 0;
                    }
                    v909 = &v733[4 * v729];
                    *(_DWORD *)v909 = 151;
                    int v727 = v909 + 4;
                    while (v723 != v728)
                    {
                      int v910 = *--v723;
                      *((_DWORD *)v909 - 1) = v910;
                      v909 -= 4;
                    }
                    *(void *)uint64_t v722 = v909;
                    *double v724 = v727;
                    void *v726 = &v733[4 * v732];
                    if (v728) {
                      operator delete(v728);
                    }
                  }
                  else
                  {
                    _DWORD *v723 = 151;
                    int v727 = v723 + 1;
                  }
                  *double v724 = v727;
                  if (!*v14)
                  {
LABEL_4086:
                    if ((*((unsigned char *)__p + 19) & 1) == 0) {
                      goto LABEL_4087;
                    }
                    uint64_t v911 = *v12 + 24 * v13;
                    v913 = (_DWORD **)(v911 + 8);
                    unint64_t v912 = *(_DWORD **)(v911 + 8);
                    v915 = (void *)(v911 + 16);
                    unint64_t v914 = *(void *)(v911 + 16);
                    if ((unint64_t)v912 >= v914)
                    {
                      double v917 = *(_DWORD **)v911;
                      uint64_t v918 = ((uint64_t)v912 - *(void *)v911) >> 2;
                      unint64_t v919 = v918 + 1;
                      if ((unint64_t)(v918 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v920 = v914 - (void)v917;
                      if (v920 >> 1 > v919) {
                        unint64_t v919 = v920 >> 1;
                      }
                      if ((unint64_t)v920 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v921 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v921 = v919;
                      }
                      if (v921)
                      {
                        unint64_t v922 = (char *)sub_458C8((uint64_t)v915, v921);
                        unint64_t v912 = *v913;
                        double v917 = *(_DWORD **)v911;
                      }
                      else
                      {
                        unint64_t v922 = 0;
                      }
                      v1084 = &v922[4 * v918];
                      *(_DWORD *)v1084 = 152;
                      unsigned int v916 = v1084 + 4;
                      while (v912 != v917)
                      {
                        int v1085 = *--v912;
                        *((_DWORD *)v1084 - 1) = v1085;
                        v1084 -= 4;
                      }
                      *(void *)uint64_t v911 = v1084;
                      BOOL *v913 = v916;
                      void *v915 = &v922[4 * v921];
                      if (v917) {
                        operator delete(v917);
                      }
                    }
                    else
                    {
                      *unint64_t v912 = 152;
                      unsigned int v916 = v912 + 1;
                    }
                    BOOL *v913 = v916;
                    if (!*v14)
                    {
LABEL_4087:
                      if ((*((unsigned char *)__p + 19) & 2) == 0) {
                        goto LABEL_4088;
                      }
                      uint64_t v1086 = *v12 + 24 * v13;
                      unsigned int v1088 = (_DWORD **)(v1086 + 8);
                      double v1087 = *(_DWORD **)(v1086 + 8);
                      v1090 = (void *)(v1086 + 16);
                      unint64_t v1089 = *(void *)(v1086 + 16);
                      if ((unint64_t)v1087 >= v1089)
                      {
                        unsigned int v1092 = *(_DWORD **)v1086;
                        uint64_t v1093 = ((uint64_t)v1087 - *(void *)v1086) >> 2;
                        unint64_t v1094 = v1093 + 1;
                        if ((unint64_t)(v1093 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1095 = v1089 - (void)v1092;
                        if (v1095 >> 1 > v1094) {
                          unint64_t v1094 = v1095 >> 1;
                        }
                        if ((unint64_t)v1095 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1096 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1096 = v1094;
                        }
                        if (v1096)
                        {
                          unint64_t v1097 = (char *)sub_458C8((uint64_t)v1090, v1096);
                          double v1087 = *v1088;
                          unsigned int v1092 = *(_DWORD **)v1086;
                        }
                        else
                        {
                          unint64_t v1097 = 0;
                        }
                        v1257 = &v1097[4 * v1093];
                        *(_DWORD *)v1257 = 153;
                        unsigned int v1091 = v1257 + 4;
                        while (v1087 != v1092)
                        {
                          int v1258 = *--v1087;
                          *((_DWORD *)v1257 - 1) = v1258;
                          v1257 -= 4;
                        }
                        *(void *)uint64_t v1086 = v1257;
                        *unsigned int v1088 = v1091;
                        void *v1090 = &v1097[4 * v1096];
                        if (v1092) {
                          operator delete(v1092);
                        }
                      }
                      else
                      {
                        *double v1087 = 153;
                        unsigned int v1091 = v1087 + 1;
                      }
                      *unsigned int v1088 = v1091;
                      if (!*v14)
                      {
LABEL_4088:
                        if ((*((unsigned char *)__p + 19) & 4) == 0) {
                          goto LABEL_4089;
                        }
                        uint64_t v1259 = *v12 + 24 * v13;
                        double v1261 = (_DWORD **)(v1259 + 8);
                        unsigned int v1260 = *(_DWORD **)(v1259 + 8);
                        double v1263 = (void *)(v1259 + 16);
                        unint64_t v1262 = *(void *)(v1259 + 16);
                        if ((unint64_t)v1260 >= v1262)
                        {
                          v1265 = *(_DWORD **)v1259;
                          uint64_t v1266 = ((uint64_t)v1260 - *(void *)v1259) >> 2;
                          unint64_t v1267 = v1266 + 1;
                          if ((unint64_t)(v1266 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1268 = v1262 - (void)v1265;
                          if (v1268 >> 1 > v1267) {
                            unint64_t v1267 = v1268 >> 1;
                          }
                          if ((unint64_t)v1268 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1269 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1269 = v1267;
                          }
                          if (v1269)
                          {
                            v1270 = (char *)sub_458C8((uint64_t)v1263, v1269);
                            unsigned int v1260 = *v1261;
                            v1265 = *(_DWORD **)v1259;
                          }
                          else
                          {
                            v1270 = 0;
                          }
                          double v1406 = &v1270[4 * v1266];
                          *(_DWORD *)double v1406 = 154;
                          v1264 = v1406 + 4;
                          while (v1260 != v1265)
                          {
                            int v1407 = *--v1260;
                            *((_DWORD *)v1406 - 1) = v1407;
                            v1406 -= 4;
                          }
                          *(void *)uint64_t v1259 = v1406;
                          *double v1261 = v1264;
                          *double v1263 = &v1270[4 * v1269];
                          if (v1265) {
                            operator delete(v1265);
                          }
                        }
                        else
                        {
                          *unsigned int v1260 = 154;
                          v1264 = v1260 + 1;
                        }
                        *double v1261 = v1264;
                        if (!*v14)
                        {
LABEL_4089:
                          if ((*((unsigned char *)__p + 19) & 8) == 0) {
                            goto LABEL_4090;
                          }
                          uint64_t v1408 = *v12 + 24 * v13;
                          v1410 = (_DWORD **)(v1408 + 8);
                          v1409 = *(_DWORD **)(v1408 + 8);
                          double v1412 = (void *)(v1408 + 16);
                          unint64_t v1411 = *(void *)(v1408 + 16);
                          if ((unint64_t)v1409 >= v1411)
                          {
                            double v1414 = *(_DWORD **)v1408;
                            uint64_t v1415 = ((uint64_t)v1409 - *(void *)v1408) >> 2;
                            unint64_t v1416 = v1415 + 1;
                            if ((unint64_t)(v1415 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1417 = v1411 - (void)v1414;
                            if (v1417 >> 1 > v1416) {
                              unint64_t v1416 = v1417 >> 1;
                            }
                            if ((unint64_t)v1417 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1418 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1418 = v1416;
                            }
                            if (v1418)
                            {
                              unint64_t v1419 = (char *)sub_458C8((uint64_t)v1412, v1418);
                              v1409 = *v1410;
                              double v1414 = *(_DWORD **)v1408;
                            }
                            else
                            {
                              unint64_t v1419 = 0;
                            }
                            double v1546 = &v1419[4 * v1415];
                            *(_DWORD *)double v1546 = 155;
                            unsigned int v1413 = v1546 + 4;
                            while (v1409 != v1414)
                            {
                              int v1547 = *--v1409;
                              *((_DWORD *)v1546 - 1) = v1547;
                              v1546 -= 4;
                            }
                            *(void *)uint64_t v1408 = v1546;
                            double *v1410 = v1413;
                            *double v1412 = &v1419[4 * v1418];
                            if (v1414) {
                              operator delete(v1414);
                            }
                          }
                          else
                          {
                            _DWORD *v1409 = 155;
                            unsigned int v1413 = v1409 + 1;
                          }
                          double *v1410 = v1413;
                          if (!*v14)
                          {
LABEL_4090:
                            if ((*((unsigned char *)__p + 19) & 0x10) == 0) {
                              goto LABEL_4091;
                            }
                            uint64_t v1548 = *v12 + 24 * v13;
                            unint64_t v1550 = (_DWORD **)(v1548 + 8);
                            v1549 = *(_DWORD **)(v1548 + 8);
                            double v1552 = (void *)(v1548 + 16);
                            unint64_t v1551 = *(void *)(v1548 + 16);
                            if ((unint64_t)v1549 >= v1551)
                            {
                              v1554 = *(_DWORD **)v1548;
                              uint64_t v1555 = ((uint64_t)v1549 - *(void *)v1548) >> 2;
                              unint64_t v1556 = v1555 + 1;
                              if ((unint64_t)(v1555 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1557 = v1551 - (void)v1554;
                              if (v1557 >> 1 > v1556) {
                                unint64_t v1556 = v1557 >> 1;
                              }
                              if ((unint64_t)v1557 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1558 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1558 = v1556;
                              }
                              if (v1558)
                              {
                                v1559 = (char *)sub_458C8((uint64_t)v1552, v1558);
                                v1549 = *v1550;
                                v1554 = *(_DWORD **)v1548;
                              }
                              else
                              {
                                v1559 = 0;
                              }
                              v1687 = &v1559[4 * v1555];
                              *(_DWORD *)v1687 = 156;
                              v1553 = v1687 + 4;
                              while (v1549 != v1554)
                              {
                                int v1688 = *--v1549;
                                *((_DWORD *)v1687 - 1) = v1688;
                                v1687 -= 4;
                              }
                              *(void *)uint64_t v1548 = v1687;
                              *unint64_t v1550 = v1553;
                              *double v1552 = &v1559[4 * v1558];
                              if (v1554) {
                                operator delete(v1554);
                              }
                            }
                            else
                            {
                              _DWORD *v1549 = 156;
                              v1553 = v1549 + 1;
                            }
                            *unint64_t v1550 = v1553;
                            if (!*v14)
                            {
LABEL_4091:
                              if ((*((unsigned char *)__p + 19) & 0x20) != 0)
                              {
                                uint64_t v223 = *v12 + 24 * v13;
                                uint64_t v225 = (int **)(v223 + 8);
                                uint64_t v224 = *(int **)(v223 + 8);
                                uint64_t v227 = (void *)(v223 + 16);
                                unint64_t v1689 = *(void *)(v223 + 16);
                                if ((unint64_t)v224 >= v1689)
                                {
                                  double v229 = *(int **)v223;
                                  uint64_t v1690 = ((uint64_t)v224 - *(void *)v223) >> 2;
                                  unint64_t v1691 = v1690 + 1;
                                  if ((unint64_t)(v1690 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1692 = v1689 - (void)v229;
                                  if (v1692 >> 1 > v1691) {
                                    unint64_t v1691 = v1692 >> 1;
                                  }
                                  if ((unint64_t)v1692 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v233 = v1691;
                                  }
                                  if (v233)
                                  {
                                    uint64_t v234 = (char *)sub_458C8((uint64_t)v227, v233);
                                    uint64_t v224 = *v225;
                                    double v229 = *(int **)v223;
                                  }
                                  else
                                  {
                                    uint64_t v234 = 0;
                                  }
                                  uint64_t v457 = &v234[4 * v1690];
                                  *(_DWORD *)uint64_t v457 = 157;
                                  unint64_t v458 = (int *)(v457 + 4);
                                  while (v224 != v229)
                                  {
                                    int v1811 = *--v224;
                                    *((_DWORD *)v457 - 1) = v1811;
                                    v457 -= 4;
                                  }
LABEL_3707:
                                  *(void *)uint64_t v223 = v457;
                                  uint64_t *v225 = v458;
                                  *uint64_t v227 = &v234[4 * v233];
                                  if (v229) {
                                    operator delete(v229);
                                  }
                                }
                                else
                                {
                                  int v228 = 157;
LABEL_2185:
                                  int *v224 = v228;
                                  unint64_t v458 = v224 + 1;
                                }
                                uint64_t *v225 = v458;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        default:
          break;
      }
      ++v13;
    }
    while (v13 != 16);
    uint64_t v2789 = 1;
  }
  if (__p) {
    operator delete(__p);
  }
  return v2789;
}

void sub_3E524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3EBF8(uint64_t a1)
{
  *(void *)a1 = off_7418D0;
  if (*(void *)(a1 + 128))
  {
    sub_F63C4();
    operator delete();
  }
  uint64_t v2 = a1 + 37616;
  uint64_t v3 = a1 + 43760;
  do
  {
    unsigned int v4 = *(void ***)(v3 - 40);
    long long v5 = *(void ***)(v3 - 32);
    *(void *)(v3 - 8) = 0;
    unint64_t v6 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        long long v5 = *(void ***)(v3 - 32);
        unsigned int v4 = (void **)(*(void *)(v3 - 40) + 8);
        *(void *)(v3 - 40) = v4;
        unint64_t v6 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
    unint64_t v7 = v6 >> 3;
    if (v7 == 1)
    {
      uint64_t v8 = 256;
      goto LABEL_10;
    }
    if (v7 == 2)
    {
      uint64_t v8 = 512;
LABEL_10:
      *(void *)(v3 - 16) = v8;
    }
    if (v4 != v5)
    {
      do
      {
        uint64_t v9 = *v4++;
        operator delete(v9);
      }
      while (v4 != v5);
      uint64_t v11 = *(void *)(v3 - 40);
      uint64_t v10 = *(void *)(v3 - 32);
      if (v10 != v11) {
        *(void *)(v3 - 32) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    uint64_t v13 = *(void **)(v3 - 48);
    v3 -= 48;
    uint64_t v12 = v13;
    if (v13) {
      operator delete(v12);
    }
  }
  while (v3 != v2);
  sub_2F31C(a1 + 37568);
  uint64_t v14 = 29664;
  uint64_t v15 = 29848;
  do
  {
    if (*(unsigned char *)(a1 + v15))
    {
      uint64_t v16 = a1 + v14;
      int v17 = *(void **)(a1 + v14 + 96);
      if (v17)
      {
        *(void *)(v16 + 104) = v17;
        operator delete(v17);
      }
      unint64_t v18 = *(void **)(v16 + 72);
      if (v18)
      {
        *(void *)(a1 + v14 + 80) = v18;
        operator delete(v18);
      }
      uint64_t v19 = a1 + v14;
      uint64_t v20 = *(void **)(a1 + v14 + 48);
      if (v20)
      {
        *(void *)(v19 + 56) = v20;
        operator delete(v20);
      }
      uint64_t v21 = *(void **)(v19 + 24);
      if (v21)
      {
        *(void *)(a1 + v14 + 32) = v21;
        operator delete(v21);
      }
      int v22 = *(void **)v16;
      if (*(void *)v16)
      {
        *(void *)(a1 + v14 + 8) = v22;
        operator delete(v22);
      }
    }
    v14 -= 232;
    v15 -= 232;
  }
  while (v14 != -32);
  unint64_t v24 = (void **)(a1 + 136);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v24);
  return a1;
}

void sub_3EDC8(uint64_t a1)
{
  sub_3EBF8(a1);

  operator delete();
}

void sub_3EE00(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 264))
  {
    uint64_t v2 = *(void **)(a1 + 176);
    if (v2)
    {
      *(void *)(a1 + 184) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 152);
    if (v3)
    {
      *(void *)(a1 + 160) = v3;
      operator delete(v3);
    }
    unsigned int v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(void *)(a1 + 136) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)(a1 + 104);
    if (v5)
    {
      *(void *)(a1 + 112) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(a1 + 80);
    if (v6)
    {
      *(void *)(a1 + 88) = v6;
      operator delete(v6);
    }
  }
}

uint64_t sub_3EE90(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 264))
  {
    uint64_t v2 = *(void **)(a1 + 176);
    if (v2)
    {
      *(void *)(a1 + 184) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 152);
    if (v3)
    {
      *(void *)(a1 + 160) = v3;
      operator delete(v3);
    }
    unsigned int v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(void *)(a1 + 136) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)(a1 + 104);
    if (v5)
    {
      *(void *)(a1 + 112) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(a1 + 80);
    if (v6)
    {
      *(void *)(a1 + 88) = v6;
      operator delete(v6);
    }
  }
  return a1;
}

void std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      long long v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

unint64_t sub_3EFB8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 93)) {
    return a3;
  }
  if (a4 - *(void *)(a1 + 56) >= (unint64_t)(2 * *(void *)(a2 + 26032))) {
    return *(void *)(a1 + 72) + a3 % *(_DWORD *)(a1 + 24);
  }
  unsigned int v4 = *(_DWORD *)(a1 + 88);
  if (a3 >= v4) {
    return *(void *)(a1 + 80) + a3 - v4;
  }
  else {
    return (~v4 & 0xFFFFF) + (unint64_t)a3 + *(void *)(a1 + 80) + 1;
  }
}

void sub_3F02C(uint64_t a1, void *a2, unsigned int a3)
{
  if (a3 > 0xF) {
    return;
  }
  uint64_t v3 = a1 + 40 * a3 + 30304;
  if (!*(unsigned char *)(a1 + 40 * a3 + 30336)) {
    return;
  }
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = *(void *)(a1 + 40 * a3 + 30320);
  int v66 = *(_DWORD *)(a1 + 40 * a3 + 30328);
  uint64_t v7 = (uint64_t)(a2 + 24);
  unint64_t v8 = a2[24];
  uint64_t v9 = a2[3256];
  uint64_t v10 = a2[3255];
  uint64_t v11 = a2[3259];
  uint64_t v12 = a2[3258];
  uint64_t v13 = (void *)a2[23];
  if ((unint64_t)v13 >= v8)
  {
    uint64_t v15 = (void **)(a2 + 22);
    uint64_t v16 = a2[22];
    uint64_t v17 = ((uint64_t)v13 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61) {
      goto LABEL_70;
    }
    uint64_t v18 = v8 - v16;
    uint64_t v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
      uint64_t v19 = v17 + 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      uint64_t v21 = (char *)sub_5714(v7, v20);
    }
    else {
      uint64_t v21 = 0;
    }
    int v22 = &v21[8 * v17];
    int v23 = &v21[8 * v20];
    *(void *)int v22 = v5;
    uint64_t v14 = v22 + 8;
    int v25 = (char *)a2[22];
    unint64_t v24 = (char *)a2[23];
    if (v24 != v25)
    {
      do
      {
        uint64_t v26 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      unint64_t v24 = (char *)*v15;
    }
    a2[22] = v22;
    a2[23] = v14;
    a2[24] = v23;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    *uint64_t v13 = v5;
    uint64_t v14 = v13 + 1;
  }
  uint64_t v27 = (((v11 - v12) << 29) - 0x100000000) | (((unint64_t)(v9 - v10) >> 3) - 1);
  unint64_t v28 = a2[27];
  a2[23] = v14;
  __int16 v29 = (uint64_t *)a2[26];
  if ((unint64_t)v29 >= v28)
  {
    uint64_t v31 = a2[25];
    uint64_t v32 = ((uint64_t)v29 - v31) >> 3;
    if (!((unint64_t)(v32 + 1) >> 61))
    {
      uint64_t v33 = v28 - v31;
      uint64_t v34 = v33 >> 2;
      if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
        uint64_t v34 = v32 + 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unint64_t v36 = (char *)sub_5714((uint64_t)(a2 + 27), v35);
      }
      else {
        unint64_t v36 = 0;
      }
      int v37 = (uint64_t *)&v36[8 * v32];
      unint64_t v38 = &v36[8 * v35];
      *int v37 = v27;
      unint64_t v30 = v37 + 1;
      uint64_t v40 = (char *)a2[25];
      uint64_t v39 = (char *)a2[26];
      if (v39 != v40)
      {
        do
        {
          uint64_t v41 = *((void *)v39 - 1);
          v39 -= 8;
          *--int v37 = v41;
        }
        while (v39 != v40);
        uint64_t v39 = (char *)a2[25];
      }
      a2[25] = v37;
      a2[26] = v30;
      a2[27] = v38;
      if (v39) {
        operator delete(v39);
      }
      goto LABEL_35;
    }
LABEL_70:
    sub_566C();
  }
  uint64_t *v29 = v27;
  unint64_t v30 = v29 + 1;
LABEL_35:
  unint64_t v42 = a2[30];
  a2[26] = v30;
  int v43 = (char *)a2[29];
  if ((unint64_t)v43 >= v42)
  {
    uint64_t v45 = (char *)a2[28];
    uint64_t v46 = (v43 - v45) >> 3;
    if ((unint64_t)(v46 + 1) >> 61) {
      sub_566C();
    }
    unint64_t v47 = v42 - (void)v45;
    unint64_t v48 = (uint64_t)(v42 - (void)v45) >> 2;
    if (v48 <= v46 + 1) {
      unint64_t v48 = v46 + 1;
    }
    if (v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49)
    {
      uint64_t v50 = (char *)sub_5714((uint64_t)(a2 + 30), v49);
      uint64_t v45 = (char *)a2[28];
      int v43 = (char *)a2[29];
    }
    else
    {
      uint64_t v50 = 0;
    }
    uint64_t v51 = &v50[8 * v46];
    int v52 = &v50[8 * v49];
    *(void *)uint64_t v51 = v6;
    unint64_t v44 = v51 + 8;
    while (v43 != v45)
    {
      uint64_t v53 = *((void *)v43 - 1);
      v43 -= 8;
      *((void *)v51 - 1) = v53;
      v51 -= 8;
    }
    a2[28] = v51;
    a2[29] = v44;
    a2[30] = v52;
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    *(void *)int v43 = v6;
    unint64_t v44 = v43 + 8;
  }
  a2[29] = v44;
  unint64_t v54 = (char *)a2[32];
  unint64_t v55 = a2[33];
  if ((unint64_t)v54 >= v55)
  {
    uint64_t v57 = (char *)a2[31];
    uint64_t v58 = (v54 - v57) >> 2;
    if ((unint64_t)(v58 + 1) >> 62) {
      sub_566C();
    }
    unint64_t v59 = v55 - (void)v57;
    unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 1;
    if (v60 <= v58 + 1) {
      unint64_t v60 = v58 + 1;
    }
    if (v59 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v61 = v60;
    }
    if (v61)
    {
      uint64_t v62 = (char *)sub_458C8((uint64_t)(a2 + 33), v61);
      uint64_t v57 = (char *)a2[31];
      unint64_t v54 = (char *)a2[32];
    }
    else
    {
      uint64_t v62 = 0;
    }
    uint64_t v63 = &v62[4 * v58];
    uint64_t v64 = &v62[4 * v61];
    *(_DWORD *)uint64_t v63 = v66;
    unint64_t v56 = v63 + 4;
    while (v54 != v57)
    {
      int v65 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *((_DWORD *)v63 - 1) = v65;
      v63 -= 4;
    }
    a2[31] = v63;
    a2[32] = v56;
    a2[33] = v64;
    if (v57) {
      operator delete(v57);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v54 = v66;
    unint64_t v56 = v54 + 4;
  }
  a2[32] = v56;
  if (*(unsigned char *)(v3 + 32)) {
    *(unsigned char *)(v3 + 32) = 0;
  }
}

void sub_3F3AC(uint64_t a1, void *a2, unsigned int a3, char a4)
{
  if ((a3 & 0x80) != 0) {
    return;
  }
  uint64_t v4 = a1 + 232 * a3;
  if (!*(unsigned char *)(v4 + 384)) {
    return;
  }
  uint64_t v7 = v4 + 160;
  unsigned int v8 = *(unsigned __int8 *)(v4 + 196);
  if (v8 >= 0x60)
  {
    if (v8 >= 0x68)
    {
      if (v8 < 0x98) {
        goto LABEL_15;
      }
    }
    else if (*(unsigned char *)(v7 + 215))
    {
      goto LABEL_15;
    }
  }
  if ((*(_DWORD *)(v7 + 208) - 3) > 1 || *(unsigned char *)(v7 + 216))
  {
    uint64_t v9 = a1 + 37616;
    uint64_t v10 = (int64x2_t *)(a1 + 37616 + 48 * a3);
    if (v10[2].i64[1])
    {
      unint64_t v11 = *(void *)(v9 + 48 * a3 + 32);
      uint64_t v12 = *(void *)(*(void *)(v10->i64[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));
      if (*(unsigned char *)(v12 + 32))
      {
        sub_47E68(v10);
        if (*(unsigned char *)(v7 + 224))
        {
          *(void *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3)
                                                                                 - 1);
          *(unsigned char *)(v7 + 212) = a4;
        }
        sub_45934(v12 + 40, v7);
        goto LABEL_16;
      }
    }
  }
LABEL_15:
  *(void *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3) - 1);
  *(unsigned char *)(v7 + 212) = a4;
  sub_46078(a2, v7);
LABEL_16:
  if (*(unsigned char *)(v7 + 224))
  {
    uint64_t v13 = *(void **)(v7 + 136);
    if (v13)
    {
      *(void *)(v7 + 144) = v13;
      operator delete(v13);
    }
    uint64_t v14 = *(void **)(v7 + 112);
    if (v14)
    {
      *(void *)(v7 + 120) = v14;
      operator delete(v14);
    }
    uint64_t v15 = *(void **)(v7 + 88);
    if (v15)
    {
      *(void *)(v7 + 96) = v15;
      operator delete(v15);
    }
    uint64_t v16 = *(void **)(v7 + 64);
    if (v16)
    {
      *(void *)(v7 + 72) = v16;
      operator delete(v16);
    }
    uint64_t v17 = *(void **)(v7 + 40);
    if (v17)
    {
      *(void *)(v7 + 48) = v17;
      operator delete(v17);
    }
    *(unsigned char *)(v7 + 224) = 0;
  }
}

const char *sub_3F57C(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = &off_741928[a2];
    return *v3;
  }
  if (v2 < 0x40)
  {
    uint64_t v4 = off_741D28;
LABEL_7:
    uint64_t v3 = &v4[v2];
    return *v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0xF)
  {
    uint64_t v4 = off_741F28;
    goto LABEL_7;
  }
  return "Invalid";
}

uint64_t sub_3F5D8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  *(void *)(result + 80) = 0;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *a4 = 1;
  uint64_t v4 = *a3;
  uint64_t v5 = *a3 & 7;
  unint64_t v6 = (unint64_t)*a3 >> 3;
  if (v5 == 7) {
    int v7 = *(unsigned __int16 *)(a2 + v6) >> 7;
  }
  else {
    int v7 = *(unsigned __int8 *)(a2 + v6) >> v5;
  }
  switch(v7 & 3)
  {
    case 1:
      uint64_t v12 = (v4 + 2) & 7;
      unint64_t v13 = (unint64_t)(v4 + 2) >> 3;
      if (v12 == 7) {
        int v14 = *(unsigned __int16 *)(a2 + v13) >> 7;
      }
      else {
        int v14 = *(unsigned __int8 *)(a2 + v13) >> v12;
      }
      switch(v14 & 3)
      {
        case 1:
          uint64_t v42 = (v4 + 4) & 7;
          unint64_t v43 = (unint64_t)(v4 + 4) >> 3;
          if (v42 == 7) {
            int v44 = *(unsigned __int16 *)(a2 + v43) >> 7;
          }
          else {
            int v44 = *(unsigned __int8 *)(a2 + v43) >> v42;
          }
          int v77 = v44 & 3;
          if (v77 == 1)
          {
            *(_DWORD *)uint64_t result = 3;
            unint64_t v121 = v4 + 26;
            unint64_t v122 = (v4 + 26) & 7;
            unint64_t v123 = v121 >> 3;
            if (v122 > 2)
            {
              unint64_t v125 = ((unint64_t)*(unsigned __int8 *)(v123 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v123 + a2 + 6) << 48);
              unint64_t v124 = (unint64_t)*(unsigned __int8 *)(v123 + a2 + 5) << 40;
            }
            else
            {
              unint64_t v124 = (unint64_t)*(unsigned __int8 *)(v123 + a2 + 6) << 48;
              unint64_t v125 = (unint64_t)*(unsigned __int8 *)(v123 + a2 + 5) << 40;
            }
            uint64_t v170 = (unsigned __int8 *)(a2 + v123);
            *(void *)(result + 16) |= ((v125 | v124 | ((unint64_t)v170[4] << 32) | ((unint64_t)v170[3] << 24) | ((unint64_t)v170[2] << 16) | ((unint64_t)v170[1] << 8) | *v170) >> v122) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v171 = *a3 & 7;
            unint64_t v172 = (unint64_t)(*a3 + 80) >> 3;
            if (v171 > 5) {
              unsigned int v173 = *(unsigned __int16 *)(a2 + v172);
            }
            else {
              unsigned int v173 = *(unsigned __int8 *)(a2 + v172);
            }
            *(_DWORD *)(result + 24) |= (v173 >> v171) & 7;
            unint64_t v174 = *a3 + 6;
            unint64_t v175 = v174 & 7;
            unint64_t v176 = v174 >> 3;
            if (v175 > 4)
            {
              int v178 = (*(unsigned __int8 *)(v176 + a2 + 3) << 24) | (*(unsigned __int8 *)(v176 + a2 + 2) << 16);
              int v177 = *(unsigned __int8 *)(v176 + a2 + 1) << 8;
            }
            else
            {
              int v177 = *(unsigned __int8 *)(v176 + a2 + 2) << 16;
              int v178 = *(unsigned __int8 *)(v176 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 8) |= ((v178 | v177 | *(unsigned __int8 *)(a2 + v176)) >> v175) & 0xFFFFF;
            uint64_t v21 = 83;
          }
          else
          {
            if (v77) {
              goto LABEL_81;
            }
            *(_DWORD *)uint64_t result = 2;
            unint64_t v78 = v4 + 6;
            unint64_t v79 = (v4 + 6) & 7;
            unint64_t v80 = v78 >> 3;
            if (v79 > 4)
            {
              int v82 = (*(unsigned __int8 *)(v80 + a2 + 3) << 24) | (*(unsigned __int8 *)(v80 + a2 + 2) << 16);
              int v81 = *(unsigned __int8 *)(v80 + a2 + 1) << 8;
            }
            else
            {
              int v81 = *(unsigned __int8 *)(v80 + a2 + 2) << 16;
              int v82 = *(unsigned __int8 *)(v80 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 8) |= ((v82 | v81 | *(unsigned __int8 *)(a2 + v80)) >> v79) & 0xFFFFF;
            uint64_t v21 = 26;
          }
          goto LABEL_398;
        case 2:
          *(_DWORD *)uint64_t result = 5;
          if ((*(unsigned __int8 *)(a2 + ((unint64_t)(v4 + 4) >> 3)) >> ((v4 + 4) & 7)))
          {
            *(_DWORD *)(result + 8) = 1;
            unint64_t v45 = *a3 + 5;
            unint64_t v46 = v45 & 7;
            unint64_t v47 = v45 >> 3;
            if (v46 > 5) {
              unsigned int v48 = *(unsigned __int16 *)(a2 + v47);
            }
            else {
              unsigned int v48 = *(unsigned __int8 *)(a2 + v47);
            }
            *(unsigned char *)(result + 12) |= (v48 >> v46) & 7;
            unint64_t v130 = *a3 & 7;
            unint64_t v131 = (unint64_t)(*a3 + 8) >> 3;
            if (v130 > 1) {
              unsigned int v132 = *(unsigned __int16 *)(a2 + v131);
            }
            else {
              unsigned int v132 = *(unsigned __int8 *)(a2 + v131);
            }
            *(unsigned char *)(result + 13) |= (v132 >> v130) & 0x7F;
            goto LABEL_122;
          }
          *(_DWORD *)(result + 8) = 0;
          unint64_t v96 = *a3 + 5;
          unint64_t v97 = v96 >> 3;
          unint64_t v98 = v96 & 7;
          if (v98) {
            int v99 = *(unsigned __int16 *)(a2 + v97) >> v98;
          }
          else {
            LOBYTE(v99) = *(unsigned char *)(a2 + v97);
          }
          *(unsigned char *)(result + 12) |= v99;
          unint64_t v179 = *a3 + 13;
          unint64_t v180 = v179 & 7;
          unint64_t v181 = v179 >> 3;
          if (v180 > 5) {
            unsigned __int16 v182 = *(_WORD *)(a2 + v181);
          }
          else {
            unsigned __int16 v182 = *(unsigned __int8 *)(a2 + v181);
          }
          switch((v182 >> v180) & 7)
          {
            case 1:
              int v349 = 1;
              goto LABEL_289;
            case 2:
              int v349 = 2;
              goto LABEL_289;
            case 3:
              int v349 = 3;
              goto LABEL_289;
            case 4:
              int v349 = 4;
              goto LABEL_289;
            case 5:
              int v349 = 5;
              goto LABEL_289;
            case 6:
              int v349 = 6;
              goto LABEL_289;
            case 7:
              int v349 = 7;
LABEL_289:
              *(_DWORD *)(result + 16) = v349;
              break;
            default:
              *(_DWORD *)(result + 16) = 0;
              break;
          }
          break;
        case 3:
          *(_DWORD *)uint64_t result = 6;
          unint64_t v49 = v4 + 4;
          unint64_t v50 = v49 >> 3;
          uint64_t v51 = v49 & 7;
          if (v51) {
            int v52 = *(unsigned __int16 *)(a2 + v50) >> v51;
          }
          else {
            LOBYTE(v52) = *(unsigned char *)(a2 + v50);
          }
          *(unsigned char *)(result + 8) |= v52;
          uint64_t v21 = 12;
          goto LABEL_398;
        default:
          *(_DWORD *)uint64_t result = 1;
          uint64_t v21 = 4;
          goto LABEL_398;
      }
LABEL_290:
      uint64_t v21 = 16;
      break;
    case 2:
      uint64_t v15 = (v4 + 2) & 7;
      unint64_t v16 = (unint64_t)(v4 + 2) >> 3;
      if (v15 == 7) {
        int v17 = *(unsigned __int16 *)(a2 + v16) >> 7;
      }
      else {
        int v17 = *(unsigned __int8 *)(a2 + v16) >> v15;
      }
      switch(v17 & 3)
      {
        case 1:
          *(_DWORD *)uint64_t result = 8;
          unint64_t v53 = v4 + 4;
          unint64_t v54 = v53 >> 3;
          uint64_t v55 = v53 & 7;
          if (v55) {
            int v56 = *(unsigned __int16 *)(a2 + v54) >> v55;
          }
          else {
            LOBYTE(v56) = *(unsigned char *)(a2 + v54);
          }
          *(unsigned char *)(result + 8) |= v56;
          unint64_t v100 = *a3 + 12;
          unint64_t v101 = v100 & 7;
          unint64_t v102 = v100 >> 3;
          if (v101 == 7) {
            int v103 = *(unsigned __int16 *)(a2 + v102) >> 7;
          }
          else {
            int v103 = *(unsigned __int8 *)(a2 + v102) >> v101;
          }
          switch(v103 & 3)
          {
            case 1:
              *(_DWORD *)(result + 12) = 0;
              unint64_t v139 = *a3 + 14;
              unint64_t v140 = v139 >> 3;
              unint64_t v141 = v139 & 7;
              if (v141)
              {
                uint64_t v142 = (unsigned __int8 *)(a2 + v140);
                uint64_t v143 = ((((unint64_t)v142[4] << 32) | ((unint64_t)v142[3] << 24) | ((unint64_t)v142[2] << 16) | ((unint64_t)v142[1] << 8) | *v142) >> v141);
              }
              else
              {
                uint64_t v143 = *(unsigned int *)(a2 + v140);
              }
              int v222 = *(_DWORD *)(result + 24);
              unint64_t v223 = *(void *)(result + 16) & 0xFFFFFFFF00000000 | v143 | *(void *)(result + 16);
              *(void *)(result + 16) = v223;
              unint64_t v224 = *a3 + 46;
              unint64_t v225 = v224 >> 3;
              unint64_t v226 = v224 & 7;
              if (v226)
              {
                uint64_t v227 = (unsigned __int8 *)(a2 + v225);
                uint64_t v228 = ((((unint64_t)v227[4] << 32) | ((unint64_t)v227[3] << 24) | ((unint64_t)v227[2] << 16) | ((unint64_t)v227[1] << 8) | *v227) >> v226);
              }
              else
              {
                uint64_t v228 = *(unsigned int *)(a2 + v225);
              }
              unint64_t v241 = v223 & 0xFFFFFFFF00000000 | (v228 << 32) | v223;
              *(_DWORD *)(result + 24) = v222;
              *(void *)(result + 16) = v241;
              unint64_t v242 = *a3 + 78;
              unint64_t v243 = v242 >> 3;
              unint64_t v244 = v242 & 7;
              if (v244)
              {
                unint64_t v245 = (unsigned __int8 *)(a2 + v243);
                int v246 = (((unint64_t)v245[4] << 32) | ((unint64_t)v245[3] << 24) | ((unint64_t)v245[2] << 16) | ((unint64_t)v245[1] << 8) | *v245) >> v244;
              }
              else
              {
                int v246 = *(_DWORD *)(a2 + v243);
              }
              *(void *)(result + 16) = v241;
              *(_DWORD *)(result + 24) = v246 | v222;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 110) >> 3)) >> ((*(unsigned char *)a3 + 110) & 7)))
              {
                *(_DWORD *)(result + 28) = 1;
                unint64_t v247 = *a3 + 111;
                unint64_t v248 = v247 & 7;
                unint64_t v249 = v247 >> 3;
                if (v248 > 3) {
                  unsigned int v250 = *(unsigned __int16 *)(a2 + v249);
                }
                else {
                  unsigned int v250 = *(unsigned __int8 *)(a2 + v249);
                }
                *(unsigned char *)(result + 32) |= (v250 >> v248) & 0x1F;
                unint64_t v266 = *a3 + 116;
                unint64_t v267 = v266 & 7;
                unint64_t v268 = v266 >> 3;
                if (v267 > 4) {
                  unsigned int v269 = (*(unsigned __int8 *)(a2 + v268 + 2) << 16) | (*(unsigned __int8 *)(a2 + v268 + 1) << 8) | *(unsigned __int8 *)(a2 + v268);
                }
                else {
                  unsigned int v269 = *(unsigned __int16 *)(a2 + v268);
                }
                int v275 = *(_DWORD *)(result + 34) | (v269 >> v267) & 0xFFF;
                *(_DWORD *)(result + 34) = v275;
                unint64_t v276 = *a3 & 7;
                unint64_t v277 = (unint64_t)(*a3 + 128) >> 3;
                if (v276 > 4) {
                  unsigned int v278 = *(unsigned __int16 *)(a2 + v277);
                }
                else {
                  unsigned int v278 = *(unsigned __int8 *)(a2 + v277);
                }
                int v283 = v275 | (((v278 >> v276) & 0xF) << 12);
                *(_DWORD *)(result + 34) = v283;
                unint64_t v284 = (*(unsigned char *)a3 - 124) & 7;
                unint64_t v285 = (unint64_t)(*a3 + 132) >> 3;
                if (v284 > 4) {
                  unsigned int v286 = *(unsigned __int16 *)(a2 + v285);
                }
                else {
                  unsigned int v286 = *(unsigned __int8 *)(a2 + v285);
                }
                *(_DWORD *)(result + 34) = v283 | (((v286 >> v284) & 0xF) << 16);
                uint64_t v21 = 136;
              }
              else
              {
                *(_DWORD *)(result + 28) = 0;
                unint64_t v251 = *a3 + 111;
                unint64_t v252 = v251 & 7;
                unint64_t v253 = v251 >> 3;
                if (v252 > 3) {
                  unsigned int v254 = *(unsigned __int16 *)(a2 + v253);
                }
                else {
                  unsigned int v254 = *(unsigned __int8 *)(a2 + v253);
                }
                *(unsigned char *)(result + 32) |= (v254 >> v252) & 0x1F;
                uint64_t v21 = 116;
              }
              break;
            case 2:
              *(_DWORD *)(result + 12) = 3;
              unint64_t v144 = *a3 + 14;
              unsigned int v145 = *(unsigned __int8 *)(a2 + (v144 >> 3));
              char v146 = v144 & 7;
              char v147 = *(unsigned char *)(result + 16);
              if ((v145 >> v146))
              {
                *(unsigned char *)(result + 16) = v147 | 1;
                unint64_t v148 = *a3 + 15;
                unint64_t v149 = v148 & 7;
                unint64_t v150 = v148 >> 3;
                if (v149 > 4) {
                  unsigned int v151 = *(unsigned __int16 *)(a2 + v150);
                }
                else {
                  unsigned int v151 = *(unsigned __int8 *)(a2 + v150);
                }
                *(unsigned char *)(result + 17) |= (v151 >> v149) & 0xF;
                unint64_t v255 = *a3 + 19;
                unint64_t v256 = v255 & 7;
                unint64_t v257 = v255 >> 3;
                if (v256 > 4) {
                  unsigned int v258 = *(unsigned __int16 *)(a2 + v257);
                }
                else {
                  unsigned int v258 = *(unsigned __int8 *)(a2 + v257);
                }
                *(unsigned char *)(result + 25) |= (v258 >> v256) & 0xF;
                uint64_t v21 = 23;
              }
              else
              {
                *(unsigned char *)(result + 16) = v147 & 0xFE;
                unint64_t v229 = *a3 + 15;
                unint64_t v230 = v229 & 7;
                unint64_t v231 = v229 >> 3;
                if (v230 > 4) {
                  unsigned int v232 = *(unsigned __int16 *)(a2 + v231);
                }
                else {
                  unsigned int v232 = *(unsigned __int8 *)(a2 + v231);
                }
                *(unsigned char *)(result + 17) |= (v232 >> v230) & 0xF;
                unint64_t v350 = *a3 + 19;
                unint64_t v351 = v350 & 7;
                unint64_t v352 = v350 >> 3;
                if (v351 > 4) {
                  unsigned int v353 = *(unsigned __int16 *)(a2 + v352);
                }
                else {
                  unsigned int v353 = *(unsigned __int8 *)(a2 + v352);
                }
                *(unsigned char *)(result + 25) |= (v353 >> v351) & 0xF;
                unint64_t v358 = *a3 + 23;
                unint64_t v359 = v358 & 7;
                unint64_t v360 = v358 >> 3;
                if (v359 > 4) {
                  unsigned int v361 = *(unsigned __int16 *)(a2 + v360);
                }
                else {
                  unsigned int v361 = *(unsigned __int8 *)(a2 + v360);
                }
                *(unsigned char *)(result + 18) |= (v361 >> v359) & 0xF;
                unint64_t v366 = *a3 + 27;
                unint64_t v367 = v366 & 7;
                unint64_t v368 = v366 >> 3;
                if (v367 > 4) {
                  unsigned int v369 = *(unsigned __int16 *)(a2 + v368);
                }
                else {
                  unsigned int v369 = *(unsigned __int8 *)(a2 + v368);
                }
                *(unsigned char *)(result + 26) |= (v369 >> v367) & 0xF;
                unint64_t v374 = *a3 + 31;
                unint64_t v375 = v374 & 7;
                unint64_t v376 = v374 >> 3;
                if (v375 > 4) {
                  unsigned int v377 = *(unsigned __int16 *)(a2 + v376);
                }
                else {
                  unsigned int v377 = *(unsigned __int8 *)(a2 + v376);
                }
                *(unsigned char *)(result + 19) |= (v377 >> v375) & 0xF;
                unint64_t v382 = *a3 + 35;
                unint64_t v383 = v382 & 7;
                unint64_t v384 = v382 >> 3;
                if (v383 > 4) {
                  unsigned int v385 = *(unsigned __int16 *)(a2 + v384);
                }
                else {
                  unsigned int v385 = *(unsigned __int8 *)(a2 + v384);
                }
                *(unsigned char *)(result + 27) |= (v385 >> v383) & 0xF;
                unint64_t v390 = *a3 + 39;
                unint64_t v391 = v390 & 7;
                unint64_t v392 = v390 >> 3;
                if (v391 > 4) {
                  unsigned int v393 = *(unsigned __int16 *)(a2 + v392);
                }
                else {
                  unsigned int v393 = *(unsigned __int8 *)(a2 + v392);
                }
                *(unsigned char *)(result + 20) |= (v393 >> v391) & 0xF;
                unint64_t v398 = *a3 + 43;
                unint64_t v399 = v398 & 7;
                unint64_t v400 = v398 >> 3;
                if (v399 > 4) {
                  unsigned int v401 = *(unsigned __int16 *)(a2 + v400);
                }
                else {
                  unsigned int v401 = *(unsigned __int8 *)(a2 + v400);
                }
                *(unsigned char *)(result + 28) |= (v401 >> v399) & 0xF;
                unint64_t v406 = *a3 + 47;
                unint64_t v407 = v406 & 7;
                unint64_t v408 = v406 >> 3;
                if (v407 > 4) {
                  unsigned int v409 = *(unsigned __int16 *)(a2 + v408);
                }
                else {
                  unsigned int v409 = *(unsigned __int8 *)(a2 + v408);
                }
                *(unsigned char *)(result + 21) |= (v409 >> v407) & 0xF;
                unint64_t v414 = *a3 + 51;
                unint64_t v415 = v414 & 7;
                unint64_t v416 = v414 >> 3;
                if (v415 > 4) {
                  unsigned int v417 = *(unsigned __int16 *)(a2 + v416);
                }
                else {
                  unsigned int v417 = *(unsigned __int8 *)(a2 + v416);
                }
                *(unsigned char *)(result + 29) |= (v417 >> v415) & 0xF;
                unint64_t v422 = *a3 + 55;
                unint64_t v423 = v422 & 7;
                unint64_t v424 = v422 >> 3;
                if (v423 > 4) {
                  unsigned int v425 = *(unsigned __int16 *)(a2 + v424);
                }
                else {
                  unsigned int v425 = *(unsigned __int8 *)(a2 + v424);
                }
                *(unsigned char *)(result + 22) |= (v425 >> v423) & 0xF;
                unint64_t v430 = *a3 + 59;
                unint64_t v431 = v430 & 7;
                unint64_t v432 = v430 >> 3;
                if (v431 > 4) {
                  unsigned int v433 = *(unsigned __int16 *)(a2 + v432);
                }
                else {
                  unsigned int v433 = *(unsigned __int8 *)(a2 + v432);
                }
                *(unsigned char *)(result + 30) |= (v433 >> v431) & 0xF;
                unint64_t v438 = *a3 + 63;
                unint64_t v439 = v438 & 7;
                unint64_t v440 = v438 >> 3;
                if (v439 > 4) {
                  unsigned int v441 = *(unsigned __int16 *)(a2 + v440);
                }
                else {
                  unsigned int v441 = *(unsigned __int8 *)(a2 + v440);
                }
                *(unsigned char *)(result + 23) |= (v441 >> v439) & 0xF;
                unint64_t v446 = *a3 + 67;
                unint64_t v447 = v446 & 7;
                unint64_t v448 = v446 >> 3;
                if (v447 > 4) {
                  unsigned int v449 = *(unsigned __int16 *)(a2 + v448);
                }
                else {
                  unsigned int v449 = *(unsigned __int8 *)(a2 + v448);
                }
                *(unsigned char *)(result + 31) |= (v449 >> v447) & 0xF;
                unint64_t v454 = *a3 + 71;
                unint64_t v455 = v454 & 7;
                unint64_t v456 = v454 >> 3;
                if (v455 > 4) {
                  unsigned int v457 = *(unsigned __int16 *)(a2 + v456);
                }
                else {
                  unsigned int v457 = *(unsigned __int8 *)(a2 + v456);
                }
                *(unsigned char *)(result + 24) |= (v457 >> v455) & 0xF;
                unint64_t v462 = *a3 + 75;
                unint64_t v463 = v462 & 7;
                unint64_t v464 = v462 >> 3;
                if (v463 > 4) {
                  unsigned int v465 = *(unsigned __int16 *)(a2 + v464);
                }
                else {
                  unsigned int v465 = *(unsigned __int8 *)(a2 + v464);
                }
                *(unsigned char *)(result + 32) |= (v465 >> v463) & 0xF;
                uint64_t v21 = 79;
              }
              break;
            case 3:
              *(_DWORD *)(result + 12) = 2;
              unint64_t v152 = *a3 + 14;
              unint64_t v153 = v152 & 7;
              unint64_t v154 = v152 >> 3;
              if (v153 == 7) {
                unsigned int v155 = ((*(unsigned __int8 *)(a2 + v154 + 2) << 16) | (*(unsigned __int8 *)(a2 + v154 + 1) << 8) | *(unsigned __int8 *)(a2 + v154)) >> 7;
              }
              else {
                unsigned int v155 = *(unsigned __int16 *)(a2 + v154) >> v153;
              }
              *(_WORD *)(result + 16) |= v155 & 0x3FF;
              uint64_t v194 = *a3 & 7;
              unint64_t v195 = (unint64_t)(*a3 + 24) >> 3;
              if (v194 == 7) {
                unsigned int v196 = ((*(unsigned __int8 *)(a2 + v195 + 2) << 16) | (*(unsigned __int8 *)(a2 + v195 + 1) << 8) | *(unsigned __int8 *)(a2 + v195)) >> 7;
              }
              else {
                unsigned int v196 = *(unsigned __int16 *)(a2 + v195) >> v194;
              }
              *(_WORD *)(result + 18) |= v196 & 0x3FF;
              unint64_t v206 = *a3 + 34;
              unint64_t v207 = v206 & 7;
              unint64_t v208 = v206 >> 3;
              if (v207 > 5) {
                unsigned int v209 = (*(unsigned __int8 *)(a2 + v208 + 2) << 16) | (*(unsigned __int8 *)(a2 + v208 + 1) << 8) | *(unsigned __int8 *)(a2 + v208);
              }
              else {
                unsigned int v209 = *(unsigned __int16 *)(a2 + v208);
              }
              *(_WORD *)(result + 20) |= (v209 >> v207) & 0x7FF;
              unint64_t v214 = *a3 + 45;
              unsigned int v215 = *(unsigned __int8 *)(a2 + (v214 >> 3));
              char v216 = v214 & 7;
              char v217 = *(unsigned char *)(result + 22);
              if ((v215 >> v216))
              {
                *(unsigned char *)(result + 22) = v217 | 1;
                unint64_t v218 = *a3 + 46;
                unint64_t v219 = v218 & 7;
                unint64_t v220 = v218 >> 3;
                if (v219 > 4) {
                  unsigned int v221 = *(unsigned __int16 *)(a2 + v220);
                }
                else {
                  unsigned int v221 = *(unsigned __int8 *)(a2 + v220);
                }
                *(unsigned char *)(result + 23) |= (v221 >> v219) & 0xF;
                unint64_t v262 = *a3 + 50;
                unint64_t v263 = v262 & 7;
                unint64_t v264 = v262 >> 3;
                if (v263 > 4) {
                  unsigned int v265 = *(unsigned __int16 *)(a2 + v264);
                }
                else {
                  unsigned int v265 = *(unsigned __int8 *)(a2 + v264);
                }
                *(unsigned char *)(result + 31) |= (v265 >> v263) & 0xF;
                uint64_t v21 = 54;
              }
              else
              {
                *(unsigned char *)(result + 22) = v217 & 0xFE;
                unint64_t v237 = *a3 + 46;
                unint64_t v238 = v237 & 7;
                unint64_t v239 = v237 >> 3;
                if (v238 > 4) {
                  unsigned int v240 = *(unsigned __int16 *)(a2 + v239);
                }
                else {
                  unsigned int v240 = *(unsigned __int8 *)(a2 + v239);
                }
                *(unsigned char *)(result + 23) |= (v240 >> v238) & 0xF;
                unint64_t v354 = *a3 + 50;
                unint64_t v355 = v354 & 7;
                unint64_t v356 = v354 >> 3;
                if (v355 > 4) {
                  unsigned int v357 = *(unsigned __int16 *)(a2 + v356);
                }
                else {
                  unsigned int v357 = *(unsigned __int8 *)(a2 + v356);
                }
                *(unsigned char *)(result + 31) |= (v357 >> v355) & 0xF;
                unint64_t v362 = *a3 + 54;
                unint64_t v363 = v362 & 7;
                unint64_t v364 = v362 >> 3;
                if (v363 > 4) {
                  unsigned int v365 = *(unsigned __int16 *)(a2 + v364);
                }
                else {
                  unsigned int v365 = *(unsigned __int8 *)(a2 + v364);
                }
                *(unsigned char *)(result + 24) |= (v365 >> v363) & 0xF;
                unint64_t v370 = *a3 + 58;
                unint64_t v371 = v370 & 7;
                unint64_t v372 = v370 >> 3;
                if (v371 > 4) {
                  unsigned int v373 = *(unsigned __int16 *)(a2 + v372);
                }
                else {
                  unsigned int v373 = *(unsigned __int8 *)(a2 + v372);
                }
                *(unsigned char *)(result + 32) |= (v373 >> v371) & 0xF;
                unint64_t v378 = *a3 + 62;
                unint64_t v379 = v378 & 7;
                unint64_t v380 = v378 >> 3;
                if (v379 > 4) {
                  unsigned int v381 = *(unsigned __int16 *)(a2 + v380);
                }
                else {
                  unsigned int v381 = *(unsigned __int8 *)(a2 + v380);
                }
                *(unsigned char *)(result + 25) |= (v381 >> v379) & 0xF;
                unint64_t v386 = *a3 + 66;
                unint64_t v387 = v386 & 7;
                unint64_t v388 = v386 >> 3;
                if (v387 > 4) {
                  unsigned int v389 = *(unsigned __int16 *)(a2 + v388);
                }
                else {
                  unsigned int v389 = *(unsigned __int8 *)(a2 + v388);
                }
                *(unsigned char *)(result + 33) |= (v389 >> v387) & 0xF;
                unint64_t v394 = *a3 + 70;
                unint64_t v395 = v394 & 7;
                unint64_t v396 = v394 >> 3;
                if (v395 > 4) {
                  unsigned int v397 = *(unsigned __int16 *)(a2 + v396);
                }
                else {
                  unsigned int v397 = *(unsigned __int8 *)(a2 + v396);
                }
                *(unsigned char *)(result + 26) |= (v397 >> v395) & 0xF;
                unint64_t v402 = *a3 + 74;
                unint64_t v403 = v402 & 7;
                unint64_t v404 = v402 >> 3;
                if (v403 > 4) {
                  unsigned int v405 = *(unsigned __int16 *)(a2 + v404);
                }
                else {
                  unsigned int v405 = *(unsigned __int8 *)(a2 + v404);
                }
                *(unsigned char *)(result + 34) |= (v405 >> v403) & 0xF;
                unint64_t v410 = *a3 + 78;
                unint64_t v411 = v410 & 7;
                unint64_t v412 = v410 >> 3;
                if (v411 > 4) {
                  unsigned int v413 = *(unsigned __int16 *)(a2 + v412);
                }
                else {
                  unsigned int v413 = *(unsigned __int8 *)(a2 + v412);
                }
                *(unsigned char *)(result + 27) |= (v413 >> v411) & 0xF;
                unint64_t v418 = *a3 + 82;
                unint64_t v419 = v418 & 7;
                unint64_t v420 = v418 >> 3;
                if (v419 > 4) {
                  unsigned int v421 = *(unsigned __int16 *)(a2 + v420);
                }
                else {
                  unsigned int v421 = *(unsigned __int8 *)(a2 + v420);
                }
                *(unsigned char *)(result + 35) |= (v421 >> v419) & 0xF;
                unint64_t v426 = *a3 + 86;
                unint64_t v427 = v426 & 7;
                unint64_t v428 = v426 >> 3;
                if (v427 > 4) {
                  unsigned int v429 = *(unsigned __int16 *)(a2 + v428);
                }
                else {
                  unsigned int v429 = *(unsigned __int8 *)(a2 + v428);
                }
                *(unsigned char *)(result + 28) |= (v429 >> v427) & 0xF;
                unint64_t v434 = *a3 + 90;
                unint64_t v435 = v434 & 7;
                unint64_t v436 = v434 >> 3;
                if (v435 > 4) {
                  unsigned int v437 = *(unsigned __int16 *)(a2 + v436);
                }
                else {
                  unsigned int v437 = *(unsigned __int8 *)(a2 + v436);
                }
                *(unsigned char *)(result + 36) |= (v437 >> v435) & 0xF;
                unint64_t v442 = *a3 + 94;
                unint64_t v443 = v442 & 7;
                unint64_t v444 = v442 >> 3;
                if (v443 > 4) {
                  unsigned int v445 = *(unsigned __int16 *)(a2 + v444);
                }
                else {
                  unsigned int v445 = *(unsigned __int8 *)(a2 + v444);
                }
                *(unsigned char *)(result + 29) |= (v445 >> v443) & 0xF;
                unint64_t v450 = *a3 + 98;
                unint64_t v451 = v450 & 7;
                unint64_t v452 = v450 >> 3;
                if (v451 > 4) {
                  unsigned int v453 = *(unsigned __int16 *)(a2 + v452);
                }
                else {
                  unsigned int v453 = *(unsigned __int8 *)(a2 + v452);
                }
                *(unsigned char *)(result + 37) |= (v453 >> v451) & 0xF;
                unint64_t v458 = *a3 + 102;
                unint64_t v459 = v458 & 7;
                unint64_t v460 = v458 >> 3;
                if (v459 > 4) {
                  unsigned int v461 = *(unsigned __int16 *)(a2 + v460);
                }
                else {
                  unsigned int v461 = *(unsigned __int8 *)(a2 + v460);
                }
                *(unsigned char *)(result + 30) |= (v461 >> v459) & 0xF;
                unint64_t v466 = *a3 + 106;
                unint64_t v467 = v466 & 7;
                unint64_t v468 = v466 >> 3;
                if (v467 > 4) {
                  unsigned int v469 = *(unsigned __int16 *)(a2 + v468);
                }
                else {
                  unsigned int v469 = *(unsigned __int8 *)(a2 + v468);
                }
                *(unsigned char *)(result + 38) |= (v469 >> v467) & 0xF;
                uint64_t v21 = 110;
              }
              break;
            default:
              *(_DWORD *)(result + 12) = 1;
              unint64_t v104 = *a3 + 14;
              unint64_t v105 = v104 & 7;
              unint64_t v106 = v104 >> 3;
              if (v105 > 4) {
                unsigned __int16 v107 = *(_WORD *)(a2 + v106);
              }
              else {
                unsigned __int16 v107 = *(unsigned __int8 *)(a2 + v106);
              }
              int v189 = *(unsigned __int16 *)(result + 16) | (v107 >> v105) & 0xF;
              *(_WORD *)(result + 16) = v189;
              unint64_t v190 = *a3 + 18;
              unint64_t v191 = v190 & 7;
              unint64_t v192 = v190 >> 3;
              if (v191 > 4) {
                unsigned __int16 v193 = *(_WORD *)(a2 + v192);
              }
              else {
                unsigned __int16 v193 = *(unsigned __int8 *)(a2 + v192);
              }
              int v201 = (16 * ((v193 >> v191) & 0xF)) | v189;
              *(_WORD *)(result + 16) = v201;
              unint64_t v202 = *a3 + 22;
              unint64_t v203 = v202 & 7;
              unint64_t v204 = v202 >> 3;
              if (v203 > 4) {
                unsigned __int16 v205 = *(_WORD *)(a2 + v204);
              }
              else {
                unsigned __int16 v205 = *(unsigned __int8 *)(a2 + v204);
              }
              *(_WORD *)(result + 16) = (((v205 >> v203) & 0xF) << 8) | v201;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 26) >> 3)) >> ((*(unsigned char *)a3 + 26) & 7)))
              {
                *(_DWORD *)(result + 20) = 1;
                unint64_t v210 = *a3 + 27;
                unint64_t v211 = v210 & 7;
                unint64_t v212 = v210 >> 3;
                if (v211 > 3) {
                  unsigned int v213 = *(unsigned __int16 *)(a2 + v212);
                }
                else {
                  unsigned int v213 = *(unsigned __int8 *)(a2 + v212);
                }
                *(unsigned char *)(result + 24) |= (v213 >> v211) & 0x1F;
                unint64_t v259 = *a3 & 7;
                unint64_t v260 = (unint64_t)(*a3 + 32) >> 3;
                if (v259 > 4) {
                  unsigned int v261 = (*(unsigned __int8 *)(a2 + v260 + 2) << 16) | (*(unsigned __int8 *)(a2 + v260 + 1) << 8) | *(unsigned __int8 *)(a2 + v260);
                }
                else {
                  unsigned int v261 = *(unsigned __int16 *)(a2 + v260);
                }
                int v270 = *(_DWORD *)(result + 26) | (v261 >> v259) & 0xFFF;
                *(_DWORD *)(result + 26) = v270;
                unint64_t v271 = *a3 + 44;
                unint64_t v272 = v271 & 7;
                unint64_t v273 = v271 >> 3;
                if (v272 > 4) {
                  unsigned int v274 = *(unsigned __int16 *)(a2 + v273);
                }
                else {
                  unsigned int v274 = *(unsigned __int8 *)(a2 + v273);
                }
                int v279 = v270 | (((v274 >> v272) & 0xF) << 12);
                *(_DWORD *)(result + 26) = v279;
                unint64_t v280 = *a3 & 7;
                unint64_t v281 = (unint64_t)(*a3 + 48) >> 3;
                if (v280 > 4) {
                  unsigned int v282 = *(unsigned __int16 *)(a2 + v281);
                }
                else {
                  unsigned int v282 = *(unsigned __int8 *)(a2 + v281);
                }
                *(_DWORD *)(result + 26) = v279 | (((v282 >> v280) & 0xF) << 16);
                uint64_t v21 = 52;
              }
              else
              {
                *(_DWORD *)(result + 20) = 0;
                unint64_t v233 = *a3 + 27;
                unint64_t v234 = v233 & 7;
                unint64_t v235 = v233 >> 3;
                if (v234 > 3) {
                  unsigned int v236 = *(unsigned __int16 *)(a2 + v235);
                }
                else {
                  unsigned int v236 = *(unsigned __int8 *)(a2 + v235);
                }
                *(unsigned char *)(result + 24) |= (v236 >> v234) & 0x1F;
                uint64_t v21 = 32;
              }
              break;
          }
          break;
        case 2:
          *(_DWORD *)uint64_t result = 9;
          unint64_t v57 = v4 + 4;
          unint64_t v58 = v57 >> 3;
          uint64_t v59 = v57 & 7;
          if (v59) {
            int v60 = *(unsigned __int16 *)(a2 + v58) >> v59;
          }
          else {
            LOBYTE(v60) = *(unsigned char *)(a2 + v58);
          }
          *(unsigned char *)(result + 8) |= v60;
          unint64_t v108 = *a3 + 12;
          unint64_t v109 = v108 >> 3;
          unint64_t v110 = v108 & 7;
          if (v110)
          {
            double v111 = (unsigned __int8 *)(a2 + v109);
            unint64_t v112 = (((unint64_t)v111[4] << 32) | ((unint64_t)v111[3] << 24) | ((unint64_t)v111[2] << 16) | ((unint64_t)v111[1] << 8) | *v111) >> v110;
          }
          else
          {
            LODWORD(v112) = *(_DWORD *)(a2 + v109);
          }
          *(_DWORD *)(result + 12) |= v112;
          uint64_t v21 = 44;
          break;
        case 3:
          *(_DWORD *)uint64_t result = 10;
          unint64_t v61 = v4 + 4;
          unint64_t v62 = (v4 + 4) & 7;
          unint64_t v63 = v61 >> 3;
          if (v62 > 4) {
            unsigned __int16 v64 = *(_WORD *)(a2 + v63);
          }
          else {
            unsigned __int16 v64 = *(unsigned __int8 *)(a2 + v63);
          }
          switch((v64 >> v62) & 0xF)
          {
            case 1:
              *(_DWORD *)(result + 8) = 1;
              unint64_t v287 = *a3 & 7;
              unint64_t v288 = (unint64_t)(*a3 + 8) >> 3;
              if (v287 > 4)
              {
                int v290 = (*(unsigned __int8 *)(v288 + a2 + 3) << 24) | (*(unsigned __int8 *)(v288 + a2 + 2) << 16);
                int v289 = *(unsigned __int8 *)(v288 + a2 + 1) << 8;
              }
              else
              {
                int v289 = *(unsigned __int8 *)(v288 + a2 + 2) << 16;
                int v290 = *(unsigned __int8 *)(v288 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 16) |= ((v290 | v289 | *(unsigned __int8 *)(a2 + v288)) >> v287) & 0xFFFFF;
              unint64_t v475 = *a3 + 28;
              unint64_t v476 = v475 & 7;
              unint64_t v477 = v475 >> 3;
              if (v476 > 4)
              {
                int v479 = (*(unsigned __int8 *)(v477 + a2 + 3) << 24) | (*(unsigned __int8 *)(v477 + a2 + 2) << 16);
                int v478 = *(unsigned __int8 *)(v477 + a2 + 1) << 8;
              }
              else
              {
                int v478 = *(unsigned __int8 *)(v477 + a2 + 2) << 16;
                int v479 = *(unsigned __int8 *)(v477 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) |= ((v479 | v478 | *(unsigned __int8 *)(a2 + v477)) >> v476) & 0xFFFFF;
              unint64_t v535 = *a3 & 7;
              unint64_t v536 = (unint64_t)(*a3 + 48) >> 3;
              if (v535 > 4)
              {
                int v538 = (*(unsigned __int8 *)(v536 + a2 + 3) << 24) | (*(unsigned __int8 *)(v536 + a2 + 2) << 16);
                int v537 = *(unsigned __int8 *)(v536 + a2 + 1) << 8;
              }
              else
              {
                int v537 = *(unsigned __int8 *)(v536 + a2 + 2) << 16;
                int v538 = *(unsigned __int8 *)(v536 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v538 | v537 | *(unsigned __int8 *)(a2 + v536)) >> v535) & 0xFFFFF;
              unint64_t v587 = *a3 + 68;
              unint64_t v588 = v587 & 7;
              unint64_t v589 = v587 >> 3;
              if (v588 > 4)
              {
                int v591 = (*(unsigned __int8 *)(v589 + a2 + 3) << 24) | (*(unsigned __int8 *)(v589 + a2 + 2) << 16);
                int v590 = *(unsigned __int8 *)(v589 + a2 + 1) << 8;
              }
              else
              {
                int v590 = *(unsigned __int8 *)(v589 + a2 + 2) << 16;
                int v591 = *(unsigned __int8 *)(v589 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v591 | v590 | *(unsigned __int8 *)(a2 + v589)) >> v588) & 0xFFFFF;
              unint64_t v629 = *a3 & 7;
              unint64_t v630 = (unint64_t)(*a3 + 88) >> 3;
              if (v629 > 4)
              {
                int v632 = (*(unsigned __int8 *)(v630 + a2 + 3) << 24) | (*(unsigned __int8 *)(v630 + a2 + 2) << 16);
                int v631 = *(unsigned __int8 *)(v630 + a2 + 1) << 8;
              }
              else
              {
                int v631 = *(unsigned __int8 *)(v630 + a2 + 2) << 16;
                int v632 = *(unsigned __int8 *)(v630 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v632 | v631 | *(unsigned __int8 *)(a2 + v630)) >> v629) & 0xFFFFF;
              unint64_t v669 = *a3 + 108;
              unint64_t v670 = v669 & 7;
              unint64_t v671 = v669 >> 3;
              if (v670 > 4)
              {
                int v673 = (*(unsigned __int8 *)(v671 + a2 + 3) << 24) | (*(unsigned __int8 *)(v671 + a2 + 2) << 16);
                int v672 = *(unsigned __int8 *)(v671 + a2 + 1) << 8;
              }
              else
              {
                int v672 = *(unsigned __int8 *)(v671 + a2 + 2) << 16;
                int v673 = *(unsigned __int8 *)(v671 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v673 | v672 | *(unsigned __int8 *)(a2 + v671)) >> v670) & 0xFFFFF;
              unint64_t v706 = *a3 & 7;
              unint64_t v707 = (unint64_t)(*a3 + 128) >> 3;
              if (v706 > 4)
              {
                int v709 = (*(unsigned __int8 *)(v707 + a2 + 3) << 24) | (*(unsigned __int8 *)(v707 + a2 + 2) << 16);
                int v708 = *(unsigned __int8 *)(v707 + a2 + 1) << 8;
              }
              else
              {
                int v708 = *(unsigned __int8 *)(v707 + a2 + 2) << 16;
                int v709 = *(unsigned __int8 *)(v707 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v709 | v708 | *(unsigned __int8 *)(a2 + v707)) >> v706) & 0xFFFFF;
              unint64_t v744 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v745 = (unint64_t)(*a3 + 148) >> 3;
              if (v744 > 4)
              {
                int v747 = (*(unsigned __int8 *)(v745 + a2 + 3) << 24) | (*(unsigned __int8 *)(v745 + a2 + 2) << 16);
                int v746 = *(unsigned __int8 *)(v745 + a2 + 1) << 8;
              }
              else
              {
                int v746 = *(unsigned __int8 *)(v745 + a2 + 2) << 16;
                int v747 = *(unsigned __int8 *)(v745 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v747 | v746 | *(unsigned __int8 *)(a2 + v745)) >> v744) & 0xFFFFF;
              unint64_t v780 = (unint64_t)(*a3 + 168) >> 3;
              uint64_t v781 = *a3 & 7;
              if (v781) {
                unsigned int v782 = ((*(unsigned __int8 *)(a2 + v780 + 2) << 16) | (*(unsigned __int8 *)(a2 + v780 + 1) << 8) | *(unsigned __int8 *)(a2 + v780)) >> v781;
              }
              else {
                LOWORD(v782) = *(_WORD *)(a2 + v780);
              }
              int v1111 = *(_DWORD *)(result + 48) | (unsigned __int16)v782;
              *(_DWORD *)(result + 48) = v1111;
              unint64_t v1112 = (unint64_t)(*a3 + 184) >> 3;
              uint64_t v1113 = *a3 & 7;
              if (v1113) {
                unsigned int v1114 = ((*(unsigned __int8 *)(a2 + v1112 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1112 + 1) << 8) | *(unsigned __int8 *)(a2 + v1112)) >> v1113;
              }
              else {
                unsigned int v1114 = *(unsigned __int16 *)(a2 + v1112);
              }
              *(_DWORD *)(result + 48) = v1111 | (v1114 << 16);
              uint64_t v21 = 200;
              break;
            case 2:
              *(_DWORD *)(result + 8) = 2;
              uint64_t v291 = *a3 & 7;
              unint64_t v292 = (unint64_t)(*a3 + 8) >> 3;
              if (v291 == 7) {
                int v293 = *(unsigned __int16 *)(a2 + v292) >> 7;
              }
              else {
                int v293 = *(unsigned __int8 *)(a2 + v292) >> v291;
              }
              *(unsigned char *)(result + 16) |= v293 & 3;
              unint64_t v480 = *a3 + 10;
              unint64_t v481 = v480 & 7;
              unint64_t v482 = v480 >> 3;
              if (v481 > 1) {
                unsigned int v483 = (*(unsigned __int8 *)(a2 + v482 + 2) << 16) | (*(unsigned __int8 *)(a2 + v482 + 1) << 8) | *(unsigned __int8 *)(a2 + v482);
              }
              else {
                unsigned int v483 = *(unsigned __int16 *)(a2 + v482);
              }
              *(_WORD *)(result + 18) |= (v483 >> v481) & 0x7FFF;
              unint64_t v539 = *a3 + 25;
              unint64_t v540 = v539 & 7;
              unint64_t v541 = v539 >> 3;
              if (v540 > 1) {
                unsigned int v542 = (*(unsigned __int8 *)(a2 + v541 + 2) << 16) | (*(unsigned __int8 *)(a2 + v541 + 1) << 8) | *(unsigned __int8 *)(a2 + v541);
              }
              else {
                unsigned int v542 = *(unsigned __int16 *)(a2 + v541);
              }
              *(_WORD *)(result + 20) |= (v542 >> v540) & 0x7FFF;
              unint64_t v592 = *a3 & 7;
              unint64_t v593 = (unint64_t)(*a3 + 40) >> 3;
              if (v592 > 1) {
                unsigned int v594 = (*(unsigned __int8 *)(a2 + v593 + 2) << 16) | (*(unsigned __int8 *)(a2 + v593 + 1) << 8) | *(unsigned __int8 *)(a2 + v593);
              }
              else {
                unsigned int v594 = *(unsigned __int16 *)(a2 + v593);
              }
              *(_WORD *)(result + 22) |= (v594 >> v592) & 0x7FFF;
              unint64_t v633 = *a3 + 55;
              unint64_t v634 = v633 & 7;
              unint64_t v635 = v633 >> 3;
              if (v634 > 1) {
                unsigned int v636 = (*(unsigned __int8 *)(a2 + v635 + 2) << 16) | (*(unsigned __int8 *)(a2 + v635 + 1) << 8) | *(unsigned __int8 *)(a2 + v635);
              }
              else {
                unsigned int v636 = *(unsigned __int16 *)(a2 + v635);
              }
              *(_WORD *)(result + 24) |= (v636 >> v634) & 0x7FFF;
              unint64_t v674 = *a3 + 70;
              unint64_t v675 = v674 & 7;
              unint64_t v676 = v674 >> 3;
              if (v675 > 1) {
                unsigned int v677 = (*(unsigned __int8 *)(a2 + v676 + 2) << 16) | (*(unsigned __int8 *)(a2 + v676 + 1) << 8) | *(unsigned __int8 *)(a2 + v676);
              }
              else {
                unsigned int v677 = *(unsigned __int16 *)(a2 + v676);
              }
              *(_WORD *)(result + 26) |= (v677 >> v675) & 0x7FFF;
              unint64_t v710 = *a3 + 85;
              unint64_t v711 = v710 & 7;
              unint64_t v712 = v710 >> 3;
              if (v711 > 1) {
                unsigned int v713 = (*(unsigned __int8 *)(a2 + v712 + 2) << 16) | (*(unsigned __int8 *)(a2 + v712 + 1) << 8) | *(unsigned __int8 *)(a2 + v712);
              }
              else {
                unsigned int v713 = *(unsigned __int16 *)(a2 + v712);
              }
              *(_WORD *)(result + 28) |= (v713 >> v711) & 0x7FFF;
              unint64_t v748 = *a3 + 100;
              unint64_t v749 = v748 & 7;
              unint64_t v750 = v748 >> 3;
              if (v749 > 1) {
                unsigned int v751 = (*(unsigned __int8 *)(a2 + v750 + 2) << 16) | (*(unsigned __int8 *)(a2 + v750 + 1) << 8) | *(unsigned __int8 *)(a2 + v750);
              }
              else {
                unsigned int v751 = *(unsigned __int16 *)(a2 + v750);
              }
              *(_WORD *)(result + 30) |= (v751 >> v749) & 0x7FFF;
              unint64_t v783 = *a3 + 115;
              unint64_t v784 = v783 & 7;
              unint64_t v785 = v783 >> 3;
              if (v784 > 1) {
                unsigned int v786 = (*(unsigned __int8 *)(a2 + v785 + 2) << 16) | (*(unsigned __int8 *)(a2 + v785 + 1) << 8) | *(unsigned __int8 *)(a2 + v785);
              }
              else {
                unsigned int v786 = *(unsigned __int16 *)(a2 + v785);
              }
              *(_WORD *)(result + 32) |= (v786 >> v784) & 0x7FFF;
              unint64_t v809 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v810 = (unint64_t)(*a3 + 130) >> 3;
              if (v809 > 1) {
                unsigned int v811 = (*(unsigned __int8 *)(a2 + v810 + 2) << 16) | (*(unsigned __int8 *)(a2 + v810 + 1) << 8) | *(unsigned __int8 *)(a2 + v810);
              }
              else {
                unsigned int v811 = *(unsigned __int16 *)(a2 + v810);
              }
              *(_WORD *)(result + 34) |= (v811 >> v809) & 0x7FFF;
              unint64_t v832 = (*(unsigned char *)a3 - 111) & 7;
              unint64_t v833 = (unint64_t)(*a3 + 145) >> 3;
              if (v832 > 1) {
                unsigned int v834 = (*(unsigned __int8 *)(a2 + v833 + 2) << 16) | (*(unsigned __int8 *)(a2 + v833 + 1) << 8) | *(unsigned __int8 *)(a2 + v833);
              }
              else {
                unsigned int v834 = *(unsigned __int16 *)(a2 + v833);
              }
              *(_WORD *)(result + 36) |= (v834 >> v832) & 0x7FFF;
              unint64_t v849 = *a3 & 7;
              unint64_t v850 = (unint64_t)(*a3 + 160) >> 3;
              if (v849 > 1) {
                unsigned int v851 = (*(unsigned __int8 *)(a2 + v850 + 2) << 16) | (*(unsigned __int8 *)(a2 + v850 + 1) << 8) | *(unsigned __int8 *)(a2 + v850);
              }
              else {
                unsigned int v851 = *(unsigned __int16 *)(a2 + v850);
              }
              *(_WORD *)(result + 38) |= (v851 >> v849) & 0x7FFF;
              unint64_t v866 = (*(unsigned char *)a3 - 81) & 7;
              unint64_t v867 = (unint64_t)(*a3 + 175) >> 3;
              if (v866 > 1) {
                unsigned int v868 = (*(unsigned __int8 *)(a2 + v867 + 2) << 16) | (*(unsigned __int8 *)(a2 + v867 + 1) << 8) | *(unsigned __int8 *)(a2 + v867);
              }
              else {
                unsigned int v868 = *(unsigned __int16 *)(a2 + v867);
              }
              *(_WORD *)(result + 40) |= (v868 >> v866) & 0x7FFF;
              unint64_t v883 = (*(unsigned char *)a3 - 66) & 7;
              unint64_t v884 = (unint64_t)(*a3 + 190) >> 3;
              if (v883 > 1) {
                unsigned int v885 = (*(unsigned __int8 *)(a2 + v884 + 2) << 16) | (*(unsigned __int8 *)(a2 + v884 + 1) << 8) | *(unsigned __int8 *)(a2 + v884);
              }
              else {
                unsigned int v885 = *(unsigned __int16 *)(a2 + v884);
              }
              *(_WORD *)(result + 42) |= (v885 >> v883) & 0x7FFF;
              unint64_t v900 = (*(unsigned char *)a3 - 51) & 7;
              unint64_t v901 = (unint64_t)(*a3 + 205) >> 3;
              if (v900 > 1) {
                unsigned int v902 = (*(unsigned __int8 *)(a2 + v901 + 2) << 16) | (*(unsigned __int8 *)(a2 + v901 + 1) << 8) | *(unsigned __int8 *)(a2 + v901);
              }
              else {
                unsigned int v902 = *(unsigned __int16 *)(a2 + v901);
              }
              *(_WORD *)(result + 44) |= (v902 >> v900) & 0x7FFF;
              unint64_t v918 = (*(unsigned char *)a3 - 36) & 7;
              unint64_t v919 = (unint64_t)(*a3 + 220) >> 3;
              if (v918 > 1) {
                unsigned int v920 = (*(unsigned __int8 *)(a2 + v919 + 2) << 16) | (*(unsigned __int8 *)(a2 + v919 + 1) << 8) | *(unsigned __int8 *)(a2 + v919);
              }
              else {
                unsigned int v920 = *(unsigned __int16 *)(a2 + v919);
              }
              *(_WORD *)(result + 46) |= (v920 >> v918) & 0x7FFF;
              unint64_t v934 = (*(unsigned char *)a3 - 21) & 7;
              unint64_t v935 = (unint64_t)(*a3 + 235) >> 3;
              if (v934 > 1) {
                unsigned int v936 = (*(unsigned __int8 *)(a2 + v935 + 2) << 16) | (*(unsigned __int8 *)(a2 + v935 + 1) << 8) | *(unsigned __int8 *)(a2 + v935);
              }
              else {
                unsigned int v936 = *(unsigned __int16 *)(a2 + v935);
              }
              *(_WORD *)(result + 48) |= (v936 >> v934) & 0x7FFF;
              unint64_t v950 = (*(unsigned char *)a3 - 6) & 7;
              unint64_t v951 = (unint64_t)(*a3 + 250) >> 3;
              if (v950 > 1) {
                unsigned int v952 = (*(unsigned __int8 *)(a2 + v951 + 2) << 16) | (*(unsigned __int8 *)(a2 + v951 + 1) << 8) | *(unsigned __int8 *)(a2 + v951);
              }
              else {
                unsigned int v952 = *(unsigned __int16 *)(a2 + v951);
              }
              *(_WORD *)(result + 50) |= (v952 >> v950) & 0x7FFF;
              unint64_t v961 = *a3 + 265;
              unint64_t v962 = v961 & 7;
              unint64_t v963 = v961 >> 3;
              if (v962 > 1) {
                unsigned int v964 = (*(unsigned __int8 *)(a2 + v963 + 2) << 16) | (*(unsigned __int8 *)(a2 + v963 + 1) << 8) | *(unsigned __int8 *)(a2 + v963);
              }
              else {
                unsigned int v964 = *(unsigned __int16 *)(a2 + v963);
              }
              *(_WORD *)(result + 52) |= (v964 >> v962) & 0x7FFF;
              unint64_t v968 = *a3 & 7;
              unint64_t v969 = (unint64_t)(*a3 + 280) >> 3;
              if (v968 > 1) {
                unsigned int v970 = (*(unsigned __int8 *)(a2 + v969 + 2) << 16) | (*(unsigned __int8 *)(a2 + v969 + 1) << 8) | *(unsigned __int8 *)(a2 + v969);
              }
              else {
                unsigned int v970 = *(unsigned __int16 *)(a2 + v969);
              }
              *(_WORD *)(result + 54) |= (v970 >> v968) & 0x7FFF;
              unint64_t v974 = *a3 + 295;
              unint64_t v975 = v974 & 7;
              unint64_t v976 = v974 >> 3;
              if (v975 > 1) {
                unsigned int v977 = (*(unsigned __int8 *)(a2 + v976 + 2) << 16) | (*(unsigned __int8 *)(a2 + v976 + 1) << 8) | *(unsigned __int8 *)(a2 + v976);
              }
              else {
                unsigned int v977 = *(unsigned __int16 *)(a2 + v976);
              }
              *(_WORD *)(result + 56) |= (v977 >> v975) & 0x7FFF;
              unint64_t v982 = *a3 + 310;
              unint64_t v983 = v982 & 7;
              unint64_t v984 = v982 >> 3;
              if (v983 > 1) {
                unsigned int v985 = (*(unsigned __int8 *)(a2 + v984 + 2) << 16) | (*(unsigned __int8 *)(a2 + v984 + 1) << 8) | *(unsigned __int8 *)(a2 + v984);
              }
              else {
                unsigned int v985 = *(unsigned __int16 *)(a2 + v984);
              }
              *(_WORD *)(result + 58) |= (v985 >> v983) & 0x7FFF;
              unint64_t v990 = *a3 + 325;
              unint64_t v991 = v990 & 7;
              unint64_t v992 = v990 >> 3;
              if (v991 > 1) {
                unsigned int v993 = (*(unsigned __int8 *)(a2 + v992 + 2) << 16) | (*(unsigned __int8 *)(a2 + v992 + 1) << 8) | *(unsigned __int8 *)(a2 + v992);
              }
              else {
                unsigned int v993 = *(unsigned __int16 *)(a2 + v992);
              }
              *(_WORD *)(result + 60) |= (v993 >> v991) & 0x7FFF;
              unint64_t v998 = *a3 + 340;
              unint64_t v999 = v998 & 7;
              unint64_t v1000 = v998 >> 3;
              if (v999 > 1) {
                unsigned int v1001 = (*(unsigned __int8 *)(a2 + v1000 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1000 + 1) << 8) | *(unsigned __int8 *)(a2 + v1000);
              }
              else {
                unsigned int v1001 = *(unsigned __int16 *)(a2 + v1000);
              }
              *(_WORD *)(result + 62) |= (v1001 >> v999) & 0x7FFF;
              unint64_t v1006 = *a3 + 355;
              unint64_t v1007 = v1006 & 7;
              unint64_t v1008 = v1006 >> 3;
              if (v1007 > 1) {
                unsigned int v1009 = (*(unsigned __int8 *)(a2 + v1008 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1008 + 1) << 8) | *(unsigned __int8 *)(a2 + v1008);
              }
              else {
                unsigned int v1009 = *(unsigned __int16 *)(a2 + v1008);
              }
              *(_WORD *)(result + 64) |= (v1009 >> v1007) & 0x7FFF;
              unint64_t v1014 = *a3 + 370;
              unint64_t v1015 = v1014 & 7;
              unint64_t v1016 = v1014 >> 3;
              if (v1015 > 1) {
                unsigned int v1017 = (*(unsigned __int8 *)(a2 + v1016 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1016 + 1) << 8) | *(unsigned __int8 *)(a2 + v1016);
              }
              else {
                unsigned int v1017 = *(unsigned __int16 *)(a2 + v1016);
              }
              *(_WORD *)(result + 66) |= (v1017 >> v1015) & 0x7FFF;
              unint64_t v1022 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v1023 = (unint64_t)(*a3 + 385) >> 3;
              if (v1022 > 1) {
                unsigned int v1024 = (*(unsigned __int8 *)(a2 + v1023 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1023 + 1) << 8) | *(unsigned __int8 *)(a2 + v1023);
              }
              else {
                unsigned int v1024 = *(unsigned __int16 *)(a2 + v1023);
              }
              *(_WORD *)(result + 68) |= (v1024 >> v1022) & 0x7FFF;
              unint64_t v1029 = *a3 & 7;
              unint64_t v1030 = (unint64_t)(*a3 + 400) >> 3;
              if (v1029 > 1) {
                unsigned int v1031 = (*(unsigned __int8 *)(a2 + v1030 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1030 + 1) << 8) | *(unsigned __int8 *)(a2 + v1030);
              }
              else {
                unsigned int v1031 = *(unsigned __int16 *)(a2 + v1030);
              }
              *(_WORD *)(result + 70) |= (v1031 >> v1029) & 0x7FFF;
              unint64_t v1035 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v1036 = (unint64_t)(*a3 + 415) >> 3;
              if (v1035 > 1) {
                unsigned int v1037 = (*(unsigned __int8 *)(a2 + v1036 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1036 + 1) << 8) | *(unsigned __int8 *)(a2 + v1036);
              }
              else {
                unsigned int v1037 = *(unsigned __int16 *)(a2 + v1036);
              }
              *(_WORD *)(result + 72) |= (v1037 >> v1035) & 0x7FFF;
              unint64_t v1042 = (*(unsigned char *)a3 - 82) & 7;
              unint64_t v1043 = (unint64_t)(*a3 + 430) >> 3;
              if (v1042 > 1) {
                unsigned int v1044 = (*(unsigned __int8 *)(a2 + v1043 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1043 + 1) << 8) | *(unsigned __int8 *)(a2 + v1043);
              }
              else {
                unsigned int v1044 = *(unsigned __int16 *)(a2 + v1043);
              }
              *(_WORD *)(result + 74) |= (v1044 >> v1042) & 0x7FFF;
              unint64_t v1048 = (*(unsigned char *)a3 - 67) & 7;
              unint64_t v1049 = (unint64_t)(*a3 + 445) >> 3;
              if (v1048 > 1) {
                unsigned int v1050 = (*(unsigned __int8 *)(a2 + v1049 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1049 + 1) << 8) | *(unsigned __int8 *)(a2 + v1049);
              }
              else {
                unsigned int v1050 = *(unsigned __int16 *)(a2 + v1049);
              }
              *(_WORD *)(result + 76) |= (v1050 >> v1048) & 0x7FFF;
              unint64_t v1054 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v1055 = (unint64_t)(*a3 + 460) >> 3;
              if (v1054 > 1) {
                unsigned int v1056 = (*(unsigned __int8 *)(a2 + v1055 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1055 + 1) << 8) | *(unsigned __int8 *)(a2 + v1055);
              }
              else {
                unsigned int v1056 = *(unsigned __int16 *)(a2 + v1055);
              }
              *(_WORD *)(result + 78) |= (v1056 >> v1054) & 0x7FFF;
              unint64_t v1060 = (*(unsigned char *)a3 - 37) & 7;
              unint64_t v1061 = (unint64_t)(*a3 + 475) >> 3;
              if (v1060 > 1) {
                unsigned int v1062 = (*(unsigned __int8 *)(a2 + v1061 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1061 + 1) << 8) | *(unsigned __int8 *)(a2 + v1061);
              }
              else {
                unsigned int v1062 = *(unsigned __int16 *)(a2 + v1061);
              }
              *(_WORD *)(result + 80) |= (v1062 >> v1060) & 0x7FFF;
              uint64_t v21 = 490;
              break;
            case 3:
              *(_DWORD *)(result + 8) = 3;
              *(unsigned char *)(result + 16) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1;
              unint64_t v294 = *a3 + 9;
              unint64_t v295 = v294 >> 3;
              unint64_t v296 = v294 & 7;
              if (v296) {
                unsigned int v297 = ((*(unsigned __int8 *)(a2 + v295 + 2) << 16) | (*(unsigned __int8 *)(a2 + v295 + 1) << 8) | *(unsigned __int8 *)(a2 + v295)) >> v296;
              }
              else {
                LOWORD(v297) = *(_WORD *)(a2 + v295);
              }
              uint64_t v1063 = (unsigned __int16)v297;
              int v1064 = *(_DWORD *)(result + 26);
              uint64_t v1065 = *(void *)(result + 18);
              uint64_t v1066 = v1065 | v1063;
              *(void *)(result + 18) = v1066;
              unint64_t v1067 = *a3 + 25;
              unint64_t v1068 = v1067 >> 3;
              unint64_t v1069 = v1067 & 7;
              if (v1069) {
                unsigned int v1070 = ((*(unsigned __int8 *)(a2 + v1068 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1068 + 1) << 8) | *(unsigned __int8 *)(a2 + v1068)) >> v1069;
              }
              else {
                unsigned int v1070 = *(unsigned __int16 *)(a2 + v1068);
              }
              unint64_t v1118 = v1066 & 0xFFFFFFFF0000FFFFLL | v1066 & 0xFFFF0000 | (unint64_t)(v1070 << 16);
              *(_DWORD *)(result + 26) = v1064;
              *(void *)(result + 18) = v1118;
              unint64_t v1119 = *a3 + 41;
              unint64_t v1120 = v1119 >> 3;
              unint64_t v1121 = v1119 & 7;
              if (v1121) {
                unsigned int v1122 = ((*(unsigned __int8 *)(a2 + v1120 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1120 + 1) << 8) | *(unsigned __int8 *)(a2 + v1120)) >> v1121;
              }
              else {
                LOWORD(v1122) = *(_WORD *)(a2 + v1120);
              }
              unint64_t v1134 = v1118 & 0xFFFF0000FFFFFFFFLL | v1065 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1122 << 32);
              *(_DWORD *)(result + 26) = v1064;
              *(void *)(result + 18) = v1134;
              unint64_t v1135 = *a3 + 57;
              unint64_t v1136 = v1135 >> 3;
              unint64_t v1137 = v1135 & 7;
              if (v1137) {
                uint64_t v1138 = ((*(unsigned __int8 *)(a2 + v1136 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1136 + 1) << 8) | *(unsigned __int8 *)(a2 + v1136)) >> v1137;
              }
              else {
                uint64_t v1138 = *(unsigned __int16 *)(a2 + v1136);
              }
              unint64_t v1139 = v1134 & 0xFFFF000000000000 | (v1138 << 48) | v1134 & 0xFFFFFFFFFFFFLL;
              *(_DWORD *)(result + 26) = v1064;
              *(void *)(result + 18) = v1139;
              unint64_t v1140 = *a3 + 73;
              unint64_t v1141 = v1140 >> 3;
              unint64_t v1142 = v1140 & 7;
              if (v1142) {
                unsigned int v1143 = ((*(unsigned __int8 *)(a2 + v1141 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1141 + 1) << 8) | *(unsigned __int8 *)(a2 + v1141)) >> v1142;
              }
              else {
                LOWORD(v1143) = *(_WORD *)(a2 + v1141);
              }
              unsigned int v1144 = (unsigned __int16)(v1064 | v1143) | v1064 & 0xFFFF0000;
              *(void *)(result + 18) = v1139;
              *(_DWORD *)(result + 26) = v1144;
              unint64_t v1145 = *a3 + 89;
              unint64_t v1146 = v1145 & 7;
              unint64_t v1147 = v1145 >> 3;
              if (v1146 > 1) {
                unsigned int v1148 = (*(unsigned __int8 *)(a2 + v1147 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1147 + 1) << 8) | *(unsigned __int8 *)(a2 + v1147);
              }
              else {
                unsigned int v1148 = *(unsigned __int16 *)(a2 + v1147);
              }
              *(void *)(result + 18) = v1139;
              *(_DWORD *)(result + 26) = v1144 & 0x8000FFFF | ((((v1148 >> v1146) | HIWORD(v1144)) & 0x7FFF) << 16);
              unint64_t v1149 = (unint64_t)(*a3 + 104) >> 3;
              uint64_t v1150 = *a3 & 7;
              if (v1150) {
                unsigned int v1151 = ((*(unsigned __int8 *)(a2 + v1149 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1149 + 1) << 8) | *(unsigned __int8 *)(a2 + v1149)) >> v1150;
              }
              else {
                LOWORD(v1151) = *(_WORD *)(a2 + v1149);
              }
              uint64_t v1152 = (unsigned __int16)v1151;
              int v1153 = *(_DWORD *)(result + 38);
              uint64_t v1154 = *(void *)(result + 30);
              uint64_t v1155 = v1154 | v1152;
              *(void *)(result + 30) = v1155;
              unint64_t v1156 = (unint64_t)(*a3 + 120) >> 3;
              uint64_t v1157 = *a3 & 7;
              if (v1157) {
                unsigned int v1158 = ((*(unsigned __int8 *)(a2 + v1156 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1156 + 1) << 8) | *(unsigned __int8 *)(a2 + v1156)) >> v1157;
              }
              else {
                unsigned int v1158 = *(unsigned __int16 *)(a2 + v1156);
              }
              unint64_t v1159 = v1155 & 0xFFFFFFFF0000FFFFLL | v1155 & 0xFFFF0000 | (unint64_t)(v1158 << 16);
              *(_DWORD *)(result + 38) = v1153;
              *(void *)(result + 30) = v1159;
              unint64_t v1160 = (unint64_t)(*a3 + 136) >> 3;
              uint64_t v1161 = *a3 & 7;
              if (v1161) {
                unsigned int v1162 = ((*(unsigned __int8 *)(a2 + v1160 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1160 + 1) << 8) | *(unsigned __int8 *)(a2 + v1160)) >> v1161;
              }
              else {
                LOWORD(v1162) = *(_WORD *)(a2 + v1160);
              }
              unint64_t v1163 = v1159 & 0xFFFF0000FFFFFFFFLL | v1154 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1162 << 32);
              *(_DWORD *)(result + 38) = v1153;
              *(void *)(result + 30) = v1163;
              unint64_t v1164 = (unint64_t)(*a3 + 152) >> 3;
              uint64_t v1165 = *a3 & 7;
              if (v1165) {
                uint64_t v1166 = ((*(unsigned __int8 *)(a2 + v1164 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1164 + 1) << 8) | *(unsigned __int8 *)(a2 + v1164)) >> v1165;
              }
              else {
                uint64_t v1166 = *(unsigned __int16 *)(a2 + v1164);
              }
              unint64_t v1167 = v1163 & 0xFFFF000000000000 | (v1166 << 48) | v1163 & 0xFFFFFFFFFFFFLL;
              *(_DWORD *)(result + 38) = v1153;
              *(void *)(result + 30) = v1167;
              unint64_t v1168 = (unint64_t)(*a3 + 168) >> 3;
              uint64_t v1169 = *a3 & 7;
              if (v1169) {
                unsigned int v1170 = ((*(unsigned __int8 *)(a2 + v1168 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1168 + 1) << 8) | *(unsigned __int8 *)(a2 + v1168)) >> v1169;
              }
              else {
                LOWORD(v1170) = *(_WORD *)(a2 + v1168);
              }
              unsigned int v1171 = (unsigned __int16)(v1153 | v1170) | v1153 & 0xFFFF0000;
              *(void *)(result + 30) = v1167;
              *(_DWORD *)(result + 38) = v1171;
              unint64_t v1172 = *a3 & 7;
              unint64_t v1173 = (unint64_t)(*a3 + 184) >> 3;
              if (v1172 > 1) {
                unsigned int v1174 = (*(unsigned __int8 *)(a2 + v1173 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1173 + 1) << 8) | *(unsigned __int8 *)(a2 + v1173);
              }
              else {
                unsigned int v1174 = *(unsigned __int16 *)(a2 + v1173);
              }
              *(void *)(result + 30) = v1167;
              *(_DWORD *)(result + 38) = v1171 & 0x8000FFFF | ((((v1174 >> v1172) | HIWORD(v1171)) & 0x7FFF) << 16);
              uint64_t v21 = 199;
              break;
            case 4:
              *(_DWORD *)(result + 8) = 4;
              int v298 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 16);
              *(_DWORD *)(result + 16) = v298;
              unint64_t v299 = *a3 + 9;
              unint64_t v300 = v299 & 7;
              unint64_t v301 = v299 >> 3;
              if (v300 == 7) {
                int v302 = *(_DWORD *)(a2 + v301) >> 7;
              }
              else {
                int v302 = ((*(unsigned __int8 *)(a2 + v301 + 2) << 16) | (*(unsigned __int8 *)(a2 + v301 + 1) << 8) | *(unsigned __int8 *)(a2 + v301)) >> v300;
              }
              *(_DWORD *)(result + 16) = (2 * (v302 & 0x3FFFF)) | v298;
              unint64_t v484 = *a3 + 27;
              unint64_t v485 = v484 & 7;
              unint64_t v486 = v484 >> 3;
              if (v485 == 7) {
                int v487 = *(_DWORD *)(a2 + v486) >> 7;
              }
              else {
                int v487 = ((*(unsigned __int8 *)(a2 + v486 + 2) << 16) | (*(unsigned __int8 *)(a2 + v486 + 1) << 8) | *(unsigned __int8 *)(a2 + v486)) >> v485;
              }
              *(_DWORD *)(result + 20) |= v487 & 0x3FFFF;
              unint64_t v543 = *a3 + 45;
              unint64_t v544 = v543 & 7;
              unint64_t v545 = v543 >> 3;
              if (v544 == 7) {
                int v546 = *(_DWORD *)(a2 + v545) >> 7;
              }
              else {
                int v546 = ((*(unsigned __int8 *)(a2 + v545 + 2) << 16) | (*(unsigned __int8 *)(a2 + v545 + 1) << 8) | *(unsigned __int8 *)(a2 + v545)) >> v544;
              }
              *(_DWORD *)(result + 24) |= v546 & 0x3FFFF;
              unint64_t v595 = *a3 + 63;
              unint64_t v596 = v595 & 7;
              unint64_t v597 = v595 >> 3;
              if (v596 == 7) {
                int v598 = *(_DWORD *)(a2 + v597) >> 7;
              }
              else {
                int v598 = ((*(unsigned __int8 *)(a2 + v597 + 2) << 16) | (*(unsigned __int8 *)(a2 + v597 + 1) << 8) | *(unsigned __int8 *)(a2 + v597)) >> v596;
              }
              *(_DWORD *)(result + 28) |= v598 & 0x3FFFF;
              unint64_t v637 = *a3 + 81;
              unint64_t v638 = v637 & 7;
              unint64_t v639 = v637 >> 3;
              if (v638 == 7) {
                int v640 = *(_DWORD *)(a2 + v639) >> 7;
              }
              else {
                int v640 = ((*(unsigned __int8 *)(a2 + v639 + 2) << 16) | (*(unsigned __int8 *)(a2 + v639 + 1) << 8) | *(unsigned __int8 *)(a2 + v639)) >> v638;
              }
              *(_DWORD *)(result + 32) |= v640 & 0x3FFFF;
              unint64_t v678 = *a3 + 99;
              unint64_t v679 = v678 & 7;
              unint64_t v680 = v678 >> 3;
              if (v679 == 7) {
                int v681 = *(_DWORD *)(a2 + v680) >> 7;
              }
              else {
                int v681 = ((*(unsigned __int8 *)(a2 + v680 + 2) << 16) | (*(unsigned __int8 *)(a2 + v680 + 1) << 8) | *(unsigned __int8 *)(a2 + v680)) >> v679;
              }
              *(_DWORD *)(result + 36) |= v681 & 0x3FFFF;
              unint64_t v714 = *a3 + 117;
              unint64_t v715 = v714 & 7;
              unint64_t v716 = v714 >> 3;
              if (v715 > 4)
              {
                int v718 = (*(unsigned __int8 *)(v716 + a2 + 3) << 24) | (*(unsigned __int8 *)(v716 + a2 + 2) << 16);
                int v717 = *(unsigned __int8 *)(v716 + a2 + 1) << 8;
              }
              else
              {
                int v717 = *(unsigned __int8 *)(v716 + a2 + 2) << 16;
                int v718 = *(unsigned __int8 *)(v716 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v718 | v717 | *(unsigned __int8 *)(a2 + v716)) >> v715) & 0xFFFFF;
              unint64_t v752 = (*(unsigned char *)a3 - 119) & 7;
              unint64_t v753 = (unint64_t)(*a3 + 137) >> 3;
              if (v752 > 4)
              {
                int v755 = (*(unsigned __int8 *)(v753 + a2 + 3) << 24) | (*(unsigned __int8 *)(v753 + a2 + 2) << 16);
                int v754 = *(unsigned __int8 *)(v753 + a2 + 1) << 8;
              }
              else
              {
                int v754 = *(unsigned __int8 *)(v753 + a2 + 2) << 16;
                int v755 = *(unsigned __int8 *)(v753 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v755 | v754 | *(unsigned __int8 *)(a2 + v753)) >> v752) & 0xFFFFF;
              unint64_t v787 = (*(unsigned char *)a3 - 99) & 7;
              unint64_t v788 = (unint64_t)(*a3 + 157) >> 3;
              if (v787 > 4)
              {
                int v790 = (*(unsigned __int8 *)(v788 + a2 + 3) << 24) | (*(unsigned __int8 *)(v788 + a2 + 2) << 16);
                int v789 = *(unsigned __int8 *)(v788 + a2 + 1) << 8;
              }
              else
              {
                int v789 = *(unsigned __int8 *)(v788 + a2 + 2) << 16;
                int v790 = *(unsigned __int8 *)(v788 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v790 | v789 | *(unsigned __int8 *)(a2 + v788)) >> v787) & 0xFFFFF;
              unint64_t v812 = (unint64_t)(*a3 + 177) >> 3;
              if (((*(unsigned char *)a3 - 79) & 7) != 0) {
                unsigned int v813 = ((*(unsigned __int8 *)(a2 + v812 + 2) << 16) | (*(unsigned __int8 *)(a2 + v812 + 1) << 8) | *(unsigned __int8 *)(a2 + v812)) >> ((*(unsigned char *)a3 - 79) & 7);
              }
              else {
                LOWORD(v813) = *(_WORD *)(a2 + v812);
              }
              int v1115 = *(_DWORD *)(result + 52) | (unsigned __int16)v813;
              *(_DWORD *)(result + 52) = v1115;
              unint64_t v1116 = (unint64_t)(*a3 + 193) >> 3;
              if (((*(unsigned char *)a3 - 63) & 7) != 0) {
                unsigned int v1117 = ((*(unsigned __int8 *)(a2 + v1116 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1116 + 1) << 8) | *(unsigned __int8 *)(a2 + v1116)) >> ((*(unsigned char *)a3 - 63) & 7);
              }
              else {
                unsigned int v1117 = *(unsigned __int16 *)(a2 + v1116);
              }
              *(_DWORD *)(result + 52) = v1115 | (v1117 << 16);
              uint64_t v21 = 209;
              break;
            case 5:
              *(_DWORD *)(result + 8) = 5;
              int v303 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 16);
              *(_DWORD *)(result + 16) = v303;
              unint64_t v304 = *a3 + 9;
              unint64_t v305 = v304 & 7;
              unint64_t v306 = v304 >> 3;
              if (v305 > 5)
              {
                int v308 = (*(unsigned __int8 *)(v306 + a2 + 3) << 24) | (*(unsigned __int8 *)(v306 + a2 + 2) << 16);
                int v307 = *(unsigned __int8 *)(v306 + a2 + 1) << 8;
              }
              else
              {
                int v307 = *(unsigned __int8 *)(v306 + a2 + 2) << 16;
                int v308 = *(unsigned __int8 *)(v306 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 16) = (2
                                        * (((v308 | v307 | *(unsigned __int8 *)(a2 + v306)) >> v305) & 0x7FFFF)) | v303;
              unint64_t v488 = *a3 + 28;
              *(_DWORD *)(result + 20) |= (((*(unsigned __int8 *)(a2 + (v488 >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + (v488 >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + (v488 >> 3))) >> (v488 & 7)) & 0x1FFFF;
              unint64_t v489 = *a3 + 45;
              unint64_t v490 = v489 & 7;
              unint64_t v491 = v489 >> 3;
              if (v490 > 4)
              {
                int v493 = (*(unsigned __int8 *)(v491 + a2 + 3) << 24) | (*(unsigned __int8 *)(v491 + a2 + 2) << 16);
                int v492 = *(unsigned __int8 *)(v491 + a2 + 1) << 8;
              }
              else
              {
                int v492 = *(unsigned __int8 *)(v491 + a2 + 2) << 16;
                int v493 = *(unsigned __int8 *)(v491 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v493 | v492 | *(unsigned __int8 *)(a2 + v491)) >> v490) & 0xFFFFF;
              unint64_t v547 = *a3 + 65;
              unint64_t v548 = v547 & 7;
              unint64_t v549 = v547 >> 3;
              if (v548 > 4)
              {
                int v551 = (*(unsigned __int8 *)(v549 + a2 + 3) << 24) | (*(unsigned __int8 *)(v549 + a2 + 2) << 16);
                int v550 = *(unsigned __int8 *)(v549 + a2 + 1) << 8;
              }
              else
              {
                int v550 = *(unsigned __int8 *)(v549 + a2 + 2) << 16;
                int v551 = *(unsigned __int8 *)(v549 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v551 | v550 | *(unsigned __int8 *)(a2 + v549)) >> v548) & 0xFFFFF;
              uint64_t v21 = 85;
              break;
            case 6:
              *(_DWORD *)(result + 8) = 6;
              int v309 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 16);
              *(_DWORD *)(result + 16) = v309;
              unint64_t v310 = *a3 + 9;
              unint64_t v311 = v310 & 7;
              unint64_t v312 = v310 >> 3;
              if (v311 > 5)
              {
                int v314 = (*(unsigned __int8 *)(v312 + a2 + 3) << 24) | (*(unsigned __int8 *)(v312 + a2 + 2) << 16);
                int v313 = *(unsigned __int8 *)(v312 + a2 + 1) << 8;
              }
              else
              {
                int v313 = *(unsigned __int8 *)(v312 + a2 + 2) << 16;
                int v314 = *(unsigned __int8 *)(v312 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 16) = (2
                                        * (((v314 | v313 | *(unsigned __int8 *)(a2 + v312)) >> v311) & 0x7FFFF)) | v309;
              unint64_t v494 = *a3 + 28;
              unint64_t v495 = v494 & 7;
              unint64_t v496 = v494 >> 3;
              if (v495 > 5)
              {
                int v498 = (*(unsigned __int8 *)(v496 + a2 + 3) << 24) | (*(unsigned __int8 *)(v496 + a2 + 2) << 16);
                int v497 = *(unsigned __int8 *)(v496 + a2 + 1) << 8;
              }
              else
              {
                int v497 = *(unsigned __int8 *)(v496 + a2 + 2) << 16;
                int v498 = *(unsigned __int8 *)(v496 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) |= ((v498 | v497 | *(unsigned __int8 *)(a2 + v496)) >> v495) & 0x7FFFF;
              unint64_t v552 = *a3 + 47;
              unint64_t v553 = v552 & 7;
              unint64_t v554 = v552 >> 3;
              if (v553 > 5)
              {
                int v556 = (*(unsigned __int8 *)(v554 + a2 + 3) << 24) | (*(unsigned __int8 *)(v554 + a2 + 2) << 16);
                int v555 = *(unsigned __int8 *)(v554 + a2 + 1) << 8;
              }
              else
              {
                int v555 = *(unsigned __int8 *)(v554 + a2 + 2) << 16;
                int v556 = *(unsigned __int8 *)(v554 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v556 | v555 | *(unsigned __int8 *)(a2 + v554)) >> v553) & 0x7FFFF;
              unint64_t v599 = *a3 + 66;
              unint64_t v600 = v599 & 7;
              unint64_t v601 = v599 >> 3;
              if (v600 > 5)
              {
                int v603 = (*(unsigned __int8 *)(v601 + a2 + 3) << 24) | (*(unsigned __int8 *)(v601 + a2 + 2) << 16);
                int v602 = *(unsigned __int8 *)(v601 + a2 + 1) << 8;
              }
              else
              {
                int v602 = *(unsigned __int8 *)(v601 + a2 + 2) << 16;
                int v603 = *(unsigned __int8 *)(v601 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v603 | v602 | *(unsigned __int8 *)(a2 + v601)) >> v600) & 0x7FFFF;
              unint64_t v641 = *a3 + 85;
              unint64_t v642 = v641 & 7;
              unint64_t v643 = v641 >> 3;
              if (v642 > 5)
              {
                int v645 = (*(unsigned __int8 *)(v643 + a2 + 3) << 24) | (*(unsigned __int8 *)(v643 + a2 + 2) << 16);
                int v644 = *(unsigned __int8 *)(v643 + a2 + 1) << 8;
              }
              else
              {
                int v644 = *(unsigned __int8 *)(v643 + a2 + 2) << 16;
                int v645 = *(unsigned __int8 *)(v643 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v645 | v644 | *(unsigned __int8 *)(a2 + v643)) >> v642) & 0x7FFFF;
              unint64_t v682 = *a3 & 7;
              unint64_t v683 = (unint64_t)(*a3 + 104) >> 3;
              if (v682 > 5)
              {
                int v685 = (*(unsigned __int8 *)(v683 + a2 + 3) << 24) | (*(unsigned __int8 *)(v683 + a2 + 2) << 16);
                int v684 = *(unsigned __int8 *)(v683 + a2 + 1) << 8;
              }
              else
              {
                int v684 = *(unsigned __int8 *)(v683 + a2 + 2) << 16;
                int v685 = *(unsigned __int8 *)(v683 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v685 | v684 | *(unsigned __int8 *)(a2 + v683)) >> v682) & 0x7FFFF;
              unint64_t v719 = *a3 + 123;
              unint64_t v720 = v719 & 7;
              unint64_t v721 = v719 >> 3;
              if (v720 > 5)
              {
                int v723 = (*(unsigned __int8 *)(v721 + a2 + 3) << 24) | (*(unsigned __int8 *)(v721 + a2 + 2) << 16);
                int v722 = *(unsigned __int8 *)(v721 + a2 + 1) << 8;
              }
              else
              {
                int v722 = *(unsigned __int8 *)(v721 + a2 + 2) << 16;
                int v723 = *(unsigned __int8 *)(v721 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v723 | v722 | *(unsigned __int8 *)(a2 + v721)) >> v720) & 0x7FFFF;
              unint64_t v756 = (*(unsigned char *)a3 - 114) & 7;
              unint64_t v757 = (unint64_t)(*a3 + 142) >> 3;
              if (v756 > 5)
              {
                int v759 = (*(unsigned __int8 *)(v757 + a2 + 3) << 24) | (*(unsigned __int8 *)(v757 + a2 + 2) << 16);
                int v758 = *(unsigned __int8 *)(v757 + a2 + 1) << 8;
              }
              else
              {
                int v758 = *(unsigned __int8 *)(v757 + a2 + 2) << 16;
                int v759 = *(unsigned __int8 *)(v757 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v759 | v758 | *(unsigned __int8 *)(a2 + v757)) >> v756) & 0x7FFFF;
              unint64_t v791 = (*(unsigned char *)a3 - 95) & 7;
              unint64_t v792 = (unint64_t)(*a3 + 161) >> 3;
              if (v791 > 5)
              {
                int v794 = (*(unsigned __int8 *)(v792 + a2 + 3) << 24) | (*(unsigned __int8 *)(v792 + a2 + 2) << 16);
                int v793 = *(unsigned __int8 *)(v792 + a2 + 1) << 8;
              }
              else
              {
                int v793 = *(unsigned __int8 *)(v792 + a2 + 2) << 16;
                int v794 = *(unsigned __int8 *)(v792 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v794 | v793 | *(unsigned __int8 *)(a2 + v792)) >> v791) & 0x7FFFF;
              unint64_t v814 = (*(unsigned char *)a3 - 76) & 7;
              unint64_t v815 = (unint64_t)(*a3 + 180) >> 3;
              if (v814 > 5)
              {
                int v817 = (*(unsigned __int8 *)(v815 + a2 + 3) << 24) | (*(unsigned __int8 *)(v815 + a2 + 2) << 16);
                int v816 = *(unsigned __int8 *)(v815 + a2 + 1) << 8;
              }
              else
              {
                int v816 = *(unsigned __int8 *)(v815 + a2 + 2) << 16;
                int v817 = *(unsigned __int8 *)(v815 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v817 | v816 | *(unsigned __int8 *)(a2 + v815)) >> v814) & 0x7FFFF;
              unint64_t v835 = (*(unsigned char *)a3 - 57) & 7;
              unint64_t v836 = (unint64_t)(*a3 + 199) >> 3;
              if (v835 > 5)
              {
                int v838 = (*(unsigned __int8 *)(v836 + a2 + 3) << 24) | (*(unsigned __int8 *)(v836 + a2 + 2) << 16);
                int v837 = *(unsigned __int8 *)(v836 + a2 + 1) << 8;
              }
              else
              {
                int v837 = *(unsigned __int8 *)(v836 + a2 + 2) << 16;
                int v838 = *(unsigned __int8 *)(v836 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v838 | v837 | *(unsigned __int8 *)(a2 + v836)) >> v835) & 0x7FFFF;
              unint64_t v852 = (*(unsigned char *)a3 - 38) & 7;
              unint64_t v853 = (unint64_t)(*a3 + 218) >> 3;
              if (v852 > 5)
              {
                int v855 = (*(unsigned __int8 *)(v853 + a2 + 3) << 24) | (*(unsigned __int8 *)(v853 + a2 + 2) << 16);
                int v854 = *(unsigned __int8 *)(v853 + a2 + 1) << 8;
              }
              else
              {
                int v854 = *(unsigned __int8 *)(v853 + a2 + 2) << 16;
                int v855 = *(unsigned __int8 *)(v853 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v855 | v854 | *(unsigned __int8 *)(a2 + v853)) >> v852) & 0x7FFFF;
              unint64_t v869 = (*(unsigned char *)a3 - 19) & 7;
              unint64_t v870 = (unint64_t)(*a3 + 237) >> 3;
              if (v869 > 5)
              {
                int v872 = (*(unsigned __int8 *)(v870 + a2 + 3) << 24) | (*(unsigned __int8 *)(v870 + a2 + 2) << 16);
                int v871 = *(unsigned __int8 *)(v870 + a2 + 1) << 8;
              }
              else
              {
                int v871 = *(unsigned __int8 *)(v870 + a2 + 2) << 16;
                int v872 = *(unsigned __int8 *)(v870 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v872 | v871 | *(unsigned __int8 *)(a2 + v870)) >> v869) & 0x7FFFF;
              unint64_t v886 = *a3 & 7;
              unint64_t v887 = (unint64_t)(*a3 + 256) >> 3;
              if (v886 > 5)
              {
                int v889 = (*(unsigned __int8 *)(v887 + a2 + 3) << 24) | (*(unsigned __int8 *)(v887 + a2 + 2) << 16);
                int v888 = *(unsigned __int8 *)(v887 + a2 + 1) << 8;
              }
              else
              {
                int v888 = *(unsigned __int8 *)(v887 + a2 + 2) << 16;
                int v889 = *(unsigned __int8 *)(v887 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v889 | v888 | *(unsigned __int8 *)(a2 + v887)) >> v886) & 0x7FFFF;
              unint64_t v903 = *a3 + 275;
              unint64_t v904 = v903 & 7;
              unint64_t v905 = v903 >> 3;
              if (v904 > 5)
              {
                int v907 = (*(unsigned __int8 *)(v905 + a2 + 3) << 24) | (*(unsigned __int8 *)(v905 + a2 + 2) << 16);
                int v906 = *(unsigned __int8 *)(v905 + a2 + 1) << 8;
              }
              else
              {
                int v906 = *(unsigned __int8 *)(v905 + a2 + 2) << 16;
                int v907 = *(unsigned __int8 *)(v905 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v907 | v906 | *(unsigned __int8 *)(a2 + v905)) >> v904) & 0x7FFFF;
              unint64_t v921 = *a3 + 294;
              unint64_t v922 = v921 & 7;
              unint64_t v923 = v921 >> 3;
              if (v922 > 5)
              {
                int v925 = (*(unsigned __int8 *)(v923 + a2 + 3) << 24) | (*(unsigned __int8 *)(v923 + a2 + 2) << 16);
                int v924 = *(unsigned __int8 *)(v923 + a2 + 1) << 8;
              }
              else
              {
                int v924 = *(unsigned __int8 *)(v923 + a2 + 2) << 16;
                int v925 = *(unsigned __int8 *)(v923 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v925 | v924 | *(unsigned __int8 *)(a2 + v923)) >> v922) & 0x7FFFF;
              unint64_t v937 = *a3 + 313;
              unint64_t v938 = v937 & 7;
              unint64_t v939 = v937 >> 3;
              if (v938 > 5)
              {
                int v941 = (*(unsigned __int8 *)(v939 + a2 + 3) << 24) | (*(unsigned __int8 *)(v939 + a2 + 2) << 16);
                int v940 = *(unsigned __int8 *)(v939 + a2 + 1) << 8;
              }
              else
              {
                int v940 = *(unsigned __int8 *)(v939 + a2 + 2) << 16;
                int v941 = *(unsigned __int8 *)(v939 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 80) |= ((v941 | v940 | *(unsigned __int8 *)(a2 + v939)) >> v938) & 0x7FFFF;
              unint64_t v953 = *a3 + 332;
              unint64_t v954 = v953 & 7;
              unint64_t v955 = v953 >> 3;
              if (v954 > 5)
              {
                int v957 = (*(unsigned __int8 *)(v955 + a2 + 3) << 24) | (*(unsigned __int8 *)(v955 + a2 + 2) << 16);
                int v956 = *(unsigned __int8 *)(v955 + a2 + 1) << 8;
              }
              else
              {
                int v956 = *(unsigned __int8 *)(v955 + a2 + 2) << 16;
                int v957 = *(unsigned __int8 *)(v955 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 84) |= ((v957 | v956 | *(unsigned __int8 *)(a2 + v955)) >> v954) & 0x7FFFF;
              uint64_t v21 = 351;
              break;
            case 7:
              *(_DWORD *)(result + 8) = 7;
              int v315 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 16);
              *(_DWORD *)(result + 16) = v315;
              unint64_t v316 = *a3 + 9;
              unint64_t v317 = v316 & 7;
              unint64_t v318 = v316 >> 3;
              if (v317 > 1) {
                unsigned int v319 = (*(unsigned __int8 *)(a2 + v318 + 2) << 16) | (*(unsigned __int8 *)(a2 + v318 + 1) << 8) | *(unsigned __int8 *)(a2 + v318);
              }
              else {
                unsigned int v319 = *(unsigned __int16 *)(a2 + v318);
              }
              int v499 = (2 * ((v319 >> v317) & 0x7FFF)) | v315;
              *(_DWORD *)(result + 16) = v499;
              unint64_t v500 = *a3 & 7;
              unint64_t v501 = (unint64_t)(*a3 + 24) >> 3;
              if (v500 > 1) {
                unsigned int v502 = (*(unsigned __int8 *)(a2 + v501 + 2) << 16) | (*(unsigned __int8 *)(a2 + v501 + 1) << 8) | *(unsigned __int8 *)(a2 + v501);
              }
              else {
                unsigned int v502 = *(unsigned __int16 *)(a2 + v501);
              }
              *(_DWORD *)(result + 16) = (((v502 >> v500) & 0x7FFF) << 16) | v499;
              unint64_t v557 = *a3 + 39;
              unint64_t v558 = v557 & 7;
              unint64_t v559 = v557 >> 3;
              if (v558 > 1) {
                unsigned int v560 = (*(unsigned __int8 *)(a2 + v559 + 2) << 16) | (*(unsigned __int8 *)(a2 + v559 + 1) << 8) | *(unsigned __int8 *)(a2 + v559);
              }
              else {
                unsigned int v560 = *(unsigned __int16 *)(a2 + v559);
              }
              *(_WORD *)(result + 20) |= (v560 >> v558) & 0x7FFF;
              unint64_t v604 = *a3 + 54;
              unint64_t v605 = v604 & 7;
              unint64_t v606 = v604 >> 3;
              if (v605 > 1) {
                unsigned int v607 = (*(unsigned __int8 *)(a2 + v606 + 2) << 16) | (*(unsigned __int8 *)(a2 + v606 + 1) << 8) | *(unsigned __int8 *)(a2 + v606);
              }
              else {
                unsigned int v607 = *(unsigned __int16 *)(a2 + v606);
              }
              *(_WORD *)(result + 22) |= (v607 >> v605) & 0x7FFF;
              unint64_t v646 = *a3 + 69;
              unint64_t v647 = v646 & 7;
              unint64_t v648 = v646 >> 3;
              if (v647 > 1) {
                unsigned int v649 = (*(unsigned __int8 *)(a2 + v648 + 2) << 16) | (*(unsigned __int8 *)(a2 + v648 + 1) << 8) | *(unsigned __int8 *)(a2 + v648);
              }
              else {
                unsigned int v649 = *(unsigned __int16 *)(a2 + v648);
              }
              *(_WORD *)(result + 24) |= (v649 >> v647) & 0x7FFF;
              unint64_t v686 = *a3 + 84;
              unint64_t v687 = v686 & 7;
              unint64_t v688 = v686 >> 3;
              if (v687 > 1) {
                unsigned int v689 = (*(unsigned __int8 *)(a2 + v688 + 2) << 16) | (*(unsigned __int8 *)(a2 + v688 + 1) << 8) | *(unsigned __int8 *)(a2 + v688);
              }
              else {
                unsigned int v689 = *(unsigned __int16 *)(a2 + v688);
              }
              *(_WORD *)(result + 26) |= (v689 >> v687) & 0x7FFF;
              unint64_t v724 = *a3 + 99;
              unint64_t v725 = v724 & 7;
              unint64_t v726 = v724 >> 3;
              if (v725 > 1) {
                unsigned int v727 = (*(unsigned __int8 *)(a2 + v726 + 2) << 16) | (*(unsigned __int8 *)(a2 + v726 + 1) << 8) | *(unsigned __int8 *)(a2 + v726);
              }
              else {
                unsigned int v727 = *(unsigned __int16 *)(a2 + v726);
              }
              *(_WORD *)(result + 28) |= (v727 >> v725) & 0x7FFF;
              unint64_t v760 = *a3 + 114;
              unint64_t v761 = v760 & 7;
              unint64_t v762 = v760 >> 3;
              if (v761 > 1) {
                unsigned int v763 = (*(unsigned __int8 *)(a2 + v762 + 2) << 16) | (*(unsigned __int8 *)(a2 + v762 + 1) << 8) | *(unsigned __int8 *)(a2 + v762);
              }
              else {
                unsigned int v763 = *(unsigned __int16 *)(a2 + v762);
              }
              *(_WORD *)(result + 30) |= (v763 >> v761) & 0x7FFF;
              unint64_t v795 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v796 = (unint64_t)(*a3 + 129) >> 3;
              if (v795 > 1) {
                unsigned int v797 = (*(unsigned __int8 *)(a2 + v796 + 2) << 16) | (*(unsigned __int8 *)(a2 + v796 + 1) << 8) | *(unsigned __int8 *)(a2 + v796);
              }
              else {
                unsigned int v797 = *(unsigned __int16 *)(a2 + v796);
              }
              *(_WORD *)(result + 32) |= (v797 >> v795) & 0x7FFF;
              unint64_t v818 = *a3 & 7;
              unint64_t v819 = (unint64_t)(*a3 + 144) >> 3;
              if (v818 > 5)
              {
                int v821 = (*(unsigned __int8 *)(v819 + a2 + 3) << 24) | (*(unsigned __int8 *)(v819 + a2 + 2) << 16);
                int v820 = *(unsigned __int8 *)(v819 + a2 + 1) << 8;
              }
              else
              {
                int v820 = *(unsigned __int8 *)(v819 + a2 + 2) << 16;
                int v821 = *(unsigned __int8 *)(v819 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v821 | v820 | *(unsigned __int8 *)(a2 + v819)) >> v818) & 0x7FFFF;
              unint64_t v839 = (*(unsigned char *)a3 - 93) & 7;
              unint64_t v840 = (unint64_t)(*a3 + 163) >> 3;
              if (v839 > 5)
              {
                int v842 = (*(unsigned __int8 *)(v840 + a2 + 3) << 24) | (*(unsigned __int8 *)(v840 + a2 + 2) << 16);
                int v841 = *(unsigned __int8 *)(v840 + a2 + 1) << 8;
              }
              else
              {
                int v841 = *(unsigned __int8 *)(v840 + a2 + 2) << 16;
                int v842 = *(unsigned __int8 *)(v840 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v842 | v841 | *(unsigned __int8 *)(a2 + v840)) >> v839) & 0x7FFFF;
              unint64_t v856 = (*(unsigned char *)a3 - 74) & 7;
              unint64_t v857 = (unint64_t)(*a3 + 182) >> 3;
              if (v856 > 5)
              {
                int v859 = (*(unsigned __int8 *)(v857 + a2 + 3) << 24) | (*(unsigned __int8 *)(v857 + a2 + 2) << 16);
                int v858 = *(unsigned __int8 *)(v857 + a2 + 1) << 8;
              }
              else
              {
                int v858 = *(unsigned __int8 *)(v857 + a2 + 2) << 16;
                int v859 = *(unsigned __int8 *)(v857 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v859 | v858 | *(unsigned __int8 *)(a2 + v857)) >> v856) & 0x7FFFF;
              unint64_t v873 = (*(unsigned char *)a3 - 55) & 7;
              unint64_t v874 = (unint64_t)(*a3 + 201) >> 3;
              if (v873 > 5)
              {
                int v876 = (*(unsigned __int8 *)(v874 + a2 + 3) << 24) | (*(unsigned __int8 *)(v874 + a2 + 2) << 16);
                int v875 = *(unsigned __int8 *)(v874 + a2 + 1) << 8;
              }
              else
              {
                int v875 = *(unsigned __int8 *)(v874 + a2 + 2) << 16;
                int v876 = *(unsigned __int8 *)(v874 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v876 | v875 | *(unsigned __int8 *)(a2 + v874)) >> v873) & 0x7FFFF;
              unint64_t v890 = (*(unsigned char *)a3 - 36) & 7;
              unint64_t v891 = (unint64_t)(*a3 + 220) >> 3;
              if (v890 > 5)
              {
                int v893 = (*(unsigned __int8 *)(v891 + a2 + 3) << 24) | (*(unsigned __int8 *)(v891 + a2 + 2) << 16);
                int v892 = *(unsigned __int8 *)(v891 + a2 + 1) << 8;
              }
              else
              {
                int v892 = *(unsigned __int8 *)(v891 + a2 + 2) << 16;
                int v893 = *(unsigned __int8 *)(v891 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v893 | v892 | *(unsigned __int8 *)(a2 + v891)) >> v890) & 0x7FFFF;
              unint64_t v908 = (*(unsigned char *)a3 - 17) & 7;
              unint64_t v909 = (unint64_t)(*a3 + 239) >> 3;
              if (v908 > 5)
              {
                int v911 = (*(unsigned __int8 *)(v909 + a2 + 3) << 24) | (*(unsigned __int8 *)(v909 + a2 + 2) << 16);
                int v910 = *(unsigned __int8 *)(v909 + a2 + 1) << 8;
              }
              else
              {
                int v910 = *(unsigned __int8 *)(v909 + a2 + 2) << 16;
                int v911 = *(unsigned __int8 *)(v909 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v911 | v910 | *(unsigned __int8 *)(a2 + v909)) >> v908) & 0x7FFFF;
              unint64_t v926 = *a3 + 258;
              unint64_t v927 = v926 & 7;
              unint64_t v928 = v926 >> 3;
              if (v927 > 5)
              {
                int v930 = (*(unsigned __int8 *)(v928 + a2 + 3) << 24) | (*(unsigned __int8 *)(v928 + a2 + 2) << 16);
                int v929 = *(unsigned __int8 *)(v928 + a2 + 1) << 8;
              }
              else
              {
                int v929 = *(unsigned __int8 *)(v928 + a2 + 2) << 16;
                int v930 = *(unsigned __int8 *)(v928 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v930 | v929 | *(unsigned __int8 *)(a2 + v928)) >> v927) & 0x7FFFF;
              unint64_t v942 = *a3 + 277;
              unint64_t v943 = v942 & 7;
              unint64_t v944 = v942 >> 3;
              if (v943 > 5)
              {
                int v946 = (*(unsigned __int8 *)(v944 + a2 + 3) << 24) | (*(unsigned __int8 *)(v944 + a2 + 2) << 16);
                int v945 = *(unsigned __int8 *)(v944 + a2 + 1) << 8;
              }
              else
              {
                int v945 = *(unsigned __int8 *)(v944 + a2 + 2) << 16;
                int v946 = *(unsigned __int8 *)(v944 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v946 | v945 | *(unsigned __int8 *)(a2 + v944)) >> v943) & 0x7FFFF;
              uint64_t v21 = 296;
              break;
            case 8:
              *(_DWORD *)(result + 8) = 8;
              unint64_t v320 = (unint64_t)(*a3 + 8) >> 3;
              uint64_t v321 = *a3 & 7;
              if (v321) {
                unsigned int v322 = ((*(unsigned __int8 *)(a2 + v320 + 2) << 16) | (*(unsigned __int8 *)(a2 + v320 + 1) << 8) | *(unsigned __int8 *)(a2 + v320)) >> v321;
              }
              else {
                LOWORD(v322) = *(_WORD *)(a2 + v320);
              }
              uint64_t v1071 = *(void *)(result + 16) | (unsigned __int16)v322;
              *(void *)(result + 16) = v1071;
              unint64_t v1072 = (unint64_t)(*a3 + 24) >> 3;
              uint64_t v1073 = *a3 & 7;
              if (v1073) {
                unsigned int v1074 = ((*(unsigned __int8 *)(a2 + v1072 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1072 + 1) << 8) | *(unsigned __int8 *)(a2 + v1072)) >> v1073;
              }
              else {
                unsigned int v1074 = *(unsigned __int16 *)(a2 + v1072);
              }
              uint64_t v1123 = v1071 | (v1074 << 16);
              *(void *)(result + 16) = v1123;
              *(void *)(result + 16) = v1123 | ((unint64_t)((((*(unsigned __int8 *)(a2
                                                                                           + ((unint64_t)(*a3 + 40) >> 3)
                                                                                           + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3))) >> (*a3 & 7)) & 0x1FFFF) << 32);
              unsigned int v1124 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3))) >> ((*(unsigned char *)a3 + 57) & 7)) & 0x1FFFF | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v1124;
              unint64_t v1125 = *a3 + 74;
              unint64_t v1126 = v1125 & 7;
              unint64_t v1127 = v1125 >> 3;
              if (v1126 > 1) {
                unsigned int v1128 = (*(unsigned __int8 *)(a2 + v1127 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1127 + 1) << 8) | *(unsigned __int8 *)(a2 + v1127);
              }
              else {
                unsigned int v1128 = *(unsigned __int16 *)(a2 + v1127);
              }
              *(_DWORD *)(result + 24) = v1124 | (v1128 >> v1126 << 17);
              uint64_t v21 = 89;
              break;
            case 9:
              *(_DWORD *)(result + 8) = 9;
              int v323 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(unsigned __int16 *)(result + 16);
              *(_WORD *)(result + 16) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1;
              unint64_t v324 = *a3 + 9;
              unint64_t v325 = v324 & 7;
              unint64_t v326 = v324 >> 3;
              if (v325 > 3) {
                unsigned int v327 = (*(unsigned __int8 *)(a2 + v326 + 2) << 16) | (*(unsigned __int8 *)(a2 + v326 + 1) << 8) | *(unsigned __int8 *)(a2 + v326);
              }
              else {
                unsigned int v327 = *(unsigned __int16 *)(a2 + v326);
              }
              *(_WORD *)(result + 16) = (2 * ((v327 >> v325) & 0x1FFF)) | v323;
              unint64_t v503 = *a3 + 22;
              unint64_t v504 = v503 & 7;
              unint64_t v505 = v503 >> 3;
              if (v504 > 3) {
                unsigned int v506 = (*(unsigned __int8 *)(a2 + v505 + 2) << 16) | (*(unsigned __int8 *)(a2 + v505 + 1) << 8) | *(unsigned __int8 *)(a2 + v505);
              }
              else {
                unsigned int v506 = *(unsigned __int16 *)(a2 + v505);
              }
              *(_WORD *)(result + 18) |= (v506 >> v504) & 0x1FFF;
              unint64_t v561 = *a3 + 35;
              unint64_t v562 = v561 & 7;
              unint64_t v563 = v561 >> 3;
              if (v562 > 3) {
                unsigned int v564 = (*(unsigned __int8 *)(a2 + v563 + 2) << 16) | (*(unsigned __int8 *)(a2 + v563 + 1) << 8) | *(unsigned __int8 *)(a2 + v563);
              }
              else {
                unsigned int v564 = *(unsigned __int16 *)(a2 + v563);
              }
              *(_WORD *)(result + 20) |= (v564 >> v562) & 0x1FFF;
              unint64_t v608 = *a3 & 7;
              unint64_t v609 = (unint64_t)(*a3 + 48) >> 3;
              if (v608 > 3) {
                unsigned int v610 = (*(unsigned __int8 *)(a2 + v609 + 2) << 16) | (*(unsigned __int8 *)(a2 + v609 + 1) << 8) | *(unsigned __int8 *)(a2 + v609);
              }
              else {
                unsigned int v610 = *(unsigned __int16 *)(a2 + v609);
              }
              *(_WORD *)(result + 22) |= (v610 >> v608) & 0x1FFF;
              unint64_t v650 = *a3 + 61;
              unint64_t v651 = v650 & 7;
              unint64_t v652 = v650 >> 3;
              if (v651 > 3) {
                unsigned int v653 = (*(unsigned __int8 *)(a2 + v652 + 2) << 16) | (*(unsigned __int8 *)(a2 + v652 + 1) << 8) | *(unsigned __int8 *)(a2 + v652);
              }
              else {
                unsigned int v653 = *(unsigned __int16 *)(a2 + v652);
              }
              *(_WORD *)(result + 24) |= (v653 >> v651) & 0x1FFF;
              unint64_t v690 = *a3 + 74;
              unint64_t v691 = v690 & 7;
              unint64_t v692 = v690 >> 3;
              if (v691 > 3) {
                unsigned int v693 = (*(unsigned __int8 *)(a2 + v692 + 2) << 16) | (*(unsigned __int8 *)(a2 + v692 + 1) << 8) | *(unsigned __int8 *)(a2 + v692);
              }
              else {
                unsigned int v693 = *(unsigned __int16 *)(a2 + v692);
              }
              *(_WORD *)(result + 26) |= (v693 >> v691) & 0x1FFF;
              unint64_t v728 = *a3 + 87;
              unint64_t v729 = v728 & 7;
              unint64_t v730 = v728 >> 3;
              if (v729 > 3) {
                unsigned int v731 = (*(unsigned __int8 *)(a2 + v730 + 2) << 16) | (*(unsigned __int8 *)(a2 + v730 + 1) << 8) | *(unsigned __int8 *)(a2 + v730);
              }
              else {
                unsigned int v731 = *(unsigned __int16 *)(a2 + v730);
              }
              *(_WORD *)(result + 28) |= (v731 >> v729) & 0x1FFF;
              unint64_t v764 = *a3 + 100;
              unint64_t v765 = v764 & 7;
              unint64_t v766 = v764 >> 3;
              if (v765 > 3) {
                unsigned int v767 = (*(unsigned __int8 *)(a2 + v766 + 2) << 16) | (*(unsigned __int8 *)(a2 + v766 + 1) << 8) | *(unsigned __int8 *)(a2 + v766);
              }
              else {
                unsigned int v767 = *(unsigned __int16 *)(a2 + v766);
              }
              *(_WORD *)(result + 30) |= (v767 >> v765) & 0x1FFF;
              unint64_t v798 = *a3 + 113;
              unint64_t v799 = v798 & 7;
              unint64_t v800 = v798 >> 3;
              if (v799 > 3) {
                unsigned int v801 = (*(unsigned __int8 *)(a2 + v800 + 2) << 16) | (*(unsigned __int8 *)(a2 + v800 + 1) << 8) | *(unsigned __int8 *)(a2 + v800);
              }
              else {
                unsigned int v801 = *(unsigned __int16 *)(a2 + v800);
              }
              *(_WORD *)(result + 32) |= (v801 >> v799) & 0x1FFF;
              unint64_t v822 = *a3 + 126;
              unint64_t v823 = v822 & 7;
              unint64_t v824 = v822 >> 3;
              if (v823 > 3) {
                unsigned int v825 = (*(unsigned __int8 *)(a2 + v824 + 2) << 16) | (*(unsigned __int8 *)(a2 + v824 + 1) << 8) | *(unsigned __int8 *)(a2 + v824);
              }
              else {
                unsigned int v825 = *(unsigned __int16 *)(a2 + v824);
              }
              *(_WORD *)(result + 34) |= (v825 >> v823) & 0x1FFF;
              unint64_t v843 = (*(unsigned char *)a3 - 117) & 7;
              unint64_t v844 = (unint64_t)(*a3 + 139) >> 3;
              if (v843 > 3) {
                unsigned int v845 = (*(unsigned __int8 *)(a2 + v844 + 2) << 16) | (*(unsigned __int8 *)(a2 + v844 + 1) << 8) | *(unsigned __int8 *)(a2 + v844);
              }
              else {
                unsigned int v845 = *(unsigned __int16 *)(a2 + v844);
              }
              *(_WORD *)(result + 36) |= (v845 >> v843) & 0x1FFF;
              unint64_t v860 = *a3 & 7;
              unint64_t v861 = (unint64_t)(*a3 + 152) >> 3;
              if (v860 > 3) {
                unsigned int v862 = (*(unsigned __int8 *)(a2 + v861 + 2) << 16) | (*(unsigned __int8 *)(a2 + v861 + 1) << 8) | *(unsigned __int8 *)(a2 + v861);
              }
              else {
                unsigned int v862 = *(unsigned __int16 *)(a2 + v861);
              }
              *(_WORD *)(result + 38) |= (v862 >> v860) & 0x1FFF;
              unint64_t v877 = (*(unsigned char *)a3 - 91) & 7;
              unint64_t v878 = (unint64_t)(*a3 + 165) >> 3;
              if (v877 > 3) {
                unsigned int v879 = (*(unsigned __int8 *)(a2 + v878 + 2) << 16) | (*(unsigned __int8 *)(a2 + v878 + 1) << 8) | *(unsigned __int8 *)(a2 + v878);
              }
              else {
                unsigned int v879 = *(unsigned __int16 *)(a2 + v878);
              }
              *(_WORD *)(result + 40) |= (v879 >> v877) & 0x1FFF;
              unint64_t v894 = (*(unsigned char *)a3 - 78) & 7;
              unint64_t v895 = (unint64_t)(*a3 + 178) >> 3;
              if (v894 > 3) {
                unsigned int v896 = (*(unsigned __int8 *)(a2 + v895 + 2) << 16) | (*(unsigned __int8 *)(a2 + v895 + 1) << 8) | *(unsigned __int8 *)(a2 + v895);
              }
              else {
                unsigned int v896 = *(unsigned __int16 *)(a2 + v895);
              }
              *(_WORD *)(result + 42) |= (v896 >> v894) & 0x1FFF;
              unint64_t v912 = (*(unsigned char *)a3 - 65) & 7;
              unint64_t v913 = (unint64_t)(*a3 + 191) >> 3;
              if (v912 > 3) {
                unsigned int v914 = (*(unsigned __int8 *)(a2 + v913 + 2) << 16) | (*(unsigned __int8 *)(a2 + v913 + 1) << 8) | *(unsigned __int8 *)(a2 + v913);
              }
              else {
                unsigned int v914 = *(unsigned __int16 *)(a2 + v913);
              }
              *(_WORD *)(result + 44) |= (v914 >> v912) & 0x1FFF;
              unint64_t v931 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v932 = (unint64_t)(*a3 + 204) >> 3;
              if (v931 > 3) {
                unsigned int v933 = (*(unsigned __int8 *)(a2 + v932 + 2) << 16) | (*(unsigned __int8 *)(a2 + v932 + 1) << 8) | *(unsigned __int8 *)(a2 + v932);
              }
              else {
                unsigned int v933 = *(unsigned __int16 *)(a2 + v932);
              }
              *(_WORD *)(result + 46) |= (v933 >> v931) & 0x1FFF;
              unint64_t v947 = (*(unsigned char *)a3 - 39) & 7;
              unint64_t v948 = (unint64_t)(*a3 + 217) >> 3;
              if (v947 > 3) {
                unsigned int v949 = (*(unsigned __int8 *)(a2 + v948 + 2) << 16) | (*(unsigned __int8 *)(a2 + v948 + 1) << 8) | *(unsigned __int8 *)(a2 + v948);
              }
              else {
                unsigned int v949 = *(unsigned __int16 *)(a2 + v948);
              }
              *(_WORD *)(result + 48) |= (v949 >> v947) & 0x1FFF;
              unint64_t v958 = (*(unsigned char *)a3 - 26) & 7;
              unint64_t v959 = (unint64_t)(*a3 + 230) >> 3;
              if (v958 > 3) {
                unsigned int v960 = (*(unsigned __int8 *)(a2 + v959 + 2) << 16) | (*(unsigned __int8 *)(a2 + v959 + 1) << 8) | *(unsigned __int8 *)(a2 + v959);
              }
              else {
                unsigned int v960 = *(unsigned __int16 *)(a2 + v959);
              }
              *(_WORD *)(result + 50) |= (v960 >> v958) & 0x1FFF;
              unint64_t v965 = (*(unsigned char *)a3 - 13) & 7;
              unint64_t v966 = (unint64_t)(*a3 + 243) >> 3;
              if (v965 > 3) {
                unsigned int v967 = (*(unsigned __int8 *)(a2 + v966 + 2) << 16) | (*(unsigned __int8 *)(a2 + v966 + 1) << 8) | *(unsigned __int8 *)(a2 + v966);
              }
              else {
                unsigned int v967 = *(unsigned __int16 *)(a2 + v966);
              }
              *(_WORD *)(result + 52) |= (v967 >> v965) & 0x1FFF;
              unint64_t v971 = *a3 & 7;
              unint64_t v972 = (unint64_t)(*a3 + 256) >> 3;
              if (v971 > 3) {
                unsigned int v973 = (*(unsigned __int8 *)(a2 + v972 + 2) << 16) | (*(unsigned __int8 *)(a2 + v972 + 1) << 8) | *(unsigned __int8 *)(a2 + v972);
              }
              else {
                unsigned int v973 = *(unsigned __int16 *)(a2 + v972);
              }
              *(_WORD *)(result + 54) |= (v973 >> v971) & 0x1FFF;
              unint64_t v978 = *a3 + 269;
              unint64_t v979 = v978 & 7;
              unint64_t v980 = v978 >> 3;
              if (v979 > 3) {
                unsigned int v981 = (*(unsigned __int8 *)(a2 + v980 + 2) << 16) | (*(unsigned __int8 *)(a2 + v980 + 1) << 8) | *(unsigned __int8 *)(a2 + v980);
              }
              else {
                unsigned int v981 = *(unsigned __int16 *)(a2 + v980);
              }
              *(_WORD *)(result + 56) |= (v981 >> v979) & 0x1FFF;
              unint64_t v986 = *a3 + 282;
              unint64_t v987 = v986 & 7;
              unint64_t v988 = v986 >> 3;
              if (v987 > 3) {
                unsigned int v989 = (*(unsigned __int8 *)(a2 + v988 + 2) << 16) | (*(unsigned __int8 *)(a2 + v988 + 1) << 8) | *(unsigned __int8 *)(a2 + v988);
              }
              else {
                unsigned int v989 = *(unsigned __int16 *)(a2 + v988);
              }
              *(_WORD *)(result + 58) |= (v989 >> v987) & 0x1FFF;
              unint64_t v994 = *a3 + 295;
              unint64_t v995 = v994 & 7;
              unint64_t v996 = v994 >> 3;
              if (v995 > 3) {
                unsigned int v997 = (*(unsigned __int8 *)(a2 + v996 + 2) << 16) | (*(unsigned __int8 *)(a2 + v996 + 1) << 8) | *(unsigned __int8 *)(a2 + v996);
              }
              else {
                unsigned int v997 = *(unsigned __int16 *)(a2 + v996);
              }
              *(_WORD *)(result + 60) |= (v997 >> v995) & 0x1FFF;
              unint64_t v1002 = *a3 + 308;
              unint64_t v1003 = v1002 & 7;
              unint64_t v1004 = v1002 >> 3;
              if (v1003 > 3) {
                unsigned int v1005 = (*(unsigned __int8 *)(a2 + v1004 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1004 + 1) << 8) | *(unsigned __int8 *)(a2 + v1004);
              }
              else {
                unsigned int v1005 = *(unsigned __int16 *)(a2 + v1004);
              }
              *(_WORD *)(result + 62) |= (v1005 >> v1003) & 0x1FFF;
              unint64_t v1010 = *a3 + 321;
              unint64_t v1011 = v1010 & 7;
              unint64_t v1012 = v1010 >> 3;
              if (v1011 > 3) {
                unsigned int v1013 = (*(unsigned __int8 *)(a2 + v1012 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1012 + 1) << 8) | *(unsigned __int8 *)(a2 + v1012);
              }
              else {
                unsigned int v1013 = *(unsigned __int16 *)(a2 + v1012);
              }
              *(_WORD *)(result + 64) |= (v1013 >> v1011) & 0x1FFF;
              unint64_t v1018 = *a3 + 334;
              unint64_t v1019 = v1018 & 7;
              unint64_t v1020 = v1018 >> 3;
              if (v1019 > 3) {
                unsigned int v1021 = (*(unsigned __int8 *)(a2 + v1020 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1020 + 1) << 8) | *(unsigned __int8 *)(a2 + v1020);
              }
              else {
                unsigned int v1021 = *(unsigned __int16 *)(a2 + v1020);
              }
              *(_WORD *)(result + 66) |= (v1021 >> v1019) & 0x1FFF;
              unint64_t v1025 = *a3 + 347;
              unint64_t v1026 = v1025 & 7;
              unint64_t v1027 = v1025 >> 3;
              if (v1026 > 3) {
                unsigned int v1028 = (*(unsigned __int8 *)(a2 + v1027 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1027 + 1) << 8) | *(unsigned __int8 *)(a2 + v1027);
              }
              else {
                unsigned int v1028 = *(unsigned __int16 *)(a2 + v1027);
              }
              *(_WORD *)(result + 68) |= (v1028 >> v1026) & 0x1FFF;
              unint64_t v1032 = *a3 & 7;
              unint64_t v1033 = (unint64_t)(*a3 + 360) >> 3;
              if (v1032 > 3) {
                unsigned int v1034 = (*(unsigned __int8 *)(a2 + v1033 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1033 + 1) << 8) | *(unsigned __int8 *)(a2 + v1033);
              }
              else {
                unsigned int v1034 = *(unsigned __int16 *)(a2 + v1033);
              }
              *(_WORD *)(result + 70) |= (v1034 >> v1032) & 0x1FFF;
              unint64_t v1038 = *a3 + 373;
              unint64_t v1039 = v1038 & 7;
              unint64_t v1040 = v1038 >> 3;
              if (v1039 > 3) {
                unsigned int v1041 = (*(unsigned __int8 *)(a2 + v1040 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1040 + 1) << 8) | *(unsigned __int8 *)(a2 + v1040);
              }
              else {
                unsigned int v1041 = *(unsigned __int16 *)(a2 + v1040);
              }
              *(_WORD *)(result + 72) |= (v1041 >> v1039) & 0x1FFF;
              unint64_t v1045 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v1046 = (unint64_t)(*a3 + 386) >> 3;
              if (v1045 > 3) {
                unsigned int v1047 = (*(unsigned __int8 *)(a2 + v1046 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1046 + 1) << 8) | *(unsigned __int8 *)(a2 + v1046);
              }
              else {
                unsigned int v1047 = *(unsigned __int16 *)(a2 + v1046);
              }
              *(_WORD *)(result + 74) |= (v1047 >> v1045) & 0x1FFF;
              unint64_t v1051 = (*(unsigned char *)a3 - 113) & 7;
              unint64_t v1052 = (unint64_t)(*a3 + 399) >> 3;
              if (v1051 > 3) {
                unsigned int v1053 = (*(unsigned __int8 *)(a2 + v1052 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1052 + 1) << 8) | *(unsigned __int8 *)(a2 + v1052);
              }
              else {
                unsigned int v1053 = *(unsigned __int16 *)(a2 + v1052);
              }
              *(_WORD *)(result + 76) |= (v1053 >> v1051) & 0x1FFF;
              unint64_t v1057 = (*(unsigned char *)a3 - 100) & 7;
              unint64_t v1058 = (unint64_t)(*a3 + 412) >> 3;
              if (v1057 > 3) {
                unsigned int v1059 = (*(unsigned __int8 *)(a2 + v1058 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1058 + 1) << 8) | *(unsigned __int8 *)(a2 + v1058);
              }
              else {
                unsigned int v1059 = *(unsigned __int16 *)(a2 + v1058);
              }
              *(_WORD *)(result + 78) |= (v1059 >> v1057) & 0x1FFF;
              uint64_t v21 = 425;
              break;
            case 0xA:
              *(_DWORD *)(result + 8) = 10;
              unint64_t v328 = (unint64_t)(*a3 + 8) >> 3;
              uint64_t v329 = *a3 & 7;
              if (v329)
              {
                uint64_t v330 = (unsigned __int8 *)(a2 + v328);
                unint64_t v331 = (((unint64_t)v330[4] << 32) | ((unint64_t)v330[3] << 24) | ((unint64_t)v330[2] << 16) | ((unint64_t)v330[1] << 8) | *v330) >> v329;
              }
              else
              {
                LODWORD(v331) = *(_DWORD *)(a2 + v328);
              }
              *(_DWORD *)(result + 16) |= v331;
              unint64_t v1075 = (unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3));
              unint64_t v1076 = ((((unint64_t)v1075[4] << 32) | ((unint64_t)v1075[3] << 24) | ((unint64_t)v1075[2] << 16) | ((unint64_t)v1075[1] << 8) | *v1075) >> (*a3 & 7)) & 0x1FFFFFFFFLL | *(void *)(result + 24);
              *(void *)(result + 24) = v1076;
              unint64_t v1077 = *a3 + 73;
              unint64_t v1078 = v1077 & 7;
              unint64_t v1079 = v1077 >> 3;
              if (v1078 > 1) {
                unsigned int v1080 = (*(unsigned __int8 *)(a2 + v1079 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1079 + 1) << 8) | *(unsigned __int8 *)(a2 + v1079);
              }
              else {
                unsigned int v1080 = *(unsigned __int16 *)(a2 + v1079);
              }
              unint64_t v1081 = v1076 | ((unint64_t)((v1080 >> v1078) & 0x7FFF) << 33);
              *(void *)(result + 24) = v1081;
              unint64_t v1082 = *a3 & 7;
              unint64_t v1083 = (unint64_t)(*a3 + 88) >> 3;
              if (v1082 > 1) {
                unsigned int v1084 = (*(unsigned __int8 *)(a2 + v1083 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1083 + 1) << 8) | *(unsigned __int8 *)(a2 + v1083);
              }
              else {
                unsigned int v1084 = *(unsigned __int16 *)(a2 + v1083);
              }
              *(void *)(result + 24) = v1081 | ((unint64_t)((v1084 >> v1082) & 0x7FFF) << 48);
              unint64_t v1085 = *a3 + 103;
              unint64_t v1086 = v1085 & 7;
              unint64_t v1087 = v1085 >> 3;
              if (v1086 > 1) {
                unsigned int v1088 = (*(unsigned __int8 *)(a2 + v1087 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1087 + 1) << 8) | *(unsigned __int8 *)(a2 + v1087);
              }
              else {
                unsigned int v1088 = *(unsigned __int16 *)(a2 + v1087);
              }
              *(_WORD *)(result + 32) |= (v1088 >> v1086) & 0x7FFF;
              unint64_t v1089 = *a3 + 118;
              unint64_t v1090 = v1089 & 7;
              unint64_t v1091 = v1089 >> 3;
              if (v1090 > 1) {
                unsigned int v1092 = (*(unsigned __int8 *)(a2 + v1091 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1091 + 1) << 8) | *(unsigned __int8 *)(a2 + v1091);
              }
              else {
                unsigned int v1092 = *(unsigned __int16 *)(a2 + v1091);
              }
              *(_WORD *)(result + 34) |= (v1092 >> v1090) & 0x7FFF;
              unint64_t v1093 = (*(unsigned char *)a3 - 123) & 7;
              unint64_t v1094 = (unint64_t)(*a3 + 133) >> 3;
              if (v1093 > 1) {
                unsigned int v1095 = (*(unsigned __int8 *)(a2 + v1094 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1094 + 1) << 8) | *(unsigned __int8 *)(a2 + v1094);
              }
              else {
                unsigned int v1095 = *(unsigned __int16 *)(a2 + v1094);
              }
              *(_WORD *)(result + 36) |= (v1095 >> v1093) & 0x7FFF;
              uint64_t v21 = 148;
              break;
            case 0xB:
              *(_DWORD *)(result + 8) = 11;
              unint64_t v332 = *a3 & 7;
              unint64_t v333 = (unint64_t)(*a3 + 8) >> 3;
              if (v332 > 1) {
                unsigned int v334 = (*(unsigned __int8 *)(a2 + v333 + 2) << 16) | (*(unsigned __int8 *)(a2 + v333 + 1) << 8) | *(unsigned __int8 *)(a2 + v333);
              }
              else {
                unsigned int v334 = *(unsigned __int16 *)(a2 + v333);
              }
              *(_WORD *)(result + 16) |= (v334 >> v332) & 0x7FFF;
              unint64_t v507 = *a3 + 23;
              unint64_t v508 = v507 & 7;
              unint64_t v509 = v507 >> 3;
              if (v508 > 1) {
                unsigned int v510 = (*(unsigned __int8 *)(a2 + v509 + 2) << 16) | (*(unsigned __int8 *)(a2 + v509 + 1) << 8) | *(unsigned __int8 *)(a2 + v509);
              }
              else {
                unsigned int v510 = *(unsigned __int16 *)(a2 + v509);
              }
              *(_WORD *)(result + 18) |= (v510 >> v508) & 0x7FFF;
              uint64_t v21 = 38;
              break;
            case 0xC:
              *(_DWORD *)(result + 8) = 12;
              unint64_t v335 = *a3 & 7;
              unint64_t v336 = (unint64_t)(*a3 + 8) >> 3;
              if (v335 > 1) {
                unsigned int v337 = (*(unsigned __int8 *)(a2 + v336 + 2) << 16) | (*(unsigned __int8 *)(a2 + v336 + 1) << 8) | *(unsigned __int8 *)(a2 + v336);
              }
              else {
                unsigned int v337 = *(unsigned __int16 *)(a2 + v336);
              }
              *(_WORD *)(result + 16) |= (v337 >> v335) & 0x7FFF;
              unint64_t v511 = *a3 + 23;
              unint64_t v512 = v511 & 7;
              unint64_t v513 = v511 >> 3;
              if (v512 > 1) {
                unsigned int v514 = (*(unsigned __int8 *)(a2 + v513 + 2) << 16) | (*(unsigned __int8 *)(a2 + v513 + 1) << 8) | *(unsigned __int8 *)(a2 + v513);
              }
              else {
                unsigned int v514 = *(unsigned __int16 *)(a2 + v513);
              }
              *(_WORD *)(result + 18) |= (v514 >> v512) & 0x7FFF;
              unint64_t v565 = *a3 + 38;
              unint64_t v566 = v565 >> 3;
              unint64_t v567 = v565 & 7;
              if (v567) {
                unsigned int v568 = ((*(unsigned __int8 *)(a2 + v566 + 2) << 16) | (*(unsigned __int8 *)(a2 + v566 + 1) << 8) | *(unsigned __int8 *)(a2 + v566)) >> v567;
              }
              else {
                LOWORD(v568) = *(_WORD *)(a2 + v566);
              }
              *(_WORD *)(result + 20) |= v568;
              unint64_t v1096 = *a3 + 54;
              unint64_t v1097 = v1096 & 7;
              unint64_t v1098 = v1096 >> 3;
              if (v1097 == 7) {
                int v1099 = *(_DWORD *)(a2 + v1098) >> 7;
              }
              else {
                int v1099 = ((*(unsigned __int8 *)(a2 + v1098 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1098 + 1) << 8) | *(unsigned __int8 *)(a2 + v1098)) >> v1097;
              }
              *(_DWORD *)(result + 24) |= v1099 & 0x3FFFF;
              uint64_t v1100 = *a3 & 7;
              unint64_t v1101 = (unint64_t)(*a3 + 72) >> 3;
              if (v1100 == 7) {
                int v1102 = *(_DWORD *)(a2 + v1101) >> 7;
              }
              else {
                int v1102 = ((*(unsigned __int8 *)(a2 + v1101 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1101 + 1) << 8) | *(unsigned __int8 *)(a2 + v1101)) >> v1100;
              }
              int v1103 = *(_DWORD *)(result + 32);
              *(_DWORD *)(result + 28) |= v1102 & 0x3FFFF;
              *(_DWORD *)(result + 32) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3))) >> ((*(unsigned char *)a3 + 90) & 7)) & 0x1FFFF | v1103;
              unint64_t v1104 = *a3 + 107;
              unint64_t v1105 = v1104 >> 3;
              unint64_t v1106 = v1104 & 7;
              if (v1106) {
                unsigned int v1107 = ((*(unsigned __int8 *)(a2 + v1105 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1105 + 1) << 8) | *(unsigned __int8 *)(a2 + v1105)) >> v1106;
              }
              else {
                LOWORD(v1107) = *(_WORD *)(a2 + v1105);
              }
              int v1129 = *(_DWORD *)(result + 36) | (unsigned __int16)v1107;
              *(_DWORD *)(result + 36) = v1129;
              unint64_t v1130 = *a3 + 123;
              unint64_t v1131 = v1130 >> 3;
              unint64_t v1132 = v1130 & 7;
              if (v1132) {
                unsigned int v1133 = ((*(unsigned __int8 *)(a2 + v1131 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1131 + 1) << 8) | *(unsigned __int8 *)(a2 + v1131)) >> v1132;
              }
              else {
                unsigned int v1133 = *(unsigned __int16 *)(a2 + v1131);
              }
              *(_DWORD *)(result + 36) = v1129 | (v1133 << 16);
              uint64_t v21 = 139;
              break;
            case 0xD:
              *(_DWORD *)(result + 8) = 13;
              unint64_t v338 = *a3 & 7;
              unint64_t v339 = (unint64_t)(*a3 + 8) >> 3;
              if (v338 > 1) {
                unsigned int v340 = (*(unsigned __int8 *)(a2 + v339 + 2) << 16) | (*(unsigned __int8 *)(a2 + v339 + 1) << 8) | *(unsigned __int8 *)(a2 + v339);
              }
              else {
                unsigned int v340 = *(unsigned __int16 *)(a2 + v339);
              }
              *(_WORD *)(result + 16) |= (v340 >> v338) & 0x7FFF;
              unint64_t v515 = *a3 + 23;
              unint64_t v516 = v515 & 7;
              unint64_t v517 = v515 >> 3;
              if (v516 > 1) {
                unsigned int v518 = (*(unsigned __int8 *)(a2 + v517 + 2) << 16) | (*(unsigned __int8 *)(a2 + v517 + 1) << 8) | *(unsigned __int8 *)(a2 + v517);
              }
              else {
                unsigned int v518 = *(unsigned __int16 *)(a2 + v517);
              }
              *(_WORD *)(result + 18) |= (v518 >> v516) & 0x7FFF;
              unint64_t v569 = *a3 + 38;
              unint64_t v570 = v569 & 7;
              unint64_t v571 = v569 >> 3;
              if (v570 > 1) {
                unsigned int v572 = (*(unsigned __int8 *)(a2 + v571 + 2) << 16) | (*(unsigned __int8 *)(a2 + v571 + 1) << 8) | *(unsigned __int8 *)(a2 + v571);
              }
              else {
                unsigned int v572 = *(unsigned __int16 *)(a2 + v571);
              }
              *(_WORD *)(result + 20) |= (v572 >> v570) & 0x7FFF;
              unint64_t v611 = *a3 + 53;
              unint64_t v612 = v611 & 7;
              unint64_t v613 = v611 >> 3;
              if (v612 > 1) {
                unsigned int v614 = (*(unsigned __int8 *)(a2 + v613 + 2) << 16) | (*(unsigned __int8 *)(a2 + v613 + 1) << 8) | *(unsigned __int8 *)(a2 + v613);
              }
              else {
                unsigned int v614 = *(unsigned __int16 *)(a2 + v613);
              }
              uint64_t v654 = *(unsigned int *)(result + 32);
              *(_WORD *)(result + 22) |= (v614 >> v612) & 0x7FFF;
              int v655 = *(_DWORD *)(result + 28);
              *(_DWORD *)(result + 24) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3))) >> ((*(unsigned char *)a3 + 68) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 28) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3))) >> ((*(unsigned char *)a3 + 85) & 7)) & 0x1FFFF | v655;
              unint64_t v656 = v654 | ((unint64_t)*(unsigned __int16 *)(result + 36) << 32);
              unsigned int v657 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3))) >> ((*(unsigned char *)a3 + 102) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 32) = v654 | v657;
              unint64_t v658 = *a3 + 119;
              unint64_t v659 = v658 & 7;
              unint64_t v660 = v658 >> 3;
              if (v659 > 1) {
                unsigned int v661 = (*(unsigned __int8 *)(a2 + v660 + 2) << 16) | (*(unsigned __int8 *)(a2 + v660 + 1) << 8) | *(unsigned __int8 *)(a2 + v660);
              }
              else {
                unsigned int v661 = *(unsigned __int16 *)(a2 + v660);
              }
              uint64_t v694 = v657 | (v661 >> v659 << 17);
              *(_WORD *)(result + 36) = WORD2(v656);
              *(_DWORD *)(result + 32) = v656 | v694;
              unint64_t v695 = (*(unsigned char *)a3 - 122) & 7;
              unint64_t v696 = (unint64_t)(*a3 + 134) >> 3;
              if (v695 > 2) {
                unsigned int v697 = (*(unsigned __int8 *)(a2 + v696 + 2) << 16) | (*(unsigned __int8 *)(a2 + v696 + 1) << 8) | *(unsigned __int8 *)(a2 + v696);
              }
              else {
                unsigned int v697 = *(unsigned __int16 *)(a2 + v696);
              }
              unint64_t v732 = v694 | ((unint64_t)((v697 >> v695) & 0x3FFF) << 32) | v656;
              *(_DWORD *)(result + 32) = v732;
              *(_WORD *)(result + 36) = WORD2(v732);
              unint64_t v733 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v734 = (unint64_t)(*a3 + 148) >> 3;
              if (v733 > 2) {
                unsigned int v735 = (*(unsigned __int8 *)(a2 + v734 + 2) << 16) | (*(unsigned __int8 *)(a2 + v734 + 1) << 8) | *(unsigned __int8 *)(a2 + v734);
              }
              else {
                unsigned int v735 = *(unsigned __int16 *)(a2 + v734);
              }
              *(_WORD *)(result + 38) |= (v735 >> v733) & 0x3FFF;
              int v768 = *(_DWORD *)(result + 44);
              *(_DWORD *)(result + 40) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3))) >> ((*(unsigned char *)a3 - 94) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 44) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3))) >> ((*(unsigned char *)a3 - 77) & 7)) & 0x1FFFF | v768;
              *(_DWORD *)(result + 48) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3))) >> ((*(unsigned char *)a3 - 60) & 7)) & 0x1FFFF;
              unint64_t v769 = (unint64_t)(*a3 + 213) >> 3;
              if (((*(unsigned char *)a3 - 43) & 7) != 0) {
                unsigned int v770 = ((*(unsigned __int8 *)(a2 + v769 + 2) << 16) | (*(unsigned __int8 *)(a2 + v769 + 1) << 8) | *(unsigned __int8 *)(a2 + v769)) >> ((*(unsigned char *)a3 - 43) & 7);
              }
              else {
                LOWORD(v770) = *(_WORD *)(a2 + v769);
              }
              int v1108 = *(_DWORD *)(result + 52) | (unsigned __int16)v770;
              *(_DWORD *)(result + 52) = v1108;
              unint64_t v1109 = (unint64_t)(*a3 + 229) >> 3;
              if (((*(unsigned char *)a3 - 27) & 7) != 0) {
                unsigned int v1110 = ((*(unsigned __int8 *)(a2 + v1109 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1109 + 1) << 8) | *(unsigned __int8 *)(a2 + v1109)) >> ((*(unsigned char *)a3 - 27) & 7);
              }
              else {
                unsigned int v1110 = *(unsigned __int16 *)(a2 + v1109);
              }
              *(_DWORD *)(result + 52) = v1108 | (v1110 << 16);
              uint64_t v21 = 245;
              break;
            case 0xE:
              *(_DWORD *)(result + 8) = 14;
              unint64_t v341 = *a3 & 7;
              unint64_t v342 = (unint64_t)(*a3 + 8) >> 3;
              if (v341 > 2)
              {
                int v344 = (*(unsigned __int8 *)(v342 + a2 + 3) << 24) | (*(unsigned __int8 *)(v342 + a2 + 2) << 16);
                int v343 = *(unsigned __int8 *)(v342 + a2 + 1) << 8;
              }
              else
              {
                int v343 = *(unsigned __int8 *)(v342 + a2 + 2) << 16;
                int v344 = *(unsigned __int8 *)(v342 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 16) |= ((v344 | v343 | *(unsigned __int8 *)(a2 + v342)) >> v341) & 0x3FFFFF;
              unint64_t v519 = *a3 + 30;
              unint64_t v520 = v519 & 7;
              unint64_t v521 = v519 >> 3;
              if (v520 > 2)
              {
                int v523 = (*(unsigned __int8 *)(v521 + a2 + 3) << 24) | (*(unsigned __int8 *)(v521 + a2 + 2) << 16);
                int v522 = *(unsigned __int8 *)(v521 + a2 + 1) << 8;
              }
              else
              {
                int v522 = *(unsigned __int8 *)(v521 + a2 + 2) << 16;
                int v523 = *(unsigned __int8 *)(v521 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) |= ((v523 | v522 | *(unsigned __int8 *)(a2 + v521)) >> v520) & 0x3FFFFF;
              unint64_t v573 = *a3 + 52;
              unint64_t v574 = v573 & 7;
              unint64_t v575 = v573 >> 3;
              if (v574 > 5)
              {
                int v577 = (*(unsigned __int8 *)(v575 + a2 + 3) << 24) | (*(unsigned __int8 *)(v575 + a2 + 2) << 16);
                int v576 = *(unsigned __int8 *)(v575 + a2 + 1) << 8;
              }
              else
              {
                int v576 = *(unsigned __int8 *)(v575 + a2 + 2) << 16;
                int v577 = *(unsigned __int8 *)(v575 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v577 | v576 | *(unsigned __int8 *)(a2 + v575)) >> v574) & 0x7FFFF;
              unint64_t v615 = *a3 + 71;
              unint64_t v616 = v615 & 7;
              unint64_t v617 = v615 >> 3;
              if (v616 > 2)
              {
                int v619 = (*(unsigned __int8 *)(v617 + a2 + 3) << 24) | (*(unsigned __int8 *)(v617 + a2 + 2) << 16);
                int v618 = *(unsigned __int8 *)(v617 + a2 + 1) << 8;
              }
              else
              {
                int v618 = *(unsigned __int8 *)(v617 + a2 + 2) << 16;
                int v619 = *(unsigned __int8 *)(v617 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v619 | v618 | *(unsigned __int8 *)(a2 + v617)) >> v616) & 0x3FFFFF;
              uint64_t v21 = 93;
              break;
            case 0xF:
              *(_DWORD *)(result + 8) = 15;
              unint64_t v345 = *a3 & 7;
              unint64_t v346 = (unint64_t)(*a3 + 8) >> 3;
              if (v345 > 2) {
                unsigned int v347 = (*(unsigned __int8 *)(a2 + v346 + 2) << 16) | (*(unsigned __int8 *)(a2 + v346 + 1) << 8) | *(unsigned __int8 *)(a2 + v346);
              }
              else {
                unsigned int v347 = *(unsigned __int16 *)(a2 + v346);
              }
              *(_WORD *)(result + 16) |= (v347 >> v345) & 0x3FFF;
              unint64_t v524 = *a3 + 22;
              unint64_t v525 = v524 & 7;
              unint64_t v526 = v524 >> 3;
              if (v525 > 2) {
                unsigned int v527 = (*(unsigned __int8 *)(a2 + v526 + 2) << 16) | (*(unsigned __int8 *)(a2 + v526 + 1) << 8) | *(unsigned __int8 *)(a2 + v526);
              }
              else {
                unsigned int v527 = *(unsigned __int16 *)(a2 + v526);
              }
              *(_WORD *)(result + 18) |= (v527 >> v525) & 0x3FFF;
              unint64_t v578 = *a3 + 36;
              unint64_t v579 = v578 & 7;
              unint64_t v580 = v578 >> 3;
              if (v579 > 2) {
                unsigned int v581 = (*(unsigned __int8 *)(a2 + v580 + 2) << 16) | (*(unsigned __int8 *)(a2 + v580 + 1) << 8) | *(unsigned __int8 *)(a2 + v580);
              }
              else {
                unsigned int v581 = *(unsigned __int16 *)(a2 + v580);
              }
              *(_WORD *)(result + 20) |= (v581 >> v579) & 0x3FFF;
              unint64_t v620 = *a3 + 50;
              unint64_t v621 = v620 & 7;
              unint64_t v622 = v620 >> 3;
              if (v621 > 2) {
                unsigned int v623 = (*(unsigned __int8 *)(a2 + v622 + 2) << 16) | (*(unsigned __int8 *)(a2 + v622 + 1) << 8) | *(unsigned __int8 *)(a2 + v622);
              }
              else {
                unsigned int v623 = *(unsigned __int16 *)(a2 + v622);
              }
              *(_WORD *)(result + 22) |= (v623 >> v621) & 0x3FFF;
              unint64_t v662 = *a3 & 7;
              unint64_t v663 = (unint64_t)(*a3 + 64) >> 3;
              if (v662 > 3) {
                unsigned int v664 = (*(unsigned __int8 *)(a2 + v663 + 2) << 16) | (*(unsigned __int8 *)(a2 + v663 + 1) << 8) | *(unsigned __int8 *)(a2 + v663);
              }
              else {
                unsigned int v664 = *(unsigned __int16 *)(a2 + v663);
              }
              *(_WORD *)(result + 24) |= (v664 >> v662) & 0x1FFF;
              unint64_t v698 = *a3 + 77;
              unint64_t v699 = v698 & 7;
              unint64_t v700 = v698 >> 3;
              if (v699 > 3) {
                unsigned int v701 = (*(unsigned __int8 *)(a2 + v700 + 2) << 16) | (*(unsigned __int8 *)(a2 + v700 + 1) << 8) | *(unsigned __int8 *)(a2 + v700);
              }
              else {
                unsigned int v701 = *(unsigned __int16 *)(a2 + v700);
              }
              *(_WORD *)(result + 26) |= (v701 >> v699) & 0x1FFF;
              unint64_t v736 = *a3 + 90;
              unint64_t v737 = v736 & 7;
              unint64_t v738 = v736 >> 3;
              if (v737 > 3) {
                unsigned int v739 = (*(unsigned __int8 *)(a2 + v738 + 2) << 16) | (*(unsigned __int8 *)(a2 + v738 + 1) << 8) | *(unsigned __int8 *)(a2 + v738);
              }
              else {
                unsigned int v739 = *(unsigned __int16 *)(a2 + v738);
              }
              int v771 = *(_DWORD *)(result + 28) | (v739 >> v737) & 0x1FFF;
              *(_DWORD *)(result + 28) = v771;
              unint64_t v772 = *a3 + 103;
              unint64_t v773 = v772 & 7;
              unint64_t v774 = v772 >> 3;
              if (v773 == 7) {
                int v775 = *(_DWORD *)(a2 + v774) >> 7;
              }
              else {
                int v775 = ((*(unsigned __int8 *)(a2 + v774 + 2) << 16) | (*(unsigned __int8 *)(a2 + v774 + 1) << 8) | *(unsigned __int8 *)(a2 + v774)) >> v773;
              }
              *(_DWORD *)(result + 28) = ((v775 & 0x3FFFF) << 13) | v771;
              unint64_t v802 = *a3 + 121;
              unint64_t v803 = v802 & 7;
              unint64_t v804 = v802 >> 3;
              if (v803 == 7) {
                int v805 = *(_DWORD *)(a2 + v804) >> 7;
              }
              else {
                int v805 = ((*(unsigned __int8 *)(a2 + v804 + 2) << 16) | (*(unsigned __int8 *)(a2 + v804 + 1) << 8) | *(unsigned __int8 *)(a2 + v804)) >> v803;
              }
              *(_DWORD *)(result + 32) |= v805 & 0x3FFFF;
              uint64_t v826 = (*(unsigned char *)a3 - 117) & 7;
              unint64_t v827 = (unint64_t)(*a3 + 139) >> 3;
              if (v826 == 7) {
                int v828 = *(_DWORD *)(a2 + v827) >> 7;
              }
              else {
                int v828 = ((*(unsigned __int8 *)(a2 + v827 + 2) << 16) | (*(unsigned __int8 *)(a2 + v827 + 1) << 8) | *(unsigned __int8 *)(a2 + v827)) >> v826;
              }
              *(_DWORD *)(result + 36) |= v828 & 0x3FFFF;
              uint64_t v21 = 157;
              break;
            default:
              *(_DWORD *)(result + 8) = 0;
              uint64_t v83 = *a3 & 7;
              unint64_t v84 = (unint64_t)(*a3 + 8) >> 3;
              if (v83 == 7) {
                int v85 = *(_DWORD *)(a2 + v84) >> 7;
              }
              else {
                int v85 = ((*(unsigned __int8 *)(a2 + v84 + 2) << 16) | (*(unsigned __int8 *)(a2 + v84 + 1) << 8) | *(unsigned __int8 *)(a2 + v84)) >> v83;
              }
              *(_DWORD *)(result + 16) |= v85 & 0x3FFFF;
              unint64_t v471 = *a3 + 26;
              unint64_t v472 = v471 & 7;
              unint64_t v473 = v471 >> 3;
              if (v472 == 7) {
                int v474 = *(_DWORD *)(a2 + v473) >> 7;
              }
              else {
                int v474 = ((*(unsigned __int8 *)(a2 + v473 + 2) << 16) | (*(unsigned __int8 *)(a2 + v473 + 1) << 8) | *(unsigned __int8 *)(a2 + v473)) >> v472;
              }
              uint64_t v528 = *(unsigned int *)(result + 20);
              unint64_t v529 = v528 | ((unint64_t)*(unsigned __int16 *)(result + 24) << 32);
              int v530 = v474 & 0x3FFFF;
              *(_DWORD *)(result + 20) = v528 | v530;
              unint64_t v531 = *a3 + 44;
              unint64_t v532 = v531 & 7;
              unint64_t v533 = v531 >> 3;
              if (v532 > 2) {
                unsigned int v534 = (*(unsigned __int8 *)(a2 + v533 + 2) << 16) | (*(unsigned __int8 *)(a2 + v533 + 1) << 8) | *(unsigned __int8 *)(a2 + v533);
              }
              else {
                unsigned int v534 = *(unsigned __int16 *)(a2 + v533);
              }
              uint64_t v582 = v530 | (v534 >> v532 << 18);
              *(_WORD *)(result + 24) = WORD2(v529);
              *(_DWORD *)(result + 20) = v529 | v582;
              unint64_t v583 = *a3 + 58;
              unint64_t v584 = v583 & 7;
              unint64_t v585 = v583 >> 3;
              if (v584 > 3) {
                unsigned int v586 = (*(unsigned __int8 *)(a2 + v585 + 2) << 16) | (*(unsigned __int8 *)(a2 + v585 + 1) << 8) | *(unsigned __int8 *)(a2 + v585);
              }
              else {
                unsigned int v586 = *(unsigned __int16 *)(a2 + v585);
              }
              unint64_t v624 = v582 | ((unint64_t)((v586 >> v584) & 0x1FFF) << 32) | v529;
              *(_DWORD *)(result + 20) = v624;
              *(_WORD *)(result + 24) = WORD2(v624);
              unint64_t v625 = *a3 + 71;
              unint64_t v626 = v625 & 7;
              unint64_t v627 = v625 >> 3;
              if (v626 > 2) {
                unsigned int v628 = (*(unsigned __int8 *)(a2 + v627 + 2) << 16) | (*(unsigned __int8 *)(a2 + v627 + 1) << 8) | *(unsigned __int8 *)(a2 + v627);
              }
              else {
                unsigned int v628 = *(unsigned __int16 *)(a2 + v627);
              }
              *(_WORD *)(result + 26) |= (v628 >> v626) & 0x3FFF;
              unint64_t v665 = *a3 + 85;
              unint64_t v666 = v665 & 7;
              unint64_t v667 = v665 >> 3;
              if (v666 > 2) {
                unsigned int v668 = (*(unsigned __int8 *)(a2 + v667 + 2) << 16) | (*(unsigned __int8 *)(a2 + v667 + 1) << 8) | *(unsigned __int8 *)(a2 + v667);
              }
              else {
                unsigned int v668 = *(unsigned __int16 *)(a2 + v667);
              }
              *(_WORD *)(result + 28) |= (v668 >> v666) & 0x3FFF;
              unint64_t v702 = *a3 + 99;
              unint64_t v703 = v702 & 7;
              unint64_t v704 = v702 >> 3;
              if (v703 > 2) {
                unsigned int v705 = (*(unsigned __int8 *)(a2 + v704 + 2) << 16) | (*(unsigned __int8 *)(a2 + v704 + 1) << 8) | *(unsigned __int8 *)(a2 + v704);
              }
              else {
                unsigned int v705 = *(unsigned __int16 *)(a2 + v704);
              }
              *(_WORD *)(result + 30) |= (v705 >> v703) & 0x3FFF;
              unint64_t v740 = *a3 + 113;
              unint64_t v741 = v740 & 7;
              unint64_t v742 = v740 >> 3;
              if (v741 > 2) {
                unsigned int v743 = (*(unsigned __int8 *)(a2 + v742 + 2) << 16) | (*(unsigned __int8 *)(a2 + v742 + 1) << 8) | *(unsigned __int8 *)(a2 + v742);
              }
              else {
                unsigned int v743 = *(unsigned __int16 *)(a2 + v742);
              }
              *(_WORD *)(result + 32) |= (v743 >> v741) & 0x3FFF;
              unint64_t v776 = *a3 + 127;
              unint64_t v777 = v776 & 7;
              unint64_t v778 = v776 >> 3;
              if (v777 > 2) {
                unsigned int v779 = (*(unsigned __int8 *)(a2 + v778 + 2) << 16) | (*(unsigned __int8 *)(a2 + v778 + 1) << 8) | *(unsigned __int8 *)(a2 + v778);
              }
              else {
                unsigned int v779 = *(unsigned __int16 *)(a2 + v778);
              }
              *(_WORD *)(result + 34) |= (v779 >> v777) & 0x3FFF;
              unint64_t v806 = (*(unsigned char *)a3 - 115) & 7;
              unint64_t v807 = (unint64_t)(*a3 + 141) >> 3;
              if (v806 > 2) {
                unsigned int v808 = (*(unsigned __int8 *)(a2 + v807 + 2) << 16) | (*(unsigned __int8 *)(a2 + v807 + 1) << 8) | *(unsigned __int8 *)(a2 + v807);
              }
              else {
                unsigned int v808 = *(unsigned __int16 *)(a2 + v807);
              }
              *(_WORD *)(result + 36) |= (v808 >> v806) & 0x3FFF;
              *(_WORD *)(result + 38) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 155) >> 3)) >> ((*(unsigned char *)a3 - 101) & 7)) & 0x1FF;
              *(_WORD *)(result + 40) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 164) >> 3)) >> ((*(unsigned char *)a3 - 92) & 7)) & 0x1FF;
              unint64_t v829 = (*(unsigned char *)a3 - 83) & 7;
              unint64_t v830 = (unint64_t)(*a3 + 173) >> 3;
              if (v829 > 2) {
                unsigned int v831 = (*(unsigned __int8 *)(a2 + v830 + 2) << 16) | (*(unsigned __int8 *)(a2 + v830 + 1) << 8) | *(unsigned __int8 *)(a2 + v830);
              }
              else {
                unsigned int v831 = *(unsigned __int16 *)(a2 + v830);
              }
              *(_WORD *)(result + 42) |= (v831 >> v829) & 0x3FFF;
              unint64_t v846 = (*(unsigned char *)a3 - 69) & 7;
              unint64_t v847 = (unint64_t)(*a3 + 187) >> 3;
              if (v846 > 2) {
                unsigned int v848 = (*(unsigned __int8 *)(a2 + v847 + 2) << 16) | (*(unsigned __int8 *)(a2 + v847 + 1) << 8) | *(unsigned __int8 *)(a2 + v847);
              }
              else {
                unsigned int v848 = *(unsigned __int16 *)(a2 + v847);
              }
              *(_WORD *)(result + 44) |= (v848 >> v846) & 0x3FFF;
              unint64_t v863 = (*(unsigned char *)a3 - 55) & 7;
              unint64_t v864 = (unint64_t)(*a3 + 201) >> 3;
              if (v863 > 2) {
                unsigned int v865 = (*(unsigned __int8 *)(a2 + v864 + 2) << 16) | (*(unsigned __int8 *)(a2 + v864 + 1) << 8) | *(unsigned __int8 *)(a2 + v864);
              }
              else {
                unsigned int v865 = *(unsigned __int16 *)(a2 + v864);
              }
              *(_WORD *)(result + 46) |= (v865 >> v863) & 0x3FFF;
              unint64_t v880 = (*(unsigned char *)a3 - 41) & 7;
              unint64_t v881 = (unint64_t)(*a3 + 215) >> 3;
              if (v880 > 2) {
                unsigned int v882 = (*(unsigned __int8 *)(a2 + v881 + 2) << 16) | (*(unsigned __int8 *)(a2 + v881 + 1) << 8) | *(unsigned __int8 *)(a2 + v881);
              }
              else {
                unsigned int v882 = *(unsigned __int16 *)(a2 + v881);
              }
              *(_WORD *)(result + 48) |= (v882 >> v880) & 0x3FFF;
              unint64_t v897 = (*(unsigned char *)a3 - 27) & 7;
              unint64_t v898 = (unint64_t)(*a3 + 229) >> 3;
              if (v897 > 2) {
                unsigned int v899 = (*(unsigned __int8 *)(a2 + v898 + 2) << 16) | (*(unsigned __int8 *)(a2 + v898 + 1) << 8) | *(unsigned __int8 *)(a2 + v898);
              }
              else {
                unsigned int v899 = *(unsigned __int16 *)(a2 + v898);
              }
              *(_WORD *)(result + 50) |= (v899 >> v897) & 0x3FFF;
              unint64_t v915 = (*(unsigned char *)a3 - 13) & 7;
              unint64_t v916 = (unint64_t)(*a3 + 243) >> 3;
              if (v915 > 2) {
                unsigned int v917 = (*(unsigned __int8 *)(a2 + v916 + 2) << 16) | (*(unsigned __int8 *)(a2 + v916 + 1) << 8) | *(unsigned __int8 *)(a2 + v916);
              }
              else {
                unsigned int v917 = *(unsigned __int16 *)(a2 + v916);
              }
              *(_WORD *)(result + 52) |= (v917 >> v915) & 0x3FFF;
              *(_WORD *)(result + 54) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 257) >> 3)) >> ((*(unsigned char *)a3 + 1) & 7)) & 0x1FF;
              *(_WORD *)(result + 56) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 266) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)) & 0x1FF;
              uint64_t v21 = 275;
              break;
          }
          break;
        default:
          *(_DWORD *)uint64_t result = 7;
          unint64_t v22 = v4 + 4;
          unint64_t v23 = v22 >> 3;
          uint64_t v24 = v22 & 7;
          if (v24) {
            int v25 = *(unsigned __int16 *)(a2 + v23) >> v24;
          }
          else {
            LOBYTE(v25) = *(unsigned char *)(a2 + v23);
          }
          *(unsigned char *)(result + 8) |= v25;
          if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1) == 0)
          {
            *(_DWORD *)(result + 12) = 0;
            unint64_t v113 = *a3 + 13;
            unint64_t v114 = v113 & 7;
            unint64_t v115 = v113 >> 3;
            if (v114 > 3) {
              unsigned int v116 = *(unsigned __int16 *)(a2 + v115);
            }
            else {
              unsigned int v116 = *(unsigned __int8 *)(a2 + v115);
            }
            *(unsigned char *)(result + 16) |= (v116 >> v114) & 0x1F;
            goto LABEL_56;
          }
          *(_DWORD *)(result + 12) = 1;
          unint64_t v92 = *a3 + 13;
          unint64_t v93 = v92 & 7;
          unint64_t v94 = v92 >> 3;
          if (v93 > 3) {
            unsigned int v95 = *(unsigned __int16 *)(a2 + v94);
          }
          else {
            unsigned int v95 = *(unsigned __int8 *)(a2 + v94);
          }
          uint64_t v133 = *(void *)(result + 16) | (v95 >> v93) & 0x1F;
          *(void *)(result + 16) = v133;
          unint64_t v134 = *a3 + 18;
          unint64_t v135 = v134 & 7;
          unint64_t v136 = v134 >> 3;
          if (v135 == 7)
          {
            unint64_t v137 = ((unint64_t)*(unsigned __int8 *)(v136 + a2 + 6) << 48) | ((unint64_t)*(unsigned __int8 *)(v136 + a2 + 5) << 40);
            unint64_t v138 = (unint64_t)*(unsigned __int8 *)(v136 + a2 + 4) << 32;
          }
          else
          {
            unint64_t v138 = (unint64_t)*(unsigned __int8 *)(v136 + a2 + 5) << 40;
            unint64_t v137 = (unint64_t)*(unsigned __int8 *)(v136 + a2 + 4) << 32;
          }
          *(void *)(result + 16) = ((((v137 | v138 | ((unint64_t)*(unsigned __int8 *)(a2 + v136 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + v136 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + v136 + 1) << 8) | *(unsigned __int8 *)(a2 + v136)) >> v135) & 0x3FFFFFFFFFFLL) << 6) | v133;
          uint64_t v21 = 60;
          break;
      }
      break;
    case 3:
      uint64_t v18 = (v4 + 2) & 7;
      unint64_t v19 = (unint64_t)(v4 + 2) >> 3;
      if (v18 == 7) {
        int v20 = *(unsigned __int16 *)(a2 + v19) >> 7;
      }
      else {
        int v20 = *(unsigned __int8 *)(a2 + v19) >> v18;
      }
      switch(v20 & 3)
      {
        case 1:
          uint64_t v65 = (v4 + 4) & 7;
          unint64_t v66 = (unint64_t)(v4 + 4) >> 3;
          if (v65 == 7) {
            int v67 = *(unsigned __int16 *)(a2 + v66) >> 7;
          }
          else {
            int v67 = *(unsigned __int8 *)(a2 + v66) >> v65;
          }
          int v86 = v67 & 3;
          if (v86 == 1)
          {
            int v87 = 14;
          }
          else
          {
            if (v86) {
              goto LABEL_81;
            }
            int v87 = 13;
          }
          *(_DWORD *)uint64_t result = v87;
          unint64_t v126 = v4 + 6;
          uint64_t v127 = (v4 + 6) & 7;
          unint64_t v128 = v126 >> 3;
          if (v127 == 7) {
            int v129 = *(unsigned __int16 *)(a2 + v128) >> 7;
          }
          else {
            int v129 = *(unsigned __int8 *)(a2 + v128) >> v127;
          }
          *(unsigned char *)(result + 8) |= v129 & 3;
          uint64_t v21 = 8;
          goto LABEL_398;
        case 2:
          uint64_t v68 = (v4 + 4) & 7;
          unint64_t v69 = (unint64_t)(v4 + 4) >> 3;
          if (v68 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v69) | (*(unsigned __int8 *)(a2 + v69 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_81;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v69) >> v68) & 3) != 0)
          {
            goto LABEL_81;
          }
          *(_DWORD *)uint64_t result = 15;
          unint64_t v88 = v4 + 6;
          unint64_t v89 = (v4 + 6) & 7;
          unint64_t v90 = v88 >> 3;
          if (v89 > 1) {
            unsigned int v91 = *(unsigned __int16 *)(a2 + v90);
          }
          else {
            unsigned int v91 = *(unsigned __int8 *)(a2 + v90);
          }
          *(unsigned char *)(result + 16) |= (v91 >> v89) & 0x7F;
          unint64_t v156 = *a3 + 13;
          unint64_t v157 = v156 & 7;
          unint64_t v158 = v156 >> 3;
          if (v157 > 5) {
            unsigned __int16 v159 = *(_WORD *)(a2 + v158);
          }
          else {
            unsigned __int16 v159 = *(unsigned __int8 *)(a2 + v158);
          }
          *(_DWORD *)(result + 12) = (v159 >> v157) & 7;
          unint64_t v160 = *a3 & 7;
          unint64_t v161 = (unint64_t)(*a3 + 16) >> 3;
          if (v160 > 5) {
            unsigned __int16 v162 = *(_WORD *)(a2 + v161);
          }
          else {
            unsigned __int16 v162 = *(unsigned __int8 *)(a2 + v161);
          }
          switch((v162 >> v160) & 7)
          {
            case 1:
              int v348 = 1;
              goto LABEL_280;
            case 2:
              int v348 = 2;
              goto LABEL_280;
            case 3:
              int v348 = 3;
              goto LABEL_280;
            case 4:
              int v348 = 4;
              goto LABEL_280;
            case 5:
              int v348 = 5;
              goto LABEL_280;
            case 6:
              int v348 = 6;
              goto LABEL_280;
            case 7:
              int v348 = 7;
LABEL_280:
              *(_DWORD *)(result + 8) = v348;
              break;
            default:
              *(_DWORD *)(result + 8) = 0;
              break;
          }
          uint64_t v21 = 19;
          goto LABEL_398;
        case 3:
          unint64_t v70 = v4 + 4;
          uint64_t v71 = (v4 + 4) & 7;
          unint64_t v72 = v70 >> 3;
          if (v71 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v72) | (*(unsigned __int8 *)(a2 + v72 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_81;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v72) >> v71) & 3) != 0)
          {
            goto LABEL_81;
          }
          *(_DWORD *)uint64_t result = 16;
          uint64_t v21 = 6;
          goto LABEL_398;
        default:
          uint64_t v26 = (v4 + 4) & 7;
          unint64_t v27 = (unint64_t)(v4 + 4) >> 3;
          if (v26 == 7) {
            int v28 = *(unsigned __int16 *)(a2 + v27) >> 7;
          }
          else {
            int v28 = *(unsigned __int8 *)(a2 + v27) >> v26;
          }
          int v73 = v28 & 3;
          if (v73 == 1)
          {
            *(_DWORD *)uint64_t result = 12;
            unint64_t v117 = v4 + 6;
            unint64_t v118 = (v4 + 6) & 7;
            unint64_t v119 = v117 >> 3;
            if (v118 > 5) {
              unsigned __int16 v120 = *(_WORD *)(a2 + v119);
            }
            else {
              unsigned __int16 v120 = *(unsigned __int8 *)(a2 + v119);
            }
            *(_DWORD *)(result + 8) = (v120 >> v118) & 7;
            int v163 = *(_WORD *)(result + 12) & 0xFFFE | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
            *(_WORD *)(result + 12) = v163;
            unsigned int v164 = v163 & 0xFFFFFFFD | (2
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)) & 1));
            *(_WORD *)(result + 12) = v164;
            unsigned int v165 = v164 & 0xFFFFFFFB | (4
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 11) >> 3)) >> ((*(unsigned char *)a3 + 11) & 7)) & 1));
            *(_WORD *)(result + 12) = v165;
            unsigned int v166 = v165 & 0xFFFFFFF7 | (8
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1));
            *(_WORD *)(result + 12) = v166;
            unsigned int v167 = v166 & 0xFFFFFFEF | (16
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 13) >> 3)) >> ((*(unsigned char *)a3 + 13) & 7)) & 1));
            *(_WORD *)(result + 12) = v167;
            unsigned int v168 = v167 & 0xFFFFFFDF | (32
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 14) >> 3)) >> ((*(unsigned char *)a3 + 14) & 7)) & 1));
            *(_WORD *)(result + 12) = v168;
            if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 15) >> 3)) >> ((*(unsigned char *)a3 + 15) & 7))) {
              __int16 v169 = v168 | 0x40;
            }
            else {
              __int16 v169 = v168 & 0xFFBF;
            }
            *(_WORD *)(result + 12) = v169;
            goto LABEL_290;
          }
          if (v73)
          {
LABEL_81:
            *a4 = 0;
            return result;
          }
          *(_DWORD *)uint64_t result = 11;
          unint64_t v74 = (unint64_t)(v4 + 9) >> 3;
          if (((v4 + 9) & 7) != 0)
          {
            unint64_t v75 = ((unint64_t)*(unsigned __int8 *)(v74 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v74 + a2 + 6) << 48);
            unint64_t v76 = (unint64_t)*(unsigned __int8 *)(v74 + a2 + 5) << 40;
          }
          else
          {
            unint64_t v76 = (unint64_t)*(unsigned __int8 *)(v74 + a2 + 6) << 48;
            unint64_t v75 = (unint64_t)*(unsigned __int8 *)(v74 + a2 + 5) << 40;
          }
          uint64_t v183 = (unsigned __int8 *)(a2 + v74);
          unint64_t v184 = ((v75 | v76 | ((unint64_t)v183[4] << 32) | ((unint64_t)v183[3] << 24) | ((unint64_t)v183[2] << 16) | ((unint64_t)v183[1] << 8) | *v183) >> ((v4 + 9) & 7)) & 0xFFFFFFFFFFFFFFLL;
          unint64_t v185 = v4 + 65;
          unint64_t v186 = v185 >> 3;
          uint64_t v187 = v185 & 7;
          if (v187) {
            uint64_t v188 = (*(unsigned __int16 *)(a2 + v186) >> v187);
          }
          else {
            uint64_t v188 = *(unsigned __int8 *)(a2 + v186);
          }
          *(void *)(result + 16) |= v184 | (v188 << 56);
          unint64_t v197 = *a3 + 6;
          unint64_t v198 = v197 & 7;
          unint64_t v199 = v197 >> 3;
          if (v198 > 5) {
            unsigned __int16 v200 = *(_WORD *)(a2 + v199);
          }
          else {
            unsigned __int16 v200 = *(unsigned __int8 *)(a2 + v199);
          }
          switch((v200 >> v198) & 7)
          {
            case 1:
              int v470 = 1;
              goto LABEL_396;
            case 2:
              int v470 = 2;
              goto LABEL_396;
            case 3:
              int v470 = 3;
              goto LABEL_396;
            case 4:
              int v470 = 4;
              goto LABEL_396;
            case 5:
              int v470 = 5;
              goto LABEL_396;
            case 6:
              int v470 = 6;
              goto LABEL_396;
            case 7:
              int v470 = 7;
LABEL_396:
              *(_DWORD *)(result + 8) = v470;
              break;
            default:
              *(_DWORD *)(result + 8) = 0;
              break;
          }
          uint64_t v21 = 73;
          break;
      }
      break;
    default:
      unint64_t v8 = v4 + 2;
      unint64_t v9 = v8 >> 3;
      uint64_t v10 = v8 & 7;
      if (v10) {
        int v11 = (*(unsigned __int16 *)(a2 + v9) >> v10);
      }
      else {
        int v11 = *(unsigned __int8 *)(a2 + v9);
      }
      int v29 = *(unsigned __int16 *)(result + 8) | v11;
      *(_WORD *)(result + 8) = v29;
      uint64_t v30 = *a3;
      if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)))
      {
        unint64_t v31 = v30 + 11;
        unint64_t v32 = (v30 + 11) & 7;
        unint64_t v33 = v31 >> 3;
        if (v32 > 2) {
          unsigned __int16 v34 = *(_WORD *)(a2 + v33);
        }
        else {
          unsigned __int16 v34 = *(unsigned __int8 *)(a2 + v33);
        }
        int v40 = (((v34 >> v32) & 0x3F) << 8) | v29;
        *(_WORD *)(result + 8) = v40;
        if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7))) {
          __int16 v41 = v40 | 0x4000;
        }
        else {
          __int16 v41 = v40 & 0xBFFF;
        }
        *(_WORD *)(result + 8) = v41;
LABEL_56:
        uint64_t v21 = 18;
      }
      else
      {
        __int16 v35 = v29 & 0xBFFF;
        *(_WORD *)(result + 8) = v35;
        unint64_t v36 = *a3 + 11;
        unint64_t v37 = v36 & 7;
        unint64_t v38 = v36 >> 3;
        if (v37 > 4) {
          unsigned __int16 v39 = *(_WORD *)(a2 + v38);
        }
        else {
          unsigned __int16 v39 = *(unsigned __int8 *)(a2 + v38);
        }
        *(_WORD *)(result + 8) = (((v39 >> v37) & 0xF) << 8) | v35;
LABEL_122:
        uint64_t v21 = 15;
      }
      break;
  }
LABEL_398:
  *a3 += v21;
  return result;
}

void *sub_458C8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_574C();
  }
  return operator new(4 * a2);
}

void *sub_45900(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_574C();
  }
  return operator new(2 * a2);
}

uint64_t sub_45934(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 224))
  {
    long long v4 = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 29) = *(void *)(a2 + 29);
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    sub_45AC8(a1 + 40, (__n128 *)(a2 + 40));
    sub_45AC8(a1 + 64, (__n128 *)(a2 + 64));
    sub_45AC8(a1 + 88, (__n128 *)(a2 + 88));
    sub_45AC8(a1 + 112, (__n128 *)(a2 + 112));
    sub_45AC8(a1 + 136, (__n128 *)(a2 + 136));
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    long long v6 = *(_OWORD *)(a2 + 168);
    long long v7 = *(_OWORD *)(a2 + 184);
    long long v8 = *(_OWORD *)(a2 + 200);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v8;
    *(_OWORD *)(a1 + 184) = v7;
    *(_OWORD *)(a1 + 168) = v6;
  }
  else
  {
    sub_459E8(a1, (long long *)a2);
  }
  return a1;
}

__n128 sub_459E8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)(a1 + 29) = *(void *)((char *)a2 + 29);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = a2[7];
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  uint64_t v4 = *((void *)a2 + 20);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *(void *)(a1 + 160) = v4;
  __n128 result = *(__n128 *)((char *)a2 + 168);
  long long v6 = *(long long *)((char *)a2 + 184);
  long long v7 = *(long long *)((char *)a2 + 200);
  *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 184) = v6;
  *(__n128 *)(a1 + 168) = result;
  *(unsigned char *)(a1 + 224) = 1;
  return result;
}

__n128 sub_45AC8(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_45B1C(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 37576;
  if (*(void *)(a1 + 37608))
  {
    uint64_t v16 = a1 + 160;
    uint64_t v5 = a1 + 37616;
    unint64_t v6 = *(void *)(a1 + 37600);
    do
    {
      uint64_t v7 = *(void *)(*(void *)v2 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
      unsigned int v8 = v6 & 0xF;
      unint64_t v9 = (char *)(v7 + 272 * (v6 & 0xF));
      if (!v9[32]) {
        break;
      }
      uint64_t v19 = a1;
      v17[0] = v9;
      v17[1] = &v19;
      v17[2] = a1;
      v17[3] = &v18;
      uint64_t v10 = v7 + 272 * v8;
      if (*(unsigned char *)(v10 + 264))
      {
        sub_45D68((unint64_t)v17, v10 + 40, (uint64_t)v9);
        if (!*(unsigned char *)(v10 + 264)) {
          sub_8894();
        }
        sub_46078(a2, v10 + 40);
      }
      else
      {
        int v11 = *v9;
        if ((v11 & 0x80000000) == 0)
        {
          unsigned int v12 = v11;
          sub_45D68((unint64_t)v17, v16 + 232 * v11, v16);
          unint64_t v13 = (int64x2_t *)(v5 + 48 * v12);
          if (v13[2].i64[1]) {
            goto LABEL_14;
          }
          int v14 = sub_12C18C();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp"
                  "ort/APS/AGXPSAPSParserGen1.cpp";
            __int16 v22 = 1024;
            int v23 = 806;
            __int16 v24 = 2080;
            int v25 = "!pendingPositionsForClique.empty()";
            _os_log_error_impl(&def_1C1270, v14, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", buf, 0x1Cu);
          }
          if (sub_12C17C()) {
            sub_12C184();
          }
          if (v13[2].i64[1]) {
LABEL_14:
          }
            sub_47E68(v13);
        }
      }
      sub_3EE00(*(void *)(*(void *)v2 + ((*(void *)(v2 + 24) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 272 * (*(void *)(v2 + 24) & 0xFLL));
      uint64_t v15 = *(void *)(v2 + 32) - 1;
      unint64_t v6 = *(void *)(v2 + 24) + 1;
      *(void *)(v2 + 24) = v6;
      *(void *)(v2 + 32) = v15;
      if (v6 >= 0x20)
      {
        operator delete(**(void ***)v2);
        *(void *)v2 += 8;
        uint64_t v15 = *(void *)(v2 + 32);
        unint64_t v6 = *(void *)(v2 + 24) - 16;
        *(void *)(v2 + 24) = v6;
      }
    }
    while (v15);
  }
}

unint64_t sub_45D68@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)result;
  unint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 208);
  switch(*(_DWORD *)(*(void *)result + 4))
  {
    case 0:
      __n128 result = sub_4661C(*(uint64_t **)(result + 8), *(void *)(v3 + 20), *(_DWORD *)(v3 + 28), v7, a3);
      uint64_t v9 = *(void *)(*(void *)v5 + 8);
      uint64_t v10 = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(void *)v5 + 16);
      if (v7 <= 7)
      {
        *((void *)&v11 + 1) = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(void *)v5 + 16);
        *(void *)&long long v11 = v9 & 0xFFFFFFFF00000000;
        uint64_t v12 = v6 + 16 * v7 + 35264;
        *(_DWORD *)uint64_t v12 = v9;
        *(int32x2_t *)(v12 + 4) = vzip1_s32((int32x2_t)(v11 >> 32), (int32x2_t)v10);
        *(unsigned char *)(v12 + 12) = 1;
      }
      int v14 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(void *)(v13 - 28) = v10;
      *(void *)(v13 - 36) = v9;
      *(v13 - 20) = ((v8 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v14) {
        goto LABEL_23;
      }
      break;
    case 1:
      __n128 result = sub_4661C(*(uint64_t **)(result + 8), *(void *)(v3 + 12), *(_DWORD *)(v3 + 20), v7, a3);
      unint64_t v16 = 0;
      uint64_t v17 = ((HIDWORD(result) & 0x7FF) << 32) | ((v15 & 0x7FF) << 43) | (HIDWORD(v15) << 54);
      if (v7 <= 7)
      {
        char v18 = (_DWORD *)(v6 + 16 * v7 + 35264);
        if (*(unsigned char *)(v6 + 16 * v7 + 35276))
        {
          unsigned int v19 = *(unsigned __int16 *)(*(void *)v5 + 8);
          int32x2_t v20 = vadd_s32(*(int32x2_t *)(v6 + 16 * v7 + 35268), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL));
          uint64_t v21 = *v18 + (v19 & 0xF);
          unint64_t v16 = v21 | ((unint64_t)v20.u32[0] << 32);
          uint64_t v17 = v20.u32[1] | (unint64_t)v17;
          *char v18 = v21;
          *(int32x2_t *)(v6 + 16 * v7 + 35268) = v20;
        }
      }
      int v22 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(void *)(v13 - 28) = v17;
      *(void *)(v13 - 36) = v16;
      *(v13 - 20) = ((v15 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v22) {
        goto LABEL_23;
      }
      break;
    case 2:
      __int16 v23 = *(_WORD *)(v3 + 8);
      LODWORD(v24) = ((*(_WORD *)(v3 + 12) & 0x7FF) << 20) | ((*(_WORD *)(v3 + 10) & 0x3FF) << 10) | v23 & 0x3FF;
      uint8x8_t v25 = *(uint8x8_t *)(v3 + 15);
      uint8x8_t v26 = *(uint8x8_t *)(v3 + 23);
      if (*(unsigned char *)(v3 + 14))
      {
        int v31 = v25.u8[0];
        v27.i64[0] = vdupq_n_s16(v25.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v31 + 1).i64[1];
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v26.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        uint16x8_t v27 = vmovl_u8(v25);
        uint16x8_t v28 = vmovl_u8(v26);
      }
      if (v7 <= 7)
      {
        uint64_t v32 = v6 + 16 * v7 + 35392;
        *(_DWORD *)uint64_t v32 = v23 & 0x3FF;
        *(int8x8_t *)(v32 + 4) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x7FF000003FFLL);
        *(unsigned char *)(v32 + 12) = 1;
      }
      goto LABEL_22;
    case 3:
      LODWORD(v24) = *(unsigned __int8 *)(v3 + 8);
      uint8x8_t v29 = *(uint8x8_t *)(v3 + 9);
      uint8x8_t v30 = *(uint8x8_t *)(v3 + 17);
      if (v24)
      {
        int v33 = v29.u8[0];
        v27.i64[0] = vdupq_n_s16(v29.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v33 + 1).i64[1];
        uint64_t v24 = (uint64_t)&unk_4C7000;
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v30.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        uint16x8_t v27 = vmovl_u8(v29);
        uint16x8_t v28 = vmovl_u8(v30);
      }
      if (v7 <= 7)
      {
        uint64_t v24 = v6 + 16 * v7 + 35392;
        if (*(unsigned char *)(v6 + 16 * v7 + 35404)) {
          LODWORD(v24) = *(_DWORD *)v24 & 0x3FF | ((*(_DWORD *)(v6 + 16 * v7 + 35396) & 0x3FF) << 10) & 0x800FFFFF | ((*(_DWORD *)(v6 + 16 * v7 + 35400) & 0x7FF) << 20);
        }
      }
LABEL_22:
      int v34 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(uint16x8_t *)(a2 + 168) = v27;
      *(uint16x8_t *)(a2 + 184) = v28;
      *(_DWORD *)(a2 + 200) = v24;
      if (!v34) {
LABEL_23:
      }
        *unint64_t v13 = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_46078(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 215))
  {
    uint64_t v4 = (void *)a1[83];
    unint64_t v5 = a1[84];
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v10 = (void **)(a1 + 82);
      uint64_t v11 = a1[82];
      uint64_t v12 = ((uint64_t)v4 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        goto LABEL_108;
      }
      uint64_t v13 = v5 - v11;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v16 = (char *)sub_5714((uint64_t)(a1 + 84), v15);
      }
      else {
        unint64_t v16 = 0;
      }
      __int16 v23 = &v16[8 * v12];
      uint64_t v24 = &v16[8 * v15];
      *(void *)__int16 v23 = *(void *)a2;
      uint64_t v6 = v23 + 8;
      uint8x8_t v25 = (char *)a1[83];
      uint8x8_t v26 = (char *)a1[82];
      if (v25 != v26)
      {
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v23 - 1) = v27;
          v23 -= 8;
        }
        while (v25 != v26);
        uint8x8_t v25 = (char *)*v10;
      }
      a1[82] = v23;
      a1[83] = v6;
      a1[84] = v24;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      void *v4 = *(void *)a2;
      uint64_t v6 = v4 + 1;
    }
    a1[83] = v6;
    uint16x8_t v28 = (void *)a1[86];
    unint64_t v29 = a1[87];
    if ((unint64_t)v28 < v29)
    {
      void *v28 = *(void *)(a2 + 8);
      uint8x8_t v30 = v28 + 1;
LABEL_44:
      a1[86] = v30;
      uint64_t v42 = (unsigned char *)a1[92];
      unint64_t v43 = a1[93];
      if ((unint64_t)v42 < v43)
      {
        *uint64_t v42 = *(unsigned char *)(a2 + 36);
        uint64_t v44 = (uint64_t)(v42 + 1);
LABEL_62:
        a1[92] = v44;
        unint64_t v54 = (char *)a1[89];
        unint64_t v55 = a1[90];
        if ((unint64_t)v54 >= v55)
        {
          unint64_t v57 = (char *)a1[88];
          uint64_t v58 = (v54 - v57) >> 3;
          if ((unint64_t)(v58 + 1) >> 61) {
            sub_566C();
          }
          unint64_t v59 = v55 - (void)v57;
          unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 2;
          if (v60 <= v58 + 1) {
            unint64_t v60 = v58 + 1;
          }
          if (v59 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          if (v61)
          {
            unint64_t v62 = (char *)sub_5714((uint64_t)(a1 + 90), v61);
            unint64_t v54 = (char *)a1[89];
            unint64_t v57 = (char *)a1[88];
          }
          else
          {
            unint64_t v62 = 0;
          }
          unint64_t v63 = &v62[8 * v58];
          unsigned __int16 v64 = &v62[8 * v61];
          *(void *)unint64_t v63 = *(void *)(a2 + 16);
          int v56 = v63 + 8;
          while (v54 != v57)
          {
            uint64_t v65 = *((void *)v54 - 1);
            v54 -= 8;
            *((void *)v63 - 1) = v65;
            v63 -= 8;
          }
          a1[88] = v63;
          a1[89] = v56;
          a1[90] = v64;
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          *(void *)unint64_t v54 = *(void *)(a2 + 16);
          int v56 = v54 + 8;
        }
        a1[89] = v56;
        sub_46728(a1 + 94, a2 + 40);
        return;
      }
      unint64_t v45 = a1[91];
      unint64_t v46 = &v42[-v45];
      uint64_t v47 = (uint64_t)&v42[-v45 + 1];
      if (v47 >= 0)
      {
        unint64_t v48 = v43 - v45;
        if (2 * v48 > v47) {
          uint64_t v47 = 2 * v48;
        }
        if (v48 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v49 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v49 = v47;
        }
        if (v49) {
          unint64_t v50 = operator new(v49);
        }
        else {
          unint64_t v50 = 0;
        }
        uint64_t v51 = &v50[v49];
        v46[(void)v50] = *(unsigned char *)(a2 + 36);
        uint64_t v44 = (uint64_t)&v46[(void)v50 + 1];
        if (v42 == (unsigned char *)v45)
        {
          unint64_t v50 = &v46[(void)v50];
        }
        else
        {
          int v52 = &v42[~v45];
          do
          {
            char v53 = *--v42;
            (v52--)[(void)v50] = v53;
          }
          while (v42 != (unsigned char *)v45);
          uint64_t v42 = (unsigned char *)a1[91];
        }
        a1[91] = v50;
        a1[92] = v44;
        a1[93] = v51;
        if (v42) {
          operator delete(v42);
        }
        goto LABEL_62;
      }
LABEL_109:
      sub_566C();
    }
    uint64_t v31 = a1[85];
    uint64_t v32 = ((uint64_t)v28 - v31) >> 3;
    if (!((unint64_t)(v32 + 1) >> 61))
    {
      uint64_t v33 = v29 - v31;
      uint64_t v34 = v33 >> 2;
      if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
        uint64_t v34 = v32 + 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unint64_t v36 = (char *)sub_5714((uint64_t)(a1 + 87), v35);
      }
      else {
        unint64_t v36 = 0;
      }
      unint64_t v37 = &v36[8 * v32];
      unint64_t v38 = &v36[8 * v35];
      *(void *)unint64_t v37 = *(void *)(a2 + 8);
      uint8x8_t v30 = v37 + 8;
      unsigned __int16 v39 = (char *)a1[86];
      int v40 = (char *)a1[85];
      if (v39 != v40)
      {
        do
        {
          uint64_t v41 = *((void *)v39 - 1);
          v39 -= 8;
          *((void *)v37 - 1) = v41;
          v37 -= 8;
        }
        while (v39 != v40);
        unsigned __int16 v39 = (char *)a1[85];
      }
      a1[85] = v37;
      a1[86] = v30;
      a1[87] = v38;
      if (v39) {
        operator delete(v39);
      }
      goto LABEL_44;
    }
LABEL_108:
    sub_566C();
  }
  sub_4683C(a1 + 34, (void *)a2);
  sub_4683C(a1 + 40, (void *)(a2 + 8));
  unint64_t v8 = (unsigned char *)a1[62];
  unint64_t v7 = a1[63];
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v17 = a1[61];
    char v18 = &v8[-v17];
    uint64_t v19 = (uint64_t)&v8[-v17 + 1];
    if (v19 < 0) {
      goto LABEL_109;
    }
    unint64_t v20 = v7 - v17;
    if (2 * v20 > v19) {
      uint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v21 = v19;
    }
    if (v21) {
      int v22 = operator new(v21);
    }
    else {
      int v22 = 0;
    }
    unint64_t v66 = &v22[v21];
    v18[(void)v22] = *(unsigned char *)(a2 + 36);
    uint64_t v9 = (uint64_t)&v18[(void)v22 + 1];
    if (v8 == (unsigned char *)v17)
    {
      int v22 = &v18[(void)v22];
    }
    else
    {
      int v67 = &v8[~v17];
      do
      {
        char v68 = *--v8;
        (v67--)[(void)v22] = v68;
      }
      while (v8 != (unsigned char *)v17);
      unint64_t v8 = (unsigned char *)a1[61];
    }
    a1[61] = v22;
    a1[62] = v9;
    a1[63] = v66;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v8 = *(unsigned char *)(a2 + 36);
    uint64_t v9 = (uint64_t)(v8 + 1);
  }
  a1[62] = v9;
  sub_468C8(a1 + 76, a2 + 40);
  sub_46974((uint64_t)(a1 + 64), (unsigned char *)(a2 + 212));
  sub_46A1C(a1 + 46, (void *)(a2 + 16));
  sub_46A1C(a1 + 52, (void *)(a2 + 24));
  unint64_t v69 = (char *)a1[59];
  unint64_t v70 = a1[60];
  if ((unint64_t)v69 >= v70)
  {
    unint64_t v72 = (char *)a1[58];
    uint64_t v73 = (v69 - v72) >> 2;
    if ((unint64_t)(v73 + 1) >> 62) {
      sub_566C();
    }
    unint64_t v74 = v70 - (void)v72;
    unint64_t v75 = (uint64_t)(v70 - (void)v72) >> 1;
    if (v75 <= v73 + 1) {
      unint64_t v75 = v73 + 1;
    }
    if (v74 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v76 = v75;
    }
    if (v76)
    {
      int v77 = (char *)sub_458C8((uint64_t)(a1 + 60), v76);
      unint64_t v72 = (char *)a1[58];
      unint64_t v69 = (char *)a1[59];
    }
    else
    {
      int v77 = 0;
    }
    unint64_t v78 = &v77[4 * v73];
    unint64_t v79 = &v77[4 * v76];
    *(_DWORD *)unint64_t v78 = *(_DWORD *)(a2 + 32);
    uint64_t v71 = v78 + 4;
    while (v69 != v72)
    {
      int v80 = *((_DWORD *)v69 - 1);
      v69 -= 4;
      *((_DWORD *)v78 - 1) = v80;
      v78 -= 4;
    }
    a1[58] = v78;
    a1[59] = v71;
    a1[60] = v79;
    if (v72) {
      operator delete(v72);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v69 = *(_DWORD *)(a2 + 32);
    uint64_t v71 = v69 + 4;
  }
  a1[59] = v71;
  int v81 = (_OWORD *)(a2 + 168);
  int v84 = 0;
  memset(v83, 0, sizeof(v83));
  if (!*(unsigned char *)(a2 + 204)) {
    int v81 = v83;
  }
  long long v82 = v81[1];
  v85[0] = *v81;
  v85[1] = v82;
  int v86 = *((_DWORD *)v81 + 8);
  sub_46AA4(a1 + 67, (uint64_t)v85);
  LOBYTE(v85[0]) = *(unsigned char *)(a2 + 204);
  sub_46974((uint64_t)(a1 + 73), v85);
}

unint64_t sub_4661C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v6 = HIDWORD(a2) & 0x1F;
      char v7 = HIWORD(a2) >> 12;
      a5 = (HIWORD(a2) & 0xFFF & ~(-1 << v7)) + 1;
      if (a4 <= 7)
      {
        uint64_t v8 = v5 + 16 * a4 + 35136;
        *(_DWORD *)uint64_t v8 = a5;
        *(void *)(v8 + 4) = ((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) & ~(-1 << (a3 & 0xF))) + 1) | ((unint64_t)((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) >> (a3 & 0xF)) + 1) << 32);
        *(unsigned char *)(v8 + 12) = 1;
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
  }
  else
  {
    uint64_t v6 = HIDWORD(a2) & 0x1F;
    if (a4 <= 7)
    {
      uint64_t v9 = (unsigned int *)(v5 + 16 * a4 + 35136);
      if (*((unsigned char *)v9 + 12))
      {
        a5 = *v9;
      }
      else
      {
        uint64_t v11 = sub_12C18C();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1B4C04(v11);
        }
        if (sub_12C17C()) {
          sub_12C184();
        }
      }
    }
  }
  return v6 | (unint64_t)(a5 << 32);
}

void sub_46728(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  uint64_t v6 = (void *)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    uint64_t v8 = ((uint64_t)v6 - *a1) >> 7;
    if ((unint64_t)(v8 + 1) >> 57) {
      sub_566C();
    }
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 6;
    if (v9 >> 6 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v17 = a1 + 2;
    if (v11) {
      uint64_t v12 = (char *)sub_46C7C((uint64_t)(a1 + 2), v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12;
    uint64_t v14 = &v12[128 * v8];
    unint64_t v16 = &v12[128 * v11];
    sub_46B5C(v5, v14, a2);
    unint64_t v15 = v14 + 128;
    sub_46C04(a1, &v13);
    char v7 = (void *)a1[1];
    sub_46E80(&v13);
  }
  else
  {
    sub_46B5C((uint64_t)(a1 + 2), v6, a2);
    char v7 = v6 + 16;
    a1[1] = (uint64_t)(v6 + 16);
  }
  a1[1] = (uint64_t)v7;
}

void sub_46828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_46E80((void **)va);
  _Unwind_Resume(a1);
}

void sub_4683C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_46EFC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_468C8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 5;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 4 * (v6 - v5) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_47214(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }
  if (v6 == v5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = a1[5] + a1[4];
    uint64_t v9 = (void *)(*(void *)(v5 + ((v8 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v8 & 0x1F) << 7));
  }
  sub_46B5C((uint64_t)v4, v9, a2);
  ++*v4;
}

void sub_46974(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_566C();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_4752C((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  unint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void sub_46A1C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_47838(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

__n128 sub_46AA4(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 113 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_47B50(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x71)) + 36 * (v7 % 0x71);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

__n128 sub_46B5C(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *((_OWORD *)a2 + 3) = *(_OWORD *)(a3 + 48);
  a2[8] = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)(a3 + 72);
  a2[11] = *(void *)(a3 + 88);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  a2[12] = 0;
  a2[13] = 0;
  a2[14] = 0;
  __n128 result = *(__n128 *)(a3 + 96);
  *((__n128 *)a2 + 6) = result;
  uint64_t v4 = *(void *)(a3 + 120);
  a2[14] = *(void *)(a3 + 112);
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  a2[15] = v4;
  return result;
}

uint64_t sub_46C04(uint64_t *a1, void *a2)
{
  uint64_t result = sub_46CB4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_46C7C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    sub_574C();
  }
  return operator new(a2 << 7);
}

uint64_t sub_46CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 128;
      sub_46B5C(a1, (void *)(v7 - 128), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 128;
      *((void *)&v16 + 1) -= 128;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_46D6C((uint64_t)v13);
  return v11;
}

uint64_t sub_46D6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_46DA4((uint64_t *)a1);
  }
  return a1;
}

void sub_46DA4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_46DF8(v3, v1);
      v1 += 128;
    }
    while (v1 != v2);
  }
}

void sub_46DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(void *)(a2 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 72);
  if (v4)
  {
    *(void *)(a2 + 80) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a2 + 48);
  if (v5)
  {
    *(void *)(a2 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a2 + 24);
  if (v6)
  {
    *(void *)(a2 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
  }
}

void **sub_46E80(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_46EB4(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 128;
    sub_46DF8(v4, i - 128);
  }
}

void sub_46EFC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_2DF5C(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_2E074((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_5714((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  sub_2E194(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2E2AC((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_471C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_47214(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x20;
  unint64_t v4 = v2 - 32;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_2DF5C(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_2E074((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_5714((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  sub_2E194(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2E2AC((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_474E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4752C(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_566C();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    sub_475EC(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    uint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_47634(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_475D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_475EC(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_566C();
  }
  uint64_t result = sub_5714((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_47634(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_476D8(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_476D8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  sub_47768((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_47768(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_47838(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_2DF5C(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_2E074((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_5714((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  sub_2E194(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2E2AC((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_47B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_47B50(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x71;
  unint64_t v4 = v2 - 113;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFE4uLL);
      sub_2DF5C(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFE4uLL);
    sub_2E074((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_5714((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_5714((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0xFE4uLL);
  sub_2E194(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2E2AC((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_47E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_47E68(int64x2_t *a1)
{
  uint64_t v1 = (void **)a1->i64[1];
  int64x2_t v2 = vaddq_s64(a1[2], (int64x2_t)xmmword_4C7D20);
  a1[2] = v2;
  if (v2.i64[0] >= 0x400uLL)
  {
    operator delete(*v1);
    a1->i64[1] += 8;
    a1[2].i64[0] -= 512;
  }
}

void sub_47ECC(void *a1, void *a2)
{
  uint64_t v3 = a2[3259] - a2[3258];
  uint64_t v4 = (v3 << 29) - 0x100000000;
  uint64_t v5 = (((a2[3256] - a2[3255]) >> 3) + 0xFFFFFFFFLL) | (v3 << 29);
  uint64_t v6 = (unint64_t *)a1[9];
  int v8 = (unint64_t *)a1[10];
  int v7 = (void **)(a1 + 9);
  if (v6 == v8 || *((_DWORD *)v8 - 2) < v5 || *((_DWORD *)v8 - 1) < HIDWORD(v4))
  {
    uint64_t v9 = (uint64_t)(a1 + 11);
    unint64_t v10 = a1[11];
    if ((unint64_t)v8 >= v10)
    {
      uint64_t v12 = v8 - v6;
      if ((unint64_t)(v12 + 1) >> 61) {
        sub_566C();
      }
      uint64_t v13 = v10 - (void)v6;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        uint64_t v16 = (char *)sub_5714(v9, v15);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (unint64_t *)&v16[8 * v12];
      uint64_t v18 = &v16[8 * v15];
      unint64_t *v17 = v4 & 0xFFFFFFFF00000000 | v5;
      uint64_t v11 = v17 + 1;
      int64_t v20 = (char *)a1[9];
      int v19 = (char *)a1[10];
      if (v19 != v20)
      {
        do
        {
          unint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *--uint64_t v17 = v21;
        }
        while (v19 != v20);
        int v19 = (char *)*v7;
      }
      a1[9] = v17;
      a1[10] = v11;
      a1[11] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *int v8 = v4 & 0xFFFFFFFF00000000 | v5;
      uint64_t v11 = v8 + 1;
    }
    a1[10] = v11;
    sub_48030(a1, 2);
  }
}

void sub_48030(void *a1, char a2)
{
  switch(a1[15] & 3)
  {
    case 1:
      uint64_t v7 = a1[13];
      char v8 = 4 * (a2 & 3);
      char v9 = *(unsigned char *)(v7 - 1) & 0xF3;
      goto LABEL_7;
    case 2:
      uint64_t v7 = a1[13];
      char v8 = 16 * (a2 & 3);
      char v9 = *(unsigned char *)(v7 - 1) & 0xCF;
LABEL_7:
      char v10 = v9 | v8;
      goto LABEL_8;
    case 3:
      uint64_t v7 = a1[13];
      char v10 = *(unsigned char *)(v7 - 1) & 0x3F | (a2 << 6);
LABEL_8:
      *(unsigned char *)(v7 - 1) = v10;
      break;
    default:
      char v3 = a2 & 3;
      uint64_t v5 = (unsigned char *)a1[13];
      unint64_t v4 = a1[14];
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v11 = (unsigned char **)(a1 + 12);
        unint64_t v12 = a1[12];
        uint64_t v13 = &v5[-v12];
        uint64_t v14 = (uint64_t)&v5[-v12 + 1];
        if (v14 < 0) {
          sub_566C();
        }
        unint64_t v15 = v4 - v12;
        if (2 * v15 > v14) {
          uint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v16 = v14;
        }
        if (v16) {
          uint64_t v17 = operator new(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[v16];
        v13[(void)v17] = v3;
        uint64_t v6 = (uint64_t)&v13[(void)v17 + 1];
        if (v5 == (unsigned char *)v12)
        {
          uint64_t v17 = &v13[(void)v17];
        }
        else
        {
          int v19 = &v5[~v12];
          do
          {
            char v20 = *--v5;
            (v19--)[(void)v17] = v20;
          }
          while (v5 != (unsigned char *)v12);
          uint64_t v5 = *v11;
        }
        a1[12] = v17;
        a1[13] = v6;
        a1[14] = v18;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *uint64_t v5 = v3;
        uint64_t v6 = (uint64_t)(v5 + 1);
      }
      a1[13] = v6;
      break;
  }
  ++a1[15];
}

void sub_481B0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_347;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 48) & 0x3FFF;
    uint64_t v7 = (char *)v5[482];
    unint64_t v8 = v5[483];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v15 = (char *)v5[481];
      uint64_t v16 = (v7 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_339;
      }
      unint64_t v17 = v8 - (void)v15;
      unint64_t v18 = (uint64_t)(v8 - (void)v15) >> 2;
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        char v20 = (char *)sub_5714((uint64_t)(v5 + 483), v19);
        uint64_t v7 = (char *)v5[482];
        unint64_t v15 = (char *)v5[481];
      }
      else
      {
        char v20 = 0;
      }
      unint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      *(void *)unint64_t v21 = v6;
      char v9 = v21 + 8;
      while (v7 != v15)
      {
        uint64_t v23 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v21 - 1) = v23;
        v21 -= 8;
      }
      v5[481] = v21;
      v5[482] = v9;
      v5[483] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v7 = v6;
      char v9 = v7 + 8;
    }
    v5[482] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v24 = *(void **)a1[1];
      uint64_t v25 = *(_WORD *)(a1[2] + 32) & 0x3FFF;
      uint64_t v26 = (char *)v24[485];
      unint64_t v27 = v24[486];
      if ((unint64_t)v26 >= v27)
      {
        unint64_t v29 = (char *)v24[484];
        uint64_t v30 = (v26 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_339;
        }
        unint64_t v31 = v27 - (void)v29;
        unint64_t v32 = (uint64_t)(v27 - (void)v29) >> 2;
        if (v32 <= v30 + 1) {
          unint64_t v32 = v30 + 1;
        }
        if (v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_5714((uint64_t)(v24 + 486), v33);
          uint64_t v26 = (char *)v24[485];
          unint64_t v29 = (char *)v24[484];
        }
        else
        {
          uint64_t v34 = 0;
        }
        unint64_t v35 = &v34[8 * v30];
        uint64_t v36 = &v34[8 * v33];
        *(void *)unint64_t v35 = v25;
        uint64_t v28 = v35 + 8;
        while (v26 != v29)
        {
          uint64_t v37 = *((void *)v26 - 1);
          v26 -= 8;
          *((void *)v35 - 1) = v37;
          v35 -= 8;
        }
        v24[484] = v35;
        v24[485] = v28;
        v24[486] = v36;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(void *)uint64_t v26 = v25;
        uint64_t v28 = v26 + 8;
      }
      v24[485] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v38 = *(void **)a1[1];
        uint64_t v39 = *(_WORD *)(a1[2] + 50) & 0x3FFF;
        uint64_t v40 = (char *)v38[488];
        unint64_t v41 = v38[489];
        if ((unint64_t)v40 >= v41)
        {
          unint64_t v43 = (char *)v38[487];
          uint64_t v44 = (v40 - v43) >> 3;
          if ((unint64_t)(v44 + 1) >> 61) {
            goto LABEL_339;
          }
          unint64_t v45 = v41 - (void)v43;
          unint64_t v46 = (uint64_t)(v41 - (void)v43) >> 2;
          if (v46 <= v44 + 1) {
            unint64_t v46 = v44 + 1;
          }
          if (v45 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47)
          {
            unint64_t v48 = (char *)sub_5714((uint64_t)(v38 + 489), v47);
            uint64_t v40 = (char *)v38[488];
            unint64_t v43 = (char *)v38[487];
          }
          else
          {
            unint64_t v48 = 0;
          }
          uint64_t v49 = &v48[8 * v44];
          uint64_t v50 = &v48[8 * v47];
          *(void *)uint64_t v49 = v39;
          uint64_t v42 = v49 + 8;
          while (v40 != v43)
          {
            uint64_t v51 = *((void *)v40 - 1);
            v40 -= 8;
            *((void *)v49 - 1) = v51;
            v49 -= 8;
          }
          v38[487] = v49;
          v38[488] = v42;
          v38[489] = v50;
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(void *)uint64_t v40 = v39;
          uint64_t v42 = v40 + 8;
        }
        v38[488] = v42;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v52 = *(void **)a1[1];
          uint64_t v53 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
          long long v54 = (char *)v52[491];
          unint64_t v55 = v52[492];
          if ((unint64_t)v54 >= v55)
          {
            unint64_t v57 = (char *)v52[490];
            uint64_t v58 = (v54 - v57) >> 3;
            if ((unint64_t)(v58 + 1) >> 61) {
              goto LABEL_339;
            }
            unint64_t v59 = v55 - (void)v57;
            unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 2;
            if (v60 <= v58 + 1) {
              unint64_t v60 = v58 + 1;
            }
            if (v59 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v60;
            }
            if (v61)
            {
              unint64_t v62 = (char *)sub_5714((uint64_t)(v52 + 492), v61);
              long long v54 = (char *)v52[491];
              unint64_t v57 = (char *)v52[490];
            }
            else
            {
              unint64_t v62 = 0;
            }
            unint64_t v63 = &v62[8 * v58];
            unsigned __int16 v64 = &v62[8 * v61];
            *(void *)unint64_t v63 = v53;
            int v56 = v63 + 8;
            while (v54 != v57)
            {
              uint64_t v65 = *((void *)v54 - 1);
              v54 -= 8;
              *((void *)v63 - 1) = v65;
              v63 -= 8;
            }
            v52[490] = v63;
            v52[491] = v56;
            v52[492] = v64;
            if (v57) {
              operator delete(v57);
            }
          }
          else
          {
            *(void *)long long v54 = v53;
            int v56 = v54 + 8;
          }
          v52[491] = v56;
          if (!*(_DWORD *)(v3 + 48))
          {
            unint64_t v66 = *(void **)a1[1];
            uint64_t v67 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
            char v68 = (char *)v66[494];
            unint64_t v69 = v66[495];
            if ((unint64_t)v68 >= v69)
            {
              uint64_t v71 = (char *)v66[493];
              uint64_t v72 = (v68 - v71) >> 3;
              if ((unint64_t)(v72 + 1) >> 61) {
                goto LABEL_339;
              }
              unint64_t v73 = v69 - (void)v71;
              unint64_t v74 = (uint64_t)(v69 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_5714((uint64_t)(v66 + 495), v75);
                char v68 = (char *)v66[494];
                uint64_t v71 = (char *)v66[493];
              }
              else
              {
                unint64_t v76 = 0;
              }
              int v77 = &v76[8 * v72];
              unint64_t v78 = &v76[8 * v75];
              *(void *)int v77 = v67;
              unint64_t v70 = v77 + 8;
              while (v68 != v71)
              {
                uint64_t v79 = *((void *)v68 - 1);
                v68 -= 8;
                *((void *)v77 - 1) = v79;
                v77 -= 8;
              }
              v66[493] = v77;
              v66[494] = v70;
              v66[495] = v78;
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *(void *)char v68 = v67;
              unint64_t v70 = v68 + 8;
            }
            v66[494] = v70;
            if (!*(_DWORD *)(v3 + 48))
            {
              int v80 = *(void **)a1[1];
              uint64_t v81 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
              long long v82 = (char *)v80[497];
              unint64_t v83 = v80[498];
              if ((unint64_t)v82 >= v83)
              {
                int v85 = (char *)v80[496];
                uint64_t v86 = (v82 - v85) >> 3;
                if ((unint64_t)(v86 + 1) >> 61) {
                  goto LABEL_339;
                }
                unint64_t v87 = v83 - (void)v85;
                unint64_t v88 = (uint64_t)(v83 - (void)v85) >> 2;
                if (v88 <= v86 + 1) {
                  unint64_t v88 = v86 + 1;
                }
                if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v88;
                }
                if (v89)
                {
                  unint64_t v90 = (char *)sub_5714((uint64_t)(v80 + 498), v89);
                  long long v82 = (char *)v80[497];
                  int v85 = (char *)v80[496];
                }
                else
                {
                  unint64_t v90 = 0;
                }
                unsigned int v91 = &v90[8 * v86];
                unint64_t v92 = &v90[8 * v89];
                *(void *)unsigned int v91 = v81;
                int v84 = v91 + 8;
                while (v82 != v85)
                {
                  uint64_t v93 = *((void *)v82 - 1);
                  v82 -= 8;
                  *((void *)v91 - 1) = v93;
                  v91 -= 8;
                }
                v80[496] = v91;
                v80[497] = v84;
                v80[498] = v92;
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *(void *)long long v82 = v81;
                int v84 = v82 + 8;
              }
              v80[497] = v84;
              if (!*(_DWORD *)(v3 + 48))
              {
                unint64_t v94 = *(void **)a1[1];
                uint64_t v95 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFLL;
                unint64_t v96 = (uint64_t *)v94[500];
                unint64_t v97 = v94[501];
                if ((unint64_t)v96 >= v97)
                {
                  int v99 = (uint64_t *)v94[499];
                  uint64_t v100 = v96 - v99;
                  if ((unint64_t)(v100 + 1) >> 61) {
                    goto LABEL_339;
                  }
                  unint64_t v101 = v97 - (void)v99;
                  unint64_t v102 = (uint64_t)(v97 - (void)v99) >> 2;
                  if (v102 <= v100 + 1) {
                    unint64_t v102 = v100 + 1;
                  }
                  if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v103 = v102;
                  }
                  if (v103)
                  {
                    unint64_t v104 = (char *)sub_5714((uint64_t)(v94 + 501), v103);
                    unint64_t v96 = (uint64_t *)v94[500];
                    int v99 = (uint64_t *)v94[499];
                  }
                  else
                  {
                    unint64_t v104 = 0;
                  }
                  unint64_t v105 = (uint64_t *)&v104[8 * v100];
                  unint64_t v106 = &v104[8 * v103];
                  uint64_t *v105 = v95;
                  unint64_t v98 = v105 + 1;
                  while (v96 != v99)
                  {
                    uint64_t v107 = *--v96;
                    *--unint64_t v105 = v107;
                  }
                  v94[499] = v105;
                  v94[500] = v98;
                  v94[501] = v106;
                  if (v99) {
                    operator delete(v99);
                  }
                }
                else
                {
                  *unint64_t v96 = v95;
                  unint64_t v98 = v96 + 1;
                }
                v94[500] = v98;
                if (!*(_DWORD *)(v3 + 48))
                {
                  unint64_t v108 = *(void **)a1[1];
                  uint64_t v109 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
                  unint64_t v110 = (char *)v108[503];
                  unint64_t v111 = v108[504];
                  if ((unint64_t)v110 >= v111)
                  {
                    unint64_t v113 = (char *)v108[502];
                    uint64_t v114 = (v110 - v113) >> 3;
                    if ((unint64_t)(v114 + 1) >> 61) {
                      goto LABEL_339;
                    }
                    unint64_t v115 = v111 - (void)v113;
                    unint64_t v116 = (uint64_t)(v111 - (void)v113) >> 2;
                    if (v116 <= v114 + 1) {
                      unint64_t v116 = v114 + 1;
                    }
                    if (v115 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v117 = v116;
                    }
                    if (v117)
                    {
                      unint64_t v118 = (char *)sub_5714((uint64_t)(v108 + 504), v117);
                      unint64_t v110 = (char *)v108[503];
                      unint64_t v113 = (char *)v108[502];
                    }
                    else
                    {
                      unint64_t v118 = 0;
                    }
                    unint64_t v119 = &v118[8 * v114];
                    unsigned __int16 v120 = &v118[8 * v117];
                    *(void *)unint64_t v119 = v109;
                    unint64_t v112 = v119 + 8;
                    while (v110 != v113)
                    {
                      uint64_t v121 = *((void *)v110 - 1);
                      v110 -= 8;
                      *((void *)v119 - 1) = v121;
                      v119 -= 8;
                    }
                    v108[502] = v119;
                    v108[503] = v112;
                    v108[504] = v120;
                    if (v113) {
                      operator delete(v113);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v110 = v109;
                    unint64_t v112 = v110 + 8;
                  }
                  v108[503] = v112;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v122 = *(void **)a1[1];
                    uint64_t v123 = *(_WORD *)(a1[2] + 26) & 0x3FFF;
                    unint64_t v124 = (char *)v122[506];
                    unint64_t v125 = v122[507];
                    if ((unint64_t)v124 >= v125)
                    {
                      uint64_t v127 = (char *)v122[505];
                      uint64_t v128 = (v124 - v127) >> 3;
                      if ((unint64_t)(v128 + 1) >> 61) {
                        goto LABEL_339;
                      }
                      unint64_t v129 = v125 - (void)v127;
                      unint64_t v130 = (uint64_t)(v125 - (void)v127) >> 2;
                      if (v130 <= v128 + 1) {
                        unint64_t v130 = v128 + 1;
                      }
                      if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v131 = v130;
                      }
                      if (v131)
                      {
                        unsigned int v132 = (char *)sub_5714((uint64_t)(v122 + 507), v131);
                        unint64_t v124 = (char *)v122[506];
                        uint64_t v127 = (char *)v122[505];
                      }
                      else
                      {
                        unsigned int v132 = 0;
                      }
                      uint64_t v133 = &v132[8 * v128];
                      unint64_t v134 = &v132[8 * v131];
                      *(void *)uint64_t v133 = v123;
                      unint64_t v126 = v133 + 8;
                      while (v124 != v127)
                      {
                        uint64_t v135 = *((void *)v124 - 1);
                        v124 -= 8;
                        *((void *)v133 - 1) = v135;
                        v133 -= 8;
                      }
                      v122[505] = v133;
                      v122[506] = v126;
                      v122[507] = v134;
                      if (v127) {
                        operator delete(v127);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v124 = v123;
                      unint64_t v126 = v124 + 8;
                    }
                    v122[506] = v126;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      unint64_t v136 = *(void **)a1[1];
                      uint64_t v137 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
                      unint64_t v138 = (char *)v136[509];
                      unint64_t v139 = v136[510];
                      if ((unint64_t)v138 >= v139)
                      {
                        unint64_t v141 = (char *)v136[508];
                        uint64_t v142 = (v138 - v141) >> 3;
                        if ((unint64_t)(v142 + 1) >> 61) {
                          goto LABEL_339;
                        }
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          char v146 = (char *)sub_5714((uint64_t)(v136 + 510), v145);
                          unint64_t v138 = (char *)v136[509];
                          unint64_t v141 = (char *)v136[508];
                        }
                        else
                        {
                          char v146 = 0;
                        }
                        char v147 = &v146[8 * v142];
                        unint64_t v148 = &v146[8 * v145];
                        *(void *)char v147 = v137;
                        unint64_t v140 = v147 + 8;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *((void *)v138 - 1);
                          v138 -= 8;
                          *((void *)v147 - 1) = v149;
                          v147 -= 8;
                        }
                        v136[508] = v147;
                        v136[509] = v140;
                        v136[510] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                      }
                      else
                      {
                        *(void *)unint64_t v138 = v137;
                        unint64_t v140 = v138 + 8;
                      }
                      v136[509] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        unint64_t v150 = *(void **)a1[1];
                        uint64_t v151 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
                        unint64_t v152 = (char *)v150[512];
                        unint64_t v153 = v150[513];
                        if ((unint64_t)v152 >= v153)
                        {
                          unsigned int v155 = (char *)v150[511];
                          uint64_t v156 = (v152 - v155) >> 3;
                          if ((unint64_t)(v156 + 1) >> 61) {
                            goto LABEL_339;
                          }
                          unint64_t v157 = v153 - (void)v155;
                          unint64_t v158 = (uint64_t)(v153 - (void)v155) >> 2;
                          if (v158 <= v156 + 1) {
                            unint64_t v158 = v156 + 1;
                          }
                          if (v157 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v159 = v158;
                          }
                          if (v159)
                          {
                            unint64_t v160 = (char *)sub_5714((uint64_t)(v150 + 513), v159);
                            unint64_t v152 = (char *)v150[512];
                            unsigned int v155 = (char *)v150[511];
                          }
                          else
                          {
                            unint64_t v160 = 0;
                          }
                          unint64_t v161 = &v160[8 * v156];
                          unsigned __int16 v162 = &v160[8 * v159];
                          *(void *)unint64_t v161 = v151;
                          unint64_t v154 = v161 + 8;
                          while (v152 != v155)
                          {
                            uint64_t v163 = *((void *)v152 - 1);
                            v152 -= 8;
                            *((void *)v161 - 1) = v163;
                            v161 -= 8;
                          }
                          v150[511] = v161;
                          v150[512] = v154;
                          v150[513] = v162;
                          if (v155) {
                            operator delete(v155);
                          }
                        }
                        else
                        {
                          *(void *)unint64_t v152 = v151;
                          unint64_t v154 = v152 + 8;
                        }
                        v150[512] = v154;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          unsigned int v164 = *(void **)a1[1];
                          uint64_t v165 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
                          unsigned int v166 = (char *)v164[515];
                          unint64_t v167 = v164[516];
                          if ((unint64_t)v166 >= v167)
                          {
                            __int16 v169 = (char *)v164[514];
                            uint64_t v170 = (v166 - v169) >> 3;
                            if ((unint64_t)(v170 + 1) >> 61) {
                              goto LABEL_339;
                            }
                            unint64_t v171 = v167 - (void)v169;
                            unint64_t v172 = (uint64_t)(v167 - (void)v169) >> 2;
                            if (v172 <= v170 + 1) {
                              unint64_t v172 = v170 + 1;
                            }
                            if (v171 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v173 = v172;
                            }
                            if (v173)
                            {
                              unint64_t v174 = (char *)sub_5714((uint64_t)(v164 + 516), v173);
                              unsigned int v166 = (char *)v164[515];
                              __int16 v169 = (char *)v164[514];
                            }
                            else
                            {
                              unint64_t v174 = 0;
                            }
                            unint64_t v175 = &v174[8 * v170];
                            unint64_t v176 = &v174[8 * v173];
                            *(void *)unint64_t v175 = v165;
                            unsigned int v168 = v175 + 8;
                            while (v166 != v169)
                            {
                              uint64_t v177 = *((void *)v166 - 1);
                              v166 -= 8;
                              *((void *)v175 - 1) = v177;
                              v175 -= 8;
                            }
                            v164[514] = v175;
                            v164[515] = v168;
                            v164[516] = v176;
                            if (v169) {
                              operator delete(v169);
                            }
                          }
                          else
                          {
                            *(void *)unsigned int v166 = v165;
                            unsigned int v168 = v166 + 8;
                          }
                          v164[515] = v168;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            int v178 = *(void **)a1[1];
                            uint64_t v179 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
                            unint64_t v180 = (char *)v178[518];
                            unint64_t v181 = v178[519];
                            if ((unint64_t)v180 >= v181)
                            {
                              uint64_t v183 = (char *)v178[517];
                              uint64_t v184 = (v180 - v183) >> 3;
                              if ((unint64_t)(v184 + 1) >> 61) {
                                goto LABEL_339;
                              }
                              unint64_t v185 = v181 - (void)v183;
                              unint64_t v186 = (uint64_t)(v181 - (void)v183) >> 2;
                              if (v186 <= v184 + 1) {
                                unint64_t v186 = v184 + 1;
                              }
                              if (v185 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v187 = v186;
                              }
                              if (v187)
                              {
                                uint64_t v188 = (char *)sub_5714((uint64_t)(v178 + 519), v187);
                                unint64_t v180 = (char *)v178[518];
                                uint64_t v183 = (char *)v178[517];
                              }
                              else
                              {
                                uint64_t v188 = 0;
                              }
                              int v189 = &v188[8 * v184];
                              unint64_t v190 = &v188[8 * v187];
                              *(void *)int v189 = v179;
                              unsigned __int16 v182 = v189 + 8;
                              while (v180 != v183)
                              {
                                uint64_t v191 = *((void *)v180 - 1);
                                v180 -= 8;
                                *((void *)v189 - 1) = v191;
                                v189 -= 8;
                              }
                              v178[517] = v189;
                              v178[518] = v182;
                              v178[519] = v190;
                              if (v183) {
                                operator delete(v183);
                              }
                            }
                            else
                            {
                              *(void *)unint64_t v180 = v179;
                              unsigned __int16 v182 = v180 + 8;
                            }
                            v178[518] = v182;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              unint64_t v192 = *(void **)a1[1];
                              uint64_t v193 = *(_DWORD *)(a1[2] + 16) & 0x3FFFFLL;
                              uint64_t v194 = (uint64_t *)v192[521];
                              unint64_t v195 = v192[522];
                              if ((unint64_t)v194 >= v195)
                              {
                                unint64_t v197 = (uint64_t *)v192[520];
                                uint64_t v198 = v194 - v197;
                                if ((unint64_t)(v198 + 1) >> 61) {
                                  goto LABEL_339;
                                }
                                unint64_t v199 = v195 - (void)v197;
                                unint64_t v200 = (uint64_t)(v195 - (void)v197) >> 2;
                                if (v200 <= v198 + 1) {
                                  unint64_t v200 = v198 + 1;
                                }
                                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v201 = v200;
                                }
                                if (v201)
                                {
                                  unint64_t v202 = (char *)sub_5714((uint64_t)(v192 + 522), v201);
                                  uint64_t v194 = (uint64_t *)v192[521];
                                  unint64_t v197 = (uint64_t *)v192[520];
                                }
                                else
                                {
                                  unint64_t v202 = 0;
                                }
                                unint64_t v203 = (uint64_t *)&v202[8 * v198];
                                unint64_t v204 = &v202[8 * v201];
                                uint64_t *v203 = v193;
                                unsigned int v196 = v203 + 1;
                                while (v194 != v197)
                                {
                                  uint64_t v205 = *--v194;
                                  *--unint64_t v203 = v205;
                                }
                                v192[520] = v203;
                                v192[521] = v196;
                                v192[522] = v204;
                                if (v197) {
                                  operator delete(v197);
                                }
                              }
                              else
                              {
                                *uint64_t v194 = v193;
                                unsigned int v196 = v194 + 1;
                              }
                              v192[521] = v196;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                unint64_t v206 = *(void **)a1[1];
                                uint64_t v207 = *(_WORD *)(a1[2] + 24) & 0x1FFF;
                                unint64_t v208 = (char *)v206[524];
                                unint64_t v209 = v206[525];
                                if ((unint64_t)v208 >= v209)
                                {
                                  unint64_t v211 = (char *)v206[523];
                                  uint64_t v212 = (v208 - v211) >> 3;
                                  if ((unint64_t)(v212 + 1) >> 61) {
                                    goto LABEL_339;
                                  }
                                  unint64_t v213 = v209 - (void)v211;
                                  unint64_t v214 = (uint64_t)(v209 - (void)v211) >> 2;
                                  if (v214 <= v212 + 1) {
                                    unint64_t v214 = v212 + 1;
                                  }
                                  if (v213 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v215 = v214;
                                  }
                                  if (v215)
                                  {
                                    char v216 = (char *)sub_5714((uint64_t)(v206 + 525), v215);
                                    unint64_t v208 = (char *)v206[524];
                                    unint64_t v211 = (char *)v206[523];
                                  }
                                  else
                                  {
                                    char v216 = 0;
                                  }
                                  char v217 = &v216[8 * v212];
                                  unint64_t v218 = &v216[8 * v215];
                                  *(void *)char v217 = v207;
                                  unint64_t v210 = v217 + 8;
                                  while (v208 != v211)
                                  {
                                    uint64_t v219 = *((void *)v208 - 1);
                                    v208 -= 8;
                                    *((void *)v217 - 1) = v219;
                                    v217 -= 8;
                                  }
                                  v206[523] = v217;
                                  v206[524] = v210;
                                  v206[525] = v218;
                                  if (v211) {
                                    operator delete(v211);
                                  }
                                }
                                else
                                {
                                  *(void *)unint64_t v208 = v207;
                                  unint64_t v210 = v208 + 8;
                                }
                                v206[524] = v210;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  unint64_t v220 = *(void **)a1[1];
                                  uint64_t v221 = *(_WORD *)(a1[2] + 54) & 0x1FF;
                                  int v222 = (char *)v220[527];
                                  unint64_t v223 = v220[528];
                                  if ((unint64_t)v222 >= v223)
                                  {
                                    unint64_t v225 = (char *)v220[526];
                                    uint64_t v226 = (v222 - v225) >> 3;
                                    if ((unint64_t)(v226 + 1) >> 61) {
                                      goto LABEL_339;
                                    }
                                    unint64_t v227 = v223 - (void)v225;
                                    unint64_t v228 = (uint64_t)(v223 - (void)v225) >> 2;
                                    if (v228 <= v226 + 1) {
                                      unint64_t v228 = v226 + 1;
                                    }
                                    if (v227 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v229 = v228;
                                    }
                                    if (v229)
                                    {
                                      unint64_t v230 = (char *)sub_5714((uint64_t)(v220 + 528), v229);
                                      int v222 = (char *)v220[527];
                                      unint64_t v225 = (char *)v220[526];
                                    }
                                    else
                                    {
                                      unint64_t v230 = 0;
                                    }
                                    unint64_t v231 = &v230[8 * v226];
                                    unsigned int v232 = &v230[8 * v229];
                                    *(void *)unint64_t v231 = v221;
                                    unint64_t v224 = v231 + 8;
                                    while (v222 != v225)
                                    {
                                      uint64_t v233 = *((void *)v222 - 1);
                                      v222 -= 8;
                                      *((void *)v231 - 1) = v233;
                                      v231 -= 8;
                                    }
                                    v220[526] = v231;
                                    v220[527] = v224;
                                    v220[528] = v232;
                                    if (v225) {
                                      operator delete(v225);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)int v222 = v221;
                                    unint64_t v224 = v222 + 8;
                                  }
                                  v220[527] = v224;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    unint64_t v234 = *(void **)a1[1];
                                    uint64_t v235 = *(_WORD *)(a1[2] + 38) & 0x1FF;
                                    unsigned int v236 = (char *)v234[530];
                                    unint64_t v237 = v234[531];
                                    if ((unint64_t)v236 >= v237)
                                    {
                                      unint64_t v239 = (char *)v234[529];
                                      uint64_t v240 = (v236 - v239) >> 3;
                                      if ((unint64_t)(v240 + 1) >> 61) {
                                        goto LABEL_339;
                                      }
                                      unint64_t v241 = v237 - (void)v239;
                                      unint64_t v242 = (uint64_t)(v237 - (void)v239) >> 2;
                                      if (v242 <= v240 + 1) {
                                        unint64_t v242 = v240 + 1;
                                      }
                                      if (v241 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v243 = v242;
                                      }
                                      if (v243)
                                      {
                                        unint64_t v244 = (char *)sub_5714((uint64_t)(v234 + 531), v243);
                                        unsigned int v236 = (char *)v234[530];
                                        unint64_t v239 = (char *)v234[529];
                                      }
                                      else
                                      {
                                        unint64_t v244 = 0;
                                      }
                                      unint64_t v245 = &v244[8 * v240];
                                      int v246 = &v244[8 * v243];
                                      *(void *)unint64_t v245 = v235;
                                      unint64_t v238 = v245 + 8;
                                      while (v236 != v239)
                                      {
                                        uint64_t v247 = *((void *)v236 - 1);
                                        v236 -= 8;
                                        *((void *)v245 - 1) = v247;
                                        v245 -= 8;
                                      }
                                      v234[529] = v245;
                                      v234[530] = v238;
                                      v234[531] = v246;
                                      if (v239) {
                                        operator delete(v239);
                                      }
                                    }
                                    else
                                    {
                                      *(void *)unsigned int v236 = v235;
                                      unint64_t v238 = v236 + 8;
                                    }
                                    v234[530] = v238;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      unint64_t v248 = *(void **)a1[1];
                                      uint64_t v249 = *(_WORD *)(a1[2] + 56) & 0x1FF;
                                      unsigned int v250 = (char *)v248[533];
                                      unint64_t v251 = v248[534];
                                      if ((unint64_t)v250 >= v251)
                                      {
                                        unint64_t v253 = (char *)v248[532];
                                        uint64_t v254 = (v250 - v253) >> 3;
                                        if ((unint64_t)(v254 + 1) >> 61) {
                                          goto LABEL_339;
                                        }
                                        unint64_t v255 = v251 - (void)v253;
                                        unint64_t v256 = (uint64_t)(v251 - (void)v253) >> 2;
                                        if (v256 <= v254 + 1) {
                                          unint64_t v256 = v254 + 1;
                                        }
                                        if (v255 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v257 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v257 = v256;
                                        }
                                        if (v257)
                                        {
                                          unsigned int v258 = (char *)sub_5714((uint64_t)(v248 + 534), v257);
                                          unsigned int v250 = (char *)v248[533];
                                          unint64_t v253 = (char *)v248[532];
                                        }
                                        else
                                        {
                                          unsigned int v258 = 0;
                                        }
                                        unint64_t v259 = &v258[8 * v254];
                                        unint64_t v260 = &v258[8 * v257];
                                        *(void *)unint64_t v259 = v249;
                                        unint64_t v252 = v259 + 8;
                                        while (v250 != v253)
                                        {
                                          uint64_t v261 = *((void *)v250 - 1);
                                          v250 -= 8;
                                          *((void *)v259 - 1) = v261;
                                          v259 -= 8;
                                        }
                                        v248[532] = v259;
                                        v248[533] = v252;
                                        v248[534] = v260;
                                        if (v253) {
                                          operator delete(v253);
                                        }
                                      }
                                      else
                                      {
                                        *(void *)unsigned int v250 = v249;
                                        unint64_t v252 = v250 + 8;
                                      }
                                      v248[533] = v252;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        unint64_t v262 = *(void **)a1[1];
                                        uint64_t v263 = *(_WORD *)(a1[2] + 40) & 0x1FF;
                                        unint64_t v264 = (char *)v262[536];
                                        unint64_t v265 = v262[537];
                                        if ((unint64_t)v264 >= v265)
                                        {
                                          unint64_t v267 = (char *)v262[535];
                                          uint64_t v268 = (v264 - v267) >> 3;
                                          if ((unint64_t)(v268 + 1) >> 61) {
                                            goto LABEL_339;
                                          }
                                          unint64_t v269 = v265 - (void)v267;
                                          unint64_t v270 = (uint64_t)(v265 - (void)v267) >> 2;
                                          if (v270 <= v268 + 1) {
                                            unint64_t v270 = v268 + 1;
                                          }
                                          if (v269 >= 0x7FFFFFFFFFFFFFF8) {
                                            unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v271 = v270;
                                          }
                                          if (v271)
                                          {
                                            unint64_t v272 = (char *)sub_5714((uint64_t)(v262 + 537), v271);
                                            unint64_t v264 = (char *)v262[536];
                                            unint64_t v267 = (char *)v262[535];
                                          }
                                          else
                                          {
                                            unint64_t v272 = 0;
                                          }
                                          unint64_t v273 = &v272[8 * v268];
                                          unsigned int v274 = &v272[8 * v271];
                                          *(void *)unint64_t v273 = v263;
                                          unint64_t v266 = v273 + 8;
                                          while (v264 != v267)
                                          {
                                            uint64_t v275 = *((void *)v264 - 1);
                                            v264 -= 8;
                                            *((void *)v273 - 1) = v275;
                                            v273 -= 8;
                                          }
                                          v262[535] = v273;
                                          v262[536] = v266;
                                          v262[537] = v274;
                                          if (v267) {
                                            operator delete(v267);
                                          }
                                        }
                                        else
                                        {
                                          *(void *)unint64_t v264 = v263;
                                          unint64_t v266 = v264 + 8;
                                        }
                                        v262[536] = v266;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          uint64_t v276 = a1[2];
                                          unint64_t v277 = *(void **)a1[1];
                                          unint64_t v278 = (unint64_t)*(unsigned int *)(v276 + 20) >> 18;
                                          int v279 = (unint64_t *)v277[539];
                                          unint64_t v280 = v277[540];
                                          if ((unint64_t)v279 < v280)
                                          {
                                            *int v279 = v278;
                                            unint64_t v281 = v279 + 1;
LABEL_346:
                                            v277[539] = v281;
                                            goto LABEL_347;
                                          }
                                          unsigned int v282 = (unint64_t *)v277[538];
                                          uint64_t v283 = v279 - v282;
                                          if (!((unint64_t)(v283 + 1) >> 61))
                                          {
                                            unint64_t v284 = v280 - (void)v282;
                                            unint64_t v285 = (uint64_t)(v280 - (void)v282) >> 2;
                                            if (v285 <= v283 + 1) {
                                              unint64_t v285 = v283 + 1;
                                            }
                                            if (v284 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v286 = v285;
                                            }
                                            if (v286)
                                            {
                                              unint64_t v287 = (char *)sub_5714((uint64_t)(v277 + 540), v286);
                                              int v279 = (unint64_t *)v277[539];
                                              unsigned int v282 = (unint64_t *)v277[538];
                                            }
                                            else
                                            {
                                              unint64_t v287 = 0;
                                            }
                                            unint64_t v288 = (unint64_t *)&v287[8 * v283];
                                            int v289 = &v287[8 * v286];
                                            unint64_t *v288 = v278;
                                            unint64_t v281 = v288 + 1;
                                            while (v279 != v282)
                                            {
                                              unint64_t v290 = *--v279;
                                              *--unint64_t v288 = v290;
                                            }
                                            v277[538] = v288;
                                            v277[539] = v281;
                                            v277[540] = v289;
                                            if (v282) {
                                              operator delete(v282);
                                            }
                                            goto LABEL_346;
                                          }
LABEL_339:
                                          sub_566C();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_347:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = a1[2];
    unint64_t v12 = (void *)*v11;
    *(void *)(v12[482] - 8) += *(_WORD *)(v10 + 48) & 0x3FFF;
    *(void *)(v12[485] - 8) += *(_WORD *)(v10 + 32) & 0x3FFF;
    *(void *)(v12[488] - 8) += *(_WORD *)(v10 + 50) & 0x3FFF;
    *(void *)(v12[491] - 8) += *(_WORD *)(v10 + 34) & 0x3FFF;
    *(void *)(v12[494] - 8) += *(_WORD *)(v10 + 52) & 0x3FFF;
    *(void *)(v12[497] - 8) += *(_WORD *)(v10 + 36) & 0x3FFF;
    *(void *)(v12[500] - 8) += *(_DWORD *)(v10 + 20) & 0x3FFFF;
    *(void *)(v12[503] - 8) += *(_WORD *)(v10 + 42) & 0x3FFF;
    *(void *)(v12[506] - 8) += *(_WORD *)(v10 + 26) & 0x3FFF;
    *(void *)(v12[509] - 8) += *(_WORD *)(v10 + 44) & 0x3FFF;
    uint64_t v13 = a1[2];
    uint64_t v14 = (void *)*v11;
    *(void *)(v14[512] - 8) += *(_WORD *)(v13 + 28) & 0x3FFF;
    *(void *)(v14[515] - 8) += *(_WORD *)(v13 + 46) & 0x3FFF;
    *(void *)(v14[518] - 8) += *(_WORD *)(v13 + 30) & 0x3FFF;
    *(void *)(v14[521] - 8) += *(_DWORD *)(v13 + 16) & 0x3FFFF;
    *(void *)(v14[524] - 8) += *(_WORD *)(v13 + 24) & 0x1FFF;
    *(void *)(v14[527] - 8) += *(_WORD *)(v13 + 54) & 0x1FF;
    *(void *)(v14[530] - 8) += *(_WORD *)(v13 + 38) & 0x1FF;
    *(void *)(v14[533] - 8) += *(_WORD *)(v13 + 56) & 0x1FF;
    *(void *)(v14[536] - 8) += *(_WORD *)(v13 + 40) & 0x1FF;
    *(void *)(v14[539] - 8) += (unint64_t)*(unsigned int *)(v13 + 20) >> 18;
  }
}

void sub_49440(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_176;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
    uint64_t v7 = (uint64_t *)v5[572];
    unint64_t v8 = v5[573];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v12 = (uint64_t *)v5[571];
      uint64_t v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_178;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        unint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 573), v16);
        uint64_t v7 = (uint64_t *)v5[572];
        unint64_t v12 = (uint64_t *)v5[571];
      }
      else
      {
        unint64_t v17 = 0;
      }
      unint64_t v18 = (uint64_t *)&v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *unint64_t v18 = v6;
      char v9 = v18 + 1;
      while (v7 != v12)
      {
        uint64_t v20 = *--v7;
        *--unint64_t v18 = v20;
      }
      v5[571] = v18;
      v5[572] = v9;
      v5[573] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *uint64_t v7 = v6;
      char v9 = v7 + 1;
    }
    v5[572] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      uint64_t v23 = (uint64_t *)v21[575];
      unint64_t v24 = v21[576];
      if ((unint64_t)v23 >= v24)
      {
        uint64_t v26 = (uint64_t *)v21[574];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_178;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 576), v30);
          uint64_t v23 = (uint64_t *)v21[575];
          uint64_t v26 = (uint64_t *)v21[574];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        uint64_t *v32 = v22;
        uint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[574] = v32;
        v21[575] = v25;
        v21[576] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        uint64_t v25 = v23 + 1;
      }
      v21[575] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
        uint64_t v37 = (uint64_t *)v35[578];
        unint64_t v38 = v35[579];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (uint64_t *)v35[577];
          uint64_t v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_178;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 579), v44);
            uint64_t v37 = (uint64_t *)v35[578];
            uint64_t v40 = (uint64_t *)v35[577];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = (uint64_t *)&v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *unint64_t v46 = v36;
          uint64_t v39 = v46 + 1;
          while (v37 != v40)
          {
            uint64_t v48 = *--v37;
            *--unint64_t v46 = v48;
          }
          v35[577] = v46;
          v35[578] = v39;
          v35[579] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *uint64_t v37 = v36;
          uint64_t v39 = v37 + 1;
        }
        v35[578] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = a1[1];
          uint64_t v50 = *(void **)v49;
          uint64_t v51 = *(unsigned __int16 *)(a1[2] + 50);
          uint64_t v52 = *(char **)(*(void *)v49 + 4648);
          unint64_t v53 = *(void *)(*(void *)v49 + 4656);
          if ((unint64_t)v52 >= v53)
          {
            unint64_t v55 = (char *)v50[580];
            uint64_t v56 = (v52 - v55) >> 3;
            if ((unint64_t)(v56 + 1) >> 61) {
              goto LABEL_178;
            }
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              unint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 582), v59);
              uint64_t v52 = (char *)v50[581];
              unint64_t v55 = (char *)v50[580];
            }
            else
            {
              unint64_t v60 = 0;
            }
            unint64_t v61 = &v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *(void *)unint64_t v61 = v51;
            long long v54 = v61 + 8;
            while (v52 != v55)
            {
              uint64_t v63 = *((void *)v52 - 1);
              v52 -= 8;
              *((void *)v61 - 1) = v63;
              v61 -= 8;
            }
            v50[580] = v61;
            v50[581] = v54;
            v50[582] = v62;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(void *)uint64_t v52 = v51;
            long long v54 = v52 + 8;
          }
          v50[581] = v54;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v64 = a1[1];
            uint64_t v65 = *(void **)v64;
            uint64_t v66 = *(unsigned __int16 *)(a1[2] + 48);
            uint64_t v67 = *(char **)(*(void *)v64 + 4672);
            unint64_t v68 = *(void *)(*(void *)v64 + 4680);
            if ((unint64_t)v67 >= v68)
            {
              unint64_t v70 = (char *)v65[583];
              uint64_t v71 = (v67 - v70) >> 3;
              if ((unint64_t)(v71 + 1) >> 61) {
                goto LABEL_178;
              }
              unint64_t v72 = v68 - (void)v70;
              unint64_t v73 = (uint64_t)(v68 - (void)v70) >> 2;
              if (v73 <= v71 + 1) {
                unint64_t v73 = v71 + 1;
              }
              if (v72 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v73;
              }
              if (v74)
              {
                unint64_t v75 = (char *)sub_5714((uint64_t)(v65 + 585), v74);
                uint64_t v67 = (char *)v65[584];
                unint64_t v70 = (char *)v65[583];
              }
              else
              {
                unint64_t v75 = 0;
              }
              unint64_t v76 = &v75[8 * v71];
              int v77 = &v75[8 * v74];
              *(void *)unint64_t v76 = v66;
              unint64_t v69 = v76 + 8;
              while (v67 != v70)
              {
                uint64_t v78 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v76 - 1) = v78;
                v76 -= 8;
              }
              v65[583] = v76;
              v65[584] = v69;
              v65[585] = v77;
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[584] = v69;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v79 = *(void **)a1[1];
              uint64_t v80 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
              uint64_t v81 = (uint64_t *)v79[587];
              unint64_t v82 = v79[588];
              if ((unint64_t)v81 >= v82)
              {
                int v84 = (uint64_t *)v79[586];
                uint64_t v85 = v81 - v84;
                if ((unint64_t)(v85 + 1) >> 61) {
                  goto LABEL_178;
                }
                unint64_t v86 = v82 - (void)v84;
                unint64_t v87 = (uint64_t)(v82 - (void)v84) >> 2;
                if (v87 <= v85 + 1) {
                  unint64_t v87 = v85 + 1;
                }
                if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v88 = v87;
                }
                if (v88)
                {
                  unint64_t v89 = (char *)sub_5714((uint64_t)(v79 + 588), v88);
                  uint64_t v81 = (uint64_t *)v79[587];
                  int v84 = (uint64_t *)v79[586];
                }
                else
                {
                  unint64_t v89 = 0;
                }
                unint64_t v90 = (uint64_t *)&v89[8 * v85];
                unsigned int v91 = &v89[8 * v88];
                *unint64_t v90 = v80;
                unint64_t v83 = v90 + 1;
                while (v81 != v84)
                {
                  uint64_t v92 = *--v81;
                  *--unint64_t v90 = v92;
                }
                v79[586] = v90;
                v79[587] = v83;
                v79[588] = v91;
                if (v84) {
                  operator delete(v84);
                }
              }
              else
              {
                uint64_t *v81 = v80;
                unint64_t v83 = v81 + 1;
              }
              v79[587] = v83;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v93 = *(void **)a1[1];
                uint64_t v94 = *(_DWORD *)(a1[2] + 28) & 0xFFFFFLL;
                uint64_t v95 = (uint64_t *)v93[590];
                unint64_t v96 = v93[591];
                if ((unint64_t)v95 >= v96)
                {
                  unint64_t v98 = (uint64_t *)v93[589];
                  uint64_t v99 = v95 - v98;
                  if ((unint64_t)(v99 + 1) >> 61) {
                    goto LABEL_178;
                  }
                  unint64_t v100 = v96 - (void)v98;
                  unint64_t v101 = (uint64_t)(v96 - (void)v98) >> 2;
                  if (v101 <= v99 + 1) {
                    unint64_t v101 = v99 + 1;
                  }
                  if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    unint64_t v103 = (char *)sub_5714((uint64_t)(v93 + 591), v102);
                    uint64_t v95 = (uint64_t *)v93[590];
                    unint64_t v98 = (uint64_t *)v93[589];
                  }
                  else
                  {
                    unint64_t v103 = 0;
                  }
                  unint64_t v104 = (uint64_t *)&v103[8 * v99];
                  unint64_t v105 = &v103[8 * v102];
                  uint64_t *v104 = v94;
                  unint64_t v97 = v104 + 1;
                  while (v95 != v98)
                  {
                    uint64_t v106 = *--v95;
                    *--unint64_t v104 = v106;
                  }
                  v93[589] = v104;
                  v93[590] = v97;
                  v93[591] = v105;
                  if (v98) {
                    operator delete(v98);
                  }
                }
                else
                {
                  *uint64_t v95 = v94;
                  unint64_t v97 = v95 + 1;
                }
                v93[590] = v97;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v107 = *(void **)a1[1];
                  uint64_t v108 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
                  uint64_t v109 = (uint64_t *)v107[593];
                  unint64_t v110 = v107[594];
                  if ((unint64_t)v109 >= v110)
                  {
                    unint64_t v112 = (uint64_t *)v107[592];
                    uint64_t v113 = v109 - v112;
                    if ((unint64_t)(v113 + 1) >> 61) {
                      goto LABEL_178;
                    }
                    unint64_t v114 = v110 - (void)v112;
                    unint64_t v115 = (uint64_t)(v110 - (void)v112) >> 2;
                    if (v115 <= v113 + 1) {
                      unint64_t v115 = v113 + 1;
                    }
                    if (v114 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v116 = v115;
                    }
                    if (v116)
                    {
                      unint64_t v117 = (char *)sub_5714((uint64_t)(v107 + 594), v116);
                      uint64_t v109 = (uint64_t *)v107[593];
                      unint64_t v112 = (uint64_t *)v107[592];
                    }
                    else
                    {
                      unint64_t v117 = 0;
                    }
                    unint64_t v118 = (uint64_t *)&v117[8 * v113];
                    unint64_t v119 = &v117[8 * v116];
                    *unint64_t v118 = v108;
                    unint64_t v111 = v118 + 1;
                    while (v109 != v112)
                    {
                      uint64_t v120 = *--v109;
                      *--unint64_t v118 = v120;
                    }
                    v107[592] = v118;
                    v107[593] = v111;
                    v107[594] = v119;
                    if (v112) {
                      operator delete(v112);
                    }
                  }
                  else
                  {
                    uint64_t *v109 = v108;
                    unint64_t v111 = v109 + 1;
                  }
                  v107[593] = v111;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    uint64_t v121 = *(void **)a1[1];
                    uint64_t v122 = *(_DWORD *)(a1[2] + 16) & 0xFFFFFLL;
                    uint64_t v123 = (uint64_t *)v121[596];
                    unint64_t v124 = v121[597];
                    if ((unint64_t)v123 >= v124)
                    {
                      unint64_t v126 = (uint64_t *)v121[595];
                      uint64_t v127 = v123 - v126;
                      if ((unint64_t)(v127 + 1) >> 61) {
                        goto LABEL_178;
                      }
                      unint64_t v128 = v124 - (void)v126;
                      unint64_t v129 = (uint64_t)(v124 - (void)v126) >> 2;
                      if (v129 <= v127 + 1) {
                        unint64_t v129 = v127 + 1;
                      }
                      if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v130 = v129;
                      }
                      if (v130)
                      {
                        unint64_t v131 = (char *)sub_5714((uint64_t)(v121 + 597), v130);
                        uint64_t v123 = (uint64_t *)v121[596];
                        unint64_t v126 = (uint64_t *)v121[595];
                      }
                      else
                      {
                        unint64_t v131 = 0;
                      }
                      unsigned int v132 = (uint64_t *)&v131[8 * v127];
                      uint64_t v133 = &v131[8 * v130];
                      uint64_t *v132 = v122;
                      unint64_t v125 = v132 + 1;
                      while (v123 != v126)
                      {
                        uint64_t v134 = *--v123;
                        *--unsigned int v132 = v134;
                      }
                      v121[595] = v132;
                      v121[596] = v125;
                      v121[597] = v133;
                      if (v126) {
                        operator delete(v126);
                      }
                    }
                    else
                    {
                      *uint64_t v123 = v122;
                      unint64_t v125 = v123 + 1;
                    }
                    v121[596] = v125;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v135 = a1[2];
                      unint64_t v136 = *(void **)a1[1];
                      uint64_t v137 = *(_DWORD *)(v135 + 20) & 0xFFFFFLL;
                      unint64_t v138 = (uint64_t *)v136[599];
                      unint64_t v139 = v136[600];
                      if ((unint64_t)v138 < v139)
                      {
                        uint64_t *v138 = v137;
                        unint64_t v140 = v138 + 1;
LABEL_175:
                        v136[599] = v140;
                        goto LABEL_176;
                      }
                      unint64_t v141 = (uint64_t *)v136[598];
                      uint64_t v142 = v138 - v141;
                      if (!((unint64_t)(v142 + 1) >> 61))
                      {
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          char v146 = (char *)sub_5714((uint64_t)(v136 + 600), v145);
                          unint64_t v138 = (uint64_t *)v136[599];
                          unint64_t v141 = (uint64_t *)v136[598];
                        }
                        else
                        {
                          char v146 = 0;
                        }
                        char v147 = (uint64_t *)&v146[8 * v142];
                        unint64_t v148 = &v146[8 * v145];
                        *char v147 = v137;
                        unint64_t v140 = v147 + 1;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *--v138;
                          *--char v147 = v149;
                        }
                        v136[598] = v147;
                        v136[599] = v140;
                        v136[600] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                        goto LABEL_175;
                      }
LABEL_178:
                      sub_566C();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_176:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[572] - 8) += *(_DWORD *)(v10 + 36) & 0xFFFFF;
    *(void *)(v11[575] - 8) += *(_DWORD *)(v10 + 40) & 0xFFFFF;
    *(void *)(v11[578] - 8) += *(_DWORD *)(v10 + 44) & 0xFFFFF;
    *(void *)(v11[581] - 8) += *(unsigned __int16 *)(v10 + 50);
    *(void *)(v11[584] - 8) += *(unsigned __int16 *)(v10 + 48);
    *(void *)(v11[587] - 8) += *(_DWORD *)(v10 + 24) & 0xFFFFF;
    *(void *)(v11[590] - 8) += *(_DWORD *)(v10 + 28) & 0xFFFFF;
    *(void *)(v11[593] - 8) += *(_DWORD *)(v10 + 32) & 0xFFFFF;
    *(void *)(v11[596] - 8) += *(_DWORD *)(v10 + 16) & 0xFFFFF;
    *(void *)(v11[599] - 8) += *(_DWORD *)(v10 + 20) & 0xFFFFF;
  }
}