uint64_t sub_11C57C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t (*v13)(void, int *);
  uint64_t vars8;

  v5 = (unsigned int *)(*a2)[2](a2, (int *)"_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  v6 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  v8 = v7;
  v9 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  v10 = sub_D634(v6, v8, v9);
  v12 = sub_13828(v5, v10, v11);
  v13 = **a2;

  return v13(a2, v12);
}

int *sub_11C6F4(unsigned int *a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  agxps_gpu_get_gen(a1);
  agxps_gpu_get_variant((uint64_t)a1);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59");
  uint64_t v7 = sub_D5D4();
  v9 = sub_13828(v6, v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3");
  uint64_t v11 = sub_D5D4();
  v13 = sub_13828(v10, v11, v12);
  v14 = sub_DCCC((unsigned int *)v9, (unsigned int *)v13);
  uint64_t v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v17 = sub_13828((unsigned int *)v14, v15, v16);
  v18 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Cache Utilization");

  return sub_DCCC(v18, v19);
}

uint64_t sub_11C918(unsigned int *a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  agxps_gpu_get_gen(a1);
  agxps_gpu_get_variant((uint64_t)a1);
  v6 = (unsigned int *)(*a2)[2](a2, (int *)"A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F");
  uint64_t v7 = sub_D5D4();
  v9 = sub_13828(v6, v7, v8);
  v10 = (unsigned int *)(*a2)[2](a2, (int *)"18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85");
  uint64_t v11 = sub_D5D4();
  v13 = sub_13828(v10, v11, v12);
  v14 = sub_DCCC((unsigned int *)v9, (unsigned int *)v13);
  uint64_t v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v17 = sub_13828((unsigned int *)v14, v15, v16);
  v18 = **a2;

  return v18(a2, v17);
}

int *sub_11CAF8(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_224fc5057da0739817ec8947d2fb1ad3ff63c2ceb3fabe0e34719c0eb465d7e9");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  v13 = sub_11D84(v7, v11, v12);
  v14 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
  uint64_t v16 = sub_D5D4();

  return sub_15444(v14, v16, v15);
}

int *sub_11CC94(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_32_4");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  unint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  uint64_t v16 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
  uint64_t v18 = sub_D5D4();

  return sub_15444(v16, v18, v17);
}

uint64_t sub_11CE70(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

int *sub_11CFE8(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  uint64_t v8 = sub_12B4FC(a1, a2);
  uint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

int *sub_11D094(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b39850e6fdaf024c59701c0ee69b15fce7e4f6c92aa385e9920569a6f595745f");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
  uint64_t v16 = sub_D5D4();

  return sub_15444(v14, v16, v15);
}

int *sub_11D230(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_34_6");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  unint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  uint64_t v16 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
  uint64_t v18 = sub_D5D4();

  return sub_15444(v16, v18, v17);
}

uint64_t sub_11D40C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

int *sub_11D584(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  uint64_t v8 = sub_12B4FC(a1, a2);
  uint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

uint64_t sub_11D630(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_43_15");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_11D7A8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  unint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  uint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_11D960(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

int *sub_11DAD8(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  uint64_t v8 = sub_12B4FC(a1, a2);
  uint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

uint64_t sub_11DB84(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_48_20");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_11DCFC(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  unint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  uint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_11DEB4(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

int *sub_11E02C(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  uint64_t v8 = sub_12B4FC(a1, a2);
  uint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

uint64_t sub_11E0D8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  uint64_t v5 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_51_23");
  unint64_t v6 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_52_24");
  unint64_t v7 = sub_DCCC(v5, v6);
  uint64_t v8 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  unsigned int v10 = sub_13828((unsigned int *)v7, v8, v9);
  uint64_t v11 = **a2;

  return v11(a2, v10);
}

uint64_t sub_11E224(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  uint64_t v5 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_51_23");
  uint64_t v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v8 = sub_13828(v5, v6, v7);
  unint64_t v9 = **a2;

  return v9(a2, v8);
}

int *sub_11E330(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_39_11");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  uint64_t v8 = sub_12B4FC(a1, a2);
  unint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

int *sub_11E3DC(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_40_12");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  uint64_t v8 = sub_12B4FC(a1, a2);
  unint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

int *sub_11E488(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  uint64_t v8 = sub_12B4FC(a1, a2);
  unint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

int *sub_11E534(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  uint64_t v8 = sub_12B4FC(a1, a2);
  unint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

int *sub_11E5E0(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  unint64_t v6 = sub_DCCC(v4, v5);
  uint64_t v7 = sub_D5D4();
  unint64_t v9 = v8;
  unsigned int v10 = sub_12B4FC(a1, a2);
  uint64_t v11 = sub_16E74(v7, v9, (unsigned int *)v10);

  return sub_128EC((unsigned int *)v6, (unsigned int *)v11);
}

int *sub_11E6CC(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  unint64_t v6 = sub_DCCC(v4, v5);
  uint64_t v7 = sub_D5D4();
  unint64_t v9 = v8;
  unsigned int v10 = sub_12B4FC(a1, a2);
  uint64_t v11 = sub_16E74(v7, v9, (unsigned int *)v10);

  return sub_128EC((unsigned int *)v6, (unsigned int *)v11);
}

int *sub_11E7B8(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  unint64_t v8 = sub_12B4FC(a1, a2);
  unint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

int *sub_11E864(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  unint64_t v8 = sub_12B4FC(a1, a2);
  unint64_t v9 = sub_16E74(v5, v7, (unsigned int *)v8);

  return sub_128EC(v4, (unsigned int *)v9);
}

int *sub_11E910(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
  unint64_t v6 = sub_DCCC(v4, v5);
  uint64_t v7 = sub_D5D4();
  unint64_t v9 = v8;
  unsigned int v10 = sub_12B4FC(a1, a2);
  uint64_t v11 = sub_16E74(v7, v9, (unsigned int *)v10);

  return sub_128EC((unsigned int *)v6, (unsigned int *)v11);
}

int *sub_11E9FC(unsigned int *a1, uint64_t a2)
{
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
  unint64_t v6 = sub_DCCC(v4, v5);
  uint64_t v7 = sub_D5D4();
  unint64_t v9 = v8;
  unsigned int v10 = sub_12B4FC(a1, a2);
  uint64_t v11 = sub_16E74(v7, v9, (unsigned int *)v10);

  return sub_128EC((unsigned int *)v6, (unsigned int *)v11);
}

uint64_t sub_11EAE8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
  unint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
  unint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  unint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  uint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_11ECA0(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  unint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_60_32");
  unint64_t v9 = sub_DCCC(v7, v8);
  uint64_t v10 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  uint64_t v11 = sub_DCCC((unsigned int *)v9, v10);
  unsigned int v12 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_62_34");
  uint64_t v13 = sub_DCCC((unsigned int *)v11, v12);
  unint64_t v14 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  unint64_t v15 = sub_DCCC((unsigned int *)v13, v14);
  uint64_t v16 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_66_38");
  unint64_t v17 = sub_DCCC((unsigned int *)v15, v16);
  uint64_t v18 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  v19 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_64_36");
  v20 = sub_DCCC(v18, v19);
  uint64_t v21 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_120_90");
  v23 = sub_11D84((unsigned int *)v20, v21, v22);
  v24 = sub_DCCC((unsigned int *)v17, (unsigned int *)v23);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_118_88");
  uint64_t v26 = v25;
  unsigned int v27 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v28 = sub_D8B4(a4, v26, v27);
  v30 = sub_11D84((unsigned int *)v24, v28, v29);
  v31 = **a2;

  return v31(a2, v30);
}

uint64_t sub_11F038(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_11F1B0(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  uint64_t v9 = sub_DCCC(v7, v8);
  unsigned int v10 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  uint64_t v11 = sub_DCCC((unsigned int *)v9, v10);
  unint64_t v12 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  uint64_t v13 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_120_90");
  unint64_t v15 = sub_11D84(v12, v13, v14);
  uint64_t v16 = sub_DCCC((unsigned int *)v11, (unsigned int *)v15);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_118_88");
  uint64_t v18 = v17;
  unsigned int v19 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v20 = sub_D8B4(a4, v18, v19);
  unint64_t v22 = sub_11D84((unsigned int *)v16, v20, v21);
  v23 = **a2;

  return v23(a2, v22);
}

int *sub_11F448(uint64_t a1, void **a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *), uint64_t a5)
{
  uint64_t v9 = (unsigned int *)((uint64_t (*)(void **, const char *))(*a2)[2])(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_53_25");
  uint64_t v10 = sub_D5D4();
  unint64_t v12 = sub_13828(v9, v10, v11);
  uint64_t v13 = ((uint64_t (*)(void **, int *))**a2)(a2, v12);
  unint64_t v14 = (unsigned int *)((uint64_t (*)(void **, const char *))(*a2)[2])(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_55_27");
  uint64_t v15 = sub_D5D4();
  uint64_t v17 = sub_13828(v14, v15, v16);
  uint64_t v18 = ((uint64_t (*)(void **, int *))**a2)(a2, v17);
  unsigned int v19 = (unsigned int *)((uint64_t (*)(void **, const char *))(*a2)[2])(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_54_26");
  uint64_t v20 = sub_D5D4();
  unint64_t v22 = sub_13828(v19, v20, v21);
  uint64_t v23 = ((uint64_t (*)(void **, int *))**a2)(a2, v22);
  v24 = (unsigned int *)((uint64_t (*)(void **, const char *))(*a2)[2])(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_56_28");
  uint64_t v25 = sub_D5D4();
  unsigned int v27 = sub_13828(v24, v25, v26);
  uint64_t v28 = ((uint64_t (*)(void **, int *))**a2)(a2, v27);
  if (sub_12BB24(v13, v18, v23, v28))
  {
    uint64_t length = agxps_timeseries_get_length(v13);
    v30 = (unsigned int *)sub_176E24(a5, 0, length);
    data = (double *)agxps_timeseries_get_data((uint64_t)v30);
    v32 = (double *)agxps_timeseries_get_data(v13);
    v33 = (double *)agxps_timeseries_get_data(v18);
    v34 = (double *)agxps_timeseries_get_data(v23);
    for (i = (double *)agxps_timeseries_get_data(v28); length; --length)
    {
      double v36 = *v32++;
      double v37 = v36;
      double v38 = *v33++;
      double v39 = v38;
      double v40 = *v34++;
      double v41 = v40;
      double v42 = *i++;
      double v43 = v42;
      if (v41 < v42) {
        double v41 = v43;
      }
      double v44 = v39 - v37;
      if (v44 < 0.0) {
        double v44 = 0.0;
      }
      if (v39 + v41 <= 1.0) {
        double v44 = 0.0;
      }
      *data++ = fmin(v39 + v41 - v44, 1.0);
    }
    v45 = (unsigned int *)sub_11F808((uint64_t)i, a2, a3, a4);
    return sub_160B4(v30, v45);
  }
  else
  {
    return (int *)agxps_gpu_invalid_handle();
  }
}

uint64_t sub_11F808(uint64_t a1, void **a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  v4 = a4;
  uint64_t v7 = sub_12BBD0((uint64_t)a2, a4);
  LODWORD(v4) = (**v4)(v4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(v4, v9, v10);
  uint64_t v13 = sub_11D84((unsigned int *)v7, v11, v12);
  unint64_t v14 = (uint64_t (*)(void **, int *))**a2;

  return v14(a2, v13);
}

uint64_t sub_11F948(uint64_t a1, void **a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  unint64_t v6 = sub_12BBD0((uint64_t)a2, a4);
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_119_89");
  uint64_t v9 = sub_11D84((unsigned int *)v6, v7, v8);
  unsigned int v10 = (uint64_t (*)(void **, int *))**a2;

  return v10(a2, v9);
}

uint64_t sub_11FA18(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  uint64_t v5 = (unsigned int *)(*a2)[2](a2, (int *)"Instructions Executed");
  uint64_t v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  unint64_t v8 = sub_13828(v5, v6, v7);
  uint64_t v9 = **a2;

  return v9(a2, v8);
}

uint64_t sub_11FB24(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  unint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_60_32");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_111_81");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  uint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  unint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_11FCDC(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_111_81");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_11FE54(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_62_34");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_112_82");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  uint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  unint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_12000C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_112_82");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_120184(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_64_36");
  uint64_t v9 = sub_DCCC(v7, v8);
  uint64_t v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_113_83");
  unint64_t v12 = sub_11D84((unsigned int *)v9, v10, v11);
  uint64_t v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_13828((unsigned int *)v12, v13, v14);
  unint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_120334(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_113_83");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_1204AC(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_66_38");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_114_84");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  uint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  unint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_120664(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_114_84");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_1207DC(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_67_39");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_68_40");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_115_85");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  uint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  unint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_120994(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_67_39");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_115_85");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_120B0C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_69_41");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_70_42");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_116_86");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  uint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  unint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_120CC4(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_69_41");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_116_86");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_120E3C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_72_44");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_71_43");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_121_91");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  uint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  unint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_120FF4(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  uint64_t v5 = (unsigned int *)(*a2)[2](a2, (int *)"_fec93bc804b85a65d152fdd4747b95f2b6633ea518b6bb44a7bc87186198c2a8");
  uint64_t v6 = (unsigned int *)(*a2)[2](a2, (int *)"_8922765bce9a86586c4e9f2d8c17967bf71fc42fefdc94b60ac069f686424044");
  unint64_t v7 = sub_DCCC(v5, v6);
  uint64_t v8 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v10 = sub_13828((unsigned int *)v7, v8, v9);
  uint64_t v11 = **a2;

  return v11(a2, v10);
}

uint64_t sub_121140(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_71_43");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_121_91");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_1212B8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"_eb1b52d1bee0dd7bb1d4f6345a6a34e9d9f75340093e425454be8205d717c2ba");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_122_92");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_121430(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_73_45");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_74_46");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_123_93");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D8B4(a4, v11, v12);
  uint64_t v15 = sub_11D84((unsigned int *)v9, v13, v14);
  unint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_1215E8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"_7646a8523871192073a29fb3af219f4dbddae3339e969e0da8ef8d84a3d46ec5");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_123_93");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_121764(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_73_45");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_123_93");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  uint64_t v13 = sub_11D84(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

int *sub_1218DC(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *), uint64_t a5)
{
  uint64_t v9 = (unsigned int *)(*a2)[2](a2, (int *)"_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  uint64_t v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_125_95");
  unint64_t v12 = sub_11D84(v9, v10, v11);
  LODWORD(v9) = sub_D5D4();
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v16 = sub_D8B4(v9, v14, v15);
  uint64_t v18 = sub_11D84((unsigned int *)v12, v16, v17);
  unsigned int v19 = (int *)(**a2)(a2, v18);
  uint64_t v20 = sub_D5D4();
  unint64_t v22 = sub_11D84((unsigned int *)v12, v20, v21);
  uint64_t v23 = (unsigned int *)(*a2)[2](a2, (int *)"_d856a24dfeb33f1dad922753efc16618fdf12ef3544115f2f5fffd93affab8d5");
  v24 = sub_EC28((unsigned int *)v22, v23);
  uint64_t length = agxps_timeseries_get_length((uint64_t)v22);
  datatype = agxps_timeseries_get_datatype((unsigned int *)v22);
  unsigned int v27 = (int *)sub_176E24(a5, (uint64_t)datatype, length);
  uint64_t v28 = (int *)sub_176E24(a5, (uint64_t)datatype, length);
  agxps_timeseries_div_tt(v22, v24, v27, 1);
  uint64_t v29 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_124_94");
  v31 = sub_11210(v29, v30, (unsigned int *)v27);
  v32 = agxps_timeseries_div_tt(v19, v31, v28, 1);
  v33 = (unsigned int *)sub_1215E8((uint64_t)v32, a2, a3, a4);

  return sub_14684(v33, (unsigned int *)v28);
}

uint64_t sub_121BC0(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_75_47");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_76_48");
  uint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_126_96");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v13 = sub_D634(a4, v11, v12);
  unsigned int v15 = sub_13828((unsigned int *)v9, v13, v14);
  uint64_t v16 = **a2;

  return v16(a2, v15);
}

uint64_t sub_121D78(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_75_47");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_126_96");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D634(a4, v9, v10);
  uint64_t v13 = sub_13828(v7, v11, v12);
  unint64_t v14 = **a2;

  return v14(a2, v13);
}

int *sub_121EF0(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Vertex Occupancy");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Fragment Occupancy");
  uint64_t v5 = sub_DCCC(v3, v4);
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Compute Occupancy");
  unint64_t v7 = sub_DCCC((unsigned int *)v5, v6);
  uint64_t v9 = sub_D5D4();

  return sub_15444((unsigned int *)v7, v9, v8);
}

int *sub_121FF0(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Vertex Simdgroups Inflight Per Shader Core");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Fragment Simdgroups Inflight Per Shader Core");
  uint64_t v5 = sub_DCCC(v3, v4);
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Compute Simdgroups Inflight Per Shader Core");

  return sub_DCCC((unsigned int *)v5, v6);
}

int *sub_1220CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Vertex Simdgroups Inflight Per Shader Core");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_122188(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  uint64_t v5 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_77_49");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v8 = sub_D634(v6, v7, qword_771FE0);
  unsigned int v10 = sub_13828(v5, v8, v9);
  uint64_t v11 = **a2;

  return v11(a2, v10);
}

int *sub_1222A4(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4");
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006");
  unint64_t v9 = sub_DCCC(v7, v8);
  unsigned int v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_127_97");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v14 = sub_D8B4(v10, v12, v13);
  uint64_t v16 = sub_11D84((unsigned int *)v9, v14, v15);
  unint64_t v17 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
  uint64_t v19 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");

  return sub_15444(v17, v19, v18);
}

int *sub_1224BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Fragment Simdgroups Inflight Per Shader Core");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_122578(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  uint64_t v5 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_78_50");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v8 = sub_D634(v6, v7, qword_771FE0);
  unsigned int v10 = sub_13828(v5, v8, v9);
  uint64_t v11 = **a2;

  return v11(a2, v10);
}

int *sub_122694(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2");
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70");
  unint64_t v9 = sub_DCCC(v7, v8);
  unsigned int v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89");
  uint64_t v11 = sub_DCCC((unsigned int *)v9, v10);
  unsigned int v12 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_127_97");
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v16 = sub_D8B4(v12, v14, v15);
  unint64_t v18 = sub_11D84((unsigned int *)v11, v16, v17);
  uint64_t v19 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  uint64_t v21 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");

  return sub_15444(v19, v21, v20);
}

int *sub_1228EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Compute Simdgroups Inflight Per Shader Core");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_1229A8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  uint64_t v5 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_79_51");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v8 = sub_D634(v6, v7, qword_771FE0);
  unsigned int v10 = sub_13828(v5, v8, v9);
  uint64_t v11 = **a2;

  return v11(a2, v10);
}

int *sub_122AC4(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB");
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42");
  unint64_t v9 = sub_DCCC(v7, v8);
  unsigned int v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8");
  uint64_t v11 = sub_DCCC((unsigned int *)v9, v10);
  unsigned int v12 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_127_97");
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v16 = sub_D8B4(v12, v14, v15);
  unint64_t v18 = sub_11D84((unsigned int *)v11, v16, v17);
  uint64_t v19 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  uint64_t v21 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");

  return sub_15444(v19, v21, v20);
}

int *sub_122D1C(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3AFE7FC24E518305DB9BB516AE4AA6725E13A423016B31BAFEBFD6FA09AFAFCD");
  unsigned int v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_128_98");
  uint64_t v10 = v9;
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  unsigned int v14 = sub_D634(a4, v12, v13);
  uint64_t v15 = sub_D8B4(v8, v10, v14);
  unint64_t v17 = sub_11D84(v7, v15, v16);
  unint64_t v18 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  uint64_t v20 = sub_D5D4();

  return sub_15444(v18, v20, v19);
}

uint64_t sub_122F20(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  uint64_t v4 = sub_D5D4();
  unsigned int v6 = sub_11D84(v3, v4, v5);

  return sub_176A84(a2, v6);
}

uint64_t sub_122FB0(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_190175e7010a5c90cc957e3f3eed64c3910111ef228808fbb2462cd269524ef5");
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e7982344eb9c10ce1e1e9e179c01bb8a55934656fd5d499f956d6e35e42f1f10");
  unint64_t v5 = sub_DCCC(v3, v4);
  unsigned int v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_aac2d2ece8ff1acbf2ab0f821c8f1e4e2dbb2ca4c3a6918e2dc458dfab8ee05c");
  uint64_t v7 = sub_DCCC((unsigned int *)v5, v6);
  uint64_t v8 = sub_D5D4();
  uint64_t v10 = sub_11D84((unsigned int *)v7, v8, v9);

  return sub_176A84(a2, v10);
}

uint64_t sub_1230C0(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  unint64_t v5 = sub_DCCC(v3, v4);
  unsigned int v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c89f25b2a31116ea6540fc6b89b623da7d4cbc9b2349ce7dbe4423a1395da60a");
  uint64_t v7 = sub_DCCC((unsigned int *)v5, v6);
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_7eba0657c66c2437c8d6952fb82117b9399d920ea84fa32c5bdc9d1dee49e290");
  unint64_t v9 = sub_DCCC((unsigned int *)v7, v8);
  uint64_t v10 = sub_D5D4();
  uint64_t v12 = sub_11D84((unsigned int *)v9, v10, v11);

  return sub_176A84(a2, v12);
}

uint64_t sub_123210(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_7df466c5ce6d100c121c263bbbff0effc1e4806f9bdb997e3c9b3c3bd4753064");
  uint64_t v4 = sub_D5D4();
  unsigned int v6 = sub_11D84(v3, v4, v5);

  return sub_176A84(a2, v6);
}

uint64_t sub_1232A0(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e7982344eb9c10ce1e1e9e179c01bb8a55934656fd5d499f956d6e35e42f1f10");
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_aac2d2ece8ff1acbf2ab0f821c8f1e4e2dbb2ca4c3a6918e2dc458dfab8ee05c");
  unint64_t v5 = sub_DCCC(v3, v4);
  uint64_t v6 = sub_D5D4();
  uint64_t v8 = sub_11D84((unsigned int *)v5, v6, v7);

  return sub_176A84(a2, v8);
}

uint64_t sub_123370(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  unint64_t v5 = sub_DCCC(v3, v4);
  uint64_t v6 = sub_D5D4();
  uint64_t v8 = sub_11D84((unsigned int *)v5, v6, v7);

  return sub_176A84(a2, v8);
}

int *sub_123440(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "AF Bandwidth");
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "AF Read Bandwidth");

  return sub_EC28(v3, v4);
}

uint64_t sub_1234DC(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  uint64_t v4 = sub_D5D4();
  uint64_t v6 = sub_11D84(v3, v4, v5);

  return sub_176A84(a2, v6);
}

uint64_t sub_12356C(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
  uint64_t v4 = sub_D5D4();
  uint64_t v6 = sub_11D84(v3, v4, v5);

  return sub_176A84(a2, v6);
}

uint64_t sub_1235FC(unsigned int *a1, uint64_t a2)
{
  v3 = sub_12B554(a1, a2);
  uint64_t v4 = sub_D5D4();
  uint64_t v6 = sub_11D84((unsigned int *)v3, v4, v5);

  return sub_176A84(a2, v6);
}

uint64_t sub_12365C(uint64_t a1, uint64_t a2)
{
  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
  uint64_t v4 = sub_D5D4();
  uint64_t v6 = sub_11D84(v3, v4, v5);

  return sub_176A84(a2, v6);
}

uint64_t sub_1236EC(unsigned int *a1, uint64_t a2)
{
  v3 = sub_12B83C(a1, a2);
  uint64_t v4 = sub_D5D4();
  uint64_t v6 = sub_11D84((unsigned int *)v3, v4, v5);

  return sub_176A84(a2, v6);
}

uint64_t sub_12374C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_46_18");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_94_64");
  unint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_123820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_47_19");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_96_66");
  unint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_1238F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  unint64_t v8 = sub_DCCC(v6, v7);
  uint64_t v9 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_106_76");
  unint64_t v11 = sub_11D84((unsigned int *)v8, v9, v10);

  return sub_176A84(a2, v11);
}

uint64_t sub_123A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  unint64_t v8 = sub_DCCC(v6, v7);
  uint64_t v9 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_106_76");
  unint64_t v11 = sub_11D84((unsigned int *)v8, v9, v10);

  return sub_176A84(a2, v11);
}

uint64_t sub_123B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_108_78");
  uint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_123BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_108_78");
  uint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_123CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
  unint64_t v8 = sub_DCCC(v6, v7);
  uint64_t v9 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_110_80");
  unint64_t v11 = sub_11D84((unsigned int *)v8, v9, v10);

  return sub_176A84(a2, v11);
}

uint64_t sub_123DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
  unint64_t v8 = sub_DCCC(v6, v7);
  uint64_t v9 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_110_80");
  unint64_t v11 = sub_11D84((unsigned int *)v8, v9, v10);

  return sub_176A84(a2, v11);
}

uint64_t sub_123EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_39_11");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_98_68");
  uint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_123FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_40_12");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_98_68");
  uint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_124094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_37_9");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_102_72");
  uint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_124168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_38_10");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_102_72");
  uint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_12423C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_35_7");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_104_74");
  uint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

uint64_t sub_124310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  uint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_36_8");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_104_74");
  uint64_t v9 = sub_11D84(v6, v7, v8);

  return sub_176A84(a2, v9);
}

int *sub_1243E4(uint64_t a1, uint64_t a2)
{
  v2 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC");
  uint64_t v4 = sub_D5D4();

  return sub_15444(v2, v4, v3);
}

int *sub_124460(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  unint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC");
  uint64_t v6 = sub_D5D4();
  unint64_t v8 = sub_11D84(v5, v6, v7);
  uint64_t v9 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  unint64_t v11 = sub_13828((unsigned int *)v8, v9, v10);
  uint64_t v12 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v11);
  uint64_t v14 = sub_D5D4();

  return sub_15444(v12, v14, v13);
}

uint64_t sub_1245B4(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B");
  uint64_t v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_141_110");
  unint64_t v10 = sub_11D84(v7, v8, v9);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_140_109");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v14 = sub_D634(a4, v12, v13);
  unint64_t v16 = sub_13828((unsigned int *)v10, v14, v15);
  unint64_t v17 = **a2;

  return v17(a2, v16);
}

uint64_t sub_12478C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252");
  uint64_t v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_141_110");
  unint64_t v10 = sub_11D84(v7, v8, v9);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_140_109");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v14 = sub_D634(a4, v12, v13);
  unint64_t v16 = sub_13828((unsigned int *)v10, v14, v15);
  unint64_t v17 = **a2;

  return v17(a2, v16);
}

uint64_t sub_124964(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563");

  return agxps_timeseries_copy(v2);
}

uint64_t sub_1249B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2");

  return agxps_timeseries_copy(v2);
}

uint64_t sub_124A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E");

  return agxps_timeseries_copy(v2);
}

uint64_t sub_124A60()
{
  __chkstk_darwin();
  v1 = v0;
  uint64_t *v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  unint64_t v2 = 0x30000000FLL;
  while (2)
  {
    unint64_t v3 = HIDWORD(v2);
    sub_5DD0((uint64_t)&v938, v2, SHIDWORD(v2));
    sub_B01C(&v943, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
    uint64_t v4 = sub_623C((uint64_t)&v938, (uint64_t)&v943, 64.0);
    sub_B01C(v936, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
    uint64_t v5 = sub_623C(v4, (uint64_t)v936, 196608.0);
    sub_B01C(v934, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
    uint64_t v6 = sub_623C(v5, (uint64_t)v934, 128.0);
    sub_B01C(v932, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_132_102");
    uint64_t v7 = sub_623C(v6, (uint64_t)v932, 2.0);
    sub_B01C(v930, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
    uint64_t v8 = sub_623C(v7, (uint64_t)v930, 64.0);
    sub_B01C(v928, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_134_104");
    uint64_t v9 = sub_623C(v8, (uint64_t)v928, 2.0);
    sub_B01C(v926, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_135_105");
    uint64_t v10 = sub_623C(v9, (uint64_t)v926, 4.0);
    sub_B01C(v924, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
    uint64_t v11 = sub_623C(v10, (uint64_t)v924, 4.0);
    sub_B01C(v922, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_137_107");
    uint64_t v12 = sub_623C(v11, (uint64_t)v922, 64.0);
    sub_B01C(__p, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_138_108");
    unsigned int v13 = (void *)sub_623C(v12, (uint64_t)__p, 384.0);
    unint64_t v14 = v1[1];
    if (v14 >= v1[2])
    {
      uint64_t v15 = sub_12BDD4(v1, v13);
    }
    else
    {
      sub_5FDC(v1[1], v13);
      uint64_t v15 = v14 + 176;
      v1[1] = v14 + 176;
    }
    v1[1] = v15;
    if (v921 < 0) {
      operator delete(__p[0]);
    }
    if (v923 < 0) {
      operator delete(v922[0]);
    }
    if (v925 < 0) {
      operator delete(v924[0]);
    }
    if (v927 < 0) {
      operator delete(v926[0]);
    }
    if (v929 < 0) {
      operator delete(v928[0]);
    }
    if (v931 < 0) {
      operator delete(v930[0]);
    }
    if (v933 < 0) {
      operator delete(v932[0]);
    }
    if (v935 < 0) {
      operator delete(v934[0]);
    }
    if (v937 < 0) {
      operator delete(v936[0]);
    }
    if (v945 < 0) {
      operator delete((void *)v943);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_85AC((uint64_t)v940);
    sub_8240((uint64_t)v939);
    switch(HIDWORD(v2))
    {
      case 1:
        LODWORD(v3) = 2;
        goto LABEL_31;
      case 2:
        LODWORD(v3) = 3;
        goto LABEL_31;
      case 3:
        LODWORD(v3) = 4;
        goto LABEL_31;
      case 4:
        LODWORD(v3) = 5;
        goto LABEL_31;
      case 5:
        LODWORD(v3) = 6;
        goto LABEL_31;
      case 6:
        switch((int)v2)
        {
          case 10:
            LODWORD(v3) = 1;
            LODWORD(v2) = 11;
            goto LABEL_31;
          case 11:
            LODWORD(v3) = 1;
            LODWORD(v2) = 12;
            goto LABEL_31;
          case 12:
            LODWORD(v3) = 1;
            LODWORD(v2) = 13;
            goto LABEL_31;
          case 13:
            LODWORD(v3) = 1;
            LODWORD(v2) = 14;
            goto LABEL_31;
          case 14:
            LODWORD(v3) = 1;
            LODWORD(v2) = 15;
            goto LABEL_31;
          case 15:
            LODWORD(v3) = 1;
            LODWORD(v2) = 16;
            goto LABEL_31;
          case 16:
            LODWORD(v3) = 1;
            LODWORD(v2) = 17;
            goto LABEL_31;
          case 17:
            goto LABEL_42;
          default:
            LODWORD(v3) = 1;
            goto LABEL_31;
        }
        goto LABEL_42;
      default:
LABEL_31:
        unint64_t v2 = v2 | ((unint64_t)v3 << 32);
        if (v2 != 0x300000011) {
          continue;
        }
LABEL_42:
        uint64_t v16 = 0;
        break;
    }
    break;
  }
  do
  {
    uint64_t v17 = 0;
    uint64_t v345 = v16;
    int v18 = dword_4C74E8[v16];
    unsigned int v19 = v18 - 1;
    do
    {
      int v20 = dword_4C7500[v17];
      if (v20 == 10) {
        double v21 = 64.0;
      }
      else {
        double v21 = 96.0;
      }
      if (v20 == 15 && v19 < 2 || v20 < 15) {
        double v24 = 0.0;
      }
      else {
        double v24 = 48.0;
      }
      sub_5DD0((uint64_t)&v938, v20, v18);
      sub_B01C(v918, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_82_52");
      uint64_t v25 = sub_623C((uint64_t)&v938, (uint64_t)v918, 32.0);
      sub_B01C(v916, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_83_53");
      uint64_t v26 = sub_623C(v25, (uint64_t)v916, v21 + v24);
      sub_B01C(v914, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
      unsigned int v27 = (void *)sub_623C(v26, (uint64_t)v914, v21);
      unint64_t v28 = v1[1];
      if (v28 >= v1[2])
      {
        uint64_t v29 = sub_12BDD4(v1, v27);
      }
      else
      {
        sub_5FDC(v1[1], v27);
        uint64_t v29 = v28 + 176;
        v1[1] = v28 + 176;
      }
      v1[1] = v29;
      if (v915 < 0) {
        operator delete(v914[0]);
      }
      if (v917 < 0) {
        operator delete(v916[0]);
      }
      if (v919 < 0) {
        operator delete(v918[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
      ++v17;
    }
    while (v17 != 8);
    uint64_t v30 = 0;
    uint64_t v943 = 0xB0000000ALL;
    do
    {
      sub_5DD0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v30), v18);
      sub_B01C(v912, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
      sub_B01C(v910, "_90784375edce0b872bddf54d5fdc7e2419df531375843de0472b43e95edffe2b");
      uint64_t v31 = sub_6024((uint64_t)&v938, (long long *)v912, (long long *)v910);
      sub_B01C(v908, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
      sub_B01C(v906, "_e5f2d8a6cf9651b49b3b00bebdf815a5269b8c89fc3bc02057a3a14e28733495");
      uint64_t v32 = sub_6024(v31, (long long *)v908, (long long *)v906);
      sub_B01C(v904, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_86_56");
      v33 = (void *)sub_623C(v32, (uint64_t)v904, 0.25);
      unint64_t v34 = v1[1];
      if (v34 >= v1[2])
      {
        uint64_t v35 = sub_12BDD4(v1, v33);
      }
      else
      {
        sub_5FDC(v1[1], v33);
        uint64_t v35 = v34 + 176;
        v1[1] = v34 + 176;
      }
      v1[1] = v35;
      if (v905 < 0) {
        operator delete(v904[0]);
      }
      if (v907 < 0) {
        operator delete(v906[0]);
      }
      if (v909 < 0) {
        operator delete(v908[0]);
      }
      if (v911 < 0) {
        operator delete(v910[0]);
      }
      if (v913 < 0) {
        operator delete(v912[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
      v30 += 4;
    }
    while (v30 != 8);
    sub_5DD0((uint64_t)&v938, 12, v18);
    sub_B01C(v902, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
    sub_B01C(v900, "_90784375edce0b872bddf54d5fdc7e2419df531375843de0472b43e95edffe2b");
    uint64_t v36 = sub_6024((uint64_t)&v938, (long long *)v902, (long long *)v900);
    sub_B01C(v898, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
    sub_B01C(v896, "_e5f2d8a6cf9651b49b3b00bebdf815a5269b8c89fc3bc02057a3a14e28733495");
    uint64_t v37 = sub_6024(v36, (long long *)v898, (long long *)v896);
    sub_B01C(v894, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_86_56");
    double v38 = (void *)sub_623C(v37, (uint64_t)v894, 1.0);
    unint64_t v39 = v1[1];
    if (v39 >= v1[2])
    {
      uint64_t v40 = sub_12BDD4(v1, v38);
    }
    else
    {
      sub_5FDC(v1[1], v38);
      uint64_t v40 = v39 + 176;
      v1[1] = v39 + 176;
    }
    v1[1] = v40;
    if (v895 < 0) {
      operator delete(v894[0]);
    }
    if (v897 < 0) {
      operator delete(v896[0]);
    }
    if (v899 < 0) {
      operator delete(v898[0]);
    }
    if (v901 < 0) {
      operator delete(v900[0]);
    }
    if (v903 < 0) {
      operator delete(v902[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_85AC((uint64_t)v940);
    sub_8240((uint64_t)v939);
    for (uint64_t i = 0; i != 7; ++i)
    {
      sub_5DD0((uint64_t)&v938, dword_4C7520[i], v18);
      sub_B01C(v892, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_29_1");
      sub_B01C(v890, "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
      uint64_t v42 = sub_6024((uint64_t)&v938, (long long *)v892, (long long *)v890);
      sub_B01C(v888, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_30_2");
      sub_B01C(v886, "_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
      double v43 = (void *)sub_6024(v42, (long long *)v888, (long long *)v886);
      unint64_t v44 = v1[1];
      if (v44 >= v1[2])
      {
        uint64_t v45 = sub_12BDD4(v1, v43);
      }
      else
      {
        sub_5FDC(v1[1], v43);
        uint64_t v45 = v44 + 176;
        v1[1] = v44 + 176;
      }
      v1[1] = v45;
      if (v887 < 0) {
        operator delete(v886[0]);
      }
      if (v889 < 0) {
        operator delete(v888[0]);
      }
      if (v891 < 0) {
        operator delete(v890[0]);
      }
      if (v893 < 0) {
        operator delete(v892[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
    }
    uint64_t v46 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v47 = v19 < 2;
      int v48 = *(_DWORD *)((char *)&v943 + v46);
      if (v48 != 15) {
        BOOL v47 = 0;
      }
      if (v48 >= 15 && !v47)
      {
        sub_5DD0((uint64_t)&v938, v48, v18);
        sub_B01C(v884, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_87_57");
        uint64_t v49 = sub_623C((uint64_t)&v938, (uint64_t)v884, 0.0833333333);
        sub_B01C(v882, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_88_58");
        v50 = (void *)sub_623C(v49, (uint64_t)v882, 0.0833333333);
        unint64_t v51 = v1[1];
        if (v51 >= v1[2])
        {
          uint64_t v52 = sub_12BDD4(v1, v50);
        }
        else
        {
          sub_5FDC(v1[1], v50);
          uint64_t v52 = v51 + 176;
          v1[1] = v51 + 176;
        }
        v1[1] = v52;
        if (v883 < 0) {
          operator delete(v882[0]);
        }
        if (v885 < 0) {
          operator delete(v884[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v46 += 4;
    }
    while (v46 != 12);
    uint64_t v53 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v54 = v19 < 2;
      int v55 = *(_DWORD *)((char *)&v943 + v53);
      if (v55 != 15) {
        BOOL v54 = 0;
      }
      if (v55 >= 15 && !v54)
      {
        sub_5DD0((uint64_t)&v938, v55, v18);
        sub_B01C(v880, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_37_9");
        sub_B01C(v878, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
        uint64_t v56 = sub_6024((uint64_t)&v938, (long long *)v880, (long long *)v878);
        sub_B01C(v876, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_38_10");
        sub_B01C(v874, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
        uint64_t v57 = sub_6024(v56, (long long *)v876, (long long *)v874);
        sub_B01C(v872, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_39_11");
        sub_B01C(v870, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD");
        uint64_t v58 = sub_6024(v57, (long long *)v872, (long long *)v870);
        sub_B01C(v868, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_40_12");
        sub_B01C(v866, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3");
        uint64_t v59 = sub_6024(v58, (long long *)v868, (long long *)v866);
        sub_B01C(v864, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_41_13");
        sub_B01C(v862, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
        uint64_t v60 = sub_6024(v59, (long long *)v864, (long long *)v862);
        sub_B01C(v860, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_42_14");
        sub_B01C(v858, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
        uint64_t v61 = sub_6024(v60, (long long *)v860, (long long *)v858);
        sub_B01C(v856, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_89_59");
        uint64_t v62 = sub_623C(v61, (uint64_t)v856, 0.03125);
        sub_B01C(v854, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_97_67");
        uint64_t v63 = sub_623C(v62, (uint64_t)v854, 0.03125);
        sub_B01C(v852, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_98_68");
        uint64_t v64 = sub_623C(v63, (uint64_t)v852, 8.0);
        sub_B01C(v850, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_99_69");
        uint64_t v65 = sub_623C(v64, (uint64_t)v850, 0.03125);
        sub_B01C(v848, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_100_70");
        uint64_t v66 = sub_623C(v65, (uint64_t)v848, 8.0);
        sub_B01C(v846, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_101_71");
        uint64_t v67 = sub_623C(v66, (uint64_t)v846, 0.03125);
        sub_B01C(v844, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_102_72");
        uint64_t v68 = sub_623C(v67, (uint64_t)v844, 8.0);
        sub_B01C(v842, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_103_73");
        uint64_t v69 = sub_623C(v68, (uint64_t)v842, 0.03125);
        sub_B01C(v840, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_104_74");
        uint64_t v70 = sub_623C(v69, (uint64_t)v840, 8.0);
        sub_B01C(v838, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_105_75");
        uint64_t v71 = sub_623C(v70, (uint64_t)v838, 0.03125);
        sub_B01C(v836, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_106_76");
        uint64_t v72 = sub_623C(v71, (uint64_t)v836, 8.0);
        sub_B01C(v834, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_107_77");
        uint64_t v73 = sub_623C(v72, (uint64_t)v834, 0.03125);
        sub_B01C(v832, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_108_78");
        uint64_t v74 = sub_623C(v73, (uint64_t)v832, 8.0);
        sub_B01C(v830, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_109_79");
        uint64_t v75 = sub_623C(v74, (uint64_t)v830, 0.03125);
        sub_B01C(v828, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_110_80");
        v76 = (void *)sub_623C(v75, (uint64_t)v828, 8.0);
        unint64_t v77 = v1[1];
        if (v77 >= v1[2])
        {
          uint64_t v78 = sub_12BDD4(v1, v76);
        }
        else
        {
          sub_5FDC(v1[1], v76);
          uint64_t v78 = v77 + 176;
          v1[1] = v77 + 176;
        }
        v1[1] = v78;
        if (v829 < 0) {
          operator delete(v828[0]);
        }
        if (v831 < 0) {
          operator delete(v830[0]);
        }
        if (v833 < 0) {
          operator delete(v832[0]);
        }
        if (v835 < 0) {
          operator delete(v834[0]);
        }
        if (v837 < 0) {
          operator delete(v836[0]);
        }
        if (v839 < 0) {
          operator delete(v838[0]);
        }
        if (v841 < 0) {
          operator delete(v840[0]);
        }
        if (v843 < 0) {
          operator delete(v842[0]);
        }
        if (v845 < 0) {
          operator delete(v844[0]);
        }
        if (v847 < 0) {
          operator delete(v846[0]);
        }
        if (v849 < 0) {
          operator delete(v848[0]);
        }
        if (v851 < 0) {
          operator delete(v850[0]);
        }
        if (v853 < 0) {
          operator delete(v852[0]);
        }
        if (v855 < 0) {
          operator delete(v854[0]);
        }
        if (v857 < 0) {
          operator delete(v856[0]);
        }
        if (v859 < 0) {
          operator delete(v858[0]);
        }
        if (v861 < 0) {
          operator delete(v860[0]);
        }
        if (v863 < 0) {
          operator delete(v862[0]);
        }
        if (v865 < 0) {
          operator delete(v864[0]);
        }
        if (v867 < 0) {
          operator delete(v866[0]);
        }
        if (v869 < 0) {
          operator delete(v868[0]);
        }
        if (v871 < 0) {
          operator delete(v870[0]);
        }
        if (v873 < 0) {
          operator delete(v872[0]);
        }
        if (v875 < 0) {
          operator delete(v874[0]);
        }
        if (v877 < 0) {
          operator delete(v876[0]);
        }
        if (v879 < 0) {
          operator delete(v878[0]);
        }
        if (v881 < 0) {
          operator delete(v880[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v53 += 4;
    }
    while (v53 != 12);
    uint64_t v79 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v80 = v19 < 2;
      int v81 = *(_DWORD *)((char *)&v943 + v79);
      if (v81 != 15) {
        BOOL v80 = 0;
      }
      if (v81 >= 15 && !v80)
      {
        sub_5DD0((uint64_t)&v938, v81, v18);
        sub_B01C(v826, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
        sub_B01C(v824, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
        uint64_t v82 = sub_6024((uint64_t)&v938, (long long *)v826, (long long *)v824);
        sub_B01C(v822, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_35_7");
        sub_B01C(v820, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
        uint64_t v83 = sub_6024(v82, (long long *)v822, (long long *)v820);
        sub_B01C(v818, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
        v84 = (void *)sub_623C(v83, (uint64_t)v818, 0.03125);
        unint64_t v85 = v1[1];
        if (v85 >= v1[2])
        {
          uint64_t v86 = sub_12BDD4(v1, v84);
        }
        else
        {
          sub_5FDC(v1[1], v84);
          uint64_t v86 = v85 + 176;
          v1[1] = v85 + 176;
        }
        v1[1] = v86;
        if (v819 < 0) {
          operator delete(v818[0]);
        }
        if (v821 < 0) {
          operator delete(v820[0]);
        }
        if (v823 < 0) {
          operator delete(v822[0]);
        }
        if (v825 < 0) {
          operator delete(v824[0]);
        }
        if (v827 < 0) {
          operator delete(v826[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v79 += 4;
    }
    while (v79 != 12);
    uint64_t v87 = 0;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v88 = v19 < 2;
      int v89 = *(_DWORD *)((char *)&v943 + v87);
      if (v89 != 15) {
        BOOL v88 = 0;
      }
      if (v89 < 15 || v88)
      {
        sub_5DD0((uint64_t)&v938, v89, v18);
        sub_B01C(v816, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
        sub_B01C(v814, "_8cd74591f03ed3eb90e0c547b8bf21ae7eed4129053f40570cce56a39a690015");
        uint64_t v91 = sub_6024((uint64_t)&v938, (long long *)v816, (long long *)v814);
        sub_B01C(v812, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_32_4");
        sub_B01C(v810, "_d0699f5ce934818cd7248127feed214216e30183a27473bea81c3d3b90578ef9");
        uint64_t v92 = sub_6024(v91, (long long *)v812, (long long *)v810);
        sub_B01C(v808, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
        v93 = (void *)sub_623C(v92, (uint64_t)v808, 0.5);
        unint64_t v94 = v1[1];
        if (v94 >= v1[2])
        {
          uint64_t v95 = sub_12BDD4(v1, v93);
        }
        else
        {
          sub_5FDC(v1[1], v93);
          uint64_t v95 = v94 + 176;
          v1[1] = v94 + 176;
        }
        v1[1] = v95;
        if (v809 < 0) {
          operator delete(v808[0]);
        }
        if (v811 < 0) {
          operator delete(v810[0]);
        }
        if (v813 < 0) {
          operator delete(v812[0]);
        }
        if (v815 < 0) {
          operator delete(v814[0]);
        }
        if (v817 < 0) {
          operator delete(v816[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v87 += 4;
    }
    while (v87 != 12);
    uint64_t v96 = 0;
    uint64_t v943 = 0xB0000000ALL;
    int v944 = 12;
    do
    {
      sub_5DD0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v96), v18);
      sub_B01C(v806, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
      sub_B01C(v804, "_f3b0ac2ff165c0670b2240e2ab5a6536283a3731be38544cccd5d6393815b687");
      uint64_t v97 = sub_6024((uint64_t)&v938, (long long *)v806, (long long *)v804);
      sub_B01C(v802, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
      sub_B01C(v800, "_84411edb65d08697e681f20b450ed1f7aef44dbed4cce93a02d28340bb3c9dce");
      uint64_t v98 = sub_6024(v97, (long long *)v802, (long long *)v800);
      sub_B01C(v798, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_32_4");
      sub_B01C(v796, "_5fae1ea71b71c15b2c88ee87572e9af5c8e106e76f225662b93ee1e39122f488");
      uint64_t v99 = sub_6024(v98, (long long *)v798, (long long *)v796);
      sub_B01C(v794, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_32_4");
      sub_B01C(v792, "_eae3a7dc81602f26730b05b79171aa4da4f5d67d10089b075090ac21392f8550");
      uint64_t v100 = sub_6024(v99, (long long *)v794, (long long *)v792);
      sub_B01C(v790, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
      v101 = (void *)sub_623C(v100, (uint64_t)v790, 0.25);
      unint64_t v102 = v1[1];
      if (v102 >= v1[2])
      {
        uint64_t v103 = sub_12BDD4(v1, v101);
      }
      else
      {
        sub_5FDC(v1[1], v101);
        uint64_t v103 = v102 + 176;
        v1[1] = v102 + 176;
      }
      v1[1] = v103;
      if (v791 < 0) {
        operator delete(v790[0]);
      }
      if (v793 < 0) {
        operator delete(v792[0]);
      }
      if (v795 < 0) {
        operator delete(v794[0]);
      }
      if (v797 < 0) {
        operator delete(v796[0]);
      }
      if (v799 < 0) {
        operator delete(v798[0]);
      }
      if (v801 < 0) {
        operator delete(v800[0]);
      }
      if (v803 < 0) {
        operator delete(v802[0]);
      }
      if (v805 < 0) {
        operator delete(v804[0]);
      }
      if (v807 < 0) {
        operator delete(v806[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
      v96 += 4;
    }
    while (v96 != 12);
    uint64_t v104 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v105 = v19 < 2;
      int v106 = *(_DWORD *)((char *)&v943 + v104);
      if (v106 != 15) {
        BOOL v105 = 0;
      }
      if (v106 >= 15 && !v105)
      {
        sub_5DD0((uint64_t)&v938, v106, v18);
        sub_B01C(v788, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
        sub_B01C(v786, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
        uint64_t v107 = sub_6024((uint64_t)&v938, (long long *)v788, (long long *)v786);
        sub_B01C(v784, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_36_8");
        sub_B01C(v782, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
        uint64_t v108 = sub_6024(v107, (long long *)v784, (long long *)v782);
        sub_B01C(v780, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
        uint64_t v109 = sub_623C(v108, (uint64_t)v780, 0.03125);
        sub_B01C(v778, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_91_61");
        v110 = (void *)sub_623C(v109, (uint64_t)v778, 8.0);
        unint64_t v111 = v1[1];
        if (v111 >= v1[2])
        {
          uint64_t v112 = sub_12BDD4(v1, v110);
        }
        else
        {
          sub_5FDC(v1[1], v110);
          uint64_t v112 = v111 + 176;
          v1[1] = v111 + 176;
        }
        v1[1] = v112;
        if (v779 < 0) {
          operator delete(v778[0]);
        }
        if (v781 < 0) {
          operator delete(v780[0]);
        }
        if (v783 < 0) {
          operator delete(v782[0]);
        }
        if (v785 < 0) {
          operator delete(v784[0]);
        }
        if (v787 < 0) {
          operator delete(v786[0]);
        }
        if (v789 < 0) {
          operator delete(v788[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v104 += 4;
    }
    while (v104 != 12);
    uint64_t v113 = 0;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v114 = v19 < 2;
      int v115 = *(_DWORD *)((char *)&v943 + v113);
      if (v115 != 15) {
        BOOL v114 = 0;
      }
      if (v115 < 15 || v114)
      {
        sub_5DD0((uint64_t)&v938, v115, v18);
        sub_B01C(v776, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
        sub_B01C(v774, "_3dfa6da703ded5b65a76ddf0aa3f7f28f19b4a624ef77347a925f55bf66a82f5");
        uint64_t v117 = sub_6024((uint64_t)&v938, (long long *)v776, (long long *)v774);
        sub_B01C(v772, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_34_6");
        sub_B01C(v770, "_04619811825d9d1620326f0529902213ffb847ef304f2532afe9a5c8e581a633");
        uint64_t v118 = sub_6024(v117, (long long *)v772, (long long *)v770);
        sub_B01C(v768, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
        v119 = (void *)sub_623C(v118, (uint64_t)v768, 1.0);
        unint64_t v120 = v1[1];
        if (v120 >= v1[2])
        {
          uint64_t v121 = sub_12BDD4(v1, v119);
        }
        else
        {
          sub_5FDC(v1[1], v119);
          uint64_t v121 = v120 + 176;
          v1[1] = v120 + 176;
        }
        v1[1] = v121;
        if (v769 < 0) {
          operator delete(v768[0]);
        }
        if (v771 < 0) {
          operator delete(v770[0]);
        }
        if (v773 < 0) {
          operator delete(v772[0]);
        }
        if (v775 < 0) {
          operator delete(v774[0]);
        }
        if (v777 < 0) {
          operator delete(v776[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v113 += 4;
    }
    while (v113 != 12);
    uint64_t v122 = 0;
    uint64_t v943 = 0xB0000000ALL;
    int v944 = 12;
    do
    {
      sub_5DD0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v122), v18);
      sub_B01C(v766, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
      sub_B01C(v764, "_dcc19066dda99b0411d8c63a3e83f6f7f1d98ab35e1abb6ea67d0cc2c48fb902");
      uint64_t v123 = sub_6024((uint64_t)&v938, (long long *)v766, (long long *)v764);
      sub_B01C(v762, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
      sub_B01C(v760, "_cc8474cdb602b06dfa72a727bfb5880343cf4aaf48fcac51ca52c95d2d822fec");
      uint64_t v124 = sub_6024(v123, (long long *)v762, (long long *)v760);
      sub_B01C(v758, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_34_6");
      sub_B01C(v756, "_1b0917f46330b000ef490421780d7f78dae3e7de9b1dca6b00ead766e1147535");
      uint64_t v125 = sub_6024(v124, (long long *)v758, (long long *)v756);
      sub_B01C(v754, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_34_6");
      sub_B01C(v752, "_a1a96bea3f99234f22bda56eb11aba0c4b12ca3186d95a0d9b789dfec4b86cd2");
      uint64_t v126 = sub_6024(v125, (long long *)v754, (long long *)v752);
      sub_B01C(v750, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
      v127 = (void *)sub_623C(v126, (uint64_t)v750, 0.5);
      unint64_t v128 = v1[1];
      if (v128 >= v1[2])
      {
        uint64_t v129 = sub_12BDD4(v1, v127);
      }
      else
      {
        sub_5FDC(v1[1], v127);
        uint64_t v129 = v128 + 176;
        v1[1] = v128 + 176;
      }
      v1[1] = v129;
      if (v751 < 0) {
        operator delete(v750[0]);
      }
      if (v753 < 0) {
        operator delete(v752[0]);
      }
      if (v755 < 0) {
        operator delete(v754[0]);
      }
      if (v757 < 0) {
        operator delete(v756[0]);
      }
      if (v759 < 0) {
        operator delete(v758[0]);
      }
      if (v761 < 0) {
        operator delete(v760[0]);
      }
      if (v763 < 0) {
        operator delete(v762[0]);
      }
      if (v765 < 0) {
        operator delete(v764[0]);
      }
      if (v767 < 0) {
        operator delete(v766[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
      v122 += 4;
    }
    while (v122 != 12);
    uint64_t v130 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v131 = v19 < 2;
      int v132 = *(_DWORD *)((char *)&v943 + v130);
      if (v132 != 15) {
        BOOL v131 = 0;
      }
      if (v132 >= 15 && !v131)
      {
        sub_5DD0((uint64_t)&v938, v132, v18);
        sub_B01C(v748, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
        sub_B01C(v746, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
        uint64_t v133 = sub_6024((uint64_t)&v938, (long long *)v748, (long long *)v746);
        sub_B01C(v744, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_46_18");
        sub_B01C(v742, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
        uint64_t v134 = sub_6024(v133, (long long *)v744, (long long *)v742);
        sub_B01C(v740, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
        uint64_t v135 = sub_623C(v134, (uint64_t)v740, 0.03125);
        sub_B01C(v738, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_94_64");
        v136 = (void *)sub_623C(v135, (uint64_t)v738, 8.0);
        unint64_t v137 = v1[1];
        if (v137 >= v1[2])
        {
          uint64_t v138 = sub_12BDD4(v1, v136);
        }
        else
        {
          sub_5FDC(v1[1], v136);
          uint64_t v138 = v137 + 176;
          v1[1] = v137 + 176;
        }
        v1[1] = v138;
        if (v739 < 0) {
          operator delete(v738[0]);
        }
        if (v741 < 0) {
          operator delete(v740[0]);
        }
        if (v743 < 0) {
          operator delete(v742[0]);
        }
        if (v745 < 0) {
          operator delete(v744[0]);
        }
        if (v747 < 0) {
          operator delete(v746[0]);
        }
        if (v749 < 0) {
          operator delete(v748[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v130 += 4;
    }
    while (v130 != 12);
    uint64_t v139 = 0;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v140 = v19 < 2;
      int v141 = *(_DWORD *)((char *)&v943 + v139);
      if (v141 != 15) {
        BOOL v140 = 0;
      }
      if (v141 < 15 || v140)
      {
        sub_5DD0((uint64_t)&v938, v141, v18);
        sub_B01C(v736, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
        sub_B01C(v734, "_5d6a90a3c3f5d373b4784fb5f1f7aa7743084eba64d8294172d1185916b9bd1c");
        uint64_t v143 = sub_6024((uint64_t)&v938, (long long *)v736, (long long *)v734);
        sub_B01C(v732, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
        sub_B01C(v730, "_7227f357f8a21cdbc5daa79f9084b3bc5cc765c17918eb28fb2cf4cc3a5781e2");
        uint64_t v144 = sub_6024(v143, (long long *)v732, (long long *)v730);
        sub_B01C(v728, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
        sub_B01C(v726, "_e24075c611924196d3fa333bd6f2a6afab121c5355fbadd312da8989dd52ce15");
        uint64_t v145 = sub_6024(v144, (long long *)v728, (long long *)v726);
        sub_B01C(v724, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
        sub_B01C(v722, "_16eb6d6baefae7585a774d494fadd8137c12d14e93540aecbcf238f844009d01");
        uint64_t v146 = sub_6024(v145, (long long *)v724, (long long *)v722);
        sub_B01C(v720, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_46_18");
        sub_B01C(v718, "_c83d8e1815183224c98c397c7f4c229e49bf0e3ff37dc1950a9728afbcb30048");
        uint64_t v147 = sub_6024(v146, (long long *)v720, (long long *)v718);
        sub_B01C(v716, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_46_18");
        sub_B01C(v714, "_3c3dc9a24c6f8ab640c0ea8f6372c66cec9c6d0ac7a42871c7d4ee9d78918fb2");
        uint64_t v148 = sub_6024(v147, (long long *)v716, (long long *)v714);
        sub_B01C(v712, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
        uint64_t v149 = sub_623C(v148, (uint64_t)v712, 1.0);
        sub_B01C(v710, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_94_64");
        v150 = (void *)sub_623C(v149, (uint64_t)v710, 128.0);
        unint64_t v151 = v1[1];
        if (v151 >= v1[2])
        {
          uint64_t v152 = sub_12BDD4(v1, v150);
        }
        else
        {
          sub_5FDC(v1[1], v150);
          uint64_t v152 = v151 + 176;
          v1[1] = v151 + 176;
        }
        v1[1] = v152;
        if (v711 < 0) {
          operator delete(v710[0]);
        }
        if (v713 < 0) {
          operator delete(v712[0]);
        }
        if (v715 < 0) {
          operator delete(v714[0]);
        }
        if (v717 < 0) {
          operator delete(v716[0]);
        }
        if (v719 < 0) {
          operator delete(v718[0]);
        }
        if (v721 < 0) {
          operator delete(v720[0]);
        }
        if (v723 < 0) {
          operator delete(v722[0]);
        }
        if (v725 < 0) {
          operator delete(v724[0]);
        }
        if (v727 < 0) {
          operator delete(v726[0]);
        }
        if (v729 < 0) {
          operator delete(v728[0]);
        }
        if (v731 < 0) {
          operator delete(v730[0]);
        }
        if (v733 < 0) {
          operator delete(v732[0]);
        }
        if (v735 < 0) {
          operator delete(v734[0]);
        }
        if (v737 < 0) {
          operator delete(v736[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v139 += 4;
    }
    while (v139 != 12);
    uint64_t v153 = 0;
    uint64_t v943 = 0xB0000000ALL;
    int v944 = 12;
    do
    {
      sub_5DD0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v153), v18);
      sub_B01C(v708, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
      sub_B01C(v706, "_4f6aebbe216cd96fa4684995ac68478cbdb59c6706480ecbbb9f101d892bb540");
      uint64_t v154 = sub_6024((uint64_t)&v938, (long long *)v708, (long long *)v706);
      sub_B01C(v704, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
      sub_B01C(v702, "_9cdfd7e41cd0f7bedf5e73de71cff7713d55d7876ed3ceb192b859bbeacd355c");
      uint64_t v155 = sub_6024(v154, (long long *)v704, (long long *)v702);
      sub_B01C(v700, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
      sub_B01C(v698, "_6adb9f77137d1ea24fd389dc7b4ce3e0f4941ef6c4bd10a5a9069a0508c21096");
      uint64_t v156 = sub_6024(v155, (long long *)v700, (long long *)v698);
      sub_B01C(v696, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
      sub_B01C(v694, "_28ec30e5d700201a445959b85812ddc5d67051822f1dedd35fcff019f9373467");
      uint64_t v157 = sub_6024(v156, (long long *)v696, (long long *)v694);
      sub_B01C(v692, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_43_15");
      sub_B01C(v690, "_7297c7ee63bc3f774b2e5f2e665cd87efcbf40dd3e6b66a9c08f8ebfdae4019e");
      uint64_t v158 = sub_6024(v157, (long long *)v692, (long long *)v690);
      sub_B01C(v688, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_43_15");
      sub_B01C(v686, "_302f5158ec17e76ab08ef2d34c39bb819212a714ce814287bfd08e80024ad038");
      uint64_t v159 = sub_6024(v158, (long long *)v688, (long long *)v686);
      sub_B01C(v684, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
      v160 = (void *)sub_623C(v159, (uint64_t)v684, 0.25);
      unint64_t v161 = v1[1];
      if (v161 >= v1[2])
      {
        uint64_t v162 = sub_12BDD4(v1, v160);
      }
      else
      {
        sub_5FDC(v1[1], v160);
        uint64_t v162 = v161 + 176;
        v1[1] = v161 + 176;
      }
      v1[1] = v162;
      if (v685 < 0) {
        operator delete(v684[0]);
      }
      if (v687 < 0) {
        operator delete(v686[0]);
      }
      if (v689 < 0) {
        operator delete(v688[0]);
      }
      if (v691 < 0) {
        operator delete(v690[0]);
      }
      if (v693 < 0) {
        operator delete(v692[0]);
      }
      if (v695 < 0) {
        operator delete(v694[0]);
      }
      if (v697 < 0) {
        operator delete(v696[0]);
      }
      if (v699 < 0) {
        operator delete(v698[0]);
      }
      if (v701 < 0) {
        operator delete(v700[0]);
      }
      if (v703 < 0) {
        operator delete(v702[0]);
      }
      if (v705 < 0) {
        operator delete(v704[0]);
      }
      if (v707 < 0) {
        operator delete(v706[0]);
      }
      if (v709 < 0) {
        operator delete(v708[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
      v153 += 4;
    }
    while (v153 != 12);
    uint64_t v163 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v164 = v19 < 2;
      int v165 = *(_DWORD *)((char *)&v943 + v163);
      if (v165 != 15) {
        BOOL v164 = 0;
      }
      if (v165 >= 15 && !v164)
      {
        sub_5DD0((uint64_t)&v938, v165, v18);
        sub_B01C(v682, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
        sub_B01C(v680, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
        uint64_t v166 = sub_6024((uint64_t)&v938, (long long *)v682, (long long *)v680);
        sub_B01C(v678, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_47_19");
        sub_B01C(v676, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
        uint64_t v167 = sub_6024(v166, (long long *)v678, (long long *)v676);
        sub_B01C(v674, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
        uint64_t v168 = sub_623C(v167, (uint64_t)v674, 0.03125);
        sub_B01C(v672, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_96_66");
        v169 = (void *)sub_623C(v168, (uint64_t)v672, 8.0);
        unint64_t v170 = v1[1];
        if (v170 >= v1[2])
        {
          uint64_t v171 = sub_12BDD4(v1, v169);
        }
        else
        {
          sub_5FDC(v1[1], v169);
          uint64_t v171 = v170 + 176;
          v1[1] = v170 + 176;
        }
        v1[1] = v171;
        if (v673 < 0) {
          operator delete(v672[0]);
        }
        if (v675 < 0) {
          operator delete(v674[0]);
        }
        if (v677 < 0) {
          operator delete(v676[0]);
        }
        if (v679 < 0) {
          operator delete(v678[0]);
        }
        if (v681 < 0) {
          operator delete(v680[0]);
        }
        if (v683 < 0) {
          operator delete(v682[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v163 += 4;
    }
    while (v163 != 12);
    uint64_t v172 = 0;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v173 = v19 < 2;
      int v174 = *(_DWORD *)((char *)&v943 + v172);
      if (v174 != 15) {
        BOOL v173 = 0;
      }
      if (v174 < 15 || v173)
      {
        sub_5DD0((uint64_t)&v938, v174, v18);
        sub_B01C(v670, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
        sub_B01C(v668, "_a6959c95ec387b8177c7952dc2b0442397db237352d2eaac83f58ec8a91891b7");
        uint64_t v176 = sub_6024((uint64_t)&v938, (long long *)v670, (long long *)v668);
        sub_B01C(v666, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
        sub_B01C(v664, "_464535adf580fe38c8fab89c8ad5a40e7c554a788650a011f8466f784654dd52");
        uint64_t v177 = sub_6024(v176, (long long *)v666, (long long *)v664);
        sub_B01C(v662, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
        sub_B01C(v660, "_9569b663f07ab9906139babb5dc9f9f6f4d1efb9d094eb0bacf3d139d1c7f5be");
        uint64_t v178 = sub_6024(v177, (long long *)v662, (long long *)v660);
        sub_B01C(v658, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
        sub_B01C(v656, "_61da94edb1fd5147230f175dd36cb2c626394d3b2f750c7e3dad70653c868aba");
        uint64_t v179 = sub_6024(v178, (long long *)v658, (long long *)v656);
        sub_B01C(v654, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_47_19");
        sub_B01C(v652, "_5412071a0e3ec24e2f545d0476454725457124ae557a2da54285da8204d334db");
        uint64_t v180 = sub_6024(v179, (long long *)v654, (long long *)v652);
        sub_B01C(v650, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_47_19");
        sub_B01C(v648, "_77c64a76c3a1882e7551dd3fa1188c7e4a8a0872b57fd0cb1587664cab0899eb");
        uint64_t v181 = sub_6024(v180, (long long *)v650, (long long *)v648);
        sub_B01C(v646, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
        uint64_t v182 = sub_623C(v181, (uint64_t)v646, 1.0);
        sub_B01C(v644, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_96_66");
        v183 = (void *)sub_623C(v182, (uint64_t)v644, 128.0);
        unint64_t v184 = v1[1];
        if (v184 >= v1[2])
        {
          uint64_t v185 = sub_12BDD4(v1, v183);
        }
        else
        {
          sub_5FDC(v1[1], v183);
          uint64_t v185 = v184 + 176;
          v1[1] = v184 + 176;
        }
        v1[1] = v185;
        if (v645 < 0) {
          operator delete(v644[0]);
        }
        if (v647 < 0) {
          operator delete(v646[0]);
        }
        if (v649 < 0) {
          operator delete(v648[0]);
        }
        if (v651 < 0) {
          operator delete(v650[0]);
        }
        if (v653 < 0) {
          operator delete(v652[0]);
        }
        if (v655 < 0) {
          operator delete(v654[0]);
        }
        if (v657 < 0) {
          operator delete(v656[0]);
        }
        if (v659 < 0) {
          operator delete(v658[0]);
        }
        if (v661 < 0) {
          operator delete(v660[0]);
        }
        if (v663 < 0) {
          operator delete(v662[0]);
        }
        if (v665 < 0) {
          operator delete(v664[0]);
        }
        if (v667 < 0) {
          operator delete(v666[0]);
        }
        if (v669 < 0) {
          operator delete(v668[0]);
        }
        if (v671 < 0) {
          operator delete(v670[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v172 += 4;
    }
    while (v172 != 12);
    uint64_t v186 = 0;
    uint64_t v943 = 0xC0000000BLL;
    do
    {
      sub_5DD0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v186), v18);
      sub_B01C(v642, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
      sub_B01C(v640, "_968353d331d798ff8c65ce5f1d5294c1f4bcd54f8004fe37c0ec8e0327bdb887");
      uint64_t v187 = sub_6024((uint64_t)&v938, (long long *)v642, (long long *)v640);
      sub_B01C(v638, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
      sub_B01C(v636, "_db7bf2f7b343f9696051ffea283afce6cecf26ab478ddb2f2d46e68f4e83a5f1");
      uint64_t v188 = sub_6024(v187, (long long *)v638, (long long *)v636);
      sub_B01C(v634, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
      sub_B01C(v632, "_4ce8c39578a4732a6c0258355819e9fd7b199ccd3aee51f117a33230e1c23c2a");
      uint64_t v189 = sub_6024(v188, (long long *)v634, (long long *)v632);
      sub_B01C(v630, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
      sub_B01C(v628, "_f695d9489766916cc7b4575aead0a5120678f6ac54c7940bc8837ee6f64f8c5a");
      uint64_t v190 = sub_6024(v189, (long long *)v630, (long long *)v628);
      sub_B01C(v626, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_48_20");
      sub_B01C(v624, "_192193e6c7ce23b86614fecbd983be5c3d4ea08d47c42ee19db85a736c0cbf7e");
      uint64_t v191 = sub_6024(v190, (long long *)v626, (long long *)v624);
      sub_B01C(v622, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_48_20");
      sub_B01C(v620, "_f803fbcc00ceb66df21019f6dba7192937dcd274bd128a72102021004bf1bbc5");
      uint64_t v192 = sub_6024(v191, (long long *)v622, (long long *)v620);
      sub_B01C(v618, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
      v193 = (void *)sub_623C(v192, (uint64_t)v618, 0.25);
      unint64_t v194 = v1[1];
      if (v194 >= v1[2])
      {
        uint64_t v195 = sub_12BDD4(v1, v193);
      }
      else
      {
        sub_5FDC(v1[1], v193);
        uint64_t v195 = v194 + 176;
        v1[1] = v194 + 176;
      }
      v1[1] = v195;
      if (v619 < 0) {
        operator delete(v618[0]);
      }
      if (v621 < 0) {
        operator delete(v620[0]);
      }
      if (v623 < 0) {
        operator delete(v622[0]);
      }
      if (v625 < 0) {
        operator delete(v624[0]);
      }
      if (v627 < 0) {
        operator delete(v626[0]);
      }
      if (v629 < 0) {
        operator delete(v628[0]);
      }
      if (v631 < 0) {
        operator delete(v630[0]);
      }
      if (v633 < 0) {
        operator delete(v632[0]);
      }
      if (v635 < 0) {
        operator delete(v634[0]);
      }
      if (v637 < 0) {
        operator delete(v636[0]);
      }
      if (v639 < 0) {
        operator delete(v638[0]);
      }
      if (v641 < 0) {
        operator delete(v640[0]);
      }
      if (v643 < 0) {
        operator delete(v642[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
      v186 += 4;
    }
    while (v186 != 8);
    uint64_t v196 = 0;
    uint64_t v943 = 0xC0000000BLL;
    do
    {
      sub_5DD0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v196), v18);
      sub_B01C(v616, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
      sub_B01C(v614, "_968353d331d798ff8c65ce5f1d5294c1f4bcd54f8004fe37c0ec8e0327bdb887");
      uint64_t v197 = sub_6024((uint64_t)&v938, (long long *)v616, (long long *)v614);
      sub_B01C(v612, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
      sub_B01C(v610, "_db7bf2f7b343f9696051ffea283afce6cecf26ab478ddb2f2d46e68f4e83a5f1");
      uint64_t v198 = sub_6024(v197, (long long *)v612, (long long *)v610);
      sub_B01C(v608, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
      sub_B01C(v606, "_b22547623b585b14c5b8c85d49ccc42d6bfbb77f64e443ea518f37d34c0f1069");
      uint64_t v199 = sub_6024(v198, (long long *)v608, (long long *)v606);
      sub_B01C(v604, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
      sub_B01C(v602, "_a128f99af1d196435cf6f78f481310a31f61ce52f25c5601cc30c563469d604c");
      uint64_t v200 = sub_6024(v199, (long long *)v604, (long long *)v602);
      sub_B01C(v600, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
      v201 = (void *)sub_623C(v200, (uint64_t)v600, 0.25);
      unint64_t v202 = v1[1];
      if (v202 >= v1[2])
      {
        uint64_t v203 = sub_12BDD4(v1, v201);
      }
      else
      {
        sub_5FDC(v1[1], v201);
        uint64_t v203 = v202 + 176;
        v1[1] = v202 + 176;
      }
      v1[1] = v203;
      if (v601 < 0) {
        operator delete(v600[0]);
      }
      if (v603 < 0) {
        operator delete(v602[0]);
      }
      if (v605 < 0) {
        operator delete(v604[0]);
      }
      if (v607 < 0) {
        operator delete(v606[0]);
      }
      if (v609 < 0) {
        operator delete(v608[0]);
      }
      if (v611 < 0) {
        operator delete(v610[0]);
      }
      if (v613 < 0) {
        operator delete(v612[0]);
      }
      if (v615 < 0) {
        operator delete(v614[0]);
      }
      if (v617 < 0) {
        operator delete(v616[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
      v196 += 4;
    }
    while (v196 != 8);
    uint64_t v204 = 0;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v205 = v19 < 2;
      int v206 = *(_DWORD *)((char *)&v943 + v204);
      if (v206 != 15) {
        BOOL v205 = 0;
      }
      if (v206 < 15 || v205)
      {
        sub_5DD0((uint64_t)&v938, v206, v18);
        sub_B01C(v598, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_51_23");
        sub_B01C(v596, "_1e24b9b53884e278180f1249a5bb0bcbdabb20e50e98be9258f48dc3b8d601cd");
        uint64_t v208 = sub_6024((uint64_t)&v938, (long long *)v598, (long long *)v596);
        sub_B01C(v594, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_51_23");
        sub_B01C(v592, "_102d161027c9cd6bf8752b3bcbbe48ec7879b593c584521ed0be10b44ee0f74c");
        uint64_t v209 = sub_6024(v208, (long long *)v594, (long long *)v592);
        sub_B01C(v590, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_52_24");
        sub_B01C(v588, "_cc7546f381d9a442a4b723d9dd8d5ddf0bfca3942df436e95e607619d355ca59");
        uint64_t v210 = sub_6024(v209, (long long *)v590, (long long *)v588);
        sub_B01C(v586, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_52_24");
        sub_B01C(v584, "_f6aba336a7053251ccdb48a792232046e64961084645e162a508593a1676624d");
        v211 = (void *)sub_6024(v210, (long long *)v586, (long long *)v584);
        unint64_t v212 = v1[1];
        if (v212 >= v1[2])
        {
          uint64_t v213 = sub_12BDD4(v1, v211);
        }
        else
        {
          sub_5FDC(v1[1], v211);
          uint64_t v213 = v212 + 176;
          v1[1] = v212 + 176;
        }
        v1[1] = v213;
        if (v585 < 0) {
          operator delete(v584[0]);
        }
        if (v587 < 0) {
          operator delete(v586[0]);
        }
        if (v589 < 0) {
          operator delete(v588[0]);
        }
        if (v591 < 0) {
          operator delete(v590[0]);
        }
        if (v593 < 0) {
          operator delete(v592[0]);
        }
        if (v595 < 0) {
          operator delete(v594[0]);
        }
        if (v597 < 0) {
          operator delete(v596[0]);
        }
        if (v599 < 0) {
          operator delete(v598[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v204 += 4;
    }
    while (v204 != 12);
    uint64_t v214 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v215 = v19 < 2;
      int v216 = *(_DWORD *)((char *)&v943 + v214);
      if (v216 != 15) {
        BOOL v215 = 0;
      }
      if (v216 >= 15 && !v215)
      {
        sub_5DD0((uint64_t)&v938, v216, v18);
        sub_B01C(v582, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
        sub_B01C(v580, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
        uint64_t v217 = sub_6024((uint64_t)&v938, (long long *)v582, (long long *)v580);
        sub_B01C(v578, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_60_32");
        sub_B01C(v576, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8");
        uint64_t v218 = sub_6024(v217, (long long *)v578, (long long *)v576);
        sub_B01C(v574, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
        sub_B01C(v572, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
        uint64_t v219 = sub_6024(v218, (long long *)v574, (long long *)v572);
        sub_B01C(v570, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_62_34");
        sub_B01C(v568, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0");
        uint64_t v220 = sub_6024(v219, (long long *)v570, (long long *)v568);
        sub_B01C(v566, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
        sub_B01C(v564, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
        uint64_t v221 = sub_6024(v220, (long long *)v566, (long long *)v564);
        sub_B01C(v562, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_64_36");
        sub_B01C(v560, "5D4640C1160E691CF9E1DA7FE475482756D03567716B9856424469B31049A457");
        uint64_t v222 = sub_6024(v221, (long long *)v562, (long long *)v560);
        sub_B01C(v558, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
        sub_B01C(v556, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
        uint64_t v223 = sub_6024(v222, (long long *)v558, (long long *)v556);
        sub_B01C(v554, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_66_38");
        sub_B01C(v552, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E");
        uint64_t v224 = sub_6024(v223, (long long *)v554, (long long *)v552);
        sub_B01C(v550, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_67_39");
        sub_B01C(v548, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
        uint64_t v225 = sub_6024(v224, (long long *)v550, (long long *)v548);
        sub_B01C(v546, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_68_40");
        sub_B01C(v544, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B");
        uint64_t v226 = sub_6024(v225, (long long *)v546, (long long *)v544);
        sub_B01C(v542, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_69_41");
        sub_B01C(v540, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91");
        uint64_t v227 = sub_6024(v226, (long long *)v542, (long long *)v540);
        sub_B01C(v538, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_70_42");
        sub_B01C(v536, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53");
        uint64_t v228 = sub_6024(v227, (long long *)v538, (long long *)v536);
        sub_B01C(v534, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_53_25");
        sub_B01C(v532, "F89408CC4F2E499CED47E61E0AFD929E01C44D079ADF0B440EF845B984DE4956");
        uint64_t v229 = sub_6024(v228, (long long *)v534, (long long *)v532);
        sub_B01C(v530, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_54_26");
        sub_B01C(v528, "3EBB72814821E8E8DB302E61197BC3AC6B0A02119FCD0C86BCFA54EB1B511AD2");
        uint64_t v230 = sub_6024(v229, (long long *)v530, (long long *)v528);
        sub_B01C(v526, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_55_27");
        sub_B01C(v524, "7FD8B674D9FE018B3D64EA31CB94787780CD12317B2764B9BAFB60C975CDC8EB");
        uint64_t v231 = sub_6024(v230, (long long *)v526, (long long *)v524);
        sub_B01C(v522, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_56_28");
        sub_B01C(v520, "0DAB6425F1EAC005798A5E8220F97E433817AADFE2490BD4F4B762C38F20E22B");
        uint64_t v232 = sub_6024(v231, (long long *)v522, (long long *)v520);
        sub_B01C(v518, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_111_81");
        uint64_t v233 = sub_623C(v232, (uint64_t)v518, 0.25);
        sub_B01C(v516, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_112_82");
        uint64_t v234 = sub_623C(v233, (uint64_t)v516, 0.25);
        sub_B01C(v514, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_113_83");
        uint64_t v235 = sub_623C(v234, (uint64_t)v514, 0.25);
        sub_B01C(v512, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_114_84");
        uint64_t v236 = sub_623C(v235, (uint64_t)v512, 0.25);
        sub_B01C(v510, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_115_85");
        uint64_t v237 = sub_623C(v236, (uint64_t)v510, 0.25);
        sub_B01C(v508, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_116_86");
        uint64_t v238 = sub_623C(v237, (uint64_t)v508, 0.5);
        sub_B01C(v506, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_118_88");
        uint64_t v239 = sub_623C(v238, (uint64_t)v506, 0.125);
        sub_B01C(v504, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
        uint64_t v240 = sub_623C(v239, (uint64_t)v504, 0.0625);
        sub_B01C(v502, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_119_89");
        uint64_t v241 = sub_623C(v240, (uint64_t)v502, 32.0);
        sub_B01C(v500, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_120_90");
        v242 = (void *)sub_623C(v241, (uint64_t)v500, 0.5);
        unint64_t v243 = v1[1];
        if (v243 >= v1[2])
        {
          uint64_t v244 = sub_12BDD4(v1, v242);
        }
        else
        {
          sub_5FDC(v1[1], v242);
          uint64_t v244 = v243 + 176;
          v1[1] = v243 + 176;
        }
        v1[1] = v244;
        if (v501 < 0) {
          operator delete(v500[0]);
        }
        if (v503 < 0) {
          operator delete(v502[0]);
        }
        if (v505 < 0) {
          operator delete(v504[0]);
        }
        if (v507 < 0) {
          operator delete(v506[0]);
        }
        if (v509 < 0) {
          operator delete(v508[0]);
        }
        if (v511 < 0) {
          operator delete(v510[0]);
        }
        if (v513 < 0) {
          operator delete(v512[0]);
        }
        if (v515 < 0) {
          operator delete(v514[0]);
        }
        if (v517 < 0) {
          operator delete(v516[0]);
        }
        if (v519 < 0) {
          operator delete(v518[0]);
        }
        if (v521 < 0) {
          operator delete(v520[0]);
        }
        if (v523 < 0) {
          operator delete(v522[0]);
        }
        if (v525 < 0) {
          operator delete(v524[0]);
        }
        if (v527 < 0) {
          operator delete(v526[0]);
        }
        if (v529 < 0) {
          operator delete(v528[0]);
        }
        if (v531 < 0) {
          operator delete(v530[0]);
        }
        if (v533 < 0) {
          operator delete(v532[0]);
        }
        if (v535 < 0) {
          operator delete(v534[0]);
        }
        if (v537 < 0) {
          operator delete(v536[0]);
        }
        if (v539 < 0) {
          operator delete(v538[0]);
        }
        if (v541 < 0) {
          operator delete(v540[0]);
        }
        if (v543 < 0) {
          operator delete(v542[0]);
        }
        if (v545 < 0) {
          operator delete(v544[0]);
        }
        if (v547 < 0) {
          operator delete(v546[0]);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        if (v551 < 0) {
          operator delete(v550[0]);
        }
        if (v553 < 0) {
          operator delete(v552[0]);
        }
        if (v555 < 0) {
          operator delete(v554[0]);
        }
        if (v557 < 0) {
          operator delete(v556[0]);
        }
        if (v559 < 0) {
          operator delete(v558[0]);
        }
        if (v561 < 0) {
          operator delete(v560[0]);
        }
        if (v563 < 0) {
          operator delete(v562[0]);
        }
        if (v565 < 0) {
          operator delete(v564[0]);
        }
        if (v567 < 0) {
          operator delete(v566[0]);
        }
        if (v569 < 0) {
          operator delete(v568[0]);
        }
        if (v571 < 0) {
          operator delete(v570[0]);
        }
        if (v573 < 0) {
          operator delete(v572[0]);
        }
        if (v575 < 0) {
          operator delete(v574[0]);
        }
        if (v577 < 0) {
          operator delete(v576[0]);
        }
        if (v579 < 0) {
          operator delete(v578[0]);
        }
        if (v581 < 0) {
          operator delete(v580[0]);
        }
        if (v583 < 0) {
          operator delete(v582[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v214 += 4;
    }
    while (v214 != 12);
    uint64_t v245 = 0;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v246 = v19 < 2;
      int v247 = *(_DWORD *)((char *)&v943 + v245);
      if (v247 != 15) {
        BOOL v246 = 0;
      }
      if (v247 < 15 || v246)
      {
        sub_5DD0((uint64_t)&v938, v247, v18);
        sub_B01C(v498, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
        sub_B01C(v496, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
        uint64_t v249 = sub_6024((uint64_t)&v938, (long long *)v498, (long long *)v496);
        sub_B01C(v494, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
        sub_B01C(v492, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
        uint64_t v250 = sub_6024(v249, (long long *)v494, (long long *)v492);
        sub_B01C(v490, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
        sub_B01C(v488, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
        uint64_t v251 = sub_6024(v250, (long long *)v490, (long long *)v488);
        sub_B01C(v486, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
        sub_B01C(v484, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
        uint64_t v252 = sub_6024(v251, (long long *)v486, (long long *)v484);
        sub_B01C(v482, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
        v253 = (void *)sub_623C(v252, (uint64_t)v482, 2.0);
        unint64_t v254 = v1[1];
        if (v254 >= v1[2])
        {
          uint64_t v255 = sub_12BDD4(v1, v253);
        }
        else
        {
          sub_5FDC(v1[1], v253);
          uint64_t v255 = v254 + 176;
          v1[1] = v254 + 176;
        }
        v1[1] = v255;
        if (v483 < 0) {
          operator delete(v482[0]);
        }
        if (v485 < 0) {
          operator delete(v484[0]);
        }
        if (v487 < 0) {
          operator delete(v486[0]);
        }
        if (v489 < 0) {
          operator delete(v488[0]);
        }
        if (v491 < 0) {
          operator delete(v490[0]);
        }
        if (v493 < 0) {
          operator delete(v492[0]);
        }
        if (v495 < 0) {
          operator delete(v494[0]);
        }
        if (v497 < 0) {
          operator delete(v496[0]);
        }
        if (v499 < 0) {
          operator delete(v498[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        sub_8240((uint64_t)v939);
      }
      v245 += 4;
    }
    while (v245 != 12);
    sub_5DD0((uint64_t)&v938, 12, v18);
    sub_B01C(v480, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
    sub_B01C(v478, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
    uint64_t v256 = sub_6024((uint64_t)&v938, (long long *)v480, (long long *)v478);
    sub_B01C(v476, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
    sub_B01C(v474, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
    uint64_t v257 = sub_6024(v256, (long long *)v476, (long long *)v474);
    sub_B01C(v472, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
    sub_B01C(v470, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
    uint64_t v258 = sub_6024(v257, (long long *)v472, (long long *)v470);
    sub_B01C(v468, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
    sub_B01C(v466, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
    uint64_t v259 = sub_6024(v258, (long long *)v468, (long long *)v466);
    sub_B01C(v464, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
    v260 = (void *)sub_623C(v259, (uint64_t)v464, 2.0);
    unint64_t v261 = v1[1];
    if (v261 >= v1[2])
    {
      uint64_t v262 = sub_12BDD4(v1, v260);
    }
    else
    {
      sub_5FDC(v1[1], v260);
      uint64_t v262 = v261 + 176;
      v1[1] = v261 + 176;
    }
    v1[1] = v262;
    if (v465 < 0) {
      operator delete(v464[0]);
    }
    if (v467 < 0) {
      operator delete(v466[0]);
    }
    if (v469 < 0) {
      operator delete(v468[0]);
    }
    if (v471 < 0) {
      operator delete(v470[0]);
    }
    if (v473 < 0) {
      operator delete(v472[0]);
    }
    if (v475 < 0) {
      operator delete(v474[0]);
    }
    if (v477 < 0) {
      operator delete(v476[0]);
    }
    if (v479 < 0) {
      operator delete(v478[0]);
    }
    if (v481 < 0) {
      operator delete(v480[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_85AC((uint64_t)v940);
    sub_8240((uint64_t)v939);
    sub_5DD0((uint64_t)&v938, 11, v18);
    sub_B01C(v462, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
    sub_B01C(v460, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
    uint64_t v263 = sub_6024((uint64_t)&v938, (long long *)v462, (long long *)v460);
    sub_B01C(v458, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
    sub_B01C(v456, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
    uint64_t v264 = sub_6024(v263, (long long *)v458, (long long *)v456);
    sub_B01C(v454, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
    sub_B01C(v452, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
    uint64_t v265 = sub_6024(v264, (long long *)v454, (long long *)v452);
    sub_B01C(v450, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
    sub_B01C(v448, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
    uint64_t v266 = sub_6024(v265, (long long *)v450, (long long *)v448);
    sub_B01C(v446, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
    v267 = (void *)sub_623C(v266, (uint64_t)v446, 0.5);
    unint64_t v268 = v1[1];
    if (v268 >= v1[2])
    {
      uint64_t v269 = sub_12BDD4(v1, v267);
    }
    else
    {
      sub_5FDC(v1[1], v267);
      uint64_t v269 = v268 + 176;
      v1[1] = v268 + 176;
    }
    v1[1] = v269;
    if (v447 < 0) {
      operator delete(v446[0]);
    }
    if (v449 < 0) {
      operator delete(v448[0]);
    }
    if (v451 < 0) {
      operator delete(v450[0]);
    }
    if (v453 < 0) {
      operator delete(v452[0]);
    }
    if (v455 < 0) {
      operator delete(v454[0]);
    }
    if (v457 < 0) {
      operator delete(v456[0]);
    }
    if (v459 < 0) {
      operator delete(v458[0]);
    }
    if (v461 < 0) {
      operator delete(v460[0]);
    }
    if (v463 < 0) {
      operator delete(v462[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_85AC((uint64_t)v940);
    sub_8240((uint64_t)v939);
    for (uint64_t j = 0; j != 5; ++j)
    {
      sub_5DD0((uint64_t)&v938, dword_4C753C[j], v18);
      sub_B01C(v444, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_71_43");
      sub_B01C(v442, "_d54a22a6f6eb41ec901489f9e47263886645d322e2546360a6622d2c6bdeddb9");
      uint64_t v271 = sub_6024((uint64_t)&v938, (long long *)v444, (long long *)v442);
      sub_B01C(v440, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_72_44");
      sub_B01C(v438, "_426da530d7dc3093409acc82244bf8b45bf25ffbf6f37a2b37e2afcb9f76bde4");
      uint64_t v272 = sub_6024(v271, (long long *)v440, (long long *)v438);
      sub_B01C(v436, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_121_91");
      uint64_t v273 = sub_623C(v272, (uint64_t)v436, 0.125);
      sub_B01C(v434, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_122_92");
      v274 = (void *)sub_623C(v273, (uint64_t)v434, 0.0625);
      unint64_t v275 = v1[1];
      if (v275 >= v1[2])
      {
        uint64_t v276 = sub_12BDD4(v1, v274);
      }
      else
      {
        sub_5FDC(v1[1], v274);
        uint64_t v276 = v275 + 176;
        v1[1] = v275 + 176;
      }
      v1[1] = v276;
      if (v435 < 0) {
        operator delete(v434[0]);
      }
      if (v437 < 0) {
        operator delete(v436[0]);
      }
      if (v439 < 0) {
        operator delete(v438[0]);
      }
      if (v441 < 0) {
        operator delete(v440[0]);
      }
      if (v443 < 0) {
        operator delete(v442[0]);
      }
      if (v445 < 0) {
        operator delete(v444[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
    }
    uint64_t v277 = 0;
    uint64_t v943 = 0xB0000000ALL;
    int v944 = 12;
    do
    {
      sub_5DD0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v277), v18);
      sub_B01C(v432, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_71_43");
      sub_B01C(v430, "_e04363b0193aecfc56d5f1c5edb7fc2147625522e4ecdb3a8d24ae32f45eaa5c");
      uint64_t v278 = sub_6024((uint64_t)&v938, (long long *)v432, (long long *)v430);
      sub_B01C(v428, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_72_44");
      sub_B01C(v426, "_f89636291d4d2848204d266a1eff5d7b231750cc967f91d005cb1fc30779b1cc");
      uint64_t v279 = sub_6024(v278, (long long *)v428, (long long *)v426);
      sub_B01C(v424, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_121_91");
      v280 = (void *)sub_623C(v279, (uint64_t)v424, 1.0);
      unint64_t v281 = v1[1];
      if (v281 >= v1[2])
      {
        uint64_t v282 = sub_12BDD4(v1, v280);
      }
      else
      {
        sub_5FDC(v1[1], v280);
        uint64_t v282 = v281 + 176;
        v1[1] = v281 + 176;
      }
      v1[1] = v282;
      if (v425 < 0) {
        operator delete(v424[0]);
      }
      if (v427 < 0) {
        operator delete(v426[0]);
      }
      if (v429 < 0) {
        operator delete(v428[0]);
      }
      if (v431 < 0) {
        operator delete(v430[0]);
      }
      if (v433 < 0) {
        operator delete(v432[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
      v277 += 4;
    }
    while (v277 != 12);
    for (uint64_t k = 0; k != 8; ++k)
    {
      int v284 = dword_4C7500[k];
      sub_5DD0((uint64_t)&v938, v284, v18);
      sub_B01C(v422, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_73_45");
      sub_B01C(v420, "_6d86d89a09a872e62b809325d49d6967e2327aa5d1d4ea471d700f29696b9560");
      uint64_t v285 = sub_6024((uint64_t)&v938, (long long *)v422, (long long *)v420);
      sub_B01C(v418, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_74_46");
      sub_B01C(v416, "_871eb7474b854b92c49783a16238fd7c52ef56150d0f4caa839424650bcb6f32");
      uint64_t v286 = sub_6024(v285, (long long *)v418, (long long *)v416);
      sub_B01C(v414, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_123_93");
      uint64_t v287 = sub_623C(v286, (uint64_t)v414, 0.5);
      sub_B01C(v412, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_124_94");
      uint64_t v288 = sub_623C(v287, (uint64_t)v412, 8.0);
      sub_B01C(v410, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_125_95");
      BOOL v290 = v284 == 15 && v19 < 2 || v284 < 15;
      double v291 = 128.0;
      if (v290) {
        double v291 = 64.0;
      }
      v292 = (void *)sub_623C(v288, (uint64_t)v410, v291);
      unint64_t v293 = v1[1];
      if (v293 >= v1[2])
      {
        uint64_t v294 = sub_12BDD4(v1, v292);
      }
      else
      {
        sub_5FDC(v1[1], v292);
        uint64_t v294 = v293 + 176;
        v1[1] = v293 + 176;
      }
      v1[1] = v294;
      if (v411 < 0) {
        operator delete(v410[0]);
      }
      if (v413 < 0) {
        operator delete(v412[0]);
      }
      if (v415 < 0) {
        operator delete(v414[0]);
      }
      if (v417 < 0) {
        operator delete(v416[0]);
      }
      if (v419 < 0) {
        operator delete(v418[0]);
      }
      if (v421 < 0) {
        operator delete(v420[0]);
      }
      if (v423 < 0) {
        operator delete(v422[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      sub_8240((uint64_t)v939);
    }
    for (uint64_t m = 0; m != 8; ++m)
    {
      BOOL v296 = v19 < 2;
      int v297 = dword_4C7500[m];
      if (v297 != 15) {
        BOOL v296 = 0;
      }
      if (v297 >= 15 && !v296)
      {
        sub_5DD0((uint64_t)&v938, v297, v18);
        sub_B01C(v398, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_75_47");
        sub_B01C(v396, "_8ff5f6e1c2e52558354049aef96f7abf429f223a3fc4e626292d894456e02fc2");
        uint64_t v304 = sub_6024((uint64_t)&v938, (long long *)v398, (long long *)v396);
        sub_B01C(v394, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_76_48");
        sub_B01C(v392, "_da0afb5d20fd710a2f7ce18da42b2a53dc3d3fcfe45ac35c28e75d4402986d37");
        uint64_t v305 = sub_6024(v304, (long long *)v394, (long long *)v392);
        sub_B01C(v390, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_126_96");
        v306 = (void *)sub_623C(v305, (uint64_t)v390, 1.0);
        unint64_t v307 = v1[1];
        if (v307 >= v1[2])
        {
          uint64_t v308 = sub_12BDD4(v1, v306);
        }
        else
        {
          sub_5FDC(v1[1], v306);
          uint64_t v308 = v307 + 176;
          v1[1] = v307 + 176;
        }
        v1[1] = v308;
        if (v391 < 0) {
          operator delete(v390[0]);
        }
        if (v393 < 0) {
          operator delete(v392[0]);
        }
        if (v395 < 0) {
          operator delete(v394[0]);
        }
        if (v397 < 0) {
          operator delete(v396[0]);
        }
        if (v399 < 0)
        {
          v309 = v398[0];
          goto LABEL_812;
        }
      }
      else
      {
        sub_5DD0((uint64_t)&v938, v297, v18);
        sub_B01C(&v408, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_75_47");
        sub_B01C(v406, "_bb9dbea90df77e54beebae872b35923d727fd2a59d6905410b32092d6d561402");
        uint64_t v299 = sub_6024((uint64_t)&v938, &v408, (long long *)v406);
        sub_B01C(v404, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_76_48");
        sub_B01C(v402, "_63b42fb9d33e39b5f913060438c759d841275b394631cb7a8145853e9a04ef67");
        uint64_t v300 = sub_6024(v299, (long long *)v404, (long long *)v402);
        sub_B01C(v400, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_126_96");
        v301 = (void *)sub_623C(v300, (uint64_t)v400, 1.0);
        unint64_t v302 = v1[1];
        if (v302 >= v1[2])
        {
          uint64_t v303 = sub_12BDD4(v1, v301);
        }
        else
        {
          sub_5FDC(v1[1], v301);
          uint64_t v303 = v302 + 176;
          v1[1] = v302 + 176;
        }
        v1[1] = v303;
        if (v401 < 0) {
          operator delete(v400[0]);
        }
        if (v403 < 0) {
          operator delete(v402[0]);
        }
        if (v405 < 0) {
          operator delete(v404[0]);
        }
        if (v407 < 0) {
          operator delete(v406[0]);
        }
        if (v409 < 0)
        {
          v309 = (void *)v408;
LABEL_812:
          operator delete(v309);
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_85AC((uint64_t)v940);
      uint64_t result = sub_8240((uint64_t)v939);
    }
    uint64_t v311 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v312 = v19 < 2;
      int v313 = *(_DWORD *)((char *)&v943 + v311);
      if (v313 != 15) {
        BOOL v312 = 0;
      }
      if (v313 >= 15 && !v312)
      {
        sub_5DD0((uint64_t)&v938, v313, v18);
        sub_B01C(v388, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_127_97");
        uint64_t v314 = sub_623C((uint64_t)&v938, (uint64_t)v388, 8.0);
        sub_B01C(v386, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_128_98");
        v315 = (void *)sub_623C(v314, (uint64_t)v386, 128.0);
        unint64_t v316 = v1[1];
        if (v316 >= v1[2])
        {
          uint64_t v317 = sub_12BDD4(v1, v315);
        }
        else
        {
          sub_5FDC(v1[1], v315);
          uint64_t v317 = v316 + 176;
          v1[1] = v316 + 176;
        }
        v1[1] = v317;
        if (v387 < 0) {
          operator delete(v386[0]);
        }
        if (v389 < 0) {
          operator delete(v388[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        uint64_t result = sub_8240((uint64_t)v939);
      }
      v311 += 4;
    }
    while (v311 != 12);
    for (uint64_t n = 0; n != 6; ++n)
    {
      BOOL v319 = v19 < 2;
      int v320 = dword_4C7550[n];
      if (v320 != 15) {
        BOOL v319 = 0;
      }
      if (v320 < 15 || v319)
      {
        sub_5DD0((uint64_t)&v938, v320, v18);
        sub_B01C(v384, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_77_49");
        sub_B01C(v382, "_9492ca9a91eedcc95e1741334edf1a3855869e882d2b6adc820c2c5e1850532f");
        uint64_t v322 = sub_6024((uint64_t)&v938, (long long *)v384, (long long *)v382);
        sub_B01C(v380, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_77_49");
        sub_B01C(v378, "_4bb4a72bfa974f38e0143eef87e93ae69847e8612684f014350fb4a8c0692050");
        uint64_t v323 = sub_6024(v322, (long long *)v380, (long long *)v378);
        sub_B01C(v376, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_78_50");
        sub_B01C(v374, "_4309079a0b69c765325f6ac5313a4b1c75a2fa562cbb0c420ac0dd80de814ccd");
        uint64_t v324 = sub_6024(v323, (long long *)v376, (long long *)v374);
        sub_B01C(v372, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_78_50");
        sub_B01C(v370, "_367a60a3f4d39b45114c57a560ad1bad4f9f62798346ead3a98f790ad32537a6");
        uint64_t v325 = sub_6024(v324, (long long *)v372, (long long *)v370);
        sub_B01C(v368, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_79_51");
        sub_B01C(v366, "_4088b7c5932a1a8ba88b39e4d641d4f8c3b7ec56ebf78a9c3e7f5b8bffea84d6");
        uint64_t v326 = sub_6024(v325, (long long *)v368, (long long *)v366);
        sub_B01C(v364, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_79_51");
        sub_B01C(v362, "_6b3a9b25a65b692ad1039bcc4c052d5a85e40a9410946c0cdf5dc85d993e2131");
        v327 = (void *)sub_6024(v326, (long long *)v364, (long long *)v362);
        unint64_t v328 = v1[1];
        if (v328 >= v1[2])
        {
          uint64_t v329 = sub_12BDD4(v1, v327);
        }
        else
        {
          sub_5FDC(v1[1], v327);
          uint64_t v329 = v328 + 176;
          v1[1] = v328 + 176;
        }
        v1[1] = v329;
        if (v363 < 0) {
          operator delete(v362[0]);
        }
        if (v365 < 0) {
          operator delete(v364[0]);
        }
        if (v367 < 0) {
          operator delete(v366[0]);
        }
        if (v369 < 0) {
          operator delete(v368[0]);
        }
        if (v371 < 0) {
          operator delete(v370[0]);
        }
        if (v373 < 0) {
          operator delete(v372[0]);
        }
        if (v375 < 0) {
          operator delete(v374[0]);
        }
        if (v377 < 0) {
          operator delete(v376[0]);
        }
        if (v379 < 0) {
          operator delete(v378[0]);
        }
        if (v381 < 0) {
          operator delete(v380[0]);
        }
        if (v383 < 0) {
          operator delete(v382[0]);
        }
        if (v385 < 0) {
          operator delete(v384[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        uint64_t result = sub_8240((uint64_t)v939);
      }
    }
    uint64_t v330 = 0;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v331 = v19 < 2;
      int v332 = *(_DWORD *)((char *)&v943 + v330);
      if (v332 != 15) {
        BOOL v331 = 0;
      }
      if (v332 >= 15 && !v331)
      {
        if (v332 == 16 && v18 == 3) {
          double v334 = 1024.0;
        }
        else {
          double v334 = 768.0;
        }
        sub_5DD0((uint64_t)&v938, v332, v18);
        sub_B01C(v360, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_141_110");
        uint64_t v335 = sub_623C((uint64_t)&v938, (uint64_t)v360, 1.0);
        sub_B01C(v358, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_140_109");
        uint64_t v336 = sub_623C(v335, (uint64_t)v358, v334);
        sub_B01C(v356, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_143_111");
        uint64_t v337 = sub_623C(v336, (uint64_t)v356, 96.0);
        sub_B01C(v354, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_144_112");
        uint64_t v338 = sub_623C(v337, (uint64_t)v354, 8.0);
        sub_B01C(v352, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_145_113");
        uint64_t v339 = sub_623C(v338, (uint64_t)v352, 1.0);
        sub_B01C(v350, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_147_114");
        uint64_t v340 = sub_623C(v339, (uint64_t)v350, 16.0);
        sub_B01C(v348, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_148_115");
        uint64_t v341 = sub_623C(v340, (uint64_t)v348, 8.0);
        sub_B01C(v346, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_149_116");
        v342 = (void *)sub_623C(v341, (uint64_t)v346, 1.0);
        unint64_t v343 = v1[1];
        if (v343 >= v1[2])
        {
          uint64_t v344 = sub_12BDD4(v1, v342);
        }
        else
        {
          sub_5FDC(v1[1], v342);
          uint64_t v344 = v343 + 176;
          v1[1] = v343 + 176;
        }
        v1[1] = v344;
        if (v347 < 0) {
          operator delete(v346[0]);
        }
        if (v349 < 0) {
          operator delete(v348[0]);
        }
        if (v351 < 0) {
          operator delete(v350[0]);
        }
        if (v353 < 0) {
          operator delete(v352[0]);
        }
        if (v355 < 0) {
          operator delete(v354[0]);
        }
        if (v357 < 0) {
          operator delete(v356[0]);
        }
        if (v359 < 0) {
          operator delete(v358[0]);
        }
        if (v361 < 0) {
          operator delete(v360[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_85AC((uint64_t)v940);
        uint64_t result = sub_8240((uint64_t)v939);
      }
      v330 += 4;
    }
    while (v330 != 12);
    uint64_t v16 = v345 + 1;
  }
  while (v345 != 5);
  return result;
}

void sub_1296CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x4EF]) < 0) {
    operator delete((void *)STACK[0x4D8]);
  }
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  if (SLOBYTE(STACK[0x537]) < 0) {
    operator delete((void *)STACK[0x520]);
  }
  if (SLOBYTE(STACK[0x54F]) < 0) {
    operator delete((void *)STACK[0x538]);
  }
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (SLOBYTE(STACK[0x57F]) < 0) {
    operator delete((void *)STACK[0x568]);
  }
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  sub_5FE0((uint64_t)&STACK[0x1BD0]);
  *(void *)(v3 - 192) = v1;
  sub_D1C0((void ***)(v3 - 192));
  _Unwind_Resume(a1);
}

int *sub_12B4FC(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = sub_12B554(a1, a2);
  uint64_t v5 = sub_12B83C(a1, a2);

  return sub_DCCC((unsigned int *)v4, (unsigned int *)v5);
}

int *sub_12B554(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  uint64_t v6 = sub_DCCC(v4, v5);
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  uint64_t v8 = sub_DCCC((unsigned int *)v6, v7);
  uint64_t v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  uint64_t v10 = sub_DCCC((unsigned int *)v8, v9);
  uint64_t v11 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
  uint64_t v12 = sub_DCCC((unsigned int *)v10, v11);
  unsigned int v13 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
  unint64_t v14 = sub_DCCC((unsigned int *)v12, v13);
  geuint64_t n = agxps_gpu_get_gen(a1);
  int variant = agxps_gpu_get_variant((uint64_t)a1);
  int rev = agxps_gpu_get_rev((uint64_t)a1);
  if (gen != 15 || variant != 3 || rev != 1)
  {
    int v18 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
    unint64_t v14 = sub_DCCC((unsigned int *)v14, v18);
  }
  BOOL v20 = gen == 15 && variant > 2;
  if (gen != 16 && !v20 && (gen != 17 || variant > 2)) {
    return v14;
  }
  double v21 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD");
  unint64_t v22 = sub_DCCC((unsigned int *)v14, v21);
  uint64_t v23 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");

  return sub_DCCC((unsigned int *)v22, v23);
}

int *sub_12B83C(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  uint64_t v6 = sub_DCCC(v4, v5);
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  uint64_t v8 = sub_DCCC((unsigned int *)v6, v7);
  uint64_t v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  uint64_t v10 = sub_DCCC((unsigned int *)v8, v9);
  uint64_t v11 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
  uint64_t v12 = sub_DCCC((unsigned int *)v10, v11);
  unsigned int v13 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
  unint64_t v14 = sub_DCCC((unsigned int *)v12, v13);
  geuint64_t n = agxps_gpu_get_gen(a1);
  int variant = agxps_gpu_get_variant((uint64_t)a1);
  int rev = agxps_gpu_get_rev((uint64_t)a1);
  if (gen != 15 || variant != 3 || rev != 1)
  {
    int v18 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
    unint64_t v14 = sub_DCCC((unsigned int *)v14, v18);
  }
  BOOL v20 = gen == 15 && variant > 2;
  if (gen != 16 && !v20 && (gen != 17 || variant > 2)) {
    return v14;
  }
  double v21 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3");
  unint64_t v22 = sub_DCCC((unsigned int *)v14, v21);
  uint64_t v23 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");

  return sub_DCCC((unsigned int *)v22, v23);
}

BOOL sub_12BB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t length = agxps_timeseries_get_length(a1);
  BOOL result = agxps_gpu_is_valid(a1);
  if (result)
  {
    BOOL result = agxps_gpu_is_valid(a2);
    if (result)
    {
      BOOL result = agxps_gpu_is_valid(a3);
      if (result)
      {
        BOOL result = agxps_gpu_is_valid(a4);
        if (result) {
          return agxps_timeseries_get_length(a2) == length
        }
              && agxps_timeseries_get_length(a3) == length
              && agxps_timeseries_get_length(a4) == length;
      }
    }
  }
  return result;
}

int *sub_12BBD0(uint64_t a1, uint64_t (***a2)(void, const char *))
{
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  uint64_t v6 = sub_DCCC(v4, v5);
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  uint64_t v8 = sub_DCCC((unsigned int *)v6, v7);
  uint64_t v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  uint64_t v10 = (**a2)(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_120_90");
  uint64_t v12 = sub_11D84(v9, v10, v11);
  unsigned int v13 = sub_DCCC((unsigned int *)v8, (unsigned int *)v12);
  unint64_t v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_67_39");
  uint64_t v15 = sub_DCCC((unsigned int *)v13, v14);
  uint64_t v16 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_69_41");

  return sub_DCCC((unsigned int *)v15, v16);
}

uint64_t sub_12BDD4(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x1745D1745D1745DLL) {
    sub_566C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v9 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_12BF6C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v13 = v10;
  unint64_t v14 = &v10[176 * v4];
  uint64_t v16 = &v10[176 * v9];
  sub_5FDC((uint64_t)v14, a2);
  uint64_t v15 = v14 + 176;
  sub_12BEF4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_12C100(&v13);
  return v11;
}

void sub_12BEE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_12C100((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_12BEF4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_12BFB8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_12BF6C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    sub_574C();
  }
  return operator new(176 * a2);
}

uint64_t sub_12BFB8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 22;
      sub_5FDC(v7 - 176, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 176;
      *((void *)&v15 + 1) -= 176;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_12C074((uint64_t)v12);
  return v10;
}

void sub_12C060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_12C074(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_12C0AC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_12C0AC(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_D258(v3, v1);
      v1 += 176;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_12C100(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_12C134(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 176;
      uint64_t result = sub_D258(v4, v1 - 176);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_12C17C()
{
  return 0;
}

uint64_t sub_12C184()
{
  return raise(5);
}

void *sub_12C18C()
{
  return &_os_log_disabled;
}

unsigned int *sub_12C198(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = 0;
    uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1[2]);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.i32[0] == 1 && v1[2] - 2049 >= 0xFFFFF80F)
    {
      uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[3]);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.i32[0] == 1 && v1[3] - 8193 >= 0xFFFFE03F)
      {
        uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1[4]);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.i32[0] == 1 && v1[4] - 32769 >= 0xFFFF807F) {
          operator new();
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_12C26C(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_743080;
  uint8x8_t v3 = (unsigned char *)(a1 + 39500);
  long long v4 = *a2;
  long long v5 = a2[1];
  uint64_t v6 = (unsigned char *)(a1 + 34256);
  *(void *)(a1 + 48) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 86) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v7 = (unsigned char *)(a1 + 376);
  uint64_t v8 = 152;
  do
  {
    *(v7 - 216) = 0;
    *uint64_t v7 = 0;
    v7 += 224;
    --v8;
  }
  while (v8);
  uint64_t v9 = 8;
  do
  {
    *(v6 - 48) = 0;
    unsigned char *v6 = 0;
    v6 += 56;
    --v9;
  }
  while (v9);
  uint64_t v10 = (unsigned char *)(a1 + 34688);
  uint64_t v11 = 16;
  do
  {
    *(v10 - 32) = 0;
    unsigned char *v10 = 0;
    v10 += 40;
    --v11;
  }
  while (v11);
  uint64_t v12 = (unsigned char *)(a1 + 35400);
  uint64_t v13 = 255;
  do
  {
    *(v12 - 8) = 0;
    *uint64_t v12 = 0;
    v12 += 16;
    --v13;
  }
  while (v13);
  uint64_t v14 = 8;
  do
  {
    *(v3 - 12) = 0;
    unsigned char *v3 = 0;
    v3 += 16;
    --v14;
  }
  while (v14);
  long long v15 = (unsigned char *)(a1 + 39628);
  uint64_t v16 = 8;
  do
  {
    *(v15 - 12) = 0;
    *long long v15 = 0;
    v15 += 16;
    --v16;
  }
  while (v16);
  uint64_t v17 = (unsigned char *)(a1 + 39756);
  uint64_t v18 = 8;
  do
  {
    *(v17 - 12) = 0;
    unsigned char *v17 = 0;
    v17 += 16;
    --v18;
  }
  while (v18);
  unsigned int v19 = (unsigned char *)(a1 + 39880);
  uint64_t v20 = 128;
  do
  {
    *(v19 - 8) = 0;
    unsigned char *v19 = 0;
    v19 += 16;
    --v20;
  }
  while (v20);
  *(_OWORD *)(a1 + 39472) = 0u;
  bzero((void *)(a1 + 41920), 0x1CB0uLL);
  int v21 = *(_DWORD *)(a1 + 28);
  if (v21 > 1023)
  {
    if (v21 > 4095)
    {
      if (v21 == 4096)
      {
        int v22 = 6;
        goto LABEL_36;
      }
      if (v21 == 0x2000)
      {
        int v22 = 7;
        goto LABEL_36;
      }
    }
    else
    {
      if (v21 == 1024)
      {
        int v22 = 4;
        goto LABEL_36;
      }
      if (v21 == 2048)
      {
        int v22 = 5;
        goto LABEL_36;
      }
    }
  }
  else if (v21 > 255)
  {
    if (v21 == 256)
    {
      int v22 = 2;
      goto LABEL_36;
    }
    if (v21 == 512)
    {
      int v22 = 3;
      goto LABEL_36;
    }
  }
  else
  {
    if (v21 == 64)
    {
      int v22 = 0;
      goto LABEL_36;
    }
    if (v21 == 128)
    {
      int v22 = 1;
LABEL_36:
      *(_DWORD *)(a1 + 100) = v22;
    }
  }
  return a1;
}

void *sub_12C464(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD *a5)
{
  if (a2 && a3)
  {
    v612 = 0;
    uint64_t v8 = *(void *)(a1 + 128);
    if (!v8) {
      operator new();
    }
    v612 = *(void **)(a1 + 128);
    if (*(unsigned char *)(a1 + 92)) {
      uint64_t v9 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned char *)(a1 + 93)) {
      uint64_t v11 = *(void *)(a1 + 72);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_F63C8(v8, (uint64_t *)(a1 + 136), 1 << (*(_DWORD *)(a1 + 100) + 6), v9, v11);
    uint64_t v574 = *(void *)(v8 + 26024);
    if (a5) {
      *a5 = 0;
    }
    uint64_t v13 = 8 * a3;
    unint64_t v611 = 0;
    if (8 * a3)
    {
      char v568 = a4;
      char v561 = a5;
      unint64_t v14 = 0;
      uint64_t v577 = 0;
      char v573 = (void **)(a1 + 41920);
      uint64_t v565 = a1 + 41968;
      uint64_t v564 = a1 + 39472;
      uint64_t v563 = a1 + 35392;
      uint64_t v560 = a1 + 39872;
      uint64_t v562 = a1 + 35296;
      uint64_t v566 = a1 + 34208;
      uint64_t v567 = a1 + 34656;
      uint64_t v571 = a1 + 160;
      v572 = (unint64_t *)(a1 + 72);
      char v569 = (uint64_t *)(a1 + 56);
      v570 = (unsigned char *)(a1 + 93);
      while (1)
      {
        if (v13 - v14 <= 0x340)
        {
          memset(__s1, 0, sizeof(__s1));
          uint64_t v12 = memcmp(__s1, (const void *)(a2 + (v14 >> 3)), a3 - (v14 >> 3));
          if (!v12) {
            goto LABEL_875;
          }
        }
        char v610 = 0;
        uint64_t v12 = sub_148754((uint64_t)v624, a2, (uint64_t *)&v611, &v610);
        if (!v610) {
          break;
        }
        if (v624[0] >= 0x11u)
        {
          uint64_t v17 = sub_12C18C();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s1 = 136315650;
            *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/"
                                  "AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
            *(_WORD *)&__s1[12] = 1024;
            *(_DWORD *)&__s1[14] = 994;
            *(_WORD *)&__s1[18] = 2080;
            *(void *)&__s1[20] = "tokenTypeIndex < numTokenTypes";
            _os_log_error_impl(&def_1C1270, v17, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
          }
          uint64_t v12 = sub_12C17C();
          if (v12) {
            uint64_t v12 = sub_12C184();
          }
        }
        else
        {
          long long v15 = (void *)(v574 + 16 * v624[0]);
          uint64_t v16 = v15[1];
          ++*v15;
          v15[1] = v611 - v14 + v16;
        }
        switch(v624[0])
        {
          case 0:
            unsigned int v18 = (unsigned __int16)v625;
            if (v625 <= 0x97u)
            {
              uint64_t v19 = v571 + 224 * v625;
              uint64_t v20 = v612;
              if (!*(unsigned char *)(v19 + 216))
              {
                *(void *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                char v621 = 0;
                memset(&__s1[40], 0, 64);
                long long v614 = 0u;
                long long v615 = 0u;
                long long __p = 0u;
                long long v617 = 0u;
                char v618 = 0;
                int v622 = 0;
                sub_C2204(v19, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v614 + 1))
                {
                  *(void *)&long long v615 = *((void *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                uint64_t v20 = v612;
                unsigned int v18 = (unsigned __int16)v625;
              }
              int v21 = (char **)(v19 + 40);
              sub_47ECC((void *)(v19 + 40), v20);
              sub_48030((void *)(v19 + 40), 0);
              int v22 = (v18 >> 6) & 0x100 | (v18 >> 8) & 0x3F;
              uint64_t v12 = v19 + 56;
              unint64_t v23 = *(void *)(v19 + 56);
              double v24 = *(_WORD **)(v19 + 48);
              if ((unint64_t)v24 >= v23)
              {
                uint64_t v170 = (char *)v24 - *v21;
                if (v170 <= -3) {
                  sub_566C();
                }
                uint64_t v171 = v170 >> 1;
                unint64_t v172 = v23 - (void)*v21;
                if (v172 <= (v170 >> 1) + 1) {
                  unint64_t v173 = v171 + 1;
                }
                else {
                  unint64_t v173 = v172;
                }
                if (v172 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v174 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v174 = v173;
                }
                if (v174) {
                  uint64_t v12 = (uint64_t)sub_45900(v12, v174);
                }
                else {
                  uint64_t v12 = 0;
                }
                v280 = (_WORD *)(v12 + 2 * v171);
                _WORD *v280 = v22;
                uint64_t v25 = v280 + 1;
                uint64_t v282 = *(char **)(v19 + 40);
                unint64_t v281 = *(char **)(v19 + 48);
                if (v281 != v282)
                {
                  do
                  {
                    __int16 v283 = *((_WORD *)v281 - 1);
                    v281 -= 2;
                    *--v280 = v283;
                  }
                  while (v281 != v282);
                  unint64_t v281 = *v21;
                }
                *(void *)(v19 + 40) = v280;
                *(void *)(v19 + 48) = v25;
                *(void *)(v19 + 56) = v12 + 2 * v174;
                if (v281) {
                  operator delete(v281);
                }
              }
              else
              {
                _WORD *v24 = v22;
                uint64_t v25 = v24 + 1;
              }
              *(void *)(v19 + 48) = v25;
            }
            goto LABEL_856;
          case 1:
            unint64_t v76 = *(unsigned int *)(a1 + 24);
            unint64_t v77 = *(void *)(a1 + 72);
            if (v77 % v76)
            {
              unint64_t v78 = (v77 + v76 - 1) / v76 * v76;
            }
            else
            {
              if (*(void *)(a1 + 80) == v77 && !*(_DWORD *)(a1 + 96) && *v570) {
                goto LABEL_351;
              }
              unint64_t v78 = v77 + v76;
            }
            unint64_t *v572 = v78;
            uint64_t v144 = v612;
            uint64_t v145 = (unint64_t *)v612[3259];
            unint64_t v146 = v612[3260];
            if ((unint64_t)v145 >= v146)
            {
              uint64_t v12 = v612[3258];
              uint64_t v148 = ((uint64_t)v145 - v12) >> 3;
              if ((unint64_t)(v148 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v149 = v146 - v12;
              unint64_t v150 = (uint64_t)(v146 - v12) >> 2;
              if (v150 <= v148 + 1) {
                unint64_t v150 = v148 + 1;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                uint64_t v152 = (char *)sub_5714((uint64_t)(v612 + 3260), v151);
                uint64_t v145 = (unint64_t *)v144[3259];
                uint64_t v12 = v144[3258];
              }
              else
              {
                uint64_t v152 = 0;
              }
              uint64_t v235 = (unint64_t *)&v152[8 * v148];
              *uint64_t v235 = v78;
              uint64_t v147 = v235 + 1;
              while (v145 != (unint64_t *)v12)
              {
                unint64_t v236 = *--v145;
                *--uint64_t v235 = v236;
              }
              v144[3258] = v235;
              v144[3259] = v147;
              v144[3260] = &v152[8 * v151];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *uint64_t v145 = v78;
              uint64_t v147 = v145 + 1;
            }
            v144[3259] = v147;
            if (!(v78 % v76)) {
              v144[3264] = ((((void)v147 - v144[3258]) << 29) - 0x100000000) | (((v144[3256]
            }
                                                                                                  - v144[3255]) >> 3)
                                                                                  - 1);
LABEL_351:
            ++*(_DWORD *)(a1 + 96);
            goto LABEL_856;
          case 2:
            uint64_t v45 = v612;
            uint64_t v46 = v612[3259];
            uint64_t v47 = v612[3258];
            if (v46 - v47 == 8 && !*(void *)(v46 - 8)) {
              v612[3259] = v47;
            }
            uint64_t v48 = *(void *)(a1 + 56) + (1 << (*(_DWORD *)(a1 + 100) + 6));
            unint64_t v49 = sub_3EFB8(a1, (uint64_t)v45, v625 & 0xFFFFF, v48);
            uint64_t v12 = sub_F6A5C((uint64_t)v45, v570, *(unsigned int *)(a1 + 24), v572, v49);
            if (v49 < *(void *)(a1 + 72))
            {
              v50 = sub_12C18C();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1091;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "uscTimestamp >= parser->lastUSCTimestamp";
                _os_log_error_impl(&def_1C1270, v50, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            unint64_t v51 = v612;
            unint64_t v52 = *(unsigned int *)(a1 + 24);
            uint64_t v53 = (unint64_t *)v612[3259];
            unint64_t v54 = v612[3260];
            if ((unint64_t)v53 >= v54)
            {
              uint64_t v12 = v612[3258];
              uint64_t v134 = ((uint64_t)v53 - v12) >> 3;
              if ((unint64_t)(v134 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v135 = v54 - v12;
              unint64_t v136 = (uint64_t)(v54 - v12) >> 2;
              if (v136 <= v134 + 1) {
                unint64_t v136 = v134 + 1;
              }
              if (v135 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v137 = v136;
              }
              if (v137)
              {
                uint64_t v138 = (char *)sub_5714((uint64_t)(v612 + 3260), v137);
                uint64_t v53 = (unint64_t *)v51[3259];
                uint64_t v12 = v51[3258];
              }
              else
              {
                uint64_t v138 = 0;
              }
              v193 = (unint64_t *)&v138[8 * v134];
              unint64_t *v193 = v49;
              int v55 = v193 + 1;
              while (v53 != (unint64_t *)v12)
              {
                unint64_t v194 = *--v53;
                *--v193 = v194;
              }
              v51[3258] = v193;
              v51[3259] = v55;
              v51[3260] = &v138[8 * v137];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *uint64_t v53 = v49;
              int v55 = v53 + 1;
            }
            v51[3259] = v55;
            if (!(v49 % v52)) {
              v51[3264] = ((((void)v55 - v51[3258]) << 29) - 0x100000000) | (((v51[3256] - v51[3255]) >> 3)
            }
                                                                               - 1);
            *(void *)(a1 + 72) = v49;
            *(void *)(a1 + 80) = v49;
            *(_DWORD *)(a1 + 88) = v625 & 0xFFFFF;
            *(_DWORD *)(a1 + 96) = 0;
            uint64_t v195 = v612;
            uint64_t v196 = (uint64_t *)v612[3256];
            unint64_t v197 = v612[3257];
            if ((unint64_t)v196 >= v197)
            {
              uint64_t v12 = v612[3255];
              uint64_t v199 = ((uint64_t)v196 - v12) >> 3;
              if ((unint64_t)(v199 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v200 = v197 - v12;
              unint64_t v201 = (uint64_t)(v197 - v12) >> 2;
              if (v201 <= v199 + 1) {
                unint64_t v201 = v199 + 1;
              }
              if (v200 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v202 = v201;
              }
              if (v202)
              {
                uint64_t v203 = (char *)sub_5714((uint64_t)(v612 + 3257), v202);
                uint64_t v196 = (uint64_t *)v195[3256];
                uint64_t v12 = v195[3255];
              }
              else
              {
                uint64_t v203 = 0;
              }
              uint64_t v204 = (uint64_t *)&v203[8 * v199];
              *uint64_t v204 = v48;
              uint64_t v198 = v204 + 1;
              while (v196 != (uint64_t *)v12)
              {
                uint64_t v205 = *--v196;
                *--uint64_t v204 = v205;
              }
              v195[3255] = v204;
              v195[3256] = v198;
              v195[3257] = &v203[8 * v202];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *uint64_t v196 = v48;
              uint64_t v198 = v196 + 1;
            }
            v195[3256] = v198;
            *char v569 = v48;
            int v206 = v612;
            uint64_t v207 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            uint64_t v208 = (uint64_t *)v612[3262];
            unint64_t v209 = v612[3263];
            if ((unint64_t)v208 >= v209)
            {
              v211 = (void **)(v612 + 3261);
              uint64_t v212 = v612[3261];
              uint64_t v213 = ((uint64_t)v208 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v214 = v209 - v212;
              uint64_t v215 = v214 >> 2;
              if (v214 >> 2 <= (unint64_t)(v213 + 1)) {
                uint64_t v215 = v213 + 1;
              }
              if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v612 + 3263), v216);
              }
              else {
                uint64_t v12 = 0;
              }
              uint64_t v231 = (uint64_t *)(v12 + 8 * v213);
              *uint64_t v231 = v207;
              uint64_t v210 = v231 + 1;
              uint64_t v232 = (char *)v206[3262];
              uint64_t v233 = (char *)v206[3261];
              if (v232 != v233)
              {
                do
                {
                  uint64_t v234 = *((void *)v232 - 1);
                  v232 -= 8;
                  *--uint64_t v231 = v234;
                }
                while (v232 != v233);
                uint64_t v232 = (char *)*v211;
              }
              v206[3261] = v231;
              v206[3262] = v210;
              v206[3263] = v12 + 8 * v216;
              if (v232) {
                operator delete(v232);
              }
            }
            else
            {
              *uint64_t v208 = v207;
              uint64_t v210 = v208 + 1;
            }
            v206[3262] = v210;
            goto LABEL_856;
          case 3:
            uint64_t v61 = v612;
            uint64_t v62 = v612[3256];
            uint64_t v63 = v612[3255];
            if (v62 - v63 == 8 && !*(void *)(v62 - 8)) {
              v612[3256] = v63;
            }
            uint64_t v64 = v61[3259];
            uint64_t v65 = v61[3258];
            if (v64 - v65 == 8 && !*(void *)(v64 - 8)) {
              v61[3259] = v65;
            }
            unint64_t v66 = *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v67 = sub_3EFB8(a1, (uint64_t)v61, v625 & 0xFFFFF, *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL);
            sub_F6A04((uint64_t)v61, (unsigned char *)(a1 + 92), 1 << (*(_DWORD *)(a1 + 100) + 6), v569, v66);
            uint64_t v12 = sub_F6A5C((uint64_t)v612, v570, *(unsigned int *)(a1 + 24), v572, v67);
            if ((*((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFuLL) <= *(void *)(a1 + 56))
            {
              uint64_t v68 = sub_12C18C();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1035;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "token.bits.tok.timeStamp.systemTime > parser->lastSystemTimestamp";
                _os_log_error_impl(&def_1C1270, v68, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            uint64_t v69 = v612;
            uint64_t v70 = *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            uint64_t v71 = (uint64_t *)v612[3256];
            unint64_t v72 = v612[3257];
            if ((unint64_t)v71 >= v72)
            {
              uint64_t v12 = v612[3255];
              uint64_t v139 = ((uint64_t)v71 - v12) >> 3;
              if ((unint64_t)(v139 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v140 = v72 - v12;
              unint64_t v141 = (uint64_t)(v72 - v12) >> 2;
              if (v141 <= v139 + 1) {
                unint64_t v141 = v139 + 1;
              }
              if (v140 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v141;
              }
              if (v142)
              {
                uint64_t v143 = (char *)sub_5714((uint64_t)(v612 + 3257), v142);
                uint64_t v71 = (uint64_t *)v69[3256];
                uint64_t v12 = v69[3255];
              }
              else
              {
                uint64_t v143 = 0;
              }
              uint64_t v217 = (uint64_t *)&v143[8 * v139];
              *uint64_t v217 = v70;
              uint64_t v73 = v217 + 1;
              while (v71 != (uint64_t *)v12)
              {
                uint64_t v218 = *--v71;
                *--uint64_t v217 = v218;
              }
              v69[3255] = v217;
              v69[3256] = v73;
              v69[3257] = &v143[8 * v142];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *uint64_t v71 = v70;
              uint64_t v73 = v71 + 1;
            }
            v69[3256] = v73;
            unint64_t v219 = *v572;
            if (v67 <= *v572)
            {
              if (v67 >= *v572) {
                goto LABEL_482;
              }
              *(void *)(a1 + 80) = v219;
              int v225 = (v625 & 0xFFFFF) + v67 - v219;
            }
            else
            {
              uint64_t v220 = v612;
              unint64_t v221 = *(unsigned int *)(a1 + 24);
              uint64_t v222 = (unint64_t *)v612[3259];
              unint64_t v223 = v612[3260];
              if ((unint64_t)v222 >= v223)
              {
                uint64_t v12 = v612[3258];
                uint64_t v226 = ((uint64_t)v222 - v12) >> 3;
                if ((unint64_t)(v226 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v227 = v223 - v12;
                unint64_t v228 = (uint64_t)(v223 - v12) >> 2;
                if (v228 <= v226 + 1) {
                  unint64_t v228 = v226 + 1;
                }
                if (v227 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v229 = v228;
                }
                if (v229)
                {
                  uint64_t v230 = (char *)sub_5714((uint64_t)(v612 + 3260), v229);
                  uint64_t v222 = (unint64_t *)v220[3259];
                  uint64_t v12 = v220[3258];
                }
                else
                {
                  uint64_t v230 = 0;
                }
                uint64_t v308 = (unint64_t *)&v230[8 * v226];
                *uint64_t v308 = v67;
                uint64_t v224 = v308 + 1;
                while (v222 != (unint64_t *)v12)
                {
                  unint64_t v309 = *--v222;
                  *--uint64_t v308 = v309;
                }
                v220[3258] = v308;
                v220[3259] = v224;
                v220[3260] = &v230[8 * v229];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v222 = v67;
                uint64_t v224 = v222 + 1;
              }
              v220[3259] = v224;
              if (!(v67 % v221)) {
                v220[3264] = ((((void)v224 - v220[3258]) << 29) - 0x100000000) | (((v220[3256] - v220[3255]) >> 3)
              }
                                                                                    - 1);
              *(void *)(a1 + 72) = v67;
              *(void *)(a1 + 80) = v67;
              int v225 = v625 & 0xFFFFF;
            }
            *(_DWORD *)(a1 + 88) = v225;
LABEL_482:
            *(_DWORD *)(a1 + 96) = 0;
            v310 = v612;
            uint64_t v311 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            BOOL v312 = (uint64_t *)v612[3262];
            unint64_t v313 = v612[3263];
            if ((unint64_t)v312 >= v313)
            {
              v315 = (void **)(v612 + 3261);
              uint64_t v316 = v612[3261];
              uint64_t v317 = ((uint64_t)v312 - v316) >> 3;
              if ((unint64_t)(v317 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v318 = v313 - v316;
              uint64_t v319 = v318 >> 2;
              if (v318 >> 2 <= (unint64_t)(v317 + 1)) {
                uint64_t v319 = v317 + 1;
              }
              if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v320 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v320 = v319;
              }
              if (v320) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v612 + 3263), v320);
              }
              else {
                uint64_t v12 = 0;
              }
              v321 = (uint64_t *)(v12 + 8 * v317);
              uint64_t *v321 = v311;
              uint64_t v314 = v321 + 1;
              uint64_t v322 = (char *)v310[3262];
              uint64_t v323 = (char *)v310[3261];
              if (v322 != v323)
              {
                do
                {
                  uint64_t v324 = *((void *)v322 - 1);
                  v322 -= 8;
                  *--v321 = v324;
                }
                while (v322 != v323);
                uint64_t v322 = (char *)*v315;
              }
              v310[3261] = v321;
              v310[3262] = v314;
              v310[3263] = v12 + 8 * v320;
              if (v322) {
                operator delete(v322);
              }
            }
            else
            {
              *BOOL v312 = v311;
              uint64_t v314 = v312 + 1;
            }
            v310[3262] = v314;
            uint64_t v325 = *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 56) = *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 64) = v325;
            *(_DWORD *)(a1 + 100) = v626;
            goto LABEL_856;
          case 4:
            uint64_t v29 = sub_12C18C();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1153;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "false";
              _os_log_error_impl(&def_1C1270, v29, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            goto LABEL_856;
          case 5:
            int v79 = v625;
            unsigned int v80 = BYTE4(v625);
            BOOL v81 = v625 == 1;
            if (v625 == 1) {
              unsigned int v82 = BYTE4(v625) & 7 | 0x60;
            }
            else {
              unsigned int v82 = BYTE4(v625);
            }
            if (v82 > 0x97) {
              goto LABEL_856;
            }
            char v83 = BYTE5(v625);
            unsigned int v84 = DWORD2(v625);
            uint64_t v85 = v571 + 224 * v82;
            if (!*(unsigned char *)(v85 + 216)) {
              goto LABEL_120;
            }
            if (*(unsigned char *)(v85 + 214))
            {
              sub_148550(a1, v612, *(unsigned __int8 *)(v85 + 36), 1);
LABEL_120:
              *(void *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                     - 1);
              memset(&__s1[16], 255, 20);
              __s1[36] = v82;
              char v621 = 0;
              memset(&__s1[40], 0, 64);
              long long v614 = 0u;
              long long v615 = 0u;
              long long __p = 0u;
              long long v617 = 0u;
              char v618 = 0;
              int v622 = 0;
              sub_C2204(v85, (uint64_t)__s1);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (*((void *)&v614 + 1))
              {
                *(void *)&long long v615 = *((void *)&v614 + 1);
                operator delete(*((void **)&v614 + 1));
              }
              if (*(void *)&__s1[88])
              {
                *(void *)&__s1[96] = *(void *)&__s1[88];
                operator delete(*(void **)&__s1[88]);
              }
              if (*(void *)&__s1[64])
              {
                *(void *)&__s1[72] = *(void *)&__s1[64];
                operator delete(*(void **)&__s1[64]);
              }
              uint64_t v12 = *(void *)&__s1[40];
              if (*(void *)&__s1[40])
              {
                *(void *)&__s1[48] = *(void *)&__s1[40];
                operator delete(*(void **)&__s1[40]);
              }
            }
            if (!*(unsigned char *)(v85 + 216)) {
              sub_8894();
            }
            *(unsigned char *)(v85 + 215) = v81;
            *(unsigned char *)(v85 + 214) = 1;
            *(unsigned char *)(v85 + 36) = v82;
            if (v79)
            {
              uint64_t v86 = *(void *)(a1 + 104);
              if (v86 == -1) {
                uint64_t v86 = 0;
              }
              *(void *)(a1 + 104) = v86 + 1;
              *(void *)(v85 + 16) = v86;
              uint64_t v87 = v560 + 16 * (v83 & 0x7F);
              *(void *)uint64_t v87 = v86;
              *(unsigned char *)(v87 + 8) = 1;
              unsigned int v80 = *(unsigned __int8 *)(v85 + 36);
            }
            else
            {
              *(unsigned char *)(v85 + 36) = v80;
              if (v84 <= 7)
              {
                unsigned int v185 = *(_DWORD *)(v562 + 12 * v84);
                *(_DWORD *)(v85 + 208) = v185;
                if (v185 <= 7)
                {
                  uint64_t v186 = v566 + 56 * v185;
                  if (*(unsigned char *)(v186 + 48)) {
                    *(_DWORD *)(v85 + 32) = *(_DWORD *)(v186 + 24);
                  }
                }
                uint64_t v187 = v560 + 16 * (*(unsigned char *)(v562 + 12 * v84 + 8) & 0x7F);
                if (*(unsigned char *)(v187 + 8)) {
                  *(void *)(v85 + 16) = *(void *)v187;
                }
                if (v84 - 4 <= 2)
                {
                  uint64_t v188 = v567 + 40 * (v84 - 4);
                  if (*(unsigned char *)(v188 + 32)) {
                    *(void *)(v85 + 24) = *(void *)(v188 + 16);
                  }
                }
              }
            }
            if (v80 < 0x60) {
              goto LABEL_273;
            }
            if (v80 >= 0x68)
            {
              if (v80 <= 0x97) {
                goto LABEL_856;
              }
            }
            else if (*(unsigned char *)(v85 + 215))
            {
              goto LABEL_856;
            }
LABEL_273:
            if (*(void *)(v565 + 48 * v82 + 40))
            {
              uint64_t v189 = v565 + 48 * v82;
              uint64_t v191 = *(void *)(v189 + 8);
              uint64_t v190 = (void *)(v189 + 8);
              if (*(unsigned char *)(*(void *)(*(void *)(v191 + ((v190[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v190[3] & 0x1FFLL))
                            + 32))
              {
                uint64_t v192 = sub_12C18C();
                if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__s1 = 136315650;
                  *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSu"
                                        "pport/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                  *(_WORD *)&__s1[12] = 1024;
                  *(_DWORD *)&__s1[14] = 1429;
                  *(_WORD *)&__s1[18] = 2080;
                  *(void *)&__s1[20] = "!pendingPositionsForClique.front()->cliqueStartSeen";
                  _os_log_error_impl(&def_1C1270, v192, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
                }
                if (sub_12C17C()) {
                  sub_12C184();
                }
              }
              *(unsigned char *)(*(void *)(*(void *)(*v190 + ((v190[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (v190[3] & 0x1FFLL))
                       + 32) = 1;
              *(unsigned char *)(v85 + 213) = 1;
              sub_14F17C(a1, v612);
            }
            goto LABEL_856;
          case 6:
            sub_148550(a1, v612, v625, 0);
            goto LABEL_856;
          case 7:
            if (DWORD1(v625) == 1)
            {
              uint64_t v74 = (*((void *)&v625 + 1) >> 5) & 0x7FFFFFFFFFFLL;
              uint64_t v75 = v563 + 16 * (BYTE8(v625) & 0x1F);
              *(void *)uint64_t v75 = v74;
              *(unsigned char *)(v75 + 8) = 1;
            }
            else
            {
              if (BYTE8(v625) == 255) {
                goto LABEL_856;
              }
              uint64_t v129 = v563 + 16 * BYTE8(v625);
              if (!*(unsigned char *)(v129 + 8)) {
                goto LABEL_856;
              }
              uint64_t v74 = *(void *)v129;
            }
            if (v625 <= 0x97uLL)
            {
              uint64_t v130 = v571 + 224 * v625;
              if (!*(unsigned char *)(v130 + 216))
              {
                *(void *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                char v621 = 0;
                memset(&__s1[40], 0, 64);
                long long v614 = 0u;
                long long v615 = 0u;
                long long __p = 0u;
                long long v617 = 0u;
                char v618 = 0;
                int v622 = 0;
                sub_C2204(v130, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v614 + 1))
                {
                  *(void *)&long long v615 = *((void *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                uint64_t v12 = *(void *)&__s1[40];
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
              }
              unint64_t v131 = *(void *)(v130 + 80);
              int v132 = *(uint64_t **)(v130 + 72);
              if ((unint64_t)v132 >= v131)
              {
                uint64_t v12 = *(void *)(v130 + 64);
                uint64_t v237 = ((uint64_t)v132 - v12) >> 3;
                if ((unint64_t)(v237 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v238 = v131 - v12;
                unint64_t v239 = (uint64_t)(v131 - v12) >> 2;
                if (v239 <= v237 + 1) {
                  unint64_t v239 = v237 + 1;
                }
                if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v240 = v239;
                }
                if (v240)
                {
                  uint64_t v241 = (char *)sub_5714(v130 + 80, v240);
                  uint64_t v12 = *(void *)(v130 + 64);
                  int v132 = *(uint64_t **)(v130 + 72);
                }
                else
                {
                  uint64_t v241 = 0;
                }
                v333 = (uint64_t *)&v241[8 * v237];
                uint64_t *v333 = v74;
                uint64_t v133 = v333 + 1;
                while (v132 != (uint64_t *)v12)
                {
                  uint64_t v334 = *--v132;
                  *--v333 = v334;
                }
                *(void *)(v130 + 64) = v333;
                *(void *)(v130 + 72) = v133;
                *(void *)(v130 + 80) = &v241[8 * v240];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *int v132 = v74;
                uint64_t v133 = v132 + 1;
              }
              *(void *)(v130 + 72) = v133;
            }
            goto LABEL_856;
          case 8:
            BOOL v105 = (void *)(a1 + 41920);
            int v106 = *(char **)(a1 + 41936);
            unsigned int v107 = v625;
            uint64_t v108 = *(char **)(a1 + 41928);
            uint64_t v109 = v106 - v108;
            *(_OWORD *)__s1 = v625;
            *(_OWORD *)&__s1[16] = v626;
            __s1[32] = 0;
            __s1[40] = 0;
            unsigned __int8 v623 = 0;
            if (v106 == v108) {
              uint64_t v110 = 0;
            }
            else {
              uint64_t v110 = 2 * (v106 - v108) - 1;
            }
            unint64_t v111 = *(void *)(a1 + 41952);
            if (v110 != *(void *)(a1 + 41960) + v111) {
              goto LABEL_750;
            }
            BOOL v112 = v111 >= 0x10;
            unint64_t v113 = v111 - 16;
            if (v112)
            {
              BOOL v105 = (void *)(a1 + 41920);
              *(void *)(a1 + 41952) = v113;
              uint64_t v116 = *(void *)v108;
              int v115 = v108 + 8;
              uint64_t v114 = v116;
              *(void *)(a1 + 41928) = v115;
              if (v106 == *(char **)(a1 + 41944))
              {
                uint64_t v117 = (char *)*v573;
                if (v115 <= *v573)
                {
                  if (v106 == v117) {
                    unint64_t v335 = 1;
                  }
                  else {
                    unint64_t v335 = (v106 - v117) >> 2;
                  }
                  if (v335 >> 61) {
LABEL_916:
                  }
                    sub_574C();
                  uint64_t v336 = (char *)operator new(8 * v335);
                  uint64_t v337 = &v336[8 * (v335 >> 2)];
                  uint64_t v338 = v106 - v115;
                  BOOL v532 = v106 == v115;
                  int v106 = v337;
                  if (!v532)
                  {
                    int v106 = &v337[v338 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v339 = 8 * (v338 >> 3);
                    uint64_t v340 = &v336[8 * (v335 >> 2)];
                    do
                    {
                      uint64_t v341 = *(void *)v115;
                      v115 += 8;
                      *(void *)uint64_t v340 = v341;
                      v340 += 8;
                      v339 -= 8;
                    }
                    while (v339);
                  }
                  BOOL v105 = (void *)(a1 + 41920);
                  *char v573 = v336;
                  *(void *)(a1 + 41928) = v337;
                  *(void *)(a1 + 41936) = v106;
                  *(void *)(a1 + 41944) = &v336[8 * v335];
                  if (v117)
                  {
                    operator delete(v117);
                    int v106 = *(char **)(a1 + 41936);
                  }
                }
                else
                {
                  uint64_t v118 = (v115 - (unsigned char *)*v573) >> 3;
                  if (v118 >= -1) {
                    uint64_t v119 = v118 + 1;
                  }
                  else {
                    uint64_t v119 = v118 + 2;
                  }
                  unint64_t v120 = &v115[-8 * (v119 >> 1)];
                  int64_t v121 = v106 - v115;
                  BOOL v105 = (void *)(a1 + 41920);
                  if (v106 != v115)
                  {
                    memmove(&v115[-8 * (v119 >> 1)], v115, v106 - v115);
                    int v106 = *(char **)(a1 + 41928);
                  }
                  uint64_t v122 = &v106[-8 * (v119 >> 1)];
                  int v106 = &v120[v121];
                  *(void *)(a1 + 41928) = v122;
                  *(void *)(a1 + 41936) = &v120[v121];
                }
              }
              *(void *)int v106 = v114;
              goto LABEL_749;
            }
            uint64_t v159 = v109 >> 3;
            v160 = *(char **)(a1 + 41944);
            unint64_t v161 = (char *)*v573;
            uint64_t v162 = v160 - (unsigned char *)*v573;
            if (v109 >> 3 < (unint64_t)(v162 >> 3))
            {
              uint64_t v163 = operator new(0x1080uLL);
              BOOL v164 = v163;
              if (v160 == v106)
              {
                if (v108 == v161)
                {
                  if (v106 == v108) {
                    unint64_t v434 = 1;
                  }
                  else {
                    unint64_t v434 = (v160 - v108) >> 2;
                  }
                  if (v434 >> 61) {
                    goto LABEL_916;
                  }
                  char v435 = (char *)operator new(8 * v434);
                  v342 = &v435[(2 * v434 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v436 = v342;
                  if (v106 != v108)
                  {
                    uint64_t v437 = 8 * v159;
                    v438 = &v435[(2 * v434 + 6) & 0xFFFFFFFFFFFFFFF8];
                    char v439 = v108;
                    v436 = &v342[8 * v159];
                    do
                    {
                      uint64_t v440 = *(void *)v439;
                      v439 += 8;
                      *(void *)v438 = v440;
                      v438 += 8;
                      v437 -= 8;
                    }
                    while (v437);
                  }
                  unint64_t v343 = (void *)(a1 + 41920);
                  *char v573 = v435;
                  *(void *)(a1 + 41928) = v342;
                  *(void *)(a1 + 41936) = v436;
                  *(void *)(a1 + 41944) = &v435[8 * v434];
                  if (v108)
                  {
                    operator delete(v108);
                    v342 = *(char **)(a1 + 41928);
                  }
                }
                else
                {
                  v342 = v108;
                  unint64_t v343 = (void *)(a1 + 41920);
                }
                *((void *)v342 - 1) = v164;
                v442 = (char *)v343[1];
                char v441 = (char *)v343[2];
                v343[1] = v442 - 8;
                uint64_t v443 = *((void *)v442 - 1);
                v343[1] = v442;
                if (v441 == (char *)v343[3])
                {
                  v444 = (char *)*v573;
                  if (v442 <= *v573)
                  {
                    if (v441 == v444) {
                      unint64_t v451 = 1;
                    }
                    else {
                      unint64_t v451 = (v441 - v444) >> 2;
                    }
                    if (v451 >> 61) {
                      goto LABEL_916;
                    }
                    v452 = (char *)operator new(8 * v451);
                    char v453 = &v452[8 * (v451 >> 2)];
                    uint64_t v454 = v441 - v442;
                    BOOL v532 = v441 == v442;
                    char v441 = v453;
                    if (!v532)
                    {
                      char v441 = &v453[v454 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v455 = 8 * (v454 >> 3);
                      v456 = &v452[8 * (v451 >> 2)];
                      do
                      {
                        uint64_t v457 = *(void *)v442;
                        v442 += 8;
                        *(void *)v456 = v457;
                        v456 += 8;
                        v455 -= 8;
                      }
                      while (v455);
                    }
                    *char v573 = v452;
                    *(void *)(a1 + 41928) = v453;
                    *(void *)(a1 + 41936) = v441;
                    *(void *)(a1 + 41944) = &v452[8 * v451];
                    if (v444)
                    {
                      operator delete(v444);
                      char v441 = *(char **)(a1 + 41936);
                    }
                  }
                  else
                  {
                    unsigned int v445 = v107;
                    uint64_t v446 = (v442 - (unsigned char *)*v573) >> 3;
                    if (v446 >= -1) {
                      uint64_t v447 = v446 + 1;
                    }
                    else {
                      uint64_t v447 = v446 + 2;
                    }
                    v448 = &v442[-8 * (v447 >> 1)];
                    int64_t v449 = v441 - v442;
                    if (v441 == v442)
                    {
                      uint64_t v450 = a1 + 41920;
                    }
                    else
                    {
                      memmove(&v442[-8 * (v447 >> 1)], v442, v441 - v442);
                      uint64_t v450 = a1 + 41920;
                      v442 = *(char **)(a1 + 41928);
                    }
                    char v441 = &v448[v449];
                    *(void *)(v450 + 8) = &v442[-8 * (v447 >> 1)];
                    *(void *)(v450 + 16) = &v448[v449];
                    unsigned int v107 = v445;
                  }
                }
                *(void *)char v441 = v443;
              }
              else
              {
                *(void *)int v106 = v163;
              }
              BOOL v105 = (void *)(a1 + 41920);
LABEL_749:
              v105[2] += 8;
              goto LABEL_750;
            }
            uint64_t v246 = v162 >> 2;
            if (v160 == v161) {
              unint64_t v247 = 1;
            }
            else {
              unint64_t v247 = v246;
            }
            if (v247 >> 61) {
              goto LABEL_916;
            }
            v248 = (char *)operator new(8 * v247);
            unsigned int v557 = v107;
            uint64_t v249 = operator new(0x1080uLL);
            uint64_t v250 = &v248[8 * v159];
            uint64_t v251 = &v248[8 * v247];
            if (v159 == v247)
            {
              if (v109 < 1)
              {
                if (v106 == v108) {
                  unint64_t v418 = 1;
                }
                else {
                  unint64_t v418 = v109 >> 2;
                }
                if (v418 >> 61) {
                  sub_574C();
                }
                char v419 = (char *)operator new(8 * v418);
                uint64_t v250 = &v419[8 * (v418 >> 2)];
                uint64_t v251 = &v419[8 * v418];
                operator delete(v248);
                uint64_t v108 = *(char **)(a1 + 41928);
                int v106 = *(char **)(a1 + 41936);
                v248 = v419;
              }
              else
              {
                unint64_t v252 = v159 + 2;
                if (v159 >= -1) {
                  unint64_t v252 = v159 + 1;
                }
                v250 -= 8 * (v252 >> 1);
              }
            }
            *(void *)uint64_t v250 = v249;
            v420 = v250 + 8;
            if (v106 != v108)
            {
              do
              {
                if (v250 == v248)
                {
                  if (v420 >= v251)
                  {
                    if (v251 == v250) {
                      unint64_t v425 = 1;
                    }
                    else {
                      unint64_t v425 = (v251 - v250) >> 2;
                    }
                    if (v425 >> 61) {
                      sub_574C();
                    }
                    v426 = (char *)operator new(8 * v425);
                    v248 = v426;
                    char v421 = &v426[(2 * v425 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v422 = v421;
                    uint64_t v427 = v420 - v250;
                    if (v420 != v250)
                    {
                      v422 = &v421[v427 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v428 = 8 * (v427 >> 3);
                      char v429 = &v426[(2 * v425 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v430 = v250;
                      do
                      {
                        uint64_t v431 = *(void *)v430;
                        v430 += 8;
                        *(void *)char v429 = v431;
                        v429 += 8;
                        v428 -= 8;
                      }
                      while (v428);
                    }
                    uint64_t v251 = &v426[8 * v425];
                    operator delete(v250);
                  }
                  else
                  {
                    uint64_t v423 = (v251 - v420) >> 3;
                    if (v423 >= -1) {
                      unint64_t v424 = v423 + 1;
                    }
                    else {
                      unint64_t v424 = v423 + 2;
                    }
                    v422 = &v420[8 * (v424 >> 1)];
                    char v421 = &v250[8 * (v424 >> 1)];
                    if (v420 == v250)
                    {
                      v248 = v420;
                    }
                    else
                    {
                      memmove(&v250[8 * (v424 >> 1)], v250, v420 - v250);
                      v248 = v250;
                    }
                  }
                }
                else
                {
                  char v421 = v250;
                  v422 = v420;
                }
                uint64_t v432 = *((void *)v106 - 1);
                v106 -= 8;
                *((void *)v421 - 1) = v432;
                uint64_t v250 = v421 - 8;
                v420 = v422;
              }
              while (v106 != *(char **)(a1 + 41928));
            }
            BOOL v105 = (void *)(a1 + 41920);
            char v433 = *v573;
            *char v573 = v248;
            *(void *)(a1 + 41928) = v250;
            *(void *)(a1 + 41936) = v420;
            *(void *)(a1 + 41944) = v251;
            unsigned int v107 = v557;
            if (v433) {
              operator delete(v433);
            }
LABEL_750:
            unint64_t v458 = v105[5] + v105[4];
            uint64_t v459 = *(void *)(v105[1] + ((v458 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 264 * (v458 & 0xF);
            long long v460 = *(_OWORD *)__s1;
            long long v461 = *(_OWORD *)&__s1[16];
            *(unsigned char *)(v459 + 32) = __s1[32];
            *(_OWORD *)uint64_t v459 = v460;
            *(_OWORD *)(v459 + 16) = v461;
            *(unsigned char *)(v459 + 256) = 0;
            *(unsigned char *)(v459 + 40) = 0;
            uint64_t v12 = v459 + 40;
            if (v623)
            {
              sub_C22B0(v12, (long long *)&__s1[40]);
              int v462 = v623;
              ++v105[5];
              if (v462)
              {
                if (v619)
                {
                  v620 = v619;
                  operator delete(v619);
                }
                if ((void)v617) {
                  operator delete((void *)v617);
                }
                if (*((void *)&v615 + 1)) {
                  operator delete(*((void **)&v615 + 1));
                }
                if ((void)v614) {
                  operator delete((void *)v614);
                }
                uint64_t v12 = *(void *)&__s1[80];
                if (*(void *)&__s1[80]) {
                  operator delete(*(void **)&__s1[80]);
                }
              }
            }
            else
            {
              ++v105[5];
            }
            if (v107 > 0x97) {
              goto LABEL_856;
            }
            char v463 = (uint64_t *)(v565 + 48 * v107);
            v464 = (char *)v463[2];
            char v465 = (char *)v463[1];
            uint64_t v466 = ((v464 - v465) << 6) - 1;
            uint64_t v467 = v464 - v465;
            unint64_t v468 = *(void *)(a1 + 41960) + *(void *)(a1 + 41952) - 1;
            uint64_t v559 = *(void *)(*(void *)(a1 + 41928) + ((v468 >> 1) & 0x7FFFFFFFFFFFFFF8));
            v470 = (unint64_t *)(v463 + 4);
            unint64_t v469 = v463[4];
            if (v464 == v465) {
              uint64_t v466 = 0;
            }
            char v471 = v463 + 5;
            if (v466 != v463[5] + v469) {
              goto LABEL_849;
            }
            BOOL v112 = v469 >= 0x200;
            unint64_t v472 = v469 - 512;
            if (v112)
            {
              char v473 = *(unsigned char *)(a1 + 41960) + *(unsigned char *)(a1 + 41952) - 1;
              unint64_t *v470 = v472;
              unint64_t v475 = *(void *)v465;
              v474 = v465 + 8;
              unint64_t v468 = v475;
              v463[1] = (uint64_t)v474;
              if (v464 == (char *)v463[3])
              {
                v476 = (char *)*v463;
                if ((unint64_t)v474 <= *v463)
                {
                  if (v464 == v476) {
                    unint64_t v494 = 1;
                  }
                  else {
                    unint64_t v494 = (v464 - v476) >> 2;
                  }
                  if (v494 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v494);
                  unint64_t v495 = v12 + 8 * (v494 >> 2);
                  v496 = (char *)v495;
                  if (v464 != v474)
                  {
                    v496 = (char *)(v495 + ((v464 - v474) & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v497 = 8 * ((v464 - v474) >> 3);
                    v498 = (void *)(v12 + 8 * (v494 >> 2));
                    do
                    {
                      uint64_t v499 = *(void *)v474;
                      v474 += 8;
                      *v498++ = v499;
                      v497 -= 8;
                    }
                    while (v497);
                  }
                  *char v463 = v12;
                  v463[1] = v495;
                  v463[2] = (uint64_t)v496;
                  v463[3] = v12 + 8 * v494;
                  v464 = v496;
                  v470 = (unint64_t *)(v463 + 4);
                  if (v476)
                  {
                    operator delete(v476);
                    v464 = (char *)v463[2];
                  }
                }
                else
                {
                  uint64_t v477 = (uint64_t)&v474[-*v463] >> 3;
                  if (v477 >= -1) {
                    uint64_t v478 = v477 + 1;
                  }
                  else {
                    uint64_t v478 = v477 + 2;
                  }
                  char v479 = &v474[-8 * (v478 >> 1)];
                  int64_t v480 = v464 - v474;
                  if (v464 != v474)
                  {
                    uint64_t v12 = (uint64_t)memmove(&v474[-8 * (v478 >> 1)], v474, v464 - v474);
                    v464 = (char *)v463[1];
                  }
                  char v481 = &v464[-8 * (v478 >> 1)];
                  v464 = &v479[v480];
                  v463[1] = (uint64_t)v481;
                  v463[2] = (uint64_t)&v479[v480];
                  char v471 = v463 + 5;
                  v470 = (unint64_t *)(v463 + 4);
                }
              }
              *(void *)v464 = v468;
              v463[2] += 8;
              LOBYTE(v468) = v473;
            }
            else
            {
              uint64_t v482 = v467 >> 3;
              char v483 = (char *)v463[3];
              v484 = (char *)*v463;
              uint64_t v485 = (uint64_t)&v483[-*v463];
              uint64_t v556 = *(void *)(a1 + 41960) + *(void *)(a1 + 41952) - 1;
              if (v467 >> 3 < (unint64_t)(v485 >> 3))
              {
                unsigned int v486 = v107;
                uint64_t v12 = (uint64_t)operator new(0x1000uLL);
                uint64_t v487 = v12;
                if (v483 != v464)
                {
                  *(void *)v464 = v12;
                  v470 = (unint64_t *)(v463 + 4);
                  LOBYTE(v468) = v556;
LABEL_848:
                  v463[2] += 8;
                  char v471 = v463 + 5;
                  goto LABEL_849;
                }
                if (v465 == v484)
                {
                  if (v464 == v465) {
                    unint64_t v516 = 1;
                  }
                  else {
                    unint64_t v516 = (v483 - v465) >> 2;
                  }
                  if (v516 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v516);
                  v500 = (char *)(v12 + 8 * ((v516 + 3) >> 2));
                  char v517 = v500;
                  if (v464 != v465)
                  {
                    uint64_t v518 = 8 * v482;
                    char v519 = (void *)(v12 + 8 * ((v516 + 3) >> 2));
                    v520 = v465;
                    char v517 = &v500[8 * v482];
                    do
                    {
                      uint64_t v521 = *(void *)v520;
                      v520 += 8;
                      *v519++ = v521;
                      v518 -= 8;
                    }
                    while (v518);
                  }
                  *char v463 = v12;
                  v463[1] = (uint64_t)v500;
                  v463[2] = (uint64_t)v517;
                  v463[3] = v12 + 8 * v516;
                  if (v465)
                  {
                    operator delete(v465);
                    v500 = (char *)v463[1];
                  }
                }
                else
                {
                  v500 = v465;
                }
                *((void *)v500 - 1) = v487;
                char v523 = (char *)v463[1];
                v522 = (char *)v463[2];
                v463[1] = (uint64_t)(v523 - 8);
                uint64_t v524 = *((void *)v523 - 1);
                v463[1] = (uint64_t)v523;
                v470 = (unint64_t *)(v463 + 4);
                if (v522 == (char *)v463[3])
                {
                  char v525 = (char *)*v463;
                  if ((unint64_t)v523 > *v463)
                  {
                    uint64_t v526 = (uint64_t)&v523[-*v463] >> 3;
                    if (v526 >= -1) {
                      uint64_t v527 = v526 + 1;
                    }
                    else {
                      uint64_t v527 = v526 + 2;
                    }
                    v528 = &v523[-8 * (v527 >> 1)];
                    int64_t v529 = v522 - v523;
                    if (v522 != v523)
                    {
                      uint64_t v12 = (uint64_t)memmove(&v523[-8 * (v527 >> 1)], v523, v522 - v523);
                      char v523 = (char *)v463[1];
                    }
                    v522 = &v528[v529];
                    v463[1] = (uint64_t)&v523[-8 * (v527 >> 1)];
                    v463[2] = (uint64_t)&v528[v529];
                    unsigned int v107 = v486;
                    goto LABEL_846;
                  }
                  if (v522 == v525) {
                    unint64_t v468 = 1;
                  }
                  else {
                    unint64_t v468 = (v522 - v525) >> 2;
                  }
                  if (v468 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v468);
                  unint64_t v535 = v12 + 8 * (v468 >> 2);
                  v536 = (char *)v535;
                  v470 = (unint64_t *)(v463 + 4);
                  if (v522 != v523)
                  {
                    v536 = (char *)(v535 + ((v522 - v523) & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v537 = 8 * ((v522 - v523) >> 3);
                    v538 = (void *)(v12 + 8 * (v468 >> 2));
                    do
                    {
                      uint64_t v539 = *(void *)v523;
                      v523 += 8;
                      *v538++ = v539;
                      v537 -= 8;
                    }
                    while (v537);
                  }
                  *char v463 = v12;
                  v463[1] = v535;
                  v463[2] = (uint64_t)v536;
                  v463[3] = v12 + 8 * v468;
                  v522 = v536;
                  LOBYTE(v468) = v556;
                  if (v525)
                  {
                    operator delete(v525);
                    v522 = (char *)v463[2];
                  }
                }
                else
                {
LABEL_846:
                  LOBYTE(v468) = v556;
                }
                *(void *)v522 = v524;
                goto LABEL_848;
              }
              unsigned int v558 = v107;
              uint64_t v488 = v485 >> 2;
              if (v483 == v484) {
                unint64_t v489 = 1;
              }
              else {
                unint64_t v489 = v488;
              }
              if (v489 >> 61) {
                sub_574C();
              }
              v490 = (char *)operator new(8 * v489);
              char v491 = operator new(0x1000uLL);
              v492 = &v490[8 * v482];
              unint64_t v468 = (unint64_t)&v490[8 * v489];
              if (v482 == v489)
              {
                char v555 = v491;
                v470 = (unint64_t *)(v463 + 4);
                if (v467 < 1)
                {
                  if (v464 == v465) {
                    unint64_t v501 = 1;
                  }
                  else {
                    unint64_t v501 = v467 >> 2;
                  }
                  if (v501 >> 61) {
                    sub_574C();
                  }
                  v502 = (char *)operator new(8 * v501);
                  v492 = &v502[8 * (v501 >> 2)];
                  unint64_t v468 = (unint64_t)&v502[8 * v501];
                  operator delete(v490);
                  char v465 = (char *)v463[1];
                  v464 = (char *)v463[2];
                  v490 = v502;
                }
                else
                {
                  unint64_t v493 = v482 + 2;
                  if (v482 >= -1) {
                    unint64_t v493 = v482 + 1;
                  }
                  v492 -= 8 * (v493 >> 1);
                }
                char v491 = v555;
              }
              else
              {
                v470 = (unint64_t *)(v463 + 4);
              }
              *(void *)v492 = v491;
              char v503 = v492 + 8;
              if (v464 != v465)
              {
                do
                {
                  if (v492 == v490)
                  {
                    if ((unint64_t)v503 >= v468)
                    {
                      if ((char *)v468 == v492) {
                        unint64_t v508 = 1;
                      }
                      else {
                        unint64_t v508 = (uint64_t)(v468 - (void)v492) >> 2;
                      }
                      if (v508 >> 61) {
                        sub_574C();
                      }
                      char v509 = (char *)operator new(8 * v508);
                      v490 = v509;
                      v504 = &v509[(2 * v508 + 6) & 0xFFFFFFFFFFFFFFF8];
                      char v505 = v504;
                      uint64_t v510 = v503 - v492;
                      if (v503 != v492)
                      {
                        char v505 = &v504[v510 & 0xFFFFFFFFFFFFFFF8];
                        uint64_t v511 = 8 * (v510 >> 3);
                        v512 = &v509[(2 * v508 + 6) & 0xFFFFFFFFFFFFFFF8];
                        char v513 = v492;
                        do
                        {
                          uint64_t v514 = *(void *)v513;
                          v513 += 8;
                          *(void *)v512 = v514;
                          v512 += 8;
                          v511 -= 8;
                        }
                        while (v511);
                      }
                      unint64_t v468 = (unint64_t)&v509[8 * v508];
                      operator delete(v492);
                    }
                    else
                    {
                      uint64_t v506 = (uint64_t)(v468 - (void)v503) >> 3;
                      if (v506 >= -1) {
                        unint64_t v507 = v506 + 1;
                      }
                      else {
                        unint64_t v507 = v506 + 2;
                      }
                      char v505 = &v503[8 * (v507 >> 1)];
                      v504 = &v492[8 * (v507 >> 1)];
                      if (v503 == v492)
                      {
                        v490 = v503;
                      }
                      else
                      {
                        memmove(&v492[8 * (v507 >> 1)], v492, v503 - v492);
                        v490 = v492;
                      }
                    }
                  }
                  else
                  {
                    v504 = v492;
                    char v505 = v503;
                  }
                  uint64_t v515 = *((void *)v464 - 1);
                  v464 -= 8;
                  *((void *)v504 - 1) = v515;
                  v492 = v504 - 8;
                  char v503 = v505;
                }
                while (v464 != (char *)v463[1]);
              }
              uint64_t v12 = *v463;
              *char v463 = (uint64_t)v490;
              v463[1] = (uint64_t)v492;
              v463[2] = (uint64_t)v503;
              v463[3] = v468;
              unsigned int v107 = v558;
              LOBYTE(v468) = v556;
              char v471 = v463 + 5;
              if (v12) {
                operator delete((void *)v12);
              }
            }
LABEL_849:
            uint64_t v530 = *v471;
            *(void *)(*(void *)(v463[1] + (((*v470 + *v471) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*v470 + *v471) & 0x1FF)) = v559 + 264 * (v468 & 0xF);
            *char v471 = v530 + 1;
            char v531 = (unsigned __int8 *)(v571 + 224 * v107);
            if (v531[216]) {
              BOOL v532 = v531[214] == 0;
            }
            else {
              BOOL v532 = 1;
            }
            if (v532 || v531[213]) {
              goto LABEL_856;
            }
            unsigned int v533 = v531[36];
            if (v533 < 0x60) {
              goto LABEL_855;
            }
            if (v533 >= 0x68)
            {
              if (v533 >= 0x98)
              {
LABEL_855:
                unint64_t v534 = *(void *)(a1 + 41960) + *(void *)(a1 + 41952) - 1;
                *(unsigned char *)(*(void *)(*(void *)(a1 + 41928) + ((v534 >> 1) & 0x7FFFFFFFFFFFFFF8))
                         + 264 * (v534 & 0xF)
                         + 32) = 1;
                v531[213] = 1;
                sub_14F17C(a1, v612);
              }
            }
            else if (!v531[215])
            {
              goto LABEL_855;
            }
LABEL_856:
            ++v577;
            unint64_t v14 = v611;
            uint64_t v13 = 8 * a3;
            if (v611 >= 8 * a3) {
              goto LABEL_875;
            }
            break;
          case 9:
            if (v625 <= 0x97uLL)
            {
              uint64_t v39 = v571 + 224 * v625;
              uint64_t v40 = v612;
              if (!*(unsigned char *)(v39 + 216))
              {
                *(void *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                char v621 = 0;
                memset(&__s1[40], 0, 64);
                long long v614 = 0u;
                long long v615 = 0u;
                long long __p = 0u;
                long long v617 = 0u;
                char v618 = 0;
                int v622 = 0;
                sub_C2204(v39, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v614 + 1))
                {
                  *(void *)&long long v615 = *((void *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                uint64_t v40 = v612;
              }
              int v41 = DWORD1(v625);
              sub_47ECC((void *)(v39 + 40), v40);
              sub_48030((void *)(v39 + 40), 1);
              unint64_t v42 = *(void *)(v39 + 104);
              double v43 = *(_DWORD **)(v39 + 96);
              if ((unint64_t)v43 >= v42)
              {
                uint64_t v12 = *(void *)(v39 + 88);
                uint64_t v165 = ((uint64_t)v43 - v12) >> 2;
                if ((unint64_t)(v165 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v166 = v42 - v12;
                unint64_t v167 = (uint64_t)(v42 - v12) >> 1;
                if (v167 <= v165 + 1) {
                  unint64_t v167 = v165 + 1;
                }
                if (v166 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v168 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v168 = v167;
                }
                if (v168)
                {
                  v169 = (char *)sub_458C8(v39 + 104, v168);
                  uint64_t v12 = *(void *)(v39 + 88);
                  double v43 = *(_DWORD **)(v39 + 96);
                }
                else
                {
                  v169 = 0;
                }
                uint64_t v278 = &v169[4 * v165];
                *(_DWORD *)uint64_t v278 = v41;
                unint64_t v44 = v278 + 4;
                while (v43 != (_DWORD *)v12)
                {
                  int v279 = *--v43;
                  *((_DWORD *)v278 - 1) = v279;
                  v278 -= 4;
                }
                *(void *)(v39 + 88) = v278;
                *(void *)(v39 + 96) = v44;
                *(void *)(v39 + 104) = &v169[4 * v168];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *double v43 = v41;
                unint64_t v44 = v43 + 1;
              }
              *(void *)(v39 + 96) = v44;
            }
            goto LABEL_856;
          case 0xA:
            unint64_t v95 = v612[3264];
            uint64_t v96 = v625;
            *(_DWORD *)__s1 = v625;
            uint64_t v97 = &v612[3 * v625];
            uint64_t v98 = (unint64_t *)v97[3097];
            uint64_t v99 = (unint64_t *)v97[3098];
            if (v98 == v99
              || (unint64_t v100 = v625,
                  *(void *)(v612[3258] + ((v95 >> 29) & 0x7FFFFFFF8))
                - *(void *)(v612[3258] + ((*(v99 - 1) >> 29) & 0x7FFFFFFF8)) >= (unint64_t)*(unsigned int *)(a1 + 32)))
            {
              v101 = (void **)(v97 + 3098);
              unint64_t v102 = &v612[3 * v625];
              unint64_t v103 = v102[3099];
              if ((unint64_t)v99 >= v103)
              {
                uint64_t v153 = (void **)(v97 + 3097);
                uint64_t v154 = v99 - v98;
                if ((unint64_t)(v154 + 1) >> 61) {
                  sub_566C();
                }
                uint64_t v155 = v102 + 3099;
                uint64_t v156 = v103 - (void)v98;
                uint64_t v157 = v156 >> 2;
                if (v156 >> 2 <= (unint64_t)(v154 + 1)) {
                  uint64_t v157 = v154 + 1;
                }
                if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v158 = v157;
                }
                if (v158) {
                  uint64_t v12 = (uint64_t)sub_5714((uint64_t)v155, v158);
                }
                else {
                  uint64_t v12 = 0;
                }
                v242 = (unint64_t *)(v12 + 8 * v154);
                unint64_t *v242 = v95;
                uint64_t v104 = v242 + 1;
                unint64_t v243 = (char *)*v101;
                uint64_t v244 = (char *)*v153;
                if (*v101 != *v153)
                {
                  do
                  {
                    unint64_t v245 = *((void *)v243 - 1);
                    v243 -= 8;
                    *--v242 = v245;
                  }
                  while (v243 != v244);
                  unint64_t v243 = (char *)*v153;
                }
                *uint64_t v153 = v242;
                void *v101 = v104;
                *uint64_t v155 = v12 + 8 * v158;
                if (v243) {
                  operator delete(v243);
                }
              }
              else
              {
                *uint64_t v99 = v95;
                uint64_t v104 = v99 + 1;
              }
              void *v101 = v104;
              unint64_t v100 = *(unsigned int *)__s1;
              if (*(_DWORD *)__s1 <= 0xFu) {
                *(unsigned char *)(v564 + *(unsigned int *)__s1) = 0;
              }
            }
            if (*(void *)(a1 + 136) == *(void *)(a1 + 144))
            {
              switch(v96)
              {
                case 0:
                  v609[0] = a1;
                  v609[1] = (uint64_t)&v612;
                  v609[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_14F7E4(v609, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 1:
                  v608[0] = a1;
                  v608[1] = (uint64_t)&v612;
                  v608[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_151CE4(v608, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 2:
                  v607[0] = a1;
                  v607[1] = (uint64_t)&v612;
                  v607[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_152DDC(v607, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 3:
                  v606[0] = a1;
                  v606[1] = (uint64_t)&v612;
                  v606[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_156178(v606, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 4:
                  v605[0] = a1;
                  v605[1] = (uint64_t)&v612;
                  v605[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_157644(v605, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 5:
                  v604[0] = a1;
                  v604[1] = (uint64_t)&v612;
                  v604[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_158C6C(v604, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 6:
                  v603[0] = a1;
                  v603[1] = (uint64_t)&v612;
                  v603[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_15938C(v603, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 7:
                  v602[0] = a1;
                  v602[1] = (uint64_t)&v612;
                  v602[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_15B538(v602, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 8:
                  v601[0] = a1;
                  v601[1] = (uint64_t)&v612;
                  v601[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_15D53C(v601, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 9:
                  v600[0] = a1;
                  v600[1] = (uint64_t)&v612;
                  v600[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_15DD98(v600, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 10:
                  v599[0] = a1;
                  v599[1] = (uint64_t)&v612;
                  v599[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_161134(v599, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 11:
                  v598[0] = a1;
                  v598[1] = (uint64_t)&v612;
                  v598[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_161CD0(v598, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 12:
                  v597[0] = a1;
                  v597[1] = (uint64_t)&v612;
                  v597[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_162080(v597, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 13:
                  v596[0] = a1;
                  v596[1] = (uint64_t)&v612;
                  v596[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_163124(v596, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 14:
                  v595[0] = a1;
                  v595[1] = (uint64_t)&v612;
                  v595[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1657C4(v595, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 15:
                  v594[0] = a1;
                  v594[1] = (uint64_t)&v612;
                  v594[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_165EA4(v594, (unsigned char *)(v564 + v100));
                  }
                  break;
                default:
                  goto LABEL_856;
              }
            }
            else
            {
              switch(v96)
              {
                case 0:
                  v593[0] = a1;
                  v593[1] = (uint64_t)__s1;
                  v593[2] = (uint64_t)&v612;
                  v593[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_166FB4(v593, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 1:
                  v592[0] = a1;
                  v592[1] = (uint64_t)__s1;
                  v592[2] = (uint64_t)&v612;
                  v592[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_16854C(v592, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 2:
                  v591[0] = a1;
                  v591[1] = (uint64_t)__s1;
                  v591[2] = (uint64_t)&v612;
                  v591[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_168FC4(v591, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 3:
                  v590[0] = a1;
                  v590[1] = (uint64_t)__s1;
                  v590[2] = (uint64_t)&v612;
                  v590[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_16AD8C(v590, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 4:
                  v589[0] = a1;
                  v589[1] = (uint64_t)__s1;
                  v589[2] = (uint64_t)&v612;
                  v589[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_16B9EC(v589, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 5:
                  v588[0] = a1;
                  v588[1] = (uint64_t)__s1;
                  v588[2] = (uint64_t)&v612;
                  v588[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_16C844(v588, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 6:
                  v587[0] = a1;
                  v587[1] = (uint64_t)__s1;
                  v587[2] = (uint64_t)&v612;
                  v587[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_16CD44(v587, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 7:
                  v586[0] = a1;
                  v586[1] = (uint64_t)__s1;
                  v586[2] = (uint64_t)&v612;
                  v586[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_16E0BC(v586, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 8:
                  v585[0] = a1;
                  v585[1] = (uint64_t)__s1;
                  v585[2] = (uint64_t)&v612;
                  v585[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_16F390(v585, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 9:
                  v584[0] = a1;
                  v584[1] = (uint64_t)__s1;
                  v584[2] = (uint64_t)&v612;
                  v584[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_16F930(v584, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 10:
                  v583[0] = a1;
                  v583[1] = (uint64_t)__s1;
                  v583[2] = (uint64_t)&v612;
                  v583[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1716F8(v583, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 11:
                  v582[0] = a1;
                  v582[1] = (uint64_t)__s1;
                  v582[2] = (uint64_t)&v612;
                  v582[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_171E60(v582, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 12:
                  v581[0] = a1;
                  v581[1] = (uint64_t)__s1;
                  v581[2] = (uint64_t)&v612;
                  v581[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_172128(v581, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 13:
                  v580[0] = a1;
                  v580[1] = (uint64_t)__s1;
                  v580[2] = (uint64_t)&v612;
                  v580[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_172B60(v580, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 14:
                  v579[0] = a1;
                  v579[1] = (uint64_t)__s1;
                  v579[2] = (uint64_t)&v612;
                  v579[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_174190(v579, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 15:
                  v578[0] = a1;
                  v578[1] = (uint64_t)__s1;
                  v578[2] = (uint64_t)&v612;
                  v578[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_174660(v578, (unsigned char *)(v564 + v100));
                  }
                  break;
                default:
                  goto LABEL_856;
              }
            }
            goto LABEL_856;
          case 0xB:
            unsigned int v26 = v625;
            if (v625 > 7)
            {
              int v27 = 0;
              __int16 v28 = -1;
            }
            else
            {
              int v27 = dword_4C7578[(int)v625];
              __int16 v28 = word_4C7D30[(int)v625];
            }
            uint64_t v123 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            uint64_t v124 = *((void *)&v625 + 1);
            if (*(_DWORD *)(a1 + 120) == -1) {
              int v125 = 0;
            }
            else {
              int v125 = *(_DWORD *)(a1 + 120);
            }
            *(_DWORD *)(a1 + 120) = v125 + 1;
            if (v26 > 7) {
              goto LABEL_252;
            }
            uint64_t v126 = v566 + 56 * v26;
            if (!*(unsigned char *)(v126 + 48))
            {
              *(void *)uint64_t v126 = v123;
              *(void *)(v126 + 16) = v124;
              *(_DWORD *)(v126 + 24) = v125;
              *(_DWORD *)(v126 + 28) = v27;
              *(_WORD *)(v126 + 32) = v28;
              *(void *)(v126 + 40) = 0;
LABEL_251:
              *(unsigned char *)(v126 + 48) = 1;
              goto LABEL_252;
            }
            v127 = sub_12C18C();
            if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1206;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "!currentKick";
              _os_log_error_impl(&def_1C1270, v127, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            int v128 = *(unsigned __int8 *)(v126 + 48);
            *(void *)uint64_t v126 = v123;
            *(void *)(v126 + 16) = v124;
            *(_DWORD *)(v126 + 24) = v125;
            *(_DWORD *)(v126 + 28) = v27;
            *(_WORD *)(v126 + 32) = v28;
            *(void *)(v126 + 40) = 0;
            if (!v128) {
              goto LABEL_251;
            }
LABEL_252:
            if ((v568 & 2) != 0)
            {
              v175 = v612;
              uint64_t v176 = (uint64_t *)v612[2];
              uint64_t v12 = (uint64_t)(v612 + 3);
              unint64_t v177 = v612[3];
              if ((unint64_t)v176 >= v177)
              {
                uint64_t v179 = (void **)(v612 + 1);
                uint64_t v180 = v612[1];
                uint64_t v181 = ((uint64_t)v176 - v180) >> 3;
                if ((unint64_t)(v181 + 1) >> 61) {
                  sub_566C();
                }
                uint64_t v182 = v177 - v180;
                uint64_t v183 = v182 >> 2;
                if (v182 >> 2 <= (unint64_t)(v181 + 1)) {
                  uint64_t v183 = v181 + 1;
                }
                if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v184 = v183;
                }
                if (v184) {
                  uint64_t v12 = (uint64_t)sub_5714(v12, v184);
                }
                else {
                  uint64_t v12 = 0;
                }
                v253 = (uint64_t *)(v12 + 8 * v181);
                uint64_t *v253 = v123;
                uint64_t v178 = v253 + 1;
                uint64_t v255 = (char *)v175[1];
                unint64_t v254 = (char *)v175[2];
                if (v254 != v255)
                {
                  do
                  {
                    uint64_t v256 = *((void *)v254 - 1);
                    v254 -= 8;
                    *--v253 = v256;
                  }
                  while (v254 != v255);
                  unint64_t v254 = (char *)*v179;
                }
                v175[1] = v253;
                v175[2] = v178;
                v175[3] = v12 + 8 * v184;
                if (v254) {
                  operator delete(v254);
                }
              }
              else
              {
                *uint64_t v176 = v123;
                uint64_t v178 = v176 + 1;
              }
              v175[2] = v178;
              uint64_t v257 = v612;
              uint64_t v258 = (_DWORD *)v612[14];
              unint64_t v259 = v612[15];
              if ((unint64_t)v258 >= v259)
              {
                uint64_t v12 = v612[13];
                uint64_t v261 = ((uint64_t)v258 - v12) >> 2;
                if ((unint64_t)(v261 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v262 = v259 - v12;
                unint64_t v263 = (uint64_t)(v259 - v12) >> 1;
                if (v263 <= v261 + 1) {
                  unint64_t v263 = v261 + 1;
                }
                if (v262 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v264 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v264 = v263;
                }
                if (v264)
                {
                  uint64_t v265 = (char *)sub_458C8((uint64_t)(v612 + 15), v264);
                  uint64_t v12 = v257[13];
                  uint64_t v258 = (_DWORD *)v257[14];
                }
                else
                {
                  uint64_t v265 = 0;
                }
                uint64_t v266 = &v265[4 * v261];
                *(_DWORD *)uint64_t v266 = v125;
                v260 = v266 + 4;
                while (v258 != (_DWORD *)v12)
                {
                  int v267 = *--v258;
                  *((_DWORD *)v266 - 1) = v267;
                  v266 -= 4;
                }
                v257[13] = v266;
                v257[14] = v260;
                v257[15] = &v265[4 * v264];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v258 = v125;
                v260 = v258 + 1;
              }
              v257[14] = v260;
              unint64_t v268 = v612;
              uint64_t v269 = (__int16 *)v612[20];
              unint64_t v270 = v612[21];
              if ((unint64_t)v269 >= v270)
              {
                uint64_t v12 = v612[19];
                uint64_t v272 = (uint64_t)v269 - v12;
                if ((uint64_t)v269 - v12 <= -3) {
                  sub_566C();
                }
                uint64_t v273 = v272 >> 1;
                unint64_t v274 = v270 - v12;
                if (v274 <= (v272 >> 1) + 1) {
                  unint64_t v275 = v273 + 1;
                }
                else {
                  unint64_t v275 = v274;
                }
                if (v274 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v276 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v276 = v275;
                }
                if (v276)
                {
                  uint64_t v277 = (char *)sub_45900((uint64_t)(v612 + 21), v276);
                  uint64_t v12 = v268[19];
                  uint64_t v269 = (__int16 *)v268[20];
                }
                else
                {
                  uint64_t v277 = 0;
                }
                int v284 = (__int16 *)&v277[2 * v273];
                *int v284 = v28;
                uint64_t v271 = v284 + 1;
                while (v269 != (__int16 *)v12)
                {
                  __int16 v285 = *--v269;
                  *--int v284 = v285;
                }
                v268[19] = v284;
                v268[20] = v271;
                v268[21] = &v277[2 * v276];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v269 = v28;
                uint64_t v271 = v269 + 1;
              }
              v268[20] = v271;
              uint64_t v286 = v612;
              uint64_t v287 = (_DWORD *)v612[17];
              unint64_t v288 = v612[18];
              if ((unint64_t)v287 >= v288)
              {
                uint64_t v12 = v612[16];
                uint64_t v290 = ((uint64_t)v287 - v12) >> 2;
                if ((unint64_t)(v290 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v291 = v288 - v12;
                unint64_t v292 = (uint64_t)(v288 - v12) >> 1;
                if (v292 <= v290 + 1) {
                  unint64_t v292 = v290 + 1;
                }
                if (v291 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v293 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v293 = v292;
                }
                if (v293)
                {
                  uint64_t v294 = (char *)sub_458C8((uint64_t)(v612 + 18), v293);
                  uint64_t v12 = v286[16];
                  uint64_t v287 = (_DWORD *)v286[17];
                }
                else
                {
                  uint64_t v294 = 0;
                }
                v295 = &v294[4 * v290];
                *(_DWORD *)v295 = v27;
                v289 = v295 + 4;
                while (v287 != (_DWORD *)v12)
                {
                  int v296 = *--v287;
                  *((_DWORD *)v295 - 1) = v296;
                  v295 -= 4;
                }
                v286[16] = v295;
                v286[17] = v289;
                v286[18] = &v294[4 * v293];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v287 = v27;
                v289 = v287 + 1;
              }
              v286[17] = v289;
              int v297 = v612;
              v298 = (void *)v612[8];
              unint64_t v299 = v612[9];
              if ((unint64_t)v298 >= v299)
              {
                uint64_t v12 = v612[7];
                uint64_t v301 = ((uint64_t)v298 - v12) >> 3;
                if ((unint64_t)(v301 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v302 = v299 - v12;
                unint64_t v303 = (uint64_t)(v299 - v12) >> 2;
                if (v303 <= v301 + 1) {
                  unint64_t v303 = v301 + 1;
                }
                if (v302 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v304 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v304 = v303;
                }
                if (v304)
                {
                  uint64_t v305 = (char *)sub_5714((uint64_t)(v612 + 9), v304);
                  uint64_t v12 = v297[7];
                  v298 = (void *)v297[8];
                }
                else
                {
                  uint64_t v305 = 0;
                }
                v306 = &v305[8 * v301];
                *(void *)v306 = v124;
                uint64_t v300 = v306 + 8;
                while (v298 != (void *)v12)
                {
                  uint64_t v307 = *--v298;
                  *((void *)v306 - 1) = v307;
                  v306 -= 8;
                }
                v297[7] = v306;
                v297[8] = v300;
                v297[9] = &v305[8 * v304];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                void *v298 = v124;
                uint64_t v300 = v298 + 1;
              }
              v297[8] = v300;
            }
            goto LABEL_856;
          case 0xC:
            if (v625 <= 7)
            {
              uint64_t v30 = v566 + 56 * v625;
              if (*(unsigned char *)(v30 + 48))
              {
                uint64_t v31 = 0;
                *(void *)(v30 + 8) = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                            - 1);
                *(void *)(v30 + 40) = 0;
                *(_WORD *)(v30 + 40) = WORD2(v625);
                uint64_t v32 = a1 + 192;
                do
                {
                  if (*(unsigned char *)(v32 + 184) && *(_DWORD *)v32 == *(_DWORD *)(v30 + 24)) {
                    sub_148550(a1, v612, v31, 1);
                  }
                  ++v31;
                  v32 += 224;
                }
                while (v31 != 152);
                uint64_t v33 = 0;
                unint64_t v34 = (unsigned char *)(a1 + 34688);
                do
                {
                  if (*v34 && *((_DWORD *)v34 - 2) == *(_DWORD *)(v30 + 24)) {
                    sub_B960C(a1, v612, v33);
                  }
                  ++v33;
                  v34 += 40;
                }
                while (v33 != 16);
                if ((v568 & 2) == 0)
                {
                  uint64_t v35 = v612;
                  uint64_t v36 = (void *)v612[2];
                  unint64_t v37 = v612[3];
                  if ((unint64_t)v36 >= v37)
                  {
                    uint64_t v326 = (void **)(v612 + 1);
                    uint64_t v327 = v612[1];
                    uint64_t v328 = ((uint64_t)v36 - v327) >> 3;
                    if ((unint64_t)(v328 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v329 = v37 - v327;
                    uint64_t v330 = v329 >> 2;
                    if (v329 >> 2 <= (unint64_t)(v328 + 1)) {
                      uint64_t v330 = v328 + 1;
                    }
                    if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v331 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v331 = v330;
                    }
                    if (v331) {
                      int v332 = (char *)sub_5714((uint64_t)(v612 + 3), v331);
                    }
                    else {
                      int v332 = 0;
                    }
                    uint64_t v344 = &v332[8 * v328];
                    *(void *)uint64_t v344 = *(void *)v30;
                    double v38 = v344 + 8;
                    v346 = (char *)v35[1];
                    uint64_t v345 = (char *)v35[2];
                    if (v345 != v346)
                    {
                      do
                      {
                        uint64_t v347 = *((void *)v345 - 1);
                        v345 -= 8;
                        *((void *)v344 - 1) = v347;
                        v344 -= 8;
                      }
                      while (v345 != v346);
                      uint64_t v345 = (char *)*v326;
                    }
                    v35[1] = v344;
                    v35[2] = v38;
                    v35[3] = &v332[8 * v331];
                    if (v345) {
                      operator delete(v345);
                    }
                  }
                  else
                  {
                    *uint64_t v36 = *(void *)v30;
                    double v38 = v36 + 1;
                  }
                  v35[2] = v38;
                  v348 = v612;
                  char v349 = (void *)v612[5];
                  uint64_t v12 = (uint64_t)(v612 + 6);
                  unint64_t v350 = v612[6];
                  if ((unint64_t)v349 >= v350)
                  {
                    v352 = (void **)(v612 + 4);
                    uint64_t v353 = v612[4];
                    uint64_t v354 = ((uint64_t)v349 - v353) >> 3;
                    if ((unint64_t)(v354 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v355 = v350 - v353;
                    uint64_t v356 = v355 >> 2;
                    if (v355 >> 2 <= (unint64_t)(v354 + 1)) {
                      uint64_t v356 = v354 + 1;
                    }
                    if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v357 = v356;
                    }
                    if (v357) {
                      uint64_t v12 = (uint64_t)sub_5714(v12, v357);
                    }
                    else {
                      uint64_t v12 = 0;
                    }
                    v358 = (void *)(v12 + 8 * v354);
                    void *v358 = *(void *)(v30 + 8);
                    char v351 = v358 + 1;
                    v360 = (char *)v348[4];
                    char v359 = (char *)v348[5];
                    if (v359 != v360)
                    {
                      do
                      {
                        uint64_t v361 = *((void *)v359 - 1);
                        v359 -= 8;
                        *--v358 = v361;
                      }
                      while (v359 != v360);
                      char v359 = (char *)*v352;
                    }
                    v348[4] = v358;
                    v348[5] = v351;
                    v348[6] = v12 + 8 * v357;
                    if (v359) {
                      operator delete(v359);
                    }
                  }
                  else
                  {
                    *char v349 = *(void *)(v30 + 8);
                    char v351 = v349 + 1;
                  }
                  v348[5] = v351;
                  v362 = v612;
                  char v363 = (_DWORD *)v612[14];
                  unint64_t v364 = v612[15];
                  if ((unint64_t)v363 >= v364)
                  {
                    uint64_t v12 = v612[13];
                    uint64_t v366 = ((uint64_t)v363 - v12) >> 2;
                    if ((unint64_t)(v366 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v367 = v364 - v12;
                    unint64_t v368 = (uint64_t)(v364 - v12) >> 1;
                    if (v368 <= v366 + 1) {
                      unint64_t v368 = v366 + 1;
                    }
                    if (v367 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v369 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v369 = v368;
                    }
                    if (v369)
                    {
                      v370 = (char *)sub_458C8((uint64_t)(v612 + 15), v369);
                      uint64_t v12 = v362[13];
                      char v363 = (_DWORD *)v362[14];
                    }
                    else
                    {
                      v370 = 0;
                    }
                    char v371 = &v370[4 * v366];
                    *(_DWORD *)char v371 = *(_DWORD *)(v30 + 24);
                    char v365 = v371 + 4;
                    while (v363 != (_DWORD *)v12)
                    {
                      int v372 = *--v363;
                      *((_DWORD *)v371 - 1) = v372;
                      v371 -= 4;
                    }
                    v362[13] = v371;
                    v362[14] = v365;
                    v362[15] = &v370[4 * v369];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *char v363 = *(_DWORD *)(v30 + 24);
                    char v365 = v363 + 1;
                  }
                  v362[14] = v365;
                  char v373 = v612;
                  v374 = (_WORD *)v612[20];
                  unint64_t v375 = v612[21];
                  if ((unint64_t)v374 >= v375)
                  {
                    uint64_t v12 = v612[19];
                    uint64_t v377 = (uint64_t)v374 - v12;
                    if ((uint64_t)v374 - v12 <= -3) {
                      sub_566C();
                    }
                    uint64_t v378 = v377 >> 1;
                    unint64_t v379 = v375 - v12;
                    if (v379 <= (v377 >> 1) + 1) {
                      unint64_t v380 = v378 + 1;
                    }
                    else {
                      unint64_t v380 = v379;
                    }
                    if (v379 >= 0x7FFFFFFFFFFFFFFELL) {
                      uint64_t v381 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v381 = v380;
                    }
                    if (v381)
                    {
                      v382 = (char *)sub_45900((uint64_t)(v612 + 21), v381);
                      uint64_t v12 = v373[19];
                      v374 = (_WORD *)v373[20];
                    }
                    else
                    {
                      v382 = 0;
                    }
                    char v383 = &v382[2 * v378];
                    *(_WORD *)char v383 = *(_WORD *)(v30 + 32);
                    v376 = v383 + 2;
                    while (v374 != (_WORD *)v12)
                    {
                      __int16 v384 = *--v374;
                      *((_WORD *)v383 - 1) = v384;
                      v383 -= 2;
                    }
                    v373[19] = v383;
                    v373[20] = v376;
                    v373[21] = &v382[2 * v381];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    _WORD *v374 = *(_WORD *)(v30 + 32);
                    v376 = v374 + 1;
                  }
                  v373[20] = v376;
                  char v385 = v612;
                  v386 = (_DWORD *)v612[17];
                  unint64_t v387 = v612[18];
                  if ((unint64_t)v386 >= v387)
                  {
                    uint64_t v12 = v612[16];
                    uint64_t v389 = ((uint64_t)v386 - v12) >> 2;
                    if ((unint64_t)(v389 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v390 = v387 - v12;
                    unint64_t v391 = (uint64_t)(v387 - v12) >> 1;
                    if (v391 <= v389 + 1) {
                      unint64_t v391 = v389 + 1;
                    }
                    if (v390 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v392 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v392 = v391;
                    }
                    if (v392)
                    {
                      char v393 = (char *)sub_458C8((uint64_t)(v612 + 18), v392);
                      uint64_t v12 = v385[16];
                      v386 = (_DWORD *)v385[17];
                    }
                    else
                    {
                      char v393 = 0;
                    }
                    v394 = &v393[4 * v389];
                    *(_DWORD *)v394 = *(_DWORD *)(v30 + 28);
                    v388 = v394 + 4;
                    while (v386 != (_DWORD *)v12)
                    {
                      int v395 = *--v386;
                      *((_DWORD *)v394 - 1) = v395;
                      v394 -= 4;
                    }
                    v385[16] = v394;
                    v385[17] = v388;
                    v385[18] = &v393[4 * v392];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    _DWORD *v386 = *(_DWORD *)(v30 + 28);
                    v388 = v386 + 1;
                  }
                  v385[17] = v388;
                  v396 = v612;
                  char v397 = (void *)v612[8];
                  unint64_t v398 = v612[9];
                  if ((unint64_t)v397 >= v398)
                  {
                    uint64_t v12 = v612[7];
                    uint64_t v400 = ((uint64_t)v397 - v12) >> 3;
                    if ((unint64_t)(v400 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v401 = v398 - v12;
                    unint64_t v402 = (uint64_t)(v398 - v12) >> 2;
                    if (v402 <= v400 + 1) {
                      unint64_t v402 = v400 + 1;
                    }
                    if (v401 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v403 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v403 = v402;
                    }
                    if (v403)
                    {
                      v404 = (char *)sub_5714((uint64_t)(v612 + 9), v403);
                      uint64_t v12 = v396[7];
                      char v397 = (void *)v396[8];
                    }
                    else
                    {
                      v404 = 0;
                    }
                    char v405 = &v404[8 * v400];
                    *(void *)char v405 = *(void *)(v30 + 16);
                    char v399 = v405 + 8;
                    while (v397 != (void *)v12)
                    {
                      uint64_t v406 = *--v397;
                      *((void *)v405 - 1) = v406;
                      v405 -= 8;
                    }
                    v396[7] = v405;
                    v396[8] = v399;
                    v396[9] = &v404[8 * v403];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *char v397 = *(void *)(v30 + 16);
                    char v399 = v397 + 1;
                  }
                  v396[8] = v399;
                  char v407 = v612;
                  long long v408 = (void *)v612[11];
                  unint64_t v409 = v612[12];
                  if ((unint64_t)v408 >= v409)
                  {
                    uint64_t v12 = v612[10];
                    uint64_t v411 = ((uint64_t)v408 - v12) >> 3;
                    if ((unint64_t)(v411 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v412 = v409 - v12;
                    unint64_t v413 = (uint64_t)(v409 - v12) >> 2;
                    if (v413 <= v411 + 1) {
                      unint64_t v413 = v411 + 1;
                    }
                    if (v412 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v414 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v414 = v413;
                    }
                    if (v414)
                    {
                      char v415 = (char *)sub_5714((uint64_t)(v612 + 12), v414);
                      uint64_t v12 = v407[10];
                      long long v408 = (void *)v407[11];
                    }
                    else
                    {
                      char v415 = 0;
                    }
                    v416 = &v415[8 * v411];
                    *(void *)v416 = *(void *)(v30 + 40);
                    v410 = v416 + 8;
                    while (v408 != (void *)v12)
                    {
                      uint64_t v417 = *--v408;
                      *((void *)v416 - 1) = v417;
                      v416 -= 8;
                    }
                    v407[10] = v416;
                    v407[11] = v410;
                    v407[12] = &v415[8 * v414];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *long long v408 = *(void *)(v30 + 40);
                    v410 = v408 + 1;
                  }
                  v407[11] = v410;
                }
                if (*(unsigned char *)(v30 + 48)) {
                  *(unsigned char *)(v30 + 48) = 0;
                }
              }
            }
            goto LABEL_856;
          case 0xD:
            uint64_t v88 = v567 + 40 * (v625 & 3);
            if (*(unsigned char *)(v88 + 32))
            {
              int v89 = sub_12C18C();
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1287;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "!currentTile.has_value()";
                _os_log_error_impl(&def_1C1270, v89, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            uint64_t v90 = v612[3256];
            uint64_t v91 = v612[3255];
            uint64_t v92 = v612[3259];
            uint64_t v93 = v612[3258];
            uint64_t v94 = *(void *)(a1 + 112);
            if (v94 == -1) {
              uint64_t v94 = 0;
            }
            *(void *)(a1 + 112) = v94 + 1;
            if (!*(unsigned char *)(v88 + 32)) {
              *(unsigned char *)(v88 + 32) = 1;
            }
            *(void *)uint64_t v88 = (((v92 - v93) << 29) - 0x100000000) | (((unint64_t)(v90 - v91) >> 3)
                                                                    - 1);
            *(void *)(v88 + 16) = v94;
            *(_DWORD *)(v88 + 24) = -1;
            goto LABEL_856;
          case 0xE:
            sub_B960C(a1, v612, v625 & 3);
            goto LABEL_856;
          case 0xF:
            int v56 = DWORD1(v625);
            if (DWORD1(v625) <= 7)
            {
              uint64_t v57 = v562 + 12 * DWORD1(v625);
              *(void *)uint64_t v57 = v625;
              *(_DWORD *)(v57 + 8) = DWORD2(v625);
              unsigned int v58 = v56 - 4;
              if (v58 <= 2)
              {
                uint64_t v59 = v567 + 40 * v58;
                if (*(unsigned char *)(v59 + 32))
                {
                  if (v625 <= 7)
                  {
                    uint64_t v60 = v566 + 56 * v625;
                    if (*(unsigned char *)(v60 + 48)) {
                      *(_DWORD *)(v59 + 24) = *(_DWORD *)(v60 + 24);
                    }
                  }
                }
              }
            }
            goto LABEL_856;
          case 0x10:
            unint64_t v611 = (v611 & 0xFFFFFFFFFFFF8000) + 0x8000;
            goto LABEL_856;
          default:
            goto LABEL_856;
        }
      }
      if (v561) {
        *char v561 = 2;
      }
    }
    else
    {
      uint64_t v577 = 0;
    }
LABEL_875:
    uint64_t v540 = 0;
    *(_DWORD *)&__s1[8] = 229;
    *(void *)__s1 = off_7430B0;
    do
    {
      char v541 = v612;
      if (v612[3 * v540 + 97] != v612[3 * v540 + 98])
      {
        uint64_t v12 = (uint64_t)sub_1486F8(v12, v540);
        uint64_t v542 = v12;
        char v543 = (uint64_t *)v541[3248];
        unint64_t v544 = v541[3249];
        if ((unint64_t)v543 >= v544)
        {
          uint64_t v546 = v541[3247];
          uint64_t v547 = ((uint64_t)v543 - v546) >> 3;
          if ((unint64_t)(v547 + 1) >> 61) {
            sub_566C();
          }
          uint64_t v548 = v544 - v546;
          uint64_t v549 = v548 >> 2;
          if (v548 >> 2 <= (unint64_t)(v547 + 1)) {
            uint64_t v549 = v547 + 1;
          }
          if ((unint64_t)v548 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v550 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v550 = v549;
          }
          if (v550) {
            uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v541 + 3249), v550);
          }
          else {
            uint64_t v12 = 0;
          }
          char v551 = (uint64_t *)(v12 + 8 * v547);
          *char v551 = v542;
          char v545 = v551 + 1;
          v552 = (char *)v541[3248];
          char v553 = (char *)v541[3247];
          if (v552 != v553)
          {
            do
            {
              uint64_t v554 = *((void *)v552 - 1);
              v552 -= 8;
              *--char v551 = v554;
            }
            while (v552 != v553);
            v552 = (char *)v541[3247];
          }
          v541[3247] = v551;
          v541[3248] = v545;
          v541[3249] = v12 + 8 * v550;
          if (v552) {
            operator delete(v552);
          }
        }
        else
        {
          *char v543 = v12;
          char v545 = v543 + 1;
        }
        v541[3248] = v545;
      }
      ++v540;
    }
    while (v540 != 229);
    uint64_t result = v612;
    v612[3250] = v577;
    result[3251] = v611;
  }
  else
  {
    uint64_t result = 0;
    if (a5) {
      *a5 = 1;
    }
  }
  return result;
}

void sub_12FEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  operator delete(__p);
  operator delete(v10);
  _Unwind_Resume(a1);
}

#error "130034: too big function (funcsize=0)"

void sub_1474B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14833C(uint64_t a1)
{
  *(void *)a1 = off_743080;
  if (*(void *)(a1 + 128))
  {
    sub_F63C4();
    operator delete();
  }
  uint64_t v2 = a1 + 41968;
  uint64_t v3 = a1 + 49264;
  do
  {
    long long v4 = *(void ***)(v3 - 40);
    long long v5 = *(void ***)(v3 - 32);
    *(void *)(v3 - 8) = 0;
    unint64_t v6 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        long long v5 = *(void ***)(v3 - 32);
        long long v4 = (void **)(*(void *)(v3 - 40) + 8);
        *(void *)(v3 - 40) = v4;
        unint64_t v6 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
    unint64_t v7 = v6 >> 3;
    if (v7 == 1)
    {
      uint64_t v8 = 256;
      goto LABEL_10;
    }
    if (v7 == 2)
    {
      uint64_t v8 = 512;
LABEL_10:
      *(void *)(v3 - 16) = v8;
    }
    if (v4 != v5)
    {
      do
      {
        uint64_t v9 = *v4++;
        operator delete(v9);
      }
      while (v4 != v5);
      uint64_t v11 = *(void *)(v3 - 40);
      uint64_t v10 = *(void *)(v3 - 32);
      if (v10 != v11) {
        *(void *)(v3 - 32) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    uint64_t v13 = *(void **)(v3 - 48);
    v3 -= 48;
    uint64_t v12 = v13;
    if (v13) {
      operator delete(v12);
    }
  }
  while (v3 != v2);
  sub_95BEC(a1 + 41920);
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 34024;
  do
  {
    if (*(unsigned char *)(a1 + 34200 + v14))
    {
      uint64_t v16 = v15 + v14;
      uint64_t v17 = *(void **)(v15 + v14 + 96);
      if (v17)
      {
        *(void *)(v16 + 104) = v17;
        operator delete(v17);
      }
      unsigned int v18 = *(void **)(v16 + 72);
      if (v18)
      {
        *(void *)(v15 + v14 + 80) = v18;
        operator delete(v18);
      }
      uint64_t v19 = v15 + v14;
      uint64_t v20 = *(void **)(v15 + v14 + 48);
      if (v20)
      {
        *(void *)(v19 + 56) = v20;
        operator delete(v20);
      }
      int v21 = *(void **)(v19 + 24);
      if (v21)
      {
        *(void *)(v15 + v14 + 32) = v21;
        operator delete(v21);
      }
      int v22 = *(void **)(v15 + v14);
      if (v22)
      {
        *(void *)(v15 + v14 + 8) = v22;
        operator delete(v22);
      }
    }
    v14 -= 224;
  }
  while (v14 != -34048);
  double v24 = (void **)(a1 + 136);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v24);
  return a1;
}

void sub_148518(uint64_t a1)
{
  sub_14833C(a1);

  operator delete();
}

void sub_148550(uint64_t a1, void *a2, unsigned int a3, char a4)
{
  if (a3 > 0x97) {
    return;
  }
  uint64_t v4 = a1 + 224 * a3;
  if (!*(unsigned char *)(v4 + 376)) {
    return;
  }
  uint64_t v7 = v4 + 160;
  unsigned int v8 = *(unsigned __int8 *)(v4 + 196);
  if (v8 >= 0x60)
  {
    if (v8 >= 0x68)
    {
      if (v8 < 0x98) {
        goto LABEL_13;
      }
    }
    else if (*(unsigned char *)(v7 + 215))
    {
      goto LABEL_13;
    }
  }
  uint64_t v9 = a1 + 41968;
  uint64_t v10 = (int64x2_t *)(a1 + 41968 + 48 * a3);
  if (v10[2].i64[1])
  {
    unint64_t v11 = *(void *)(v9 + 48 * a3 + 32);
    uint64_t v12 = *(void *)(*(void *)(v10->i64[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));
    if (*(unsigned char *)(v12 + 32))
    {
      sub_47E68(v10);
      if (*(unsigned char *)(v7 + 216))
      {
        *(void *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3)
                                                                               - 1);
        *(unsigned char *)(v7 + 212) = a4;
      }
      sub_C2204(v12 + 40, v7);
      goto LABEL_14;
    }
  }
LABEL_13:
  *(void *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3) - 1);
  *(unsigned char *)(v7 + 212) = a4;
  sub_46078(a2, v7);
LABEL_14:
  if (*(unsigned char *)(v7 + 216))
  {
    uint64_t v13 = *(void **)(v7 + 136);
    if (v13)
    {
      *(void *)(v7 + 144) = v13;
      operator delete(v13);
    }
    uint64_t v14 = *(void **)(v7 + 112);
    if (v14)
    {
      *(void *)(v7 + 120) = v14;
      operator delete(v14);
    }
    uint64_t v15 = *(void **)(v7 + 88);
    if (v15)
    {
      *(void *)(v7 + 96) = v15;
      operator delete(v15);
    }
    uint64_t v16 = *(void **)(v7 + 64);
    if (v16)
    {
      *(void *)(v7 + 72) = v16;
      operator delete(v16);
    }
    uint64_t v17 = *(void **)(v7 + 40);
    if (v17)
    {
      *(void *)(v7 + 48) = v17;
      operator delete(v17);
    }
    *(unsigned char *)(v7 + 216) = 0;
  }
}

const char *sub_1486F8(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = &off_7430D8[a2];
    return *v3;
  }
  if (v2 < 0x40)
  {
    uint64_t v4 = off_7434D8;
LABEL_7:
    uint64_t v3 = &v4[v2];
    return *v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0x25)
  {
    uint64_t v4 = off_7436D8;
    goto LABEL_7;
  }
  return "Invalid";
}

uint64_t sub_148754(uint64_t result, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  *(void *)(result + 96) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *a4 = 1;
  uint64_t v4 = *a3;
  uint64_t v5 = *a3 & 7;
  unint64_t v6 = (unint64_t)*a3 >> 3;
  if (v5 == 7) {
    int v7 = *(unsigned __int16 *)(a2 + v6) >> 7;
  }
  else {
    int v7 = *(unsigned __int8 *)(a2 + v6) >> v5;
  }
  switch(v7 & 3)
  {
    case 1:
      uint64_t v12 = (v4 + 2) & 7;
      unint64_t v13 = (unint64_t)(v4 + 2) >> 3;
      if (v12 == 7) {
        int v14 = *(unsigned __int16 *)(a2 + v13) >> 7;
      }
      else {
        int v14 = *(unsigned __int8 *)(a2 + v13) >> v12;
      }
      switch(v14 & 3)
      {
        case 1:
          unint64_t v44 = v4 + 4;
          uint64_t v45 = (v4 + 4) & 7;
          unint64_t v46 = v44 >> 3;
          if (v45 == 7) {
            int v47 = *(unsigned __int16 *)(a2 + v46) >> 7;
          }
          else {
            int v47 = *(unsigned __int8 *)(a2 + v46) >> v45;
          }
          int v84 = v47 & 3;
          if (v84 == 1)
          {
            *(_WORD *)(result + 8) = 11;
            *(void *)uint64_t result = 0x300000003;
            unint64_t v128 = *a3 + 26;
            unint64_t v129 = v128 & 7;
            unint64_t v130 = v128 >> 3;
            if (v129 > 2)
            {
              unint64_t v132 = ((unint64_t)*(unsigned __int8 *)(v130 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v130 + a2 + 6) << 48);
              unint64_t v131 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 5) << 40;
            }
            else
            {
              unint64_t v131 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 6) << 48;
              unint64_t v132 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 5) << 40;
            }
            uint64_t v182 = (unsigned __int8 *)(a2 + v130);
            *(void *)(result + 24) |= ((v132 | v131 | ((unint64_t)v182[4] << 32) | ((unint64_t)v182[3] << 24) | ((unint64_t)v182[2] << 16) | ((unint64_t)v182[1] << 8) | *v182) >> v129) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v183 = *a3 & 7;
            unint64_t v184 = (unint64_t)(*a3 + 80) >> 3;
            if (v183 > 5) {
              unsigned int v185 = *(unsigned __int16 *)(a2 + v184);
            }
            else {
              unsigned int v185 = *(unsigned __int8 *)(a2 + v184);
            }
            *(_DWORD *)(result + 32) |= (v185 >> v183) & 7;
            unint64_t v186 = *a3 + 6;
            unint64_t v187 = v186 & 7;
            unint64_t v188 = v186 >> 3;
            if (v187 > 4)
            {
              int v190 = (*(unsigned __int8 *)(v188 + a2 + 3) << 24) | (*(unsigned __int8 *)(v188 + a2 + 2) << 16);
              int v189 = *(unsigned __int8 *)(v188 + a2 + 1) << 8;
            }
            else
            {
              int v189 = *(unsigned __int8 *)(v188 + a2 + 2) << 16;
              int v190 = *(unsigned __int8 *)(v188 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 16) |= ((v190 | v189 | *(unsigned __int8 *)(a2 + v188)) >> v187) & 0xFFFFF;
            uint64_t v22 = 83;
          }
          else
          {
            if (v84) {
              goto LABEL_81;
            }
            *(_WORD *)(result + 8) = 4;
            *(void *)uint64_t result = 0x200000002;
            unint64_t v85 = *a3 + 6;
            unint64_t v86 = v85 & 7;
            unint64_t v87 = v85 >> 3;
            if (v86 > 4)
            {
              int v89 = (*(unsigned __int8 *)(v87 + a2 + 3) << 24) | (*(unsigned __int8 *)(v87 + a2 + 2) << 16);
              int v88 = *(unsigned __int8 *)(v87 + a2 + 1) << 8;
            }
            else
            {
              int v88 = *(unsigned __int8 *)(v87 + a2 + 2) << 16;
              int v89 = *(unsigned __int8 *)(v87 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 16) |= ((v89 | v88 | *(unsigned __int8 *)(a2 + v87)) >> v86) & 0xFFFFF;
            uint64_t v22 = 26;
          }
          goto LABEL_398;
        case 2:
          *(_WORD *)(result + 8) = 2;
          *(void *)uint64_t result = 0x500000005;
          if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 4) >> 3)) >> ((*(unsigned char *)a3 + 4) & 7)))
          {
            *(_DWORD *)(result + 16) = 1;
            unint64_t v48 = *a3 + 5;
            unint64_t v49 = v48 & 7;
            unint64_t v50 = v48 >> 3;
            if (v49 > 5) {
              unsigned int v51 = *(unsigned __int16 *)(a2 + v50);
            }
            else {
              unsigned int v51 = *(unsigned __int8 *)(a2 + v50);
            }
            *(unsigned char *)(result + 20) |= (v51 >> v49) & 7;
            unint64_t v137 = *a3 & 7;
            unint64_t v138 = (unint64_t)(*a3 + 8) >> 3;
            if (v137 > 1) {
              unsigned int v139 = *(unsigned __int16 *)(a2 + v138);
            }
            else {
              unsigned int v139 = *(unsigned __int8 *)(a2 + v138);
            }
            *(unsigned char *)(result + 21) |= (v139 >> v137) & 0x7F;
            goto LABEL_122;
          }
          *(_DWORD *)(result + 16) = 0;
          unint64_t v103 = *a3 + 5;
          unint64_t v104 = v103 >> 3;
          unint64_t v105 = v103 & 7;
          if (v105) {
            int v106 = *(unsigned __int16 *)(a2 + v104) >> v105;
          }
          else {
            LOBYTE(v106) = *(unsigned char *)(a2 + v104);
          }
          *(unsigned char *)(result + 20) |= v106;
          unint64_t v191 = *a3 + 13;
          unint64_t v192 = v191 & 7;
          unint64_t v193 = v191 >> 3;
          if (v192 > 5) {
            unsigned __int16 v194 = *(_WORD *)(a2 + v193);
          }
          else {
            unsigned __int16 v194 = *(unsigned __int8 *)(a2 + v193);
          }
          switch((v194 >> v192) & 7)
          {
            case 1:
              int v361 = 1;
              goto LABEL_289;
            case 2:
              int v361 = 2;
              goto LABEL_289;
            case 3:
              int v361 = 3;
              goto LABEL_289;
            case 4:
              int v361 = 4;
              goto LABEL_289;
            case 5:
              int v361 = 5;
              goto LABEL_289;
            case 6:
              int v361 = 6;
              goto LABEL_289;
            case 7:
              int v361 = 7;
LABEL_289:
              *(_DWORD *)(result + 24) = v361;
              break;
            default:
              *(_DWORD *)(result + 24) = 0;
              break;
          }
          uint64_t v22 = 16;
          break;
        case 3:
          *(_WORD *)(result + 8) = 2;
          *(void *)uint64_t result = 0x600000006;
          unint64_t v52 = *a3 + 4;
          unint64_t v53 = v52 >> 3;
          unint64_t v54 = v52 & 7;
          if (v54) {
            int v55 = *(unsigned __int16 *)(a2 + v53) >> v54;
          }
          else {
            LOBYTE(v55) = *(unsigned char *)(a2 + v53);
          }
          *(unsigned char *)(result + 16) |= v55;
          uint64_t v22 = 12;
          goto LABEL_398;
        default:
          *(_WORD *)(result + 8) = 1;
          *(void *)uint64_t result = 0x100000001;
          uint64_t v22 = 4;
          goto LABEL_398;
      }
      break;
    case 2:
      unint64_t v15 = v4 + 2;
      uint64_t v16 = (v4 + 2) & 7;
      unint64_t v17 = v15 >> 3;
      if (v16 == 7) {
        int v18 = *(unsigned __int16 *)(a2 + v17) >> 7;
      }
      else {
        int v18 = *(unsigned __int8 *)(a2 + v17) >> v16;
      }
      switch(v18 & 3)
      {
        case 1:
          *(_WORD *)(result + 8) = 17;
          *(void *)uint64_t result = 0x800000008;
          unint64_t v56 = *a3 + 4;
          unint64_t v57 = v56 >> 3;
          unint64_t v58 = v56 & 7;
          if (v58) {
            int v59 = *(unsigned __int16 *)(a2 + v57) >> v58;
          }
          else {
            LOBYTE(v59) = *(unsigned char *)(a2 + v57);
          }
          *(unsigned char *)(result + 16) |= v59;
          unint64_t v107 = *a3 + 12;
          unint64_t v108 = v107 & 7;
          unint64_t v109 = v107 >> 3;
          if (v108 == 7) {
            int v110 = *(unsigned __int16 *)(a2 + v109) >> 7;
          }
          else {
            int v110 = *(unsigned __int8 *)(a2 + v109) >> v108;
          }
          switch(v110 & 3)
          {
            case 1:
              *(_DWORD *)(result + 20) = 0;
              unint64_t v146 = *a3 + 14;
              unint64_t v147 = v146 >> 3;
              unint64_t v148 = v146 & 7;
              if (v148)
              {
                unint64_t v149 = (unsigned __int8 *)(a2 + v147);
                uint64_t v150 = ((((unint64_t)v149[4] << 32) | ((unint64_t)v149[3] << 24) | ((unint64_t)v149[2] << 16) | ((unint64_t)v149[1] << 8) | *v149) >> v148);
              }
              else
              {
                uint64_t v150 = *(unsigned int *)(a2 + v147);
              }
              int v234 = *(_DWORD *)(result + 32);
              unint64_t v235 = *(void *)(result + 24) & 0xFFFFFFFF00000000 | v150 | *(void *)(result + 24);
              *(void *)(result + 24) = v235;
              unint64_t v236 = *a3 + 46;
              unint64_t v237 = v236 >> 3;
              unint64_t v238 = v236 & 7;
              if (v238)
              {
                unint64_t v239 = (unsigned __int8 *)(a2 + v237);
                uint64_t v240 = ((((unint64_t)v239[4] << 32) | ((unint64_t)v239[3] << 24) | ((unint64_t)v239[2] << 16) | ((unint64_t)v239[1] << 8) | *v239) >> v238);
              }
              else
              {
                uint64_t v240 = *(unsigned int *)(a2 + v237);
              }
              unint64_t v253 = v235 & 0xFFFFFFFF00000000 | (v240 << 32) | v235;
              *(_DWORD *)(result + 32) = v234;
              *(void *)(result + 24) = v253;
              unint64_t v254 = *a3 + 78;
              unint64_t v255 = v254 >> 3;
              unint64_t v256 = v254 & 7;
              if (v256)
              {
                uint64_t v257 = (unsigned __int8 *)(a2 + v255);
                int v258 = (((unint64_t)v257[4] << 32) | ((unint64_t)v257[3] << 24) | ((unint64_t)v257[2] << 16) | ((unint64_t)v257[1] << 8) | *v257) >> v256;
              }
              else
              {
                int v258 = *(_DWORD *)(a2 + v255);
              }
              *(void *)(result + 24) = v253;
              *(_DWORD *)(result + 32) = v258 | v234;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 110) >> 3)) >> ((*(unsigned char *)a3 + 110) & 7)))
              {
                *(_DWORD *)(result + 36) = 1;
                unint64_t v259 = *a3 + 111;
                unint64_t v260 = v259 & 7;
                unint64_t v261 = v259 >> 3;
                if (v260 > 3) {
                  unsigned int v262 = *(unsigned __int16 *)(a2 + v261);
                }
                else {
                  unsigned int v262 = *(unsigned __int8 *)(a2 + v261);
                }
                *(unsigned char *)(result + 40) |= (v262 >> v260) & 0x1F;
                unint64_t v278 = *a3 + 116;
                unint64_t v279 = v278 & 7;
                unint64_t v280 = v278 >> 3;
                if (v279 > 4) {
                  unsigned int v281 = (*(unsigned __int8 *)(a2 + v280 + 2) << 16) | (*(unsigned __int8 *)(a2 + v280 + 1) << 8) | *(unsigned __int8 *)(a2 + v280);
                }
                else {
                  unsigned int v281 = *(unsigned __int16 *)(a2 + v280);
                }
                int v287 = *(_DWORD *)(result + 42) | (v281 >> v279) & 0xFFF;
                *(_DWORD *)(result + 42) = v287;
                unint64_t v288 = *a3 & 7;
                unint64_t v289 = (unint64_t)(*a3 + 128) >> 3;
                if (v288 > 4) {
                  unsigned int v290 = *(unsigned __int16 *)(a2 + v289);
                }
                else {
                  unsigned int v290 = *(unsigned __int8 *)(a2 + v289);
                }
                int v295 = v287 | (((v290 >> v288) & 0xF) << 12);
                *(_DWORD *)(result + 42) = v295;
                unint64_t v296 = (*(unsigned char *)a3 - 124) & 7;
                unint64_t v297 = (unint64_t)(*a3 + 132) >> 3;
                if (v296 > 4) {
                  unsigned int v298 = *(unsigned __int16 *)(a2 + v297);
                }
                else {
                  unsigned int v298 = *(unsigned __int8 *)(a2 + v297);
                }
                *(_DWORD *)(result + 42) = v295 | (((v298 >> v296) & 0xF) << 16);
                uint64_t v22 = 136;
              }
              else
              {
                *(_DWORD *)(result + 36) = 0;
                unint64_t v263 = *a3 + 111;
                unint64_t v264 = v263 & 7;
                unint64_t v265 = v263 >> 3;
                if (v264 > 3) {
                  unsigned int v266 = *(unsigned __int16 *)(a2 + v265);
                }
                else {
                  unsigned int v266 = *(unsigned __int8 *)(a2 + v265);
                }
                *(unsigned char *)(result + 40) |= (v266 >> v264) & 0x1F;
                uint64_t v22 = 116;
              }
              break;
            case 2:
              *(_DWORD *)(result + 20) = 3;
              unint64_t v151 = *a3 + 14;
              unsigned int v152 = *(unsigned __int8 *)(a2 + (v151 >> 3));
              char v153 = v151 & 7;
              char v154 = *(unsigned char *)(result + 24);
              if ((v152 >> v153))
              {
                *(unsigned char *)(result + 24) = v154 | 1;
                unint64_t v155 = *a3 + 15;
                unint64_t v156 = v155 & 7;
                unint64_t v157 = v155 >> 3;
                if (v156 > 4) {
                  unsigned int v158 = *(unsigned __int16 *)(a2 + v157);
                }
                else {
                  unsigned int v158 = *(unsigned __int8 *)(a2 + v157);
                }
                *(unsigned char *)(result + 25) |= (v158 >> v156) & 0xF;
                unint64_t v267 = *a3 + 19;
                unint64_t v268 = v267 & 7;
                unint64_t v269 = v267 >> 3;
                if (v268 > 4) {
                  unsigned int v270 = *(unsigned __int16 *)(a2 + v269);
                }
                else {
                  unsigned int v270 = *(unsigned __int8 *)(a2 + v269);
                }
                *(unsigned char *)(result + 33) |= (v270 >> v268) & 0xF;
                uint64_t v22 = 23;
              }
              else
              {
                *(unsigned char *)(result + 24) = v154 & 0xFE;
                unint64_t v241 = *a3 + 15;
                unint64_t v242 = v241 & 7;
                unint64_t v243 = v241 >> 3;
                if (v242 > 4) {
                  unsigned int v244 = *(unsigned __int16 *)(a2 + v243);
                }
                else {
                  unsigned int v244 = *(unsigned __int8 *)(a2 + v243);
                }
                *(unsigned char *)(result + 25) |= (v244 >> v242) & 0xF;
                unint64_t v362 = *a3 + 19;
                unint64_t v363 = v362 & 7;
                unint64_t v364 = v362 >> 3;
                if (v363 > 4) {
                  unsigned int v365 = *(unsigned __int16 *)(a2 + v364);
                }
                else {
                  unsigned int v365 = *(unsigned __int8 *)(a2 + v364);
                }
                *(unsigned char *)(result + 33) |= (v365 >> v363) & 0xF;
                unint64_t v370 = *a3 + 23;
                unint64_t v371 = v370 & 7;
                unint64_t v372 = v370 >> 3;
                if (v371 > 4) {
                  unsigned int v373 = *(unsigned __int16 *)(a2 + v372);
                }
                else {
                  unsigned int v373 = *(unsigned __int8 *)(a2 + v372);
                }
                *(unsigned char *)(result + 26) |= (v373 >> v371) & 0xF;
                unint64_t v378 = *a3 + 27;
                unint64_t v379 = v378 & 7;
                unint64_t v380 = v378 >> 3;
                if (v379 > 4) {
                  unsigned int v381 = *(unsigned __int16 *)(a2 + v380);
                }
                else {
                  unsigned int v381 = *(unsigned __int8 *)(a2 + v380);
                }
                *(unsigned char *)(result + 34) |= (v381 >> v379) & 0xF;
                unint64_t v386 = *a3 + 31;
                unint64_t v387 = v386 & 7;
                unint64_t v388 = v386 >> 3;
                if (v387 > 4) {
                  unsigned int v389 = *(unsigned __int16 *)(a2 + v388);
                }
                else {
                  unsigned int v389 = *(unsigned __int8 *)(a2 + v388);
                }
                *(unsigned char *)(result + 27) |= (v389 >> v387) & 0xF;
                unint64_t v394 = *a3 + 35;
                unint64_t v395 = v394 & 7;
                unint64_t v396 = v394 >> 3;
                if (v395 > 4) {
                  unsigned int v397 = *(unsigned __int16 *)(a2 + v396);
                }
                else {
                  unsigned int v397 = *(unsigned __int8 *)(a2 + v396);
                }
                *(unsigned char *)(result + 35) |= (v397 >> v395) & 0xF;
                unint64_t v402 = *a3 + 39;
                unint64_t v403 = v402 & 7;
                unint64_t v404 = v402 >> 3;
                if (v403 > 4) {
                  unsigned int v405 = *(unsigned __int16 *)(a2 + v404);
                }
                else {
                  unsigned int v405 = *(unsigned __int8 *)(a2 + v404);
                }
                *(unsigned char *)(result + 28) |= (v405 >> v403) & 0xF;
                unint64_t v410 = *a3 + 43;
                unint64_t v411 = v410 & 7;
                unint64_t v412 = v410 >> 3;
                if (v411 > 4) {
                  unsigned int v413 = *(unsigned __int16 *)(a2 + v412);
                }
                else {
                  unsigned int v413 = *(unsigned __int8 *)(a2 + v412);
                }
                *(unsigned char *)(result + 36) |= (v413 >> v411) & 0xF;
                unint64_t v418 = *a3 + 47;
                unint64_t v419 = v418 & 7;
                unint64_t v420 = v418 >> 3;
                if (v419 > 4) {
                  unsigned int v421 = *(unsigned __int16 *)(a2 + v420);
                }
                else {
                  unsigned int v421 = *(unsigned __int8 *)(a2 + v420);
                }
                *(unsigned char *)(result + 29) |= (v421 >> v419) & 0xF;
                unint64_t v426 = *a3 + 51;
                unint64_t v427 = v426 & 7;
                unint64_t v428 = v426 >> 3;
                if (v427 > 4) {
                  unsigned int v429 = *(unsigned __int16 *)(a2 + v428);
                }
                else {
                  unsigned int v429 = *(unsigned __int8 *)(a2 + v428);
                }
                *(unsigned char *)(result + 37) |= (v429 >> v427) & 0xF;
                unint64_t v434 = *a3 + 55;
                unint64_t v435 = v434 & 7;
                unint64_t v436 = v434 >> 3;
                if (v435 > 4) {
                  unsigned int v437 = *(unsigned __int16 *)(a2 + v436);
                }
                else {
                  unsigned int v437 = *(unsigned __int8 *)(a2 + v436);
                }
                *(unsigned char *)(result + 30) |= (v437 >> v435) & 0xF;
                unint64_t v442 = *a3 + 59;
                unint64_t v443 = v442 & 7;
                unint64_t v444 = v442 >> 3;
                if (v443 > 4) {
                  unsigned int v445 = *(unsigned __int16 *)(a2 + v444);
                }
                else {
                  unsigned int v445 = *(unsigned __int8 *)(a2 + v444);
                }
                *(unsigned char *)(result + 38) |= (v445 >> v443) & 0xF;
                unint64_t v450 = *a3 + 63;
                unint64_t v451 = v450 & 7;
                unint64_t v452 = v450 >> 3;
                if (v451 > 4) {
                  unsigned int v453 = *(unsigned __int16 *)(a2 + v452);
                }
                else {
                  unsigned int v453 = *(unsigned __int8 *)(a2 + v452);
                }
                *(unsigned char *)(result + 31) |= (v453 >> v451) & 0xF;
                unint64_t v458 = *a3 + 67;
                unint64_t v459 = v458 & 7;
                unint64_t v460 = v458 >> 3;
                if (v459 > 4) {
                  unsigned int v461 = *(unsigned __int16 *)(a2 + v460);
                }
                else {
                  unsigned int v461 = *(unsigned __int8 *)(a2 + v460);
                }
                *(unsigned char *)(result + 39) |= (v461 >> v459) & 0xF;
                unint64_t v466 = *a3 + 71;
                unint64_t v467 = v466 & 7;
                unint64_t v468 = v466 >> 3;
                if (v467 > 4) {
                  unsigned int v469 = *(unsigned __int16 *)(a2 + v468);
                }
                else {
                  unsigned int v469 = *(unsigned __int8 *)(a2 + v468);
                }
                *(unsigned char *)(result + 32) |= (v469 >> v467) & 0xF;
                unint64_t v474 = *a3 + 75;
                unint64_t v475 = v474 & 7;
                unint64_t v476 = v474 >> 3;
                if (v475 > 4) {
                  unsigned int v477 = *(unsigned __int16 *)(a2 + v476);
                }
                else {
                  unsigned int v477 = *(unsigned __int8 *)(a2 + v476);
                }
                *(unsigned char *)(result + 40) |= (v477 >> v475) & 0xF;
                uint64_t v22 = 79;
              }
              break;
            case 3:
              *(_DWORD *)(result + 20) = 2;
              unint64_t v159 = *a3 + 14;
              unint64_t v160 = v159 & 7;
              unint64_t v161 = v159 >> 3;
              if (v160 == 7) {
                unsigned int v162 = ((*(unsigned __int8 *)(a2 + v161 + 2) << 16) | (*(unsigned __int8 *)(a2 + v161 + 1) << 8) | *(unsigned __int8 *)(a2 + v161)) >> 7;
              }
              else {
                unsigned int v162 = *(unsigned __int16 *)(a2 + v161) >> v160;
              }
              *(_WORD *)(result + 24) |= v162 & 0x3FF;
              uint64_t v206 = *a3 & 7;
              unint64_t v207 = (unint64_t)(*a3 + 24) >> 3;
              if (v206 == 7) {
                unsigned int v208 = ((*(unsigned __int8 *)(a2 + v207 + 2) << 16) | (*(unsigned __int8 *)(a2 + v207 + 1) << 8) | *(unsigned __int8 *)(a2 + v207)) >> 7;
              }
              else {
                unsigned int v208 = *(unsigned __int16 *)(a2 + v207) >> v206;
              }
              *(_WORD *)(result + 26) |= v208 & 0x3FF;
              unint64_t v218 = *a3 + 34;
              unint64_t v219 = v218 & 7;
              unint64_t v220 = v218 >> 3;
              if (v219 > 5) {
                unsigned int v221 = (*(unsigned __int8 *)(a2 + v220 + 2) << 16) | (*(unsigned __int8 *)(a2 + v220 + 1) << 8) | *(unsigned __int8 *)(a2 + v220);
              }
              else {
                unsigned int v221 = *(unsigned __int16 *)(a2 + v220);
              }
              *(_WORD *)(result + 28) |= (v221 >> v219) & 0x7FF;
              unint64_t v226 = *a3 + 45;
              unsigned int v227 = *(unsigned __int8 *)(a2 + (v226 >> 3));
              char v228 = v226 & 7;
              char v229 = *(unsigned char *)(result + 30);
              if ((v227 >> v228))
              {
                *(unsigned char *)(result + 30) = v229 | 1;
                unint64_t v230 = *a3 + 46;
                unint64_t v231 = v230 & 7;
                unint64_t v232 = v230 >> 3;
                if (v231 > 4) {
                  unsigned int v233 = *(unsigned __int16 *)(a2 + v232);
                }
                else {
                  unsigned int v233 = *(unsigned __int8 *)(a2 + v232);
                }
                *(unsigned char *)(result + 31) |= (v233 >> v231) & 0xF;
                unint64_t v274 = *a3 + 50;
                unint64_t v275 = v274 & 7;
                unint64_t v276 = v274 >> 3;
                if (v275 > 4) {
                  unsigned int v277 = *(unsigned __int16 *)(a2 + v276);
                }
                else {
                  unsigned int v277 = *(unsigned __int8 *)(a2 + v276);
                }
                *(unsigned char *)(result + 39) |= (v277 >> v275) & 0xF;
                uint64_t v22 = 54;
              }
              else
              {
                *(unsigned char *)(result + 30) = v229 & 0xFE;
                unint64_t v249 = *a3 + 46;
                unint64_t v250 = v249 & 7;
                unint64_t v251 = v249 >> 3;
                if (v250 > 4) {
                  unsigned int v252 = *(unsigned __int16 *)(a2 + v251);
                }
                else {
                  unsigned int v252 = *(unsigned __int8 *)(a2 + v251);
                }
                *(unsigned char *)(result + 31) |= (v252 >> v250) & 0xF;
                unint64_t v366 = *a3 + 50;
                unint64_t v367 = v366 & 7;
                unint64_t v368 = v366 >> 3;
                if (v367 > 4) {
                  unsigned int v369 = *(unsigned __int16 *)(a2 + v368);
                }
                else {
                  unsigned int v369 = *(unsigned __int8 *)(a2 + v368);
                }
                *(unsigned char *)(result + 39) |= (v369 >> v367) & 0xF;
                unint64_t v374 = *a3 + 54;
                unint64_t v375 = v374 & 7;
                unint64_t v376 = v374 >> 3;
                if (v375 > 4) {
                  unsigned int v377 = *(unsigned __int16 *)(a2 + v376);
                }
                else {
                  unsigned int v377 = *(unsigned __int8 *)(a2 + v376);
                }
                *(unsigned char *)(result + 32) |= (v377 >> v375) & 0xF;
                unint64_t v382 = *a3 + 58;
                unint64_t v383 = v382 & 7;
                unint64_t v384 = v382 >> 3;
                if (v383 > 4) {
                  unsigned int v385 = *(unsigned __int16 *)(a2 + v384);
                }
                else {
                  unsigned int v385 = *(unsigned __int8 *)(a2 + v384);
                }
                *(unsigned char *)(result + 40) |= (v385 >> v383) & 0xF;
                unint64_t v390 = *a3 + 62;
                unint64_t v391 = v390 & 7;
                unint64_t v392 = v390 >> 3;
                if (v391 > 4) {
                  unsigned int v393 = *(unsigned __int16 *)(a2 + v392);
                }
                else {
                  unsigned int v393 = *(unsigned __int8 *)(a2 + v392);
                }
                *(unsigned char *)(result + 33) |= (v393 >> v391) & 0xF;
                unint64_t v398 = *a3 + 66;
                unint64_t v399 = v398 & 7;
                unint64_t v400 = v398 >> 3;
                if (v399 > 4) {
                  unsigned int v401 = *(unsigned __int16 *)(a2 + v400);
                }
                else {
                  unsigned int v401 = *(unsigned __int8 *)(a2 + v400);
                }
                *(unsigned char *)(result + 41) |= (v401 >> v399) & 0xF;
                unint64_t v406 = *a3 + 70;
                unint64_t v407 = v406 & 7;
                unint64_t v408 = v406 >> 3;
                if (v407 > 4) {
                  unsigned int v409 = *(unsigned __int16 *)(a2 + v408);
                }
                else {
                  unsigned int v409 = *(unsigned __int8 *)(a2 + v408);
                }
                *(unsigned char *)(result + 34) |= (v409 >> v407) & 0xF;
                unint64_t v414 = *a3 + 74;
                unint64_t v415 = v414 & 7;
                unint64_t v416 = v414 >> 3;
                if (v415 > 4) {
                  unsigned int v417 = *(unsigned __int16 *)(a2 + v416);
                }
                else {
                  unsigned int v417 = *(unsigned __int8 *)(a2 + v416);
                }
                *(unsigned char *)(result + 42) |= (v417 >> v415) & 0xF;
                unint64_t v422 = *a3 + 78;
                unint64_t v423 = v422 & 7;
                unint64_t v424 = v422 >> 3;
                if (v423 > 4) {
                  unsigned int v425 = *(unsigned __int16 *)(a2 + v424);
                }
                else {
                  unsigned int v425 = *(unsigned __int8 *)(a2 + v424);
                }
                *(unsigned char *)(result + 35) |= (v425 >> v423) & 0xF;
                unint64_t v430 = *a3 + 82;
                unint64_t v431 = v430 & 7;
                unint64_t v432 = v430 >> 3;
                if (v431 > 4) {
                  unsigned int v433 = *(unsigned __int16 *)(a2 + v432);
                }
                else {
                  unsigned int v433 = *(unsigned __int8 *)(a2 + v432);
                }
                *(unsigned char *)(result + 43) |= (v433 >> v431) & 0xF;
                unint64_t v438 = *a3 + 86;
                unint64_t v439 = v438 & 7;
                unint64_t v440 = v438 >> 3;
                if (v439 > 4) {
                  unsigned int v441 = *(unsigned __int16 *)(a2 + v440);
                }
                else {
                  unsigned int v441 = *(unsigned __int8 *)(a2 + v440);
                }
                *(unsigned char *)(result + 36) |= (v441 >> v439) & 0xF;
                unint64_t v446 = *a3 + 90;
                unint64_t v447 = v446 & 7;
                unint64_t v448 = v446 >> 3;
                if (v447 > 4) {
                  unsigned int v449 = *(unsigned __int16 *)(a2 + v448);
                }
                else {
                  unsigned int v449 = *(unsigned __int8 *)(a2 + v448);
                }
                *(unsigned char *)(result + 44) |= (v449 >> v447) & 0xF;
                unint64_t v454 = *a3 + 94;
                unint64_t v455 = v454 & 7;
                unint64_t v456 = v454 >> 3;
                if (v455 > 4) {
                  unsigned int v457 = *(unsigned __int16 *)(a2 + v456);
                }
                else {
                  unsigned int v457 = *(unsigned __int8 *)(a2 + v456);
                }
                *(unsigned char *)(result + 37) |= (v457 >> v455) & 0xF;
                unint64_t v462 = *a3 + 98;
                unint64_t v463 = v462 & 7;
                unint64_t v464 = v462 >> 3;
                if (v463 > 4) {
                  unsigned int v465 = *(unsigned __int16 *)(a2 + v464);
                }
                else {
                  unsigned int v465 = *(unsigned __int8 *)(a2 + v464);
                }
                *(unsigned char *)(result + 45) |= (v465 >> v463) & 0xF;
                unint64_t v470 = *a3 + 102;
                unint64_t v471 = v470 & 7;
                unint64_t v472 = v470 >> 3;
                if (v471 > 4) {
                  unsigned int v473 = *(unsigned __int16 *)(a2 + v472);
                }
                else {
                  unsigned int v473 = *(unsigned __int8 *)(a2 + v472);
                }
                *(unsigned char *)(result + 38) |= (v473 >> v471) & 0xF;
                unint64_t v478 = *a3 + 106;
                unint64_t v479 = v478 & 7;
                unint64_t v480 = v478 >> 3;
                if (v479 > 4) {
                  unsigned int v481 = *(unsigned __int16 *)(a2 + v480);
                }
                else {
                  unsigned int v481 = *(unsigned __int8 *)(a2 + v480);
                }
                *(unsigned char *)(result + 46) |= (v481 >> v479) & 0xF;
                uint64_t v22 = 110;
              }
              break;
            default:
              *(_DWORD *)(result + 20) = 1;
              unint64_t v111 = *a3 + 14;
              unint64_t v112 = v111 & 7;
              unint64_t v113 = v111 >> 3;
              if (v112 > 4) {
                unsigned __int16 v114 = *(_WORD *)(a2 + v113);
              }
              else {
                unsigned __int16 v114 = *(unsigned __int8 *)(a2 + v113);
              }
              int v201 = *(unsigned __int16 *)(result + 24) | (v114 >> v112) & 0xF;
              *(_WORD *)(result + 24) = v201;
              unint64_t v202 = *a3 + 18;
              unint64_t v203 = v202 & 7;
              unint64_t v204 = v202 >> 3;
              if (v203 > 4) {
                unsigned __int16 v205 = *(_WORD *)(a2 + v204);
              }
              else {
                unsigned __int16 v205 = *(unsigned __int8 *)(a2 + v204);
              }
              int v213 = (16 * ((v205 >> v203) & 0xF)) | v201;
              *(_WORD *)(result + 24) = v213;
              unint64_t v214 = *a3 + 22;
              unint64_t v215 = v214 & 7;
              unint64_t v216 = v214 >> 3;
              if (v215 > 4) {
                unsigned __int16 v217 = *(_WORD *)(a2 + v216);
              }
              else {
                unsigned __int16 v217 = *(unsigned __int8 *)(a2 + v216);
              }
              *(_WORD *)(result + 24) = (((v217 >> v215) & 0xF) << 8) | v213;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 26) >> 3)) >> ((*(unsigned char *)a3 + 26) & 7)))
              {
                *(_DWORD *)(result + 28) = 1;
                unint64_t v222 = *a3 + 27;
                unint64_t v223 = v222 & 7;
                unint64_t v224 = v222 >> 3;
                if (v223 > 3) {
                  unsigned int v225 = *(unsigned __int16 *)(a2 + v224);
                }
                else {
                  unsigned int v225 = *(unsigned __int8 *)(a2 + v224);
                }
                *(unsigned char *)(result + 32) |= (v225 >> v223) & 0x1F;
                unint64_t v271 = *a3 & 7;
                unint64_t v272 = (unint64_t)(*a3 + 32) >> 3;
                if (v271 > 4) {
                  unsigned int v273 = (*(unsigned __int8 *)(a2 + v272 + 2) << 16) | (*(unsigned __int8 *)(a2 + v272 + 1) << 8) | *(unsigned __int8 *)(a2 + v272);
                }
                else {
                  unsigned int v273 = *(unsigned __int16 *)(a2 + v272);
                }
                int v282 = *(_DWORD *)(result + 34) | (v273 >> v271) & 0xFFF;
                *(_DWORD *)(result + 34) = v282;
                unint64_t v283 = *a3 + 44;
                unint64_t v284 = v283 & 7;
                unint64_t v285 = v283 >> 3;
                if (v284 > 4) {
                  unsigned int v286 = *(unsigned __int16 *)(a2 + v285);
                }
                else {
                  unsigned int v286 = *(unsigned __int8 *)(a2 + v285);
                }
                int v291 = v282 | (((v286 >> v284) & 0xF) << 12);
                *(_DWORD *)(result + 34) = v291;
                unint64_t v292 = *a3 & 7;
                unint64_t v293 = (unint64_t)(*a3 + 48) >> 3;
                if (v292 > 4) {
                  unsigned int v294 = *(unsigned __int16 *)(a2 + v293);
                }
                else {
                  unsigned int v294 = *(unsigned __int8 *)(a2 + v293);
                }
                *(_DWORD *)(result + 34) = v291 | (((v294 >> v292) & 0xF) << 16);
                uint64_t v22 = 52;
              }
              else
              {
                *(_DWORD *)(result + 28) = 0;
                unint64_t v245 = *a3 + 27;
                unint64_t v246 = v245 & 7;
                unint64_t v247 = v245 >> 3;
                if (v246 > 3) {
                  unsigned int v248 = *(unsigned __int16 *)(a2 + v247);
                }
                else {
                  unsigned int v248 = *(unsigned __int8 *)(a2 + v247);
                }
                *(unsigned char *)(result + 32) |= (v248 >> v246) & 0x1F;
                uint64_t v22 = 32;
              }
              break;
          }
          break;
        case 2:
          *(_WORD *)(result + 8) = 6;
          *(void *)uint64_t result = 0x900000009;
          unint64_t v60 = *a3 + 4;
          unint64_t v61 = v60 >> 3;
          unint64_t v62 = v60 & 7;
          if (v62) {
            int v63 = *(unsigned __int16 *)(a2 + v61) >> v62;
          }
          else {
            LOBYTE(v63) = *(unsigned char *)(a2 + v61);
          }
          *(unsigned char *)(result + 16) |= v63;
          unint64_t v115 = *a3 + 12;
          unint64_t v116 = v115 >> 3;
          unint64_t v117 = v115 & 7;
          if (v117)
          {
            uint64_t v118 = (unsigned __int8 *)(a2 + v116);
            unint64_t v119 = (((unint64_t)v118[4] << 32) | ((unint64_t)v118[3] << 24) | ((unint64_t)v118[2] << 16) | ((unint64_t)v118[1] << 8) | *v118) >> v117;
          }
          else
          {
            LODWORD(v119) = *(_DWORD *)(a2 + v116);
          }
          *(_DWORD *)(result + 20) |= v119;
          uint64_t v22 = 44;
          break;
        case 3:
          *(_WORD *)(result + 8) = 62;
          *(void *)uint64_t result = 0xA0000000ALL;
          unint64_t v64 = *a3 + 4;
          unint64_t v65 = v64 & 7;
          unint64_t v66 = v64 >> 3;
          if (v65 > 4) {
            unsigned __int16 v67 = *(_WORD *)(a2 + v66);
          }
          else {
            unsigned __int16 v67 = *(unsigned __int8 *)(a2 + v66);
          }
          switch((v67 >> v65) & 0xF)
          {
            case 1:
              *(_DWORD *)(result + 16) = 1;
              unint64_t v299 = *a3 & 7;
              unint64_t v300 = (unint64_t)(*a3 + 8) >> 3;
              if (v299 > 4)
              {
                int v302 = (*(unsigned __int8 *)(v300 + a2 + 3) << 24) | (*(unsigned __int8 *)(v300 + a2 + 2) << 16);
                int v301 = *(unsigned __int8 *)(v300 + a2 + 1) << 8;
              }
              else
              {
                int v301 = *(unsigned __int8 *)(v300 + a2 + 2) << 16;
                int v302 = *(unsigned __int8 *)(v300 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v302 | v301 | *(unsigned __int8 *)(a2 + v300)) >> v299) & 0xFFFFF;
              unint64_t v487 = *a3 + 28;
              unint64_t v488 = v487 & 7;
              unint64_t v489 = v487 >> 3;
              if (v488 > 4)
              {
                int v491 = (*(unsigned __int8 *)(v489 + a2 + 3) << 24) | (*(unsigned __int8 *)(v489 + a2 + 2) << 16);
                int v490 = *(unsigned __int8 *)(v489 + a2 + 1) << 8;
              }
              else
              {
                int v490 = *(unsigned __int8 *)(v489 + a2 + 2) << 16;
                int v491 = *(unsigned __int8 *)(v489 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v491 | v490 | *(unsigned __int8 *)(a2 + v489)) >> v488) & 0xFFFFF;
              unint64_t v547 = *a3 & 7;
              unint64_t v548 = (unint64_t)(*a3 + 48) >> 3;
              if (v547 > 4)
              {
                int v550 = (*(unsigned __int8 *)(v548 + a2 + 3) << 24) | (*(unsigned __int8 *)(v548 + a2 + 2) << 16);
                int v549 = *(unsigned __int8 *)(v548 + a2 + 1) << 8;
              }
              else
              {
                int v549 = *(unsigned __int8 *)(v548 + a2 + 2) << 16;
                int v550 = *(unsigned __int8 *)(v548 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v550 | v549 | *(unsigned __int8 *)(a2 + v548)) >> v547) & 0xFFFFF;
              unint64_t v599 = *a3 + 68;
              unint64_t v600 = v599 & 7;
              unint64_t v601 = v599 >> 3;
              if (v600 > 4)
              {
                int v603 = (*(unsigned __int8 *)(v601 + a2 + 3) << 24) | (*(unsigned __int8 *)(v601 + a2 + 2) << 16);
                int v602 = *(unsigned __int8 *)(v601 + a2 + 1) << 8;
              }
              else
              {
                int v602 = *(unsigned __int8 *)(v601 + a2 + 2) << 16;
                int v603 = *(unsigned __int8 *)(v601 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v603 | v602 | *(unsigned __int8 *)(a2 + v601)) >> v600) & 0xFFFFF;
              unint64_t v641 = *a3 & 7;
              unint64_t v642 = (unint64_t)(*a3 + 88) >> 3;
              if (v641 > 4)
              {
                int v644 = (*(unsigned __int8 *)(v642 + a2 + 3) << 24) | (*(unsigned __int8 *)(v642 + a2 + 2) << 16);
                int v643 = *(unsigned __int8 *)(v642 + a2 + 1) << 8;
              }
              else
              {
                int v643 = *(unsigned __int8 *)(v642 + a2 + 2) << 16;
                int v644 = *(unsigned __int8 *)(v642 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v644 | v643 | *(unsigned __int8 *)(a2 + v642)) >> v641) & 0xFFFFF;
              unint64_t v681 = *a3 + 108;
              unint64_t v682 = v681 & 7;
              unint64_t v683 = v681 >> 3;
              if (v682 > 4)
              {
                int v685 = (*(unsigned __int8 *)(v683 + a2 + 3) << 24) | (*(unsigned __int8 *)(v683 + a2 + 2) << 16);
                int v684 = *(unsigned __int8 *)(v683 + a2 + 1) << 8;
              }
              else
              {
                int v684 = *(unsigned __int8 *)(v683 + a2 + 2) << 16;
                int v685 = *(unsigned __int8 *)(v683 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v685 | v684 | *(unsigned __int8 *)(a2 + v683)) >> v682) & 0xFFFFF;
              unint64_t v718 = *a3 & 7;
              unint64_t v719 = (unint64_t)(*a3 + 128) >> 3;
              if (v718 > 4)
              {
                int v721 = (*(unsigned __int8 *)(v719 + a2 + 3) << 24) | (*(unsigned __int8 *)(v719 + a2 + 2) << 16);
                int v720 = *(unsigned __int8 *)(v719 + a2 + 1) << 8;
              }
              else
              {
                int v720 = *(unsigned __int8 *)(v719 + a2 + 2) << 16;
                int v721 = *(unsigned __int8 *)(v719 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v721 | v720 | *(unsigned __int8 *)(a2 + v719)) >> v718) & 0xFFFFF;
              unint64_t v756 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v757 = (unint64_t)(*a3 + 148) >> 3;
              if (v756 > 4)
              {
                int v759 = (*(unsigned __int8 *)(v757 + a2 + 3) << 24) | (*(unsigned __int8 *)(v757 + a2 + 2) << 16);
                int v758 = *(unsigned __int8 *)(v757 + a2 + 1) << 8;
              }
              else
              {
                int v758 = *(unsigned __int8 *)(v757 + a2 + 2) << 16;
                int v759 = *(unsigned __int8 *)(v757 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v759 | v758 | *(unsigned __int8 *)(a2 + v757)) >> v756) & 0xFFFFF;
              unint64_t v792 = (unint64_t)(*a3 + 168) >> 3;
              uint64_t v793 = *a3 & 7;
              if (v793) {
                unsigned int v794 = ((*(unsigned __int8 *)(a2 + v792 + 2) << 16) | (*(unsigned __int8 *)(a2 + v792 + 1) << 8) | *(unsigned __int8 *)(a2 + v792)) >> v793;
              }
              else {
                LOWORD(v794) = *(_WORD *)(a2 + v792);
              }
              int v1151 = *(_DWORD *)(result + 56) | (unsigned __int16)v794;
              *(_DWORD *)(result + 56) = v1151;
              unint64_t v1152 = (unint64_t)(*a3 + 184) >> 3;
              uint64_t v1153 = *a3 & 7;
              if (v1153) {
                unsigned int v1154 = ((*(unsigned __int8 *)(a2 + v1152 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1152 + 1) << 8) | *(unsigned __int8 *)(a2 + v1152)) >> v1153;
              }
              else {
                unsigned int v1154 = *(unsigned __int16 *)(a2 + v1152);
              }
              *(_DWORD *)(result + 56) = v1151 | (v1154 << 16);
              uint64_t v22 = 200;
              break;
            case 2:
              *(_DWORD *)(result + 16) = 2;
              uint64_t v303 = *a3 & 7;
              unint64_t v304 = (unint64_t)(*a3 + 8) >> 3;
              if (v303 == 7) {
                int v305 = *(unsigned __int16 *)(a2 + v304) >> 7;
              }
              else {
                int v305 = *(unsigned __int8 *)(a2 + v304) >> v303;
              }
              *(unsigned char *)(result + 24) |= v305 & 3;
              unint64_t v492 = *a3 + 10;
              unint64_t v493 = v492 & 7;
              unint64_t v494 = v492 >> 3;
              if (v493 > 1) {
                unsigned int v495 = (*(unsigned __int8 *)(a2 + v494 + 2) << 16) | (*(unsigned __int8 *)(a2 + v494 + 1) << 8) | *(unsigned __int8 *)(a2 + v494);
              }
              else {
                unsigned int v495 = *(unsigned __int16 *)(a2 + v494);
              }
              *(_WORD *)(result + 26) |= (v495 >> v493) & 0x7FFF;
              unint64_t v551 = *a3 + 25;
              unint64_t v552 = v551 & 7;
              unint64_t v553 = v551 >> 3;
              if (v552 > 1) {
                unsigned int v554 = (*(unsigned __int8 *)(a2 + v553 + 2) << 16) | (*(unsigned __int8 *)(a2 + v553 + 1) << 8) | *(unsigned __int8 *)(a2 + v553);
              }
              else {
                unsigned int v554 = *(unsigned __int16 *)(a2 + v553);
              }
              *(_WORD *)(result + 28) |= (v554 >> v552) & 0x7FFF;
              unint64_t v604 = *a3 & 7;
              unint64_t v605 = (unint64_t)(*a3 + 40) >> 3;
              if (v604 > 1) {
                unsigned int v606 = (*(unsigned __int8 *)(a2 + v605 + 2) << 16) | (*(unsigned __int8 *)(a2 + v605 + 1) << 8) | *(unsigned __int8 *)(a2 + v605);
              }
              else {
                unsigned int v606 = *(unsigned __int16 *)(a2 + v605);
              }
              *(_WORD *)(result + 30) |= (v606 >> v604) & 0x7FFF;
              unint64_t v645 = *a3 + 55;
              unint64_t v646 = v645 & 7;
              unint64_t v647 = v645 >> 3;
              if (v646 > 1) {
                unsigned int v648 = (*(unsigned __int8 *)(a2 + v647 + 2) << 16) | (*(unsigned __int8 *)(a2 + v647 + 1) << 8) | *(unsigned __int8 *)(a2 + v647);
              }
              else {
                unsigned int v648 = *(unsigned __int16 *)(a2 + v647);
              }
              *(_WORD *)(result + 32) |= (v648 >> v646) & 0x7FFF;
              unint64_t v686 = *a3 + 70;
              unint64_t v687 = v686 & 7;
              unint64_t v688 = v686 >> 3;
              if (v687 > 1) {
                unsigned int v689 = (*(unsigned __int8 *)(a2 + v688 + 2) << 16) | (*(unsigned __int8 *)(a2 + v688 + 1) << 8) | *(unsigned __int8 *)(a2 + v688);
              }
              else {
                unsigned int v689 = *(unsigned __int16 *)(a2 + v688);
              }
              *(_WORD *)(result + 34) |= (v689 >> v687) & 0x7FFF;
              unint64_t v722 = *a3 + 85;
              unint64_t v723 = v722 & 7;
              unint64_t v724 = v722 >> 3;
              if (v723 > 1) {
                unsigned int v725 = (*(unsigned __int8 *)(a2 + v724 + 2) << 16) | (*(unsigned __int8 *)(a2 + v724 + 1) << 8) | *(unsigned __int8 *)(a2 + v724);
              }
              else {
                unsigned int v725 = *(unsigned __int16 *)(a2 + v724);
              }
              *(_WORD *)(result + 36) |= (v725 >> v723) & 0x7FFF;
              unint64_t v760 = *a3 + 100;
              unint64_t v761 = v760 & 7;
              unint64_t v762 = v760 >> 3;
              if (v761 > 1) {
                unsigned int v763 = (*(unsigned __int8 *)(a2 + v762 + 2) << 16) | (*(unsigned __int8 *)(a2 + v762 + 1) << 8) | *(unsigned __int8 *)(a2 + v762);
              }
              else {
                unsigned int v763 = *(unsigned __int16 *)(a2 + v762);
              }
              *(_WORD *)(result + 38) |= (v763 >> v761) & 0x7FFF;
              unint64_t v795 = *a3 + 115;
              unint64_t v796 = v795 & 7;
              unint64_t v797 = v795 >> 3;
              if (v796 > 1) {
                unsigned int v798 = (*(unsigned __int8 *)(a2 + v797 + 2) << 16) | (*(unsigned __int8 *)(a2 + v797 + 1) << 8) | *(unsigned __int8 *)(a2 + v797);
              }
              else {
                unsigned int v798 = *(unsigned __int16 *)(a2 + v797);
              }
              *(_WORD *)(result + 40) |= (v798 >> v796) & 0x7FFF;
              unint64_t v821 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v822 = (unint64_t)(*a3 + 130) >> 3;
              if (v821 > 1) {
                unsigned int v823 = (*(unsigned __int8 *)(a2 + v822 + 2) << 16) | (*(unsigned __int8 *)(a2 + v822 + 1) << 8) | *(unsigned __int8 *)(a2 + v822);
              }
              else {
                unsigned int v823 = *(unsigned __int16 *)(a2 + v822);
              }
              *(_WORD *)(result + 42) |= (v823 >> v821) & 0x7FFF;
              unint64_t v843 = (*(unsigned char *)a3 - 111) & 7;
              unint64_t v844 = (unint64_t)(*a3 + 145) >> 3;
              if (v843 > 1) {
                unsigned int v845 = (*(unsigned __int8 *)(a2 + v844 + 2) << 16) | (*(unsigned __int8 *)(a2 + v844 + 1) << 8) | *(unsigned __int8 *)(a2 + v844);
              }
              else {
                unsigned int v845 = *(unsigned __int16 *)(a2 + v844);
              }
              *(_WORD *)(result + 44) |= (v845 >> v843) & 0x7FFF;
              unint64_t v860 = *a3 & 7;
              unint64_t v861 = (unint64_t)(*a3 + 160) >> 3;
              if (v860 > 1) {
                unsigned int v862 = (*(unsigned __int8 *)(a2 + v861 + 2) << 16) | (*(unsigned __int8 *)(a2 + v861 + 1) << 8) | *(unsigned __int8 *)(a2 + v861);
              }
              else {
                unsigned int v862 = *(unsigned __int16 *)(a2 + v861);
              }
              *(_WORD *)(result + 46) |= (v862 >> v860) & 0x7FFF;
              unint64_t v877 = (*(unsigned char *)a3 - 81) & 7;
              unint64_t v878 = (unint64_t)(*a3 + 175) >> 3;
              if (v877 > 1) {
                unsigned int v879 = (*(unsigned __int8 *)(a2 + v878 + 2) << 16) | (*(unsigned __int8 *)(a2 + v878 + 1) << 8) | *(unsigned __int8 *)(a2 + v878);
              }
              else {
                unsigned int v879 = *(unsigned __int16 *)(a2 + v878);
              }
              *(_WORD *)(result + 48) |= (v879 >> v877) & 0x7FFF;
              unint64_t v894 = (*(unsigned char *)a3 - 66) & 7;
              unint64_t v895 = (unint64_t)(*a3 + 190) >> 3;
              if (v894 > 1) {
                unsigned int v896 = (*(unsigned __int8 *)(a2 + v895 + 2) << 16) | (*(unsigned __int8 *)(a2 + v895 + 1) << 8) | *(unsigned __int8 *)(a2 + v895);
              }
              else {
                unsigned int v896 = *(unsigned __int16 *)(a2 + v895);
              }
              *(_WORD *)(result + 50) |= (v896 >> v894) & 0x7FFF;
              unint64_t v911 = (*(unsigned char *)a3 - 51) & 7;
              unint64_t v912 = (unint64_t)(*a3 + 205) >> 3;
              if (v911 > 1) {
                unsigned int v913 = (*(unsigned __int8 *)(a2 + v912 + 2) << 16) | (*(unsigned __int8 *)(a2 + v912 + 1) << 8) | *(unsigned __int8 *)(a2 + v912);
              }
              else {
                unsigned int v913 = *(unsigned __int16 *)(a2 + v912);
              }
              *(_WORD *)(result + 52) |= (v913 >> v911) & 0x7FFF;
              unint64_t v929 = (*(unsigned char *)a3 - 36) & 7;
              unint64_t v930 = (unint64_t)(*a3 + 220) >> 3;
              if (v929 > 1) {
                unsigned int v931 = (*(unsigned __int8 *)(a2 + v930 + 2) << 16) | (*(unsigned __int8 *)(a2 + v930 + 1) << 8) | *(unsigned __int8 *)(a2 + v930);
              }
              else {
                unsigned int v931 = *(unsigned __int16 *)(a2 + v930);
              }
              *(_WORD *)(result + 54) |= (v931 >> v929) & 0x7FFF;
              unint64_t v947 = (*(unsigned char *)a3 - 21) & 7;
              unint64_t v948 = (unint64_t)(*a3 + 235) >> 3;
              if (v947 > 1) {
                unsigned int v949 = (*(unsigned __int8 *)(a2 + v948 + 2) << 16) | (*(unsigned __int8 *)(a2 + v948 + 1) << 8) | *(unsigned __int8 *)(a2 + v948);
              }
              else {
                unsigned int v949 = *(unsigned __int16 *)(a2 + v948);
              }
              *(_WORD *)(result + 56) |= (v949 >> v947) & 0x7FFF;
              unint64_t v967 = (*(unsigned char *)a3 - 6) & 7;
              unint64_t v968 = (unint64_t)(*a3 + 250) >> 3;
              if (v967 > 1) {
                unsigned int v969 = (*(unsigned __int8 *)(a2 + v968 + 2) << 16) | (*(unsigned __int8 *)(a2 + v968 + 1) << 8) | *(unsigned __int8 *)(a2 + v968);
              }
              else {
                unsigned int v969 = *(unsigned __int16 *)(a2 + v968);
              }
              *(_WORD *)(result + 58) |= (v969 >> v967) & 0x7FFF;
              unint64_t v983 = *a3 + 265;
              unint64_t v984 = v983 & 7;
              unint64_t v985 = v983 >> 3;
              if (v984 > 1) {
                unsigned int v986 = (*(unsigned __int8 *)(a2 + v985 + 2) << 16) | (*(unsigned __int8 *)(a2 + v985 + 1) << 8) | *(unsigned __int8 *)(a2 + v985);
              }
              else {
                unsigned int v986 = *(unsigned __int16 *)(a2 + v985);
              }
              *(_WORD *)(result + 60) |= (v986 >> v984) & 0x7FFF;
              unint64_t v1000 = *a3 & 7;
              unint64_t v1001 = (unint64_t)(*a3 + 280) >> 3;
              if (v1000 > 1) {
                unsigned int v1002 = (*(unsigned __int8 *)(a2 + v1001 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1001 + 1) << 8) | *(unsigned __int8 *)(a2 + v1001);
              }
              else {
                unsigned int v1002 = *(unsigned __int16 *)(a2 + v1001);
              }
              *(_WORD *)(result + 62) |= (v1002 >> v1000) & 0x7FFF;
              unint64_t v1011 = *a3 + 295;
              unint64_t v1012 = v1011 & 7;
              unint64_t v1013 = v1011 >> 3;
              if (v1012 > 1) {
                unsigned int v1014 = (*(unsigned __int8 *)(a2 + v1013 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1013 + 1) << 8) | *(unsigned __int8 *)(a2 + v1013);
              }
              else {
                unsigned int v1014 = *(unsigned __int16 *)(a2 + v1013);
              }
              *(_WORD *)(result + 64) |= (v1014 >> v1012) & 0x7FFF;
              unint64_t v1019 = *a3 + 310;
              unint64_t v1020 = v1019 & 7;
              unint64_t v1021 = v1019 >> 3;
              if (v1020 > 1) {
                unsigned int v1022 = (*(unsigned __int8 *)(a2 + v1021 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1021 + 1) << 8) | *(unsigned __int8 *)(a2 + v1021);
              }
              else {
                unsigned int v1022 = *(unsigned __int16 *)(a2 + v1021);
              }
              *(_WORD *)(result + 66) |= (v1022 >> v1020) & 0x7FFF;
              unint64_t v1027 = *a3 + 325;
              unint64_t v1028 = v1027 & 7;
              unint64_t v1029 = v1027 >> 3;
              if (v1028 > 1) {
                unsigned int v1030 = (*(unsigned __int8 *)(a2 + v1029 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1029 + 1) << 8) | *(unsigned __int8 *)(a2 + v1029);
              }
              else {
                unsigned int v1030 = *(unsigned __int16 *)(a2 + v1029);
              }
              *(_WORD *)(result + 68) |= (v1030 >> v1028) & 0x7FFF;
              unint64_t v1035 = *a3 + 340;
              unint64_t v1036 = v1035 & 7;
              unint64_t v1037 = v1035 >> 3;
              if (v1036 > 1) {
                unsigned int v1038 = (*(unsigned __int8 *)(a2 + v1037 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1037 + 1) << 8) | *(unsigned __int8 *)(a2 + v1037);
              }
              else {
                unsigned int v1038 = *(unsigned __int16 *)(a2 + v1037);
              }
              *(_WORD *)(result + 70) |= (v1038 >> v1036) & 0x7FFF;
              unint64_t v1043 = *a3 + 355;
              unint64_t v1044 = v1043 & 7;
              unint64_t v1045 = v1043 >> 3;
              if (v1044 > 1) {
                unsigned int v1046 = (*(unsigned __int8 *)(a2 + v1045 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1045 + 1) << 8) | *(unsigned __int8 *)(a2 + v1045);
              }
              else {
                unsigned int v1046 = *(unsigned __int16 *)(a2 + v1045);
              }
              *(_WORD *)(result + 72) |= (v1046 >> v1044) & 0x7FFF;
              unint64_t v1051 = *a3 + 370;
              unint64_t v1052 = v1051 & 7;
              unint64_t v1053 = v1051 >> 3;
              if (v1052 > 1) {
                unsigned int v1054 = (*(unsigned __int8 *)(a2 + v1053 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1053 + 1) << 8) | *(unsigned __int8 *)(a2 + v1053);
              }
              else {
                unsigned int v1054 = *(unsigned __int16 *)(a2 + v1053);
              }
              *(_WORD *)(result + 74) |= (v1054 >> v1052) & 0x7FFF;
              unint64_t v1059 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v1060 = (unint64_t)(*a3 + 385) >> 3;
              if (v1059 > 1) {
                unsigned int v1061 = (*(unsigned __int8 *)(a2 + v1060 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1060 + 1) << 8) | *(unsigned __int8 *)(a2 + v1060);
              }
              else {
                unsigned int v1061 = *(unsigned __int16 *)(a2 + v1060);
              }
              *(_WORD *)(result + 76) |= (v1061 >> v1059) & 0x7FFF;
              unint64_t v1066 = *a3 & 7;
              unint64_t v1067 = (unint64_t)(*a3 + 400) >> 3;
              if (v1066 > 1) {
                unsigned int v1068 = (*(unsigned __int8 *)(a2 + v1067 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1067 + 1) << 8) | *(unsigned __int8 *)(a2 + v1067);
              }
              else {
                unsigned int v1068 = *(unsigned __int16 *)(a2 + v1067);
              }
              *(_WORD *)(result + 78) |= (v1068 >> v1066) & 0x7FFF;
              unint64_t v1072 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v1073 = (unint64_t)(*a3 + 415) >> 3;
              if (v1072 > 1) {
                unsigned int v1074 = (*(unsigned __int8 *)(a2 + v1073 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1073 + 1) << 8) | *(unsigned __int8 *)(a2 + v1073);
              }
              else {
                unsigned int v1074 = *(unsigned __int16 *)(a2 + v1073);
              }
              *(_WORD *)(result + 80) |= (v1074 >> v1072) & 0x7FFF;
              unint64_t v1079 = (*(unsigned char *)a3 - 82) & 7;
              unint64_t v1080 = (unint64_t)(*a3 + 430) >> 3;
              if (v1079 > 1) {
                unsigned int v1081 = (*(unsigned __int8 *)(a2 + v1080 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1080 + 1) << 8) | *(unsigned __int8 *)(a2 + v1080);
              }
              else {
                unsigned int v1081 = *(unsigned __int16 *)(a2 + v1080);
              }
              *(_WORD *)(result + 82) |= (v1081 >> v1079) & 0x7FFF;
              unint64_t v1085 = (*(unsigned char *)a3 - 67) & 7;
              unint64_t v1086 = (unint64_t)(*a3 + 445) >> 3;
              if (v1085 > 1) {
                unsigned int v1087 = (*(unsigned __int8 *)(a2 + v1086 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1086 + 1) << 8) | *(unsigned __int8 *)(a2 + v1086);
              }
              else {
                unsigned int v1087 = *(unsigned __int16 *)(a2 + v1086);
              }
              *(_WORD *)(result + 84) |= (v1087 >> v1085) & 0x7FFF;
              unint64_t v1091 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v1092 = (unint64_t)(*a3 + 460) >> 3;
              if (v1091 > 1) {
                unsigned int v1093 = (*(unsigned __int8 *)(a2 + v1092 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1092 + 1) << 8) | *(unsigned __int8 *)(a2 + v1092);
              }
              else {
                unsigned int v1093 = *(unsigned __int16 *)(a2 + v1092);
              }
              *(_WORD *)(result + 86) |= (v1093 >> v1091) & 0x7FFF;
              unint64_t v1097 = (*(unsigned char *)a3 - 37) & 7;
              unint64_t v1098 = (unint64_t)(*a3 + 475) >> 3;
              if (v1097 > 1) {
                unsigned int v1099 = (*(unsigned __int8 *)(a2 + v1098 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1098 + 1) << 8) | *(unsigned __int8 *)(a2 + v1098);
              }
              else {
                unsigned int v1099 = *(unsigned __int16 *)(a2 + v1098);
              }
              *(_WORD *)(result + 88) |= (v1099 >> v1097) & 0x7FFF;
              uint64_t v22 = 490;
              break;
            case 3:
              *(_DWORD *)(result + 16) = 3;
              *(unsigned char *)(result + 24) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1;
              unint64_t v306 = *a3 + 9;
              unint64_t v307 = v306 >> 3;
              unint64_t v308 = v306 & 7;
              if (v308) {
                unsigned int v309 = ((*(unsigned __int8 *)(a2 + v307 + 2) << 16) | (*(unsigned __int8 *)(a2 + v307 + 1) << 8) | *(unsigned __int8 *)(a2 + v307)) >> v308;
              }
              else {
                LOWORD(v309) = *(_WORD *)(a2 + v307);
              }
              uint64_t v1100 = (unsigned __int16)v309;
              int v1101 = *(_DWORD *)(result + 34);
              uint64_t v1102 = *(void *)(result + 26);
              uint64_t v1103 = v1102 | v1100;
              *(void *)(result + 26) = v1103;
              unint64_t v1104 = *a3 + 25;
              unint64_t v1105 = v1104 >> 3;
              unint64_t v1106 = v1104 & 7;
              if (v1106) {
                unsigned int v1107 = ((*(unsigned __int8 *)(a2 + v1105 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1105 + 1) << 8) | *(unsigned __int8 *)(a2 + v1105)) >> v1106;
              }
              else {
                unsigned int v1107 = *(unsigned __int16 *)(a2 + v1105);
              }
              unint64_t v1158 = v1103 & 0xFFFFFFFF0000FFFFLL | v1103 & 0xFFFF0000 | (unint64_t)(v1107 << 16);
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1158;
              unint64_t v1159 = *a3 + 41;
              unint64_t v1160 = v1159 >> 3;
              unint64_t v1161 = v1159 & 7;
              if (v1161) {
                unsigned int v1162 = ((*(unsigned __int8 *)(a2 + v1160 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1160 + 1) << 8) | *(unsigned __int8 *)(a2 + v1160)) >> v1161;
              }
              else {
                LOWORD(v1162) = *(_WORD *)(a2 + v1160);
              }
              unint64_t v1177 = v1158 & 0xFFFF0000FFFFFFFFLL | v1102 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1162 << 32);
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1177;
              unint64_t v1178 = *a3 + 57;
              unint64_t v1179 = v1178 >> 3;
              unint64_t v1180 = v1178 & 7;
              if (v1180) {
                uint64_t v1181 = ((*(unsigned __int8 *)(a2 + v1179 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1179 + 1) << 8) | *(unsigned __int8 *)(a2 + v1179)) >> v1180;
              }
              else {
                uint64_t v1181 = *(unsigned __int16 *)(a2 + v1179);
              }
              unint64_t v1188 = v1177 & 0xFFFF000000000000 | (v1181 << 48) | v1177 & 0xFFFFFFFFFFFFLL;
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1188;
              unint64_t v1189 = *a3 + 73;
              unint64_t v1190 = v1189 >> 3;
              unint64_t v1191 = v1189 & 7;
              if (v1191) {
                unsigned int v1192 = ((*(unsigned __int8 *)(a2 + v1190 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1190 + 1) << 8) | *(unsigned __int8 *)(a2 + v1190)) >> v1191;
              }
              else {
                LOWORD(v1192) = *(_WORD *)(a2 + v1190);
              }
              unsigned int v1204 = (unsigned __int16)(v1101 | v1192) | v1101 & 0xFFFF0000;
              *(void *)(result + 26) = v1188;
              *(_DWORD *)(result + 34) = v1204;
              unint64_t v1205 = *a3 + 89;
              unint64_t v1206 = v1205 & 7;
              unint64_t v1207 = v1205 >> 3;
              if (v1206 > 1) {
                unsigned int v1208 = (*(unsigned __int8 *)(a2 + v1207 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1207 + 1) << 8) | *(unsigned __int8 *)(a2 + v1207);
              }
              else {
                unsigned int v1208 = *(unsigned __int16 *)(a2 + v1207);
              }
              *(void *)(result + 26) = v1188;
              *(_DWORD *)(result + 34) = v1204 & 0x8000FFFF | ((((v1208 >> v1206) | HIWORD(v1204)) & 0x7FFF) << 16);
              unint64_t v1209 = (unint64_t)(*a3 + 104) >> 3;
              uint64_t v1210 = *a3 & 7;
              if (v1210) {
                unsigned int v1211 = ((*(unsigned __int8 *)(a2 + v1209 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1209 + 1) << 8) | *(unsigned __int8 *)(a2 + v1209)) >> v1210;
              }
              else {
                LOWORD(v1211) = *(_WORD *)(a2 + v1209);
              }
              uint64_t v1217 = (unsigned __int16)v1211;
              int v1218 = *(_DWORD *)(result + 46);
              uint64_t v1219 = *(void *)(result + 38);
              uint64_t v1220 = v1219 | v1217;
              *(void *)(result + 38) = v1220;
              unint64_t v1221 = (unint64_t)(*a3 + 120) >> 3;
              uint64_t v1222 = *a3 & 7;
              if (v1222) {
                unsigned int v1223 = ((*(unsigned __int8 *)(a2 + v1221 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1221 + 1) << 8) | *(unsigned __int8 *)(a2 + v1221)) >> v1222;
              }
              else {
                unsigned int v1223 = *(unsigned __int16 *)(a2 + v1221);
              }
              unint64_t v1225 = v1220 & 0xFFFFFFFF0000FFFFLL | v1220 & 0xFFFF0000 | (unint64_t)(v1223 << 16);
              *(_DWORD *)(result + 46) = v1218;
              *(void *)(result + 38) = v1225;
              unint64_t v1226 = (unint64_t)(*a3 + 136) >> 3;
              uint64_t v1227 = *a3 & 7;
              if (v1227) {
                unsigned int v1228 = ((*(unsigned __int8 *)(a2 + v1226 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1226 + 1) << 8) | *(unsigned __int8 *)(a2 + v1226)) >> v1227;
              }
              else {
                LOWORD(v1228) = *(_WORD *)(a2 + v1226);
              }
              unint64_t v1229 = v1225 & 0xFFFF0000FFFFFFFFLL | v1219 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1228 << 32);
              *(_DWORD *)(result + 46) = v1218;
              *(void *)(result + 38) = v1229;
              unint64_t v1230 = (unint64_t)(*a3 + 152) >> 3;
              uint64_t v1231 = *a3 & 7;
              if (v1231) {
                uint64_t v1232 = ((*(unsigned __int8 *)(a2 + v1230 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1230 + 1) << 8) | *(unsigned __int8 *)(a2 + v1230)) >> v1231;
              }
              else {
                uint64_t v1232 = *(unsigned __int16 *)(a2 + v1230);
              }
              unint64_t v1233 = v1229 & 0xFFFF000000000000 | (v1232 << 48) | v1229 & 0xFFFFFFFFFFFFLL;
              *(_DWORD *)(result + 46) = v1218;
              *(void *)(result + 38) = v1233;
              unint64_t v1234 = (unint64_t)(*a3 + 168) >> 3;
              uint64_t v1235 = *a3 & 7;
              if (v1235) {
                unsigned int v1236 = ((*(unsigned __int8 *)(a2 + v1234 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1234 + 1) << 8) | *(unsigned __int8 *)(a2 + v1234)) >> v1235;
              }
              else {
                LOWORD(v1236) = *(_WORD *)(a2 + v1234);
              }
              unsigned int v1237 = (unsigned __int16)(v1218 | v1236) | v1218 & 0xFFFF0000;
              *(void *)(result + 38) = v1233;
              *(_DWORD *)(result + 46) = v1237;
              unint64_t v1238 = *a3 & 7;
              unint64_t v1239 = (unint64_t)(*a3 + 184) >> 3;
              if (v1238 > 1) {
                unsigned int v1240 = (*(unsigned __int8 *)(a2 + v1239 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1239 + 1) << 8) | *(unsigned __int8 *)(a2 + v1239);
              }
              else {
                unsigned int v1240 = *(unsigned __int16 *)(a2 + v1239);
              }
              *(void *)(result + 38) = v1233;
              *(_DWORD *)(result + 46) = v1237 & 0x8000FFFF | ((((v1240 >> v1238) | HIWORD(v1237)) & 0x7FFF) << 16);
              unint64_t v1241 = (*(unsigned char *)a3 - 57) & 7;
              unint64_t v1242 = (unint64_t)(*a3 + 199) >> 3;
              if (v1241 > 1) {
                unsigned int v1243 = (*(unsigned __int8 *)(a2 + v1242 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1242 + 1) << 8) | *(unsigned __int8 *)(a2 + v1242);
              }
              else {
                unsigned int v1243 = *(unsigned __int16 *)(a2 + v1242);
              }
              *(_WORD *)(result + 50) |= (v1243 >> v1241) & 0x7FFF;
              uint64_t v22 = 214;
              break;
            case 4:
              *(_DWORD *)(result + 16) = 4;
              int v310 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v310;
              unint64_t v311 = *a3 + 9;
              unint64_t v312 = v311 & 7;
              unint64_t v313 = v311 >> 3;
              if (v312 == 7) {
                int v314 = *(_DWORD *)(a2 + v313) >> 7;
              }
              else {
                int v314 = ((*(unsigned __int8 *)(a2 + v313 + 2) << 16) | (*(unsigned __int8 *)(a2 + v313 + 1) << 8) | *(unsigned __int8 *)(a2 + v313)) >> v312;
              }
              *(_DWORD *)(result + 24) = (2 * (v314 & 0x3FFFF)) | v310;
              unint64_t v496 = *a3 + 27;
              unint64_t v497 = v496 & 7;
              unint64_t v498 = v496 >> 3;
              if (v497 == 7) {
                int v499 = *(_DWORD *)(a2 + v498) >> 7;
              }
              else {
                int v499 = ((*(unsigned __int8 *)(a2 + v498 + 2) << 16) | (*(unsigned __int8 *)(a2 + v498 + 1) << 8) | *(unsigned __int8 *)(a2 + v498)) >> v497;
              }
              *(_DWORD *)(result + 28) |= v499 & 0x3FFFF;
              unint64_t v555 = *a3 + 45;
              unint64_t v556 = v555 & 7;
              unint64_t v557 = v555 >> 3;
              if (v556 == 7) {
                int v558 = *(_DWORD *)(a2 + v557) >> 7;
              }
              else {
                int v558 = ((*(unsigned __int8 *)(a2 + v557 + 2) << 16) | (*(unsigned __int8 *)(a2 + v557 + 1) << 8) | *(unsigned __int8 *)(a2 + v557)) >> v556;
              }
              *(_DWORD *)(result + 32) |= v558 & 0x3FFFF;
              unint64_t v607 = *a3 + 63;
              unint64_t v608 = v607 & 7;
              unint64_t v609 = v607 >> 3;
              if (v608 == 7) {
                int v610 = *(_DWORD *)(a2 + v609) >> 7;
              }
              else {
                int v610 = ((*(unsigned __int8 *)(a2 + v609 + 2) << 16) | (*(unsigned __int8 *)(a2 + v609 + 1) << 8) | *(unsigned __int8 *)(a2 + v609)) >> v608;
              }
              *(_DWORD *)(result + 36) |= v610 & 0x3FFFF;
              unint64_t v649 = *a3 + 81;
              unint64_t v650 = v649 & 7;
              unint64_t v651 = v649 >> 3;
              if (v650 == 7) {
                int v652 = *(_DWORD *)(a2 + v651) >> 7;
              }
              else {
                int v652 = ((*(unsigned __int8 *)(a2 + v651 + 2) << 16) | (*(unsigned __int8 *)(a2 + v651 + 1) << 8) | *(unsigned __int8 *)(a2 + v651)) >> v650;
              }
              *(_DWORD *)(result + 40) |= v652 & 0x3FFFF;
              unint64_t v690 = *a3 + 99;
              unint64_t v691 = v690 & 7;
              unint64_t v692 = v690 >> 3;
              if (v691 == 7) {
                int v693 = *(_DWORD *)(a2 + v692) >> 7;
              }
              else {
                int v693 = ((*(unsigned __int8 *)(a2 + v692 + 2) << 16) | (*(unsigned __int8 *)(a2 + v692 + 1) << 8) | *(unsigned __int8 *)(a2 + v692)) >> v691;
              }
              *(_DWORD *)(result + 44) |= v693 & 0x3FFFF;
              unint64_t v726 = *a3 + 117;
              unint64_t v727 = v726 & 7;
              unint64_t v728 = v726 >> 3;
              if (v727 > 4)
              {
                int v730 = (*(unsigned __int8 *)(v728 + a2 + 3) << 24) | (*(unsigned __int8 *)(v728 + a2 + 2) << 16);
                int v729 = *(unsigned __int8 *)(v728 + a2 + 1) << 8;
              }
              else
              {
                int v729 = *(unsigned __int8 *)(v728 + a2 + 2) << 16;
                int v730 = *(unsigned __int8 *)(v728 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v730 | v729 | *(unsigned __int8 *)(a2 + v728)) >> v727) & 0xFFFFF;
              unint64_t v764 = (*(unsigned char *)a3 - 119) & 7;
              unint64_t v765 = (unint64_t)(*a3 + 137) >> 3;
              if (v764 > 4)
              {
                int v767 = (*(unsigned __int8 *)(v765 + a2 + 3) << 24) | (*(unsigned __int8 *)(v765 + a2 + 2) << 16);
                int v766 = *(unsigned __int8 *)(v765 + a2 + 1) << 8;
              }
              else
              {
                int v766 = *(unsigned __int8 *)(v765 + a2 + 2) << 16;
                int v767 = *(unsigned __int8 *)(v765 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v767 | v766 | *(unsigned __int8 *)(a2 + v765)) >> v764) & 0xFFFFF;
              unint64_t v799 = (*(unsigned char *)a3 - 99) & 7;
              unint64_t v800 = (unint64_t)(*a3 + 157) >> 3;
              if (v799 > 4)
              {
                int v802 = (*(unsigned __int8 *)(v800 + a2 + 3) << 24) | (*(unsigned __int8 *)(v800 + a2 + 2) << 16);
                int v801 = *(unsigned __int8 *)(v800 + a2 + 1) << 8;
              }
              else
              {
                int v801 = *(unsigned __int8 *)(v800 + a2 + 2) << 16;
                int v802 = *(unsigned __int8 *)(v800 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v802 | v801 | *(unsigned __int8 *)(a2 + v800)) >> v799) & 0xFFFFF;
              unint64_t v824 = (unint64_t)(*a3 + 177) >> 3;
              if (((*(unsigned char *)a3 - 79) & 7) != 0) {
                unsigned int v825 = ((*(unsigned __int8 *)(a2 + v824 + 2) << 16) | (*(unsigned __int8 *)(a2 + v824 + 1) << 8) | *(unsigned __int8 *)(a2 + v824)) >> ((*(unsigned char *)a3 - 79) & 7);
              }
              else {
                LOWORD(v825) = *(_WORD *)(a2 + v824);
              }
              int v1155 = *(_DWORD *)(result + 60) | (unsigned __int16)v825;
              *(_DWORD *)(result + 60) = v1155;
              unint64_t v1156 = (unint64_t)(*a3 + 193) >> 3;
              if (((*(unsigned char *)a3 - 63) & 7) != 0) {
                unsigned int v1157 = ((*(unsigned __int8 *)(a2 + v1156 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1156 + 1) << 8) | *(unsigned __int8 *)(a2 + v1156)) >> ((*(unsigned char *)a3 - 63) & 7);
              }
              else {
                unsigned int v1157 = *(unsigned __int16 *)(a2 + v1156);
              }
              *(_DWORD *)(result + 60) = v1155 | (v1157 << 16);
              uint64_t v22 = 209;
              break;
            case 5:
              *(_DWORD *)(result + 16) = 5;
              int v315 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v315;
              unint64_t v316 = *a3 + 9;
              unint64_t v317 = v316 & 7;
              unint64_t v318 = v316 >> 3;
              if (v317 > 5)
              {
                int v320 = (*(unsigned __int8 *)(v318 + a2 + 3) << 24) | (*(unsigned __int8 *)(v318 + a2 + 2) << 16);
                int v319 = *(unsigned __int8 *)(v318 + a2 + 1) << 8;
              }
              else
              {
                int v319 = *(unsigned __int8 *)(v318 + a2 + 2) << 16;
                int v320 = *(unsigned __int8 *)(v318 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) = (2
                                        * (((v320 | v319 | *(unsigned __int8 *)(a2 + v318)) >> v317) & 0x7FFFF)) | v315;
              unint64_t v500 = *a3 + 28;
              *(_DWORD *)(result + 28) |= (((*(unsigned __int8 *)(a2 + (v500 >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + (v500 >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + (v500 >> 3))) >> (v500 & 7)) & 0x1FFFF;
              unint64_t v501 = *a3 + 45;
              unint64_t v502 = v501 & 7;
              unint64_t v503 = v501 >> 3;
              if (v502 > 4)
              {
                int v505 = (*(unsigned __int8 *)(v503 + a2 + 3) << 24) | (*(unsigned __int8 *)(v503 + a2 + 2) << 16);
                int v504 = *(unsigned __int8 *)(v503 + a2 + 1) << 8;
              }
              else
              {
                int v504 = *(unsigned __int8 *)(v503 + a2 + 2) << 16;
                int v505 = *(unsigned __int8 *)(v503 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v505 | v504 | *(unsigned __int8 *)(a2 + v503)) >> v502) & 0xFFFFF;
              unint64_t v559 = *a3 + 65;
              unint64_t v560 = v559 & 7;
              unint64_t v561 = v559 >> 3;
              if (v560 > 4)
              {
                int v563 = (*(unsigned __int8 *)(v561 + a2 + 3) << 24) | (*(unsigned __int8 *)(v561 + a2 + 2) << 16);
                int v562 = *(unsigned __int8 *)(v561 + a2 + 1) << 8;
              }
              else
              {
                int v562 = *(unsigned __int8 *)(v561 + a2 + 2) << 16;
                int v563 = *(unsigned __int8 *)(v561 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v563 | v562 | *(unsigned __int8 *)(a2 + v561)) >> v560) & 0xFFFFF;
              uint64_t v22 = 85;
              break;
            case 6:
              *(_DWORD *)(result + 16) = 6;
              int v321 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v321;
              unint64_t v322 = *a3 + 9;
              unint64_t v323 = v322 & 7;
              unint64_t v324 = v322 >> 3;
              if (v323 > 5)
              {
                int v326 = (*(unsigned __int8 *)(v324 + a2 + 3) << 24) | (*(unsigned __int8 *)(v324 + a2 + 2) << 16);
                int v325 = *(unsigned __int8 *)(v324 + a2 + 1) << 8;
              }
              else
              {
                int v325 = *(unsigned __int8 *)(v324 + a2 + 2) << 16;
                int v326 = *(unsigned __int8 *)(v324 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) = (2
                                        * (((v326 | v325 | *(unsigned __int8 *)(a2 + v324)) >> v323) & 0x7FFFF)) | v321;
              unint64_t v506 = *a3 + 28;
              unint64_t v507 = v506 & 7;
              unint64_t v508 = v506 >> 3;
              if (v507 > 5)
              {
                int v510 = (*(unsigned __int8 *)(v508 + a2 + 3) << 24) | (*(unsigned __int8 *)(v508 + a2 + 2) << 16);
                int v509 = *(unsigned __int8 *)(v508 + a2 + 1) << 8;
              }
              else
              {
                int v509 = *(unsigned __int8 *)(v508 + a2 + 2) << 16;
                int v510 = *(unsigned __int8 *)(v508 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v510 | v509 | *(unsigned __int8 *)(a2 + v508)) >> v507) & 0x7FFFF;
              unint64_t v564 = *a3 + 47;
              unint64_t v565 = v564 & 7;
              unint64_t v566 = v564 >> 3;
              if (v565 > 5)
              {
                int v568 = (*(unsigned __int8 *)(v566 + a2 + 3) << 24) | (*(unsigned __int8 *)(v566 + a2 + 2) << 16);
                int v567 = *(unsigned __int8 *)(v566 + a2 + 1) << 8;
              }
              else
              {
                int v567 = *(unsigned __int8 *)(v566 + a2 + 2) << 16;
                int v568 = *(unsigned __int8 *)(v566 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v568 | v567 | *(unsigned __int8 *)(a2 + v566)) >> v565) & 0x7FFFF;
              unint64_t v611 = *a3 + 66;
              unint64_t v612 = v611 & 7;
              unint64_t v613 = v611 >> 3;
              if (v612 > 5)
              {
                int v615 = (*(unsigned __int8 *)(v613 + a2 + 3) << 24) | (*(unsigned __int8 *)(v613 + a2 + 2) << 16);
                int v614 = *(unsigned __int8 *)(v613 + a2 + 1) << 8;
              }
              else
              {
                int v614 = *(unsigned __int8 *)(v613 + a2 + 2) << 16;
                int v615 = *(unsigned __int8 *)(v613 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v615 | v614 | *(unsigned __int8 *)(a2 + v613)) >> v612) & 0x7FFFF;
              unint64_t v653 = *a3 + 85;
              unint64_t v654 = v653 & 7;
              unint64_t v655 = v653 >> 3;
              if (v654 > 5)
              {
                int v657 = (*(unsigned __int8 *)(v655 + a2 + 3) << 24) | (*(unsigned __int8 *)(v655 + a2 + 2) << 16);
                int v656 = *(unsigned __int8 *)(v655 + a2 + 1) << 8;
              }
              else
              {
                int v656 = *(unsigned __int8 *)(v655 + a2 + 2) << 16;
                int v657 = *(unsigned __int8 *)(v655 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v657 | v656 | *(unsigned __int8 *)(a2 + v655)) >> v654) & 0x7FFFF;
              unint64_t v694 = *a3 & 7;
              unint64_t v695 = (unint64_t)(*a3 + 104) >> 3;
              if (v694 > 5)
              {
                int v697 = (*(unsigned __int8 *)(v695 + a2 + 3) << 24) | (*(unsigned __int8 *)(v695 + a2 + 2) << 16);
                int v696 = *(unsigned __int8 *)(v695 + a2 + 1) << 8;
              }
              else
              {
                int v696 = *(unsigned __int8 *)(v695 + a2 + 2) << 16;
                int v697 = *(unsigned __int8 *)(v695 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v697 | v696 | *(unsigned __int8 *)(a2 + v695)) >> v694) & 0x7FFFF;
              unint64_t v731 = *a3 + 123;
              unint64_t v732 = v731 & 7;
              unint64_t v733 = v731 >> 3;
              if (v732 > 5)
              {
                int v735 = (*(unsigned __int8 *)(v733 + a2 + 3) << 24) | (*(unsigned __int8 *)(v733 + a2 + 2) << 16);
                int v734 = *(unsigned __int8 *)(v733 + a2 + 1) << 8;
              }
              else
              {
                int v734 = *(unsigned __int8 *)(v733 + a2 + 2) << 16;
                int v735 = *(unsigned __int8 *)(v733 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v735 | v734 | *(unsigned __int8 *)(a2 + v733)) >> v732) & 0x7FFFF;
              unint64_t v768 = (*(unsigned char *)a3 - 114) & 7;
              unint64_t v769 = (unint64_t)(*a3 + 142) >> 3;
              if (v768 > 5)
              {
                int v771 = (*(unsigned __int8 *)(v769 + a2 + 3) << 24) | (*(unsigned __int8 *)(v769 + a2 + 2) << 16);
                int v770 = *(unsigned __int8 *)(v769 + a2 + 1) << 8;
              }
              else
              {
                int v770 = *(unsigned __int8 *)(v769 + a2 + 2) << 16;
                int v771 = *(unsigned __int8 *)(v769 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v771 | v770 | *(unsigned __int8 *)(a2 + v769)) >> v768) & 0x7FFFF;
              unint64_t v803 = (*(unsigned char *)a3 - 95) & 7;
              unint64_t v804 = (unint64_t)(*a3 + 161) >> 3;
              if (v803 > 5)
              {
                int v806 = (*(unsigned __int8 *)(v804 + a2 + 3) << 24) | (*(unsigned __int8 *)(v804 + a2 + 2) << 16);
                int v805 = *(unsigned __int8 *)(v804 + a2 + 1) << 8;
              }
              else
              {
                int v805 = *(unsigned __int8 *)(v804 + a2 + 2) << 16;
                int v806 = *(unsigned __int8 *)(v804 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v806 | v805 | *(unsigned __int8 *)(a2 + v804)) >> v803) & 0x7FFFF;
              unint64_t v826 = (*(unsigned char *)a3 - 76) & 7;
              unint64_t v827 = (unint64_t)(*a3 + 180) >> 3;
              if (v826 > 5)
              {
                int v829 = (*(unsigned __int8 *)(v827 + a2 + 3) << 24) | (*(unsigned __int8 *)(v827 + a2 + 2) << 16);
                int v828 = *(unsigned __int8 *)(v827 + a2 + 1) << 8;
              }
              else
              {
                int v828 = *(unsigned __int8 *)(v827 + a2 + 2) << 16;
                int v829 = *(unsigned __int8 *)(v827 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v829 | v828 | *(unsigned __int8 *)(a2 + v827)) >> v826) & 0x7FFFF;
              unint64_t v846 = (*(unsigned char *)a3 - 57) & 7;
              unint64_t v847 = (unint64_t)(*a3 + 199) >> 3;
              if (v846 > 5)
              {
                int v849 = (*(unsigned __int8 *)(v847 + a2 + 3) << 24) | (*(unsigned __int8 *)(v847 + a2 + 2) << 16);
                int v848 = *(unsigned __int8 *)(v847 + a2 + 1) << 8;
              }
              else
              {
                int v848 = *(unsigned __int8 *)(v847 + a2 + 2) << 16;
                int v849 = *(unsigned __int8 *)(v847 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v849 | v848 | *(unsigned __int8 *)(a2 + v847)) >> v846) & 0x7FFFF;
              unint64_t v863 = (*(unsigned char *)a3 - 38) & 7;
              unint64_t v864 = (unint64_t)(*a3 + 218) >> 3;
              if (v863 > 5)
              {
                int v866 = (*(unsigned __int8 *)(v864 + a2 + 3) << 24) | (*(unsigned __int8 *)(v864 + a2 + 2) << 16);
                int v865 = *(unsigned __int8 *)(v864 + a2 + 1) << 8;
              }
              else
              {
                int v865 = *(unsigned __int8 *)(v864 + a2 + 2) << 16;
                int v866 = *(unsigned __int8 *)(v864 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v866 | v865 | *(unsigned __int8 *)(a2 + v864)) >> v863) & 0x7FFFF;
              unint64_t v880 = (*(unsigned char *)a3 - 19) & 7;
              unint64_t v881 = (unint64_t)(*a3 + 237) >> 3;
              if (v880 > 5)
              {
                int v883 = (*(unsigned __int8 *)(v881 + a2 + 3) << 24) | (*(unsigned __int8 *)(v881 + a2 + 2) << 16);
                int v882 = *(unsigned __int8 *)(v881 + a2 + 1) << 8;
              }
              else
              {
                int v882 = *(unsigned __int8 *)(v881 + a2 + 2) << 16;
                int v883 = *(unsigned __int8 *)(v881 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v883 | v882 | *(unsigned __int8 *)(a2 + v881)) >> v880) & 0x7FFFF;
              unint64_t v897 = *a3 & 7;
              unint64_t v898 = (unint64_t)(*a3 + 256) >> 3;
              if (v897 > 5)
              {
                int v900 = (*(unsigned __int8 *)(v898 + a2 + 3) << 24) | (*(unsigned __int8 *)(v898 + a2 + 2) << 16);
                int v899 = *(unsigned __int8 *)(v898 + a2 + 1) << 8;
              }
              else
              {
                int v899 = *(unsigned __int8 *)(v898 + a2 + 2) << 16;
                int v900 = *(unsigned __int8 *)(v898 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v900 | v899 | *(unsigned __int8 *)(a2 + v898)) >> v897) & 0x7FFFF;
              unint64_t v914 = *a3 + 275;
              unint64_t v915 = v914 & 7;
              unint64_t v916 = v914 >> 3;
              if (v915 > 5)
              {
                int v918 = (*(unsigned __int8 *)(v916 + a2 + 3) << 24) | (*(unsigned __int8 *)(v916 + a2 + 2) << 16);
                int v917 = *(unsigned __int8 *)(v916 + a2 + 1) << 8;
              }
              else
              {
                int v917 = *(unsigned __int8 *)(v916 + a2 + 2) << 16;
                int v918 = *(unsigned __int8 *)(v916 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 80) |= ((v918 | v917 | *(unsigned __int8 *)(a2 + v916)) >> v915) & 0x7FFFF;
              unint64_t v932 = *a3 + 294;
              unint64_t v933 = v932 & 7;
              unint64_t v934 = v932 >> 3;
              if (v933 > 5)
              {
                int v936 = (*(unsigned __int8 *)(v934 + a2 + 3) << 24) | (*(unsigned __int8 *)(v934 + a2 + 2) << 16);
                int v935 = *(unsigned __int8 *)(v934 + a2 + 1) << 8;
              }
              else
              {
                int v935 = *(unsigned __int8 *)(v934 + a2 + 2) << 16;
                int v936 = *(unsigned __int8 *)(v934 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 84) |= ((v936 | v935 | *(unsigned __int8 *)(a2 + v934)) >> v933) & 0x7FFFF;
              unint64_t v950 = *a3 + 313;
              unint64_t v951 = v950 & 7;
              unint64_t v952 = v950 >> 3;
              if (v951 > 5)
              {
                int v954 = (*(unsigned __int8 *)(v952 + a2 + 3) << 24) | (*(unsigned __int8 *)(v952 + a2 + 2) << 16);
                int v953 = *(unsigned __int8 *)(v952 + a2 + 1) << 8;
              }
              else
              {
                int v953 = *(unsigned __int8 *)(v952 + a2 + 2) << 16;
                int v954 = *(unsigned __int8 *)(v952 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 88) |= ((v954 | v953 | *(unsigned __int8 *)(a2 + v952)) >> v951) & 0x7FFFF;
              unint64_t v970 = *a3 + 332;
              unint64_t v971 = v970 & 7;
              unint64_t v972 = v970 >> 3;
              if (v971 > 5)
              {
                int v974 = (*(unsigned __int8 *)(v972 + a2 + 3) << 24) | (*(unsigned __int8 *)(v972 + a2 + 2) << 16);
                int v973 = *(unsigned __int8 *)(v972 + a2 + 1) << 8;
              }
              else
              {
                int v973 = *(unsigned __int8 *)(v972 + a2 + 2) << 16;
                int v974 = *(unsigned __int8 *)(v972 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 92) |= ((v974 | v973 | *(unsigned __int8 *)(a2 + v972)) >> v971) & 0x7FFFF;
              unint64_t v987 = *a3 + 351;
              unint64_t v988 = v987 & 7;
              unint64_t v989 = v987 >> 3;
              if (v988 > 5)
              {
                int v991 = (*(unsigned __int8 *)(v989 + a2 + 3) << 24) | (*(unsigned __int8 *)(v989 + a2 + 2) << 16);
                int v990 = *(unsigned __int8 *)(v989 + a2 + 1) << 8;
              }
              else
              {
                int v990 = *(unsigned __int8 *)(v989 + a2 + 2) << 16;
                int v991 = *(unsigned __int8 *)(v989 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 96) |= ((v991 | v990 | *(unsigned __int8 *)(a2 + v989)) >> v988) & 0x7FFFF;
              unint64_t v1003 = *a3 + 370;
              unint64_t v1004 = v1003 & 7;
              unint64_t v1005 = v1003 >> 3;
              if (v1004 > 5)
              {
                int v1007 = (*(unsigned __int8 *)(v1005 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1005 + a2 + 2) << 16);
                int v1006 = *(unsigned __int8 *)(v1005 + a2 + 1) << 8;
              }
              else
              {
                int v1006 = *(unsigned __int8 *)(v1005 + a2 + 2) << 16;
                int v1007 = *(unsigned __int8 *)(v1005 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 100) |= ((v1007 | v1006 | *(unsigned __int8 *)(a2 + v1005)) >> v1004) & 0x7FFFF;
              uint64_t v22 = 389;
              break;
            case 7:
              *(_DWORD *)(result + 16) = 7;
              int v327 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v327;
              unint64_t v328 = *a3 + 9;
              unint64_t v329 = v328 & 7;
              unint64_t v330 = v328 >> 3;
              if (v329 > 1) {
                unsigned int v331 = (*(unsigned __int8 *)(a2 + v330 + 2) << 16) | (*(unsigned __int8 *)(a2 + v330 + 1) << 8) | *(unsigned __int8 *)(a2 + v330);
              }
              else {
                unsigned int v331 = *(unsigned __int16 *)(a2 + v330);
              }
              int v511 = (2 * ((v331 >> v329) & 0x7FFF)) | v327;
              *(_DWORD *)(result + 24) = v511;
              unint64_t v512 = *a3 & 7;
              unint64_t v513 = (unint64_t)(*a3 + 24) >> 3;
              if (v512 > 1) {
                unsigned int v514 = (*(unsigned __int8 *)(a2 + v513 + 2) << 16) | (*(unsigned __int8 *)(a2 + v513 + 1) << 8) | *(unsigned __int8 *)(a2 + v513);
              }
              else {
                unsigned int v514 = *(unsigned __int16 *)(a2 + v513);
              }
              *(_DWORD *)(result + 24) = (((v514 >> v512) & 0x7FFF) << 16) | v511;
              unint64_t v569 = *a3 + 39;
              unint64_t v570 = v569 & 7;
              unint64_t v571 = v569 >> 3;
              if (v570 > 1) {
                unsigned int v572 = (*(unsigned __int8 *)(a2 + v571 + 2) << 16) | (*(unsigned __int8 *)(a2 + v571 + 1) << 8) | *(unsigned __int8 *)(a2 + v571);
              }
              else {
                unsigned int v572 = *(unsigned __int16 *)(a2 + v571);
              }
              *(_WORD *)(result + 28) |= (v572 >> v570) & 0x7FFF;
              unint64_t v616 = *a3 + 54;
              unint64_t v617 = v616 & 7;
              unint64_t v618 = v616 >> 3;
              if (v617 > 1) {
                unsigned int v619 = (*(unsigned __int8 *)(a2 + v618 + 2) << 16) | (*(unsigned __int8 *)(a2 + v618 + 1) << 8) | *(unsigned __int8 *)(a2 + v618);
              }
              else {
                unsigned int v619 = *(unsigned __int16 *)(a2 + v618);
              }
              *(_WORD *)(result + 30) |= (v619 >> v617) & 0x7FFF;
              unint64_t v658 = *a3 + 69;
              unint64_t v659 = v658 & 7;
              unint64_t v660 = v658 >> 3;
              if (v659 > 1) {
                unsigned int v661 = (*(unsigned __int8 *)(a2 + v660 + 2) << 16) | (*(unsigned __int8 *)(a2 + v660 + 1) << 8) | *(unsigned __int8 *)(a2 + v660);
              }
              else {
                unsigned int v661 = *(unsigned __int16 *)(a2 + v660);
              }
              *(_WORD *)(result + 32) |= (v661 >> v659) & 0x7FFF;
              unint64_t v698 = *a3 + 84;
              unint64_t v699 = v698 & 7;
              unint64_t v700 = v698 >> 3;
              if (v699 > 1) {
                unsigned int v701 = (*(unsigned __int8 *)(a2 + v700 + 2) << 16) | (*(unsigned __int8 *)(a2 + v700 + 1) << 8) | *(unsigned __int8 *)(a2 + v700);
              }
              else {
                unsigned int v701 = *(unsigned __int16 *)(a2 + v700);
              }
              *(_WORD *)(result + 34) |= (v701 >> v699) & 0x7FFF;
              unint64_t v736 = *a3 + 99;
              unint64_t v737 = v736 & 7;
              unint64_t v738 = v736 >> 3;
              if (v737 > 1) {
                unsigned int v739 = (*(unsigned __int8 *)(a2 + v738 + 2) << 16) | (*(unsigned __int8 *)(a2 + v738 + 1) << 8) | *(unsigned __int8 *)(a2 + v738);
              }
              else {
                unsigned int v739 = *(unsigned __int16 *)(a2 + v738);
              }
              *(_WORD *)(result + 36) |= (v739 >> v737) & 0x7FFF;
              unint64_t v772 = *a3 + 114;
              unint64_t v773 = v772 & 7;
              unint64_t v774 = v772 >> 3;
              if (v773 > 1) {
                unsigned int v775 = (*(unsigned __int8 *)(a2 + v774 + 2) << 16) | (*(unsigned __int8 *)(a2 + v774 + 1) << 8) | *(unsigned __int8 *)(a2 + v774);
              }
              else {
                unsigned int v775 = *(unsigned __int16 *)(a2 + v774);
              }
              *(_WORD *)(result + 38) |= (v775 >> v773) & 0x7FFF;
              unint64_t v807 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v808 = (unint64_t)(*a3 + 129) >> 3;
              if (v807 > 1) {
                unsigned int v809 = (*(unsigned __int8 *)(a2 + v808 + 2) << 16) | (*(unsigned __int8 *)(a2 + v808 + 1) << 8) | *(unsigned __int8 *)(a2 + v808);
              }
              else {
                unsigned int v809 = *(unsigned __int16 *)(a2 + v808);
              }
              *(_WORD *)(result + 40) |= (v809 >> v807) & 0x7FFF;
              unint64_t v830 = *a3 & 7;
              unint64_t v831 = (unint64_t)(*a3 + 144) >> 3;
              if (v830 > 1) {
                unsigned int v832 = (*(unsigned __int8 *)(a2 + v831 + 2) << 16) | (*(unsigned __int8 *)(a2 + v831 + 1) << 8) | *(unsigned __int8 *)(a2 + v831);
              }
              else {
                unsigned int v832 = *(unsigned __int16 *)(a2 + v831);
              }
              *(_WORD *)(result + 42) |= (v832 >> v830) & 0x7FFF;
              unint64_t v850 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v851 = (unint64_t)(*a3 + 159) >> 3;
              if (v850 > 5)
              {
                int v853 = (*(unsigned __int8 *)(v851 + a2 + 3) << 24) | (*(unsigned __int8 *)(v851 + a2 + 2) << 16);
                int v852 = *(unsigned __int8 *)(v851 + a2 + 1) << 8;
              }
              else
              {
                int v852 = *(unsigned __int8 *)(v851 + a2 + 2) << 16;
                int v853 = *(unsigned __int8 *)(v851 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v853 | v852 | *(unsigned __int8 *)(a2 + v851)) >> v850) & 0x7FFFF;
              unint64_t v867 = (*(unsigned char *)a3 - 78) & 7;
              unint64_t v868 = (unint64_t)(*a3 + 178) >> 3;
              if (v867 > 5)
              {
                int v870 = (*(unsigned __int8 *)(v868 + a2 + 3) << 24) | (*(unsigned __int8 *)(v868 + a2 + 2) << 16);
                int v869 = *(unsigned __int8 *)(v868 + a2 + 1) << 8;
              }
              else
              {
                int v869 = *(unsigned __int8 *)(v868 + a2 + 2) << 16;
                int v870 = *(unsigned __int8 *)(v868 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v870 | v869 | *(unsigned __int8 *)(a2 + v868)) >> v867) & 0x7FFFF;
              unint64_t v884 = (*(unsigned char *)a3 - 59) & 7;
              unint64_t v885 = (unint64_t)(*a3 + 197) >> 3;
              if (v884 > 5)
              {
                int v887 = (*(unsigned __int8 *)(v885 + a2 + 3) << 24) | (*(unsigned __int8 *)(v885 + a2 + 2) << 16);
                int v886 = *(unsigned __int8 *)(v885 + a2 + 1) << 8;
              }
              else
              {
                int v886 = *(unsigned __int8 *)(v885 + a2 + 2) << 16;
                int v887 = *(unsigned __int8 *)(v885 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v887 | v886 | *(unsigned __int8 *)(a2 + v885)) >> v884) & 0x7FFFF;
              unint64_t v901 = *a3 & 7;
              unint64_t v902 = (unint64_t)(*a3 + 216) >> 3;
              if (v901 > 5)
              {
                int v904 = (*(unsigned __int8 *)(v902 + a2 + 3) << 24) | (*(unsigned __int8 *)(v902 + a2 + 2) << 16);
                int v903 = *(unsigned __int8 *)(v902 + a2 + 1) << 8;
              }
              else
              {
                int v903 = *(unsigned __int8 *)(v902 + a2 + 2) << 16;
                int v904 = *(unsigned __int8 *)(v902 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v904 | v903 | *(unsigned __int8 *)(a2 + v902)) >> v901) & 0x7FFFF;
              unint64_t v919 = (*(unsigned char *)a3 - 21) & 7;
              unint64_t v920 = (unint64_t)(*a3 + 235) >> 3;
              if (v919 > 5)
              {
                int v922 = (*(unsigned __int8 *)(v920 + a2 + 3) << 24) | (*(unsigned __int8 *)(v920 + a2 + 2) << 16);
                int v921 = *(unsigned __int8 *)(v920 + a2 + 1) << 8;
              }
              else
              {
                int v921 = *(unsigned __int8 *)(v920 + a2 + 2) << 16;
                int v922 = *(unsigned __int8 *)(v920 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v922 | v921 | *(unsigned __int8 *)(a2 + v920)) >> v919) & 0x7FFFF;
              unint64_t v937 = (*(unsigned char *)a3 - 2) & 7;
              unint64_t v938 = (unint64_t)(*a3 + 254) >> 3;
              if (v937 > 5)
              {
                int v940 = (*(unsigned __int8 *)(v938 + a2 + 3) << 24) | (*(unsigned __int8 *)(v938 + a2 + 2) << 16);
                int v939 = *(unsigned __int8 *)(v938 + a2 + 1) << 8;
              }
              else
              {
                int v939 = *(unsigned __int8 *)(v938 + a2 + 2) << 16;
                int v940 = *(unsigned __int8 *)(v938 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v940 | v939 | *(unsigned __int8 *)(a2 + v938)) >> v937) & 0x7FFFF;
              unint64_t v955 = *a3 + 273;
              unint64_t v956 = v955 & 7;
              unint64_t v957 = v955 >> 3;
              if (v956 > 5)
              {
                int v959 = (*(unsigned __int8 *)(v957 + a2 + 3) << 24) | (*(unsigned __int8 *)(v957 + a2 + 2) << 16);
                int v958 = *(unsigned __int8 *)(v957 + a2 + 1) << 8;
              }
              else
              {
                int v958 = *(unsigned __int8 *)(v957 + a2 + 2) << 16;
                int v959 = *(unsigned __int8 *)(v957 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v959 | v958 | *(unsigned __int8 *)(a2 + v957)) >> v956) & 0x7FFFF;
              unint64_t v975 = *a3 + 292;
              unint64_t v976 = v975 & 7;
              unint64_t v977 = v975 >> 3;
              if (v976 > 5)
              {
                int v979 = (*(unsigned __int8 *)(v977 + a2 + 3) << 24) | (*(unsigned __int8 *)(v977 + a2 + 2) << 16);
                int v978 = *(unsigned __int8 *)(v977 + a2 + 1) << 8;
              }
              else
              {
                int v978 = *(unsigned __int8 *)(v977 + a2 + 2) << 16;
                int v979 = *(unsigned __int8 *)(v977 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v979 | v978 | *(unsigned __int8 *)(a2 + v977)) >> v976) & 0x7FFFF;
              unint64_t v992 = *a3 + 311;
              unint64_t v993 = v992 & 7;
              unint64_t v994 = v992 >> 3;
              if (v993 > 5)
              {
                int v996 = (*(unsigned __int8 *)(v994 + a2 + 3) << 24) | (*(unsigned __int8 *)(v994 + a2 + 2) << 16);
                int v995 = *(unsigned __int8 *)(v994 + a2 + 1) << 8;
              }
              else
              {
                int v995 = *(unsigned __int8 *)(v994 + a2 + 2) << 16;
                int v996 = *(unsigned __int8 *)(v994 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v996 | v995 | *(unsigned __int8 *)(a2 + v994)) >> v993) & 0x7FFFF;
              uint64_t v22 = 330;
              break;
            case 8:
              *(_DWORD *)(result + 16) = 8;
              unint64_t v332 = (unint64_t)(*a3 + 8) >> 3;
              uint64_t v333 = *a3 & 7;
              if (v333) {
                unsigned int v334 = ((*(unsigned __int8 *)(a2 + v332 + 2) << 16) | (*(unsigned __int8 *)(a2 + v332 + 1) << 8) | *(unsigned __int8 *)(a2 + v332)) >> v333;
              }
              else {
                LOWORD(v334) = *(_WORD *)(a2 + v332);
              }
              uint64_t v1108 = *(void *)(result + 24) | (unsigned __int16)v334;
              *(void *)(result + 24) = v1108;
              unint64_t v1109 = (unint64_t)(*a3 + 24) >> 3;
              uint64_t v1110 = *a3 & 7;
              if (v1110) {
                unsigned int v1111 = ((*(unsigned __int8 *)(a2 + v1109 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1109 + 1) << 8) | *(unsigned __int8 *)(a2 + v1109)) >> v1110;
              }
              else {
                unsigned int v1111 = *(unsigned __int16 *)(a2 + v1109);
              }
              uint64_t v1163 = v1108 | (v1111 << 16);
              *(void *)(result + 24) = v1163;
              *(void *)(result + 24) = v1163 | ((unint64_t)((((*(unsigned __int8 *)(a2
                                                                                           + ((unint64_t)(*a3 + 40) >> 3)
                                                                                           + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3))) >> (*a3 & 7)) & 0x1FFFF) << 32);
              unsigned int v1164 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3))) >> ((*(unsigned char *)a3 + 57) & 7)) & 0x1FFFF | *(_DWORD *)(result + 32);
              *(_DWORD *)(result + 32) = v1164;
              unint64_t v1165 = *a3 + 74;
              unint64_t v1166 = v1165 & 7;
              unint64_t v1167 = v1165 >> 3;
              if (v1166 > 1) {
                unsigned int v1168 = (*(unsigned __int8 *)(a2 + v1167 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1167 + 1) << 8) | *(unsigned __int8 *)(a2 + v1167);
              }
              else {
                unsigned int v1168 = *(unsigned __int16 *)(a2 + v1167);
              }
              *(_DWORD *)(result + 32) = v1164 | (v1168 >> v1166 << 17);
              uint64_t v22 = 89;
              break;
            case 9:
              *(_DWORD *)(result + 16) = 9;
              int v335 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(unsigned __int16 *)(result + 24);
              *(_WORD *)(result + 24) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1;
              unint64_t v336 = *a3 + 9;
              unint64_t v337 = v336 & 7;
              unint64_t v338 = v336 >> 3;
              if (v337 > 3) {
                unsigned int v339 = (*(unsigned __int8 *)(a2 + v338 + 2) << 16) | (*(unsigned __int8 *)(a2 + v338 + 1) << 8) | *(unsigned __int8 *)(a2 + v338);
              }
              else {
                unsigned int v339 = *(unsigned __int16 *)(a2 + v338);
              }
              *(_WORD *)(result + 24) = (2 * ((v339 >> v337) & 0x1FFF)) | v335;
              unint64_t v515 = *a3 + 22;
              unint64_t v516 = v515 & 7;
              unint64_t v517 = v515 >> 3;
              if (v516 > 3) {
                unsigned int v518 = (*(unsigned __int8 *)(a2 + v517 + 2) << 16) | (*(unsigned __int8 *)(a2 + v517 + 1) << 8) | *(unsigned __int8 *)(a2 + v517);
              }
              else {
                unsigned int v518 = *(unsigned __int16 *)(a2 + v517);
              }
              *(_WORD *)(result + 26) |= (v518 >> v516) & 0x1FFF;
              unint64_t v573 = *a3 + 35;
              unint64_t v574 = v573 & 7;
              unint64_t v575 = v573 >> 3;
              if (v574 > 3) {
                unsigned int v576 = (*(unsigned __int8 *)(a2 + v575 + 2) << 16) | (*(unsigned __int8 *)(a2 + v575 + 1) << 8) | *(unsigned __int8 *)(a2 + v575);
              }
              else {
                unsigned int v576 = *(unsigned __int16 *)(a2 + v575);
              }
              *(_WORD *)(result + 28) |= (v576 >> v574) & 0x1FFF;
              unint64_t v620 = *a3 & 7;
              unint64_t v621 = (unint64_t)(*a3 + 48) >> 3;
              if (v620 > 3) {
                unsigned int v622 = (*(unsigned __int8 *)(a2 + v621 + 2) << 16) | (*(unsigned __int8 *)(a2 + v621 + 1) << 8) | *(unsigned __int8 *)(a2 + v621);
              }
              else {
                unsigned int v622 = *(unsigned __int16 *)(a2 + v621);
              }
              *(_WORD *)(result + 30) |= (v622 >> v620) & 0x1FFF;
              unint64_t v662 = *a3 + 61;
              unint64_t v663 = v662 & 7;
              unint64_t v664 = v662 >> 3;
              if (v663 > 3) {
                unsigned int v665 = (*(unsigned __int8 *)(a2 + v664 + 2) << 16) | (*(unsigned __int8 *)(a2 + v664 + 1) << 8) | *(unsigned __int8 *)(a2 + v664);
              }
              else {
                unsigned int v665 = *(unsigned __int16 *)(a2 + v664);
              }
              *(_WORD *)(result + 32) |= (v665 >> v663) & 0x1FFF;
              unint64_t v702 = *a3 + 74;
              unint64_t v703 = v702 & 7;
              unint64_t v704 = v702 >> 3;
              if (v703 > 3) {
                unsigned int v705 = (*(unsigned __int8 *)(a2 + v704 + 2) << 16) | (*(unsigned __int8 *)(a2 + v704 + 1) << 8) | *(unsigned __int8 *)(a2 + v704);
              }
              else {
                unsigned int v705 = *(unsigned __int16 *)(a2 + v704);
              }
              *(_WORD *)(result + 34) |= (v705 >> v703) & 0x1FFF;
              unint64_t v740 = *a3 + 87;
              unint64_t v741 = v740 & 7;
              unint64_t v742 = v740 >> 3;
              if (v741 > 3) {
                unsigned int v743 = (*(unsigned __int8 *)(a2 + v742 + 2) << 16) | (*(unsigned __int8 *)(a2 + v742 + 1) << 8) | *(unsigned __int8 *)(a2 + v742);
              }
              else {
                unsigned int v743 = *(unsigned __int16 *)(a2 + v742);
              }
              *(_WORD *)(result + 36) |= (v743 >> v741) & 0x1FFF;
              unint64_t v776 = *a3 + 100;
              unint64_t v777 = v776 & 7;
              unint64_t v778 = v776 >> 3;
              if (v777 > 3) {
                unsigned int v779 = (*(unsigned __int8 *)(a2 + v778 + 2) << 16) | (*(unsigned __int8 *)(a2 + v778 + 1) << 8) | *(unsigned __int8 *)(a2 + v778);
              }
              else {
                unsigned int v779 = *(unsigned __int16 *)(a2 + v778);
              }
              *(_WORD *)(result + 38) |= (v779 >> v777) & 0x1FFF;
              unint64_t v810 = *a3 + 113;
              unint64_t v811 = v810 & 7;
              unint64_t v812 = v810 >> 3;
              if (v811 > 3) {
                unsigned int v813 = (*(unsigned __int8 *)(a2 + v812 + 2) << 16) | (*(unsigned __int8 *)(a2 + v812 + 1) << 8) | *(unsigned __int8 *)(a2 + v812);
              }
              else {
                unsigned int v813 = *(unsigned __int16 *)(a2 + v812);
              }
              *(_WORD *)(result + 40) |= (v813 >> v811) & 0x1FFF;
              unint64_t v833 = *a3 + 126;
              unint64_t v834 = v833 & 7;
              unint64_t v835 = v833 >> 3;
              if (v834 > 3) {
                unsigned int v836 = (*(unsigned __int8 *)(a2 + v835 + 2) << 16) | (*(unsigned __int8 *)(a2 + v835 + 1) << 8) | *(unsigned __int8 *)(a2 + v835);
              }
              else {
                unsigned int v836 = *(unsigned __int16 *)(a2 + v835);
              }
              *(_WORD *)(result + 42) |= (v836 >> v834) & 0x1FFF;
              unint64_t v854 = (*(unsigned char *)a3 - 117) & 7;
              unint64_t v855 = (unint64_t)(*a3 + 139) >> 3;
              if (v854 > 3) {
                unsigned int v856 = (*(unsigned __int8 *)(a2 + v855 + 2) << 16) | (*(unsigned __int8 *)(a2 + v855 + 1) << 8) | *(unsigned __int8 *)(a2 + v855);
              }
              else {
                unsigned int v856 = *(unsigned __int16 *)(a2 + v855);
              }
              *(_WORD *)(result + 44) |= (v856 >> v854) & 0x1FFF;
              unint64_t v871 = *a3 & 7;
              unint64_t v872 = (unint64_t)(*a3 + 152) >> 3;
              if (v871 > 3) {
                unsigned int v873 = (*(unsigned __int8 *)(a2 + v872 + 2) << 16) | (*(unsigned __int8 *)(a2 + v872 + 1) << 8) | *(unsigned __int8 *)(a2 + v872);
              }
              else {
                unsigned int v873 = *(unsigned __int16 *)(a2 + v872);
              }
              *(_WORD *)(result + 46) |= (v873 >> v871) & 0x1FFF;
              unint64_t v888 = (*(unsigned char *)a3 - 91) & 7;
              unint64_t v889 = (unint64_t)(*a3 + 165) >> 3;
              if (v888 > 3) {
                unsigned int v890 = (*(unsigned __int8 *)(a2 + v889 + 2) << 16) | (*(unsigned __int8 *)(a2 + v889 + 1) << 8) | *(unsigned __int8 *)(a2 + v889);
              }
              else {
                unsigned int v890 = *(unsigned __int16 *)(a2 + v889);
              }
              *(_WORD *)(result + 48) |= (v890 >> v888) & 0x1FFF;
              unint64_t v905 = (*(unsigned char *)a3 - 78) & 7;
              unint64_t v906 = (unint64_t)(*a3 + 178) >> 3;
              if (v905 > 3) {
                unsigned int v907 = (*(unsigned __int8 *)(a2 + v906 + 2) << 16) | (*(unsigned __int8 *)(a2 + v906 + 1) << 8) | *(unsigned __int8 *)(a2 + v906);
              }
              else {
                unsigned int v907 = *(unsigned __int16 *)(a2 + v906);
              }
              *(_WORD *)(result + 50) |= (v907 >> v905) & 0x1FFF;
              unint64_t v923 = (*(unsigned char *)a3 - 65) & 7;
              unint64_t v924 = (unint64_t)(*a3 + 191) >> 3;
              if (v923 > 3) {
                unsigned int v925 = (*(unsigned __int8 *)(a2 + v924 + 2) << 16) | (*(unsigned __int8 *)(a2 + v924 + 1) << 8) | *(unsigned __int8 *)(a2 + v924);
              }
              else {
                unsigned int v925 = *(unsigned __int16 *)(a2 + v924);
              }
              *(_WORD *)(result + 52) |= (v925 >> v923) & 0x1FFF;
              unint64_t v941 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v942 = (unint64_t)(*a3 + 204) >> 3;
              if (v941 > 3) {
                unsigned int v943 = (*(unsigned __int8 *)(a2 + v942 + 2) << 16) | (*(unsigned __int8 *)(a2 + v942 + 1) << 8) | *(unsigned __int8 *)(a2 + v942);
              }
              else {
                unsigned int v943 = *(unsigned __int16 *)(a2 + v942);
              }
              *(_WORD *)(result + 54) |= (v943 >> v941) & 0x1FFF;
              unint64_t v960 = (*(unsigned char *)a3 - 39) & 7;
              unint64_t v961 = (unint64_t)(*a3 + 217) >> 3;
              if (v960 > 3) {
                unsigned int v962 = (*(unsigned __int8 *)(a2 + v961 + 2) << 16) | (*(unsigned __int8 *)(a2 + v961 + 1) << 8) | *(unsigned __int8 *)(a2 + v961);
              }
              else {
                unsigned int v962 = *(unsigned __int16 *)(a2 + v961);
              }
              *(_WORD *)(result + 56) |= (v962 >> v960) & 0x1FFF;
              unint64_t v980 = (*(unsigned char *)a3 - 26) & 7;
              unint64_t v981 = (unint64_t)(*a3 + 230) >> 3;
              if (v980 > 3) {
                unsigned int v982 = (*(unsigned __int8 *)(a2 + v981 + 2) << 16) | (*(unsigned __int8 *)(a2 + v981 + 1) << 8) | *(unsigned __int8 *)(a2 + v981);
              }
              else {
                unsigned int v982 = *(unsigned __int16 *)(a2 + v981);
              }
              *(_WORD *)(result + 58) |= (v982 >> v980) & 0x1FFF;
              unint64_t v997 = (*(unsigned char *)a3 - 13) & 7;
              unint64_t v998 = (unint64_t)(*a3 + 243) >> 3;
              if (v997 > 3) {
                unsigned int v999 = (*(unsigned __int8 *)(a2 + v998 + 2) << 16) | (*(unsigned __int8 *)(a2 + v998 + 1) << 8) | *(unsigned __int8 *)(a2 + v998);
              }
              else {
                unsigned int v999 = *(unsigned __int16 *)(a2 + v998);
              }
              *(_WORD *)(result + 60) |= (v999 >> v997) & 0x1FFF;
              unint64_t v1008 = *a3 & 7;
              unint64_t v1009 = (unint64_t)(*a3 + 256) >> 3;
              if (v1008 > 3) {
                unsigned int v1010 = (*(unsigned __int8 *)(a2 + v1009 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1009 + 1) << 8) | *(unsigned __int8 *)(a2 + v1009);
              }
              else {
                unsigned int v1010 = *(unsigned __int16 *)(a2 + v1009);
              }
              *(_WORD *)(result + 62) |= (v1010 >> v1008) & 0x1FFF;
              unint64_t v1015 = *a3 + 269;
              unint64_t v1016 = v1015 & 7;
              unint64_t v1017 = v1015 >> 3;
              if (v1016 > 3) {
                unsigned int v1018 = (*(unsigned __int8 *)(a2 + v1017 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1017 + 1) << 8) | *(unsigned __int8 *)(a2 + v1017);
              }
              else {
                unsigned int v1018 = *(unsigned __int16 *)(a2 + v1017);
              }
              *(_WORD *)(result + 64) |= (v1018 >> v1016) & 0x1FFF;
              unint64_t v1023 = *a3 + 282;
              unint64_t v1024 = v1023 & 7;
              unint64_t v1025 = v1023 >> 3;
              if (v1024 > 3) {
                unsigned int v1026 = (*(unsigned __int8 *)(a2 + v1025 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1025 + 1) << 8) | *(unsigned __int8 *)(a2 + v1025);
              }
              else {
                unsigned int v1026 = *(unsigned __int16 *)(a2 + v1025);
              }
              *(_WORD *)(result + 66) |= (v1026 >> v1024) & 0x1FFF;
              unint64_t v1031 = *a3 + 295;
              unint64_t v1032 = v1031 & 7;
              unint64_t v1033 = v1031 >> 3;
              if (v1032 > 3) {
                unsigned int v1034 = (*(unsigned __int8 *)(a2 + v1033 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1033 + 1) << 8) | *(unsigned __int8 *)(a2 + v1033);
              }
              else {
                unsigned int v1034 = *(unsigned __int16 *)(a2 + v1033);
              }
              *(_WORD *)(result + 68) |= (v1034 >> v1032) & 0x1FFF;
              unint64_t v1039 = *a3 + 308;
              unint64_t v1040 = v1039 & 7;
              unint64_t v1041 = v1039 >> 3;
              if (v1040 > 3) {
                unsigned int v1042 = (*(unsigned __int8 *)(a2 + v1041 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1041 + 1) << 8) | *(unsigned __int8 *)(a2 + v1041);
              }
              else {
                unsigned int v1042 = *(unsigned __int16 *)(a2 + v1041);
              }
              *(_WORD *)(result + 70) |= (v1042 >> v1040) & 0x1FFF;
              unint64_t v1047 = *a3 + 321;
              unint64_t v1048 = v1047 & 7;
              unint64_t v1049 = v1047 >> 3;
              if (v1048 > 3) {
                unsigned int v1050 = (*(unsigned __int8 *)(a2 + v1049 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1049 + 1) << 8) | *(unsigned __int8 *)(a2 + v1049);
              }
              else {
                unsigned int v1050 = *(unsigned __int16 *)(a2 + v1049);
              }
              *(_WORD *)(result + 72) |= (v1050 >> v1048) & 0x1FFF;
              unint64_t v1055 = *a3 + 334;
              unint64_t v1056 = v1055 & 7;
              unint64_t v1057 = v1055 >> 3;
              if (v1056 > 3) {
                unsigned int v1058 = (*(unsigned __int8 *)(a2 + v1057 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1057 + 1) << 8) | *(unsigned __int8 *)(a2 + v1057);
              }
              else {
                unsigned int v1058 = *(unsigned __int16 *)(a2 + v1057);
              }
              *(_WORD *)(result + 74) |= (v1058 >> v1056) & 0x1FFF;
              unint64_t v1062 = *a3 + 347;
              unint64_t v1063 = v1062 & 7;
              unint64_t v1064 = v1062 >> 3;
              if (v1063 > 3) {
                unsigned int v1065 = (*(unsigned __int8 *)(a2 + v1064 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1064 + 1) << 8) | *(unsigned __int8 *)(a2 + v1064);
              }
              else {
                unsigned int v1065 = *(unsigned __int16 *)(a2 + v1064);
              }
              *(_WORD *)(result + 76) |= (v1065 >> v1063) & 0x1FFF;
              unint64_t v1069 = *a3 & 7;
              unint64_t v1070 = (unint64_t)(*a3 + 360) >> 3;
              if (v1069 > 3) {
                unsigned int v1071 = (*(unsigned __int8 *)(a2 + v1070 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1070 + 1) << 8) | *(unsigned __int8 *)(a2 + v1070);
              }
              else {
                unsigned int v1071 = *(unsigned __int16 *)(a2 + v1070);
              }
              *(_WORD *)(result + 78) |= (v1071 >> v1069) & 0x1FFF;
              unint64_t v1075 = *a3 + 373;
              unint64_t v1076 = v1075 & 7;
              unint64_t v1077 = v1075 >> 3;
              if (v1076 > 3) {
                unsigned int v1078 = (*(unsigned __int8 *)(a2 + v1077 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1077 + 1) << 8) | *(unsigned __int8 *)(a2 + v1077);
              }
              else {
                unsigned int v1078 = *(unsigned __int16 *)(a2 + v1077);
              }
              *(_WORD *)(result + 80) |= (v1078 >> v1076) & 0x1FFF;
              unint64_t v1082 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v1083 = (unint64_t)(*a3 + 386) >> 3;
              if (v1082 > 3) {
                unsigned int v1084 = (*(unsigned __int8 *)(a2 + v1083 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1083 + 1) << 8) | *(unsigned __int8 *)(a2 + v1083);
              }
              else {
                unsigned int v1084 = *(unsigned __int16 *)(a2 + v1083);
              }
              *(_WORD *)(result + 82) |= (v1084 >> v1082) & 0x1FFF;
              unint64_t v1088 = (*(unsigned char *)a3 - 113) & 7;
              unint64_t v1089 = (unint64_t)(*a3 + 399) >> 3;
              if (v1088 > 3) {
                unsigned int v1090 = (*(unsigned __int8 *)(a2 + v1089 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1089 + 1) << 8) | *(unsigned __int8 *)(a2 + v1089);
              }
              else {
                unsigned int v1090 = *(unsigned __int16 *)(a2 + v1089);
              }
              *(_WORD *)(result + 84) |= (v1090 >> v1088) & 0x1FFF;
              unint64_t v1094 = (*(unsigned char *)a3 - 100) & 7;
              unint64_t v1095 = (unint64_t)(*a3 + 412) >> 3;
              if (v1094 > 3) {
                unsigned int v1096 = (*(unsigned __int8 *)(a2 + v1095 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1095 + 1) << 8) | *(unsigned __int8 *)(a2 + v1095);
              }
              else {
                unsigned int v1096 = *(unsigned __int16 *)(a2 + v1095);
              }
              *(_WORD *)(result + 86) |= (v1096 >> v1094) & 0x1FFF;
              uint64_t v22 = 425;
              break;
            case 0xA:
              *(_DWORD *)(result + 16) = 10;
              unint64_t v340 = (unint64_t)(*a3 + 8) >> 3;
              uint64_t v341 = *a3 & 7;
              if (v341)
              {
                v342 = (unsigned __int8 *)(a2 + v340);
                unint64_t v343 = (((unint64_t)v342[4] << 32) | ((unint64_t)v342[3] << 24) | ((unint64_t)v342[2] << 16) | ((unint64_t)v342[1] << 8) | *v342) >> v341;
              }
              else
              {
                LODWORD(v343) = *(_DWORD *)(a2 + v340);
              }
              *(_DWORD *)(result + 24) |= v343;
              v1112 = (unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3));
              unint64_t v1113 = ((((unint64_t)v1112[4] << 32) | ((unint64_t)v1112[3] << 24) | ((unint64_t)v1112[2] << 16) | ((unint64_t)v1112[1] << 8) | *v1112) >> (*a3 & 7)) & 0x1FFFFFFFFLL | *(void *)(result + 32);
              *(void *)(result + 32) = v1113;
              unint64_t v1114 = *a3 + 73;
              unint64_t v1115 = v1114 & 7;
              unint64_t v1116 = v1114 >> 3;
              if (v1115 > 1) {
                unsigned int v1117 = (*(unsigned __int8 *)(a2 + v1116 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1116 + 1) << 8) | *(unsigned __int8 *)(a2 + v1116);
              }
              else {
                unsigned int v1117 = *(unsigned __int16 *)(a2 + v1116);
              }
              unint64_t v1118 = v1113 | ((unint64_t)((v1117 >> v1115) & 0x7FFF) << 33);
              *(void *)(result + 32) = v1118;
              unint64_t v1119 = *a3 & 7;
              unint64_t v1120 = (unint64_t)(*a3 + 88) >> 3;
              if (v1119 > 1) {
                unsigned int v1121 = (*(unsigned __int8 *)(a2 + v1120 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1120 + 1) << 8) | *(unsigned __int8 *)(a2 + v1120);
              }
              else {
                unsigned int v1121 = *(unsigned __int16 *)(a2 + v1120);
              }
              *(void *)(result + 32) = v1118 | ((unint64_t)((v1121 >> v1119) & 0x7FFF) << 48);
              unint64_t v1122 = *a3 + 103;
              unint64_t v1123 = v1122 & 7;
              unint64_t v1124 = v1122 >> 3;
              if (v1123 > 1) {
                unsigned int v1125 = (*(unsigned __int8 *)(a2 + v1124 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1124 + 1) << 8) | *(unsigned __int8 *)(a2 + v1124);
              }
              else {
                unsigned int v1125 = *(unsigned __int16 *)(a2 + v1124);
              }
              *(_WORD *)(result + 40) |= (v1125 >> v1123) & 0x7FFF;
              unint64_t v1126 = *a3 + 118;
              unint64_t v1127 = v1126 & 7;
              unint64_t v1128 = v1126 >> 3;
              if (v1127 > 1) {
                unsigned int v1129 = (*(unsigned __int8 *)(a2 + v1128 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1128 + 1) << 8) | *(unsigned __int8 *)(a2 + v1128);
              }
              else {
                unsigned int v1129 = *(unsigned __int16 *)(a2 + v1128);
              }
              *(_WORD *)(result + 42) |= (v1129 >> v1127) & 0x7FFF;
              unint64_t v1130 = (*(unsigned char *)a3 - 123) & 7;
              unint64_t v1131 = (unint64_t)(*a3 + 133) >> 3;
              if (v1130 > 1) {
                unsigned int v1132 = (*(unsigned __int8 *)(a2 + v1131 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1131 + 1) << 8) | *(unsigned __int8 *)(a2 + v1131);
              }
              else {
                unsigned int v1132 = *(unsigned __int16 *)(a2 + v1131);
              }
              *(_WORD *)(result + 44) |= (v1132 >> v1130) & 0x7FFF;
              uint64_t v22 = 148;
              break;
            case 0xB:
              *(_DWORD *)(result + 16) = 11;
              unint64_t v344 = *a3 & 7;
              unint64_t v345 = (unint64_t)(*a3 + 8) >> 3;
              if (v344 > 1) {
                unsigned int v346 = (*(unsigned __int8 *)(a2 + v345 + 2) << 16) | (*(unsigned __int8 *)(a2 + v345 + 1) << 8) | *(unsigned __int8 *)(a2 + v345);
              }
              else {
                unsigned int v346 = *(unsigned __int16 *)(a2 + v345);
              }
              *(_WORD *)(result + 24) |= (v346 >> v344) & 0x7FFF;
              unint64_t v519 = *a3 + 23;
              unint64_t v520 = v519 & 7;
              unint64_t v521 = v519 >> 3;
              if (v520 > 1) {
                unsigned int v522 = (*(unsigned __int8 *)(a2 + v521 + 2) << 16) | (*(unsigned __int8 *)(a2 + v521 + 1) << 8) | *(unsigned __int8 *)(a2 + v521);
              }
              else {
                unsigned int v522 = *(unsigned __int16 *)(a2 + v521);
              }
              *(_WORD *)(result + 26) |= (v522 >> v520) & 0x7FFF;
              uint64_t v22 = 38;
              break;
            case 0xC:
              *(_DWORD *)(result + 16) = 12;
              unint64_t v347 = *a3 & 7;
              unint64_t v348 = (unint64_t)(*a3 + 8) >> 3;
              if (v347 > 1) {
                unsigned int v349 = (*(unsigned __int8 *)(a2 + v348 + 2) << 16) | (*(unsigned __int8 *)(a2 + v348 + 1) << 8) | *(unsigned __int8 *)(a2 + v348);
              }
              else {
                unsigned int v349 = *(unsigned __int16 *)(a2 + v348);
              }
              *(_WORD *)(result + 24) |= (v349 >> v347) & 0x7FFF;
              unint64_t v523 = *a3 + 23;
              unint64_t v524 = v523 & 7;
              unint64_t v525 = v523 >> 3;
              if (v524 > 1) {
                unsigned int v526 = (*(unsigned __int8 *)(a2 + v525 + 2) << 16) | (*(unsigned __int8 *)(a2 + v525 + 1) << 8) | *(unsigned __int8 *)(a2 + v525);
              }
              else {
                unsigned int v526 = *(unsigned __int16 *)(a2 + v525);
              }
              *(_WORD *)(result + 26) |= (v526 >> v524) & 0x7FFF;
              unint64_t v577 = *a3 + 38;
              unint64_t v578 = v577 >> 3;
              unint64_t v579 = v577 & 7;
              if (v579) {
                unsigned int v580 = ((*(unsigned __int8 *)(a2 + v578 + 2) << 16) | (*(unsigned __int8 *)(a2 + v578 + 1) << 8) | *(unsigned __int8 *)(a2 + v578)) >> v579;
              }
              else {
                LOWORD(v580) = *(_WORD *)(a2 + v578);
              }
              *(_WORD *)(result + 28) |= v580;
              unint64_t v1133 = *a3 + 54;
              unint64_t v1134 = v1133 & 7;
              unint64_t v1135 = v1133 >> 3;
              if (v1134 == 7) {
                int v1136 = *(_DWORD *)(a2 + v1135) >> 7;
              }
              else {
                int v1136 = ((*(unsigned __int8 *)(a2 + v1135 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1135 + 1) << 8) | *(unsigned __int8 *)(a2 + v1135)) >> v1134;
              }
              *(_DWORD *)(result + 32) |= v1136 & 0x3FFFF;
              uint64_t v1137 = *a3 & 7;
              unint64_t v1138 = (unint64_t)(*a3 + 72) >> 3;
              if (v1137 == 7) {
                int v1139 = *(_DWORD *)(a2 + v1138) >> 7;
              }
              else {
                int v1139 = ((*(unsigned __int8 *)(a2 + v1138 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1138 + 1) << 8) | *(unsigned __int8 *)(a2 + v1138)) >> v1137;
              }
              int v1140 = *(_DWORD *)(result + 40);
              *(_DWORD *)(result + 36) |= v1139 & 0x3FFFF;
              *(_DWORD *)(result + 40) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3))) >> ((*(unsigned char *)a3 + 90) & 7)) & 0x1FFFF | v1140;
              unint64_t v1141 = *a3 + 107;
              unint64_t v1142 = v1141 >> 3;
              unint64_t v1143 = v1141 & 7;
              if (v1143) {
                unsigned int v1144 = ((*(unsigned __int8 *)(a2 + v1142 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1142 + 1) << 8) | *(unsigned __int8 *)(a2 + v1142)) >> v1143;
              }
              else {
                LOWORD(v1144) = *(_WORD *)(a2 + v1142);
              }
              uint64_t v1169 = *(void *)(result + 44) | (unsigned __int16)v1144;
              *(void *)(result + 44) = v1169;
              unint64_t v1170 = *a3 + 123;
              unint64_t v1171 = v1170 >> 3;
              unint64_t v1172 = v1170 & 7;
              if (v1172) {
                unsigned int v1173 = ((*(unsigned __int8 *)(a2 + v1171 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1171 + 1) << 8) | *(unsigned __int8 *)(a2 + v1171)) >> v1172;
              }
              else {
                unsigned int v1173 = *(unsigned __int16 *)(a2 + v1171);
              }
              uint64_t v1182 = v1169 | (v1173 << 16);
              *(void *)(result + 44) = v1182;
              *(void *)(result + 44) = v1182 | ((unint64_t)((((*(unsigned __int8 *)(a2
                                                                                           + ((unint64_t)(*a3 + 139) >> 3)
                                                                                           + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 139) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 139) >> 3))) >> ((*(unsigned char *)a3 - 117) & 7)) & 0x1FFFF) << 32);
              *(_DWORD *)(result + 52) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 156) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 156) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 156) >> 3))) >> ((*(unsigned char *)a3 - 100) & 7)) & 0x1FFFF;
              uint64_t v22 = 173;
              break;
            case 0xD:
              *(_DWORD *)(result + 16) = 13;
              unint64_t v350 = *a3 & 7;
              unint64_t v351 = (unint64_t)(*a3 + 8) >> 3;
              if (v350 > 1) {
                unsigned int v352 = (*(unsigned __int8 *)(a2 + v351 + 2) << 16) | (*(unsigned __int8 *)(a2 + v351 + 1) << 8) | *(unsigned __int8 *)(a2 + v351);
              }
              else {
                unsigned int v352 = *(unsigned __int16 *)(a2 + v351);
              }
              *(_WORD *)(result + 24) |= (v352 >> v350) & 0x7FFF;
              unint64_t v527 = *a3 + 23;
              unint64_t v528 = v527 & 7;
              unint64_t v529 = v527 >> 3;
              if (v528 > 1) {
                unsigned int v530 = (*(unsigned __int8 *)(a2 + v529 + 2) << 16) | (*(unsigned __int8 *)(a2 + v529 + 1) << 8) | *(unsigned __int8 *)(a2 + v529);
              }
              else {
                unsigned int v530 = *(unsigned __int16 *)(a2 + v529);
              }
              *(_WORD *)(result + 26) |= (v530 >> v528) & 0x7FFF;
              unint64_t v581 = *a3 + 38;
              unint64_t v582 = v581 & 7;
              unint64_t v583 = v581 >> 3;
              if (v582 > 1) {
                unsigned int v584 = (*(unsigned __int8 *)(a2 + v583 + 2) << 16) | (*(unsigned __int8 *)(a2 + v583 + 1) << 8) | *(unsigned __int8 *)(a2 + v583);
              }
              else {
                unsigned int v584 = *(unsigned __int16 *)(a2 + v583);
              }
              *(_WORD *)(result + 28) |= (v584 >> v582) & 0x7FFF;
              unint64_t v623 = *a3 + 53;
              unint64_t v624 = v623 & 7;
              unint64_t v625 = v623 >> 3;
              if (v624 > 1) {
                unsigned int v626 = (*(unsigned __int8 *)(a2 + v625 + 2) << 16) | (*(unsigned __int8 *)(a2 + v625 + 1) << 8) | *(unsigned __int8 *)(a2 + v625);
              }
              else {
                unsigned int v626 = *(unsigned __int16 *)(a2 + v625);
              }
              uint64_t v666 = *(unsigned int *)(result + 40);
              *(_WORD *)(result + 30) |= (v626 >> v624) & 0x7FFF;
              int v667 = *(_DWORD *)(result + 36);
              *(_DWORD *)(result + 32) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3))) >> ((*(unsigned char *)a3 + 68) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 36) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3))) >> ((*(unsigned char *)a3 + 85) & 7)) & 0x1FFFF | v667;
              unint64_t v668 = v666 | ((unint64_t)*(unsigned __int16 *)(result + 44) << 32);
              unsigned int v669 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3))) >> ((*(unsigned char *)a3 + 102) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 40) = v666 | v669;
              unint64_t v670 = *a3 + 119;
              unint64_t v671 = v670 & 7;
              unint64_t v672 = v670 >> 3;
              if (v671 > 1) {
                unsigned int v673 = (*(unsigned __int8 *)(a2 + v672 + 2) << 16) | (*(unsigned __int8 *)(a2 + v672 + 1) << 8) | *(unsigned __int8 *)(a2 + v672);
              }
              else {
                unsigned int v673 = *(unsigned __int16 *)(a2 + v672);
              }
              uint64_t v706 = v669 | (v673 >> v671 << 17);
              *(_WORD *)(result + 44) = WORD2(v668);
              *(_DWORD *)(result + 40) = v668 | v706;
              unint64_t v707 = (*(unsigned char *)a3 - 122) & 7;
              unint64_t v708 = (unint64_t)(*a3 + 134) >> 3;
              if (v707 > 2) {
                unsigned int v709 = (*(unsigned __int8 *)(a2 + v708 + 2) << 16) | (*(unsigned __int8 *)(a2 + v708 + 1) << 8) | *(unsigned __int8 *)(a2 + v708);
              }
              else {
                unsigned int v709 = *(unsigned __int16 *)(a2 + v708);
              }
              unint64_t v744 = v706 | ((unint64_t)((v709 >> v707) & 0x3FFF) << 32) | v668;
              *(_DWORD *)(result + 40) = v744;
              *(_WORD *)(result + 44) = WORD2(v744);
              unint64_t v745 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v746 = (unint64_t)(*a3 + 148) >> 3;
              if (v745 > 2) {
                unsigned int v747 = (*(unsigned __int8 *)(a2 + v746 + 2) << 16) | (*(unsigned __int8 *)(a2 + v746 + 1) << 8) | *(unsigned __int8 *)(a2 + v746);
              }
              else {
                unsigned int v747 = *(unsigned __int16 *)(a2 + v746);
              }
              *(_WORD *)(result + 46) |= (v747 >> v745) & 0x3FFF;
              int v780 = *(_DWORD *)(result + 52);
              *(_DWORD *)(result + 48) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3))) >> ((*(unsigned char *)a3 - 94) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 52) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3))) >> ((*(unsigned char *)a3 - 77) & 7)) & 0x1FFFF | v780;
              *(_DWORD *)(result + 56) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3))) >> ((*(unsigned char *)a3 - 60) & 7)) & 0x1FFFF;
              unint64_t v781 = (unint64_t)(*a3 + 213) >> 3;
              if (((*(unsigned char *)a3 - 43) & 7) != 0) {
                unsigned int v782 = ((*(unsigned __int8 *)(a2 + v781 + 2) << 16) | (*(unsigned __int8 *)(a2 + v781 + 1) << 8) | *(unsigned __int8 *)(a2 + v781)) >> ((*(unsigned char *)a3 - 43) & 7);
              }
              else {
                LOWORD(v782) = *(_WORD *)(a2 + v781);
              }
              uint64_t v1145 = (unsigned __int16)v782;
              int v1146 = *(unsigned __int16 *)(result + 68) | (*(unsigned __int8 *)(result + 70) << 16);
              uint64_t v1147 = *(void *)(result + 60);
              uint64_t v1148 = v1147 | v1145;
              *(void *)(result + 60) = v1148;
              unint64_t v1149 = (unint64_t)(*a3 + 229) >> 3;
              if (((*(unsigned char *)a3 - 27) & 7) != 0) {
                unsigned int v1150 = ((*(unsigned __int8 *)(a2 + v1149 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1149 + 1) << 8) | *(unsigned __int8 *)(a2 + v1149)) >> ((*(unsigned char *)a3 - 27) & 7);
              }
              else {
                unsigned int v1150 = *(unsigned __int16 *)(a2 + v1149);
              }
              unint64_t v1174 = v1148 & 0xFFFFFFFF0000FFFFLL | v1148 & 0xFFFF0000 | (unint64_t)(v1150 << 16);
              *(_WORD *)(result + 68) = v1146;
              *(unsigned char *)(result + 70) = BYTE2(v1146);
              *(void *)(result + 60) = v1174;
              unint64_t v1175 = (unint64_t)(*a3 + 245) >> 3;
              if (((*(unsigned char *)a3 - 11) & 7) != 0) {
                unsigned int v1176 = ((*(unsigned __int8 *)(a2 + v1175 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1175 + 1) << 8) | *(unsigned __int8 *)(a2 + v1175)) >> ((*(unsigned char *)a3 - 11) & 7);
              }
              else {
                LOWORD(v1176) = *(_WORD *)(a2 + v1175);
              }
              unint64_t v1183 = v1174 & 0xFFFF0000FFFFFFFFLL | v1147 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1176 << 32);
              *(_WORD *)(result + 68) = v1146;
              *(unsigned char *)(result + 70) = BYTE2(v1146);
              *(void *)(result + 60) = v1183;
              unint64_t v1184 = *a3 + 261;
              unint64_t v1185 = v1184 >> 3;
              unint64_t v1186 = v1184 & 7;
              if (v1186) {
                uint64_t v1187 = ((*(unsigned __int8 *)(a2 + v1185 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1185 + 1) << 8) | *(unsigned __int8 *)(a2 + v1185)) >> v1186;
              }
              else {
                uint64_t v1187 = *(unsigned __int16 *)(a2 + v1185);
              }
              unint64_t v1193 = v1183 & 0xFFFF000000000000 | (v1187 << 48) | v1183 & 0xFFFFFFFFFFFFLL;
              *(_WORD *)(result + 68) = v1146;
              *(unsigned char *)(result + 70) = BYTE2(v1146);
              *(void *)(result + 60) = v1193;
              unsigned int v1194 = v1146 | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 277) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 277) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 277) >> 3))) >> ((*(unsigned char *)a3 + 21) & 7));
              *(void *)(result + 60) = v1193;
              *(_WORD *)(result + 68) = v1194;
              *(unsigned char *)(result + 70) = (v1146 & 0xFE0000 | v1194 & 0x1FFFF) >> 16;
              int v1195 = *(_DWORD *)(result + 76);
              *(_DWORD *)(result + 72) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 294) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 294) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 294) >> 3))) >> ((*(unsigned char *)a3 + 38) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 76) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 311) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 311) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 311) >> 3))) >> ((*(unsigned char *)a3 + 55) & 7)) & 0x1FFFF | v1195;
              unint64_t v1196 = *a3 & 7;
              unint64_t v1197 = (unint64_t)(*a3 + 328) >> 3;
              if (v1196 > 5)
              {
                int v1199 = (*(unsigned __int8 *)(v1197 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1197 + a2 + 2) << 16);
                int v1198 = *(unsigned __int8 *)(v1197 + a2 + 1) << 8;
              }
              else
              {
                int v1198 = *(unsigned __int8 *)(v1197 + a2 + 2) << 16;
                int v1199 = *(unsigned __int8 *)(v1197 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 80) |= ((v1199 | v1198 | *(unsigned __int8 *)(a2 + v1197)) >> v1196) & 0x7FFFF;
              unint64_t v1200 = *a3 + 347;
              unint64_t v1201 = v1200 >> 3;
              unint64_t v1202 = v1200 & 7;
              if (v1202) {
                unsigned int v1203 = ((*(unsigned __int8 *)(a2 + v1201 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1201 + 1) << 8) | *(unsigned __int8 *)(a2 + v1201)) >> v1202;
              }
              else {
                LOWORD(v1203) = *(_WORD *)(a2 + v1201);
              }
              uint64_t v1212 = *(void *)(result + 84) | (unsigned __int16)v1203;
              *(void *)(result + 84) = v1212;
              unint64_t v1213 = *a3 + 363;
              unint64_t v1214 = v1213 >> 3;
              unint64_t v1215 = v1213 & 7;
              if (v1215) {
                unsigned int v1216 = ((*(unsigned __int8 *)(a2 + v1214 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1214 + 1) << 8) | *(unsigned __int8 *)(a2 + v1214)) >> v1215;
              }
              else {
                unsigned int v1216 = *(unsigned __int16 *)(a2 + v1214);
              }
              uint64_t v1224 = v1212 | (v1216 << 16);
              *(void *)(result + 84) = v1224;
              *(void *)(result + 84) = v1224 | ((unint64_t)((((*(unsigned __int8 *)(a2
                                                                                           + ((unint64_t)(*a3 + 379) >> 3)
                                                                                           + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 379) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 379) >> 3))) >> ((*(unsigned char *)a3 + 123) & 7)) & 0x1FFFF) << 32);
              uint64_t v22 = 396;
              break;
            case 0xE:
              *(_DWORD *)(result + 16) = 14;
              unint64_t v353 = *a3 & 7;
              unint64_t v354 = (unint64_t)(*a3 + 8) >> 3;
              if (v353 > 2)
              {
                int v356 = (*(unsigned __int8 *)(v354 + a2 + 3) << 24) | (*(unsigned __int8 *)(v354 + a2 + 2) << 16);
                int v355 = *(unsigned __int8 *)(v354 + a2 + 1) << 8;
              }
              else
              {
                int v355 = *(unsigned __int8 *)(v354 + a2 + 2) << 16;
                int v356 = *(unsigned __int8 *)(v354 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v356 | v355 | *(unsigned __int8 *)(a2 + v354)) >> v353) & 0x3FFFFF;
              unint64_t v531 = *a3 + 30;
              unint64_t v532 = v531 & 7;
              unint64_t v533 = v531 >> 3;
              if (v532 > 2)
              {
                int v535 = (*(unsigned __int8 *)(v533 + a2 + 3) << 24) | (*(unsigned __int8 *)(v533 + a2 + 2) << 16);
                int v534 = *(unsigned __int8 *)(v533 + a2 + 1) << 8;
              }
              else
              {
                int v534 = *(unsigned __int8 *)(v533 + a2 + 2) << 16;
                int v535 = *(unsigned __int8 *)(v533 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v535 | v534 | *(unsigned __int8 *)(a2 + v533)) >> v532) & 0x3FFFFF;
              unint64_t v585 = *a3 + 52;
              unint64_t v586 = v585 & 7;
              unint64_t v587 = v585 >> 3;
              if (v586 > 5)
              {
                int v589 = (*(unsigned __int8 *)(v587 + a2 + 3) << 24) | (*(unsigned __int8 *)(v587 + a2 + 2) << 16);
                int v588 = *(unsigned __int8 *)(v587 + a2 + 1) << 8;
              }
              else
              {
                int v588 = *(unsigned __int8 *)(v587 + a2 + 2) << 16;
                int v589 = *(unsigned __int8 *)(v587 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v589 | v588 | *(unsigned __int8 *)(a2 + v587)) >> v586) & 0x7FFFF;
              unint64_t v627 = *a3 + 71;
              unint64_t v628 = v627 & 7;
              unint64_t v629 = v627 >> 3;
              if (v628 > 2)
              {
                int v631 = (*(unsigned __int8 *)(v629 + a2 + 3) << 24) | (*(unsigned __int8 *)(v629 + a2 + 2) << 16);
                int v630 = *(unsigned __int8 *)(v629 + a2 + 1) << 8;
              }
              else
              {
                int v630 = *(unsigned __int8 *)(v629 + a2 + 2) << 16;
                int v631 = *(unsigned __int8 *)(v629 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v631 | v630 | *(unsigned __int8 *)(a2 + v629)) >> v628) & 0x3FFFFF;
              uint64_t v22 = 93;
              break;
            case 0xF:
              *(_DWORD *)(result + 16) = 15;
              unint64_t v357 = *a3 & 7;
              unint64_t v358 = (unint64_t)(*a3 + 8) >> 3;
              if (v357 > 2) {
                unsigned int v359 = (*(unsigned __int8 *)(a2 + v358 + 2) << 16) | (*(unsigned __int8 *)(a2 + v358 + 1) << 8) | *(unsigned __int8 *)(a2 + v358);
              }
              else {
                unsigned int v359 = *(unsigned __int16 *)(a2 + v358);
              }
              *(_WORD *)(result + 24) |= (v359 >> v357) & 0x3FFF;
              unint64_t v536 = *a3 + 22;
              unint64_t v537 = v536 & 7;
              unint64_t v538 = v536 >> 3;
              if (v537 > 2) {
                unsigned int v539 = (*(unsigned __int8 *)(a2 + v538 + 2) << 16) | (*(unsigned __int8 *)(a2 + v538 + 1) << 8) | *(unsigned __int8 *)(a2 + v538);
              }
              else {
                unsigned int v539 = *(unsigned __int16 *)(a2 + v538);
              }
              *(_WORD *)(result + 26) |= (v539 >> v537) & 0x3FFF;
              unint64_t v590 = *a3 + 36;
              unint64_t v591 = v590 & 7;
              unint64_t v592 = v590 >> 3;
              if (v591 > 2) {
                unsigned int v593 = (*(unsigned __int8 *)(a2 + v592 + 2) << 16) | (*(unsigned __int8 *)(a2 + v592 + 1) << 8) | *(unsigned __int8 *)(a2 + v592);
              }
              else {
                unsigned int v593 = *(unsigned __int16 *)(a2 + v592);
              }
              *(_WORD *)(result + 28) |= (v593 >> v591) & 0x3FFF;
              unint64_t v632 = *a3 + 50;
              unint64_t v633 = v632 & 7;
              unint64_t v634 = v632 >> 3;
              if (v633 > 2) {
                unsigned int v635 = (*(unsigned __int8 *)(a2 + v634 + 2) << 16) | (*(unsigned __int8 *)(a2 + v634 + 1) << 8) | *(unsigned __int8 *)(a2 + v634);
              }
              else {
                unsigned int v635 = *(unsigned __int16 *)(a2 + v634);
              }
              *(_WORD *)(result + 30) |= (v635 >> v633) & 0x3FFF;
              unint64_t v674 = *a3 & 7;
              unint64_t v675 = (unint64_t)(*a3 + 64) >> 3;
              if (v674 > 3) {
                unsigned int v676 = (*(unsigned __int8 *)(a2 + v675 + 2) << 16) | (*(unsigned __int8 *)(a2 + v675 + 1) << 8) | *(unsigned __int8 *)(a2 + v675);
              }
              else {
                unsigned int v676 = *(unsigned __int16 *)(a2 + v675);
              }
              *(_WORD *)(result + 32) |= (v676 >> v674) & 0x1FFF;
              unint64_t v710 = *a3 + 77;
              unint64_t v711 = v710 & 7;
              unint64_t v712 = v710 >> 3;
              if (v711 > 3) {
                unsigned int v713 = (*(unsigned __int8 *)(a2 + v712 + 2) << 16) | (*(unsigned __int8 *)(a2 + v712 + 1) << 8) | *(unsigned __int8 *)(a2 + v712);
              }
              else {
                unsigned int v713 = *(unsigned __int16 *)(a2 + v712);
              }
              *(_WORD *)(result + 34) |= (v713 >> v711) & 0x1FFF;
              unint64_t v748 = *a3 + 90;
              unint64_t v749 = v748 & 7;
              unint64_t v750 = v748 >> 3;
              if (v749 > 3) {
                unsigned int v751 = (*(unsigned __int8 *)(a2 + v750 + 2) << 16) | (*(unsigned __int8 *)(a2 + v750 + 1) << 8) | *(unsigned __int8 *)(a2 + v750);
              }
              else {
                unsigned int v751 = *(unsigned __int16 *)(a2 + v750);
              }
              int v783 = *(_DWORD *)(result + 36) | (v751 >> v749) & 0x1FFF;
              *(_DWORD *)(result + 36) = v783;
              unint64_t v784 = *a3 + 103;
              unint64_t v785 = v784 & 7;
              unint64_t v786 = v784 >> 3;
              if (v785 == 7) {
                int v787 = *(_DWORD *)(a2 + v786) >> 7;
              }
              else {
                int v787 = ((*(unsigned __int8 *)(a2 + v786 + 2) << 16) | (*(unsigned __int8 *)(a2 + v786 + 1) << 8) | *(unsigned __int8 *)(a2 + v786)) >> v785;
              }
              *(_DWORD *)(result + 36) = ((v787 & 0x3FFFF) << 13) | v783;
              unint64_t v814 = *a3 + 121;
              unint64_t v815 = v814 & 7;
              unint64_t v816 = v814 >> 3;
              if (v815 == 7) {
                int v817 = *(_DWORD *)(a2 + v816) >> 7;
              }
              else {
                int v817 = ((*(unsigned __int8 *)(a2 + v816 + 2) << 16) | (*(unsigned __int8 *)(a2 + v816 + 1) << 8) | *(unsigned __int8 *)(a2 + v816)) >> v815;
              }
              *(_DWORD *)(result + 40) |= v817 & 0x3FFFF;
              uint64_t v837 = (*(unsigned char *)a3 - 117) & 7;
              unint64_t v838 = (unint64_t)(*a3 + 139) >> 3;
              if (v837 == 7) {
                int v839 = *(_DWORD *)(a2 + v838) >> 7;
              }
              else {
                int v839 = ((*(unsigned __int8 *)(a2 + v838 + 2) << 16) | (*(unsigned __int8 *)(a2 + v838 + 1) << 8) | *(unsigned __int8 *)(a2 + v838)) >> v837;
              }
              *(_DWORD *)(result + 44) |= v839 & 0x3FFFF;
              uint64_t v22 = 157;
              break;
            default:
              *(_DWORD *)(result + 16) = 0;
              uint64_t v90 = *a3 & 7;
              unint64_t v91 = (unint64_t)(*a3 + 8) >> 3;
              if (v90 == 7) {
                int v92 = *(_DWORD *)(a2 + v91) >> 7;
              }
              else {
                int v92 = ((*(unsigned __int8 *)(a2 + v91 + 2) << 16) | (*(unsigned __int8 *)(a2 + v91 + 1) << 8) | *(unsigned __int8 *)(a2 + v91)) >> v90;
              }
              *(_DWORD *)(result + 24) |= v92 & 0x3FFFF;
              unint64_t v483 = *a3 + 26;
              unint64_t v484 = v483 & 7;
              unint64_t v485 = v483 >> 3;
              if (v484 == 7) {
                int v486 = *(_DWORD *)(a2 + v485) >> 7;
              }
              else {
                int v486 = ((*(unsigned __int8 *)(a2 + v485 + 2) << 16) | (*(unsigned __int8 *)(a2 + v485 + 1) << 8) | *(unsigned __int8 *)(a2 + v485)) >> v484;
              }
              uint64_t v540 = *(unsigned int *)(result + 28);
              unint64_t v541 = v540 | ((unint64_t)*(unsigned __int16 *)(result + 32) << 32);
              int v542 = v486 & 0x3FFFF;
              *(_DWORD *)(result + 28) = v540 | v542;
              unint64_t v543 = *a3 + 44;
              unint64_t v544 = v543 & 7;
              unint64_t v545 = v543 >> 3;
              if (v544 > 2) {
                unsigned int v546 = (*(unsigned __int8 *)(a2 + v545 + 2) << 16) | (*(unsigned __int8 *)(a2 + v545 + 1) << 8) | *(unsigned __int8 *)(a2 + v545);
              }
              else {
                unsigned int v546 = *(unsigned __int16 *)(a2 + v545);
              }
              uint64_t v594 = v542 | (v546 >> v544 << 18);
              *(_WORD *)(result + 32) = WORD2(v541);
              *(_DWORD *)(result + 28) = v541 | v594;
              unint64_t v595 = *a3 + 58;
              unint64_t v596 = v595 & 7;
              unint64_t v597 = v595 >> 3;
              if (v596 > 3) {
                unsigned int v598 = (*(unsigned __int8 *)(a2 + v597 + 2) << 16) | (*(unsigned __int8 *)(a2 + v597 + 1) << 8) | *(unsigned __int8 *)(a2 + v597);
              }
              else {
                unsigned int v598 = *(unsigned __int16 *)(a2 + v597);
              }
              unint64_t v636 = v594 | ((unint64_t)((v598 >> v596) & 0x1FFF) << 32) | v541;
              *(_DWORD *)(result + 28) = v636;
              *(_WORD *)(result + 32) = WORD2(v636);
              unint64_t v637 = *a3 + 71;
              unint64_t v638 = v637 & 7;
              unint64_t v639 = v637 >> 3;
              if (v638 > 2) {
                unsigned int v640 = (*(unsigned __int8 *)(a2 + v639 + 2) << 16) | (*(unsigned __int8 *)(a2 + v639 + 1) << 8) | *(unsigned __int8 *)(a2 + v639);
              }
              else {
                unsigned int v640 = *(unsigned __int16 *)(a2 + v639);
              }
              *(_WORD *)(result + 34) |= (v640 >> v638) & 0x3FFF;
              unint64_t v677 = *a3 + 85;
              unint64_t v678 = v677 & 7;
              unint64_t v679 = v677 >> 3;
              if (v678 > 2) {
                unsigned int v680 = (*(unsigned __int8 *)(a2 + v679 + 2) << 16) | (*(unsigned __int8 *)(a2 + v679 + 1) << 8) | *(unsigned __int8 *)(a2 + v679);
              }
              else {
                unsigned int v680 = *(unsigned __int16 *)(a2 + v679);
              }
              *(_WORD *)(result + 36) |= (v680 >> v678) & 0x3FFF;
              unint64_t v714 = *a3 + 99;
              unint64_t v715 = v714 & 7;
              unint64_t v716 = v714 >> 3;
              if (v715 > 2) {
                unsigned int v717 = (*(unsigned __int8 *)(a2 + v716 + 2) << 16) | (*(unsigned __int8 *)(a2 + v716 + 1) << 8) | *(unsigned __int8 *)(a2 + v716);
              }
              else {
                unsigned int v717 = *(unsigned __int16 *)(a2 + v716);
              }
              *(_WORD *)(result + 38) |= (v717 >> v715) & 0x3FFF;
              unint64_t v752 = *a3 + 113;
              unint64_t v753 = v752 & 7;
              unint64_t v754 = v752 >> 3;
              if (v753 > 2) {
                unsigned int v755 = (*(unsigned __int8 *)(a2 + v754 + 2) << 16) | (*(unsigned __int8 *)(a2 + v754 + 1) << 8) | *(unsigned __int8 *)(a2 + v754);
              }
              else {
                unsigned int v755 = *(unsigned __int16 *)(a2 + v754);
              }
              *(_WORD *)(result + 40) |= (v755 >> v753) & 0x3FFF;
              unint64_t v788 = *a3 + 127;
              unint64_t v789 = v788 & 7;
              unint64_t v790 = v788 >> 3;
              if (v789 > 2) {
                unsigned int v791 = (*(unsigned __int8 *)(a2 + v790 + 2) << 16) | (*(unsigned __int8 *)(a2 + v790 + 1) << 8) | *(unsigned __int8 *)(a2 + v790);
              }
              else {
                unsigned int v791 = *(unsigned __int16 *)(a2 + v790);
              }
              *(_WORD *)(result + 42) |= (v791 >> v789) & 0x3FFF;
              unint64_t v818 = (*(unsigned char *)a3 - 115) & 7;
              unint64_t v819 = (unint64_t)(*a3 + 141) >> 3;
              if (v818 > 2) {
                unsigned int v820 = (*(unsigned __int8 *)(a2 + v819 + 2) << 16) | (*(unsigned __int8 *)(a2 + v819 + 1) << 8) | *(unsigned __int8 *)(a2 + v819);
              }
              else {
                unsigned int v820 = *(unsigned __int16 *)(a2 + v819);
              }
              *(_WORD *)(result + 44) |= (v820 >> v818) & 0x3FFF;
              *(_WORD *)(result + 46) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 155) >> 3)) >> ((*(unsigned char *)a3 - 101) & 7)) & 0x1FF;
              *(_WORD *)(result + 48) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 164) >> 3)) >> ((*(unsigned char *)a3 - 92) & 7)) & 0x1FF;
              unint64_t v840 = (*(unsigned char *)a3 - 83) & 7;
              unint64_t v841 = (unint64_t)(*a3 + 173) >> 3;
              if (v840 > 5) {
                unsigned int v842 = (*(unsigned __int8 *)(a2 + v841 + 2) << 16) | (*(unsigned __int8 *)(a2 + v841 + 1) << 8) | *(unsigned __int8 *)(a2 + v841);
              }
              else {
                unsigned int v842 = *(unsigned __int16 *)(a2 + v841);
              }
              *(_WORD *)(result + 50) |= (v842 >> v840) & 0x7FF;
              unint64_t v857 = *a3 & 7;
              unint64_t v858 = (unint64_t)(*a3 + 184) >> 3;
              if (v857 > 2) {
                unsigned int v859 = (*(unsigned __int8 *)(a2 + v858 + 2) << 16) | (*(unsigned __int8 *)(a2 + v858 + 1) << 8) | *(unsigned __int8 *)(a2 + v858);
              }
              else {
                unsigned int v859 = *(unsigned __int16 *)(a2 + v858);
              }
              *(_WORD *)(result + 52) |= (v859 >> v857) & 0x3FFF;
              unint64_t v874 = (*(unsigned char *)a3 - 58) & 7;
              unint64_t v875 = (unint64_t)(*a3 + 198) >> 3;
              if (v874 > 2) {
                unsigned int v876 = (*(unsigned __int8 *)(a2 + v875 + 2) << 16) | (*(unsigned __int8 *)(a2 + v875 + 1) << 8) | *(unsigned __int8 *)(a2 + v875);
              }
              else {
                unsigned int v876 = *(unsigned __int16 *)(a2 + v875);
              }
              *(_WORD *)(result + 54) |= (v876 >> v874) & 0x3FFF;
              unint64_t v891 = (*(unsigned char *)a3 - 44) & 7;
              unint64_t v892 = (unint64_t)(*a3 + 212) >> 3;
              if (v891 > 2) {
                unsigned int v893 = (*(unsigned __int8 *)(a2 + v892 + 2) << 16) | (*(unsigned __int8 *)(a2 + v892 + 1) << 8) | *(unsigned __int8 *)(a2 + v892);
              }
              else {
                unsigned int v893 = *(unsigned __int16 *)(a2 + v892);
              }
              *(_WORD *)(result + 56) |= (v893 >> v891) & 0x3FFF;
              unint64_t v908 = (*(unsigned char *)a3 - 30) & 7;
              unint64_t v909 = (unint64_t)(*a3 + 226) >> 3;
              if (v908 > 2) {
                unsigned int v910 = (*(unsigned __int8 *)(a2 + v909 + 2) << 16) | (*(unsigned __int8 *)(a2 + v909 + 1) << 8) | *(unsigned __int8 *)(a2 + v909);
              }
              else {
                unsigned int v910 = *(unsigned __int16 *)(a2 + v909);
              }
              *(_WORD *)(result + 58) |= (v910 >> v908) & 0x3FFF;
              unint64_t v926 = *a3 & 7;
              unint64_t v927 = (unint64_t)(*a3 + 240) >> 3;
              if (v926 > 2) {
                unsigned int v928 = (*(unsigned __int8 *)(a2 + v927 + 2) << 16) | (*(unsigned __int8 *)(a2 + v927 + 1) << 8) | *(unsigned __int8 *)(a2 + v927);
              }
              else {
                unsigned int v928 = *(unsigned __int16 *)(a2 + v927);
              }
              *(_WORD *)(result + 60) |= (v928 >> v926) & 0x3FFF;
              unint64_t v944 = (*(unsigned char *)a3 - 2) & 7;
              unint64_t v945 = (unint64_t)(*a3 + 254) >> 3;
              if (v944 > 2) {
                unsigned int v946 = (*(unsigned __int8 *)(a2 + v945 + 2) << 16) | (*(unsigned __int8 *)(a2 + v945 + 1) << 8) | *(unsigned __int8 *)(a2 + v945);
              }
              else {
                unsigned int v946 = *(unsigned __int16 *)(a2 + v945);
              }
              *(_WORD *)(result + 62) |= (v946 >> v944) & 0x3FFF;
              *(_WORD *)(result + 64) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 268) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 0x1FF;
              *(_WORD *)(result + 66) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 277) >> 3)) >> ((*(unsigned char *)a3 + 21) & 7)) & 0x1FF;
              unint64_t v963 = *a3 + 286;
              unint64_t v964 = v963 & 7;
              unint64_t v965 = v963 >> 3;
              if (v964 > 5) {
                unsigned int v966 = (*(unsigned __int8 *)(a2 + v965 + 2) << 16) | (*(unsigned __int8 *)(a2 + v965 + 1) << 8) | *(unsigned __int8 *)(a2 + v965);
              }
              else {
                unsigned int v966 = *(unsigned __int16 *)(a2 + v965);
              }
              *(_WORD *)(result + 68) |= (v966 >> v964) & 0x7FF;
              uint64_t v22 = 297;
              break;
          }
          break;
        default:
          *(_WORD *)(result + 8) = 8;
          *(void *)uint64_t result = 0x700000007;
          unint64_t v23 = *a3 + 4;
          unint64_t v24 = v23 >> 3;
          unint64_t v25 = v23 & 7;
          if (v25) {
            int v26 = *(unsigned __int16 *)(a2 + v24) >> v25;
          }
          else {
            LOBYTE(v26) = *(unsigned char *)(a2 + v24);
          }
          *(unsigned char *)(result + 16) |= v26;
          if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1) == 0)
          {
            *(_DWORD *)(result + 20) = 0;
            unint64_t v120 = *a3 + 13;
            unint64_t v121 = v120 & 7;
            unint64_t v122 = v120 >> 3;
            if (v121 > 3) {
              unsigned int v123 = *(unsigned __int16 *)(a2 + v122);
            }
            else {
              unsigned int v123 = *(unsigned __int8 *)(a2 + v122);
            }
            *(unsigned char *)(result + 24) |= (v123 >> v121) & 0x1F;
            goto LABEL_56;
          }
          *(_DWORD *)(result + 20) = 1;
          unint64_t v99 = *a3 + 13;
          unint64_t v100 = v99 & 7;
          unint64_t v101 = v99 >> 3;
          if (v100 > 3) {
            unsigned int v102 = *(unsigned __int16 *)(a2 + v101);
          }
          else {
            unsigned int v102 = *(unsigned __int8 *)(a2 + v101);
          }
          uint64_t v140 = *(void *)(result + 24) | (v102 >> v100) & 0x1F;
          *(void *)(result + 24) = v140;
          unint64_t v141 = *a3 + 18;
          unint64_t v142 = v141 & 7;
          unint64_t v143 = v141 >> 3;
          if (v142 == 7)
          {
            unint64_t v144 = ((unint64_t)*(unsigned __int8 *)(v143 + a2 + 6) << 48) | ((unint64_t)*(unsigned __int8 *)(v143 + a2 + 5) << 40);
            unint64_t v145 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 4) << 32;
          }
          else
          {
            unint64_t v145 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 5) << 40;
            unint64_t v144 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 4) << 32;
          }
          *(void *)(result + 24) = ((((v144 | v145 | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 1) << 8) | *(unsigned __int8 *)(a2 + v143)) >> v142) & 0x3FFFFFFFFFFLL) << 6) | v140;
          uint64_t v22 = 60;
          break;
      }
      break;
    case 3:
      uint64_t v19 = (v4 + 2) & 7;
      unint64_t v20 = (unint64_t)(v4 + 2) >> 3;
      if (v19 == 7) {
        int v21 = *(unsigned __int16 *)(a2 + v20) >> 7;
      }
      else {
        int v21 = *(unsigned __int8 *)(a2 + v20) >> v19;
      }
      switch(v21 & 3)
      {
        case 1:
          unint64_t v68 = v4 + 4;
          uint64_t v69 = (v4 + 4) & 7;
          unint64_t v70 = v68 >> 3;
          if (v69 == 7) {
            int v71 = *(unsigned __int16 *)(a2 + v70) >> 7;
          }
          else {
            int v71 = *(unsigned __int8 *)(a2 + v70) >> v69;
          }
          int v93 = v71 & 3;
          if (v93 == 1)
          {
            *(_WORD *)(result + 8) = 1;
            uint64_t v94 = 0xE0000000ELL;
          }
          else
          {
            if (v93) {
              goto LABEL_81;
            }
            *(_WORD *)(result + 8) = 1;
            uint64_t v94 = 0xD0000000DLL;
          }
          *(void *)uint64_t result = v94;
          unint64_t v133 = *a3 + 6;
          unint64_t v134 = v133 & 7;
          unint64_t v135 = v133 >> 3;
          if (v134 == 7) {
            int v136 = *(unsigned __int16 *)(a2 + v135) >> 7;
          }
          else {
            int v136 = *(unsigned __int8 *)(a2 + v135) >> v134;
          }
          *(unsigned char *)(result + 16) |= v136 & 3;
          uint64_t v22 = 8;
          goto LABEL_398;
        case 2:
          unint64_t v72 = v4 + 4;
          uint64_t v73 = (v4 + 4) & 7;
          unint64_t v74 = v72 >> 3;
          if (v73 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v74) | (*(unsigned __int8 *)(a2 + v74 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_81;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v74) >> v73) & 3) != 0)
          {
            goto LABEL_81;
          }
          *(_WORD *)(result + 8) = 3;
          *(void *)uint64_t result = 0xF0000000FLL;
          unint64_t v95 = *a3 + 6;
          unint64_t v96 = v95 & 7;
          unint64_t v97 = v95 >> 3;
          if (v96 > 1) {
            unsigned int v98 = *(unsigned __int16 *)(a2 + v97);
          }
          else {
            unsigned int v98 = *(unsigned __int8 *)(a2 + v97);
          }
          *(unsigned char *)(result + 24) |= (v98 >> v96) & 0x7F;
          unint64_t v163 = *a3 + 13;
          unint64_t v164 = v163 & 7;
          unint64_t v165 = v163 >> 3;
          if (v164 > 5) {
            unsigned __int16 v166 = *(_WORD *)(a2 + v165);
          }
          else {
            unsigned __int16 v166 = *(unsigned __int8 *)(a2 + v165);
          }
          *(_DWORD *)(result + 20) = (v166 >> v164) & 7;
          unint64_t v167 = *a3 & 7;
          unint64_t v168 = (unint64_t)(*a3 + 16) >> 3;
          if (v167 > 5) {
            unsigned __int16 v169 = *(_WORD *)(a2 + v168);
          }
          else {
            unsigned __int16 v169 = *(unsigned __int8 *)(a2 + v168);
          }
          switch((v169 >> v167) & 7)
          {
            case 1:
              int v360 = 1;
              goto LABEL_280;
            case 2:
              int v360 = 2;
              goto LABEL_280;
            case 3:
              int v360 = 3;
              goto LABEL_280;
            case 4:
              int v360 = 4;
              goto LABEL_280;
            case 5:
              int v360 = 5;
              goto LABEL_280;
            case 6:
              int v360 = 6;
              goto LABEL_280;
            case 7:
              int v360 = 7;
LABEL_280:
              *(_DWORD *)(result + 16) = v360;
              break;
            default:
              *(_DWORD *)(result + 16) = 0;
              break;
          }
          uint64_t v22 = 19;
          goto LABEL_398;
        case 3:
          unint64_t v75 = v4 + 4;
          uint64_t v76 = (v4 + 4) & 7;
          unint64_t v77 = v75 >> 3;
          if (v76 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v77) | (*(unsigned __int8 *)(a2 + v77 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_81;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v77) >> v76) & 3) != 0)
          {
            goto LABEL_81;
          }
          *(_WORD *)(result + 8) = 1;
          *(void *)uint64_t result = 0x1000000010;
          uint64_t v22 = 6;
          goto LABEL_398;
        default:
          unint64_t v27 = v4 + 4;
          uint64_t v28 = (v4 + 4) & 7;
          unint64_t v29 = v27 >> 3;
          if (v28 == 7) {
            int v30 = *(unsigned __int16 *)(a2 + v29) >> 7;
          }
          else {
            int v30 = *(unsigned __int8 *)(a2 + v29) >> v28;
          }
          int v78 = v30 & 3;
          if (v78 == 1)
          {
            *(_WORD *)(result + 8) = 3;
            *(void *)uint64_t result = 0xC0000000CLL;
            unint64_t v124 = *a3 + 6;
            unint64_t v125 = v124 & 7;
            unint64_t v126 = v124 >> 3;
            if (v125 > 5) {
              unsigned __int16 v127 = *(_WORD *)(a2 + v126);
            }
            else {
              unsigned __int16 v127 = *(unsigned __int8 *)(a2 + v126);
            }
            *(_DWORD *)(result + 16) = (v127 >> v125) & 7;
            int v170 = *(_WORD *)(result + 20) & 0xFFFE | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
            *(_WORD *)(result + 20) = v170;
            unsigned int v171 = v170 & 0xFFFFFFFD | (2
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)) & 1));
            *(_WORD *)(result + 20) = v171;
            unsigned int v172 = v171 & 0xFFFFFFFB | (4
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 11) >> 3)) >> ((*(unsigned char *)a3 + 11) & 7)) & 1));
            *(_WORD *)(result + 20) = v172;
            unsigned int v173 = v172 & 0xFFFFFFF7 | (8
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1));
            *(_WORD *)(result + 20) = v173;
            unsigned int v174 = v173 & 0xFFFFFFEF | (16
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 13) >> 3)) >> ((*(unsigned char *)a3 + 13) & 7)) & 1));
            *(_WORD *)(result + 20) = v174;
            unsigned int v175 = v174 & 0xFFFFFFDF | (32
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 14) >> 3)) >> ((*(unsigned char *)a3 + 14) & 7)) & 1));
            *(_WORD *)(result + 20) = v175;
            unsigned int v176 = v175 & 0xFFFFFFBF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 15) >> 3)) >> ((*(unsigned char *)a3 + 15) & 7)) & 1) << 6);
            *(_WORD *)(result + 20) = v176;
            unsigned int v177 = v176 & 0xFFFFFF7F | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7)) & 1) << 7);
            *(_WORD *)(result + 20) = v177;
            unsigned int v178 = v177 & 0xFFFFFEFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 18) >> 3)) >> ((*(unsigned char *)a3 + 18) & 7)) & 1) << 8);
            *(_WORD *)(result + 20) = v178;
            unsigned int v179 = v178 & 0xFFFFFDFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 19) >> 3)) >> ((*(unsigned char *)a3 + 19) & 7)) & 1) << 9);
            *(_WORD *)(result + 20) = v179;
            unsigned int v180 = v179 & 0xFFFFFBFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 20) >> 3)) >> ((*(unsigned char *)a3 + 20) & 7)) & 1) << 10);
            *(_WORD *)(result + 20) = v180;
            if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 21) >> 3)) >> ((*(unsigned char *)a3 + 21) & 7))) {
              __int16 v181 = v180 | 0x800;
            }
            else {
              __int16 v181 = v180 & 0xF7FF;
            }
            *(_WORD *)(result + 20) = v181;
            uint64_t v22 = 22;
          }
          else
          {
            if (v78)
            {
LABEL_81:
              *a4 = 0;
              return result;
            }
            *(_WORD *)(result + 8) = 10;
            *(void *)uint64_t result = 0xB0000000BLL;
            unint64_t v79 = *a3 + 9;
            unint64_t v80 = v79 >> 3;
            unint64_t v81 = v79 & 7;
            if (v81)
            {
              unint64_t v82 = ((unint64_t)*(unsigned __int8 *)(v80 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v80 + a2 + 6) << 48);
              unint64_t v83 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 5) << 40;
            }
            else
            {
              unint64_t v83 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 6) << 48;
              unint64_t v82 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 5) << 40;
            }
            uint64_t v195 = (unsigned __int8 *)(a2 + v80);
            unint64_t v196 = ((v82 | v83 | ((unint64_t)v195[4] << 32) | ((unint64_t)v195[3] << 24) | ((unint64_t)v195[2] << 16) | ((unint64_t)v195[1] << 8) | *v195) >> v81) & 0xFFFFFFFFFFFFFFLL;
            unint64_t v197 = *a3 + 65;
            unint64_t v198 = v197 >> 3;
            unint64_t v199 = v197 & 7;
            if (v199) {
              uint64_t v200 = (*(unsigned __int16 *)(a2 + v198) >> v199);
            }
            else {
              uint64_t v200 = *(unsigned __int8 *)(a2 + v198);
            }
            *(void *)(result + 24) |= v196 | (v200 << 56);
            unint64_t v209 = *a3 + 6;
            unint64_t v210 = v209 & 7;
            unint64_t v211 = v209 >> 3;
            if (v210 > 5) {
              unsigned __int16 v212 = *(_WORD *)(a2 + v211);
            }
            else {
              unsigned __int16 v212 = *(unsigned __int8 *)(a2 + v211);
            }
            switch((v212 >> v210) & 7)
            {
              case 1:
                int v482 = 1;
                goto LABEL_396;
              case 2:
                int v482 = 2;
                goto LABEL_396;
              case 3:
                int v482 = 3;
                goto LABEL_396;
              case 4:
                int v482 = 4;
                goto LABEL_396;
              case 5:
                int v482 = 5;
                goto LABEL_396;
              case 6:
                int v482 = 6;
                goto LABEL_396;
              case 7:
                int v482 = 7;
LABEL_396:
                *(_DWORD *)(result + 16) = v482;
                break;
              default:
                *(_DWORD *)(result + 16) = 0;
                break;
            }
            uint64_t v22 = 73;
          }
          break;
      }
      break;
    default:
      *(_WORD *)(result + 8) = 3;
      *(void *)uint64_t result = 0;
      unint64_t v8 = *a3 + 2;
      unint64_t v9 = v8 >> 3;
      unint64_t v10 = v8 & 7;
      if (v10) {
        int v11 = (*(unsigned __int16 *)(a2 + v9) >> v10);
      }
      else {
        int v11 = *(unsigned __int8 *)(a2 + v9);
      }
      int v31 = *(unsigned __int16 *)(result + 16) | v11;
      *(_WORD *)(result + 16) = v31;
      uint64_t v32 = *a3;
      if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)))
      {
        unint64_t v33 = v32 + 11;
        unint64_t v34 = (v32 + 11) & 7;
        unint64_t v35 = v33 >> 3;
        if (v34 > 2) {
          unsigned __int16 v36 = *(_WORD *)(a2 + v35);
        }
        else {
          unsigned __int16 v36 = *(unsigned __int8 *)(a2 + v35);
        }
        int v42 = (((v36 >> v34) & 0x3F) << 8) | v31;
        *(_WORD *)(result + 16) = v42;
        if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7))) {
          __int16 v43 = v42 | 0x4000;
        }
        else {
          __int16 v43 = v42 & 0xBFFF;
        }
        *(_WORD *)(result + 16) = v43;
LABEL_56:
        uint64_t v22 = 18;
      }
      else
      {
        __int16 v37 = v31 & 0xBFFF;
        *(_WORD *)(result + 16) = v37;
        unint64_t v38 = *a3 + 11;
        unint64_t v39 = v38 & 7;
        unint64_t v40 = v38 >> 3;
        if (v39 > 4) {
          unsigned __int16 v41 = *(_WORD *)(a2 + v40);
        }
        else {
          unsigned __int16 v41 = *(unsigned __int8 *)(a2 + v40);
        }
        *(_WORD *)(result + 16) = (((v41 >> v39) & 0xF) << 8) | v37;
LABEL_122:
        uint64_t v22 = 15;
      }
      break;
  }
LABEL_398:
  *a3 += v22;
  return result;
}

void sub_14F17C(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 41928;
  if (*(void *)(a1 + 41960))
  {
    uint64_t v15 = a1 + 160;
    uint64_t v5 = a1 + 41968;
    unint64_t v6 = *(void *)(a1 + 41952);
    do
    {
      uint64_t v7 = *(void *)(*(void *)v2 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
      unsigned int v8 = v6 & 0xF;
      unint64_t v9 = (unsigned __int8 *)(v7 + 264 * (v6 & 0xF));
      if (!v9[32]) {
        break;
      }
      uint64_t v18 = a1;
      v16[0] = v9;
      v16[1] = &v18;
      v16[2] = a1;
      v16[3] = &v17;
      uint64_t v10 = v7 + 264 * v8;
      if (*(unsigned char *)(v10 + 256))
      {
        sub_14F3C8((unint64_t)v16, v10 + 40, (uint64_t)v9);
        if (!*(unsigned char *)(v10 + 256)) {
          sub_8894();
        }
        sub_46078(a2, v10 + 40);
      }
      else
      {
        unint64_t v11 = *v9;
        if (v11 <= 0x97)
        {
          sub_14F3C8((unint64_t)v16, v15 + 224 * *v9, v15);
          uint64_t v12 = (int64x2_t *)(v5 + 48 * v11);
          if (v12[2].i64[1]) {
            goto LABEL_14;
          }
          unint64_t v13 = sub_12C18C();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            unint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp"
                  "ort/APS/AGXPSAPSParserGen1.cpp";
            __int16 v21 = 1024;
            int v22 = 806;
            __int16 v23 = 2080;
            unint64_t v24 = "!pendingPositionsForClique.empty()";
            _os_log_error_impl(&def_1C1270, v13, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", buf, 0x1Cu);
          }
          if (sub_12C17C()) {
            sub_12C184();
          }
          if (v12[2].i64[1]) {
LABEL_14:
          }
            sub_47E68(v12);
        }
      }
      sub_B9500(*(void *)(*(void *)v2 + ((*(void *)(v2 + 24) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 264 * (*(void *)(v2 + 24) & 0xFLL));
      uint64_t v14 = *(void *)(v2 + 32) - 1;
      unint64_t v6 = *(void *)(v2 + 24) + 1;
      *(void *)(v2 + 24) = v6;
      *(void *)(v2 + 32) = v14;
      if (v6 >= 0x20)
      {
        operator delete(**(void ***)v2);
        *(void *)v2 += 8;
        uint64_t v14 = *(void *)(v2 + 32);
        unint64_t v6 = *(void *)(v2 + 24) - 16;
        *(void *)(v2 + 24) = v6;
      }
    }
    while (v14);
  }
}

unint64_t sub_14F3C8@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)result;
  unint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 208);
  switch(*(_DWORD *)(*(void *)result + 4))
  {
    case 0:
      uint64_t result = sub_14F6D8(*(uint64_t **)(result + 8), *(void *)(v3 + 20), *(_DWORD *)(v3 + 28), v7, a3);
      uint64_t v9 = *(void *)(*(void *)v5 + 8);
      uint64_t v10 = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(void *)v5 + 16);
      if (v7 <= 7)
      {
        *((void *)&v11 + 1) = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(void *)v5 + 16);
        *(void *)&long long v11 = v9 & 0xFFFFFFFF00000000;
        uint64_t v12 = v6 + 16 * v7 + 39616;
        *(_DWORD *)uint64_t v12 = v9;
        *(int32x2_t *)(v12 + 4) = vzip1_s32((int32x2_t)(v11 >> 32), (int32x2_t)v10);
        *(unsigned char *)(v12 + 12) = 1;
      }
      int v14 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(void *)(v13 - 28) = v10;
      *(void *)(v13 - 36) = v9;
      *(v13 - 20) = ((v8 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v14) {
        goto LABEL_23;
      }
      break;
    case 1:
      uint64_t result = sub_14F6D8(*(uint64_t **)(result + 8), *(void *)(v3 + 12), *(_DWORD *)(v3 + 20), v7, a3);
      unint64_t v16 = 0;
      uint64_t v17 = ((HIDWORD(result) & 0x7FF) << 32) | ((v15 & 0x7FF) << 43) | (HIDWORD(v15) << 54);
      if (v7 <= 7)
      {
        uint64_t v18 = (_DWORD *)(v6 + 16 * v7 + 39616);
        if (*(unsigned char *)(v6 + 16 * v7 + 39628))
        {
          unsigned int v19 = *(unsigned __int16 *)(*(void *)v5 + 8);
          int32x2_t v20 = vadd_s32(*(int32x2_t *)(v6 + 16 * v7 + 39620), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL));
          uint64_t v21 = *v18 + (v19 & 0xF);
          unint64_t v16 = v21 | ((unint64_t)v20.u32[0] << 32);
          uint64_t v17 = v20.u32[1] | (unint64_t)v17;
          _DWORD *v18 = v21;
          *(int32x2_t *)(v6 + 16 * v7 + 39620) = v20;
        }
      }
      int v22 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(void *)(v13 - 28) = v17;
      *(void *)(v13 - 36) = v16;
      *(v13 - 20) = ((v15 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v22) {
        goto LABEL_23;
      }
      break;
    case 2:
      __int16 v23 = *(_WORD *)(v3 + 8);
      LODWORD(v24) = ((*(_WORD *)(v3 + 12) & 0x7FF) << 20) | ((*(_WORD *)(v3 + 10) & 0x3FF) << 10) | v23 & 0x3FF;
      uint8x8_t v25 = *(uint8x8_t *)(v3 + 15);
      uint8x8_t v26 = *(uint8x8_t *)(v3 + 23);
      if (*(unsigned char *)(v3 + 14))
      {
        int v31 = v25.u8[0];
        v27.i64[0] = vdupq_n_s16(v25.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v31 + 1).i64[1];
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v26.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        uint16x8_t v27 = vmovl_u8(v25);
        uint16x8_t v28 = vmovl_u8(v26);
      }
      if (v7 <= 7)
      {
        uint64_t v32 = v6 + 16 * v7 + 39744;
        *(_DWORD *)uint64_t v32 = v23 & 0x3FF;
        *(int8x8_t *)(v32 + 4) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x7FF000003FFLL);
        *(unsigned char *)(v32 + 12) = 1;
      }
      goto LABEL_22;
    case 3:
      LODWORD(v24) = *(unsigned __int8 *)(v3 + 8);
      uint8x8_t v29 = *(uint8x8_t *)(v3 + 9);
      uint8x8_t v30 = *(uint8x8_t *)(v3 + 17);
      if (v24)
      {
        int v33 = v29.u8[0];
        v27.i64[0] = vdupq_n_s16(v29.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v33 + 1).i64[1];
        uint64_t v24 = (uint64_t)&unk_4C7000;
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v30.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        uint16x8_t v27 = vmovl_u8(v29);
        uint16x8_t v28 = vmovl_u8(v30);
      }
      if (v7 <= 7)
      {
        uint64_t v24 = v6 + 16 * v7 + 39744;
        if (*(unsigned char *)(v6 + 16 * v7 + 39756)) {
          LODWORD(v24) = *(_DWORD *)v24 & 0x3FF | ((*(_DWORD *)(v6 + 16 * v7 + 39748) & 0x3FF) << 10) & 0x800FFFFF | ((*(_DWORD *)(v6 + 16 * v7 + 39752) & 0x7FF) << 20);
        }
      }
LABEL_22:
      int v34 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(uint16x8_t *)(a2 + 168) = v27;
      *(uint16x8_t *)(a2 + 184) = v28;
      *(_DWORD *)(a2 + 200) = v24;
      if (!v34) {
LABEL_23:
      }
        unsigned char *v13 = 1;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_14F6D8@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v6 = HIDWORD(a2) & 0x1F;
      char v7 = HIWORD(a2) >> 12;
      a5 = (HIWORD(a2) & 0xFFF & ~(-1 << v7)) + 1;
      if (a4 <= 7)
      {
        uint64_t v8 = v5 + 16 * a4 + 39488;
        *(_DWORD *)uint64_t v8 = a5;
        *(void *)(v8 + 4) = ((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) & ~(-1 << (a3 & 0xF))) + 1) | ((unint64_t)((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) >> (a3 & 0xF)) + 1) << 32);
        *(unsigned char *)(v8 + 12) = 1;
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
  }
  else
  {
    uint64_t v6 = HIDWORD(a2) & 0x1F;
    if (a4 <= 7)
    {
      uint64_t v9 = (unsigned int *)(v5 + 16 * a4 + 39488);
      if (*((unsigned char *)v9 + 12))
      {
        a5 = *v9;
      }
      else
      {
        long long v11 = sub_12C18C();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1B4C04(v11);
        }
        if (sub_12C17C()) {
          sub_12C184();
        }
      }
    }
  }
  return v6 | (unint64_t)(a5 << 32);
}

void sub_14F7E4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      uint64_t v8 = (char *)v6[530];
      unint64_t v24 = v6[531];
      if ((unint64_t)v8 >= v24)
      {
        uint64_t v10 = (char *)v6[529];
        uint64_t v26 = (v8 - v10) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v27 = v24 - (void)v10;
        unint64_t v28 = (uint64_t)(v24 - (void)v10) >> 2;
        if (v28 <= v26 + 1) {
          unint64_t v28 = v26 + 1;
        }
        if (v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          uint8x8_t v30 = (char *)sub_5714((uint64_t)(v6 + 531), v29);
          uint64_t v8 = (char *)v6[530];
          uint64_t v10 = (char *)v6[529];
        }
        else
        {
          uint8x8_t v30 = 0;
        }
        int v31 = &v30[8 * v26];
        uint64_t v32 = &v30[8 * v29];
        *(void *)int v31 = v7;
        uint8x8_t v25 = v31 + 8;
        while (v8 != v10)
        {
          uint64_t v34 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v31 - 1) = v34;
          v31 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      uint64_t v8 = (char *)v6[530];
      unint64_t v9 = v6[531];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[529];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 531), v14);
          uint64_t v8 = (char *)v6[530];
          uint64_t v10 = (char *)v6[529];
        }
        else
        {
          unint64_t v15 = 0;
        }
        int v31 = &v15[8 * v11];
        uint64_t v32 = &v15[8 * v14];
        *(void *)int v31 = v7;
        uint8x8_t v25 = v31 + 8;
        while (v8 != v10)
        {
          uint64_t v33 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v31 - 1) = v33;
          v31 -= 8;
        }
LABEL_35:
        v6[529] = v31;
        v6[530] = v25;
        v6[531] = v32;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint8x8_t v25 = v8 + 8;
LABEL_37:
    v6[530] = v25;
LABEL_38:
    int v35 = 1 << *(_DWORD *)(v3 + 48);
    if (v35 == 2)
    {
      unsigned __int16 v36 = *(void **)a1[1];
      uint64_t v37 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      unint64_t v38 = (char *)v36[533];
      unint64_t v46 = v36[534];
      if ((unint64_t)v38 >= v46)
      {
        unint64_t v40 = (char *)v36[532];
        uint64_t v48 = (v38 - v40) >> 3;
        if ((unint64_t)(v48 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v49 = v46 - (void)v40;
        unint64_t v50 = (uint64_t)(v46 - (void)v40) >> 2;
        if (v50 <= v48 + 1) {
          unint64_t v50 = v48 + 1;
        }
        if (v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51)
        {
          unint64_t v52 = (char *)sub_5714((uint64_t)(v36 + 534), v51);
          unint64_t v38 = (char *)v36[533];
          unint64_t v40 = (char *)v36[532];
        }
        else
        {
          unint64_t v52 = 0;
        }
        unint64_t v53 = &v52[8 * v48];
        unint64_t v54 = &v52[8 * v51];
        *(void *)unint64_t v53 = v37;
        int v47 = v53 + 8;
        while (v38 != v40)
        {
          uint64_t v56 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v53 - 1) = v56;
          v53 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v35 != 1) {
        goto LABEL_70;
      }
      unsigned __int16 v36 = *(void **)a1[1];
      uint64_t v37 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      unint64_t v38 = (char *)v36[533];
      unint64_t v39 = v36[534];
      if ((unint64_t)v38 >= v39)
      {
        unint64_t v40 = (char *)v36[532];
        uint64_t v41 = (v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v42 = v39 - (void)v40;
        unint64_t v43 = (uint64_t)(v39 - (void)v40) >> 2;
        if (v43 <= v41 + 1) {
          unint64_t v43 = v41 + 1;
        }
        if (v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          uint64_t v45 = (char *)sub_5714((uint64_t)(v36 + 534), v44);
          unint64_t v38 = (char *)v36[533];
          unint64_t v40 = (char *)v36[532];
        }
        else
        {
          uint64_t v45 = 0;
        }
        unint64_t v53 = &v45[8 * v41];
        unint64_t v54 = &v45[8 * v44];
        *(void *)unint64_t v53 = v37;
        int v47 = v53 + 8;
        while (v38 != v40)
        {
          uint64_t v55 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v53 - 1) = v55;
          v53 -= 8;
        }
LABEL_67:
        v36[532] = v53;
        v36[533] = v47;
        v36[534] = v54;
        if (v40) {
          operator delete(v40);
        }
        goto LABEL_69;
      }
    }
    *(void *)unint64_t v38 = v37;
    int v47 = v38 + 8;
LABEL_69:
    v36[533] = v47;
LABEL_70:
    int v57 = 1 << *(_DWORD *)(v3 + 48);
    if (v57 == 2)
    {
      unint64_t v58 = *(void **)a1[1];
      uint64_t v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      unint64_t v60 = (char *)v58[536];
      unint64_t v68 = v58[537];
      if ((unint64_t)v60 >= v68)
      {
        unint64_t v62 = (char *)v58[535];
        uint64_t v70 = (v60 - v62) >> 3;
        if ((unint64_t)(v70 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v71 = v68 - (void)v62;
        unint64_t v72 = (uint64_t)(v68 - (void)v62) >> 2;
        if (v72 <= v70 + 1) {
          unint64_t v72 = v70 + 1;
        }
        if (v71 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v72;
        }
        if (v73)
        {
          unint64_t v74 = (char *)sub_5714((uint64_t)(v58 + 537), v73);
          unint64_t v60 = (char *)v58[536];
          unint64_t v62 = (char *)v58[535];
        }
        else
        {
          unint64_t v74 = 0;
        }
        unint64_t v75 = &v74[8 * v70];
        uint64_t v76 = &v74[8 * v73];
        *(void *)unint64_t v75 = v59;
        uint64_t v69 = v75 + 8;
        while (v60 != v62)
        {
          uint64_t v78 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v75 - 1) = v78;
          v75 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v57 != 1) {
        goto LABEL_102;
      }
      unint64_t v58 = *(void **)a1[1];
      uint64_t v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      unint64_t v60 = (char *)v58[536];
      unint64_t v61 = v58[537];
      if ((unint64_t)v60 >= v61)
      {
        unint64_t v62 = (char *)v58[535];
        uint64_t v63 = (v60 - v62) >> 3;
        if ((unint64_t)(v63 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v64 = v61 - (void)v62;
        unint64_t v65 = (uint64_t)(v61 - (void)v62) >> 2;
        if (v65 <= v63 + 1) {
          unint64_t v65 = v63 + 1;
        }
        if (v64 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66)
        {
          unsigned __int16 v67 = (char *)sub_5714((uint64_t)(v58 + 537), v66);
          unint64_t v60 = (char *)v58[536];
          unint64_t v62 = (char *)v58[535];
        }
        else
        {
          unsigned __int16 v67 = 0;
        }
        unint64_t v75 = &v67[8 * v63];
        uint64_t v76 = &v67[8 * v66];
        *(void *)unint64_t v75 = v59;
        uint64_t v69 = v75 + 8;
        while (v60 != v62)
        {
          uint64_t v77 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v75 - 1) = v77;
          v75 -= 8;
        }
LABEL_99:
        v58[535] = v75;
        v58[536] = v69;
        v58[537] = v76;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v60 = v59;
    uint64_t v69 = v60 + 8;
LABEL_101:
    v58[536] = v69;
LABEL_102:
    int v79 = 1 << *(_DWORD *)(v3 + 48);
    if (v79 == 2)
    {
      unint64_t v80 = *(void **)a1[1];
      uint64_t v81 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      unint64_t v82 = (char *)v80[539];
      unint64_t v90 = v80[540];
      if ((unint64_t)v82 >= v90)
      {
        int v84 = (char *)v80[538];
        uint64_t v92 = (v82 - v84) >> 3;
        if ((unint64_t)(v92 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v93 = v90 - (void)v84;
        unint64_t v94 = (uint64_t)(v90 - (void)v84) >> 2;
        if (v94 <= v92 + 1) {
          unint64_t v94 = v92 + 1;
        }
        if (v93 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v95 = v94;
        }
        if (v95)
        {
          unint64_t v96 = (char *)sub_5714((uint64_t)(v80 + 540), v95);
          unint64_t v82 = (char *)v80[539];
          int v84 = (char *)v80[538];
        }
        else
        {
          unint64_t v96 = 0;
        }
        unint64_t v97 = &v96[8 * v92];
        unsigned int v98 = &v96[8 * v95];
        *(void *)unint64_t v97 = v81;
        unint64_t v91 = v97 + 8;
        while (v82 != v84)
        {
          uint64_t v100 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v97 - 1) = v100;
          v97 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v79 != 1) {
        goto LABEL_134;
      }
      unint64_t v80 = *(void **)a1[1];
      uint64_t v81 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      unint64_t v82 = (char *)v80[539];
      unint64_t v83 = v80[540];
      if ((unint64_t)v82 >= v83)
      {
        int v84 = (char *)v80[538];
        uint64_t v85 = (v82 - v84) >> 3;
        if ((unint64_t)(v85 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v86 = v83 - (void)v84;
        unint64_t v87 = (uint64_t)(v83 - (void)v84) >> 2;
        if (v87 <= v85 + 1) {
          unint64_t v87 = v85 + 1;
        }
        if (v86 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v87;
        }
        if (v88)
        {
          int v89 = (char *)sub_5714((uint64_t)(v80 + 540), v88);
          unint64_t v82 = (char *)v80[539];
          int v84 = (char *)v80[538];
        }
        else
        {
          int v89 = 0;
        }
        unint64_t v97 = &v89[8 * v85];
        unsigned int v98 = &v89[8 * v88];
        *(void *)unint64_t v97 = v81;
        unint64_t v91 = v97 + 8;
        while (v82 != v84)
        {
          uint64_t v99 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v97 - 1) = v99;
          v97 -= 8;
        }
LABEL_131:
        v80[538] = v97;
        v80[539] = v91;
        v80[540] = v98;
        if (v84) {
          operator delete(v84);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v82 = v81;
    unint64_t v91 = v82 + 8;
LABEL_133:
    v80[539] = v91;
LABEL_134:
    int v101 = 1 << *(_DWORD *)(v3 + 48);
    if (v101 == 2)
    {
      unsigned int v102 = *(void **)a1[1];
      uint64_t v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      unint64_t v104 = (char *)v102[542];
      unint64_t v112 = v102[543];
      if ((unint64_t)v104 >= v112)
      {
        int v106 = (char *)v102[541];
        uint64_t v114 = (v104 - v106) >> 3;
        if ((unint64_t)(v114 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v115 = v112 - (void)v106;
        unint64_t v116 = (uint64_t)(v112 - (void)v106) >> 2;
        if (v116 <= v114 + 1) {
          unint64_t v116 = v114 + 1;
        }
        if (v115 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v117 = v116;
        }
        if (v117)
        {
          uint64_t v118 = (char *)sub_5714((uint64_t)(v102 + 543), v117);
          unint64_t v104 = (char *)v102[542];
          int v106 = (char *)v102[541];
        }
        else
        {
          uint64_t v118 = 0;
        }
        unint64_t v119 = &v118[8 * v114];
        unint64_t v120 = &v118[8 * v117];
        *(void *)unint64_t v119 = v103;
        unint64_t v113 = v119 + 8;
        while (v104 != v106)
        {
          uint64_t v122 = *((void *)v104 - 1);
          v104 -= 8;
          *((void *)v119 - 1) = v122;
          v119 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v101 != 1) {
        goto LABEL_166;
      }
      unsigned int v102 = *(void **)a1[1];
      uint64_t v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      unint64_t v104 = (char *)v102[542];
      unint64_t v105 = v102[543];
      if ((unint64_t)v104 >= v105)
      {
        int v106 = (char *)v102[541];
        uint64_t v107 = (v104 - v106) >> 3;
        if ((unint64_t)(v107 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v108 = v105 - (void)v106;
        unint64_t v109 = (uint64_t)(v105 - (void)v106) >> 2;
        if (v109 <= v107 + 1) {
          unint64_t v109 = v107 + 1;
        }
        if (v108 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v110 = v109;
        }
        if (v110)
        {
          unint64_t v111 = (char *)sub_5714((uint64_t)(v102 + 543), v110);
          unint64_t v104 = (char *)v102[542];
          int v106 = (char *)v102[541];
        }
        else
        {
          unint64_t v111 = 0;
        }
        unint64_t v119 = &v111[8 * v107];
        unint64_t v120 = &v111[8 * v110];
        *(void *)unint64_t v119 = v103;
        unint64_t v113 = v119 + 8;
        while (v104 != v106)
        {
          uint64_t v121 = *((void *)v104 - 1);
          v104 -= 8;
          *((void *)v119 - 1) = v121;
          v119 -= 8;
        }
LABEL_163:
        v102[541] = v119;
        v102[542] = v113;
        v102[543] = v120;
        if (v106) {
          operator delete(v106);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v104 = v103;
    unint64_t v113 = v104 + 8;
LABEL_165:
    v102[542] = v113;
LABEL_166:
    int v123 = 1 << *(_DWORD *)(v3 + 48);
    if (v123 == 2)
    {
      unint64_t v124 = *(void **)a1[1];
      uint64_t v125 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      unint64_t v126 = (char *)v124[545];
      unint64_t v134 = v124[546];
      if ((unint64_t)v126 >= v134)
      {
        unint64_t v128 = (char *)v124[544];
        uint64_t v136 = (v126 - v128) >> 3;
        if ((unint64_t)(v136 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v137 = v134 - (void)v128;
        unint64_t v138 = (uint64_t)(v134 - (void)v128) >> 2;
        if (v138 <= v136 + 1) {
          unint64_t v138 = v136 + 1;
        }
        if (v137 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139)
        {
          uint64_t v140 = (char *)sub_5714((uint64_t)(v124 + 546), v139);
          unint64_t v126 = (char *)v124[545];
          unint64_t v128 = (char *)v124[544];
        }
        else
        {
          uint64_t v140 = 0;
        }
        unint64_t v141 = &v140[8 * v136];
        unint64_t v142 = &v140[8 * v139];
        *(void *)unint64_t v141 = v125;
        unint64_t v135 = v141 + 8;
        while (v126 != v128)
        {
          uint64_t v144 = *((void *)v126 - 1);
          v126 -= 8;
          *((void *)v141 - 1) = v144;
          v141 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v123 != 1) {
        goto LABEL_198;
      }
      unint64_t v124 = *(void **)a1[1];
      uint64_t v125 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      unint64_t v126 = (char *)v124[545];
      unint64_t v127 = v124[546];
      if ((unint64_t)v126 >= v127)
      {
        unint64_t v128 = (char *)v124[544];
        uint64_t v129 = (v126 - v128) >> 3;
        if ((unint64_t)(v129 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v130 = v127 - (void)v128;
        unint64_t v131 = (uint64_t)(v127 - (void)v128) >> 2;
        if (v131 <= v129 + 1) {
          unint64_t v131 = v129 + 1;
        }
        if (v130 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v132 = v131;
        }
        if (v132)
        {
          unint64_t v133 = (char *)sub_5714((uint64_t)(v124 + 546), v132);
          unint64_t v126 = (char *)v124[545];
          unint64_t v128 = (char *)v124[544];
        }
        else
        {
          unint64_t v133 = 0;
        }
        unint64_t v141 = &v133[8 * v129];
        unint64_t v142 = &v133[8 * v132];
        *(void *)unint64_t v141 = v125;
        unint64_t v135 = v141 + 8;
        while (v126 != v128)
        {
          uint64_t v143 = *((void *)v126 - 1);
          v126 -= 8;
          *((void *)v141 - 1) = v143;
          v141 -= 8;
        }
LABEL_195:
        v124[544] = v141;
        v124[545] = v135;
        v124[546] = v142;
        if (v128) {
          operator delete(v128);
        }
        goto LABEL_197;
      }
    }
    *(void *)unint64_t v126 = v125;
    unint64_t v135 = v126 + 8;
LABEL_197:
    v124[545] = v135;
LABEL_198:
    int v145 = 1 << *(_DWORD *)(v3 + 48);
    if (v145 == 2)
    {
      unint64_t v146 = *(void **)a1[1];
      uint64_t v147 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      unint64_t v148 = (uint64_t *)v146[548];
      unint64_t v156 = v146[549];
      if ((unint64_t)v148 >= v156)
      {
        uint64_t v150 = (uint64_t *)v146[547];
        uint64_t v158 = v148 - v150;
        if ((unint64_t)(v158 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v159 = v156 - (void)v150;
        unint64_t v160 = (uint64_t)(v156 - (void)v150) >> 2;
        if (v160 <= v158 + 1) {
          unint64_t v160 = v158 + 1;
        }
        if (v159 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v160;
        }
        if (v161)
        {
          unsigned int v162 = (char *)sub_5714((uint64_t)(v146 + 549), v161);
          unint64_t v148 = (uint64_t *)v146[548];
          uint64_t v150 = (uint64_t *)v146[547];
        }
        else
        {
          unsigned int v162 = 0;
        }
        unint64_t v163 = (uint64_t *)&v162[8 * v158];
        unint64_t v164 = &v162[8 * v161];
        *unint64_t v163 = v147;
        unint64_t v157 = v163 + 1;
        while (v148 != v150)
        {
          uint64_t v166 = *--v148;
          *--unint64_t v163 = v166;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v145 != 1) {
        goto LABEL_230;
      }
      unint64_t v146 = *(void **)a1[1];
      uint64_t v147 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      unint64_t v148 = (uint64_t *)v146[548];
      unint64_t v149 = v146[549];
      if ((unint64_t)v148 >= v149)
      {
        uint64_t v150 = (uint64_t *)v146[547];
        uint64_t v151 = v148 - v150;
        if ((unint64_t)(v151 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v152 = v149 - (void)v150;
        unint64_t v153 = (uint64_t)(v149 - (void)v150) >> 2;
        if (v153 <= v151 + 1) {
          unint64_t v153 = v151 + 1;
        }
        if (v152 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v154 = v153;
        }
        if (v154)
        {
          unint64_t v155 = (char *)sub_5714((uint64_t)(v146 + 549), v154);
          unint64_t v148 = (uint64_t *)v146[548];
          uint64_t v150 = (uint64_t *)v146[547];
        }
        else
        {
          unint64_t v155 = 0;
        }
        unint64_t v163 = (uint64_t *)&v155[8 * v151];
        unint64_t v164 = &v155[8 * v154];
        *unint64_t v163 = v147;
        unint64_t v157 = v163 + 1;
        while (v148 != v150)
        {
          uint64_t v165 = *--v148;
          *--unint64_t v163 = v165;
        }
LABEL_227:
        v146[547] = v163;
        v146[548] = v157;
        v146[549] = v164;
        if (v150) {
          operator delete(v150);
        }
        goto LABEL_229;
      }
    }
    *unint64_t v148 = v147;
    unint64_t v157 = v148 + 1;
LABEL_229:
    v146[548] = v157;
LABEL_230:
    int v167 = 1 << *(_DWORD *)(v3 + 48);
    if (v167 == 2)
    {
      unint64_t v168 = *(void **)a1[1];
      uint64_t v169 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      int v170 = (char *)v168[551];
      unint64_t v178 = v168[552];
      if ((unint64_t)v170 >= v178)
      {
        unsigned int v172 = (char *)v168[550];
        uint64_t v180 = (v170 - v172) >> 3;
        if ((unint64_t)(v180 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v181 = v178 - (void)v172;
        unint64_t v182 = (uint64_t)(v178 - (void)v172) >> 2;
        if (v182 <= v180 + 1) {
          unint64_t v182 = v180 + 1;
        }
        if (v181 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v183 = v182;
        }
        if (v183)
        {
          unint64_t v184 = (char *)sub_5714((uint64_t)(v168 + 552), v183);
          int v170 = (char *)v168[551];
          unsigned int v172 = (char *)v168[550];
        }
        else
        {
          unint64_t v184 = 0;
        }
        unsigned int v185 = &v184[8 * v180];
        unint64_t v186 = &v184[8 * v183];
        *(void *)unsigned int v185 = v169;
        unsigned int v179 = v185 + 8;
        while (v170 != v172)
        {
          uint64_t v188 = *((void *)v170 - 1);
          v170 -= 8;
          *((void *)v185 - 1) = v188;
          v185 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v167 != 1) {
        goto LABEL_262;
      }
      unint64_t v168 = *(void **)a1[1];
      uint64_t v169 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      int v170 = (char *)v168[551];
      unint64_t v171 = v168[552];
      if ((unint64_t)v170 >= v171)
      {
        unsigned int v172 = (char *)v168[550];
        uint64_t v173 = (v170 - v172) >> 3;
        if ((unint64_t)(v173 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v174 = v171 - (void)v172;
        unint64_t v175 = (uint64_t)(v171 - (void)v172) >> 2;
        if (v175 <= v173 + 1) {
          unint64_t v175 = v173 + 1;
        }
        if (v174 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v176 = v175;
        }
        if (v176)
        {
          unsigned int v177 = (char *)sub_5714((uint64_t)(v168 + 552), v176);
          int v170 = (char *)v168[551];
          unsigned int v172 = (char *)v168[550];
        }
        else
        {
          unsigned int v177 = 0;
        }
        unsigned int v185 = &v177[8 * v173];
        unint64_t v186 = &v177[8 * v176];
        *(void *)unsigned int v185 = v169;
        unsigned int v179 = v185 + 8;
        while (v170 != v172)
        {
          uint64_t v187 = *((void *)v170 - 1);
          v170 -= 8;
          *((void *)v185 - 1) = v187;
          v185 -= 8;
        }
LABEL_259:
        v168[550] = v185;
        v168[551] = v179;
        v168[552] = v186;
        if (v172) {
          operator delete(v172);
        }
        goto LABEL_261;
      }
    }
    *(void *)int v170 = v169;
    unsigned int v179 = v170 + 8;
LABEL_261:
    v168[551] = v179;
LABEL_262:
    int v189 = 1 << *(_DWORD *)(v3 + 48);
    if (v189 == 2)
    {
      int v190 = *(void **)a1[1];
      uint64_t v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      unint64_t v192 = (char *)v190[554];
      unint64_t v200 = v190[555];
      if ((unint64_t)v192 >= v200)
      {
        unsigned __int16 v194 = (char *)v190[553];
        uint64_t v202 = (v192 - v194) >> 3;
        if ((unint64_t)(v202 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v203 = v200 - (void)v194;
        unint64_t v204 = (uint64_t)(v200 - (void)v194) >> 2;
        if (v204 <= v202 + 1) {
          unint64_t v204 = v202 + 1;
        }
        if (v203 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v205 = v204;
        }
        if (v205)
        {
          uint64_t v206 = (char *)sub_5714((uint64_t)(v190 + 555), v205);
          unint64_t v192 = (char *)v190[554];
          unsigned __int16 v194 = (char *)v190[553];
        }
        else
        {
          uint64_t v206 = 0;
        }
        unint64_t v207 = &v206[8 * v202];
        unsigned int v208 = &v206[8 * v205];
        *(void *)unint64_t v207 = v191;
        int v201 = v207 + 8;
        while (v192 != v194)
        {
          uint64_t v210 = *((void *)v192 - 1);
          v192 -= 8;
          *((void *)v207 - 1) = v210;
          v207 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v189 != 1) {
        goto LABEL_294;
      }
      int v190 = *(void **)a1[1];
      uint64_t v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      unint64_t v192 = (char *)v190[554];
      unint64_t v193 = v190[555];
      if ((unint64_t)v192 >= v193)
      {
        unsigned __int16 v194 = (char *)v190[553];
        uint64_t v195 = (v192 - v194) >> 3;
        if ((unint64_t)(v195 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v196 = v193 - (void)v194;
        unint64_t v197 = (uint64_t)(v193 - (void)v194) >> 2;
        if (v197 <= v195 + 1) {
          unint64_t v197 = v195 + 1;
        }
        if (v196 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v198 = v197;
        }
        if (v198)
        {
          unint64_t v199 = (char *)sub_5714((uint64_t)(v190 + 555), v198);
          unint64_t v192 = (char *)v190[554];
          unsigned __int16 v194 = (char *)v190[553];
        }
        else
        {
          unint64_t v199 = 0;
        }
        unint64_t v207 = &v199[8 * v195];
        unsigned int v208 = &v199[8 * v198];
        *(void *)unint64_t v207 = v191;
        int v201 = v207 + 8;
        while (v192 != v194)
        {
          uint64_t v209 = *((void *)v192 - 1);
          v192 -= 8;
          *((void *)v207 - 1) = v209;
          v207 -= 8;
        }
LABEL_291:
        v190[553] = v207;
        v190[554] = v201;
        v190[555] = v208;
        if (v194) {
          operator delete(v194);
        }
        goto LABEL_293;
      }
    }
    *(void *)unint64_t v192 = v191;
    int v201 = v192 + 8;
LABEL_293:
    v190[554] = v201;
LABEL_294:
    int v211 = 1 << *(_DWORD *)(v3 + 48);
    if (v211 == 2)
    {
      unsigned __int16 v212 = *(void **)a1[1];
      uint64_t v213 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      unint64_t v214 = (char *)v212[557];
      unint64_t v222 = v212[558];
      if ((unint64_t)v214 >= v222)
      {
        unint64_t v216 = (char *)v212[556];
        uint64_t v224 = (v214 - v216) >> 3;
        if ((unint64_t)(v224 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v225 = v222 - (void)v216;
        unint64_t v226 = (uint64_t)(v222 - (void)v216) >> 2;
        if (v226 <= v224 + 1) {
          unint64_t v226 = v224 + 1;
        }
        if (v225 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v227 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v227 = v226;
        }
        if (v227)
        {
          char v228 = (char *)sub_5714((uint64_t)(v212 + 558), v227);
          unint64_t v214 = (char *)v212[557];
          unint64_t v216 = (char *)v212[556];
        }
        else
        {
          char v228 = 0;
        }
        char v229 = &v228[8 * v224];
        unint64_t v230 = &v228[8 * v227];
        *(void *)char v229 = v213;
        unint64_t v223 = v229 + 8;
        while (v214 != v216)
        {
          uint64_t v232 = *((void *)v214 - 1);
          v214 -= 8;
          *((void *)v229 - 1) = v232;
          v229 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v211 != 1) {
        goto LABEL_326;
      }
      unsigned __int16 v212 = *(void **)a1[1];
      uint64_t v213 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      unint64_t v214 = (char *)v212[557];
      unint64_t v215 = v212[558];
      if ((unint64_t)v214 >= v215)
      {
        unint64_t v216 = (char *)v212[556];
        uint64_t v217 = (v214 - v216) >> 3;
        if ((unint64_t)(v217 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v218 = v215 - (void)v216;
        unint64_t v219 = (uint64_t)(v215 - (void)v216) >> 2;
        if (v219 <= v217 + 1) {
          unint64_t v219 = v217 + 1;
        }
        if (v218 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v220 = v219;
        }
        if (v220)
        {
          unsigned int v221 = (char *)sub_5714((uint64_t)(v212 + 558), v220);
          unint64_t v214 = (char *)v212[557];
          unint64_t v216 = (char *)v212[556];
        }
        else
        {
          unsigned int v221 = 0;
        }
        char v229 = &v221[8 * v217];
        unint64_t v230 = &v221[8 * v220];
        *(void *)char v229 = v213;
        unint64_t v223 = v229 + 8;
        while (v214 != v216)
        {
          uint64_t v231 = *((void *)v214 - 1);
          v214 -= 8;
          *((void *)v229 - 1) = v231;
          v229 -= 8;
        }
LABEL_323:
        v212[556] = v229;
        v212[557] = v223;
        v212[558] = v230;
        if (v216) {
          operator delete(v216);
        }
        goto LABEL_325;
      }
    }
    *(void *)unint64_t v214 = v213;
    unint64_t v223 = v214 + 8;
LABEL_325:
    v212[557] = v223;
LABEL_326:
    int v233 = 1 << *(_DWORD *)(v3 + 48);
    if (v233 == 2)
    {
      int v234 = *(void **)a1[1];
      uint64_t v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      unint64_t v236 = (char *)v234[560];
      unint64_t v244 = v234[561];
      if ((unint64_t)v236 >= v244)
      {
        unint64_t v238 = (char *)v234[559];
        uint64_t v246 = (v236 - v238) >> 3;
        if ((unint64_t)(v246 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v247 = v244 - (void)v238;
        unint64_t v248 = (uint64_t)(v244 - (void)v238) >> 2;
        if (v248 <= v246 + 1) {
          unint64_t v248 = v246 + 1;
        }
        if (v247 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v249 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v249 = v248;
        }
        if (v249)
        {
          unint64_t v250 = (char *)sub_5714((uint64_t)(v234 + 561), v249);
          unint64_t v236 = (char *)v234[560];
          unint64_t v238 = (char *)v234[559];
        }
        else
        {
          unint64_t v250 = 0;
        }
        unint64_t v251 = &v250[8 * v246];
        unsigned int v252 = &v250[8 * v249];
        *(void *)unint64_t v251 = v235;
        unint64_t v245 = v251 + 8;
        while (v236 != v238)
        {
          uint64_t v254 = *((void *)v236 - 1);
          v236 -= 8;
          *((void *)v251 - 1) = v254;
          v251 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v233 != 1) {
        goto LABEL_358;
      }
      int v234 = *(void **)a1[1];
      uint64_t v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      unint64_t v236 = (char *)v234[560];
      unint64_t v237 = v234[561];
      if ((unint64_t)v236 >= v237)
      {
        unint64_t v238 = (char *)v234[559];
        uint64_t v239 = (v236 - v238) >> 3;
        if ((unint64_t)(v239 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v240 = v237 - (void)v238;
        unint64_t v241 = (uint64_t)(v237 - (void)v238) >> 2;
        if (v241 <= v239 + 1) {
          unint64_t v241 = v239 + 1;
        }
        if (v240 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v242 = v241;
        }
        if (v242)
        {
          unint64_t v243 = (char *)sub_5714((uint64_t)(v234 + 561), v242);
          unint64_t v236 = (char *)v234[560];
          unint64_t v238 = (char *)v234[559];
        }
        else
        {
          unint64_t v243 = 0;
        }
        unint64_t v251 = &v243[8 * v239];
        unsigned int v252 = &v243[8 * v242];
        *(void *)unint64_t v251 = v235;
        unint64_t v245 = v251 + 8;
        while (v236 != v238)
        {
          uint64_t v253 = *((void *)v236 - 1);
          v236 -= 8;
          *((void *)v251 - 1) = v253;
          v251 -= 8;
        }
LABEL_355:
        v234[559] = v251;
        v234[560] = v245;
        v234[561] = v252;
        if (v238) {
          operator delete(v238);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v236 = v235;
    unint64_t v245 = v236 + 8;
LABEL_357:
    v234[560] = v245;
LABEL_358:
    int v255 = 1 << *(_DWORD *)(v3 + 48);
    if (v255 == 2)
    {
      unint64_t v256 = *(void **)a1[1];
      uint64_t v257 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
      int v258 = (char *)v256[563];
      unint64_t v266 = v256[564];
      if ((unint64_t)v258 >= v266)
      {
        unint64_t v260 = (char *)v256[562];
        uint64_t v268 = (v258 - v260) >> 3;
        if ((unint64_t)(v268 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v269 = v266 - (void)v260;
        unint64_t v270 = (uint64_t)(v266 - (void)v260) >> 2;
        if (v270 <= v268 + 1) {
          unint64_t v270 = v268 + 1;
        }
        if (v269 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v271 = v270;
        }
        if (v271)
        {
          unint64_t v272 = (char *)sub_5714((uint64_t)(v256 + 564), v271);
          int v258 = (char *)v256[563];
          unint64_t v260 = (char *)v256[562];
        }
        else
        {
          unint64_t v272 = 0;
        }
        unsigned int v273 = &v272[8 * v268];
        unint64_t v274 = &v272[8 * v271];
        *(void *)unsigned int v273 = v257;
        unint64_t v267 = v273 + 8;
        while (v258 != v260)
        {
          uint64_t v276 = *((void *)v258 - 1);
          v258 -= 8;
          *((void *)v273 - 1) = v276;
          v273 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v255 != 1) {
        goto LABEL_390;
      }
      unint64_t v256 = *(void **)a1[1];
      uint64_t v257 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
      int v258 = (char *)v256[563];
      unint64_t v259 = v256[564];
      if ((unint64_t)v258 >= v259)
      {
        unint64_t v260 = (char *)v256[562];
        uint64_t v261 = (v258 - v260) >> 3;
        if ((unint64_t)(v261 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v262 = v259 - (void)v260;
        unint64_t v263 = (uint64_t)(v259 - (void)v260) >> 2;
        if (v263 <= v261 + 1) {
          unint64_t v263 = v261 + 1;
        }
        if (v262 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v264 = v263;
        }
        if (v264)
        {
          unint64_t v265 = (char *)sub_5714((uint64_t)(v256 + 564), v264);
          int v258 = (char *)v256[563];
          unint64_t v260 = (char *)v256[562];
        }
        else
        {
          unint64_t v265 = 0;
        }
        unsigned int v273 = &v265[8 * v261];
        unint64_t v274 = &v265[8 * v264];
        *(void *)unsigned int v273 = v257;
        unint64_t v267 = v273 + 8;
        while (v258 != v260)
        {
          uint64_t v275 = *((void *)v258 - 1);
          v258 -= 8;
          *((void *)v273 - 1) = v275;
          v273 -= 8;
        }
LABEL_387:
        v256[562] = v273;
        v256[563] = v267;
        v256[564] = v274;
        if (v260) {
          operator delete(v260);
        }
        goto LABEL_389;
      }
    }
    *(void *)int v258 = v257;
    unint64_t v267 = v258 + 8;
LABEL_389:
    v256[563] = v267;
LABEL_390:
    int v277 = 1 << *(_DWORD *)(v3 + 48);
    if (v277 == 2)
    {
      unint64_t v278 = *(void **)a1[1];
      uint64_t v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      unint64_t v280 = (char *)v278[566];
      unint64_t v288 = v278[567];
      if ((unint64_t)v280 >= v288)
      {
        int v282 = (char *)v278[565];
        uint64_t v290 = (v280 - v282) >> 3;
        if ((unint64_t)(v290 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v291 = v288 - (void)v282;
        unint64_t v292 = (uint64_t)(v288 - (void)v282) >> 2;
        if (v292 <= v290 + 1) {
          unint64_t v292 = v290 + 1;
        }
        if (v291 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v293 = v292;
        }
        if (v293)
        {
          unsigned int v294 = (char *)sub_5714((uint64_t)(v278 + 567), v293);
          unint64_t v280 = (char *)v278[566];
          int v282 = (char *)v278[565];
        }
        else
        {
          unsigned int v294 = 0;
        }
        int v295 = &v294[8 * v290];
        unint64_t v296 = &v294[8 * v293];
        *(void *)int v295 = v279;
        unint64_t v289 = v295 + 8;
        while (v280 != v282)
        {
          uint64_t v298 = *((void *)v280 - 1);
          v280 -= 8;
          *((void *)v295 - 1) = v298;
          v295 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v277 != 1) {
        goto LABEL_422;
      }
      unint64_t v278 = *(void **)a1[1];
      uint64_t v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      unint64_t v280 = (char *)v278[566];
      unint64_t v281 = v278[567];
      if ((unint64_t)v280 >= v281)
      {
        int v282 = (char *)v278[565];
        uint64_t v283 = (v280 - v282) >> 3;
        if ((unint64_t)(v283 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v284 = v281 - (void)v282;
        unint64_t v285 = (uint64_t)(v281 - (void)v282) >> 2;
        if (v285 <= v283 + 1) {
          unint64_t v285 = v283 + 1;
        }
        if (v284 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v286 = v285;
        }
        if (v286)
        {
          int v287 = (char *)sub_5714((uint64_t)(v278 + 567), v286);
          unint64_t v280 = (char *)v278[566];
          int v282 = (char *)v278[565];
        }
        else
        {
          int v287 = 0;
        }
        int v295 = &v287[8 * v283];
        unint64_t v296 = &v287[8 * v286];
        *(void *)int v295 = v279;
        unint64_t v289 = v295 + 8;
        while (v280 != v282)
        {
          uint64_t v297 = *((void *)v280 - 1);
          v280 -= 8;
          *((void *)v295 - 1) = v297;
          v295 -= 8;
        }
LABEL_419:
        v278[565] = v295;
        v278[566] = v289;
        v278[567] = v296;
        if (v282) {
          operator delete(v282);
        }
        goto LABEL_421;
      }
    }
    *(void *)unint64_t v280 = v279;
    unint64_t v289 = v280 + 8;
LABEL_421:
    v278[566] = v289;
LABEL_422:
    int v299 = 1 << *(_DWORD *)(v3 + 48);
    if (v299 == 2)
    {
      unint64_t v300 = *(void **)a1[1];
      uint64_t v301 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      int v302 = (uint64_t *)v300[569];
      unint64_t v310 = v300[570];
      if ((unint64_t)v302 >= v310)
      {
        unint64_t v304 = (uint64_t *)v300[568];
        uint64_t v312 = v302 - v304;
        if ((unint64_t)(v312 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v313 = v310 - (void)v304;
        unint64_t v314 = (uint64_t)(v310 - (void)v304) >> 2;
        if (v314 <= v312 + 1) {
          unint64_t v314 = v312 + 1;
        }
        if (v313 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v315 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v315 = v314;
        }
        if (v315)
        {
          unint64_t v316 = (char *)sub_5714((uint64_t)(v300 + 570), v315);
          int v302 = (uint64_t *)v300[569];
          unint64_t v304 = (uint64_t *)v300[568];
        }
        else
        {
          unint64_t v316 = 0;
        }
        unint64_t v317 = (uint64_t *)&v316[8 * v312];
        unint64_t v318 = &v316[8 * v315];
        *unint64_t v317 = v301;
        unint64_t v311 = v317 + 1;
        while (v302 != v304)
        {
          uint64_t v320 = *--v302;
          *--unint64_t v317 = v320;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v299 != 1) {
        goto LABEL_454;
      }
      unint64_t v300 = *(void **)a1[1];
      uint64_t v301 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      int v302 = (uint64_t *)v300[569];
      unint64_t v303 = v300[570];
      if ((unint64_t)v302 >= v303)
      {
        unint64_t v304 = (uint64_t *)v300[568];
        uint64_t v305 = v302 - v304;
        if ((unint64_t)(v305 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v306 = v303 - (void)v304;
        unint64_t v307 = (uint64_t)(v303 - (void)v304) >> 2;
        if (v307 <= v305 + 1) {
          unint64_t v307 = v305 + 1;
        }
        if (v306 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v308 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v308 = v307;
        }
        if (v308)
        {
          unsigned int v309 = (char *)sub_5714((uint64_t)(v300 + 570), v308);
          int v302 = (uint64_t *)v300[569];
          unint64_t v304 = (uint64_t *)v300[568];
        }
        else
        {
          unsigned int v309 = 0;
        }
        unint64_t v317 = (uint64_t *)&v309[8 * v305];
        unint64_t v318 = &v309[8 * v308];
        *unint64_t v317 = v301;
        unint64_t v311 = v317 + 1;
        while (v302 != v304)
        {
          uint64_t v319 = *--v302;
          *--unint64_t v317 = v319;
        }
LABEL_451:
        v300[568] = v317;
        v300[569] = v311;
        v300[570] = v318;
        if (v304) {
          operator delete(v304);
        }
        goto LABEL_453;
      }
    }
    *int v302 = v301;
    unint64_t v311 = v302 + 1;
LABEL_453:
    v300[569] = v311;
LABEL_454:
    int v321 = 1 << *(_DWORD *)(v3 + 48);
    if (v321 == 2)
    {
      unint64_t v322 = *(void **)a1[1];
      uint64_t v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      unint64_t v324 = (char *)v322[572];
      unint64_t v332 = v322[573];
      if ((unint64_t)v324 >= v332)
      {
        int v326 = (char *)v322[571];
        uint64_t v334 = (v324 - v326) >> 3;
        if ((unint64_t)(v334 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v335 = v332 - (void)v326;
        unint64_t v336 = (uint64_t)(v332 - (void)v326) >> 2;
        if (v336 <= v334 + 1) {
          unint64_t v336 = v334 + 1;
        }
        if (v335 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v337 = v336;
        }
        if (v337)
        {
          unint64_t v338 = (char *)sub_5714((uint64_t)(v322 + 573), v337);
          unint64_t v324 = (char *)v322[572];
          int v326 = (char *)v322[571];
        }
        else
        {
          unint64_t v338 = 0;
        }
        unsigned int v339 = &v338[8 * v334];
        unint64_t v340 = &v338[8 * v337];
        *(void *)unsigned int v339 = v323;
        uint64_t v333 = v339 + 8;
        while (v324 != v326)
        {
          uint64_t v342 = *((void *)v324 - 1);
          v324 -= 8;
          *((void *)v339 - 1) = v342;
          v339 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v321 != 1) {
        goto LABEL_486;
      }
      unint64_t v322 = *(void **)a1[1];
      uint64_t v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      unint64_t v324 = (char *)v322[572];
      unint64_t v325 = v322[573];
      if ((unint64_t)v324 >= v325)
      {
        int v326 = (char *)v322[571];
        uint64_t v327 = (v324 - v326) >> 3;
        if ((unint64_t)(v327 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v328 = v325 - (void)v326;
        unint64_t v329 = (uint64_t)(v325 - (void)v326) >> 2;
        if (v329 <= v327 + 1) {
          unint64_t v329 = v327 + 1;
        }
        if (v328 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v330 = v329;
        }
        if (v330)
        {
          unsigned int v331 = (char *)sub_5714((uint64_t)(v322 + 573), v330);
          unint64_t v324 = (char *)v322[572];
          int v326 = (char *)v322[571];
        }
        else
        {
          unsigned int v331 = 0;
        }
        unsigned int v339 = &v331[8 * v327];
        unint64_t v340 = &v331[8 * v330];
        *(void *)unsigned int v339 = v323;
        uint64_t v333 = v339 + 8;
        while (v324 != v326)
        {
          uint64_t v341 = *((void *)v324 - 1);
          v324 -= 8;
          *((void *)v339 - 1) = v341;
          v339 -= 8;
        }
LABEL_483:
        v322[571] = v339;
        v322[572] = v333;
        v322[573] = v340;
        if (v326) {
          operator delete(v326);
        }
        goto LABEL_485;
      }
    }
    *(void *)unint64_t v324 = v323;
    uint64_t v333 = v324 + 8;
LABEL_485:
    v322[572] = v333;
LABEL_486:
    int v343 = 1 << *(_DWORD *)(v3 + 48);
    if (v343 == 2)
    {
      unint64_t v344 = *(void **)a1[1];
      uint64_t v345 = *(_WORD *)(a1[2] + 50) & 0x7FF;
      unsigned int v346 = (char *)v344[575];
      unint64_t v354 = v344[576];
      if ((unint64_t)v346 >= v354)
      {
        unint64_t v348 = (char *)v344[574];
        uint64_t v356 = (v346 - v348) >> 3;
        if ((unint64_t)(v356 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v357 = v354 - (void)v348;
        unint64_t v358 = (uint64_t)(v354 - (void)v348) >> 2;
        if (v358 <= v356 + 1) {
          unint64_t v358 = v356 + 1;
        }
        if (v357 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v359 = v358;
        }
        if (v359)
        {
          int v360 = (char *)sub_5714((uint64_t)(v344 + 576), v359);
          unsigned int v346 = (char *)v344[575];
          unint64_t v348 = (char *)v344[574];
        }
        else
        {
          int v360 = 0;
        }
        int v361 = &v360[8 * v356];
        unint64_t v362 = &v360[8 * v359];
        *(void *)int v361 = v345;
        int v355 = v361 + 8;
        while (v346 != v348)
        {
          uint64_t v364 = *((void *)v346 - 1);
          v346 -= 8;
          *((void *)v361 - 1) = v364;
          v361 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v343 != 1) {
        goto LABEL_518;
      }
      unint64_t v344 = *(void **)a1[1];
      uint64_t v345 = *(_WORD *)(a1[2] + 50) & 0x7FF;
      unsigned int v346 = (char *)v344[575];
      unint64_t v347 = v344[576];
      if ((unint64_t)v346 >= v347)
      {
        unint64_t v348 = (char *)v344[574];
        uint64_t v349 = (v346 - v348) >> 3;
        if ((unint64_t)(v349 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v350 = v347 - (void)v348;
        unint64_t v351 = (uint64_t)(v347 - (void)v348) >> 2;
        if (v351 <= v349 + 1) {
          unint64_t v351 = v349 + 1;
        }
        if (v350 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v352 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v352 = v351;
        }
        if (v352)
        {
          unint64_t v353 = (char *)sub_5714((uint64_t)(v344 + 576), v352);
          unsigned int v346 = (char *)v344[575];
          unint64_t v348 = (char *)v344[574];
        }
        else
        {
          unint64_t v353 = 0;
        }
        int v361 = &v353[8 * v349];
        unint64_t v362 = &v353[8 * v352];
        *(void *)int v361 = v345;
        int v355 = v361 + 8;
        while (v346 != v348)
        {
          uint64_t v363 = *((void *)v346 - 1);
          v346 -= 8;
          *((void *)v361 - 1) = v363;
          v361 -= 8;
        }
LABEL_515:
        v344[574] = v361;
        v344[575] = v355;
        v344[576] = v362;
        if (v348) {
          operator delete(v348);
        }
        goto LABEL_517;
      }
    }
    *(void *)unsigned int v346 = v345;
    int v355 = v346 + 8;
LABEL_517:
    v344[575] = v355;
LABEL_518:
    int v365 = 1 << *(_DWORD *)(v3 + 48);
    if (v365 == 2)
    {
      unint64_t v366 = *(void **)a1[1];
      uint64_t v367 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      unint64_t v368 = (char *)v366[578];
      unint64_t v376 = v366[579];
      if ((unint64_t)v368 >= v376)
      {
        unint64_t v370 = (char *)v366[577];
        uint64_t v378 = (v368 - v370) >> 3;
        if ((unint64_t)(v378 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v379 = v376 - (void)v370;
        unint64_t v380 = (uint64_t)(v376 - (void)v370) >> 2;
        if (v380 <= v378 + 1) {
          unint64_t v380 = v378 + 1;
        }
        if (v379 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v381 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v381 = v380;
        }
        if (v381)
        {
          unint64_t v382 = (char *)sub_5714((uint64_t)(v366 + 579), v381);
          unint64_t v368 = (char *)v366[578];
          unint64_t v370 = (char *)v366[577];
        }
        else
        {
          unint64_t v382 = 0;
        }
        unint64_t v383 = &v382[8 * v378];
        unint64_t v384 = &v382[8 * v381];
        *(void *)unint64_t v383 = v367;
        unsigned int v377 = v383 + 8;
        while (v368 != v370)
        {
          uint64_t v386 = *((void *)v368 - 1);
          v368 -= 8;
          *((void *)v383 - 1) = v386;
          v383 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v365 != 1) {
        goto LABEL_550;
      }
      unint64_t v366 = *(void **)a1[1];
      uint64_t v367 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      unint64_t v368 = (char *)v366[578];
      unint64_t v369 = v366[579];
      if ((unint64_t)v368 >= v369)
      {
        unint64_t v370 = (char *)v366[577];
        uint64_t v371 = (v368 - v370) >> 3;
        if ((unint64_t)(v371 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v372 = v369 - (void)v370;
        unint64_t v373 = (uint64_t)(v369 - (void)v370) >> 2;
        if (v373 <= v371 + 1) {
          unint64_t v373 = v371 + 1;
        }
        if (v372 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v374 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v374 = v373;
        }
        if (v374)
        {
          unint64_t v375 = (char *)sub_5714((uint64_t)(v366 + 579), v374);
          unint64_t v368 = (char *)v366[578];
          unint64_t v370 = (char *)v366[577];
        }
        else
        {
          unint64_t v375 = 0;
        }
        unint64_t v383 = &v375[8 * v371];
        unint64_t v384 = &v375[8 * v374];
        *(void *)unint64_t v383 = v367;
        unsigned int v377 = v383 + 8;
        while (v368 != v370)
        {
          uint64_t v385 = *((void *)v368 - 1);
          v368 -= 8;
          *((void *)v383 - 1) = v385;
          v383 -= 8;
        }
LABEL_547:
        v366[577] = v383;
        v366[578] = v377;
        v366[579] = v384;
        if (v370) {
          operator delete(v370);
        }
        goto LABEL_549;
      }
    }
    *(void *)unint64_t v368 = v367;
    unsigned int v377 = v368 + 8;
LABEL_549:
    v366[578] = v377;
LABEL_550:
    int v387 = 1 << *(_DWORD *)(v3 + 48);
    if (v387 == 2)
    {
      unint64_t v388 = *(void **)a1[1];
      uint64_t v389 = *(_WORD *)(a1[2] + 64) & 0x1FF;
      unint64_t v390 = (char *)v388[581];
      unint64_t v398 = v388[582];
      if ((unint64_t)v390 >= v398)
      {
        unint64_t v392 = (char *)v388[580];
        uint64_t v400 = (v390 - v392) >> 3;
        if ((unint64_t)(v400 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v401 = v398 - (void)v392;
        unint64_t v402 = (uint64_t)(v398 - (void)v392) >> 2;
        if (v402 <= v400 + 1) {
          unint64_t v402 = v400 + 1;
        }
        if (v401 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v403 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v403 = v402;
        }
        if (v403)
        {
          unint64_t v404 = (char *)sub_5714((uint64_t)(v388 + 582), v403);
          unint64_t v390 = (char *)v388[581];
          unint64_t v392 = (char *)v388[580];
        }
        else
        {
          unint64_t v404 = 0;
        }
        unsigned int v405 = &v404[8 * v400];
        unint64_t v406 = &v404[8 * v403];
        *(void *)unsigned int v405 = v389;
        unint64_t v399 = v405 + 8;
        while (v390 != v392)
        {
          uint64_t v408 = *((void *)v390 - 1);
          v390 -= 8;
          *((void *)v405 - 1) = v408;
          v405 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v387 != 1) {
        goto LABEL_582;
      }
      unint64_t v388 = *(void **)a1[1];
      uint64_t v389 = *(_WORD *)(a1[2] + 64) & 0x1FF;
      unint64_t v390 = (char *)v388[581];
      unint64_t v391 = v388[582];
      if ((unint64_t)v390 >= v391)
      {
        unint64_t v392 = (char *)v388[580];
        uint64_t v393 = (v390 - v392) >> 3;
        if ((unint64_t)(v393 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v394 = v391 - (void)v392;
        unint64_t v395 = (uint64_t)(v391 - (void)v392) >> 2;
        if (v395 <= v393 + 1) {
          unint64_t v395 = v393 + 1;
        }
        if (v394 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v396 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v396 = v395;
        }
        if (v396)
        {
          unsigned int v397 = (char *)sub_5714((uint64_t)(v388 + 582), v396);
          unint64_t v390 = (char *)v388[581];
          unint64_t v392 = (char *)v388[580];
        }
        else
        {
          unsigned int v397 = 0;
        }
        unsigned int v405 = &v397[8 * v393];
        unint64_t v406 = &v397[8 * v396];
        *(void *)unsigned int v405 = v389;
        unint64_t v399 = v405 + 8;
        while (v390 != v392)
        {
          uint64_t v407 = *((void *)v390 - 1);
          v390 -= 8;
          *((void *)v405 - 1) = v407;
          v405 -= 8;
        }
LABEL_579:
        v388[580] = v405;
        v388[581] = v399;
        v388[582] = v406;
        if (v392) {
          operator delete(v392);
        }
        goto LABEL_581;
      }
    }
    *(void *)unint64_t v390 = v389;
    unint64_t v399 = v390 + 8;
LABEL_581:
    v388[581] = v399;
LABEL_582:
    int v409 = 1 << *(_DWORD *)(v3 + 48);
    if (v409 == 2)
    {
      unint64_t v410 = *(void **)a1[1];
      uint64_t v411 = *(_WORD *)(a1[2] + 46) & 0x1FF;
      unint64_t v412 = (char *)v410[584];
      unint64_t v420 = v410[585];
      if ((unint64_t)v412 >= v420)
      {
        unint64_t v414 = (char *)v410[583];
        uint64_t v422 = (v412 - v414) >> 3;
        if ((unint64_t)(v422 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v423 = v420 - (void)v414;
        unint64_t v424 = (uint64_t)(v420 - (void)v414) >> 2;
        if (v424 <= v422 + 1) {
          unint64_t v424 = v422 + 1;
        }
        if (v423 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v425 = v424;
        }
        if (v425)
        {
          unint64_t v426 = (char *)sub_5714((uint64_t)(v410 + 585), v425);
          unint64_t v412 = (char *)v410[584];
          unint64_t v414 = (char *)v410[583];
        }
        else
        {
          unint64_t v426 = 0;
        }
        unint64_t v427 = &v426[8 * v422];
        unint64_t v428 = &v426[8 * v425];
        *(void *)unint64_t v427 = v411;
        unsigned int v421 = v427 + 8;
        while (v412 != v414)
        {
          uint64_t v430 = *((void *)v412 - 1);
          v412 -= 8;
          *((void *)v427 - 1) = v430;
          v427 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v409 != 1) {
        goto LABEL_614;
      }
      unint64_t v410 = *(void **)a1[1];
      uint64_t v411 = *(_WORD *)(a1[2] + 46) & 0x1FF;
      unint64_t v412 = (char *)v410[584];
      unint64_t v413 = v410[585];
      if ((unint64_t)v412 >= v413)
      {
        unint64_t v414 = (char *)v410[583];
        uint64_t v415 = (v412 - v414) >> 3;
        if ((unint64_t)(v415 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v416 = v413 - (void)v414;
        unint64_t v417 = (uint64_t)(v413 - (void)v414) >> 2;
        if (v417 <= v415 + 1) {
          unint64_t v417 = v415 + 1;
        }
        if (v416 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v418 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v418 = v417;
        }
        if (v418)
        {
          unint64_t v419 = (char *)sub_5714((uint64_t)(v410 + 585), v418);
          unint64_t v412 = (char *)v410[584];
          unint64_t v414 = (char *)v410[583];
        }
        else
        {
          unint64_t v419 = 0;
        }
        unint64_t v427 = &v419[8 * v415];
        unint64_t v428 = &v419[8 * v418];
        *(void *)unint64_t v427 = v411;
        unsigned int v421 = v427 + 8;
        while (v412 != v414)
        {
          uint64_t v429 = *((void *)v412 - 1);
          v412 -= 8;
          *((void *)v427 - 1) = v429;
          v427 -= 8;
        }
LABEL_611:
        v410[583] = v427;
        v410[584] = v421;
        v410[585] = v428;
        if (v414) {
          operator delete(v414);
        }
        goto LABEL_613;
      }
    }
    *(void *)unint64_t v412 = v411;
    unsigned int v421 = v412 + 8;
LABEL_613:
    v410[584] = v421;
LABEL_614:
    int v431 = 1 << *(_DWORD *)(v3 + 48);
    if (v431 == 2)
    {
      unint64_t v432 = *(void **)a1[1];
      uint64_t v433 = *(_WORD *)(a1[2] + 66) & 0x1FF;
      unint64_t v434 = (char *)v432[587];
      unint64_t v442 = v432[588];
      if ((unint64_t)v434 >= v442)
      {
        unint64_t v436 = (char *)v432[586];
        uint64_t v444 = (v434 - v436) >> 3;
        if ((unint64_t)(v444 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v445 = v442 - (void)v436;
        unint64_t v446 = (uint64_t)(v442 - (void)v436) >> 2;
        if (v446 <= v444 + 1) {
          unint64_t v446 = v444 + 1;
        }
        if (v445 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v447 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v447 = v446;
        }
        if (v447)
        {
          unint64_t v448 = (char *)sub_5714((uint64_t)(v432 + 588), v447);
          unint64_t v434 = (char *)v432[587];
          unint64_t v436 = (char *)v432[586];
        }
        else
        {
          unint64_t v448 = 0;
        }
        unsigned int v449 = &v448[8 * v444];
        unint64_t v450 = &v448[8 * v447];
        *(void *)unsigned int v449 = v433;
        unint64_t v443 = v449 + 8;
        while (v434 != v436)
        {
          uint64_t v452 = *((void *)v434 - 1);
          v434 -= 8;
          *((void *)v449 - 1) = v452;
          v449 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v431 != 1) {
        goto LABEL_646;
      }
      unint64_t v432 = *(void **)a1[1];
      uint64_t v433 = *(_WORD *)(a1[2] + 66) & 0x1FF;
      unint64_t v434 = (char *)v432[587];
      unint64_t v435 = v432[588];
      if ((unint64_t)v434 >= v435)
      {
        unint64_t v436 = (char *)v432[586];
        uint64_t v437 = (v434 - v436) >> 3;
        if ((unint64_t)(v437 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v438 = v435 - (void)v436;
        unint64_t v439 = (uint64_t)(v435 - (void)v436) >> 2;
        if (v439 <= v437 + 1) {
          unint64_t v439 = v437 + 1;
        }
        if (v438 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v440 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v440 = v439;
        }
        if (v440)
        {
          unsigned int v441 = (char *)sub_5714((uint64_t)(v432 + 588), v440);
          unint64_t v434 = (char *)v432[587];
          unint64_t v436 = (char *)v432[586];
        }
        else
        {
          unsigned int v441 = 0;
        }
        unsigned int v449 = &v441[8 * v437];
        unint64_t v450 = &v441[8 * v440];
        *(void *)unsigned int v449 = v433;
        unint64_t v443 = v449 + 8;
        while (v434 != v436)
        {
          uint64_t v451 = *((void *)v434 - 1);
          v434 -= 8;
          *((void *)v449 - 1) = v451;
          v449 -= 8;
        }
LABEL_643:
        v432[586] = v449;
        v432[587] = v443;
        v432[588] = v450;
        if (v436) {
          operator delete(v436);
        }
        goto LABEL_645;
      }
    }
    *(void *)unint64_t v434 = v433;
    unint64_t v443 = v434 + 8;
LABEL_645:
    v432[587] = v443;
LABEL_646:
    int v453 = 1 << *(_DWORD *)(v3 + 48);
    if (v453 == 2)
    {
      unint64_t v454 = *(void **)a1[1];
      uint64_t v455 = *(_WORD *)(a1[2] + 48) & 0x1FF;
      unint64_t v456 = (char *)v454[590];
      unint64_t v464 = v454[591];
      if ((unint64_t)v456 >= v464)
      {
        unint64_t v458 = (char *)v454[589];
        uint64_t v466 = (v456 - v458) >> 3;
        if ((unint64_t)(v466 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v467 = v464 - (void)v458;
        unint64_t v468 = (uint64_t)(v464 - (void)v458) >> 2;
        if (v468 <= v466 + 1) {
          unint64_t v468 = v466 + 1;
        }
        if (v467 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v469 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v469 = v468;
        }
        if (v469)
        {
          unint64_t v470 = (char *)sub_5714((uint64_t)(v454 + 591), v469);
          unint64_t v456 = (char *)v454[590];
          unint64_t v458 = (char *)v454[589];
        }
        else
        {
          unint64_t v470 = 0;
        }
        unint64_t v471 = &v470[8 * v466];
        unint64_t v472 = &v470[8 * v469];
        *(void *)unint64_t v471 = v455;
        unsigned int v465 = v471 + 8;
        while (v456 != v458)
        {
          uint64_t v474 = *((void *)v456 - 1);
          v456 -= 8;
          *((void *)v471 - 1) = v474;
          v471 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v453 != 1) {
        goto LABEL_678;
      }
      unint64_t v454 = *(void **)a1[1];
      uint64_t v455 = *(_WORD *)(a1[2] + 48) & 0x1FF;
      unint64_t v456 = (char *)v454[590];
      unint64_t v457 = v454[591];
      if ((unint64_t)v456 >= v457)
      {
        unint64_t v458 = (char *)v454[589];
        uint64_t v459 = (v456 - v458) >> 3;
        if ((unint64_t)(v459 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v460 = v457 - (void)v458;
        unint64_t v461 = (uint64_t)(v457 - (void)v458) >> 2;
        if (v461 <= v459 + 1) {
          unint64_t v461 = v459 + 1;
        }
        if (v460 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v462 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v462 = v461;
        }
        if (v462)
        {
          unint64_t v463 = (char *)sub_5714((uint64_t)(v454 + 591), v462);
          unint64_t v456 = (char *)v454[590];
          unint64_t v458 = (char *)v454[589];
        }
        else
        {
          unint64_t v463 = 0;
        }
        unint64_t v471 = &v463[8 * v459];
        unint64_t v472 = &v463[8 * v462];
        *(void *)unint64_t v471 = v455;
        unsigned int v465 = v471 + 8;
        while (v456 != v458)
        {
          uint64_t v473 = *((void *)v456 - 1);
          v456 -= 8;
          *((void *)v471 - 1) = v473;
          v471 -= 8;
        }
LABEL_675:
        v454[589] = v471;
        v454[590] = v465;
        v454[591] = v472;
        if (v458) {
          operator delete(v458);
        }
        goto LABEL_677;
      }
    }
    *(void *)unint64_t v456 = v455;
    unsigned int v465 = v456 + 8;
LABEL_677:
    v454[590] = v465;
LABEL_678:
    int v475 = 1 << *(_DWORD *)(v3 + 48);
    if (v475 == 2)
    {
      uint64_t v487 = a1[2];
      unsigned int v477 = *(void **)a1[1];
      unint64_t v478 = (unint64_t)*(unsigned int *)(v487 + 28) >> 18;
      unint64_t v479 = (unint64_t *)v477[593];
      unint64_t v488 = v477[594];
      if ((unint64_t)v479 >= v488)
      {
        unsigned int v481 = (unint64_t *)v477[592];
        uint64_t v490 = v479 - v481;
        if (!((unint64_t)(v490 + 1) >> 61))
        {
          unint64_t v491 = v488 - (void)v481;
          unint64_t v492 = (uint64_t)(v488 - (void)v481) >> 2;
          if (v492 <= v490 + 1) {
            unint64_t v492 = v490 + 1;
          }
          if (v491 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v493 = v492;
          }
          if (v493)
          {
            unint64_t v494 = (char *)sub_5714((uint64_t)(v477 + 594), v493);
            unint64_t v479 = (unint64_t *)v477[593];
            unsigned int v481 = (unint64_t *)v477[592];
          }
          else
          {
            unint64_t v494 = 0;
          }
          unsigned int v495 = (unint64_t *)&v494[8 * v490];
          unint64_t v496 = &v494[8 * v493];
          *unsigned int v495 = v478;
          unint64_t v489 = v495 + 1;
          while (v479 != v481)
          {
            unint64_t v498 = *--v479;
            *--unsigned int v495 = v498;
          }
          goto LABEL_707;
        }
LABEL_712:
        sub_566C();
      }
    }
    else
    {
      if (v475 != 1)
      {
LABEL_710:
        *a2 = 1;
        return;
      }
      uint64_t v476 = a1[2];
      unsigned int v477 = *(void **)a1[1];
      unint64_t v478 = (unint64_t)*(unsigned int *)(v476 + 28) >> 18;
      unint64_t v479 = (unint64_t *)v477[593];
      unint64_t v480 = v477[594];
      if ((unint64_t)v479 >= v480)
      {
        unsigned int v481 = (unint64_t *)v477[592];
        uint64_t v482 = v479 - v481;
        if (!((unint64_t)(v482 + 1) >> 61))
        {
          unint64_t v483 = v480 - (void)v481;
          unint64_t v484 = (uint64_t)(v480 - (void)v481) >> 2;
          if (v484 <= v482 + 1) {
            unint64_t v484 = v482 + 1;
          }
          if (v483 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v485 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v485 = v484;
          }
          if (v485)
          {
            int v486 = (char *)sub_5714((uint64_t)(v477 + 594), v485);
            unint64_t v479 = (unint64_t *)v477[593];
            unsigned int v481 = (unint64_t *)v477[592];
          }
          else
          {
            int v486 = 0;
          }
          unsigned int v495 = (unint64_t *)&v486[8 * v482];
          unint64_t v496 = &v486[8 * v485];
          *unsigned int v495 = v478;
          unint64_t v489 = v495 + 1;
          while (v479 != v481)
          {
            unint64_t v497 = *--v479;
            *--unsigned int v495 = v497;
          }
LABEL_707:
          v477[592] = v495;
          v477[593] = v489;
          v477[594] = v496;
          if (v481) {
            operator delete(v481);
          }
          goto LABEL_709;
        }
        goto LABEL_712;
      }
    }
    *unint64_t v479 = v478;
    unint64_t v489 = v479 + 1;
LABEL_709:
    v477[593] = v489;
    goto LABEL_710;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unsigned int v19 = (void *)*v18;
    *(void *)(v19[530] - 8) += *(_WORD *)(v17 + 58) & 0x3FFF;
    *(void *)(v19[533] - 8) += *(_WORD *)(v17 + 40) & 0x3FFF;
    *(void *)(v19[536] - 8) += *(_WORD *)(v17 + 60) & 0x3FFF;
    *(void *)(v19[539] - 8) += *(_WORD *)(v17 + 42) & 0x3FFF;
    *(void *)(v19[542] - 8) += *(_WORD *)(v17 + 62) & 0x3FFF;
    *(void *)(v19[545] - 8) += *(_WORD *)(v17 + 44) & 0x3FFF;
    *(void *)(v19[548] - 8) += *(_DWORD *)(v17 + 28) & 0x3FFFF;
    *(void *)(v19[551] - 8) += *(_WORD *)(v17 + 52) & 0x3FFF;
    *(void *)(v19[554] - 8) += *(_WORD *)(v17 + 34) & 0x3FFF;
    *(void *)(v19[557] - 8) += *(_WORD *)(v17 + 54) & 0x3FFF;
    uint64_t v20 = a1[2];
    uint64_t v21 = *(void **)a1[1];
    *(void *)(v21[560] - 8) += *(_WORD *)(v20 + 36) & 0x3FFF;
    *(void *)(v21[563] - 8) += *(_WORD *)(v20 + 56) & 0x3FFF;
    *(void *)(v21[566] - 8) += *(_WORD *)(v20 + 38) & 0x3FFF;
    *(void *)(v21[569] - 8) += *(_DWORD *)(v20 + 24) & 0x3FFFF;
    *(void *)(v21[572] - 8) += *(_WORD *)(v20 + 68) & 0x7FF;
    *(void *)(v21[575] - 8) += *(_WORD *)(v20 + 50) & 0x7FF;
    *(void *)(v21[578] - 8) += *(_WORD *)(v20 + 32) & 0x1FFF;
    *(void *)(v21[581] - 8) += *(_WORD *)(v20 + 64) & 0x1FF;
    *(void *)(v21[584] - 8) += *(_WORD *)(v20 + 46) & 0x1FF;
    *(void *)(v21[587] - 8) += *(_WORD *)(v20 + 66) & 0x1FF;
    uint64_t v22 = a1[2];
    __int16 v23 = (void *)*v18;
    *(void *)(v23[590] - 8) += *(_WORD *)(v22 + 48) & 0x1FF;
    *(void *)(v23[593] - 8) += (unint64_t)*(unsigned int *)(v22 + 28) >> 18;
  }
}

void sub_151CE4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      uint64_t v8 = (uint64_t *)v6[626];
      unint64_t v19 = v6[627];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (uint64_t *)v6[625];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          uint8x8_t v25 = (char *)sub_5714((uint64_t)(v6 + 627), v24);
          uint64_t v8 = (uint64_t *)v6[626];
          uint64_t v10 = (uint64_t *)v6[625];
        }
        else
        {
          uint8x8_t v25 = 0;
        }
        uint64_t v26 = (uint64_t *)&v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *uint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--uint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      uint64_t v8 = (uint64_t *)v6[626];
      unint64_t v9 = v6[627];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (uint64_t *)v6[625];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 627), v14);
          uint64_t v8 = (uint64_t *)v6[626];
          uint64_t v10 = (uint64_t *)v6[625];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v26 = (uint64_t *)&v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *uint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--uint64_t v26 = v28;
        }
LABEL_35:
        v6[625] = v26;
        v6[626] = v20;
        v6[627] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[626] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      int v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      uint64_t v33 = (uint64_t *)v31[629];
      unint64_t v41 = v31[630];
      if ((unint64_t)v33 >= v41)
      {
        int v35 = (uint64_t *)v31[628];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          int v47 = (char *)sub_5714((uint64_t)(v31 + 630), v46);
          uint64_t v33 = (uint64_t *)v31[629];
          int v35 = (uint64_t *)v31[628];
        }
        else
        {
          int v47 = 0;
        }
        uint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *uint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--uint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      int v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      uint64_t v33 = (uint64_t *)v31[629];
      unint64_t v34 = v31[630];
      if ((unint64_t)v33 >= v34)
      {
        int v35 = (uint64_t *)v31[628];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 630), v39);
          uint64_t v33 = (uint64_t *)v31[629];
          int v35 = (uint64_t *)v31[628];
        }
        else
        {
          unint64_t v40 = 0;
        }
        uint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *uint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--uint64_t v48 = v50;
        }
LABEL_67:
        v31[628] = v48;
        v31[629] = v42;
        v31[630] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[629] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      uint64_t v55 = (uint64_t *)v53[632];
      unint64_t v63 = v53[633];
      if ((unint64_t)v55 >= v63)
      {
        int v57 = (uint64_t *)v53[631];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          uint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 633), v68);
          uint64_t v55 = (uint64_t *)v53[632];
          int v57 = (uint64_t *)v53[631];
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v70 = (uint64_t *)&v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *uint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v73 = *--v55;
          *--uint64_t v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      uint64_t v55 = (uint64_t *)v53[632];
      unint64_t v56 = v53[633];
      if ((unint64_t)v55 >= v56)
      {
        int v57 = (uint64_t *)v53[631];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 633), v61);
          uint64_t v55 = (uint64_t *)v53[632];
          int v57 = (uint64_t *)v53[631];
        }
        else
        {
          unint64_t v62 = 0;
        }
        uint64_t v70 = (uint64_t *)&v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *uint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v72 = *--v55;
          *--uint64_t v70 = v72;
        }
LABEL_99:
        v53[631] = v70;
        v53[632] = v64;
        v53[633] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *uint64_t v55 = v54;
    unint64_t v64 = v55 + 1;
LABEL_101:
    v53[632] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v86 = a1[1];
      uint64_t v76 = *(void **)v86;
      uint64_t v77 = *(unsigned __int16 *)(a1[2] + 58);
      uint64_t v78 = *(char **)(*(void *)v86 + 5080);
      unint64_t v87 = *(void *)(*(void *)v86 + 5088);
      if ((unint64_t)v78 >= v87)
      {
        unint64_t v80 = (char *)v76[634];
        uint64_t v89 = (v78 - v80) >> 3;
        if ((unint64_t)(v89 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v90 = v87 - (void)v80;
        unint64_t v91 = (uint64_t)(v87 - (void)v80) >> 2;
        if (v91 <= v89 + 1) {
          unint64_t v91 = v89 + 1;
        }
        if (v90 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        if (v92)
        {
          unint64_t v93 = (char *)sub_5714((uint64_t)(v76 + 636), v92);
          uint64_t v78 = (char *)v76[635];
          unint64_t v80 = (char *)v76[634];
        }
        else
        {
          unint64_t v93 = 0;
        }
        unint64_t v94 = &v93[8 * v89];
        unint64_t v95 = &v93[8 * v92];
        *(void *)unint64_t v94 = v77;
        unint64_t v88 = v94 + 8;
        while (v78 != v80)
        {
          uint64_t v97 = *((void *)v78 - 1);
          v78 -= 8;
          *((void *)v94 - 1) = v97;
          v94 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      uint64_t v75 = a1[1];
      uint64_t v76 = *(void **)v75;
      uint64_t v77 = *(unsigned __int16 *)(a1[2] + 58);
      uint64_t v78 = *(char **)(*(void *)v75 + 5080);
      unint64_t v79 = *(void *)(*(void *)v75 + 5088);
      if ((unint64_t)v78 >= v79)
      {
        unint64_t v80 = (char *)v76[634];
        uint64_t v81 = (v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v82 = v79 - (void)v80;
        unint64_t v83 = (uint64_t)(v79 - (void)v80) >> 2;
        if (v83 <= v81 + 1) {
          unint64_t v83 = v81 + 1;
        }
        if (v82 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v84 = v83;
        }
        if (v84)
        {
          uint64_t v85 = (char *)sub_5714((uint64_t)(v76 + 636), v84);
          uint64_t v78 = (char *)v76[635];
          unint64_t v80 = (char *)v76[634];
        }
        else
        {
          uint64_t v85 = 0;
        }
        unint64_t v94 = &v85[8 * v81];
        unint64_t v95 = &v85[8 * v84];
        *(void *)unint64_t v94 = v77;
        unint64_t v88 = v94 + 8;
        while (v78 != v80)
        {
          uint64_t v96 = *((void *)v78 - 1);
          v78 -= 8;
          *((void *)v94 - 1) = v96;
          v94 -= 8;
        }
LABEL_131:
        v76[634] = v94;
        v76[635] = v88;
        v76[636] = v95;
        if (v80) {
          operator delete(v80);
        }
        goto LABEL_133;
      }
    }
    *(void *)uint64_t v78 = v77;
    unint64_t v88 = v78 + 8;
LABEL_133:
    v76[635] = v88;
LABEL_134:
    int v98 = 1 << *(_DWORD *)(v3 + 48);
    if (v98 == 2)
    {
      uint64_t v110 = a1[1];
      uint64_t v100 = *(void **)v110;
      uint64_t v101 = *(unsigned __int16 *)(a1[2] + 56);
      unsigned int v102 = *(char **)(*(void *)v110 + 5104);
      unint64_t v111 = *(void *)(*(void *)v110 + 5112);
      if ((unint64_t)v102 >= v111)
      {
        unint64_t v104 = (char *)v100[637];
        uint64_t v113 = (v102 - v104) >> 3;
        if ((unint64_t)(v113 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v114 = v111 - (void)v104;
        unint64_t v115 = (uint64_t)(v111 - (void)v104) >> 2;
        if (v115 <= v113 + 1) {
          unint64_t v115 = v113 + 1;
        }
        if (v114 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v116 = v115;
        }
        if (v116)
        {
          unint64_t v117 = (char *)sub_5714((uint64_t)(v100 + 639), v116);
          unsigned int v102 = (char *)v100[638];
          unint64_t v104 = (char *)v100[637];
        }
        else
        {
          unint64_t v117 = 0;
        }
        uint64_t v118 = &v117[8 * v113];
        unint64_t v119 = &v117[8 * v116];
        *(void *)uint64_t v118 = v101;
        unint64_t v112 = v118 + 8;
        while (v102 != v104)
        {
          uint64_t v121 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v118 - 1) = v121;
          v118 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v98 != 1) {
        goto LABEL_166;
      }
      uint64_t v99 = a1[1];
      uint64_t v100 = *(void **)v99;
      uint64_t v101 = *(unsigned __int16 *)(a1[2] + 56);
      unsigned int v102 = *(char **)(*(void *)v99 + 5104);
      unint64_t v103 = *(void *)(*(void *)v99 + 5112);
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (char *)v100[637];
        uint64_t v105 = (v102 - v104) >> 3;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 639), v108);
          unsigned int v102 = (char *)v100[638];
          unint64_t v104 = (char *)v100[637];
        }
        else
        {
          unint64_t v109 = 0;
        }
        uint64_t v118 = &v109[8 * v105];
        unint64_t v119 = &v109[8 * v108];
        *(void *)uint64_t v118 = v101;
        unint64_t v112 = v118 + 8;
        while (v102 != v104)
        {
          uint64_t v120 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v118 - 1) = v120;
          v118 -= 8;
        }
LABEL_163:
        v100[637] = v118;
        v100[638] = v112;
        v100[639] = v119;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    *(void *)unsigned int v102 = v101;
    unint64_t v112 = v102 + 8;
LABEL_165:
    v100[638] = v112;
LABEL_166:
    int v122 = 1 << *(_DWORD *)(v3 + 48);
    if (v122 == 2)
    {
      int v123 = *(void **)a1[1];
      uint64_t v124 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      uint64_t v125 = (uint64_t *)v123[641];
      unint64_t v133 = v123[642];
      if ((unint64_t)v125 >= v133)
      {
        unint64_t v127 = (uint64_t *)v123[640];
        uint64_t v135 = v125 - v127;
        if ((unint64_t)(v135 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v136 = v133 - (void)v127;
        unint64_t v137 = (uint64_t)(v133 - (void)v127) >> 2;
        if (v137 <= v135 + 1) {
          unint64_t v137 = v135 + 1;
        }
        if (v136 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v138 = v137;
        }
        if (v138)
        {
          unint64_t v139 = (char *)sub_5714((uint64_t)(v123 + 642), v138);
          uint64_t v125 = (uint64_t *)v123[641];
          unint64_t v127 = (uint64_t *)v123[640];
        }
        else
        {
          unint64_t v139 = 0;
        }
        uint64_t v140 = (uint64_t *)&v139[8 * v135];
        unint64_t v141 = &v139[8 * v138];
        *uint64_t v140 = v124;
        unint64_t v134 = v140 + 1;
        while (v125 != v127)
        {
          uint64_t v143 = *--v125;
          *--uint64_t v140 = v143;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v122 != 1) {
        goto LABEL_198;
      }
      int v123 = *(void **)a1[1];
      uint64_t v124 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      uint64_t v125 = (uint64_t *)v123[641];
      unint64_t v126 = v123[642];
      if ((unint64_t)v125 >= v126)
      {
        unint64_t v127 = (uint64_t *)v123[640];
        uint64_t v128 = v125 - v127;
        if ((unint64_t)(v128 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v129 = v126 - (void)v127;
        unint64_t v130 = (uint64_t)(v126 - (void)v127) >> 2;
        if (v130 <= v128 + 1) {
          unint64_t v130 = v128 + 1;
        }
        if (v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v131 = v130;
        }
        if (v131)
        {
          unint64_t v132 = (char *)sub_5714((uint64_t)(v123 + 642), v131);
          uint64_t v125 = (uint64_t *)v123[641];
          unint64_t v127 = (uint64_t *)v123[640];
        }
        else
        {
          unint64_t v132 = 0;
        }
        uint64_t v140 = (uint64_t *)&v132[8 * v128];
        unint64_t v141 = &v132[8 * v131];
        *uint64_t v140 = v124;
        unint64_t v134 = v140 + 1;
        while (v125 != v127)
        {
          uint64_t v142 = *--v125;
          *--uint64_t v140 = v142;
        }
LABEL_195:
        v123[640] = v140;
        v123[641] = v134;
        v123[642] = v141;
        if (v127) {
          operator delete(v127);
        }
        goto LABEL_197;
      }
    }
    *uint64_t v125 = v124;
    unint64_t v134 = v125 + 1;
LABEL_197:
    v123[641] = v134;
LABEL_198:
    int v144 = 1 << *(_DWORD *)(v3 + 48);
    if (v144 == 2)
    {
      int v145 = *(void **)a1[1];
      uint64_t v146 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      uint64_t v147 = (uint64_t *)v145[644];
      unint64_t v155 = v145[645];
      if ((unint64_t)v147 >= v155)
      {
        unint64_t v149 = (uint64_t *)v145[643];
        uint64_t v157 = v147 - v149;
        if ((unint64_t)(v157 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v158 = v155 - (void)v149;
        unint64_t v159 = (uint64_t)(v155 - (void)v149) >> 2;
        if (v159 <= v157 + 1) {
          unint64_t v159 = v157 + 1;
        }
        if (v158 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v160 = v159;
        }
        if (v160)
        {
          unint64_t v161 = (char *)sub_5714((uint64_t)(v145 + 645), v160);
          uint64_t v147 = (uint64_t *)v145[644];
          unint64_t v149 = (uint64_t *)v145[643];
        }
        else
        {
          unint64_t v161 = 0;
        }
        unsigned int v162 = (uint64_t *)&v161[8 * v157];
        unint64_t v163 = &v161[8 * v160];
        *unsigned int v162 = v146;
        unint64_t v156 = v162 + 1;
        while (v147 != v149)
        {
          uint64_t v165 = *--v147;
          *--unsigned int v162 = v165;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v144 != 1) {
        goto LABEL_230;
      }
      int v145 = *(void **)a1[1];
      uint64_t v146 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      uint64_t v147 = (uint64_t *)v145[644];
      unint64_t v148 = v145[645];
      if ((unint64_t)v147 >= v148)
      {
        unint64_t v149 = (uint64_t *)v145[643];
        uint64_t v150 = v147 - v149;
        if ((unint64_t)(v150 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v151 = v148 - (void)v149;
        unint64_t v152 = (uint64_t)(v148 - (void)v149) >> 2;
        if (v152 <= v150 + 1) {
          unint64_t v152 = v150 + 1;
        }
        if (v151 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v153 = v152;
        }
        if (v153)
        {
          unint64_t v154 = (char *)sub_5714((uint64_t)(v145 + 645), v153);
          uint64_t v147 = (uint64_t *)v145[644];
          unint64_t v149 = (uint64_t *)v145[643];
        }
        else
        {
          unint64_t v154 = 0;
        }
        unsigned int v162 = (uint64_t *)&v154[8 * v150];
        unint64_t v163 = &v154[8 * v153];
        *unsigned int v162 = v146;
        unint64_t v156 = v162 + 1;
        while (v147 != v149)
        {
          uint64_t v164 = *--v147;
          *--unsigned int v162 = v164;
        }
LABEL_227:
        v145[643] = v162;
        v145[644] = v156;
        v145[645] = v163;
        if (v149) {
          operator delete(v149);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v147 = v146;
    unint64_t v156 = v147 + 1;
LABEL_229:
    v145[644] = v156;
LABEL_230:
    int v166 = 1 << *(_DWORD *)(v3 + 48);
    if (v166 == 2)
    {
      int v167 = *(void **)a1[1];
      uint64_t v168 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      uint64_t v169 = (uint64_t *)v167[647];
      unint64_t v177 = v167[648];
      if ((unint64_t)v169 >= v177)
      {
        unint64_t v171 = (uint64_t *)v167[646];
        uint64_t v179 = v169 - v171;
        if ((unint64_t)(v179 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v180 = v177 - (void)v171;
        unint64_t v181 = (uint64_t)(v177 - (void)v171) >> 2;
        if (v181 <= v179 + 1) {
          unint64_t v181 = v179 + 1;
        }
        if (v180 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v182 = v181;
        }
        if (v182)
        {
          unint64_t v183 = (char *)sub_5714((uint64_t)(v167 + 648), v182);
          uint64_t v169 = (uint64_t *)v167[647];
          unint64_t v171 = (uint64_t *)v167[646];
        }
        else
        {
          unint64_t v183 = 0;
        }
        unint64_t v184 = (uint64_t *)&v183[8 * v179];
        unsigned int v185 = &v183[8 * v182];
        *unint64_t v184 = v168;
        unint64_t v178 = v184 + 1;
        while (v169 != v171)
        {
          uint64_t v187 = *--v169;
          *--unint64_t v184 = v187;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v166 != 1) {
        goto LABEL_262;
      }
      int v167 = *(void **)a1[1];
      uint64_t v168 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      uint64_t v169 = (uint64_t *)v167[647];
      unint64_t v170 = v167[648];
      if ((unint64_t)v169 >= v170)
      {
        unint64_t v171 = (uint64_t *)v167[646];
        uint64_t v172 = v169 - v171;
        if ((unint64_t)(v172 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v173 = v170 - (void)v171;
        unint64_t v174 = (uint64_t)(v170 - (void)v171) >> 2;
        if (v174 <= v172 + 1) {
          unint64_t v174 = v172 + 1;
        }
        if (v173 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v175 = v174;
        }
        if (v175)
        {
          unint64_t v176 = (char *)sub_5714((uint64_t)(v167 + 648), v175);
          uint64_t v169 = (uint64_t *)v167[647];
          unint64_t v171 = (uint64_t *)v167[646];
        }
        else
        {
          unint64_t v176 = 0;
        }
        unint64_t v184 = (uint64_t *)&v176[8 * v172];
        unsigned int v185 = &v176[8 * v175];
        *unint64_t v184 = v168;
        unint64_t v178 = v184 + 1;
        while (v169 != v171)
        {
          uint64_t v186 = *--v169;
          *--unint64_t v184 = v186;
        }
LABEL_259:
        v167[646] = v184;
        v167[647] = v178;
        v167[648] = v185;
        if (v171) {
          operator delete(v171);
        }
        goto LABEL_261;
      }
    }
    uint64_t *v169 = v168;
    unint64_t v178 = v169 + 1;
LABEL_261:
    v167[647] = v178;
LABEL_262:
    int v188 = 1 << *(_DWORD *)(v3 + 48);
    if (v188 == 2)
    {
      int v189 = *(void **)a1[1];
      uint64_t v190 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
      uint64_t v191 = (uint64_t *)v189[650];
      unint64_t v199 = v189[651];
      if ((unint64_t)v191 >= v199)
      {
        unint64_t v193 = (uint64_t *)v189[649];
        uint64_t v201 = v191 - v193;
        if ((unint64_t)(v201 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v202 = v199 - (void)v193;
        unint64_t v203 = (uint64_t)(v199 - (void)v193) >> 2;
        if (v203 <= v201 + 1) {
          unint64_t v203 = v201 + 1;
        }
        if (v202 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v204 = v203;
        }
        if (v204)
        {
          unint64_t v205 = (char *)sub_5714((uint64_t)(v189 + 651), v204);
          uint64_t v191 = (uint64_t *)v189[650];
          unint64_t v193 = (uint64_t *)v189[649];
        }
        else
        {
          unint64_t v205 = 0;
        }
        uint64_t v206 = (uint64_t *)&v205[8 * v201];
        unint64_t v207 = &v205[8 * v204];
        *uint64_t v206 = v190;
        unint64_t v200 = v206 + 1;
        while (v191 != v193)
        {
          uint64_t v209 = *--v191;
          *--uint64_t v206 = v209;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v188 != 1) {
        goto LABEL_294;
      }
      int v189 = *(void **)a1[1];
      uint64_t v190 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
      uint64_t v191 = (uint64_t *)v189[650];
      unint64_t v192 = v189[651];
      if ((unint64_t)v191 >= v192)
      {
        unint64_t v193 = (uint64_t *)v189[649];
        uint64_t v194 = v191 - v193;
        if ((unint64_t)(v194 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v195 = v192 - (void)v193;
        unint64_t v196 = (uint64_t)(v192 - (void)v193) >> 2;
        if (v196 <= v194 + 1) {
          unint64_t v196 = v194 + 1;
        }
        if (v195 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v197 = v196;
        }
        if (v197)
        {
          unint64_t v198 = (char *)sub_5714((uint64_t)(v189 + 651), v197);
          uint64_t v191 = (uint64_t *)v189[650];
          unint64_t v193 = (uint64_t *)v189[649];
        }
        else
        {
          unint64_t v198 = 0;
        }
        uint64_t v206 = (uint64_t *)&v198[8 * v194];
        unint64_t v207 = &v198[8 * v197];
        *uint64_t v206 = v190;
        unint64_t v200 = v206 + 1;
        while (v191 != v193)
        {
          uint64_t v208 = *--v191;
          *--uint64_t v206 = v208;
        }
LABEL_291:
        v189[649] = v206;
        v189[650] = v200;
        v189[651] = v207;
        if (v193) {
          operator delete(v193);
        }
        goto LABEL_293;
      }
    }
    *uint64_t v191 = v190;
    unint64_t v200 = v191 + 1;
LABEL_293:
    v189[650] = v200;
LABEL_294:
    int v210 = 1 << *(_DWORD *)(v3 + 48);
    if (v210 == 2)
    {
      uint64_t v222 = a1[2];
      unsigned __int16 v212 = *(void **)a1[1];
      uint64_t v213 = *(_DWORD *)(v222 + 28) & 0xFFFFFLL;
      unint64_t v214 = (uint64_t *)v212[653];
      unint64_t v223 = v212[654];
      if ((unint64_t)v214 >= v223)
      {
        unint64_t v216 = (uint64_t *)v212[652];
        uint64_t v225 = v214 - v216;
        if (!((unint64_t)(v225 + 1) >> 61))
        {
          unint64_t v226 = v223 - (void)v216;
          unint64_t v227 = (uint64_t)(v223 - (void)v216) >> 2;
          if (v227 <= v225 + 1) {
            unint64_t v227 = v225 + 1;
          }
          if (v226 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v228 = v227;
          }
          if (v228)
          {
            char v229 = (char *)sub_5714((uint64_t)(v212 + 654), v228);
            unint64_t v214 = (uint64_t *)v212[653];
            unint64_t v216 = (uint64_t *)v212[652];
          }
          else
          {
            char v229 = 0;
          }
          unint64_t v230 = (uint64_t *)&v229[8 * v225];
          uint64_t v231 = &v229[8 * v228];
          *unint64_t v230 = v213;
          uint64_t v224 = v230 + 1;
          while (v214 != v216)
          {
            uint64_t v233 = *--v214;
            *--unint64_t v230 = v233;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_566C();
      }
    }
    else
    {
      if (v210 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      uint64_t v211 = a1[2];
      unsigned __int16 v212 = *(void **)a1[1];
      uint64_t v213 = *(_DWORD *)(v211 + 28) & 0xFFFFFLL;
      unint64_t v214 = (uint64_t *)v212[653];
      unint64_t v215 = v212[654];
      if ((unint64_t)v214 >= v215)
      {
        unint64_t v216 = (uint64_t *)v212[652];
        uint64_t v217 = v214 - v216;
        if (!((unint64_t)(v217 + 1) >> 61))
        {
          unint64_t v218 = v215 - (void)v216;
          unint64_t v219 = (uint64_t)(v215 - (void)v216) >> 2;
          if (v219 <= v217 + 1) {
            unint64_t v219 = v217 + 1;
          }
          if (v218 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v220 = v219;
          }
          if (v220)
          {
            unsigned int v221 = (char *)sub_5714((uint64_t)(v212 + 654), v220);
            unint64_t v214 = (uint64_t *)v212[653];
            unint64_t v216 = (uint64_t *)v212[652];
          }
          else
          {
            unsigned int v221 = 0;
          }
          unint64_t v230 = (uint64_t *)&v221[8 * v217];
          uint64_t v231 = &v221[8 * v220];
          *unint64_t v230 = v213;
          uint64_t v224 = v230 + 1;
          while (v214 != v216)
          {
            uint64_t v232 = *--v214;
            *--unint64_t v230 = v232;
          }
LABEL_323:
          v212[652] = v230;
          v212[653] = v224;
          v212[654] = v231;
          if (v216) {
            operator delete(v216);
          }
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *unint64_t v214 = v213;
    uint64_t v224 = v214 + 1;
LABEL_325:
    v212[653] = v224;
    goto LABEL_326;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[626] - 8) += *(_DWORD *)(v17 + 44) & 0xFFFFF;
    *(void *)(v18[629] - 8) += *(_DWORD *)(v17 + 48) & 0xFFFFF;
    *(void *)(v18[632] - 8) += *(_DWORD *)(v17 + 52) & 0xFFFFF;
    *(void *)(v18[635] - 8) += *(unsigned __int16 *)(v17 + 58);
    *(void *)(v18[638] - 8) += *(unsigned __int16 *)(v17 + 56);
    *(void *)(v18[641] - 8) += *(_DWORD *)(v17 + 32) & 0xFFFFF;
    *(void *)(v18[644] - 8) += *(_DWORD *)(v17 + 36) & 0xFFFFF;
    *(void *)(v18[647] - 8) += *(_DWORD *)(v17 + 40) & 0xFFFFF;
    *(void *)(v18[650] - 8) += *(_DWORD *)(v17 + 24) & 0xFFFFF;
    *(void *)(v18[653] - 8) += *(_DWORD *)(v17 + 28) & 0xFFFFF;
  }
}

void sub_152DDC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v8 = (char *)v6[197];
      unint64_t v26 = v6[198];
      if ((unint64_t)v8 >= v26)
      {
        uint64_t v10 = (char *)v6[196];
        uint64_t v28 = (v8 - v10) >> 3;
        if ((unint64_t)(v28 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v29 = v26 - (void)v10;
        unint64_t v30 = (uint64_t)(v26 - (void)v10) >> 2;
        if (v30 <= v28 + 1) {
          unint64_t v30 = v28 + 1;
        }
        if (v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          uint64_t v32 = (char *)sub_5714((uint64_t)(v6 + 198), v31);
          uint64_t v8 = (char *)v6[197];
          uint64_t v10 = (char *)v6[196];
        }
        else
        {
          uint64_t v32 = 0;
        }
        uint64_t v33 = &v32[8 * v28];
        unint64_t v34 = &v32[8 * v31];
        *(void *)uint64_t v33 = v7;
        unint64_t v27 = v33 + 8;
        while (v8 != v10)
        {
          uint64_t v36 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v33 - 1) = v36;
          v33 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v8 = (char *)v6[197];
      unint64_t v9 = v6[198];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[196];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 198), v14);
          uint64_t v8 = (char *)v6[197];
          uint64_t v10 = (char *)v6[196];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v33 = &v15[8 * v11];
        unint64_t v34 = &v15[8 * v14];
        *(void *)uint64_t v33 = v7;
        unint64_t v27 = v33 + 8;
        while (v8 != v10)
        {
          uint64_t v35 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v33 - 1) = v35;
          v33 -= 8;
        }
LABEL_35:
        v6[196] = v33;
        v6[197] = v27;
        v6[198] = v34;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    unint64_t v27 = v8 + 8;
LABEL_37:
    v6[197] = v27;
LABEL_38:
    int v37 = 1 << *(_DWORD *)(v3 + 48);
    if (v37 == 2)
    {
      unint64_t v38 = *(void **)a1[1];
      uint64_t v39 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v40 = (char *)v38[200];
      unint64_t v48 = v38[201];
      if ((unint64_t)v40 >= v48)
      {
        unint64_t v42 = (char *)v38[199];
        uint64_t v50 = (v40 - v42) >> 3;
        if ((unint64_t)(v50 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v51 = v48 - (void)v42;
        unint64_t v52 = (uint64_t)(v48 - (void)v42) >> 2;
        if (v52 <= v50 + 1) {
          unint64_t v52 = v50 + 1;
        }
        if (v51 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          uint64_t v54 = (char *)sub_5714((uint64_t)(v38 + 201), v53);
          unint64_t v40 = (char *)v38[200];
          unint64_t v42 = (char *)v38[199];
        }
        else
        {
          uint64_t v54 = 0;
        }
        uint64_t v55 = &v54[8 * v50];
        unint64_t v56 = &v54[8 * v53];
        *(void *)uint64_t v55 = v39;
        unint64_t v49 = v55 + 8;
        while (v40 != v42)
        {
          uint64_t v58 = *((void *)v40 - 1);
          v40 -= 8;
          *((void *)v55 - 1) = v58;
          v55 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v37 != 1) {
        goto LABEL_70;
      }
      unint64_t v38 = *(void **)a1[1];
      uint64_t v39 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v40 = (char *)v38[200];
      unint64_t v41 = v38[201];
      if ((unint64_t)v40 >= v41)
      {
        unint64_t v42 = (char *)v38[199];
        uint64_t v43 = (v40 - v42) >> 3;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v44 = v41 - (void)v42;
        unint64_t v45 = (uint64_t)(v41 - (void)v42) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          int v47 = (char *)sub_5714((uint64_t)(v38 + 201), v46);
          unint64_t v40 = (char *)v38[200];
          unint64_t v42 = (char *)v38[199];
        }
        else
        {
          int v47 = 0;
        }
        uint64_t v55 = &v47[8 * v43];
        unint64_t v56 = &v47[8 * v46];
        *(void *)uint64_t v55 = v39;
        unint64_t v49 = v55 + 8;
        while (v40 != v42)
        {
          uint64_t v57 = *((void *)v40 - 1);
          v40 -= 8;
          *((void *)v55 - 1) = v57;
          v55 -= 8;
        }
LABEL_67:
        v38[199] = v55;
        v38[200] = v49;
        v38[201] = v56;
        if (v42) {
          operator delete(v42);
        }
        goto LABEL_69;
      }
    }
    *(void *)unint64_t v40 = v39;
    unint64_t v49 = v40 + 8;
LABEL_69:
    v38[200] = v49;
LABEL_70:
    int v59 = 1 << *(_DWORD *)(v3 + 48);
    if (v59 == 2)
    {
      unint64_t v60 = *(void **)a1[1];
      uint64_t v61 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      unint64_t v62 = (char *)v60[203];
      unint64_t v70 = v60[204];
      if ((unint64_t)v62 >= v70)
      {
        unint64_t v64 = (char *)v60[202];
        uint64_t v72 = (v62 - v64) >> 3;
        if ((unint64_t)(v72 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v73 = v70 - (void)v64;
        unint64_t v74 = (uint64_t)(v70 - (void)v64) >> 2;
        if (v74 <= v72 + 1) {
          unint64_t v74 = v72 + 1;
        }
        if (v73 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v74;
        }
        if (v75)
        {
          uint64_t v76 = (char *)sub_5714((uint64_t)(v60 + 204), v75);
          unint64_t v62 = (char *)v60[203];
          unint64_t v64 = (char *)v60[202];
        }
        else
        {
          uint64_t v76 = 0;
        }
        uint64_t v77 = &v76[8 * v72];
        uint64_t v78 = &v76[8 * v75];
        *(void *)uint64_t v77 = v61;
        unint64_t v71 = v77 + 8;
        while (v62 != v64)
        {
          uint64_t v80 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v77 - 1) = v80;
          v77 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v59 != 1) {
        goto LABEL_102;
      }
      unint64_t v60 = *(void **)a1[1];
      uint64_t v61 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      unint64_t v62 = (char *)v60[203];
      unint64_t v63 = v60[204];
      if ((unint64_t)v62 >= v63)
      {
        unint64_t v64 = (char *)v60[202];
        uint64_t v65 = (v62 - v64) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v66 = v63 - (void)v64;
        unint64_t v67 = (uint64_t)(v63 - (void)v64) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          uint64_t v69 = (char *)sub_5714((uint64_t)(v60 + 204), v68);
          unint64_t v62 = (char *)v60[203];
          unint64_t v64 = (char *)v60[202];
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v77 = &v69[8 * v65];
        uint64_t v78 = &v69[8 * v68];
        *(void *)uint64_t v77 = v61;
        unint64_t v71 = v77 + 8;
        while (v62 != v64)
        {
          uint64_t v79 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v77 - 1) = v79;
          v77 -= 8;
        }
LABEL_99:
        v60[202] = v77;
        v60[203] = v71;
        v60[204] = v78;
        if (v64) {
          operator delete(v64);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v62 = v61;
    unint64_t v71 = v62 + 8;
LABEL_101:
    v60[203] = v71;
LABEL_102:
    int v81 = 1 << *(_DWORD *)(v3 + 48);
    if (v81 == 2)
    {
      unint64_t v82 = *(void **)a1[1];
      uint64_t v83 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v84 = (char *)v82[206];
      unint64_t v92 = v82[207];
      if ((unint64_t)v84 >= v92)
      {
        uint64_t v86 = (char *)v82[205];
        uint64_t v94 = (v84 - v86) >> 3;
        if ((unint64_t)(v94 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v95 = v92 - (void)v86;
        unint64_t v96 = (uint64_t)(v92 - (void)v86) >> 2;
        if (v96 <= v94 + 1) {
          unint64_t v96 = v94 + 1;
        }
        if (v95 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v96;
        }
        if (v97)
        {
          int v98 = (char *)sub_5714((uint64_t)(v82 + 207), v97);
          unint64_t v84 = (char *)v82[206];
          uint64_t v86 = (char *)v82[205];
        }
        else
        {
          int v98 = 0;
        }
        uint64_t v99 = &v98[8 * v94];
        uint64_t v100 = &v98[8 * v97];
        *(void *)uint64_t v99 = v83;
        unint64_t v93 = v99 + 8;
        while (v84 != v86)
        {
          uint64_t v102 = *((void *)v84 - 1);
          v84 -= 8;
          *((void *)v99 - 1) = v102;
          v99 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v81 != 1) {
        goto LABEL_134;
      }
      unint64_t v82 = *(void **)a1[1];
      uint64_t v83 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v84 = (char *)v82[206];
      unint64_t v85 = v82[207];
      if ((unint64_t)v84 >= v85)
      {
        uint64_t v86 = (char *)v82[205];
        uint64_t v87 = (v84 - v86) >> 3;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v88 = v85 - (void)v86;
        unint64_t v89 = (uint64_t)(v85 - (void)v86) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v82 + 207), v90);
          unint64_t v84 = (char *)v82[206];
          uint64_t v86 = (char *)v82[205];
        }
        else
        {
          unint64_t v91 = 0;
        }
        uint64_t v99 = &v91[8 * v87];
        uint64_t v100 = &v91[8 * v90];
        *(void *)uint64_t v99 = v83;
        unint64_t v93 = v99 + 8;
        while (v84 != v86)
        {
          uint64_t v101 = *((void *)v84 - 1);
          v84 -= 8;
          *((void *)v99 - 1) = v101;
          v99 -= 8;
        }
LABEL_131:
        v82[205] = v99;
        v82[206] = v93;
        v82[207] = v100;
        if (v86) {
          operator delete(v86);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v84 = v83;
    unint64_t v93 = v84 + 8;
LABEL_133:
    v82[206] = v93;
LABEL_134:
    int v103 = 1 << *(_DWORD *)(v3 + 48);
    if (v103 == 2)
    {
      unint64_t v104 = *(void **)a1[1];
      uint64_t v105 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      unint64_t v106 = (char *)v104[209];
      unint64_t v114 = v104[210];
      if ((unint64_t)v106 >= v114)
      {
        unint64_t v108 = (char *)v104[208];
        uint64_t v116 = (v106 - v108) >> 3;
        if ((unint64_t)(v116 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v117 = v114 - (void)v108;
        unint64_t v118 = (uint64_t)(v114 - (void)v108) >> 2;
        if (v118 <= v116 + 1) {
          unint64_t v118 = v116 + 1;
        }
        if (v117 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v119 = v118;
        }
        if (v119)
        {
          uint64_t v120 = (char *)sub_5714((uint64_t)(v104 + 210), v119);
          unint64_t v106 = (char *)v104[209];
          unint64_t v108 = (char *)v104[208];
        }
        else
        {
          uint64_t v120 = 0;
        }
        uint64_t v121 = &v120[8 * v116];
        int v122 = &v120[8 * v119];
        *(void *)uint64_t v121 = v105;
        unint64_t v115 = v121 + 8;
        while (v106 != v108)
        {
          uint64_t v124 = *((void *)v106 - 1);
          v106 -= 8;
          *((void *)v121 - 1) = v124;
          v121 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v103 != 1) {
        goto LABEL_166;
      }
      unint64_t v104 = *(void **)a1[1];
      uint64_t v105 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      unint64_t v106 = (char *)v104[209];
      unint64_t v107 = v104[210];
      if ((unint64_t)v106 >= v107)
      {
        unint64_t v108 = (char *)v104[208];
        uint64_t v109 = (v106 - v108) >> 3;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v110 = v107 - (void)v108;
        unint64_t v111 = (uint64_t)(v107 - (void)v108) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          uint64_t v113 = (char *)sub_5714((uint64_t)(v104 + 210), v112);
          unint64_t v106 = (char *)v104[209];
          unint64_t v108 = (char *)v104[208];
        }
        else
        {
          uint64_t v113 = 0;
        }
        uint64_t v121 = &v113[8 * v109];
        int v122 = &v113[8 * v112];
        *(void *)uint64_t v121 = v105;
        unint64_t v115 = v121 + 8;
        while (v106 != v108)
        {
          uint64_t v123 = *((void *)v106 - 1);
          v106 -= 8;
          *((void *)v121 - 1) = v123;
          v121 -= 8;
        }
LABEL_163:
        v104[208] = v121;
        v104[209] = v115;
        v104[210] = v122;
        if (v108) {
          operator delete(v108);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v106 = v105;
    unint64_t v115 = v106 + 8;
LABEL_165:
    v104[209] = v115;
LABEL_166:
    int v125 = 1 << *(_DWORD *)(v3 + 48);
    if (v125 == 2)
    {
      unint64_t v126 = *(void **)a1[1];
      uint64_t v127 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      uint64_t v128 = (char *)v126[212];
      unint64_t v136 = v126[213];
      if ((unint64_t)v128 >= v136)
      {
        unint64_t v130 = (char *)v126[211];
        uint64_t v138 = (v128 - v130) >> 3;
        if ((unint64_t)(v138 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v139 = v136 - (void)v130;
        unint64_t v140 = (uint64_t)(v136 - (void)v130) >> 2;
        if (v140 <= v138 + 1) {
          unint64_t v140 = v138 + 1;
        }
        if (v139 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v140;
        }
        if (v141)
        {
          uint64_t v142 = (char *)sub_5714((uint64_t)(v126 + 213), v141);
          uint64_t v128 = (char *)v126[212];
          unint64_t v130 = (char *)v126[211];
        }
        else
        {
          uint64_t v142 = 0;
        }
        uint64_t v143 = &v142[8 * v138];
        int v144 = &v142[8 * v141];
        *(void *)uint64_t v143 = v127;
        unint64_t v137 = v143 + 8;
        while (v128 != v130)
        {
          uint64_t v146 = *((void *)v128 - 1);
          v128 -= 8;
          *((void *)v143 - 1) = v146;
          v143 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v125 != 1) {
        goto LABEL_198;
      }
      unint64_t v126 = *(void **)a1[1];
      uint64_t v127 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      uint64_t v128 = (char *)v126[212];
      unint64_t v129 = v126[213];
      if ((unint64_t)v128 >= v129)
      {
        unint64_t v130 = (char *)v126[211];
        uint64_t v131 = (v128 - v130) >> 3;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v132 = v129 - (void)v130;
        unint64_t v133 = (uint64_t)(v129 - (void)v130) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          uint64_t v135 = (char *)sub_5714((uint64_t)(v126 + 213), v134);
          uint64_t v128 = (char *)v126[212];
          unint64_t v130 = (char *)v126[211];
        }
        else
        {
          uint64_t v135 = 0;
        }
        uint64_t v143 = &v135[8 * v131];
        int v144 = &v135[8 * v134];
        *(void *)uint64_t v143 = v127;
        unint64_t v137 = v143 + 8;
        while (v128 != v130)
        {
          uint64_t v145 = *((void *)v128 - 1);
          v128 -= 8;
          *((void *)v143 - 1) = v145;
          v143 -= 8;
        }
LABEL_195:
        v126[211] = v143;
        v126[212] = v137;
        v126[213] = v144;
        if (v130) {
          operator delete(v130);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v128 = v127;
    unint64_t v137 = v128 + 8;
LABEL_197:
    v126[212] = v137;
LABEL_198:
    int v147 = 1 << *(_DWORD *)(v3 + 48);
    if (v147 == 2)
    {
      unint64_t v148 = *(void **)a1[1];
      uint64_t v149 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v150 = (char *)v148[215];
      unint64_t v158 = v148[216];
      if ((unint64_t)v150 >= v158)
      {
        unint64_t v152 = (char *)v148[214];
        uint64_t v160 = (v150 - v152) >> 3;
        if ((unint64_t)(v160 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v161 = v158 - (void)v152;
        unint64_t v162 = (uint64_t)(v158 - (void)v152) >> 2;
        if (v162 <= v160 + 1) {
          unint64_t v162 = v160 + 1;
        }
        if (v161 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v163 = v162;
        }
        if (v163)
        {
          uint64_t v164 = (char *)sub_5714((uint64_t)(v148 + 216), v163);
          uint64_t v150 = (char *)v148[215];
          unint64_t v152 = (char *)v148[214];
        }
        else
        {
          uint64_t v164 = 0;
        }
        uint64_t v165 = &v164[8 * v160];
        int v166 = &v164[8 * v163];
        *(void *)uint64_t v165 = v149;
        unint64_t v159 = v165 + 8;
        while (v150 != v152)
        {
          uint64_t v168 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v165 - 1) = v168;
          v165 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v147 != 1) {
        goto LABEL_230;
      }
      unint64_t v148 = *(void **)a1[1];
      uint64_t v149 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v150 = (char *)v148[215];
      unint64_t v151 = v148[216];
      if ((unint64_t)v150 >= v151)
      {
        unint64_t v152 = (char *)v148[214];
        uint64_t v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v154 = v151 - (void)v152;
        unint64_t v155 = (uint64_t)(v151 - (void)v152) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          uint64_t v157 = (char *)sub_5714((uint64_t)(v148 + 216), v156);
          uint64_t v150 = (char *)v148[215];
          unint64_t v152 = (char *)v148[214];
        }
        else
        {
          uint64_t v157 = 0;
        }
        uint64_t v165 = &v157[8 * v153];
        int v166 = &v157[8 * v156];
        *(void *)uint64_t v165 = v149;
        unint64_t v159 = v165 + 8;
        while (v150 != v152)
        {
          uint64_t v167 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v165 - 1) = v167;
          v165 -= 8;
        }
LABEL_227:
        v148[214] = v165;
        v148[215] = v159;
        v148[216] = v166;
        if (v152) {
          operator delete(v152);
        }
        goto LABEL_229;
      }
    }
    *(void *)uint64_t v150 = v149;
    unint64_t v159 = v150 + 8;
LABEL_229:
    v148[215] = v159;
LABEL_230:
    int v169 = 1 << *(_DWORD *)(v3 + 48);
    if (v169 == 2)
    {
      unint64_t v170 = *(void **)a1[1];
      uint64_t v171 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      uint64_t v172 = (char *)v170[218];
      unint64_t v180 = v170[219];
      if ((unint64_t)v172 >= v180)
      {
        unint64_t v174 = (char *)v170[217];
        uint64_t v182 = (v172 - v174) >> 3;
        if ((unint64_t)(v182 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v183 = v180 - (void)v174;
        unint64_t v184 = (uint64_t)(v180 - (void)v174) >> 2;
        if (v184 <= v182 + 1) {
          unint64_t v184 = v182 + 1;
        }
        if (v183 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v185 = v184;
        }
        if (v185)
        {
          uint64_t v186 = (char *)sub_5714((uint64_t)(v170 + 219), v185);
          uint64_t v172 = (char *)v170[218];
          unint64_t v174 = (char *)v170[217];
        }
        else
        {
          uint64_t v186 = 0;
        }
        uint64_t v187 = &v186[8 * v182];
        int v188 = &v186[8 * v185];
        *(void *)uint64_t v187 = v171;
        unint64_t v181 = v187 + 8;
        while (v172 != v174)
        {
          uint64_t v190 = *((void *)v172 - 1);
          v172 -= 8;
          *((void *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v169 != 1) {
        goto LABEL_262;
      }
      unint64_t v170 = *(void **)a1[1];
      uint64_t v171 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      uint64_t v172 = (char *)v170[218];
      unint64_t v173 = v170[219];
      if ((unint64_t)v172 >= v173)
      {
        unint64_t v174 = (char *)v170[217];
        uint64_t v175 = (v172 - v174) >> 3;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v176 = v173 - (void)v174;
        unint64_t v177 = (uint64_t)(v173 - (void)v174) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          uint64_t v179 = (char *)sub_5714((uint64_t)(v170 + 219), v178);
          uint64_t v172 = (char *)v170[218];
          unint64_t v174 = (char *)v170[217];
        }
        else
        {
          uint64_t v179 = 0;
        }
        uint64_t v187 = &v179[8 * v175];
        int v188 = &v179[8 * v178];
        *(void *)uint64_t v187 = v171;
        unint64_t v181 = v187 + 8;
        while (v172 != v174)
        {
          uint64_t v189 = *((void *)v172 - 1);
          v172 -= 8;
          *((void *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v170[217] = v187;
        v170[218] = v181;
        v170[219] = v188;
        if (v174) {
          operator delete(v174);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v172 = v171;
    unint64_t v181 = v172 + 8;
LABEL_261:
    v170[218] = v181;
LABEL_262:
    int v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      unint64_t v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
      uint64_t v194 = (char *)v192[221];
      unint64_t v202 = v192[222];
      if ((unint64_t)v194 >= v202)
      {
        unint64_t v196 = (char *)v192[220];
        uint64_t v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v205 = v202 - (void)v196;
        unint64_t v206 = (uint64_t)(v202 - (void)v196) >> 2;
        if (v206 <= v204 + 1) {
          unint64_t v206 = v204 + 1;
        }
        if (v205 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v207 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v207 = v206;
        }
        if (v207)
        {
          uint64_t v208 = (char *)sub_5714((uint64_t)(v192 + 222), v207);
          uint64_t v194 = (char *)v192[221];
          unint64_t v196 = (char *)v192[220];
        }
        else
        {
          uint64_t v208 = 0;
        }
        uint64_t v209 = &v208[8 * v204];
        int v210 = &v208[8 * v207];
        *(void *)uint64_t v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v212 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1) {
        goto LABEL_294;
      }
      unint64_t v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
      uint64_t v194 = (char *)v192[221];
      unint64_t v195 = v192[222];
      if ((unint64_t)v194 >= v195)
      {
        unint64_t v196 = (char *)v192[220];
        uint64_t v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v198 = v195 - (void)v196;
        unint64_t v199 = (uint64_t)(v195 - (void)v196) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          uint64_t v201 = (char *)sub_5714((uint64_t)(v192 + 222), v200);
          uint64_t v194 = (char *)v192[221];
          unint64_t v196 = (char *)v192[220];
        }
        else
        {
          uint64_t v201 = 0;
        }
        uint64_t v209 = &v201[8 * v197];
        int v210 = &v201[8 * v200];
        *(void *)uint64_t v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v211 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[220] = v209;
        v192[221] = v203;
        v192[222] = v210;
        if (v196) {
          operator delete(v196);
        }
        goto LABEL_293;
      }
    }
    *(void *)uint64_t v194 = v193;
    unint64_t v203 = v194 + 8;
LABEL_293:
    v192[221] = v203;
LABEL_294:
    int v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      unint64_t v216 = (char *)v214[224];
      unint64_t v224 = v214[225];
      if ((unint64_t)v216 >= v224)
      {
        unint64_t v218 = (char *)v214[223];
        uint64_t v226 = (v216 - v218) >> 3;
        if ((unint64_t)(v226 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v227 = v224 - (void)v218;
        unint64_t v228 = (uint64_t)(v224 - (void)v218) >> 2;
        if (v228 <= v226 + 1) {
          unint64_t v228 = v226 + 1;
        }
        if (v227 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v229 = v228;
        }
        if (v229)
        {
          unint64_t v230 = (char *)sub_5714((uint64_t)(v214 + 225), v229);
          unint64_t v216 = (char *)v214[224];
          unint64_t v218 = (char *)v214[223];
        }
        else
        {
          unint64_t v230 = 0;
        }
        uint64_t v231 = &v230[8 * v226];
        uint64_t v232 = &v230[8 * v229];
        *(void *)uint64_t v231 = v215;
        uint64_t v225 = v231 + 8;
        while (v216 != v218)
        {
          uint64_t v234 = *((void *)v216 - 1);
          v216 -= 8;
          *((void *)v231 - 1) = v234;
          v231 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1) {
        goto LABEL_326;
      }
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      unint64_t v216 = (char *)v214[224];
      unint64_t v217 = v214[225];
      if ((unint64_t)v216 >= v217)
      {
        unint64_t v218 = (char *)v214[223];
        uint64_t v219 = (v216 - v218) >> 3;
        if ((unint64_t)(v219 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v220 = v217 - (void)v218;
        unint64_t v221 = (uint64_t)(v217 - (void)v218) >> 2;
        if (v221 <= v219 + 1) {
          unint64_t v221 = v219 + 1;
        }
        if (v220 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v222 = v221;
        }
        if (v222)
        {
          unint64_t v223 = (char *)sub_5714((uint64_t)(v214 + 225), v222);
          unint64_t v216 = (char *)v214[224];
          unint64_t v218 = (char *)v214[223];
        }
        else
        {
          unint64_t v223 = 0;
        }
        uint64_t v231 = &v223[8 * v219];
        uint64_t v232 = &v223[8 * v222];
        *(void *)uint64_t v231 = v215;
        uint64_t v225 = v231 + 8;
        while (v216 != v218)
        {
          uint64_t v233 = *((void *)v216 - 1);
          v216 -= 8;
          *((void *)v231 - 1) = v233;
          v231 -= 8;
        }
LABEL_323:
        v214[223] = v231;
        v214[224] = v225;
        v214[225] = v232;
        if (v218) {
          operator delete(v218);
        }
        goto LABEL_325;
      }
    }
    *(void *)unint64_t v216 = v215;
    uint64_t v225 = v216 + 8;
LABEL_325:
    v214[224] = v225;
LABEL_326:
    int v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      unint64_t v238 = (char *)v236[227];
      unint64_t v246 = v236[228];
      if ((unint64_t)v238 >= v246)
      {
        unint64_t v240 = (char *)v236[226];
        uint64_t v248 = (v238 - v240) >> 3;
        if ((unint64_t)(v248 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v249 = v246 - (void)v240;
        unint64_t v250 = (uint64_t)(v246 - (void)v240) >> 2;
        if (v250 <= v248 + 1) {
          unint64_t v250 = v248 + 1;
        }
        if (v249 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v251 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v251 = v250;
        }
        if (v251)
        {
          unsigned int v252 = (char *)sub_5714((uint64_t)(v236 + 228), v251);
          unint64_t v238 = (char *)v236[227];
          unint64_t v240 = (char *)v236[226];
        }
        else
        {
          unsigned int v252 = 0;
        }
        uint64_t v253 = &v252[8 * v248];
        uint64_t v254 = &v252[8 * v251];
        *(void *)uint64_t v253 = v237;
        unint64_t v247 = v253 + 8;
        while (v238 != v240)
        {
          uint64_t v256 = *((void *)v238 - 1);
          v238 -= 8;
          *((void *)v253 - 1) = v256;
          v253 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1) {
        goto LABEL_358;
      }
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      unint64_t v238 = (char *)v236[227];
      unint64_t v239 = v236[228];
      if ((unint64_t)v238 >= v239)
      {
        unint64_t v240 = (char *)v236[226];
        uint64_t v241 = (v238 - v240) >> 3;
        if ((unint64_t)(v241 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v242 = v239 - (void)v240;
        unint64_t v243 = (uint64_t)(v239 - (void)v240) >> 2;
        if (v243 <= v241 + 1) {
          unint64_t v243 = v241 + 1;
        }
        if (v242 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v244 = v243;
        }
        if (v244)
        {
          unint64_t v245 = (char *)sub_5714((uint64_t)(v236 + 228), v244);
          unint64_t v238 = (char *)v236[227];
          unint64_t v240 = (char *)v236[226];
        }
        else
        {
          unint64_t v245 = 0;
        }
        uint64_t v253 = &v245[8 * v241];
        uint64_t v254 = &v245[8 * v244];
        *(void *)uint64_t v253 = v237;
        unint64_t v247 = v253 + 8;
        while (v238 != v240)
        {
          uint64_t v255 = *((void *)v238 - 1);
          v238 -= 8;
          *((void *)v253 - 1) = v255;
          v253 -= 8;
        }
LABEL_355:
        v236[226] = v253;
        v236[227] = v247;
        v236[228] = v254;
        if (v240) {
          operator delete(v240);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v238 = v237;
    unint64_t v247 = v238 + 8;
LABEL_357:
    v236[227] = v247;
LABEL_358:
    int v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      int v258 = *(void **)a1[1];
      uint64_t v259 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      unint64_t v260 = (char *)v258[230];
      unint64_t v268 = v258[231];
      if ((unint64_t)v260 >= v268)
      {
        unint64_t v262 = (char *)v258[229];
        uint64_t v270 = (v260 - v262) >> 3;
        if ((unint64_t)(v270 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v271 = v268 - (void)v262;
        unint64_t v272 = (uint64_t)(v268 - (void)v262) >> 2;
        if (v272 <= v270 + 1) {
          unint64_t v272 = v270 + 1;
        }
        if (v271 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v273 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v273 = v272;
        }
        if (v273)
        {
          unint64_t v274 = (char *)sub_5714((uint64_t)(v258 + 231), v273);
          unint64_t v260 = (char *)v258[230];
          unint64_t v262 = (char *)v258[229];
        }
        else
        {
          unint64_t v274 = 0;
        }
        uint64_t v275 = &v274[8 * v270];
        uint64_t v276 = &v274[8 * v273];
        *(void *)uint64_t v275 = v259;
        unint64_t v269 = v275 + 8;
        while (v260 != v262)
        {
          uint64_t v278 = *((void *)v260 - 1);
          v260 -= 8;
          *((void *)v275 - 1) = v278;
          v275 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1) {
        goto LABEL_390;
      }
      int v258 = *(void **)a1[1];
      uint64_t v259 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      unint64_t v260 = (char *)v258[230];
      unint64_t v261 = v258[231];
      if ((unint64_t)v260 >= v261)
      {
        unint64_t v262 = (char *)v258[229];
        uint64_t v263 = (v260 - v262) >> 3;
        if ((unint64_t)(v263 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v264 = v261 - (void)v262;
        unint64_t v265 = (uint64_t)(v261 - (void)v262) >> 2;
        if (v265 <= v263 + 1) {
          unint64_t v265 = v263 + 1;
        }
        if (v264 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v266 = v265;
        }
        if (v266)
        {
          unint64_t v267 = (char *)sub_5714((uint64_t)(v258 + 231), v266);
          unint64_t v260 = (char *)v258[230];
          unint64_t v262 = (char *)v258[229];
        }
        else
        {
          unint64_t v267 = 0;
        }
        uint64_t v275 = &v267[8 * v263];
        uint64_t v276 = &v267[8 * v266];
        *(void *)uint64_t v275 = v259;
        unint64_t v269 = v275 + 8;
        while (v260 != v262)
        {
          uint64_t v277 = *((void *)v260 - 1);
          v260 -= 8;
          *((void *)v275 - 1) = v277;
          v275 -= 8;
        }
LABEL_387:
        v258[229] = v275;
        v258[230] = v269;
        v258[231] = v276;
        if (v262) {
          operator delete(v262);
        }
        goto LABEL_389;
      }
    }
    *(void *)unint64_t v260 = v259;
    unint64_t v269 = v260 + 8;
LABEL_389:
    v258[230] = v269;
LABEL_390:
    int v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      unint64_t v280 = *(void **)a1[1];
      uint64_t v281 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      int v282 = (char *)v280[233];
      unint64_t v290 = v280[234];
      if ((unint64_t)v282 >= v290)
      {
        unint64_t v284 = (char *)v280[232];
        uint64_t v292 = (v282 - v284) >> 3;
        if ((unint64_t)(v292 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v293 = v290 - (void)v284;
        unint64_t v294 = (uint64_t)(v290 - (void)v284) >> 2;
        if (v294 <= v292 + 1) {
          unint64_t v294 = v292 + 1;
        }
        if (v293 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v295 = v294;
        }
        if (v295)
        {
          unint64_t v296 = (char *)sub_5714((uint64_t)(v280 + 234), v295);
          int v282 = (char *)v280[233];
          unint64_t v284 = (char *)v280[232];
        }
        else
        {
          unint64_t v296 = 0;
        }
        uint64_t v297 = &v296[8 * v292];
        uint64_t v298 = &v296[8 * v295];
        *(void *)uint64_t v297 = v281;
        unint64_t v291 = v297 + 8;
        while (v282 != v284)
        {
          uint64_t v300 = *((void *)v282 - 1);
          v282 -= 8;
          *((void *)v297 - 1) = v300;
          v297 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v279 != 1) {
        goto LABEL_422;
      }
      unint64_t v280 = *(void **)a1[1];
      uint64_t v281 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      int v282 = (char *)v280[233];
      unint64_t v283 = v280[234];
      if ((unint64_t)v282 >= v283)
      {
        unint64_t v284 = (char *)v280[232];
        uint64_t v285 = (v282 - v284) >> 3;
        if ((unint64_t)(v285 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v286 = v283 - (void)v284;
        unint64_t v287 = (uint64_t)(v283 - (void)v284) >> 2;
        if (v287 <= v285 + 1) {
          unint64_t v287 = v285 + 1;
        }
        if (v286 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v288 = v287;
        }
        if (v288)
        {
          unint64_t v289 = (char *)sub_5714((uint64_t)(v280 + 234), v288);
          int v282 = (char *)v280[233];
          unint64_t v284 = (char *)v280[232];
        }
        else
        {
          unint64_t v289 = 0;
        }
        uint64_t v297 = &v289[8 * v285];
        uint64_t v298 = &v289[8 * v288];
        *(void *)uint64_t v297 = v281;
        unint64_t v291 = v297 + 8;
        while (v282 != v284)
        {
          uint64_t v299 = *((void *)v282 - 1);
          v282 -= 8;
          *((void *)v297 - 1) = v299;
          v297 -= 8;
        }
LABEL_419:
        v280[232] = v297;
        v280[233] = v291;
        v280[234] = v298;
        if (v284) {
          operator delete(v284);
        }
        goto LABEL_421;
      }
    }
    *(void *)int v282 = v281;
    unint64_t v291 = v282 + 8;
LABEL_421:
    v280[233] = v291;
LABEL_422:
    int v301 = 1 << *(_DWORD *)(v3 + 48);
    if (v301 == 2)
    {
      int v302 = *(void **)a1[1];
      uint64_t v303 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
      unint64_t v304 = (char *)v302[236];
      unint64_t v312 = v302[237];
      if ((unint64_t)v304 >= v312)
      {
        unint64_t v306 = (char *)v302[235];
        uint64_t v314 = (v304 - v306) >> 3;
        if ((unint64_t)(v314 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v315 = v312 - (void)v306;
        unint64_t v316 = (uint64_t)(v312 - (void)v306) >> 2;
        if (v316 <= v314 + 1) {
          unint64_t v316 = v314 + 1;
        }
        if (v315 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v317 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v317 = v316;
        }
        if (v317)
        {
          unint64_t v318 = (char *)sub_5714((uint64_t)(v302 + 237), v317);
          unint64_t v304 = (char *)v302[236];
          unint64_t v306 = (char *)v302[235];
        }
        else
        {
          unint64_t v318 = 0;
        }
        uint64_t v319 = &v318[8 * v314];
        uint64_t v320 = &v318[8 * v317];
        *(void *)uint64_t v319 = v303;
        unint64_t v313 = v319 + 8;
        while (v304 != v306)
        {
          uint64_t v322 = *((void *)v304 - 1);
          v304 -= 8;
          *((void *)v319 - 1) = v322;
          v319 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v301 != 1) {
        goto LABEL_454;
      }
      int v302 = *(void **)a1[1];
      uint64_t v303 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
      unint64_t v304 = (char *)v302[236];
      unint64_t v305 = v302[237];
      if ((unint64_t)v304 >= v305)
      {
        unint64_t v306 = (char *)v302[235];
        uint64_t v307 = (v304 - v306) >> 3;
        if ((unint64_t)(v307 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v308 = v305 - (void)v306;
        unint64_t v309 = (uint64_t)(v305 - (void)v306) >> 2;
        if (v309 <= v307 + 1) {
          unint64_t v309 = v307 + 1;
        }
        if (v308 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v310 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v310 = v309;
        }
        if (v310)
        {
          unint64_t v311 = (char *)sub_5714((uint64_t)(v302 + 237), v310);
          unint64_t v304 = (char *)v302[236];
          unint64_t v306 = (char *)v302[235];
        }
        else
        {
          unint64_t v311 = 0;
        }
        uint64_t v319 = &v311[8 * v307];
        uint64_t v320 = &v311[8 * v310];
        *(void *)uint64_t v319 = v303;
        unint64_t v313 = v319 + 8;
        while (v304 != v306)
        {
          uint64_t v321 = *((void *)v304 - 1);
          v304 -= 8;
          *((void *)v319 - 1) = v321;
          v319 -= 8;
        }
LABEL_451:
        v302[235] = v319;
        v302[236] = v313;
        v302[237] = v320;
        if (v306) {
          operator delete(v306);
        }
        goto LABEL_453;
      }
    }
    *(void *)unint64_t v304 = v303;
    unint64_t v313 = v304 + 8;
LABEL_453:
    v302[236] = v313;
LABEL_454:
    int v323 = 1 << *(_DWORD *)(v3 + 48);
    if (v323 == 2)
    {
      unint64_t v324 = *(void **)a1[1];
      uint64_t v325 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      int v326 = (char *)v324[239];
      unint64_t v334 = v324[240];
      if ((unint64_t)v326 >= v334)
      {
        unint64_t v328 = (char *)v324[238];
        uint64_t v336 = (v326 - v328) >> 3;
        if ((unint64_t)(v336 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v337 = v334 - (void)v328;
        unint64_t v338 = (uint64_t)(v334 - (void)v328) >> 2;
        if (v338 <= v336 + 1) {
          unint64_t v338 = v336 + 1;
        }
        if (v337 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v339 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v339 = v338;
        }
        if (v339)
        {
          unint64_t v340 = (char *)sub_5714((uint64_t)(v324 + 240), v339);
          int v326 = (char *)v324[239];
          unint64_t v328 = (char *)v324[238];
        }
        else
        {
          unint64_t v340 = 0;
        }
        uint64_t v341 = &v340[8 * v336];
        uint64_t v342 = &v340[8 * v339];
        *(void *)uint64_t v341 = v325;
        unint64_t v335 = v341 + 8;
        while (v326 != v328)
        {
          uint64_t v344 = *((void *)v326 - 1);
          v326 -= 8;
          *((void *)v341 - 1) = v344;
          v341 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v323 != 1) {
        goto LABEL_486;
      }
      unint64_t v324 = *(void **)a1[1];
      uint64_t v325 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      int v326 = (char *)v324[239];
      unint64_t v327 = v324[240];
      if ((unint64_t)v326 >= v327)
      {
        unint64_t v328 = (char *)v324[238];
        uint64_t v329 = (v326 - v328) >> 3;
        if ((unint64_t)(v329 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v330 = v327 - (void)v328;
        unint64_t v331 = (uint64_t)(v327 - (void)v328) >> 2;
        if (v331 <= v329 + 1) {
          unint64_t v331 = v329 + 1;
        }
        if (v330 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v332 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v332 = v331;
        }
        if (v332)
        {
          uint64_t v333 = (char *)sub_5714((uint64_t)(v324 + 240), v332);
          int v326 = (char *)v324[239];
          unint64_t v328 = (char *)v324[238];
        }
        else
        {
          uint64_t v333 = 0;
        }
        uint64_t v341 = &v333[8 * v329];
        uint64_t v342 = &v333[8 * v332];
        *(void *)uint64_t v341 = v325;
        unint64_t v335 = v341 + 8;
        while (v326 != v328)
        {
          uint64_t v343 = *((void *)v326 - 1);
          v326 -= 8;
          *((void *)v341 - 1) = v343;
          v341 -= 8;
        }
LABEL_483:
        v324[238] = v341;
        v324[239] = v335;
        v324[240] = v342;
        if (v328) {
          operator delete(v328);
        }
        goto LABEL_485;
      }
    }
    *(void *)int v326 = v325;
    unint64_t v335 = v326 + 8;
LABEL_485:
    v324[239] = v335;
LABEL_486:
    int v345 = 1 << *(_DWORD *)(v3 + 48);
    if (v345 == 2)
    {
      unsigned int v346 = *(void **)a1[1];
      uint64_t v347 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      unint64_t v348 = (char *)v346[242];
      unint64_t v356 = v346[243];
      if ((unint64_t)v348 >= v356)
      {
        unint64_t v350 = (char *)v346[241];
        uint64_t v358 = (v348 - v350) >> 3;
        if ((unint64_t)(v358 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v359 = v356 - (void)v350;
        unint64_t v360 = (uint64_t)(v356 - (void)v350) >> 2;
        if (v360 <= v358 + 1) {
          unint64_t v360 = v358 + 1;
        }
        if (v359 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v361 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v361 = v360;
        }
        if (v361)
        {
          unint64_t v362 = (char *)sub_5714((uint64_t)(v346 + 243), v361);
          unint64_t v348 = (char *)v346[242];
          unint64_t v350 = (char *)v346[241];
        }
        else
        {
          unint64_t v362 = 0;
        }
        uint64_t v363 = &v362[8 * v358];
        uint64_t v364 = &v362[8 * v361];
        *(void *)uint64_t v363 = v347;
        unint64_t v357 = v363 + 8;
        while (v348 != v350)
        {
          uint64_t v366 = *((void *)v348 - 1);
          v348 -= 8;
          *((void *)v363 - 1) = v366;
          v363 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v345 != 1) {
        goto LABEL_518;
      }
      unsigned int v346 = *(void **)a1[1];
      uint64_t v347 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      unint64_t v348 = (char *)v346[242];
      unint64_t v349 = v346[243];
      if ((unint64_t)v348 >= v349)
      {
        unint64_t v350 = (char *)v346[241];
        uint64_t v351 = (v348 - v350) >> 3;
        if ((unint64_t)(v351 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v352 = v349 - (void)v350;
        unint64_t v353 = (uint64_t)(v349 - (void)v350) >> 2;
        if (v353 <= v351 + 1) {
          unint64_t v353 = v351 + 1;
        }
        if (v352 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v354 = v353;
        }
        if (v354)
        {
          int v355 = (char *)sub_5714((uint64_t)(v346 + 243), v354);
          unint64_t v348 = (char *)v346[242];
          unint64_t v350 = (char *)v346[241];
        }
        else
        {
          int v355 = 0;
        }
        uint64_t v363 = &v355[8 * v351];
        uint64_t v364 = &v355[8 * v354];
        *(void *)uint64_t v363 = v347;
        unint64_t v357 = v363 + 8;
        while (v348 != v350)
        {
          uint64_t v365 = *((void *)v348 - 1);
          v348 -= 8;
          *((void *)v363 - 1) = v365;
          v363 -= 8;
        }
LABEL_515:
        v346[241] = v363;
        v346[242] = v357;
        v346[243] = v364;
        if (v350) {
          operator delete(v350);
        }
        goto LABEL_517;
      }
    }
    *(void *)unint64_t v348 = v347;
    unint64_t v357 = v348 + 8;
LABEL_517:
    v346[242] = v357;
LABEL_518:
    int v367 = 1 << *(_DWORD *)(v3 + 48);
    if (v367 == 2)
    {
      unint64_t v368 = *(void **)a1[1];
      uint64_t v369 = *(_WORD *)(a1[2] + 66) & 0x7FFF;
      unint64_t v370 = (char *)v368[245];
      unint64_t v378 = v368[246];
      if ((unint64_t)v370 >= v378)
      {
        unint64_t v372 = (char *)v368[244];
        uint64_t v380 = (v370 - v372) >> 3;
        if ((unint64_t)(v380 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v381 = v378 - (void)v372;
        unint64_t v382 = (uint64_t)(v378 - (void)v372) >> 2;
        if (v382 <= v380 + 1) {
          unint64_t v382 = v380 + 1;
        }
        if (v381 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v383 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v383 = v382;
        }
        if (v383)
        {
          unint64_t v384 = (char *)sub_5714((uint64_t)(v368 + 246), v383);
          unint64_t v370 = (char *)v368[245];
          unint64_t v372 = (char *)v368[244];
        }
        else
        {
          unint64_t v384 = 0;
        }
        uint64_t v385 = &v384[8 * v380];
        uint64_t v386 = &v384[8 * v383];
        *(void *)uint64_t v385 = v369;
        unint64_t v379 = v385 + 8;
        while (v370 != v372)
        {
          uint64_t v388 = *((void *)v370 - 1);
          v370 -= 8;
          *((void *)v385 - 1) = v388;
          v385 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v367 != 1) {
        goto LABEL_550;
      }
      unint64_t v368 = *(void **)a1[1];
      uint64_t v369 = *(_WORD *)(a1[2] + 66) & 0x7FFF;
      unint64_t v370 = (char *)v368[245];
      unint64_t v371 = v368[246];
      if ((unint64_t)v370 >= v371)
      {
        unint64_t v372 = (char *)v368[244];
        uint64_t v373 = (v370 - v372) >> 3;
        if ((unint64_t)(v373 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v374 = v371 - (void)v372;
        unint64_t v375 = (uint64_t)(v371 - (void)v372) >> 2;
        if (v375 <= v373 + 1) {
          unint64_t v375 = v373 + 1;
        }
        if (v374 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v376 = v375;
        }
        if (v376)
        {
          unsigned int v377 = (char *)sub_5714((uint64_t)(v368 + 246), v376);
          unint64_t v370 = (char *)v368[245];
          unint64_t v372 = (char *)v368[244];
        }
        else
        {
          unsigned int v377 = 0;
        }
        uint64_t v385 = &v377[8 * v373];
        uint64_t v386 = &v377[8 * v376];
        *(void *)uint64_t v385 = v369;
        unint64_t v379 = v385 + 8;
        while (v370 != v372)
        {
          uint64_t v387 = *((void *)v370 - 1);
          v370 -= 8;
          *((void *)v385 - 1) = v387;
          v385 -= 8;
        }
LABEL_547:
        v368[244] = v385;
        v368[245] = v379;
        v368[246] = v386;
        if (v372) {
          operator delete(v372);
        }
        goto LABEL_549;
      }
    }
    *(void *)unint64_t v370 = v369;
    unint64_t v379 = v370 + 8;
LABEL_549:
    v368[245] = v379;
LABEL_550:
    int v389 = 1 << *(_DWORD *)(v3 + 48);
    if (v389 == 2)
    {
      unint64_t v390 = *(void **)a1[1];
      uint64_t v391 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      unint64_t v392 = (char *)v390[248];
      unint64_t v400 = v390[249];
      if ((unint64_t)v392 >= v400)
      {
        unint64_t v394 = (char *)v390[247];
        uint64_t v402 = (v392 - v394) >> 3;
        if ((unint64_t)(v402 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v403 = v400 - (void)v394;
        unint64_t v404 = (uint64_t)(v400 - (void)v394) >> 2;
        if (v404 <= v402 + 1) {
          unint64_t v404 = v402 + 1;
        }
        if (v403 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v405 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v405 = v404;
        }
        if (v405)
        {
          unint64_t v406 = (char *)sub_5714((uint64_t)(v390 + 249), v405);
          unint64_t v392 = (char *)v390[248];
          unint64_t v394 = (char *)v390[247];
        }
        else
        {
          unint64_t v406 = 0;
        }
        uint64_t v407 = &v406[8 * v402];
        uint64_t v408 = &v406[8 * v405];
        *(void *)uint64_t v407 = v391;
        unint64_t v401 = v407 + 8;
        while (v392 != v394)
        {
          uint64_t v410 = *((void *)v392 - 1);
          v392 -= 8;
          *((void *)v407 - 1) = v410;
          v407 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v389 != 1) {
        goto LABEL_582;
      }
      unint64_t v390 = *(void **)a1[1];
      uint64_t v391 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      unint64_t v392 = (char *)v390[248];
      unint64_t v393 = v390[249];
      if ((unint64_t)v392 >= v393)
      {
        unint64_t v394 = (char *)v390[247];
        uint64_t v395 = (v392 - v394) >> 3;
        if ((unint64_t)(v395 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v396 = v393 - (void)v394;
        unint64_t v397 = (uint64_t)(v393 - (void)v394) >> 2;
        if (v397 <= v395 + 1) {
          unint64_t v397 = v395 + 1;
        }
        if (v396 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v398 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v398 = v397;
        }
        if (v398)
        {
          unint64_t v399 = (char *)sub_5714((uint64_t)(v390 + 249), v398);
          unint64_t v392 = (char *)v390[248];
          unint64_t v394 = (char *)v390[247];
        }
        else
        {
          unint64_t v399 = 0;
        }
        uint64_t v407 = &v399[8 * v395];
        uint64_t v408 = &v399[8 * v398];
        *(void *)uint64_t v407 = v391;
        unint64_t v401 = v407 + 8;
        while (v392 != v394)
        {
          uint64_t v409 = *((void *)v392 - 1);
          v392 -= 8;
          *((void *)v407 - 1) = v409;
          v407 -= 8;
        }
LABEL_579:
        v390[247] = v407;
        v390[248] = v401;
        v390[249] = v408;
        if (v394) {
          operator delete(v394);
        }
        goto LABEL_581;
      }
    }
    *(void *)unint64_t v392 = v391;
    unint64_t v401 = v392 + 8;
LABEL_581:
    v390[248] = v401;
LABEL_582:
    int v411 = 1 << *(_DWORD *)(v3 + 48);
    if (v411 == 2)
    {
      unint64_t v412 = *(void **)a1[1];
      uint64_t v413 = *(_WORD *)(a1[2] + 68) & 0x7FFF;
      unint64_t v414 = (char *)v412[251];
      unint64_t v422 = v412[252];
      if ((unint64_t)v414 >= v422)
      {
        unint64_t v416 = (char *)v412[250];
        uint64_t v424 = (v414 - v416) >> 3;
        if ((unint64_t)(v424 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v425 = v422 - (void)v416;
        unint64_t v426 = (uint64_t)(v422 - (void)v416) >> 2;
        if (v426 <= v424 + 1) {
          unint64_t v426 = v424 + 1;
        }
        if (v425 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v427 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v427 = v426;
        }
        if (v427)
        {
          unint64_t v428 = (char *)sub_5714((uint64_t)(v412 + 252), v427);
          unint64_t v414 = (char *)v412[251];
          unint64_t v416 = (char *)v412[250];
        }
        else
        {
          unint64_t v428 = 0;
        }
        uint64_t v429 = &v428[8 * v424];
        uint64_t v430 = &v428[8 * v427];
        *(void *)uint64_t v429 = v413;
        unint64_t v423 = v429 + 8;
        while (v414 != v416)
        {
          uint64_t v432 = *((void *)v414 - 1);
          v414 -= 8;
          *((void *)v429 - 1) = v432;
          v429 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v411 != 1) {
        goto LABEL_614;
      }
      unint64_t v412 = *(void **)a1[1];
      uint64_t v413 = *(_WORD *)(a1[2] + 68) & 0x7FFF;
      unint64_t v414 = (char *)v412[251];
      unint64_t v415 = v412[252];
      if ((unint64_t)v414 >= v415)
      {
        unint64_t v416 = (char *)v412[250];
        uint64_t v417 = (v414 - v416) >> 3;
        if ((unint64_t)(v417 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v418 = v415 - (void)v416;
        unint64_t v419 = (uint64_t)(v415 - (void)v416) >> 2;
        if (v419 <= v417 + 1) {
          unint64_t v419 = v417 + 1;
        }
        if (v418 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v420 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v420 = v419;
        }
        if (v420)
        {
          unsigned int v421 = (char *)sub_5714((uint64_t)(v412 + 252), v420);
          unint64_t v414 = (char *)v412[251];
          unint64_t v416 = (char *)v412[250];
        }
        else
        {
          unsigned int v421 = 0;
        }
        uint64_t v429 = &v421[8 * v417];
        uint64_t v430 = &v421[8 * v420];
        *(void *)uint64_t v429 = v413;
        unint64_t v423 = v429 + 8;
        while (v414 != v416)
        {
          uint64_t v431 = *((void *)v414 - 1);
          v414 -= 8;
          *((void *)v429 - 1) = v431;
          v429 -= 8;
        }
LABEL_611:
        v412[250] = v429;
        v412[251] = v423;
        v412[252] = v430;
        if (v416) {
          operator delete(v416);
        }
        goto LABEL_613;
      }
    }
    *(void *)unint64_t v414 = v413;
    unint64_t v423 = v414 + 8;
LABEL_613:
    v412[251] = v423;
LABEL_614:
    int v433 = 1 << *(_DWORD *)(v3 + 48);
    if (v433 == 2)
    {
      unint64_t v434 = *(void **)a1[1];
      uint64_t v435 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
      unint64_t v436 = (char *)v434[254];
      unint64_t v444 = v434[255];
      if ((unint64_t)v436 >= v444)
      {
        unint64_t v438 = (char *)v434[253];
        uint64_t v446 = (v436 - v438) >> 3;
        if ((unint64_t)(v446 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v447 = v444 - (void)v438;
        unint64_t v448 = (uint64_t)(v444 - (void)v438) >> 2;
        if (v448 <= v446 + 1) {
          unint64_t v448 = v446 + 1;
        }
        if (v447 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v449 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v449 = v448;
        }
        if (v449)
        {
          unint64_t v450 = (char *)sub_5714((uint64_t)(v434 + 255), v449);
          unint64_t v436 = (char *)v434[254];
          unint64_t v438 = (char *)v434[253];
        }
        else
        {
          unint64_t v450 = 0;
        }
        uint64_t v451 = &v450[8 * v446];
        uint64_t v452 = &v450[8 * v449];
        *(void *)uint64_t v451 = v435;
        unint64_t v445 = v451 + 8;
        while (v436 != v438)
        {
          uint64_t v454 = *((void *)v436 - 1);
          v436 -= 8;
          *((void *)v451 - 1) = v454;
          v451 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v433 != 1) {
        goto LABEL_646;
      }
      unint64_t v434 = *(void **)a1[1];
      uint64_t v435 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
      unint64_t v436 = (char *)v434[254];
      unint64_t v437 = v434[255];
      if ((unint64_t)v436 >= v437)
      {
        unint64_t v438 = (char *)v434[253];
        uint64_t v439 = (v436 - v438) >> 3;
        if ((unint64_t)(v439 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v440 = v437 - (void)v438;
        unint64_t v441 = (uint64_t)(v437 - (void)v438) >> 2;
        if (v441 <= v439 + 1) {
          unint64_t v441 = v439 + 1;
        }
        if (v440 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v442 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v442 = v441;
        }
        if (v442)
        {
          unint64_t v443 = (char *)sub_5714((uint64_t)(v434 + 255), v442);
          unint64_t v436 = (char *)v434[254];
          unint64_t v438 = (char *)v434[253];
        }
        else
        {
          unint64_t v443 = 0;
        }
        uint64_t v451 = &v443[8 * v439];
        uint64_t v452 = &v443[8 * v442];
        *(void *)uint64_t v451 = v435;
        unint64_t v445 = v451 + 8;
        while (v436 != v438)
        {
          uint64_t v453 = *((void *)v436 - 1);
          v436 -= 8;
          *((void *)v451 - 1) = v453;
          v451 -= 8;
        }
LABEL_643:
        v434[253] = v451;
        v434[254] = v445;
        v434[255] = v452;
        if (v438) {
          operator delete(v438);
        }
        goto LABEL_645;
      }
    }
    *(void *)unint64_t v436 = v435;
    unint64_t v445 = v436 + 8;
LABEL_645:
    v434[254] = v445;
LABEL_646:
    int v455 = 1 << *(_DWORD *)(v3 + 48);
    if (v455 == 2)
    {
      unint64_t v456 = *(void **)a1[1];
      uint64_t v457 = *(_WORD *)(a1[2] + 70) & 0x7FFF;
      unint64_t v458 = (char *)v456[257];
      unint64_t v466 = v456[258];
      if ((unint64_t)v458 >= v466)
      {
        unint64_t v460 = (char *)v456[256];
        uint64_t v468 = (v458 - v460) >> 3;
        if ((unint64_t)(v468 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v469 = v466 - (void)v460;
        unint64_t v470 = (uint64_t)(v466 - (void)v460) >> 2;
        if (v470 <= v468 + 1) {
          unint64_t v470 = v468 + 1;
        }
        if (v469 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v471 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v471 = v470;
        }
        if (v471)
        {
          unint64_t v472 = (char *)sub_5714((uint64_t)(v456 + 258), v471);
          unint64_t v458 = (char *)v456[257];
          unint64_t v460 = (char *)v456[256];
        }
        else
        {
          unint64_t v472 = 0;
        }
        uint64_t v473 = &v472[8 * v468];
        uint64_t v474 = &v472[8 * v471];
        *(void *)uint64_t v473 = v457;
        unint64_t v467 = v473 + 8;
        while (v458 != v460)
        {
          uint64_t v476 = *((void *)v458 - 1);
          v458 -= 8;
          *((void *)v473 - 1) = v476;
          v473 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v455 != 1) {
        goto LABEL_678;
      }
      unint64_t v456 = *(void **)a1[1];
      uint64_t v457 = *(_WORD *)(a1[2] + 70) & 0x7FFF;
      unint64_t v458 = (char *)v456[257];
      unint64_t v459 = v456[258];
      if ((unint64_t)v458 >= v459)
      {
        unint64_t v460 = (char *)v456[256];
        uint64_t v461 = (v458 - v460) >> 3;
        if ((unint64_t)(v461 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v462 = v459 - (void)v460;
        unint64_t v463 = (uint64_t)(v459 - (void)v460) >> 2;
        if (v463 <= v461 + 1) {
          unint64_t v463 = v461 + 1;
        }
        if (v462 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v464 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v464 = v463;
        }
        if (v464)
        {
          unsigned int v465 = (char *)sub_5714((uint64_t)(v456 + 258), v464);
          unint64_t v458 = (char *)v456[257];
          unint64_t v460 = (char *)v456[256];
        }
        else
        {
          unsigned int v465 = 0;
        }
        uint64_t v473 = &v465[8 * v461];
        uint64_t v474 = &v465[8 * v464];
        *(void *)uint64_t v473 = v457;
        unint64_t v467 = v473 + 8;
        while (v458 != v460)
        {
          uint64_t v475 = *((void *)v458 - 1);
          v458 -= 8;
          *((void *)v473 - 1) = v475;
          v473 -= 8;
        }
LABEL_675:
        v456[256] = v473;
        v456[257] = v467;
        v456[258] = v474;
        if (v460) {
          operator delete(v460);
        }
        goto LABEL_677;
      }
    }
    *(void *)unint64_t v458 = v457;
    unint64_t v467 = v458 + 8;
LABEL_677:
    v456[257] = v467;
LABEL_678:
    int v477 = 1 << *(_DWORD *)(v3 + 48);
    if (v477 == 2)
    {
      unint64_t v478 = *(void **)a1[1];
      uint64_t v479 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
      unint64_t v480 = (char *)v478[260];
      unint64_t v488 = v478[261];
      if ((unint64_t)v480 >= v488)
      {
        uint64_t v482 = (char *)v478[259];
        uint64_t v490 = (v480 - v482) >> 3;
        if ((unint64_t)(v490 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v491 = v488 - (void)v482;
        unint64_t v492 = (uint64_t)(v488 - (void)v482) >> 2;
        if (v492 <= v490 + 1) {
          unint64_t v492 = v490 + 1;
        }
        if (v491 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v493 = v492;
        }
        if (v493)
        {
          unint64_t v494 = (char *)sub_5714((uint64_t)(v478 + 261), v493);
          unint64_t v480 = (char *)v478[260];
          uint64_t v482 = (char *)v478[259];
        }
        else
        {
          unint64_t v494 = 0;
        }
        unsigned int v495 = &v494[8 * v490];
        unint64_t v496 = &v494[8 * v493];
        *(void *)unsigned int v495 = v479;
        unint64_t v489 = v495 + 8;
        while (v480 != v482)
        {
          uint64_t v498 = *((void *)v480 - 1);
          v480 -= 8;
          *((void *)v495 - 1) = v498;
          v495 -= 8;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v477 != 1) {
        goto LABEL_710;
      }
      unint64_t v478 = *(void **)a1[1];
      uint64_t v479 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
      unint64_t v480 = (char *)v478[260];
      unint64_t v481 = v478[261];
      if ((unint64_t)v480 >= v481)
      {
        uint64_t v482 = (char *)v478[259];
        uint64_t v483 = (v480 - v482) >> 3;
        if ((unint64_t)(v483 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v484 = v481 - (void)v482;
        unint64_t v485 = (uint64_t)(v481 - (void)v482) >> 2;
        if (v485 <= v483 + 1) {
          unint64_t v485 = v483 + 1;
        }
        if (v484 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v486 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v486 = v485;
        }
        if (v486)
        {
          uint64_t v487 = (char *)sub_5714((uint64_t)(v478 + 261), v486);
          unint64_t v480 = (char *)v478[260];
          uint64_t v482 = (char *)v478[259];
        }
        else
        {
          uint64_t v487 = 0;
        }
        unsigned int v495 = &v487[8 * v483];
        unint64_t v496 = &v487[8 * v486];
        *(void *)unsigned int v495 = v479;
        unint64_t v489 = v495 + 8;
        while (v480 != v482)
        {
          uint64_t v497 = *((void *)v480 - 1);
          v480 -= 8;
          *((void *)v495 - 1) = v497;
          v495 -= 8;
        }
LABEL_707:
        v478[259] = v495;
        v478[260] = v489;
        v478[261] = v496;
        if (v482) {
          operator delete(v482);
        }
        goto LABEL_709;
      }
    }
    *(void *)unint64_t v480 = v479;
    unint64_t v489 = v480 + 8;
LABEL_709:
    v478[260] = v489;
LABEL_710:
    int v499 = 1 << *(_DWORD *)(v3 + 48);
    if (v499 == 2)
    {
      unint64_t v500 = *(void **)a1[1];
      uint64_t v501 = *(_WORD *)(a1[2] + 72) & 0x7FFF;
      unint64_t v502 = (char *)v500[263];
      unint64_t v510 = v500[264];
      if ((unint64_t)v502 >= v510)
      {
        int v504 = (char *)v500[262];
        uint64_t v512 = (v502 - v504) >> 3;
        if ((unint64_t)(v512 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v513 = v510 - (void)v504;
        unint64_t v514 = (uint64_t)(v510 - (void)v504) >> 2;
        if (v514 <= v512 + 1) {
          unint64_t v514 = v512 + 1;
        }
        if (v513 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v515 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v515 = v514;
        }
        if (v515)
        {
          unint64_t v516 = (char *)sub_5714((uint64_t)(v500 + 264), v515);
          unint64_t v502 = (char *)v500[263];
          int v504 = (char *)v500[262];
        }
        else
        {
          unint64_t v516 = 0;
        }
        unint64_t v517 = &v516[8 * v512];
        unsigned int v518 = &v516[8 * v515];
        *(void *)unint64_t v517 = v501;
        int v511 = v517 + 8;
        while (v502 != v504)
        {
          uint64_t v520 = *((void *)v502 - 1);
          v502 -= 8;
          *((void *)v517 - 1) = v520;
          v517 -= 8;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v499 != 1) {
        goto LABEL_742;
      }
      unint64_t v500 = *(void **)a1[1];
      uint64_t v501 = *(_WORD *)(a1[2] + 72) & 0x7FFF;
      unint64_t v502 = (char *)v500[263];
      unint64_t v503 = v500[264];
      if ((unint64_t)v502 >= v503)
      {
        int v504 = (char *)v500[262];
        uint64_t v505 = (v502 - v504) >> 3;
        if ((unint64_t)(v505 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v506 = v503 - (void)v504;
        unint64_t v507 = (uint64_t)(v503 - (void)v504) >> 2;
        if (v507 <= v505 + 1) {
          unint64_t v507 = v505 + 1;
        }
        if (v506 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v508 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v508 = v507;
        }
        if (v508)
        {
          int v509 = (char *)sub_5714((uint64_t)(v500 + 264), v508);
          unint64_t v502 = (char *)v500[263];
          int v504 = (char *)v500[262];
        }
        else
        {
          int v509 = 0;
        }
        unint64_t v517 = &v509[8 * v505];
        unsigned int v518 = &v509[8 * v508];
        *(void *)unint64_t v517 = v501;
        int v511 = v517 + 8;
        while (v502 != v504)
        {
          uint64_t v519 = *((void *)v502 - 1);
          v502 -= 8;
          *((void *)v517 - 1) = v519;
          v517 -= 8;
        }
LABEL_739:
        v500[262] = v517;
        v500[263] = v511;
        v500[264] = v518;
        if (v504) {
          operator delete(v504);
        }
        goto LABEL_741;
      }
    }
    *(void *)unint64_t v502 = v501;
    int v511 = v502 + 8;
LABEL_741:
    v500[263] = v511;
LABEL_742:
    int v521 = 1 << *(_DWORD *)(v3 + 48);
    if (v521 == 2)
    {
      unsigned int v522 = *(void **)a1[1];
      uint64_t v523 = *(_WORD *)(a1[2] + 64) & 0x7FFF;
      unint64_t v524 = (char *)v522[266];
      unint64_t v532 = v522[267];
      if ((unint64_t)v524 >= v532)
      {
        unsigned int v526 = (char *)v522[265];
        uint64_t v534 = (v524 - v526) >> 3;
        if ((unint64_t)(v534 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v535 = v532 - (void)v526;
        unint64_t v536 = (uint64_t)(v532 - (void)v526) >> 2;
        if (v536 <= v534 + 1) {
          unint64_t v536 = v534 + 1;
        }
        if (v535 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v537 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v537 = v536;
        }
        if (v537)
        {
          unint64_t v538 = (char *)sub_5714((uint64_t)(v522 + 267), v537);
          unint64_t v524 = (char *)v522[266];
          unsigned int v526 = (char *)v522[265];
        }
        else
        {
          unint64_t v538 = 0;
        }
        unsigned int v539 = &v538[8 * v534];
        uint64_t v540 = &v538[8 * v537];
        *(void *)unsigned int v539 = v523;
        unint64_t v533 = v539 + 8;
        while (v524 != v526)
        {
          uint64_t v542 = *((void *)v524 - 1);
          v524 -= 8;
          *((void *)v539 - 1) = v542;
          v539 -= 8;
        }
        goto LABEL_771;
      }
    }
    else
    {
      if (v521 != 1) {
        goto LABEL_774;
      }
      unsigned int v522 = *(void **)a1[1];
      uint64_t v523 = *(_WORD *)(a1[2] + 64) & 0x7FFF;
      unint64_t v524 = (char *)v522[266];
      unint64_t v525 = v522[267];
      if ((unint64_t)v524 >= v525)
      {
        unsigned int v526 = (char *)v522[265];
        uint64_t v527 = (v524 - v526) >> 3;
        if ((unint64_t)(v527 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v528 = v525 - (void)v526;
        unint64_t v529 = (uint64_t)(v525 - (void)v526) >> 2;
        if (v529 <= v527 + 1) {
          unint64_t v529 = v527 + 1;
        }
        if (v528 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v530 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v530 = v529;
        }
        if (v530)
        {
          unint64_t v531 = (char *)sub_5714((uint64_t)(v522 + 267), v530);
          unint64_t v524 = (char *)v522[266];
          unsigned int v526 = (char *)v522[265];
        }
        else
        {
          unint64_t v531 = 0;
        }
        unsigned int v539 = &v531[8 * v527];
        uint64_t v540 = &v531[8 * v530];
        *(void *)unsigned int v539 = v523;
        unint64_t v533 = v539 + 8;
        while (v524 != v526)
        {
          uint64_t v541 = *((void *)v524 - 1);
          v524 -= 8;
          *((void *)v539 - 1) = v541;
          v539 -= 8;
        }
LABEL_771:
        v522[265] = v539;
        v522[266] = v533;
        v522[267] = v540;
        if (v526) {
          operator delete(v526);
        }
        goto LABEL_773;
      }
    }
    *(void *)unint64_t v524 = v523;
    unint64_t v533 = v524 + 8;
LABEL_773:
    v522[266] = v533;
LABEL_774:
    int v543 = 1 << *(_DWORD *)(v3 + 48);
    if (v543 == 2)
    {
      unint64_t v544 = *(void **)a1[1];
      uint64_t v545 = *(_WORD *)(a1[2] + 82) & 0x7FFF;
      unsigned int v546 = (char *)v544[269];
      unint64_t v554 = v544[270];
      if ((unint64_t)v546 >= v554)
      {
        unint64_t v548 = (char *)v544[268];
        uint64_t v556 = (v546 - v548) >> 3;
        if ((unint64_t)(v556 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v557 = v554 - (void)v548;
        unint64_t v558 = (uint64_t)(v554 - (void)v548) >> 2;
        if (v558 <= v556 + 1) {
          unint64_t v558 = v556 + 1;
        }
        if (v557 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v559 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v559 = v558;
        }
        if (v559)
        {
          unint64_t v560 = (char *)sub_5714((uint64_t)(v544 + 270), v559);
          unsigned int v546 = (char *)v544[269];
          unint64_t v548 = (char *)v544[268];
        }
        else
        {
          unint64_t v560 = 0;
        }
        unint64_t v561 = &v560[8 * v556];
        int v562 = &v560[8 * v559];
        *(void *)unint64_t v561 = v545;
        unint64_t v555 = v561 + 8;
        while (v546 != v548)
        {
          uint64_t v564 = *((void *)v546 - 1);
          v546 -= 8;
          *((void *)v561 - 1) = v564;
          v561 -= 8;
        }
        goto LABEL_803;
      }
    }
    else
    {
      if (v543 != 1) {
        goto LABEL_806;
      }
      unint64_t v544 = *(void **)a1[1];
      uint64_t v545 = *(_WORD *)(a1[2] + 82) & 0x7FFF;
      unsigned int v546 = (char *)v544[269];
      unint64_t v547 = v544[270];
      if ((unint64_t)v546 >= v547)
      {
        unint64_t v548 = (char *)v544[268];
        uint64_t v549 = (v546 - v548) >> 3;
        if ((unint64_t)(v549 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v550 = v547 - (void)v548;
        unint64_t v551 = (uint64_t)(v547 - (void)v548) >> 2;
        if (v551 <= v549 + 1) {
          unint64_t v551 = v549 + 1;
        }
        if (v550 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v552 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v552 = v551;
        }
        if (v552)
        {
          unint64_t v553 = (char *)sub_5714((uint64_t)(v544 + 270), v552);
          unsigned int v546 = (char *)v544[269];
          unint64_t v548 = (char *)v544[268];
        }
        else
        {
          unint64_t v553 = 0;
        }
        unint64_t v561 = &v553[8 * v549];
        int v562 = &v553[8 * v552];
        *(void *)unint64_t v561 = v545;
        unint64_t v555 = v561 + 8;
        while (v546 != v548)
        {
          uint64_t v563 = *((void *)v546 - 1);
          v546 -= 8;
          *((void *)v561 - 1) = v563;
          v561 -= 8;
        }
LABEL_803:
        v544[268] = v561;
        v544[269] = v555;
        v544[270] = v562;
        if (v548) {
          operator delete(v548);
        }
        goto LABEL_805;
      }
    }
    *(void *)unsigned int v546 = v545;
    unint64_t v555 = v546 + 8;
LABEL_805:
    v544[269] = v555;
LABEL_806:
    int v565 = 1 << *(_DWORD *)(v3 + 48);
    if (v565 == 2)
    {
      unint64_t v566 = *(void **)a1[1];
      uint64_t v567 = *(_WORD *)(a1[2] + 74) & 0x7FFF;
      int v568 = (char *)v566[272];
      unint64_t v576 = v566[273];
      if ((unint64_t)v568 >= v576)
      {
        unint64_t v570 = (char *)v566[271];
        uint64_t v578 = (v568 - v570) >> 3;
        if ((unint64_t)(v578 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v579 = v576 - (void)v570;
        unint64_t v580 = (uint64_t)(v576 - (void)v570) >> 2;
        if (v580 <= v578 + 1) {
          unint64_t v580 = v578 + 1;
        }
        if (v579 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v581 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v581 = v580;
        }
        if (v581)
        {
          unint64_t v582 = (char *)sub_5714((uint64_t)(v566 + 273), v581);
          int v568 = (char *)v566[272];
          unint64_t v570 = (char *)v566[271];
        }
        else
        {
          unint64_t v582 = 0;
        }
        unint64_t v583 = &v582[8 * v578];
        unsigned int v584 = &v582[8 * v581];
        *(void *)unint64_t v583 = v567;
        unint64_t v577 = v583 + 8;
        while (v568 != v570)
        {
          uint64_t v586 = *((void *)v568 - 1);
          v568 -= 8;
          *((void *)v583 - 1) = v586;
          v583 -= 8;
        }
        goto LABEL_835;
      }
    }
    else
    {
      if (v565 != 1) {
        goto LABEL_838;
      }
      unint64_t v566 = *(void **)a1[1];
      uint64_t v567 = *(_WORD *)(a1[2] + 74) & 0x7FFF;
      int v568 = (char *)v566[272];
      unint64_t v569 = v566[273];
      if ((unint64_t)v568 >= v569)
      {
        unint64_t v570 = (char *)v566[271];
        uint64_t v571 = (v568 - v570) >> 3;
        if ((unint64_t)(v571 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v572 = v569 - (void)v570;
        unint64_t v573 = (uint64_t)(v569 - (void)v570) >> 2;
        if (v573 <= v571 + 1) {
          unint64_t v573 = v571 + 1;
        }
        if (v572 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v574 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v574 = v573;
        }
        if (v574)
        {
          unint64_t v575 = (char *)sub_5714((uint64_t)(v566 + 273), v574);
          int v568 = (char *)v566[272];
          unint64_t v570 = (char *)v566[271];
        }
        else
        {
          unint64_t v575 = 0;
        }
        unint64_t v583 = &v575[8 * v571];
        unsigned int v584 = &v575[8 * v574];
        *(void *)unint64_t v583 = v567;
        unint64_t v577 = v583 + 8;
        while (v568 != v570)
        {
          uint64_t v585 = *((void *)v568 - 1);
          v568 -= 8;
          *((void *)v583 - 1) = v585;
          v583 -= 8;
        }
LABEL_835:
        v566[271] = v583;
        v566[272] = v577;
        v566[273] = v584;
        if (v570) {
          operator delete(v570);
        }
        goto LABEL_837;
      }
    }
    *(void *)int v568 = v567;
    unint64_t v577 = v568 + 8;
LABEL_837:
    v566[272] = v577;
LABEL_838:
    int v587 = 1 << *(_DWORD *)(v3 + 48);
    if (v587 == 2)
    {
      int v588 = *(void **)a1[1];
      uint64_t v589 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
      unint64_t v590 = (char *)v588[275];
      unint64_t v598 = v588[276];
      if ((unint64_t)v590 >= v598)
      {
        unint64_t v592 = (char *)v588[274];
        uint64_t v600 = (v590 - v592) >> 3;
        if ((unint64_t)(v600 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v601 = v598 - (void)v592;
        unint64_t v602 = (uint64_t)(v598 - (void)v592) >> 2;
        if (v602 <= v600 + 1) {
          unint64_t v602 = v600 + 1;
        }
        if (v601 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v603 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v603 = v602;
        }
        if (v603)
        {
          unint64_t v604 = (char *)sub_5714((uint64_t)(v588 + 276), v603);
          unint64_t v590 = (char *)v588[275];
          unint64_t v592 = (char *)v588[274];
        }
        else
        {
          unint64_t v604 = 0;
        }
        unint64_t v605 = &v604[8 * v600];
        unsigned int v606 = &v604[8 * v603];
        *(void *)unint64_t v605 = v589;
        unint64_t v599 = v605 + 8;
        while (v590 != v592)
        {
          uint64_t v608 = *((void *)v590 - 1);
          v590 -= 8;
          *((void *)v605 - 1) = v608;
          v605 -= 8;
        }
        goto LABEL_867;
      }
    }
    else
    {
      if (v587 != 1) {
        goto LABEL_870;
      }
      int v588 = *(void **)a1[1];
      uint64_t v589 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
      unint64_t v590 = (char *)v588[275];
      unint64_t v591 = v588[276];
      if ((unint64_t)v590 >= v591)
      {
        unint64_t v592 = (char *)v588[274];
        uint64_t v593 = (v590 - v592) >> 3;
        if ((unint64_t)(v593 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v594 = v591 - (void)v592;
        unint64_t v595 = (uint64_t)(v591 - (void)v592) >> 2;
        if (v595 <= v593 + 1) {
          unint64_t v595 = v593 + 1;
        }
        if (v594 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v596 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v596 = v595;
        }
        if (v596)
        {
          unint64_t v597 = (char *)sub_5714((uint64_t)(v588 + 276), v596);
          unint64_t v590 = (char *)v588[275];
          unint64_t v592 = (char *)v588[274];
        }
        else
        {
          unint64_t v597 = 0;
        }
        unint64_t v605 = &v597[8 * v593];
        unsigned int v606 = &v597[8 * v596];
        *(void *)unint64_t v605 = v589;
        unint64_t v599 = v605 + 8;
        while (v590 != v592)
        {
          uint64_t v607 = *((void *)v590 - 1);
          v590 -= 8;
          *((void *)v605 - 1) = v607;
          v605 -= 8;
        }
LABEL_867:
        v588[274] = v605;
        v588[275] = v599;
        v588[276] = v606;
        if (v592) {
          operator delete(v592);
        }
        goto LABEL_869;
      }
    }
    *(void *)unint64_t v590 = v589;
    unint64_t v599 = v590 + 8;
LABEL_869:
    v588[275] = v599;
LABEL_870:
    int v609 = 1 << *(_DWORD *)(v3 + 48);
    if (v609 == 2)
    {
      int v610 = *(void **)a1[1];
      uint64_t v611 = *(_WORD *)(a1[2] + 76) & 0x7FFF;
      unint64_t v612 = (char *)v610[278];
      unint64_t v620 = v610[279];
      if ((unint64_t)v612 >= v620)
      {
        int v614 = (char *)v610[277];
        uint64_t v622 = (v612 - v614) >> 3;
        if ((unint64_t)(v622 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v623 = v620 - (void)v614;
        unint64_t v624 = (uint64_t)(v620 - (void)v614) >> 2;
        if (v624 <= v622 + 1) {
          unint64_t v624 = v622 + 1;
        }
        if (v623 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v625 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v625 = v624;
        }
        if (v625)
        {
          unsigned int v626 = (char *)sub_5714((uint64_t)(v610 + 279), v625);
          unint64_t v612 = (char *)v610[278];
          int v614 = (char *)v610[277];
        }
        else
        {
          unsigned int v626 = 0;
        }
        unint64_t v627 = &v626[8 * v622];
        unint64_t v628 = &v626[8 * v625];
        *(void *)unint64_t v627 = v611;
        unint64_t v621 = v627 + 8;
        while (v612 != v614)
        {
          uint64_t v630 = *((void *)v612 - 1);
          v612 -= 8;
          *((void *)v627 - 1) = v630;
          v627 -= 8;
        }
        goto LABEL_899;
      }
    }
    else
    {
      if (v609 != 1) {
        goto LABEL_902;
      }
      int v610 = *(void **)a1[1];
      uint64_t v611 = *(_WORD *)(a1[2] + 76) & 0x7FFF;
      unint64_t v612 = (char *)v610[278];
      unint64_t v613 = v610[279];
      if ((unint64_t)v612 >= v613)
      {
        int v614 = (char *)v610[277];
        uint64_t v615 = (v612 - v614) >> 3;
        if ((unint64_t)(v615 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v616 = v613 - (void)v614;
        unint64_t v617 = (uint64_t)(v613 - (void)v614) >> 2;
        if (v617 <= v615 + 1) {
          unint64_t v617 = v615 + 1;
        }
        if (v616 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v618 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v618 = v617;
        }
        if (v618)
        {
          unsigned int v619 = (char *)sub_5714((uint64_t)(v610 + 279), v618);
          unint64_t v612 = (char *)v610[278];
          int v614 = (char *)v610[277];
        }
        else
        {
          unsigned int v619 = 0;
        }
        unint64_t v627 = &v619[8 * v615];
        unint64_t v628 = &v619[8 * v618];
        *(void *)unint64_t v627 = v611;
        unint64_t v621 = v627 + 8;
        while (v612 != v614)
        {
          uint64_t v629 = *((void *)v612 - 1);
          v612 -= 8;
          *((void *)v627 - 1) = v629;
          v627 -= 8;
        }
LABEL_899:
        v610[277] = v627;
        v610[278] = v621;
        v610[279] = v628;
        if (v614) {
          operator delete(v614);
        }
        goto LABEL_901;
      }
    }
    *(void *)unint64_t v612 = v611;
    unint64_t v621 = v612 + 8;
LABEL_901:
    v610[278] = v621;
LABEL_902:
    int v631 = 1 << *(_DWORD *)(v3 + 48);
    if (v631 == 2)
    {
      unint64_t v632 = *(void **)a1[1];
      uint64_t v633 = *(_WORD *)(a1[2] + 86) & 0x7FFF;
      unint64_t v634 = (char *)v632[281];
      unint64_t v642 = v632[282];
      if ((unint64_t)v634 >= v642)
      {
        unint64_t v636 = (char *)v632[280];
        uint64_t v644 = (v634 - v636) >> 3;
        if ((unint64_t)(v644 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v645 = v642 - (void)v636;
        unint64_t v646 = (uint64_t)(v642 - (void)v636) >> 2;
        if (v646 <= v644 + 1) {
          unint64_t v646 = v644 + 1;
        }
        if (v645 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v647 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v647 = v646;
        }
        if (v647)
        {
          unsigned int v648 = (char *)sub_5714((uint64_t)(v632 + 282), v647);
          unint64_t v634 = (char *)v632[281];
          unint64_t v636 = (char *)v632[280];
        }
        else
        {
          unsigned int v648 = 0;
        }
        unint64_t v649 = &v648[8 * v644];
        unint64_t v650 = &v648[8 * v647];
        *(void *)unint64_t v649 = v633;
        int v643 = v649 + 8;
        while (v634 != v636)
        {
          uint64_t v652 = *((void *)v634 - 1);
          v634 -= 8;
          *((void *)v649 - 1) = v652;
          v649 -= 8;
        }
        goto LABEL_931;
      }
    }
    else
    {
      if (v631 != 1) {
        goto LABEL_934;
      }
      unint64_t v632 = *(void **)a1[1];
      uint64_t v633 = *(_WORD *)(a1[2] + 86) & 0x7FFF;
      unint64_t v634 = (char *)v632[281];
      unint64_t v635 = v632[282];
      if ((unint64_t)v634 >= v635)
      {
        unint64_t v636 = (char *)v632[280];
        uint64_t v637 = (v634 - v636) >> 3;
        if ((unint64_t)(v637 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v638 = v635 - (void)v636;
        unint64_t v639 = (uint64_t)(v635 - (void)v636) >> 2;
        if (v639 <= v637 + 1) {
          unint64_t v639 = v637 + 1;
        }
        if (v638 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v640 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v640 = v639;
        }
        if (v640)
        {
          unint64_t v641 = (char *)sub_5714((uint64_t)(v632 + 282), v640);
          unint64_t v634 = (char *)v632[281];
          unint64_t v636 = (char *)v632[280];
        }
        else
        {
          unint64_t v641 = 0;
        }
        unint64_t v649 = &v641[8 * v637];
        unint64_t v650 = &v641[8 * v640];
        *(void *)unint64_t v649 = v633;
        int v643 = v649 + 8;
        while (v634 != v636)
        {
          uint64_t v651 = *((void *)v634 - 1);
          v634 -= 8;
          *((void *)v649 - 1) = v651;
          v649 -= 8;
        }
LABEL_931:
        v632[280] = v649;
        v632[281] = v643;
        v632[282] = v650;
        if (v636) {
          operator delete(v636);
        }
        goto LABEL_933;
      }
    }
    *(void *)unint64_t v634 = v633;
    int v643 = v634 + 8;
LABEL_933:
    v632[281] = v643;
LABEL_934:
    int v653 = 1 << *(_DWORD *)(v3 + 48);
    if (v653 == 2)
    {
      unint64_t v654 = *(void **)a1[1];
      uint64_t v655 = *(_WORD *)(a1[2] + 78) & 0x7FFF;
      int v656 = (char *)v654[284];
      unint64_t v664 = v654[285];
      if ((unint64_t)v656 >= v664)
      {
        unint64_t v658 = (char *)v654[283];
        uint64_t v666 = (v656 - v658) >> 3;
        if ((unint64_t)(v666 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v667 = v664 - (void)v658;
        unint64_t v668 = (uint64_t)(v664 - (void)v658) >> 2;
        if (v668 <= v666 + 1) {
          unint64_t v668 = v666 + 1;
        }
        if (v667 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v669 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v669 = v668;
        }
        if (v669)
        {
          unint64_t v670 = (char *)sub_5714((uint64_t)(v654 + 285), v669);
          int v656 = (char *)v654[284];
          unint64_t v658 = (char *)v654[283];
        }
        else
        {
          unint64_t v670 = 0;
        }
        unint64_t v671 = &v670[8 * v666];
        unint64_t v672 = &v670[8 * v669];
        *(void *)unint64_t v671 = v655;
        unsigned int v665 = v671 + 8;
        while (v656 != v658)
        {
          uint64_t v674 = *((void *)v656 - 1);
          v656 -= 8;
          *((void *)v671 - 1) = v674;
          v671 -= 8;
        }
        goto LABEL_963;
      }
    }
    else
    {
      if (v653 != 1) {
        goto LABEL_966;
      }
      unint64_t v654 = *(void **)a1[1];
      uint64_t v655 = *(_WORD *)(a1[2] + 78) & 0x7FFF;
      int v656 = (char *)v654[284];
      unint64_t v657 = v654[285];
      if ((unint64_t)v656 >= v657)
      {
        unint64_t v658 = (char *)v654[283];
        uint64_t v659 = (v656 - v658) >> 3;
        if ((unint64_t)(v659 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v660 = v657 - (void)v658;
        unint64_t v661 = (uint64_t)(v657 - (void)v658) >> 2;
        if (v661 <= v659 + 1) {
          unint64_t v661 = v659 + 1;
        }
        if (v660 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v662 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v662 = v661;
        }
        if (v662)
        {
          unint64_t v663 = (char *)sub_5714((uint64_t)(v654 + 285), v662);
          int v656 = (char *)v654[284];
          unint64_t v658 = (char *)v654[283];
        }
        else
        {
          unint64_t v663 = 0;
        }
        unint64_t v671 = &v663[8 * v659];
        unint64_t v672 = &v663[8 * v662];
        *(void *)unint64_t v671 = v655;
        unsigned int v665 = v671 + 8;
        while (v656 != v658)
        {
          uint64_t v673 = *((void *)v656 - 1);
          v656 -= 8;
          *((void *)v671 - 1) = v673;
          v671 -= 8;
        }
LABEL_963:
        v654[283] = v671;
        v654[284] = v665;
        v654[285] = v672;
        if (v658) {
          operator delete(v658);
        }
        goto LABEL_965;
      }
    }
    *(void *)int v656 = v655;
    unsigned int v665 = v656 + 8;
LABEL_965:
    v654[284] = v665;
LABEL_966:
    int v675 = 1 << *(_DWORD *)(v3 + 48);
    if (v675 == 2)
    {
      unsigned int v676 = *(void **)a1[1];
      uint64_t v677 = *(_WORD *)(a1[2] + 88) & 0x7FFF;
      unint64_t v678 = (char *)v676[287];
      unint64_t v686 = v676[288];
      if ((unint64_t)v678 >= v686)
      {
        unsigned int v680 = (char *)v676[286];
        uint64_t v688 = (v678 - v680) >> 3;
        if ((unint64_t)(v688 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v689 = v686 - (void)v680;
        unint64_t v690 = (uint64_t)(v686 - (void)v680) >> 2;
        if (v690 <= v688 + 1) {
          unint64_t v690 = v688 + 1;
        }
        if (v689 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v691 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v691 = v690;
        }
        if (v691)
        {
          unint64_t v692 = (char *)sub_5714((uint64_t)(v676 + 288), v691);
          unint64_t v678 = (char *)v676[287];
          unsigned int v680 = (char *)v676[286];
        }
        else
        {
          unint64_t v692 = 0;
        }
        int v693 = &v692[8 * v688];
        unint64_t v694 = &v692[8 * v691];
        *(void *)int v693 = v677;
        unint64_t v687 = v693 + 8;
        while (v678 != v680)
        {
          uint64_t v696 = *((void *)v678 - 1);
          v678 -= 8;
          *((void *)v693 - 1) = v696;
          v693 -= 8;
        }
        goto LABEL_995;
      }
    }
    else
    {
      if (v675 != 1) {
        goto LABEL_998;
      }
      unsigned int v676 = *(void **)a1[1];
      uint64_t v677 = *(_WORD *)(a1[2] + 88) & 0x7FFF;
      unint64_t v678 = (char *)v676[287];
      unint64_t v679 = v676[288];
      if ((unint64_t)v678 >= v679)
      {
        unsigned int v680 = (char *)v676[286];
        uint64_t v681 = (v678 - v680) >> 3;
        if ((unint64_t)(v681 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v682 = v679 - (void)v680;
        unint64_t v683 = (uint64_t)(v679 - (void)v680) >> 2;
        if (v683 <= v681 + 1) {
          unint64_t v683 = v681 + 1;
        }
        if (v682 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v684 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v684 = v683;
        }
        if (v684)
        {
          int v685 = (char *)sub_5714((uint64_t)(v676 + 288), v684);
          unint64_t v678 = (char *)v676[287];
          unsigned int v680 = (char *)v676[286];
        }
        else
        {
          int v685 = 0;
        }
        int v693 = &v685[8 * v681];
        unint64_t v694 = &v685[8 * v684];
        *(void *)int v693 = v677;
        unint64_t v687 = v693 + 8;
        while (v678 != v680)
        {
          uint64_t v695 = *((void *)v678 - 1);
          v678 -= 8;
          *((void *)v693 - 1) = v695;
          v693 -= 8;
        }
LABEL_995:
        v676[286] = v693;
        v676[287] = v687;
        v676[288] = v694;
        if (v680) {
          operator delete(v680);
        }
        goto LABEL_997;
      }
    }
    *(void *)unint64_t v678 = v677;
    unint64_t v687 = v678 + 8;
LABEL_997:
    v676[287] = v687;
LABEL_998:
    int v697 = 1 << *(_DWORD *)(v3 + 48);
    if (v697 == 2)
    {
      uint64_t v709 = a1[2];
      unint64_t v699 = *(void **)a1[1];
      uint64_t v700 = *(_WORD *)(v709 + 80) & 0x7FFF;
      unsigned int v701 = (char *)v699[290];
      unint64_t v710 = v699[291];
      if ((unint64_t)v701 >= v710)
      {
        unint64_t v703 = (char *)v699[289];
        uint64_t v712 = (v701 - v703) >> 3;
        if (!((unint64_t)(v712 + 1) >> 61))
        {
          unint64_t v713 = v710 - (void)v703;
          unint64_t v714 = (uint64_t)(v710 - (void)v703) >> 2;
          if (v714 <= v712 + 1) {
            unint64_t v714 = v712 + 1;
          }
          if (v713 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v715 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v715 = v714;
          }
          if (v715)
          {
            unint64_t v716 = (char *)sub_5714((uint64_t)(v699 + 291), v715);
            unsigned int v701 = (char *)v699[290];
            unint64_t v703 = (char *)v699[289];
          }
          else
          {
            unint64_t v716 = 0;
          }
          unsigned int v717 = &v716[8 * v712];
          unint64_t v718 = &v716[8 * v715];
          *(void *)unsigned int v717 = v700;
          unint64_t v711 = v717 + 8;
          while (v701 != v703)
          {
            uint64_t v720 = *((void *)v701 - 1);
            v701 -= 8;
            *((void *)v717 - 1) = v720;
            v717 -= 8;
          }
          goto LABEL_1027;
        }
LABEL_1032:
        sub_566C();
      }
    }
    else
    {
      if (v697 != 1)
      {
LABEL_1030:
        *a2 = 1;
        return;
      }
      uint64_t v698 = a1[2];
      unint64_t v699 = *(void **)a1[1];
      uint64_t v700 = *(_WORD *)(v698 + 80) & 0x7FFF;
      unsigned int v701 = (char *)v699[290];
      unint64_t v702 = v699[291];
      if ((unint64_t)v701 >= v702)
      {
        unint64_t v703 = (char *)v699[289];
        uint64_t v704 = (v701 - v703) >> 3;
        if (!((unint64_t)(v704 + 1) >> 61))
        {
          unint64_t v705 = v702 - (void)v703;
          unint64_t v706 = (uint64_t)(v702 - (void)v703) >> 2;
          if (v706 <= v704 + 1) {
            unint64_t v706 = v704 + 1;
          }
          if (v705 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v707 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v707 = v706;
          }
          if (v707)
          {
            unint64_t v708 = (char *)sub_5714((uint64_t)(v699 + 291), v707);
            unsigned int v701 = (char *)v699[290];
            unint64_t v703 = (char *)v699[289];
          }
          else
          {
            unint64_t v708 = 0;
          }
          unsigned int v717 = &v708[8 * v704];
          unint64_t v718 = &v708[8 * v707];
          *(void *)unsigned int v717 = v700;
          unint64_t v711 = v717 + 8;
          while (v701 != v703)
          {
            uint64_t v719 = *((void *)v701 - 1);
            v701 -= 8;
            *((void *)v717 - 1) = v719;
            v717 -= 8;
          }
LABEL_1027:
          v699[289] = v717;
          v699[290] = v711;
          v699[291] = v718;
          if (v703) {
            operator delete(v703);
          }
          goto LABEL_1029;
        }
        goto LABEL_1032;
      }
    }
    *(void *)unsigned int v701 = v700;
    unint64_t v711 = v701 + 8;
LABEL_1029:
    v699[290] = v711;
    goto LABEL_1030;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = (_WORD *)a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[197] - 8) += v17[17] & 0x7FFF;
    *(void *)(v19[200] - 8) += v17[13] & 0x7FFF;
    *(void *)(v19[203] - 8) += v17[18] & 0x7FFF;
    *(void *)(v19[206] - 8) += v17[14] & 0x7FFF;
    *(void *)(v19[209] - 8) += v17[19] & 0x7FFF;
    *(void *)(v19[212] - 8) += v17[15] & 0x7FFF;
    *(void *)(v19[215] - 8) += v17[20] & 0x7FFF;
    *(void *)(v19[218] - 8) += v17[16] & 0x7FFF;
    *(void *)(v19[221] - 8) += v17[25] & 0x7FFF;
    *(void *)(v19[224] - 8) += v17[21] & 0x7FFF;
    uint64_t v20 = (_WORD *)a1[2];
    uint64_t v21 = *(void **)a1[1];
    *(void *)(v21[227] - 8) += v20[26] & 0x7FFF;
    *(void *)(v21[230] - 8) += v20[22] & 0x7FFF;
    *(void *)(v21[233] - 8) += v20[27] & 0x7FFF;
    *(void *)(v21[236] - 8) += v20[23] & 0x7FFF;
    *(void *)(v21[239] - 8) += v20[28] & 0x7FFF;
    *(void *)(v21[242] - 8) += v20[24] & 0x7FFF;
    *(void *)(v21[245] - 8) += v20[33] & 0x7FFF;
    *(void *)(v21[248] - 8) += v20[29] & 0x7FFF;
    *(void *)(v21[251] - 8) += v20[34] & 0x7FFF;
    *(void *)(v21[254] - 8) += v20[30] & 0x7FFF;
    unint64_t v22 = (_WORD *)a1[2];
    unint64_t v23 = *(void **)a1[1];
    *(void *)(v23[257] - 8) += v22[35] & 0x7FFF;
    *(void *)(v23[260] - 8) += v22[31] & 0x7FFF;
    *(void *)(v23[263] - 8) += v22[36] & 0x7FFF;
    *(void *)(v23[266] - 8) += v22[32] & 0x7FFF;
    *(void *)(v23[269] - 8) += v22[41] & 0x7FFF;
    *(void *)(v23[272] - 8) += v22[37] & 0x7FFF;
    *(void *)(v23[275] - 8) += v22[42] & 0x7FFF;
    *(void *)(v23[278] - 8) += v22[38] & 0x7FFF;
    *(void *)(v23[281] - 8) += v22[43] & 0x7FFF;
    *(void *)(v23[284] - 8) += v22[39] & 0x7FFF;
    uint64_t v24 = a1[2];
    uint8x8_t v25 = (void *)*v18;
    *(void *)(v25[287] - 8) += *(_WORD *)(v24 + 88) & 0x7FFF;
    *(void *)(v25[290] - 8) += *(_WORD *)(v24 + 80) & 0x7FFF;
  }
}

void sub_156178(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      uint64_t v8 = (char *)v6[143];
      unint64_t v22 = v6[144];
      if ((unint64_t)v8 >= v22)
      {
        uint64_t v10 = (char *)v6[142];
        uint64_t v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 144), v27);
          uint64_t v8 = (char *)v6[143];
          uint64_t v10 = (char *)v6[142];
        }
        else
        {
          uint64_t v28 = 0;
        }
        unint64_t v29 = &v28[8 * v24];
        unint64_t v30 = &v28[8 * v27];
        *(void *)unint64_t v29 = v7;
        unint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v32 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      uint64_t v8 = (char *)v6[143];
      unint64_t v9 = v6[144];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[142];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 144), v14);
          uint64_t v8 = (char *)v6[143];
          uint64_t v10 = (char *)v6[142];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v29 = &v15[8 * v11];
        unint64_t v30 = &v15[8 * v14];
        *(void *)unint64_t v29 = v7;
        unint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v31 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[142] = v29;
        v6[143] = v23;
        v6[144] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    unint64_t v23 = v8 + 8;
LABEL_37:
    v6[143] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      uint64_t v36 = (char *)v34[146];
      unint64_t v44 = v34[147];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (char *)v34[145];
        uint64_t v46 = (v36 - v38) >> 3;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 147), v49);
          uint64_t v36 = (char *)v34[146];
          unint64_t v38 = (char *)v34[145];
        }
        else
        {
          uint64_t v50 = 0;
        }
        unint64_t v51 = &v50[8 * v46];
        unint64_t v52 = &v50[8 * v49];
        *(void *)unint64_t v51 = v35;
        unint64_t v45 = v51 + 8;
        while (v36 != v38)
        {
          uint64_t v54 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v51 - 1) = v54;
          v51 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      uint64_t v36 = (char *)v34[146];
      unint64_t v37 = v34[147];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (char *)v34[145];
        uint64_t v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 147), v42);
          uint64_t v36 = (char *)v34[146];
          unint64_t v38 = (char *)v34[145];
        }
        else
        {
          uint64_t v43 = 0;
        }
        unint64_t v51 = &v43[8 * v39];
        unint64_t v52 = &v43[8 * v42];
        *(void *)unint64_t v51 = v35;
        unint64_t v45 = v51 + 8;
        while (v36 != v38)
        {
          uint64_t v53 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v51 - 1) = v53;
          v51 -= 8;
        }
LABEL_67:
        v34[145] = v51;
        v34[146] = v45;
        v34[147] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *(void *)uint64_t v36 = v35;
    unint64_t v45 = v36 + 8;
LABEL_69:
    v34[146] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      uint64_t v67 = a1[1];
      uint64_t v57 = *(void **)v67;
      uint64_t v58 = *(unsigned __int16 *)(a1[2] + 44);
      int v59 = *(char **)(*(void *)v67 + 1192);
      unint64_t v68 = *(void *)(*(void *)v67 + 1200);
      if ((unint64_t)v59 >= v68)
      {
        uint64_t v61 = (char *)v57[148];
        uint64_t v70 = (v59 - v61) >> 3;
        if ((unint64_t)(v70 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v71 = v68 - (void)v61;
        unint64_t v72 = (uint64_t)(v68 - (void)v61) >> 2;
        if (v72 <= v70 + 1) {
          unint64_t v72 = v70 + 1;
        }
        if (v71 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v72;
        }
        if (v73)
        {
          unint64_t v74 = (char *)sub_5714((uint64_t)(v57 + 150), v73);
          int v59 = (char *)v57[149];
          uint64_t v61 = (char *)v57[148];
        }
        else
        {
          unint64_t v74 = 0;
        }
        unint64_t v75 = &v74[8 * v70];
        uint64_t v76 = &v74[8 * v73];
        *(void *)unint64_t v75 = v58;
        uint64_t v69 = v75 + 8;
        while (v59 != v61)
        {
          uint64_t v78 = *((void *)v59 - 1);
          v59 -= 8;
          *((void *)v75 - 1) = v78;
          v75 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      uint64_t v56 = a1[1];
      uint64_t v57 = *(void **)v56;
      uint64_t v58 = *(unsigned __int16 *)(a1[2] + 44);
      int v59 = *(char **)(*(void *)v56 + 1192);
      unint64_t v60 = *(void *)(*(void *)v56 + 1200);
      if ((unint64_t)v59 >= v60)
      {
        uint64_t v61 = (char *)v57[148];
        uint64_t v62 = (v59 - v61) >> 3;
        if ((unint64_t)(v62 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v63 = v60 - (void)v61;
        unint64_t v64 = (uint64_t)(v60 - (void)v61) >> 2;
        if (v64 <= v62 + 1) {
          unint64_t v64 = v62 + 1;
        }
        if (v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v64;
        }
        if (v65)
        {
          unint64_t v66 = (char *)sub_5714((uint64_t)(v57 + 150), v65);
          int v59 = (char *)v57[149];
          uint64_t v61 = (char *)v57[148];
        }
        else
        {
          unint64_t v66 = 0;
        }
        unint64_t v75 = &v66[8 * v62];
        uint64_t v76 = &v66[8 * v65];
        *(void *)unint64_t v75 = v58;
        uint64_t v69 = v75 + 8;
        while (v59 != v61)
        {
          uint64_t v77 = *((void *)v59 - 1);
          v59 -= 8;
          *((void *)v75 - 1) = v77;
          v75 -= 8;
        }
LABEL_99:
        v57[148] = v75;
        v57[149] = v69;
        v57[150] = v76;
        if (v61) {
          operator delete(v61);
        }
        goto LABEL_101;
      }
    }
    *(void *)int v59 = v58;
    uint64_t v69 = v59 + 8;
LABEL_101:
    v57[149] = v69;
LABEL_102:
    int v79 = 1 << *(_DWORD *)(v3 + 48);
    if (v79 == 2)
    {
      uint64_t v91 = a1[1];
      int v81 = *(void **)v91;
      uint64_t v82 = *(unsigned __int16 *)(a1[2] + 32);
      uint64_t v83 = *(char **)(*(void *)v91 + 1216);
      unint64_t v92 = *(void *)(*(void *)v91 + 1224);
      if ((unint64_t)v83 >= v92)
      {
        unint64_t v85 = (char *)v81[151];
        uint64_t v94 = (v83 - v85) >> 3;
        if ((unint64_t)(v94 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v95 = v92 - (void)v85;
        unint64_t v96 = (uint64_t)(v92 - (void)v85) >> 2;
        if (v96 <= v94 + 1) {
          unint64_t v96 = v94 + 1;
        }
        if (v95 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v96;
        }
        if (v97)
        {
          int v98 = (char *)sub_5714((uint64_t)(v81 + 153), v97);
          uint64_t v83 = (char *)v81[152];
          unint64_t v85 = (char *)v81[151];
        }
        else
        {
          int v98 = 0;
        }
        uint64_t v99 = &v98[8 * v94];
        uint64_t v100 = &v98[8 * v97];
        *(void *)uint64_t v99 = v82;
        unint64_t v93 = v99 + 8;
        while (v83 != v85)
        {
          uint64_t v102 = *((void *)v83 - 1);
          v83 -= 8;
          *((void *)v99 - 1) = v102;
          v99 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v79 != 1) {
        goto LABEL_134;
      }
      uint64_t v80 = a1[1];
      int v81 = *(void **)v80;
      uint64_t v82 = *(unsigned __int16 *)(a1[2] + 32);
      uint64_t v83 = *(char **)(*(void *)v80 + 1216);
      unint64_t v84 = *(void *)(*(void *)v80 + 1224);
      if ((unint64_t)v83 >= v84)
      {
        unint64_t v85 = (char *)v81[151];
        uint64_t v86 = (v83 - v85) >> 3;
        if ((unint64_t)(v86 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v87 = v84 - (void)v85;
        unint64_t v88 = (uint64_t)(v84 - (void)v85) >> 2;
        if (v88 <= v86 + 1) {
          unint64_t v88 = v86 + 1;
        }
        if (v87 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v89 = v88;
        }
        if (v89)
        {
          unint64_t v90 = (char *)sub_5714((uint64_t)(v81 + 153), v89);
          uint64_t v83 = (char *)v81[152];
          unint64_t v85 = (char *)v81[151];
        }
        else
        {
          unint64_t v90 = 0;
        }
        uint64_t v99 = &v90[8 * v86];
        uint64_t v100 = &v90[8 * v89];
        *(void *)uint64_t v99 = v82;
        unint64_t v93 = v99 + 8;
        while (v83 != v85)
        {
          uint64_t v101 = *((void *)v83 - 1);
          v83 -= 8;
          *((void *)v99 - 1) = v101;
          v99 -= 8;
        }
LABEL_131:
        v81[151] = v99;
        v81[152] = v93;
        v81[153] = v100;
        if (v85) {
          operator delete(v85);
        }
        goto LABEL_133;
      }
    }
    *(void *)uint64_t v83 = v82;
    unint64_t v93 = v83 + 8;
LABEL_133:
    v81[152] = v93;
LABEL_134:
    int v103 = 1 << *(_DWORD *)(v3 + 48);
    if (v103 == 2)
    {
      uint64_t v115 = a1[1];
      uint64_t v105 = *(void **)v115;
      uint64_t v106 = *(unsigned __int16 *)(a1[2] + 38);
      unint64_t v107 = *(char **)(*(void *)v115 + 1240);
      unint64_t v116 = *(void *)(*(void *)v115 + 1248);
      if ((unint64_t)v107 >= v116)
      {
        uint64_t v109 = (char *)v105[154];
        uint64_t v118 = (v107 - v109) >> 3;
        if ((unint64_t)(v118 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v119 = v116 - (void)v109;
        unint64_t v120 = (uint64_t)(v116 - (void)v109) >> 2;
        if (v120 <= v118 + 1) {
          unint64_t v120 = v118 + 1;
        }
        if (v119 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v121 = v120;
        }
        if (v121)
        {
          int v122 = (char *)sub_5714((uint64_t)(v105 + 156), v121);
          unint64_t v107 = (char *)v105[155];
          uint64_t v109 = (char *)v105[154];
        }
        else
        {
          int v122 = 0;
        }
        uint64_t v123 = &v122[8 * v118];
        uint64_t v124 = &v122[8 * v121];
        *(void *)uint64_t v123 = v106;
        unint64_t v117 = v123 + 8;
        while (v107 != v109)
        {
          uint64_t v126 = *((void *)v107 - 1);
          v107 -= 8;
          *((void *)v123 - 1) = v126;
          v123 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v103 != 1) {
        goto LABEL_166;
      }
      uint64_t v104 = a1[1];
      uint64_t v105 = *(void **)v104;
      uint64_t v106 = *(unsigned __int16 *)(a1[2] + 38);
      unint64_t v107 = *(char **)(*(void *)v104 + 1240);
      unint64_t v108 = *(void *)(*(void *)v104 + 1248);
      if ((unint64_t)v107 >= v108)
      {
        uint64_t v109 = (char *)v105[154];
        uint64_t v110 = (v107 - v109) >> 3;
        if ((unint64_t)(v110 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v111 = v108 - (void)v109;
        unint64_t v112 = (uint64_t)(v108 - (void)v109) >> 2;
        if (v112 <= v110 + 1) {
          unint64_t v112 = v110 + 1;
        }
        if (v111 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v113 = v112;
        }
        if (v113)
        {
          unint64_t v114 = (char *)sub_5714((uint64_t)(v105 + 156), v113);
          unint64_t v107 = (char *)v105[155];
          uint64_t v109 = (char *)v105[154];
        }
        else
        {
          unint64_t v114 = 0;
        }
        uint64_t v123 = &v114[8 * v110];
        uint64_t v124 = &v114[8 * v113];
        *(void *)uint64_t v123 = v106;
        unint64_t v117 = v123 + 8;
        while (v107 != v109)
        {
          uint64_t v125 = *((void *)v107 - 1);
          v107 -= 8;
          *((void *)v123 - 1) = v125;
          v123 -= 8;
        }
LABEL_163:
        v105[154] = v123;
        v105[155] = v117;
        v105[156] = v124;
        if (v109) {
          operator delete(v109);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v107 = v106;
    unint64_t v117 = v107 + 8;
LABEL_165:
    v105[155] = v117;
LABEL_166:
    int v127 = 1 << *(_DWORD *)(v3 + 48);
    if (v127 == 2)
    {
      uint64_t v139 = a1[1];
      unint64_t v129 = *(void **)v139;
      uint64_t v130 = *(unsigned __int16 *)(a1[2] + 26);
      uint64_t v131 = *(char **)(*(void *)v139 + 1264);
      unint64_t v140 = *(void *)(*(void *)v139 + 1272);
      if ((unint64_t)v131 >= v140)
      {
        unint64_t v133 = (char *)v129[157];
        uint64_t v142 = (v131 - v133) >> 3;
        if ((unint64_t)(v142 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v143 = v140 - (void)v133;
        unint64_t v144 = (uint64_t)(v140 - (void)v133) >> 2;
        if (v144 <= v142 + 1) {
          unint64_t v144 = v142 + 1;
        }
        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v145 = v144;
        }
        if (v145)
        {
          uint64_t v146 = (char *)sub_5714((uint64_t)(v129 + 159), v145);
          uint64_t v131 = (char *)v129[158];
          unint64_t v133 = (char *)v129[157];
        }
        else
        {
          uint64_t v146 = 0;
        }
        int v147 = &v146[8 * v142];
        unint64_t v148 = &v146[8 * v145];
        *(void *)int v147 = v130;
        unint64_t v141 = v147 + 8;
        while (v131 != v133)
        {
          uint64_t v150 = *((void *)v131 - 1);
          v131 -= 8;
          *((void *)v147 - 1) = v150;
          v147 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v127 != 1) {
        goto LABEL_198;
      }
      uint64_t v128 = a1[1];
      unint64_t v129 = *(void **)v128;
      uint64_t v130 = *(unsigned __int16 *)(a1[2] + 26);
      uint64_t v131 = *(char **)(*(void *)v128 + 1264);
      unint64_t v132 = *(void *)(*(void *)v128 + 1272);
      if ((unint64_t)v131 >= v132)
      {
        unint64_t v133 = (char *)v129[157];
        uint64_t v134 = (v131 - v133) >> 3;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v135 = v132 - (void)v133;
        unint64_t v136 = (uint64_t)(v132 - (void)v133) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          uint64_t v138 = (char *)sub_5714((uint64_t)(v129 + 159), v137);
          uint64_t v131 = (char *)v129[158];
          unint64_t v133 = (char *)v129[157];
        }
        else
        {
          uint64_t v138 = 0;
        }
        int v147 = &v138[8 * v134];
        unint64_t v148 = &v138[8 * v137];
        *(void *)int v147 = v130;
        unint64_t v141 = v147 + 8;
        while (v131 != v133)
        {
          uint64_t v149 = *((void *)v131 - 1);
          v131 -= 8;
          *((void *)v147 - 1) = v149;
          v147 -= 8;
        }
LABEL_195:
        v129[157] = v147;
        v129[158] = v141;
        v129[159] = v148;
        if (v133) {
          operator delete(v133);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v131 = v130;
    unint64_t v141 = v131 + 8;
LABEL_197:
    v129[158] = v141;
LABEL_198:
    int v151 = 1 << *(_DWORD *)(v3 + 48);
    if (v151 == 2)
    {
      uint64_t v163 = a1[1];
      uint64_t v153 = *(void **)v163;
      uint64_t v154 = *(unsigned __int16 *)(a1[2] + 40);
      unint64_t v155 = *(char **)(*(void *)v163 + 1288);
      unint64_t v164 = *(void *)(*(void *)v163 + 1296);
      if ((unint64_t)v155 >= v164)
      {
        uint64_t v157 = (char *)v153[160];
        uint64_t v166 = (v155 - v157) >> 3;
        if ((unint64_t)(v166 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v167 = v164 - (void)v157;
        unint64_t v168 = (uint64_t)(v164 - (void)v157) >> 2;
        if (v168 <= v166 + 1) {
          unint64_t v168 = v166 + 1;
        }
        if (v167 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v169 = v168;
        }
        if (v169)
        {
          unint64_t v170 = (char *)sub_5714((uint64_t)(v153 + 162), v169);
          unint64_t v155 = (char *)v153[161];
          uint64_t v157 = (char *)v153[160];
        }
        else
        {
          unint64_t v170 = 0;
        }
        uint64_t v171 = &v170[8 * v166];
        uint64_t v172 = &v170[8 * v169];
        *(void *)uint64_t v171 = v154;
        uint64_t v165 = v171 + 8;
        while (v155 != v157)
        {
          uint64_t v174 = *((void *)v155 - 1);
          v155 -= 8;
          *((void *)v171 - 1) = v174;
          v171 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v151 != 1) {
        goto LABEL_230;
      }
      uint64_t v152 = a1[1];
      uint64_t v153 = *(void **)v152;
      uint64_t v154 = *(unsigned __int16 *)(a1[2] + 40);
      unint64_t v155 = *(char **)(*(void *)v152 + 1288);
      unint64_t v156 = *(void *)(*(void *)v152 + 1296);
      if ((unint64_t)v155 >= v156)
      {
        uint64_t v157 = (char *)v153[160];
        uint64_t v158 = (v155 - v157) >> 3;
        if ((unint64_t)(v158 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v159 = v156 - (void)v157;
        unint64_t v160 = (uint64_t)(v156 - (void)v157) >> 2;
        if (v160 <= v158 + 1) {
          unint64_t v160 = v158 + 1;
        }
        if (v159 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v160;
        }
        if (v161)
        {
          unint64_t v162 = (char *)sub_5714((uint64_t)(v153 + 162), v161);
          unint64_t v155 = (char *)v153[161];
          uint64_t v157 = (char *)v153[160];
        }
        else
        {
          unint64_t v162 = 0;
        }
        uint64_t v171 = &v162[8 * v158];
        uint64_t v172 = &v162[8 * v161];
        *(void *)uint64_t v171 = v154;
        uint64_t v165 = v171 + 8;
        while (v155 != v157)
        {
          uint64_t v173 = *((void *)v155 - 1);
          v155 -= 8;
          *((void *)v171 - 1) = v173;
          v171 -= 8;
        }
LABEL_227:
        v153[160] = v171;
        v153[161] = v165;
        v153[162] = v172;
        if (v157) {
          operator delete(v157);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v155 = v154;
    uint64_t v165 = v155 + 8;
LABEL_229:
    v153[161] = v165;
LABEL_230:
    int v175 = 1 << *(_DWORD *)(v3 + 48);
    if (v175 == 2)
    {
      uint64_t v187 = a1[1];
      unint64_t v177 = *(void **)v187;
      uint64_t v178 = *(unsigned __int16 *)(a1[2] + 28);
      uint64_t v179 = *(char **)(*(void *)v187 + 1312);
      unint64_t v188 = *(void *)(*(void *)v187 + 1320);
      if ((unint64_t)v179 >= v188)
      {
        unint64_t v181 = (char *)v177[163];
        uint64_t v190 = (v179 - v181) >> 3;
        if ((unint64_t)(v190 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v191 = v188 - (void)v181;
        unint64_t v192 = (uint64_t)(v188 - (void)v181) >> 2;
        if (v192 <= v190 + 1) {
          unint64_t v192 = v190 + 1;
        }
        if (v191 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v193 = v192;
        }
        if (v193)
        {
          uint64_t v194 = (char *)sub_5714((uint64_t)(v177 + 165), v193);
          uint64_t v179 = (char *)v177[164];
          unint64_t v181 = (char *)v177[163];
        }
        else
        {
          uint64_t v194 = 0;
        }
        unint64_t v195 = &v194[8 * v190];
        unint64_t v196 = &v194[8 * v193];
        *(void *)unint64_t v195 = v178;
        uint64_t v189 = v195 + 8;
        while (v179 != v181)
        {
          uint64_t v198 = *((void *)v179 - 1);
          v179 -= 8;
          *((void *)v195 - 1) = v198;
          v195 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v175 != 1) {
        goto LABEL_262;
      }
      uint64_t v176 = a1[1];
      unint64_t v177 = *(void **)v176;
      uint64_t v178 = *(unsigned __int16 *)(a1[2] + 28);
      uint64_t v179 = *(char **)(*(void *)v176 + 1312);
      unint64_t v180 = *(void *)(*(void *)v176 + 1320);
      if ((unint64_t)v179 >= v180)
      {
        unint64_t v181 = (char *)v177[163];
        uint64_t v182 = (v179 - v181) >> 3;
        if ((unint64_t)(v182 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v183 = v180 - (void)v181;
        unint64_t v184 = (uint64_t)(v180 - (void)v181) >> 2;
        if (v184 <= v182 + 1) {
          unint64_t v184 = v182 + 1;
        }
        if (v183 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v185 = v184;
        }
        if (v185)
        {
          uint64_t v186 = (char *)sub_5714((uint64_t)(v177 + 165), v185);
          uint64_t v179 = (char *)v177[164];
          unint64_t v181 = (char *)v177[163];
        }
        else
        {
          uint64_t v186 = 0;
        }
        unint64_t v195 = &v186[8 * v182];
        unint64_t v196 = &v186[8 * v185];
        *(void *)unint64_t v195 = v178;
        uint64_t v189 = v195 + 8;
        while (v179 != v181)
        {
          uint64_t v197 = *((void *)v179 - 1);
          v179 -= 8;
          *((void *)v195 - 1) = v197;
          v195 -= 8;
        }
LABEL_259:
        v177[163] = v195;
        v177[164] = v189;
        v177[165] = v196;
        if (v181) {
          operator delete(v181);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v179 = v178;
    uint64_t v189 = v179 + 8;
LABEL_261:
    v177[164] = v189;
LABEL_262:
    int v199 = 1 << *(_DWORD *)(v3 + 48);
    if (v199 == 2)
    {
      uint64_t v211 = a1[1];
      uint64_t v201 = *(void **)v211;
      uint64_t v202 = *(unsigned __int16 *)(a1[2] + 46);
      unint64_t v203 = *(char **)(*(void *)v211 + 1336);
      unint64_t v212 = *(void *)(*(void *)v211 + 1344);
      if ((unint64_t)v203 >= v212)
      {
        unint64_t v205 = (char *)v201[166];
        uint64_t v214 = (v203 - v205) >> 3;
        if ((unint64_t)(v214 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v215 = v212 - (void)v205;
        unint64_t v216 = (uint64_t)(v212 - (void)v205) >> 2;
        if (v216 <= v214 + 1) {
          unint64_t v216 = v214 + 1;
        }
        if (v215 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v217 = v216;
        }
        if (v217)
        {
          unint64_t v218 = (char *)sub_5714((uint64_t)(v201 + 168), v217);
          unint64_t v203 = (char *)v201[167];
          unint64_t v205 = (char *)v201[166];
        }
        else
        {
          unint64_t v218 = 0;
        }
        uint64_t v219 = &v218[8 * v214];
        unint64_t v220 = &v218[8 * v217];
        *(void *)uint64_t v219 = v202;
        int v213 = v219 + 8;
        while (v203 != v205)
        {
          uint64_t v222 = *((void *)v203 - 1);
          v203 -= 8;
          *((void *)v219 - 1) = v222;
          v219 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v199 != 1) {
        goto LABEL_294;
      }
      uint64_t v200 = a1[1];
      uint64_t v201 = *(void **)v200;
      uint64_t v202 = *(unsigned __int16 *)(a1[2] + 46);
      unint64_t v203 = *(char **)(*(void *)v200 + 1336);
      unint64_t v204 = *(void *)(*(void *)v200 + 1344);
      if ((unint64_t)v203 >= v204)
      {
        unint64_t v205 = (char *)v201[166];
        uint64_t v206 = (v203 - v205) >> 3;
        if ((unint64_t)(v206 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v207 = v204 - (void)v205;
        unint64_t v208 = (uint64_t)(v204 - (void)v205) >> 2;
        if (v208 <= v206 + 1) {
          unint64_t v208 = v206 + 1;
        }
        if (v207 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v209 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v209 = v208;
        }
        if (v209)
        {
          int v210 = (char *)sub_5714((uint64_t)(v201 + 168), v209);
          unint64_t v203 = (char *)v201[167];
          unint64_t v205 = (char *)v201[166];
        }
        else
        {
          int v210 = 0;
        }
        uint64_t v219 = &v210[8 * v206];
        unint64_t v220 = &v210[8 * v209];
        *(void *)uint64_t v219 = v202;
        int v213 = v219 + 8;
        while (v203 != v205)
        {
          uint64_t v221 = *((void *)v203 - 1);
          v203 -= 8;
          *((void *)v219 - 1) = v221;
          v219 -= 8;
        }
LABEL_291:
        v201[166] = v219;
        v201[167] = v213;
        v201[168] = v220;
        if (v205) {
          operator delete(v205);
        }
        goto LABEL_293;
      }
    }
    *(void *)unint64_t v203 = v202;
    int v213 = v203 + 8;
LABEL_293:
    v201[167] = v213;
LABEL_294:
    int v223 = 1 << *(_DWORD *)(v3 + 48);
    if (v223 == 2)
    {
      uint64_t v235 = a1[1];
      uint64_t v225 = *(void **)v235;
      uint64_t v226 = *(unsigned __int16 *)(a1[2] + 34);
      unint64_t v227 = *(char **)(*(void *)v235 + 1360);
      unint64_t v236 = *(void *)(*(void *)v235 + 1368);
      if ((unint64_t)v227 >= v236)
      {
        unint64_t v229 = (char *)v225[169];
        uint64_t v238 = (v227 - v229) >> 3;
        if ((unint64_t)(v238 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v239 = v236 - (void)v229;
        unint64_t v240 = (uint64_t)(v236 - (void)v229) >> 2;
        if (v240 <= v238 + 1) {
          unint64_t v240 = v238 + 1;
        }
        if (v239 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v241 = v240;
        }
        if (v241)
        {
          unint64_t v242 = (char *)sub_5714((uint64_t)(v225 + 171), v241);
          unint64_t v227 = (char *)v225[170];
          unint64_t v229 = (char *)v225[169];
        }
        else
        {
          unint64_t v242 = 0;
        }
        unint64_t v243 = &v242[8 * v238];
        unint64_t v244 = &v242[8 * v241];
        *(void *)unint64_t v243 = v226;
        uint64_t v237 = v243 + 8;
        while (v227 != v229)
        {
          uint64_t v246 = *((void *)v227 - 1);
          v227 -= 8;
          *((void *)v243 - 1) = v246;
          v243 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v223 != 1) {
        goto LABEL_326;
      }
      uint64_t v224 = a1[1];
      uint64_t v225 = *(void **)v224;
      uint64_t v226 = *(unsigned __int16 *)(a1[2] + 34);
      unint64_t v227 = *(char **)(*(void *)v224 + 1360);
      unint64_t v228 = *(void *)(*(void *)v224 + 1368);
      if ((unint64_t)v227 >= v228)
      {
        unint64_t v229 = (char *)v225[169];
        uint64_t v230 = (v227 - v229) >> 3;
        if ((unint64_t)(v230 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v231 = v228 - (void)v229;
        unint64_t v232 = (uint64_t)(v228 - (void)v229) >> 2;
        if (v232 <= v230 + 1) {
          unint64_t v232 = v230 + 1;
        }
        if (v231 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v233 = v232;
        }
        if (v233)
        {
          uint64_t v234 = (char *)sub_5714((uint64_t)(v225 + 171), v233);
          unint64_t v227 = (char *)v225[170];
          unint64_t v229 = (char *)v225[169];
        }
        else
        {
          uint64_t v234 = 0;
        }
        unint64_t v243 = &v234[8 * v230];
        unint64_t v244 = &v234[8 * v233];
        *(void *)unint64_t v243 = v226;
        uint64_t v237 = v243 + 8;
        while (v227 != v229)
        {
          uint64_t v245 = *((void *)v227 - 1);
          v227 -= 8;
          *((void *)v243 - 1) = v245;
          v243 -= 8;
        }
LABEL_323:
        v225[169] = v243;
        v225[170] = v237;
        v225[171] = v244;
        if (v229) {
          operator delete(v229);
        }
        goto LABEL_325;
      }
    }
    *(void *)unint64_t v227 = v226;
    uint64_t v237 = v227 + 8;
LABEL_325:
    v225[170] = v237;
LABEL_326:
    int v247 = 1 << *(_DWORD *)(v3 + 48);
    if (v247 == 2)
    {
      uint64_t v259 = a1[1];
      unint64_t v249 = *(void **)v259;
      uint64_t v250 = *(unsigned __int16 *)(a1[2] + 42);
      unint64_t v251 = *(char **)(*(void *)v259 + 1384);
      unint64_t v260 = *(void *)(*(void *)v259 + 1392);
      if ((unint64_t)v251 >= v260)
      {
        uint64_t v253 = (char *)v249[172];
        uint64_t v262 = (v251 - v253) >> 3;
        if ((unint64_t)(v262 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v263 = v260 - (void)v253;
        unint64_t v264 = (uint64_t)(v260 - (void)v253) >> 2;
        if (v264 <= v262 + 1) {
          unint64_t v264 = v262 + 1;
        }
        if (v263 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v265 = v264;
        }
        if (v265)
        {
          unint64_t v266 = (char *)sub_5714((uint64_t)(v249 + 174), v265);
          unint64_t v251 = (char *)v249[173];
          uint64_t v253 = (char *)v249[172];
        }
        else
        {
          unint64_t v266 = 0;
        }
        unint64_t v267 = &v266[8 * v262];
        unint64_t v268 = &v266[8 * v265];
        *(void *)unint64_t v267 = v250;
        unint64_t v261 = v267 + 8;
        while (v251 != v253)
        {
          uint64_t v270 = *((void *)v251 - 1);
          v251 -= 8;
          *((void *)v267 - 1) = v270;
          v267 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v247 != 1) {
        goto LABEL_358;
      }
      uint64_t v248 = a1[1];
      unint64_t v249 = *(void **)v248;
      uint64_t v250 = *(unsigned __int16 *)(a1[2] + 42);
      unint64_t v251 = *(char **)(*(void *)v248 + 1384);
      unint64_t v252 = *(void *)(*(void *)v248 + 1392);
      if ((unint64_t)v251 >= v252)
      {
        uint64_t v253 = (char *)v249[172];
        uint64_t v254 = (v251 - v253) >> 3;
        if ((unint64_t)(v254 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v255 = v252 - (void)v253;
        unint64_t v256 = (uint64_t)(v252 - (void)v253) >> 2;
        if (v256 <= v254 + 1) {
          unint64_t v256 = v254 + 1;
        }
        if (v255 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v257 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v257 = v256;
        }
        if (v257)
        {
          int v258 = (char *)sub_5714((uint64_t)(v249 + 174), v257);
          unint64_t v251 = (char *)v249[173];
          uint64_t v253 = (char *)v249[172];
        }
        else
        {
          int v258 = 0;
        }
        unint64_t v267 = &v258[8 * v254];
        unint64_t v268 = &v258[8 * v257];
        *(void *)unint64_t v267 = v250;
        unint64_t v261 = v267 + 8;
        while (v251 != v253)
        {
          uint64_t v269 = *((void *)v251 - 1);
          v251 -= 8;
          *((void *)v267 - 1) = v269;
          v267 -= 8;
        }
LABEL_355:
        v249[172] = v267;
        v249[173] = v261;
        v249[174] = v268;
        if (v253) {
          operator delete(v253);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v251 = v250;
    unint64_t v261 = v251 + 8;
LABEL_357:
    v249[173] = v261;
LABEL_358:
    int v271 = 1 << *(_DWORD *)(v3 + 48);
    if (v271 == 2)
    {
      uint64_t v283 = a1[1];
      unint64_t v273 = *(void **)v283;
      uint64_t v274 = *(unsigned __int16 *)(a1[2] + 30);
      uint64_t v275 = *(char **)(*(void *)v283 + 1408);
      unint64_t v284 = *(void *)(*(void *)v283 + 1416);
      if ((unint64_t)v275 >= v284)
      {
        uint64_t v277 = (char *)v273[175];
        uint64_t v286 = (v275 - v277) >> 3;
        if ((unint64_t)(v286 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v287 = v284 - (void)v277;
        unint64_t v288 = (uint64_t)(v284 - (void)v277) >> 2;
        if (v288 <= v286 + 1) {
          unint64_t v288 = v286 + 1;
        }
        if (v287 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v289 = v288;
        }
        if (v289)
        {
          unint64_t v290 = (char *)sub_5714((uint64_t)(v273 + 177), v289);
          uint64_t v275 = (char *)v273[176];
          uint64_t v277 = (char *)v273[175];
        }
        else
        {
          unint64_t v290 = 0;
        }
        unint64_t v291 = &v290[8 * v286];
        uint64_t v292 = &v290[8 * v289];
        *(void *)unint64_t v291 = v274;
        uint64_t v285 = v291 + 8;
        while (v275 != v277)
        {
          uint64_t v294 = *((void *)v275 - 1);
          v275 -= 8;
          *((void *)v291 - 1) = v294;
          v291 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v271 != 1) {
        goto LABEL_390;
      }
      uint64_t v272 = a1[1];
      unint64_t v273 = *(void **)v272;
      uint64_t v274 = *(unsigned __int16 *)(a1[2] + 30);
      uint64_t v275 = *(char **)(*(void *)v272 + 1408);
      unint64_t v276 = *(void *)(*(void *)v272 + 1416);
      if ((unint64_t)v275 >= v276)
      {
        uint64_t v277 = (char *)v273[175];
        uint64_t v278 = (v275 - v277) >> 3;
        if ((unint64_t)(v278 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v279 = v276 - (void)v277;
        unint64_t v280 = (uint64_t)(v276 - (void)v277) >> 2;
        if (v280 <= v278 + 1) {
          unint64_t v280 = v278 + 1;
        }
        if (v279 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v281 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v281 = v280;
        }
        if (v281)
        {
          int v282 = (char *)sub_5714((uint64_t)(v273 + 177), v281);
          uint64_t v275 = (char *)v273[176];
          uint64_t v277 = (char *)v273[175];
        }
        else
        {
          int v282 = 0;
        }
        unint64_t v291 = &v282[8 * v278];
        uint64_t v292 = &v282[8 * v281];
        *(void *)unint64_t v291 = v274;
        uint64_t v285 = v291 + 8;
        while (v275 != v277)
        {
          uint64_t v293 = *((void *)v275 - 1);
          v275 -= 8;
          *((void *)v291 - 1) = v293;
          v291 -= 8;
        }
LABEL_387:
        v273[175] = v291;
        v273[176] = v285;
        v273[177] = v292;
        if (v277) {
          operator delete(v277);
        }
        goto LABEL_389;
      }
    }
    *(void *)uint64_t v275 = v274;
    uint64_t v285 = v275 + 8;
LABEL_389:
    v273[176] = v285;
LABEL_390:
    int v295 = 1 << *(_DWORD *)(v3 + 48);
    if (v295 == 2)
    {
      uint64_t v307 = a1[2];
      uint64_t v297 = *(void **)a1[1];
      uint64_t v298 = *(_WORD *)(v307 + 50) & 0x7FFF;
      uint64_t v299 = (char *)v297[179];
      unint64_t v308 = v297[180];
      if ((unint64_t)v299 >= v308)
      {
        int v301 = (char *)v297[178];
        uint64_t v310 = (v299 - v301) >> 3;
        if (!((unint64_t)(v310 + 1) >> 61))
        {
          unint64_t v311 = v308 - (void)v301;
          unint64_t v312 = (uint64_t)(v308 - (void)v301) >> 2;
          if (v312 <= v310 + 1) {
            unint64_t v312 = v310 + 1;
          }
          if (v311 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v313 = v312;
          }
          if (v313)
          {
            uint64_t v314 = (char *)sub_5714((uint64_t)(v297 + 180), v313);
            uint64_t v299 = (char *)v297[179];
            int v301 = (char *)v297[178];
          }
          else
          {
            uint64_t v314 = 0;
          }
          unint64_t v315 = &v314[8 * v310];
          unint64_t v316 = &v314[8 * v313];
          *(void *)unint64_t v315 = v298;
          unint64_t v309 = v315 + 8;
          while (v299 != v301)
          {
            uint64_t v318 = *((void *)v299 - 1);
            v299 -= 8;
            *((void *)v315 - 1) = v318;
            v315 -= 8;
          }
          goto LABEL_419;
        }
LABEL_424:
        sub_566C();
      }
    }
    else
    {
      if (v295 != 1)
      {
LABEL_422:
        *a2 = 1;
        return;
      }
      uint64_t v296 = a1[2];
      uint64_t v297 = *(void **)a1[1];
      uint64_t v298 = *(_WORD *)(v296 + 50) & 0x7FFF;
      uint64_t v299 = (char *)v297[179];
      unint64_t v300 = v297[180];
      if ((unint64_t)v299 >= v300)
      {
        int v301 = (char *)v297[178];
        uint64_t v302 = (v299 - v301) >> 3;
        if (!((unint64_t)(v302 + 1) >> 61))
        {
          unint64_t v303 = v300 - (void)v301;
          unint64_t v304 = (uint64_t)(v300 - (void)v301) >> 2;
          if (v304 <= v302 + 1) {
            unint64_t v304 = v302 + 1;
          }
          if (v303 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v305 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v305 = v304;
          }
          if (v305)
          {
            unint64_t v306 = (char *)sub_5714((uint64_t)(v297 + 180), v305);
            uint64_t v299 = (char *)v297[179];
            int v301 = (char *)v297[178];
          }
          else
          {
            unint64_t v306 = 0;
          }
          unint64_t v315 = &v306[8 * v302];
          unint64_t v316 = &v306[8 * v305];
          *(void *)unint64_t v315 = v298;
          unint64_t v309 = v315 + 8;
          while (v299 != v301)
          {
            uint64_t v317 = *((void *)v299 - 1);
            v299 -= 8;
            *((void *)v315 - 1) = v317;
            v315 -= 8;
          }
LABEL_419:
          v297[178] = v315;
          v297[179] = v309;
          v297[180] = v316;
          if (v301) {
            operator delete(v301);
          }
          goto LABEL_421;
        }
        goto LABEL_424;
      }
    }
    *(void *)uint64_t v299 = v298;
    unint64_t v309 = v299 + 8;
LABEL_421:
    v297[179] = v309;
    goto LABEL_422;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = (unsigned __int16 *)a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[143] - 8) += v17[24] & 0x7FFF;
    *(void *)(v19[146] - 8) += v17[18] & 0x7FFF;
    *(void *)(v19[149] - 8) += v17[22];
    *(void *)(v19[152] - 8) += v17[16];
    *(void *)(v19[155] - 8) += v17[19];
    *(void *)(v19[158] - 8) += v17[13];
    *(void *)(v19[161] - 8) += v17[20];
    *(void *)(v19[164] - 8) += v17[14];
    *(void *)(v19[167] - 8) += v17[23];
    *(void *)(v19[170] - 8) += v17[17];
    uint64_t v20 = (unsigned __int16 *)a1[2];
    uint64_t v21 = (void *)*v18;
    *(void *)(v21[173] - 8) += v20[21];
    *(void *)(v21[176] - 8) += v20[15];
    *(void *)(v21[179] - 8) += v20[25] & 0x7FFF;
  }
}

void sub_157644(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 == 1)
  {
    unsigned int v11 = *(_DWORD *)(v3 + 48);
    if (!v11)
    {
      uint64_t v12 = a1[2];
      uint64_t v13 = *(void *)a1[1];
      *(void *)(*(void *)(v13 + 784) - 8) += *(_DWORD *)(v12 + 36) & 0x3FFFF;
      *(void *)(*(void *)(v13 + 808) - 8) += *(_DWORD *)(v12 + 32) & 0x3FFFF;
    }
    if (v11 <= 1)
    {
      uint64_t v14 = a1[2];
      uint64_t v15 = *(void *)a1[1];
      *(void *)(*(void *)(v15 + 832) - 8) += *(_DWORD *)(v14 + 28) & 0x3FFFF;
      *(void *)(*(void *)(v15 + 856) - 8) += ((unint64_t)*(unsigned int *)(v14 + 24) >> 1) & 0x3FFFF;
    }
    if (v11)
    {
      int v16 = 1 << v11;
      if (v16 == 4)
      {
        unint64_t v27 = (_DWORD *)a1[2];
        uint64_t v28 = *(void **)a1[1];
        *(void *)(v28[119] - 8) += v27[11] & 0x3FFFF;
        *(void *)(v28[122] - 8) += v27[10] & 0x3FFFF;
        *(void *)(v28[125] - 8) += v27[9] & 0x3FFFF;
        uint64_t v29 = v27[8] & 0x3FFFF;
        uint64_t v30 = v28[128];
LABEL_28:
        *(void *)(v30 - 8) += v29;
        return;
      }
      if (v16 == 2)
      {
        uint64_t v17 = a1[2];
        uint64_t v18 = *(void **)a1[1];
        *(void *)(v18[116] - 8) += *(unsigned __int16 *)(v17 + 62);
        *(void *)(v18[119] - 8) += *(_DWORD *)(v17 + 44) & 0x3FFFF;
        *(void *)(v18[122] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
        *(void *)(v18[125] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
        uint64_t v19 = *(_DWORD *)(v17 + 32) & 0x3FFFF;
        uint64_t v20 = v18[128];
        goto LABEL_27;
      }
      if (v16 != 1) {
        return;
      }
      uint64_t v17 = a1[2];
      uint64_t v18 = *(void **)a1[1];
    }
    else
    {
      uint64_t v17 = a1[2];
      uint64_t v18 = *(void **)a1[1];
      *(void *)(v18[110] - 8) += *(_DWORD *)(v17 + 44) & 0x3FFFF;
      *(void *)(v18[113] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
    }
    uint64_t v19 = *(unsigned __int16 *)(v17 + 62);
    uint64_t v20 = v18[116];
LABEL_27:
    *(void *)(v20 - 8) += v19;
    *(void *)(v18[131] - 8) += *(_DWORD *)(v17 + 48) & 0xFFFFF;
    *(void *)(v18[134] - 8) += *(_DWORD *)(v17 + 56) & 0xFFFFF;
    *(void *)(v18[137] - 8) += *(unsigned __int16 *)(v17 + 60);
    uint64_t v29 = *(_DWORD *)(v17 + 52) & 0xFFFFF;
    uint64_t v30 = v18[140];
    goto LABEL_28;
  }
  if (*a2) {
    return;
  }
  int v5 = *(_DWORD *)(v3 + 48);
  if (!v5)
  {
    uint64_t v6 = *(void **)a1[1];
    uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    uint64_t v8 = (uint64_t *)v6[98];
    unint64_t v9 = v6[99];
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v21 = (uint64_t *)v6[97];
      uint64_t v22 = v8 - v21;
      if ((unint64_t)(v22 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v23 = v9 - (void)v21;
      unint64_t v24 = (uint64_t)(v9 - (void)v21) >> 2;
      if (v24 <= v22 + 1) {
        unint64_t v24 = v22 + 1;
      }
      if (v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25)
      {
        unint64_t v26 = (char *)sub_5714((uint64_t)(v6 + 99), v25);
        uint64_t v8 = (uint64_t *)v6[98];
        uint64_t v21 = (uint64_t *)v6[97];
      }
      else
      {
        unint64_t v26 = 0;
      }
      uint64_t v31 = (uint64_t *)&v26[8 * v22];
      uint64_t v32 = &v26[8 * v25];
      uint64_t *v31 = v7;
      uint64_t v10 = v31 + 1;
      while (v8 != v21)
      {
        uint64_t v33 = *--v8;
        *--uint64_t v31 = v33;
      }
      v6[97] = v31;
      v6[98] = v10;
      v6[99] = v32;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *uint64_t v8 = v7;
      uint64_t v10 = v8 + 1;
    }
    v6[98] = v10;
    int v5 = *(_DWORD *)(v3 + 48);
    if (!v5)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      uint64_t v36 = (uint64_t *)v34[101];
      unint64_t v37 = v34[102];
      if ((unint64_t)v36 >= v37)
      {
        uint64_t v39 = (uint64_t *)v34[100];
        uint64_t v40 = v36 - v39;
        if ((unint64_t)(v40 + 1) >> 61) {
          goto LABEL_442;
        }
        unint64_t v41 = v37 - (void)v39;
        unint64_t v42 = (uint64_t)(v37 - (void)v39) >> 2;
        if (v42 <= v40 + 1) {
          unint64_t v42 = v40 + 1;
        }
        if (v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43)
        {
          unint64_t v44 = (char *)sub_5714((uint64_t)(v34 + 102), v43);
          uint64_t v36 = (uint64_t *)v34[101];
          uint64_t v39 = (uint64_t *)v34[100];
        }
        else
        {
          unint64_t v44 = 0;
        }
        unint64_t v45 = (uint64_t *)&v44[8 * v40];
        uint64_t v46 = &v44[8 * v43];
        uint64_t *v45 = v35;
        unint64_t v38 = v45 + 1;
        while (v36 != v39)
        {
          uint64_t v47 = *--v36;
          *--unint64_t v45 = v47;
        }
        v34[100] = v45;
        v34[101] = v38;
        v34[102] = v46;
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *uint64_t v36 = v35;
        unint64_t v38 = v36 + 1;
      }
      v34[101] = v38;
      int v5 = *(_DWORD *)(v3 + 48);
    }
  }
  int v48 = 1 << v5;
  if (v48 == 2)
  {
    unint64_t v49 = *(void **)a1[1];
    uint64_t v50 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    unint64_t v51 = (uint64_t *)v49[104];
    unint64_t v59 = v49[105];
    if ((unint64_t)v51 >= v59)
    {
      uint64_t v53 = (uint64_t *)v49[103];
      uint64_t v61 = v51 - v53;
      if ((unint64_t)(v61 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v62 = v59 - (void)v53;
      unint64_t v63 = (uint64_t)(v59 - (void)v53) >> 2;
      if (v63 <= v61 + 1) {
        unint64_t v63 = v61 + 1;
      }
      if (v62 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v63;
      }
      if (v64)
      {
        unint64_t v65 = (char *)sub_5714((uint64_t)(v49 + 105), v64);
        unint64_t v51 = (uint64_t *)v49[104];
        uint64_t v53 = (uint64_t *)v49[103];
      }
      else
      {
        unint64_t v65 = 0;
      }
      unint64_t v66 = (uint64_t *)&v65[8 * v61];
      uint64_t v67 = &v65[8 * v64];
      *unint64_t v66 = v50;
      unint64_t v60 = v66 + 1;
      while (v51 != v53)
      {
        uint64_t v69 = *--v51;
        *--unint64_t v66 = v69;
      }
      goto LABEL_82;
    }
  }
  else
  {
    if (v48 != 1) {
      goto LABEL_85;
    }
    unint64_t v49 = *(void **)a1[1];
    uint64_t v50 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    unint64_t v51 = (uint64_t *)v49[104];
    unint64_t v52 = v49[105];
    if ((unint64_t)v51 >= v52)
    {
      uint64_t v53 = (uint64_t *)v49[103];
      uint64_t v54 = v51 - v53;
      if ((unint64_t)(v54 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v55 = v52 - (void)v53;
      unint64_t v56 = (uint64_t)(v52 - (void)v53) >> 2;
      if (v56 <= v54 + 1) {
        unint64_t v56 = v54 + 1;
      }
      if (v55 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v56;
      }
      if (v57)
      {
        uint64_t v58 = (char *)sub_5714((uint64_t)(v49 + 105), v57);
        unint64_t v51 = (uint64_t *)v49[104];
        uint64_t v53 = (uint64_t *)v49[103];
      }
      else
      {
        uint64_t v58 = 0;
      }
      unint64_t v66 = (uint64_t *)&v58[8 * v54];
      uint64_t v67 = &v58[8 * v57];
      *unint64_t v66 = v50;
      unint64_t v60 = v66 + 1;
      while (v51 != v53)
      {
        uint64_t v68 = *--v51;
        *--unint64_t v66 = v68;
      }
LABEL_82:
      v49[103] = v66;
      v49[104] = v60;
      v49[105] = v67;
      if (v53) {
        operator delete(v53);
      }
      goto LABEL_84;
    }
  }
  *unint64_t v51 = v50;
  unint64_t v60 = v51 + 1;
LABEL_84:
  v49[104] = v60;
LABEL_85:
  int v70 = *(_DWORD *)(v3 + 48);
  if (1 << v70 == 2)
  {
    unint64_t v71 = *(void **)a1[1];
    unint64_t v72 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x3FFFF;
    unint64_t v73 = (unint64_t *)v71[107];
    unint64_t v81 = v71[108];
    if ((unint64_t)v73 >= v81)
    {
      unint64_t v75 = (unint64_t *)v71[106];
      uint64_t v83 = v73 - v75;
      if ((unint64_t)(v83 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v84 = v81 - (void)v75;
      unint64_t v85 = (uint64_t)(v81 - (void)v75) >> 2;
      if (v85 <= v83 + 1) {
        unint64_t v85 = v83 + 1;
      }
      if (v84 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v85;
      }
      if (v86)
      {
        unint64_t v87 = (char *)sub_5714((uint64_t)(v71 + 108), v86);
        unint64_t v73 = (unint64_t *)v71[107];
        unint64_t v75 = (unint64_t *)v71[106];
      }
      else
      {
        unint64_t v87 = 0;
      }
      unint64_t v88 = (unint64_t *)&v87[8 * v83];
      unint64_t v89 = &v87[8 * v86];
      *unint64_t v88 = v72;
      uint64_t v82 = v88 + 1;
      while (v73 != v75)
      {
        unint64_t v91 = *--v73;
        *--unint64_t v88 = v91;
      }
      goto LABEL_114;
    }
LABEL_97:
    *unint64_t v73 = v72;
    uint64_t v82 = v73 + 1;
LABEL_116:
    v71[107] = v82;
    int v70 = *(_DWORD *)(v3 + 48);
    goto LABEL_117;
  }
  if (1 << v70 == 1)
  {
    unint64_t v71 = *(void **)a1[1];
    unint64_t v72 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x3FFFF;
    unint64_t v73 = (unint64_t *)v71[107];
    unint64_t v74 = v71[108];
    if ((unint64_t)v73 >= v74)
    {
      unint64_t v75 = (unint64_t *)v71[106];
      uint64_t v76 = v73 - v75;
      if ((unint64_t)(v76 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v77 = v74 - (void)v75;
      unint64_t v78 = (uint64_t)(v74 - (void)v75) >> 2;
      if (v78 <= v76 + 1) {
        unint64_t v78 = v76 + 1;
      }
      if (v77 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v78;
      }
      if (v79)
      {
        uint64_t v80 = (char *)sub_5714((uint64_t)(v71 + 108), v79);
        unint64_t v73 = (unint64_t *)v71[107];
        unint64_t v75 = (unint64_t *)v71[106];
      }
      else
      {
        uint64_t v80 = 0;
      }
      unint64_t v88 = (unint64_t *)&v80[8 * v76];
      unint64_t v89 = &v80[8 * v79];
      *unint64_t v88 = v72;
      uint64_t v82 = v88 + 1;
      while (v73 != v75)
      {
        unint64_t v90 = *--v73;
        *--unint64_t v88 = v90;
      }
LABEL_114:
      v71[106] = v88;
      v71[107] = v82;
      v71[108] = v89;
      if (v75) {
        operator delete(v75);
      }
      goto LABEL_116;
    }
    goto LABEL_97;
  }
LABEL_117:
  if (!v70)
  {
    unint64_t v92 = *(void **)a1[1];
    uint64_t v93 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
    uint64_t v94 = (uint64_t *)v92[110];
    unint64_t v95 = v92[111];
    if ((unint64_t)v94 >= v95)
    {
      unint64_t v97 = (uint64_t *)v92[109];
      uint64_t v98 = v94 - v97;
      if ((unint64_t)(v98 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v99 = v95 - (void)v97;
      unint64_t v100 = (uint64_t)(v95 - (void)v97) >> 2;
      if (v100 <= v98 + 1) {
        unint64_t v100 = v98 + 1;
      }
      if (v99 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v101 = v100;
      }
      if (v101)
      {
        uint64_t v102 = (char *)sub_5714((uint64_t)(v92 + 111), v101);
        uint64_t v94 = (uint64_t *)v92[110];
        unint64_t v97 = (uint64_t *)v92[109];
      }
      else
      {
        uint64_t v102 = 0;
      }
      int v103 = (uint64_t *)&v102[8 * v98];
      uint64_t v104 = &v102[8 * v101];
      *int v103 = v93;
      unint64_t v96 = v103 + 1;
      while (v94 != v97)
      {
        uint64_t v105 = *--v94;
        *--int v103 = v105;
      }
      v92[109] = v103;
      v92[110] = v96;
      v92[111] = v104;
      if (v97) {
        operator delete(v97);
      }
    }
    else
    {
      *uint64_t v94 = v93;
      unint64_t v96 = v94 + 1;
    }
    v92[110] = v96;
    int v70 = *(_DWORD *)(v3 + 48);
    if (!v70)
    {
      uint64_t v106 = *(void **)a1[1];
      uint64_t v107 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      unint64_t v108 = (uint64_t *)v106[113];
      unint64_t v109 = v106[114];
      if ((unint64_t)v108 >= v109)
      {
        unint64_t v111 = (uint64_t *)v106[112];
        uint64_t v112 = v108 - v111;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_442;
        }
        unint64_t v113 = v109 - (void)v111;
        unint64_t v114 = (uint64_t)(v109 - (void)v111) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          unint64_t v116 = (char *)sub_5714((uint64_t)(v106 + 114), v115);
          unint64_t v108 = (uint64_t *)v106[113];
          unint64_t v111 = (uint64_t *)v106[112];
        }
        else
        {
          unint64_t v116 = 0;
        }
        unint64_t v117 = (uint64_t *)&v116[8 * v112];
        uint64_t v118 = &v116[8 * v115];
        *unint64_t v117 = v107;
        uint64_t v110 = v117 + 1;
        while (v108 != v111)
        {
          uint64_t v119 = *--v108;
          *--unint64_t v117 = v119;
        }
        v106[112] = v117;
        v106[113] = v110;
        v106[114] = v118;
        if (v111) {
          operator delete(v111);
        }
      }
      else
      {
        *unint64_t v108 = v107;
        uint64_t v110 = v108 + 1;
      }
      v106[113] = v110;
      int v70 = *(_DWORD *)(v3 + 48);
    }
  }
  int v120 = 1 << v70;
  if (v120 == 2)
  {
    uint64_t v132 = a1[1];
    int v122 = *(void **)v132;
    uint64_t v123 = *(unsigned __int16 *)(a1[2] + 62);
    uint64_t v124 = *(char **)(*(void *)v132 + 928);
    unint64_t v133 = *(void *)(*(void *)v132 + 936);
    if ((unint64_t)v124 >= v133)
    {
      uint64_t v126 = (char *)v122[115];
      uint64_t v135 = (v124 - v126) >> 3;
      if ((unint64_t)(v135 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v136 = v133 - (void)v126;
      unint64_t v137 = (uint64_t)(v133 - (void)v126) >> 2;
      if (v137 <= v135 + 1) {
        unint64_t v137 = v135 + 1;
      }
      if (v136 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v138 = v137;
      }
      if (v138)
      {
        uint64_t v139 = (char *)sub_5714((uint64_t)(v122 + 117), v138);
        uint64_t v124 = (char *)v122[116];
        uint64_t v126 = (char *)v122[115];
      }
      else
      {
        uint64_t v139 = 0;
      }
      unint64_t v140 = &v139[8 * v135];
      unint64_t v141 = &v139[8 * v138];
      *(void *)unint64_t v140 = v123;
      uint64_t v134 = v140 + 8;
      while (v124 != v126)
      {
        uint64_t v143 = *((void *)v124 - 1);
        v124 -= 8;
        *((void *)v140 - 1) = v143;
        v140 -= 8;
      }
      goto LABEL_181;
    }
  }
  else
  {
    if (v120 != 1) {
      goto LABEL_184;
    }
    uint64_t v121 = a1[1];
    int v122 = *(void **)v121;
    uint64_t v123 = *(unsigned __int16 *)(a1[2] + 62);
    uint64_t v124 = *(char **)(*(void *)v121 + 928);
    unint64_t v125 = *(void *)(*(void *)v121 + 936);
    if ((unint64_t)v124 >= v125)
    {
      uint64_t v126 = (char *)v122[115];
      uint64_t v127 = (v124 - v126) >> 3;
      if ((unint64_t)(v127 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v128 = v125 - (void)v126;
      unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
      if (v129 <= v127 + 1) {
        unint64_t v129 = v127 + 1;
      }
      if (v128 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v130 = v129;
      }
      if (v130)
      {
        uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 117), v130);
        uint64_t v124 = (char *)v122[116];
        uint64_t v126 = (char *)v122[115];
      }
      else
      {
        uint64_t v131 = 0;
      }
      unint64_t v140 = &v131[8 * v127];
      unint64_t v141 = &v131[8 * v130];
      *(void *)unint64_t v140 = v123;
      uint64_t v134 = v140 + 8;
      while (v124 != v126)
      {
        uint64_t v142 = *((void *)v124 - 1);
        v124 -= 8;
        *((void *)v140 - 1) = v142;
        v140 -= 8;
      }
LABEL_181:
      v122[115] = v140;
      v122[116] = v134;
      v122[117] = v141;
      if (v126) {
        operator delete(v126);
      }
      goto LABEL_183;
    }
  }
  *(void *)uint64_t v124 = v123;
  uint64_t v134 = v124 + 8;
LABEL_183:
  v122[116] = v134;
LABEL_184:
  int v144 = 1 << *(_DWORD *)(v3 + 48);
  if (v144 == 4)
  {
    unint64_t v145 = *(void **)a1[1];
    uint64_t v146 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
    int v147 = (uint64_t *)v145[119];
    unint64_t v155 = v145[120];
    if ((unint64_t)v147 >= v155)
    {
      uint64_t v149 = (uint64_t *)v145[118];
      uint64_t v157 = v147 - v149;
      if ((unint64_t)(v157 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v158 = v155 - (void)v149;
      unint64_t v159 = (uint64_t)(v155 - (void)v149) >> 2;
      if (v159 <= v157 + 1) {
        unint64_t v159 = v157 + 1;
      }
      if (v158 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v160 = v159;
      }
      if (v160)
      {
        unint64_t v161 = (char *)sub_5714((uint64_t)(v145 + 120), v160);
        int v147 = (uint64_t *)v145[119];
        uint64_t v149 = (uint64_t *)v145[118];
      }
      else
      {
        unint64_t v161 = 0;
      }
      unint64_t v162 = (uint64_t *)&v161[8 * v157];
      uint64_t v163 = &v161[8 * v160];
      *unint64_t v162 = v146;
      unint64_t v156 = v162 + 1;
      while (v147 != v149)
      {
        uint64_t v165 = *--v147;
        *--unint64_t v162 = v165;
      }
      goto LABEL_213;
    }
  }
  else
  {
    if (v144 != 2) {
      goto LABEL_216;
    }
    unint64_t v145 = *(void **)a1[1];
    uint64_t v146 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
    int v147 = (uint64_t *)v145[119];
    unint64_t v148 = v145[120];
    if ((unint64_t)v147 >= v148)
    {
      uint64_t v149 = (uint64_t *)v145[118];
      uint64_t v150 = v147 - v149;
      if ((unint64_t)(v150 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v151 = v148 - (void)v149;
      unint64_t v152 = (uint64_t)(v148 - (void)v149) >> 2;
      if (v152 <= v150 + 1) {
        unint64_t v152 = v150 + 1;
      }
      if (v151 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v153 = v152;
      }
      if (v153)
      {
        uint64_t v154 = (char *)sub_5714((uint64_t)(v145 + 120), v153);
        int v147 = (uint64_t *)v145[119];
        uint64_t v149 = (uint64_t *)v145[118];
      }
      else
      {
        uint64_t v154 = 0;
      }
      unint64_t v162 = (uint64_t *)&v154[8 * v150];
      uint64_t v163 = &v154[8 * v153];
      *unint64_t v162 = v146;
      unint64_t v156 = v162 + 1;
      while (v147 != v149)
      {
        uint64_t v164 = *--v147;
        *--unint64_t v162 = v164;
      }
LABEL_213:
      v145[118] = v162;
      v145[119] = v156;
      v145[120] = v163;
      if (v149) {
        operator delete(v149);
      }
      goto LABEL_215;
    }
  }
  *int v147 = v146;
  unint64_t v156 = v147 + 1;
LABEL_215:
  v145[119] = v156;
LABEL_216:
  int v166 = 1 << *(_DWORD *)(v3 + 48);
  if (v166 == 4)
  {
    unint64_t v167 = *(void **)a1[1];
    uint64_t v168 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    unint64_t v169 = (uint64_t *)v167[122];
    unint64_t v177 = v167[123];
    if ((unint64_t)v169 >= v177)
    {
      uint64_t v171 = (uint64_t *)v167[121];
      uint64_t v179 = v169 - v171;
      if ((unint64_t)(v179 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v180 = v177 - (void)v171;
      unint64_t v181 = (uint64_t)(v177 - (void)v171) >> 2;
      if (v181 <= v179 + 1) {
        unint64_t v181 = v179 + 1;
      }
      if (v180 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v182 = v181;
      }
      if (v182)
      {
        unint64_t v183 = (char *)sub_5714((uint64_t)(v167 + 123), v182);
        unint64_t v169 = (uint64_t *)v167[122];
        uint64_t v171 = (uint64_t *)v167[121];
      }
      else
      {
        unint64_t v183 = 0;
      }
      unint64_t v184 = (uint64_t *)&v183[8 * v179];
      unint64_t v185 = &v183[8 * v182];
      *unint64_t v184 = v168;
      uint64_t v178 = v184 + 1;
      while (v169 != v171)
      {
        uint64_t v187 = *--v169;
        *--unint64_t v184 = v187;
      }
      goto LABEL_245;
    }
  }
  else
  {
    if (v166 != 2) {
      goto LABEL_248;
    }
    unint64_t v167 = *(void **)a1[1];
    uint64_t v168 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    unint64_t v169 = (uint64_t *)v167[122];
    unint64_t v170 = v167[123];
    if ((unint64_t)v169 >= v170)
    {
      uint64_t v171 = (uint64_t *)v167[121];
      uint64_t v172 = v169 - v171;
      if ((unint64_t)(v172 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v173 = v170 - (void)v171;
      unint64_t v174 = (uint64_t)(v170 - (void)v171) >> 2;
      if (v174 <= v172 + 1) {
        unint64_t v174 = v172 + 1;
      }
      if (v173 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v175 = v174;
      }
      if (v175)
      {
        uint64_t v176 = (char *)sub_5714((uint64_t)(v167 + 123), v175);
        unint64_t v169 = (uint64_t *)v167[122];
        uint64_t v171 = (uint64_t *)v167[121];
      }
      else
      {
        uint64_t v176 = 0;
      }
      unint64_t v184 = (uint64_t *)&v176[8 * v172];
      unint64_t v185 = &v176[8 * v175];
      *unint64_t v184 = v168;
      uint64_t v178 = v184 + 1;
      while (v169 != v171)
      {
        uint64_t v186 = *--v169;
        *--unint64_t v184 = v186;
      }
LABEL_245:
      v167[121] = v184;
      v167[122] = v178;
      v167[123] = v185;
      if (v171) {
        operator delete(v171);
      }
      goto LABEL_247;
    }
  }
  uint64_t *v169 = v168;
  uint64_t v178 = v169 + 1;
LABEL_247:
  v167[122] = v178;
LABEL_248:
  int v188 = 1 << *(_DWORD *)(v3 + 48);
  if (v188 == 4)
  {
    uint64_t v189 = *(void **)a1[1];
    uint64_t v190 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    unint64_t v191 = (uint64_t *)v189[125];
    unint64_t v199 = v189[126];
    if ((unint64_t)v191 >= v199)
    {
      unint64_t v193 = (uint64_t *)v189[124];
      uint64_t v201 = v191 - v193;
      if ((unint64_t)(v201 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v202 = v199 - (void)v193;
      unint64_t v203 = (uint64_t)(v199 - (void)v193) >> 2;
      if (v203 <= v201 + 1) {
        unint64_t v203 = v201 + 1;
      }
      if (v202 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v204 = v203;
      }
      if (v204)
      {
        unint64_t v205 = (char *)sub_5714((uint64_t)(v189 + 126), v204);
        unint64_t v191 = (uint64_t *)v189[125];
        unint64_t v193 = (uint64_t *)v189[124];
      }
      else
      {
        unint64_t v205 = 0;
      }
      uint64_t v206 = (uint64_t *)&v205[8 * v201];
      unint64_t v207 = &v205[8 * v204];
      *uint64_t v206 = v190;
      uint64_t v200 = v206 + 1;
      while (v191 != v193)
      {
        uint64_t v209 = *--v191;
        *--uint64_t v206 = v209;
      }
      goto LABEL_277;
    }
  }
  else
  {
    if (v188 != 2) {
      goto LABEL_280;
    }
    uint64_t v189 = *(void **)a1[1];
    uint64_t v190 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    unint64_t v191 = (uint64_t *)v189[125];
    unint64_t v192 = v189[126];
    if ((unint64_t)v191 >= v192)
    {
      unint64_t v193 = (uint64_t *)v189[124];
      uint64_t v194 = v191 - v193;
      if ((unint64_t)(v194 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v195 = v192 - (void)v193;
      unint64_t v196 = (uint64_t)(v192 - (void)v193) >> 2;
      if (v196 <= v194 + 1) {
        unint64_t v196 = v194 + 1;
      }
      if (v195 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v197 = v196;
      }
      if (v197)
      {
        uint64_t v198 = (char *)sub_5714((uint64_t)(v189 + 126), v197);
        unint64_t v191 = (uint64_t *)v189[125];
        unint64_t v193 = (uint64_t *)v189[124];
      }
      else
      {
        uint64_t v198 = 0;
      }
      uint64_t v206 = (uint64_t *)&v198[8 * v194];
      unint64_t v207 = &v198[8 * v197];
      *uint64_t v206 = v190;
      uint64_t v200 = v206 + 1;
      while (v191 != v193)
      {
        uint64_t v208 = *--v191;
        *--uint64_t v206 = v208;
      }
LABEL_277:
      v189[124] = v206;
      v189[125] = v200;
      v189[126] = v207;
      if (v193) {
        operator delete(v193);
      }
      goto LABEL_279;
    }
  }
  *unint64_t v191 = v190;
  uint64_t v200 = v191 + 1;
LABEL_279:
  v189[125] = v200;
LABEL_280:
  int v210 = 1 << *(_DWORD *)(v3 + 48);
  if (v210 == 4)
  {
    uint64_t v211 = *(void **)a1[1];
    uint64_t v212 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    int v213 = (uint64_t *)v211[128];
    unint64_t v221 = v211[129];
    if ((unint64_t)v213 >= v221)
    {
      unint64_t v215 = (uint64_t *)v211[127];
      uint64_t v223 = v213 - v215;
      if ((unint64_t)(v223 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v224 = v221 - (void)v215;
      unint64_t v225 = (uint64_t)(v221 - (void)v215) >> 2;
      if (v225 <= v223 + 1) {
        unint64_t v225 = v223 + 1;
      }
      if (v224 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v226 = v225;
      }
      if (v226)
      {
        unint64_t v227 = (char *)sub_5714((uint64_t)(v211 + 129), v226);
        int v213 = (uint64_t *)v211[128];
        unint64_t v215 = (uint64_t *)v211[127];
      }
      else
      {
        unint64_t v227 = 0;
      }
      unint64_t v228 = (uint64_t *)&v227[8 * v223];
      unint64_t v229 = &v227[8 * v226];
      *unint64_t v228 = v212;
      uint64_t v222 = v228 + 1;
      while (v213 != v215)
      {
        uint64_t v231 = *--v213;
        *--unint64_t v228 = v231;
      }
      goto LABEL_309;
    }
  }
  else
  {
    if (v210 != 2) {
      goto LABEL_312;
    }
    uint64_t v211 = *(void **)a1[1];
    uint64_t v212 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    int v213 = (uint64_t *)v211[128];
    unint64_t v214 = v211[129];
    if ((unint64_t)v213 >= v214)
    {
      unint64_t v215 = (uint64_t *)v211[127];
      uint64_t v216 = v213 - v215;
      if ((unint64_t)(v216 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v217 = v214 - (void)v215;
      unint64_t v218 = (uint64_t)(v214 - (void)v215) >> 2;
      if (v218 <= v216 + 1) {
        unint64_t v218 = v216 + 1;
      }
      if (v217 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v219 = v218;
      }
      if (v219)
      {
        unint64_t v220 = (char *)sub_5714((uint64_t)(v211 + 129), v219);
        int v213 = (uint64_t *)v211[128];
        unint64_t v215 = (uint64_t *)v211[127];
      }
      else
      {
        unint64_t v220 = 0;
      }
      unint64_t v228 = (uint64_t *)&v220[8 * v216];
      unint64_t v229 = &v220[8 * v219];
      *unint64_t v228 = v212;
      uint64_t v222 = v228 + 1;
      while (v213 != v215)
      {
        uint64_t v230 = *--v213;
        *--unint64_t v228 = v230;
      }
LABEL_309:
      v211[127] = v228;
      v211[128] = v222;
      v211[129] = v229;
      if (v215) {
        operator delete(v215);
      }
      goto LABEL_311;
    }
  }
  *int v213 = v212;
  uint64_t v222 = v213 + 1;
LABEL_311:
  v211[128] = v222;
LABEL_312:
  int v232 = 1 << *(_DWORD *)(v3 + 48);
  if (v232 == 2)
  {
    unint64_t v233 = *(void **)a1[1];
    uint64_t v234 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
    uint64_t v235 = (uint64_t *)v233[131];
    unint64_t v243 = v233[132];
    if ((unint64_t)v235 >= v243)
    {
      uint64_t v237 = (uint64_t *)v233[130];
      uint64_t v245 = v235 - v237;
      if ((unint64_t)(v245 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v246 = v243 - (void)v237;
      unint64_t v247 = (uint64_t)(v243 - (void)v237) >> 2;
      if (v247 <= v245 + 1) {
        unint64_t v247 = v245 + 1;
      }
      if (v246 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v248 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v248 = v247;
      }
      if (v248)
      {
        unint64_t v249 = (char *)sub_5714((uint64_t)(v233 + 132), v248);
        uint64_t v235 = (uint64_t *)v233[131];
        uint64_t v237 = (uint64_t *)v233[130];
      }
      else
      {
        unint64_t v249 = 0;
      }
      uint64_t v250 = (uint64_t *)&v249[8 * v245];
      unint64_t v251 = &v249[8 * v248];
      *uint64_t v250 = v234;
      unint64_t v244 = v250 + 1;
      while (v235 != v237)
      {
        uint64_t v253 = *--v235;
        *--uint64_t v250 = v253;
      }
      goto LABEL_341;
    }
  }
  else
  {
    if (v232 != 1) {
      goto LABEL_344;
    }
    unint64_t v233 = *(void **)a1[1];
    uint64_t v234 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
    uint64_t v235 = (uint64_t *)v233[131];
    unint64_t v236 = v233[132];
    if ((unint64_t)v235 >= v236)
    {
      uint64_t v237 = (uint64_t *)v233[130];
      uint64_t v238 = v235 - v237;
      if ((unint64_t)(v238 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v239 = v236 - (void)v237;
      unint64_t v240 = (uint64_t)(v236 - (void)v237) >> 2;
      if (v240 <= v238 + 1) {
        unint64_t v240 = v238 + 1;
      }
      if (v239 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v240;
      }
      if (v241)
      {
        unint64_t v242 = (char *)sub_5714((uint64_t)(v233 + 132), v241);
        uint64_t v235 = (uint64_t *)v233[131];
        uint64_t v237 = (uint64_t *)v233[130];
      }
      else
      {
        unint64_t v242 = 0;
      }
      uint64_t v250 = (uint64_t *)&v242[8 * v238];
      unint64_t v251 = &v242[8 * v241];
      *uint64_t v250 = v234;
      unint64_t v244 = v250 + 1;
      while (v235 != v237)
      {
        uint64_t v252 = *--v235;
        *--uint64_t v250 = v252;
      }
LABEL_341:
      v233[130] = v250;
      v233[131] = v244;
      v233[132] = v251;
      if (v237) {
        operator delete(v237);
      }
      goto LABEL_343;
    }
  }
  *uint64_t v235 = v234;
  unint64_t v244 = v235 + 1;
LABEL_343:
  v233[131] = v244;
LABEL_344:
  int v254 = 1 << *(_DWORD *)(v3 + 48);
  if (v254 == 2)
  {
    unint64_t v255 = *(void **)a1[1];
    uint64_t v256 = *(_DWORD *)(a1[2] + 56) & 0xFFFFFLL;
    unint64_t v257 = (uint64_t *)v255[134];
    unint64_t v265 = v255[135];
    if ((unint64_t)v257 >= v265)
    {
      uint64_t v259 = (uint64_t *)v255[133];
      uint64_t v267 = v257 - v259;
      if ((unint64_t)(v267 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v268 = v265 - (void)v259;
      unint64_t v269 = (uint64_t)(v265 - (void)v259) >> 2;
      if (v269 <= v267 + 1) {
        unint64_t v269 = v267 + 1;
      }
      if (v268 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v270 = v269;
      }
      if (v270)
      {
        int v271 = (char *)sub_5714((uint64_t)(v255 + 135), v270);
        unint64_t v257 = (uint64_t *)v255[134];
        uint64_t v259 = (uint64_t *)v255[133];
      }
      else
      {
        int v271 = 0;
      }
      uint64_t v272 = (uint64_t *)&v271[8 * v267];
      unint64_t v273 = &v271[8 * v270];
      *uint64_t v272 = v256;
      unint64_t v266 = v272 + 1;
      while (v257 != v259)
      {
        uint64_t v275 = *--v257;
        *--uint64_t v272 = v275;
      }
      goto LABEL_373;
    }
  }
  else
  {
    if (v254 != 1) {
      goto LABEL_376;
    }
    unint64_t v255 = *(void **)a1[1];
    uint64_t v256 = *(_DWORD *)(a1[2] + 56) & 0xFFFFFLL;
    unint64_t v257 = (uint64_t *)v255[134];
    unint64_t v258 = v255[135];
    if ((unint64_t)v257 >= v258)
    {
      uint64_t v259 = (uint64_t *)v255[133];
      uint64_t v260 = v257 - v259;
      if ((unint64_t)(v260 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v261 = v258 - (void)v259;
      unint64_t v262 = (uint64_t)(v258 - (void)v259) >> 2;
      if (v262 <= v260 + 1) {
        unint64_t v262 = v260 + 1;
      }
      if (v261 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v263 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v263 = v262;
      }
      if (v263)
      {
        unint64_t v264 = (char *)sub_5714((uint64_t)(v255 + 135), v263);
        unint64_t v257 = (uint64_t *)v255[134];
        uint64_t v259 = (uint64_t *)v255[133];
      }
      else
      {
        unint64_t v264 = 0;
      }
      uint64_t v272 = (uint64_t *)&v264[8 * v260];
      unint64_t v273 = &v264[8 * v263];
      *uint64_t v272 = v256;
      unint64_t v266 = v272 + 1;
      while (v257 != v259)
      {
        uint64_t v274 = *--v257;
        *--uint64_t v272 = v274;
      }
LABEL_373:
      v255[133] = v272;
      v255[134] = v266;
      v255[135] = v273;
      if (v259) {
        operator delete(v259);
      }
      goto LABEL_375;
    }
  }
  *unint64_t v257 = v256;
  unint64_t v266 = v257 + 1;
LABEL_375:
  v255[134] = v266;
LABEL_376:
  int v276 = 1 << *(_DWORD *)(v3 + 48);
  if (v276 == 2)
  {
    uint64_t v288 = a1[1];
    uint64_t v278 = *(void **)v288;
    uint64_t v279 = *(unsigned __int16 *)(a1[2] + 60);
    unint64_t v280 = *(char **)(*(void *)v288 + 1096);
    unint64_t v289 = *(void *)(*(void *)v288 + 1104);
    if ((unint64_t)v280 >= v289)
    {
      int v282 = (char *)v278[136];
      uint64_t v291 = (v280 - v282) >> 3;
      if ((unint64_t)(v291 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v292 = v289 - (void)v282;
      unint64_t v293 = (uint64_t)(v289 - (void)v282) >> 2;
      if (v293 <= v291 + 1) {
        unint64_t v293 = v291 + 1;
      }
      if (v292 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v294 = v293;
      }
      if (v294)
      {
        int v295 = (char *)sub_5714((uint64_t)(v278 + 138), v294);
        unint64_t v280 = (char *)v278[137];
        int v282 = (char *)v278[136];
      }
      else
      {
        int v295 = 0;
      }
      uint64_t v296 = &v295[8 * v291];
      uint64_t v297 = &v295[8 * v294];
      *(void *)uint64_t v296 = v279;
      unint64_t v290 = v296 + 8;
      while (v280 != v282)
      {
        uint64_t v299 = *((void *)v280 - 1);
        v280 -= 8;
        *((void *)v296 - 1) = v299;
        v296 -= 8;
      }
      goto LABEL_405;
    }
  }
  else
  {
    if (v276 != 1) {
      goto LABEL_408;
    }
    uint64_t v277 = a1[1];
    uint64_t v278 = *(void **)v277;
    uint64_t v279 = *(unsigned __int16 *)(a1[2] + 60);
    unint64_t v280 = *(char **)(*(void *)v277 + 1096);
    unint64_t v281 = *(void *)(*(void *)v277 + 1104);
    if ((unint64_t)v280 >= v281)
    {
      int v282 = (char *)v278[136];
      uint64_t v283 = (v280 - v282) >> 3;
      if ((unint64_t)(v283 + 1) >> 61) {
        goto LABEL_442;
      }
      unint64_t v284 = v281 - (void)v282;
      unint64_t v285 = (uint64_t)(v281 - (void)v282) >> 2;
      if (v285 <= v283 + 1) {
        unint64_t v285 = v283 + 1;
      }
      if (v284 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v286 = v285;
      }
      if (v286)
      {
        unint64_t v287 = (char *)sub_5714((uint64_t)(v278 + 138), v286);
        unint64_t v280 = (char *)v278[137];
        int v282 = (char *)v278[136];
      }
      else
      {
        unint64_t v287 = 0;
      }
      uint64_t v296 = &v287[8 * v283];
      uint64_t v297 = &v287[8 * v286];
      *(void *)uint64_t v296 = v279;
      unint64_t v290 = v296 + 8;
      while (v280 != v282)
      {
        uint64_t v298 = *((void *)v280 - 1);
        v280 -= 8;
        *((void *)v296 - 1) = v298;
        v296 -= 8;
      }
LABEL_405:
      v278[136] = v296;
      v278[137] = v290;
      v278[138] = v297;
      if (v282) {
        operator delete(v282);
      }
      goto LABEL_407;
    }
  }
  *(void *)unint64_t v280 = v279;
  unint64_t v290 = v280 + 8;
LABEL_407:
  v278[137] = v290;
LABEL_408:
  int v300 = 1 << *(_DWORD *)(v3 + 48);
  if (v300 == 2)
  {
    uint64_t v312 = a1[2];
    uint64_t v302 = *(void **)a1[1];
    uint64_t v303 = *(_DWORD *)(v312 + 52) & 0xFFFFFLL;
    unint64_t v304 = (uint64_t *)v302[140];
    unint64_t v313 = v302[141];
    if ((unint64_t)v304 >= v313)
    {
      unint64_t v306 = (uint64_t *)v302[139];
      uint64_t v315 = v304 - v306;
      if (!((unint64_t)(v315 + 1) >> 61))
      {
        unint64_t v316 = v313 - (void)v306;
        unint64_t v317 = (uint64_t)(v313 - (void)v306) >> 2;
        if (v317 <= v315 + 1) {
          unint64_t v317 = v315 + 1;
        }
        if (v316 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v318 = v317;
        }
        if (v318)
        {
          uint64_t v319 = (char *)sub_5714((uint64_t)(v302 + 141), v318);
          unint64_t v304 = (uint64_t *)v302[140];
          unint64_t v306 = (uint64_t *)v302[139];
        }
        else
        {
          uint64_t v319 = 0;
        }
        uint64_t v320 = (uint64_t *)&v319[8 * v315];
        uint64_t v321 = &v319[8 * v318];
        *uint64_t v320 = v303;
        uint64_t v314 = v320 + 1;
        while (v304 != v306)
        {
          uint64_t v323 = *--v304;
          *--uint64_t v320 = v323;
        }
        goto LABEL_437;
      }
LABEL_442:
      sub_566C();
    }
LABEL_420:
    *unint64_t v304 = v303;
    uint64_t v314 = v304 + 1;
LABEL_439:
    v302[140] = v314;
    goto LABEL_440;
  }
  if (v300 == 1)
  {
    uint64_t v301 = a1[2];
    uint64_t v302 = *(void **)a1[1];
    uint64_t v303 = *(_DWORD *)(v301 + 52) & 0xFFFFFLL;
    unint64_t v304 = (uint64_t *)v302[140];
    unint64_t v305 = v302[141];
    if ((unint64_t)v304 >= v305)
    {
      unint64_t v306 = (uint64_t *)v302[139];
      uint64_t v307 = v304 - v306;
      if (!((unint64_t)(v307 + 1) >> 61))
      {
        unint64_t v308 = v305 - (void)v306;
        unint64_t v309 = (uint64_t)(v305 - (void)v306) >> 2;
        if (v309 <= v307 + 1) {
          unint64_t v309 = v307 + 1;
        }
        if (v308 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v310 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v310 = v309;
        }
        if (v310)
        {
          unint64_t v311 = (char *)sub_5714((uint64_t)(v302 + 141), v310);
          unint64_t v304 = (uint64_t *)v302[140];
          unint64_t v306 = (uint64_t *)v302[139];
        }
        else
        {
          unint64_t v311 = 0;
        }
        uint64_t v320 = (uint64_t *)&v311[8 * v307];
        uint64_t v321 = &v311[8 * v310];
        *uint64_t v320 = v303;
        uint64_t v314 = v320 + 1;
        while (v304 != v306)
        {
          uint64_t v322 = *--v304;
          *--uint64_t v320 = v322;
        }
LABEL_437:
        v302[139] = v320;
        v302[140] = v314;
        v302[141] = v321;
        if (v306) {
          operator delete(v306);
        }
        goto LABEL_439;
      }
      goto LABEL_442;
    }
    goto LABEL_420;
  }
LABEL_440:
  *a2 = 1;
}

void sub_158C6C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      uint64_t v8 = (uint64_t *)v6[773];
      unint64_t v19 = v6[774];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (uint64_t *)v6[772];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 774), v24);
          uint64_t v8 = (uint64_t *)v6[773];
          uint64_t v10 = (uint64_t *)v6[772];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = (uint64_t *)&v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--unint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      uint64_t v8 = (uint64_t *)v6[773];
      unint64_t v9 = v6[774];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (uint64_t *)v6[772];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 774), v14);
          uint64_t v8 = (uint64_t *)v6[773];
          uint64_t v10 = (uint64_t *)v6[772];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v26 = (uint64_t *)&v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--unint64_t v26 = v28;
        }
LABEL_35:
        v6[772] = v26;
        v6[773] = v20;
        v6[774] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[773] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      uint64_t v33 = (uint64_t *)v31[776];
      unint64_t v41 = v31[777];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (uint64_t *)v31[775];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          uint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 777), v46);
          uint64_t v33 = (uint64_t *)v31[776];
          uint64_t v35 = (uint64_t *)v31[775];
        }
        else
        {
          uint64_t v47 = 0;
        }
        int v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *int v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--int v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      uint64_t v33 = (uint64_t *)v31[776];
      unint64_t v34 = v31[777];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (uint64_t *)v31[775];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          uint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 777), v39);
          uint64_t v33 = (uint64_t *)v31[776];
          uint64_t v35 = (uint64_t *)v31[775];
        }
        else
        {
          uint64_t v40 = 0;
        }
        int v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *int v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--int v48 = v50;
        }
LABEL_67:
        v31[775] = v48;
        v31[776] = v42;
        v31[777] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[776] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      unint64_t v55 = (uint64_t *)v53[779];
      unint64_t v63 = v53[780];
      if ((unint64_t)v55 >= v63)
      {
        unint64_t v57 = (uint64_t *)v53[778];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          uint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 780), v68);
          unint64_t v55 = (uint64_t *)v53[779];
          unint64_t v57 = (uint64_t *)v53[778];
        }
        else
        {
          uint64_t v69 = 0;
        }
        int v70 = (uint64_t *)&v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *int v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v73 = *--v55;
          *--int v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      unint64_t v55 = (uint64_t *)v53[779];
      unint64_t v56 = v53[780];
      if ((unint64_t)v55 >= v56)
      {
        unint64_t v57 = (uint64_t *)v53[778];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 780), v61);
          unint64_t v55 = (uint64_t *)v53[779];
          unint64_t v57 = (uint64_t *)v53[778];
        }
        else
        {
          unint64_t v62 = 0;
        }
        int v70 = (uint64_t *)&v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *int v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v72 = *--v55;
          *--int v70 = v72;
        }
LABEL_99:
        v53[778] = v70;
        v53[779] = v64;
        v53[780] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *unint64_t v55 = v54;
    unint64_t v64 = v55 + 1;
LABEL_101:
    v53[779] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v86 = a1[2];
      uint64_t v76 = *(void **)a1[1];
      unint64_t v77 = ((unint64_t)*(unsigned int *)(v86 + 24) >> 1) & 0x7FFFF;
      unint64_t v78 = (unint64_t *)v76[782];
      unint64_t v87 = v76[783];
      if ((unint64_t)v78 >= v87)
      {
        uint64_t v80 = (unint64_t *)v76[781];
        uint64_t v89 = v78 - v80;
        if (!((unint64_t)(v89 + 1) >> 61))
        {
          unint64_t v90 = v87 - (void)v80;
          unint64_t v91 = (uint64_t)(v87 - (void)v80) >> 2;
          if (v91 <= v89 + 1) {
            unint64_t v91 = v89 + 1;
          }
          if (v90 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v91;
          }
          if (v92)
          {
            uint64_t v93 = (char *)sub_5714((uint64_t)(v76 + 783), v92);
            unint64_t v78 = (unint64_t *)v76[782];
            uint64_t v80 = (unint64_t *)v76[781];
          }
          else
          {
            uint64_t v93 = 0;
          }
          uint64_t v94 = (unint64_t *)&v93[8 * v89];
          unint64_t v95 = &v93[8 * v92];
          *uint64_t v94 = v77;
          unint64_t v88 = v94 + 1;
          while (v78 != v80)
          {
            unint64_t v97 = *--v78;
            *--uint64_t v94 = v97;
          }
          goto LABEL_131;
        }
LABEL_136:
        sub_566C();
      }
    }
    else
    {
      if (v74 != 1)
      {
LABEL_134:
        *a2 = 1;
        return;
      }
      uint64_t v75 = a1[2];
      uint64_t v76 = *(void **)a1[1];
      unint64_t v77 = ((unint64_t)*(unsigned int *)(v75 + 24) >> 1) & 0x7FFFF;
      unint64_t v78 = (unint64_t *)v76[782];
      unint64_t v79 = v76[783];
      if ((unint64_t)v78 >= v79)
      {
        uint64_t v80 = (unint64_t *)v76[781];
        uint64_t v81 = v78 - v80;
        if (!((unint64_t)(v81 + 1) >> 61))
        {
          unint64_t v82 = v79 - (void)v80;
          unint64_t v83 = (uint64_t)(v79 - (void)v80) >> 2;
          if (v83 <= v81 + 1) {
            unint64_t v83 = v81 + 1;
          }
          if (v82 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v83;
          }
          if (v84)
          {
            unint64_t v85 = (char *)sub_5714((uint64_t)(v76 + 783), v84);
            unint64_t v78 = (unint64_t *)v76[782];
            uint64_t v80 = (unint64_t *)v76[781];
          }
          else
          {
            unint64_t v85 = 0;
          }
          uint64_t v94 = (unint64_t *)&v85[8 * v81];
          unint64_t v95 = &v85[8 * v84];
          *uint64_t v94 = v77;
          unint64_t v88 = v94 + 1;
          while (v78 != v80)
          {
            unint64_t v96 = *--v78;
            *--uint64_t v94 = v96;
          }
LABEL_131:
          v76[781] = v94;
          v76[782] = v88;
          v76[783] = v95;
          if (v80) {
            operator delete(v80);
          }
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    *unint64_t v78 = v77;
    unint64_t v88 = v78 + 1;
LABEL_133:
    v76[782] = v88;
    goto LABEL_134;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = (unsigned int *)a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[773] - 8) += v17[9] & 0xFFFFF;
    *(void *)(v18[776] - 8) += v17[7] & 0x1FFFF;
    *(void *)(v18[779] - 8) += v17[8] & 0xFFFFF;
    *(void *)(v18[782] - 8) += ((unint64_t)v17[6] >> 1) & 0x7FFFF;
  }
}

void sub_15938C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      uint64_t v8 = (uint64_t *)v6[656];
      unint64_t v22 = v6[657];
      if ((unint64_t)v8 >= v22)
      {
        uint64_t v10 = (uint64_t *)v6[655];
        uint64_t v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 657), v27);
          uint64_t v8 = (uint64_t *)v6[656];
          uint64_t v10 = (uint64_t *)v6[655];
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = (uint64_t *)&v28[8 * v24];
        int v30 = &v28[8 * v27];
        *uint64_t v29 = v7;
        unint64_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v32 = *--v8;
          *--uint64_t v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      uint64_t v8 = (uint64_t *)v6[656];
      unint64_t v9 = v6[657];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (uint64_t *)v6[655];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 657), v14);
          uint64_t v8 = (uint64_t *)v6[656];
          uint64_t v10 = (uint64_t *)v6[655];
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v29 = (uint64_t *)&v15[8 * v11];
        int v30 = &v15[8 * v14];
        *uint64_t v29 = v7;
        unint64_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v31 = *--v8;
          *--uint64_t v29 = v31;
        }
LABEL_35:
        v6[655] = v29;
        v6[656] = v23;
        v6[657] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    unint64_t v23 = v8 + 1;
LABEL_37:
    v6[656] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      uint64_t v36 = (uint64_t *)v34[659];
      unint64_t v44 = v34[660];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (uint64_t *)v34[658];
        uint64_t v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 660), v49);
          uint64_t v36 = (uint64_t *)v34[659];
          unint64_t v38 = (uint64_t *)v34[658];
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (uint64_t *)&v50[8 * v46];
        int v52 = &v50[8 * v49];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v54 = *--v36;
          *--uint64_t v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      uint64_t v36 = (uint64_t *)v34[659];
      unint64_t v37 = v34[660];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (uint64_t *)v34[658];
        uint64_t v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 660), v42);
          uint64_t v36 = (uint64_t *)v34[659];
          unint64_t v38 = (uint64_t *)v34[658];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v51 = (uint64_t *)&v43[8 * v39];
        int v52 = &v43[8 * v42];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v53 = *--v36;
          *--uint64_t v51 = v53;
        }
LABEL_67:
        v34[658] = v51;
        v34[659] = v45;
        v34[660] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *uint64_t v36 = v35;
    unint64_t v45 = v36 + 1;
LABEL_69:
    v34[659] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      unint64_t v56 = *(void **)a1[1];
      unint64_t v57 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
      uint64_t v58 = (unint64_t *)v56[662];
      unint64_t v66 = v56[663];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (unint64_t *)v56[661];
        uint64_t v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          uint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 663), v71);
          uint64_t v58 = (unint64_t *)v56[662];
          unint64_t v60 = (unint64_t *)v56[661];
        }
        else
        {
          uint64_t v72 = 0;
        }
        uint64_t v73 = (unint64_t *)&v72[8 * v68];
        int v74 = &v72[8 * v71];
        *uint64_t v73 = v57;
        unint64_t v67 = v73 + 1;
        while (v58 != v60)
        {
          unint64_t v76 = *--v58;
          *--uint64_t v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      unint64_t v56 = *(void **)a1[1];
      unint64_t v57 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
      uint64_t v58 = (unint64_t *)v56[662];
      unint64_t v59 = v56[663];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (unint64_t *)v56[661];
        uint64_t v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          uint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 663), v64);
          uint64_t v58 = (unint64_t *)v56[662];
          unint64_t v60 = (unint64_t *)v56[661];
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v73 = (unint64_t *)&v65[8 * v61];
        int v74 = &v65[8 * v64];
        *uint64_t v73 = v57;
        unint64_t v67 = v73 + 1;
        while (v58 != v60)
        {
          unint64_t v75 = *--v58;
          *--uint64_t v73 = v75;
        }
LABEL_99:
        v56[661] = v73;
        v56[662] = v67;
        v56[663] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *uint64_t v58 = v57;
    unint64_t v67 = v58 + 1;
LABEL_101:
    v56[662] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      uint64_t v80 = (uint64_t *)v78[665];
      unint64_t v88 = v78[666];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (uint64_t *)v78[664];
        uint64_t v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          uint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 666), v93);
          uint64_t v80 = (uint64_t *)v78[665];
          unint64_t v82 = (uint64_t *)v78[664];
        }
        else
        {
          uint64_t v94 = 0;
        }
        unint64_t v95 = (uint64_t *)&v94[8 * v90];
        unint64_t v96 = &v94[8 * v93];
        *unint64_t v95 = v79;
        uint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v98 = *--v80;
          *--unint64_t v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      uint64_t v80 = (uint64_t *)v78[665];
      unint64_t v81 = v78[666];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (uint64_t *)v78[664];
        uint64_t v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          unint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 666), v86);
          uint64_t v80 = (uint64_t *)v78[665];
          unint64_t v82 = (uint64_t *)v78[664];
        }
        else
        {
          unint64_t v87 = 0;
        }
        unint64_t v95 = (uint64_t *)&v87[8 * v83];
        unint64_t v96 = &v87[8 * v86];
        *unint64_t v95 = v79;
        uint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v97 = *--v80;
          *--unint64_t v95 = v97;
        }
LABEL_131:
        v78[664] = v95;
        v78[665] = v89;
        v78[666] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v80 = v79;
    uint64_t v89 = v80 + 1;
LABEL_133:
    v78[665] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      uint64_t v102 = (uint64_t *)v100[668];
      unint64_t v110 = v100[669];
      if ((unint64_t)v102 >= v110)
      {
        uint64_t v104 = (uint64_t *)v100[667];
        uint64_t v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          unint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 669), v115);
          uint64_t v102 = (uint64_t *)v100[668];
          uint64_t v104 = (uint64_t *)v100[667];
        }
        else
        {
          unint64_t v116 = 0;
        }
        unint64_t v117 = (uint64_t *)&v116[8 * v112];
        uint64_t v118 = &v116[8 * v115];
        *unint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v120 = *--v102;
          *--unint64_t v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      uint64_t v102 = (uint64_t *)v100[668];
      unint64_t v103 = v100[669];
      if ((unint64_t)v102 >= v103)
      {
        uint64_t v104 = (uint64_t *)v100[667];
        uint64_t v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 669), v108);
          uint64_t v102 = (uint64_t *)v100[668];
          uint64_t v104 = (uint64_t *)v100[667];
        }
        else
        {
          unint64_t v109 = 0;
        }
        unint64_t v117 = (uint64_t *)&v109[8 * v105];
        uint64_t v118 = &v109[8 * v108];
        *unint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v119 = *--v102;
          *--unint64_t v117 = v119;
        }
LABEL_163:
        v100[667] = v117;
        v100[668] = v111;
        v100[669] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    *uint64_t v102 = v101;
    unint64_t v111 = v102 + 1;
LABEL_165:
    v100[668] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      int v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      uint64_t v124 = (uint64_t *)v122[671];
      unint64_t v132 = v122[672];
      if ((unint64_t)v124 >= v132)
      {
        uint64_t v126 = (uint64_t *)v122[670];
        uint64_t v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          unint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 672), v137);
          uint64_t v124 = (uint64_t *)v122[671];
          uint64_t v126 = (uint64_t *)v122[670];
        }
        else
        {
          unint64_t v138 = 0;
        }
        uint64_t v139 = (uint64_t *)&v138[8 * v134];
        unint64_t v140 = &v138[8 * v137];
        *uint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v142 = *--v124;
          *--uint64_t v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      int v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      uint64_t v124 = (uint64_t *)v122[671];
      unint64_t v125 = v122[672];
      if ((unint64_t)v124 >= v125)
      {
        uint64_t v126 = (uint64_t *)v122[670];
        uint64_t v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 672), v130);
          uint64_t v124 = (uint64_t *)v122[671];
          uint64_t v126 = (uint64_t *)v122[670];
        }
        else
        {
          uint64_t v131 = 0;
        }
        uint64_t v139 = (uint64_t *)&v131[8 * v127];
        unint64_t v140 = &v131[8 * v130];
        *uint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v141 = *--v124;
          *--uint64_t v139 = v141;
        }
LABEL_195:
        v122[670] = v139;
        v122[671] = v133;
        v122[672] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    *uint64_t v124 = v123;
    unint64_t v133 = v124 + 1;
LABEL_197:
    v122[671] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      uint64_t v146 = (uint64_t *)v144[674];
      unint64_t v154 = v144[675];
      if ((unint64_t)v146 >= v154)
      {
        unint64_t v148 = (uint64_t *)v144[673];
        uint64_t v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          unint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 675), v159);
          uint64_t v146 = (uint64_t *)v144[674];
          unint64_t v148 = (uint64_t *)v144[673];
        }
        else
        {
          unint64_t v160 = 0;
        }
        unint64_t v161 = (uint64_t *)&v160[8 * v156];
        unint64_t v162 = &v160[8 * v159];
        *unint64_t v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v164 = *--v146;
          *--unint64_t v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      uint64_t v146 = (uint64_t *)v144[674];
      unint64_t v147 = v144[675];
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v148 = (uint64_t *)v144[673];
        uint64_t v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          unint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 675), v152);
          uint64_t v146 = (uint64_t *)v144[674];
          unint64_t v148 = (uint64_t *)v144[673];
        }
        else
        {
          unint64_t v153 = 0;
        }
        unint64_t v161 = (uint64_t *)&v153[8 * v149];
        unint64_t v162 = &v153[8 * v152];
        *unint64_t v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v163 = *--v146;
          *--unint64_t v161 = v163;
        }
LABEL_227:
        v144[673] = v161;
        v144[674] = v155;
        v144[675] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v146 = v145;
    unint64_t v155 = v146 + 1;
LABEL_229:
    v144[674] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      int v166 = *(void **)a1[1];
      uint64_t v167 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
      uint64_t v168 = (uint64_t *)v166[677];
      unint64_t v176 = v166[678];
      if ((unint64_t)v168 >= v176)
      {
        unint64_t v170 = (uint64_t *)v166[676];
        uint64_t v178 = v168 - v170;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          unint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 678), v181);
          uint64_t v168 = (uint64_t *)v166[677];
          unint64_t v170 = (uint64_t *)v166[676];
        }
        else
        {
          unint64_t v182 = 0;
        }
        unint64_t v183 = (uint64_t *)&v182[8 * v178];
        unint64_t v184 = &v182[8 * v181];
        uint64_t *v183 = v167;
        unint64_t v177 = v183 + 1;
        while (v168 != v170)
        {
          uint64_t v186 = *--v168;
          *--unint64_t v183 = v186;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      int v166 = *(void **)a1[1];
      uint64_t v167 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
      uint64_t v168 = (uint64_t *)v166[677];
      unint64_t v169 = v166[678];
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v170 = (uint64_t *)v166[676];
        uint64_t v171 = v168 - v170;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          unint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 678), v174);
          uint64_t v168 = (uint64_t *)v166[677];
          unint64_t v170 = (uint64_t *)v166[676];
        }
        else
        {
          unint64_t v175 = 0;
        }
        unint64_t v183 = (uint64_t *)&v175[8 * v171];
        unint64_t v184 = &v175[8 * v174];
        uint64_t *v183 = v167;
        unint64_t v177 = v183 + 1;
        while (v168 != v170)
        {
          uint64_t v185 = *--v168;
          *--unint64_t v183 = v185;
        }
LABEL_259:
        v166[676] = v183;
        v166[677] = v177;
        v166[678] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v168 = v167;
    unint64_t v177 = v168 + 1;
LABEL_261:
    v166[677] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      int v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[680];
      unint64_t v198 = v188[681];
      if ((unint64_t)v190 >= v198)
      {
        unint64_t v192 = (uint64_t *)v188[679];
        uint64_t v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          unint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 681), v203);
          uint64_t v190 = (uint64_t *)v188[680];
          unint64_t v192 = (uint64_t *)v188[679];
        }
        else
        {
          unint64_t v204 = 0;
        }
        unint64_t v205 = (uint64_t *)&v204[8 * v200];
        uint64_t v206 = &v204[8 * v203];
        *unint64_t v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v208 = *--v190;
          *--unint64_t v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      int v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[680];
      unint64_t v191 = v188[681];
      if ((unint64_t)v190 >= v191)
      {
        unint64_t v192 = (uint64_t *)v188[679];
        uint64_t v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          unint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 681), v196);
          uint64_t v190 = (uint64_t *)v188[680];
          unint64_t v192 = (uint64_t *)v188[679];
        }
        else
        {
          unint64_t v197 = 0;
        }
        unint64_t v205 = (uint64_t *)&v197[8 * v193];
        uint64_t v206 = &v197[8 * v196];
        *unint64_t v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v207 = *--v190;
          *--unint64_t v205 = v207;
        }
LABEL_291:
        v188[679] = v205;
        v188[680] = v199;
        v188[681] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    *uint64_t v190 = v189;
    unint64_t v199 = v190 + 1;
LABEL_293:
    v188[680] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      int v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      uint64_t v212 = (uint64_t *)v210[683];
      unint64_t v220 = v210[684];
      if ((unint64_t)v212 >= v220)
      {
        unint64_t v214 = (uint64_t *)v210[682];
        uint64_t v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          unint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 684), v225);
          uint64_t v212 = (uint64_t *)v210[683];
          unint64_t v214 = (uint64_t *)v210[682];
        }
        else
        {
          unint64_t v226 = 0;
        }
        unint64_t v227 = (uint64_t *)&v226[8 * v222];
        unint64_t v228 = &v226[8 * v225];
        *unint64_t v227 = v211;
        unint64_t v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v230 = *--v212;
          *--unint64_t v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      int v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      uint64_t v212 = (uint64_t *)v210[683];
      unint64_t v213 = v210[684];
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v214 = (uint64_t *)v210[682];
        uint64_t v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          unint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 684), v218);
          uint64_t v212 = (uint64_t *)v210[683];
          unint64_t v214 = (uint64_t *)v210[682];
        }
        else
        {
          unint64_t v219 = 0;
        }
        unint64_t v227 = (uint64_t *)&v219[8 * v215];
        unint64_t v228 = &v219[8 * v218];
        *unint64_t v227 = v211;
        unint64_t v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v229 = *--v212;
          *--unint64_t v227 = v229;
        }
LABEL_323:
        v210[682] = v227;
        v210[683] = v221;
        v210[684] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *uint64_t v212 = v211;
    unint64_t v221 = v212 + 1;
LABEL_325:
    v210[683] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      int v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
      uint64_t v234 = (uint64_t *)v232[686];
      unint64_t v242 = v232[687];
      if ((unint64_t)v234 >= v242)
      {
        unint64_t v236 = (uint64_t *)v232[685];
        uint64_t v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v245 = v242 - (void)v236;
        unint64_t v246 = (uint64_t)(v242 - (void)v236) >> 2;
        if (v246 <= v244 + 1) {
          unint64_t v246 = v244 + 1;
        }
        if (v245 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v247)
        {
          unint64_t v248 = (char *)sub_5714((uint64_t)(v232 + 687), v247);
          uint64_t v234 = (uint64_t *)v232[686];
          unint64_t v236 = (uint64_t *)v232[685];
        }
        else
        {
          unint64_t v248 = 0;
        }
        unint64_t v249 = (uint64_t *)&v248[8 * v244];
        uint64_t v250 = &v248[8 * v247];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v252 = *--v234;
          *--unint64_t v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1) {
        goto LABEL_358;
      }
      int v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
      uint64_t v234 = (uint64_t *)v232[686];
      unint64_t v235 = v232[687];
      if ((unint64_t)v234 >= v235)
      {
        unint64_t v236 = (uint64_t *)v232[685];
        uint64_t v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v238 = v235 - (void)v236;
        unint64_t v239 = (uint64_t)(v235 - (void)v236) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          unint64_t v241 = (char *)sub_5714((uint64_t)(v232 + 687), v240);
          uint64_t v234 = (uint64_t *)v232[686];
          unint64_t v236 = (uint64_t *)v232[685];
        }
        else
        {
          unint64_t v241 = 0;
        }
        unint64_t v249 = (uint64_t *)&v241[8 * v237];
        uint64_t v250 = &v241[8 * v240];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v251 = *--v234;
          *--unint64_t v249 = v251;
        }
LABEL_355:
        v232[685] = v249;
        v232[686] = v243;
        v232[687] = v250;
        if (v236) {
          operator delete(v236);
        }
        goto LABEL_357;
      }
    }
    *uint64_t v234 = v233;
    unint64_t v243 = v234 + 1;
LABEL_357:
    v232[686] = v243;
LABEL_358:
    int v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      int v254 = *(void **)a1[1];
      uint64_t v255 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
      uint64_t v256 = (uint64_t *)v254[689];
      unint64_t v264 = v254[690];
      if ((unint64_t)v256 >= v264)
      {
        unint64_t v258 = (uint64_t *)v254[688];
        uint64_t v266 = v256 - v258;
        if ((unint64_t)(v266 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v267 = v264 - (void)v258;
        unint64_t v268 = (uint64_t)(v264 - (void)v258) >> 2;
        if (v268 <= v266 + 1) {
          unint64_t v268 = v266 + 1;
        }
        if (v267 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v269 = v268;
        }
        if (v269)
        {
          unint64_t v270 = (char *)sub_5714((uint64_t)(v254 + 690), v269);
          uint64_t v256 = (uint64_t *)v254[689];
          unint64_t v258 = (uint64_t *)v254[688];
        }
        else
        {
          unint64_t v270 = 0;
        }
        int v271 = (uint64_t *)&v270[8 * v266];
        uint64_t v272 = &v270[8 * v269];
        *int v271 = v255;
        unint64_t v265 = v271 + 1;
        while (v256 != v258)
        {
          uint64_t v274 = *--v256;
          *--int v271 = v274;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1) {
        goto LABEL_390;
      }
      int v254 = *(void **)a1[1];
      uint64_t v255 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
      uint64_t v256 = (uint64_t *)v254[689];
      unint64_t v257 = v254[690];
      if ((unint64_t)v256 >= v257)
      {
        unint64_t v258 = (uint64_t *)v254[688];
        uint64_t v259 = v256 - v258;
        if ((unint64_t)(v259 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v260 = v257 - (void)v258;
        unint64_t v261 = (uint64_t)(v257 - (void)v258) >> 2;
        if (v261 <= v259 + 1) {
          unint64_t v261 = v259 + 1;
        }
        if (v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v262 = v261;
        }
        if (v262)
        {
          unint64_t v263 = (char *)sub_5714((uint64_t)(v254 + 690), v262);
          uint64_t v256 = (uint64_t *)v254[689];
          unint64_t v258 = (uint64_t *)v254[688];
        }
        else
        {
          unint64_t v263 = 0;
        }
        int v271 = (uint64_t *)&v263[8 * v259];
        uint64_t v272 = &v263[8 * v262];
        *int v271 = v255;
        unint64_t v265 = v271 + 1;
        while (v256 != v258)
        {
          uint64_t v273 = *--v256;
          *--int v271 = v273;
        }
LABEL_387:
        v254[688] = v271;
        v254[689] = v265;
        v254[690] = v272;
        if (v258) {
          operator delete(v258);
        }
        goto LABEL_389;
      }
    }
    *uint64_t v256 = v255;
    unint64_t v265 = v256 + 1;
LABEL_389:
    v254[689] = v265;
LABEL_390:
    int v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      int v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      uint64_t v278 = (uint64_t *)v276[692];
      unint64_t v286 = v276[693];
      if ((unint64_t)v278 >= v286)
      {
        unint64_t v280 = (uint64_t *)v276[691];
        uint64_t v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v289 = v286 - (void)v280;
        unint64_t v290 = (uint64_t)(v286 - (void)v280) >> 2;
        if (v290 <= v288 + 1) {
          unint64_t v290 = v288 + 1;
        }
        if (v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291)
        {
          unint64_t v292 = (char *)sub_5714((uint64_t)(v276 + 693), v291);
          uint64_t v278 = (uint64_t *)v276[692];
          unint64_t v280 = (uint64_t *)v276[691];
        }
        else
        {
          unint64_t v292 = 0;
        }
        unint64_t v293 = (uint64_t *)&v292[8 * v288];
        unint64_t v294 = &v292[8 * v291];
        *unint64_t v293 = v277;
        unint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v296 = *--v278;
          *--unint64_t v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1) {
        goto LABEL_422;
      }
      int v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      uint64_t v278 = (uint64_t *)v276[692];
      unint64_t v279 = v276[693];
      if ((unint64_t)v278 >= v279)
      {
        unint64_t v280 = (uint64_t *)v276[691];
        uint64_t v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v282 = v279 - (void)v280;
        unint64_t v283 = (uint64_t)(v279 - (void)v280) >> 2;
        if (v283 <= v281 + 1) {
          unint64_t v283 = v281 + 1;
        }
        if (v282 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v284 = v283;
        }
        if (v284)
        {
          unint64_t v285 = (char *)sub_5714((uint64_t)(v276 + 693), v284);
          uint64_t v278 = (uint64_t *)v276[692];
          unint64_t v280 = (uint64_t *)v276[691];
        }
        else
        {
          unint64_t v285 = 0;
        }
        unint64_t v293 = (uint64_t *)&v285[8 * v281];
        unint64_t v294 = &v285[8 * v284];
        *unint64_t v293 = v277;
        unint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v295 = *--v278;
          *--unint64_t v293 = v295;
        }
LABEL_419:
        v276[691] = v293;
        v276[692] = v287;
        v276[693] = v294;
        if (v280) {
          operator delete(v280);
        }
        goto LABEL_421;
      }
    }
    *uint64_t v278 = v277;
    unint64_t v287 = v278 + 1;
LABEL_421:
    v276[692] = v287;
LABEL_422:
    int v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      int v300 = (uint64_t *)v298[695];
      unint64_t v308 = v298[696];
      if ((unint64_t)v300 >= v308)
      {
        uint64_t v302 = (uint64_t *)v298[694];
        uint64_t v310 = v300 - v302;
        if ((unint64_t)(v310 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v311 = v308 - (void)v302;
        unint64_t v312 = (uint64_t)(v308 - (void)v302) >> 2;
        if (v312 <= v310 + 1) {
          unint64_t v312 = v310 + 1;
        }
        if (v311 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v313 = v312;
        }
        if (v313)
        {
          uint64_t v314 = (char *)sub_5714((uint64_t)(v298 + 696), v313);
          int v300 = (uint64_t *)v298[695];
          uint64_t v302 = (uint64_t *)v298[694];
        }
        else
        {
          uint64_t v314 = 0;
        }
        uint64_t v315 = (uint64_t *)&v314[8 * v310];
        unint64_t v316 = &v314[8 * v313];
        uint64_t *v315 = v299;
        unint64_t v309 = v315 + 1;
        while (v300 != v302)
        {
          uint64_t v318 = *--v300;
          *--uint64_t v315 = v318;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1) {
        goto LABEL_454;
      }
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      int v300 = (uint64_t *)v298[695];
      unint64_t v301 = v298[696];
      if ((unint64_t)v300 >= v301)
      {
        uint64_t v302 = (uint64_t *)v298[694];
        uint64_t v303 = v300 - v302;
        if ((unint64_t)(v303 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v304 = v301 - (void)v302;
        unint64_t v305 = (uint64_t)(v301 - (void)v302) >> 2;
        if (v305 <= v303 + 1) {
          unint64_t v305 = v303 + 1;
        }
        if (v304 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v306 = v305;
        }
        if (v306)
        {
          uint64_t v307 = (char *)sub_5714((uint64_t)(v298 + 696), v306);
          int v300 = (uint64_t *)v298[695];
          uint64_t v302 = (uint64_t *)v298[694];
        }
        else
        {
          uint64_t v307 = 0;
        }
        uint64_t v315 = (uint64_t *)&v307[8 * v303];
        unint64_t v316 = &v307[8 * v306];
        uint64_t *v315 = v299;
        unint64_t v309 = v315 + 1;
        while (v300 != v302)
        {
          uint64_t v317 = *--v300;
          *--uint64_t v315 = v317;
        }
LABEL_451:
        v298[694] = v315;
        v298[695] = v309;
        v298[696] = v316;
        if (v302) {
          operator delete(v302);
        }
        goto LABEL_453;
      }
    }
    *int v300 = v299;
    unint64_t v309 = v300 + 1;
LABEL_453:
    v298[695] = v309;
LABEL_454:
    int v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
      uint64_t v322 = (uint64_t *)v320[698];
      unint64_t v330 = v320[699];
      if ((unint64_t)v322 >= v330)
      {
        unint64_t v324 = (uint64_t *)v320[697];
        uint64_t v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v333 = v330 - (void)v324;
        unint64_t v334 = (uint64_t)(v330 - (void)v324) >> 2;
        if (v334 <= v332 + 1) {
          unint64_t v334 = v332 + 1;
        }
        if (v333 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v335 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v335 = v334;
        }
        if (v335)
        {
          uint64_t v336 = (char *)sub_5714((uint64_t)(v320 + 699), v335);
          uint64_t v322 = (uint64_t *)v320[698];
          unint64_t v324 = (uint64_t *)v320[697];
        }
        else
        {
          uint64_t v336 = 0;
        }
        unint64_t v337 = (uint64_t *)&v336[8 * v332];
        unint64_t v338 = &v336[8 * v335];
        *unint64_t v337 = v321;
        unint64_t v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v340 = *--v322;
          *--unint64_t v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1) {
        goto LABEL_486;
      }
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
      uint64_t v322 = (uint64_t *)v320[698];
      unint64_t v323 = v320[699];
      if ((unint64_t)v322 >= v323)
      {
        unint64_t v324 = (uint64_t *)v320[697];
        uint64_t v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v326 = v323 - (void)v324;
        unint64_t v327 = (uint64_t)(v323 - (void)v324) >> 2;
        if (v327 <= v325 + 1) {
          unint64_t v327 = v325 + 1;
        }
        if (v326 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v328 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v328 = v327;
        }
        if (v328)
        {
          uint64_t v329 = (char *)sub_5714((uint64_t)(v320 + 699), v328);
          uint64_t v322 = (uint64_t *)v320[698];
          unint64_t v324 = (uint64_t *)v320[697];
        }
        else
        {
          uint64_t v329 = 0;
        }
        unint64_t v337 = (uint64_t *)&v329[8 * v325];
        unint64_t v338 = &v329[8 * v328];
        *unint64_t v337 = v321;
        unint64_t v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v339 = *--v322;
          *--unint64_t v337 = v339;
        }
LABEL_483:
        v320[697] = v337;
        v320[698] = v331;
        v320[699] = v338;
        if (v324) {
          operator delete(v324);
        }
        goto LABEL_485;
      }
    }
    *uint64_t v322 = v321;
    unint64_t v331 = v322 + 1;
LABEL_485:
    v320[698] = v331;
LABEL_486:
    int v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      uint64_t v344 = (uint64_t *)v342[701];
      unint64_t v352 = v342[702];
      if ((unint64_t)v344 >= v352)
      {
        unsigned int v346 = (uint64_t *)v342[700];
        uint64_t v354 = v344 - v346;
        if ((unint64_t)(v354 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v355 = v352 - (void)v346;
        unint64_t v356 = (uint64_t)(v352 - (void)v346) >> 2;
        if (v356 <= v354 + 1) {
          unint64_t v356 = v354 + 1;
        }
        if (v355 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v357 = v356;
        }
        if (v357)
        {
          uint64_t v358 = (char *)sub_5714((uint64_t)(v342 + 702), v357);
          uint64_t v344 = (uint64_t *)v342[701];
          unsigned int v346 = (uint64_t *)v342[700];
        }
        else
        {
          uint64_t v358 = 0;
        }
        unint64_t v359 = (uint64_t *)&v358[8 * v354];
        unint64_t v360 = &v358[8 * v357];
        *unint64_t v359 = v343;
        unint64_t v353 = v359 + 1;
        while (v344 != v346)
        {
          uint64_t v362 = *--v344;
          *--unint64_t v359 = v362;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1) {
        goto LABEL_518;
      }
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      uint64_t v344 = (uint64_t *)v342[701];
      unint64_t v345 = v342[702];
      if ((unint64_t)v344 >= v345)
      {
        unsigned int v346 = (uint64_t *)v342[700];
        uint64_t v347 = v344 - v346;
        if ((unint64_t)(v347 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v348 = v345 - (void)v346;
        unint64_t v349 = (uint64_t)(v345 - (void)v346) >> 2;
        if (v349 <= v347 + 1) {
          unint64_t v349 = v347 + 1;
        }
        if (v348 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v350 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v350 = v349;
        }
        if (v350)
        {
          uint64_t v351 = (char *)sub_5714((uint64_t)(v342 + 702), v350);
          uint64_t v344 = (uint64_t *)v342[701];
          unsigned int v346 = (uint64_t *)v342[700];
        }
        else
        {
          uint64_t v351 = 0;
        }
        unint64_t v359 = (uint64_t *)&v351[8 * v347];
        unint64_t v360 = &v351[8 * v350];
        *unint64_t v359 = v343;
        unint64_t v353 = v359 + 1;
        while (v344 != v346)
        {
          uint64_t v361 = *--v344;
          *--unint64_t v359 = v361;
        }
LABEL_515:
        v342[700] = v359;
        v342[701] = v353;
        v342[702] = v360;
        if (v346) {
          operator delete(v346);
        }
        goto LABEL_517;
      }
    }
    *uint64_t v344 = v343;
    unint64_t v353 = v344 + 1;
LABEL_517:
    v342[701] = v353;
LABEL_518:
    int v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      uint64_t v366 = (uint64_t *)v364[704];
      unint64_t v374 = v364[705];
      if ((unint64_t)v366 >= v374)
      {
        unint64_t v368 = (uint64_t *)v364[703];
        uint64_t v376 = v366 - v368;
        if ((unint64_t)(v376 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v377 = v374 - (void)v368;
        unint64_t v378 = (uint64_t)(v374 - (void)v368) >> 2;
        if (v378 <= v376 + 1) {
          unint64_t v378 = v376 + 1;
        }
        if (v377 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v379 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v379 = v378;
        }
        if (v379)
        {
          uint64_t v380 = (char *)sub_5714((uint64_t)(v364 + 705), v379);
          uint64_t v366 = (uint64_t *)v364[704];
          unint64_t v368 = (uint64_t *)v364[703];
        }
        else
        {
          uint64_t v380 = 0;
        }
        unint64_t v381 = (uint64_t *)&v380[8 * v376];
        unint64_t v382 = &v380[8 * v379];
        *unint64_t v381 = v365;
        unint64_t v375 = v381 + 1;
        while (v366 != v368)
        {
          uint64_t v384 = *--v366;
          *--unint64_t v381 = v384;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1) {
        goto LABEL_550;
      }
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      uint64_t v366 = (uint64_t *)v364[704];
      unint64_t v367 = v364[705];
      if ((unint64_t)v366 >= v367)
      {
        unint64_t v368 = (uint64_t *)v364[703];
        uint64_t v369 = v366 - v368;
        if ((unint64_t)(v369 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v370 = v367 - (void)v368;
        unint64_t v371 = (uint64_t)(v367 - (void)v368) >> 2;
        if (v371 <= v369 + 1) {
          unint64_t v371 = v369 + 1;
        }
        if (v370 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v372 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v372 = v371;
        }
        if (v372)
        {
          uint64_t v373 = (char *)sub_5714((uint64_t)(v364 + 705), v372);
          uint64_t v366 = (uint64_t *)v364[704];
          unint64_t v368 = (uint64_t *)v364[703];
        }
        else
        {
          uint64_t v373 = 0;
        }
        unint64_t v381 = (uint64_t *)&v373[8 * v369];
        unint64_t v382 = &v373[8 * v372];
        *unint64_t v381 = v365;
        unint64_t v375 = v381 + 1;
        while (v366 != v368)
        {
          uint64_t v383 = *--v366;
          *--unint64_t v381 = v383;
        }
LABEL_547:
        v364[703] = v381;
        v364[704] = v375;
        v364[705] = v382;
        if (v368) {
          operator delete(v368);
        }
        goto LABEL_549;
      }
    }
    *uint64_t v366 = v365;
    unint64_t v375 = v366 + 1;
LABEL_549:
    v364[704] = v375;
LABEL_550:
    int v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      uint64_t v388 = (uint64_t *)v386[707];
      unint64_t v396 = v386[708];
      if ((unint64_t)v388 >= v396)
      {
        unint64_t v390 = (uint64_t *)v386[706];
        uint64_t v398 = v388 - v390;
        if ((unint64_t)(v398 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v399 = v396 - (void)v390;
        unint64_t v400 = (uint64_t)(v396 - (void)v390) >> 2;
        if (v400 <= v398 + 1) {
          unint64_t v400 = v398 + 1;
        }
        if (v399 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v401 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v401 = v400;
        }
        if (v401)
        {
          uint64_t v402 = (char *)sub_5714((uint64_t)(v386 + 708), v401);
          uint64_t v388 = (uint64_t *)v386[707];
          unint64_t v390 = (uint64_t *)v386[706];
        }
        else
        {
          uint64_t v402 = 0;
        }
        unint64_t v403 = (uint64_t *)&v402[8 * v398];
        unint64_t v404 = &v402[8 * v401];
        *unint64_t v403 = v387;
        unint64_t v397 = v403 + 1;
        while (v388 != v390)
        {
          uint64_t v406 = *--v388;
          *--unint64_t v403 = v406;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1) {
        goto LABEL_582;
      }
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      uint64_t v388 = (uint64_t *)v386[707];
      unint64_t v389 = v386[708];
      if ((unint64_t)v388 >= v389)
      {
        unint64_t v390 = (uint64_t *)v386[706];
        uint64_t v391 = v388 - v390;
        if ((unint64_t)(v391 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v392 = v389 - (void)v390;
        unint64_t v393 = (uint64_t)(v389 - (void)v390) >> 2;
        if (v393 <= v391 + 1) {
          unint64_t v393 = v391 + 1;
        }
        if (v392 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v394 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v394 = v393;
        }
        if (v394)
        {
          uint64_t v395 = (char *)sub_5714((uint64_t)(v386 + 708), v394);
          uint64_t v388 = (uint64_t *)v386[707];
          unint64_t v390 = (uint64_t *)v386[706];
        }
        else
        {
          uint64_t v395 = 0;
        }
        unint64_t v403 = (uint64_t *)&v395[8 * v391];
        unint64_t v404 = &v395[8 * v394];
        *unint64_t v403 = v387;
        unint64_t v397 = v403 + 1;
        while (v388 != v390)
        {
          uint64_t v405 = *--v388;
          *--unint64_t v403 = v405;
        }
LABEL_579:
        v386[706] = v403;
        v386[707] = v397;
        v386[708] = v404;
        if (v390) {
          operator delete(v390);
        }
        goto LABEL_581;
      }
    }
    uint64_t *v388 = v387;
    unint64_t v397 = v388 + 1;
LABEL_581:
    v386[707] = v397;
LABEL_582:
    int v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      uint64_t v408 = *(void **)a1[1];
      uint64_t v409 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      uint64_t v410 = (uint64_t *)v408[710];
      unint64_t v418 = v408[711];
      if ((unint64_t)v410 >= v418)
      {
        unint64_t v412 = (uint64_t *)v408[709];
        uint64_t v420 = v410 - v412;
        if ((unint64_t)(v420 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v421 = v418 - (void)v412;
        unint64_t v422 = (uint64_t)(v418 - (void)v412) >> 2;
        if (v422 <= v420 + 1) {
          unint64_t v422 = v420 + 1;
        }
        if (v421 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v423 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v423 = v422;
        }
        if (v423)
        {
          uint64_t v424 = (char *)sub_5714((uint64_t)(v408 + 711), v423);
          uint64_t v410 = (uint64_t *)v408[710];
          unint64_t v412 = (uint64_t *)v408[709];
        }
        else
        {
          uint64_t v424 = 0;
        }
        unint64_t v425 = (uint64_t *)&v424[8 * v420];
        unint64_t v426 = &v424[8 * v423];
        *unint64_t v425 = v409;
        unint64_t v419 = v425 + 1;
        while (v410 != v412)
        {
          uint64_t v428 = *--v410;
          *--unint64_t v425 = v428;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v407 != 1) {
        goto LABEL_614;
      }
      uint64_t v408 = *(void **)a1[1];
      uint64_t v409 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      uint64_t v410 = (uint64_t *)v408[710];
      unint64_t v411 = v408[711];
      if ((unint64_t)v410 >= v411)
      {
        unint64_t v412 = (uint64_t *)v408[709];
        uint64_t v413 = v410 - v412;
        if ((unint64_t)(v413 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v414 = v411 - (void)v412;
        unint64_t v415 = (uint64_t)(v411 - (void)v412) >> 2;
        if (v415 <= v413 + 1) {
          unint64_t v415 = v413 + 1;
        }
        if (v414 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v416 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v416 = v415;
        }
        if (v416)
        {
          uint64_t v417 = (char *)sub_5714((uint64_t)(v408 + 711), v416);
          uint64_t v410 = (uint64_t *)v408[710];
          unint64_t v412 = (uint64_t *)v408[709];
        }
        else
        {
          uint64_t v417 = 0;
        }
        unint64_t v425 = (uint64_t *)&v417[8 * v413];
        unint64_t v426 = &v417[8 * v416];
        *unint64_t v425 = v409;
        unint64_t v419 = v425 + 1;
        while (v410 != v412)
        {
          uint64_t v427 = *--v410;
          *--unint64_t v425 = v427;
        }
LABEL_611:
        v408[709] = v425;
        v408[710] = v419;
        v408[711] = v426;
        if (v412) {
          operator delete(v412);
        }
        goto LABEL_613;
      }
    }
    uint64_t *v410 = v409;
    unint64_t v419 = v410 + 1;
LABEL_613:
    v408[710] = v419;
LABEL_614:
    int v429 = 1 << *(_DWORD *)(v3 + 48);
    if (v429 == 2)
    {
      uint64_t v441 = a1[2];
      uint64_t v431 = *(void **)a1[1];
      uint64_t v432 = *(_DWORD *)(v441 + 100) & 0x7FFFFLL;
      int v433 = (uint64_t *)v431[713];
      unint64_t v442 = v431[714];
      if ((unint64_t)v433 >= v442)
      {
        uint64_t v435 = (uint64_t *)v431[712];
        uint64_t v444 = v433 - v435;
        if (!((unint64_t)(v444 + 1) >> 61))
        {
          unint64_t v445 = v442 - (void)v435;
          unint64_t v446 = (uint64_t)(v442 - (void)v435) >> 2;
          if (v446 <= v444 + 1) {
            unint64_t v446 = v444 + 1;
          }
          if (v445 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v447 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v447 = v446;
          }
          if (v447)
          {
            unint64_t v448 = (char *)sub_5714((uint64_t)(v431 + 714), v447);
            int v433 = (uint64_t *)v431[713];
            uint64_t v435 = (uint64_t *)v431[712];
          }
          else
          {
            unint64_t v448 = 0;
          }
          unint64_t v449 = (uint64_t *)&v448[8 * v444];
          unint64_t v450 = &v448[8 * v447];
          *unint64_t v449 = v432;
          unint64_t v443 = v449 + 1;
          while (v433 != v435)
          {
            uint64_t v452 = *--v433;
            *--unint64_t v449 = v452;
          }
          goto LABEL_643;
        }
LABEL_648:
        sub_566C();
      }
    }
    else
    {
      if (v429 != 1)
      {
LABEL_646:
        *a2 = 1;
        return;
      }
      uint64_t v430 = a1[2];
      uint64_t v431 = *(void **)a1[1];
      uint64_t v432 = *(_DWORD *)(v430 + 100) & 0x7FFFFLL;
      int v433 = (uint64_t *)v431[713];
      unint64_t v434 = v431[714];
      if ((unint64_t)v433 >= v434)
      {
        uint64_t v435 = (uint64_t *)v431[712];
        uint64_t v436 = v433 - v435;
        if (!((unint64_t)(v436 + 1) >> 61))
        {
          unint64_t v437 = v434 - (void)v435;
          unint64_t v438 = (uint64_t)(v434 - (void)v435) >> 2;
          if (v438 <= v436 + 1) {
            unint64_t v438 = v436 + 1;
          }
          if (v437 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v439 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v439 = v438;
          }
          if (v439)
          {
            unint64_t v440 = (char *)sub_5714((uint64_t)(v431 + 714), v439);
            int v433 = (uint64_t *)v431[713];
            uint64_t v435 = (uint64_t *)v431[712];
          }
          else
          {
            unint64_t v440 = 0;
          }
          unint64_t v449 = (uint64_t *)&v440[8 * v436];
          unint64_t v450 = &v440[8 * v439];
          *unint64_t v449 = v432;
          unint64_t v443 = v449 + 1;
          while (v433 != v435)
          {
            uint64_t v451 = *--v433;
            *--unint64_t v449 = v451;
          }
LABEL_643:
          v431[712] = v449;
          v431[713] = v443;
          v431[714] = v450;
          if (v435) {
            operator delete(v435);
          }
          goto LABEL_645;
        }
        goto LABEL_648;
      }
    }
    *int v433 = v432;
    unint64_t v443 = v433 + 1;
LABEL_645:
    v431[713] = v443;
    goto LABEL_646;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = (unsigned int *)a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[656] - 8) += v17[12] & 0x7FFFF;
    *(void *)(v19[659] - 8) += v17[22] & 0x7FFFF;
    *(void *)(v19[662] - 8) += ((unint64_t)v17[6] >> 1) & 0x7FFFF;
    *(void *)(v19[665] - 8) += v17[16] & 0x7FFFF;
    *(void *)(v19[668] - 8) += v17[8] & 0x7FFFF;
    *(void *)(v19[671] - 8) += v17[18] & 0x7FFFF;
    *(void *)(v19[674] - 8) += v17[11] & 0x7FFFF;
    *(void *)(v19[677] - 8) += v17[21] & 0x7FFFF;
    *(void *)(v19[680] - 8) += v17[10] & 0x7FFFF;
    *(void *)(v19[683] - 8) += v17[20] & 0x7FFFF;
    uint64_t v20 = (_DWORD *)a1[2];
    uint64_t v21 = (void *)*v18;
    *(void *)(v21[686] - 8) += v20[14] & 0x7FFFF;
    *(void *)(v21[689] - 8) += v20[24] & 0x7FFFF;
    *(void *)(v21[692] - 8) += v20[15] & 0x7FFFF;
    *(void *)(v21[695] - 8) += v20[13] & 0x7FFFF;
    *(void *)(v21[698] - 8) += v20[23] & 0x7FFFF;
    *(void *)(v21[701] - 8) += v20[7] & 0x7FFFF;
    *(void *)(v21[704] - 8) += v20[17] & 0x7FFFF;
    *(void *)(v21[707] - 8) += v20[9] & 0x7FFFF;
    *(void *)(v21[710] - 8) += v20[19] & 0x7FFFF;
    *(void *)(v21[713] - 8) += v20[25] & 0x7FFFF;
  }
}

void sub_15B538(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      uint64_t v8 = (char *)v6[716];
      unint64_t v22 = v6[717];
      if ((unint64_t)v8 >= v22)
      {
        uint64_t v10 = (char *)v6[715];
        uint64_t v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 717), v27);
          uint64_t v8 = (char *)v6[716];
          uint64_t v10 = (char *)v6[715];
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[8 * v24];
        int v30 = &v28[8 * v27];
        *(void *)uint64_t v29 = v7;
        unint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v32 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      uint64_t v8 = (char *)v6[716];
      unint64_t v9 = v6[717];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[715];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 717), v14);
          uint64_t v8 = (char *)v6[716];
          uint64_t v10 = (char *)v6[715];
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v29 = &v15[8 * v11];
        int v30 = &v15[8 * v14];
        *(void *)uint64_t v29 = v7;
        unint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v31 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[715] = v29;
        v6[716] = v23;
        v6[717] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    unint64_t v23 = v8 + 8;
LABEL_37:
    v6[716] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      uint64_t v36 = (uint64_t *)v34[719];
      unint64_t v44 = v34[720];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (uint64_t *)v34[718];
        uint64_t v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 720), v49);
          uint64_t v36 = (uint64_t *)v34[719];
          unint64_t v38 = (uint64_t *)v34[718];
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (uint64_t *)&v50[8 * v46];
        int v52 = &v50[8 * v49];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v54 = *--v36;
          *--uint64_t v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      uint64_t v36 = (uint64_t *)v34[719];
      unint64_t v37 = v34[720];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (uint64_t *)v34[718];
        uint64_t v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 720), v42);
          uint64_t v36 = (uint64_t *)v34[719];
          unint64_t v38 = (uint64_t *)v34[718];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v51 = (uint64_t *)&v43[8 * v39];
        int v52 = &v43[8 * v42];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v53 = *--v36;
          *--uint64_t v51 = v53;
        }
LABEL_67:
        v34[718] = v51;
        v34[719] = v45;
        v34[720] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *uint64_t v36 = v35;
    unint64_t v45 = v36 + 1;
LABEL_69:
    v34[719] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      unint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v58 = (char *)v56[722];
      unint64_t v66 = v56[723];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (char *)v56[721];
        uint64_t v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          uint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 723), v71);
          uint64_t v58 = (char *)v56[722];
          unint64_t v60 = (char *)v56[721];
        }
        else
        {
          uint64_t v72 = 0;
        }
        uint64_t v73 = &v72[8 * v68];
        int v74 = &v72[8 * v71];
        *(void *)uint64_t v73 = v57;
        unint64_t v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v76 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      unint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v58 = (char *)v56[722];
      unint64_t v59 = v56[723];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (char *)v56[721];
        uint64_t v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          uint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 723), v64);
          uint64_t v58 = (char *)v56[722];
          unint64_t v60 = (char *)v56[721];
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v73 = &v65[8 * v61];
        int v74 = &v65[8 * v64];
        *(void *)uint64_t v73 = v57;
        unint64_t v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v75 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[721] = v73;
        v56[722] = v67;
        v56[723] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *(void *)uint64_t v58 = v57;
    unint64_t v67 = v58 + 8;
LABEL_101:
    v56[722] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
      uint64_t v80 = (char *)v78[725];
      unint64_t v88 = v78[726];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (char *)v78[724];
        uint64_t v90 = (v80 - v82) >> 3;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          uint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 726), v93);
          uint64_t v80 = (char *)v78[725];
          unint64_t v82 = (char *)v78[724];
        }
        else
        {
          uint64_t v94 = 0;
        }
        unint64_t v95 = &v94[8 * v90];
        unint64_t v96 = &v94[8 * v93];
        *(void *)unint64_t v95 = v79;
        uint64_t v89 = v95 + 8;
        while (v80 != v82)
        {
          uint64_t v98 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v95 - 1) = v98;
          v95 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
      uint64_t v80 = (char *)v78[725];
      unint64_t v81 = v78[726];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (char *)v78[724];
        uint64_t v83 = (v80 - v82) >> 3;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          unint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 726), v86);
          uint64_t v80 = (char *)v78[725];
          unint64_t v82 = (char *)v78[724];
        }
        else
        {
          unint64_t v87 = 0;
        }
        unint64_t v95 = &v87[8 * v83];
        unint64_t v96 = &v87[8 * v86];
        *(void *)unint64_t v95 = v79;
        uint64_t v89 = v95 + 8;
        while (v80 != v82)
        {
          uint64_t v97 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v95 - 1) = v97;
          v95 -= 8;
        }
LABEL_131:
        v78[724] = v95;
        v78[725] = v89;
        v78[726] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *(void *)uint64_t v80 = v79;
    uint64_t v89 = v80 + 8;
LABEL_133:
    v78[725] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      uint64_t v102 = (uint64_t *)v100[728];
      unint64_t v110 = v100[729];
      if ((unint64_t)v102 >= v110)
      {
        uint64_t v104 = (uint64_t *)v100[727];
        uint64_t v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          unint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 729), v115);
          uint64_t v102 = (uint64_t *)v100[728];
          uint64_t v104 = (uint64_t *)v100[727];
        }
        else
        {
          unint64_t v116 = 0;
        }
        unint64_t v117 = (uint64_t *)&v116[8 * v112];
        uint64_t v118 = &v116[8 * v115];
        *unint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v120 = *--v102;
          *--unint64_t v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      uint64_t v102 = (uint64_t *)v100[728];
      unint64_t v103 = v100[729];
      if ((unint64_t)v102 >= v103)
      {
        uint64_t v104 = (uint64_t *)v100[727];
        uint64_t v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 729), v108);
          uint64_t v102 = (uint64_t *)v100[728];
          uint64_t v104 = (uint64_t *)v100[727];
        }
        else
        {
          unint64_t v109 = 0;
        }
        unint64_t v117 = (uint64_t *)&v109[8 * v105];
        uint64_t v118 = &v109[8 * v108];
        *unint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v119 = *--v102;
          *--unint64_t v117 = v119;
        }
LABEL_163:
        v100[727] = v117;
        v100[728] = v111;
        v100[729] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    *uint64_t v102 = v101;
    unint64_t v111 = v102 + 1;
LABEL_165:
    v100[728] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      int v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      uint64_t v124 = (char *)v122[731];
      unint64_t v132 = v122[732];
      if ((unint64_t)v124 >= v132)
      {
        uint64_t v126 = (char *)v122[730];
        uint64_t v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          unint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 732), v137);
          uint64_t v124 = (char *)v122[731];
          uint64_t v126 = (char *)v122[730];
        }
        else
        {
          unint64_t v138 = 0;
        }
        uint64_t v139 = &v138[8 * v134];
        unint64_t v140 = &v138[8 * v137];
        *(void *)uint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v142 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      int v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      uint64_t v124 = (char *)v122[731];
      unint64_t v125 = v122[732];
      if ((unint64_t)v124 >= v125)
      {
        uint64_t v126 = (char *)v122[730];
        uint64_t v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 732), v130);
          uint64_t v124 = (char *)v122[731];
          uint64_t v126 = (char *)v122[730];
        }
        else
        {
          uint64_t v131 = 0;
        }
        uint64_t v139 = &v131[8 * v127];
        unint64_t v140 = &v131[8 * v130];
        *(void *)uint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v141 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[730] = v139;
        v122[731] = v133;
        v122[732] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v124 = v123;
    unint64_t v133 = v124 + 8;
LABEL_197:
    v122[731] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      uint64_t v146 = (uint64_t *)v144[734];
      unint64_t v154 = v144[735];
      if ((unint64_t)v146 >= v154)
      {
        unint64_t v148 = (uint64_t *)v144[733];
        uint64_t v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          unint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 735), v159);
          uint64_t v146 = (uint64_t *)v144[734];
          unint64_t v148 = (uint64_t *)v144[733];
        }
        else
        {
          unint64_t v160 = 0;
        }
        unint64_t v161 = (uint64_t *)&v160[8 * v156];
        unint64_t v162 = &v160[8 * v159];
        *unint64_t v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v164 = *--v146;
          *--unint64_t v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      uint64_t v146 = (uint64_t *)v144[734];
      unint64_t v147 = v144[735];
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v148 = (uint64_t *)v144[733];
        uint64_t v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          unint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 735), v152);
          uint64_t v146 = (uint64_t *)v144[734];
          unint64_t v148 = (uint64_t *)v144[733];
        }
        else
        {
          unint64_t v153 = 0;
        }
        unint64_t v161 = (uint64_t *)&v153[8 * v149];
        unint64_t v162 = &v153[8 * v152];
        *unint64_t v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v163 = *--v146;
          *--unint64_t v161 = v163;
        }
LABEL_227:
        v144[733] = v161;
        v144[734] = v155;
        v144[735] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v146 = v145;
    unint64_t v155 = v146 + 1;
LABEL_229:
    v144[734] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      int v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v168 = (char *)v166[737];
      unint64_t v176 = v166[738];
      if ((unint64_t)v168 >= v176)
      {
        unint64_t v170 = (char *)v166[736];
        uint64_t v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          unint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 738), v181);
          uint64_t v168 = (char *)v166[737];
          unint64_t v170 = (char *)v166[736];
        }
        else
        {
          unint64_t v182 = 0;
        }
        unint64_t v183 = &v182[8 * v178];
        unint64_t v184 = &v182[8 * v181];
        *(void *)unint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v186 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      int v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v168 = (char *)v166[737];
      unint64_t v169 = v166[738];
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v170 = (char *)v166[736];
        uint64_t v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          unint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 738), v174);
          uint64_t v168 = (char *)v166[737];
          unint64_t v170 = (char *)v166[736];
        }
        else
        {
          unint64_t v175 = 0;
        }
        unint64_t v183 = &v175[8 * v171];
        unint64_t v184 = &v175[8 * v174];
        *(void *)unint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v185 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[736] = v183;
        v166[737] = v177;
        v166[738] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v168 = v167;
    unint64_t v177 = v168 + 8;
LABEL_261:
    v166[737] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      int v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[740];
      unint64_t v198 = v188[741];
      if ((unint64_t)v190 >= v198)
      {
        unint64_t v192 = (uint64_t *)v188[739];
        uint64_t v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          unint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 741), v203);
          uint64_t v190 = (uint64_t *)v188[740];
          unint64_t v192 = (uint64_t *)v188[739];
        }
        else
        {
          unint64_t v204 = 0;
        }
        unint64_t v205 = (uint64_t *)&v204[8 * v200];
        uint64_t v206 = &v204[8 * v203];
        *unint64_t v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v208 = *--v190;
          *--unint64_t v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      int v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[740];
      unint64_t v191 = v188[741];
      if ((unint64_t)v190 >= v191)
      {
        unint64_t v192 = (uint64_t *)v188[739];
        uint64_t v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          unint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 741), v196);
          uint64_t v190 = (uint64_t *)v188[740];
          unint64_t v192 = (uint64_t *)v188[739];
        }
        else
        {
          unint64_t v197 = 0;
        }
        unint64_t v205 = (uint64_t *)&v197[8 * v193];
        uint64_t v206 = &v197[8 * v196];
        *unint64_t v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v207 = *--v190;
          *--unint64_t v205 = v207;
        }
LABEL_291:
        v188[739] = v205;
        v188[740] = v199;
        v188[741] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    *uint64_t v190 = v189;
    unint64_t v199 = v190 + 1;
LABEL_293:
    v188[740] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      int v210 = *(void **)a1[1];
      uint64_t v211 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      uint64_t v212 = (char *)v210[743];
      unint64_t v220 = v210[744];
      if ((unint64_t)v212 >= v220)
      {
        unint64_t v214 = (char *)v210[742];
        uint64_t v222 = (v212 - v214) >> 3;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          unint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 744), v225);
          uint64_t v212 = (char *)v210[743];
          unint64_t v214 = (char *)v210[742];
        }
        else
        {
          unint64_t v226 = 0;
        }
        unint64_t v227 = &v226[8 * v222];
        unint64_t v228 = &v226[8 * v225];
        *(void *)unint64_t v227 = v211;
        unint64_t v221 = v227 + 8;
        while (v212 != v214)
        {
          uint64_t v230 = *((void *)v212 - 1);
          v212 -= 8;
          *((void *)v227 - 1) = v230;
          v227 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      int v210 = *(void **)a1[1];
      uint64_t v211 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      uint64_t v212 = (char *)v210[743];
      unint64_t v213 = v210[744];
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v214 = (char *)v210[742];
        uint64_t v215 = (v212 - v214) >> 3;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          unint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 744), v218);
          uint64_t v212 = (char *)v210[743];
          unint64_t v214 = (char *)v210[742];
        }
        else
        {
          unint64_t v219 = 0;
        }
        unint64_t v227 = &v219[8 * v215];
        unint64_t v228 = &v219[8 * v218];
        *(void *)unint64_t v227 = v211;
        unint64_t v221 = v227 + 8;
        while (v212 != v214)
        {
          uint64_t v229 = *((void *)v212 - 1);
          v212 -= 8;
          *((void *)v227 - 1) = v229;
          v227 -= 8;
        }
LABEL_323:
        v210[742] = v227;
        v210[743] = v221;
        v210[744] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *(void *)uint64_t v212 = v211;
    unint64_t v221 = v212 + 8;
LABEL_325:
    v210[743] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      int v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      uint64_t v234 = (uint64_t *)v232[746];
      unint64_t v242 = v232[747];
      if ((unint64_t)v234 >= v242)
      {
        unint64_t v236 = (uint64_t *)v232[745];
        uint64_t v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v245 = v242 - (void)v236;
        unint64_t v246 = (uint64_t)(v242 - (void)v236) >> 2;
        if (v246 <= v244 + 1) {
          unint64_t v246 = v244 + 1;
        }
        if (v245 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v247)
        {
          unint64_t v248 = (char *)sub_5714((uint64_t)(v232 + 747), v247);
          uint64_t v234 = (uint64_t *)v232[746];
          unint64_t v236 = (uint64_t *)v232[745];
        }
        else
        {
          unint64_t v248 = 0;
        }
        unint64_t v249 = (uint64_t *)&v248[8 * v244];
        uint64_t v250 = &v248[8 * v247];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v252 = *--v234;
          *--unint64_t v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1) {
        goto LABEL_358;
      }
      int v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      uint64_t v234 = (uint64_t *)v232[746];
      unint64_t v235 = v232[747];
      if ((unint64_t)v234 >= v235)
      {
        unint64_t v236 = (uint64_t *)v232[745];
        uint64_t v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v238 = v235 - (void)v236;
        unint64_t v239 = (uint64_t)(v235 - (void)v236) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          unint64_t v241 = (char *)sub_5714((uint64_t)(v232 + 747), v240);
          uint64_t v234 = (uint64_t *)v232[746];
          unint64_t v236 = (uint64_t *)v232[745];
        }
        else
        {
          unint64_t v241 = 0;
        }
        unint64_t v249 = (uint64_t *)&v241[8 * v237];
        uint64_t v250 = &v241[8 * v240];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v251 = *--v234;
          *--unint64_t v249 = v251;
        }
LABEL_355:
        v232[745] = v249;
        v232[746] = v243;
        v232[747] = v250;
        if (v236) {
          operator delete(v236);
        }
        goto LABEL_357;
      }
    }
    *uint64_t v234 = v233;
    unint64_t v243 = v234 + 1;
LABEL_357:
    v232[746] = v243;
LABEL_358:
    int v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      int v254 = *(void **)a1[1];
      uint64_t v255 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v256 = (char *)v254[749];
      unint64_t v264 = v254[750];
      if ((unint64_t)v256 >= v264)
      {
        unint64_t v258 = (char *)v254[748];
        uint64_t v266 = (v256 - v258) >> 3;
        if ((unint64_t)(v266 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v267 = v264 - (void)v258;
        unint64_t v268 = (uint64_t)(v264 - (void)v258) >> 2;
        if (v268 <= v266 + 1) {
          unint64_t v268 = v266 + 1;
        }
        if (v267 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v269 = v268;
        }
        if (v269)
        {
          unint64_t v270 = (char *)sub_5714((uint64_t)(v254 + 750), v269);
          uint64_t v256 = (char *)v254[749];
          unint64_t v258 = (char *)v254[748];
        }
        else
        {
          unint64_t v270 = 0;
        }
        int v271 = &v270[8 * v266];
        uint64_t v272 = &v270[8 * v269];
        *(void *)int v271 = v255;
        unint64_t v265 = v271 + 8;
        while (v256 != v258)
        {
          uint64_t v274 = *((void *)v256 - 1);
          v256 -= 8;
          *((void *)v271 - 1) = v274;
          v271 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1) {
        goto LABEL_390;
      }
      int v254 = *(void **)a1[1];
      uint64_t v255 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v256 = (char *)v254[749];
      unint64_t v257 = v254[750];
      if ((unint64_t)v256 >= v257)
      {
        unint64_t v258 = (char *)v254[748];
        uint64_t v259 = (v256 - v258) >> 3;
        if ((unint64_t)(v259 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v260 = v257 - (void)v258;
        unint64_t v261 = (uint64_t)(v257 - (void)v258) >> 2;
        if (v261 <= v259 + 1) {
          unint64_t v261 = v259 + 1;
        }
        if (v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v262 = v261;
        }
        if (v262)
        {
          unint64_t v263 = (char *)sub_5714((uint64_t)(v254 + 750), v262);
          uint64_t v256 = (char *)v254[749];
          unint64_t v258 = (char *)v254[748];
        }
        else
        {
          unint64_t v263 = 0;
        }
        int v271 = &v263[8 * v259];
        uint64_t v272 = &v263[8 * v262];
        *(void *)int v271 = v255;
        unint64_t v265 = v271 + 8;
        while (v256 != v258)
        {
          uint64_t v273 = *((void *)v256 - 1);
          v256 -= 8;
          *((void *)v271 - 1) = v273;
          v271 -= 8;
        }
LABEL_387:
        v254[748] = v271;
        v254[749] = v265;
        v254[750] = v272;
        if (v258) {
          operator delete(v258);
        }
        goto LABEL_389;
      }
    }
    *(void *)uint64_t v256 = v255;
    unint64_t v265 = v256 + 8;
LABEL_389:
    v254[749] = v265;
LABEL_390:
    int v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      int v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      uint64_t v278 = (uint64_t *)v276[752];
      unint64_t v286 = v276[753];
      if ((unint64_t)v278 >= v286)
      {
        unint64_t v280 = (uint64_t *)v276[751];
        uint64_t v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v289 = v286 - (void)v280;
        unint64_t v290 = (uint64_t)(v286 - (void)v280) >> 2;
        if (v290 <= v288 + 1) {
          unint64_t v290 = v288 + 1;
        }
        if (v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291)
        {
          unint64_t v292 = (char *)sub_5714((uint64_t)(v276 + 753), v291);
          uint64_t v278 = (uint64_t *)v276[752];
          unint64_t v280 = (uint64_t *)v276[751];
        }
        else
        {
          unint64_t v292 = 0;
        }
        unint64_t v293 = (uint64_t *)&v292[8 * v288];
        unint64_t v294 = &v292[8 * v291];
        *unint64_t v293 = v277;
        unint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v296 = *--v278;
          *--unint64_t v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1) {
        goto LABEL_422;
      }
      int v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      uint64_t v278 = (uint64_t *)v276[752];
      unint64_t v279 = v276[753];
      if ((unint64_t)v278 >= v279)
      {
        unint64_t v280 = (uint64_t *)v276[751];
        uint64_t v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v282 = v279 - (void)v280;
        unint64_t v283 = (uint64_t)(v279 - (void)v280) >> 2;
        if (v283 <= v281 + 1) {
          unint64_t v283 = v281 + 1;
        }
        if (v282 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v284 = v283;
        }
        if (v284)
        {
          unint64_t v285 = (char *)sub_5714((uint64_t)(v276 + 753), v284);
          uint64_t v278 = (uint64_t *)v276[752];
          unint64_t v280 = (uint64_t *)v276[751];
        }
        else
        {
          unint64_t v285 = 0;
        }
        unint64_t v293 = (uint64_t *)&v285[8 * v281];
        unint64_t v294 = &v285[8 * v284];
        *unint64_t v293 = v277;
        unint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v295 = *--v278;
          *--unint64_t v293 = v295;
        }
LABEL_419:
        v276[751] = v293;
        v276[752] = v287;
        v276[753] = v294;
        if (v280) {
          operator delete(v280);
        }
        goto LABEL_421;
      }
    }
    *uint64_t v278 = v277;
    unint64_t v287 = v278 + 1;
LABEL_421:
    v276[752] = v287;
LABEL_422:
    int v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      int v300 = (char *)v298[755];
      unint64_t v308 = v298[756];
      if ((unint64_t)v300 >= v308)
      {
        uint64_t v302 = (char *)v298[754];
        uint64_t v310 = (v300 - v302) >> 3;
        if ((unint64_t)(v310 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v311 = v308 - (void)v302;
        unint64_t v312 = (uint64_t)(v308 - (void)v302) >> 2;
        if (v312 <= v310 + 1) {
          unint64_t v312 = v310 + 1;
        }
        if (v311 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v313 = v312;
        }
        if (v313)
        {
          uint64_t v314 = (char *)sub_5714((uint64_t)(v298 + 756), v313);
          int v300 = (char *)v298[755];
          uint64_t v302 = (char *)v298[754];
        }
        else
        {
          uint64_t v314 = 0;
        }
        uint64_t v315 = &v314[8 * v310];
        unint64_t v316 = &v314[8 * v313];
        *(void *)uint64_t v315 = v299;
        unint64_t v309 = v315 + 8;
        while (v300 != v302)
        {
          uint64_t v318 = *((void *)v300 - 1);
          v300 -= 8;
          *((void *)v315 - 1) = v318;
          v315 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1) {
        goto LABEL_454;
      }
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      int v300 = (char *)v298[755];
      unint64_t v301 = v298[756];
      if ((unint64_t)v300 >= v301)
      {
        uint64_t v302 = (char *)v298[754];
        uint64_t v303 = (v300 - v302) >> 3;
        if ((unint64_t)(v303 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v304 = v301 - (void)v302;
        unint64_t v305 = (uint64_t)(v301 - (void)v302) >> 2;
        if (v305 <= v303 + 1) {
          unint64_t v305 = v303 + 1;
        }
        if (v304 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v306 = v305;
        }
        if (v306)
        {
          uint64_t v307 = (char *)sub_5714((uint64_t)(v298 + 756), v306);
          int v300 = (char *)v298[755];
          uint64_t v302 = (char *)v298[754];
        }
        else
        {
          uint64_t v307 = 0;
        }
        uint64_t v315 = &v307[8 * v303];
        unint64_t v316 = &v307[8 * v306];
        *(void *)uint64_t v315 = v299;
        unint64_t v309 = v315 + 8;
        while (v300 != v302)
        {
          uint64_t v317 = *((void *)v300 - 1);
          v300 -= 8;
          *((void *)v315 - 1) = v317;
          v315 -= 8;
        }
LABEL_451:
        v298[754] = v315;
        v298[755] = v309;
        v298[756] = v316;
        if (v302) {
          operator delete(v302);
        }
        goto LABEL_453;
      }
    }
    *(void *)int v300 = v299;
    unint64_t v309 = v300 + 8;
LABEL_453:
    v298[755] = v309;
LABEL_454:
    int v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      uint64_t v322 = (uint64_t *)v320[758];
      unint64_t v330 = v320[759];
      if ((unint64_t)v322 >= v330)
      {
        unint64_t v324 = (uint64_t *)v320[757];
        uint64_t v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v333 = v330 - (void)v324;
        unint64_t v334 = (uint64_t)(v330 - (void)v324) >> 2;
        if (v334 <= v332 + 1) {
          unint64_t v334 = v332 + 1;
        }
        if (v333 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v335 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v335 = v334;
        }
        if (v335)
        {
          uint64_t v336 = (char *)sub_5714((uint64_t)(v320 + 759), v335);
          uint64_t v322 = (uint64_t *)v320[758];
          unint64_t v324 = (uint64_t *)v320[757];
        }
        else
        {
          uint64_t v336 = 0;
        }
        unint64_t v337 = (uint64_t *)&v336[8 * v332];
        unint64_t v338 = &v336[8 * v335];
        *unint64_t v337 = v321;
        unint64_t v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v340 = *--v322;
          *--unint64_t v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1) {
        goto LABEL_486;
      }
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      uint64_t v322 = (uint64_t *)v320[758];
      unint64_t v323 = v320[759];
      if ((unint64_t)v322 >= v323)
      {
        unint64_t v324 = (uint64_t *)v320[757];
        uint64_t v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v326 = v323 - (void)v324;
        unint64_t v327 = (uint64_t)(v323 - (void)v324) >> 2;
        if (v327 <= v325 + 1) {
          unint64_t v327 = v325 + 1;
        }
        if (v326 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v328 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v328 = v327;
        }
        if (v328)
        {
          uint64_t v329 = (char *)sub_5714((uint64_t)(v320 + 759), v328);
          uint64_t v322 = (uint64_t *)v320[758];
          unint64_t v324 = (uint64_t *)v320[757];
        }
        else
        {
          uint64_t v329 = 0;
        }
        unint64_t v337 = (uint64_t *)&v329[8 * v325];
        unint64_t v338 = &v329[8 * v328];
        *unint64_t v337 = v321;
        unint64_t v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v339 = *--v322;
          *--unint64_t v337 = v339;
        }
LABEL_483:
        v320[757] = v337;
        v320[758] = v331;
        v320[759] = v338;
        if (v324) {
          operator delete(v324);
        }
        goto LABEL_485;
      }
    }
    *uint64_t v322 = v321;
    unint64_t v331 = v322 + 1;
LABEL_485:
    v320[758] = v331;
LABEL_486:
    int v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v344 = (char *)v342[761];
      unint64_t v352 = v342[762];
      if ((unint64_t)v344 >= v352)
      {
        unsigned int v346 = (char *)v342[760];
        uint64_t v354 = (v344 - v346) >> 3;
        if ((unint64_t)(v354 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v355 = v352 - (void)v346;
        unint64_t v356 = (uint64_t)(v352 - (void)v346) >> 2;
        if (v356 <= v354 + 1) {
          unint64_t v356 = v354 + 1;
        }
        if (v355 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v357 = v356;
        }
        if (v357)
        {
          uint64_t v358 = (char *)sub_5714((uint64_t)(v342 + 762), v357);
          uint64_t v344 = (char *)v342[761];
          unsigned int v346 = (char *)v342[760];
        }
        else
        {
          uint64_t v358 = 0;
        }
        unint64_t v359 = &v358[8 * v354];
        unint64_t v360 = &v358[8 * v357];
        *(void *)unint64_t v359 = v343;
        unint64_t v353 = v359 + 8;
        while (v344 != v346)
        {
          uint64_t v362 = *((void *)v344 - 1);
          v344 -= 8;
          *((void *)v359 - 1) = v362;
          v359 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1) {
        goto LABEL_518;
      }
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v344 = (char *)v342[761];
      unint64_t v345 = v342[762];
      if ((unint64_t)v344 >= v345)
      {
        unsigned int v346 = (char *)v342[760];
        uint64_t v347 = (v344 - v346) >> 3;
        if ((unint64_t)(v347 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v348 = v345 - (void)v346;
        unint64_t v349 = (uint64_t)(v345 - (void)v346) >> 2;
        if (v349 <= v347 + 1) {
          unint64_t v349 = v347 + 1;
        }
        if (v348 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v350 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v350 = v349;
        }
        if (v350)
        {
          uint64_t v351 = (char *)sub_5714((uint64_t)(v342 + 762), v350);
          uint64_t v344 = (char *)v342[761];
          unsigned int v346 = (char *)v342[760];
        }
        else
        {
          uint64_t v351 = 0;
        }
        unint64_t v359 = &v351[8 * v347];
        unint64_t v360 = &v351[8 * v350];
        *(void *)unint64_t v359 = v343;
        unint64_t v353 = v359 + 8;
        while (v344 != v346)
        {
          uint64_t v361 = *((void *)v344 - 1);
          v344 -= 8;
          *((void *)v359 - 1) = v361;
          v359 -= 8;
        }
LABEL_515:
        v342[760] = v359;
        v342[761] = v353;
        v342[762] = v360;
        if (v346) {
          operator delete(v346);
        }
        goto LABEL_517;
      }
    }
    *(void *)uint64_t v344 = v343;
    unint64_t v353 = v344 + 8;
LABEL_517:
    v342[761] = v353;
LABEL_518:
    int v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      uint64_t v366 = (uint64_t *)v364[764];
      unint64_t v374 = v364[765];
      if ((unint64_t)v366 >= v374)
      {
        unint64_t v368 = (uint64_t *)v364[763];
        uint64_t v376 = v366 - v368;
        if ((unint64_t)(v376 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v377 = v374 - (void)v368;
        unint64_t v378 = (uint64_t)(v374 - (void)v368) >> 2;
        if (v378 <= v376 + 1) {
          unint64_t v378 = v376 + 1;
        }
        if (v377 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v379 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v379 = v378;
        }
        if (v379)
        {
          uint64_t v380 = (char *)sub_5714((uint64_t)(v364 + 765), v379);
          uint64_t v366 = (uint64_t *)v364[764];
          unint64_t v368 = (uint64_t *)v364[763];
        }
        else
        {
          uint64_t v380 = 0;
        }
        unint64_t v381 = (uint64_t *)&v380[8 * v376];
        unint64_t v382 = &v380[8 * v379];
        *unint64_t v381 = v365;
        unint64_t v375 = v381 + 1;
        while (v366 != v368)
        {
          uint64_t v384 = *--v366;
          *--unint64_t v381 = v384;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1) {
        goto LABEL_550;
      }
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      uint64_t v366 = (uint64_t *)v364[764];
      unint64_t v367 = v364[765];
      if ((unint64_t)v366 >= v367)
      {
        unint64_t v368 = (uint64_t *)v364[763];
        uint64_t v369 = v366 - v368;
        if ((unint64_t)(v369 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v370 = v367 - (void)v368;
        unint64_t v371 = (uint64_t)(v367 - (void)v368) >> 2;
        if (v371 <= v369 + 1) {
          unint64_t v371 = v369 + 1;
        }
        if (v370 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v372 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v372 = v371;
        }
        if (v372)
        {
          uint64_t v373 = (char *)sub_5714((uint64_t)(v364 + 765), v372);
          uint64_t v366 = (uint64_t *)v364[764];
          unint64_t v368 = (uint64_t *)v364[763];
        }
        else
        {
          uint64_t v373 = 0;
        }
        unint64_t v381 = (uint64_t *)&v373[8 * v369];
        unint64_t v382 = &v373[8 * v372];
        *unint64_t v381 = v365;
        unint64_t v375 = v381 + 1;
        while (v366 != v368)
        {
          uint64_t v383 = *--v366;
          *--unint64_t v381 = v383;
        }
LABEL_547:
        v364[763] = v381;
        v364[764] = v375;
        v364[765] = v382;
        if (v368) {
          operator delete(v368);
        }
        goto LABEL_549;
      }
    }
    *uint64_t v366 = v365;
    unint64_t v375 = v366 + 1;
LABEL_549:
    v364[764] = v375;
LABEL_550:
    int v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      uint64_t v388 = (char *)v386[767];
      unint64_t v396 = v386[768];
      if ((unint64_t)v388 >= v396)
      {
        unint64_t v390 = (char *)v386[766];
        uint64_t v398 = (v388 - v390) >> 3;
        if ((unint64_t)(v398 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v399 = v396 - (void)v390;
        unint64_t v400 = (uint64_t)(v396 - (void)v390) >> 2;
        if (v400 <= v398 + 1) {
          unint64_t v400 = v398 + 1;
        }
        if (v399 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v401 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v401 = v400;
        }
        if (v401)
        {
          uint64_t v402 = (char *)sub_5714((uint64_t)(v386 + 768), v401);
          uint64_t v388 = (char *)v386[767];
          unint64_t v390 = (char *)v386[766];
        }
        else
        {
          uint64_t v402 = 0;
        }
        unint64_t v403 = &v402[8 * v398];
        unint64_t v404 = &v402[8 * v401];
        *(void *)unint64_t v403 = v387;
        unint64_t v397 = v403 + 8;
        while (v388 != v390)
        {
          uint64_t v406 = *((void *)v388 - 1);
          v388 -= 8;
          *((void *)v403 - 1) = v406;
          v403 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1) {
        goto LABEL_582;
      }
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      uint64_t v388 = (char *)v386[767];
      unint64_t v389 = v386[768];
      if ((unint64_t)v388 >= v389)
      {
        unint64_t v390 = (char *)v386[766];
        uint64_t v391 = (v388 - v390) >> 3;
        if ((unint64_t)(v391 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v392 = v389 - (void)v390;
        unint64_t v393 = (uint64_t)(v389 - (void)v390) >> 2;
        if (v393 <= v391 + 1) {
          unint64_t v393 = v391 + 1;
        }
        if (v392 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v394 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v394 = v393;
        }
        if (v394)
        {
          uint64_t v395 = (char *)sub_5714((uint64_t)(v386 + 768), v394);
          uint64_t v388 = (char *)v386[767];
          unint64_t v390 = (char *)v386[766];
        }
        else
        {
          uint64_t v395 = 0;
        }
        unint64_t v403 = &v395[8 * v391];
        unint64_t v404 = &v395[8 * v394];
        *(void *)unint64_t v403 = v387;
        unint64_t v397 = v403 + 8;
        while (v388 != v390)
        {
          uint64_t v405 = *((void *)v388 - 1);
          v388 -= 8;
          *((void *)v403 - 1) = v405;
          v403 -= 8;
        }
LABEL_579:
        v386[766] = v403;
        v386[767] = v397;
        v386[768] = v404;
        if (v390) {
          operator delete(v390);
        }
        goto LABEL_581;
      }
    }
    *(void *)uint64_t v388 = v387;
    unint64_t v397 = v388 + 8;
LABEL_581:
    v386[767] = v397;
LABEL_582:
    int v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      uint64_t v419 = a1[2];
      uint64_t v409 = *(void **)a1[1];
      uint64_t v410 = *(_DWORD *)(v419 + 56) & 0x7FFFFLL;
      unint64_t v411 = (uint64_t *)v409[770];
      unint64_t v420 = v409[771];
      if ((unint64_t)v411 >= v420)
      {
        uint64_t v413 = (uint64_t *)v409[769];
        uint64_t v422 = v411 - v413;
        if (!((unint64_t)(v422 + 1) >> 61))
        {
          unint64_t v423 = v420 - (void)v413;
          unint64_t v424 = (uint64_t)(v420 - (void)v413) >> 2;
          if (v424 <= v422 + 1) {
            unint64_t v424 = v422 + 1;
          }
          if (v423 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v425 = v424;
          }
          if (v425)
          {
            unint64_t v426 = (char *)sub_5714((uint64_t)(v409 + 771), v425);
            unint64_t v411 = (uint64_t *)v409[770];
            uint64_t v413 = (uint64_t *)v409[769];
          }
          else
          {
            unint64_t v426 = 0;
          }
          uint64_t v427 = (uint64_t *)&v426[8 * v422];
          uint64_t v428 = &v426[8 * v425];
          *uint64_t v427 = v410;
          unint64_t v421 = v427 + 1;
          while (v411 != v413)
          {
            uint64_t v430 = *--v411;
            *--uint64_t v427 = v430;
          }
          goto LABEL_611;
        }
LABEL_616:
        sub_566C();
      }
    }
    else
    {
      if (v407 != 1)
      {
LABEL_614:
        *a2 = 1;
        return;
      }
      uint64_t v408 = a1[2];
      uint64_t v409 = *(void **)a1[1];
      uint64_t v410 = *(_DWORD *)(v408 + 56) & 0x7FFFFLL;
      unint64_t v411 = (uint64_t *)v409[770];
      unint64_t v412 = v409[771];
      if ((unint64_t)v411 >= v412)
      {
        uint64_t v413 = (uint64_t *)v409[769];
        uint64_t v414 = v411 - v413;
        if (!((unint64_t)(v414 + 1) >> 61))
        {
          unint64_t v415 = v412 - (void)v413;
          unint64_t v416 = (uint64_t)(v412 - (void)v413) >> 2;
          if (v416 <= v414 + 1) {
            unint64_t v416 = v414 + 1;
          }
          if (v415 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v417 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v417 = v416;
          }
          if (v417)
          {
            unint64_t v418 = (char *)sub_5714((uint64_t)(v409 + 771), v417);
            unint64_t v411 = (uint64_t *)v409[770];
            uint64_t v413 = (uint64_t *)v409[769];
          }
          else
          {
            unint64_t v418 = 0;
          }
          uint64_t v427 = (uint64_t *)&v418[8 * v414];
          uint64_t v428 = &v418[8 * v417];
          *uint64_t v427 = v410;
          unint64_t v421 = v427 + 1;
          while (v411 != v413)
          {
            uint64_t v429 = *--v411;
            *--uint64_t v427 = v429;
          }
LABEL_611:
          v409[769] = v427;
          v409[770] = v421;
          v409[771] = v428;
          if (v413) {
            operator delete(v413);
          }
          goto LABEL_613;
        }
        goto LABEL_616;
      }
    }
    *unint64_t v411 = v410;
    unint64_t v421 = v411 + 1;
LABEL_613:
    v409[770] = v421;
    goto LABEL_614;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[716] - 8) += *(_WORD *)(v17 + 36) & 0x7FFF;
    *(void *)(v19[719] - 8) += *(_DWORD *)(v17 + 68) & 0x7FFFF;
    *(void *)(v19[722] - 8) += *(_WORD *)(v17 + 42) & 0x7FFF;
    *(void *)(v19[725] - 8) += (unsigned __int16)*(_DWORD *)(v17 + 24) >> 1;
    *(void *)(v19[728] - 8) += *(_DWORD *)(v17 + 44) & 0x7FFFF;
    *(void *)(v19[731] - 8) += *(_WORD *)(v17 + 28) & 0x7FFF;
    *(void *)(v19[734] - 8) += *(_DWORD *)(v17 + 52) & 0x7FFFF;
    *(void *)(v19[737] - 8) += *(_WORD *)(v17 + 34) & 0x7FFF;
    *(void *)(v19[740] - 8) += *(_DWORD *)(v17 + 64) & 0x7FFFF;
    *(void *)(v19[743] - 8) += *(_WORD *)(v17 + 32) & 0x7FFF;
    uint64_t v20 = a1[2];
    uint64_t v21 = (void *)*v18;
    *(void *)(v21[746] - 8) += *(_DWORD *)(v20 + 60) & 0x7FFFF;
    *(void *)(v21[749] - 8) += *(_WORD *)(v20 + 40) & 0x7FFF;
    *(void *)(v21[752] - 8) += *(_DWORD *)(v20 + 76) & 0x7FFFF;
    *(void *)(v21[755] - 8) += *(_WORD *)(v20 + 38) & 0x7FFF;
    *(void *)(v21[758] - 8) += *(_DWORD *)(v20 + 72) & 0x7FFFF;
    *(void *)(v21[761] - 8) += *(_WORD *)(v20 + 26) & 0x7FFF;
    *(void *)(v21[764] - 8) += *(_DWORD *)(v20 + 48) & 0x7FFFF;
    *(void *)(v21[767] - 8) += *(_WORD *)(v20 + 30) & 0x7FFF;
    *(void *)(v21[770] - 8) += *(_DWORD *)(v20 + 56) & 0x7FFFF;
  }
}

void sub_15D53C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      unint64_t v7 = (unint64_t)*(unsigned int *)(a1[2] + 32) >> 17;
      uint64_t v8 = (unint64_t *)v6[182];
      unint64_t v19 = v6[183];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (unint64_t *)v6[181];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_168;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 183), v24);
          uint64_t v8 = (unint64_t *)v6[182];
          uint64_t v10 = (unint64_t *)v6[181];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = (unint64_t *)&v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          unint64_t v29 = *--v8;
          *--unint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      unint64_t v7 = (unint64_t)*(unsigned int *)(a1[2] + 32) >> 17;
      uint64_t v8 = (unint64_t *)v6[182];
      unint64_t v9 = v6[183];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (unint64_t *)v6[181];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_168;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 183), v14);
          uint64_t v8 = (unint64_t *)v6[182];
          uint64_t v10 = (unint64_t *)v6[181];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v26 = (unint64_t *)&v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          unint64_t v28 = *--v8;
          *--unint64_t v26 = v28;
        }
LABEL_35:
        v6[181] = v26;
        v6[182] = v20;
        v6[183] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[182] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      int v33 = (uint64_t *)v31[185];
      unint64_t v41 = v31[186];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (uint64_t *)v31[184];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_168;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 186), v46);
          int v33 = (uint64_t *)v31[185];
          uint64_t v35 = (uint64_t *)v31[184];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      int v33 = (uint64_t *)v31[185];
      unint64_t v34 = v31[186];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (uint64_t *)v31[184];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_168;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 186), v39);
          int v33 = (uint64_t *)v31[185];
          uint64_t v35 = (uint64_t *)v31[184];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[184] = v48;
        v31[185] = v42;
        v31[186] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[185] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      int v55 = (uint64_t *)v53[188];
      unint64_t v63 = v53[189];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (uint64_t *)v53[187];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_168;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 189), v68);
          int v55 = (uint64_t *)v53[188];
          uint64_t v57 = (uint64_t *)v53[187];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = (uint64_t *)&v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *unint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v73 = *--v55;
          *--unint64_t v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      int v55 = (uint64_t *)v53[188];
      unint64_t v56 = v53[189];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (uint64_t *)v53[187];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_168;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 189), v61);
          int v55 = (uint64_t *)v53[188];
          uint64_t v57 = (uint64_t *)v53[187];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = (uint64_t *)&v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *unint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v72 = *--v55;
          *--unint64_t v70 = v72;
        }
LABEL_99:
        v53[187] = v70;
        v53[188] = v64;
        v53[189] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *int v55 = v54;
    unint64_t v64 = v55 + 1;
LABEL_101:
    v53[188] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v86 = a1[1];
      uint64_t v76 = *(void **)v86;
      uint64_t v77 = *(unsigned __int16 *)(a1[2] + 26);
      unint64_t v78 = *(char **)(*(void *)v86 + 1528);
      unint64_t v87 = *(void *)(*(void *)v86 + 1536);
      if ((unint64_t)v78 >= v87)
      {
        uint64_t v80 = (char *)v76[190];
        uint64_t v89 = (v78 - v80) >> 3;
        if ((unint64_t)(v89 + 1) >> 61) {
          goto LABEL_168;
        }
        unint64_t v90 = v87 - (void)v80;
        unint64_t v91 = (uint64_t)(v87 - (void)v80) >> 2;
        if (v91 <= v89 + 1) {
          unint64_t v91 = v89 + 1;
        }
        if (v90 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        if (v92)
        {
          unint64_t v93 = (char *)sub_5714((uint64_t)(v76 + 192), v92);
          unint64_t v78 = (char *)v76[191];
          uint64_t v80 = (char *)v76[190];
        }
        else
        {
          unint64_t v93 = 0;
        }
        uint64_t v94 = &v93[8 * v89];
        unint64_t v95 = &v93[8 * v92];
        *(void *)uint64_t v94 = v77;
        unint64_t v88 = v94 + 8;
        while (v78 != v80)
        {
          uint64_t v97 = *((void *)v78 - 1);
          v78 -= 8;
          *((void *)v94 - 1) = v97;
          v94 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      uint64_t v75 = a1[1];
      uint64_t v76 = *(void **)v75;
      uint64_t v77 = *(unsigned __int16 *)(a1[2] + 26);
      unint64_t v78 = *(char **)(*(void *)v75 + 1528);
      unint64_t v79 = *(void *)(*(void *)v75 + 1536);
      if ((unint64_t)v78 >= v79)
      {
        uint64_t v80 = (char *)v76[190];
        uint64_t v81 = (v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61) {
          goto LABEL_168;
        }
        unint64_t v82 = v79 - (void)v80;
        unint64_t v83 = (uint64_t)(v79 - (void)v80) >> 2;
        if (v83 <= v81 + 1) {
          unint64_t v83 = v81 + 1;
        }
        if (v82 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v84 = v83;
        }
        if (v84)
        {
          unint64_t v85 = (char *)sub_5714((uint64_t)(v76 + 192), v84);
          unint64_t v78 = (char *)v76[191];
          uint64_t v80 = (char *)v76[190];
        }
        else
        {
          unint64_t v85 = 0;
        }
        uint64_t v94 = &v85[8 * v81];
        unint64_t v95 = &v85[8 * v84];
        *(void *)uint64_t v94 = v77;
        unint64_t v88 = v94 + 8;
        while (v78 != v80)
        {
          uint64_t v96 = *((void *)v78 - 1);
          v78 -= 8;
          *((void *)v94 - 1) = v96;
          v94 -= 8;
        }
LABEL_131:
        v76[190] = v94;
        v76[191] = v88;
        v76[192] = v95;
        if (v80) {
          operator delete(v80);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v78 = v77;
    unint64_t v88 = v78 + 8;
LABEL_133:
    v76[191] = v88;
LABEL_134:
    int v98 = 1 << *(_DWORD *)(v3 + 48);
    if (v98 == 2)
    {
      uint64_t v111 = a1[1];
      uint64_t v112 = a1[2];
      uint64_t v101 = *(void **)v111;
      uint64_t v102 = *(unsigned __int16 *)(v112 + 24);
      unint64_t v103 = *(char **)(*(void *)v111 + 1552);
      unint64_t v113 = *(void *)(*(void *)v111 + 1560);
      if ((unint64_t)v103 >= v113)
      {
        uint64_t v105 = (char *)v101[193];
        uint64_t v115 = (v103 - v105) >> 3;
        if (!((unint64_t)(v115 + 1) >> 61))
        {
          unint64_t v116 = v113 - (void)v105;
          unint64_t v117 = (uint64_t)(v113 - (void)v105) >> 2;
          if (v117 <= v115 + 1) {
            unint64_t v117 = v115 + 1;
          }
          if (v116 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v117;
          }
          if (v118)
          {
            uint64_t v119 = (char *)sub_5714((uint64_t)(v101 + 195), v118);
            unint64_t v103 = (char *)v101[194];
            uint64_t v105 = (char *)v101[193];
          }
          else
          {
            uint64_t v119 = 0;
          }
          uint64_t v120 = &v119[8 * v115];
          int v121 = &v119[8 * v118];
          *(void *)uint64_t v120 = v102;
          unint64_t v114 = v120 + 8;
          while (v103 != v105)
          {
            uint64_t v123 = *((void *)v103 - 1);
            v103 -= 8;
            *((void *)v120 - 1) = v123;
            v120 -= 8;
          }
          goto LABEL_163;
        }
LABEL_168:
        sub_566C();
      }
    }
    else
    {
      if (v98 != 1)
      {
LABEL_166:
        *a2 = 1;
        return;
      }
      uint64_t v99 = a1[1];
      uint64_t v100 = a1[2];
      uint64_t v101 = *(void **)v99;
      uint64_t v102 = *(unsigned __int16 *)(v100 + 24);
      unint64_t v103 = *(char **)(*(void *)v99 + 1552);
      unint64_t v104 = *(void *)(*(void *)v99 + 1560);
      if ((unint64_t)v103 >= v104)
      {
        uint64_t v105 = (char *)v101[193];
        uint64_t v106 = (v103 - v105) >> 3;
        if (!((unint64_t)(v106 + 1) >> 61))
        {
          unint64_t v107 = v104 - (void)v105;
          unint64_t v108 = (uint64_t)(v104 - (void)v105) >> 2;
          if (v108 <= v106 + 1) {
            unint64_t v108 = v106 + 1;
          }
          if (v107 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v109 = v108;
          }
          if (v109)
          {
            unint64_t v110 = (char *)sub_5714((uint64_t)(v101 + 195), v109);
            unint64_t v103 = (char *)v101[194];
            uint64_t v105 = (char *)v101[193];
          }
          else
          {
            unint64_t v110 = 0;
          }
          uint64_t v120 = &v110[8 * v106];
          int v121 = &v110[8 * v109];
          *(void *)uint64_t v120 = v102;
          unint64_t v114 = v120 + 8;
          while (v103 != v105)
          {
            uint64_t v122 = *((void *)v103 - 1);
            v103 -= 8;
            *((void *)v120 - 1) = v122;
            v120 -= 8;
          }
LABEL_163:
          v101[193] = v120;
          v101[194] = v114;
          v101[195] = v121;
          if (v105) {
            operator delete(v105);
          }
          goto LABEL_165;
        }
        goto LABEL_168;
      }
    }
    *(void *)unint64_t v103 = v102;
    unint64_t v114 = v103 + 8;
LABEL_165:
    v101[194] = v114;
    goto LABEL_166;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[182] - 8) += (unint64_t)*(unsigned int *)(v17 + 32) >> 17;
    *(void *)(v18[185] - 8) += *(_DWORD *)(v17 + 32) & 0x1FFFF;
    *(void *)(v18[188] - 8) += *(_DWORD *)(v17 + 28) & 0x1FFFF;
    *(void *)(v18[191] - 8) += *(unsigned __int16 *)(v17 + 26);
    *(void *)(v18[194] - 8) += *(unsigned __int16 *)(v17 + 24);
  }
}

void sub_15DD98(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
      uint64_t v8 = (char *)v6[320];
      unint64_t v26 = v6[321];
      if ((unint64_t)v8 >= v26)
      {
        uint64_t v10 = (char *)v6[319];
        uint64_t v28 = (v8 - v10) >> 3;
        if ((unint64_t)(v28 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v29 = v26 - (void)v10;
        unint64_t v30 = (uint64_t)(v26 - (void)v10) >> 2;
        if (v30 <= v28 + 1) {
          unint64_t v30 = v28 + 1;
        }
        if (v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          uint64_t v32 = (char *)sub_5714((uint64_t)(v6 + 321), v31);
          uint64_t v8 = (char *)v6[320];
          uint64_t v10 = (char *)v6[319];
        }
        else
        {
          uint64_t v32 = 0;
        }
        int v33 = &v32[8 * v28];
        unint64_t v34 = &v32[8 * v31];
        *(void *)int v33 = v7;
        unint64_t v27 = v33 + 8;
        while (v8 != v10)
        {
          uint64_t v36 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v33 - 1) = v36;
          v33 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
      uint64_t v8 = (char *)v6[320];
      unint64_t v9 = v6[321];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[319];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 321), v14);
          uint64_t v8 = (char *)v6[320];
          uint64_t v10 = (char *)v6[319];
        }
        else
        {
          uint64_t v15 = 0;
        }
        int v33 = &v15[8 * v11];
        unint64_t v34 = &v15[8 * v14];
        *(void *)int v33 = v7;
        unint64_t v27 = v33 + 8;
        while (v8 != v10)
        {
          uint64_t v35 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v33 - 1) = v35;
          v33 -= 8;
        }
LABEL_35:
        v6[319] = v33;
        v6[320] = v27;
        v6[321] = v34;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    unint64_t v27 = v8 + 8;
LABEL_37:
    v6[320] = v27;
LABEL_38:
    int v37 = 1 << *(_DWORD *)(v3 + 48);
    if (v37 == 2)
    {
      unint64_t v38 = *(void **)a1[1];
      uint64_t v39 = *(_WORD *)(a1[2] + 66) & 0x1FFF;
      unint64_t v40 = (char *)v38[323];
      unint64_t v48 = v38[324];
      if ((unint64_t)v40 >= v48)
      {
        unint64_t v42 = (char *)v38[322];
        uint64_t v50 = (v40 - v42) >> 3;
        if ((unint64_t)(v50 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v51 = v48 - (void)v42;
        unint64_t v52 = (uint64_t)(v48 - (void)v42) >> 2;
        if (v52 <= v50 + 1) {
          unint64_t v52 = v50 + 1;
        }
        if (v51 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          uint64_t v54 = (char *)sub_5714((uint64_t)(v38 + 324), v53);
          unint64_t v40 = (char *)v38[323];
          unint64_t v42 = (char *)v38[322];
        }
        else
        {
          uint64_t v54 = 0;
        }
        int v55 = &v54[8 * v50];
        unint64_t v56 = &v54[8 * v53];
        *(void *)int v55 = v39;
        unint64_t v49 = v55 + 8;
        while (v40 != v42)
        {
          uint64_t v58 = *((void *)v40 - 1);
          v40 -= 8;
          *((void *)v55 - 1) = v58;
          v55 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v37 != 1) {
        goto LABEL_70;
      }
      unint64_t v38 = *(void **)a1[1];
      uint64_t v39 = *(_WORD *)(a1[2] + 66) & 0x1FFF;
      unint64_t v40 = (char *)v38[323];
      unint64_t v41 = v38[324];
      if ((unint64_t)v40 >= v41)
      {
        unint64_t v42 = (char *)v38[322];
        uint64_t v43 = (v40 - v42) >> 3;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v44 = v41 - (void)v42;
        unint64_t v45 = (uint64_t)(v41 - (void)v42) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v38 + 324), v46);
          unint64_t v40 = (char *)v38[323];
          unint64_t v42 = (char *)v38[322];
        }
        else
        {
          unint64_t v47 = 0;
        }
        int v55 = &v47[8 * v43];
        unint64_t v56 = &v47[8 * v46];
        *(void *)int v55 = v39;
        unint64_t v49 = v55 + 8;
        while (v40 != v42)
        {
          uint64_t v57 = *((void *)v40 - 1);
          v40 -= 8;
          *((void *)v55 - 1) = v57;
          v55 -= 8;
        }
LABEL_67:
        v38[322] = v55;
        v38[323] = v49;
        v38[324] = v56;
        if (v42) {
          operator delete(v42);
        }
        goto LABEL_69;
      }
    }
    *(void *)unint64_t v40 = v39;
    unint64_t v49 = v40 + 8;
LABEL_69:
    v38[323] = v49;
LABEL_70:
    int v59 = 1 << *(_DWORD *)(v3 + 48);
    if (v59 == 2)
    {
      unint64_t v60 = *(void **)a1[1];
      uint64_t v61 = *(_WORD *)(a1[2] + 50) & 0x1FFF;
      unint64_t v62 = (char *)v60[326];
      unint64_t v70 = v60[327];
      if ((unint64_t)v62 >= v70)
      {
        unint64_t v64 = (char *)v60[325];
        uint64_t v72 = (v62 - v64) >> 3;
        if ((unint64_t)(v72 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v73 = v70 - (void)v64;
        unint64_t v74 = (uint64_t)(v70 - (void)v64) >> 2;
        if (v74 <= v72 + 1) {
          unint64_t v74 = v72 + 1;
        }
        if (v73 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v74;
        }
        if (v75)
        {
          uint64_t v76 = (char *)sub_5714((uint64_t)(v60 + 327), v75);
          unint64_t v62 = (char *)v60[326];
          unint64_t v64 = (char *)v60[325];
        }
        else
        {
          uint64_t v76 = 0;
        }
        uint64_t v77 = &v76[8 * v72];
        unint64_t v78 = &v76[8 * v75];
        *(void *)uint64_t v77 = v61;
        unint64_t v71 = v77 + 8;
        while (v62 != v64)
        {
          uint64_t v80 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v77 - 1) = v80;
          v77 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v59 != 1) {
        goto LABEL_102;
      }
      unint64_t v60 = *(void **)a1[1];
      uint64_t v61 = *(_WORD *)(a1[2] + 50) & 0x1FFF;
      unint64_t v62 = (char *)v60[326];
      unint64_t v63 = v60[327];
      if ((unint64_t)v62 >= v63)
      {
        unint64_t v64 = (char *)v60[325];
        uint64_t v65 = (v62 - v64) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v66 = v63 - (void)v64;
        unint64_t v67 = (uint64_t)(v63 - (void)v64) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v60 + 327), v68);
          unint64_t v62 = (char *)v60[326];
          unint64_t v64 = (char *)v60[325];
        }
        else
        {
          unint64_t v69 = 0;
        }
        uint64_t v77 = &v69[8 * v65];
        unint64_t v78 = &v69[8 * v68];
        *(void *)uint64_t v77 = v61;
        unint64_t v71 = v77 + 8;
        while (v62 != v64)
        {
          uint64_t v79 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v77 - 1) = v79;
          v77 -= 8;
        }
LABEL_99:
        v60[325] = v77;
        v60[326] = v71;
        v60[327] = v78;
        if (v64) {
          operator delete(v64);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v62 = v61;
    unint64_t v71 = v62 + 8;
LABEL_101:
    v60[326] = v71;
LABEL_102:
    int v81 = 1 << *(_DWORD *)(v3 + 48);
    if (v81 == 2)
    {
      unint64_t v82 = *(void **)a1[1];
      uint64_t v83 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      unint64_t v84 = (char *)v82[329];
      unint64_t v92 = v82[330];
      if ((unint64_t)v84 >= v92)
      {
        uint64_t v86 = (char *)v82[328];
        uint64_t v94 = (v84 - v86) >> 3;
        if ((unint64_t)(v94 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v95 = v92 - (void)v86;
        unint64_t v96 = (uint64_t)(v92 - (void)v86) >> 2;
        if (v96 <= v94 + 1) {
          unint64_t v96 = v94 + 1;
        }
        if (v95 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v96;
        }
        if (v97)
        {
          int v98 = (char *)sub_5714((uint64_t)(v82 + 330), v97);
          unint64_t v84 = (char *)v82[329];
          uint64_t v86 = (char *)v82[328];
        }
        else
        {
          int v98 = 0;
        }
        uint64_t v99 = &v98[8 * v94];
        uint64_t v100 = &v98[8 * v97];
        *(void *)uint64_t v99 = v83;
        unint64_t v93 = v99 + 8;
        while (v84 != v86)
        {
          uint64_t v102 = *((void *)v84 - 1);
          v84 -= 8;
          *((void *)v99 - 1) = v102;
          v99 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v81 != 1) {
        goto LABEL_134;
      }
      unint64_t v82 = *(void **)a1[1];
      uint64_t v83 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      unint64_t v84 = (char *)v82[329];
      unint64_t v85 = v82[330];
      if ((unint64_t)v84 >= v85)
      {
        uint64_t v86 = (char *)v82[328];
        uint64_t v87 = (v84 - v86) >> 3;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v88 = v85 - (void)v86;
        unint64_t v89 = (uint64_t)(v85 - (void)v86) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v82 + 330), v90);
          unint64_t v84 = (char *)v82[329];
          uint64_t v86 = (char *)v82[328];
        }
        else
        {
          unint64_t v91 = 0;
        }
        uint64_t v99 = &v91[8 * v87];
        uint64_t v100 = &v91[8 * v90];
        *(void *)uint64_t v99 = v83;
        unint64_t v93 = v99 + 8;
        while (v84 != v86)
        {
          uint64_t v101 = *((void *)v84 - 1);
          v84 -= 8;
          *((void *)v99 - 1) = v101;
          v99 -= 8;
        }
LABEL_131:
        v82[328] = v99;
        v82[329] = v93;
        v82[330] = v100;
        if (v86) {
          operator delete(v86);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v84 = v83;
    unint64_t v93 = v84 + 8;
LABEL_133:
    v82[329] = v93;
LABEL_134:
    int v103 = 1 << *(_DWORD *)(v3 + 48);
    if (v103 == 2)
    {
      unint64_t v104 = *(void **)a1[1];
      uint64_t v105 = *(_WORD *)(a1[2] + 84) & 0x1FFF;
      uint64_t v106 = (char *)v104[332];
      unint64_t v114 = v104[333];
      if ((unint64_t)v106 >= v114)
      {
        unint64_t v108 = (char *)v104[331];
        uint64_t v116 = (v106 - v108) >> 3;
        if ((unint64_t)(v116 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v117 = v114 - (void)v108;
        unint64_t v118 = (uint64_t)(v114 - (void)v108) >> 2;
        if (v118 <= v116 + 1) {
          unint64_t v118 = v116 + 1;
        }
        if (v117 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v119 = v118;
        }
        if (v119)
        {
          uint64_t v120 = (char *)sub_5714((uint64_t)(v104 + 333), v119);
          uint64_t v106 = (char *)v104[332];
          unint64_t v108 = (char *)v104[331];
        }
        else
        {
          uint64_t v120 = 0;
        }
        int v121 = &v120[8 * v116];
        uint64_t v122 = &v120[8 * v119];
        *(void *)int v121 = v105;
        uint64_t v115 = v121 + 8;
        while (v106 != v108)
        {
          uint64_t v124 = *((void *)v106 - 1);
          v106 -= 8;
          *((void *)v121 - 1) = v124;
          v121 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v103 != 1) {
        goto LABEL_166;
      }
      unint64_t v104 = *(void **)a1[1];
      uint64_t v105 = *(_WORD *)(a1[2] + 84) & 0x1FFF;
      uint64_t v106 = (char *)v104[332];
      unint64_t v107 = v104[333];
      if ((unint64_t)v106 >= v107)
      {
        unint64_t v108 = (char *)v104[331];
        uint64_t v109 = (v106 - v108) >> 3;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v110 = v107 - (void)v108;
        unint64_t v111 = (uint64_t)(v107 - (void)v108) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v104 + 333), v112);
          uint64_t v106 = (char *)v104[332];
          unint64_t v108 = (char *)v104[331];
        }
        else
        {
          unint64_t v113 = 0;
        }
        int v121 = &v113[8 * v109];
        uint64_t v122 = &v113[8 * v112];
        *(void *)int v121 = v105;
        uint64_t v115 = v121 + 8;
        while (v106 != v108)
        {
          uint64_t v123 = *((void *)v106 - 1);
          v106 -= 8;
          *((void *)v121 - 1) = v123;
          v121 -= 8;
        }
LABEL_163:
        v104[331] = v121;
        v104[332] = v115;
        v104[333] = v122;
        if (v108) {
          operator delete(v108);
        }
        goto LABEL_165;
      }
    }
    *(void *)uint64_t v106 = v105;
    uint64_t v115 = v106 + 8;
LABEL_165:
    v104[332] = v115;
LABEL_166:
    int v125 = 1 << *(_DWORD *)(v3 + 48);
    if (v125 == 2)
    {
      uint64_t v126 = *(void **)a1[1];
      uint64_t v127 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
      unint64_t v128 = (char *)v126[335];
      unint64_t v136 = v126[336];
      if ((unint64_t)v128 >= v136)
      {
        unint64_t v130 = (char *)v126[334];
        uint64_t v138 = (v128 - v130) >> 3;
        if ((unint64_t)(v138 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v139 = v136 - (void)v130;
        unint64_t v140 = (uint64_t)(v136 - (void)v130) >> 2;
        if (v140 <= v138 + 1) {
          unint64_t v140 = v138 + 1;
        }
        if (v139 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v140;
        }
        if (v141)
        {
          uint64_t v142 = (char *)sub_5714((uint64_t)(v126 + 336), v141);
          unint64_t v128 = (char *)v126[335];
          unint64_t v130 = (char *)v126[334];
        }
        else
        {
          uint64_t v142 = 0;
        }
        int v143 = &v142[8 * v138];
        int v144 = &v142[8 * v141];
        *(void *)int v143 = v127;
        unint64_t v137 = v143 + 8;
        while (v128 != v130)
        {
          uint64_t v146 = *((void *)v128 - 1);
          v128 -= 8;
          *((void *)v143 - 1) = v146;
          v143 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v125 != 1) {
        goto LABEL_198;
      }
      uint64_t v126 = *(void **)a1[1];
      uint64_t v127 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
      unint64_t v128 = (char *)v126[335];
      unint64_t v129 = v126[336];
      if ((unint64_t)v128 >= v129)
      {
        unint64_t v130 = (char *)v126[334];
        uint64_t v131 = (v128 - v130) >> 3;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v132 = v129 - (void)v130;
        unint64_t v133 = (uint64_t)(v129 - (void)v130) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          unint64_t v135 = (char *)sub_5714((uint64_t)(v126 + 336), v134);
          unint64_t v128 = (char *)v126[335];
          unint64_t v130 = (char *)v126[334];
        }
        else
        {
          unint64_t v135 = 0;
        }
        int v143 = &v135[8 * v131];
        int v144 = &v135[8 * v134];
        *(void *)int v143 = v127;
        unint64_t v137 = v143 + 8;
        while (v128 != v130)
        {
          uint64_t v145 = *((void *)v128 - 1);
          v128 -= 8;
          *((void *)v143 - 1) = v145;
          v143 -= 8;
        }
LABEL_195:
        v126[334] = v143;
        v126[335] = v137;
        v126[336] = v144;
        if (v130) {
          operator delete(v130);
        }
        goto LABEL_197;
      }
    }
    *(void *)unint64_t v128 = v127;
    unint64_t v137 = v128 + 8;
LABEL_197:
    v126[335] = v137;
LABEL_198:
    int v147 = 1 << *(_DWORD *)(v3 + 48);
    if (v147 == 2)
    {
      unint64_t v148 = *(void **)a1[1];
      uint64_t v149 = *(_WORD *)(a1[2] + 52) & 0x1FFF;
      unint64_t v150 = (char *)v148[338];
      unint64_t v158 = v148[339];
      if ((unint64_t)v150 >= v158)
      {
        unint64_t v152 = (char *)v148[337];
        uint64_t v160 = (v150 - v152) >> 3;
        if ((unint64_t)(v160 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v161 = v158 - (void)v152;
        unint64_t v162 = (uint64_t)(v158 - (void)v152) >> 2;
        if (v162 <= v160 + 1) {
          unint64_t v162 = v160 + 1;
        }
        if (v161 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v163 = v162;
        }
        if (v163)
        {
          uint64_t v164 = (char *)sub_5714((uint64_t)(v148 + 339), v163);
          unint64_t v150 = (char *)v148[338];
          unint64_t v152 = (char *)v148[337];
        }
        else
        {
          uint64_t v164 = 0;
        }
        int v165 = &v164[8 * v160];
        int v166 = &v164[8 * v163];
        *(void *)int v165 = v149;
        unint64_t v159 = v165 + 8;
        while (v150 != v152)
        {
          uint64_t v168 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v165 - 1) = v168;
          v165 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v147 != 1) {
        goto LABEL_230;
      }
      unint64_t v148 = *(void **)a1[1];
      uint64_t v149 = *(_WORD *)(a1[2] + 52) & 0x1FFF;
      unint64_t v150 = (char *)v148[338];
      unint64_t v151 = v148[339];
      if ((unint64_t)v150 >= v151)
      {
        unint64_t v152 = (char *)v148[337];
        uint64_t v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v154 = v151 - (void)v152;
        unint64_t v155 = (uint64_t)(v151 - (void)v152) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          unint64_t v157 = (char *)sub_5714((uint64_t)(v148 + 339), v156);
          unint64_t v150 = (char *)v148[338];
          unint64_t v152 = (char *)v148[337];
        }
        else
        {
          unint64_t v157 = 0;
        }
        int v165 = &v157[8 * v153];
        int v166 = &v157[8 * v156];
        *(void *)int v165 = v149;
        unint64_t v159 = v165 + 8;
        while (v150 != v152)
        {
          uint64_t v167 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v165 - 1) = v167;
          v165 -= 8;
        }
LABEL_227:
        v148[337] = v165;
        v148[338] = v159;
        v148[339] = v166;
        if (v152) {
          operator delete(v152);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v150 = v149;
    unint64_t v159 = v150 + 8;
LABEL_229:
    v148[338] = v159;
LABEL_230:
    int v169 = 1 << *(_DWORD *)(v3 + 48);
    if (v169 == 2)
    {
      unint64_t v170 = *(void **)a1[1];
      uint64_t v171 = *(_WORD *)(a1[2] + 36) & 0x1FFF;
      unint64_t v172 = (char *)v170[341];
      unint64_t v180 = v170[342];
      if ((unint64_t)v172 >= v180)
      {
        unint64_t v174 = (char *)v170[340];
        uint64_t v182 = (v172 - v174) >> 3;
        if ((unint64_t)(v182 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v183 = v180 - (void)v174;
        unint64_t v184 = (uint64_t)(v180 - (void)v174) >> 2;
        if (v184 <= v182 + 1) {
          unint64_t v184 = v182 + 1;
        }
        if (v183 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v185 = v184;
        }
        if (v185)
        {
          uint64_t v186 = (char *)sub_5714((uint64_t)(v170 + 342), v185);
          unint64_t v172 = (char *)v170[341];
          unint64_t v174 = (char *)v170[340];
        }
        else
        {
          uint64_t v186 = 0;
        }
        int v187 = &v186[8 * v182];
        int v188 = &v186[8 * v185];
        *(void *)int v187 = v171;
        unint64_t v181 = v187 + 8;
        while (v172 != v174)
        {
          uint64_t v190 = *((void *)v172 - 1);
          v172 -= 8;
          *((void *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v169 != 1) {
        goto LABEL_262;
      }
      unint64_t v170 = *(void **)a1[1];
      uint64_t v171 = *(_WORD *)(a1[2] + 36) & 0x1FFF;
      unint64_t v172 = (char *)v170[341];
      unint64_t v173 = v170[342];
      if ((unint64_t)v172 >= v173)
      {
        unint64_t v174 = (char *)v170[340];
        uint64_t v175 = (v172 - v174) >> 3;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v176 = v173 - (void)v174;
        unint64_t v177 = (uint64_t)(v173 - (void)v174) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          unint64_t v179 = (char *)sub_5714((uint64_t)(v170 + 342), v178);
          unint64_t v172 = (char *)v170[341];
          unint64_t v174 = (char *)v170[340];
        }
        else
        {
          unint64_t v179 = 0;
        }
        int v187 = &v179[8 * v175];
        int v188 = &v179[8 * v178];
        *(void *)int v187 = v171;
        unint64_t v181 = v187 + 8;
        while (v172 != v174)
        {
          uint64_t v189 = *((void *)v172 - 1);
          v172 -= 8;
          *((void *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v170[340] = v187;
        v170[341] = v181;
        v170[342] = v188;
        if (v174) {
          operator delete(v174);
        }
        goto LABEL_261;
      }
    }
    *(void *)unint64_t v172 = v171;
    unint64_t v181 = v172 + 8;
LABEL_261:
    v170[341] = v181;
LABEL_262:
    int v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      unint64_t v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 86) & 0x1FFF;
      unint64_t v194 = (char *)v192[344];
      unint64_t v202 = v192[345];
      if ((unint64_t)v194 >= v202)
      {
        unint64_t v196 = (char *)v192[343];
        uint64_t v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v205 = v202 - (void)v196;
        unint64_t v206 = (uint64_t)(v202 - (void)v196) >> 2;
        if (v206 <= v204 + 1) {
          unint64_t v206 = v204 + 1;
        }
        if (v205 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v207 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v207 = v206;
        }
        if (v207)
        {
          uint64_t v208 = (char *)sub_5714((uint64_t)(v192 + 345), v207);
          unint64_t v194 = (char *)v192[344];
          unint64_t v196 = (char *)v192[343];
        }
        else
        {
          uint64_t v208 = 0;
        }
        int v209 = &v208[8 * v204];
        int v210 = &v208[8 * v207];
        *(void *)int v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v212 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1) {
        goto LABEL_294;
      }
      unint64_t v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 86) & 0x1FFF;
      unint64_t v194 = (char *)v192[344];
      unint64_t v195 = v192[345];
      if ((unint64_t)v194 >= v195)
      {
        unint64_t v196 = (char *)v192[343];
        uint64_t v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v198 = v195 - (void)v196;
        unint64_t v199 = (uint64_t)(v195 - (void)v196) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          unint64_t v201 = (char *)sub_5714((uint64_t)(v192 + 345), v200);
          unint64_t v194 = (char *)v192[344];
          unint64_t v196 = (char *)v192[343];
        }
        else
        {
          unint64_t v201 = 0;
        }
        int v209 = &v201[8 * v197];
        int v210 = &v201[8 * v200];
        *(void *)int v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v211 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[343] = v209;
        v192[344] = v203;
        v192[345] = v210;
        if (v196) {
          operator delete(v196);
        }
        goto LABEL_293;
      }
    }
    *(void *)unint64_t v194 = v193;
    unint64_t v203 = v194 + 8;
LABEL_293:
    v192[344] = v203;
LABEL_294:
    int v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
      unint64_t v216 = (char *)v214[347];
      unint64_t v224 = v214[348];
      if ((unint64_t)v216 >= v224)
      {
        unint64_t v218 = (char *)v214[346];
        uint64_t v226 = (v216 - v218) >> 3;
        if ((unint64_t)(v226 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v227 = v224 - (void)v218;
        unint64_t v228 = (uint64_t)(v224 - (void)v218) >> 2;
        if (v228 <= v226 + 1) {
          unint64_t v228 = v226 + 1;
        }
        if (v227 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v229 = v228;
        }
        if (v229)
        {
          uint64_t v230 = (char *)sub_5714((uint64_t)(v214 + 348), v229);
          unint64_t v216 = (char *)v214[347];
          unint64_t v218 = (char *)v214[346];
        }
        else
        {
          uint64_t v230 = 0;
        }
        int v231 = &v230[8 * v226];
        int v232 = &v230[8 * v229];
        *(void *)int v231 = v215;
        unint64_t v225 = v231 + 8;
        while (v216 != v218)
        {
          uint64_t v234 = *((void *)v216 - 1);
          v216 -= 8;
          *((void *)v231 - 1) = v234;
          v231 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1) {
        goto LABEL_326;
      }
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
      unint64_t v216 = (char *)v214[347];
      unint64_t v217 = v214[348];
      if ((unint64_t)v216 >= v217)
      {
        unint64_t v218 = (char *)v214[346];
        uint64_t v219 = (v216 - v218) >> 3;
        if ((unint64_t)(v219 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v220 = v217 - (void)v218;
        unint64_t v221 = (uint64_t)(v217 - (void)v218) >> 2;
        if (v221 <= v219 + 1) {
          unint64_t v221 = v219 + 1;
        }
        if (v220 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v222 = v221;
        }
        if (v222)
        {
          unint64_t v223 = (char *)sub_5714((uint64_t)(v214 + 348), v222);
          unint64_t v216 = (char *)v214[347];
          unint64_t v218 = (char *)v214[346];
        }
        else
        {
          unint64_t v223 = 0;
        }
        int v231 = &v223[8 * v219];
        int v232 = &v223[8 * v222];
        *(void *)int v231 = v215;
        unint64_t v225 = v231 + 8;
        while (v216 != v218)
        {
          uint64_t v233 = *((void *)v216 - 1);
          v216 -= 8;
          *((void *)v231 - 1) = v233;
          v231 -= 8;
        }
LABEL_323:
        v214[346] = v231;
        v214[347] = v225;
        v214[348] = v232;
        if (v218) {
          operator delete(v218);
        }
        goto LABEL_325;
      }
    }
    *(void *)unint64_t v216 = v215;
    unint64_t v225 = v216 + 8;
LABEL_325:
    v214[347] = v225;
LABEL_326:
    int v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_WORD *)(a1[2] + 54) & 0x1FFF;
      unint64_t v238 = (char *)v236[350];
      unint64_t v246 = v236[351];
      if ((unint64_t)v238 >= v246)
      {
        unint64_t v240 = (char *)v236[349];
        uint64_t v248 = (v238 - v240) >> 3;
        if ((unint64_t)(v248 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v249 = v246 - (void)v240;
        unint64_t v250 = (uint64_t)(v246 - (void)v240) >> 2;
        if (v250 <= v248 + 1) {
          unint64_t v250 = v248 + 1;
        }
        if (v249 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v251 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v251 = v250;
        }
        if (v251)
        {
          uint64_t v252 = (char *)sub_5714((uint64_t)(v236 + 351), v251);
          unint64_t v238 = (char *)v236[350];
          unint64_t v240 = (char *)v236[349];
        }
        else
        {
          uint64_t v252 = 0;
        }
        int v253 = &v252[8 * v248];
        int v254 = &v252[8 * v251];
        *(void *)int v253 = v237;
        unint64_t v247 = v253 + 8;
        while (v238 != v240)
        {
          uint64_t v256 = *((void *)v238 - 1);
          v238 -= 8;
          *((void *)v253 - 1) = v256;
          v253 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1) {
        goto LABEL_358;
      }
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_WORD *)(a1[2] + 54) & 0x1FFF;
      unint64_t v238 = (char *)v236[350];
      unint64_t v239 = v236[351];
      if ((unint64_t)v238 >= v239)
      {
        unint64_t v240 = (char *)v236[349];
        uint64_t v241 = (v238 - v240) >> 3;
        if ((unint64_t)(v241 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v242 = v239 - (void)v240;
        unint64_t v243 = (uint64_t)(v239 - (void)v240) >> 2;
        if (v243 <= v241 + 1) {
          unint64_t v243 = v241 + 1;
        }
        if (v242 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v244 = v243;
        }
        if (v244)
        {
          unint64_t v245 = (char *)sub_5714((uint64_t)(v236 + 351), v244);
          unint64_t v238 = (char *)v236[350];
          unint64_t v240 = (char *)v236[349];
        }
        else
        {
          unint64_t v245 = 0;
        }
        int v253 = &v245[8 * v241];
        int v254 = &v245[8 * v244];
        *(void *)int v253 = v237;
        unint64_t v247 = v253 + 8;
        while (v238 != v240)
        {
          uint64_t v255 = *((void *)v238 - 1);
          v238 -= 8;
          *((void *)v253 - 1) = v255;
          v253 -= 8;
        }
LABEL_355:
        v236[349] = v253;
        v236[350] = v247;
        v236[351] = v254;
        if (v240) {
          operator delete(v240);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v238 = v237;
    unint64_t v247 = v238 + 8;
LABEL_357:
    v236[350] = v247;
LABEL_358:
    int v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      unint64_t v258 = *(void **)a1[1];
      uint64_t v259 = *(_WORD *)(a1[2] + 38) & 0x1FFF;
      unint64_t v260 = (char *)v258[353];
      unint64_t v268 = v258[354];
      if ((unint64_t)v260 >= v268)
      {
        unint64_t v262 = (char *)v258[352];
        uint64_t v270 = (v260 - v262) >> 3;
        if ((unint64_t)(v270 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v271 = v268 - (void)v262;
        unint64_t v272 = (uint64_t)(v268 - (void)v262) >> 2;
        if (v272 <= v270 + 1) {
          unint64_t v272 = v270 + 1;
        }
        if (v271 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v273 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v273 = v272;
        }
        if (v273)
        {
          uint64_t v274 = (char *)sub_5714((uint64_t)(v258 + 354), v273);
          unint64_t v260 = (char *)v258[353];
          unint64_t v262 = (char *)v258[352];
        }
        else
        {
          uint64_t v274 = 0;
        }
        int v275 = &v274[8 * v270];
        int v276 = &v274[8 * v273];
        *(void *)int v275 = v259;
        unint64_t v269 = v275 + 8;
        while (v260 != v262)
        {
          uint64_t v278 = *((void *)v260 - 1);
          v260 -= 8;
          *((void *)v275 - 1) = v278;
          v275 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1) {
        goto LABEL_390;
      }
      unint64_t v258 = *(void **)a1[1];
      uint64_t v259 = *(_WORD *)(a1[2] + 38) & 0x1FFF;
      unint64_t v260 = (char *)v258[353];
      unint64_t v261 = v258[354];
      if ((unint64_t)v260 >= v261)
      {
        unint64_t v262 = (char *)v258[352];
        uint64_t v263 = (v260 - v262) >> 3;
        if ((unint64_t)(v263 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v264 = v261 - (void)v262;
        unint64_t v265 = (uint64_t)(v261 - (void)v262) >> 2;
        if (v265 <= v263 + 1) {
          unint64_t v265 = v263 + 1;
        }
        if (v264 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v266 = v265;
        }
        if (v266)
        {
          unint64_t v267 = (char *)sub_5714((uint64_t)(v258 + 354), v266);
          unint64_t v260 = (char *)v258[353];
          unint64_t v262 = (char *)v258[352];
        }
        else
        {
          unint64_t v267 = 0;
        }
        int v275 = &v267[8 * v263];
        int v276 = &v267[8 * v266];
        *(void *)int v275 = v259;
        unint64_t v269 = v275 + 8;
        while (v260 != v262)
        {
          uint64_t v277 = *((void *)v260 - 1);
          v260 -= 8;
          *((void *)v275 - 1) = v277;
          v275 -= 8;
        }
LABEL_387:
        v258[352] = v275;
        v258[353] = v269;
        v258[354] = v276;
        if (v262) {
          operator delete(v262);
        }
        goto LABEL_389;
      }
    }
    *(void *)unint64_t v260 = v259;
    unint64_t v269 = v260 + 8;
LABEL_389:
    v258[353] = v269;
LABEL_390:
    int v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      unint64_t v280 = *(void **)a1[1];
      uint64_t v281 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
      unint64_t v282 = (char *)v280[356];
      unint64_t v290 = v280[357];
      if ((unint64_t)v282 >= v290)
      {
        unint64_t v284 = (char *)v280[355];
        uint64_t v292 = (v282 - v284) >> 3;
        if ((unint64_t)(v292 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v293 = v290 - (void)v284;
        unint64_t v294 = (uint64_t)(v290 - (void)v284) >> 2;
        if (v294 <= v292 + 1) {
          unint64_t v294 = v292 + 1;
        }
        if (v293 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v295 = v294;
        }
        if (v295)
        {
          uint64_t v296 = (char *)sub_5714((uint64_t)(v280 + 357), v295);
          unint64_t v282 = (char *)v280[356];
          unint64_t v284 = (char *)v280[355];
        }
        else
        {
          uint64_t v296 = 0;
        }
        int v297 = &v296[8 * v292];
        uint64_t v298 = &v296[8 * v295];
        *(void *)int v297 = v281;
        unint64_t v291 = v297 + 8;
        while (v282 != v284)
        {
          uint64_t v300 = *((void *)v282 - 1);
          v282 -= 8;
          *((void *)v297 - 1) = v300;
          v297 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v279 != 1) {
        goto LABEL_422;
      }
      unint64_t v280 = *(void **)a1[1];
      uint64_t v281 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
      unint64_t v282 = (char *)v280[356];
      unint64_t v283 = v280[357];
      if ((unint64_t)v282 >= v283)
      {
        unint64_t v284 = (char *)v280[355];
        uint64_t v285 = (v282 - v284) >> 3;
        if ((unint64_t)(v285 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v286 = v283 - (void)v284;
        unint64_t v287 = (uint64_t)(v283 - (void)v284) >> 2;
        if (v287 <= v285 + 1) {
          unint64_t v287 = v285 + 1;
        }
        if (v286 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v288 = v287;
        }
        if (v288)
        {
          unint64_t v289 = (char *)sub_5714((uint64_t)(v280 + 357), v288);
          unint64_t v282 = (char *)v280[356];
          unint64_t v284 = (char *)v280[355];
        }
        else
        {
          unint64_t v289 = 0;
        }
        int v297 = &v289[8 * v285];
        uint64_t v298 = &v289[8 * v288];
        *(void *)int v297 = v281;
        unint64_t v291 = v297 + 8;
        while (v282 != v284)
        {
          uint64_t v299 = *((void *)v282 - 1);
          v282 -= 8;
          *((void *)v297 - 1) = v299;
          v297 -= 8;
        }
LABEL_419:
        v280[355] = v297;
        v280[356] = v291;
        v280[357] = v298;
        if (v284) {
          operator delete(v284);
        }
        goto LABEL_421;
      }
    }
    *(void *)unint64_t v282 = v281;
    unint64_t v291 = v282 + 8;
LABEL_421:
    v280[356] = v291;
LABEL_422:
    int v301 = 1 << *(_DWORD *)(v3 + 48);
    if (v301 == 2)
    {
      uint64_t v302 = *(void **)a1[1];
      uint64_t v303 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
      unint64_t v304 = (char *)v302[359];
      unint64_t v312 = v302[360];
      if ((unint64_t)v304 >= v312)
      {
        unint64_t v306 = (char *)v302[358];
        uint64_t v314 = (v304 - v306) >> 3;
        if ((unint64_t)(v314 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v315 = v312 - (void)v306;
        unint64_t v316 = (uint64_t)(v312 - (void)v306) >> 2;
        if (v316 <= v314 + 1) {
          unint64_t v316 = v314 + 1;
        }
        if (v315 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v317 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v317 = v316;
        }
        if (v317)
        {
          uint64_t v318 = (char *)sub_5714((uint64_t)(v302 + 360), v317);
          unint64_t v304 = (char *)v302[359];
          unint64_t v306 = (char *)v302[358];
        }
        else
        {
          uint64_t v318 = 0;
        }
        int v319 = &v318[8 * v314];
        uint64_t v320 = &v318[8 * v317];
        *(void *)int v319 = v303;
        unint64_t v313 = v319 + 8;
        while (v304 != v306)
        {
          uint64_t v322 = *((void *)v304 - 1);
          v304 -= 8;
          *((void *)v319 - 1) = v322;
          v319 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v301 != 1) {
        goto LABEL_454;
      }
      uint64_t v302 = *(void **)a1[1];
      uint64_t v303 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
      unint64_t v304 = (char *)v302[359];
      unint64_t v305 = v302[360];
      if ((unint64_t)v304 >= v305)
      {
        unint64_t v306 = (char *)v302[358];
        uint64_t v307 = (v304 - v306) >> 3;
        if ((unint64_t)(v307 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v308 = v305 - (void)v306;
        unint64_t v309 = (uint64_t)(v305 - (void)v306) >> 2;
        if (v309 <= v307 + 1) {
          unint64_t v309 = v307 + 1;
        }
        if (v308 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v310 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v310 = v309;
        }
        if (v310)
        {
          unint64_t v311 = (char *)sub_5714((uint64_t)(v302 + 360), v310);
          unint64_t v304 = (char *)v302[359];
          unint64_t v306 = (char *)v302[358];
        }
        else
        {
          unint64_t v311 = 0;
        }
        int v319 = &v311[8 * v307];
        uint64_t v320 = &v311[8 * v310];
        *(void *)int v319 = v303;
        unint64_t v313 = v319 + 8;
        while (v304 != v306)
        {
          uint64_t v321 = *((void *)v304 - 1);
          v304 -= 8;
          *((void *)v319 - 1) = v321;
          v319 -= 8;
        }
LABEL_451:
        v302[358] = v319;
        v302[359] = v313;
        v302[360] = v320;
        if (v306) {
          operator delete(v306);
        }
        goto LABEL_453;
      }
    }
    *(void *)unint64_t v304 = v303;
    unint64_t v313 = v304 + 8;
LABEL_453:
    v302[359] = v313;
LABEL_454:
    int v323 = 1 << *(_DWORD *)(v3 + 48);
    if (v323 == 2)
    {
      unint64_t v324 = *(void **)a1[1];
      uint64_t v325 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
      unint64_t v326 = (char *)v324[362];
      unint64_t v334 = v324[363];
      if ((unint64_t)v326 >= v334)
      {
        unint64_t v328 = (char *)v324[361];
        uint64_t v336 = (v326 - v328) >> 3;
        if ((unint64_t)(v336 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v337 = v334 - (void)v328;
        unint64_t v338 = (uint64_t)(v334 - (void)v328) >> 2;
        if (v338 <= v336 + 1) {
          unint64_t v338 = v336 + 1;
        }
        if (v337 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v339 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v339 = v338;
        }
        if (v339)
        {
          uint64_t v340 = (char *)sub_5714((uint64_t)(v324 + 363), v339);
          unint64_t v326 = (char *)v324[362];
          unint64_t v328 = (char *)v324[361];
        }
        else
        {
          uint64_t v340 = 0;
        }
        int v341 = &v340[8 * v336];
        uint64_t v342 = &v340[8 * v339];
        *(void *)int v341 = v325;
        unint64_t v335 = v341 + 8;
        while (v326 != v328)
        {
          uint64_t v344 = *((void *)v326 - 1);
          v326 -= 8;
          *((void *)v341 - 1) = v344;
          v341 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v323 != 1) {
        goto LABEL_486;
      }
      unint64_t v324 = *(void **)a1[1];
      uint64_t v325 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
      unint64_t v326 = (char *)v324[362];
      unint64_t v327 = v324[363];
      if ((unint64_t)v326 >= v327)
      {
        unint64_t v328 = (char *)v324[361];
        uint64_t v329 = (v326 - v328) >> 3;
        if ((unint64_t)(v329 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v330 = v327 - (void)v328;
        unint64_t v331 = (uint64_t)(v327 - (void)v328) >> 2;
        if (v331 <= v329 + 1) {
          unint64_t v331 = v329 + 1;
        }
        if (v330 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v332 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v332 = v331;
        }
        if (v332)
        {
          unint64_t v333 = (char *)sub_5714((uint64_t)(v324 + 363), v332);
          unint64_t v326 = (char *)v324[362];
          unint64_t v328 = (char *)v324[361];
        }
        else
        {
          unint64_t v333 = 0;
        }
        int v341 = &v333[8 * v329];
        uint64_t v342 = &v333[8 * v332];
        *(void *)int v341 = v325;
        unint64_t v335 = v341 + 8;
        while (v326 != v328)
        {
          uint64_t v343 = *((void *)v326 - 1);
          v326 -= 8;
          *((void *)v341 - 1) = v343;
          v341 -= 8;
        }
LABEL_483:
        v324[361] = v341;
        v324[362] = v335;
        v324[363] = v342;
        if (v328) {
          operator delete(v328);
        }
        goto LABEL_485;
      }
    }
    *(void *)unint64_t v326 = v325;
    unint64_t v335 = v326 + 8;
LABEL_485:
    v324[362] = v335;
LABEL_486:
    int v345 = 1 << *(_DWORD *)(v3 + 48);
    if (v345 == 2)
    {
      unsigned int v346 = *(void **)a1[1];
      uint64_t v347 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
      unint64_t v348 = (char *)v346[365];
      unint64_t v356 = v346[366];
      if ((unint64_t)v348 >= v356)
      {
        unint64_t v350 = (char *)v346[364];
        uint64_t v358 = (v348 - v350) >> 3;
        if ((unint64_t)(v358 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v359 = v356 - (void)v350;
        unint64_t v360 = (uint64_t)(v356 - (void)v350) >> 2;
        if (v360 <= v358 + 1) {
          unint64_t v360 = v358 + 1;
        }
        if (v359 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v361 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v361 = v360;
        }
        if (v361)
        {
          uint64_t v362 = (char *)sub_5714((uint64_t)(v346 + 366), v361);
          unint64_t v348 = (char *)v346[365];
          unint64_t v350 = (char *)v346[364];
        }
        else
        {
          uint64_t v362 = 0;
        }
        int v363 = &v362[8 * v358];
        uint64_t v364 = &v362[8 * v361];
        *(void *)int v363 = v347;
        unint64_t v357 = v363 + 8;
        while (v348 != v350)
        {
          uint64_t v366 = *((void *)v348 - 1);
          v348 -= 8;
          *((void *)v363 - 1) = v366;
          v363 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v345 != 1) {
        goto LABEL_518;
      }
      unsigned int v346 = *(void **)a1[1];
      uint64_t v347 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
      unint64_t v348 = (char *)v346[365];
      unint64_t v349 = v346[366];
      if ((unint64_t)v348 >= v349)
      {
        unint64_t v350 = (char *)v346[364];
        uint64_t v351 = (v348 - v350) >> 3;
        if ((unint64_t)(v351 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v352 = v349 - (void)v350;
        unint64_t v353 = (uint64_t)(v349 - (void)v350) >> 2;
        if (v353 <= v351 + 1) {
          unint64_t v353 = v351 + 1;
        }
        if (v352 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v354 = v353;
        }
        if (v354)
        {
          unint64_t v355 = (char *)sub_5714((uint64_t)(v346 + 366), v354);
          unint64_t v348 = (char *)v346[365];
          unint64_t v350 = (char *)v346[364];
        }
        else
        {
          unint64_t v355 = 0;
        }
        int v363 = &v355[8 * v351];
        uint64_t v364 = &v355[8 * v354];
        *(void *)int v363 = v347;
        unint64_t v357 = v363 + 8;
        while (v348 != v350)
        {
          uint64_t v365 = *((void *)v348 - 1);
          v348 -= 8;
          *((void *)v363 - 1) = v365;
          v363 -= 8;
        }
LABEL_515:
        v346[364] = v363;
        v346[365] = v357;
        v346[366] = v364;
        if (v350) {
          operator delete(v350);
        }
        goto LABEL_517;
      }
    }
    *(void *)unint64_t v348 = v347;
    unint64_t v357 = v348 + 8;
LABEL_517:
    v346[365] = v357;
LABEL_518:
    int v367 = 1 << *(_DWORD *)(v3 + 48);
    if (v367 == 2)
    {
      unint64_t v368 = *(void **)a1[1];
      uint64_t v369 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
      unint64_t v370 = (char *)v368[368];
      unint64_t v378 = v368[369];
      if ((unint64_t)v370 >= v378)
      {
        unint64_t v372 = (char *)v368[367];
        uint64_t v380 = (v370 - v372) >> 3;
        if ((unint64_t)(v380 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v381 = v378 - (void)v372;
        unint64_t v382 = (uint64_t)(v378 - (void)v372) >> 2;
        if (v382 <= v380 + 1) {
          unint64_t v382 = v380 + 1;
        }
        if (v381 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v383 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v383 = v382;
        }
        if (v383)
        {
          uint64_t v384 = (char *)sub_5714((uint64_t)(v368 + 369), v383);
          unint64_t v370 = (char *)v368[368];
          unint64_t v372 = (char *)v368[367];
        }
        else
        {
          uint64_t v384 = 0;
        }
        int v385 = &v384[8 * v380];
        uint64_t v386 = &v384[8 * v383];
        *(void *)int v385 = v369;
        unint64_t v379 = v385 + 8;
        while (v370 != v372)
        {
          uint64_t v388 = *((void *)v370 - 1);
          v370 -= 8;
          *((void *)v385 - 1) = v388;
          v385 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v367 != 1) {
        goto LABEL_550;
      }
      unint64_t v368 = *(void **)a1[1];
      uint64_t v369 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
      unint64_t v370 = (char *)v368[368];
      unint64_t v371 = v368[369];
      if ((unint64_t)v370 >= v371)
      {
        unint64_t v372 = (char *)v368[367];
        uint64_t v373 = (v370 - v372) >> 3;
        if ((unint64_t)(v373 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v374 = v371 - (void)v372;
        unint64_t v375 = (uint64_t)(v371 - (void)v372) >> 2;
        if (v375 <= v373 + 1) {
          unint64_t v375 = v373 + 1;
        }
        if (v374 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v376 = v375;
        }
        if (v376)
        {
          unint64_t v377 = (char *)sub_5714((uint64_t)(v368 + 369), v376);
          unint64_t v370 = (char *)v368[368];
          unint64_t v372 = (char *)v368[367];
        }
        else
        {
          unint64_t v377 = 0;
        }
        int v385 = &v377[8 * v373];
        uint64_t v386 = &v377[8 * v376];
        *(void *)int v385 = v369;
        unint64_t v379 = v385 + 8;
        while (v370 != v372)
        {
          uint64_t v387 = *((void *)v370 - 1);
          v370 -= 8;
          *((void *)v385 - 1) = v387;
          v385 -= 8;
        }
LABEL_547:
        v368[367] = v385;
        v368[368] = v379;
        v368[369] = v386;
        if (v372) {
          operator delete(v372);
        }
        goto LABEL_549;
      }
    }
    *(void *)unint64_t v370 = v369;
    unint64_t v379 = v370 + 8;
LABEL_549:
    v368[368] = v379;
LABEL_550:
    int v389 = 1 << *(_DWORD *)(v3 + 48);
    if (v389 == 2)
    {
      unint64_t v390 = *(void **)a1[1];
      uint64_t v391 = *(_WORD *)(a1[2] + 62) & 0x1FFF;
      unint64_t v392 = (char *)v390[371];
      unint64_t v400 = v390[372];
      if ((unint64_t)v392 >= v400)
      {
        unint64_t v394 = (char *)v390[370];
        uint64_t v402 = (v392 - v394) >> 3;
        if ((unint64_t)(v402 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v403 = v400 - (void)v394;
        unint64_t v404 = (uint64_t)(v400 - (void)v394) >> 2;
        if (v404 <= v402 + 1) {
          unint64_t v404 = v402 + 1;
        }
        if (v403 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v405 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v405 = v404;
        }
        if (v405)
        {
          uint64_t v406 = (char *)sub_5714((uint64_t)(v390 + 372), v405);
          unint64_t v392 = (char *)v390[371];
          unint64_t v394 = (char *)v390[370];
        }
        else
        {
          uint64_t v406 = 0;
        }
        int v407 = &v406[8 * v402];
        uint64_t v408 = &v406[8 * v405];
        *(void *)int v407 = v391;
        unint64_t v401 = v407 + 8;
        while (v392 != v394)
        {
          uint64_t v410 = *((void *)v392 - 1);
          v392 -= 8;
          *((void *)v407 - 1) = v410;
          v407 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v389 != 1) {
        goto LABEL_582;
      }
      unint64_t v390 = *(void **)a1[1];
      uint64_t v391 = *(_WORD *)(a1[2] + 62) & 0x1FFF;
      unint64_t v392 = (char *)v390[371];
      unint64_t v393 = v390[372];
      if ((unint64_t)v392 >= v393)
      {
        unint64_t v394 = (char *)v390[370];
        uint64_t v395 = (v392 - v394) >> 3;
        if ((unint64_t)(v395 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v396 = v393 - (void)v394;
        unint64_t v397 = (uint64_t)(v393 - (void)v394) >> 2;
        if (v397 <= v395 + 1) {
          unint64_t v397 = v395 + 1;
        }
        if (v396 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v398 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v398 = v397;
        }
        if (v398)
        {
          unint64_t v399 = (char *)sub_5714((uint64_t)(v390 + 372), v398);
          unint64_t v392 = (char *)v390[371];
          unint64_t v394 = (char *)v390[370];
        }
        else
        {
          unint64_t v399 = 0;
        }
        int v407 = &v399[8 * v395];
        uint64_t v408 = &v399[8 * v398];
        *(void *)int v407 = v391;
        unint64_t v401 = v407 + 8;
        while (v392 != v394)
        {
          uint64_t v409 = *((void *)v392 - 1);
          v392 -= 8;
          *((void *)v407 - 1) = v409;
          v407 -= 8;
        }
LABEL_579:
        v390[370] = v407;
        v390[371] = v401;
        v390[372] = v408;
        if (v394) {
          operator delete(v394);
        }
        goto LABEL_581;
      }
    }
    *(void *)unint64_t v392 = v391;
    unint64_t v401 = v392 + 8;
LABEL_581:
    v390[371] = v401;
LABEL_582:
    int v411 = 1 << *(_DWORD *)(v3 + 48);
    if (v411 == 2)
    {
      unint64_t v412 = *(void **)a1[1];
      uint64_t v413 = *(_WORD *)(a1[2] + 46) & 0x1FFF;
      uint64_t v414 = (char *)v412[374];
      unint64_t v422 = v412[375];
      if ((unint64_t)v414 >= v422)
      {
        unint64_t v416 = (char *)v412[373];
        uint64_t v424 = (v414 - v416) >> 3;
        if ((unint64_t)(v424 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v425 = v422 - (void)v416;
        unint64_t v426 = (uint64_t)(v422 - (void)v416) >> 2;
        if (v426 <= v424 + 1) {
          unint64_t v426 = v424 + 1;
        }
        if (v425 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v427 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v427 = v426;
        }
        if (v427)
        {
          uint64_t v428 = (char *)sub_5714((uint64_t)(v412 + 375), v427);
          uint64_t v414 = (char *)v412[374];
          unint64_t v416 = (char *)v412[373];
        }
        else
        {
          uint64_t v428 = 0;
        }
        uint64_t v429 = &v428[8 * v424];
        uint64_t v430 = &v428[8 * v427];
        *(void *)uint64_t v429 = v413;
        unint64_t v423 = v429 + 8;
        while (v414 != v416)
        {
          uint64_t v432 = *((void *)v414 - 1);
          v414 -= 8;
          *((void *)v429 - 1) = v432;
          v429 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v411 != 1) {
        goto LABEL_614;
      }
      unint64_t v412 = *(void **)a1[1];
      uint64_t v413 = *(_WORD *)(a1[2] + 46) & 0x1FFF;
      uint64_t v414 = (char *)v412[374];
      unint64_t v415 = v412[375];
      if ((unint64_t)v414 >= v415)
      {
        unint64_t v416 = (char *)v412[373];
        uint64_t v417 = (v414 - v416) >> 3;
        if ((unint64_t)(v417 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v418 = v415 - (void)v416;
        unint64_t v419 = (uint64_t)(v415 - (void)v416) >> 2;
        if (v419 <= v417 + 1) {
          unint64_t v419 = v417 + 1;
        }
        if (v418 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v420 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v420 = v419;
        }
        if (v420)
        {
          unint64_t v421 = (char *)sub_5714((uint64_t)(v412 + 375), v420);
          uint64_t v414 = (char *)v412[374];
          unint64_t v416 = (char *)v412[373];
        }
        else
        {
          unint64_t v421 = 0;
        }
        uint64_t v429 = &v421[8 * v417];
        uint64_t v430 = &v421[8 * v420];
        *(void *)uint64_t v429 = v413;
        unint64_t v423 = v429 + 8;
        while (v414 != v416)
        {
          uint64_t v431 = *((void *)v414 - 1);
          v414 -= 8;
          *((void *)v429 - 1) = v431;
          v429 -= 8;
        }
LABEL_611:
        v412[373] = v429;
        v412[374] = v423;
        v412[375] = v430;
        if (v416) {
          operator delete(v416);
        }
        goto LABEL_613;
      }
    }
    *(void *)uint64_t v414 = v413;
    unint64_t v423 = v414 + 8;
LABEL_613:
    v412[374] = v423;
LABEL_614:
    int v433 = 1 << *(_DWORD *)(v3 + 48);
    if (v433 == 2)
    {
      unint64_t v434 = *(void **)a1[1];
      uint64_t v435 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
      uint64_t v436 = (char *)v434[377];
      unint64_t v444 = v434[378];
      if ((unint64_t)v436 >= v444)
      {
        unint64_t v438 = (char *)v434[376];
        uint64_t v446 = (v436 - v438) >> 3;
        if ((unint64_t)(v446 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v447 = v444 - (void)v438;
        unint64_t v448 = (uint64_t)(v444 - (void)v438) >> 2;
        if (v448 <= v446 + 1) {
          unint64_t v448 = v446 + 1;
        }
        if (v447 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v449 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v449 = v448;
        }
        if (v449)
        {
          unint64_t v450 = (char *)sub_5714((uint64_t)(v434 + 378), v449);
          uint64_t v436 = (char *)v434[377];
          unint64_t v438 = (char *)v434[376];
        }
        else
        {
          unint64_t v450 = 0;
        }
        uint64_t v451 = &v450[8 * v446];
        uint64_t v452 = &v450[8 * v449];
        *(void *)uint64_t v451 = v435;
        unint64_t v445 = v451 + 8;
        while (v436 != v438)
        {
          uint64_t v454 = *((void *)v436 - 1);
          v436 -= 8;
          *((void *)v451 - 1) = v454;
          v451 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v433 != 1) {
        goto LABEL_646;
      }
      unint64_t v434 = *(void **)a1[1];
      uint64_t v435 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
      uint64_t v436 = (char *)v434[377];
      unint64_t v437 = v434[378];
      if ((unint64_t)v436 >= v437)
      {
        unint64_t v438 = (char *)v434[376];
        uint64_t v439 = (v436 - v438) >> 3;
        if ((unint64_t)(v439 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v440 = v437 - (void)v438;
        unint64_t v441 = (uint64_t)(v437 - (void)v438) >> 2;
        if (v441 <= v439 + 1) {
          unint64_t v441 = v439 + 1;
        }
        if (v440 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v442 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v442 = v441;
        }
        if (v442)
        {
          unint64_t v443 = (char *)sub_5714((uint64_t)(v434 + 378), v442);
          uint64_t v436 = (char *)v434[377];
          unint64_t v438 = (char *)v434[376];
        }
        else
        {
          unint64_t v443 = 0;
        }
        uint64_t v451 = &v443[8 * v439];
        uint64_t v452 = &v443[8 * v442];
        *(void *)uint64_t v451 = v435;
        unint64_t v445 = v451 + 8;
        while (v436 != v438)
        {
          uint64_t v453 = *((void *)v436 - 1);
          v436 -= 8;
          *((void *)v451 - 1) = v453;
          v451 -= 8;
        }
LABEL_643:
        v434[376] = v451;
        v434[377] = v445;
        v434[378] = v452;
        if (v438) {
          operator delete(v438);
        }
        goto LABEL_645;
      }
    }
    *(void *)uint64_t v436 = v435;
    unint64_t v445 = v436 + 8;
LABEL_645:
    v434[377] = v445;
LABEL_646:
    int v455 = 1 << *(_DWORD *)(v3 + 48);
    if (v455 == 2)
    {
      unint64_t v456 = *(void **)a1[1];
      uint64_t v457 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
      unint64_t v458 = (char *)v456[380];
      unint64_t v466 = v456[381];
      if ((unint64_t)v458 >= v466)
      {
        unint64_t v460 = (char *)v456[379];
        uint64_t v468 = (v458 - v460) >> 3;
        if ((unint64_t)(v468 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v469 = v466 - (void)v460;
        unint64_t v470 = (uint64_t)(v466 - (void)v460) >> 2;
        if (v470 <= v468 + 1) {
          unint64_t v470 = v468 + 1;
        }
        if (v469 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v471 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v471 = v470;
        }
        if (v471)
        {
          unint64_t v472 = (char *)sub_5714((uint64_t)(v456 + 381), v471);
          unint64_t v458 = (char *)v456[380];
          unint64_t v460 = (char *)v456[379];
        }
        else
        {
          unint64_t v472 = 0;
        }
        uint64_t v473 = &v472[8 * v468];
        uint64_t v474 = &v472[8 * v471];
        *(void *)uint64_t v473 = v457;
        unint64_t v467 = v473 + 8;
        while (v458 != v460)
        {
          uint64_t v476 = *((void *)v458 - 1);
          v458 -= 8;
          *((void *)v473 - 1) = v476;
          v473 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v455 != 1) {
        goto LABEL_678;
      }
      unint64_t v456 = *(void **)a1[1];
      uint64_t v457 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
      unint64_t v458 = (char *)v456[380];
      unint64_t v459 = v456[381];
      if ((unint64_t)v458 >= v459)
      {
        unint64_t v460 = (char *)v456[379];
        uint64_t v461 = (v458 - v460) >> 3;
        if ((unint64_t)(v461 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v462 = v459 - (void)v460;
        unint64_t v463 = (uint64_t)(v459 - (void)v460) >> 2;
        if (v463 <= v461 + 1) {
          unint64_t v463 = v461 + 1;
        }
        if (v462 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v464 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v464 = v463;
        }
        if (v464)
        {
          unsigned int v465 = (char *)sub_5714((uint64_t)(v456 + 381), v464);
          unint64_t v458 = (char *)v456[380];
          unint64_t v460 = (char *)v456[379];
        }
        else
        {
          unsigned int v465 = 0;
        }
        uint64_t v473 = &v465[8 * v461];
        uint64_t v474 = &v465[8 * v464];
        *(void *)uint64_t v473 = v457;
        unint64_t v467 = v473 + 8;
        while (v458 != v460)
        {
          uint64_t v475 = *((void *)v458 - 1);
          v458 -= 8;
          *((void *)v473 - 1) = v475;
          v473 -= 8;
        }
LABEL_675:
        v456[379] = v473;
        v456[380] = v467;
        v456[381] = v474;
        if (v460) {
          operator delete(v460);
        }
        goto LABEL_677;
      }
    }
    *(void *)unint64_t v458 = v457;
    unint64_t v467 = v458 + 8;
LABEL_677:
    v456[380] = v467;
LABEL_678:
    int v477 = 1 << *(_DWORD *)(v3 + 48);
    if (v477 == 2)
    {
      unint64_t v478 = *(void **)a1[1];
      uint64_t v479 = *(_WORD *)(a1[2] + 64) & 0x1FFF;
      unint64_t v480 = (char *)v478[383];
      unint64_t v488 = v478[384];
      if ((unint64_t)v480 >= v488)
      {
        uint64_t v482 = (char *)v478[382];
        uint64_t v490 = (v480 - v482) >> 3;
        if ((unint64_t)(v490 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v491 = v488 - (void)v482;
        unint64_t v492 = (uint64_t)(v488 - (void)v482) >> 2;
        if (v492 <= v490 + 1) {
          unint64_t v492 = v490 + 1;
        }
        if (v491 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v493 = v492;
        }
        if (v493)
        {
          unint64_t v494 = (char *)sub_5714((uint64_t)(v478 + 384), v493);
          unint64_t v480 = (char *)v478[383];
          uint64_t v482 = (char *)v478[382];
        }
        else
        {
          unint64_t v494 = 0;
        }
        unsigned int v495 = &v494[8 * v490];
        unint64_t v496 = &v494[8 * v493];
        *(void *)unsigned int v495 = v479;
        unint64_t v489 = v495 + 8;
        while (v480 != v482)
        {
          uint64_t v498 = *((void *)v480 - 1);
          v480 -= 8;
          *((void *)v495 - 1) = v498;
          v495 -= 8;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v477 != 1) {
        goto LABEL_710;
      }
      unint64_t v478 = *(void **)a1[1];
      uint64_t v479 = *(_WORD *)(a1[2] + 64) & 0x1FFF;
      unint64_t v480 = (char *)v478[383];
      unint64_t v481 = v478[384];
      if ((unint64_t)v480 >= v481)
      {
        uint64_t v482 = (char *)v478[382];
        uint64_t v483 = (v480 - v482) >> 3;
        if ((unint64_t)(v483 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v484 = v481 - (void)v482;
        unint64_t v485 = (uint64_t)(v481 - (void)v482) >> 2;
        if (v485 <= v483 + 1) {
          unint64_t v485 = v483 + 1;
        }
        if (v484 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v486 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v486 = v485;
        }
        if (v486)
        {
          uint64_t v487 = (char *)sub_5714((uint64_t)(v478 + 384), v486);
          unint64_t v480 = (char *)v478[383];
          uint64_t v482 = (char *)v478[382];
        }
        else
        {
          uint64_t v487 = 0;
        }
        unsigned int v495 = &v487[8 * v483];
        unint64_t v496 = &v487[8 * v486];
        *(void *)unsigned int v495 = v479;
        unint64_t v489 = v495 + 8;
        while (v480 != v482)
        {
          uint64_t v497 = *((void *)v480 - 1);
          v480 -= 8;
          *((void *)v495 - 1) = v497;
          v495 -= 8;
        }
LABEL_707:
        v478[382] = v495;
        v478[383] = v489;
        v478[384] = v496;
        if (v482) {
          operator delete(v482);
        }
        goto LABEL_709;
      }
    }
    *(void *)unint64_t v480 = v479;
    unint64_t v489 = v480 + 8;
LABEL_709:
    v478[383] = v489;
LABEL_710:
    int v499 = 1 << *(_DWORD *)(v3 + 48);
    if (v499 == 2)
    {
      unint64_t v500 = *(void **)a1[1];
      uint64_t v501 = *(_WORD *)(a1[2] + 48) & 0x1FFF;
      unint64_t v502 = (char *)v500[386];
      unint64_t v510 = v500[387];
      if ((unint64_t)v502 >= v510)
      {
        int v504 = (char *)v500[385];
        uint64_t v512 = (v502 - v504) >> 3;
        if ((unint64_t)(v512 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v513 = v510 - (void)v504;
        unint64_t v514 = (uint64_t)(v510 - (void)v504) >> 2;
        if (v514 <= v512 + 1) {
          unint64_t v514 = v512 + 1;
        }
        if (v513 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v515 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v515 = v514;
        }
        if (v515)
        {
          unint64_t v516 = (char *)sub_5714((uint64_t)(v500 + 387), v515);
          unint64_t v502 = (char *)v500[386];
          int v504 = (char *)v500[385];
        }
        else
        {
          unint64_t v516 = 0;
        }
        unint64_t v517 = &v516[8 * v512];
        unsigned int v518 = &v516[8 * v515];
        *(void *)unint64_t v517 = v501;
        int v511 = v517 + 8;
        while (v502 != v504)
        {
          uint64_t v520 = *((void *)v502 - 1);
          v502 -= 8;
          *((void *)v517 - 1) = v520;
          v517 -= 8;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v499 != 1) {
        goto LABEL_742;
      }
      unint64_t v500 = *(void **)a1[1];
      uint64_t v501 = *(_WORD *)(a1[2] + 48) & 0x1FFF;
      unint64_t v502 = (char *)v500[386];
      unint64_t v503 = v500[387];
      if ((unint64_t)v502 >= v503)
      {
        int v504 = (char *)v500[385];
        uint64_t v505 = (v502 - v504) >> 3;
        if ((unint64_t)(v505 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v506 = v503 - (void)v504;
        unint64_t v507 = (uint64_t)(v503 - (void)v504) >> 2;
        if (v507 <= v505 + 1) {
          unint64_t v507 = v505 + 1;
        }
        if (v506 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v508 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v508 = v507;
        }
        if (v508)
        {
          int v509 = (char *)sub_5714((uint64_t)(v500 + 387), v508);
          unint64_t v502 = (char *)v500[386];
          int v504 = (char *)v500[385];
        }
        else
        {
          int v509 = 0;
        }
        unint64_t v517 = &v509[8 * v505];
        unsigned int v518 = &v509[8 * v508];
        *(void *)unint64_t v517 = v501;
        int v511 = v517 + 8;
        while (v502 != v504)
        {
          uint64_t v519 = *((void *)v502 - 1);
          v502 -= 8;
          *((void *)v517 - 1) = v519;
          v517 -= 8;
        }
LABEL_739:
        v500[385] = v517;
        v500[386] = v511;
        v500[387] = v518;
        if (v504) {
          operator delete(v504);
        }
        goto LABEL_741;
      }
    }
    *(void *)unint64_t v502 = v501;
    int v511 = v502 + 8;
LABEL_741:
    v500[386] = v511;
LABEL_742:
    int v521 = 1 << *(_DWORD *)(v3 + 48);
    if (v521 == 2)
    {
      unsigned int v522 = *(void **)a1[1];
      uint64_t v523 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      unint64_t v524 = (char *)v522[389];
      unint64_t v532 = v522[390];
      if ((unint64_t)v524 >= v532)
      {
        unsigned int v526 = (char *)v522[388];
        uint64_t v534 = (v524 - v526) >> 3;
        if ((unint64_t)(v534 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v535 = v532 - (void)v526;
        unint64_t v536 = (uint64_t)(v532 - (void)v526) >> 2;
        if (v536 <= v534 + 1) {
          unint64_t v536 = v534 + 1;
        }
        if (v535 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v537 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v537 = v536;
        }
        if (v537)
        {
          unint64_t v538 = (char *)sub_5714((uint64_t)(v522 + 390), v537);
          unint64_t v524 = (char *)v522[389];
          unsigned int v526 = (char *)v522[388];
        }
        else
        {
          unint64_t v538 = 0;
        }
        unsigned int v539 = &v538[8 * v534];
        uint64_t v540 = &v538[8 * v537];
        *(void *)unsigned int v539 = v523;
        unint64_t v533 = v539 + 8;
        while (v524 != v526)
        {
          uint64_t v542 = *((void *)v524 - 1);
          v524 -= 8;
          *((void *)v539 - 1) = v542;
          v539 -= 8;
        }
        goto LABEL_771;
      }
    }
    else
    {
      if (v521 != 1) {
        goto LABEL_774;
      }
      unsigned int v522 = *(void **)a1[1];
      uint64_t v523 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      unint64_t v524 = (char *)v522[389];
      unint64_t v525 = v522[390];
      if ((unint64_t)v524 >= v525)
      {
        unsigned int v526 = (char *)v522[388];
        uint64_t v527 = (v524 - v526) >> 3;
        if ((unint64_t)(v527 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v528 = v525 - (void)v526;
        unint64_t v529 = (uint64_t)(v525 - (void)v526) >> 2;
        if (v529 <= v527 + 1) {
          unint64_t v529 = v527 + 1;
        }
        if (v528 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v530 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v530 = v529;
        }
        if (v530)
        {
          unint64_t v531 = (char *)sub_5714((uint64_t)(v522 + 390), v530);
          unint64_t v524 = (char *)v522[389];
          unsigned int v526 = (char *)v522[388];
        }
        else
        {
          unint64_t v531 = 0;
        }
        unsigned int v539 = &v531[8 * v527];
        uint64_t v540 = &v531[8 * v530];
        *(void *)unsigned int v539 = v523;
        unint64_t v533 = v539 + 8;
        while (v524 != v526)
        {
          uint64_t v541 = *((void *)v524 - 1);
          v524 -= 8;
          *((void *)v539 - 1) = v541;
          v539 -= 8;
        }
LABEL_771:
        v522[388] = v539;
        v522[389] = v533;
        v522[390] = v540;
        if (v526) {
          operator delete(v526);
        }
        goto LABEL_773;
      }
    }
    *(void *)unint64_t v524 = v523;
    unint64_t v533 = v524 + 8;
LABEL_773:
    v522[389] = v533;
LABEL_774:
    int v543 = 1 << *(_DWORD *)(v3 + 48);
    if (v543 == 2)
    {
      unint64_t v544 = *(void **)a1[1];
      uint64_t v545 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
      unsigned int v546 = (char *)v544[392];
      unint64_t v554 = v544[393];
      if ((unint64_t)v546 >= v554)
      {
        unint64_t v548 = (char *)v544[391];
        uint64_t v556 = (v546 - v548) >> 3;
        if ((unint64_t)(v556 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v557 = v554 - (void)v548;
        unint64_t v558 = (uint64_t)(v554 - (void)v548) >> 2;
        if (v558 <= v556 + 1) {
          unint64_t v558 = v556 + 1;
        }
        if (v557 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v559 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v559 = v558;
        }
        if (v559)
        {
          unint64_t v560 = (char *)sub_5714((uint64_t)(v544 + 393), v559);
          unsigned int v546 = (char *)v544[392];
          unint64_t v548 = (char *)v544[391];
        }
        else
        {
          unint64_t v560 = 0;
        }
        unint64_t v561 = &v560[8 * v556];
        int v562 = &v560[8 * v559];
        *(void *)unint64_t v561 = v545;
        unint64_t v555 = v561 + 8;
        while (v546 != v548)
        {
          uint64_t v564 = *((void *)v546 - 1);
          v546 -= 8;
          *((void *)v561 - 1) = v564;
          v561 -= 8;
        }
        goto LABEL_803;
      }
    }
    else
    {
      if (v543 != 1) {
        goto LABEL_806;
      }
      unint64_t v544 = *(void **)a1[1];
      uint64_t v545 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
      unsigned int v546 = (char *)v544[392];
      unint64_t v547 = v544[393];
      if ((unint64_t)v546 >= v547)
      {
        unint64_t v548 = (char *)v544[391];
        uint64_t v549 = (v546 - v548) >> 3;
        if ((unint64_t)(v549 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v550 = v547 - (void)v548;
        unint64_t v551 = (uint64_t)(v547 - (void)v548) >> 2;
        if (v551 <= v549 + 1) {
          unint64_t v551 = v549 + 1;
        }
        if (v550 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v552 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v552 = v551;
        }
        if (v552)
        {
          unint64_t v553 = (char *)sub_5714((uint64_t)(v544 + 393), v552);
          unsigned int v546 = (char *)v544[392];
          unint64_t v548 = (char *)v544[391];
        }
        else
        {
          unint64_t v553 = 0;
        }
        unint64_t v561 = &v553[8 * v549];
        int v562 = &v553[8 * v552];
        *(void *)unint64_t v561 = v545;
        unint64_t v555 = v561 + 8;
        while (v546 != v548)
        {
          uint64_t v563 = *((void *)v546 - 1);
          v546 -= 8;
          *((void *)v561 - 1) = v563;
          v561 -= 8;
        }
LABEL_803:
        v544[391] = v561;
        v544[392] = v555;
        v544[393] = v562;
        if (v548) {
          operator delete(v548);
        }
        goto LABEL_805;
      }
    }
    *(void *)unsigned int v546 = v545;
    unint64_t v555 = v546 + 8;
LABEL_805:
    v544[392] = v555;
LABEL_806:
    int v565 = 1 << *(_DWORD *)(v3 + 48);
    if (v565 == 2)
    {
      unint64_t v566 = *(void **)a1[1];
      uint64_t v567 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
      int v568 = (char *)v566[395];
      unint64_t v576 = v566[396];
      if ((unint64_t)v568 >= v576)
      {
        unint64_t v570 = (char *)v566[394];
        uint64_t v578 = (v568 - v570) >> 3;
        if ((unint64_t)(v578 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v579 = v576 - (void)v570;
        unint64_t v580 = (uint64_t)(v576 - (void)v570) >> 2;
        if (v580 <= v578 + 1) {
          unint64_t v580 = v578 + 1;
        }
        if (v579 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v581 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v581 = v580;
        }
        if (v581)
        {
          unint64_t v582 = (char *)sub_5714((uint64_t)(v566 + 396), v581);
          int v568 = (char *)v566[395];
          unint64_t v570 = (char *)v566[394];
        }
        else
        {
          unint64_t v582 = 0;
        }
        unint64_t v583 = &v582[8 * v578];
        unsigned int v584 = &v582[8 * v581];
        *(void *)unint64_t v583 = v567;
        unint64_t v577 = v583 + 8;
        while (v568 != v570)
        {
          uint64_t v586 = *((void *)v568 - 1);
          v568 -= 8;
          *((void *)v583 - 1) = v586;
          v583 -= 8;
        }
        goto LABEL_835;
      }
    }
    else
    {
      if (v565 != 1) {
        goto LABEL_838;
      }
      unint64_t v566 = *(void **)a1[1];
      uint64_t v567 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
      int v568 = (char *)v566[395];
      unint64_t v569 = v566[396];
      if ((unint64_t)v568 >= v569)
      {
        unint64_t v570 = (char *)v566[394];
        uint64_t v571 = (v568 - v570) >> 3;
        if ((unint64_t)(v571 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v572 = v569 - (void)v570;
        unint64_t v573 = (uint64_t)(v569 - (void)v570) >> 2;
        if (v573 <= v571 + 1) {
          unint64_t v573 = v571 + 1;
        }
        if (v572 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v574 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v574 = v573;
        }
        if (v574)
        {
          unint64_t v575 = (char *)sub_5714((uint64_t)(v566 + 396), v574);
          int v568 = (char *)v566[395];
          unint64_t v570 = (char *)v566[394];
        }
        else
        {
          unint64_t v575 = 0;
        }
        unint64_t v583 = &v575[8 * v571];
        unsigned int v584 = &v575[8 * v574];
        *(void *)unint64_t v583 = v567;
        unint64_t v577 = v583 + 8;
        while (v568 != v570)
        {
          uint64_t v585 = *((void *)v568 - 1);
          v568 -= 8;
          *((void *)v583 - 1) = v585;
          v583 -= 8;
        }
LABEL_835:
        v566[394] = v583;
        v566[395] = v577;
        v566[396] = v584;
        if (v570) {
          operator delete(v570);
        }
        goto LABEL_837;
      }
    }
    *(void *)int v568 = v567;
    unint64_t v577 = v568 + 8;
LABEL_837:
    v566[395] = v577;
LABEL_838:
    int v587 = 1 << *(_DWORD *)(v3 + 48);
    if (v587 == 2)
    {
      int v588 = *(void **)a1[1];
      uint64_t v589 = *(_WORD *)(a1[2] + 40) & 0x1FFF;
      unint64_t v590 = (char *)v588[398];
      unint64_t v598 = v588[399];
      if ((unint64_t)v590 >= v598)
      {
        unint64_t v592 = (char *)v588[397];
        uint64_t v600 = (v590 - v592) >> 3;
        if ((unint64_t)(v600 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v601 = v598 - (void)v592;
        unint64_t v602 = (uint64_t)(v598 - (void)v592) >> 2;
        if (v602 <= v600 + 1) {
          unint64_t v602 = v600 + 1;
        }
        if (v601 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v603 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v603 = v602;
        }
        if (v603)
        {
          unint64_t v604 = (char *)sub_5714((uint64_t)(v588 + 399), v603);
          unint64_t v590 = (char *)v588[398];
          unint64_t v592 = (char *)v588[397];
        }
        else
        {
          unint64_t v604 = 0;
        }
        unint64_t v605 = &v604[8 * v600];
        unsigned int v606 = &v604[8 * v603];
        *(void *)unint64_t v605 = v589;
        unint64_t v599 = v605 + 8;
        while (v590 != v592)
        {
          uint64_t v608 = *((void *)v590 - 1);
          v590 -= 8;
          *((void *)v605 - 1) = v608;
          v605 -= 8;
        }
        goto LABEL_867;
      }
    }
    else
    {
      if (v587 != 1) {
        goto LABEL_870;
      }
      int v588 = *(void **)a1[1];
      uint64_t v589 = *(_WORD *)(a1[2] + 40) & 0x1FFF;
      unint64_t v590 = (char *)v588[398];
      unint64_t v591 = v588[399];
      if ((unint64_t)v590 >= v591)
      {
        unint64_t v592 = (char *)v588[397];
        uint64_t v593 = (v590 - v592) >> 3;
        if ((unint64_t)(v593 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v594 = v591 - (void)v592;
        unint64_t v595 = (uint64_t)(v591 - (void)v592) >> 2;
        if (v595 <= v593 + 1) {
          unint64_t v595 = v593 + 1;
        }
        if (v594 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v596 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v596 = v595;
        }
        if (v596)
        {
          unint64_t v597 = (char *)sub_5714((uint64_t)(v588 + 399), v596);
          unint64_t v590 = (char *)v588[398];
          unint64_t v592 = (char *)v588[397];
        }
        else
        {
          unint64_t v597 = 0;
        }
        unint64_t v605 = &v597[8 * v593];
        unsigned int v606 = &v597[8 * v596];
        *(void *)unint64_t v605 = v589;
        unint64_t v599 = v605 + 8;
        while (v590 != v592)
        {
          uint64_t v607 = *((void *)v590 - 1);
          v590 -= 8;
          *((void *)v605 - 1) = v607;
          v605 -= 8;
        }
LABEL_867:
        v588[397] = v605;
        v588[398] = v599;
        v588[399] = v606;
        if (v592) {
          operator delete(v592);
        }
        goto LABEL_869;
      }
    }
    *(void *)unint64_t v590 = v589;
    unint64_t v599 = v590 + 8;
LABEL_869:
    v588[398] = v599;
LABEL_870:
    int v609 = 1 << *(_DWORD *)(v3 + 48);
    if (v609 == 2)
    {
      int v610 = *(void **)a1[1];
      unint64_t v611 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 24) >> 1) & 0x1FFF;
      unint64_t v612 = (unint64_t *)v610[401];
      unint64_t v620 = v610[402];
      if ((unint64_t)v612 >= v620)
      {
        int v614 = (unint64_t *)v610[400];
        uint64_t v622 = v612 - v614;
        if ((unint64_t)(v622 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v623 = v620 - (void)v614;
        unint64_t v624 = (uint64_t)(v620 - (void)v614) >> 2;
        if (v624 <= v622 + 1) {
          unint64_t v624 = v622 + 1;
        }
        if (v623 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v625 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v625 = v624;
        }
        if (v625)
        {
          unsigned int v626 = (char *)sub_5714((uint64_t)(v610 + 402), v625);
          unint64_t v612 = (unint64_t *)v610[401];
          int v614 = (unint64_t *)v610[400];
        }
        else
        {
          unsigned int v626 = 0;
        }
        unint64_t v627 = (unint64_t *)&v626[8 * v622];
        unint64_t v628 = &v626[8 * v625];
        *unint64_t v627 = v611;
        unint64_t v621 = v627 + 1;
        while (v612 != v614)
        {
          unint64_t v630 = *--v612;
          *--unint64_t v627 = v630;
        }
        goto LABEL_899;
      }
    }
    else
    {
      if (v609 != 1) {
        goto LABEL_902;
      }
      int v610 = *(void **)a1[1];
      unint64_t v611 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 24) >> 1) & 0x1FFF;
      unint64_t v612 = (unint64_t *)v610[401];
      unint64_t v613 = v610[402];
      if ((unint64_t)v612 >= v613)
      {
        int v614 = (unint64_t *)v610[400];
        uint64_t v615 = v612 - v614;
        if ((unint64_t)(v615 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v616 = v613 - (void)v614;
        unint64_t v617 = (uint64_t)(v613 - (void)v614) >> 2;
        if (v617 <= v615 + 1) {
          unint64_t v617 = v615 + 1;
        }
        if (v616 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v618 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v618 = v617;
        }
        if (v618)
        {
          unsigned int v619 = (char *)sub_5714((uint64_t)(v610 + 402), v618);
          unint64_t v612 = (unint64_t *)v610[401];
          int v614 = (unint64_t *)v610[400];
        }
        else
        {
          unsigned int v619 = 0;
        }
        unint64_t v627 = (unint64_t *)&v619[8 * v615];
        unint64_t v628 = &v619[8 * v618];
        *unint64_t v627 = v611;
        unint64_t v621 = v627 + 1;
        while (v612 != v614)
        {
          unint64_t v629 = *--v612;
          *--unint64_t v627 = v629;
        }
LABEL_899:
        v610[400] = v627;
        v610[401] = v621;
        v610[402] = v628;
        if (v614) {
          operator delete(v614);
        }
        goto LABEL_901;
      }
    }
    unint64_t *v612 = v611;
    unint64_t v621 = v612 + 1;
LABEL_901:
    v610[401] = v621;
LABEL_902:
    int v631 = 1 << *(_DWORD *)(v3 + 48);
    if (v631 == 2)
    {
      unint64_t v632 = *(void **)a1[1];
      uint64_t v633 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
      unint64_t v634 = (char *)v632[404];
      unint64_t v642 = v632[405];
      if ((unint64_t)v634 >= v642)
      {
        unint64_t v636 = (char *)v632[403];
        uint64_t v644 = (v634 - v636) >> 3;
        if ((unint64_t)(v644 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v645 = v642 - (void)v636;
        unint64_t v646 = (uint64_t)(v642 - (void)v636) >> 2;
        if (v646 <= v644 + 1) {
          unint64_t v646 = v644 + 1;
        }
        if (v645 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v647 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v647 = v646;
        }
        if (v647)
        {
          unsigned int v648 = (char *)sub_5714((uint64_t)(v632 + 405), v647);
          unint64_t v634 = (char *)v632[404];
          unint64_t v636 = (char *)v632[403];
        }
        else
        {
          unsigned int v648 = 0;
        }
        unint64_t v649 = &v648[8 * v644];
        unint64_t v650 = &v648[8 * v647];
        *(void *)unint64_t v649 = v633;
        int v643 = v649 + 8;
        while (v634 != v636)
        {
          uint64_t v652 = *((void *)v634 - 1);
          v634 -= 8;
          *((void *)v649 - 1) = v652;
          v649 -= 8;
        }
        goto LABEL_931;
      }
    }
    else
    {
      if (v631 != 1) {
        goto LABEL_934;
      }
      unint64_t v632 = *(void **)a1[1];
      uint64_t v633 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
      unint64_t v634 = (char *)v632[404];
      unint64_t v635 = v632[405];
      if ((unint64_t)v634 >= v635)
      {
        unint64_t v636 = (char *)v632[403];
        uint64_t v637 = (v634 - v636) >> 3;
        if ((unint64_t)(v637 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v638 = v635 - (void)v636;
        unint64_t v639 = (uint64_t)(v635 - (void)v636) >> 2;
        if (v639 <= v637 + 1) {
          unint64_t v639 = v637 + 1;
        }
        if (v638 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v640 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v640 = v639;
        }
        if (v640)
        {
          unint64_t v641 = (char *)sub_5714((uint64_t)(v632 + 405), v640);
          unint64_t v634 = (char *)v632[404];
          unint64_t v636 = (char *)v632[403];
        }
        else
        {
          unint64_t v641 = 0;
        }
        unint64_t v649 = &v641[8 * v637];
        unint64_t v650 = &v641[8 * v640];
        *(void *)unint64_t v649 = v633;
        int v643 = v649 + 8;
        while (v634 != v636)
        {
          uint64_t v651 = *((void *)v634 - 1);
          v634 -= 8;
          *((void *)v649 - 1) = v651;
          v649 -= 8;
        }
LABEL_931:
        v632[403] = v649;
        v632[404] = v643;
        v632[405] = v650;
        if (v636) {
          operator delete(v636);
        }
        goto LABEL_933;
      }
    }
    *(void *)unint64_t v634 = v633;
    int v643 = v634 + 8;
LABEL_933:
    v632[404] = v643;
LABEL_934:
    int v653 = 1 << *(_DWORD *)(v3 + 48);
    if (v653 == 2)
    {
      unint64_t v654 = *(void **)a1[1];
      uint64_t v655 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      int v656 = (char *)v654[407];
      unint64_t v664 = v654[408];
      if ((unint64_t)v656 >= v664)
      {
        unint64_t v658 = (char *)v654[406];
        uint64_t v666 = (v656 - v658) >> 3;
        if ((unint64_t)(v666 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v667 = v664 - (void)v658;
        unint64_t v668 = (uint64_t)(v664 - (void)v658) >> 2;
        if (v668 <= v666 + 1) {
          unint64_t v668 = v666 + 1;
        }
        if (v667 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v669 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v669 = v668;
        }
        if (v669)
        {
          unint64_t v670 = (char *)sub_5714((uint64_t)(v654 + 408), v669);
          int v656 = (char *)v654[407];
          unint64_t v658 = (char *)v654[406];
        }
        else
        {
          unint64_t v670 = 0;
        }
        unint64_t v671 = &v670[8 * v666];
        unint64_t v672 = &v670[8 * v669];
        *(void *)unint64_t v671 = v655;
        unsigned int v665 = v671 + 8;
        while (v656 != v658)
        {
          uint64_t v674 = *((void *)v656 - 1);
          v656 -= 8;
          *((void *)v671 - 1) = v674;
          v671 -= 8;
        }
        goto LABEL_963;
      }
    }
    else
    {
      if (v653 != 1) {
        goto LABEL_966;
      }
      unint64_t v654 = *(void **)a1[1];
      uint64_t v655 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      int v656 = (char *)v654[407];
      unint64_t v657 = v654[408];
      if ((unint64_t)v656 >= v657)
      {
        unint64_t v658 = (char *)v654[406];
        uint64_t v659 = (v656 - v658) >> 3;
        if ((unint64_t)(v659 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v660 = v657 - (void)v658;
        unint64_t v661 = (uint64_t)(v657 - (void)v658) >> 2;
        if (v661 <= v659 + 1) {
          unint64_t v661 = v659 + 1;
        }
        if (v660 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v662 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v662 = v661;
        }
        if (v662)
        {
          unint64_t v663 = (char *)sub_5714((uint64_t)(v654 + 408), v662);
          int v656 = (char *)v654[407];
          unint64_t v658 = (char *)v654[406];
        }
        else
        {
          unint64_t v663 = 0;
        }
        unint64_t v671 = &v663[8 * v659];
        unint64_t v672 = &v663[8 * v662];
        *(void *)unint64_t v671 = v655;
        unsigned int v665 = v671 + 8;
        while (v656 != v658)
        {
          uint64_t v673 = *((void *)v656 - 1);
          v656 -= 8;
          *((void *)v671 - 1) = v673;
          v671 -= 8;
        }
LABEL_963:
        v654[406] = v671;
        v654[407] = v665;
        v654[408] = v672;
        if (v658) {
          operator delete(v658);
        }
        goto LABEL_965;
      }
    }
    *(void *)int v656 = v655;
    unsigned int v665 = v656 + 8;
LABEL_965:
    v654[407] = v665;
LABEL_966:
    int v675 = 1 << *(_DWORD *)(v3 + 48);
    if (v675 == 2)
    {
      unsigned int v676 = *(void **)a1[1];
      uint64_t v677 = *(_WORD *)(a1[2] + 42) & 0x1FFF;
      unint64_t v678 = (char *)v676[410];
      unint64_t v686 = v676[411];
      if ((unint64_t)v678 >= v686)
      {
        unsigned int v680 = (char *)v676[409];
        uint64_t v688 = (v678 - v680) >> 3;
        if ((unint64_t)(v688 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v689 = v686 - (void)v680;
        unint64_t v690 = (uint64_t)(v686 - (void)v680) >> 2;
        if (v690 <= v688 + 1) {
          unint64_t v690 = v688 + 1;
        }
        if (v689 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v691 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v691 = v690;
        }
        if (v691)
        {
          unint64_t v692 = (char *)sub_5714((uint64_t)(v676 + 411), v691);
          unint64_t v678 = (char *)v676[410];
          unsigned int v680 = (char *)v676[409];
        }
        else
        {
          unint64_t v692 = 0;
        }
        int v693 = &v692[8 * v688];
        unint64_t v694 = &v692[8 * v691];
        *(void *)int v693 = v677;
        unint64_t v687 = v693 + 8;
        while (v678 != v680)
        {
          uint64_t v696 = *((void *)v678 - 1);
          v678 -= 8;
          *((void *)v693 - 1) = v696;
          v693 -= 8;
        }
        goto LABEL_995;
      }
    }
    else
    {
      if (v675 != 1) {
        goto LABEL_998;
      }
      unsigned int v676 = *(void **)a1[1];
      uint64_t v677 = *(_WORD *)(a1[2] + 42) & 0x1FFF;
      unint64_t v678 = (char *)v676[410];
      unint64_t v679 = v676[411];
      if ((unint64_t)v678 >= v679)
      {
        unsigned int v680 = (char *)v676[409];
        uint64_t v681 = (v678 - v680) >> 3;
        if ((unint64_t)(v681 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v682 = v679 - (void)v680;
        unint64_t v683 = (uint64_t)(v679 - (void)v680) >> 2;
        if (v683 <= v681 + 1) {
          unint64_t v683 = v681 + 1;
        }
        if (v682 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v684 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v684 = v683;
        }
        if (v684)
        {
          int v685 = (char *)sub_5714((uint64_t)(v676 + 411), v684);
          unint64_t v678 = (char *)v676[410];
          unsigned int v680 = (char *)v676[409];
        }
        else
        {
          int v685 = 0;
        }
        int v693 = &v685[8 * v681];
        unint64_t v694 = &v685[8 * v684];
        *(void *)int v693 = v677;
        unint64_t v687 = v693 + 8;
        while (v678 != v680)
        {
          uint64_t v695 = *((void *)v678 - 1);
          v678 -= 8;
          *((void *)v693 - 1) = v695;
          v693 -= 8;
        }
LABEL_995:
        v676[409] = v693;
        v676[410] = v687;
        v676[411] = v694;
        if (v680) {
          operator delete(v680);
        }
        goto LABEL_997;
      }
    }
    *(void *)unint64_t v678 = v677;
    unint64_t v687 = v678 + 8;
LABEL_997:
    v676[410] = v687;
LABEL_998:
    int v697 = 1 << *(_DWORD *)(v3 + 48);
    if (v697 == 2)
    {
      uint64_t v709 = a1[2];
      unint64_t v699 = *(void **)a1[1];
      uint64_t v700 = *(_WORD *)(v709 + 26) & 0x1FFF;
      unsigned int v701 = (char *)v699[413];
      unint64_t v710 = v699[414];
      if ((unint64_t)v701 >= v710)
      {
        unint64_t v703 = (char *)v699[412];
        uint64_t v712 = (v701 - v703) >> 3;
        if (!((unint64_t)(v712 + 1) >> 61))
        {
          unint64_t v713 = v710 - (void)v703;
          unint64_t v714 = (uint64_t)(v710 - (void)v703) >> 2;
          if (v714 <= v712 + 1) {
            unint64_t v714 = v712 + 1;
          }
          if (v713 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v715 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v715 = v714;
          }
          if (v715)
          {
            unint64_t v716 = (char *)sub_5714((uint64_t)(v699 + 414), v715);
            unsigned int v701 = (char *)v699[413];
            unint64_t v703 = (char *)v699[412];
          }
          else
          {
            unint64_t v716 = 0;
          }
          unsigned int v717 = &v716[8 * v712];
          unint64_t v718 = &v716[8 * v715];
          *(void *)unsigned int v717 = v700;
          unint64_t v711 = v717 + 8;
          while (v701 != v703)
          {
            uint64_t v720 = *((void *)v701 - 1);
            v701 -= 8;
            *((void *)v717 - 1) = v720;
            v717 -= 8;
          }
          goto LABEL_1027;
        }
LABEL_1032:
        sub_566C();
      }
    }
    else
    {
      if (v697 != 1)
      {
LABEL_1030:
        *a2 = 1;
        return;
      }
      uint64_t v698 = a1[2];
      unint64_t v699 = *(void **)a1[1];
      uint64_t v700 = *(_WORD *)(v698 + 26) & 0x1FFF;
      unsigned int v701 = (char *)v699[413];
      unint64_t v702 = v699[414];
      if ((unint64_t)v701 >= v702)
      {
        unint64_t v703 = (char *)v699[412];
        uint64_t v704 = (v701 - v703) >> 3;
        if (!((unint64_t)(v704 + 1) >> 61))
        {
          unint64_t v705 = v702 - (void)v703;
          unint64_t v706 = (uint64_t)(v702 - (void)v703) >> 2;
          if (v706 <= v704 + 1) {
            unint64_t v706 = v704 + 1;
          }
          if (v705 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v707 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v707 = v706;
          }
          if (v707)
          {
            unint64_t v708 = (char *)sub_5714((uint64_t)(v699 + 414), v707);
            unsigned int v701 = (char *)v699[413];
            unint64_t v703 = (char *)v699[412];
          }
          else
          {
            unint64_t v708 = 0;
          }
          unsigned int v717 = &v708[8 * v704];
          unint64_t v718 = &v708[8 * v707];
          *(void *)unsigned int v717 = v700;
          unint64_t v711 = v717 + 8;
          while (v701 != v703)
          {
            uint64_t v719 = *((void *)v701 - 1);
            v701 -= 8;
            *((void *)v717 - 1) = v719;
            v717 -= 8;
          }
LABEL_1027:
          v699[412] = v717;
          v699[413] = v711;
          v699[414] = v718;
          if (v703) {
            operator delete(v703);
          }
          goto LABEL_1029;
        }
        goto LABEL_1032;
      }
    }
    *(void *)unsigned int v701 = v700;
    unint64_t v711 = v701 + 8;
LABEL_1029:
    v699[413] = v711;
    goto LABEL_1030;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = (_WORD *)a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[320] - 8) += v17[41] & 0x1FFF;
    *(void *)(v19[323] - 8) += v17[33] & 0x1FFF;
    *(void *)(v19[326] - 8) += v17[25] & 0x1FFF;
    *(void *)(v19[329] - 8) += v17[17] & 0x1FFF;
    *(void *)(v19[332] - 8) += v17[42] & 0x1FFF;
    *(void *)(v19[335] - 8) += v17[34] & 0x1FFF;
    *(void *)(v19[338] - 8) += v17[26] & 0x1FFF;
    *(void *)(v19[341] - 8) += v17[18] & 0x1FFF;
    *(void *)(v19[344] - 8) += v17[43] & 0x1FFF;
    *(void *)(v19[347] - 8) += v17[35] & 0x1FFF;
    uint64_t v20 = (_WORD *)a1[2];
    uint64_t v21 = *(void **)a1[1];
    *(void *)(v21[350] - 8) += v20[27] & 0x1FFF;
    *(void *)(v21[353] - 8) += v20[19] & 0x1FFF;
    *(void *)(v21[356] - 8) += v20[38] & 0x1FFF;
    *(void *)(v21[359] - 8) += v20[30] & 0x1FFF;
    *(void *)(v21[362] - 8) += v20[22] & 0x1FFF;
    *(void *)(v21[365] - 8) += v20[14] & 0x1FFF;
    *(void *)(v21[368] - 8) += v20[39] & 0x1FFF;
    *(void *)(v21[371] - 8) += v20[31] & 0x1FFF;
    *(void *)(v21[374] - 8) += v20[23] & 0x1FFF;
    *(void *)(v21[377] - 8) += v20[15] & 0x1FFF;
    unint64_t v22 = (unsigned __int16 *)a1[2];
    unint64_t v23 = *(void **)a1[1];
    *(void *)(v23[380] - 8) += v22[40] & 0x1FFF;
    *(void *)(v23[383] - 8) += v22[32] & 0x1FFF;
    *(void *)(v23[386] - 8) += v22[24] & 0x1FFF;
    *(void *)(v23[389] - 8) += v22[16] & 0x1FFF;
    *(void *)(v23[392] - 8) += v22[36] & 0x1FFF;
    *(void *)(v23[395] - 8) += v22[28] & 0x1FFF;
    *(void *)(v23[398] - 8) += v22[20] & 0x1FFF;
    *(void *)(v23[401] - 8) += ((unint64_t)v22[12] >> 1) & 0x1FFF;
    *(void *)(v23[404] - 8) += v22[37] & 0x1FFF;
    *(void *)(v23[407] - 8) += v22[29] & 0x1FFF;
    uint64_t v24 = a1[2];
    unint64_t v25 = (void *)*v18;
    *(void *)(v25[410] - 8) += *(_WORD *)(v24 + 42) & 0x1FFF;
    *(void *)(v25[413] - 8) += *(_WORD *)(v24 + 26) & 0x1FFF;
  }
}

void sub_161134(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v8 = (char *)v6[299];
      unint64_t v19 = v6[300];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (char *)v6[298];
        uint64_t v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 300), v24);
          uint64_t v8 = (char *)v6[299];
          uint64_t v10 = (char *)v6[298];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v8 = (char *)v6[299];
      unint64_t v9 = v6[300];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[298];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 300), v14);
          uint64_t v8 = (char *)v6[299];
          uint64_t v10 = (char *)v6[298];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v26 = &v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[298] = v26;
        v6[299] = v20;
        v6[300] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint64_t v20 = v8 + 8;
LABEL_37:
    v6[299] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      unint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      int v33 = (char *)v31[302];
      unint64_t v41 = v31[303];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (char *)v31[301];
        uint64_t v43 = (v33 - v35) >> 3;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 303), v46);
          int v33 = (char *)v31[302];
          uint64_t v35 = (char *)v31[301];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = &v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *(void *)unint64_t v48 = v32;
        unint64_t v42 = v48 + 8;
        while (v33 != v35)
        {
          uint64_t v51 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v48 - 1) = v51;
          v48 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      unint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      int v33 = (char *)v31[302];
      unint64_t v34 = v31[303];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (char *)v31[301];
        uint64_t v36 = (v33 - v35) >> 3;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 303), v39);
          int v33 = (char *)v31[302];
          uint64_t v35 = (char *)v31[301];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = &v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *(void *)unint64_t v48 = v32;
        unint64_t v42 = v48 + 8;
        while (v33 != v35)
        {
          uint64_t v50 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v48 - 1) = v50;
          v48 -= 8;
        }
LABEL_67:
        v31[301] = v48;
        v31[302] = v42;
        v31[303] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    *(void *)int v33 = v32;
    unint64_t v42 = v33 + 8;
LABEL_69:
    v31[302] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      int v55 = (char *)v53[305];
      unint64_t v63 = v53[306];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (char *)v53[304];
        uint64_t v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 306), v68);
          int v55 = (char *)v53[305];
          uint64_t v57 = (char *)v53[304];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = &v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v73 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      int v55 = (char *)v53[305];
      unint64_t v56 = v53[306];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (char *)v53[304];
        uint64_t v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 306), v61);
          int v55 = (char *)v53[305];
          uint64_t v57 = (char *)v53[304];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = &v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v72 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[304] = v70;
        v53[305] = v64;
        v53[306] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *(void *)int v55 = v54;
    unint64_t v64 = v55 + 8;
LABEL_101:
    v53[305] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = (*(void *)(a1[2] + 32) >> 33) & 0x7FFFLL;
      uint64_t v77 = (uint64_t *)v75[308];
      unint64_t v85 = v75[309];
      if ((unint64_t)v77 >= v85)
      {
        uint64_t v79 = (uint64_t *)v75[307];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 309), v90);
          uint64_t v77 = (uint64_t *)v75[308];
          uint64_t v79 = (uint64_t *)v75[307];
        }
        else
        {
          unint64_t v91 = 0;
        }
        unint64_t v92 = (uint64_t *)&v91[8 * v87];
        unint64_t v93 = &v91[8 * v90];
        *unint64_t v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v95 = *--v77;
          *--unint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = (*(void *)(a1[2] + 32) >> 33) & 0x7FFFLL;
      uint64_t v77 = (uint64_t *)v75[308];
      unint64_t v78 = v75[309];
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v79 = (uint64_t *)v75[307];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 309), v83);
          uint64_t v77 = (uint64_t *)v75[308];
          uint64_t v79 = (uint64_t *)v75[307];
        }
        else
        {
          unint64_t v84 = 0;
        }
        unint64_t v92 = (uint64_t *)&v84[8 * v80];
        unint64_t v93 = &v84[8 * v83];
        *unint64_t v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v94 = *--v77;
          *--unint64_t v92 = v94;
        }
LABEL_131:
        v75[307] = v92;
        v75[308] = v86;
        v75[309] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v77 = v76;
    uint64_t v86 = v77 + 1;
LABEL_133:
    v75[308] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      unint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(void *)(a1[2] + 32) & 0x1FFFFFFFFLL;
      uint64_t v99 = (uint64_t *)v97[311];
      unint64_t v107 = v97[312];
      if ((unint64_t)v99 >= v107)
      {
        uint64_t v101 = (uint64_t *)v97[310];
        uint64_t v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v110 = v107 - (void)v101;
        unint64_t v111 = (uint64_t)(v107 - (void)v101) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v97 + 312), v112);
          uint64_t v99 = (uint64_t *)v97[311];
          uint64_t v101 = (uint64_t *)v97[310];
        }
        else
        {
          unint64_t v113 = 0;
        }
        unint64_t v114 = (uint64_t *)&v113[8 * v109];
        uint64_t v115 = &v113[8 * v112];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v117 = *--v99;
          *--unint64_t v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      unint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(void *)(a1[2] + 32) & 0x1FFFFFFFFLL;
      uint64_t v99 = (uint64_t *)v97[311];
      unint64_t v100 = v97[312];
      if ((unint64_t)v99 >= v100)
      {
        uint64_t v101 = (uint64_t *)v97[310];
        uint64_t v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v103 = v100 - (void)v101;
        unint64_t v104 = (uint64_t)(v100 - (void)v101) >> 2;
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        if (v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v104;
        }
        if (v105)
        {
          uint64_t v106 = (char *)sub_5714((uint64_t)(v97 + 312), v105);
          uint64_t v99 = (uint64_t *)v97[311];
          uint64_t v101 = (uint64_t *)v97[310];
        }
        else
        {
          uint64_t v106 = 0;
        }
        unint64_t v114 = (uint64_t *)&v106[8 * v102];
        uint64_t v115 = &v106[8 * v105];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v116 = *--v99;
          *--unint64_t v114 = v116;
        }
LABEL_163:
        v97[310] = v114;
        v97[311] = v108;
        v97[312] = v115;
        if (v101) {
          operator delete(v101);
        }
        goto LABEL_165;
      }
    }
    *uint64_t v99 = v98;
    unint64_t v108 = v99 + 1;
LABEL_165:
    v97[311] = v108;
LABEL_166:
    int v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      unint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      int v121 = (char *)v119[314];
      unint64_t v129 = v119[315];
      if ((unint64_t)v121 >= v129)
      {
        uint64_t v123 = (char *)v119[313];
        uint64_t v131 = (v121 - v123) >> 3;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v132 = v129 - (void)v123;
        unint64_t v133 = (uint64_t)(v129 - (void)v123) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          unint64_t v135 = (char *)sub_5714((uint64_t)(v119 + 315), v134);
          int v121 = (char *)v119[314];
          uint64_t v123 = (char *)v119[313];
        }
        else
        {
          unint64_t v135 = 0;
        }
        unint64_t v136 = &v135[8 * v131];
        unint64_t v137 = &v135[8 * v134];
        *(void *)unint64_t v136 = v120;
        unint64_t v130 = v136 + 8;
        while (v121 != v123)
        {
          uint64_t v139 = *((void *)v121 - 1);
          v121 -= 8;
          *((void *)v136 - 1) = v139;
          v136 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1) {
        goto LABEL_198;
      }
      unint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      int v121 = (char *)v119[314];
      unint64_t v122 = v119[315];
      if ((unint64_t)v121 >= v122)
      {
        uint64_t v123 = (char *)v119[313];
        uint64_t v124 = (v121 - v123) >> 3;
        if ((unint64_t)(v124 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v125 = v122 - (void)v123;
        unint64_t v126 = (uint64_t)(v122 - (void)v123) >> 2;
        if (v126 <= v124 + 1) {
          unint64_t v126 = v124 + 1;
        }
        if (v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v126;
        }
        if (v127)
        {
          unint64_t v128 = (char *)sub_5714((uint64_t)(v119 + 315), v127);
          int v121 = (char *)v119[314];
          uint64_t v123 = (char *)v119[313];
        }
        else
        {
          unint64_t v128 = 0;
        }
        unint64_t v136 = &v128[8 * v124];
        unint64_t v137 = &v128[8 * v127];
        *(void *)unint64_t v136 = v120;
        unint64_t v130 = v136 + 8;
        while (v121 != v123)
        {
          uint64_t v138 = *((void *)v121 - 1);
          v121 -= 8;
          *((void *)v136 - 1) = v138;
          v136 -= 8;
        }
LABEL_195:
        v119[313] = v136;
        v119[314] = v130;
        v119[315] = v137;
        if (v123) {
          operator delete(v123);
        }
        goto LABEL_197;
      }
    }
    *(void *)int v121 = v120;
    unint64_t v130 = v121 + 8;
LABEL_197:
    v119[314] = v130;
LABEL_198:
    int v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      uint64_t v153 = a1[1];
      uint64_t v154 = a1[2];
      int v143 = *(void **)v153;
      uint64_t v144 = *(unsigned int *)(v154 + 24);
      uint64_t v145 = *(char **)(*(void *)v153 + 2536);
      unint64_t v155 = *(void *)(*(void *)v153 + 2544);
      if ((unint64_t)v145 >= v155)
      {
        int v147 = (char *)v143[316];
        uint64_t v157 = (v145 - v147) >> 3;
        if (!((unint64_t)(v157 + 1) >> 61))
        {
          unint64_t v158 = v155 - (void)v147;
          unint64_t v159 = (uint64_t)(v155 - (void)v147) >> 2;
          if (v159 <= v157 + 1) {
            unint64_t v159 = v157 + 1;
          }
          if (v158 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v160 = v159;
          }
          if (v160)
          {
            unint64_t v161 = (char *)sub_5714((uint64_t)(v143 + 318), v160);
            uint64_t v145 = (char *)v143[317];
            int v147 = (char *)v143[316];
          }
          else
          {
            unint64_t v161 = 0;
          }
          unint64_t v162 = &v161[8 * v157];
          unint64_t v163 = &v161[8 * v160];
          *(void *)unint64_t v162 = v144;
          unint64_t v156 = v162 + 8;
          while (v145 != v147)
          {
            uint64_t v165 = *((void *)v145 - 1);
            v145 -= 8;
            *((void *)v162 - 1) = v165;
            v162 -= 8;
          }
          goto LABEL_227;
        }
LABEL_232:
        sub_566C();
      }
    }
    else
    {
      if (v140 != 1)
      {
LABEL_230:
        *a2 = 1;
        return;
      }
      uint64_t v141 = a1[1];
      uint64_t v142 = a1[2];
      int v143 = *(void **)v141;
      uint64_t v144 = *(unsigned int *)(v142 + 24);
      uint64_t v145 = *(char **)(*(void *)v141 + 2536);
      unint64_t v146 = *(void *)(*(void *)v141 + 2544);
      if ((unint64_t)v145 >= v146)
      {
        int v147 = (char *)v143[316];
        uint64_t v148 = (v145 - v147) >> 3;
        if (!((unint64_t)(v148 + 1) >> 61))
        {
          unint64_t v149 = v146 - (void)v147;
          unint64_t v150 = (uint64_t)(v146 - (void)v147) >> 2;
          if (v150 <= v148 + 1) {
            unint64_t v150 = v148 + 1;
          }
          if (v149 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v151 = v150;
          }
          if (v151)
          {
            unint64_t v152 = (char *)sub_5714((uint64_t)(v143 + 318), v151);
            uint64_t v145 = (char *)v143[317];
            int v147 = (char *)v143[316];
          }
          else
          {
            unint64_t v152 = 0;
          }
          unint64_t v162 = &v152[8 * v148];
          unint64_t v163 = &v152[8 * v151];
          *(void *)unint64_t v162 = v144;
          unint64_t v156 = v162 + 8;
          while (v145 != v147)
          {
            uint64_t v164 = *((void *)v145 - 1);
            v145 -= 8;
            *((void *)v162 - 1) = v164;
            v162 -= 8;
          }
LABEL_227:
          v143[316] = v162;
          v143[317] = v156;
          v143[318] = v163;
          if (v147) {
            operator delete(v147);
          }
          goto LABEL_229;
        }
        goto LABEL_232;
      }
    }
    *(void *)uint64_t v145 = v144;
    unint64_t v156 = v145 + 8;
LABEL_229:
    v143[317] = v156;
    goto LABEL_230;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[299] - 8) += *(_WORD *)(v17 + 42) & 0x7FFF;
    *(void *)(v18[302] - 8) += *(_WORD *)(v17 + 40) & 0x7FFF;
    *(void *)(v18[305] - 8) += *(_WORD *)(v17 + 38) & 0x7FFF;
    *(void *)(v18[308] - 8) += (*(void *)(v17 + 32) >> 33) & 0x7FFFLL;
    *(void *)(v18[311] - 8) += *(void *)(v17 + 32) & 0x1FFFFFFFFLL;
    *(void *)(v18[314] - 8) += *(_WORD *)(v17 + 44) & 0x7FFF;
    *(void *)(v18[317] - 8) += *(unsigned int *)(v17 + 24);
  }
}

void sub_161CD0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v8 = (char *)v6[293];
      unint64_t v19 = v6[294];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (char *)v6[292];
        uint64_t v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_72;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 294), v24);
          uint64_t v8 = (char *)v6[293];
          uint64_t v10 = (char *)v6[292];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v8 = (char *)v6[293];
      unint64_t v9 = v6[294];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[292];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_72;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 294), v14);
          uint64_t v8 = (char *)v6[293];
          uint64_t v10 = (char *)v6[292];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v26 = &v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[292] = v26;
        v6[293] = v20;
        v6[294] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint64_t v20 = v8 + 8;
LABEL_37:
    v6[293] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v42 = a1[2];
      uint64_t v32 = *(void **)a1[1];
      uint64_t v33 = *(_WORD *)(v42 + 24) & 0x7FFF;
      unint64_t v34 = (char *)v32[296];
      unint64_t v43 = v32[297];
      if ((unint64_t)v34 >= v43)
      {
        uint64_t v36 = (char *)v32[295];
        uint64_t v45 = (v34 - v36) >> 3;
        if (!((unint64_t)(v45 + 1) >> 61))
        {
          unint64_t v46 = v43 - (void)v36;
          unint64_t v47 = (uint64_t)(v43 - (void)v36) >> 2;
          if (v47 <= v45 + 1) {
            unint64_t v47 = v45 + 1;
          }
          if (v46 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48)
          {
            unint64_t v49 = (char *)sub_5714((uint64_t)(v32 + 297), v48);
            unint64_t v34 = (char *)v32[296];
            uint64_t v36 = (char *)v32[295];
          }
          else
          {
            unint64_t v49 = 0;
          }
          uint64_t v50 = &v49[8 * v45];
          uint64_t v51 = &v49[8 * v48];
          *(void *)uint64_t v50 = v33;
          unint64_t v44 = v50 + 8;
          while (v34 != v36)
          {
            uint64_t v53 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v50 - 1) = v53;
            v50 -= 8;
          }
          goto LABEL_67;
        }
LABEL_72:
        sub_566C();
      }
    }
    else
    {
      if (v30 != 1)
      {
LABEL_70:
        *a2 = 1;
        return;
      }
      uint64_t v31 = a1[2];
      uint64_t v32 = *(void **)a1[1];
      uint64_t v33 = *(_WORD *)(v31 + 24) & 0x7FFF;
      unint64_t v34 = (char *)v32[296];
      unint64_t v35 = v32[297];
      if ((unint64_t)v34 >= v35)
      {
        uint64_t v36 = (char *)v32[295];
        uint64_t v37 = (v34 - v36) >> 3;
        if (!((unint64_t)(v37 + 1) >> 61))
        {
          unint64_t v38 = v35 - (void)v36;
          unint64_t v39 = (uint64_t)(v35 - (void)v36) >> 2;
          if (v39 <= v37 + 1) {
            unint64_t v39 = v37 + 1;
          }
          if (v38 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40)
          {
            unint64_t v41 = (char *)sub_5714((uint64_t)(v32 + 297), v40);
            unint64_t v34 = (char *)v32[296];
            uint64_t v36 = (char *)v32[295];
          }
          else
          {
            unint64_t v41 = 0;
          }
          uint64_t v50 = &v41[8 * v37];
          uint64_t v51 = &v41[8 * v40];
          *(void *)uint64_t v50 = v33;
          unint64_t v44 = v50 + 8;
          while (v34 != v36)
          {
            uint64_t v52 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v50 - 1) = v52;
            v50 -= 8;
          }
LABEL_67:
          v32[295] = v50;
          v32[296] = v44;
          v32[297] = v51;
          if (v36) {
            operator delete(v36);
          }
          goto LABEL_69;
        }
        goto LABEL_72;
      }
    }
    *(void *)unint64_t v34 = v33;
    unint64_t v44 = v34 + 8;
LABEL_69:
    v32[296] = v44;
    goto LABEL_70;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void *)a1[1];
    *(void *)(*(void *)(v18 + 2344) - 8) += *(_WORD *)(v17 + 26) & 0x7FFF;
    *(void *)(*(void *)(v18 + 2368) - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
  }
}

void sub_162080(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      uint64_t v8 = (char *)v6[500];
      unint64_t v19 = v6[501];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (char *)v6[499];
        uint64_t v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 501), v24);
          uint64_t v8 = (char *)v6[500];
          uint64_t v10 = (char *)v6[499];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      uint64_t v8 = (char *)v6[500];
      unint64_t v9 = v6[501];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[499];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 501), v14);
          uint64_t v8 = (char *)v6[500];
          uint64_t v10 = (char *)v6[499];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v26 = &v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[499] = v26;
        v6[500] = v20;
        v6[501] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint64_t v20 = v8 + 8;
LABEL_37:
    v6[500] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      uint64_t v33 = (uint64_t *)v31[503];
      unint64_t v41 = v31[504];
      if ((unint64_t)v33 >= v41)
      {
        unint64_t v35 = (uint64_t *)v31[502];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 504), v46);
          uint64_t v33 = (uint64_t *)v31[503];
          unint64_t v35 = (uint64_t *)v31[502];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      uint64_t v33 = (uint64_t *)v31[503];
      unint64_t v34 = v31[504];
      if ((unint64_t)v33 >= v34)
      {
        unint64_t v35 = (uint64_t *)v31[502];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 504), v39);
          uint64_t v33 = (uint64_t *)v31[503];
          unint64_t v35 = (uint64_t *)v31[502];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[502] = v48;
        v31[503] = v42;
        v31[504] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    uint64_t v42 = v33 + 1;
LABEL_69:
    v31[503] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      int v55 = (char *)v53[506];
      unint64_t v63 = v53[507];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (char *)v53[505];
        uint64_t v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 507), v68);
          int v55 = (char *)v53[506];
          uint64_t v57 = (char *)v53[505];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = &v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v73 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      int v55 = (char *)v53[506];
      unint64_t v56 = v53[507];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (char *)v53[505];
        uint64_t v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 507), v61);
          int v55 = (char *)v53[506];
          uint64_t v57 = (char *)v53[505];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = &v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v72 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[505] = v70;
        v53[506] = v64;
        v53[507] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *(void *)int v55 = v54;
    unint64_t v64 = v55 + 8;
LABEL_101:
    v53[506] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      uint64_t v77 = (uint64_t *)v75[509];
      unint64_t v85 = v75[510];
      if ((unint64_t)v77 >= v85)
      {
        uint64_t v79 = (uint64_t *)v75[508];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 510), v90);
          uint64_t v77 = (uint64_t *)v75[509];
          uint64_t v79 = (uint64_t *)v75[508];
        }
        else
        {
          unint64_t v91 = 0;
        }
        unint64_t v92 = (uint64_t *)&v91[8 * v87];
        unint64_t v93 = &v91[8 * v90];
        *unint64_t v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v95 = *--v77;
          *--unint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      uint64_t v77 = (uint64_t *)v75[509];
      unint64_t v78 = v75[510];
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v79 = (uint64_t *)v75[508];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 510), v83);
          uint64_t v77 = (uint64_t *)v75[509];
          uint64_t v79 = (uint64_t *)v75[508];
        }
        else
        {
          unint64_t v84 = 0;
        }
        unint64_t v92 = (uint64_t *)&v84[8 * v80];
        unint64_t v93 = &v84[8 * v83];
        *unint64_t v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v94 = *--v77;
          *--unint64_t v92 = v94;
        }
LABEL_131:
        v75[508] = v92;
        v75[509] = v86;
        v75[510] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v77 = v76;
    uint64_t v86 = v77 + 1;
LABEL_133:
    v75[509] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      unint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      uint64_t v99 = (uint64_t *)v97[512];
      unint64_t v107 = v97[513];
      if ((unint64_t)v99 >= v107)
      {
        uint64_t v101 = (uint64_t *)v97[511];
        uint64_t v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v110 = v107 - (void)v101;
        unint64_t v111 = (uint64_t)(v107 - (void)v101) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v97 + 513), v112);
          uint64_t v99 = (uint64_t *)v97[512];
          uint64_t v101 = (uint64_t *)v97[511];
        }
        else
        {
          unint64_t v113 = 0;
        }
        unint64_t v114 = (uint64_t *)&v113[8 * v109];
        uint64_t v115 = &v113[8 * v112];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v117 = *--v99;
          *--unint64_t v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      unint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      uint64_t v99 = (uint64_t *)v97[512];
      unint64_t v100 = v97[513];
      if ((unint64_t)v99 >= v100)
      {
        uint64_t v101 = (uint64_t *)v97[511];
        uint64_t v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v103 = v100 - (void)v101;
        unint64_t v104 = (uint64_t)(v100 - (void)v101) >> 2;
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        if (v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v104;
        }
        if (v105)
        {
          uint64_t v106 = (char *)sub_5714((uint64_t)(v97 + 513), v105);
          uint64_t v99 = (uint64_t *)v97[512];
          uint64_t v101 = (uint64_t *)v97[511];
        }
        else
        {
          uint64_t v106 = 0;
        }
        unint64_t v114 = (uint64_t *)&v106[8 * v102];
        uint64_t v115 = &v106[8 * v105];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v116 = *--v99;
          *--unint64_t v114 = v116;
        }
LABEL_163:
        v97[511] = v114;
        v97[512] = v108;
        v97[513] = v115;
        if (v101) {
          operator delete(v101);
        }
        goto LABEL_165;
      }
    }
    *uint64_t v99 = v98;
    unint64_t v108 = v99 + 1;
LABEL_165:
    v97[512] = v108;
LABEL_166:
    int v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      uint64_t v130 = a1[1];
      uint64_t v120 = *(void **)v130;
      uint64_t v121 = *(unsigned __int16 *)(a1[2] + 46);
      unint64_t v122 = *(char **)(*(void *)v130 + 4120);
      unint64_t v131 = *(void *)(*(void *)v130 + 4128);
      if ((unint64_t)v122 >= v131)
      {
        uint64_t v124 = (char *)v120[514];
        uint64_t v133 = (v122 - v124) >> 3;
        if ((unint64_t)(v133 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v134 = v131 - (void)v124;
        unint64_t v135 = (uint64_t)(v131 - (void)v124) >> 2;
        if (v135 <= v133 + 1) {
          unint64_t v135 = v133 + 1;
        }
        if (v134 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v136 = v135;
        }
        if (v136)
        {
          unint64_t v137 = (char *)sub_5714((uint64_t)(v120 + 516), v136);
          unint64_t v122 = (char *)v120[515];
          uint64_t v124 = (char *)v120[514];
        }
        else
        {
          unint64_t v137 = 0;
        }
        uint64_t v138 = &v137[8 * v133];
        uint64_t v139 = &v137[8 * v136];
        *(void *)uint64_t v138 = v121;
        unint64_t v132 = v138 + 8;
        while (v122 != v124)
        {
          uint64_t v141 = *((void *)v122 - 1);
          v122 -= 8;
          *((void *)v138 - 1) = v141;
          v138 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1) {
        goto LABEL_198;
      }
      uint64_t v119 = a1[1];
      uint64_t v120 = *(void **)v119;
      uint64_t v121 = *(unsigned __int16 *)(a1[2] + 46);
      unint64_t v122 = *(char **)(*(void *)v119 + 4120);
      unint64_t v123 = *(void *)(*(void *)v119 + 4128);
      if ((unint64_t)v122 >= v123)
      {
        uint64_t v124 = (char *)v120[514];
        uint64_t v125 = (v122 - v124) >> 3;
        if ((unint64_t)(v125 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v126 = v123 - (void)v124;
        unint64_t v127 = (uint64_t)(v123 - (void)v124) >> 2;
        if (v127 <= v125 + 1) {
          unint64_t v127 = v125 + 1;
        }
        if (v126 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v128 = v127;
        }
        if (v128)
        {
          unint64_t v129 = (char *)sub_5714((uint64_t)(v120 + 516), v128);
          unint64_t v122 = (char *)v120[515];
          uint64_t v124 = (char *)v120[514];
        }
        else
        {
          unint64_t v129 = 0;
        }
        uint64_t v138 = &v129[8 * v125];
        uint64_t v139 = &v129[8 * v128];
        *(void *)uint64_t v138 = v121;
        unint64_t v132 = v138 + 8;
        while (v122 != v124)
        {
          uint64_t v140 = *((void *)v122 - 1);
          v122 -= 8;
          *((void *)v138 - 1) = v140;
          v138 -= 8;
        }
LABEL_195:
        v120[514] = v138;
        v120[515] = v132;
        v120[516] = v139;
        if (v124) {
          operator delete(v124);
        }
        goto LABEL_197;
      }
    }
    *(void *)unint64_t v122 = v121;
    unint64_t v132 = v122 + 8;
LABEL_197:
    v120[515] = v132;
LABEL_198:
    int v142 = 1 << *(_DWORD *)(v3 + 48);
    if (v142 == 2)
    {
      uint64_t v154 = a1[1];
      uint64_t v144 = *(void **)v154;
      uint64_t v145 = *(unsigned __int16 *)(a1[2] + 44);
      unint64_t v146 = *(char **)(*(void *)v154 + 4144);
      unint64_t v155 = *(void *)(*(void *)v154 + 4152);
      if ((unint64_t)v146 >= v155)
      {
        uint64_t v148 = (char *)v144[517];
        uint64_t v157 = (v146 - v148) >> 3;
        if ((unint64_t)(v157 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v158 = v155 - (void)v148;
        unint64_t v159 = (uint64_t)(v155 - (void)v148) >> 2;
        if (v159 <= v157 + 1) {
          unint64_t v159 = v157 + 1;
        }
        if (v158 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v160 = v159;
        }
        if (v160)
        {
          unint64_t v161 = (char *)sub_5714((uint64_t)(v144 + 519), v160);
          unint64_t v146 = (char *)v144[518];
          uint64_t v148 = (char *)v144[517];
        }
        else
        {
          unint64_t v161 = 0;
        }
        unint64_t v162 = &v161[8 * v157];
        unint64_t v163 = &v161[8 * v160];
        *(void *)unint64_t v162 = v145;
        unint64_t v156 = v162 + 8;
        while (v146 != v148)
        {
          uint64_t v165 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v162 - 1) = v165;
          v162 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v142 != 1) {
        goto LABEL_230;
      }
      uint64_t v143 = a1[1];
      uint64_t v144 = *(void **)v143;
      uint64_t v145 = *(unsigned __int16 *)(a1[2] + 44);
      unint64_t v146 = *(char **)(*(void *)v143 + 4144);
      unint64_t v147 = *(void *)(*(void *)v143 + 4152);
      if ((unint64_t)v146 >= v147)
      {
        uint64_t v148 = (char *)v144[517];
        uint64_t v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          uint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 519), v152);
          unint64_t v146 = (char *)v144[518];
          uint64_t v148 = (char *)v144[517];
        }
        else
        {
          uint64_t v153 = 0;
        }
        unint64_t v162 = &v153[8 * v149];
        unint64_t v163 = &v153[8 * v152];
        *(void *)unint64_t v162 = v145;
        unint64_t v156 = v162 + 8;
        while (v146 != v148)
        {
          uint64_t v164 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v162 - 1) = v164;
          v162 -= 8;
        }
LABEL_227:
        v144[517] = v162;
        v144[518] = v156;
        v144[519] = v163;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v146 = v145;
    unint64_t v156 = v146 + 8;
LABEL_229:
    v144[518] = v156;
LABEL_230:
    int v166 = 1 << *(_DWORD *)(v3 + 48);
    if (v166 == 2)
    {
      uint64_t v178 = a1[1];
      uint64_t v168 = *(void **)v178;
      uint64_t v169 = *(unsigned __int16 *)(a1[2] + 28);
      unint64_t v170 = *(char **)(*(void *)v178 + 4168);
      unint64_t v179 = *(void *)(*(void *)v178 + 4176);
      if ((unint64_t)v170 >= v179)
      {
        unint64_t v172 = (char *)v168[520];
        uint64_t v181 = (v170 - v172) >> 3;
        if ((unint64_t)(v181 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v182 = v179 - (void)v172;
        unint64_t v183 = (uint64_t)(v179 - (void)v172) >> 2;
        if (v183 <= v181 + 1) {
          unint64_t v183 = v181 + 1;
        }
        if (v182 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v184 = v183;
        }
        if (v184)
        {
          unint64_t v185 = (char *)sub_5714((uint64_t)(v168 + 522), v184);
          unint64_t v170 = (char *)v168[521];
          unint64_t v172 = (char *)v168[520];
        }
        else
        {
          unint64_t v185 = 0;
        }
        uint64_t v186 = &v185[8 * v181];
        int v187 = &v185[8 * v184];
        *(void *)uint64_t v186 = v169;
        unint64_t v180 = v186 + 8;
        while (v170 != v172)
        {
          uint64_t v189 = *((void *)v170 - 1);
          v170 -= 8;
          *((void *)v186 - 1) = v189;
          v186 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v166 != 1) {
        goto LABEL_262;
      }
      uint64_t v167 = a1[1];
      uint64_t v168 = *(void **)v167;
      uint64_t v169 = *(unsigned __int16 *)(a1[2] + 28);
      unint64_t v170 = *(char **)(*(void *)v167 + 4168);
      unint64_t v171 = *(void *)(*(void *)v167 + 4176);
      if ((unint64_t)v170 >= v171)
      {
        unint64_t v172 = (char *)v168[520];
        uint64_t v173 = (v170 - v172) >> 3;
        if ((unint64_t)(v173 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v174 = v171 - (void)v172;
        unint64_t v175 = (uint64_t)(v171 - (void)v172) >> 2;
        if (v175 <= v173 + 1) {
          unint64_t v175 = v173 + 1;
        }
        if (v174 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v176 = v175;
        }
        if (v176)
        {
          unint64_t v177 = (char *)sub_5714((uint64_t)(v168 + 522), v176);
          unint64_t v170 = (char *)v168[521];
          unint64_t v172 = (char *)v168[520];
        }
        else
        {
          unint64_t v177 = 0;
        }
        uint64_t v186 = &v177[8 * v173];
        int v187 = &v177[8 * v176];
        *(void *)uint64_t v186 = v169;
        unint64_t v180 = v186 + 8;
        while (v170 != v172)
        {
          uint64_t v188 = *((void *)v170 - 1);
          v170 -= 8;
          *((void *)v186 - 1) = v188;
          v186 -= 8;
        }
LABEL_259:
        v168[520] = v186;
        v168[521] = v180;
        v168[522] = v187;
        if (v172) {
          operator delete(v172);
        }
        goto LABEL_261;
      }
    }
    *(void *)unint64_t v170 = v169;
    unint64_t v180 = v170 + 8;
LABEL_261:
    v168[521] = v180;
LABEL_262:
    int v190 = 1 << *(_DWORD *)(v3 + 48);
    if (v190 == 2)
    {
      int v191 = *(void **)a1[1];
      uint64_t v192 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      uint64_t v193 = (uint64_t *)v191[524];
      unint64_t v201 = v191[525];
      if ((unint64_t)v193 >= v201)
      {
        unint64_t v195 = (uint64_t *)v191[523];
        uint64_t v203 = v193 - v195;
        if ((unint64_t)(v203 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v204 = v201 - (void)v195;
        unint64_t v205 = (uint64_t)(v201 - (void)v195) >> 2;
        if (v205 <= v203 + 1) {
          unint64_t v205 = v203 + 1;
        }
        if (v204 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v206 = v205;
        }
        if (v206)
        {
          unint64_t v207 = (char *)sub_5714((uint64_t)(v191 + 525), v206);
          uint64_t v193 = (uint64_t *)v191[524];
          unint64_t v195 = (uint64_t *)v191[523];
        }
        else
        {
          unint64_t v207 = 0;
        }
        uint64_t v208 = (uint64_t *)&v207[8 * v203];
        int v209 = &v207[8 * v206];
        *uint64_t v208 = v192;
        unint64_t v202 = v208 + 1;
        while (v193 != v195)
        {
          uint64_t v211 = *--v193;
          *--uint64_t v208 = v211;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v190 != 1) {
        goto LABEL_294;
      }
      int v191 = *(void **)a1[1];
      uint64_t v192 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      uint64_t v193 = (uint64_t *)v191[524];
      unint64_t v194 = v191[525];
      if ((unint64_t)v193 >= v194)
      {
        unint64_t v195 = (uint64_t *)v191[523];
        uint64_t v196 = v193 - v195;
        if ((unint64_t)(v196 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v197 = v194 - (void)v195;
        unint64_t v198 = (uint64_t)(v194 - (void)v195) >> 2;
        if (v198 <= v196 + 1) {
          unint64_t v198 = v196 + 1;
        }
        if (v197 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v199 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v199 = v198;
        }
        if (v199)
        {
          unint64_t v200 = (char *)sub_5714((uint64_t)(v191 + 525), v199);
          uint64_t v193 = (uint64_t *)v191[524];
          unint64_t v195 = (uint64_t *)v191[523];
        }
        else
        {
          unint64_t v200 = 0;
        }
        uint64_t v208 = (uint64_t *)&v200[8 * v196];
        int v209 = &v200[8 * v199];
        *uint64_t v208 = v192;
        unint64_t v202 = v208 + 1;
        while (v193 != v195)
        {
          uint64_t v210 = *--v193;
          *--uint64_t v208 = v210;
        }
LABEL_291:
        v191[523] = v208;
        v191[524] = v202;
        v191[525] = v209;
        if (v195) {
          operator delete(v195);
        }
        goto LABEL_293;
      }
    }
    uint64_t *v193 = v192;
    unint64_t v202 = v193 + 1;
LABEL_293:
    v191[524] = v202;
LABEL_294:
    int v212 = 1 << *(_DWORD *)(v3 + 48);
    if (v212 == 2)
    {
      uint64_t v224 = a1[2];
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_DWORD *)(v224 + 52) & 0x1FFFFLL;
      unint64_t v216 = (uint64_t *)v214[527];
      unint64_t v225 = v214[528];
      if ((unint64_t)v216 >= v225)
      {
        unint64_t v218 = (uint64_t *)v214[526];
        uint64_t v227 = v216 - v218;
        if (!((unint64_t)(v227 + 1) >> 61))
        {
          unint64_t v228 = v225 - (void)v218;
          unint64_t v229 = (uint64_t)(v225 - (void)v218) >> 2;
          if (v229 <= v227 + 1) {
            unint64_t v229 = v227 + 1;
          }
          if (v228 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v230 = v229;
          }
          if (v230)
          {
            int v231 = (char *)sub_5714((uint64_t)(v214 + 528), v230);
            unint64_t v216 = (uint64_t *)v214[527];
            unint64_t v218 = (uint64_t *)v214[526];
          }
          else
          {
            int v231 = 0;
          }
          int v232 = (uint64_t *)&v231[8 * v227];
          uint64_t v233 = &v231[8 * v230];
          *int v232 = v215;
          uint64_t v226 = v232 + 1;
          while (v216 != v218)
          {
            uint64_t v235 = *--v216;
            *--int v232 = v235;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_566C();
      }
    }
    else
    {
      if (v212 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      uint64_t v213 = a1[2];
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_DWORD *)(v213 + 52) & 0x1FFFFLL;
      unint64_t v216 = (uint64_t *)v214[527];
      unint64_t v217 = v214[528];
      if ((unint64_t)v216 >= v217)
      {
        unint64_t v218 = (uint64_t *)v214[526];
        uint64_t v219 = v216 - v218;
        if (!((unint64_t)(v219 + 1) >> 61))
        {
          unint64_t v220 = v217 - (void)v218;
          unint64_t v221 = (uint64_t)(v217 - (void)v218) >> 2;
          if (v221 <= v219 + 1) {
            unint64_t v221 = v219 + 1;
          }
          if (v220 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v222 = v221;
          }
          if (v222)
          {
            unint64_t v223 = (char *)sub_5714((uint64_t)(v214 + 528), v222);
            unint64_t v216 = (uint64_t *)v214[527];
            unint64_t v218 = (uint64_t *)v214[526];
          }
          else
          {
            unint64_t v223 = 0;
          }
          int v232 = (uint64_t *)&v223[8 * v219];
          uint64_t v233 = &v223[8 * v222];
          *int v232 = v215;
          uint64_t v226 = v232 + 1;
          while (v216 != v218)
          {
            uint64_t v234 = *--v216;
            *--int v232 = v234;
          }
LABEL_323:
          v214[526] = v232;
          v214[527] = v226;
          v214[528] = v233;
          if (v218) {
            operator delete(v218);
          }
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *unint64_t v216 = v215;
    uint64_t v226 = v216 + 1;
LABEL_325:
    v214[527] = v226;
    goto LABEL_326;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[500] - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
    *(void *)(v18[503] - 8) += *(_DWORD *)(v17 + 40) & 0x1FFFF;
    *(void *)(v18[506] - 8) += *(_WORD *)(v17 + 26) & 0x7FFF;
    *(void *)(v18[509] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
    *(void *)(v18[512] - 8) += *(_DWORD *)(v17 + 32) & 0x3FFFF;
    *(void *)(v18[515] - 8) += *(unsigned __int16 *)(v17 + 46);
    *(void *)(v18[518] - 8) += *(unsigned __int16 *)(v17 + 44);
    *(void *)(v18[521] - 8) += *(unsigned __int16 *)(v17 + 28);
    *(void *)(v18[524] - 8) += *(_DWORD *)(v17 + 48) & 0x1FFFF;
    *(void *)(v18[527] - 8) += *(_DWORD *)(v17 + 52) & 0x1FFFF;
  }
}

void sub_163124(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      unint64_t v7 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
      uint64_t v8 = (unint64_t *)v6[416];
      unint64_t v25 = v6[417];
      if ((unint64_t)v8 >= v25)
      {
        uint64_t v10 = (unint64_t *)v6[415];
        uint64_t v27 = v8 - v10;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v28 = v25 - (void)v10;
        unint64_t v29 = (uint64_t)(v25 - (void)v10) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = (char *)sub_5714((uint64_t)(v6 + 417), v30);
          uint64_t v8 = (unint64_t *)v6[416];
          uint64_t v10 = (unint64_t *)v6[415];
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v32 = (unint64_t *)&v31[8 * v27];
        uint64_t v33 = &v31[8 * v30];
        unint64_t *v32 = v7;
        unint64_t v26 = v32 + 1;
        while (v8 != v10)
        {
          unint64_t v35 = *--v8;
          *--uint64_t v32 = v35;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      unint64_t v7 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
      uint64_t v8 = (unint64_t *)v6[416];
      unint64_t v9 = v6[417];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (unint64_t *)v6[415];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 417), v14);
          uint64_t v8 = (unint64_t *)v6[416];
          uint64_t v10 = (unint64_t *)v6[415];
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v32 = (unint64_t *)&v15[8 * v11];
        uint64_t v33 = &v15[8 * v14];
        unint64_t *v32 = v7;
        unint64_t v26 = v32 + 1;
        while (v8 != v10)
        {
          unint64_t v34 = *--v8;
          *--uint64_t v32 = v34;
        }
LABEL_35:
        v6[415] = v32;
        v6[416] = v26;
        v6[417] = v33;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    unint64_t v26 = v8 + 1;
LABEL_37:
    v6[416] = v26;
LABEL_38:
    int v36 = 1 << *(_DWORD *)(v3 + 48);
    if (v36 == 2)
    {
      unint64_t v37 = *(void **)a1[1];
      uint64_t v38 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      unint64_t v39 = (uint64_t *)v37[419];
      unint64_t v47 = v37[420];
      if ((unint64_t)v39 >= v47)
      {
        unint64_t v41 = (uint64_t *)v37[418];
        uint64_t v49 = v39 - v41;
        if ((unint64_t)(v49 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v50 = v47 - (void)v41;
        unint64_t v51 = (uint64_t)(v47 - (void)v41) >> 2;
        if (v51 <= v49 + 1) {
          unint64_t v51 = v49 + 1;
        }
        if (v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52)
        {
          uint64_t v53 = (char *)sub_5714((uint64_t)(v37 + 420), v52);
          unint64_t v39 = (uint64_t *)v37[419];
          unint64_t v41 = (uint64_t *)v37[418];
        }
        else
        {
          uint64_t v53 = 0;
        }
        uint64_t v54 = (uint64_t *)&v53[8 * v49];
        int v55 = &v53[8 * v52];
        *uint64_t v54 = v38;
        unint64_t v48 = v54 + 1;
        while (v39 != v41)
        {
          uint64_t v57 = *--v39;
          *--uint64_t v54 = v57;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v36 != 1) {
        goto LABEL_70;
      }
      unint64_t v37 = *(void **)a1[1];
      uint64_t v38 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      unint64_t v39 = (uint64_t *)v37[419];
      unint64_t v40 = v37[420];
      if ((unint64_t)v39 >= v40)
      {
        unint64_t v41 = (uint64_t *)v37[418];
        uint64_t v42 = v39 - v41;
        if ((unint64_t)(v42 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v43 = v40 - (void)v41;
        unint64_t v44 = (uint64_t)(v40 - (void)v41) >> 2;
        if (v44 <= v42 + 1) {
          unint64_t v44 = v42 + 1;
        }
        if (v43 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45)
        {
          unint64_t v46 = (char *)sub_5714((uint64_t)(v37 + 420), v45);
          unint64_t v39 = (uint64_t *)v37[419];
          unint64_t v41 = (uint64_t *)v37[418];
        }
        else
        {
          unint64_t v46 = 0;
        }
        uint64_t v54 = (uint64_t *)&v46[8 * v42];
        int v55 = &v46[8 * v45];
        *uint64_t v54 = v38;
        unint64_t v48 = v54 + 1;
        while (v39 != v41)
        {
          uint64_t v56 = *--v39;
          *--uint64_t v54 = v56;
        }
LABEL_67:
        v37[418] = v54;
        v37[419] = v48;
        v37[420] = v55;
        if (v41) {
          operator delete(v41);
        }
        goto LABEL_69;
      }
    }
    *unint64_t v39 = v38;
    unint64_t v48 = v39 + 1;
LABEL_69:
    v37[419] = v48;
LABEL_70:
    int v58 = 1 << *(_DWORD *)(v3 + 48);
    if (v58 == 2)
    {
      unint64_t v59 = *(void **)a1[1];
      uint64_t v60 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v61 = (char *)v59[422];
      unint64_t v69 = v59[423];
      if ((unint64_t)v61 >= v69)
      {
        unint64_t v63 = (char *)v59[421];
        uint64_t v71 = (v61 - v63) >> 3;
        if ((unint64_t)(v71 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v72 = v69 - (void)v63;
        unint64_t v73 = (uint64_t)(v69 - (void)v63) >> 2;
        if (v73 <= v71 + 1) {
          unint64_t v73 = v71 + 1;
        }
        if (v72 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v73;
        }
        if (v74)
        {
          unint64_t v75 = (char *)sub_5714((uint64_t)(v59 + 423), v74);
          unint64_t v61 = (char *)v59[422];
          unint64_t v63 = (char *)v59[421];
        }
        else
        {
          unint64_t v75 = 0;
        }
        uint64_t v76 = &v75[8 * v71];
        uint64_t v77 = &v75[8 * v74];
        *(void *)uint64_t v76 = v60;
        unint64_t v70 = v76 + 8;
        while (v61 != v63)
        {
          uint64_t v79 = *((void *)v61 - 1);
          v61 -= 8;
          *((void *)v76 - 1) = v79;
          v76 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v58 != 1) {
        goto LABEL_102;
      }
      unint64_t v59 = *(void **)a1[1];
      uint64_t v60 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v61 = (char *)v59[422];
      unint64_t v62 = v59[423];
      if ((unint64_t)v61 >= v62)
      {
        unint64_t v63 = (char *)v59[421];
        uint64_t v64 = (v61 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v65 = v62 - (void)v63;
        unint64_t v66 = (uint64_t)(v62 - (void)v63) >> 2;
        if (v66 <= v64 + 1) {
          unint64_t v66 = v64 + 1;
        }
        if (v65 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v66;
        }
        if (v67)
        {
          unint64_t v68 = (char *)sub_5714((uint64_t)(v59 + 423), v67);
          unint64_t v61 = (char *)v59[422];
          unint64_t v63 = (char *)v59[421];
        }
        else
        {
          unint64_t v68 = 0;
        }
        uint64_t v76 = &v68[8 * v64];
        uint64_t v77 = &v68[8 * v67];
        *(void *)uint64_t v76 = v60;
        unint64_t v70 = v76 + 8;
        while (v61 != v63)
        {
          uint64_t v78 = *((void *)v61 - 1);
          v61 -= 8;
          *((void *)v76 - 1) = v78;
          v76 -= 8;
        }
LABEL_99:
        v59[421] = v76;
        v59[422] = v70;
        v59[423] = v77;
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v61 = v60;
    unint64_t v70 = v61 + 8;
LABEL_101:
    v59[422] = v70;
LABEL_102:
    int v80 = 1 << *(_DWORD *)(v3 + 48);
    if (v80 == 2)
    {
      unint64_t v81 = *(void **)a1[1];
      uint64_t v82 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v83 = (char *)v81[425];
      unint64_t v91 = v81[426];
      if ((unint64_t)v83 >= v91)
      {
        unint64_t v85 = (char *)v81[424];
        uint64_t v93 = (v83 - v85) >> 3;
        if ((unint64_t)(v93 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v94 = v91 - (void)v85;
        unint64_t v95 = (uint64_t)(v91 - (void)v85) >> 2;
        if (v95 <= v93 + 1) {
          unint64_t v95 = v93 + 1;
        }
        if (v94 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v96 = v95;
        }
        if (v96)
        {
          unint64_t v97 = (char *)sub_5714((uint64_t)(v81 + 426), v96);
          unint64_t v83 = (char *)v81[425];
          unint64_t v85 = (char *)v81[424];
        }
        else
        {
          unint64_t v97 = 0;
        }
        uint64_t v98 = &v97[8 * v93];
        uint64_t v99 = &v97[8 * v96];
        *(void *)uint64_t v98 = v82;
        unint64_t v92 = v98 + 8;
        while (v83 != v85)
        {
          uint64_t v101 = *((void *)v83 - 1);
          v83 -= 8;
          *((void *)v98 - 1) = v101;
          v98 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v80 != 1) {
        goto LABEL_134;
      }
      unint64_t v81 = *(void **)a1[1];
      uint64_t v82 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v83 = (char *)v81[425];
      unint64_t v84 = v81[426];
      if ((unint64_t)v83 >= v84)
      {
        unint64_t v85 = (char *)v81[424];
        uint64_t v86 = (v83 - v85) >> 3;
        if ((unint64_t)(v86 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v87 = v84 - (void)v85;
        unint64_t v88 = (uint64_t)(v84 - (void)v85) >> 2;
        if (v88 <= v86 + 1) {
          unint64_t v88 = v86 + 1;
        }
        if (v87 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v89 = v88;
        }
        if (v89)
        {
          unint64_t v90 = (char *)sub_5714((uint64_t)(v81 + 426), v89);
          unint64_t v83 = (char *)v81[425];
          unint64_t v85 = (char *)v81[424];
        }
        else
        {
          unint64_t v90 = 0;
        }
        uint64_t v98 = &v90[8 * v86];
        uint64_t v99 = &v90[8 * v89];
        *(void *)uint64_t v98 = v82;
        unint64_t v92 = v98 + 8;
        while (v83 != v85)
        {
          uint64_t v100 = *((void *)v83 - 1);
          v83 -= 8;
          *((void *)v98 - 1) = v100;
          v98 -= 8;
        }
LABEL_131:
        v81[424] = v98;
        v81[425] = v92;
        v81[426] = v99;
        if (v85) {
          operator delete(v85);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v83 = v82;
    unint64_t v92 = v83 + 8;
LABEL_133:
    v81[425] = v92;
LABEL_134:
    int v102 = 1 << *(_DWORD *)(v3 + 48);
    if (v102 == 2)
    {
      unint64_t v103 = *(void **)a1[1];
      uint64_t v104 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v105 = (char *)v103[428];
      unint64_t v113 = v103[429];
      if ((unint64_t)v105 >= v113)
      {
        unint64_t v107 = (char *)v103[427];
        uint64_t v115 = (v105 - v107) >> 3;
        if ((unint64_t)(v115 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v116 = v113 - (void)v107;
        unint64_t v117 = (uint64_t)(v113 - (void)v107) >> 2;
        if (v117 <= v115 + 1) {
          unint64_t v117 = v115 + 1;
        }
        if (v116 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v118 = v117;
        }
        if (v118)
        {
          uint64_t v119 = (char *)sub_5714((uint64_t)(v103 + 429), v118);
          unint64_t v105 = (char *)v103[428];
          unint64_t v107 = (char *)v103[427];
        }
        else
        {
          uint64_t v119 = 0;
        }
        uint64_t v120 = &v119[8 * v115];
        uint64_t v121 = &v119[8 * v118];
        *(void *)uint64_t v120 = v104;
        unint64_t v114 = v120 + 8;
        while (v105 != v107)
        {
          uint64_t v123 = *((void *)v105 - 1);
          v105 -= 8;
          *((void *)v120 - 1) = v123;
          v120 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v102 != 1) {
        goto LABEL_166;
      }
      unint64_t v103 = *(void **)a1[1];
      uint64_t v104 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v105 = (char *)v103[428];
      unint64_t v106 = v103[429];
      if ((unint64_t)v105 >= v106)
      {
        unint64_t v107 = (char *)v103[427];
        uint64_t v108 = (v105 - v107) >> 3;
        if ((unint64_t)(v108 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v109 = v106 - (void)v107;
        unint64_t v110 = (uint64_t)(v106 - (void)v107) >> 2;
        if (v110 <= v108 + 1) {
          unint64_t v110 = v108 + 1;
        }
        if (v109 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v111 = v110;
        }
        if (v111)
        {
          unint64_t v112 = (char *)sub_5714((uint64_t)(v103 + 429), v111);
          unint64_t v105 = (char *)v103[428];
          unint64_t v107 = (char *)v103[427];
        }
        else
        {
          unint64_t v112 = 0;
        }
        uint64_t v120 = &v112[8 * v108];
        uint64_t v121 = &v112[8 * v111];
        *(void *)uint64_t v120 = v104;
        unint64_t v114 = v120 + 8;
        while (v105 != v107)
        {
          uint64_t v122 = *((void *)v105 - 1);
          v105 -= 8;
          *((void *)v120 - 1) = v122;
          v120 -= 8;
        }
LABEL_163:
        v103[427] = v120;
        v103[428] = v114;
        v103[429] = v121;
        if (v107) {
          operator delete(v107);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v105 = v104;
    unint64_t v114 = v105 + 8;
LABEL_165:
    v103[428] = v114;
LABEL_166:
    int v124 = 1 << *(_DWORD *)(v3 + 48);
    if (v124 == 2)
    {
      uint64_t v125 = *(void **)a1[1];
      uint64_t v126 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v127 = (char *)v125[431];
      unint64_t v135 = v125[432];
      if ((unint64_t)v127 >= v135)
      {
        unint64_t v129 = (char *)v125[430];
        uint64_t v137 = (v127 - v129) >> 3;
        if ((unint64_t)(v137 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v138 = v135 - (void)v129;
        unint64_t v139 = (uint64_t)(v135 - (void)v129) >> 2;
        if (v139 <= v137 + 1) {
          unint64_t v139 = v137 + 1;
        }
        if (v138 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v140 = v139;
        }
        if (v140)
        {
          uint64_t v141 = (char *)sub_5714((uint64_t)(v125 + 432), v140);
          unint64_t v127 = (char *)v125[431];
          unint64_t v129 = (char *)v125[430];
        }
        else
        {
          uint64_t v141 = 0;
        }
        int v142 = &v141[8 * v137];
        uint64_t v143 = &v141[8 * v140];
        *(void *)int v142 = v126;
        unint64_t v136 = v142 + 8;
        while (v127 != v129)
        {
          uint64_t v145 = *((void *)v127 - 1);
          v127 -= 8;
          *((void *)v142 - 1) = v145;
          v142 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v124 != 1) {
        goto LABEL_198;
      }
      uint64_t v125 = *(void **)a1[1];
      uint64_t v126 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v127 = (char *)v125[431];
      unint64_t v128 = v125[432];
      if ((unint64_t)v127 >= v128)
      {
        unint64_t v129 = (char *)v125[430];
        uint64_t v130 = (v127 - v129) >> 3;
        if ((unint64_t)(v130 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v131 = v128 - (void)v129;
        unint64_t v132 = (uint64_t)(v128 - (void)v129) >> 2;
        if (v132 <= v130 + 1) {
          unint64_t v132 = v130 + 1;
        }
        if (v131 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v132;
        }
        if (v133)
        {
          unint64_t v134 = (char *)sub_5714((uint64_t)(v125 + 432), v133);
          unint64_t v127 = (char *)v125[431];
          unint64_t v129 = (char *)v125[430];
        }
        else
        {
          unint64_t v134 = 0;
        }
        int v142 = &v134[8 * v130];
        uint64_t v143 = &v134[8 * v133];
        *(void *)int v142 = v126;
        unint64_t v136 = v142 + 8;
        while (v127 != v129)
        {
          uint64_t v144 = *((void *)v127 - 1);
          v127 -= 8;
          *((void *)v142 - 1) = v144;
          v142 -= 8;
        }
LABEL_195:
        v125[430] = v142;
        v125[431] = v136;
        v125[432] = v143;
        if (v129) {
          operator delete(v129);
        }
        goto LABEL_197;
      }
    }
    *(void *)unint64_t v127 = v126;
    unint64_t v136 = v127 + 8;
LABEL_197:
    v125[431] = v136;
LABEL_198:
    int v146 = 1 << *(_DWORD *)(v3 + 48);
    if (v146 == 2)
    {
      uint64_t v158 = a1[1];
      uint64_t v148 = *(void **)v158;
      uint64_t v149 = *(unsigned __int16 *)(a1[2] + 60);
      unint64_t v150 = *(char **)(*(void *)v158 + 3472);
      unint64_t v159 = *(void *)(*(void *)v158 + 3480);
      if ((unint64_t)v150 >= v159)
      {
        unint64_t v152 = (char *)v148[433];
        uint64_t v161 = (v150 - v152) >> 3;
        if ((unint64_t)(v161 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v162 = v159 - (void)v152;
        unint64_t v163 = (uint64_t)(v159 - (void)v152) >> 2;
        if (v163 <= v161 + 1) {
          unint64_t v163 = v161 + 1;
        }
        if (v162 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v164 = v163;
        }
        if (v164)
        {
          uint64_t v165 = (char *)sub_5714((uint64_t)(v148 + 435), v164);
          unint64_t v150 = (char *)v148[434];
          unint64_t v152 = (char *)v148[433];
        }
        else
        {
          uint64_t v165 = 0;
        }
        int v166 = &v165[8 * v161];
        uint64_t v167 = &v165[8 * v164];
        *(void *)int v166 = v149;
        unint64_t v160 = v166 + 8;
        while (v150 != v152)
        {
          uint64_t v169 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v166 - 1) = v169;
          v166 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v146 != 1) {
        goto LABEL_230;
      }
      uint64_t v147 = a1[1];
      uint64_t v148 = *(void **)v147;
      uint64_t v149 = *(unsigned __int16 *)(a1[2] + 60);
      unint64_t v150 = *(char **)(*(void *)v147 + 3472);
      unint64_t v151 = *(void *)(*(void *)v147 + 3480);
      if ((unint64_t)v150 >= v151)
      {
        unint64_t v152 = (char *)v148[433];
        uint64_t v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v154 = v151 - (void)v152;
        unint64_t v155 = (uint64_t)(v151 - (void)v152) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          uint64_t v157 = (char *)sub_5714((uint64_t)(v148 + 435), v156);
          unint64_t v150 = (char *)v148[434];
          unint64_t v152 = (char *)v148[433];
        }
        else
        {
          uint64_t v157 = 0;
        }
        int v166 = &v157[8 * v153];
        uint64_t v167 = &v157[8 * v156];
        *(void *)int v166 = v149;
        unint64_t v160 = v166 + 8;
        while (v150 != v152)
        {
          uint64_t v168 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v166 - 1) = v168;
          v166 -= 8;
        }
LABEL_227:
        v148[433] = v166;
        v148[434] = v160;
        v148[435] = v167;
        if (v152) {
          operator delete(v152);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v150 = v149;
    unint64_t v160 = v150 + 8;
LABEL_229:
    v148[434] = v160;
LABEL_230:
    int v170 = 1 << *(_DWORD *)(v3 + 48);
    if (v170 == 2)
    {
      unint64_t v171 = *(void **)a1[1];
      uint64_t v172 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      uint64_t v173 = (uint64_t *)v171[437];
      unint64_t v181 = v171[438];
      if ((unint64_t)v173 >= v181)
      {
        unint64_t v175 = (uint64_t *)v171[436];
        uint64_t v183 = v173 - v175;
        if ((unint64_t)(v183 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v184 = v181 - (void)v175;
        unint64_t v185 = (uint64_t)(v181 - (void)v175) >> 2;
        if (v185 <= v183 + 1) {
          unint64_t v185 = v183 + 1;
        }
        if (v184 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v186 = v185;
        }
        if (v186)
        {
          int v187 = (char *)sub_5714((uint64_t)(v171 + 438), v186);
          uint64_t v173 = (uint64_t *)v171[437];
          unint64_t v175 = (uint64_t *)v171[436];
        }
        else
        {
          int v187 = 0;
        }
        uint64_t v188 = (uint64_t *)&v187[8 * v183];
        uint64_t v189 = &v187[8 * v186];
        *uint64_t v188 = v172;
        unint64_t v182 = v188 + 1;
        while (v173 != v175)
        {
          uint64_t v191 = *--v173;
          *--uint64_t v188 = v191;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v170 != 1) {
        goto LABEL_262;
      }
      unint64_t v171 = *(void **)a1[1];
      uint64_t v172 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      uint64_t v173 = (uint64_t *)v171[437];
      unint64_t v174 = v171[438];
      if ((unint64_t)v173 >= v174)
      {
        unint64_t v175 = (uint64_t *)v171[436];
        uint64_t v176 = v173 - v175;
        if ((unint64_t)(v176 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v177 = v174 - (void)v175;
        unint64_t v178 = (uint64_t)(v174 - (void)v175) >> 2;
        if (v178 <= v176 + 1) {
          unint64_t v178 = v176 + 1;
        }
        if (v177 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v179 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v179 = v178;
        }
        if (v179)
        {
          unint64_t v180 = (char *)sub_5714((uint64_t)(v171 + 438), v179);
          uint64_t v173 = (uint64_t *)v171[437];
          unint64_t v175 = (uint64_t *)v171[436];
        }
        else
        {
          unint64_t v180 = 0;
        }
        uint64_t v188 = (uint64_t *)&v180[8 * v176];
        uint64_t v189 = &v180[8 * v179];
        *uint64_t v188 = v172;
        unint64_t v182 = v188 + 1;
        while (v173 != v175)
        {
          uint64_t v190 = *--v173;
          *--uint64_t v188 = v190;
        }
LABEL_259:
        v171[436] = v188;
        v171[437] = v182;
        v171[438] = v189;
        if (v175) {
          operator delete(v175);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v173 = v172;
    unint64_t v182 = v173 + 1;
LABEL_261:
    v171[437] = v182;
LABEL_262:
    int v192 = 1 << *(_DWORD *)(v3 + 48);
    if (v192 == 2)
    {
      uint64_t v193 = *(void **)a1[1];
      uint64_t v194 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      unint64_t v195 = (uint64_t *)v193[440];
      unint64_t v203 = v193[441];
      if ((unint64_t)v195 >= v203)
      {
        unint64_t v197 = (uint64_t *)v193[439];
        uint64_t v205 = v195 - v197;
        if ((unint64_t)(v205 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v206 = v203 - (void)v197;
        unint64_t v207 = (uint64_t)(v203 - (void)v197) >> 2;
        if (v207 <= v205 + 1) {
          unint64_t v207 = v205 + 1;
        }
        if (v206 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v208 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v208 = v207;
        }
        if (v208)
        {
          int v209 = (char *)sub_5714((uint64_t)(v193 + 441), v208);
          unint64_t v195 = (uint64_t *)v193[440];
          unint64_t v197 = (uint64_t *)v193[439];
        }
        else
        {
          int v209 = 0;
        }
        uint64_t v210 = (uint64_t *)&v209[8 * v205];
        uint64_t v211 = &v209[8 * v208];
        *uint64_t v210 = v194;
        unint64_t v204 = v210 + 1;
        while (v195 != v197)
        {
          uint64_t v213 = *--v195;
          *--uint64_t v210 = v213;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v192 != 1) {
        goto LABEL_294;
      }
      uint64_t v193 = *(void **)a1[1];
      uint64_t v194 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      unint64_t v195 = (uint64_t *)v193[440];
      unint64_t v196 = v193[441];
      if ((unint64_t)v195 >= v196)
      {
        unint64_t v197 = (uint64_t *)v193[439];
        uint64_t v198 = v195 - v197;
        if ((unint64_t)(v198 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v199 = v196 - (void)v197;
        unint64_t v200 = (uint64_t)(v196 - (void)v197) >> 2;
        if (v200 <= v198 + 1) {
          unint64_t v200 = v198 + 1;
        }
        if (v199 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v201 = v200;
        }
        if (v201)
        {
          unint64_t v202 = (char *)sub_5714((uint64_t)(v193 + 441), v201);
          unint64_t v195 = (uint64_t *)v193[440];
          unint64_t v197 = (uint64_t *)v193[439];
        }
        else
        {
          unint64_t v202 = 0;
        }
        uint64_t v210 = (uint64_t *)&v202[8 * v198];
        uint64_t v211 = &v202[8 * v201];
        *uint64_t v210 = v194;
        unint64_t v204 = v210 + 1;
        while (v195 != v197)
        {
          uint64_t v212 = *--v195;
          *--uint64_t v210 = v212;
        }
LABEL_291:
        v193[439] = v210;
        v193[440] = v204;
        v193[441] = v211;
        if (v197) {
          operator delete(v197);
        }
        goto LABEL_293;
      }
    }
    *unint64_t v195 = v194;
    unint64_t v204 = v195 + 1;
LABEL_293:
    v193[440] = v204;
LABEL_294:
    int v214 = 1 << *(_DWORD *)(v3 + 48);
    if (v214 == 2)
    {
      uint64_t v215 = *(void **)a1[1];
      uint64_t v216 = *(_DWORD *)(a1[2] + 88) & 0x1FFFFLL;
      unint64_t v217 = (uint64_t *)v215[443];
      unint64_t v225 = v215[444];
      if ((unint64_t)v217 >= v225)
      {
        uint64_t v219 = (uint64_t *)v215[442];
        uint64_t v227 = v217 - v219;
        if ((unint64_t)(v227 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v228 = v225 - (void)v219;
        unint64_t v229 = (uint64_t)(v225 - (void)v219) >> 2;
        if (v229 <= v227 + 1) {
          unint64_t v229 = v227 + 1;
        }
        if (v228 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v230 = v229;
        }
        if (v230)
        {
          int v231 = (char *)sub_5714((uint64_t)(v215 + 444), v230);
          unint64_t v217 = (uint64_t *)v215[443];
          uint64_t v219 = (uint64_t *)v215[442];
        }
        else
        {
          int v231 = 0;
        }
        int v232 = (uint64_t *)&v231[8 * v227];
        uint64_t v233 = &v231[8 * v230];
        *int v232 = v216;
        uint64_t v226 = v232 + 1;
        while (v217 != v219)
        {
          uint64_t v235 = *--v217;
          *--int v232 = v235;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v214 != 1) {
        goto LABEL_326;
      }
      uint64_t v215 = *(void **)a1[1];
      uint64_t v216 = *(_DWORD *)(a1[2] + 88) & 0x1FFFFLL;
      unint64_t v217 = (uint64_t *)v215[443];
      unint64_t v218 = v215[444];
      if ((unint64_t)v217 >= v218)
      {
        uint64_t v219 = (uint64_t *)v215[442];
        uint64_t v220 = v217 - v219;
        if ((unint64_t)(v220 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v221 = v218 - (void)v219;
        unint64_t v222 = (uint64_t)(v218 - (void)v219) >> 2;
        if (v222 <= v220 + 1) {
          unint64_t v222 = v220 + 1;
        }
        if (v221 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v223 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v223 = v222;
        }
        if (v223)
        {
          uint64_t v224 = (char *)sub_5714((uint64_t)(v215 + 444), v223);
          unint64_t v217 = (uint64_t *)v215[443];
          uint64_t v219 = (uint64_t *)v215[442];
        }
        else
        {
          uint64_t v224 = 0;
        }
        int v232 = (uint64_t *)&v224[8 * v220];
        uint64_t v233 = &v224[8 * v223];
        *int v232 = v216;
        uint64_t v226 = v232 + 1;
        while (v217 != v219)
        {
          uint64_t v234 = *--v217;
          *--int v232 = v234;
        }
LABEL_323:
        v215[442] = v232;
        v215[443] = v226;
        v215[444] = v233;
        if (v219) {
          operator delete(v219);
        }
        goto LABEL_325;
      }
    }
    *unint64_t v217 = v216;
    uint64_t v226 = v217 + 1;
LABEL_325:
    v215[443] = v226;
LABEL_326:
    int v236 = 1 << *(_DWORD *)(v3 + 48);
    if (v236 == 2)
    {
      uint64_t v237 = *(void **)a1[1];
      uint64_t v238 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      unint64_t v239 = (uint64_t *)v237[446];
      unint64_t v247 = v237[447];
      if ((unint64_t)v239 >= v247)
      {
        uint64_t v241 = (uint64_t *)v237[445];
        uint64_t v249 = v239 - v241;
        if ((unint64_t)(v249 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v250 = v247 - (void)v241;
        unint64_t v251 = (uint64_t)(v247 - (void)v241) >> 2;
        if (v251 <= v249 + 1) {
          unint64_t v251 = v249 + 1;
        }
        if (v250 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v252 = v251;
        }
        if (v252)
        {
          int v253 = (char *)sub_5714((uint64_t)(v237 + 447), v252);
          unint64_t v239 = (uint64_t *)v237[446];
          uint64_t v241 = (uint64_t *)v237[445];
        }
        else
        {
          int v253 = 0;
        }
        int v254 = (uint64_t *)&v253[8 * v249];
        uint64_t v255 = &v253[8 * v252];
        *int v254 = v238;
        uint64_t v248 = v254 + 1;
        while (v239 != v241)
        {
          uint64_t v257 = *--v239;
          *--int v254 = v257;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v236 != 1) {
        goto LABEL_358;
      }
      uint64_t v237 = *(void **)a1[1];
      uint64_t v238 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      unint64_t v239 = (uint64_t *)v237[446];
      unint64_t v240 = v237[447];
      if ((unint64_t)v239 >= v240)
      {
        uint64_t v241 = (uint64_t *)v237[445];
        uint64_t v242 = v239 - v241;
        if ((unint64_t)(v242 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v243 = v240 - (void)v241;
        unint64_t v244 = (uint64_t)(v240 - (void)v241) >> 2;
        if (v244 <= v242 + 1) {
          unint64_t v244 = v242 + 1;
        }
        if (v243 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v245 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v245 = v244;
        }
        if (v245)
        {
          unint64_t v246 = (char *)sub_5714((uint64_t)(v237 + 447), v245);
          unint64_t v239 = (uint64_t *)v237[446];
          uint64_t v241 = (uint64_t *)v237[445];
        }
        else
        {
          unint64_t v246 = 0;
        }
        int v254 = (uint64_t *)&v246[8 * v242];
        uint64_t v255 = &v246[8 * v245];
        *int v254 = v238;
        uint64_t v248 = v254 + 1;
        while (v239 != v241)
        {
          uint64_t v256 = *--v239;
          *--int v254 = v256;
        }
LABEL_355:
        v237[445] = v254;
        v237[446] = v248;
        v237[447] = v255;
        if (v241) {
          operator delete(v241);
        }
        goto LABEL_357;
      }
    }
    *unint64_t v239 = v238;
    uint64_t v248 = v239 + 1;
LABEL_357:
    v237[446] = v248;
LABEL_358:
    int v258 = 1 << *(_DWORD *)(v3 + 48);
    if (v258 == 2)
    {
      uint64_t v259 = *(void **)a1[1];
      uint64_t v260 = *(_DWORD *)(a1[2] + 72) & 0x1FFFFLL;
      unint64_t v261 = (uint64_t *)v259[449];
      unint64_t v269 = v259[450];
      if ((unint64_t)v261 >= v269)
      {
        uint64_t v263 = (uint64_t *)v259[448];
        uint64_t v271 = v261 - v263;
        if ((unint64_t)(v271 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v272 = v269 - (void)v263;
        unint64_t v273 = (uint64_t)(v269 - (void)v263) >> 2;
        if (v273 <= v271 + 1) {
          unint64_t v273 = v271 + 1;
        }
        if (v272 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v274 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v274 = v273;
        }
        if (v274)
        {
          int v275 = (char *)sub_5714((uint64_t)(v259 + 450), v274);
          unint64_t v261 = (uint64_t *)v259[449];
          uint64_t v263 = (uint64_t *)v259[448];
        }
        else
        {
          int v275 = 0;
        }
        int v276 = (uint64_t *)&v275[8 * v271];
        uint64_t v277 = &v275[8 * v274];
        *int v276 = v260;
        uint64_t v270 = v276 + 1;
        while (v261 != v263)
        {
          uint64_t v279 = *--v261;
          *--int v276 = v279;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v258 != 1) {
        goto LABEL_390;
      }
      uint64_t v259 = *(void **)a1[1];
      uint64_t v260 = *(_DWORD *)(a1[2] + 72) & 0x1FFFFLL;
      unint64_t v261 = (uint64_t *)v259[449];
      unint64_t v262 = v259[450];
      if ((unint64_t)v261 >= v262)
      {
        uint64_t v263 = (uint64_t *)v259[448];
        uint64_t v264 = v261 - v263;
        if ((unint64_t)(v264 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v265 = v262 - (void)v263;
        unint64_t v266 = (uint64_t)(v262 - (void)v263) >> 2;
        if (v266 <= v264 + 1) {
          unint64_t v266 = v264 + 1;
        }
        if (v265 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v267 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v267 = v266;
        }
        if (v267)
        {
          unint64_t v268 = (char *)sub_5714((uint64_t)(v259 + 450), v267);
          unint64_t v261 = (uint64_t *)v259[449];
          uint64_t v263 = (uint64_t *)v259[448];
        }
        else
        {
          unint64_t v268 = 0;
        }
        int v276 = (uint64_t *)&v268[8 * v264];
        uint64_t v277 = &v268[8 * v267];
        *int v276 = v260;
        uint64_t v270 = v276 + 1;
        while (v261 != v263)
        {
          uint64_t v278 = *--v261;
          *--int v276 = v278;
        }
LABEL_387:
        v259[448] = v276;
        v259[449] = v270;
        v259[450] = v277;
        if (v263) {
          operator delete(v263);
        }
        goto LABEL_389;
      }
    }
    *unint64_t v261 = v260;
    uint64_t v270 = v261 + 1;
LABEL_389:
    v259[449] = v270;
LABEL_390:
    int v280 = 1 << *(_DWORD *)(v3 + 48);
    if (v280 == 2)
    {
      uint64_t v281 = *(void **)a1[1];
      uint64_t v282 = *(_DWORD *)(a1[2] + 76) & 0x1FFFFLL;
      unint64_t v283 = (uint64_t *)v281[452];
      unint64_t v291 = v281[453];
      if ((unint64_t)v283 >= v291)
      {
        uint64_t v285 = (uint64_t *)v281[451];
        uint64_t v293 = v283 - v285;
        if ((unint64_t)(v293 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v294 = v291 - (void)v285;
        unint64_t v295 = (uint64_t)(v291 - (void)v285) >> 2;
        if (v295 <= v293 + 1) {
          unint64_t v295 = v293 + 1;
        }
        if (v294 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v296 = v295;
        }
        if (v296)
        {
          int v297 = (char *)sub_5714((uint64_t)(v281 + 453), v296);
          unint64_t v283 = (uint64_t *)v281[452];
          uint64_t v285 = (uint64_t *)v281[451];
        }
        else
        {
          int v297 = 0;
        }
        uint64_t v298 = (uint64_t *)&v297[8 * v293];
        uint64_t v299 = &v297[8 * v296];
        uint64_t *v298 = v282;
        uint64_t v292 = v298 + 1;
        while (v283 != v285)
        {
          uint64_t v301 = *--v283;
          *--uint64_t v298 = v301;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v280 != 1) {
        goto LABEL_422;
      }
      uint64_t v281 = *(void **)a1[1];
      uint64_t v282 = *(_DWORD *)(a1[2] + 76) & 0x1FFFFLL;
      unint64_t v283 = (uint64_t *)v281[452];
      unint64_t v284 = v281[453];
      if ((unint64_t)v283 >= v284)
      {
        uint64_t v285 = (uint64_t *)v281[451];
        uint64_t v286 = v283 - v285;
        if ((unint64_t)(v286 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v287 = v284 - (void)v285;
        unint64_t v288 = (uint64_t)(v284 - (void)v285) >> 2;
        if (v288 <= v286 + 1) {
          unint64_t v288 = v286 + 1;
        }
        if (v287 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v289 = v288;
        }
        if (v289)
        {
          unint64_t v290 = (char *)sub_5714((uint64_t)(v281 + 453), v289);
          unint64_t v283 = (uint64_t *)v281[452];
          uint64_t v285 = (uint64_t *)v281[451];
        }
        else
        {
          unint64_t v290 = 0;
        }
        uint64_t v298 = (uint64_t *)&v290[8 * v286];
        uint64_t v299 = &v290[8 * v289];
        uint64_t *v298 = v282;
        uint64_t v292 = v298 + 1;
        while (v283 != v285)
        {
          uint64_t v300 = *--v283;
          *--uint64_t v298 = v300;
        }
LABEL_419:
        v281[451] = v298;
        v281[452] = v292;
        v281[453] = v299;
        if (v285) {
          operator delete(v285);
        }
        goto LABEL_421;
      }
    }
    *unint64_t v283 = v282;
    uint64_t v292 = v283 + 1;
LABEL_421:
    v281[452] = v292;
LABEL_422:
    int v302 = 1 << *(_DWORD *)(v3 + 48);
    if (v302 == 2)
    {
      uint64_t v314 = a1[1];
      unint64_t v304 = *(void **)v314;
      uint64_t v305 = *(unsigned __int16 *)(a1[2] + 64);
      unint64_t v306 = *(char **)(*(void *)v314 + 3640);
      unint64_t v315 = *(void *)(*(void *)v314 + 3648);
      if ((unint64_t)v306 >= v315)
      {
        unint64_t v308 = (char *)v304[454];
        uint64_t v317 = (v306 - v308) >> 3;
        if ((unint64_t)(v317 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v318 = v315 - (void)v308;
        unint64_t v319 = (uint64_t)(v315 - (void)v308) >> 2;
        if (v319 <= v317 + 1) {
          unint64_t v319 = v317 + 1;
        }
        if (v318 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v320 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v320 = v319;
        }
        if (v320)
        {
          uint64_t v321 = (char *)sub_5714((uint64_t)(v304 + 456), v320);
          unint64_t v306 = (char *)v304[455];
          unint64_t v308 = (char *)v304[454];
        }
        else
        {
          uint64_t v321 = 0;
        }
        uint64_t v322 = &v321[8 * v317];
        int v323 = &v321[8 * v320];
        *(void *)uint64_t v322 = v305;
        unint64_t v316 = v322 + 8;
        while (v306 != v308)
        {
          uint64_t v325 = *((void *)v306 - 1);
          v306 -= 8;
          *((void *)v322 - 1) = v325;
          v322 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v302 != 1) {
        goto LABEL_454;
      }
      uint64_t v303 = a1[1];
      unint64_t v304 = *(void **)v303;
      uint64_t v305 = *(unsigned __int16 *)(a1[2] + 64);
      unint64_t v306 = *(char **)(*(void *)v303 + 3640);
      unint64_t v307 = *(void *)(*(void *)v303 + 3648);
      if ((unint64_t)v306 >= v307)
      {
        unint64_t v308 = (char *)v304[454];
        uint64_t v309 = (v306 - v308) >> 3;
        if ((unint64_t)(v309 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v310 = v307 - (void)v308;
        unint64_t v311 = (uint64_t)(v307 - (void)v308) >> 2;
        if (v311 <= v309 + 1) {
          unint64_t v311 = v309 + 1;
        }
        if (v310 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v312 = v311;
        }
        if (v312)
        {
          unint64_t v313 = (char *)sub_5714((uint64_t)(v304 + 456), v312);
          unint64_t v306 = (char *)v304[455];
          unint64_t v308 = (char *)v304[454];
        }
        else
        {
          unint64_t v313 = 0;
        }
        uint64_t v322 = &v313[8 * v309];
        int v323 = &v313[8 * v312];
        *(void *)uint64_t v322 = v305;
        unint64_t v316 = v322 + 8;
        while (v306 != v308)
        {
          uint64_t v324 = *((void *)v306 - 1);
          v306 -= 8;
          *((void *)v322 - 1) = v324;
          v322 -= 8;
        }
LABEL_451:
        v304[454] = v322;
        v304[455] = v316;
        v304[456] = v323;
        if (v308) {
          operator delete(v308);
        }
        goto LABEL_453;
      }
    }
    *(void *)unint64_t v306 = v305;
    unint64_t v316 = v306 + 8;
LABEL_453:
    v304[455] = v316;
LABEL_454:
    int v326 = 1 << *(_DWORD *)(v3 + 48);
    if (v326 == 2)
    {
      uint64_t v338 = a1[1];
      unint64_t v328 = *(void **)v338;
      uint64_t v329 = *(unsigned __int16 *)(a1[2] + 66);
      unint64_t v330 = *(char **)(*(void *)v338 + 3664);
      unint64_t v339 = *(void *)(*(void *)v338 + 3672);
      if ((unint64_t)v330 >= v339)
      {
        unint64_t v332 = (char *)v328[457];
        uint64_t v341 = (v330 - v332) >> 3;
        if ((unint64_t)(v341 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v342 = v339 - (void)v332;
        unint64_t v343 = (uint64_t)(v339 - (void)v332) >> 2;
        if (v343 <= v341 + 1) {
          unint64_t v343 = v341 + 1;
        }
        if (v342 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v344 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v344 = v343;
        }
        if (v344)
        {
          int v345 = (char *)sub_5714((uint64_t)(v328 + 459), v344);
          unint64_t v330 = (char *)v328[458];
          unint64_t v332 = (char *)v328[457];
        }
        else
        {
          int v345 = 0;
        }
        unsigned int v346 = &v345[8 * v341];
        uint64_t v347 = &v345[8 * v344];
        *(void *)unsigned int v346 = v329;
        uint64_t v340 = v346 + 8;
        while (v330 != v332)
        {
          uint64_t v349 = *((void *)v330 - 1);
          v330 -= 8;
          *((void *)v346 - 1) = v349;
          v346 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v326 != 1) {
        goto LABEL_486;
      }
      uint64_t v327 = a1[1];
      unint64_t v328 = *(void **)v327;
      uint64_t v329 = *(unsigned __int16 *)(a1[2] + 66);
      unint64_t v330 = *(char **)(*(void *)v327 + 3664);
      unint64_t v331 = *(void *)(*(void *)v327 + 3672);
      if ((unint64_t)v330 >= v331)
      {
        unint64_t v332 = (char *)v328[457];
        uint64_t v333 = (v330 - v332) >> 3;
        if ((unint64_t)(v333 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v334 = v331 - (void)v332;
        unint64_t v335 = (uint64_t)(v331 - (void)v332) >> 2;
        if (v335 <= v333 + 1) {
          unint64_t v335 = v333 + 1;
        }
        if (v334 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v336 = v335;
        }
        if (v336)
        {
          unint64_t v337 = (char *)sub_5714((uint64_t)(v328 + 459), v336);
          unint64_t v330 = (char *)v328[458];
          unint64_t v332 = (char *)v328[457];
        }
        else
        {
          unint64_t v337 = 0;
        }
        unsigned int v346 = &v337[8 * v333];
        uint64_t v347 = &v337[8 * v336];
        *(void *)unsigned int v346 = v329;
        uint64_t v340 = v346 + 8;
        while (v330 != v332)
        {
          uint64_t v348 = *((void *)v330 - 1);
          v330 -= 8;
          *((void *)v346 - 1) = v348;
          v346 -= 8;
        }
LABEL_483:
        v328[457] = v346;
        v328[458] = v340;
        v328[459] = v347;
        if (v332) {
          operator delete(v332);
        }
        goto LABEL_485;
      }
    }
    *(void *)unint64_t v330 = v329;
    uint64_t v340 = v330 + 8;
LABEL_485:
    v328[458] = v340;
LABEL_486:
    int v350 = 1 << *(_DWORD *)(v3 + 48);
    if (v350 == 2)
    {
      uint64_t v362 = a1[1];
      unint64_t v352 = *(void **)v362;
      uint64_t v353 = *(unsigned __int16 *)(a1[2] + 84);
      unint64_t v354 = *(char **)(*(void *)v362 + 3688);
      unint64_t v363 = *(void *)(*(void *)v362 + 3696);
      if ((unint64_t)v354 >= v363)
      {
        unint64_t v356 = (char *)v352[460];
        uint64_t v365 = (v354 - v356) >> 3;
        if ((unint64_t)(v365 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v366 = v363 - (void)v356;
        unint64_t v367 = (uint64_t)(v363 - (void)v356) >> 2;
        if (v367 <= v365 + 1) {
          unint64_t v367 = v365 + 1;
        }
        if (v366 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v368 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v368 = v367;
        }
        if (v368)
        {
          uint64_t v369 = (char *)sub_5714((uint64_t)(v352 + 462), v368);
          unint64_t v354 = (char *)v352[461];
          unint64_t v356 = (char *)v352[460];
        }
        else
        {
          uint64_t v369 = 0;
        }
        unint64_t v370 = &v369[8 * v365];
        unint64_t v371 = &v369[8 * v368];
        *(void *)unint64_t v370 = v353;
        uint64_t v364 = v370 + 8;
        while (v354 != v356)
        {
          uint64_t v373 = *((void *)v354 - 1);
          v354 -= 8;
          *((void *)v370 - 1) = v373;
          v370 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v350 != 1) {
        goto LABEL_518;
      }
      uint64_t v351 = a1[1];
      unint64_t v352 = *(void **)v351;
      uint64_t v353 = *(unsigned __int16 *)(a1[2] + 84);
      unint64_t v354 = *(char **)(*(void *)v351 + 3688);
      unint64_t v355 = *(void *)(*(void *)v351 + 3696);
      if ((unint64_t)v354 >= v355)
      {
        unint64_t v356 = (char *)v352[460];
        uint64_t v357 = (v354 - v356) >> 3;
        if ((unint64_t)(v357 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v358 = v355 - (void)v356;
        unint64_t v359 = (uint64_t)(v355 - (void)v356) >> 2;
        if (v359 <= v357 + 1) {
          unint64_t v359 = v357 + 1;
        }
        if (v358 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v360 = v359;
        }
        if (v360)
        {
          unint64_t v361 = (char *)sub_5714((uint64_t)(v352 + 462), v360);
          unint64_t v354 = (char *)v352[461];
          unint64_t v356 = (char *)v352[460];
        }
        else
        {
          unint64_t v361 = 0;
        }
        unint64_t v370 = &v361[8 * v357];
        unint64_t v371 = &v361[8 * v360];
        *(void *)unint64_t v370 = v353;
        uint64_t v364 = v370 + 8;
        while (v354 != v356)
        {
          uint64_t v372 = *((void *)v354 - 1);
          v354 -= 8;
          *((void *)v370 - 1) = v372;
          v370 -= 8;
        }
LABEL_515:
        v352[460] = v370;
        v352[461] = v364;
        v352[462] = v371;
        if (v356) {
          operator delete(v356);
        }
        goto LABEL_517;
      }
    }
    *(void *)unint64_t v354 = v353;
    uint64_t v364 = v354 + 8;
LABEL_517:
    v352[461] = v364;
LABEL_518:
    int v374 = 1 << *(_DWORD *)(v3 + 48);
    if (v374 == 2)
    {
      uint64_t v386 = a1[1];
      unint64_t v376 = *(void **)v386;
      uint64_t v377 = *(unsigned __int16 *)(a1[2] + 86);
      unint64_t v378 = *(char **)(*(void *)v386 + 3712);
      unint64_t v387 = *(void *)(*(void *)v386 + 3720);
      if ((unint64_t)v378 >= v387)
      {
        uint64_t v380 = (char *)v376[463];
        uint64_t v389 = (v378 - v380) >> 3;
        if ((unint64_t)(v389 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v390 = v387 - (void)v380;
        unint64_t v391 = (uint64_t)(v387 - (void)v380) >> 2;
        if (v391 <= v389 + 1) {
          unint64_t v391 = v389 + 1;
        }
        if (v390 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v392 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v392 = v391;
        }
        if (v392)
        {
          unint64_t v393 = (char *)sub_5714((uint64_t)(v376 + 465), v392);
          unint64_t v378 = (char *)v376[464];
          uint64_t v380 = (char *)v376[463];
        }
        else
        {
          unint64_t v393 = 0;
        }
        unint64_t v394 = &v393[8 * v389];
        uint64_t v395 = &v393[8 * v392];
        *(void *)unint64_t v394 = v377;
        uint64_t v388 = v394 + 8;
        while (v378 != v380)
        {
          uint64_t v397 = *((void *)v378 - 1);
          v378 -= 8;
          *((void *)v394 - 1) = v397;
          v394 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v374 != 1) {
        goto LABEL_550;
      }
      uint64_t v375 = a1[1];
      unint64_t v376 = *(void **)v375;
      uint64_t v377 = *(unsigned __int16 *)(a1[2] + 86);
      unint64_t v378 = *(char **)(*(void *)v375 + 3712);
      unint64_t v379 = *(void *)(*(void *)v375 + 3720);
      if ((unint64_t)v378 >= v379)
      {
        uint64_t v380 = (char *)v376[463];
        uint64_t v381 = (v378 - v380) >> 3;
        if ((unint64_t)(v381 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v382 = v379 - (void)v380;
        unint64_t v383 = (uint64_t)(v379 - (void)v380) >> 2;
        if (v383 <= v381 + 1) {
          unint64_t v383 = v381 + 1;
        }
        if (v382 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v384 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v384 = v383;
        }
        if (v384)
        {
          int v385 = (char *)sub_5714((uint64_t)(v376 + 465), v384);
          unint64_t v378 = (char *)v376[464];
          uint64_t v380 = (char *)v376[463];
        }
        else
        {
          int v385 = 0;
        }
        unint64_t v394 = &v385[8 * v381];
        uint64_t v395 = &v385[8 * v384];
        *(void *)unint64_t v394 = v377;
        uint64_t v388 = v394 + 8;
        while (v378 != v380)
        {
          uint64_t v396 = *((void *)v378 - 1);
          v378 -= 8;
          *((void *)v394 - 1) = v396;
          v394 -= 8;
        }
LABEL_547:
        v376[463] = v394;
        v376[464] = v388;
        v376[465] = v395;
        if (v380) {
          operator delete(v380);
        }
        goto LABEL_549;
      }
    }
    *(void *)unint64_t v378 = v377;
    uint64_t v388 = v378 + 8;
LABEL_549:
    v376[464] = v388;
LABEL_550:
    int v398 = 1 << *(_DWORD *)(v3 + 48);
    if (v398 == 2)
    {
      unint64_t v399 = *(void **)a1[1];
      uint64_t v400 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      unint64_t v401 = (uint64_t *)v399[467];
      unint64_t v409 = v399[468];
      if ((unint64_t)v401 >= v409)
      {
        unint64_t v403 = (uint64_t *)v399[466];
        uint64_t v411 = v401 - v403;
        if ((unint64_t)(v411 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v412 = v409 - (void)v403;
        unint64_t v413 = (uint64_t)(v409 - (void)v403) >> 2;
        if (v413 <= v411 + 1) {
          unint64_t v413 = v411 + 1;
        }
        if (v412 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v414 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v414 = v413;
        }
        if (v414)
        {
          unint64_t v415 = (char *)sub_5714((uint64_t)(v399 + 468), v414);
          unint64_t v401 = (uint64_t *)v399[467];
          unint64_t v403 = (uint64_t *)v399[466];
        }
        else
        {
          unint64_t v415 = 0;
        }
        unint64_t v416 = (uint64_t *)&v415[8 * v411];
        uint64_t v417 = &v415[8 * v414];
        uint64_t *v416 = v400;
        uint64_t v410 = v416 + 1;
        while (v401 != v403)
        {
          uint64_t v419 = *--v401;
          *--unint64_t v416 = v419;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v398 != 1) {
        goto LABEL_582;
      }
      unint64_t v399 = *(void **)a1[1];
      uint64_t v400 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      unint64_t v401 = (uint64_t *)v399[467];
      unint64_t v402 = v399[468];
      if ((unint64_t)v401 >= v402)
      {
        unint64_t v403 = (uint64_t *)v399[466];
        uint64_t v404 = v401 - v403;
        if ((unint64_t)(v404 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v405 = v402 - (void)v403;
        unint64_t v406 = (uint64_t)(v402 - (void)v403) >> 2;
        if (v406 <= v404 + 1) {
          unint64_t v406 = v404 + 1;
        }
        if (v405 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v407 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v407 = v406;
        }
        if (v407)
        {
          uint64_t v408 = (char *)sub_5714((uint64_t)(v399 + 468), v407);
          unint64_t v401 = (uint64_t *)v399[467];
          unint64_t v403 = (uint64_t *)v399[466];
        }
        else
        {
          uint64_t v408 = 0;
        }
        unint64_t v416 = (uint64_t *)&v408[8 * v404];
        uint64_t v417 = &v408[8 * v407];
        uint64_t *v416 = v400;
        uint64_t v410 = v416 + 1;
        while (v401 != v403)
        {
          uint64_t v418 = *--v401;
          *--unint64_t v416 = v418;
        }
LABEL_579:
        v399[466] = v416;
        v399[467] = v410;
        v399[468] = v417;
        if (v403) {
          operator delete(v403);
        }
        goto LABEL_581;
      }
    }
    *unint64_t v401 = v400;
    uint64_t v410 = v401 + 1;
LABEL_581:
    v399[467] = v410;
LABEL_582:
    int v420 = 1 << *(_DWORD *)(v3 + 48);
    if (v420 == 2)
    {
      unint64_t v421 = *(void **)a1[1];
      uint64_t v422 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      unint64_t v423 = (char *)v421[470];
      unint64_t v431 = v421[471];
      if ((unint64_t)v423 >= v431)
      {
        unint64_t v425 = (char *)v421[469];
        uint64_t v433 = (v423 - v425) >> 3;
        if ((unint64_t)(v433 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v434 = v431 - (void)v425;
        unint64_t v435 = (uint64_t)(v431 - (void)v425) >> 2;
        if (v435 <= v433 + 1) {
          unint64_t v435 = v433 + 1;
        }
        if (v434 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v436 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v436 = v435;
        }
        if (v436)
        {
          unint64_t v437 = (char *)sub_5714((uint64_t)(v421 + 471), v436);
          unint64_t v423 = (char *)v421[470];
          unint64_t v425 = (char *)v421[469];
        }
        else
        {
          unint64_t v437 = 0;
        }
        unint64_t v438 = &v437[8 * v433];
        uint64_t v439 = &v437[8 * v436];
        *(void *)unint64_t v438 = v422;
        uint64_t v432 = v438 + 8;
        while (v423 != v425)
        {
          uint64_t v441 = *((void *)v423 - 1);
          v423 -= 8;
          *((void *)v438 - 1) = v441;
          v438 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v420 != 1) {
        goto LABEL_614;
      }
      unint64_t v421 = *(void **)a1[1];
      uint64_t v422 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      unint64_t v423 = (char *)v421[470];
      unint64_t v424 = v421[471];
      if ((unint64_t)v423 >= v424)
      {
        unint64_t v425 = (char *)v421[469];
        uint64_t v426 = (v423 - v425) >> 3;
        if ((unint64_t)(v426 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v427 = v424 - (void)v425;
        unint64_t v428 = (uint64_t)(v424 - (void)v425) >> 2;
        if (v428 <= v426 + 1) {
          unint64_t v428 = v426 + 1;
        }
        if (v427 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v429 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v429 = v428;
        }
        if (v429)
        {
          uint64_t v430 = (char *)sub_5714((uint64_t)(v421 + 471), v429);
          unint64_t v423 = (char *)v421[470];
          unint64_t v425 = (char *)v421[469];
        }
        else
        {
          uint64_t v430 = 0;
        }
        unint64_t v438 = &v430[8 * v426];
        uint64_t v439 = &v430[8 * v429];
        *(void *)unint64_t v438 = v422;
        uint64_t v432 = v438 + 8;
        while (v423 != v425)
        {
          uint64_t v440 = *((void *)v423 - 1);
          v423 -= 8;
          *((void *)v438 - 1) = v440;
          v438 -= 8;
        }
LABEL_611:
        v421[469] = v438;
        v421[470] = v432;
        v421[471] = v439;
        if (v425) {
          operator delete(v425);
        }
        goto LABEL_613;
      }
    }
    *(void *)unint64_t v423 = v422;
    uint64_t v432 = v423 + 8;
LABEL_613:
    v421[470] = v432;
LABEL_614:
    int v442 = 1 << *(_DWORD *)(v3 + 48);
    if (v442 == 2)
    {
      unint64_t v443 = *(void **)a1[1];
      uint64_t v444 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      unint64_t v445 = (char *)v443[473];
      unint64_t v453 = v443[474];
      if ((unint64_t)v445 >= v453)
      {
        unint64_t v447 = (char *)v443[472];
        uint64_t v455 = (v445 - v447) >> 3;
        if ((unint64_t)(v455 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v456 = v453 - (void)v447;
        unint64_t v457 = (uint64_t)(v453 - (void)v447) >> 2;
        if (v457 <= v455 + 1) {
          unint64_t v457 = v455 + 1;
        }
        if (v456 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v458 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v458 = v457;
        }
        if (v458)
        {
          unint64_t v459 = (char *)sub_5714((uint64_t)(v443 + 474), v458);
          unint64_t v445 = (char *)v443[473];
          unint64_t v447 = (char *)v443[472];
        }
        else
        {
          unint64_t v459 = 0;
        }
        unint64_t v460 = &v459[8 * v455];
        uint64_t v461 = &v459[8 * v458];
        *(void *)unint64_t v460 = v444;
        uint64_t v454 = v460 + 8;
        while (v445 != v447)
        {
          uint64_t v463 = *((void *)v445 - 1);
          v445 -= 8;
          *((void *)v460 - 1) = v463;
          v460 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v442 != 1) {
        goto LABEL_646;
      }
      unint64_t v443 = *(void **)a1[1];
      uint64_t v444 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      unint64_t v445 = (char *)v443[473];
      unint64_t v446 = v443[474];
      if ((unint64_t)v445 >= v446)
      {
        unint64_t v447 = (char *)v443[472];
        uint64_t v448 = (v445 - v447) >> 3;
        if ((unint64_t)(v448 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v449 = v446 - (void)v447;
        unint64_t v450 = (uint64_t)(v446 - (void)v447) >> 2;
        if (v450 <= v448 + 1) {
          unint64_t v450 = v448 + 1;
        }
        if (v449 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v451 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v451 = v450;
        }
        if (v451)
        {
          uint64_t v452 = (char *)sub_5714((uint64_t)(v443 + 474), v451);
          unint64_t v445 = (char *)v443[473];
          unint64_t v447 = (char *)v443[472];
        }
        else
        {
          uint64_t v452 = 0;
        }
        unint64_t v460 = &v452[8 * v448];
        uint64_t v461 = &v452[8 * v451];
        *(void *)unint64_t v460 = v444;
        uint64_t v454 = v460 + 8;
        while (v445 != v447)
        {
          uint64_t v462 = *((void *)v445 - 1);
          v445 -= 8;
          *((void *)v460 - 1) = v462;
          v460 -= 8;
        }
LABEL_643:
        v443[472] = v460;
        v443[473] = v454;
        v443[474] = v461;
        if (v447) {
          operator delete(v447);
        }
        goto LABEL_645;
      }
    }
    *(void *)unint64_t v445 = v444;
    uint64_t v454 = v445 + 8;
LABEL_645:
    v443[473] = v454;
LABEL_646:
    int v464 = 1 << *(_DWORD *)(v3 + 48);
    if (v464 == 2)
    {
      uint64_t v476 = a1[1];
      unint64_t v466 = *(void **)v476;
      uint64_t v467 = *(unsigned __int16 *)(a1[2] + 62);
      uint64_t v468 = *(char **)(*(void *)v476 + 3808);
      unint64_t v477 = *(void *)(*(void *)v476 + 3816);
      if ((unint64_t)v468 >= v477)
      {
        unint64_t v470 = (char *)v466[475];
        uint64_t v479 = (v468 - v470) >> 3;
        if ((unint64_t)(v479 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v480 = v477 - (void)v470;
        unint64_t v481 = (uint64_t)(v477 - (void)v470) >> 2;
        if (v481 <= v479 + 1) {
          unint64_t v481 = v479 + 1;
        }
        if (v480 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v482 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v482 = v481;
        }
        if (v482)
        {
          uint64_t v483 = (char *)sub_5714((uint64_t)(v466 + 477), v482);
          uint64_t v468 = (char *)v466[476];
          unint64_t v470 = (char *)v466[475];
        }
        else
        {
          uint64_t v483 = 0;
        }
        unint64_t v484 = &v483[8 * v479];
        unint64_t v485 = &v483[8 * v482];
        *(void *)unint64_t v484 = v467;
        unint64_t v478 = v484 + 8;
        while (v468 != v470)
        {
          uint64_t v487 = *((void *)v468 - 1);
          v468 -= 8;
          *((void *)v484 - 1) = v487;
          v484 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v464 != 1) {
        goto LABEL_678;
      }
      uint64_t v465 = a1[1];
      unint64_t v466 = *(void **)v465;
      uint64_t v467 = *(unsigned __int16 *)(a1[2] + 62);
      uint64_t v468 = *(char **)(*(void *)v465 + 3808);
      unint64_t v469 = *(void *)(*(void *)v465 + 3816);
      if ((unint64_t)v468 >= v469)
      {
        unint64_t v470 = (char *)v466[475];
        uint64_t v471 = (v468 - v470) >> 3;
        if ((unint64_t)(v471 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v472 = v469 - (void)v470;
        unint64_t v473 = (uint64_t)(v469 - (void)v470) >> 2;
        if (v473 <= v471 + 1) {
          unint64_t v473 = v471 + 1;
        }
        if (v472 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v474 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v474 = v473;
        }
        if (v474)
        {
          uint64_t v475 = (char *)sub_5714((uint64_t)(v466 + 477), v474);
          uint64_t v468 = (char *)v466[476];
          unint64_t v470 = (char *)v466[475];
        }
        else
        {
          uint64_t v475 = 0;
        }
        unint64_t v484 = &v475[8 * v471];
        unint64_t v485 = &v475[8 * v474];
        *(void *)unint64_t v484 = v467;
        unint64_t v478 = v484 + 8;
        while (v468 != v470)
        {
          uint64_t v486 = *((void *)v468 - 1);
          v468 -= 8;
          *((void *)v484 - 1) = v486;
          v484 -= 8;
        }
LABEL_675:
        v466[475] = v484;
        v466[476] = v478;
        v466[477] = v485;
        if (v470) {
          operator delete(v470);
        }
        goto LABEL_677;
      }
    }
    *(void *)uint64_t v468 = v467;
    unint64_t v478 = v468 + 8;
LABEL_677:
    v466[476] = v478;
LABEL_678:
    int v488 = 1 << *(_DWORD *)(v3 + 48);
    if (v488 == 2)
    {
      unint64_t v489 = *(void **)a1[1];
      uint64_t v490 = (*(unsigned __int16 *)(a1[2] + 68) | (*(unsigned __int8 *)(a1[2] + 70) << 16)) & 0x1FFFFLL;
      unint64_t v491 = (uint64_t *)v489[479];
      unint64_t v499 = v489[480];
      if ((unint64_t)v491 >= v499)
      {
        unint64_t v493 = (uint64_t *)v489[478];
        uint64_t v501 = v491 - v493;
        if ((unint64_t)(v501 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v502 = v499 - (void)v493;
        unint64_t v503 = (uint64_t)(v499 - (void)v493) >> 2;
        if (v503 <= v501 + 1) {
          unint64_t v503 = v501 + 1;
        }
        if (v502 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v504 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v504 = v503;
        }
        if (v504)
        {
          uint64_t v505 = (char *)sub_5714((uint64_t)(v489 + 480), v504);
          unint64_t v491 = (uint64_t *)v489[479];
          unint64_t v493 = (uint64_t *)v489[478];
        }
        else
        {
          uint64_t v505 = 0;
        }
        unint64_t v506 = (uint64_t *)&v505[8 * v501];
        unint64_t v507 = &v505[8 * v504];
        *unint64_t v506 = v490;
        unint64_t v500 = v506 + 1;
        while (v491 != v493)
        {
          uint64_t v509 = *--v491;
          *--unint64_t v506 = v509;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v488 != 1) {
        goto LABEL_710;
      }
      unint64_t v489 = *(void **)a1[1];
      uint64_t v490 = (*(unsigned __int16 *)(a1[2] + 68) | (*(unsigned __int8 *)(a1[2] + 70) << 16)) & 0x1FFFFLL;
      unint64_t v491 = (uint64_t *)v489[479];
      unint64_t v492 = v489[480];
      if ((unint64_t)v491 >= v492)
      {
        unint64_t v493 = (uint64_t *)v489[478];
        uint64_t v494 = v491 - v493;
        if ((unint64_t)(v494 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v495 = v492 - (void)v493;
        unint64_t v496 = (uint64_t)(v492 - (void)v493) >> 2;
        if (v496 <= v494 + 1) {
          unint64_t v496 = v494 + 1;
        }
        if (v495 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v497 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v497 = v496;
        }
        if (v497)
        {
          uint64_t v498 = (char *)sub_5714((uint64_t)(v489 + 480), v497);
          unint64_t v491 = (uint64_t *)v489[479];
          unint64_t v493 = (uint64_t *)v489[478];
        }
        else
        {
          uint64_t v498 = 0;
        }
        unint64_t v506 = (uint64_t *)&v498[8 * v494];
        unint64_t v507 = &v498[8 * v497];
        *unint64_t v506 = v490;
        unint64_t v500 = v506 + 1;
        while (v491 != v493)
        {
          uint64_t v508 = *--v491;
          *--unint64_t v506 = v508;
        }
LABEL_707:
        v489[478] = v506;
        v489[479] = v500;
        v489[480] = v507;
        if (v493) {
          operator delete(v493);
        }
        goto LABEL_709;
      }
    }
    *unint64_t v491 = v490;
    unint64_t v500 = v491 + 1;
LABEL_709:
    v489[479] = v500;
LABEL_710:
    int v510 = 1 << *(_DWORD *)(v3 + 48);
    if (v510 == 2)
    {
      int v511 = *(void **)a1[1];
      uint64_t v512 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      unint64_t v513 = (uint64_t *)v511[482];
      unint64_t v521 = v511[483];
      if ((unint64_t)v513 >= v521)
      {
        unint64_t v515 = (uint64_t *)v511[481];
        uint64_t v523 = v513 - v515;
        if ((unint64_t)(v523 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v524 = v521 - (void)v515;
        unint64_t v525 = (uint64_t)(v521 - (void)v515) >> 2;
        if (v525 <= v523 + 1) {
          unint64_t v525 = v523 + 1;
        }
        if (v524 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v526 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v526 = v525;
        }
        if (v526)
        {
          uint64_t v527 = (char *)sub_5714((uint64_t)(v511 + 483), v526);
          unint64_t v513 = (uint64_t *)v511[482];
          unint64_t v515 = (uint64_t *)v511[481];
        }
        else
        {
          uint64_t v527 = 0;
        }
        unint64_t v528 = (uint64_t *)&v527[8 * v523];
        unint64_t v529 = &v527[8 * v526];
        uint64_t *v528 = v512;
        unsigned int v522 = v528 + 1;
        while (v513 != v515)
        {
          uint64_t v531 = *--v513;
          *--unint64_t v528 = v531;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v510 != 1) {
        goto LABEL_742;
      }
      int v511 = *(void **)a1[1];
      uint64_t v512 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      unint64_t v513 = (uint64_t *)v511[482];
      unint64_t v514 = v511[483];
      if ((unint64_t)v513 >= v514)
      {
        unint64_t v515 = (uint64_t *)v511[481];
        uint64_t v516 = v513 - v515;
        if ((unint64_t)(v516 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v517 = v514 - (void)v515;
        unint64_t v518 = (uint64_t)(v514 - (void)v515) >> 2;
        if (v518 <= v516 + 1) {
          unint64_t v518 = v516 + 1;
        }
        if (v517 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v519 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v519 = v518;
        }
        if (v519)
        {
          uint64_t v520 = (char *)sub_5714((uint64_t)(v511 + 483), v519);
          unint64_t v513 = (uint64_t *)v511[482];
          unint64_t v515 = (uint64_t *)v511[481];
        }
        else
        {
          uint64_t v520 = 0;
        }
        unint64_t v528 = (uint64_t *)&v520[8 * v516];
        unint64_t v529 = &v520[8 * v519];
        uint64_t *v528 = v512;
        unsigned int v522 = v528 + 1;
        while (v513 != v515)
        {
          uint64_t v530 = *--v513;
          *--unint64_t v528 = v530;
        }
LABEL_739:
        v511[481] = v528;
        v511[482] = v522;
        v511[483] = v529;
        if (v515) {
          operator delete(v515);
        }
        goto LABEL_741;
      }
    }
    *unint64_t v513 = v512;
    unsigned int v522 = v513 + 1;
LABEL_741:
    v511[482] = v522;
LABEL_742:
    int v532 = 1 << *(_DWORD *)(v3 + 48);
    if (v532 == 2)
    {
      uint64_t v544 = a1[2];
      uint64_t v534 = *(void **)a1[1];
      uint64_t v535 = *(_DWORD *)(v544 + 36) & 0x1FFFFLL;
      unint64_t v536 = (uint64_t *)v534[485];
      unint64_t v545 = v534[486];
      if ((unint64_t)v536 >= v545)
      {
        unint64_t v538 = (uint64_t *)v534[484];
        uint64_t v547 = v536 - v538;
        if (!((unint64_t)(v547 + 1) >> 61))
        {
          unint64_t v548 = v545 - (void)v538;
          unint64_t v549 = (uint64_t)(v545 - (void)v538) >> 2;
          if (v549 <= v547 + 1) {
            unint64_t v549 = v547 + 1;
          }
          if (v548 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v550 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v550 = v549;
          }
          if (v550)
          {
            unint64_t v551 = (char *)sub_5714((uint64_t)(v534 + 486), v550);
            unint64_t v536 = (uint64_t *)v534[485];
            unint64_t v538 = (uint64_t *)v534[484];
          }
          else
          {
            unint64_t v551 = 0;
          }
          unint64_t v552 = (uint64_t *)&v551[8 * v547];
          unint64_t v553 = &v551[8 * v550];
          uint64_t *v552 = v535;
          unsigned int v546 = v552 + 1;
          while (v536 != v538)
          {
            uint64_t v555 = *--v536;
            *--unint64_t v552 = v555;
          }
          goto LABEL_771;
        }
LABEL_776:
        sub_566C();
      }
    }
    else
    {
      if (v532 != 1)
      {
LABEL_774:
        *a2 = 1;
        return;
      }
      uint64_t v533 = a1[2];
      uint64_t v534 = *(void **)a1[1];
      uint64_t v535 = *(_DWORD *)(v533 + 36) & 0x1FFFFLL;
      unint64_t v536 = (uint64_t *)v534[485];
      unint64_t v537 = v534[486];
      if ((unint64_t)v536 >= v537)
      {
        unint64_t v538 = (uint64_t *)v534[484];
        uint64_t v539 = v536 - v538;
        if (!((unint64_t)(v539 + 1) >> 61))
        {
          unint64_t v540 = v537 - (void)v538;
          unint64_t v541 = (uint64_t)(v537 - (void)v538) >> 2;
          if (v541 <= v539 + 1) {
            unint64_t v541 = v539 + 1;
          }
          if (v540 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v542 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v542 = v541;
          }
          if (v542)
          {
            int v543 = (char *)sub_5714((uint64_t)(v534 + 486), v542);
            unint64_t v536 = (uint64_t *)v534[485];
            unint64_t v538 = (uint64_t *)v534[484];
          }
          else
          {
            int v543 = 0;
          }
          unint64_t v552 = (uint64_t *)&v543[8 * v539];
          unint64_t v553 = &v543[8 * v542];
          uint64_t *v552 = v535;
          unsigned int v546 = v552 + 1;
          while (v536 != v538)
          {
            uint64_t v554 = *--v536;
            *--unint64_t v552 = v554;
          }
LABEL_771:
          v534[484] = v552;
          v534[485] = v546;
          v534[486] = v553;
          if (v538) {
            operator delete(v538);
          }
          goto LABEL_773;
        }
        goto LABEL_776;
      }
    }
    uint64_t *v536 = v535;
    unsigned int v546 = v536 + 1;
LABEL_773:
    v534[485] = v546;
    goto LABEL_774;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unsigned int v19 = *(_DWORD *)(v17 + 40);
    v17 += 40;
    uint64_t v20 = (void *)*v18;
    *(void *)(v20[416] - 8) += (unint64_t)v19 >> 17;
    *(void *)(v20[419] - 8) += *(_DWORD *)v17 & 0x1FFFF;
    *(void *)(v20[422] - 8) += *(_WORD *)(v17 - 12) & 0x7FFF;
    *(void *)(v20[425] - 8) += *(_WORD *)(v17 - 10) & 0x7FFF;
    *(void *)(v20[428] - 8) += *(_WORD *)(v17 - 16) & 0x7FFF;
    *(void *)(v20[431] - 8) += *(_WORD *)(v17 - 14) & 0x7FFF;
    *(void *)(v20[434] - 8) += *(unsigned __int16 *)(v17 + 20);
    *(void *)(v20[437] - 8) += *(_DWORD *)(v17 + 12) & 0x1FFFF;
    *(void *)(v20[440] - 8) += *(_DWORD *)(v17 + 8) & 0x1FFFF;
    *(void *)(v20[443] - 8) += *(_DWORD *)(v17 + 48) & 0x1FFFF;
    uint64_t v21 = a1[2];
    unint64_t v22 = *(void **)a1[1];
    *(void *)(v22[446] - 8) += *(_DWORD *)(v21 + 80) & 0x7FFFF;
    *(void *)(v22[449] - 8) += *(_DWORD *)(v21 + 72) & 0x1FFFF;
    *(void *)(v22[452] - 8) += *(_DWORD *)(v21 + 76) & 0x1FFFF;
    *(void *)(v22[455] - 8) += *(unsigned __int16 *)(v21 + 64);
    *(void *)(v22[458] - 8) += *(unsigned __int16 *)(v21 + 66);
    *(void *)(v22[461] - 8) += *(unsigned __int16 *)(v21 + 84);
    *(void *)(v22[464] - 8) += *(unsigned __int16 *)(v21 + 86);
    *(void *)(v22[467] - 8) += *(_DWORD *)(v21 + 56) & 0x1FFFF;
    *(void *)(v22[470] - 8) += *(_WORD *)(v21 + 46) & 0x3FFF;
    *(void *)(v22[473] - 8) += *(_WORD *)(v21 + 44) & 0x3FFF;
    uint64_t v23 = a1[2];
    unint64_t v24 = (void *)*v18;
    *(void *)(v24[476] - 8) += *(unsigned __int16 *)(v23 + 62);
    *(void *)(v24[479] - 8) += (*(unsigned __int16 *)(v23 + 68) | (*(unsigned __int8 *)(v23 + 70) << 16)) & 0x1FFFF;
    *(void *)(v24[482] - 8) += *(_DWORD *)(v23 + 32) & 0x1FFFF;
    *(void *)(v24[485] - 8) += *(_DWORD *)(v23 + 36) & 0x1FFFF;
  }
}

void sub_1657C4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      uint64_t v8 = (uint64_t *)v6[488];
      unint64_t v19 = v6[489];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (uint64_t *)v6[487];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 489), v24);
          uint64_t v8 = (uint64_t *)v6[488];
          uint64_t v10 = (uint64_t *)v6[487];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = (uint64_t *)&v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--unint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      uint64_t v8 = (uint64_t *)v6[488];
      unint64_t v9 = v6[489];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (uint64_t *)v6[487];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 489), v14);
          uint64_t v8 = (uint64_t *)v6[488];
          uint64_t v10 = (uint64_t *)v6[487];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v26 = (uint64_t *)&v15[8 * v11];
        uint64_t v27 = &v15[8 * v14];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--unint64_t v26 = v28;
        }
LABEL_35:
        v6[487] = v26;
        v6[488] = v20;
        v6[489] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[488] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      uint64_t v33 = (uint64_t *)v31[491];
      unint64_t v41 = v31[492];
      if ((unint64_t)v33 >= v41)
      {
        unint64_t v35 = (uint64_t *)v31[490];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 492), v46);
          uint64_t v33 = (uint64_t *)v31[491];
          unint64_t v35 = (uint64_t *)v31[490];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        uint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      uint64_t v33 = (uint64_t *)v31[491];
      unint64_t v34 = v31[492];
      if ((unint64_t)v33 >= v34)
      {
        unint64_t v35 = (uint64_t *)v31[490];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 492), v39);
          uint64_t v33 = (uint64_t *)v31[491];
          unint64_t v35 = (uint64_t *)v31[490];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        uint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[490] = v48;
        v31[491] = v42;
        v31[492] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    uint64_t v42 = v33 + 1;
LABEL_69:
    v31[491] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      int v55 = (uint64_t *)v53[494];
      unint64_t v63 = v53[495];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (uint64_t *)v53[493];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 495), v68);
          int v55 = (uint64_t *)v53[494];
          uint64_t v57 = (uint64_t *)v53[493];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = (uint64_t *)&v69[8 * v65];
        uint64_t v71 = &v69[8 * v68];
        *unint64_t v70 = v54;
        uint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v73 = *--v55;
          *--unint64_t v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      int v55 = (uint64_t *)v53[494];
      unint64_t v56 = v53[495];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (uint64_t *)v53[493];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 495), v61);
          int v55 = (uint64_t *)v53[494];
          uint64_t v57 = (uint64_t *)v53[493];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = (uint64_t *)&v62[8 * v58];
        uint64_t v71 = &v62[8 * v61];
        *unint64_t v70 = v54;
        uint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v72 = *--v55;
          *--unint64_t v70 = v72;
        }
LABEL_99:
        v53[493] = v70;
        v53[494] = v64;
        v53[495] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *int v55 = v54;
    uint64_t v64 = v55 + 1;
LABEL_101:
    v53[494] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v86 = a1[2];
      uint64_t v76 = *(void **)a1[1];
      uint64_t v77 = *(_DWORD *)(v86 + 24) & 0x3FFFFFLL;
      uint64_t v78 = (uint64_t *)v76[497];
      unint64_t v87 = v76[498];
      if ((unint64_t)v78 >= v87)
      {
        int v80 = (uint64_t *)v76[496];
        uint64_t v89 = v78 - v80;
        if (!((unint64_t)(v89 + 1) >> 61))
        {
          unint64_t v90 = v87 - (void)v80;
          unint64_t v91 = (uint64_t)(v87 - (void)v80) >> 2;
          if (v91 <= v89 + 1) {
            unint64_t v91 = v89 + 1;
          }
          if (v90 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v91;
          }
          if (v92)
          {
            uint64_t v93 = (char *)sub_5714((uint64_t)(v76 + 498), v92);
            uint64_t v78 = (uint64_t *)v76[497];
            int v80 = (uint64_t *)v76[496];
          }
          else
          {
            uint64_t v93 = 0;
          }
          unint64_t v94 = (uint64_t *)&v93[8 * v89];
          unint64_t v95 = &v93[8 * v92];
          *unint64_t v94 = v77;
          unint64_t v88 = v94 + 1;
          while (v78 != v80)
          {
            uint64_t v97 = *--v78;
            *--unint64_t v94 = v97;
          }
          goto LABEL_131;
        }
LABEL_136:
        sub_566C();
      }
    }
    else
    {
      if (v74 != 1)
      {
LABEL_134:
        *a2 = 1;
        return;
      }
      uint64_t v75 = a1[2];
      uint64_t v76 = *(void **)a1[1];
      uint64_t v77 = *(_DWORD *)(v75 + 24) & 0x3FFFFFLL;
      uint64_t v78 = (uint64_t *)v76[497];
      unint64_t v79 = v76[498];
      if ((unint64_t)v78 >= v79)
      {
        int v80 = (uint64_t *)v76[496];
        uint64_t v81 = v78 - v80;
        if (!((unint64_t)(v81 + 1) >> 61))
        {
          unint64_t v82 = v79 - (void)v80;
          unint64_t v83 = (uint64_t)(v79 - (void)v80) >> 2;
          if (v83 <= v81 + 1) {
            unint64_t v83 = v81 + 1;
          }
          if (v82 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v83;
          }
          if (v84)
          {
            unint64_t v85 = (char *)sub_5714((uint64_t)(v76 + 498), v84);
            uint64_t v78 = (uint64_t *)v76[497];
            int v80 = (uint64_t *)v76[496];
          }
          else
          {
            unint64_t v85 = 0;
          }
          unint64_t v94 = (uint64_t *)&v85[8 * v81];
          unint64_t v95 = &v85[8 * v84];
          *unint64_t v94 = v77;
          unint64_t v88 = v94 + 1;
          while (v78 != v80)
          {
            uint64_t v96 = *--v78;
            *--unint64_t v94 = v96;
          }
LABEL_131:
          v76[496] = v94;
          v76[497] = v88;
          v76[498] = v95;
          if (v80) {
            operator delete(v80);
          }
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    *uint64_t v78 = v77;
    unint64_t v88 = v78 + 1;
LABEL_133:
    v76[497] = v88;
    goto LABEL_134;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = (_DWORD *)a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[488] - 8) += v17[8] & 0x7FFFF;
    *(void *)(v18[491] - 8) += v17[9] & 0x3FFFFF;
    *(void *)(v18[494] - 8) += v17[7] & 0x3FFFFF;
    *(void *)(v18[497] - 8) += v17[6] & 0x3FFFFF;
  }
}

void sub_165EA4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      uint64_t v8 = (char *)v6[596];
      unint64_t v19 = v6[597];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (char *)v6[595];
        uint64_t v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 597), v24);
          uint64_t v8 = (char *)v6[596];
          uint64_t v10 = (char *)v6[595];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      uint64_t v8 = (char *)v6[596];
      unint64_t v9 = v6[597];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[595];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 597), v14);
          uint64_t v8 = (char *)v6[596];
          uint64_t v10 = (char *)v6[595];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v26 = &v15[8 * v11];
        uint64_t v27 = &v15[8 * v14];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[595] = v26;
        v6[596] = v20;
        v6[597] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint64_t v20 = v8 + 8;
LABEL_37:
    v6[596] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      uint64_t v33 = (uint64_t *)v31[599];
      unint64_t v41 = v31[600];
      if ((unint64_t)v33 >= v41)
      {
        unint64_t v35 = (uint64_t *)v31[598];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 600), v46);
          uint64_t v33 = (uint64_t *)v31[599];
          unint64_t v35 = (uint64_t *)v31[598];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        uint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      uint64_t v33 = (uint64_t *)v31[599];
      unint64_t v34 = v31[600];
      if ((unint64_t)v33 >= v34)
      {
        unint64_t v35 = (uint64_t *)v31[598];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 600), v39);
          uint64_t v33 = (uint64_t *)v31[599];
          unint64_t v35 = (uint64_t *)v31[598];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        uint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[598] = v48;
        v31[599] = v42;
        v31[600] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    uint64_t v42 = v33 + 1;
LABEL_69:
    v31[599] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      int v55 = (char *)v53[602];
      unint64_t v63 = v53[603];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (char *)v53[601];
        uint64_t v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 603), v68);
          int v55 = (char *)v53[602];
          uint64_t v57 = (char *)v53[601];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = &v69[8 * v65];
        uint64_t v71 = &v69[8 * v68];
        *(void *)unint64_t v70 = v54;
        uint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v73 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      int v55 = (char *)v53[602];
      unint64_t v56 = v53[603];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (char *)v53[601];
        uint64_t v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 603), v61);
          int v55 = (char *)v53[602];
          uint64_t v57 = (char *)v53[601];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = &v62[8 * v58];
        uint64_t v71 = &v62[8 * v61];
        *(void *)unint64_t v70 = v54;
        uint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v72 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[601] = v70;
        v53[602] = v64;
        v53[603] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *(void *)int v55 = v54;
    uint64_t v64 = v55 + 8;
LABEL_101:
    v53[602] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v75 = *(void **)a1[1];
      unint64_t v76 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
      uint64_t v77 = (unint64_t *)v75[605];
      unint64_t v85 = v75[606];
      if ((unint64_t)v77 >= v85)
      {
        unint64_t v79 = (unint64_t *)v75[604];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 606), v90);
          uint64_t v77 = (unint64_t *)v75[605];
          unint64_t v79 = (unint64_t *)v75[604];
        }
        else
        {
          unint64_t v91 = 0;
        }
        unint64_t v92 = (unint64_t *)&v91[8 * v87];
        uint64_t v93 = &v91[8 * v90];
        *unint64_t v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          unint64_t v95 = *--v77;
          *--unint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      uint64_t v75 = *(void **)a1[1];
      unint64_t v76 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
      uint64_t v77 = (unint64_t *)v75[605];
      unint64_t v78 = v75[606];
      if ((unint64_t)v77 >= v78)
      {
        unint64_t v79 = (unint64_t *)v75[604];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 606), v83);
          uint64_t v77 = (unint64_t *)v75[605];
          unint64_t v79 = (unint64_t *)v75[604];
        }
        else
        {
          unint64_t v84 = 0;
        }
        unint64_t v92 = (unint64_t *)&v84[8 * v80];
        uint64_t v93 = &v84[8 * v83];
        *unint64_t v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          unint64_t v94 = *--v77;
          *--unint64_t v92 = v94;
        }
LABEL_131:
        v75[604] = v92;
        v75[605] = v86;
        v75[606] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v77 = v76;
    uint64_t v86 = v77 + 1;
LABEL_133:
    v75[605] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      uint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
      uint64_t v99 = (uint64_t *)v97[608];
      unint64_t v107 = v97[609];
      if ((unint64_t)v99 >= v107)
      {
        uint64_t v101 = (uint64_t *)v97[607];
        uint64_t v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v110 = v107 - (void)v101;
        unint64_t v111 = (uint64_t)(v107 - (void)v101) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v97 + 609), v112);
          uint64_t v99 = (uint64_t *)v97[608];
          uint64_t v101 = (uint64_t *)v97[607];
        }
        else
        {
          unint64_t v113 = 0;
        }
        unint64_t v114 = (uint64_t *)&v113[8 * v109];
        uint64_t v115 = &v113[8 * v112];
        *unint64_t v114 = v98;
        uint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v117 = *--v99;
          *--unint64_t v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      uint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
      uint64_t v99 = (uint64_t *)v97[608];
      unint64_t v100 = v97[609];
      if ((unint64_t)v99 >= v100)
      {
        uint64_t v101 = (uint64_t *)v97[607];
        uint64_t v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v103 = v100 - (void)v101;
        unint64_t v104 = (uint64_t)(v100 - (void)v101) >> 2;
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        if (v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v104;
        }
        if (v105)
        {
          unint64_t v106 = (char *)sub_5714((uint64_t)(v97 + 609), v105);
          uint64_t v99 = (uint64_t *)v97[608];
          uint64_t v101 = (uint64_t *)v97[607];
        }
        else
        {
          unint64_t v106 = 0;
        }
        unint64_t v114 = (uint64_t *)&v106[8 * v102];
        uint64_t v115 = &v106[8 * v105];
        *unint64_t v114 = v98;
        uint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v116 = *--v99;
          *--unint64_t v114 = v116;
        }
LABEL_163:
        v97[607] = v114;
        v97[608] = v108;
        v97[609] = v115;
        if (v101) {
          operator delete(v101);
        }
        goto LABEL_165;
      }
    }
    *uint64_t v99 = v98;
    uint64_t v108 = v99 + 1;
LABEL_165:
    v97[608] = v108;
LABEL_166:
    int v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      uint64_t v121 = (uint64_t *)v119[611];
      unint64_t v129 = v119[612];
      if ((unint64_t)v121 >= v129)
      {
        uint64_t v123 = (uint64_t *)v119[610];
        uint64_t v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v132 = v129 - (void)v123;
        unint64_t v133 = (uint64_t)(v129 - (void)v123) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          unint64_t v135 = (char *)sub_5714((uint64_t)(v119 + 612), v134);
          uint64_t v121 = (uint64_t *)v119[611];
          uint64_t v123 = (uint64_t *)v119[610];
        }
        else
        {
          unint64_t v135 = 0;
        }
        unint64_t v136 = (uint64_t *)&v135[8 * v131];
        uint64_t v137 = &v135[8 * v134];
        uint64_t *v136 = v120;
        uint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v139 = *--v121;
          *--unint64_t v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1) {
        goto LABEL_198;
      }
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      uint64_t v121 = (uint64_t *)v119[611];
      unint64_t v122 = v119[612];
      if ((unint64_t)v121 >= v122)
      {
        uint64_t v123 = (uint64_t *)v119[610];
        uint64_t v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v125 = v122 - (void)v123;
        unint64_t v126 = (uint64_t)(v122 - (void)v123) >> 2;
        if (v126 <= v124 + 1) {
          unint64_t v126 = v124 + 1;
        }
        if (v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v126;
        }
        if (v127)
        {
          unint64_t v128 = (char *)sub_5714((uint64_t)(v119 + 612), v127);
          uint64_t v121 = (uint64_t *)v119[611];
          uint64_t v123 = (uint64_t *)v119[610];
        }
        else
        {
          unint64_t v128 = 0;
        }
        unint64_t v136 = (uint64_t *)&v128[8 * v124];
        uint64_t v137 = &v128[8 * v127];
        uint64_t *v136 = v120;
        uint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v138 = *--v121;
          *--unint64_t v136 = v138;
        }
LABEL_195:
        v119[610] = v136;
        v119[611] = v130;
        v119[612] = v137;
        if (v123) {
          operator delete(v123);
        }
        goto LABEL_197;
      }
    }
    *uint64_t v121 = v120;
    uint64_t v130 = v121 + 1;
LABEL_197:
    v119[611] = v130;
LABEL_198:
    int v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
      uint64_t v143 = (char *)v141[614];
      unint64_t v151 = v141[615];
      if ((unint64_t)v143 >= v151)
      {
        uint64_t v145 = (char *)v141[613];
        uint64_t v153 = (v143 - v145) >> 3;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v154 = v151 - (void)v145;
        unint64_t v155 = (uint64_t)(v151 - (void)v145) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          uint64_t v157 = (char *)sub_5714((uint64_t)(v141 + 615), v156);
          uint64_t v143 = (char *)v141[614];
          uint64_t v145 = (char *)v141[613];
        }
        else
        {
          uint64_t v157 = 0;
        }
        uint64_t v158 = &v157[8 * v153];
        unint64_t v159 = &v157[8 * v156];
        *(void *)uint64_t v158 = v142;
        unint64_t v152 = v158 + 8;
        while (v143 != v145)
        {
          uint64_t v161 = *((void *)v143 - 1);
          v143 -= 8;
          *((void *)v158 - 1) = v161;
          v158 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1) {
        goto LABEL_230;
      }
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
      uint64_t v143 = (char *)v141[614];
      unint64_t v144 = v141[615];
      if ((unint64_t)v143 >= v144)
      {
        uint64_t v145 = (char *)v141[613];
        uint64_t v146 = (v143 - v145) >> 3;
        if ((unint64_t)(v146 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v147 = v144 - (void)v145;
        unint64_t v148 = (uint64_t)(v144 - (void)v145) >> 2;
        if (v148 <= v146 + 1) {
          unint64_t v148 = v146 + 1;
        }
        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v149 = v148;
        }
        if (v149)
        {
          unint64_t v150 = (char *)sub_5714((uint64_t)(v141 + 615), v149);
          uint64_t v143 = (char *)v141[614];
          uint64_t v145 = (char *)v141[613];
        }
        else
        {
          unint64_t v150 = 0;
        }
        uint64_t v158 = &v150[8 * v146];
        unint64_t v159 = &v150[8 * v149];
        *(void *)uint64_t v158 = v142;
        unint64_t v152 = v158 + 8;
        while (v143 != v145)
        {
          uint64_t v160 = *((void *)v143 - 1);
          v143 -= 8;
          *((void *)v158 - 1) = v160;
          v158 -= 8;
        }
LABEL_227:
        v141[613] = v158;
        v141[614] = v152;
        v141[615] = v159;
        if (v145) {
          operator delete(v145);
        }
        goto LABEL_229;
      }
    }
    *(void *)uint64_t v143 = v142;
    unint64_t v152 = v143 + 8;
LABEL_229:
    v141[614] = v152;
LABEL_230:
    int v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      unint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      uint64_t v165 = (char *)v163[617];
      unint64_t v173 = v163[618];
      if ((unint64_t)v165 >= v173)
      {
        uint64_t v167 = (char *)v163[616];
        uint64_t v175 = (v165 - v167) >> 3;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v176 = v173 - (void)v167;
        unint64_t v177 = (uint64_t)(v173 - (void)v167) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          unint64_t v179 = (char *)sub_5714((uint64_t)(v163 + 618), v178);
          uint64_t v165 = (char *)v163[617];
          uint64_t v167 = (char *)v163[616];
        }
        else
        {
          unint64_t v179 = 0;
        }
        unint64_t v180 = &v179[8 * v175];
        unint64_t v181 = &v179[8 * v178];
        *(void *)unint64_t v180 = v164;
        unint64_t v174 = v180 + 8;
        while (v165 != v167)
        {
          uint64_t v183 = *((void *)v165 - 1);
          v165 -= 8;
          *((void *)v180 - 1) = v183;
          v180 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1) {
        goto LABEL_262;
      }
      unint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      uint64_t v165 = (char *)v163[617];
      unint64_t v166 = v163[618];
      if ((unint64_t)v165 >= v166)
      {
        uint64_t v167 = (char *)v163[616];
        uint64_t v168 = (v165 - v167) >> 3;
        if ((unint64_t)(v168 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v169 = v166 - (void)v167;
        unint64_t v170 = (uint64_t)(v166 - (void)v167) >> 2;
        if (v170 <= v168 + 1) {
          unint64_t v170 = v168 + 1;
        }
        if (v169 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v171 = v170;
        }
        if (v171)
        {
          uint64_t v172 = (char *)sub_5714((uint64_t)(v163 + 618), v171);
          uint64_t v165 = (char *)v163[617];
          uint64_t v167 = (char *)v163[616];
        }
        else
        {
          uint64_t v172 = 0;
        }
        unint64_t v180 = &v172[8 * v168];
        unint64_t v181 = &v172[8 * v171];
        *(void *)unint64_t v180 = v164;
        unint64_t v174 = v180 + 8;
        while (v165 != v167)
        {
          uint64_t v182 = *((void *)v165 - 1);
          v165 -= 8;
          *((void *)v180 - 1) = v182;
          v180 -= 8;
        }
LABEL_259:
        v163[616] = v180;
        v163[617] = v174;
        v163[618] = v181;
        if (v167) {
          operator delete(v167);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v165 = v164;
    unint64_t v174 = v165 + 8;
LABEL_261:
    v163[617] = v174;
LABEL_262:
    int v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      unint64_t v185 = *(void **)a1[1];
      uint64_t v186 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
      int v187 = (char *)v185[620];
      unint64_t v195 = v185[621];
      if ((unint64_t)v187 >= v195)
      {
        uint64_t v189 = (char *)v185[619];
        uint64_t v197 = (v187 - v189) >> 3;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v198 = v195 - (void)v189;
        unint64_t v199 = (uint64_t)(v195 - (void)v189) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          unint64_t v201 = (char *)sub_5714((uint64_t)(v185 + 621), v200);
          int v187 = (char *)v185[620];
          uint64_t v189 = (char *)v185[619];
        }
        else
        {
          unint64_t v201 = 0;
        }
        unint64_t v202 = &v201[8 * v197];
        unint64_t v203 = &v201[8 * v200];
        *(void *)unint64_t v202 = v186;
        unint64_t v196 = v202 + 8;
        while (v187 != v189)
        {
          uint64_t v205 = *((void *)v187 - 1);
          v187 -= 8;
          *((void *)v202 - 1) = v205;
          v202 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v184 != 1) {
        goto LABEL_294;
      }
      unint64_t v185 = *(void **)a1[1];
      uint64_t v186 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
      int v187 = (char *)v185[620];
      unint64_t v188 = v185[621];
      if ((unint64_t)v187 >= v188)
      {
        uint64_t v189 = (char *)v185[619];
        uint64_t v190 = (v187 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v191 = v188 - (void)v189;
        unint64_t v192 = (uint64_t)(v188 - (void)v189) >> 2;
        if (v192 <= v190 + 1) {
          unint64_t v192 = v190 + 1;
        }
        if (v191 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v193 = v192;
        }
        if (v193)
        {
          uint64_t v194 = (char *)sub_5714((uint64_t)(v185 + 621), v193);
          int v187 = (char *)v185[620];
          uint64_t v189 = (char *)v185[619];
        }
        else
        {
          uint64_t v194 = 0;
        }
        unint64_t v202 = &v194[8 * v190];
        unint64_t v203 = &v194[8 * v193];
        *(void *)unint64_t v202 = v186;
        unint64_t v196 = v202 + 8;
        while (v187 != v189)
        {
          uint64_t v204 = *((void *)v187 - 1);
          v187 -= 8;
          *((void *)v202 - 1) = v204;
          v202 -= 8;
        }
LABEL_291:
        v185[619] = v202;
        v185[620] = v196;
        v185[621] = v203;
        if (v189) {
          operator delete(v189);
        }
        goto LABEL_293;
      }
    }
    *(void *)int v187 = v186;
    unint64_t v196 = v187 + 8;
LABEL_293:
    v185[620] = v196;
LABEL_294:
    int v206 = 1 << *(_DWORD *)(v3 + 48);
    if (v206 == 2)
    {
      uint64_t v218 = a1[2];
      unint64_t v208 = *(void **)a1[1];
      uint64_t v209 = *(_WORD *)(v218 + 26) & 0x3FFF;
      uint64_t v210 = (char *)v208[623];
      unint64_t v219 = v208[624];
      if ((unint64_t)v210 >= v219)
      {
        uint64_t v212 = (char *)v208[622];
        uint64_t v221 = (v210 - v212) >> 3;
        if (!((unint64_t)(v221 + 1) >> 61))
        {
          unint64_t v222 = v219 - (void)v212;
          unint64_t v223 = (uint64_t)(v219 - (void)v212) >> 2;
          if (v223 <= v221 + 1) {
            unint64_t v223 = v221 + 1;
          }
          if (v222 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v224 = v223;
          }
          if (v224)
          {
            unint64_t v225 = (char *)sub_5714((uint64_t)(v208 + 624), v224);
            uint64_t v210 = (char *)v208[623];
            uint64_t v212 = (char *)v208[622];
          }
          else
          {
            unint64_t v225 = 0;
          }
          uint64_t v226 = &v225[8 * v221];
          uint64_t v227 = &v225[8 * v224];
          *(void *)uint64_t v226 = v209;
          uint64_t v220 = v226 + 8;
          while (v210 != v212)
          {
            uint64_t v229 = *((void *)v210 - 1);
            v210 -= 8;
            *((void *)v226 - 1) = v229;
            v226 -= 8;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_566C();
      }
    }
    else
    {
      if (v206 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      uint64_t v207 = a1[2];
      unint64_t v208 = *(void **)a1[1];
      uint64_t v209 = *(_WORD *)(v207 + 26) & 0x3FFF;
      uint64_t v210 = (char *)v208[623];
      unint64_t v211 = v208[624];
      if ((unint64_t)v210 >= v211)
      {
        uint64_t v212 = (char *)v208[622];
        uint64_t v213 = (v210 - v212) >> 3;
        if (!((unint64_t)(v213 + 1) >> 61))
        {
          unint64_t v214 = v211 - (void)v212;
          unint64_t v215 = (uint64_t)(v211 - (void)v212) >> 2;
          if (v215 <= v213 + 1) {
            unint64_t v215 = v213 + 1;
          }
          if (v214 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v215;
          }
          if (v216)
          {
            unint64_t v217 = (char *)sub_5714((uint64_t)(v208 + 624), v216);
            uint64_t v210 = (char *)v208[623];
            uint64_t v212 = (char *)v208[622];
          }
          else
          {
            unint64_t v217 = 0;
          }
          uint64_t v226 = &v217[8 * v213];
          uint64_t v227 = &v217[8 * v216];
          *(void *)uint64_t v226 = v209;
          uint64_t v220 = v226 + 8;
          while (v210 != v212)
          {
            uint64_t v228 = *((void *)v210 - 1);
            v210 -= 8;
            *((void *)v226 - 1) = v228;
            v226 -= 8;
          }
LABEL_323:
          v208[622] = v226;
          v208[623] = v220;
          v208[624] = v227;
          if (v212) {
            operator delete(v212);
          }
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *(void *)uint64_t v210 = v209;
    uint64_t v220 = v210 + 8;
LABEL_325:
    v208[623] = v220;
    goto LABEL_326;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[596] - 8) += *(_WORD *)(v17 + 34) & 0x1FFF;
    *(void *)(v18[599] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
    *(void *)(v18[602] - 8) += *(_WORD *)(v17 + 32) & 0x1FFF;
    *(void *)(v18[605] - 8) += ((unint64_t)*(unsigned int *)(v17 + 36) >> 13) & 0x3FFFF;
    *(void *)(v18[608] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFF;
    *(void *)(v18[611] - 8) += *(_DWORD *)(v17 + 44) & 0x3FFFF;
    *(void *)(v18[614] - 8) += *(_WORD *)(v17 + 28) & 0x3FFF;
    *(void *)(v18[617] - 8) += *(_WORD *)(v17 + 24) & 0x3FFF;
    *(void *)(v18[620] - 8) += *(_WORD *)(v17 + 30) & 0x3FFF;
    *(void *)(v18[623] - 8) += *(_WORD *)(v17 + 26) & 0x3FFF;
  }
}

void sub_166FB4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    int v297 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v296 = *v297;
    uint64_t v298 = (char *)v297[1] - (char *)*v297;
    if (v298)
    {
      unint64_t v299 = v298 >> 2;
      if (v299 <= 1) {
        unint64_t v299 = 1;
      }
      do
      {
        int v300 = *v296++;
        switch(v300)
        {
          case 144:
            unint64_t v301 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4240);
            goto LABEL_410;
          case 145:
            unint64_t v301 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4264);
            goto LABEL_410;
          case 146:
            unint64_t v301 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4288);
            goto LABEL_410;
          case 147:
            unint64_t v301 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4312);
            goto LABEL_410;
          case 148:
            unint64_t v301 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4336);
            goto LABEL_410;
          case 149:
            unint64_t v301 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4360);
            goto LABEL_410;
          case 150:
            unint64_t v301 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            int v302 = (void *)(*(void *)a1[2] + 4384);
            goto LABEL_410;
          case 151:
            unint64_t v301 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4408);
            goto LABEL_410;
          case 152:
            unint64_t v301 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4432);
            goto LABEL_410;
          case 153:
            unint64_t v301 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4456);
            goto LABEL_410;
          case 154:
            unint64_t v301 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4480);
            goto LABEL_410;
          case 155:
            unint64_t v301 = *(_WORD *)(a1[3] + 56) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4504);
            goto LABEL_410;
          case 156:
            unint64_t v301 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            int v302 = (void *)(*(void *)a1[2] + 4528);
            goto LABEL_410;
          case 157:
            unint64_t v301 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            int v302 = (void *)(*(void *)a1[2] + 4552);
            goto LABEL_410;
          case 158:
            unint64_t v301 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            int v302 = (void *)(*(void *)a1[2] + 4576);
            goto LABEL_410;
          case 159:
            unint64_t v301 = *(_WORD *)(a1[3] + 50) & 0x7FF;
            int v302 = (void *)(*(void *)a1[2] + 4600);
            goto LABEL_410;
          case 160:
            unint64_t v301 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            int v302 = (void *)(*(void *)a1[2] + 4624);
            goto LABEL_410;
          case 161:
            unint64_t v301 = *(_WORD *)(a1[3] + 64) & 0x1FF;
            int v302 = (void *)(*(void *)a1[2] + 4648);
            goto LABEL_410;
          case 162:
            unint64_t v301 = *(_WORD *)(a1[3] + 46) & 0x1FF;
            int v302 = (void *)(*(void *)a1[2] + 4672);
            goto LABEL_410;
          case 163:
            unint64_t v301 = *(_WORD *)(a1[3] + 66) & 0x1FF;
            int v302 = (void *)(*(void *)a1[2] + 4696);
            goto LABEL_410;
          case 164:
            unint64_t v301 = *(_WORD *)(a1[3] + 48) & 0x1FF;
            int v302 = (void *)(*(void *)a1[2] + 4720);
            goto LABEL_410;
          case 165:
            unint64_t v301 = (unint64_t)*(unsigned int *)(a1[3] + 28) >> 18;
            int v302 = (void *)(*(void *)a1[2] + 4744);
LABEL_410:
            *(void *)(*v302 - 8) += v301;
            break;
          default:
            break;
        }
        --v299;
      }
      while (v299);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x90:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            unint64_t v12 = (char *)v10[530];
            unint64_t v13 = v10[531];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v120 = (char *)v10[529];
              uint64_t v121 = (v12 - v120) >> 3;
              if ((unint64_t)(v121 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v122 = v13 - (void)v120;
              unint64_t v123 = (uint64_t)(v13 - (void)v120) >> 2;
              if (v123 <= v121 + 1) {
                unint64_t v123 = v121 + 1;
              }
              if (v122 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v124 = v123;
              }
              if (v124)
              {
                unint64_t v125 = (char *)sub_5714((uint64_t)(v10 + 531), v124);
                unint64_t v12 = (char *)v10[530];
                uint64_t v120 = (char *)v10[529];
              }
              else
              {
                unint64_t v125 = 0;
              }
              unint64_t v252 = &v125[8 * v121];
              *(void *)unint64_t v252 = v11;
              unint64_t v14 = v252 + 8;
              while (v12 != v120)
              {
                uint64_t v253 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v252 - 1) = v253;
                v252 -= 8;
              }
              v10[529] = v252;
              v10[530] = v14;
              v10[531] = &v125[8 * v124];
              if (v120) {
                operator delete(v120);
              }
            }
            else
            {
              *(void *)unint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[530] = v14;
            break;
          case 0x91:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            uint64_t v17 = (char *)v15[533];
            unint64_t v18 = v15[534];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v126 = (char *)v15[532];
              uint64_t v127 = (v17 - v126) >> 3;
              if ((unint64_t)(v127 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v128 = v18 - (void)v126;
              unint64_t v129 = (uint64_t)(v18 - (void)v126) >> 2;
              if (v129 <= v127 + 1) {
                unint64_t v129 = v127 + 1;
              }
              if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130)
              {
                uint64_t v131 = (char *)sub_5714((uint64_t)(v15 + 534), v130);
                uint64_t v17 = (char *)v15[533];
                unint64_t v126 = (char *)v15[532];
              }
              else
              {
                uint64_t v131 = 0;
              }
              int v254 = &v131[8 * v127];
              *(void *)int v254 = v16;
              unint64_t v19 = v254 + 8;
              while (v17 != v126)
              {
                uint64_t v255 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v254 - 1) = v255;
                v254 -= 8;
              }
              v15[532] = v254;
              v15[533] = v19;
              v15[534] = &v131[8 * v130];
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[533] = v19;
            break;
          case 0x92:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            unint64_t v22 = (char *)v20[536];
            unint64_t v23 = v20[537];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v132 = (char *)v20[535];
              uint64_t v133 = (v22 - v132) >> 3;
              if ((unint64_t)(v133 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v134 = v23 - (void)v132;
              unint64_t v135 = (uint64_t)(v23 - (void)v132) >> 2;
              if (v135 <= v133 + 1) {
                unint64_t v135 = v133 + 1;
              }
              if (v134 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v136 = v135;
              }
              if (v136)
              {
                uint64_t v137 = (char *)sub_5714((uint64_t)(v20 + 537), v136);
                unint64_t v22 = (char *)v20[536];
                unint64_t v132 = (char *)v20[535];
              }
              else
              {
                uint64_t v137 = 0;
              }
              uint64_t v256 = &v137[8 * v133];
              *(void *)uint64_t v256 = v21;
              unint64_t v24 = v256 + 8;
              while (v22 != v132)
              {
                uint64_t v257 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v256 - 1) = v257;
                v256 -= 8;
              }
              v20[535] = v256;
              v20[536] = v24;
              v20[537] = &v137[8 * v136];
              if (v132) {
                operator delete(v132);
              }
            }
            else
            {
              *(void *)unint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[536] = v24;
            break;
          case 0x93:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            uint64_t v27 = (char *)v25[539];
            unint64_t v28 = v25[540];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v138 = (char *)v25[538];
              uint64_t v139 = (v27 - v138) >> 3;
              if ((unint64_t)(v139 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v140 = v28 - (void)v138;
              unint64_t v141 = (uint64_t)(v28 - (void)v138) >> 2;
              if (v141 <= v139 + 1) {
                unint64_t v141 = v139 + 1;
              }
              if (v140 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v141;
              }
              if (v142)
              {
                uint64_t v143 = (char *)sub_5714((uint64_t)(v25 + 540), v142);
                uint64_t v27 = (char *)v25[539];
                uint64_t v138 = (char *)v25[538];
              }
              else
              {
                uint64_t v143 = 0;
              }
              int v258 = &v143[8 * v139];
              *(void *)int v258 = v26;
              uint64_t v29 = v258 + 8;
              while (v27 != v138)
              {
                uint64_t v259 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v258 - 1) = v259;
                v258 -= 8;
              }
              v25[538] = v258;
              v25[539] = v29;
              v25[540] = &v143[8 * v142];
              if (v138) {
                operator delete(v138);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              uint64_t v29 = v27 + 8;
            }
            v25[539] = v29;
            break;
          case 0x94:
            int v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            uint64_t v32 = (char *)v30[542];
            unint64_t v33 = v30[543];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v144 = (char *)v30[541];
              uint64_t v145 = (v32 - v144) >> 3;
              if ((unint64_t)(v145 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v146 = v33 - (void)v144;
              unint64_t v147 = (uint64_t)(v33 - (void)v144) >> 2;
              if (v147 <= v145 + 1) {
                unint64_t v147 = v145 + 1;
              }
              if (v146 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v148 = v147;
              }
              if (v148)
              {
                unint64_t v149 = (char *)sub_5714((uint64_t)(v30 + 543), v148);
                uint64_t v32 = (char *)v30[542];
                unint64_t v144 = (char *)v30[541];
              }
              else
              {
                unint64_t v149 = 0;
              }
              uint64_t v260 = &v149[8 * v145];
              *(void *)uint64_t v260 = v31;
              unint64_t v34 = v260 + 8;
              while (v32 != v144)
              {
                uint64_t v261 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v260 - 1) = v261;
                v260 -= 8;
              }
              v30[541] = v260;
              v30[542] = v34;
              v30[543] = &v149[8 * v148];
              if (v144) {
                operator delete(v144);
              }
            }
            else
            {
              *(void *)uint64_t v32 = v31;
              unint64_t v34 = v32 + 8;
            }
            v30[542] = v34;
            break;
          case 0x95:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            unint64_t v37 = (char *)v35[545];
            unint64_t v38 = v35[546];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v150 = (char *)v35[544];
              uint64_t v151 = (v37 - v150) >> 3;
              if ((unint64_t)(v151 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v152 = v38 - (void)v150;
              unint64_t v153 = (uint64_t)(v38 - (void)v150) >> 2;
              if (v153 <= v151 + 1) {
                unint64_t v153 = v151 + 1;
              }
              if (v152 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v153;
              }
              if (v154)
              {
                unint64_t v155 = (char *)sub_5714((uint64_t)(v35 + 546), v154);
                unint64_t v37 = (char *)v35[545];
                unint64_t v150 = (char *)v35[544];
              }
              else
              {
                unint64_t v155 = 0;
              }
              unint64_t v262 = &v155[8 * v151];
              *(void *)unint64_t v262 = v36;
              unint64_t v39 = v262 + 8;
              while (v37 != v150)
              {
                uint64_t v263 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v262 - 1) = v263;
                v262 -= 8;
              }
              v35[544] = v262;
              v35[545] = v39;
              v35[546] = &v155[8 * v154];
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *(void *)unint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[545] = v39;
            break;
          case 0x96:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            uint64_t v42 = (uint64_t *)v40[548];
            unint64_t v43 = v40[549];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v156 = (uint64_t *)v40[547];
              uint64_t v157 = v42 - v156;
              if ((unint64_t)(v157 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v158 = v43 - (void)v156;
              unint64_t v159 = (uint64_t)(v43 - (void)v156) >> 2;
              if (v159 <= v157 + 1) {
                unint64_t v159 = v157 + 1;
              }
              if (v158 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v160 = v159;
              }
              if (v160)
              {
                uint64_t v161 = (char *)sub_5714((uint64_t)(v40 + 549), v160);
                uint64_t v42 = (uint64_t *)v40[548];
                unint64_t v156 = (uint64_t *)v40[547];
              }
              else
              {
                uint64_t v161 = 0;
              }
              uint64_t v264 = (uint64_t *)&v161[8 * v157];
              *uint64_t v264 = v41;
              unint64_t v44 = v264 + 1;
              while (v42 != v156)
              {
                uint64_t v265 = *--v42;
                *--uint64_t v264 = v265;
              }
              v40[547] = v264;
              v40[548] = v44;
              v40[549] = &v161[8 * v160];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *uint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[548] = v44;
            break;
          case 0x97:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            unint64_t v47 = (char *)v45[551];
            unint64_t v48 = v45[552];
            if ((unint64_t)v47 >= v48)
            {
              int v162 = (char *)v45[550];
              uint64_t v163 = (v47 - v162) >> 3;
              if ((unint64_t)(v163 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v164 = v48 - (void)v162;
              unint64_t v165 = (uint64_t)(v48 - (void)v162) >> 2;
              if (v165 <= v163 + 1) {
                unint64_t v165 = v163 + 1;
              }
              if (v164 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v166 = v165;
              }
              if (v166)
              {
                uint64_t v167 = (char *)sub_5714((uint64_t)(v45 + 552), v166);
                unint64_t v47 = (char *)v45[551];
                int v162 = (char *)v45[550];
              }
              else
              {
                uint64_t v167 = 0;
              }
              unint64_t v266 = &v167[8 * v163];
              *(void *)unint64_t v266 = v46;
              uint64_t v49 = v266 + 8;
              while (v47 != v162)
              {
                uint64_t v267 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v266 - 1) = v267;
                v266 -= 8;
              }
              v45[550] = v266;
              v45[551] = v49;
              v45[552] = &v167[8 * v166];
              if (v162) {
                operator delete(v162);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[551] = v49;
            break;
          case 0x98:
            uint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            int v52 = (char *)v50[554];
            unint64_t v53 = v50[555];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v168 = (char *)v50[553];
              uint64_t v169 = (v52 - v168) >> 3;
              if ((unint64_t)(v169 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v170 = v53 - (void)v168;
              unint64_t v171 = (uint64_t)(v53 - (void)v168) >> 2;
              if (v171 <= v169 + 1) {
                unint64_t v171 = v169 + 1;
              }
              if (v170 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v172 = v171;
              }
              if (v172)
              {
                unint64_t v173 = (char *)sub_5714((uint64_t)(v50 + 555), v172);
                int v52 = (char *)v50[554];
                uint64_t v168 = (char *)v50[553];
              }
              else
              {
                unint64_t v173 = 0;
              }
              unint64_t v268 = &v173[8 * v169];
              *(void *)unint64_t v268 = v51;
              uint64_t v54 = v268 + 8;
              while (v52 != v168)
              {
                uint64_t v269 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v268 - 1) = v269;
                v268 -= 8;
              }
              v50[553] = v268;
              v50[554] = v54;
              v50[555] = &v173[8 * v172];
              if (v168) {
                operator delete(v168);
              }
            }
            else
            {
              *(void *)int v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[554] = v54;
            break;
          case 0x99:
            int v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            uint64_t v57 = (char *)v55[557];
            unint64_t v58 = v55[558];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v174 = (char *)v55[556];
              uint64_t v175 = (v57 - v174) >> 3;
              if ((unint64_t)(v175 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v176 = v58 - (void)v174;
              unint64_t v177 = (uint64_t)(v58 - (void)v174) >> 2;
              if (v177 <= v175 + 1) {
                unint64_t v177 = v175 + 1;
              }
              if (v176 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v178 = v177;
              }
              if (v178)
              {
                unint64_t v179 = (char *)sub_5714((uint64_t)(v55 + 558), v178);
                uint64_t v57 = (char *)v55[557];
                unint64_t v174 = (char *)v55[556];
              }
              else
              {
                unint64_t v179 = 0;
              }
              uint64_t v270 = &v179[8 * v175];
              *(void *)uint64_t v270 = v56;
              unint64_t v59 = v270 + 8;
              while (v57 != v174)
              {
                uint64_t v271 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v270 - 1) = v271;
                v270 -= 8;
              }
              v55[556] = v270;
              v55[557] = v59;
              v55[558] = &v179[8 * v178];
              if (v174) {
                operator delete(v174);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[557] = v59;
            break;
          case 0x9A:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            unint64_t v62 = (char *)v60[560];
            unint64_t v63 = v60[561];
            if ((unint64_t)v62 >= v63)
            {
              unint64_t v180 = (char *)v60[559];
              uint64_t v181 = (v62 - v180) >> 3;
              if ((unint64_t)(v181 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v182 = v63 - (void)v180;
              unint64_t v183 = (uint64_t)(v63 - (void)v180) >> 2;
              if (v183 <= v181 + 1) {
                unint64_t v183 = v181 + 1;
              }
              if (v182 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v184 = v183;
              }
              if (v184)
              {
                unint64_t v185 = (char *)sub_5714((uint64_t)(v60 + 561), v184);
                unint64_t v62 = (char *)v60[560];
                unint64_t v180 = (char *)v60[559];
              }
              else
              {
                unint64_t v185 = 0;
              }
              unint64_t v272 = &v185[8 * v181];
              *(void *)unint64_t v272 = v61;
              uint64_t v64 = v272 + 8;
              while (v62 != v180)
              {
                uint64_t v273 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v272 - 1) = v273;
                v272 -= 8;
              }
              v60[559] = v272;
              v60[560] = v64;
              v60[561] = &v185[8 * v184];
              if (v180) {
                operator delete(v180);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              uint64_t v64 = v62 + 8;
            }
            v60[560] = v64;
            break;
          case 0x9B:
            uint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 56) & 0x3FFF;
            unint64_t v67 = (char *)v65[563];
            unint64_t v68 = v65[564];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v186 = (char *)v65[562];
              uint64_t v187 = (v67 - v186) >> 3;
              if ((unint64_t)(v187 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v188 = v68 - (void)v186;
              unint64_t v189 = (uint64_t)(v68 - (void)v186) >> 2;
              if (v189 <= v187 + 1) {
                unint64_t v189 = v187 + 1;
              }
              if (v188 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v190 = v189;
              }
              if (v190)
              {
                unint64_t v191 = (char *)sub_5714((uint64_t)(v65 + 564), v190);
                unint64_t v67 = (char *)v65[563];
                uint64_t v186 = (char *)v65[562];
              }
              else
              {
                unint64_t v191 = 0;
              }
              unint64_t v274 = &v191[8 * v187];
              *(void *)unint64_t v274 = v66;
              unint64_t v69 = v274 + 8;
              while (v67 != v186)
              {
                uint64_t v275 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v274 - 1) = v275;
                v274 -= 8;
              }
              v65[562] = v274;
              v65[563] = v69;
              v65[564] = &v191[8 * v190];
              if (v186) {
                operator delete(v186);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[563] = v69;
            break;
          case 0x9C:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            uint64_t v72 = (char *)v70[566];
            unint64_t v73 = v70[567];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v192 = (char *)v70[565];
              uint64_t v193 = (v72 - v192) >> 3;
              if ((unint64_t)(v193 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v194 = v73 - (void)v192;
              unint64_t v195 = (uint64_t)(v73 - (void)v192) >> 2;
              if (v195 <= v193 + 1) {
                unint64_t v195 = v193 + 1;
              }
              if (v194 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v196 = v195;
              }
              if (v196)
              {
                uint64_t v197 = (char *)sub_5714((uint64_t)(v70 + 567), v196);
                uint64_t v72 = (char *)v70[566];
                unint64_t v192 = (char *)v70[565];
              }
              else
              {
                uint64_t v197 = 0;
              }
              int v276 = &v197[8 * v193];
              *(void *)int v276 = v71;
              int v74 = v276 + 8;
              while (v72 != v192)
              {
                uint64_t v277 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v276 - 1) = v277;
                v276 -= 8;
              }
              v70[565] = v276;
              v70[566] = v74;
              v70[567] = &v197[8 * v196];
              if (v192) {
                operator delete(v192);
              }
            }
            else
            {
              *(void *)uint64_t v72 = v71;
              int v74 = v72 + 8;
            }
            v70[566] = v74;
            break;
          case 0x9D:
            uint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            uint64_t v77 = (uint64_t *)v75[569];
            unint64_t v78 = v75[570];
            if ((unint64_t)v77 >= v78)
            {
              unint64_t v198 = (uint64_t *)v75[568];
              uint64_t v199 = v77 - v198;
              if ((unint64_t)(v199 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v200 = v78 - (void)v198;
              unint64_t v201 = (uint64_t)(v78 - (void)v198) >> 2;
              if (v201 <= v199 + 1) {
                unint64_t v201 = v199 + 1;
              }
              if (v200 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v202 = v201;
              }
              if (v202)
              {
                unint64_t v203 = (char *)sub_5714((uint64_t)(v75 + 570), v202);
                uint64_t v77 = (uint64_t *)v75[569];
                unint64_t v198 = (uint64_t *)v75[568];
              }
              else
              {
                unint64_t v203 = 0;
              }
              uint64_t v278 = (uint64_t *)&v203[8 * v199];
              *uint64_t v278 = v76;
              unint64_t v79 = v278 + 1;
              while (v77 != v198)
              {
                uint64_t v279 = *--v77;
                *--uint64_t v278 = v279;
              }
              v75[568] = v278;
              v75[569] = v79;
              v75[570] = &v203[8 * v202];
              if (v198) {
                operator delete(v198);
              }
            }
            else
            {
              *uint64_t v77 = v76;
              unint64_t v79 = v77 + 1;
            }
            v75[569] = v79;
            break;
          case 0x9E:
            uint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            unint64_t v82 = (char *)v80[572];
            unint64_t v83 = v80[573];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v204 = (char *)v80[571];
              uint64_t v205 = (v82 - v204) >> 3;
              if ((unint64_t)(v205 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v206 = v83 - (void)v204;
              unint64_t v207 = (uint64_t)(v83 - (void)v204) >> 2;
              if (v207 <= v205 + 1) {
                unint64_t v207 = v205 + 1;
              }
              if (v206 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v208 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v208 = v207;
              }
              if (v208)
              {
                uint64_t v209 = (char *)sub_5714((uint64_t)(v80 + 573), v208);
                unint64_t v82 = (char *)v80[572];
                uint64_t v204 = (char *)v80[571];
              }
              else
              {
                uint64_t v209 = 0;
              }
              int v280 = &v209[8 * v205];
              *(void *)int v280 = v81;
              unint64_t v84 = v280 + 8;
              while (v82 != v204)
              {
                uint64_t v281 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v280 - 1) = v281;
                v280 -= 8;
              }
              v80[571] = v280;
              v80[572] = v84;
              v80[573] = &v209[8 * v208];
              if (v204) {
                operator delete(v204);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[572] = v84;
            break;
          case 0x9F:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 50) & 0x7FF;
            uint64_t v87 = (char *)v85[575];
            unint64_t v88 = v85[576];
            if ((unint64_t)v87 >= v88)
            {
              uint64_t v210 = (char *)v85[574];
              uint64_t v211 = (v87 - v210) >> 3;
              if ((unint64_t)(v211 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v212 = v88 - (void)v210;
              unint64_t v213 = (uint64_t)(v88 - (void)v210) >> 2;
              if (v213 <= v211 + 1) {
                unint64_t v213 = v211 + 1;
              }
              if (v212 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v214 = v213;
              }
              if (v214)
              {
                unint64_t v215 = (char *)sub_5714((uint64_t)(v85 + 576), v214);
                uint64_t v87 = (char *)v85[575];
                uint64_t v210 = (char *)v85[574];
              }
              else
              {
                unint64_t v215 = 0;
              }
              uint64_t v282 = &v215[8 * v211];
              *(void *)uint64_t v282 = v86;
              unint64_t v89 = v282 + 8;
              while (v87 != v210)
              {
                uint64_t v283 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v282 - 1) = v283;
                v282 -= 8;
              }
              v85[574] = v282;
              v85[575] = v89;
              v85[576] = &v215[8 * v214];
              if (v210) {
                operator delete(v210);
              }
            }
            else
            {
              *(void *)uint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[575] = v89;
            break;
          case 0xA0:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            unint64_t v92 = (char *)v90[578];
            unint64_t v93 = v90[579];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v216 = (char *)v90[577];
              uint64_t v217 = (v92 - v216) >> 3;
              if ((unint64_t)(v217 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v218 = v93 - (void)v216;
              unint64_t v219 = (uint64_t)(v93 - (void)v216) >> 2;
              if (v219 <= v217 + 1) {
                unint64_t v219 = v217 + 1;
              }
              if (v218 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v220 = v219;
              }
              if (v220)
              {
                uint64_t v221 = (char *)sub_5714((uint64_t)(v90 + 579), v220);
                unint64_t v92 = (char *)v90[578];
                unint64_t v216 = (char *)v90[577];
              }
              else
              {
                uint64_t v221 = 0;
              }
              unint64_t v284 = &v221[8 * v217];
              *(void *)unint64_t v284 = v91;
              unint64_t v94 = v284 + 8;
              while (v92 != v216)
              {
                uint64_t v285 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v284 - 1) = v285;
                v284 -= 8;
              }
              v90[577] = v284;
              v90[578] = v94;
              v90[579] = &v221[8 * v220];
              if (v216) {
                operator delete(v216);
              }
            }
            else
            {
              *(void *)unint64_t v92 = v91;
              unint64_t v94 = v92 + 8;
            }
            v90[578] = v94;
            break;
          case 0xA1:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 64) & 0x1FF;
            uint64_t v97 = (char *)v95[581];
            unint64_t v98 = v95[582];
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v222 = (char *)v95[580];
              uint64_t v223 = (v97 - v222) >> 3;
              if ((unint64_t)(v223 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v224 = v98 - (void)v222;
              unint64_t v225 = (uint64_t)(v98 - (void)v222) >> 2;
              if (v225 <= v223 + 1) {
                unint64_t v225 = v223 + 1;
              }
              if (v224 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v226 = v225;
              }
              if (v226)
              {
                uint64_t v227 = (char *)sub_5714((uint64_t)(v95 + 582), v226);
                uint64_t v97 = (char *)v95[581];
                unint64_t v222 = (char *)v95[580];
              }
              else
              {
                uint64_t v227 = 0;
              }
              uint64_t v286 = &v227[8 * v223];
              *(void *)uint64_t v286 = v96;
              uint64_t v99 = v286 + 8;
              while (v97 != v222)
              {
                uint64_t v287 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v286 - 1) = v287;
                v286 -= 8;
              }
              v95[580] = v286;
              v95[581] = v99;
              v95[582] = &v227[8 * v226];
              if (v222) {
                operator delete(v222);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              uint64_t v99 = v97 + 8;
            }
            v95[581] = v99;
            break;
          case 0xA2:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 46) & 0x1FF;
            uint64_t v102 = (char *)v100[584];
            unint64_t v103 = v100[585];
            if ((unint64_t)v102 >= v103)
            {
              uint64_t v228 = (char *)v100[583];
              uint64_t v229 = (v102 - v228) >> 3;
              if ((unint64_t)(v229 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v230 = v103 - (void)v228;
              unint64_t v231 = (uint64_t)(v103 - (void)v228) >> 2;
              if (v231 <= v229 + 1) {
                unint64_t v231 = v229 + 1;
              }
              if (v230 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v232 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v232 = v231;
              }
              if (v232)
              {
                uint64_t v233 = (char *)sub_5714((uint64_t)(v100 + 585), v232);
                uint64_t v102 = (char *)v100[584];
                uint64_t v228 = (char *)v100[583];
              }
              else
              {
                uint64_t v233 = 0;
              }
              unint64_t v288 = &v233[8 * v229];
              *(void *)unint64_t v288 = v101;
              unint64_t v104 = v288 + 8;
              while (v102 != v228)
              {
                uint64_t v289 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v288 - 1) = v289;
                v288 -= 8;
              }
              v100[583] = v288;
              v100[584] = v104;
              v100[585] = &v233[8 * v232];
              if (v228) {
                operator delete(v228);
              }
            }
            else
            {
              *(void *)uint64_t v102 = v101;
              unint64_t v104 = v102 + 8;
            }
            v100[584] = v104;
            break;
          case 0xA3:
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 66) & 0x1FF;
            unint64_t v107 = (char *)v105[587];
            unint64_t v108 = v105[588];
            if ((unint64_t)v107 >= v108)
            {
              uint64_t v234 = (char *)v105[586];
              uint64_t v235 = (v107 - v234) >> 3;
              if ((unint64_t)(v235 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v236 = v108 - (void)v234;
              unint64_t v237 = (uint64_t)(v108 - (void)v234) >> 2;
              if (v237 <= v235 + 1) {
                unint64_t v237 = v235 + 1;
              }
              if (v236 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v238 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v238 = v237;
              }
              if (v238)
              {
                unint64_t v239 = (char *)sub_5714((uint64_t)(v105 + 588), v238);
                unint64_t v107 = (char *)v105[587];
                uint64_t v234 = (char *)v105[586];
              }
              else
              {
                unint64_t v239 = 0;
              }
              unint64_t v290 = &v239[8 * v235];
              *(void *)unint64_t v290 = v106;
              uint64_t v109 = v290 + 8;
              while (v107 != v234)
              {
                uint64_t v291 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v290 - 1) = v291;
                v290 -= 8;
              }
              v105[586] = v290;
              v105[587] = v109;
              v105[588] = &v239[8 * v238];
              if (v234) {
                operator delete(v234);
              }
            }
            else
            {
              *(void *)unint64_t v107 = v106;
              uint64_t v109 = v107 + 8;
            }
            v105[587] = v109;
            break;
          case 0xA4:
            unint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 48) & 0x1FF;
            unint64_t v112 = (char *)v110[590];
            unint64_t v113 = v110[591];
            if ((unint64_t)v112 >= v113)
            {
              unint64_t v240 = (char *)v110[589];
              uint64_t v241 = (v112 - v240) >> 3;
              if ((unint64_t)(v241 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v242 = v113 - (void)v240;
              unint64_t v243 = (uint64_t)(v113 - (void)v240) >> 2;
              if (v243 <= v241 + 1) {
                unint64_t v243 = v241 + 1;
              }
              if (v242 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v244 = v243;
              }
              if (v244)
              {
                unint64_t v245 = (char *)sub_5714((uint64_t)(v110 + 591), v244);
                unint64_t v112 = (char *)v110[590];
                unint64_t v240 = (char *)v110[589];
              }
              else
              {
                unint64_t v245 = 0;
              }
              uint64_t v292 = &v245[8 * v241];
              *(void *)uint64_t v292 = v111;
              unint64_t v114 = v292 + 8;
              while (v112 != v240)
              {
                uint64_t v293 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v292 - 1) = v293;
                v292 -= 8;
              }
              v110[589] = v292;
              v110[590] = v114;
              v110[591] = &v245[8 * v244];
              if (v240) {
                operator delete(v240);
              }
            }
            else
            {
              *(void *)unint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[590] = v114;
            break;
          case 0xA5:
            uint64_t v115 = *(void **)a1[2];
            unint64_t v116 = (unint64_t)*(unsigned int *)(a1[3] + 28) >> 18;
            uint64_t v117 = (unint64_t *)v115[593];
            unint64_t v118 = v115[594];
            if ((unint64_t)v117 >= v118)
            {
              unint64_t v246 = (unint64_t *)v115[592];
              uint64_t v247 = v117 - v246;
              if ((unint64_t)(v247 + 1) >> 61) {
LABEL_414:
              }
                sub_566C();
              unint64_t v248 = v118 - (void)v246;
              unint64_t v249 = (uint64_t)(v118 - (void)v246) >> 2;
              if (v249 <= v247 + 1) {
                unint64_t v249 = v247 + 1;
              }
              if (v248 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v250 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v250 = v249;
              }
              if (v250)
              {
                unint64_t v251 = (char *)sub_5714((uint64_t)(v115 + 594), v250);
                uint64_t v117 = (unint64_t *)v115[593];
                unint64_t v246 = (unint64_t *)v115[592];
              }
              else
              {
                unint64_t v251 = 0;
              }
              unint64_t v294 = (unint64_t *)&v251[8 * v247];
              *unint64_t v294 = v116;
              uint64_t v119 = v294 + 1;
              while (v117 != v246)
              {
                unint64_t v295 = *--v117;
                *--unint64_t v294 = v295;
              }
              v115[592] = v294;
              v115[593] = v119;
              v115[594] = &v251[8 * v250];
              if (v246) {
                operator delete(v246);
              }
            }
            else
            {
              *uint64_t v117 = v116;
              uint64_t v119 = v117 + 1;
            }
            v115[593] = v119;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_16854C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v143 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v142 = *v143;
    uint64_t v144 = (char *)v143[1] - (char *)*v143;
    if (v144)
    {
      unint64_t v145 = v144 >> 2;
      if (v145 <= 1) {
        unint64_t v145 = 1;
      }
      do
      {
        int v146 = *v142++;
        switch(v146)
        {
          case 176:
            uint64_t v147 = *(_DWORD *)(a1[3] + 44) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 5008);
            goto LABEL_194;
          case 177:
            uint64_t v147 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 5032);
            goto LABEL_194;
          case 178:
            uint64_t v147 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 5056);
            goto LABEL_194;
          case 179:
            uint64_t v147 = *(unsigned __int16 *)(a1[3] + 58);
            unint64_t v148 = (void *)(*(void *)a1[2] + 5080);
            goto LABEL_194;
          case 180:
            uint64_t v147 = *(unsigned __int16 *)(a1[3] + 56);
            unint64_t v148 = (void *)(*(void *)a1[2] + 5104);
            goto LABEL_194;
          case 181:
            uint64_t v147 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 5128);
            goto LABEL_194;
          case 182:
            uint64_t v147 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 5152);
            goto LABEL_194;
          case 183:
            uint64_t v147 = *(_DWORD *)(a1[3] + 40) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 5176);
            goto LABEL_194;
          case 184:
            uint64_t v147 = *(_DWORD *)(a1[3] + 24) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 5200);
            goto LABEL_194;
          case 185:
            uint64_t v147 = *(_DWORD *)(a1[3] + 28) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 5224);
LABEL_194:
            *(void *)(*v148 - 8) += v147;
            break;
          default:
            break;
        }
        --v145;
      }
      while (v145);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xB0:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 44) & 0xFFFFFLL;
            unint64_t v12 = (uint64_t *)v10[626];
            unint64_t v13 = v10[627];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v62 = (uint64_t *)v10[625];
              uint64_t v63 = v12 - v62;
              if ((unint64_t)(v63 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v64 = v13 - (void)v62;
              unint64_t v65 = (uint64_t)(v13 - (void)v62) >> 2;
              if (v65 <= v63 + 1) {
                unint64_t v65 = v63 + 1;
              }
              if (v64 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v66 = v65;
              }
              if (v66)
              {
                unint64_t v67 = (char *)sub_5714((uint64_t)(v10 + 627), v66);
                unint64_t v12 = (uint64_t *)v10[626];
                unint64_t v62 = (uint64_t *)v10[625];
              }
              else
              {
                unint64_t v67 = 0;
              }
              unint64_t v122 = (uint64_t *)&v67[8 * v63];
              *unint64_t v122 = v11;
              unint64_t v14 = v122 + 1;
              while (v12 != v62)
              {
                uint64_t v123 = *--v12;
                *--unint64_t v122 = v123;
              }
              v10[625] = v122;
              v10[626] = v14;
              v10[627] = &v67[8 * v66];
              if (v62) {
                operator delete(v62);
              }
            }
            else
            {
              *unint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[626] = v14;
            break;
          case 0xB1:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            uint64_t v17 = (uint64_t *)v15[629];
            unint64_t v18 = v15[630];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v68 = (uint64_t *)v15[628];
              uint64_t v69 = v17 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v70 = v18 - (void)v68;
              unint64_t v71 = (uint64_t)(v18 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                unint64_t v73 = (char *)sub_5714((uint64_t)(v15 + 630), v72);
                uint64_t v17 = (uint64_t *)v15[629];
                unint64_t v68 = (uint64_t *)v15[628];
              }
              else
              {
                unint64_t v73 = 0;
              }
              unint64_t v124 = (uint64_t *)&v73[8 * v69];
              *unint64_t v124 = v16;
              unint64_t v19 = v124 + 1;
              while (v17 != v68)
              {
                uint64_t v125 = *--v17;
                *--unint64_t v124 = v125;
              }
              v15[628] = v124;
              v15[629] = v19;
              v15[630] = &v73[8 * v72];
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[629] = v19;
            break;
          case 0xB2:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            unint64_t v22 = (uint64_t *)v20[632];
            unint64_t v23 = v20[633];
            if ((unint64_t)v22 >= v23)
            {
              int v74 = (uint64_t *)v20[631];
              uint64_t v75 = v22 - v74;
              if ((unint64_t)(v75 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v76 = v23 - (void)v74;
              unint64_t v77 = (uint64_t)(v23 - (void)v74) >> 2;
              if (v77 <= v75 + 1) {
                unint64_t v77 = v75 + 1;
              }
              if (v76 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78)
              {
                unint64_t v79 = (char *)sub_5714((uint64_t)(v20 + 633), v78);
                unint64_t v22 = (uint64_t *)v20[632];
                int v74 = (uint64_t *)v20[631];
              }
              else
              {
                unint64_t v79 = 0;
              }
              unint64_t v126 = (uint64_t *)&v79[8 * v75];
              *unint64_t v126 = v21;
              unint64_t v24 = v126 + 1;
              while (v22 != v74)
              {
                uint64_t v127 = *--v22;
                *--unint64_t v126 = v127;
              }
              v20[631] = v126;
              v20[632] = v24;
              v20[633] = &v79[8 * v78];
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              *unint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[632] = v24;
            break;
          case 0xB3:
            uint64_t v25 = a1[2];
            uint64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int16 *)(a1[3] + 58);
            unint64_t v28 = *(char **)(*(void *)v25 + 5080);
            unint64_t v29 = *(void *)(*(void *)v25 + 5088);
            if ((unint64_t)v28 >= v29)
            {
              uint64_t v80 = (char *)v26[634];
              uint64_t v81 = (v28 - v80) >> 3;
              if ((unint64_t)(v81 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v82 = v29 - (void)v80;
              unint64_t v83 = (uint64_t)(v29 - (void)v80) >> 2;
              if (v83 <= v81 + 1) {
                unint64_t v83 = v81 + 1;
              }
              if (v82 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v83;
              }
              if (v84)
              {
                unint64_t v85 = (char *)sub_5714((uint64_t)(v26 + 636), v84);
                unint64_t v28 = (char *)v26[635];
                uint64_t v80 = (char *)v26[634];
              }
              else
              {
                unint64_t v85 = 0;
              }
              unint64_t v128 = &v85[8 * v81];
              *(void *)unint64_t v128 = v27;
              int v30 = v128 + 8;
              while (v28 != v80)
              {
                uint64_t v129 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v128 - 1) = v129;
                v128 -= 8;
              }
              v26[634] = v128;
              v26[635] = v30;
              v26[636] = &v85[8 * v84];
              if (v80) {
                operator delete(v80);
              }
            }
            else
            {
              *(void *)unint64_t v28 = v27;
              int v30 = v28 + 8;
            }
            v26[635] = v30;
            break;
          case 0xB4:
            uint64_t v31 = a1[2];
            uint64_t v32 = *(void **)v31;
            uint64_t v33 = *(unsigned __int16 *)(a1[3] + 56);
            unint64_t v34 = *(char **)(*(void *)v31 + 5104);
            unint64_t v35 = *(void *)(*(void *)v31 + 5112);
            if ((unint64_t)v34 >= v35)
            {
              uint64_t v86 = (char *)v32[637];
              uint64_t v87 = (v34 - v86) >> 3;
              if ((unint64_t)(v87 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v88 = v35 - (void)v86;
              unint64_t v89 = (uint64_t)(v35 - (void)v86) >> 2;
              if (v89 <= v87 + 1) {
                unint64_t v89 = v87 + 1;
              }
              if (v88 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v89;
              }
              if (v90)
              {
                uint64_t v91 = (char *)sub_5714((uint64_t)(v32 + 639), v90);
                unint64_t v34 = (char *)v32[638];
                uint64_t v86 = (char *)v32[637];
              }
              else
              {
                uint64_t v91 = 0;
              }
              unint64_t v130 = &v91[8 * v87];
              *(void *)unint64_t v130 = v33;
              uint64_t v36 = v130 + 8;
              while (v34 != v86)
              {
                uint64_t v131 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v130 - 1) = v131;
                v130 -= 8;
              }
              v32[637] = v130;
              v32[638] = v36;
              v32[639] = &v91[8 * v90];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(void *)unint64_t v34 = v33;
              uint64_t v36 = v34 + 8;
            }
            v32[638] = v36;
            break;
          case 0xB5:
            unint64_t v37 = *(void **)a1[2];
            uint64_t v38 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            unint64_t v39 = (uint64_t *)v37[641];
            unint64_t v40 = v37[642];
            if ((unint64_t)v39 >= v40)
            {
              unint64_t v92 = (uint64_t *)v37[640];
              uint64_t v93 = v39 - v92;
              if ((unint64_t)(v93 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v94 = v40 - (void)v92;
              unint64_t v95 = (uint64_t)(v40 - (void)v92) >> 2;
              if (v95 <= v93 + 1) {
                unint64_t v95 = v93 + 1;
              }
              if (v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v95;
              }
              if (v96)
              {
                uint64_t v97 = (char *)sub_5714((uint64_t)(v37 + 642), v96);
                unint64_t v39 = (uint64_t *)v37[641];
                unint64_t v92 = (uint64_t *)v37[640];
              }
              else
              {
                uint64_t v97 = 0;
              }
              unint64_t v132 = (uint64_t *)&v97[8 * v93];
              *unint64_t v132 = v38;
              uint64_t v41 = v132 + 1;
              while (v39 != v92)
              {
                uint64_t v133 = *--v39;
                *--unint64_t v132 = v133;
              }
              v37[640] = v132;
              v37[641] = v41;
              v37[642] = &v97[8 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *unint64_t v39 = v38;
              uint64_t v41 = v39 + 1;
            }
            v37[641] = v41;
            break;
          case 0xB6:
            uint64_t v42 = *(void **)a1[2];
            uint64_t v43 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            unint64_t v44 = (uint64_t *)v42[644];
            unint64_t v45 = v42[645];
            if ((unint64_t)v44 >= v45)
            {
              unint64_t v98 = (uint64_t *)v42[643];
              uint64_t v99 = v44 - v98;
              if ((unint64_t)(v99 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v100 = v45 - (void)v98;
              unint64_t v101 = (uint64_t)(v45 - (void)v98) >> 2;
              if (v101 <= v99 + 1) {
                unint64_t v101 = v99 + 1;
              }
              if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v101;
              }
              if (v102)
              {
                unint64_t v103 = (char *)sub_5714((uint64_t)(v42 + 645), v102);
                unint64_t v44 = (uint64_t *)v42[644];
                unint64_t v98 = (uint64_t *)v42[643];
              }
              else
              {
                unint64_t v103 = 0;
              }
              unint64_t v134 = (uint64_t *)&v103[8 * v99];
              *unint64_t v134 = v43;
              uint64_t v46 = v134 + 1;
              while (v44 != v98)
              {
                uint64_t v135 = *--v44;
                *--unint64_t v134 = v135;
              }
              v42[643] = v134;
              v42[644] = v46;
              v42[645] = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *unint64_t v44 = v43;
              uint64_t v46 = v44 + 1;
            }
            v42[644] = v46;
            break;
          case 0xB7:
            unint64_t v47 = *(void **)a1[2];
            uint64_t v48 = *(_DWORD *)(a1[3] + 40) & 0xFFFFFLL;
            uint64_t v49 = (uint64_t *)v47[647];
            unint64_t v50 = v47[648];
            if ((unint64_t)v49 >= v50)
            {
              unint64_t v104 = (uint64_t *)v47[646];
              uint64_t v105 = v49 - v104;
              if ((unint64_t)(v105 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v106 = v50 - (void)v104;
              unint64_t v107 = (uint64_t)(v50 - (void)v104) >> 2;
              if (v107 <= v105 + 1) {
                unint64_t v107 = v105 + 1;
              }
              if (v106 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v107;
              }
              if (v108)
              {
                uint64_t v109 = (char *)sub_5714((uint64_t)(v47 + 648), v108);
                uint64_t v49 = (uint64_t *)v47[647];
                unint64_t v104 = (uint64_t *)v47[646];
              }
              else
              {
                uint64_t v109 = 0;
              }
              unint64_t v136 = (uint64_t *)&v109[8 * v105];
              uint64_t *v136 = v48;
              uint64_t v51 = v136 + 1;
              while (v49 != v104)
              {
                uint64_t v137 = *--v49;
                *--unint64_t v136 = v137;
              }
              v47[646] = v136;
              v47[647] = v51;
              v47[648] = &v109[8 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              *uint64_t v49 = v48;
              uint64_t v51 = v49 + 1;
            }
            v47[647] = v51;
            break;
          case 0xB8:
            int v52 = *(void **)a1[2];
            uint64_t v53 = *(_DWORD *)(a1[3] + 24) & 0xFFFFFLL;
            uint64_t v54 = (uint64_t *)v52[650];
            unint64_t v55 = v52[651];
            if ((unint64_t)v54 >= v55)
            {
              unint64_t v110 = (uint64_t *)v52[649];
              uint64_t v111 = v54 - v110;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v112 = v55 - (void)v110;
              unint64_t v113 = (uint64_t)(v55 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                uint64_t v115 = (char *)sub_5714((uint64_t)(v52 + 651), v114);
                uint64_t v54 = (uint64_t *)v52[650];
                unint64_t v110 = (uint64_t *)v52[649];
              }
              else
              {
                uint64_t v115 = 0;
              }
              uint64_t v138 = (uint64_t *)&v115[8 * v111];
              *uint64_t v138 = v53;
              uint64_t v56 = v138 + 1;
              while (v54 != v110)
              {
                uint64_t v139 = *--v54;
                *--uint64_t v138 = v139;
              }
              v52[649] = v138;
              v52[650] = v56;
              v52[651] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *uint64_t v54 = v53;
              uint64_t v56 = v54 + 1;
            }
            v52[650] = v56;
            break;
          case 0xB9:
            uint64_t v57 = *(void **)a1[2];
            uint64_t v58 = *(_DWORD *)(a1[3] + 28) & 0xFFFFFLL;
            unint64_t v59 = (uint64_t *)v57[653];
            unint64_t v60 = v57[654];
            if ((unint64_t)v59 >= v60)
            {
              unint64_t v116 = (uint64_t *)v57[652];
              uint64_t v117 = v59 - v116;
              if ((unint64_t)(v117 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v118 = v60 - (void)v116;
              unint64_t v119 = (uint64_t)(v60 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                uint64_t v121 = (char *)sub_5714((uint64_t)(v57 + 654), v120);
                unint64_t v59 = (uint64_t *)v57[653];
                unint64_t v116 = (uint64_t *)v57[652];
              }
              else
              {
                uint64_t v121 = 0;
              }
              unint64_t v140 = (uint64_t *)&v121[8 * v117];
              *unint64_t v140 = v58;
              uint64_t v61 = v140 + 1;
              while (v59 != v116)
              {
                uint64_t v141 = *--v59;
                *--unint64_t v140 = v141;
              }
              v57[652] = v140;
              v57[653] = v61;
              v57[654] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *unint64_t v59 = v58;
              uint64_t v61 = v59 + 1;
            }
            v57[653] = v61;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_168FC4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v427 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v426 = *v427;
    uint64_t v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      unint64_t v429 = v428 >> 2;
      if (v429 <= 1) {
        unint64_t v429 = 1;
      }
      do
      {
        int v430 = *v426++;
        switch(v430)
        {
          case '!':
            unint64_t v431 = (_WORD *)(a1[3] + 34);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1576);
            goto LABEL_590;
          case '""':
            unint64_t v431 = (_WORD *)(a1[3] + 26);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1600);
            goto LABEL_590;
          case '#':
            unint64_t v431 = (_WORD *)(a1[3] + 36);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1624);
            goto LABEL_590;
          case '$':
            unint64_t v431 = (_WORD *)(a1[3] + 28);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1648);
            goto LABEL_590;
          case '%':
            unint64_t v431 = (_WORD *)(a1[3] + 38);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1672);
            goto LABEL_590;
          case '&':
            unint64_t v431 = (_WORD *)(a1[3] + 30);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1696);
            goto LABEL_590;
          case '\'':
            unint64_t v431 = (_WORD *)(a1[3] + 40);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1720);
            goto LABEL_590;
          case '(':
            unint64_t v431 = (_WORD *)(a1[3] + 32);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1744);
            goto LABEL_590;
          case ')':
            unint64_t v431 = (_WORD *)(a1[3] + 50);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1768);
            goto LABEL_590;
          case '*':
            unint64_t v431 = (_WORD *)(a1[3] + 42);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1792);
            goto LABEL_590;
          case '+':
            unint64_t v431 = (_WORD *)(a1[3] + 52);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1816);
            goto LABEL_590;
          case ',':
            unint64_t v431 = (_WORD *)(a1[3] + 44);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1840);
            goto LABEL_590;
          case '-':
            unint64_t v431 = (_WORD *)(a1[3] + 54);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1864);
            goto LABEL_590;
          case '.':
            unint64_t v431 = (_WORD *)(a1[3] + 46);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1888);
            goto LABEL_590;
          case '/':
            unint64_t v431 = (_WORD *)(a1[3] + 56);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1912);
            goto LABEL_590;
          case '0':
            unint64_t v431 = (_WORD *)(a1[3] + 48);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1936);
            goto LABEL_590;
          case '1':
            unint64_t v431 = (_WORD *)(a1[3] + 66);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1960);
            goto LABEL_590;
          case '2':
            unint64_t v431 = (_WORD *)(a1[3] + 58);
            uint64_t v432 = (void *)(*(void *)a1[2] + 1984);
            goto LABEL_590;
          case '3':
            unint64_t v431 = (_WORD *)(a1[3] + 68);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2008);
            goto LABEL_590;
          case '4':
            unint64_t v431 = (_WORD *)(a1[3] + 60);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2032);
            goto LABEL_590;
          case '5':
            unint64_t v431 = (_WORD *)(a1[3] + 70);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2056);
            goto LABEL_590;
          case '6':
            unint64_t v431 = (_WORD *)(a1[3] + 62);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2080);
            goto LABEL_590;
          case '7':
            unint64_t v431 = (_WORD *)(a1[3] + 72);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2104);
            goto LABEL_590;
          case '8':
            unint64_t v431 = (_WORD *)(a1[3] + 64);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2128);
            goto LABEL_590;
          case '9':
            unint64_t v431 = (_WORD *)(a1[3] + 82);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2152);
            goto LABEL_590;
          case ':':
            unint64_t v431 = (_WORD *)(a1[3] + 74);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2176);
            goto LABEL_590;
          case ';':
            unint64_t v431 = (_WORD *)(a1[3] + 84);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2200);
            goto LABEL_590;
          case '<':
            unint64_t v431 = (_WORD *)(a1[3] + 76);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2224);
            goto LABEL_590;
          case '=':
            unint64_t v431 = (_WORD *)(a1[3] + 86);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2248);
            goto LABEL_590;
          case '>':
            unint64_t v431 = (_WORD *)(a1[3] + 78);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2272);
            goto LABEL_590;
          case '?':
            unint64_t v431 = (_WORD *)(a1[3] + 88);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2296);
            goto LABEL_590;
          case '@':
            unint64_t v431 = (_WORD *)(a1[3] + 80);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2320);
LABEL_590:
            *(void *)(*v432 - 8) += *v431 & 0x7FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case '!':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            unint64_t v12 = (char *)v10[197];
            unint64_t v13 = v10[198];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v170 = (char *)v10[196];
              uint64_t v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v172 = v13 - (void)v170;
              unint64_t v173 = (uint64_t)(v13 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                uint64_t v175 = (char *)sub_5714((uint64_t)(v10 + 198), v174);
                unint64_t v12 = (char *)v10[197];
                unint64_t v170 = (char *)v10[196];
              }
              else
              {
                uint64_t v175 = 0;
              }
              uint64_t v362 = &v175[8 * v171];
              *(void *)uint64_t v362 = v11;
              unint64_t v14 = v362 + 8;
              while (v12 != v170)
              {
                uint64_t v363 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[196] = v362;
              v10[197] = v14;
              v10[198] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)unint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[197] = v14;
            break;
          case '""':
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v17 = (char *)v15[200];
            unint64_t v18 = v15[201];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v176 = (char *)v15[199];
              uint64_t v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v178 = v18 - (void)v176;
              unint64_t v179 = (uint64_t)(v18 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_5714((uint64_t)(v15 + 201), v180);
                uint64_t v17 = (char *)v15[200];
                unint64_t v176 = (char *)v15[199];
              }
              else
              {
                uint64_t v181 = 0;
              }
              uint64_t v364 = &v181[8 * v177];
              *(void *)uint64_t v364 = v16;
              unint64_t v19 = v364 + 8;
              while (v17 != v176)
              {
                uint64_t v365 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[199] = v364;
              v15[200] = v19;
              v15[201] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[200] = v19;
            break;
          case '#':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            unint64_t v22 = (char *)v20[203];
            unint64_t v23 = v20[204];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v182 = (char *)v20[202];
              uint64_t v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v184 = v23 - (void)v182;
              unint64_t v185 = (uint64_t)(v23 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                uint64_t v187 = (char *)sub_5714((uint64_t)(v20 + 204), v186);
                unint64_t v22 = (char *)v20[203];
                unint64_t v182 = (char *)v20[202];
              }
              else
              {
                uint64_t v187 = 0;
              }
              unint64_t v366 = &v187[8 * v183];
              *(void *)unint64_t v366 = v21;
              unint64_t v24 = v366 + 8;
              while (v22 != v182)
              {
                uint64_t v367 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[202] = v366;
              v20[203] = v24;
              v20[204] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)unint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[203] = v24;
            break;
          case '$':
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v27 = (char *)v25[206];
            unint64_t v28 = v25[207];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v188 = (char *)v25[205];
              uint64_t v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v190 = v28 - (void)v188;
              unint64_t v191 = (uint64_t)(v28 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                uint64_t v193 = (char *)sub_5714((uint64_t)(v25 + 207), v192);
                uint64_t v27 = (char *)v25[206];
                unint64_t v188 = (char *)v25[205];
              }
              else
              {
                uint64_t v193 = 0;
              }
              unint64_t v368 = &v193[8 * v189];
              *(void *)unint64_t v368 = v26;
              unint64_t v29 = v368 + 8;
              while (v27 != v188)
              {
                uint64_t v369 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[205] = v368;
              v25[206] = v29;
              v25[207] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[206] = v29;
            break;
          case '%':
            int v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            uint64_t v32 = (char *)v30[209];
            unint64_t v33 = v30[210];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v194 = (char *)v30[208];
              uint64_t v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v196 = v33 - (void)v194;
              unint64_t v197 = (uint64_t)(v33 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                uint64_t v199 = (char *)sub_5714((uint64_t)(v30 + 210), v198);
                uint64_t v32 = (char *)v30[209];
                unint64_t v194 = (char *)v30[208];
              }
              else
              {
                uint64_t v199 = 0;
              }
              unint64_t v370 = &v199[8 * v195];
              *(void *)unint64_t v370 = v31;
              unint64_t v34 = v370 + 8;
              while (v32 != v194)
              {
                uint64_t v371 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[208] = v370;
              v30[209] = v34;
              v30[210] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)uint64_t v32 = v31;
              unint64_t v34 = v32 + 8;
            }
            v30[209] = v34;
            break;
          case '&':
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v37 = (char *)v35[212];
            unint64_t v38 = v35[213];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v200 = (char *)v35[211];
              uint64_t v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v202 = v38 - (void)v200;
              unint64_t v203 = (uint64_t)(v38 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                uint64_t v205 = (char *)sub_5714((uint64_t)(v35 + 213), v204);
                unint64_t v37 = (char *)v35[212];
                unint64_t v200 = (char *)v35[211];
              }
              else
              {
                uint64_t v205 = 0;
              }
              uint64_t v372 = &v205[8 * v201];
              *(void *)uint64_t v372 = v36;
              unint64_t v39 = v372 + 8;
              while (v37 != v200)
              {
                uint64_t v373 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[211] = v372;
              v35[212] = v39;
              v35[213] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)unint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[212] = v39;
            break;
          case '\'':
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v42 = (char *)v40[215];
            unint64_t v43 = v40[216];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v206 = (char *)v40[214];
              uint64_t v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v208 = v43 - (void)v206;
              unint64_t v209 = (uint64_t)(v43 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                uint64_t v211 = (char *)sub_5714((uint64_t)(v40 + 216), v210);
                uint64_t v42 = (char *)v40[215];
                unint64_t v206 = (char *)v40[214];
              }
              else
              {
                uint64_t v211 = 0;
              }
              int v374 = &v211[8 * v207];
              *(void *)int v374 = v41;
              unint64_t v44 = v374 + 8;
              while (v42 != v206)
              {
                uint64_t v375 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[214] = v374;
              v40[215] = v44;
              v40[216] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[215] = v44;
            break;
          case '(':
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v47 = (char *)v45[218];
            unint64_t v48 = v45[219];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v212 = (char *)v45[217];
              uint64_t v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v214 = v48 - (void)v212;
              unint64_t v215 = (uint64_t)(v48 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                uint64_t v217 = (char *)sub_5714((uint64_t)(v45 + 219), v216);
                unint64_t v47 = (char *)v45[218];
                unint64_t v212 = (char *)v45[217];
              }
              else
              {
                uint64_t v217 = 0;
              }
              unint64_t v376 = &v217[8 * v213];
              *(void *)unint64_t v376 = v46;
              uint64_t v49 = v376 + 8;
              while (v47 != v212)
              {
                uint64_t v377 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[217] = v376;
              v45[218] = v49;
              v45[219] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[218] = v49;
            break;
          case ')':
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            int v52 = (char *)v50[221];
            unint64_t v53 = v50[222];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v218 = (char *)v50[220];
              uint64_t v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v220 = v53 - (void)v218;
              unint64_t v221 = (uint64_t)(v53 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v50 + 222), v222);
                int v52 = (char *)v50[221];
                unint64_t v218 = (char *)v50[220];
              }
              else
              {
                uint64_t v223 = 0;
              }
              unint64_t v378 = &v223[8 * v219];
              *(void *)unint64_t v378 = v51;
              uint64_t v54 = v378 + 8;
              while (v52 != v218)
              {
                uint64_t v379 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[220] = v378;
              v50[221] = v54;
              v50[222] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)int v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[221] = v54;
            break;
          case '*':
            unint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            uint64_t v57 = (char *)v55[224];
            unint64_t v58 = v55[225];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v224 = (char *)v55[223];
              uint64_t v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v226 = v58 - (void)v224;
              unint64_t v227 = (uint64_t)(v58 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                uint64_t v229 = (char *)sub_5714((uint64_t)(v55 + 225), v228);
                uint64_t v57 = (char *)v55[224];
                unint64_t v224 = (char *)v55[223];
              }
              else
              {
                uint64_t v229 = 0;
              }
              uint64_t v380 = &v229[8 * v225];
              *(void *)uint64_t v380 = v56;
              unint64_t v59 = v380 + 8;
              while (v57 != v224)
              {
                uint64_t v381 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[223] = v380;
              v55[224] = v59;
              v55[225] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[224] = v59;
            break;
          case '+':
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            unint64_t v62 = (char *)v60[227];
            unint64_t v63 = v60[228];
            if ((unint64_t)v62 >= v63)
            {
              unint64_t v230 = (char *)v60[226];
              uint64_t v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v232 = v63 - (void)v230;
              unint64_t v233 = (uint64_t)(v63 - (void)v230) >> 2;
              if (v233 <= v231 + 1) {
                unint64_t v233 = v231 + 1;
              }
              if (v232 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v234 = v233;
              }
              if (v234)
              {
                uint64_t v235 = (char *)sub_5714((uint64_t)(v60 + 228), v234);
                unint64_t v62 = (char *)v60[227];
                unint64_t v230 = (char *)v60[226];
              }
              else
              {
                uint64_t v235 = 0;
              }
              unint64_t v382 = &v235[8 * v231];
              *(void *)unint64_t v382 = v61;
              unint64_t v64 = v382 + 8;
              while (v62 != v230)
              {
                uint64_t v383 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[226] = v382;
              v60[227] = v64;
              v60[228] = &v235[8 * v234];
              if (v230) {
                operator delete(v230);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[227] = v64;
            break;
          case ',':
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            unint64_t v67 = (char *)v65[230];
            unint64_t v68 = v65[231];
            if ((unint64_t)v67 >= v68)
            {
              unint64_t v236 = (char *)v65[229];
              uint64_t v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v238 = v68 - (void)v236;
              unint64_t v239 = (uint64_t)(v68 - (void)v236) >> 2;
              if (v239 <= v237 + 1) {
                unint64_t v239 = v237 + 1;
              }
              if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v240 = v239;
              }
              if (v240)
              {
                uint64_t v241 = (char *)sub_5714((uint64_t)(v65 + 231), v240);
                unint64_t v67 = (char *)v65[230];
                unint64_t v236 = (char *)v65[229];
              }
              else
              {
                uint64_t v241 = 0;
              }
              unint64_t v384 = &v241[8 * v237];
              *(void *)unint64_t v384 = v66;
              uint64_t v69 = v384 + 8;
              while (v67 != v236)
              {
                uint64_t v385 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[229] = v384;
              v65[230] = v69;
              v65[231] = &v241[8 * v240];
              if (v236) {
                operator delete(v236);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              uint64_t v69 = v67 + 8;
            }
            v65[230] = v69;
            break;
          case '-':
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            unint64_t v72 = (char *)v70[233];
            unint64_t v73 = v70[234];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v242 = (char *)v70[232];
              uint64_t v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v244 = v73 - (void)v242;
              unint64_t v245 = (uint64_t)(v73 - (void)v242) >> 2;
              if (v245 <= v243 + 1) {
                unint64_t v245 = v243 + 1;
              }
              if (v244 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v246 = v245;
              }
              if (v246)
              {
                uint64_t v247 = (char *)sub_5714((uint64_t)(v70 + 234), v246);
                unint64_t v72 = (char *)v70[233];
                unint64_t v242 = (char *)v70[232];
              }
              else
              {
                uint64_t v247 = 0;
              }
              uint64_t v386 = &v247[8 * v243];
              *(void *)uint64_t v386 = v71;
              int v74 = v386 + 8;
              while (v72 != v242)
              {
                uint64_t v387 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[232] = v386;
              v70[233] = v74;
              v70[234] = &v247[8 * v246];
              if (v242) {
                operator delete(v242);
              }
            }
            else
            {
              *(void *)unint64_t v72 = v71;
              int v74 = v72 + 8;
            }
            v70[233] = v74;
            break;
          case '.':
            uint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            unint64_t v77 = (char *)v75[236];
            unint64_t v78 = v75[237];
            if ((unint64_t)v77 >= v78)
            {
              unint64_t v248 = (char *)v75[235];
              uint64_t v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v250 = v78 - (void)v248;
              unint64_t v251 = (uint64_t)(v78 - (void)v248) >> 2;
              if (v251 <= v249 + 1) {
                unint64_t v251 = v249 + 1;
              }
              if (v250 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v252 = v251;
              }
              if (v252)
              {
                uint64_t v253 = (char *)sub_5714((uint64_t)(v75 + 237), v252);
                unint64_t v77 = (char *)v75[236];
                unint64_t v248 = (char *)v75[235];
              }
              else
              {
                uint64_t v253 = 0;
              }
              uint64_t v388 = &v253[8 * v249];
              *(void *)uint64_t v388 = v76;
              unint64_t v79 = v388 + 8;
              while (v77 != v248)
              {
                uint64_t v389 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[235] = v388;
              v75[236] = v79;
              v75[237] = &v253[8 * v252];
              if (v248) {
                operator delete(v248);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              unint64_t v79 = v77 + 8;
            }
            v75[236] = v79;
            break;
          case '/':
            uint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            unint64_t v82 = (char *)v80[239];
            unint64_t v83 = v80[240];
            if ((unint64_t)v82 >= v83)
            {
              int v254 = (char *)v80[238];
              uint64_t v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v256 = v83 - (void)v254;
              unint64_t v257 = (uint64_t)(v83 - (void)v254) >> 2;
              if (v257 <= v255 + 1) {
                unint64_t v257 = v255 + 1;
              }
              if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v258 = v257;
              }
              if (v258)
              {
                uint64_t v259 = (char *)sub_5714((uint64_t)(v80 + 240), v258);
                unint64_t v82 = (char *)v80[239];
                int v254 = (char *)v80[238];
              }
              else
              {
                uint64_t v259 = 0;
              }
              unint64_t v390 = &v259[8 * v255];
              *(void *)unint64_t v390 = v81;
              unint64_t v84 = v390 + 8;
              while (v82 != v254)
              {
                uint64_t v391 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[238] = v390;
              v80[239] = v84;
              v80[240] = &v259[8 * v258];
              if (v254) {
                operator delete(v254);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[239] = v84;
            break;
          case '0':
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            uint64_t v87 = (char *)v85[242];
            unint64_t v88 = v85[243];
            if ((unint64_t)v87 >= v88)
            {
              uint64_t v260 = (char *)v85[241];
              uint64_t v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v262 = v88 - (void)v260;
              unint64_t v263 = (uint64_t)(v88 - (void)v260) >> 2;
              if (v263 <= v261 + 1) {
                unint64_t v263 = v261 + 1;
              }
              if (v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v264 = v263;
              }
              if (v264)
              {
                uint64_t v265 = (char *)sub_5714((uint64_t)(v85 + 243), v264);
                uint64_t v87 = (char *)v85[242];
                uint64_t v260 = (char *)v85[241];
              }
              else
              {
                uint64_t v265 = 0;
              }
              unint64_t v392 = &v265[8 * v261];
              *(void *)unint64_t v392 = v86;
              unint64_t v89 = v392 + 8;
              while (v87 != v260)
              {
                uint64_t v393 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[241] = v392;
              v85[242] = v89;
              v85[243] = &v265[8 * v264];
              if (v260) {
                operator delete(v260);
              }
            }
            else
            {
              *(void *)uint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[242] = v89;
            break;
          case '1':
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 66) & 0x7FFF;
            unint64_t v92 = (char *)v90[245];
            unint64_t v93 = v90[246];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v266 = (char *)v90[244];
              uint64_t v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v268 = v93 - (void)v266;
              unint64_t v269 = (uint64_t)(v93 - (void)v266) >> 2;
              if (v269 <= v267 + 1) {
                unint64_t v269 = v267 + 1;
              }
              if (v268 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v270 = v269;
              }
              if (v270)
              {
                uint64_t v271 = (char *)sub_5714((uint64_t)(v90 + 246), v270);
                unint64_t v92 = (char *)v90[245];
                unint64_t v266 = (char *)v90[244];
              }
              else
              {
                uint64_t v271 = 0;
              }
              unint64_t v394 = &v271[8 * v267];
              *(void *)unint64_t v394 = v91;
              unint64_t v94 = v394 + 8;
              while (v92 != v266)
              {
                uint64_t v395 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[244] = v394;
              v90[245] = v94;
              v90[246] = &v271[8 * v270];
              if (v266) {
                operator delete(v266);
              }
            }
            else
            {
              *(void *)unint64_t v92 = v91;
              unint64_t v94 = v92 + 8;
            }
            v90[245] = v94;
            break;
          case '2':
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            uint64_t v97 = (char *)v95[248];
            unint64_t v98 = v95[249];
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v272 = (char *)v95[247];
              uint64_t v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v274 = v98 - (void)v272;
              unint64_t v275 = (uint64_t)(v98 - (void)v272) >> 2;
              if (v275 <= v273 + 1) {
                unint64_t v275 = v273 + 1;
              }
              if (v274 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v276 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v276 = v275;
              }
              if (v276)
              {
                uint64_t v277 = (char *)sub_5714((uint64_t)(v95 + 249), v276);
                uint64_t v97 = (char *)v95[248];
                unint64_t v272 = (char *)v95[247];
              }
              else
              {
                uint64_t v277 = 0;
              }
              uint64_t v396 = &v277[8 * v273];
              *(void *)uint64_t v396 = v96;
              uint64_t v99 = v396 + 8;
              while (v97 != v272)
              {
                uint64_t v397 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[247] = v396;
              v95[248] = v99;
              v95[249] = &v277[8 * v276];
              if (v272) {
                operator delete(v272);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              uint64_t v99 = v97 + 8;
            }
            v95[248] = v99;
            break;
          case '3':
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 68) & 0x7FFF;
            unint64_t v102 = (char *)v100[251];
            unint64_t v103 = v100[252];
            if ((unint64_t)v102 >= v103)
            {
              uint64_t v278 = (char *)v100[250];
              uint64_t v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v280 = v103 - (void)v278;
              unint64_t v281 = (uint64_t)(v103 - (void)v278) >> 2;
              if (v281 <= v279 + 1) {
                unint64_t v281 = v279 + 1;
              }
              if (v280 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v282 = v281;
              }
              if (v282)
              {
                uint64_t v283 = (char *)sub_5714((uint64_t)(v100 + 252), v282);
                unint64_t v102 = (char *)v100[251];
                uint64_t v278 = (char *)v100[250];
              }
              else
              {
                uint64_t v283 = 0;
              }
              int v398 = &v283[8 * v279];
              *(void *)int v398 = v101;
              unint64_t v104 = v398 + 8;
              while (v102 != v278)
              {
                uint64_t v399 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[250] = v398;
              v100[251] = v104;
              v100[252] = &v283[8 * v282];
              if (v278) {
                operator delete(v278);
              }
            }
            else
            {
              *(void *)unint64_t v102 = v101;
              unint64_t v104 = v102 + 8;
            }
            v100[251] = v104;
            break;
          case '4':
            uint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            unint64_t v107 = (char *)v105[254];
            unint64_t v108 = v105[255];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v284 = (char *)v105[253];
              uint64_t v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v286 = v108 - (void)v284;
              unint64_t v287 = (uint64_t)(v108 - (void)v284) >> 2;
              if (v287 <= v285 + 1) {
                unint64_t v287 = v285 + 1;
              }
              if (v286 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v287;
              }
              if (v288)
              {
                uint64_t v289 = (char *)sub_5714((uint64_t)(v105 + 255), v288);
                unint64_t v107 = (char *)v105[254];
                unint64_t v284 = (char *)v105[253];
              }
              else
              {
                uint64_t v289 = 0;
              }
              uint64_t v400 = &v289[8 * v285];
              *(void *)uint64_t v400 = v106;
              uint64_t v109 = v400 + 8;
              while (v107 != v284)
              {
                uint64_t v401 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[253] = v400;
              v105[254] = v109;
              v105[255] = &v289[8 * v288];
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              *(void *)unint64_t v107 = v106;
              uint64_t v109 = v107 + 8;
            }
            v105[254] = v109;
            break;
          case '5':
            unint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 70) & 0x7FFF;
            unint64_t v112 = (char *)v110[257];
            unint64_t v113 = v110[258];
            if ((unint64_t)v112 >= v113)
            {
              unint64_t v290 = (char *)v110[256];
              uint64_t v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v292 = v113 - (void)v290;
              unint64_t v293 = (uint64_t)(v113 - (void)v290) >> 2;
              if (v293 <= v291 + 1) {
                unint64_t v293 = v291 + 1;
              }
              if (v292 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v294 = v293;
              }
              if (v294)
              {
                unint64_t v295 = (char *)sub_5714((uint64_t)(v110 + 258), v294);
                unint64_t v112 = (char *)v110[257];
                unint64_t v290 = (char *)v110[256];
              }
              else
              {
                unint64_t v295 = 0;
              }
              unint64_t v402 = &v295[8 * v291];
              *(void *)unint64_t v402 = v111;
              unint64_t v114 = v402 + 8;
              while (v112 != v290)
              {
                uint64_t v403 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[256] = v402;
              v110[257] = v114;
              v110[258] = &v295[8 * v294];
              if (v290) {
                operator delete(v290);
              }
            }
            else
            {
              *(void *)unint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[257] = v114;
            break;
          case '6':
            uint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            uint64_t v117 = (char *)v115[260];
            unint64_t v118 = v115[261];
            if ((unint64_t)v117 >= v118)
            {
              unint64_t v296 = (char *)v115[259];
              uint64_t v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v298 = v118 - (void)v296;
              unint64_t v299 = (uint64_t)(v118 - (void)v296) >> 2;
              if (v299 <= v297 + 1) {
                unint64_t v299 = v297 + 1;
              }
              if (v298 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v300 = v299;
              }
              if (v300)
              {
                unint64_t v301 = (char *)sub_5714((uint64_t)(v115 + 261), v300);
                uint64_t v117 = (char *)v115[260];
                unint64_t v296 = (char *)v115[259];
              }
              else
              {
                unint64_t v301 = 0;
              }
              uint64_t v404 = &v301[8 * v297];
              *(void *)uint64_t v404 = v116;
              unint64_t v119 = v404 + 8;
              while (v117 != v296)
              {
                uint64_t v405 = *((void *)v117 - 1);
                v117 -= 8;
                *((void *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[259] = v404;
              v115[260] = v119;
              v115[261] = &v301[8 * v300];
              if (v296) {
                operator delete(v296);
              }
            }
            else
            {
              *(void *)uint64_t v117 = v116;
              unint64_t v119 = v117 + 8;
            }
            v115[260] = v119;
            break;
          case '7':
            unint64_t v120 = *(void **)a1[2];
            uint64_t v121 = *(_WORD *)(a1[3] + 72) & 0x7FFF;
            unint64_t v122 = (char *)v120[263];
            unint64_t v123 = v120[264];
            if ((unint64_t)v122 >= v123)
            {
              int v302 = (char *)v120[262];
              uint64_t v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v304 = v123 - (void)v302;
              unint64_t v305 = (uint64_t)(v123 - (void)v302) >> 2;
              if (v305 <= v303 + 1) {
                unint64_t v305 = v303 + 1;
              }
              if (v304 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v306 = v305;
              }
              if (v306)
              {
                unint64_t v307 = (char *)sub_5714((uint64_t)(v120 + 264), v306);
                unint64_t v122 = (char *)v120[263];
                int v302 = (char *)v120[262];
              }
              else
              {
                unint64_t v307 = 0;
              }
              unint64_t v406 = &v307[8 * v303];
              *(void *)unint64_t v406 = v121;
              unint64_t v124 = v406 + 8;
              while (v122 != v302)
              {
                uint64_t v407 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[262] = v406;
              v120[263] = v124;
              v120[264] = &v307[8 * v306];
              if (v302) {
                operator delete(v302);
              }
            }
            else
            {
              *(void *)unint64_t v122 = v121;
              unint64_t v124 = v122 + 8;
            }
            v120[263] = v124;
            break;
          case '8':
            uint64_t v125 = *(void **)a1[2];
            uint64_t v126 = *(_WORD *)(a1[3] + 64) & 0x7FFF;
            uint64_t v127 = (char *)v125[266];
            unint64_t v128 = v125[267];
            if ((unint64_t)v127 >= v128)
            {
              unint64_t v308 = (char *)v125[265];
              uint64_t v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v310 = v128 - (void)v308;
              unint64_t v311 = (uint64_t)(v128 - (void)v308) >> 2;
              if (v311 <= v309 + 1) {
                unint64_t v311 = v309 + 1;
              }
              if (v310 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v311;
              }
              if (v312)
              {
                unint64_t v313 = (char *)sub_5714((uint64_t)(v125 + 267), v312);
                uint64_t v127 = (char *)v125[266];
                unint64_t v308 = (char *)v125[265];
              }
              else
              {
                unint64_t v313 = 0;
              }
              uint64_t v408 = &v313[8 * v309];
              *(void *)uint64_t v408 = v126;
              uint64_t v129 = v408 + 8;
              while (v127 != v308)
              {
                uint64_t v409 = *((void *)v127 - 1);
                v127 -= 8;
                *((void *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[265] = v408;
              v125[266] = v129;
              v125[267] = &v313[8 * v312];
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(void *)uint64_t v127 = v126;
              uint64_t v129 = v127 + 8;
            }
            v125[266] = v129;
            break;
          case '9':
            unint64_t v130 = *(void **)a1[2];
            uint64_t v131 = *(_WORD *)(a1[3] + 82) & 0x7FFF;
            unint64_t v132 = (char *)v130[269];
            unint64_t v133 = v130[270];
            if ((unint64_t)v132 >= v133)
            {
              uint64_t v314 = (char *)v130[268];
              uint64_t v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v316 = v133 - (void)v314;
              unint64_t v317 = (uint64_t)(v133 - (void)v314) >> 2;
              if (v317 <= v315 + 1) {
                unint64_t v317 = v315 + 1;
              }
              if (v316 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v318 = v317;
              }
              if (v318)
              {
                unint64_t v319 = (char *)sub_5714((uint64_t)(v130 + 270), v318);
                unint64_t v132 = (char *)v130[269];
                uint64_t v314 = (char *)v130[268];
              }
              else
              {
                unint64_t v319 = 0;
              }
              uint64_t v410 = &v319[8 * v315];
              *(void *)uint64_t v410 = v131;
              unint64_t v134 = v410 + 8;
              while (v132 != v314)
              {
                uint64_t v411 = *((void *)v132 - 1);
                v132 -= 8;
                *((void *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[268] = v410;
              v130[269] = v134;
              v130[270] = &v319[8 * v318];
              if (v314) {
                operator delete(v314);
              }
            }
            else
            {
              *(void *)unint64_t v132 = v131;
              unint64_t v134 = v132 + 8;
            }
            v130[269] = v134;
            break;
          case ':':
            uint64_t v135 = *(void **)a1[2];
            uint64_t v136 = *(_WORD *)(a1[3] + 74) & 0x7FFF;
            uint64_t v137 = (char *)v135[272];
            unint64_t v138 = v135[273];
            if ((unint64_t)v137 >= v138)
            {
              unint64_t v320 = (char *)v135[271];
              uint64_t v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v322 = v138 - (void)v320;
              unint64_t v323 = (uint64_t)(v138 - (void)v320) >> 2;
              if (v323 <= v321 + 1) {
                unint64_t v323 = v321 + 1;
              }
              if (v322 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v324 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v324 = v323;
              }
              if (v324)
              {
                uint64_t v325 = (char *)sub_5714((uint64_t)(v135 + 273), v324);
                uint64_t v137 = (char *)v135[272];
                unint64_t v320 = (char *)v135[271];
              }
              else
              {
                uint64_t v325 = 0;
              }
              unint64_t v412 = &v325[8 * v321];
              *(void *)unint64_t v412 = v136;
              uint64_t v139 = v412 + 8;
              while (v137 != v320)
              {
                uint64_t v413 = *((void *)v137 - 1);
                v137 -= 8;
                *((void *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[271] = v412;
              v135[272] = v139;
              v135[273] = &v325[8 * v324];
              if (v320) {
                operator delete(v320);
              }
            }
            else
            {
              *(void *)uint64_t v137 = v136;
              uint64_t v139 = v137 + 8;
            }
            v135[272] = v139;
            break;
          case ';':
            unint64_t v140 = *(void **)a1[2];
            uint64_t v141 = *(_WORD *)(a1[3] + 84) & 0x7FFF;
            unint64_t v142 = (char *)v140[275];
            unint64_t v143 = v140[276];
            if ((unint64_t)v142 >= v143)
            {
              int v326 = (char *)v140[274];
              uint64_t v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v328 = v143 - (void)v326;
              unint64_t v329 = (uint64_t)(v143 - (void)v326) >> 2;
              if (v329 <= v327 + 1) {
                unint64_t v329 = v327 + 1;
              }
              if (v328 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v330 = v329;
              }
              if (v330)
              {
                unint64_t v331 = (char *)sub_5714((uint64_t)(v140 + 276), v330);
                unint64_t v142 = (char *)v140[275];
                int v326 = (char *)v140[274];
              }
              else
              {
                unint64_t v331 = 0;
              }
              unint64_t v414 = &v331[8 * v327];
              *(void *)unint64_t v414 = v141;
              uint64_t v144 = v414 + 8;
              while (v142 != v326)
              {
                uint64_t v415 = *((void *)v142 - 1);
                v142 -= 8;
                *((void *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[274] = v414;
              v140[275] = v144;
              v140[276] = &v331[8 * v330];
              if (v326) {
                operator delete(v326);
              }
            }
            else
            {
              *(void *)unint64_t v142 = v141;
              uint64_t v144 = v142 + 8;
            }
            v140[275] = v144;
            break;
          case '<':
            unint64_t v145 = *(void **)a1[2];
            uint64_t v146 = *(_WORD *)(a1[3] + 76) & 0x7FFF;
            uint64_t v147 = (char *)v145[278];
            unint64_t v148 = v145[279];
            if ((unint64_t)v147 >= v148)
            {
              unint64_t v332 = (char *)v145[277];
              uint64_t v333 = (v147 - v332) >> 3;
              if ((unint64_t)(v333 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v334 = v148 - (void)v332;
              unint64_t v335 = (uint64_t)(v148 - (void)v332) >> 2;
              if (v335 <= v333 + 1) {
                unint64_t v335 = v333 + 1;
              }
              if (v334 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v336 = v335;
              }
              if (v336)
              {
                unint64_t v337 = (char *)sub_5714((uint64_t)(v145 + 279), v336);
                uint64_t v147 = (char *)v145[278];
                unint64_t v332 = (char *)v145[277];
              }
              else
              {
                unint64_t v337 = 0;
              }
              unint64_t v416 = &v337[8 * v333];
              *(void *)unint64_t v416 = v146;
              unint64_t v149 = v416 + 8;
              while (v147 != v332)
              {
                uint64_t v417 = *((void *)v147 - 1);
                v147 -= 8;
                *((void *)v416 - 1) = v417;
                v416 -= 8;
              }
              v145[277] = v416;
              v145[278] = v149;
              v145[279] = &v337[8 * v336];
              if (v332) {
                operator delete(v332);
              }
            }
            else
            {
              *(void *)uint64_t v147 = v146;
              unint64_t v149 = v147 + 8;
            }
            v145[278] = v149;
            break;
          case '=':
            unint64_t v150 = *(void **)a1[2];
            uint64_t v151 = *(_WORD *)(a1[3] + 86) & 0x7FFF;
            unint64_t v152 = (char *)v150[281];
            unint64_t v153 = v150[282];
            if ((unint64_t)v152 >= v153)
            {
              uint64_t v338 = (char *)v150[280];
              uint64_t v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v340 = v153 - (void)v338;
              unint64_t v341 = (uint64_t)(v153 - (void)v338) >> 2;
              if (v341 <= v339 + 1) {
                unint64_t v341 = v339 + 1;
              }
              if (v340 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v342 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v342 = v341;
              }
              if (v342)
              {
                unint64_t v343 = (char *)sub_5714((uint64_t)(v150 + 282), v342);
                unint64_t v152 = (char *)v150[281];
                uint64_t v338 = (char *)v150[280];
              }
              else
              {
                unint64_t v343 = 0;
              }
              uint64_t v418 = &v343[8 * v339];
              *(void *)uint64_t v418 = v151;
              unint64_t v154 = v418 + 8;
              while (v152 != v338)
              {
                uint64_t v419 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[280] = v418;
              v150[281] = v154;
              v150[282] = &v343[8 * v342];
              if (v338) {
                operator delete(v338);
              }
            }
            else
            {
              *(void *)unint64_t v152 = v151;
              unint64_t v154 = v152 + 8;
            }
            v150[281] = v154;
            break;
          case '>':
            unint64_t v155 = *(void **)a1[2];
            uint64_t v156 = *(_WORD *)(a1[3] + 78) & 0x7FFF;
            uint64_t v157 = (char *)v155[284];
            unint64_t v158 = v155[285];
            if ((unint64_t)v157 >= v158)
            {
              unint64_t v344 = (char *)v155[283];
              uint64_t v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v346 = v158 - (void)v344;
              unint64_t v347 = (uint64_t)(v158 - (void)v344) >> 2;
              if (v347 <= v345 + 1) {
                unint64_t v347 = v345 + 1;
              }
              if (v346 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v348 = v347;
              }
              if (v348)
              {
                uint64_t v349 = (char *)sub_5714((uint64_t)(v155 + 285), v348);
                uint64_t v157 = (char *)v155[284];
                unint64_t v344 = (char *)v155[283];
              }
              else
              {
                uint64_t v349 = 0;
              }
              int v420 = &v349[8 * v345];
              *(void *)int v420 = v156;
              unint64_t v159 = v420 + 8;
              while (v157 != v344)
              {
                uint64_t v421 = *((void *)v157 - 1);
                v157 -= 8;
                *((void *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[283] = v420;
              v155[284] = v159;
              v155[285] = &v349[8 * v348];
              if (v344) {
                operator delete(v344);
              }
            }
            else
            {
              *(void *)uint64_t v157 = v156;
              unint64_t v159 = v157 + 8;
            }
            v155[284] = v159;
            break;
          case '?':
            unint64_t v160 = *(void **)a1[2];
            uint64_t v161 = *(_WORD *)(a1[3] + 88) & 0x7FFF;
            int v162 = (char *)v160[287];
            unint64_t v163 = v160[288];
            if ((unint64_t)v162 >= v163)
            {
              int v350 = (char *)v160[286];
              uint64_t v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v352 = v163 - (void)v350;
              unint64_t v353 = (uint64_t)(v163 - (void)v350) >> 2;
              if (v353 <= v351 + 1) {
                unint64_t v353 = v351 + 1;
              }
              if (v352 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v354 = v353;
              }
              if (v354)
              {
                unint64_t v355 = (char *)sub_5714((uint64_t)(v160 + 288), v354);
                int v162 = (char *)v160[287];
                int v350 = (char *)v160[286];
              }
              else
              {
                unint64_t v355 = 0;
              }
              uint64_t v422 = &v355[8 * v351];
              *(void *)uint64_t v422 = v161;
              unint64_t v164 = v422 + 8;
              while (v162 != v350)
              {
                uint64_t v423 = *((void *)v162 - 1);
                v162 -= 8;
                *((void *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[286] = v422;
              v160[287] = v164;
              v160[288] = &v355[8 * v354];
              if (v350) {
                operator delete(v350);
              }
            }
            else
            {
              *(void *)int v162 = v161;
              unint64_t v164 = v162 + 8;
            }
            v160[287] = v164;
            break;
          case '@':
            unint64_t v165 = *(void **)a1[2];
            uint64_t v166 = *(_WORD *)(a1[3] + 80) & 0x7FFF;
            uint64_t v167 = (char *)v165[290];
            unint64_t v168 = v165[291];
            if ((unint64_t)v167 >= v168)
            {
              unint64_t v356 = (char *)v165[289];
              uint64_t v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61) {
LABEL_594:
              }
                sub_566C();
              unint64_t v358 = v168 - (void)v356;
              unint64_t v359 = (uint64_t)(v168 - (void)v356) >> 2;
              if (v359 <= v357 + 1) {
                unint64_t v359 = v357 + 1;
              }
              if (v358 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v360 = v359;
              }
              if (v360)
              {
                unint64_t v361 = (char *)sub_5714((uint64_t)(v165 + 291), v360);
                uint64_t v167 = (char *)v165[290];
                unint64_t v356 = (char *)v165[289];
              }
              else
              {
                unint64_t v361 = 0;
              }
              unint64_t v424 = &v361[8 * v357];
              *(void *)unint64_t v424 = v166;
              uint64_t v169 = v424 + 8;
              while (v167 != v356)
              {
                uint64_t v425 = *((void *)v167 - 1);
                v167 -= 8;
                *((void *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[289] = v424;
              v165[290] = v169;
              v165[291] = &v361[8 * v360];
              if (v356) {
                operator delete(v356);
              }
            }
            else
            {
              *(void *)uint64_t v167 = v166;
              uint64_t v169 = v167 + 8;
            }
            v165[290] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_16AD8C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v190 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v189 = *v190;
    uint64_t v191 = (char *)v190[1] - (char *)*v190;
    if (v191)
    {
      unint64_t v192 = v191 >> 2;
      if (v192 <= 1) {
        unint64_t v192 = 1;
      }
      do
      {
        int v193 = *v189++;
        switch(v193)
        {
          case 15:
            uint64_t v194 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            uint64_t v195 = (void *)(*(void *)a1[2] + 1144);
            goto LABEL_248;
          case 16:
            uint64_t v194 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v195 = (void *)(*(void *)a1[2] + 1168);
            goto LABEL_248;
          case 17:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 44);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1192);
            goto LABEL_248;
          case 18:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 32);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1216);
            goto LABEL_248;
          case 19:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 38);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1240);
            goto LABEL_248;
          case 20:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 26);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1264);
            goto LABEL_248;
          case 21:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 40);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1288);
            goto LABEL_248;
          case 22:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 28);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1312);
            goto LABEL_248;
          case 23:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 46);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1336);
            goto LABEL_248;
          case 24:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 34);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1360);
            goto LABEL_248;
          case 25:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 42);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1384);
            goto LABEL_248;
          case 26:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 30);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1408);
            goto LABEL_248;
          case 27:
            uint64_t v194 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            uint64_t v195 = (void *)(*(void *)a1[2] + 1432);
LABEL_248:
            *(void *)(*v195 - 8) += v194;
            break;
          default:
            break;
        }
        --v192;
      }
      while (v192);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xF:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            unint64_t v12 = (char *)v10[143];
            unint64_t v13 = v10[144];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v85 = (char *)v10[142];
              uint64_t v86 = (v12 - v85) >> 3;
              if ((unint64_t)(v86 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v87 = v13 - (void)v85;
              unint64_t v88 = (uint64_t)(v13 - (void)v85) >> 2;
              if (v88 <= v86 + 1) {
                unint64_t v88 = v86 + 1;
              }
              if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v88;
              }
              if (v89)
              {
                unint64_t v90 = (char *)sub_5714((uint64_t)(v10 + 144), v89);
                unint64_t v12 = (char *)v10[143];
                unint64_t v85 = (char *)v10[142];
              }
              else
              {
                unint64_t v90 = 0;
              }
              unint64_t v163 = &v90[8 * v86];
              *(void *)unint64_t v163 = v11;
              unint64_t v14 = v163 + 8;
              while (v12 != v85)
              {
                uint64_t v164 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v163 - 1) = v164;
                v163 -= 8;
              }
              v10[142] = v163;
              v10[143] = v14;
              v10[144] = &v90[8 * v89];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *(void *)unint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[143] = v14;
            break;
          case 0x10:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v17 = (char *)v15[146];
            unint64_t v18 = v15[147];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v91 = (char *)v15[145];
              uint64_t v92 = (v17 - v91) >> 3;
              if ((unint64_t)(v92 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v93 = v18 - (void)v91;
              unint64_t v94 = (uint64_t)(v18 - (void)v91) >> 2;
              if (v94 <= v92 + 1) {
                unint64_t v94 = v92 + 1;
              }
              if (v93 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v94;
              }
              if (v95)
              {
                uint64_t v96 = (char *)sub_5714((uint64_t)(v15 + 147), v95);
                uint64_t v17 = (char *)v15[146];
                uint64_t v91 = (char *)v15[145];
              }
              else
              {
                uint64_t v96 = 0;
              }
              unint64_t v165 = &v96[8 * v92];
              *(void *)unint64_t v165 = v16;
              unint64_t v19 = v165 + 8;
              while (v17 != v91)
              {
                uint64_t v166 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v165 - 1) = v166;
                v165 -= 8;
              }
              v15[145] = v165;
              v15[146] = v19;
              v15[147] = &v96[8 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[146] = v19;
            break;
          case 0x11:
            uint64_t v20 = a1[2];
            uint64_t v21 = *(void **)v20;
            uint64_t v22 = *(unsigned __int16 *)(a1[3] + 44);
            unint64_t v23 = *(char **)(*(void *)v20 + 1192);
            unint64_t v24 = *(void *)(*(void *)v20 + 1200);
            if ((unint64_t)v23 >= v24)
            {
              uint64_t v97 = (char *)v21[148];
              uint64_t v98 = (v23 - v97) >> 3;
              if ((unint64_t)(v98 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v99 = v24 - (void)v97;
              unint64_t v100 = (uint64_t)(v24 - (void)v97) >> 2;
              if (v100 <= v98 + 1) {
                unint64_t v100 = v98 + 1;
              }
              if (v99 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v100;
              }
              if (v101)
              {
                unint64_t v102 = (char *)sub_5714((uint64_t)(v21 + 150), v101);
                unint64_t v23 = (char *)v21[149];
                uint64_t v97 = (char *)v21[148];
              }
              else
              {
                unint64_t v102 = 0;
              }
              uint64_t v167 = &v102[8 * v98];
              *(void *)uint64_t v167 = v22;
              uint64_t v25 = v167 + 8;
              while (v23 != v97)
              {
                uint64_t v168 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v167 - 1) = v168;
                v167 -= 8;
              }
              v21[148] = v167;
              v21[149] = v25;
              v21[150] = &v102[8 * v101];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *(void *)unint64_t v23 = v22;
              uint64_t v25 = v23 + 8;
            }
            v21[149] = v25;
            break;
          case 0x12:
            uint64_t v26 = a1[2];
            uint64_t v27 = *(void **)v26;
            uint64_t v28 = *(unsigned __int16 *)(a1[3] + 32);
            unint64_t v29 = *(char **)(*(void *)v26 + 1216);
            unint64_t v30 = *(void *)(*(void *)v26 + 1224);
            if ((unint64_t)v29 >= v30)
            {
              unint64_t v103 = (char *)v27[151];
              uint64_t v104 = (v29 - v103) >> 3;
              if ((unint64_t)(v104 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v105 = v30 - (void)v103;
              unint64_t v106 = (uint64_t)(v30 - (void)v103) >> 2;
              if (v106 <= v104 + 1) {
                unint64_t v106 = v104 + 1;
              }
              if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v106;
              }
              if (v107)
              {
                unint64_t v108 = (char *)sub_5714((uint64_t)(v27 + 153), v107);
                unint64_t v29 = (char *)v27[152];
                unint64_t v103 = (char *)v27[151];
              }
              else
              {
                unint64_t v108 = 0;
              }
              uint64_t v169 = &v108[8 * v104];
              *(void *)uint64_t v169 = v28;
              uint64_t v31 = v169 + 8;
              while (v29 != v103)
              {
                uint64_t v170 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v169 - 1) = v170;
                v169 -= 8;
              }
              v27[151] = v169;
              v27[152] = v31;
              v27[153] = &v108[8 * v107];
              if (v103) {
                operator delete(v103);
              }
            }
            else
            {
              *(void *)unint64_t v29 = v28;
              uint64_t v31 = v29 + 8;
            }
            v27[152] = v31;
            break;
          case 0x13:
            uint64_t v32 = a1[2];
            unint64_t v33 = *(void **)v32;
            uint64_t v34 = *(unsigned __int16 *)(a1[3] + 38);
            unint64_t v35 = *(char **)(*(void *)v32 + 1240);
            unint64_t v36 = *(void *)(*(void *)v32 + 1248);
            if ((unint64_t)v35 >= v36)
            {
              uint64_t v109 = (char *)v33[154];
              uint64_t v110 = (v35 - v109) >> 3;
              if ((unint64_t)(v110 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v111 = v36 - (void)v109;
              unint64_t v112 = (uint64_t)(v36 - (void)v109) >> 2;
              if (v112 <= v110 + 1) {
                unint64_t v112 = v110 + 1;
              }
              if (v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v112;
              }
              if (v113)
              {
                unint64_t v114 = (char *)sub_5714((uint64_t)(v33 + 156), v113);
                unint64_t v35 = (char *)v33[155];
                uint64_t v109 = (char *)v33[154];
              }
              else
              {
                unint64_t v114 = 0;
              }
              uint64_t v171 = &v114[8 * v110];
              *(void *)uint64_t v171 = v34;
              unint64_t v37 = v171 + 8;
              while (v35 != v109)
              {
                uint64_t v172 = *((void *)v35 - 1);
                v35 -= 8;
                *((void *)v171 - 1) = v172;
                v171 -= 8;
              }
              v33[154] = v171;
              v33[155] = v37;
              v33[156] = &v114[8 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *(void *)unint64_t v35 = v34;
              unint64_t v37 = v35 + 8;
            }
            v33[155] = v37;
            break;
          case 0x14:
            uint64_t v38 = a1[2];
            unint64_t v39 = *(void **)v38;
            uint64_t v40 = *(unsigned __int16 *)(a1[3] + 26);
            uint64_t v41 = *(char **)(*(void *)v38 + 1264);
            unint64_t v42 = *(void *)(*(void *)v38 + 1272);
            if ((unint64_t)v41 >= v42)
            {
              uint64_t v115 = (char *)v39[157];
              uint64_t v116 = (v41 - v115) >> 3;
              if ((unint64_t)(v116 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v117 = v42 - (void)v115;
              unint64_t v118 = (uint64_t)(v42 - (void)v115) >> 2;
              if (v118 <= v116 + 1) {
                unint64_t v118 = v116 + 1;
              }
              if (v117 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v118;
              }
              if (v119)
              {
                unint64_t v120 = (char *)sub_5714((uint64_t)(v39 + 159), v119);
                uint64_t v41 = (char *)v39[158];
                uint64_t v115 = (char *)v39[157];
              }
              else
              {
                unint64_t v120 = 0;
              }
              unint64_t v173 = &v120[8 * v116];
              *(void *)unint64_t v173 = v40;
              unint64_t v43 = v173 + 8;
              while (v41 != v115)
              {
                uint64_t v174 = *((void *)v41 - 1);
                v41 -= 8;
                *((void *)v173 - 1) = v174;
                v173 -= 8;
              }
              v39[157] = v173;
              v39[158] = v43;
              v39[159] = &v120[8 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *(void *)uint64_t v41 = v40;
              unint64_t v43 = v41 + 8;
            }
            v39[158] = v43;
            break;
          case 0x15:
            uint64_t v44 = a1[2];
            unint64_t v45 = *(void **)v44;
            uint64_t v46 = *(unsigned __int16 *)(a1[3] + 40);
            unint64_t v47 = *(char **)(*(void *)v44 + 1288);
            unint64_t v48 = *(void *)(*(void *)v44 + 1296);
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v121 = (char *)v45[160];
              uint64_t v122 = (v47 - v121) >> 3;
              if ((unint64_t)(v122 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v123 = v48 - (void)v121;
              unint64_t v124 = (uint64_t)(v48 - (void)v121) >> 2;
              if (v124 <= v122 + 1) {
                unint64_t v124 = v122 + 1;
              }
              if (v123 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v124;
              }
              if (v125)
              {
                uint64_t v126 = (char *)sub_5714((uint64_t)(v45 + 162), v125);
                unint64_t v47 = (char *)v45[161];
                uint64_t v121 = (char *)v45[160];
              }
              else
              {
                uint64_t v126 = 0;
              }
              uint64_t v175 = &v126[8 * v122];
              *(void *)uint64_t v175 = v46;
              uint64_t v49 = v175 + 8;
              while (v47 != v121)
              {
                uint64_t v176 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v175 - 1) = v176;
                v175 -= 8;
              }
              v45[160] = v175;
              v45[161] = v49;
              v45[162] = &v126[8 * v125];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[161] = v49;
            break;
          case 0x16:
            uint64_t v50 = a1[2];
            uint64_t v51 = *(void **)v50;
            uint64_t v52 = *(unsigned __int16 *)(a1[3] + 28);
            unint64_t v53 = *(char **)(*(void *)v50 + 1312);
            unint64_t v54 = *(void *)(*(void *)v50 + 1320);
            if ((unint64_t)v53 >= v54)
            {
              uint64_t v127 = (char *)v51[163];
              uint64_t v128 = (v53 - v127) >> 3;
              if ((unint64_t)(v128 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v129 = v54 - (void)v127;
              unint64_t v130 = (uint64_t)(v54 - (void)v127) >> 2;
              if (v130 <= v128 + 1) {
                unint64_t v130 = v128 + 1;
              }
              if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v131 = v130;
              }
              if (v131)
              {
                unint64_t v132 = (char *)sub_5714((uint64_t)(v51 + 165), v131);
                unint64_t v53 = (char *)v51[164];
                uint64_t v127 = (char *)v51[163];
              }
              else
              {
                unint64_t v132 = 0;
              }
              uint64_t v177 = &v132[8 * v128];
              *(void *)uint64_t v177 = v52;
              unint64_t v55 = v177 + 8;
              while (v53 != v127)
              {
                uint64_t v178 = *((void *)v53 - 1);
                v53 -= 8;
                *((void *)v177 - 1) = v178;
                v177 -= 8;
              }
              v51[163] = v177;
              v51[164] = v55;
              v51[165] = &v132[8 * v131];
              if (v127) {
                operator delete(v127);
              }
            }
            else
            {
              *(void *)unint64_t v53 = v52;
              unint64_t v55 = v53 + 8;
            }
            v51[164] = v55;
            break;
          case 0x17:
            uint64_t v56 = a1[2];
            uint64_t v57 = *(void **)v56;
            uint64_t v58 = *(unsigned __int16 *)(a1[3] + 46);
            unint64_t v59 = *(char **)(*(void *)v56 + 1336);
            unint64_t v60 = *(void *)(*(void *)v56 + 1344);
            if ((unint64_t)v59 >= v60)
            {
              unint64_t v133 = (char *)v57[166];
              uint64_t v134 = (v59 - v133) >> 3;
              if ((unint64_t)(v134 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v135 = v60 - (void)v133;
              unint64_t v136 = (uint64_t)(v60 - (void)v133) >> 2;
              if (v136 <= v134 + 1) {
                unint64_t v136 = v134 + 1;
              }
              if (v135 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v137 = v136;
              }
              if (v137)
              {
                unint64_t v138 = (char *)sub_5714((uint64_t)(v57 + 168), v137);
                unint64_t v59 = (char *)v57[167];
                unint64_t v133 = (char *)v57[166];
              }
              else
              {
                unint64_t v138 = 0;
              }
              unint64_t v179 = &v138[8 * v134];
              *(void *)unint64_t v179 = v58;
              uint64_t v61 = v179 + 8;
              while (v59 != v133)
              {
                uint64_t v180 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v179 - 1) = v180;
                v179 -= 8;
              }
              v57[166] = v179;
              v57[167] = v61;
              v57[168] = &v138[8 * v137];
              if (v133) {
                operator delete(v133);
              }
            }
            else
            {
              *(void *)unint64_t v59 = v58;
              uint64_t v61 = v59 + 8;
            }
            v57[167] = v61;
            break;
          case 0x18:
            uint64_t v62 = a1[2];
            unint64_t v63 = *(void **)v62;
            uint64_t v64 = *(unsigned __int16 *)(a1[3] + 34);
            unint64_t v65 = *(char **)(*(void *)v62 + 1360);
            unint64_t v66 = *(void *)(*(void *)v62 + 1368);
            if ((unint64_t)v65 >= v66)
            {
              uint64_t v139 = (char *)v63[169];
              uint64_t v140 = (v65 - v139) >> 3;
              if ((unint64_t)(v140 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v141 = v66 - (void)v139;
              unint64_t v142 = (uint64_t)(v66 - (void)v139) >> 2;
              if (v142 <= v140 + 1) {
                unint64_t v142 = v140 + 1;
              }
              if (v141 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v143 = v142;
              }
              if (v143)
              {
                uint64_t v144 = (char *)sub_5714((uint64_t)(v63 + 171), v143);
                unint64_t v65 = (char *)v63[170];
                uint64_t v139 = (char *)v63[169];
              }
              else
              {
                uint64_t v144 = 0;
              }
              uint64_t v181 = &v144[8 * v140];
              *(void *)uint64_t v181 = v64;
              unint64_t v67 = v181 + 8;
              while (v65 != v139)
              {
                uint64_t v182 = *((void *)v65 - 1);
                v65 -= 8;
                *((void *)v181 - 1) = v182;
                v181 -= 8;
              }
              v63[169] = v181;
              v63[170] = v67;
              v63[171] = &v144[8 * v143];
              if (v139) {
                operator delete(v139);
              }
            }
            else
            {
              *(void *)unint64_t v65 = v64;
              unint64_t v67 = v65 + 8;
            }
            v63[170] = v67;
            break;
          case 0x19:
            uint64_t v68 = a1[2];
            uint64_t v69 = *(void **)v68;
            uint64_t v70 = *(unsigned __int16 *)(a1[3] + 42);
            uint64_t v71 = *(char **)(*(void *)v68 + 1384);
            unint64_t v72 = *(void *)(*(void *)v68 + 1392);
            if ((unint64_t)v71 >= v72)
            {
              unint64_t v145 = (char *)v69[172];
              uint64_t v146 = (v71 - v145) >> 3;
              if ((unint64_t)(v146 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v147 = v72 - (void)v145;
              unint64_t v148 = (uint64_t)(v72 - (void)v145) >> 2;
              if (v148 <= v146 + 1) {
                unint64_t v148 = v146 + 1;
              }
              if (v147 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v149 = v148;
              }
              if (v149)
              {
                unint64_t v150 = (char *)sub_5714((uint64_t)(v69 + 174), v149);
                uint64_t v71 = (char *)v69[173];
                unint64_t v145 = (char *)v69[172];
              }
              else
              {
                unint64_t v150 = 0;
              }
              uint64_t v183 = &v150[8 * v146];
              *(void *)uint64_t v183 = v70;
              unint64_t v73 = v183 + 8;
              while (v71 != v145)
              {
                uint64_t v184 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v183 - 1) = v184;
                v183 -= 8;
              }
              v69[172] = v183;
              v69[173] = v73;
              v69[174] = &v150[8 * v149];
              if (v145) {
                operator delete(v145);
              }
            }
            else
            {
              *(void *)uint64_t v71 = v70;
              unint64_t v73 = v71 + 8;
            }
            v69[173] = v73;
            break;
          case 0x1A:
            uint64_t v74 = a1[2];
            uint64_t v75 = *(void **)v74;
            uint64_t v76 = *(unsigned __int16 *)(a1[3] + 30);
            unint64_t v77 = *(char **)(*(void *)v74 + 1408);
            unint64_t v78 = *(void *)(*(void *)v74 + 1416);
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v151 = (char *)v75[175];
              uint64_t v152 = (v77 - v151) >> 3;
              if ((unint64_t)(v152 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v153 = v78 - (void)v151;
              unint64_t v154 = (uint64_t)(v78 - (void)v151) >> 2;
              if (v154 <= v152 + 1) {
                unint64_t v154 = v152 + 1;
              }
              if (v153 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v154;
              }
              if (v155)
              {
                uint64_t v156 = (char *)sub_5714((uint64_t)(v75 + 177), v155);
                unint64_t v77 = (char *)v75[176];
                uint64_t v151 = (char *)v75[175];
              }
              else
              {
                uint64_t v156 = 0;
              }
              unint64_t v185 = &v156[8 * v152];
              *(void *)unint64_t v185 = v76;
              unint64_t v79 = v185 + 8;
              while (v77 != v151)
              {
                uint64_t v186 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v185 - 1) = v186;
                v185 -= 8;
              }
              v75[175] = v185;
              v75[176] = v79;
              v75[177] = &v156[8 * v155];
              if (v151) {
                operator delete(v151);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              unint64_t v79 = v77 + 8;
            }
            v75[176] = v79;
            break;
          case 0x1B:
            uint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            unint64_t v82 = (char *)v80[179];
            unint64_t v83 = v80[180];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v157 = (char *)v80[178];
              uint64_t v158 = (v82 - v157) >> 3;
              if ((unint64_t)(v158 + 1) >> 61) {
LABEL_252:
              }
                sub_566C();
              unint64_t v159 = v83 - (void)v157;
              unint64_t v160 = (uint64_t)(v83 - (void)v157) >> 2;
              if (v160 <= v158 + 1) {
                unint64_t v160 = v158 + 1;
              }
              if (v159 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v161 = v160;
              }
              if (v161)
              {
                int v162 = (char *)sub_5714((uint64_t)(v80 + 180), v161);
                unint64_t v82 = (char *)v80[179];
                uint64_t v157 = (char *)v80[178];
              }
              else
              {
                int v162 = 0;
              }
              uint64_t v187 = &v162[8 * v158];
              *(void *)uint64_t v187 = v81;
              unint64_t v84 = v187 + 8;
              while (v82 != v157)
              {
                uint64_t v188 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v187 - 1) = v188;
                v187 -= 8;
              }
              v80[178] = v187;
              v80[179] = v84;
              v80[180] = &v162[8 * v161];
              if (v157) {
                operator delete(v157);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[179] = v84;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_16B9EC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v208 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v207 = *v208;
    uint64_t v209 = (char *)v208[1] - (char *)*v208;
    if (v209)
    {
      unint64_t v210 = v209 >> 2;
      if (v210 <= 1) {
        unint64_t v210 = 1;
      }
      do
      {
        int v211 = *v207++;
        switch(v211)
        {
          case 0:
            unint64_t v212 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 784);
            goto LABEL_284;
          case 1:
            unint64_t v212 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 808);
            goto LABEL_284;
          case 2:
            unint64_t v212 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 832);
            goto LABEL_284;
          case 3:
            unint64_t v212 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 856);
            goto LABEL_284;
          case 4:
            unint64_t v212 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 880);
            goto LABEL_284;
          case 5:
            unint64_t v212 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 904);
            goto LABEL_284;
          case 6:
            unint64_t v212 = *(unsigned __int16 *)(a1[3] + 62);
            uint64_t v213 = (void *)(*(void *)a1[2] + 928);
            goto LABEL_284;
          case 7:
            unint64_t v212 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 952);
            goto LABEL_284;
          case 8:
            unint64_t v212 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 976);
            goto LABEL_284;
          case 9:
            unint64_t v212 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 1000);
            goto LABEL_284;
          case 10:
            unint64_t v212 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 1024);
            goto LABEL_284;
          case 11:
            unint64_t v212 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 1048);
            goto LABEL_284;
          case 12:
            unint64_t v212 = *(_DWORD *)(a1[3] + 56) & 0xFFFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 1072);
            goto LABEL_284;
          case 13:
            unint64_t v212 = *(unsigned __int16 *)(a1[3] + 60);
            uint64_t v213 = (void *)(*(void *)a1[2] + 1096);
            goto LABEL_284;
          case 14:
            unint64_t v212 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 1120);
LABEL_284:
            *(void *)(*v213 - 8) += v212;
            break;
          default:
            break;
        }
        --v210;
      }
      while (v210);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            unint64_t v12 = (uint64_t *)v10[98];
            unint64_t v13 = v10[99];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v87 = (uint64_t *)v10[97];
              uint64_t v88 = v12 - v87;
              if ((unint64_t)(v88 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v89 = v13 - (void)v87;
              unint64_t v90 = (uint64_t)(v13 - (void)v87) >> 2;
              if (v90 <= v88 + 1) {
                unint64_t v90 = v88 + 1;
              }
              if (v89 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v90;
              }
              if (v91)
              {
                uint64_t v92 = (char *)sub_5714((uint64_t)(v10 + 99), v91);
                unint64_t v12 = (uint64_t *)v10[98];
                unint64_t v87 = (uint64_t *)v10[97];
              }
              else
              {
                uint64_t v92 = 0;
              }
              uint64_t v177 = (uint64_t *)&v92[8 * v88];
              *uint64_t v177 = v11;
              unint64_t v14 = v177 + 1;
              while (v12 != v87)
              {
                uint64_t v178 = *--v12;
                *--uint64_t v177 = v178;
              }
              v10[97] = v177;
              v10[98] = v14;
              v10[99] = &v92[8 * v91];
              if (v87) {
                operator delete(v87);
              }
            }
            else
            {
              *unint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[98] = v14;
            break;
          case 1:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            uint64_t v17 = (uint64_t *)v15[101];
            unint64_t v18 = v15[102];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v93 = (uint64_t *)v15[100];
              uint64_t v94 = v17 - v93;
              if ((unint64_t)(v94 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v95 = v18 - (void)v93;
              unint64_t v96 = (uint64_t)(v18 - (void)v93) >> 2;
              if (v96 <= v94 + 1) {
                unint64_t v96 = v94 + 1;
              }
              if (v95 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v96;
              }
              if (v97)
              {
                uint64_t v98 = (char *)sub_5714((uint64_t)(v15 + 102), v97);
                uint64_t v17 = (uint64_t *)v15[101];
                unint64_t v93 = (uint64_t *)v15[100];
              }
              else
              {
                uint64_t v98 = 0;
              }
              unint64_t v179 = (uint64_t *)&v98[8 * v94];
              *unint64_t v179 = v16;
              unint64_t v19 = v179 + 1;
              while (v17 != v93)
              {
                uint64_t v180 = *--v17;
                *--unint64_t v179 = v180;
              }
              v15[100] = v179;
              v15[101] = v19;
              v15[102] = &v98[8 * v97];
              if (v93) {
                operator delete(v93);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[101] = v19;
            break;
          case 2:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            uint64_t v22 = (uint64_t *)v20[104];
            unint64_t v23 = v20[105];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v99 = (uint64_t *)v20[103];
              uint64_t v100 = v22 - v99;
              if ((unint64_t)(v100 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v101 = v23 - (void)v99;
              unint64_t v102 = (uint64_t)(v23 - (void)v99) >> 2;
              if (v102 <= v100 + 1) {
                unint64_t v102 = v100 + 1;
              }
              if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v102;
              }
              if (v103)
              {
                uint64_t v104 = (char *)sub_5714((uint64_t)(v20 + 105), v103);
                uint64_t v22 = (uint64_t *)v20[104];
                unint64_t v99 = (uint64_t *)v20[103];
              }
              else
              {
                uint64_t v104 = 0;
              }
              uint64_t v181 = (uint64_t *)&v104[8 * v100];
              *uint64_t v181 = v21;
              unint64_t v24 = v181 + 1;
              while (v22 != v99)
              {
                uint64_t v182 = *--v22;
                *--uint64_t v181 = v182;
              }
              v20[103] = v181;
              v20[104] = v24;
              v20[105] = &v104[8 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[104] = v24;
            break;
          case 3:
            uint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x3FFFF;
            uint64_t v27 = (unint64_t *)v25[107];
            unint64_t v28 = v25[108];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v105 = (unint64_t *)v25[106];
              uint64_t v106 = v27 - v105;
              if ((unint64_t)(v106 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v107 = v28 - (void)v105;
              unint64_t v108 = (uint64_t)(v28 - (void)v105) >> 2;
              if (v108 <= v106 + 1) {
                unint64_t v108 = v106 + 1;
              }
              if (v107 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109)
              {
                uint64_t v110 = (char *)sub_5714((uint64_t)(v25 + 108), v109);
                uint64_t v27 = (unint64_t *)v25[107];
                unint64_t v105 = (unint64_t *)v25[106];
              }
              else
              {
                uint64_t v110 = 0;
              }
              uint64_t v183 = (unint64_t *)&v110[8 * v106];
              unint64_t *v183 = v26;
              unint64_t v29 = v183 + 1;
              while (v27 != v105)
              {
                unint64_t v184 = *--v27;
                *--uint64_t v183 = v184;
              }
              v25[106] = v183;
              v25[107] = v29;
              v25[108] = &v110[8 * v109];
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[107] = v29;
            break;
          case 4:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            uint64_t v32 = (uint64_t *)v30[110];
            unint64_t v33 = v30[111];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v111 = (uint64_t *)v30[109];
              uint64_t v112 = v32 - v111;
              if ((unint64_t)(v112 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v113 = v33 - (void)v111;
              unint64_t v114 = (uint64_t)(v33 - (void)v111) >> 2;
              if (v114 <= v112 + 1) {
                unint64_t v114 = v112 + 1;
              }
              if (v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v114;
              }
              if (v115)
              {
                uint64_t v116 = (char *)sub_5714((uint64_t)(v30 + 111), v115);
                uint64_t v32 = (uint64_t *)v30[110];
                unint64_t v111 = (uint64_t *)v30[109];
              }
              else
              {
                uint64_t v116 = 0;
              }
              unint64_t v185 = (uint64_t *)&v116[8 * v112];
              *unint64_t v185 = v31;
              uint64_t v34 = v185 + 1;
              while (v32 != v111)
              {
                uint64_t v186 = *--v32;
                *--unint64_t v185 = v186;
              }
              v30[109] = v185;
              v30[110] = v34;
              v30[111] = &v116[8 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              uint64_t *v32 = v31;
              uint64_t v34 = v32 + 1;
            }
            v30[110] = v34;
            break;
          case 5:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            unint64_t v37 = (uint64_t *)v35[113];
            unint64_t v38 = v35[114];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v117 = (uint64_t *)v35[112];
              uint64_t v118 = v37 - v117;
              if ((unint64_t)(v118 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v119 = v38 - (void)v117;
              unint64_t v120 = (uint64_t)(v38 - (void)v117) >> 2;
              if (v120 <= v118 + 1) {
                unint64_t v120 = v118 + 1;
              }
              if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v120;
              }
              if (v121)
              {
                uint64_t v122 = (char *)sub_5714((uint64_t)(v35 + 114), v121);
                unint64_t v37 = (uint64_t *)v35[113];
                unint64_t v117 = (uint64_t *)v35[112];
              }
              else
              {
                uint64_t v122 = 0;
              }
              uint64_t v187 = (uint64_t *)&v122[8 * v118];
              *uint64_t v187 = v36;
              unint64_t v39 = v187 + 1;
              while (v37 != v117)
              {
                uint64_t v188 = *--v37;
                *--uint64_t v187 = v188;
              }
              v35[112] = v187;
              v35[113] = v39;
              v35[114] = &v122[8 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *unint64_t v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[113] = v39;
            break;
          case 6:
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned __int16 *)(a1[3] + 62);
            unint64_t v43 = *(char **)(*(void *)v40 + 928);
            unint64_t v44 = *(void *)(*(void *)v40 + 936);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v123 = (char *)v41[115];
              uint64_t v124 = (v43 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v125 = v44 - (void)v123;
              unint64_t v126 = (uint64_t)(v44 - (void)v123) >> 2;
              if (v126 <= v124 + 1) {
                unint64_t v126 = v124 + 1;
              }
              if (v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v126;
              }
              if (v127)
              {
                uint64_t v128 = (char *)sub_5714((uint64_t)(v41 + 117), v127);
                unint64_t v43 = (char *)v41[116];
                unint64_t v123 = (char *)v41[115];
              }
              else
              {
                uint64_t v128 = 0;
              }
              uint64_t v189 = &v128[8 * v124];
              *(void *)uint64_t v189 = v42;
              unint64_t v45 = v189 + 8;
              while (v43 != v123)
              {
                uint64_t v190 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v189 - 1) = v190;
                v189 -= 8;
              }
              v41[115] = v189;
              v41[116] = v45;
              v41[117] = &v128[8 * v127];
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              *(void *)unint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[116] = v45;
            break;
          case 7:
            uint64_t v46 = *(void **)a1[2];
            uint64_t v47 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            unint64_t v48 = (uint64_t *)v46[119];
            unint64_t v49 = v46[120];
            if ((unint64_t)v48 >= v49)
            {
              unint64_t v129 = (uint64_t *)v46[118];
              uint64_t v130 = v48 - v129;
              if ((unint64_t)(v130 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v131 = v49 - (void)v129;
              unint64_t v132 = (uint64_t)(v49 - (void)v129) >> 2;
              if (v132 <= v130 + 1) {
                unint64_t v132 = v130 + 1;
              }
              if (v131 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v132;
              }
              if (v133)
              {
                uint64_t v134 = (char *)sub_5714((uint64_t)(v46 + 120), v133);
                unint64_t v48 = (uint64_t *)v46[119];
                unint64_t v129 = (uint64_t *)v46[118];
              }
              else
              {
                uint64_t v134 = 0;
              }
              uint64_t v191 = (uint64_t *)&v134[8 * v130];
              *uint64_t v191 = v47;
              uint64_t v50 = v191 + 1;
              while (v48 != v129)
              {
                uint64_t v192 = *--v48;
                *--uint64_t v191 = v192;
              }
              v46[118] = v191;
              v46[119] = v50;
              v46[120] = &v134[8 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              *unint64_t v48 = v47;
              uint64_t v50 = v48 + 1;
            }
            v46[119] = v50;
            break;
          case 8:
            uint64_t v51 = *(void **)a1[2];
            uint64_t v52 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            unint64_t v53 = (uint64_t *)v51[122];
            unint64_t v54 = v51[123];
            if ((unint64_t)v53 >= v54)
            {
              unint64_t v135 = (uint64_t *)v51[121];
              uint64_t v136 = v53 - v135;
              if ((unint64_t)(v136 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v137 = v54 - (void)v135;
              unint64_t v138 = (uint64_t)(v54 - (void)v135) >> 2;
              if (v138 <= v136 + 1) {
                unint64_t v138 = v136 + 1;
              }
              if (v137 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v138;
              }
              if (v139)
              {
                uint64_t v140 = (char *)sub_5714((uint64_t)(v51 + 123), v139);
                unint64_t v53 = (uint64_t *)v51[122];
                unint64_t v135 = (uint64_t *)v51[121];
              }
              else
              {
                uint64_t v140 = 0;
              }
              int v193 = (uint64_t *)&v140[8 * v136];
              uint64_t *v193 = v52;
              unint64_t v55 = v193 + 1;
              while (v53 != v135)
              {
                uint64_t v194 = *--v53;
                *--int v193 = v194;
              }
              v51[121] = v193;
              v51[122] = v55;
              v51[123] = &v140[8 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *unint64_t v53 = v52;
              unint64_t v55 = v53 + 1;
            }
            v51[122] = v55;
            break;
          case 9:
            uint64_t v56 = *(void **)a1[2];
            uint64_t v57 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            uint64_t v58 = (uint64_t *)v56[125];
            unint64_t v59 = v56[126];
            if ((unint64_t)v58 >= v59)
            {
              unint64_t v141 = (uint64_t *)v56[124];
              uint64_t v142 = v58 - v141;
              if ((unint64_t)(v142 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v143 = v59 - (void)v141;
              unint64_t v144 = (uint64_t)(v59 - (void)v141) >> 2;
              if (v144 <= v142 + 1) {
                unint64_t v144 = v142 + 1;
              }
              if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v144;
              }
              if (v145)
              {
                uint64_t v146 = (char *)sub_5714((uint64_t)(v56 + 126), v145);
                uint64_t v58 = (uint64_t *)v56[125];
                unint64_t v141 = (uint64_t *)v56[124];
              }
              else
              {
                uint64_t v146 = 0;
              }
              uint64_t v195 = (uint64_t *)&v146[8 * v142];
              *uint64_t v195 = v57;
              unint64_t v60 = v195 + 1;
              while (v58 != v141)
              {
                uint64_t v196 = *--v58;
                *--uint64_t v195 = v196;
              }
              v56[124] = v195;
              v56[125] = v60;
              v56[126] = &v146[8 * v145];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              *uint64_t v58 = v57;
              unint64_t v60 = v58 + 1;
            }
            v56[125] = v60;
            break;
          case 0xA:
            uint64_t v61 = *(void **)a1[2];
            uint64_t v62 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            unint64_t v63 = (uint64_t *)v61[128];
            unint64_t v64 = v61[129];
            if ((unint64_t)v63 >= v64)
            {
              unint64_t v147 = (uint64_t *)v61[127];
              uint64_t v148 = v63 - v147;
              if ((unint64_t)(v148 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v149 = v64 - (void)v147;
              unint64_t v150 = (uint64_t)(v64 - (void)v147) >> 2;
              if (v150 <= v148 + 1) {
                unint64_t v150 = v148 + 1;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                uint64_t v152 = (char *)sub_5714((uint64_t)(v61 + 129), v151);
                unint64_t v63 = (uint64_t *)v61[128];
                unint64_t v147 = (uint64_t *)v61[127];
              }
              else
              {
                uint64_t v152 = 0;
              }
              unint64_t v197 = (uint64_t *)&v152[8 * v148];
              *unint64_t v197 = v62;
              unint64_t v65 = v197 + 1;
              while (v63 != v147)
              {
                uint64_t v198 = *--v63;
                *--unint64_t v197 = v198;
              }
              v61[127] = v197;
              v61[128] = v65;
              v61[129] = &v152[8 * v151];
              if (v147) {
                operator delete(v147);
              }
            }
            else
            {
              *unint64_t v63 = v62;
              unint64_t v65 = v63 + 1;
            }
            v61[128] = v65;
            break;
          case 0xB:
            unint64_t v66 = *(void **)a1[2];
            uint64_t v67 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            uint64_t v68 = (uint64_t *)v66[131];
            unint64_t v69 = v66[132];
            if ((unint64_t)v68 >= v69)
            {
              unint64_t v153 = (uint64_t *)v66[130];
              uint64_t v154 = v68 - v153;
              if ((unint64_t)(v154 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v155 = v69 - (void)v153;
              unint64_t v156 = (uint64_t)(v69 - (void)v153) >> 2;
              if (v156 <= v154 + 1) {
                unint64_t v156 = v154 + 1;
              }
              if (v155 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v157 = v156;
              }
              if (v157)
              {
                uint64_t v158 = (char *)sub_5714((uint64_t)(v66 + 132), v157);
                uint64_t v68 = (uint64_t *)v66[131];
                unint64_t v153 = (uint64_t *)v66[130];
              }
              else
              {
                uint64_t v158 = 0;
              }
              uint64_t v199 = (uint64_t *)&v158[8 * v154];
              *uint64_t v199 = v67;
              uint64_t v70 = v199 + 1;
              while (v68 != v153)
              {
                uint64_t v200 = *--v68;
                *--uint64_t v199 = v200;
              }
              v66[130] = v199;
              v66[131] = v70;
              v66[132] = &v158[8 * v157];
              if (v153) {
                operator delete(v153);
              }
            }
            else
            {
              *uint64_t v68 = v67;
              uint64_t v70 = v68 + 1;
            }
            v66[131] = v70;
            break;
          case 0xC:
            uint64_t v71 = *(void **)a1[2];
            uint64_t v72 = *(_DWORD *)(a1[3] + 56) & 0xFFFFFLL;
            unint64_t v73 = (uint64_t *)v71[134];
            unint64_t v74 = v71[135];
            if ((unint64_t)v73 >= v74)
            {
              unint64_t v159 = (uint64_t *)v71[133];
              uint64_t v160 = v73 - v159;
              if ((unint64_t)(v160 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v161 = v74 - (void)v159;
              unint64_t v162 = (uint64_t)(v74 - (void)v159) >> 2;
              if (v162 <= v160 + 1) {
                unint64_t v162 = v160 + 1;
              }
              if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v163 = v162;
              }
              if (v163)
              {
                uint64_t v164 = (char *)sub_5714((uint64_t)(v71 + 135), v163);
                unint64_t v73 = (uint64_t *)v71[134];
                unint64_t v159 = (uint64_t *)v71[133];
              }
              else
              {
                uint64_t v164 = 0;
              }
              uint64_t v201 = (uint64_t *)&v164[8 * v160];
              uint64_t *v201 = v72;
              uint64_t v75 = v201 + 1;
              while (v73 != v159)
              {
                uint64_t v202 = *--v73;
                *--uint64_t v201 = v202;
              }
              v71[133] = v201;
              v71[134] = v75;
              v71[135] = &v164[8 * v163];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              *unint64_t v73 = v72;
              uint64_t v75 = v73 + 1;
            }
            v71[134] = v75;
            break;
          case 0xD:
            uint64_t v76 = a1[2];
            unint64_t v77 = *(void **)v76;
            uint64_t v78 = *(unsigned __int16 *)(a1[3] + 60);
            unint64_t v79 = *(char **)(*(void *)v76 + 1096);
            unint64_t v80 = *(void *)(*(void *)v76 + 1104);
            if ((unint64_t)v79 >= v80)
            {
              unint64_t v165 = (char *)v77[136];
              uint64_t v166 = (v79 - v165) >> 3;
              if ((unint64_t)(v166 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v167 = v80 - (void)v165;
              unint64_t v168 = (uint64_t)(v80 - (void)v165) >> 2;
              if (v168 <= v166 + 1) {
                unint64_t v168 = v166 + 1;
              }
              if (v167 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v168;
              }
              if (v169)
              {
                uint64_t v170 = (char *)sub_5714((uint64_t)(v77 + 138), v169);
                unint64_t v79 = (char *)v77[137];
                unint64_t v165 = (char *)v77[136];
              }
              else
              {
                uint64_t v170 = 0;
              }
              unint64_t v203 = &v170[8 * v166];
              *(void *)unint64_t v203 = v78;
              uint64_t v81 = v203 + 8;
              while (v79 != v165)
              {
                uint64_t v204 = *((void *)v79 - 1);
                v79 -= 8;
                *((void *)v203 - 1) = v204;
                v203 -= 8;
              }
              v77[136] = v203;
              v77[137] = v81;
              v77[138] = &v170[8 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              *(void *)unint64_t v79 = v78;
              uint64_t v81 = v79 + 8;
            }
            v77[137] = v81;
            break;
          case 0xE:
            unint64_t v82 = *(void **)a1[2];
            uint64_t v83 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            unint64_t v84 = (uint64_t *)v82[140];
            unint64_t v85 = v82[141];
            if ((unint64_t)v84 >= v85)
            {
              uint64_t v171 = (uint64_t *)v82[139];
              uint64_t v172 = v84 - v171;
              if ((unint64_t)(v172 + 1) >> 61) {
LABEL_288:
              }
                sub_566C();
              unint64_t v173 = v85 - (void)v171;
              unint64_t v174 = (uint64_t)(v85 - (void)v171) >> 2;
              if (v174 <= v172 + 1) {
                unint64_t v174 = v172 + 1;
              }
              if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v174;
              }
              if (v175)
              {
                uint64_t v176 = (char *)sub_5714((uint64_t)(v82 + 141), v175);
                unint64_t v84 = (uint64_t *)v82[140];
                uint64_t v171 = (uint64_t *)v82[139];
              }
              else
              {
                uint64_t v176 = 0;
              }
              uint64_t v205 = (uint64_t *)&v176[8 * v172];
              *uint64_t v205 = v83;
              uint64_t v86 = v205 + 1;
              while (v84 != v171)
              {
                uint64_t v206 = *--v84;
                *--uint64_t v205 = v206;
              }
              v82[139] = v205;
              v82[140] = v86;
              v82[141] = &v176[8 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              uint64_t *v84 = v83;
              uint64_t v86 = v84 + 1;
            }
            v82[140] = v86;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_16C844(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v63 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v62 = *v63;
    uint64_t v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      unint64_t v65 = v64 >> 2;
      if (v65 <= 1) {
        unint64_t v65 = 1;
      }
      do
      {
        int v66 = *v62++;
        switch(v66)
        {
          case 225:
            unint64_t v67 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 6184);
            goto LABEL_86;
          case 226:
            unint64_t v67 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 6208);
            goto LABEL_86;
          case 227:
            unint64_t v67 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 6232);
            goto LABEL_86;
          case 228:
            unint64_t v67 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 6256);
LABEL_86:
            *(void *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xE1:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            unint64_t v12 = (uint64_t *)v10[773];
            unint64_t v13 = v10[774];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v30 = (uint64_t *)v10[772];
              uint64_t v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v32 = v13 - (void)v30;
              unint64_t v33 = (uint64_t)(v13 - (void)v30) >> 2;
              if (v33 <= v31 + 1) {
                unint64_t v33 = v31 + 1;
              }
              if (v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34)
              {
                unint64_t v35 = (char *)sub_5714((uint64_t)(v10 + 774), v34);
                unint64_t v12 = (uint64_t *)v10[773];
                unint64_t v30 = (uint64_t *)v10[772];
              }
              else
              {
                unint64_t v35 = 0;
              }
              unint64_t v54 = (uint64_t *)&v35[8 * v31];
              *unint64_t v54 = v11;
              unint64_t v14 = v54 + 1;
              while (v12 != v30)
              {
                uint64_t v55 = *--v12;
                *--unint64_t v54 = v55;
              }
              v10[772] = v54;
              v10[773] = v14;
              v10[774] = &v35[8 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *unint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[773] = v14;
            break;
          case 0xE2:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[776];
            unint64_t v18 = v15[777];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v36 = (uint64_t *)v15[775];
              uint64_t v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v38 = v18 - (void)v36;
              unint64_t v39 = (uint64_t)(v18 - (void)v36) >> 2;
              if (v39 <= v37 + 1) {
                unint64_t v39 = v37 + 1;
              }
              if (v38 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v39;
              }
              if (v40)
              {
                uint64_t v41 = (char *)sub_5714((uint64_t)(v15 + 777), v40);
                uint64_t v17 = (uint64_t *)v15[776];
                uint64_t v36 = (uint64_t *)v15[775];
              }
              else
              {
                uint64_t v41 = 0;
              }
              uint64_t v56 = (uint64_t *)&v41[8 * v37];
              *uint64_t v56 = v16;
              unint64_t v19 = v56 + 1;
              while (v17 != v36)
              {
                uint64_t v57 = *--v17;
                *--uint64_t v56 = v57;
              }
              v15[775] = v56;
              v15[776] = v19;
              v15[777] = &v41[8 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[776] = v19;
            break;
          case 0xE3:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            uint64_t v22 = (uint64_t *)v20[779];
            unint64_t v23 = v20[780];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v42 = (uint64_t *)v20[778];
              uint64_t v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v44 = v23 - (void)v42;
              unint64_t v45 = (uint64_t)(v23 - (void)v42) >> 2;
              if (v45 <= v43 + 1) {
                unint64_t v45 = v43 + 1;
              }
              if (v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v45;
              }
              if (v46)
              {
                uint64_t v47 = (char *)sub_5714((uint64_t)(v20 + 780), v46);
                uint64_t v22 = (uint64_t *)v20[779];
                uint64_t v42 = (uint64_t *)v20[778];
              }
              else
              {
                uint64_t v47 = 0;
              }
              uint64_t v58 = (uint64_t *)&v47[8 * v43];
              *uint64_t v58 = v21;
              unint64_t v24 = v58 + 1;
              while (v22 != v42)
              {
                uint64_t v59 = *--v22;
                *--uint64_t v58 = v59;
              }
              v20[778] = v58;
              v20[779] = v24;
              v20[780] = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[779] = v24;
            break;
          case 0xE4:
            uint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            uint64_t v27 = (unint64_t *)v25[782];
            unint64_t v28 = v25[783];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v48 = (unint64_t *)v25[781];
              uint64_t v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61) {
LABEL_90:
              }
                sub_566C();
              unint64_t v50 = v28 - (void)v48;
              unint64_t v51 = (uint64_t)(v28 - (void)v48) >> 2;
              if (v51 <= v49 + 1) {
                unint64_t v51 = v49 + 1;
              }
              if (v50 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v51;
              }
              if (v52)
              {
                unint64_t v53 = (char *)sub_5714((uint64_t)(v25 + 783), v52);
                uint64_t v27 = (unint64_t *)v25[782];
                unint64_t v48 = (unint64_t *)v25[781];
              }
              else
              {
                unint64_t v53 = 0;
              }
              unint64_t v60 = (unint64_t *)&v53[8 * v49];
              *unint64_t v60 = v26;
              unint64_t v29 = v60 + 1;
              while (v27 != v48)
              {
                unint64_t v61 = *--v27;
                *--unint64_t v60 = v61;
              }
              v25[781] = v60;
              v25[782] = v29;
              v25[783] = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[782] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_16CD44(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v271 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v270 = *v271;
    uint64_t v272 = (char *)v271[1] - (char *)*v271;
    if (v272)
    {
      unint64_t v273 = v272 >> 2;
      if (v273 <= 1) {
        unint64_t v273 = 1;
      }
      do
      {
        int v274 = *v270++;
        switch(v274)
        {
          case 186:
            int v275 = *(_DWORD *)(a1[3] + 48);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5248);
            goto LABEL_374;
          case 187:
            int v275 = *(_DWORD *)(a1[3] + 88);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5272);
            goto LABEL_374;
          case 188:
            int v275 = *(_DWORD *)(a1[3] + 24) >> 1;
            unint64_t v276 = (void *)(*(void *)a1[2] + 5296);
            goto LABEL_374;
          case 189:
            int v275 = *(_DWORD *)(a1[3] + 64);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5320);
            goto LABEL_374;
          case 190:
            int v275 = *(_DWORD *)(a1[3] + 32);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5344);
            goto LABEL_374;
          case 191:
            int v275 = *(_DWORD *)(a1[3] + 72);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5368);
            goto LABEL_374;
          case 192:
            int v275 = *(_DWORD *)(a1[3] + 44);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5392);
            goto LABEL_374;
          case 193:
            int v275 = *(_DWORD *)(a1[3] + 84);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5416);
            goto LABEL_374;
          case 194:
            int v275 = *(_DWORD *)(a1[3] + 40);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5440);
            goto LABEL_374;
          case 195:
            int v275 = *(_DWORD *)(a1[3] + 80);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5464);
            goto LABEL_374;
          case 196:
            int v275 = *(_DWORD *)(a1[3] + 56);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5488);
            goto LABEL_374;
          case 197:
            int v275 = *(_DWORD *)(a1[3] + 96);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5512);
            goto LABEL_374;
          case 198:
            int v275 = *(_DWORD *)(a1[3] + 60);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5536);
            goto LABEL_374;
          case 199:
            int v275 = *(_DWORD *)(a1[3] + 52);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5560);
            goto LABEL_374;
          case 200:
            int v275 = *(_DWORD *)(a1[3] + 92);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5584);
            goto LABEL_374;
          case 201:
            int v275 = *(_DWORD *)(a1[3] + 28);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5608);
            goto LABEL_374;
          case 202:
            int v275 = *(_DWORD *)(a1[3] + 68);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5632);
            goto LABEL_374;
          case 203:
            int v275 = *(_DWORD *)(a1[3] + 36);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5656);
            goto LABEL_374;
          case 204:
            int v275 = *(_DWORD *)(a1[3] + 76);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5680);
            goto LABEL_374;
          case 205:
            int v275 = *(_DWORD *)(a1[3] + 100);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5704);
LABEL_374:
            *(void *)(*v276 - 8) += v275 & 0x7FFFF;
            break;
          default:
            break;
        }
        --v273;
      }
      while (v273);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xBA:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            unint64_t v12 = (uint64_t *)v10[656];
            unint64_t v13 = v10[657];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v110 = (uint64_t *)v10[655];
              uint64_t v111 = v12 - v110;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v112 = v13 - (void)v110;
              unint64_t v113 = (uint64_t)(v13 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                unint64_t v115 = (char *)sub_5714((uint64_t)(v10 + 657), v114);
                unint64_t v12 = (uint64_t *)v10[656];
                uint64_t v110 = (uint64_t *)v10[655];
              }
              else
              {
                unint64_t v115 = 0;
              }
              unint64_t v230 = (uint64_t *)&v115[8 * v111];
              *unint64_t v230 = v11;
              unint64_t v14 = v230 + 1;
              while (v12 != v110)
              {
                uint64_t v231 = *--v12;
                *--unint64_t v230 = v231;
              }
              v10[655] = v230;
              v10[656] = v14;
              v10[657] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *unint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[656] = v14;
            break;
          case 0xBB:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 88) & 0x7FFFFLL;
            uint64_t v17 = (uint64_t *)v15[659];
            unint64_t v18 = v15[660];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v116 = (uint64_t *)v15[658];
              uint64_t v117 = v17 - v116;
              if ((unint64_t)(v117 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v118 = v18 - (void)v116;
              unint64_t v119 = (uint64_t)(v18 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                unint64_t v121 = (char *)sub_5714((uint64_t)(v15 + 660), v120);
                uint64_t v17 = (uint64_t *)v15[659];
                uint64_t v116 = (uint64_t *)v15[658];
              }
              else
              {
                unint64_t v121 = 0;
              }
              unint64_t v232 = (uint64_t *)&v121[8 * v117];
              *unint64_t v232 = v16;
              unint64_t v19 = v232 + 1;
              while (v17 != v116)
              {
                uint64_t v233 = *--v17;
                *--unint64_t v232 = v233;
              }
              v15[658] = v232;
              v15[659] = v19;
              v15[660] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[659] = v19;
            break;
          case 0xBC:
            uint64_t v20 = *(void **)a1[2];
            unint64_t v21 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            uint64_t v22 = (unint64_t *)v20[662];
            unint64_t v23 = v20[663];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v122 = (unint64_t *)v20[661];
              uint64_t v123 = v22 - v122;
              if ((unint64_t)(v123 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v124 = v23 - (void)v122;
              unint64_t v125 = (uint64_t)(v23 - (void)v122) >> 2;
              if (v125 <= v123 + 1) {
                unint64_t v125 = v123 + 1;
              }
              if (v124 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v125;
              }
              if (v126)
              {
                unint64_t v127 = (char *)sub_5714((uint64_t)(v20 + 663), v126);
                uint64_t v22 = (unint64_t *)v20[662];
                uint64_t v122 = (unint64_t *)v20[661];
              }
              else
              {
                unint64_t v127 = 0;
              }
              unint64_t v234 = (unint64_t *)&v127[8 * v123];
              *unint64_t v234 = v21;
              unint64_t v24 = v234 + 1;
              while (v22 != v122)
              {
                unint64_t v235 = *--v22;
                *--unint64_t v234 = v235;
              }
              v20[661] = v234;
              v20[662] = v24;
              v20[663] = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[662] = v24;
            break;
          case 0xBD:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            uint64_t v27 = (uint64_t *)v25[665];
            unint64_t v28 = v25[666];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v128 = (uint64_t *)v25[664];
              uint64_t v129 = v27 - v128;
              if ((unint64_t)(v129 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v130 = v28 - (void)v128;
              unint64_t v131 = (uint64_t)(v28 - (void)v128) >> 2;
              if (v131 <= v129 + 1) {
                unint64_t v131 = v129 + 1;
              }
              if (v130 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v131;
              }
              if (v132)
              {
                unint64_t v133 = (char *)sub_5714((uint64_t)(v25 + 666), v132);
                uint64_t v27 = (uint64_t *)v25[665];
                uint64_t v128 = (uint64_t *)v25[664];
              }
              else
              {
                unint64_t v133 = 0;
              }
              unint64_t v236 = (uint64_t *)&v133[8 * v129];
              *unint64_t v236 = v26;
              unint64_t v29 = v236 + 1;
              while (v27 != v128)
              {
                uint64_t v237 = *--v27;
                *--unint64_t v236 = v237;
              }
              v25[664] = v236;
              v25[665] = v29;
              v25[666] = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[665] = v29;
            break;
          case 0xBE:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            unint64_t v32 = (uint64_t *)v30[668];
            unint64_t v33 = v30[669];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v134 = (uint64_t *)v30[667];
              uint64_t v135 = v32 - v134;
              if ((unint64_t)(v135 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v136 = v33 - (void)v134;
              unint64_t v137 = (uint64_t)(v33 - (void)v134) >> 2;
              if (v137 <= v135 + 1) {
                unint64_t v137 = v135 + 1;
              }
              if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138)
              {
                unint64_t v139 = (char *)sub_5714((uint64_t)(v30 + 669), v138);
                unint64_t v32 = (uint64_t *)v30[668];
                uint64_t v134 = (uint64_t *)v30[667];
              }
              else
              {
                unint64_t v139 = 0;
              }
              unint64_t v238 = (uint64_t *)&v139[8 * v135];
              *unint64_t v238 = v31;
              unint64_t v34 = v238 + 1;
              while (v32 != v134)
              {
                uint64_t v239 = *--v32;
                *--unint64_t v238 = v239;
              }
              v30[667] = v238;
              v30[668] = v34;
              v30[669] = &v139[8 * v138];
              if (v134) {
                operator delete(v134);
              }
            }
            else
            {
              uint64_t *v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[668] = v34;
            break;
          case 0xBF:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            uint64_t v37 = (uint64_t *)v35[671];
            unint64_t v38 = v35[672];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v140 = (uint64_t *)v35[670];
              uint64_t v141 = v37 - v140;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v142 = v38 - (void)v140;
              unint64_t v143 = (uint64_t)(v38 - (void)v140) >> 2;
              if (v143 <= v141 + 1) {
                unint64_t v143 = v141 + 1;
              }
              if (v142 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v143;
              }
              if (v144)
              {
                unint64_t v145 = (char *)sub_5714((uint64_t)(v35 + 672), v144);
                uint64_t v37 = (uint64_t *)v35[671];
                uint64_t v140 = (uint64_t *)v35[670];
              }
              else
              {
                unint64_t v145 = 0;
              }
              unint64_t v240 = (uint64_t *)&v145[8 * v141];
              *unint64_t v240 = v36;
              unint64_t v39 = v240 + 1;
              while (v37 != v140)
              {
                uint64_t v241 = *--v37;
                *--unint64_t v240 = v241;
              }
              v35[670] = v240;
              v35[671] = v39;
              v35[672] = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *uint64_t v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[671] = v39;
            break;
          case 0xC0:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            uint64_t v42 = (uint64_t *)v40[674];
            unint64_t v43 = v40[675];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v146 = (uint64_t *)v40[673];
              uint64_t v147 = v42 - v146;
              if ((unint64_t)(v147 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v148 = v43 - (void)v146;
              unint64_t v149 = (uint64_t)(v43 - (void)v146) >> 2;
              if (v149 <= v147 + 1) {
                unint64_t v149 = v147 + 1;
              }
              if (v148 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v149;
              }
              if (v150)
              {
                unint64_t v151 = (char *)sub_5714((uint64_t)(v40 + 675), v150);
                uint64_t v42 = (uint64_t *)v40[674];
                uint64_t v146 = (uint64_t *)v40[673];
              }
              else
              {
                unint64_t v151 = 0;
              }
              unint64_t v242 = (uint64_t *)&v151[8 * v147];
              uint64_t *v242 = v41;
              unint64_t v44 = v242 + 1;
              while (v42 != v146)
              {
                uint64_t v243 = *--v42;
                *--unint64_t v242 = v243;
              }
              v40[673] = v242;
              v40[674] = v44;
              v40[675] = &v151[8 * v150];
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *uint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[674] = v44;
            break;
          case 0xC1:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_DWORD *)(a1[3] + 84) & 0x7FFFFLL;
            uint64_t v47 = (uint64_t *)v45[677];
            unint64_t v48 = v45[678];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v152 = (uint64_t *)v45[676];
              uint64_t v153 = v47 - v152;
              if ((unint64_t)(v153 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v154 = v48 - (void)v152;
              unint64_t v155 = (uint64_t)(v48 - (void)v152) >> 2;
              if (v155 <= v153 + 1) {
                unint64_t v155 = v153 + 1;
              }
              if (v154 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v156 = v155;
              }
              if (v156)
              {
                unint64_t v157 = (char *)sub_5714((uint64_t)(v45 + 678), v156);
                uint64_t v47 = (uint64_t *)v45[677];
                uint64_t v152 = (uint64_t *)v45[676];
              }
              else
              {
                unint64_t v157 = 0;
              }
              unint64_t v244 = (uint64_t *)&v157[8 * v153];
              *unint64_t v244 = v46;
              uint64_t v49 = v244 + 1;
              while (v47 != v152)
              {
                uint64_t v245 = *--v47;
                *--unint64_t v244 = v245;
              }
              v45[676] = v244;
              v45[677] = v49;
              v45[678] = &v157[8 * v156];
              if (v152) {
                operator delete(v152);
              }
            }
            else
            {
              *uint64_t v47 = v46;
              uint64_t v49 = v47 + 1;
            }
            v45[677] = v49;
            break;
          case 0xC2:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 40) & 0x7FFFFLL;
            unint64_t v52 = (uint64_t *)v50[680];
            unint64_t v53 = v50[681];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v158 = (uint64_t *)v50[679];
              uint64_t v159 = v52 - v158;
              if ((unint64_t)(v159 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v160 = v53 - (void)v158;
              unint64_t v161 = (uint64_t)(v53 - (void)v158) >> 2;
              if (v161 <= v159 + 1) {
                unint64_t v161 = v159 + 1;
              }
              if (v160 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v161;
              }
              if (v162)
              {
                unint64_t v163 = (char *)sub_5714((uint64_t)(v50 + 681), v162);
                unint64_t v52 = (uint64_t *)v50[680];
                uint64_t v158 = (uint64_t *)v50[679];
              }
              else
              {
                unint64_t v163 = 0;
              }
              unint64_t v246 = (uint64_t *)&v163[8 * v159];
              *unint64_t v246 = v51;
              unint64_t v54 = v246 + 1;
              while (v52 != v158)
              {
                uint64_t v247 = *--v52;
                *--unint64_t v246 = v247;
              }
              v50[679] = v246;
              v50[680] = v54;
              v50[681] = &v163[8 * v162];
              if (v158) {
                operator delete(v158);
              }
            }
            else
            {
              *unint64_t v52 = v51;
              unint64_t v54 = v52 + 1;
            }
            v50[680] = v54;
            break;
          case 0xC3:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            uint64_t v57 = (uint64_t *)v55[683];
            unint64_t v58 = v55[684];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v164 = (uint64_t *)v55[682];
              uint64_t v165 = v57 - v164;
              if ((unint64_t)(v165 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v166 = v58 - (void)v164;
              unint64_t v167 = (uint64_t)(v58 - (void)v164) >> 2;
              if (v167 <= v165 + 1) {
                unint64_t v167 = v165 + 1;
              }
              if (v166 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v168 = v167;
              }
              if (v168)
              {
                unint64_t v169 = (char *)sub_5714((uint64_t)(v55 + 684), v168);
                uint64_t v57 = (uint64_t *)v55[683];
                uint64_t v164 = (uint64_t *)v55[682];
              }
              else
              {
                unint64_t v169 = 0;
              }
              unint64_t v248 = (uint64_t *)&v169[8 * v165];
              uint64_t *v248 = v56;
              uint64_t v59 = v248 + 1;
              while (v57 != v164)
              {
                uint64_t v249 = *--v57;
                *--unint64_t v248 = v249;
              }
              v55[682] = v248;
              v55[683] = v59;
              v55[684] = &v169[8 * v168];
              if (v164) {
                operator delete(v164);
              }
            }
            else
            {
              *uint64_t v57 = v56;
              uint64_t v59 = v57 + 1;
            }
            v55[683] = v59;
            break;
          case 0xC4:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            uint64_t v62 = (uint64_t *)v60[686];
            unint64_t v63 = v60[687];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v170 = (uint64_t *)v60[685];
              uint64_t v171 = v62 - v170;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v172 = v63 - (void)v170;
              unint64_t v173 = (uint64_t)(v63 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                unint64_t v175 = (char *)sub_5714((uint64_t)(v60 + 687), v174);
                uint64_t v62 = (uint64_t *)v60[686];
                uint64_t v170 = (uint64_t *)v60[685];
              }
              else
              {
                unint64_t v175 = 0;
              }
              unint64_t v250 = (uint64_t *)&v175[8 * v171];
              *unint64_t v250 = v61;
              uint64_t v64 = v250 + 1;
              while (v62 != v170)
              {
                uint64_t v251 = *--v62;
                *--unint64_t v250 = v251;
              }
              v60[685] = v250;
              v60[686] = v64;
              v60[687] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *uint64_t v62 = v61;
              uint64_t v64 = v62 + 1;
            }
            v60[686] = v64;
            break;
          case 0xC5:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_DWORD *)(a1[3] + 96) & 0x7FFFFLL;
            unint64_t v67 = (uint64_t *)v65[689];
            unint64_t v68 = v65[690];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v176 = (uint64_t *)v65[688];
              uint64_t v177 = v67 - v176;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v178 = v68 - (void)v176;
              unint64_t v179 = (uint64_t)(v68 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_5714((uint64_t)(v65 + 690), v180);
                unint64_t v67 = (uint64_t *)v65[689];
                uint64_t v176 = (uint64_t *)v65[688];
              }
              else
              {
                uint64_t v181 = 0;
              }
              unint64_t v252 = (uint64_t *)&v181[8 * v177];
              *unint64_t v252 = v66;
              unint64_t v69 = v252 + 1;
              while (v67 != v176)
              {
                uint64_t v253 = *--v67;
                *--unint64_t v252 = v253;
              }
              v65[688] = v252;
              v65[689] = v69;
              v65[690] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *unint64_t v67 = v66;
              unint64_t v69 = v67 + 1;
            }
            v65[689] = v69;
            break;
          case 0xC6:
            uint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            uint64_t v72 = (uint64_t *)v70[692];
            unint64_t v73 = v70[693];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v182 = (uint64_t *)v70[691];
              uint64_t v183 = v72 - v182;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v184 = v73 - (void)v182;
              unint64_t v185 = (uint64_t)(v73 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                uint64_t v187 = (char *)sub_5714((uint64_t)(v70 + 693), v186);
                uint64_t v72 = (uint64_t *)v70[692];
                uint64_t v182 = (uint64_t *)v70[691];
              }
              else
              {
                uint64_t v187 = 0;
              }
              int v254 = (uint64_t *)&v187[8 * v183];
              *int v254 = v71;
              unint64_t v74 = v254 + 1;
              while (v72 != v182)
              {
                uint64_t v255 = *--v72;
                *--int v254 = v255;
              }
              v70[691] = v254;
              v70[692] = v74;
              v70[693] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *uint64_t v72 = v71;
              unint64_t v74 = v72 + 1;
            }
            v70[692] = v74;
            break;
          case 0xC7:
            uint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            unint64_t v77 = (uint64_t *)v75[695];
            unint64_t v78 = v75[696];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v188 = (uint64_t *)v75[694];
              uint64_t v189 = v77 - v188;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v190 = v78 - (void)v188;
              unint64_t v191 = (uint64_t)(v78 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                int v193 = (char *)sub_5714((uint64_t)(v75 + 696), v192);
                unint64_t v77 = (uint64_t *)v75[695];
                uint64_t v188 = (uint64_t *)v75[694];
              }
              else
              {
                int v193 = 0;
              }
              unint64_t v256 = (uint64_t *)&v193[8 * v189];
              *unint64_t v256 = v76;
              unint64_t v79 = v256 + 1;
              while (v77 != v188)
              {
                uint64_t v257 = *--v77;
                *--unint64_t v256 = v257;
              }
              v75[694] = v256;
              v75[695] = v79;
              v75[696] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *unint64_t v77 = v76;
              unint64_t v79 = v77 + 1;
            }
            v75[695] = v79;
            break;
          case 0xC8:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 92) & 0x7FFFFLL;
            unint64_t v82 = (uint64_t *)v80[698];
            unint64_t v83 = v80[699];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v194 = (uint64_t *)v80[697];
              uint64_t v195 = v82 - v194;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v196 = v83 - (void)v194;
              unint64_t v197 = (uint64_t)(v83 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                uint64_t v199 = (char *)sub_5714((uint64_t)(v80 + 699), v198);
                unint64_t v82 = (uint64_t *)v80[698];
                uint64_t v194 = (uint64_t *)v80[697];
              }
              else
              {
                uint64_t v199 = 0;
              }
              unint64_t v258 = (uint64_t *)&v199[8 * v195];
              *unint64_t v258 = v81;
              unint64_t v84 = v258 + 1;
              while (v82 != v194)
              {
                uint64_t v259 = *--v82;
                *--unint64_t v258 = v259;
              }
              v80[697] = v258;
              v80[698] = v84;
              v80[699] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              unint64_t v84 = v82 + 1;
            }
            v80[698] = v84;
            break;
          case 0xC9:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            unint64_t v87 = (uint64_t *)v85[701];
            unint64_t v88 = v85[702];
            if ((unint64_t)v87 >= v88)
            {
              uint64_t v200 = (uint64_t *)v85[700];
              uint64_t v201 = v87 - v200;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v202 = v88 - (void)v200;
              unint64_t v203 = (uint64_t)(v88 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                uint64_t v205 = (char *)sub_5714((uint64_t)(v85 + 702), v204);
                unint64_t v87 = (uint64_t *)v85[701];
                uint64_t v200 = (uint64_t *)v85[700];
              }
              else
              {
                uint64_t v205 = 0;
              }
              uint64_t v260 = (uint64_t *)&v205[8 * v201];
              uint64_t *v260 = v86;
              unint64_t v89 = v260 + 1;
              while (v87 != v200)
              {
                uint64_t v261 = *--v87;
                *--uint64_t v260 = v261;
              }
              v85[700] = v260;
              v85[701] = v89;
              v85[702] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *unint64_t v87 = v86;
              unint64_t v89 = v87 + 1;
            }
            v85[701] = v89;
            break;
          case 0xCA:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            uint64_t v92 = (uint64_t *)v90[704];
            unint64_t v93 = v90[705];
            if ((unint64_t)v92 >= v93)
            {
              uint64_t v206 = (uint64_t *)v90[703];
              uint64_t v207 = v92 - v206;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v208 = v93 - (void)v206;
              unint64_t v209 = (uint64_t)(v93 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                int v211 = (char *)sub_5714((uint64_t)(v90 + 705), v210);
                uint64_t v92 = (uint64_t *)v90[704];
                uint64_t v206 = (uint64_t *)v90[703];
              }
              else
              {
                int v211 = 0;
              }
              unint64_t v262 = (uint64_t *)&v211[8 * v207];
              *unint64_t v262 = v91;
              uint64_t v94 = v262 + 1;
              while (v92 != v206)
              {
                uint64_t v263 = *--v92;
                *--unint64_t v262 = v263;
              }
              v90[703] = v262;
              v90[704] = v94;
              v90[705] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *uint64_t v92 = v91;
              uint64_t v94 = v92 + 1;
            }
            v90[704] = v94;
            break;
          case 0xCB:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_DWORD *)(a1[3] + 36) & 0x7FFFFLL;
            unint64_t v97 = (uint64_t *)v95[707];
            unint64_t v98 = v95[708];
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v212 = (uint64_t *)v95[706];
              uint64_t v213 = v97 - v212;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v214 = v98 - (void)v212;
              unint64_t v215 = (uint64_t)(v98 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                uint64_t v217 = (char *)sub_5714((uint64_t)(v95 + 708), v216);
                unint64_t v97 = (uint64_t *)v95[707];
                unint64_t v212 = (uint64_t *)v95[706];
              }
              else
              {
                uint64_t v217 = 0;
              }
              unint64_t v264 = (uint64_t *)&v217[8 * v213];
              *unint64_t v264 = v96;
              unint64_t v99 = v264 + 1;
              while (v97 != v212)
              {
                uint64_t v265 = *--v97;
                *--unint64_t v264 = v265;
              }
              v95[706] = v264;
              v95[707] = v99;
              v95[708] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *unint64_t v97 = v96;
              unint64_t v99 = v97 + 1;
            }
            v95[707] = v99;
            break;
          case 0xCC:
            uint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            unint64_t v102 = (uint64_t *)v100[710];
            unint64_t v103 = v100[711];
            if ((unint64_t)v102 >= v103)
            {
              unint64_t v218 = (uint64_t *)v100[709];
              uint64_t v219 = v102 - v218;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v220 = v103 - (void)v218;
              unint64_t v221 = (uint64_t)(v103 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v100 + 711), v222);
                unint64_t v102 = (uint64_t *)v100[710];
                unint64_t v218 = (uint64_t *)v100[709];
              }
              else
              {
                uint64_t v223 = 0;
              }
              unint64_t v266 = (uint64_t *)&v223[8 * v219];
              *unint64_t v266 = v101;
              uint64_t v104 = v266 + 1;
              while (v102 != v218)
              {
                uint64_t v267 = *--v102;
                *--unint64_t v266 = v267;
              }
              v100[709] = v266;
              v100[710] = v104;
              v100[711] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *unint64_t v102 = v101;
              uint64_t v104 = v102 + 1;
            }
            v100[710] = v104;
            break;
          case 0xCD:
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_DWORD *)(a1[3] + 100) & 0x7FFFFLL;
            unint64_t v107 = (uint64_t *)v105[713];
            unint64_t v108 = v105[714];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v224 = (uint64_t *)v105[712];
              uint64_t v225 = v107 - v224;
              if ((unint64_t)(v225 + 1) >> 61) {
LABEL_378:
              }
                sub_566C();
              unint64_t v226 = v108 - (void)v224;
              unint64_t v227 = (uint64_t)(v108 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                uint64_t v229 = (char *)sub_5714((uint64_t)(v105 + 714), v228);
                unint64_t v107 = (uint64_t *)v105[713];
                unint64_t v224 = (uint64_t *)v105[712];
              }
              else
              {
                uint64_t v229 = 0;
              }
              unint64_t v268 = (uint64_t *)&v229[8 * v225];
              *unint64_t v268 = v106;
              unint64_t v109 = v268 + 1;
              while (v107 != v224)
              {
                uint64_t v269 = *--v107;
                *--unint64_t v268 = v269;
              }
              v105[712] = v268;
              v105[713] = v109;
              v105[714] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *unint64_t v107 = v106;
              unint64_t v109 = v107 + 1;
            }
            v105[713] = v109;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_16E0BC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v258 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v257 = *v258;
    uint64_t v259 = (char *)v258[1] - (char *)*v258;
    if (v259)
    {
      unint64_t v260 = v259 >> 2;
      if (v260 <= 1) {
        unint64_t v260 = 1;
      }
      do
      {
        int v261 = *v257++;
        switch(v261)
        {
          case 206:
            uint64_t v262 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5728);
            goto LABEL_356;
          case 207:
            uint64_t v262 = *(_DWORD *)(a1[3] + 68) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5752);
            goto LABEL_356;
          case 208:
            uint64_t v262 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5776);
            goto LABEL_356;
          case 209:
            uint64_t v262 = (unsigned __int16)*(_DWORD *)(a1[3] + 24) >> 1;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5800);
            goto LABEL_356;
          case 210:
            uint64_t v262 = *(_DWORD *)(a1[3] + 44) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5824);
            goto LABEL_356;
          case 211:
            uint64_t v262 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5848);
            goto LABEL_356;
          case 212:
            uint64_t v262 = *(_DWORD *)(a1[3] + 52) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5872);
            goto LABEL_356;
          case 213:
            uint64_t v262 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5896);
            goto LABEL_356;
          case 214:
            uint64_t v262 = *(_DWORD *)(a1[3] + 64) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5920);
            goto LABEL_356;
          case 215:
            uint64_t v262 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5944);
            goto LABEL_356;
          case 216:
            uint64_t v262 = *(_DWORD *)(a1[3] + 60) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5968);
            goto LABEL_356;
          case 217:
            uint64_t v262 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5992);
            goto LABEL_356;
          case 218:
            uint64_t v262 = *(_DWORD *)(a1[3] + 76) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 6016);
            goto LABEL_356;
          case 219:
            uint64_t v262 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 6040);
            goto LABEL_356;
          case 220:
            uint64_t v262 = *(_DWORD *)(a1[3] + 72) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 6064);
            goto LABEL_356;
          case 221:
            uint64_t v262 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 6088);
            goto LABEL_356;
          case 222:
            uint64_t v262 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 6112);
            goto LABEL_356;
          case 223:
            uint64_t v262 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 6136);
            goto LABEL_356;
          case 224:
            uint64_t v262 = *(_DWORD *)(a1[3] + 56) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 6160);
LABEL_356:
            *(void *)(*v263 - 8) += v262;
            break;
          default:
            break;
        }
        --v260;
      }
      while (v260);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xCE:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            unint64_t v12 = (char *)v10[716];
            unint64_t v13 = v10[717];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v105 = (char *)v10[715];
              uint64_t v106 = (v12 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v107 = v13 - (void)v105;
              unint64_t v108 = (uint64_t)(v13 - (void)v105) >> 2;
              if (v108 <= v106 + 1) {
                unint64_t v108 = v106 + 1;
              }
              if (v107 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109)
              {
                uint64_t v110 = (char *)sub_5714((uint64_t)(v10 + 717), v109);
                unint64_t v12 = (char *)v10[716];
                unint64_t v105 = (char *)v10[715];
              }
              else
              {
                uint64_t v110 = 0;
              }
              uint64_t v219 = &v110[8 * v106];
              *(void *)uint64_t v219 = v11;
              unint64_t v14 = v219 + 8;
              while (v12 != v105)
              {
                uint64_t v220 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v219 - 1) = v220;
                v219 -= 8;
              }
              v10[715] = v219;
              v10[716] = v14;
              v10[717] = &v110[8 * v109];
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *(void *)unint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[716] = v14;
            break;
          case 0xCF:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            uint64_t v17 = (uint64_t *)v15[719];
            unint64_t v18 = v15[720];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v111 = (uint64_t *)v15[718];
              uint64_t v112 = v17 - v111;
              if ((unint64_t)(v112 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v113 = v18 - (void)v111;
              unint64_t v114 = (uint64_t)(v18 - (void)v111) >> 2;
              if (v114 <= v112 + 1) {
                unint64_t v114 = v112 + 1;
              }
              if (v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v114;
              }
              if (v115)
              {
                uint64_t v116 = (char *)sub_5714((uint64_t)(v15 + 720), v115);
                uint64_t v17 = (uint64_t *)v15[719];
                uint64_t v111 = (uint64_t *)v15[718];
              }
              else
              {
                uint64_t v116 = 0;
              }
              unint64_t v221 = (uint64_t *)&v116[8 * v112];
              *unint64_t v221 = v16;
              unint64_t v19 = v221 + 1;
              while (v17 != v111)
              {
                uint64_t v222 = *--v17;
                *--unint64_t v221 = v222;
              }
              v15[718] = v221;
              v15[719] = v19;
              v15[720] = &v116[8 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[719] = v19;
            break;
          case 0xD0:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            uint64_t v22 = (char *)v20[722];
            unint64_t v23 = v20[723];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v117 = (char *)v20[721];
              uint64_t v118 = (v22 - v117) >> 3;
              if ((unint64_t)(v118 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v119 = v23 - (void)v117;
              unint64_t v120 = (uint64_t)(v23 - (void)v117) >> 2;
              if (v120 <= v118 + 1) {
                unint64_t v120 = v118 + 1;
              }
              if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v120;
              }
              if (v121)
              {
                uint64_t v122 = (char *)sub_5714((uint64_t)(v20 + 723), v121);
                uint64_t v22 = (char *)v20[722];
                uint64_t v117 = (char *)v20[721];
              }
              else
              {
                uint64_t v122 = 0;
              }
              uint64_t v223 = &v122[8 * v118];
              *(void *)uint64_t v223 = v21;
              unint64_t v24 = v223 + 8;
              while (v22 != v117)
              {
                uint64_t v224 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v223 - 1) = v224;
                v223 -= 8;
              }
              v20[721] = v223;
              v20[722] = v24;
              v20[723] = &v122[8 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[722] = v24;
            break;
          case 0xD1:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = (unsigned __int16)*(_DWORD *)(a1[3] + 24) >> 1;
            uint64_t v27 = (char *)v25[725];
            unint64_t v28 = v25[726];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v123 = (char *)v25[724];
              uint64_t v124 = (v27 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v125 = v28 - (void)v123;
              unint64_t v126 = (uint64_t)(v28 - (void)v123) >> 2;
              if (v126 <= v124 + 1) {
                unint64_t v126 = v124 + 1;
              }
              if (v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v126;
              }
              if (v127)
              {
                uint64_t v128 = (char *)sub_5714((uint64_t)(v25 + 726), v127);
                uint64_t v27 = (char *)v25[725];
                uint64_t v123 = (char *)v25[724];
              }
              else
              {
                uint64_t v128 = 0;
              }
              uint64_t v225 = &v128[8 * v124];
              *(void *)uint64_t v225 = v26;
              unint64_t v29 = v225 + 8;
              while (v27 != v123)
              {
                uint64_t v226 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v225 - 1) = v226;
                v225 -= 8;
              }
              v25[724] = v225;
              v25[725] = v29;
              v25[726] = &v128[8 * v127];
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[725] = v29;
            break;
          case 0xD2:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            unint64_t v32 = (uint64_t *)v30[728];
            unint64_t v33 = v30[729];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v129 = (uint64_t *)v30[727];
              uint64_t v130 = v32 - v129;
              if ((unint64_t)(v130 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v131 = v33 - (void)v129;
              unint64_t v132 = (uint64_t)(v33 - (void)v129) >> 2;
              if (v132 <= v130 + 1) {
                unint64_t v132 = v130 + 1;
              }
              if (v131 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v132;
              }
              if (v133)
              {
                uint64_t v134 = (char *)sub_5714((uint64_t)(v30 + 729), v133);
                unint64_t v32 = (uint64_t *)v30[728];
                uint64_t v129 = (uint64_t *)v30[727];
              }
              else
              {
                uint64_t v134 = 0;
              }
              unint64_t v227 = (uint64_t *)&v134[8 * v130];
              *unint64_t v227 = v31;
              unint64_t v34 = v227 + 1;
              while (v32 != v129)
              {
                uint64_t v228 = *--v32;
                *--unint64_t v227 = v228;
              }
              v30[727] = v227;
              v30[728] = v34;
              v30[729] = &v134[8 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              uint64_t *v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[728] = v34;
            break;
          case 0xD3:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v37 = (char *)v35[731];
            unint64_t v38 = v35[732];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v135 = (char *)v35[730];
              uint64_t v136 = (v37 - v135) >> 3;
              if ((unint64_t)(v136 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v137 = v38 - (void)v135;
              unint64_t v138 = (uint64_t)(v38 - (void)v135) >> 2;
              if (v138 <= v136 + 1) {
                unint64_t v138 = v136 + 1;
              }
              if (v137 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v138;
              }
              if (v139)
              {
                uint64_t v140 = (char *)sub_5714((uint64_t)(v35 + 732), v139);
                uint64_t v37 = (char *)v35[731];
                uint64_t v135 = (char *)v35[730];
              }
              else
              {
                uint64_t v140 = 0;
              }
              uint64_t v229 = &v140[8 * v136];
              *(void *)uint64_t v229 = v36;
              unint64_t v39 = v229 + 8;
              while (v37 != v135)
              {
                uint64_t v230 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v229 - 1) = v230;
                v229 -= 8;
              }
              v35[730] = v229;
              v35[731] = v39;
              v35[732] = &v140[8 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[731] = v39;
            break;
          case 0xD4:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            uint64_t v42 = (uint64_t *)v40[734];
            unint64_t v43 = v40[735];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v141 = (uint64_t *)v40[733];
              uint64_t v142 = v42 - v141;
              if ((unint64_t)(v142 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v143 = v43 - (void)v141;
              unint64_t v144 = (uint64_t)(v43 - (void)v141) >> 2;
              if (v144 <= v142 + 1) {
                unint64_t v144 = v142 + 1;
              }
              if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v144;
              }
              if (v145)
              {
                uint64_t v146 = (char *)sub_5714((uint64_t)(v40 + 735), v145);
                uint64_t v42 = (uint64_t *)v40[734];
                uint64_t v141 = (uint64_t *)v40[733];
              }
              else
              {
                uint64_t v146 = 0;
              }
              uint64_t v231 = (uint64_t *)&v146[8 * v142];
              *uint64_t v231 = v41;
              unint64_t v44 = v231 + 1;
              while (v42 != v141)
              {
                uint64_t v232 = *--v42;
                *--uint64_t v231 = v232;
              }
              v40[733] = v231;
              v40[734] = v44;
              v40[735] = &v146[8 * v145];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              *uint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[734] = v44;
            break;
          case 0xD5:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v47 = (char *)v45[737];
            unint64_t v48 = v45[738];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v147 = (char *)v45[736];
              uint64_t v148 = (v47 - v147) >> 3;
              if ((unint64_t)(v148 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v149 = v48 - (void)v147;
              unint64_t v150 = (uint64_t)(v48 - (void)v147) >> 2;
              if (v150 <= v148 + 1) {
                unint64_t v150 = v148 + 1;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                uint64_t v152 = (char *)sub_5714((uint64_t)(v45 + 738), v151);
                uint64_t v47 = (char *)v45[737];
                uint64_t v147 = (char *)v45[736];
              }
              else
              {
                uint64_t v152 = 0;
              }
              uint64_t v233 = &v152[8 * v148];
              *(void *)uint64_t v233 = v46;
              uint64_t v49 = v233 + 8;
              while (v47 != v147)
              {
                uint64_t v234 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v233 - 1) = v234;
                v233 -= 8;
              }
              v45[736] = v233;
              v45[737] = v49;
              v45[738] = &v152[8 * v151];
              if (v147) {
                operator delete(v147);
              }
            }
            else
            {
              *(void *)uint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[737] = v49;
            break;
          case 0xD6:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            unint64_t v52 = (uint64_t *)v50[740];
            unint64_t v53 = v50[741];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v153 = (uint64_t *)v50[739];
              uint64_t v154 = v52 - v153;
              if ((unint64_t)(v154 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v155 = v53 - (void)v153;
              unint64_t v156 = (uint64_t)(v53 - (void)v153) >> 2;
              if (v156 <= v154 + 1) {
                unint64_t v156 = v154 + 1;
              }
              if (v155 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v157 = v156;
              }
              if (v157)
              {
                uint64_t v158 = (char *)sub_5714((uint64_t)(v50 + 741), v157);
                unint64_t v52 = (uint64_t *)v50[740];
                uint64_t v153 = (uint64_t *)v50[739];
              }
              else
              {
                uint64_t v158 = 0;
              }
              unint64_t v235 = (uint64_t *)&v158[8 * v154];
              *unint64_t v235 = v51;
              unint64_t v54 = v235 + 1;
              while (v52 != v153)
              {
                uint64_t v236 = *--v52;
                *--unint64_t v235 = v236;
              }
              v50[739] = v235;
              v50[740] = v54;
              v50[741] = &v158[8 * v157];
              if (v153) {
                operator delete(v153);
              }
            }
            else
            {
              *unint64_t v52 = v51;
              unint64_t v54 = v52 + 1;
            }
            v50[740] = v54;
            break;
          case 0xD7:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v57 = (char *)v55[743];
            unint64_t v58 = v55[744];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v159 = (char *)v55[742];
              uint64_t v160 = (v57 - v159) >> 3;
              if ((unint64_t)(v160 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v161 = v58 - (void)v159;
              unint64_t v162 = (uint64_t)(v58 - (void)v159) >> 2;
              if (v162 <= v160 + 1) {
                unint64_t v162 = v160 + 1;
              }
              if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v163 = v162;
              }
              if (v163)
              {
                uint64_t v164 = (char *)sub_5714((uint64_t)(v55 + 744), v163);
                uint64_t v57 = (char *)v55[743];
                uint64_t v159 = (char *)v55[742];
              }
              else
              {
                uint64_t v164 = 0;
              }
              uint64_t v237 = &v164[8 * v160];
              *(void *)uint64_t v237 = v56;
              uint64_t v59 = v237 + 8;
              while (v57 != v159)
              {
                uint64_t v238 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v237 - 1) = v238;
                v237 -= 8;
              }
              v55[742] = v237;
              v55[743] = v59;
              v55[744] = &v164[8 * v163];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              uint64_t v59 = v57 + 8;
            }
            v55[743] = v59;
            break;
          case 0xD8:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            uint64_t v62 = (uint64_t *)v60[746];
            unint64_t v63 = v60[747];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v165 = (uint64_t *)v60[745];
              uint64_t v166 = v62 - v165;
              if ((unint64_t)(v166 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v167 = v63 - (void)v165;
              unint64_t v168 = (uint64_t)(v63 - (void)v165) >> 2;
              if (v168 <= v166 + 1) {
                unint64_t v168 = v166 + 1;
              }
              if (v167 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v168;
              }
              if (v169)
              {
                uint64_t v170 = (char *)sub_5714((uint64_t)(v60 + 747), v169);
                uint64_t v62 = (uint64_t *)v60[746];
                uint64_t v165 = (uint64_t *)v60[745];
              }
              else
              {
                uint64_t v170 = 0;
              }
              uint64_t v239 = (uint64_t *)&v170[8 * v166];
              *uint64_t v239 = v61;
              uint64_t v64 = v239 + 1;
              while (v62 != v165)
              {
                uint64_t v240 = *--v62;
                *--uint64_t v239 = v240;
              }
              v60[745] = v239;
              v60[746] = v64;
              v60[747] = &v170[8 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              *uint64_t v62 = v61;
              uint64_t v64 = v62 + 1;
            }
            v60[746] = v64;
            break;
          case 0xD9:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v67 = (char *)v65[749];
            unint64_t v68 = v65[750];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v171 = (char *)v65[748];
              uint64_t v172 = (v67 - v171) >> 3;
              if ((unint64_t)(v172 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v173 = v68 - (void)v171;
              unint64_t v174 = (uint64_t)(v68 - (void)v171) >> 2;
              if (v174 <= v172 + 1) {
                unint64_t v174 = v172 + 1;
              }
              if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v174;
              }
              if (v175)
              {
                uint64_t v176 = (char *)sub_5714((uint64_t)(v65 + 750), v175);
                unint64_t v67 = (char *)v65[749];
                uint64_t v171 = (char *)v65[748];
              }
              else
              {
                uint64_t v176 = 0;
              }
              uint64_t v241 = &v176[8 * v172];
              *(void *)uint64_t v241 = v66;
              unint64_t v69 = v241 + 8;
              while (v67 != v171)
              {
                uint64_t v242 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v241 - 1) = v242;
                v241 -= 8;
              }
              v65[748] = v241;
              v65[749] = v69;
              v65[750] = &v176[8 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[749] = v69;
            break;
          case 0xDA:
            uint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            uint64_t v72 = (uint64_t *)v70[752];
            unint64_t v73 = v70[753];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v177 = (uint64_t *)v70[751];
              uint64_t v178 = v72 - v177;
              if ((unint64_t)(v178 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v179 = v73 - (void)v177;
              unint64_t v180 = (uint64_t)(v73 - (void)v177) >> 2;
              if (v180 <= v178 + 1) {
                unint64_t v180 = v178 + 1;
              }
              if (v179 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v180;
              }
              if (v181)
              {
                uint64_t v182 = (char *)sub_5714((uint64_t)(v70 + 753), v181);
                uint64_t v72 = (uint64_t *)v70[752];
                uint64_t v177 = (uint64_t *)v70[751];
              }
              else
              {
                uint64_t v182 = 0;
              }
              uint64_t v243 = (uint64_t *)&v182[8 * v178];
              *uint64_t v243 = v71;
              unint64_t v74 = v243 + 1;
              while (v72 != v177)
              {
                uint64_t v244 = *--v72;
                *--uint64_t v243 = v244;
              }
              v70[751] = v243;
              v70[752] = v74;
              v70[753] = &v182[8 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              *uint64_t v72 = v71;
              unint64_t v74 = v72 + 1;
            }
            v70[752] = v74;
            break;
          case 0xDB:
            uint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v77 = (char *)v75[755];
            unint64_t v78 = v75[756];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v183 = (char *)v75[754];
              uint64_t v184 = (v77 - v183) >> 3;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v185 = v78 - (void)v183;
              unint64_t v186 = (uint64_t)(v78 - (void)v183) >> 2;
              if (v186 <= v184 + 1) {
                unint64_t v186 = v184 + 1;
              }
              if (v185 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v186;
              }
              if (v187)
              {
                uint64_t v188 = (char *)sub_5714((uint64_t)(v75 + 756), v187);
                unint64_t v77 = (char *)v75[755];
                uint64_t v183 = (char *)v75[754];
              }
              else
              {
                uint64_t v188 = 0;
              }
              uint64_t v245 = &v188[8 * v184];
              *(void *)uint64_t v245 = v76;
              unint64_t v79 = v245 + 8;
              while (v77 != v183)
              {
                uint64_t v246 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v245 - 1) = v246;
                v245 -= 8;
              }
              v75[754] = v245;
              v75[755] = v79;
              v75[756] = &v188[8 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              unint64_t v79 = v77 + 8;
            }
            v75[755] = v79;
            break;
          case 0xDC:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            unint64_t v82 = (uint64_t *)v80[758];
            unint64_t v83 = v80[759];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v189 = (uint64_t *)v80[757];
              uint64_t v190 = v82 - v189;
              if ((unint64_t)(v190 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v191 = v83 - (void)v189;
              unint64_t v192 = (uint64_t)(v83 - (void)v189) >> 2;
              if (v192 <= v190 + 1) {
                unint64_t v192 = v190 + 1;
              }
              if (v191 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v192;
              }
              if (v193)
              {
                uint64_t v194 = (char *)sub_5714((uint64_t)(v80 + 759), v193);
                unint64_t v82 = (uint64_t *)v80[758];
                uint64_t v189 = (uint64_t *)v80[757];
              }
              else
              {
                uint64_t v194 = 0;
              }
              uint64_t v247 = (uint64_t *)&v194[8 * v190];
              *uint64_t v247 = v81;
              unint64_t v84 = v247 + 1;
              while (v82 != v189)
              {
                uint64_t v248 = *--v82;
                *--uint64_t v247 = v248;
              }
              v80[757] = v247;
              v80[758] = v84;
              v80[759] = &v194[8 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              unint64_t v84 = v82 + 1;
            }
            v80[758] = v84;
            break;
          case 0xDD:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v87 = (char *)v85[761];
            unint64_t v88 = v85[762];
            if ((unint64_t)v87 >= v88)
            {
              uint64_t v195 = (char *)v85[760];
              uint64_t v196 = (v87 - v195) >> 3;
              if ((unint64_t)(v196 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v197 = v88 - (void)v195;
              unint64_t v198 = (uint64_t)(v88 - (void)v195) >> 2;
              if (v198 <= v196 + 1) {
                unint64_t v198 = v196 + 1;
              }
              if (v197 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v199 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v199 = v198;
              }
              if (v199)
              {
                uint64_t v200 = (char *)sub_5714((uint64_t)(v85 + 762), v199);
                unint64_t v87 = (char *)v85[761];
                uint64_t v195 = (char *)v85[760];
              }
              else
              {
                uint64_t v200 = 0;
              }
              uint64_t v249 = &v200[8 * v196];
              *(void *)uint64_t v249 = v86;
              unint64_t v89 = v249 + 8;
              while (v87 != v195)
              {
                uint64_t v250 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v249 - 1) = v250;
                v249 -= 8;
              }
              v85[760] = v249;
              v85[761] = v89;
              v85[762] = &v200[8 * v199];
              if (v195) {
                operator delete(v195);
              }
            }
            else
            {
              *(void *)unint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[761] = v89;
            break;
          case 0xDE:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            uint64_t v92 = (uint64_t *)v90[764];
            unint64_t v93 = v90[765];
            if ((unint64_t)v92 >= v93)
            {
              uint64_t v201 = (uint64_t *)v90[763];
              uint64_t v202 = v92 - v201;
              if ((unint64_t)(v202 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v203 = v93 - (void)v201;
              unint64_t v204 = (uint64_t)(v93 - (void)v201) >> 2;
              if (v204 <= v202 + 1) {
                unint64_t v204 = v202 + 1;
              }
              if (v203 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v205 = v204;
              }
              if (v205)
              {
                uint64_t v206 = (char *)sub_5714((uint64_t)(v90 + 765), v205);
                uint64_t v92 = (uint64_t *)v90[764];
                uint64_t v201 = (uint64_t *)v90[763];
              }
              else
              {
                uint64_t v206 = 0;
              }
              uint64_t v251 = (uint64_t *)&v206[8 * v202];
              *uint64_t v251 = v91;
              uint64_t v94 = v251 + 1;
              while (v92 != v201)
              {
                uint64_t v252 = *--v92;
                *--uint64_t v251 = v252;
              }
              v90[763] = v251;
              v90[764] = v94;
              v90[765] = &v206[8 * v205];
              if (v201) {
                operator delete(v201);
              }
            }
            else
            {
              *uint64_t v92 = v91;
              uint64_t v94 = v92 + 1;
            }
            v90[764] = v94;
            break;
          case 0xDF:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v97 = (char *)v95[767];
            unint64_t v98 = v95[768];
            if ((unint64_t)v97 >= v98)
            {
              uint64_t v207 = (char *)v95[766];
              uint64_t v208 = (v97 - v207) >> 3;
              if ((unint64_t)(v208 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v209 = v98 - (void)v207;
              unint64_t v210 = (uint64_t)(v98 - (void)v207) >> 2;
              if (v210 <= v208 + 1) {
                unint64_t v210 = v208 + 1;
              }
              if (v209 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v211 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v211 = v210;
              }
              if (v211)
              {
                unint64_t v212 = (char *)sub_5714((uint64_t)(v95 + 768), v211);
                unint64_t v97 = (char *)v95[767];
                uint64_t v207 = (char *)v95[766];
              }
              else
              {
                unint64_t v212 = 0;
              }
              uint64_t v253 = &v212[8 * v208];
              *(void *)uint64_t v253 = v96;
              unint64_t v99 = v253 + 8;
              while (v97 != v207)
              {
                uint64_t v254 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v253 - 1) = v254;
                v253 -= 8;
              }
              v95[766] = v253;
              v95[767] = v99;
              v95[768] = &v212[8 * v211];
              if (v207) {
                operator delete(v207);
              }
            }
            else
            {
              *(void *)unint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[767] = v99;
            break;
          case 0xE0:
            uint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            unint64_t v102 = (uint64_t *)v100[770];
            unint64_t v103 = v100[771];
            if ((unint64_t)v102 >= v103)
            {
              uint64_t v213 = (uint64_t *)v100[769];
              uint64_t v214 = v102 - v213;
              if ((unint64_t)(v214 + 1) >> 61) {
LABEL_360:
              }
                sub_566C();
              unint64_t v215 = v103 - (void)v213;
              unint64_t v216 = (uint64_t)(v103 - (void)v213) >> 2;
              if (v216 <= v214 + 1) {
                unint64_t v216 = v214 + 1;
              }
              if (v215 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v217 = v216;
              }
              if (v217)
              {
                unint64_t v218 = (char *)sub_5714((uint64_t)(v100 + 771), v217);
                unint64_t v102 = (uint64_t *)v100[770];
                uint64_t v213 = (uint64_t *)v100[769];
              }
              else
              {
                unint64_t v218 = 0;
              }
              uint64_t v255 = (uint64_t *)&v218[8 * v214];
              *uint64_t v255 = v101;
              uint64_t v104 = v255 + 1;
              while (v102 != v213)
              {
                uint64_t v256 = *--v102;
                *--uint64_t v255 = v256;
              }
              v100[769] = v255;
              v100[770] = v104;
              v100[771] = &v218[8 * v217];
              if (v213) {
                operator delete(v213);
              }
            }
            else
            {
              *unint64_t v102 = v101;
              uint64_t v104 = v102 + 1;
            }
            v100[770] = v104;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_16F390(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v78 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v77 = *v78;
    uint64_t v79 = (char *)v78[1] - (char *)*v78;
    if (v79)
    {
      unint64_t v80 = v79 >> 2;
      if (v80 <= 1) {
        unint64_t v80 = 1;
      }
      do
      {
        int v81 = *v77++;
        switch(v81)
        {
          case 28:
            unint64_t v82 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1456);
            goto LABEL_104;
          case 29:
            unint64_t v82 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1480);
            goto LABEL_104;
          case 30:
            unint64_t v82 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1504);
            goto LABEL_104;
          case 31:
            unint64_t v82 = *(unsigned __int16 *)(a1[3] + 26);
            unint64_t v83 = (void *)(*(void *)a1[2] + 1528);
            goto LABEL_104;
          case 32:
            unint64_t v82 = *(unsigned __int16 *)(a1[3] + 24);
            unint64_t v83 = (void *)(*(void *)a1[2] + 1552);
LABEL_104:
            *(void *)(*v83 - 8) += v82;
            break;
          default:
            break;
        }
        --v80;
      }
      while (v80);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x1C:
            uint64_t v10 = *(void **)a1[2];
            unint64_t v11 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            unint64_t v12 = (unint64_t *)v10[182];
            unint64_t v13 = v10[183];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v37 = (unint64_t *)v10[181];
              uint64_t v38 = v12 - v37;
              if ((unint64_t)(v38 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v39 = v13 - (void)v37;
              unint64_t v40 = (uint64_t)(v13 - (void)v37) >> 2;
              if (v40 <= v38 + 1) {
                unint64_t v40 = v38 + 1;
              }
              if (v39 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v40;
              }
              if (v41)
              {
                uint64_t v42 = (char *)sub_5714((uint64_t)(v10 + 183), v41);
                unint64_t v12 = (unint64_t *)v10[182];
                uint64_t v37 = (unint64_t *)v10[181];
              }
              else
              {
                uint64_t v42 = 0;
              }
              unint64_t v67 = (unint64_t *)&v42[8 * v38];
              *unint64_t v67 = v11;
              unint64_t v14 = v67 + 1;
              while (v12 != v37)
              {
                unint64_t v68 = *--v12;
                *--unint64_t v67 = v68;
              }
              v10[181] = v67;
              v10[182] = v14;
              v10[183] = &v42[8 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              *unint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[182] = v14;
            break;
          case 0x1D:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[185];
            unint64_t v18 = v15[186];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v43 = (uint64_t *)v15[184];
              uint64_t v44 = v17 - v43;
              if ((unint64_t)(v44 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v45 = v18 - (void)v43;
              unint64_t v46 = (uint64_t)(v18 - (void)v43) >> 2;
              if (v46 <= v44 + 1) {
                unint64_t v46 = v44 + 1;
              }
              if (v45 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v47 = v46;
              }
              if (v47)
              {
                unint64_t v48 = (char *)sub_5714((uint64_t)(v15 + 186), v47);
                uint64_t v17 = (uint64_t *)v15[185];
                unint64_t v43 = (uint64_t *)v15[184];
              }
              else
              {
                unint64_t v48 = 0;
              }
              unint64_t v69 = (uint64_t *)&v48[8 * v44];
              *unint64_t v69 = v16;
              unint64_t v19 = v69 + 1;
              while (v17 != v43)
              {
                uint64_t v70 = *--v17;
                *--unint64_t v69 = v70;
              }
              v15[184] = v69;
              v15[185] = v19;
              v15[186] = &v48[8 * v47];
              if (v43) {
                operator delete(v43);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[185] = v19;
            break;
          case 0x1E:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            uint64_t v22 = (uint64_t *)v20[188];
            unint64_t v23 = v20[189];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v49 = (uint64_t *)v20[187];
              uint64_t v50 = v22 - v49;
              if ((unint64_t)(v50 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v51 = v23 - (void)v49;
              unint64_t v52 = (uint64_t)(v23 - (void)v49) >> 2;
              if (v52 <= v50 + 1) {
                unint64_t v52 = v50 + 1;
              }
              if (v51 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v53 = v52;
              }
              if (v53)
              {
                unint64_t v54 = (char *)sub_5714((uint64_t)(v20 + 189), v53);
                uint64_t v22 = (uint64_t *)v20[188];
                uint64_t v49 = (uint64_t *)v20[187];
              }
              else
              {
                unint64_t v54 = 0;
              }
              uint64_t v71 = (uint64_t *)&v54[8 * v50];
              *uint64_t v71 = v21;
              unint64_t v24 = v71 + 1;
              while (v22 != v49)
              {
                uint64_t v72 = *--v22;
                *--uint64_t v71 = v72;
              }
              v20[187] = v71;
              v20[188] = v24;
              v20[189] = &v54[8 * v53];
              if (v49) {
                operator delete(v49);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[188] = v24;
            break;
          case 0x1F:
            uint64_t v25 = a1[2];
            uint64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int16 *)(a1[3] + 26);
            unint64_t v28 = *(char **)(*(void *)v25 + 1528);
            unint64_t v29 = *(void *)(*(void *)v25 + 1536);
            if ((unint64_t)v28 >= v29)
            {
              uint64_t v55 = (char *)v26[190];
              uint64_t v56 = (v28 - v55) >> 3;
              if ((unint64_t)(v56 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v57 = v29 - (void)v55;
              unint64_t v58 = (uint64_t)(v29 - (void)v55) >> 2;
              if (v58 <= v56 + 1) {
                unint64_t v58 = v56 + 1;
              }
              if (v57 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v58;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_5714((uint64_t)(v26 + 192), v59);
                unint64_t v28 = (char *)v26[191];
                uint64_t v55 = (char *)v26[190];
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v73 = &v60[8 * v56];
              *(void *)unint64_t v73 = v27;
              unint64_t v30 = v73 + 8;
              while (v28 != v55)
              {
                uint64_t v74 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v73 - 1) = v74;
                v73 -= 8;
              }
              v26[190] = v73;
              v26[191] = v30;
              v26[192] = &v60[8 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(void *)unint64_t v28 = v27;
              unint64_t v30 = v28 + 8;
            }
            v26[191] = v30;
            break;
          case 0x20:
            uint64_t v31 = a1[2];
            unint64_t v32 = *(void **)v31;
            uint64_t v33 = *(unsigned __int16 *)(a1[3] + 24);
            unint64_t v34 = *(char **)(*(void *)v31 + 1552);
            unint64_t v35 = *(void *)(*(void *)v31 + 1560);
            if ((unint64_t)v34 >= v35)
            {
              uint64_t v61 = (char *)v32[193];
              uint64_t v62 = (v34 - v61) >> 3;
              if ((unint64_t)(v62 + 1) >> 61) {
LABEL_108:
              }
                sub_566C();
              unint64_t v63 = v35 - (void)v61;
              unint64_t v64 = (uint64_t)(v35 - (void)v61) >> 2;
              if (v64 <= v62 + 1) {
                unint64_t v64 = v62 + 1;
              }
              if (v63 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v64;
              }
              if (v65)
              {
                uint64_t v66 = (char *)sub_5714((uint64_t)(v32 + 195), v65);
                unint64_t v34 = (char *)v32[194];
                uint64_t v61 = (char *)v32[193];
              }
              else
              {
                uint64_t v66 = 0;
              }
              uint64_t v75 = &v66[8 * v62];
              *(void *)uint64_t v75 = v33;
              uint64_t v36 = v75 + 8;
              while (v34 != v61)
              {
                uint64_t v76 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }
              v32[193] = v75;
              v32[194] = v36;
              v32[195] = &v66[8 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(void *)unint64_t v34 = v33;
              uint64_t v36 = v34 + 8;
            }
            v32[194] = v36;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_16F930(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v427 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v426 = *v427;
    uint64_t v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      unint64_t v429 = v428 >> 2;
      if (v429 <= 1) {
        unint64_t v429 = 1;
      }
      do
      {
        int v430 = *v426++;
        switch(v430)
        {
          case 'J':
            LOWORD(v431) = *(_WORD *)(a1[3] + 82);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2560);
            goto LABEL_590;
          case 'K':
            LOWORD(v431) = *(_WORD *)(a1[3] + 66);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2584);
            goto LABEL_590;
          case 'L':
            LOWORD(v431) = *(_WORD *)(a1[3] + 50);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2608);
            goto LABEL_590;
          case 'M':
            LOWORD(v431) = *(_WORD *)(a1[3] + 34);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2632);
            goto LABEL_590;
          case 'N':
            LOWORD(v431) = *(_WORD *)(a1[3] + 84);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2656);
            goto LABEL_590;
          case 'O':
            LOWORD(v431) = *(_WORD *)(a1[3] + 68);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2680);
            goto LABEL_590;
          case 'P':
            LOWORD(v431) = *(_WORD *)(a1[3] + 52);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2704);
            goto LABEL_590;
          case 'Q':
            LOWORD(v431) = *(_WORD *)(a1[3] + 36);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2728);
            goto LABEL_590;
          case 'R':
            LOWORD(v431) = *(_WORD *)(a1[3] + 86);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2752);
            goto LABEL_590;
          case 'S':
            LOWORD(v431) = *(_WORD *)(a1[3] + 70);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2776);
            goto LABEL_590;
          case 'T':
            LOWORD(v431) = *(_WORD *)(a1[3] + 54);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2800);
            goto LABEL_590;
          case 'U':
            LOWORD(v431) = *(_WORD *)(a1[3] + 38);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2824);
            goto LABEL_590;
          case 'V':
            LOWORD(v431) = *(_WORD *)(a1[3] + 76);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2848);
            goto LABEL_590;
          case 'W':
            LOWORD(v431) = *(_WORD *)(a1[3] + 60);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2872);
            goto LABEL_590;
          case 'X':
            LOWORD(v431) = *(_WORD *)(a1[3] + 44);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2896);
            goto LABEL_590;
          case 'Y':
            LOWORD(v431) = *(_WORD *)(a1[3] + 28);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2920);
            goto LABEL_590;
          case 'Z':
            LOWORD(v431) = *(_WORD *)(a1[3] + 78);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2944);
            goto LABEL_590;
          case '[':
            LOWORD(v431) = *(_WORD *)(a1[3] + 62);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2968);
            goto LABEL_590;
          case '\\':
            LOWORD(v431) = *(_WORD *)(a1[3] + 46);
            uint64_t v432 = (void *)(*(void *)a1[2] + 2992);
            goto LABEL_590;
          case ']':
            LOWORD(v431) = *(_WORD *)(a1[3] + 30);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3016);
            goto LABEL_590;
          case '^':
            LOWORD(v431) = *(_WORD *)(a1[3] + 80);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3040);
            goto LABEL_590;
          case '_':
            LOWORD(v431) = *(_WORD *)(a1[3] + 64);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3064);
            goto LABEL_590;
            LOWORD(v431) = *(_WORD *)(a1[3] + 48);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3088);
            goto LABEL_590;
          case 'a':
            LOWORD(v431) = *(_WORD *)(a1[3] + 32);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3112);
            goto LABEL_590;
          case 'b':
            LOWORD(v431) = *(_WORD *)(a1[3] + 72);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3136);
            goto LABEL_590;
          case 'c':
            LOWORD(v431) = *(_WORD *)(a1[3] + 56);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3160);
            goto LABEL_590;
          case 'd':
            LOWORD(v431) = *(_WORD *)(a1[3] + 40);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3184);
            goto LABEL_590;
          case 'e':
            int v431 = *(unsigned __int16 *)(a1[3] + 24) >> 1;
            uint64_t v432 = (void *)(*(void *)a1[2] + 3208);
            goto LABEL_590;
          case 'f':
            LOWORD(v431) = *(_WORD *)(a1[3] + 74);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3232);
            goto LABEL_590;
          case 'g':
            LOWORD(v431) = *(_WORD *)(a1[3] + 58);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3256);
            goto LABEL_590;
          case 'h':
            LOWORD(v431) = *(_WORD *)(a1[3] + 42);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3280);
            goto LABEL_590;
          case 'i':
            LOWORD(v431) = *(_WORD *)(a1[3] + 26);
            uint64_t v432 = (void *)(*(void *)a1[2] + 3304);
LABEL_590:
            *(void *)(*v432 - 8) += v431 & 0x1FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'J':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 82) & 0x1FFF;
            unint64_t v12 = (char *)v10[320];
            unint64_t v13 = v10[321];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v170 = (char *)v10[319];
              uint64_t v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v172 = v13 - (void)v170;
              unint64_t v173 = (uint64_t)(v13 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                unint64_t v175 = (char *)sub_5714((uint64_t)(v10 + 321), v174);
                unint64_t v12 = (char *)v10[320];
                uint64_t v170 = (char *)v10[319];
              }
              else
              {
                unint64_t v175 = 0;
              }
              uint64_t v362 = &v175[8 * v171];
              *(void *)uint64_t v362 = v11;
              unint64_t v14 = v362 + 8;
              while (v12 != v170)
              {
                uint64_t v363 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[319] = v362;
              v10[320] = v14;
              v10[321] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)unint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[320] = v14;
            break;
          case 'K':
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 66) & 0x1FFF;
            uint64_t v17 = (char *)v15[323];
            unint64_t v18 = v15[324];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v176 = (char *)v15[322];
              uint64_t v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v178 = v18 - (void)v176;
              unint64_t v179 = (uint64_t)(v18 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                unint64_t v181 = (char *)sub_5714((uint64_t)(v15 + 324), v180);
                uint64_t v17 = (char *)v15[323];
                uint64_t v176 = (char *)v15[322];
              }
              else
              {
                unint64_t v181 = 0;
              }
              uint64_t v364 = &v181[8 * v177];
              *(void *)uint64_t v364 = v16;
              unint64_t v19 = v364 + 8;
              while (v17 != v176)
              {
                uint64_t v365 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[322] = v364;
              v15[323] = v19;
              v15[324] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[323] = v19;
            break;
          case 'L':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 50) & 0x1FFF;
            uint64_t v22 = (char *)v20[326];
            unint64_t v23 = v20[327];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v182 = (char *)v20[325];
              uint64_t v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v184 = v23 - (void)v182;
              unint64_t v185 = (uint64_t)(v23 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                unint64_t v187 = (char *)sub_5714((uint64_t)(v20 + 327), v186);
                uint64_t v22 = (char *)v20[326];
                uint64_t v182 = (char *)v20[325];
              }
              else
              {
                unint64_t v187 = 0;
              }
              unint64_t v366 = &v187[8 * v183];
              *(void *)unint64_t v366 = v21;
              unint64_t v24 = v366 + 8;
              while (v22 != v182)
              {
                uint64_t v367 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[325] = v366;
              v20[326] = v24;
              v20[327] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[326] = v24;
            break;
          case 'M':
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            uint64_t v27 = (char *)v25[329];
            unint64_t v28 = v25[330];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v188 = (char *)v25[328];
              uint64_t v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v190 = v28 - (void)v188;
              unint64_t v191 = (uint64_t)(v28 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                unint64_t v193 = (char *)sub_5714((uint64_t)(v25 + 330), v192);
                uint64_t v27 = (char *)v25[329];
                uint64_t v188 = (char *)v25[328];
              }
              else
              {
                unint64_t v193 = 0;
              }
              unint64_t v368 = &v193[8 * v189];
              *(void *)unint64_t v368 = v26;
              unint64_t v29 = v368 + 8;
              while (v27 != v188)
              {
                uint64_t v369 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[328] = v368;
              v25[329] = v29;
              v25[330] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[329] = v29;
            break;
          case 'N':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 84) & 0x1FFF;
            unint64_t v32 = (char *)v30[332];
            unint64_t v33 = v30[333];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v194 = (char *)v30[331];
              uint64_t v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v196 = v33 - (void)v194;
              unint64_t v197 = (uint64_t)(v33 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                unint64_t v199 = (char *)sub_5714((uint64_t)(v30 + 333), v198);
                unint64_t v32 = (char *)v30[332];
                uint64_t v194 = (char *)v30[331];
              }
              else
              {
                unint64_t v199 = 0;
              }
              unint64_t v370 = &v199[8 * v195];
              *(void *)unint64_t v370 = v31;
              unint64_t v34 = v370 + 8;
              while (v32 != v194)
              {
                uint64_t v371 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[331] = v370;
              v30[332] = v34;
              v30[333] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              unint64_t v34 = v32 + 8;
            }
            v30[332] = v34;
            break;
          case 'O':
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            uint64_t v37 = (char *)v35[335];
            unint64_t v38 = v35[336];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v200 = (char *)v35[334];
              uint64_t v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v202 = v38 - (void)v200;
              unint64_t v203 = (uint64_t)(v38 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                unint64_t v205 = (char *)sub_5714((uint64_t)(v35 + 336), v204);
                uint64_t v37 = (char *)v35[335];
                uint64_t v200 = (char *)v35[334];
              }
              else
              {
                unint64_t v205 = 0;
              }
              uint64_t v372 = &v205[8 * v201];
              *(void *)uint64_t v372 = v36;
              unint64_t v39 = v372 + 8;
              while (v37 != v200)
              {
                uint64_t v373 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[334] = v372;
              v35[335] = v39;
              v35[336] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[335] = v39;
            break;
          case 'P':
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 52) & 0x1FFF;
            uint64_t v42 = (char *)v40[338];
            unint64_t v43 = v40[339];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v206 = (char *)v40[337];
              uint64_t v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v208 = v43 - (void)v206;
              unint64_t v209 = (uint64_t)(v43 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                unint64_t v211 = (char *)sub_5714((uint64_t)(v40 + 339), v210);
                uint64_t v42 = (char *)v40[338];
                uint64_t v206 = (char *)v40[337];
              }
              else
              {
                unint64_t v211 = 0;
              }
              int v374 = &v211[8 * v207];
              *(void *)int v374 = v41;
              uint64_t v44 = v374 + 8;
              while (v42 != v206)
              {
                uint64_t v375 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[337] = v374;
              v40[338] = v44;
              v40[339] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              uint64_t v44 = v42 + 8;
            }
            v40[338] = v44;
            break;
          case 'Q':
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 36) & 0x1FFF;
            unint64_t v47 = (char *)v45[341];
            unint64_t v48 = v45[342];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v212 = (char *)v45[340];
              uint64_t v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v214 = v48 - (void)v212;
              unint64_t v215 = (uint64_t)(v48 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                unint64_t v217 = (char *)sub_5714((uint64_t)(v45 + 342), v216);
                unint64_t v47 = (char *)v45[341];
                unint64_t v212 = (char *)v45[340];
              }
              else
              {
                unint64_t v217 = 0;
              }
              unint64_t v376 = &v217[8 * v213];
              *(void *)unint64_t v376 = v46;
              uint64_t v49 = v376 + 8;
              while (v47 != v212)
              {
                uint64_t v377 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[340] = v376;
              v45[341] = v49;
              v45[342] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[341] = v49;
            break;
          case 'R':
            uint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 86) & 0x1FFF;
            unint64_t v52 = (char *)v50[344];
            unint64_t v53 = v50[345];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v218 = (char *)v50[343];
              uint64_t v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v220 = v53 - (void)v218;
              unint64_t v221 = (uint64_t)(v53 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v50 + 345), v222);
                unint64_t v52 = (char *)v50[344];
                unint64_t v218 = (char *)v50[343];
              }
              else
              {
                uint64_t v223 = 0;
              }
              unint64_t v378 = &v223[8 * v219];
              *(void *)unint64_t v378 = v51;
              unint64_t v54 = v378 + 8;
              while (v52 != v218)
              {
                uint64_t v379 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[343] = v378;
              v50[344] = v54;
              v50[345] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              unint64_t v54 = v52 + 8;
            }
            v50[344] = v54;
            break;
          case 'S':
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            unint64_t v57 = (char *)v55[347];
            unint64_t v58 = v55[348];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v224 = (char *)v55[346];
              uint64_t v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v226 = v58 - (void)v224;
              unint64_t v227 = (uint64_t)(v58 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                uint64_t v229 = (char *)sub_5714((uint64_t)(v55 + 348), v228);
                unint64_t v57 = (char *)v55[347];
                uint64_t v224 = (char *)v55[346];
              }
              else
              {
                uint64_t v229 = 0;
              }
              uint64_t v380 = &v229[8 * v225];
              *(void *)uint64_t v380 = v56;
              unint64_t v59 = v380 + 8;
              while (v57 != v224)
              {
                uint64_t v381 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[346] = v380;
              v55[347] = v59;
              v55[348] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *(void *)unint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[347] = v59;
            break;
          case 'T':
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 54) & 0x1FFF;
            uint64_t v62 = (char *)v60[350];
            unint64_t v63 = v60[351];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v230 = (char *)v60[349];
              uint64_t v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v232 = v63 - (void)v230;
              unint64_t v233 = (uint64_t)(v63 - (void)v230) >> 2;
              if (v233 <= v231 + 1) {
                unint64_t v233 = v231 + 1;
              }
              if (v232 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v234 = v233;
              }
              if (v234)
              {
                unint64_t v235 = (char *)sub_5714((uint64_t)(v60 + 351), v234);
                uint64_t v62 = (char *)v60[350];
                uint64_t v230 = (char *)v60[349];
              }
              else
              {
                unint64_t v235 = 0;
              }
              unint64_t v382 = &v235[8 * v231];
              *(void *)unint64_t v382 = v61;
              unint64_t v64 = v382 + 8;
              while (v62 != v230)
              {
                uint64_t v383 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[349] = v382;
              v60[350] = v64;
              v60[351] = &v235[8 * v234];
              if (v230) {
                operator delete(v230);
              }
            }
            else
            {
              *(void *)uint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[350] = v64;
            break;
          case 'U':
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 38) & 0x1FFF;
            unint64_t v67 = (char *)v65[353];
            unint64_t v68 = v65[354];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v236 = (char *)v65[352];
              uint64_t v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v238 = v68 - (void)v236;
              unint64_t v239 = (uint64_t)(v68 - (void)v236) >> 2;
              if (v239 <= v237 + 1) {
                unint64_t v239 = v237 + 1;
              }
              if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v240 = v239;
              }
              if (v240)
              {
                uint64_t v241 = (char *)sub_5714((uint64_t)(v65 + 354), v240);
                unint64_t v67 = (char *)v65[353];
                uint64_t v236 = (char *)v65[352];
              }
              else
              {
                uint64_t v241 = 0;
              }
              unint64_t v384 = &v241[8 * v237];
              *(void *)unint64_t v384 = v66;
              unint64_t v69 = v384 + 8;
              while (v67 != v236)
              {
                uint64_t v385 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[352] = v384;
              v65[353] = v69;
              v65[354] = &v241[8 * v240];
              if (v236) {
                operator delete(v236);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[353] = v69;
            break;
          case 'V':
            uint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            uint64_t v72 = (char *)v70[356];
            unint64_t v73 = v70[357];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v242 = (char *)v70[355];
              uint64_t v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v244 = v73 - (void)v242;
              unint64_t v245 = (uint64_t)(v73 - (void)v242) >> 2;
              if (v245 <= v243 + 1) {
                unint64_t v245 = v243 + 1;
              }
              if (v244 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v246 = v245;
              }
              if (v246)
              {
                uint64_t v247 = (char *)sub_5714((uint64_t)(v70 + 357), v246);
                uint64_t v72 = (char *)v70[356];
                uint64_t v242 = (char *)v70[355];
              }
              else
              {
                uint64_t v247 = 0;
              }
              uint64_t v386 = &v247[8 * v243];
              *(void *)uint64_t v386 = v71;
              uint64_t v74 = v386 + 8;
              while (v72 != v242)
              {
                uint64_t v387 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[355] = v386;
              v70[356] = v74;
              v70[357] = &v247[8 * v246];
              if (v242) {
                operator delete(v242);
              }
            }
            else
            {
              *(void *)uint64_t v72 = v71;
              uint64_t v74 = v72 + 8;
            }
            v70[356] = v74;
            break;
          case 'W':
            uint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            unint64_t v77 = (char *)v75[359];
            unint64_t v78 = v75[360];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v248 = (char *)v75[358];
              uint64_t v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v250 = v78 - (void)v248;
              unint64_t v251 = (uint64_t)(v78 - (void)v248) >> 2;
              if (v251 <= v249 + 1) {
                unint64_t v251 = v249 + 1;
              }
              if (v250 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v252 = v251;
              }
              if (v252)
              {
                uint64_t v253 = (char *)sub_5714((uint64_t)(v75 + 360), v252);
                unint64_t v77 = (char *)v75[359];
                uint64_t v248 = (char *)v75[358];
              }
              else
              {
                uint64_t v253 = 0;
              }
              uint64_t v388 = &v253[8 * v249];
              *(void *)uint64_t v388 = v76;
              uint64_t v79 = v388 + 8;
              while (v77 != v248)
              {
                uint64_t v389 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[358] = v388;
              v75[359] = v79;
              v75[360] = &v253[8 * v252];
              if (v248) {
                operator delete(v248);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[359] = v79;
            break;
          case 'X':
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            unint64_t v82 = (char *)v80[362];
            unint64_t v83 = v80[363];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v254 = (char *)v80[361];
              uint64_t v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v256 = v83 - (void)v254;
              unint64_t v257 = (uint64_t)(v83 - (void)v254) >> 2;
              if (v257 <= v255 + 1) {
                unint64_t v257 = v255 + 1;
              }
              if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v258 = v257;
              }
              if (v258)
              {
                uint64_t v259 = (char *)sub_5714((uint64_t)(v80 + 363), v258);
                unint64_t v82 = (char *)v80[362];
                uint64_t v254 = (char *)v80[361];
              }
              else
              {
                uint64_t v259 = 0;
              }
              unint64_t v390 = &v259[8 * v255];
              *(void *)unint64_t v390 = v81;
              unint64_t v84 = v390 + 8;
              while (v82 != v254)
              {
                uint64_t v391 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[361] = v390;
              v80[362] = v84;
              v80[363] = &v259[8 * v258];
              if (v254) {
                operator delete(v254);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[362] = v84;
            break;
          case 'Y':
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            unint64_t v87 = (char *)v85[365];
            unint64_t v88 = v85[366];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v260 = (char *)v85[364];
              uint64_t v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v262 = v88 - (void)v260;
              unint64_t v263 = (uint64_t)(v88 - (void)v260) >> 2;
              if (v263 <= v261 + 1) {
                unint64_t v263 = v261 + 1;
              }
              if (v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v264 = v263;
              }
              if (v264)
              {
                uint64_t v265 = (char *)sub_5714((uint64_t)(v85 + 366), v264);
                unint64_t v87 = (char *)v85[365];
                unint64_t v260 = (char *)v85[364];
              }
              else
              {
                uint64_t v265 = 0;
              }
              unint64_t v392 = &v265[8 * v261];
              *(void *)unint64_t v392 = v86;
              unint64_t v89 = v392 + 8;
              while (v87 != v260)
              {
                uint64_t v393 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[364] = v392;
              v85[365] = v89;
              v85[366] = &v265[8 * v264];
              if (v260) {
                operator delete(v260);
              }
            }
            else
            {
              *(void *)unint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[365] = v89;
            break;
          case 'Z':
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            uint64_t v92 = (char *)v90[368];
            unint64_t v93 = v90[369];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v266 = (char *)v90[367];
              uint64_t v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v268 = v93 - (void)v266;
              unint64_t v269 = (uint64_t)(v93 - (void)v266) >> 2;
              if (v269 <= v267 + 1) {
                unint64_t v269 = v267 + 1;
              }
              if (v268 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v270 = v269;
              }
              if (v270)
              {
                uint64_t v271 = (char *)sub_5714((uint64_t)(v90 + 369), v270);
                uint64_t v92 = (char *)v90[368];
                unint64_t v266 = (char *)v90[367];
              }
              else
              {
                uint64_t v271 = 0;
              }
              unint64_t v394 = &v271[8 * v267];
              *(void *)unint64_t v394 = v91;
              uint64_t v94 = v394 + 8;
              while (v92 != v266)
              {
                uint64_t v395 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[367] = v394;
              v90[368] = v94;
              v90[369] = &v271[8 * v270];
              if (v266) {
                operator delete(v266);
              }
            }
            else
            {
              *(void *)uint64_t v92 = v91;
              uint64_t v94 = v92 + 8;
            }
            v90[368] = v94;
            break;
          case '[':
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 62) & 0x1FFF;
            unint64_t v97 = (char *)v95[371];
            unint64_t v98 = v95[372];
            if ((unint64_t)v97 >= v98)
            {
              uint64_t v272 = (char *)v95[370];
              uint64_t v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v274 = v98 - (void)v272;
              unint64_t v275 = (uint64_t)(v98 - (void)v272) >> 2;
              if (v275 <= v273 + 1) {
                unint64_t v275 = v273 + 1;
              }
              if (v274 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v276 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v276 = v275;
              }
              if (v276)
              {
                uint64_t v277 = (char *)sub_5714((uint64_t)(v95 + 372), v276);
                unint64_t v97 = (char *)v95[371];
                uint64_t v272 = (char *)v95[370];
              }
              else
              {
                uint64_t v277 = 0;
              }
              uint64_t v396 = &v277[8 * v273];
              *(void *)uint64_t v396 = v96;
              unint64_t v99 = v396 + 8;
              while (v97 != v272)
              {
                uint64_t v397 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[370] = v396;
              v95[371] = v99;
              v95[372] = &v277[8 * v276];
              if (v272) {
                operator delete(v272);
              }
            }
            else
            {
              *(void *)unint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[371] = v99;
            break;
          case '\\':
            uint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 46) & 0x1FFF;
            unint64_t v102 = (char *)v100[374];
            unint64_t v103 = v100[375];
            if ((unint64_t)v102 >= v103)
            {
              uint64_t v278 = (char *)v100[373];
              uint64_t v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v280 = v103 - (void)v278;
              unint64_t v281 = (uint64_t)(v103 - (void)v278) >> 2;
              if (v281 <= v279 + 1) {
                unint64_t v281 = v279 + 1;
              }
              if (v280 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v282 = v281;
              }
              if (v282)
              {
                uint64_t v283 = (char *)sub_5714((uint64_t)(v100 + 375), v282);
                unint64_t v102 = (char *)v100[374];
                uint64_t v278 = (char *)v100[373];
              }
              else
              {
                uint64_t v283 = 0;
              }
              int v398 = &v283[8 * v279];
              *(void *)int v398 = v101;
              uint64_t v104 = v398 + 8;
              while (v102 != v278)
              {
                uint64_t v399 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[373] = v398;
              v100[374] = v104;
              v100[375] = &v283[8 * v282];
              if (v278) {
                operator delete(v278);
              }
            }
            else
            {
              *(void *)unint64_t v102 = v101;
              uint64_t v104 = v102 + 8;
            }
            v100[374] = v104;
            break;
          case ']':
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            unint64_t v107 = (char *)v105[377];
            unint64_t v108 = v105[378];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v284 = (char *)v105[376];
              uint64_t v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v286 = v108 - (void)v284;
              unint64_t v287 = (uint64_t)(v108 - (void)v284) >> 2;
              if (v287 <= v285 + 1) {
                unint64_t v287 = v285 + 1;
              }
              if (v286 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v287;
              }
              if (v288)
              {
                uint64_t v289 = (char *)sub_5714((uint64_t)(v105 + 378), v288);
                unint64_t v107 = (char *)v105[377];
                unint64_t v284 = (char *)v105[376];
              }
              else
              {
                uint64_t v289 = 0;
              }
              uint64_t v400 = &v289[8 * v285];
              *(void *)uint64_t v400 = v106;
              unint64_t v109 = v400 + 8;
              while (v107 != v284)
              {
                uint64_t v401 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[376] = v400;
              v105[377] = v109;
              v105[378] = &v289[8 * v288];
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              *(void *)unint64_t v107 = v106;
              unint64_t v109 = v107 + 8;
            }
            v105[377] = v109;
            break;
          case '^':
            uint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 80) & 0x1FFF;
            uint64_t v112 = (char *)v110[380];
            unint64_t v113 = v110[381];
            if ((unint64_t)v112 >= v113)
            {
              unint64_t v290 = (char *)v110[379];
              uint64_t v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v292 = v113 - (void)v290;
              unint64_t v293 = (uint64_t)(v113 - (void)v290) >> 2;
              if (v293 <= v291 + 1) {
                unint64_t v293 = v291 + 1;
              }
              if (v292 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v294 = v293;
              }
              if (v294)
              {
                unint64_t v295 = (char *)sub_5714((uint64_t)(v110 + 381), v294);
                uint64_t v112 = (char *)v110[380];
                unint64_t v290 = (char *)v110[379];
              }
              else
              {
                unint64_t v295 = 0;
              }
              unint64_t v402 = &v295[8 * v291];
              *(void *)unint64_t v402 = v111;
              unint64_t v114 = v402 + 8;
              while (v112 != v290)
              {
                uint64_t v403 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[379] = v402;
              v110[380] = v114;
              v110[381] = &v295[8 * v294];
              if (v290) {
                operator delete(v290);
              }
            }
            else
            {
              *(void *)uint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[380] = v114;
            break;
          case '_':
            unint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_WORD *)(a1[3] + 64) & 0x1FFF;
            uint64_t v117 = (char *)v115[383];
            unint64_t v118 = v115[384];
            if ((unint64_t)v117 >= v118)
            {
              unint64_t v296 = (char *)v115[382];
              uint64_t v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v298 = v118 - (void)v296;
              unint64_t v299 = (uint64_t)(v118 - (void)v296) >> 2;
              if (v299 <= v297 + 1) {
                unint64_t v299 = v297 + 1;
              }
              if (v298 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v300 = v299;
              }
              if (v300)
              {
                unint64_t v301 = (char *)sub_5714((uint64_t)(v115 + 384), v300);
                uint64_t v117 = (char *)v115[383];
                unint64_t v296 = (char *)v115[382];
              }
              else
              {
                unint64_t v301 = 0;
              }
              uint64_t v404 = &v301[8 * v297];
              *(void *)uint64_t v404 = v116;
              unint64_t v119 = v404 + 8;
              while (v117 != v296)
              {
                uint64_t v405 = *((void *)v117 - 1);
                v117 -= 8;
                *((void *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[382] = v404;
              v115[383] = v119;
              v115[384] = &v301[8 * v300];
              if (v296) {
                operator delete(v296);
              }
            }
            else
            {
              *(void *)uint64_t v117 = v116;
              unint64_t v119 = v117 + 8;
            }
            v115[383] = v119;
            break;
            unint64_t v120 = *(void **)a1[2];
            uint64_t v121 = *(_WORD *)(a1[3] + 48) & 0x1FFF;
            uint64_t v122 = (char *)v120[386];
            unint64_t v123 = v120[387];
            if ((unint64_t)v122 >= v123)
            {
              int v302 = (char *)v120[385];
              uint64_t v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v304 = v123 - (void)v302;
              unint64_t v305 = (uint64_t)(v123 - (void)v302) >> 2;
              if (v305 <= v303 + 1) {
                unint64_t v305 = v303 + 1;
              }
              if (v304 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v306 = v305;
              }
              if (v306)
              {
                unint64_t v307 = (char *)sub_5714((uint64_t)(v120 + 387), v306);
                uint64_t v122 = (char *)v120[386];
                int v302 = (char *)v120[385];
              }
              else
              {
                unint64_t v307 = 0;
              }
              unint64_t v406 = &v307[8 * v303];
              *(void *)unint64_t v406 = v121;
              uint64_t v124 = v406 + 8;
              while (v122 != v302)
              {
                uint64_t v407 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[385] = v406;
              v120[386] = v124;
              v120[387] = &v307[8 * v306];
              if (v302) {
                operator delete(v302);
              }
            }
            else
            {
              *(void *)uint64_t v122 = v121;
              uint64_t v124 = v122 + 8;
            }
            v120[386] = v124;
            break;
          case 'a':
            unint64_t v125 = *(void **)a1[2];
            uint64_t v126 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            unint64_t v127 = (char *)v125[389];
            unint64_t v128 = v125[390];
            if ((unint64_t)v127 >= v128)
            {
              unint64_t v308 = (char *)v125[388];
              uint64_t v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v310 = v128 - (void)v308;
              unint64_t v311 = (uint64_t)(v128 - (void)v308) >> 2;
              if (v311 <= v309 + 1) {
                unint64_t v311 = v309 + 1;
              }
              if (v310 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v311;
              }
              if (v312)
              {
                unint64_t v313 = (char *)sub_5714((uint64_t)(v125 + 390), v312);
                unint64_t v127 = (char *)v125[389];
                unint64_t v308 = (char *)v125[388];
              }
              else
              {
                unint64_t v313 = 0;
              }
              uint64_t v408 = &v313[8 * v309];
              *(void *)uint64_t v408 = v126;
              uint64_t v129 = v408 + 8;
              while (v127 != v308)
              {
                uint64_t v409 = *((void *)v127 - 1);
                v127 -= 8;
                *((void *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[388] = v408;
              v125[389] = v129;
              v125[390] = &v313[8 * v312];
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(void *)unint64_t v127 = v126;
              uint64_t v129 = v127 + 8;
            }
            v125[389] = v129;
            break;
          case 'b':
            uint64_t v130 = *(void **)a1[2];
            uint64_t v131 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            unint64_t v132 = (char *)v130[392];
            unint64_t v133 = v130[393];
            if ((unint64_t)v132 >= v133)
            {
              uint64_t v314 = (char *)v130[391];
              uint64_t v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v316 = v133 - (void)v314;
              unint64_t v317 = (uint64_t)(v133 - (void)v314) >> 2;
              if (v317 <= v315 + 1) {
                unint64_t v317 = v315 + 1;
              }
              if (v316 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v318 = v317;
              }
              if (v318)
              {
                unint64_t v319 = (char *)sub_5714((uint64_t)(v130 + 393), v318);
                unint64_t v132 = (char *)v130[392];
                uint64_t v314 = (char *)v130[391];
              }
              else
              {
                unint64_t v319 = 0;
              }
              uint64_t v410 = &v319[8 * v315];
              *(void *)uint64_t v410 = v131;
              uint64_t v134 = v410 + 8;
              while (v132 != v314)
              {
                uint64_t v411 = *((void *)v132 - 1);
                v132 -= 8;
                *((void *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[391] = v410;
              v130[392] = v134;
              v130[393] = &v319[8 * v318];
              if (v314) {
                operator delete(v314);
              }
            }
            else
            {
              *(void *)unint64_t v132 = v131;
              uint64_t v134 = v132 + 8;
            }
            v130[392] = v134;
            break;
          case 'c':
            uint64_t v135 = *(void **)a1[2];
            uint64_t v136 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            unint64_t v137 = (char *)v135[395];
            unint64_t v138 = v135[396];
            if ((unint64_t)v137 >= v138)
            {
              unint64_t v320 = (char *)v135[394];
              uint64_t v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v322 = v138 - (void)v320;
              unint64_t v323 = (uint64_t)(v138 - (void)v320) >> 2;
              if (v323 <= v321 + 1) {
                unint64_t v323 = v321 + 1;
              }
              if (v322 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v324 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v324 = v323;
              }
              if (v324)
              {
                uint64_t v325 = (char *)sub_5714((uint64_t)(v135 + 396), v324);
                unint64_t v137 = (char *)v135[395];
                unint64_t v320 = (char *)v135[394];
              }
              else
              {
                uint64_t v325 = 0;
              }
              unint64_t v412 = &v325[8 * v321];
              *(void *)unint64_t v412 = v136;
              unint64_t v139 = v412 + 8;
              while (v137 != v320)
              {
                uint64_t v413 = *((void *)v137 - 1);
                v137 -= 8;
                *((void *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[394] = v412;
              v135[395] = v139;
              v135[396] = &v325[8 * v324];
              if (v320) {
                operator delete(v320);
              }
            }
            else
            {
              *(void *)unint64_t v137 = v136;
              unint64_t v139 = v137 + 8;
            }
            v135[395] = v139;
            break;
          case 'd':
            uint64_t v140 = *(void **)a1[2];
            uint64_t v141 = *(_WORD *)(a1[3] + 40) & 0x1FFF;
            uint64_t v142 = (char *)v140[398];
            unint64_t v143 = v140[399];
            if ((unint64_t)v142 >= v143)
            {
              int v326 = (char *)v140[397];
              uint64_t v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v328 = v143 - (void)v326;
              unint64_t v329 = (uint64_t)(v143 - (void)v326) >> 2;
              if (v329 <= v327 + 1) {
                unint64_t v329 = v327 + 1;
              }
              if (v328 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v330 = v329;
              }
              if (v330)
              {
                unint64_t v331 = (char *)sub_5714((uint64_t)(v140 + 399), v330);
                uint64_t v142 = (char *)v140[398];
                int v326 = (char *)v140[397];
              }
              else
              {
                unint64_t v331 = 0;
              }
              unint64_t v414 = &v331[8 * v327];
              *(void *)unint64_t v414 = v141;
              unint64_t v144 = v414 + 8;
              while (v142 != v326)
              {
                uint64_t v415 = *((void *)v142 - 1);
                v142 -= 8;
                *((void *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[397] = v414;
              v140[398] = v144;
              v140[399] = &v331[8 * v330];
              if (v326) {
                operator delete(v326);
              }
            }
            else
            {
              *(void *)uint64_t v142 = v141;
              unint64_t v144 = v142 + 8;
            }
            v140[398] = v144;
            break;
          case 'e':
            unint64_t v145 = *(void **)a1[2];
            unint64_t v146 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 24) >> 1) & 0x1FFF;
            uint64_t v147 = (unint64_t *)v145[401];
            unint64_t v148 = v145[402];
            if ((unint64_t)v147 >= v148)
            {
              unint64_t v332 = (unint64_t *)v145[400];
              uint64_t v333 = v147 - v332;
              if ((unint64_t)(v333 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v334 = v148 - (void)v332;
              unint64_t v335 = (uint64_t)(v148 - (void)v332) >> 2;
              if (v335 <= v333 + 1) {
                unint64_t v335 = v333 + 1;
              }
              if (v334 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v336 = v335;
              }
              if (v336)
              {
                unint64_t v337 = (char *)sub_5714((uint64_t)(v145 + 402), v336);
                uint64_t v147 = (unint64_t *)v145[401];
                unint64_t v332 = (unint64_t *)v145[400];
              }
              else
              {
                unint64_t v337 = 0;
              }
              unint64_t v416 = (unint64_t *)&v337[8 * v333];
              unint64_t *v416 = v146;
              unint64_t v149 = v416 + 1;
              while (v147 != v332)
              {
                unint64_t v417 = *--v147;
                *--unint64_t v416 = v417;
              }
              v145[400] = v416;
              v145[401] = v149;
              v145[402] = &v337[8 * v336];
              if (v332) {
                operator delete(v332);
              }
            }
            else
            {
              *uint64_t v147 = v146;
              unint64_t v149 = v147 + 1;
            }
            v145[401] = v149;
            break;
          case 'f':
            unint64_t v150 = *(void **)a1[2];
            uint64_t v151 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            uint64_t v152 = (char *)v150[404];
            unint64_t v153 = v150[405];
            if ((unint64_t)v152 >= v153)
            {
              uint64_t v338 = (char *)v150[403];
              uint64_t v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v340 = v153 - (void)v338;
              unint64_t v341 = (uint64_t)(v153 - (void)v338) >> 2;
              if (v341 <= v339 + 1) {
                unint64_t v341 = v339 + 1;
              }
              if (v340 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v342 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v342 = v341;
              }
              if (v342)
              {
                unint64_t v343 = (char *)sub_5714((uint64_t)(v150 + 405), v342);
                uint64_t v152 = (char *)v150[404];
                uint64_t v338 = (char *)v150[403];
              }
              else
              {
                unint64_t v343 = 0;
              }
              uint64_t v418 = &v343[8 * v339];
              *(void *)uint64_t v418 = v151;
              uint64_t v154 = v418 + 8;
              while (v152 != v338)
              {
                uint64_t v419 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[403] = v418;
              v150[404] = v154;
              v150[405] = &v343[8 * v342];
              if (v338) {
                operator delete(v338);
              }
            }
            else
            {
              *(void *)uint64_t v152 = v151;
              uint64_t v154 = v152 + 8;
            }
            v150[404] = v154;
            break;
          case 'g':
            unint64_t v155 = *(void **)a1[2];
            uint64_t v156 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            unint64_t v157 = (char *)v155[407];
            unint64_t v158 = v155[408];
            if ((unint64_t)v157 >= v158)
            {
              unint64_t v344 = (char *)v155[406];
              uint64_t v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v346 = v158 - (void)v344;
              unint64_t v347 = (uint64_t)(v158 - (void)v344) >> 2;
              if (v347 <= v345 + 1) {
                unint64_t v347 = v345 + 1;
              }
              if (v346 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v348 = v347;
              }
              if (v348)
              {
                uint64_t v349 = (char *)sub_5714((uint64_t)(v155 + 408), v348);
                unint64_t v157 = (char *)v155[407];
                unint64_t v344 = (char *)v155[406];
              }
              else
              {
                uint64_t v349 = 0;
              }
              int v420 = &v349[8 * v345];
              *(void *)int v420 = v156;
              uint64_t v159 = v420 + 8;
              while (v157 != v344)
              {
                uint64_t v421 = *((void *)v157 - 1);
                v157 -= 8;
                *((void *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[406] = v420;
              v155[407] = v159;
              v155[408] = &v349[8 * v348];
              if (v344) {
                operator delete(v344);
              }
            }
            else
            {
              *(void *)unint64_t v157 = v156;
              uint64_t v159 = v157 + 8;
            }
            v155[407] = v159;
            break;
          case 'h':
            uint64_t v160 = *(void **)a1[2];
            uint64_t v161 = *(_WORD *)(a1[3] + 42) & 0x1FFF;
            unint64_t v162 = (char *)v160[410];
            unint64_t v163 = v160[411];
            if ((unint64_t)v162 >= v163)
            {
              int v350 = (char *)v160[409];
              uint64_t v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v352 = v163 - (void)v350;
              unint64_t v353 = (uint64_t)(v163 - (void)v350) >> 2;
              if (v353 <= v351 + 1) {
                unint64_t v353 = v351 + 1;
              }
              if (v352 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v354 = v353;
              }
              if (v354)
              {
                unint64_t v355 = (char *)sub_5714((uint64_t)(v160 + 411), v354);
                unint64_t v162 = (char *)v160[410];
                int v350 = (char *)v160[409];
              }
              else
              {
                unint64_t v355 = 0;
              }
              uint64_t v422 = &v355[8 * v351];
              *(void *)uint64_t v422 = v161;
              uint64_t v164 = v422 + 8;
              while (v162 != v350)
              {
                uint64_t v423 = *((void *)v162 - 1);
                v162 -= 8;
                *((void *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[409] = v422;
              v160[410] = v164;
              v160[411] = &v355[8 * v354];
              if (v350) {
                operator delete(v350);
              }
            }
            else
            {
              *(void *)unint64_t v162 = v161;
              uint64_t v164 = v162 + 8;
            }
            v160[410] = v164;
            break;
          case 'i':
            uint64_t v165 = *(void **)a1[2];
            uint64_t v166 = *(_WORD *)(a1[3] + 26) & 0x1FFF;
            unint64_t v167 = (char *)v165[413];
            unint64_t v168 = v165[414];
            if ((unint64_t)v167 >= v168)
            {
              unint64_t v356 = (char *)v165[412];
              uint64_t v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61) {
LABEL_594:
              }
                sub_566C();
              unint64_t v358 = v168 - (void)v356;
              unint64_t v359 = (uint64_t)(v168 - (void)v356) >> 2;
              if (v359 <= v357 + 1) {
                unint64_t v359 = v357 + 1;
              }
              if (v358 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v360 = v359;
              }
              if (v360)
              {
                unint64_t v361 = (char *)sub_5714((uint64_t)(v165 + 414), v360);
                unint64_t v167 = (char *)v165[413];
                unint64_t v356 = (char *)v165[412];
              }
              else
              {
                unint64_t v361 = 0;
              }
              unint64_t v424 = &v361[8 * v357];
              *(void *)unint64_t v424 = v166;
              unint64_t v169 = v424 + 8;
              while (v167 != v356)
              {
                uint64_t v425 = *((void *)v167 - 1);
                v167 -= 8;
                *((void *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[412] = v424;
              v165[413] = v169;
              v165[414] = &v361[8 * v360];
              if (v356) {
                operator delete(v356);
              }
            }
            else
            {
              *(void *)unint64_t v167 = v166;
              unint64_t v169 = v167 + 8;
            }
            v165[413] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1716F8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v103 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v102 = *v103;
    uint64_t v104 = (char *)v103[1] - (char *)*v103;
    if (v104)
    {
      unint64_t v105 = v104 >> 2;
      if (v105 <= 1) {
        unint64_t v105 = 1;
      }
      do
      {
        int v106 = *v102++;
        switch(v106)
        {
          case 'C':
            uint64_t v107 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2392);
            goto LABEL_140;
          case 'D':
            uint64_t v107 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2416);
            goto LABEL_140;
          case 'E':
            uint64_t v107 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2440);
            goto LABEL_140;
          case 'F':
            uint64_t v107 = (*(void *)(a1[3] + 32) >> 33) & 0x7FFFLL;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2464);
            goto LABEL_140;
          case 'G':
            uint64_t v107 = *(void *)(a1[3] + 32) & 0x1FFFFFFFFLL;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2488);
            goto LABEL_140;
          case 'H':
            uint64_t v107 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2512);
            goto LABEL_140;
          case 'I':
            uint64_t v107 = *(unsigned int *)(a1[3] + 24);
            unint64_t v108 = (void *)(*(void *)a1[2] + 2536);
LABEL_140:
            *(void *)(*v108 - 8) += v107;
            break;
          default:
            break;
        }
        --v105;
      }
      while (v105);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'C':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v12 = (char *)v10[299];
            unint64_t v13 = v10[300];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v46 = (char *)v10[298];
              uint64_t v47 = (v12 - v46) >> 3;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v48 = v13 - (void)v46;
              unint64_t v49 = (uint64_t)(v13 - (void)v46) >> 2;
              if (v49 <= v47 + 1) {
                unint64_t v49 = v47 + 1;
              }
              if (v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v49;
              }
              if (v50)
              {
                uint64_t v51 = (char *)sub_5714((uint64_t)(v10 + 300), v50);
                unint64_t v12 = (char *)v10[299];
                uint64_t v46 = (char *)v10[298];
              }
              else
              {
                uint64_t v51 = 0;
              }
              unint64_t v88 = &v51[8 * v47];
              *(void *)unint64_t v88 = v11;
              unint64_t v14 = v88 + 8;
              while (v12 != v46)
              {
                uint64_t v89 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v88 - 1) = v89;
                v88 -= 8;
              }
              v10[298] = v88;
              v10[299] = v14;
              v10[300] = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[299] = v14;
            break;
          case 'D':
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v17 = (char *)v15[302];
            unint64_t v18 = v15[303];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v52 = (char *)v15[301];
              uint64_t v53 = (v17 - v52) >> 3;
              if ((unint64_t)(v53 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v54 = v18 - (void)v52;
              unint64_t v55 = (uint64_t)(v18 - (void)v52) >> 2;
              if (v55 <= v53 + 1) {
                unint64_t v55 = v53 + 1;
              }
              if (v54 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v55;
              }
              if (v56)
              {
                unint64_t v57 = (char *)sub_5714((uint64_t)(v15 + 303), v56);
                uint64_t v17 = (char *)v15[302];
                unint64_t v52 = (char *)v15[301];
              }
              else
              {
                unint64_t v57 = 0;
              }
              unint64_t v90 = &v57[8 * v53];
              *(void *)unint64_t v90 = v16;
              unint64_t v19 = v90 + 8;
              while (v17 != v52)
              {
                uint64_t v91 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v90 - 1) = v91;
                v90 -= 8;
              }
              v15[301] = v90;
              v15[302] = v19;
              v15[303] = &v57[8 * v56];
              if (v52) {
                operator delete(v52);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[302] = v19;
            break;
          case 'E':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            uint64_t v22 = (char *)v20[305];
            unint64_t v23 = v20[306];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v58 = (char *)v20[304];
              uint64_t v59 = (v22 - v58) >> 3;
              if ((unint64_t)(v59 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v60 = v23 - (void)v58;
              unint64_t v61 = (uint64_t)(v23 - (void)v58) >> 2;
              if (v61 <= v59 + 1) {
                unint64_t v61 = v59 + 1;
              }
              if (v60 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v61;
              }
              if (v62)
              {
                unint64_t v63 = (char *)sub_5714((uint64_t)(v20 + 306), v62);
                uint64_t v22 = (char *)v20[305];
                unint64_t v58 = (char *)v20[304];
              }
              else
              {
                unint64_t v63 = 0;
              }
              uint64_t v92 = &v63[8 * v59];
              *(void *)uint64_t v92 = v21;
              unint64_t v24 = v92 + 8;
              while (v22 != v58)
              {
                uint64_t v93 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v92 - 1) = v93;
                v92 -= 8;
              }
              v20[304] = v92;
              v20[305] = v24;
              v20[306] = &v63[8 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[305] = v24;
            break;
          case 'F':
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = (*(void *)(a1[3] + 32) >> 33) & 0x7FFFLL;
            uint64_t v27 = (uint64_t *)v25[308];
            unint64_t v28 = v25[309];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v64 = (uint64_t *)v25[307];
              uint64_t v65 = v27 - v64;
              if ((unint64_t)(v65 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v66 = v28 - (void)v64;
              unint64_t v67 = (uint64_t)(v28 - (void)v64) >> 2;
              if (v67 <= v65 + 1) {
                unint64_t v67 = v65 + 1;
              }
              if (v66 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v68 = v67;
              }
              if (v68)
              {
                unint64_t v69 = (char *)sub_5714((uint64_t)(v25 + 309), v68);
                uint64_t v27 = (uint64_t *)v25[308];
                unint64_t v64 = (uint64_t *)v25[307];
              }
              else
              {
                unint64_t v69 = 0;
              }
              uint64_t v94 = (uint64_t *)&v69[8 * v65];
              *uint64_t v94 = v26;
              unint64_t v29 = v94 + 1;
              while (v27 != v64)
              {
                uint64_t v95 = *--v27;
                *--uint64_t v94 = v95;
              }
              v25[307] = v94;
              v25[308] = v29;
              v25[309] = &v69[8 * v68];
              if (v64) {
                operator delete(v64);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[308] = v29;
            break;
          case 'G':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(void *)(a1[3] + 32) & 0x1FFFFFFFFLL;
            unint64_t v32 = (uint64_t *)v30[311];
            unint64_t v33 = v30[312];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v70 = (uint64_t *)v30[310];
              uint64_t v71 = v32 - v70;
              if ((unint64_t)(v71 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v72 = v33 - (void)v70;
              unint64_t v73 = (uint64_t)(v33 - (void)v70) >> 2;
              if (v73 <= v71 + 1) {
                unint64_t v73 = v71 + 1;
              }
              if (v72 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v73;
              }
              if (v74)
              {
                uint64_t v75 = (char *)sub_5714((uint64_t)(v30 + 312), v74);
                unint64_t v32 = (uint64_t *)v30[311];
                uint64_t v70 = (uint64_t *)v30[310];
              }
              else
              {
                uint64_t v75 = 0;
              }
              uint64_t v96 = (uint64_t *)&v75[8 * v71];
              *uint64_t v96 = v31;
              unint64_t v34 = v96 + 1;
              while (v32 != v70)
              {
                uint64_t v97 = *--v32;
                *--uint64_t v96 = v97;
              }
              v30[310] = v96;
              v30[311] = v34;
              v30[312] = &v75[8 * v74];
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              uint64_t *v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[311] = v34;
            break;
          case 'H':
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            uint64_t v37 = (char *)v35[314];
            unint64_t v38 = v35[315];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v76 = (char *)v35[313];
              uint64_t v77 = (v37 - v76) >> 3;
              if ((unint64_t)(v77 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v78 = v38 - (void)v76;
              unint64_t v79 = (uint64_t)(v38 - (void)v76) >> 2;
              if (v79 <= v77 + 1) {
                unint64_t v79 = v77 + 1;
              }
              if (v78 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v79;
              }
              if (v80)
              {
                uint64_t v81 = (char *)sub_5714((uint64_t)(v35 + 315), v80);
                uint64_t v37 = (char *)v35[314];
                uint64_t v76 = (char *)v35[313];
              }
              else
              {
                uint64_t v81 = 0;
              }
              unint64_t v98 = &v81[8 * v77];
              *(void *)unint64_t v98 = v36;
              unint64_t v39 = v98 + 8;
              while (v37 != v76)
              {
                uint64_t v99 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v98 - 1) = v99;
                v98 -= 8;
              }
              v35[313] = v98;
              v35[314] = v39;
              v35[315] = &v81[8 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[314] = v39;
            break;
          case 'I':
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned int *)(a1[3] + 24);
            unint64_t v43 = *(char **)(*(void *)v40 + 2536);
            unint64_t v44 = *(void *)(*(void *)v40 + 2544);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v82 = (char *)v41[316];
              uint64_t v83 = (v43 - v82) >> 3;
              if ((unint64_t)(v83 + 1) >> 61) {
LABEL_144:
              }
                sub_566C();
              unint64_t v84 = v44 - (void)v82;
              unint64_t v85 = (uint64_t)(v44 - (void)v82) >> 2;
              if (v85 <= v83 + 1) {
                unint64_t v85 = v83 + 1;
              }
              if (v84 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v85;
              }
              if (v86)
              {
                unint64_t v87 = (char *)sub_5714((uint64_t)(v41 + 318), v86);
                unint64_t v43 = (char *)v41[317];
                unint64_t v82 = (char *)v41[316];
              }
              else
              {
                unint64_t v87 = 0;
              }
              uint64_t v100 = &v87[8 * v83];
              *(void *)uint64_t v100 = v42;
              unint64_t v45 = v100 + 8;
              while (v43 != v82)
              {
                uint64_t v101 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v100 - 1) = v101;
                v100 -= 8;
              }
              v41[316] = v100;
              v41[317] = v45;
              v41[318] = &v87[8 * v86];
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *(void *)unint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[317] = v45;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_171E60(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v38 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v37 = *v38;
    uint64_t v39 = (char *)v38[1] - (char *)*v38;
    if (!v39) {
      goto LABEL_54;
    }
    unint64_t v40 = v39 >> 2;
    if (v40 <= 1) {
      unint64_t v40 = 1;
    }
    while (1)
    {
      int v42 = *v37++;
      int v41 = v42;
      if (v42 == 66) {
        break;
      }
      if (v41 == 65)
      {
        unint64_t v43 = (_WORD *)(a1[3] + 26);
        unint64_t v44 = (void *)(*(void *)a1[2] + 2344);
LABEL_52:
        *(void *)(*v44 - 8) += *v43 & 0x7FFF;
      }
      if (!--v40) {
        goto LABEL_54;
      }
    }
    unint64_t v43 = (_WORD *)(a1[3] + 24);
    unint64_t v44 = (void *)(*(void *)a1[2] + 2368);
    goto LABEL_52;
  }
  if (*a2) {
    return;
  }
  int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
  uint64_t v6 = v5[1] - *v5;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 2;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    do
    {
      int v10 = *(_DWORD *)(*v5 + 4 * v7);
      if (v10 == 66)
      {
        uint64_t v16 = *(void **)a1[2];
        uint64_t v17 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
        unint64_t v18 = (char *)v16[296];
        unint64_t v19 = v16[297];
        if ((unint64_t)v18 >= v19)
        {
          uint64_t v27 = (char *)v16[295];
          uint64_t v28 = (v18 - v27) >> 3;
          if ((unint64_t)(v28 + 1) >> 61) {
LABEL_56:
          }
            sub_566C();
          unint64_t v29 = v19 - (void)v27;
          unint64_t v30 = (uint64_t)(v19 - (void)v27) >> 2;
          if (v30 <= v28 + 1) {
            unint64_t v30 = v28 + 1;
          }
          if (v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31)
          {
            unint64_t v32 = (char *)sub_5714((uint64_t)(v16 + 297), v31);
            unint64_t v18 = (char *)v16[296];
            uint64_t v27 = (char *)v16[295];
          }
          else
          {
            unint64_t v32 = 0;
          }
          unint64_t v35 = &v32[8 * v28];
          *(void *)unint64_t v35 = v17;
          uint64_t v20 = v35 + 8;
          while (v18 != v27)
          {
            uint64_t v36 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v35 - 1) = v36;
            v35 -= 8;
          }
          v16[295] = v35;
          v16[296] = v20;
          v16[297] = &v32[8 * v31];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v17;
          uint64_t v20 = v18 + 8;
        }
        v16[296] = v20;
      }
      else if (v10 == 65)
      {
        uint64_t v11 = *(void **)a1[2];
        uint64_t v12 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
        unint64_t v13 = (char *)v11[293];
        unint64_t v14 = v11[294];
        if ((unint64_t)v13 >= v14)
        {
          uint64_t v21 = (char *)v11[292];
          uint64_t v22 = (v13 - v21) >> 3;
          if ((unint64_t)(v22 + 1) >> 61) {
            goto LABEL_56;
          }
          unint64_t v23 = v14 - (void)v21;
          unint64_t v24 = (uint64_t)(v14 - (void)v21) >> 2;
          if (v24 <= v22 + 1) {
            unint64_t v24 = v22 + 1;
          }
          if (v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            uint64_t v26 = (char *)sub_5714((uint64_t)(v11 + 294), v25);
            unint64_t v13 = (char *)v11[293];
            uint64_t v21 = (char *)v11[292];
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v33 = &v26[8 * v22];
          *(void *)unint64_t v33 = v12;
          uint64_t v15 = v33 + 8;
          while (v13 != v21)
          {
            uint64_t v34 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v33 - 1) = v34;
            v33 -= 8;
          }
          v11[292] = v33;
          v11[293] = v15;
          v11[294] = &v26[8 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)unint64_t v13 = v12;
          uint64_t v15 = v13 + 8;
        }
        v11[293] = v15;
      }
      ++v7;
    }
    while (v7 != v9);
  }
LABEL_54:
  *a2 = 1;
}

void sub_172128(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v144 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v143 = *v144;
    uint64_t v145 = (char *)v144[1] - (char *)*v144;
    if (v145)
    {
      unint64_t v146 = v145 >> 2;
      if (v146 <= 1) {
        unint64_t v146 = 1;
      }
      do
      {
        int v147 = *v143++;
        switch(v147)
        {
          case 134:
            uint64_t v148 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v149 = (void *)(*(void *)a1[2] + 4000);
            goto LABEL_194;
          case 135:
            uint64_t v148 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            unint64_t v149 = (void *)(*(void *)a1[2] + 4024);
            goto LABEL_194;
          case 136:
            uint64_t v148 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v149 = (void *)(*(void *)a1[2] + 4048);
            goto LABEL_194;
          case 137:
            uint64_t v148 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            unint64_t v149 = (void *)(*(void *)a1[2] + 4072);
            goto LABEL_194;
          case 138:
            uint64_t v148 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            unint64_t v149 = (void *)(*(void *)a1[2] + 4096);
            goto LABEL_194;
          case 139:
            uint64_t v148 = *(unsigned __int16 *)(a1[3] + 46);
            unint64_t v149 = (void *)(*(void *)a1[2] + 4120);
            goto LABEL_194;
          case 140:
            uint64_t v148 = *(unsigned __int16 *)(a1[3] + 44);
            unint64_t v149 = (void *)(*(void *)a1[2] + 4144);
            goto LABEL_194;
          case 141:
            uint64_t v148 = *(unsigned __int16 *)(a1[3] + 28);
            unint64_t v149 = (void *)(*(void *)a1[2] + 4168);
            goto LABEL_194;
          case 142:
            uint64_t v148 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            unint64_t v149 = (void *)(*(void *)a1[2] + 4192);
            goto LABEL_194;
          case 143:
            uint64_t v148 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            unint64_t v149 = (void *)(*(void *)a1[2] + 4216);
LABEL_194:
            *(void *)(*v149 - 8) += v148;
            break;
          default:
            break;
        }
        --v146;
      }
      while (v146);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x86:
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v12 = (char *)v10[500];
            unint64_t v13 = v10[501];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v63 = (char *)v10[499];
              uint64_t v64 = (v12 - v63) >> 3;
              if ((unint64_t)(v64 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v65 = v13 - (void)v63;
              unint64_t v66 = (uint64_t)(v13 - (void)v63) >> 2;
              if (v66 <= v64 + 1) {
                unint64_t v66 = v64 + 1;
              }
              if (v65 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v67 = v66;
              }
              if (v67)
              {
                unint64_t v68 = (char *)sub_5714((uint64_t)(v10 + 501), v67);
                uint64_t v12 = (char *)v10[500];
                unint64_t v63 = (char *)v10[499];
              }
              else
              {
                unint64_t v68 = 0;
              }
              unint64_t v123 = &v68[8 * v64];
              *(void *)unint64_t v123 = v11;
              unint64_t v14 = v123 + 8;
              while (v12 != v63)
              {
                uint64_t v124 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v123 - 1) = v124;
                v123 -= 8;
              }
              v10[499] = v123;
              v10[500] = v14;
              v10[501] = &v68[8 * v67];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[500] = v14;
            break;
          case 0x87:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[503];
            unint64_t v18 = v15[504];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v69 = (uint64_t *)v15[502];
              uint64_t v70 = v17 - v69;
              if ((unint64_t)(v70 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v71 = v18 - (void)v69;
              unint64_t v72 = (uint64_t)(v18 - (void)v69) >> 2;
              if (v72 <= v70 + 1) {
                unint64_t v72 = v70 + 1;
              }
              if (v71 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v72;
              }
              if (v73)
              {
                unint64_t v74 = (char *)sub_5714((uint64_t)(v15 + 504), v73);
                uint64_t v17 = (uint64_t *)v15[503];
                unint64_t v69 = (uint64_t *)v15[502];
              }
              else
              {
                unint64_t v74 = 0;
              }
              unint64_t v125 = (uint64_t *)&v74[8 * v70];
              *unint64_t v125 = v16;
              unint64_t v19 = v125 + 1;
              while (v17 != v69)
              {
                uint64_t v126 = *--v17;
                *--unint64_t v125 = v126;
              }
              v15[502] = v125;
              v15[503] = v19;
              v15[504] = &v74[8 * v73];
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[503] = v19;
            break;
          case 0x88:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v22 = (char *)v20[506];
            unint64_t v23 = v20[507];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v75 = (char *)v20[505];
              uint64_t v76 = (v22 - v75) >> 3;
              if ((unint64_t)(v76 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v77 = v23 - (void)v75;
              unint64_t v78 = (uint64_t)(v23 - (void)v75) >> 2;
              if (v78 <= v76 + 1) {
                unint64_t v78 = v76 + 1;
              }
              if (v77 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v78;
              }
              if (v79)
              {
                unint64_t v80 = (char *)sub_5714((uint64_t)(v20 + 507), v79);
                uint64_t v22 = (char *)v20[506];
                uint64_t v75 = (char *)v20[505];
              }
              else
              {
                unint64_t v80 = 0;
              }
              unint64_t v127 = &v80[8 * v76];
              *(void *)unint64_t v127 = v21;
              unint64_t v24 = v127 + 8;
              while (v22 != v75)
              {
                uint64_t v128 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v127 - 1) = v128;
                v127 -= 8;
              }
              v20[505] = v127;
              v20[506] = v24;
              v20[507] = &v80[8 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[506] = v24;
            break;
          case 0x89:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            uint64_t v27 = (uint64_t *)v25[509];
            unint64_t v28 = v25[510];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v81 = (uint64_t *)v25[508];
              uint64_t v82 = v27 - v81;
              if ((unint64_t)(v82 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v83 = v28 - (void)v81;
              unint64_t v84 = (uint64_t)(v28 - (void)v81) >> 2;
              if (v84 <= v82 + 1) {
                unint64_t v84 = v82 + 1;
              }
              if (v83 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v85 = v84;
              }
              if (v85)
              {
                unint64_t v86 = (char *)sub_5714((uint64_t)(v25 + 510), v85);
                uint64_t v27 = (uint64_t *)v25[509];
                uint64_t v81 = (uint64_t *)v25[508];
              }
              else
              {
                unint64_t v86 = 0;
              }
              uint64_t v129 = (uint64_t *)&v86[8 * v82];
              *uint64_t v129 = v26;
              unint64_t v29 = v129 + 1;
              while (v27 != v81)
              {
                uint64_t v130 = *--v27;
                *--uint64_t v129 = v130;
              }
              v25[508] = v129;
              v25[509] = v29;
              v25[510] = &v86[8 * v85];
              if (v81) {
                operator delete(v81);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[509] = v29;
            break;
          case 0x8A:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            unint64_t v32 = (uint64_t *)v30[512];
            unint64_t v33 = v30[513];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v87 = (uint64_t *)v30[511];
              uint64_t v88 = v32 - v87;
              if ((unint64_t)(v88 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v89 = v33 - (void)v87;
              unint64_t v90 = (uint64_t)(v33 - (void)v87) >> 2;
              if (v90 <= v88 + 1) {
                unint64_t v90 = v88 + 1;
              }
              if (v89 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v90;
              }
              if (v91)
              {
                uint64_t v92 = (char *)sub_5714((uint64_t)(v30 + 513), v91);
                unint64_t v32 = (uint64_t *)v30[512];
                unint64_t v87 = (uint64_t *)v30[511];
              }
              else
              {
                uint64_t v92 = 0;
              }
              uint64_t v131 = (uint64_t *)&v92[8 * v88];
              *uint64_t v131 = v31;
              uint64_t v34 = v131 + 1;
              while (v32 != v87)
              {
                uint64_t v132 = *--v32;
                *--uint64_t v131 = v132;
              }
              v30[511] = v131;
              v30[512] = v34;
              v30[513] = &v92[8 * v91];
              if (v87) {
                operator delete(v87);
              }
            }
            else
            {
              uint64_t *v32 = v31;
              uint64_t v34 = v32 + 1;
            }
            v30[512] = v34;
            break;
          case 0x8B:
            uint64_t v35 = a1[2];
            uint64_t v36 = *(void **)v35;
            uint64_t v37 = *(unsigned __int16 *)(a1[3] + 46);
            unint64_t v38 = *(char **)(*(void *)v35 + 4120);
            unint64_t v39 = *(void *)(*(void *)v35 + 4128);
            if ((unint64_t)v38 >= v39)
            {
              uint64_t v93 = (char *)v36[514];
              uint64_t v94 = (v38 - v93) >> 3;
              if ((unint64_t)(v94 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v95 = v39 - (void)v93;
              unint64_t v96 = (uint64_t)(v39 - (void)v93) >> 2;
              if (v96 <= v94 + 1) {
                unint64_t v96 = v94 + 1;
              }
              if (v95 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v96;
              }
              if (v97)
              {
                unint64_t v98 = (char *)sub_5714((uint64_t)(v36 + 516), v97);
                unint64_t v38 = (char *)v36[515];
                uint64_t v93 = (char *)v36[514];
              }
              else
              {
                unint64_t v98 = 0;
              }
              unint64_t v133 = &v98[8 * v94];
              *(void *)unint64_t v133 = v37;
              unint64_t v40 = v133 + 8;
              while (v38 != v93)
              {
                uint64_t v134 = *((void *)v38 - 1);
                v38 -= 8;
                *((void *)v133 - 1) = v134;
                v133 -= 8;
              }
              v36[514] = v133;
              v36[515] = v40;
              v36[516] = &v98[8 * v97];
              if (v93) {
                operator delete(v93);
              }
            }
            else
            {
              *(void *)unint64_t v38 = v37;
              unint64_t v40 = v38 + 8;
            }
            v36[515] = v40;
            break;
          case 0x8C:
            uint64_t v41 = a1[2];
            int v42 = *(void **)v41;
            uint64_t v43 = *(unsigned __int16 *)(a1[3] + 44);
            unint64_t v44 = *(char **)(*(void *)v41 + 4144);
            unint64_t v45 = *(void *)(*(void *)v41 + 4152);
            if ((unint64_t)v44 >= v45)
            {
              uint64_t v99 = (char *)v42[517];
              uint64_t v100 = (v44 - v99) >> 3;
              if ((unint64_t)(v100 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v101 = v45 - (void)v99;
              unint64_t v102 = (uint64_t)(v45 - (void)v99) >> 2;
              if (v102 <= v100 + 1) {
                unint64_t v102 = v100 + 1;
              }
              if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v102;
              }
              if (v103)
              {
                uint64_t v104 = (char *)sub_5714((uint64_t)(v42 + 519), v103);
                unint64_t v44 = (char *)v42[518];
                uint64_t v99 = (char *)v42[517];
              }
              else
              {
                uint64_t v104 = 0;
              }
              uint64_t v135 = &v104[8 * v100];
              *(void *)uint64_t v135 = v43;
              uint64_t v46 = v135 + 8;
              while (v44 != v99)
              {
                uint64_t v136 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v135 - 1) = v136;
                v135 -= 8;
              }
              v42[517] = v135;
              v42[518] = v46;
              v42[519] = &v104[8 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *(void *)unint64_t v44 = v43;
              uint64_t v46 = v44 + 8;
            }
            v42[518] = v46;
            break;
          case 0x8D:
            uint64_t v47 = a1[2];
            unint64_t v48 = *(void **)v47;
            uint64_t v49 = *(unsigned __int16 *)(a1[3] + 28);
            unint64_t v50 = *(char **)(*(void *)v47 + 4168);
            unint64_t v51 = *(void *)(*(void *)v47 + 4176);
            if ((unint64_t)v50 >= v51)
            {
              unint64_t v105 = (char *)v48[520];
              uint64_t v106 = (v50 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v107 = v51 - (void)v105;
              unint64_t v108 = (uint64_t)(v51 - (void)v105) >> 2;
              if (v108 <= v106 + 1) {
                unint64_t v108 = v106 + 1;
              }
              if (v107 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109)
              {
                uint64_t v110 = (char *)sub_5714((uint64_t)(v48 + 522), v109);
                unint64_t v50 = (char *)v48[521];
                unint64_t v105 = (char *)v48[520];
              }
              else
              {
                uint64_t v110 = 0;
              }
              unint64_t v137 = &v110[8 * v106];
              *(void *)unint64_t v137 = v49;
              unint64_t v52 = v137 + 8;
              while (v50 != v105)
              {
                uint64_t v138 = *((void *)v50 - 1);
                v50 -= 8;
                *((void *)v137 - 1) = v138;
                v137 -= 8;
              }
              v48[520] = v137;
              v48[521] = v52;
              v48[522] = &v110[8 * v109];
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *(void *)unint64_t v50 = v49;
              unint64_t v52 = v50 + 8;
            }
            v48[521] = v52;
            break;
          case 0x8E:
            uint64_t v53 = *(void **)a1[2];
            uint64_t v54 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            unint64_t v55 = (uint64_t *)v53[524];
            unint64_t v56 = v53[525];
            if ((unint64_t)v55 >= v56)
            {
              uint64_t v111 = (uint64_t *)v53[523];
              uint64_t v112 = v55 - v111;
              if ((unint64_t)(v112 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v113 = v56 - (void)v111;
              unint64_t v114 = (uint64_t)(v56 - (void)v111) >> 2;
              if (v114 <= v112 + 1) {
                unint64_t v114 = v112 + 1;
              }
              if (v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v114;
              }
              if (v115)
              {
                uint64_t v116 = (char *)sub_5714((uint64_t)(v53 + 525), v115);
                unint64_t v55 = (uint64_t *)v53[524];
                uint64_t v111 = (uint64_t *)v53[523];
              }
              else
              {
                uint64_t v116 = 0;
              }
              unint64_t v139 = (uint64_t *)&v116[8 * v112];
              *unint64_t v139 = v54;
              unint64_t v57 = v139 + 1;
              while (v55 != v111)
              {
                uint64_t v140 = *--v55;
                *--unint64_t v139 = v140;
              }
              v53[523] = v139;
              v53[524] = v57;
              v53[525] = &v116[8 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              *unint64_t v55 = v54;
              unint64_t v57 = v55 + 1;
            }
            v53[524] = v57;
            break;
          case 0x8F:
            unint64_t v58 = *(void **)a1[2];
            uint64_t v59 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            unint64_t v60 = (uint64_t *)v58[527];
            unint64_t v61 = v58[528];
            if ((unint64_t)v60 >= v61)
            {
              uint64_t v117 = (uint64_t *)v58[526];
              uint64_t v118 = v60 - v117;
              if ((unint64_t)(v118 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v119 = v61 - (void)v117;
              unint64_t v120 = (uint64_t)(v61 - (void)v117) >> 2;
              if (v120 <= v118 + 1) {
                unint64_t v120 = v118 + 1;
              }
              if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v120;
              }
              if (v121)
              {
                uint64_t v122 = (char *)sub_5714((uint64_t)(v58 + 528), v121);
                unint64_t v60 = (uint64_t *)v58[527];
                uint64_t v117 = (uint64_t *)v58[526];
              }
              else
              {
                uint64_t v122 = 0;
              }
              uint64_t v141 = (uint64_t *)&v122[8 * v118];
              *uint64_t v141 = v59;
              unint64_t v62 = v141 + 1;
              while (v60 != v117)
              {
                uint64_t v142 = *--v60;
                *--uint64_t v141 = v142;
              }
              v58[526] = v141;
              v58[527] = v62;
              v58[528] = &v122[8 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *unint64_t v60 = v59;
              unint64_t v62 = v60 + 1;
            }
            v58[527] = v62;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_172B60(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v329 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v328 = *v329;
    uint64_t v330 = (char *)v329[1] - (char *)*v329;
    if (v330)
    {
      unint64_t v331 = v330 >> 2;
      if (v331 <= 1) {
        unint64_t v331 = 1;
      }
      do
      {
        int v332 = *v328++;
        switch(v332)
        {
          case 106:
            unint64_t v333 = (unint64_t)*(unsigned int *)(a1[3] + 40) >> 17;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3328);
            goto LABEL_446;
          case 107:
            unint64_t v333 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3352);
            goto LABEL_446;
          case 108:
            unint64_t v333 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3376);
            goto LABEL_446;
          case 109:
            unint64_t v333 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3400);
            goto LABEL_446;
          case 110:
            unint64_t v333 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3424);
            goto LABEL_446;
          case 111:
            unint64_t v333 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3448);
            goto LABEL_446;
          case 112:
            unint64_t v333 = *(unsigned __int16 *)(a1[3] + 60);
            unint64_t v334 = (void *)(*(void *)a1[2] + 3472);
            goto LABEL_446;
          case 113:
            unint64_t v333 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3496);
            goto LABEL_446;
          case 114:
            unint64_t v333 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3520);
            goto LABEL_446;
          case 115:
            unint64_t v333 = *(_DWORD *)(a1[3] + 88) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3544);
            goto LABEL_446;
          case 116:
            unint64_t v333 = *(_DWORD *)(a1[3] + 80) & 0x7FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3568);
            goto LABEL_446;
          case 117:
            unint64_t v333 = *(_DWORD *)(a1[3] + 72) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3592);
            goto LABEL_446;
          case 118:
            unint64_t v333 = *(_DWORD *)(a1[3] + 76) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3616);
            goto LABEL_446;
          case 119:
            unint64_t v333 = *(unsigned __int16 *)(a1[3] + 64);
            unint64_t v334 = (void *)(*(void *)a1[2] + 3640);
            goto LABEL_446;
          case 120:
            unint64_t v333 = *(unsigned __int16 *)(a1[3] + 66);
            unint64_t v334 = (void *)(*(void *)a1[2] + 3664);
            goto LABEL_446;
          case 121:
            unint64_t v333 = *(unsigned __int16 *)(a1[3] + 84);
            unint64_t v334 = (void *)(*(void *)a1[2] + 3688);
            goto LABEL_446;
          case 122:
            unint64_t v333 = *(unsigned __int16 *)(a1[3] + 86);
            unint64_t v334 = (void *)(*(void *)a1[2] + 3712);
            goto LABEL_446;
          case 123:
            unint64_t v333 = *(_DWORD *)(a1[3] + 56) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3736);
            goto LABEL_446;
          case 124:
            unint64_t v333 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3760);
            goto LABEL_446;
          case 125:
            unint64_t v333 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3784);
            goto LABEL_446;
          case 126:
            unint64_t v333 = *(unsigned __int16 *)(a1[3] + 62);
            unint64_t v334 = (void *)(*(void *)a1[2] + 3808);
            goto LABEL_446;
          case 127:
            unint64_t v333 = (*(unsigned __int16 *)(a1[3] + 68) | (*(unsigned __int8 *)(a1[3] + 70) << 16)) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3832);
            goto LABEL_446;
          case 128:
            unint64_t v333 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3856);
            goto LABEL_446;
          case 129:
            unint64_t v333 = *(_DWORD *)(a1[3] + 36) & 0x1FFFF;
            unint64_t v334 = (void *)(*(void *)a1[2] + 3880);
LABEL_446:
            *(void *)(*v334 - 8) += v333;
            break;
          default:
            break;
        }
        --v331;
      }
      while (v331);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x6A:
            int v10 = *(void **)a1[2];
            unint64_t v11 = (unint64_t)*(unsigned int *)(a1[3] + 40) >> 17;
            uint64_t v12 = (unint64_t *)v10[416];
            unint64_t v13 = v10[417];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v136 = (unint64_t *)v10[415];
              uint64_t v137 = v12 - v136;
              if ((unint64_t)(v137 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v138 = v13 - (void)v136;
              unint64_t v139 = (uint64_t)(v13 - (void)v136) >> 2;
              if (v139 <= v137 + 1) {
                unint64_t v139 = v137 + 1;
              }
              if (v138 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v139;
              }
              if (v140)
              {
                uint64_t v141 = (char *)sub_5714((uint64_t)(v10 + 417), v140);
                uint64_t v12 = (unint64_t *)v10[416];
                uint64_t v136 = (unint64_t *)v10[415];
              }
              else
              {
                uint64_t v141 = 0;
              }
              unint64_t v280 = (unint64_t *)&v141[8 * v137];
              unint64_t *v280 = v11;
              unint64_t v14 = v280 + 1;
              while (v12 != v136)
              {
                unint64_t v281 = *--v12;
                *--unint64_t v280 = v281;
              }
              v10[415] = v280;
              v10[416] = v14;
              v10[417] = &v141[8 * v140];
              if (v136) {
                operator delete(v136);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[416] = v14;
            break;
          case 0x6B:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[419];
            unint64_t v18 = v15[420];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v142 = (uint64_t *)v15[418];
              uint64_t v143 = v17 - v142;
              if ((unint64_t)(v143 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v144 = v18 - (void)v142;
              unint64_t v145 = (uint64_t)(v18 - (void)v142) >> 2;
              if (v145 <= v143 + 1) {
                unint64_t v145 = v143 + 1;
              }
              if (v144 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v145;
              }
              if (v146)
              {
                int v147 = (char *)sub_5714((uint64_t)(v15 + 420), v146);
                uint64_t v17 = (uint64_t *)v15[419];
                uint64_t v142 = (uint64_t *)v15[418];
              }
              else
              {
                int v147 = 0;
              }
              unint64_t v282 = (uint64_t *)&v147[8 * v143];
              *unint64_t v282 = v16;
              unint64_t v19 = v282 + 1;
              while (v17 != v142)
              {
                uint64_t v283 = *--v17;
                *--unint64_t v282 = v283;
              }
              v15[418] = v282;
              v15[419] = v19;
              v15[420] = &v147[8 * v146];
              if (v142) {
                operator delete(v142);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[419] = v19;
            break;
          case 0x6C:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v22 = (char *)v20[422];
            unint64_t v23 = v20[423];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v148 = (char *)v20[421];
              uint64_t v149 = (v22 - v148) >> 3;
              if ((unint64_t)(v149 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v150 = v23 - (void)v148;
              unint64_t v151 = (uint64_t)(v23 - (void)v148) >> 2;
              if (v151 <= v149 + 1) {
                unint64_t v151 = v149 + 1;
              }
              if (v150 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v152 = v151;
              }
              if (v152)
              {
                unint64_t v153 = (char *)sub_5714((uint64_t)(v20 + 423), v152);
                uint64_t v22 = (char *)v20[422];
                uint64_t v148 = (char *)v20[421];
              }
              else
              {
                unint64_t v153 = 0;
              }
              unint64_t v284 = &v153[8 * v149];
              *(void *)unint64_t v284 = v21;
              unint64_t v24 = v284 + 8;
              while (v22 != v148)
              {
                uint64_t v285 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v284 - 1) = v285;
                v284 -= 8;
              }
              v20[421] = v284;
              v20[422] = v24;
              v20[423] = &v153[8 * v152];
              if (v148) {
                operator delete(v148);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[422] = v24;
            break;
          case 0x6D:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v27 = (char *)v25[425];
            unint64_t v28 = v25[426];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v154 = (char *)v25[424];
              uint64_t v155 = (v27 - v154) >> 3;
              if ((unint64_t)(v155 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v156 = v28 - (void)v154;
              unint64_t v157 = (uint64_t)(v28 - (void)v154) >> 2;
              if (v157 <= v155 + 1) {
                unint64_t v157 = v155 + 1;
              }
              if (v156 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v157;
              }
              if (v158)
              {
                uint64_t v159 = (char *)sub_5714((uint64_t)(v25 + 426), v158);
                uint64_t v27 = (char *)v25[425];
                uint64_t v154 = (char *)v25[424];
              }
              else
              {
                uint64_t v159 = 0;
              }
              unint64_t v286 = &v159[8 * v155];
              *(void *)unint64_t v286 = v26;
              unint64_t v29 = v286 + 8;
              while (v27 != v154)
              {
                uint64_t v287 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v286 - 1) = v287;
                v286 -= 8;
              }
              v25[424] = v286;
              v25[425] = v29;
              v25[426] = &v159[8 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[425] = v29;
            break;
          case 0x6E:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v32 = (char *)v30[428];
            unint64_t v33 = v30[429];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v160 = (char *)v30[427];
              uint64_t v161 = (v32 - v160) >> 3;
              if ((unint64_t)(v161 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v162 = v33 - (void)v160;
              unint64_t v163 = (uint64_t)(v33 - (void)v160) >> 2;
              if (v163 <= v161 + 1) {
                unint64_t v163 = v161 + 1;
              }
              if (v162 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v164 = v163;
              }
              if (v164)
              {
                uint64_t v165 = (char *)sub_5714((uint64_t)(v30 + 429), v164);
                unint64_t v32 = (char *)v30[428];
                uint64_t v160 = (char *)v30[427];
              }
              else
              {
                uint64_t v165 = 0;
              }
              unint64_t v288 = &v165[8 * v161];
              *(void *)unint64_t v288 = v31;
              uint64_t v34 = v288 + 8;
              while (v32 != v160)
              {
                uint64_t v289 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v288 - 1) = v289;
                v288 -= 8;
              }
              v30[427] = v288;
              v30[428] = v34;
              v30[429] = &v165[8 * v164];
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              uint64_t v34 = v32 + 8;
            }
            v30[428] = v34;
            break;
          case 0x6F:
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v37 = (char *)v35[431];
            unint64_t v38 = v35[432];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v166 = (char *)v35[430];
              uint64_t v167 = (v37 - v166) >> 3;
              if ((unint64_t)(v167 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v168 = v38 - (void)v166;
              unint64_t v169 = (uint64_t)(v38 - (void)v166) >> 2;
              if (v169 <= v167 + 1) {
                unint64_t v169 = v167 + 1;
              }
              if (v168 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v170 = v169;
              }
              if (v170)
              {
                uint64_t v171 = (char *)sub_5714((uint64_t)(v35 + 432), v170);
                uint64_t v37 = (char *)v35[431];
                uint64_t v166 = (char *)v35[430];
              }
              else
              {
                uint64_t v171 = 0;
              }
              unint64_t v290 = &v171[8 * v167];
              *(void *)unint64_t v290 = v36;
              unint64_t v39 = v290 + 8;
              while (v37 != v166)
              {
                uint64_t v291 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v290 - 1) = v291;
                v290 -= 8;
              }
              v35[430] = v290;
              v35[431] = v39;
              v35[432] = &v171[8 * v170];
              if (v166) {
                operator delete(v166);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[431] = v39;
            break;
          case 0x70:
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned __int16 *)(a1[3] + 60);
            uint64_t v43 = *(char **)(*(void *)v40 + 3472);
            unint64_t v44 = *(void *)(*(void *)v40 + 3480);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v172 = (char *)v41[433];
              uint64_t v173 = (v43 - v172) >> 3;
              if ((unint64_t)(v173 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v174 = v44 - (void)v172;
              unint64_t v175 = (uint64_t)(v44 - (void)v172) >> 2;
              if (v175 <= v173 + 1) {
                unint64_t v175 = v173 + 1;
              }
              if (v174 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v176 = v175;
              }
              if (v176)
              {
                uint64_t v177 = (char *)sub_5714((uint64_t)(v41 + 435), v176);
                uint64_t v43 = (char *)v41[434];
                unint64_t v172 = (char *)v41[433];
              }
              else
              {
                uint64_t v177 = 0;
              }
              unint64_t v292 = &v177[8 * v173];
              *(void *)unint64_t v292 = v42;
              unint64_t v45 = v292 + 8;
              while (v43 != v172)
              {
                uint64_t v293 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v292 - 1) = v293;
                v292 -= 8;
              }
              v41[433] = v292;
              v41[434] = v45;
              v41[435] = &v177[8 * v176];
              if (v172) {
                operator delete(v172);
              }
            }
            else
            {
              *(void *)uint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[434] = v45;
            break;
          case 0x71:
            uint64_t v46 = *(void **)a1[2];
            uint64_t v47 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            unint64_t v48 = (uint64_t *)v46[437];
            unint64_t v49 = v46[438];
            if ((unint64_t)v48 >= v49)
            {
              unint64_t v178 = (uint64_t *)v46[436];
              uint64_t v179 = v48 - v178;
              if ((unint64_t)(v179 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v180 = v49 - (void)v178;
              unint64_t v181 = (uint64_t)(v49 - (void)v178) >> 2;
              if (v181 <= v179 + 1) {
                unint64_t v181 = v179 + 1;
              }
              if (v180 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v182 = v181;
              }
              if (v182)
              {
                uint64_t v183 = (char *)sub_5714((uint64_t)(v46 + 438), v182);
                unint64_t v48 = (uint64_t *)v46[437];
                unint64_t v178 = (uint64_t *)v46[436];
              }
              else
              {
                uint64_t v183 = 0;
              }
              unint64_t v294 = (uint64_t *)&v183[8 * v179];
              *unint64_t v294 = v47;
              unint64_t v50 = v294 + 1;
              while (v48 != v178)
              {
                uint64_t v295 = *--v48;
                *--unint64_t v294 = v295;
              }
              v46[436] = v294;
              v46[437] = v50;
              v46[438] = &v183[8 * v182];
              if (v178) {
                operator delete(v178);
              }
            }
            else
            {
              *unint64_t v48 = v47;
              unint64_t v50 = v48 + 1;
            }
            v46[437] = v50;
            break;
          case 0x72:
            unint64_t v51 = *(void **)a1[2];
            uint64_t v52 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            uint64_t v53 = (uint64_t *)v51[440];
            unint64_t v54 = v51[441];
            if ((unint64_t)v53 >= v54)
            {
              unint64_t v184 = (uint64_t *)v51[439];
              uint64_t v185 = v53 - v184;
              if ((unint64_t)(v185 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v186 = v54 - (void)v184;
              unint64_t v187 = (uint64_t)(v54 - (void)v184) >> 2;
              if (v187 <= v185 + 1) {
                unint64_t v187 = v185 + 1;
              }
              if (v186 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v188 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v188 = v187;
              }
              if (v188)
              {
                uint64_t v189 = (char *)sub_5714((uint64_t)(v51 + 441), v188);
                uint64_t v53 = (uint64_t *)v51[440];
                unint64_t v184 = (uint64_t *)v51[439];
              }
              else
              {
                uint64_t v189 = 0;
              }
              unint64_t v296 = (uint64_t *)&v189[8 * v185];
              *unint64_t v296 = v52;
              unint64_t v55 = v296 + 1;
              while (v53 != v184)
              {
                uint64_t v297 = *--v53;
                *--unint64_t v296 = v297;
              }
              v51[439] = v296;
              v51[440] = v55;
              v51[441] = &v189[8 * v188];
              if (v184) {
                operator delete(v184);
              }
            }
            else
            {
              *uint64_t v53 = v52;
              unint64_t v55 = v53 + 1;
            }
            v51[440] = v55;
            break;
          case 0x73:
            unint64_t v56 = *(void **)a1[2];
            uint64_t v57 = *(_DWORD *)(a1[3] + 88) & 0x1FFFFLL;
            unint64_t v58 = (uint64_t *)v56[443];
            unint64_t v59 = v56[444];
            if ((unint64_t)v58 >= v59)
            {
              unint64_t v190 = (uint64_t *)v56[442];
              uint64_t v191 = v58 - v190;
              if ((unint64_t)(v191 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v192 = v59 - (void)v190;
              unint64_t v193 = (uint64_t)(v59 - (void)v190) >> 2;
              if (v193 <= v191 + 1) {
                unint64_t v193 = v191 + 1;
              }
              if (v192 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v194 = v193;
              }
              if (v194)
              {
                uint64_t v195 = (char *)sub_5714((uint64_t)(v56 + 444), v194);
                unint64_t v58 = (uint64_t *)v56[443];
                unint64_t v190 = (uint64_t *)v56[442];
              }
              else
              {
                uint64_t v195 = 0;
              }
              unint64_t v298 = (uint64_t *)&v195[8 * v191];
              uint64_t *v298 = v57;
              unint64_t v60 = v298 + 1;
              while (v58 != v190)
              {
                uint64_t v299 = *--v58;
                *--unint64_t v298 = v299;
              }
              v56[442] = v298;
              v56[443] = v60;
              v56[444] = &v195[8 * v194];
              if (v190) {
                operator delete(v190);
              }
            }
            else
            {
              *unint64_t v58 = v57;
              unint64_t v60 = v58 + 1;
            }
            v56[443] = v60;
            break;
          case 0x74:
            unint64_t v61 = *(void **)a1[2];
            uint64_t v62 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            unint64_t v63 = (uint64_t *)v61[446];
            unint64_t v64 = v61[447];
            if ((unint64_t)v63 >= v64)
            {
              unint64_t v196 = (uint64_t *)v61[445];
              uint64_t v197 = v63 - v196;
              if ((unint64_t)(v197 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v198 = v64 - (void)v196;
              unint64_t v199 = (uint64_t)(v64 - (void)v196) >> 2;
              if (v199 <= v197 + 1) {
                unint64_t v199 = v197 + 1;
              }
              if (v198 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v200 = v199;
              }
              if (v200)
              {
                uint64_t v201 = (char *)sub_5714((uint64_t)(v61 + 447), v200);
                unint64_t v63 = (uint64_t *)v61[446];
                unint64_t v196 = (uint64_t *)v61[445];
              }
              else
              {
                uint64_t v201 = 0;
              }
              unint64_t v300 = (uint64_t *)&v201[8 * v197];
              *unint64_t v300 = v62;
              unint64_t v65 = v300 + 1;
              while (v63 != v196)
              {
                uint64_t v301 = *--v63;
                *--unint64_t v300 = v301;
              }
              v61[445] = v300;
              v61[446] = v65;
              v61[447] = &v201[8 * v200];
              if (v196) {
                operator delete(v196);
              }
            }
            else
            {
              *unint64_t v63 = v62;
              unint64_t v65 = v63 + 1;
            }
            v61[446] = v65;
            break;
          case 0x75:
            unint64_t v66 = *(void **)a1[2];
            uint64_t v67 = *(_DWORD *)(a1[3] + 72) & 0x1FFFFLL;
            unint64_t v68 = (uint64_t *)v66[449];
            unint64_t v69 = v66[450];
            if ((unint64_t)v68 >= v69)
            {
              unint64_t v202 = (uint64_t *)v66[448];
              uint64_t v203 = v68 - v202;
              if ((unint64_t)(v203 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v204 = v69 - (void)v202;
              unint64_t v205 = (uint64_t)(v69 - (void)v202) >> 2;
              if (v205 <= v203 + 1) {
                unint64_t v205 = v203 + 1;
              }
              if (v204 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v206 = v205;
              }
              if (v206)
              {
                uint64_t v207 = (char *)sub_5714((uint64_t)(v66 + 450), v206);
                unint64_t v68 = (uint64_t *)v66[449];
                unint64_t v202 = (uint64_t *)v66[448];
              }
              else
              {
                uint64_t v207 = 0;
              }
              int v302 = (uint64_t *)&v207[8 * v203];
              *int v302 = v67;
              uint64_t v70 = v302 + 1;
              while (v68 != v202)
              {
                uint64_t v303 = *--v68;
                *--int v302 = v303;
              }
              v66[448] = v302;
              v66[449] = v70;
              v66[450] = &v207[8 * v206];
              if (v202) {
                operator delete(v202);
              }
            }
            else
            {
              *unint64_t v68 = v67;
              uint64_t v70 = v68 + 1;
            }
            v66[449] = v70;
            break;
          case 0x76:
            unint64_t v71 = *(void **)a1[2];
            uint64_t v72 = *(_DWORD *)(a1[3] + 76) & 0x1FFFFLL;
            unint64_t v73 = (uint64_t *)v71[452];
            unint64_t v74 = v71[453];
            if ((unint64_t)v73 >= v74)
            {
              unint64_t v208 = (uint64_t *)v71[451];
              uint64_t v209 = v73 - v208;
              if ((unint64_t)(v209 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v210 = v74 - (void)v208;
              unint64_t v211 = (uint64_t)(v74 - (void)v208) >> 2;
              if (v211 <= v209 + 1) {
                unint64_t v211 = v209 + 1;
              }
              if (v210 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v212 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v212 = v211;
              }
              if (v212)
              {
                uint64_t v213 = (char *)sub_5714((uint64_t)(v71 + 453), v212);
                unint64_t v73 = (uint64_t *)v71[452];
                unint64_t v208 = (uint64_t *)v71[451];
              }
              else
              {
                uint64_t v213 = 0;
              }
              unint64_t v304 = (uint64_t *)&v213[8 * v209];
              *unint64_t v304 = v72;
              uint64_t v75 = v304 + 1;
              while (v73 != v208)
              {
                uint64_t v305 = *--v73;
                *--unint64_t v304 = v305;
              }
              v71[451] = v304;
              v71[452] = v75;
              v71[453] = &v213[8 * v212];
              if (v208) {
                operator delete(v208);
              }
            }
            else
            {
              *unint64_t v73 = v72;
              uint64_t v75 = v73 + 1;
            }
            v71[452] = v75;
            break;
          case 0x77:
            uint64_t v76 = a1[2];
            unint64_t v77 = *(void **)v76;
            uint64_t v78 = *(unsigned __int16 *)(a1[3] + 64);
            unint64_t v79 = *(char **)(*(void *)v76 + 3640);
            unint64_t v80 = *(void *)(*(void *)v76 + 3648);
            if ((unint64_t)v79 >= v80)
            {
              unint64_t v214 = (char *)v77[454];
              uint64_t v215 = (v79 - v214) >> 3;
              if ((unint64_t)(v215 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v216 = v80 - (void)v214;
              unint64_t v217 = (uint64_t)(v80 - (void)v214) >> 2;
              if (v217 <= v215 + 1) {
                unint64_t v217 = v215 + 1;
              }
              if (v216 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v218 = v217;
              }
              if (v218)
              {
                uint64_t v219 = (char *)sub_5714((uint64_t)(v77 + 456), v218);
                unint64_t v79 = (char *)v77[455];
                unint64_t v214 = (char *)v77[454];
              }
              else
              {
                uint64_t v219 = 0;
              }
              unint64_t v306 = &v219[8 * v215];
              *(void *)unint64_t v306 = v78;
              uint64_t v81 = v306 + 8;
              while (v79 != v214)
              {
                uint64_t v307 = *((void *)v79 - 1);
                v79 -= 8;
                *((void *)v306 - 1) = v307;
                v306 -= 8;
              }
              v77[454] = v306;
              v77[455] = v81;
              v77[456] = &v219[8 * v218];
              if (v214) {
                operator delete(v214);
              }
            }
            else
            {
              *(void *)unint64_t v79 = v78;
              uint64_t v81 = v79 + 8;
            }
            v77[455] = v81;
            break;
          case 0x78:
            uint64_t v82 = a1[2];
            unint64_t v83 = *(void **)v82;
            uint64_t v84 = *(unsigned __int16 *)(a1[3] + 66);
            unint64_t v85 = *(char **)(*(void *)v82 + 3664);
            unint64_t v86 = *(void *)(*(void *)v82 + 3672);
            if ((unint64_t)v85 >= v86)
            {
              unint64_t v220 = (char *)v83[457];
              uint64_t v221 = (v85 - v220) >> 3;
              if ((unint64_t)(v221 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v222 = v86 - (void)v220;
              unint64_t v223 = (uint64_t)(v86 - (void)v220) >> 2;
              if (v223 <= v221 + 1) {
                unint64_t v223 = v221 + 1;
              }
              if (v222 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v224 = v223;
              }
              if (v224)
              {
                uint64_t v225 = (char *)sub_5714((uint64_t)(v83 + 459), v224);
                unint64_t v85 = (char *)v83[458];
                unint64_t v220 = (char *)v83[457];
              }
              else
              {
                uint64_t v225 = 0;
              }
              unint64_t v308 = &v225[8 * v221];
              *(void *)unint64_t v308 = v84;
              unint64_t v87 = v308 + 8;
              while (v85 != v220)
              {
                uint64_t v309 = *((void *)v85 - 1);
                v85 -= 8;
                *((void *)v308 - 1) = v309;
                v308 -= 8;
              }
              v83[457] = v308;
              v83[458] = v87;
              v83[459] = &v225[8 * v224];
              if (v220) {
                operator delete(v220);
              }
            }
            else
            {
              *(void *)unint64_t v85 = v84;
              unint64_t v87 = v85 + 8;
            }
            v83[458] = v87;
            break;
          case 0x79:
            uint64_t v88 = a1[2];
            unint64_t v89 = *(void **)v88;
            uint64_t v90 = *(unsigned __int16 *)(a1[3] + 84);
            unint64_t v91 = *(char **)(*(void *)v88 + 3688);
            unint64_t v92 = *(void *)(*(void *)v88 + 3696);
            if ((unint64_t)v91 >= v92)
            {
              unint64_t v226 = (char *)v89[460];
              uint64_t v227 = (v91 - v226) >> 3;
              if ((unint64_t)(v227 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v228 = v92 - (void)v226;
              unint64_t v229 = (uint64_t)(v92 - (void)v226) >> 2;
              if (v229 <= v227 + 1) {
                unint64_t v229 = v227 + 1;
              }
              if (v228 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v230 = v229;
              }
              if (v230)
              {
                uint64_t v231 = (char *)sub_5714((uint64_t)(v89 + 462), v230);
                unint64_t v91 = (char *)v89[461];
                unint64_t v226 = (char *)v89[460];
              }
              else
              {
                uint64_t v231 = 0;
              }
              unint64_t v310 = &v231[8 * v227];
              *(void *)unint64_t v310 = v90;
              uint64_t v93 = v310 + 8;
              while (v91 != v226)
              {
                uint64_t v311 = *((void *)v91 - 1);
                v91 -= 8;
                *((void *)v310 - 1) = v311;
                v310 -= 8;
              }
              v89[460] = v310;
              v89[461] = v93;
              v89[462] = &v231[8 * v230];
              if (v226) {
                operator delete(v226);
              }
            }
            else
            {
              *(void *)unint64_t v91 = v90;
              uint64_t v93 = v91 + 8;
            }
            v89[461] = v93;
            break;
          case 0x7A:
            uint64_t v94 = a1[2];
            unint64_t v95 = *(void **)v94;
            uint64_t v96 = *(unsigned __int16 *)(a1[3] + 86);
            unint64_t v97 = *(char **)(*(void *)v94 + 3712);
            unint64_t v98 = *(void *)(*(void *)v94 + 3720);
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v232 = (char *)v95[463];
              uint64_t v233 = (v97 - v232) >> 3;
              if ((unint64_t)(v233 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v234 = v98 - (void)v232;
              unint64_t v235 = (uint64_t)(v98 - (void)v232) >> 2;
              if (v235 <= v233 + 1) {
                unint64_t v235 = v233 + 1;
              }
              if (v234 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v236 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v236 = v235;
              }
              if (v236)
              {
                uint64_t v237 = (char *)sub_5714((uint64_t)(v95 + 465), v236);
                unint64_t v97 = (char *)v95[464];
                unint64_t v232 = (char *)v95[463];
              }
              else
              {
                uint64_t v237 = 0;
              }
              unint64_t v312 = &v237[8 * v233];
              *(void *)unint64_t v312 = v96;
              uint64_t v99 = v312 + 8;
              while (v97 != v232)
              {
                uint64_t v313 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v312 - 1) = v313;
                v312 -= 8;
              }
              v95[463] = v312;
              v95[464] = v99;
              v95[465] = &v237[8 * v236];
              if (v232) {
                operator delete(v232);
              }
            }
            else
            {
              *(void *)unint64_t v97 = v96;
              uint64_t v99 = v97 + 8;
            }
            v95[464] = v99;
            break;
          case 0x7B:
            uint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_DWORD *)(a1[3] + 56) & 0x1FFFFLL;
            unint64_t v102 = (uint64_t *)v100[467];
            unint64_t v103 = v100[468];
            if ((unint64_t)v102 >= v103)
            {
              unint64_t v238 = (uint64_t *)v100[466];
              uint64_t v239 = v102 - v238;
              if ((unint64_t)(v239 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v240 = v103 - (void)v238;
              unint64_t v241 = (uint64_t)(v103 - (void)v238) >> 2;
              if (v241 <= v239 + 1) {
                unint64_t v241 = v239 + 1;
              }
              if (v240 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v242 = v241;
              }
              if (v242)
              {
                uint64_t v243 = (char *)sub_5714((uint64_t)(v100 + 468), v242);
                unint64_t v102 = (uint64_t *)v100[467];
                unint64_t v238 = (uint64_t *)v100[466];
              }
              else
              {
                uint64_t v243 = 0;
              }
              uint64_t v314 = (uint64_t *)&v243[8 * v239];
              *uint64_t v314 = v101;
              uint64_t v104 = v314 + 1;
              while (v102 != v238)
              {
                uint64_t v315 = *--v102;
                *--uint64_t v314 = v315;
              }
              v100[466] = v314;
              v100[467] = v104;
              v100[468] = &v243[8 * v242];
              if (v238) {
                operator delete(v238);
              }
            }
            else
            {
              *unint64_t v102 = v101;
              uint64_t v104 = v102 + 1;
            }
            v100[467] = v104;
            break;
          case 0x7C:
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            unint64_t v107 = (char *)v105[470];
            unint64_t v108 = v105[471];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v244 = (char *)v105[469];
              uint64_t v245 = (v107 - v244) >> 3;
              if ((unint64_t)(v245 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v246 = v108 - (void)v244;
              unint64_t v247 = (uint64_t)(v108 - (void)v244) >> 2;
              if (v247 <= v245 + 1) {
                unint64_t v247 = v245 + 1;
              }
              if (v246 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v248 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v248 = v247;
              }
              if (v248)
              {
                uint64_t v249 = (char *)sub_5714((uint64_t)(v105 + 471), v248);
                unint64_t v107 = (char *)v105[470];
                unint64_t v244 = (char *)v105[469];
              }
              else
              {
                uint64_t v249 = 0;
              }
              unint64_t v316 = &v249[8 * v245];
              *(void *)unint64_t v316 = v106;
              unint64_t v109 = v316 + 8;
              while (v107 != v244)
              {
                uint64_t v317 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v316 - 1) = v317;
                v316 -= 8;
              }
              v105[469] = v316;
              v105[470] = v109;
              v105[471] = &v249[8 * v248];
              if (v244) {
                operator delete(v244);
              }
            }
            else
            {
              *(void *)unint64_t v107 = v106;
              unint64_t v109 = v107 + 8;
            }
            v105[470] = v109;
            break;
          case 0x7D:
            uint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            uint64_t v112 = (char *)v110[473];
            unint64_t v113 = v110[474];
            if ((unint64_t)v112 >= v113)
            {
              unint64_t v250 = (char *)v110[472];
              uint64_t v251 = (v112 - v250) >> 3;
              if ((unint64_t)(v251 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v252 = v113 - (void)v250;
              unint64_t v253 = (uint64_t)(v113 - (void)v250) >> 2;
              if (v253 <= v251 + 1) {
                unint64_t v253 = v251 + 1;
              }
              if (v252 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v254 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v254 = v253;
              }
              if (v254)
              {
                uint64_t v255 = (char *)sub_5714((uint64_t)(v110 + 474), v254);
                uint64_t v112 = (char *)v110[473];
                unint64_t v250 = (char *)v110[472];
              }
              else
              {
                uint64_t v255 = 0;
              }
              unint64_t v318 = &v255[8 * v251];
              *(void *)unint64_t v318 = v111;
              unint64_t v114 = v318 + 8;
              while (v112 != v250)
              {
                uint64_t v319 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v318 - 1) = v319;
                v318 -= 8;
              }
              v110[472] = v318;
              v110[473] = v114;
              v110[474] = &v255[8 * v254];
              if (v250) {
                operator delete(v250);
              }
            }
            else
            {
              *(void *)uint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[473] = v114;
            break;
          case 0x7E:
            uint64_t v115 = a1[2];
            uint64_t v116 = *(void **)v115;
            uint64_t v117 = *(unsigned __int16 *)(a1[3] + 62);
            uint64_t v118 = *(char **)(*(void *)v115 + 3808);
            unint64_t v119 = *(void *)(*(void *)v115 + 3816);
            if ((unint64_t)v118 >= v119)
            {
              unint64_t v256 = (char *)v116[475];
              uint64_t v257 = (v118 - v256) >> 3;
              if ((unint64_t)(v257 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v258 = v119 - (void)v256;
              unint64_t v259 = (uint64_t)(v119 - (void)v256) >> 2;
              if (v259 <= v257 + 1) {
                unint64_t v259 = v257 + 1;
              }
              if (v258 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v260 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v260 = v259;
              }
              if (v260)
              {
                uint64_t v261 = (char *)sub_5714((uint64_t)(v116 + 477), v260);
                uint64_t v118 = (char *)v116[476];
                unint64_t v256 = (char *)v116[475];
              }
              else
              {
                uint64_t v261 = 0;
              }
              unint64_t v320 = &v261[8 * v257];
              *(void *)unint64_t v320 = v117;
              unint64_t v120 = v320 + 8;
              while (v118 != v256)
              {
                uint64_t v321 = *((void *)v118 - 1);
                v118 -= 8;
                *((void *)v320 - 1) = v321;
                v320 -= 8;
              }
              v116[475] = v320;
              v116[476] = v120;
              v116[477] = &v261[8 * v260];
              if (v256) {
                operator delete(v256);
              }
            }
            else
            {
              *(void *)uint64_t v118 = v117;
              unint64_t v120 = v118 + 8;
            }
            v116[476] = v120;
            break;
          case 0x7F:
            unint64_t v121 = *(void **)a1[2];
            uint64_t v122 = (*(unsigned __int16 *)(a1[3] + 68) | (*(unsigned __int8 *)(a1[3] + 70) << 16)) & 0x1FFFFLL;
            unint64_t v123 = (uint64_t *)v121[479];
            unint64_t v124 = v121[480];
            if ((unint64_t)v123 >= v124)
            {
              unint64_t v262 = (uint64_t *)v121[478];
              uint64_t v263 = v123 - v262;
              if ((unint64_t)(v263 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v264 = v124 - (void)v262;
              unint64_t v265 = (uint64_t)(v124 - (void)v262) >> 2;
              if (v265 <= v263 + 1) {
                unint64_t v265 = v263 + 1;
              }
              if (v264 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v266 = v265;
              }
              if (v266)
              {
                uint64_t v267 = (char *)sub_5714((uint64_t)(v121 + 480), v266);
                unint64_t v123 = (uint64_t *)v121[479];
                unint64_t v262 = (uint64_t *)v121[478];
              }
              else
              {
                uint64_t v267 = 0;
              }
              unint64_t v322 = (uint64_t *)&v267[8 * v263];
              *unint64_t v322 = v122;
              unint64_t v125 = v322 + 1;
              while (v123 != v262)
              {
                uint64_t v323 = *--v123;
                *--unint64_t v322 = v323;
              }
              v121[478] = v322;
              v121[479] = v125;
              v121[480] = &v267[8 * v266];
              if (v262) {
                operator delete(v262);
              }
            }
            else
            {
              *unint64_t v123 = v122;
              unint64_t v125 = v123 + 1;
            }
            v121[479] = v125;
            break;
          case 0x80:
            uint64_t v126 = *(void **)a1[2];
            uint64_t v127 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            uint64_t v128 = (uint64_t *)v126[482];
            unint64_t v129 = v126[483];
            if ((unint64_t)v128 >= v129)
            {
              unint64_t v268 = (uint64_t *)v126[481];
              uint64_t v269 = v128 - v268;
              if ((unint64_t)(v269 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v270 = v129 - (void)v268;
              unint64_t v271 = (uint64_t)(v129 - (void)v268) >> 2;
              if (v271 <= v269 + 1) {
                unint64_t v271 = v269 + 1;
              }
              if (v270 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v272 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v272 = v271;
              }
              if (v272)
              {
                uint64_t v273 = (char *)sub_5714((uint64_t)(v126 + 483), v272);
                uint64_t v128 = (uint64_t *)v126[482];
                unint64_t v268 = (uint64_t *)v126[481];
              }
              else
              {
                uint64_t v273 = 0;
              }
              unint64_t v324 = (uint64_t *)&v273[8 * v269];
              *unint64_t v324 = v127;
              uint64_t v130 = v324 + 1;
              while (v128 != v268)
              {
                uint64_t v325 = *--v128;
                *--unint64_t v324 = v325;
              }
              v126[481] = v324;
              v126[482] = v130;
              v126[483] = &v273[8 * v272];
              if (v268) {
                operator delete(v268);
              }
            }
            else
            {
              *uint64_t v128 = v127;
              uint64_t v130 = v128 + 1;
            }
            v126[482] = v130;
            break;
          case 0x81:
            uint64_t v131 = *(void **)a1[2];
            uint64_t v132 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFLL;
            unint64_t v133 = (uint64_t *)v131[485];
            unint64_t v134 = v131[486];
            if ((unint64_t)v133 >= v134)
            {
              unint64_t v274 = (uint64_t *)v131[484];
              uint64_t v275 = v133 - v274;
              if ((unint64_t)(v275 + 1) >> 61) {
LABEL_450:
              }
                sub_566C();
              unint64_t v276 = v134 - (void)v274;
              unint64_t v277 = (uint64_t)(v134 - (void)v274) >> 2;
              if (v277 <= v275 + 1) {
                unint64_t v277 = v275 + 1;
              }
              if (v276 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v278 = v277;
              }
              if (v278)
              {
                uint64_t v279 = (char *)sub_5714((uint64_t)(v131 + 486), v278);
                unint64_t v133 = (uint64_t *)v131[485];
                unint64_t v274 = (uint64_t *)v131[484];
              }
              else
              {
                uint64_t v279 = 0;
              }
              int v326 = (uint64_t *)&v279[8 * v275];
              *int v326 = v132;
              uint64_t v135 = v326 + 1;
              while (v133 != v274)
              {
                uint64_t v327 = *--v133;
                *--int v326 = v327;
              }
              v131[484] = v326;
              v131[485] = v135;
              v131[486] = &v279[8 * v278];
              if (v274) {
                operator delete(v274);
              }
            }
            else
            {
              *unint64_t v133 = v132;
              uint64_t v135 = v133 + 1;
            }
            v131[485] = v135;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_174190(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v63 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v62 = *v63;
    uint64_t v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      unint64_t v65 = v64 >> 2;
      if (v65 <= 1) {
        unint64_t v65 = 1;
      }
      do
      {
        int v66 = *v62++;
        switch(v66)
        {
          case 130:
            uint64_t v67 = *(_DWORD *)(a1[3] + 32) & 0x7FFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3904);
            goto LABEL_86;
          case 131:
            uint64_t v67 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3928);
            goto LABEL_86;
          case 132:
            uint64_t v67 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3952);
            goto LABEL_86;
          case 133:
            uint64_t v67 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3976);
LABEL_86:
            *(void *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x82:
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            uint64_t v12 = (uint64_t *)v10[488];
            unint64_t v13 = v10[489];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v30 = (uint64_t *)v10[487];
              uint64_t v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v32 = v13 - (void)v30;
              unint64_t v33 = (uint64_t)(v13 - (void)v30) >> 2;
              if (v33 <= v31 + 1) {
                unint64_t v33 = v31 + 1;
              }
              if (v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34)
              {
                uint64_t v35 = (char *)sub_5714((uint64_t)(v10 + 489), v34);
                uint64_t v12 = (uint64_t *)v10[488];
                unint64_t v30 = (uint64_t *)v10[487];
              }
              else
              {
                uint64_t v35 = 0;
              }
              unint64_t v54 = (uint64_t *)&v35[8 * v31];
              *unint64_t v54 = v11;
              unint64_t v14 = v54 + 1;
              while (v12 != v30)
              {
                uint64_t v55 = *--v12;
                *--unint64_t v54 = v55;
              }
              v10[487] = v54;
              v10[488] = v14;
              v10[489] = &v35[8 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[488] = v14;
            break;
          case 0x83:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFFLL;
            uint64_t v17 = (uint64_t *)v15[491];
            unint64_t v18 = v15[492];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v36 = (uint64_t *)v15[490];
              uint64_t v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v38 = v18 - (void)v36;
              unint64_t v39 = (uint64_t)(v18 - (void)v36) >> 2;
              if (v39 <= v37 + 1) {
                unint64_t v39 = v37 + 1;
              }
              if (v38 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v39;
              }
              if (v40)
              {
                uint64_t v41 = (char *)sub_5714((uint64_t)(v15 + 492), v40);
                uint64_t v17 = (uint64_t *)v15[491];
                uint64_t v36 = (uint64_t *)v15[490];
              }
              else
              {
                uint64_t v41 = 0;
              }
              unint64_t v56 = (uint64_t *)&v41[8 * v37];
              *unint64_t v56 = v16;
              unint64_t v19 = v56 + 1;
              while (v17 != v36)
              {
                uint64_t v57 = *--v17;
                *--unint64_t v56 = v57;
              }
              v15[490] = v56;
              v15[491] = v19;
              v15[492] = &v41[8 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[491] = v19;
            break;
          case 0x84:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
            uint64_t v22 = (uint64_t *)v20[494];
            unint64_t v23 = v20[495];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v42 = (uint64_t *)v20[493];
              uint64_t v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v44 = v23 - (void)v42;
              unint64_t v45 = (uint64_t)(v23 - (void)v42) >> 2;
              if (v45 <= v43 + 1) {
                unint64_t v45 = v43 + 1;
              }
              if (v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v45;
              }
              if (v46)
              {
                uint64_t v47 = (char *)sub_5714((uint64_t)(v20 + 495), v46);
                uint64_t v22 = (uint64_t *)v20[494];
                uint64_t v42 = (uint64_t *)v20[493];
              }
              else
              {
                uint64_t v47 = 0;
              }
              unint64_t v58 = (uint64_t *)&v47[8 * v43];
              *unint64_t v58 = v21;
              unint64_t v24 = v58 + 1;
              while (v22 != v42)
              {
                uint64_t v59 = *--v22;
                *--unint64_t v58 = v59;
              }
              v20[493] = v58;
              v20[494] = v24;
              v20[495] = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[494] = v24;
            break;
          case 0x85:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFFLL;
            uint64_t v27 = (uint64_t *)v25[497];
            unint64_t v28 = v25[498];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v48 = (uint64_t *)v25[496];
              uint64_t v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61) {
LABEL_90:
              }
                sub_566C();
              unint64_t v50 = v28 - (void)v48;
              unint64_t v51 = (uint64_t)(v28 - (void)v48) >> 2;
              if (v51 <= v49 + 1) {
                unint64_t v51 = v49 + 1;
              }
              if (v50 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v51;
              }
              if (v52)
              {
                uint64_t v53 = (char *)sub_5714((uint64_t)(v25 + 498), v52);
                uint64_t v27 = (uint64_t *)v25[497];
                unint64_t v48 = (uint64_t *)v25[496];
              }
              else
              {
                uint64_t v53 = 0;
              }
              unint64_t v60 = (uint64_t *)&v53[8 * v49];
              *unint64_t v60 = v26;
              unint64_t v29 = v60 + 1;
              while (v27 != v48)
              {
                uint64_t v61 = *--v27;
                *--unint64_t v60 = v61;
              }
              v25[496] = v60;
              v25[497] = v29;
              v25[498] = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[497] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_174660(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v141 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v140 = *v141;
    uint64_t v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      unint64_t v143 = v142 >> 2;
      if (v143 <= 1) {
        unint64_t v143 = 1;
      }
      do
      {
        int v144 = *v140++;
        switch(v144)
        {
          case 166:
            unint64_t v145 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4768);
            goto LABEL_194;
          case 167:
            unint64_t v145 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4792);
            goto LABEL_194;
          case 168:
            unint64_t v145 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4816);
            goto LABEL_194;
          case 169:
            unint64_t v145 = ((unint64_t)*(unsigned int *)(a1[3] + 36) >> 13) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4840);
            goto LABEL_194;
          case 170:
            unint64_t v145 = *(_DWORD *)(a1[3] + 36) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4864);
            goto LABEL_194;
          case 171:
            unint64_t v145 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4888);
            goto LABEL_194;
          case 172:
            unint64_t v145 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4912);
            goto LABEL_194;
          case 173:
            unint64_t v145 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4936);
            goto LABEL_194;
          case 174:
            unint64_t v145 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4960);
            goto LABEL_194;
          case 175:
            unint64_t v145 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4984);
LABEL_194:
            *(void *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xA6:
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            uint64_t v12 = (char *)v10[596];
            unint64_t v13 = v10[597];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v60 = (char *)v10[595];
              uint64_t v61 = (v12 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v62 = v13 - (void)v60;
              unint64_t v63 = (uint64_t)(v13 - (void)v60) >> 2;
              if (v63 <= v61 + 1) {
                unint64_t v63 = v61 + 1;
              }
              if (v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_5714((uint64_t)(v10 + 597), v64);
                uint64_t v12 = (char *)v10[596];
                unint64_t v60 = (char *)v10[595];
              }
              else
              {
                unint64_t v65 = 0;
              }
              unint64_t v120 = &v65[8 * v61];
              *(void *)unint64_t v120 = v11;
              unint64_t v14 = v120 + 8;
              while (v12 != v60)
              {
                uint64_t v121 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v120 - 1) = v121;
                v120 -= 8;
              }
              v10[595] = v120;
              v10[596] = v14;
              v10[597] = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[596] = v14;
            break;
          case 0xA7:
            uint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            uint64_t v17 = (uint64_t *)v15[599];
            unint64_t v18 = v15[600];
            if ((unint64_t)v17 >= v18)
            {
              int v66 = (uint64_t *)v15[598];
              uint64_t v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v68 = v18 - (void)v66;
              unint64_t v69 = (uint64_t)(v18 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                unint64_t v71 = (char *)sub_5714((uint64_t)(v15 + 600), v70);
                uint64_t v17 = (uint64_t *)v15[599];
                int v66 = (uint64_t *)v15[598];
              }
              else
              {
                unint64_t v71 = 0;
              }
              uint64_t v122 = (uint64_t *)&v71[8 * v67];
              *uint64_t v122 = v16;
              unint64_t v19 = v122 + 1;
              while (v17 != v66)
              {
                uint64_t v123 = *--v17;
                *--uint64_t v122 = v123;
              }
              v15[598] = v122;
              v15[599] = v19;
              v15[600] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[599] = v19;
            break;
          case 0xA8:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            uint64_t v22 = (char *)v20[602];
            unint64_t v23 = v20[603];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v72 = (char *)v20[601];
              uint64_t v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v74 = v23 - (void)v72;
              unint64_t v75 = (uint64_t)(v23 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                unint64_t v77 = (char *)sub_5714((uint64_t)(v20 + 603), v76);
                uint64_t v22 = (char *)v20[602];
                uint64_t v72 = (char *)v20[601];
              }
              else
              {
                unint64_t v77 = 0;
              }
              unint64_t v124 = &v77[8 * v73];
              *(void *)unint64_t v124 = v21;
              unint64_t v24 = v124 + 8;
              while (v22 != v72)
              {
                uint64_t v125 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[601] = v124;
              v20[602] = v24;
              v20[603] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[602] = v24;
            break;
          case 0xA9:
            unint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 36) >> 13) & 0x3FFFF;
            uint64_t v27 = (unint64_t *)v25[605];
            unint64_t v28 = v25[606];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v78 = (unint64_t *)v25[604];
              uint64_t v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v80 = v28 - (void)v78;
              unint64_t v81 = (uint64_t)(v28 - (void)v78) >> 2;
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              if (v80 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                unint64_t v83 = (char *)sub_5714((uint64_t)(v25 + 606), v82);
                uint64_t v27 = (unint64_t *)v25[605];
                uint64_t v78 = (unint64_t *)v25[604];
              }
              else
              {
                unint64_t v83 = 0;
              }
              uint64_t v126 = (unint64_t *)&v83[8 * v79];
              *uint64_t v126 = v26;
              unint64_t v29 = v126 + 1;
              while (v27 != v78)
              {
                unint64_t v127 = *--v27;
                *--uint64_t v126 = v127;
              }
              v25[604] = v126;
              v25[605] = v29;
              v25[606] = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[605] = v29;
            break;
          case 0xAA:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 36) & 0x1FFFLL;
            unint64_t v32 = (uint64_t *)v30[608];
            unint64_t v33 = v30[609];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v84 = (uint64_t *)v30[607];
              uint64_t v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v86 = v33 - (void)v84;
              unint64_t v87 = (uint64_t)(v33 - (void)v84) >> 2;
              if (v87 <= v85 + 1) {
                unint64_t v87 = v85 + 1;
              }
              if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_5714((uint64_t)(v30 + 609), v88);
                unint64_t v32 = (uint64_t *)v30[608];
                uint64_t v84 = (uint64_t *)v30[607];
              }
              else
              {
                unint64_t v89 = 0;
              }
              uint64_t v128 = (uint64_t *)&v89[8 * v85];
              *uint64_t v128 = v31;
              unint64_t v34 = v128 + 1;
              while (v32 != v84)
              {
                uint64_t v129 = *--v32;
                *--uint64_t v128 = v129;
              }
              v30[607] = v128;
              v30[608] = v34;
              v30[609] = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              uint64_t *v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[608] = v34;
            break;
          case 0xAB:
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            uint64_t v37 = (uint64_t *)v35[611];
            unint64_t v38 = v35[612];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v90 = (uint64_t *)v35[610];
              uint64_t v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v92 = v38 - (void)v90;
              unint64_t v93 = (uint64_t)(v38 - (void)v90) >> 2;
              if (v93 <= v91 + 1) {
                unint64_t v93 = v91 + 1;
              }
              if (v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_5714((uint64_t)(v35 + 612), v94);
                uint64_t v37 = (uint64_t *)v35[611];
                uint64_t v90 = (uint64_t *)v35[610];
              }
              else
              {
                unint64_t v95 = 0;
              }
              uint64_t v130 = (uint64_t *)&v95[8 * v91];
              *uint64_t v130 = v36;
              unint64_t v39 = v130 + 1;
              while (v37 != v90)
              {
                uint64_t v131 = *--v37;
                *--uint64_t v130 = v131;
              }
              v35[610] = v130;
              v35[611] = v39;
              v35[612] = &v95[8 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *uint64_t v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[611] = v39;
            break;
          case 0xAC:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            uint64_t v42 = (char *)v40[614];
            unint64_t v43 = v40[615];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v96 = (char *)v40[613];
              uint64_t v97 = (v42 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v98 = v43 - (void)v96;
              unint64_t v99 = (uint64_t)(v43 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100)
              {
                uint64_t v101 = (char *)sub_5714((uint64_t)(v40 + 615), v100);
                uint64_t v42 = (char *)v40[614];
                uint64_t v96 = (char *)v40[613];
              }
              else
              {
                uint64_t v101 = 0;
              }
              uint64_t v132 = &v101[8 * v97];
              *(void *)uint64_t v132 = v41;
              unint64_t v44 = v132 + 8;
              while (v42 != v96)
              {
                uint64_t v133 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v132 - 1) = v133;
                v132 -= 8;
              }
              v40[613] = v132;
              v40[614] = v44;
              v40[615] = &v101[8 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[614] = v44;
            break;
          case 0xAD:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            uint64_t v47 = (char *)v45[617];
            unint64_t v48 = v45[618];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v102 = (char *)v45[616];
              uint64_t v103 = (v47 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v104 = v48 - (void)v102;
              unint64_t v105 = (uint64_t)(v48 - (void)v102) >> 2;
              if (v105 <= v103 + 1) {
                unint64_t v105 = v103 + 1;
              }
              if (v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v105;
              }
              if (v106)
              {
                unint64_t v107 = (char *)sub_5714((uint64_t)(v45 + 618), v106);
                uint64_t v47 = (char *)v45[617];
                unint64_t v102 = (char *)v45[616];
              }
              else
              {
                unint64_t v107 = 0;
              }
              unint64_t v134 = &v107[8 * v103];
              *(void *)unint64_t v134 = v46;
              uint64_t v49 = v134 + 8;
              while (v47 != v102)
              {
                uint64_t v135 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v134 - 1) = v135;
                v134 -= 8;
              }
              v45[616] = v134;
              v45[617] = v49;
              v45[618] = &v107[8 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *(void *)uint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[617] = v49;
            break;
          case 0xAE:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            unint64_t v52 = (char *)v50[620];
            unint64_t v53 = v50[621];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v108 = (char *)v50[619];
              uint64_t v109 = (v52 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v110 = v53 - (void)v108;
              unint64_t v111 = (uint64_t)(v53 - (void)v108) >> 2;
              if (v111 <= v109 + 1) {
                unint64_t v111 = v109 + 1;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v112)
              {
                unint64_t v113 = (char *)sub_5714((uint64_t)(v50 + 621), v112);
                unint64_t v52 = (char *)v50[620];
                unint64_t v108 = (char *)v50[619];
              }
              else
              {
                unint64_t v113 = 0;
              }
              uint64_t v136 = &v113[8 * v109];
              *(void *)uint64_t v136 = v51;
              unint64_t v54 = v136 + 8;
              while (v52 != v108)
              {
                uint64_t v137 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v136 - 1) = v137;
                v136 -= 8;
              }
              v50[619] = v136;
              v50[620] = v54;
              v50[621] = &v113[8 * v112];
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              unint64_t v54 = v52 + 8;
            }
            v50[620] = v54;
            break;
          case 0xAF:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            uint64_t v57 = (char *)v55[623];
            unint64_t v58 = v55[624];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v114 = (char *)v55[622];
              uint64_t v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v116 = v58 - (void)v114;
              unint64_t v117 = (uint64_t)(v58 - (void)v114) >> 2;
              if (v117 <= v115 + 1) {
                unint64_t v117 = v115 + 1;
              }
              if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v117;
              }
              if (v118)
              {
                unint64_t v119 = (char *)sub_5714((uint64_t)(v55 + 624), v118);
                uint64_t v57 = (char *)v55[623];
                unint64_t v114 = (char *)v55[622];
              }
              else
              {
                unint64_t v119 = 0;
              }
              unint64_t v138 = &v119[8 * v115];
              *(void *)unint64_t v138 = v56;
              uint64_t v59 = v138 + 8;
              while (v57 != v114)
              {
                uint64_t v139 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v138 - 1) = v139;
                v138 -= 8;
              }
              v55[622] = v138;
              v55[623] = v59;
              v55[624] = &v119[8 * v118];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              uint64_t v59 = v57 + 8;
            }
            v55[623] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1750E8()
{
}

uint64_t sub_1750FC(int a1, char *__s1)
{
  if (!__s1) {
    return 229;
  }
  uint64_t result = strcmp(__s1, "D7642F4CD8A1F1052D8874FFCB84623EEB5AD8DB476AAA36BB13F44E0122717D");
  if (result)
  {
    if (!strcmp(__s1, "ECCE75AB7F80F9519A3E08E3A0EE71610AE67E3B82829786B02D98C09276F560"))
    {
      return 1;
    }
    else if (!strcmp(__s1, "0D43CB377576A411251DB7D5579117D02FC1BB178830D97B5332A806AC122B37"))
    {
      return 2;
    }
    else if (!strcmp(__s1, "9E7E7B3180DA596EBA2925972639C8DC058E97904ADA86E8FA31E691D63CA97B"))
    {
      return 3;
    }
    else if (!strcmp(__s1, "FE4E8A2782700A8DEC84E195627096B91A904FF6F486B78EF381501FB9667E0F"))
    {
      return 4;
    }
    else if (!strcmp(__s1, "35E9B0A78729DBBE416E11951D26DDC657D957CE37E23B41A2915BB6CC8CF792"))
    {
      return 5;
    }
    else if (!strcmp(__s1, "992E7CAEB9808CFC06F5E69E0B80D0ABB3328FC59FA76FED7BB9529EBBC6E484"))
    {
      return 6;
    }
    else if (!strcmp(__s1, "3EBB72814821E8E8DB302E61197BC3AC6B0A02119FCD0C86BCFA54EB1B511AD2"))
    {
      return 7;
    }
    else if (!strcmp(__s1, "F89408CC4F2E499CED47E61E0AFD929E01C44D079ADF0B440EF845B984DE4956"))
    {
      return 8;
    }
    else if (!strcmp(__s1, "0DAB6425F1EAC005798A5E8220F97E433817AADFE2490BD4F4B762C38F20E22B"))
    {
      return 9;
    }
    else if (!strcmp(__s1, "7FD8B674D9FE018B3D64EA31CB94787780CD12317B2764B9BAFB60C975CDC8EB"))
    {
      return 10;
    }
    else if (!strcmp(__s1, "C04589D08BD1AA2481137A423CC2E81C537B75011557AB0EA579F58E489D9981"))
    {
      return 11;
    }
    else if (!strcmp(__s1, "7C3CD59A80673DD0787DF037FB1FB45E0EB635BFDB2554E10CBF5D056FEDAB78"))
    {
      return 12;
    }
    else if (!strcmp(__s1, "E484E42F34BF2E406D25EB38451C67D3C3C9CB9DEB9222C4F5E21E7E6729C787"))
    {
      return 13;
    }
    else if (!strcmp(__s1, "A1CD5E72A4CAD33DD4C2190F293103B9FD8B40FFE76B1A99A195768465964F91"))
    {
      return 14;
    }
    else if (!strcmp(__s1, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53"))
    {
      return 15;
    }
    else if (!strcmp(__s1, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91"))
    {
      return 16;
    }
    else if (!strcmp(__s1, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B"))
    {
      return 17;
    }
    else if (!strcmp(__s1, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC"))
    {
      return 18;
    }
    else if (!strcmp(__s1, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8"))
    {
      return 19;
    }
    else if (!strcmp(__s1, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF"))
    {
      return 20;
    }
    else if (!strcmp(__s1, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0"))
    {
      return 21;
    }
    else if (!strcmp(__s1, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D"))
    {
      return 22;
    }
    else if (!strcmp(__s1, "5D4640C1160E691CF9E1DA7FE475482756D03567716B9856424469B31049A457"))
    {
      return 23;
    }
    else if (!strcmp(__s1, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C"))
    {
      return 24;
    }
    else if (!strcmp(__s1, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E"))
    {
      return 25;
    }
    else if (!strcmp(__s1, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033"))
    {
      return 26;
    }
    else if (!strcmp(__s1, "3AFE7FC24E518305DB9BB516AE4AA6725E13A423016B31BAFEBFD6FA09AFAFCD"))
    {
      return 27;
    }
    else if (!strcmp(__s1, "37C7DEA7C7AC62E48672D62B73746ED032AC86A05AA223DB4F373D44F106CD6A"))
    {
      return 28;
    }
    else if (!strcmp(__s1, "42EA38C66C2CC54A764D5E204FF38F3402542A5F05B7731D549F22D745429051"))
    {
      return 29;
    }
    else if (!strcmp(__s1, "F6D454657EA6A999B3D168C1A68D6592B2F348BA088B279DBF0A992754767224"))
    {
      return 30;
    }
    else if (!strcmp(__s1, "63CA0F7A21417297C42CDF8868259FBCECF5C6A5C1C994C3A1CA5F608179B458"))
    {
      return 31;
    }
    else if (!strcmp(__s1, "75D1CF68BBA66F3E658B115EF614F1449D832863CAF5F46D092488791378897F"))
    {
      return 32;
    }
    else if (!strcmp(__s1, "F4B1ED932C463D5EE2A9E1F0BEC7DDE12141635B8C1BC09662243EA36A1E2ECE"))
    {
      return 33;
    }
    else if (!strcmp(__s1, "511B8B14F417FD34A16CC128C14014AD2B4C5A60B3B053D963C78631DD6B3B89"))
    {
      return 34;
    }
    else if (!strcmp(__s1, "932639B5CA9FD3BE98F2787A2CDE095AAE9CE2D64A911486D12757EFBFD85140"))
    {
      return 35;
    }
    else if (!strcmp(__s1, "09ADF2F2D849AAB1B547CE687B45B30560D5965A6EE176E97CBC14EB63728DE2"))
    {
      return 36;
    }
    else if (!strcmp(__s1, "C2DF6BB1B96D7879744E5D54DEB55C12D7A9ECFF52AF539FC1FA63882B058A70"))
    {
      return 37;
    }
    else if (!strcmp(__s1, "8C96A68570A6DF5B4ABA9577C27042A37A60B8FBD6BC9DE3F909EC683406A5CD"))
    {
      return 38;
    }
    else if (!strcmp(__s1, "7B36DACFCE6FC736238A397E5EF2F7E25BE954A649117EE12A916CE79F75B94A"))
    {
      return 39;
    }
    else if (!strcmp(__s1, "80C734FBB111112ADB288D1CA5E1A6D5381987D38F4DFA08EFE8CC3C5F1CF131"))
    {
      return 40;
    }
    else if (!strcmp(__s1, "3A6B5C3F24147C27899AEB7FF2FE3FB579A0D79BE4AB9BE54E7F31F7AED99F24"))
    {
      return 41;
    }
    else if (!strcmp(__s1, "23C55391915968963B369CFA8F5BE79A370ADD2CB37A32A0C9267269406EC6E8"))
    {
      return 42;
    }
    else if (!strcmp(__s1, "1394031F165B7EE472518C80605434939287CE630C3E2BF45774C422646BDB52"))
    {
      return 43;
    }
    else if (!strcmp(__s1, "B664BC44BBFB5AB784B0240FFB637DC636A9B7CEE13D6D556ED1D4ED56E9DEF8"))
    {
      return 44;
    }
    else if (!strcmp(__s1, "2AD526A49877323714C9104CAF0E3F117082A43D0955315AF0F43F7AADFF2586"))
    {
      return 45;
    }
    else if (!strcmp(__s1, "0559E51C335EC81412374E33F830E804DF39F2FF796E95308A25A8A8BFA0475A"))
    {
      return 46;
    }
    else if (!strcmp(__s1, "656B51D5FF08D489CFD54BA967A44D9FBB3DEE2BEF089EADFF59F0176430773E"))
    {
      return 47;
    }
    else if (!strcmp(__s1, "08E5DC7B9F52DFF7963D2715D3927A1356E247326CAF5C76830A7D7227B991B0"))
    {
      return 48;
    }
    else if (!strcmp(__s1, "97566BDFEF237739AC2EFF164112983D98FCFAC0EE4F30C671D4908D02520208"))
    {
      return 49;
    }
    else if (!strcmp(__s1, "5ABE83ED58C646C0795991EFC53EFAF95AD3FA933AFD23A5181FDC1D4DFDFBA0"))
    {
      return 50;
    }
    else if (!strcmp(__s1, "F7FED94B5F000049299482FDF5F0D7700B1A29309A0313344D1B861FDC715239"))
    {
      return 51;
    }
    else if (!strcmp(__s1, "CD2FFA0725298FE71DCD34C05D62ABC16C9F0A5690297DF5376D65198C5D7890"))
    {
      return 52;
    }
    else if (!strcmp(__s1, "DE73E30C620D682FA8317A0FEB5087A2C63811110674D46B9894D955808CBC9E"))
    {
      return 53;
    }
    else if (!strcmp(__s1, "B1981D6FA7779DA1E867116607CFA5B05E44C5C8D8A9E8AD1906FEF7F8BA1874"))
    {
      return 54;
    }
    else if (!strcmp(__s1, "B942A1DFEF5624B827CF986CC919BB4891C1C421645311F2355CE6766AEBEF2E"))
    {
      return 55;
    }
    else if (!strcmp(__s1, "B2D70BAA5FA87BB6C253C5314B6E833D882783F1E906897B196FCC4D6572D5C6"))
    {
      return 56;
    }
    else if (!strcmp(__s1, "AD07330BE6EF87E08C9E5D058B4CBD9F71C39D7C1B916A834F263B5E7B3DFC43"))
    {
      return 57;
    }
    else if (!strcmp(__s1, "9AD2DE6034B18A80CF5573485FEEE0B7EBF72DF6DD292271C9B412FBDF8037C5"))
    {
      return 58;
    }
    else if (!strcmp(__s1, "2BBC664C4BF8238D5FC7A5376438D13CE61B9EBC1FF8EC52F6F5A80543BEACD4"))
    {
      return 59;
    }
    else if (!strcmp(__s1, "B4E21A931309227166902DC5A3E8BACAE69D267A7E733A61139712AC108C6E4E"))
    {
      return 60;
    }
    else if (!strcmp(__s1, "B0FE94C089261C381766B5366AEB1C6ACBF46BC57B4298D568C5EDFCABE30A8A"))
    {
      return 61;
    }
    else if (!strcmp(__s1, "3EFF071A6AD7AF2F6FD8A87059C9CDD5937E87D8B9B4D215C449748133129BDE"))
    {
      return 62;
    }
    else if (!strcmp(__s1, "0B5AF8D437BA25AB6225EADB7A0FC92659AAB2122AC993E00CFA2F83B0E143B3"))
    {
      return 63;
    }
    else if (!strcmp(__s1, "EE48140733BA4D00D8E6CB099101E0BBB6FDB2F71FC05FC0FEAC8A6CF3100B14"))
    {
      return 64;
    }
    else if (!strcmp(__s1, "152B31D6CDC80AD2A7F1593F1E81074F9FEB957043B213E8537F5C9098DFD449"))
    {
      return 65;
    }
    else if (!strcmp(__s1, "0E8C0AF79B626C37D4BD04D61ACC6B1841B7F784FEF6692E84A2B1971C771CF6"))
    {
      return 66;
    }
    else if (!strcmp(__s1, "12038A812C239440324EDCEB54DA13B6B7D0C4D89F61582F9A4628C4409FAAE6"))
    {
      return 67;
    }
    else if (!strcmp(__s1, "12ADE1668F06776E2CE9CC2CC563E0BD45A5346C6D883D748FD3C132E7EB8A2F"))
    {
      return 68;
    }
    else if (!strcmp(__s1, "D5D2B254E0B808929711EBFC999F2E0F884DB9876C90B056E230E4DD6D3261CE"))
    {
      return 69;
    }
    else if (!strcmp(__s1, "CA5FDEAD1B2DEC16F5B525E9AE3CA7C4EDC163EEE950D7A77A7C5284A607369F"))
    {
      return 70;
    }
    else if (!strcmp(__s1, "28B92DE785184753FAF5508E080CB8FE784D6A5214E5E6382751D52534A72FCE"))
    {
      return 71;
    }
    else if (!strcmp(__s1, "316635C054256728753D20516A98550DBF581EBA16691321F7BBCE3A9177E09D"))
    {
      return 72;
    }
    else if (!strcmp(__s1, "D2D14661D9692EBD5065F06CB4C2AC7DD14339CAEA538D5AFA4A2B5813E87D5D"))
    {
      return 73;
    }
    else if (!strcmp(__s1, "96775CCE99E1AD0C194329938D933579304BAD868B3720C34D20D27536E7AEE7"))
    {
      return 74;
    }
    else if (!strcmp(__s1, "615761368EF9DB43D1A8DF2EF1CC087B17906454F025A1E1C5BB95B022582B9B"))
    {
      return 75;
    }
    else if (!strcmp(__s1, "2A5A81F290FDE6D31DB132DD493737A7252C441023286294F3C77CE48DD4E2F0"))
    {
      return 76;
    }
    else if (!strcmp(__s1, "7262FC4EB2434704063840AB716EF14B50F3A0E5E3457E8EBF9E014325CAE94F"))
    {
      return 77;
    }
    else if (!strcmp(__s1, "A2B9B85B3AADE88EBF43D3DB522C31E6A781700C0112047F72FA920A638A69BE"))
    {
      return 78;
    }
    else if (!strcmp(__s1, "D97205C2B224673AE923C3A7A003D96258A1A774E1C9E3CD513B0706C6657D48"))
    {
      return 79;
    }
    else if (!strcmp(__s1, "0C60DB8A2A73C9B343C4B279EDF24580976BD74BD0294B1AAC17B0A4273D8C28"))
    {
      return 80;
    }
    else if (!strcmp(__s1, "27A93DA3DF54447DCB9F371C54907BEFA8F17B7FA905EDAC2B523C7A0D93A918"))
    {
      return 81;
    }
    else if (!strcmp(__s1, "F98BB9D35C454CA00A884F6B9621A30F2C78A880A96D81B5E661391D74E8455A"))
    {
      return 82;
    }
    else if (!strcmp(__s1, "AC00030F77E6F4E41BF49DC8D7A42C68813DB0C3B652C340B340C01873EB0AB7"))
    {
      return 83;
    }
    else if (!strcmp(__s1, "BA7A33DF7A125E9EE5C1036DD6DADB3B74CC4B9BA9C5C1B235C131E70B7B4E41"))
    {
      return 84;
    }
    else if (!strcmp(__s1, "038FA673BF47F15B7C5236E4863A96C910C3993AB31529A041DE199F3EEB66CB"))
    {
      return 85;
    }
    else if (!strcmp(__s1, "E44B08E42854960D4B0277D46D6181F8B07FAC3C3CCF5A6B31AA9DC9FA4057D6"))
    {
      return 86;
    }
    else if (!strcmp(__s1, "B80C09BAE4062CCC534F6E6EF6EA6E0ABEFF12048A342EB3138E7B76890D8D3B"))
    {
      return 87;
    }
    else if (!strcmp(__s1, "00EB2F035A98609505AB8DAB9B98D1FECEAA766F368932F7FE6316AE8BAEFBE0"))
    {
      return 88;
    }
    else if (!strcmp(__s1, "6368DD78E9738AAB3001F4C17EBE26BFB0414CDCC1399D092A48AB5A57536454"))
    {
      return 89;
    }
    else if (!strcmp(__s1, "C0909793BE0330B378C0CD09F0D9B9F09F599EC8C6B94C37ABA9011E83596F90"))
    {
      return 90;
    }
    else if (!strcmp(__s1, "11221127E966E92C6C18F64D312E8C9AF73DB3A9DB792E4442FCECE644A8E7B1"))
    {
      return 91;
    }
    else if (!strcmp(__s1, "FED7B076A3D7DE52B6D9A21D14FB1A49BABF975B73BE74181C4EA26976162724"))
    {
      return 92;
    }
    else if (!strcmp(__s1, "26456E27CBF6165D84C883AC666AF50E5EAAA39D07887C37BD3A9BD26A74B2FE"))
    {
      return 93;
    }
    else if (!strcmp(__s1, "F365A0CC0EEB38797FCD82D5E4AC3B2ACF44EB34D333D4AB1AD8D8891B7F8892"))
    {
      return 94;
    }
    else if (!strcmp(__s1, "A5F302F870E09D718474CBCADD4E0B3589351A5007777F1B805169B54226B875"))
    {
      return 95;
    }
    else if (!strcmp(__s1, "903B8B51F5368A75F9777D9155C6A2664116770701ED241A6D1662131A802333"))
    {
      return 96;
    }
    else if (!strcmp(__s1, "DD96D75C3E233EE9B4528803691C00E98D5F49F2B4B3B83676332ABFBB65DE07"))
    {
      return 97;
    }
    else if (!strcmp(__s1, "F2F4280636DC1065AEFE537517EE6B816C8133EF2E5C106D92DDD2B0E0DFC69D"))
    {
      return 98;
    }
    else if (!strcmp(__s1, "EA4B7DF630D01A5FC30F51DEEC420CB0F667CC57639F1C1D8E67D97B12524E0C"))
    {
      return 99;
    }
    else if (!strcmp(__s1, "89DBD24AAAD1D4D50F3F74A7040B52C5B06B4768F1E09DC89D4067D243744882"))
    {
      return 100;
    }
    else if (!strcmp(__s1, "F942A7256C77ACD182AE0B767F21133B11937660A61610A18CD14087D1F2F71C"))
    {
      return 101;
    }
    else if (!strcmp(__s1, "A739EE6D2886FEBC60795D1D8803BF19A1A3463541AB6024A90DBB8E4650F589"))
    {
      return 102;
    }
    else if (!strcmp(__s1, "7B872939683DD4D93E917C20089932C93AACDE7E7C0738CB78026B6FC178B1D9"))
    {
      return 103;
    }
    else if (!strcmp(__s1, "9EB2D21E75D0AA677C8D110763485DB3A78262C89D05CA0C3AF7EBD2D6AB99DD"))
    {
      return 104;
    }
    else if (!strcmp(__s1, "AC7E4629ABFA704A6369754CB199383D2901F0916E230FB75D765420550E8244"))
    {
      return 105;
    }
    else if (!strcmp(__s1, "FF9225FC7116F7583194D2D2F948E6CFD131F9020C7B7C9D61A8DE2F46571C5F"))
    {
      return 106;
    }
    else if (!strcmp(__s1, "3216E3D0006FC749B832DD3C33FF4B7CAE3CE455B3FE030A3EB061DC0356D829"))
    {
      return 107;
    }
    else if (!strcmp(__s1, "41E40C57A9236569333335DEA9CB52F0058A4BF366335B45406F04F7E0A93CD5"))
    {
      return 108;
    }
    else if (!strcmp(__s1, "2F5E861CD13CBCECC15CB691FCC7DCE54FC0755F96F1289D26AFB056BD6788D5"))
    {
      return 109;
    }
    else if (!strcmp(__s1, "0C7AC4ECF65C2CA6215B602A5C050FB69BFF2BA322B47A6890E2F0EE8CA922C0"))
    {
      return 110;
    }
    else if (!strcmp(__s1, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E"))
    {
      return 111;
    }
    else if (!strcmp(__s1, "C1F228965CE72DCBDF0563CA9125430BFC5215644CF7426375AAE844D9C393CF"))
    {
      return 112;
    }
    else if (!strcmp(__s1, "860E5D173A5DA8DE4C5A88EDDF57BFB0D9E7D010DFD109852AF3D1C8480DE485"))
    {
      return 113;
    }
    else if (!strcmp(__s1, "2FAB2C822F900089CD78CBC4AB947F23F8CD8C71D0257BB20870F2437F345683"))
    {
      return 114;
    }
    else if (!strcmp(__s1, "1E95F2EC42D9C8BCDDA799372B28B445C5807F73AC0A88117EE9819CECB7B2C2"))
    {
      return 115;
    }
    else if (!strcmp(__s1, "20FE67CA0BC6365A5F2E83A71443FCD1FF79D0FB655A2B26EF0293D935F451AD"))
    {
      return 116;
    }
    else if (!strcmp(__s1, "DFAD6694DAD2CF309685D73CC39C1523D4D92A94D9CBD4B16F3468EB89D1A732"))
    {
      return 117;
    }
    else if (!strcmp(__s1, "137C754E9BEA98B17962D83B8E9EBF70D33891C8B32A876D13CD776C2EB805CD"))
    {
      return 118;
    }
    else if (!strcmp(__s1, "97448FE09776C5C51AE32BFC9D1EE9728156924E321AAA8318E2F2A1C2A62C31"))
    {
      return 119;
    }
    else if (!strcmp(__s1, "BECA30E32A8DD8B418D4AC9150B23FC3F4AAAAFCA128274C1DE87621A54FF840"))
    {
      return 120;
    }
    else if (!strcmp(__s1, "D74797F7B8D690624B1F756C30E55986965EB05837E721FA720A2DE0B8E56C30"))
    {
      return 121;
    }
    else if (!strcmp(__s1, "5B4446A6E3D13E950BC7F482E0A1C6555A187EE5321E7294F0E604F3BA96322F"))
    {
      return 122;
    }
    else if (!strcmp(__s1, "A2AEBDCCCD11BCF937DC0DE23C78762A9FD1425DA34EE911F615F041D947D3CE"))
    {
      return 123;
    }
    else if (!strcmp(__s1, "C517BA395C2A64392D1C11AE86475E6F476E22867252458FCC5152B58A43603D"))
    {
      return 124;
    }
    else if (!strcmp(__s1, "E5FA747F28EBFE3E4BBD4BE279044F914B09502E3EB62035341300536242F90B"))
    {
      return 125;
    }
    else if (!strcmp(__s1, "7973408EAAC4FAF261DDB68AD698E34EFC1018CD38876DB49DA34E1C044F2CFC"))
    {
      return 126;
    }
    else if (!strcmp(__s1, "18974CEA3A33281B8436277C48EB0BB5EEA5111C4544565257A2EA24EEA75CDA"))
    {
      return 127;
    }
    else if (!strcmp(__s1, "7EFBE7B468F2C8FF4C34E67EDC7E8F80DB3E295C6221F8408D4440A78430C64F"))
    {
      return 128;
    }
    else if (!strcmp(__s1, "D67C31C99E39309E5E09E11F7A5E7B3576972C57135463976A5539814860D051"))
    {
      return 129;
    }
    else if (!strcmp(__s1, "3473F3E1E2A85DAEEB664F0C421CDF84D3B27258796FFBB2881208B73DEFC007"))
    {
      return 130;
    }
    else if (!strcmp(__s1, "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252"))
    {
      return 131;
    }
    else if (!strcmp(__s1, "1B57426DF9B957C95C4296A880A1D75B70200B72E8554E7D713D37098154E907"))
    {
      return 132;
    }
    else if (!strcmp(__s1, "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B"))
    {
      return 133;
    }
    else if (!strcmp(__s1, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC"))
    {
      return 134;
    }
    else if (!strcmp(__s1, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563"))
    {
      return 135;
    }
    else if (!strcmp(__s1, "89FBB3BDB9379AD11D47A5F312EDF73706C589F07B8C14BE99A3D604DA840455"))
    {
      return 136;
    }
    else if (!strcmp(__s1, "BEE28431C5E817DF3C9C265B3672660D03A6C89EE5236507323554958AE59578"))
    {
      return 137;
    }
    else if (!strcmp(__s1, "1F6D45D5DEB05AFFD7C7C1DAC38D882FA9A9D616990FBB135621C1F0D30CA596"))
    {
      return 138;
    }
    else if (!strcmp(__s1, "24B2EDEBE37A35C073BBC2B83505D52B7FDB9C121406C6308CF528457883D4BE"))
    {
      return 139;
    }
    else if (!strcmp(__s1, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2"))
    {
      return 140;
    }
    else if (!strcmp(__s1, "CFEE285EA42317F1E8CE16B6BAED451F1D8029F8C057963B2486EA9093B3CD28"))
    {
      return 141;
    }
    else if (!strcmp(__s1, "C46314BBA0AA01362E06989DA928CE0AED5C5A628892598193CCE37C495FE865"))
    {
      return 142;
    }
    else if (!strcmp(__s1, "DC615E09F661E340E6495BF8406FDB597D2C6B7CD5AB0CA1E1155D715C73C434"))
    {
      return 143;
    }
    else if (!strcmp(__s1, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378"))
    {
      return 144;
    }
    else if (!strcmp(__s1, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181"))
    {
      return 145;
    }
    else if (!strcmp(__s1, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5"))
    {
      return 146;
    }
    else if (!strcmp(__s1, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7"))
    {
      return 147;
    }
    else if (!strcmp(__s1, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A"))
    {
      return 148;
    }
    else if (!strcmp(__s1, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC"))
    {
      return 149;
    }
    else if (!strcmp(__s1, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6"))
    {
      return 150;
    }
    else if (!strcmp(__s1, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02"))
    {
      return 151;
    }
    else if (!strcmp(__s1, "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379"))
    {
      return 152;
    }
    else if (!strcmp(__s1, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317"))
    {
      return 153;
    }
    else if (!strcmp(__s1, "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853"))
    {
      return 154;
    }
    else if (!strcmp(__s1, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2"))
    {
      return 155;
    }
    else if (!strcmp(__s1, "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62"))
    {
      return 156;
    }
    else if (!strcmp(__s1, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F"))
    {
      return 157;
    }
    else if (!strcmp(__s1, "3E6CC5C197ACBED66DB18F36FE33CAF7D744175ADB2FE6C6FAE97B0CBB5B21CD"))
    {
      return 158;
    }
    else if (!strcmp(__s1, "250DFDD8D5BC61F9B0D9CD91F4DDCE0E4799ED7B1264EEF03FAD66612BCA288D"))
    {
      return 159;
    }
    else if (!strcmp(__s1, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80"))
    {
      return 160;
    }
    else if (!strcmp(__s1, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26"))
    {
      return 161;
    }
    else if (!strcmp(__s1, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8"))
    {
      return 162;
    }
    else if (!strcmp(__s1, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48"))
    {
      return 163;
    }
    else if (!strcmp(__s1, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C"))
    {
      return 164;
    }
    else if (!strcmp(__s1, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E"))
    {
      return 165;
    }
    else if (!strcmp(__s1, "EA870EDD0C8AD026DB44FB5C6AC53D8875D62255F794C489EAB9F8222F0616CB"))
    {
      return 166;
    }
    else if (!strcmp(__s1, "B0D00D3E15F0D45E0DAD2FE819496F3837110BDADE01AC3A17862CDDACDEE5AB"))
    {
      return 167;
    }
    else if (!strcmp(__s1, "7B4CF9B631F81D78F2CEA2F4869D0137BE4CA667AE9B13DB22A617C2BA15C075"))
    {
      return 168;
    }
    else if (!strcmp(__s1, "CA1DD5B830AB9668FC5EBD5904EB9B0113C766FCE57EF59AEC58982AE744413A"))
    {
      return 169;
    }
    else if (!strcmp(__s1, "2D29DA77B4EF8E7B1D2F3F764587274747D1C2AB05C053B4CE38AE701116BF6A"))
    {
      return 170;
    }
    else if (!strcmp(__s1, "83156D57355E76E46E7319E18EA9D6A8D20E78958733028FD3F74C3FD9B0BCC5"))
    {
      return 171;
    }
    else if (!strcmp(__s1, "95DD082534B76465BAA6B38551429C11CD11A77CB351740B05F3D18D2CD2B990"))
    {
      return 172;
    }
    else if (!strcmp(__s1, "996E91405229B0F31165936664CCE9F7D3145963C1A14FA9DD57A320E349F123"))
    {
      return 173;
    }
    else if (!strcmp(__s1, "294111BEC0EE4CFDDCE430D197B75A1CB09E21EB1C822E16CD1CBCC982D46A3F"))
    {
      return 174;
    }
    else if (!strcmp(__s1, "727820125C45F365E03E3C14E8202CFF1E0049F24543B5D589F3956E11F5C581"))
    {
      return 175;
    }
    else if (!strcmp(__s1, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB"))
    {
      return 176;
    }
    else if (!strcmp(__s1, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42"))
    {
      return 177;
    }
    else if (!strcmp(__s1, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8"))
    {
      return 178;
    }
    else if (!strcmp(__s1, "25C93B5B4A76FFE8A20CA68271CF612F43D0B5504B6680945F3BB046DA47213A"))
    {
      return 179;
    }
    else if (!strcmp(__s1, "B6B78FABA9FD12B688986DC5EA4D4B8B731265EDEC1E5AE52B0CAA6FC31801F2"))
    {
      return 180;
    }
    else if (!strcmp(__s1, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2"))
    {
      return 181;
    }
    else if (!strcmp(__s1, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70"))
    {
      return 182;
    }
    else if (!strcmp(__s1, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89"))
    {
      return 183;
    }
    else if (!strcmp(__s1, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4"))
    {
      return 184;
    }
    else if (!strcmp(__s1, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006"))
    {
      return 185;
    }
    else if (!strcmp(__s1, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D"))
    {
      return 186;
    }
    else if (!strcmp(__s1, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85"))
    {
      return 187;
    }
    else if (!strcmp(__s1, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD"))
    {
      return 188;
    }
    else if (!strcmp(__s1, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3"))
    {
      return 189;
    }
    else if (!strcmp(__s1, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A"))
    {
      return 190;
    }
    else if (!strcmp(__s1, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472"))
    {
      return 191;
    }
    else if (!strcmp(__s1, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035"))
    {
      return 192;
    }
    else if (!strcmp(__s1, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D"))
    {
      return 193;
    }
    else if (!strcmp(__s1, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A"))
    {
      return 194;
    }
    else if (!strcmp(__s1, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46"))
    {
      return 195;
    }
    else if (!strcmp(__s1, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE"))
    {
      return 196;
    }
    else if (!strcmp(__s1, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38"))
    {
      return 197;
    }
    else if (!strcmp(__s1, "2660D91E9E44E8375C647F1F4FDD89923B3BFA26A3AF29D5937BAF8EF1E10CFE"))
    {
      return 198;
    }
    else if (!strcmp(__s1, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182"))
    {
      return 199;
    }
    else if (!strcmp(__s1, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791"))
    {
      return 200;
    }
    else if (!strcmp(__s1, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174"))
    {
      return 201;
    }
    else if (!strcmp(__s1, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69"))
    {
      return 202;
    }
    else if (!strcmp(__s1, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7"))
    {
      return 203;
    }
    else if (!strcmp(__s1, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D"))
    {
      return 204;
    }
    else if (!strcmp(__s1, "5DCA18DF36F9FA665E30157E71359C15F04492B59DA944CC2B10D7A925843DA7"))
    {
      return 205;
    }
    else if (!strcmp(__s1, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A"))
    {
      return 206;
    }
    else if (!strcmp(__s1, "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D"))
    {
      return 207;
    }
    else if (!strcmp(__s1, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08"))
    {
      return 208;
    }
    else if (!strcmp(__s1, "81E23B94D526C5353E9E499DE4D53C13BAC39B09D64961C3259B99425E493446"))
    {
      return 209;
    }
    else if (!strcmp(__s1, "D36BDC945E9A3C2158D269457AE35CC5AD63543965D991AB68A2CC0556E31D50"))
    {
      return 210;
    }
    else if (!strcmp(__s1, "EEC15933C85F49CDCD9A4DC75821303FD2E5E1A8E2651667DB103FF51457DF71"))
    {
      return 211;
    }
    else if (!strcmp(__s1, "19FCC75261554C74A79C9151422F265347FC6282808C4BB8E9627195837B3682"))
    {
      return 212;
    }
    else if (!strcmp(__s1, "54D70702DEC6F85C65B8D1E26F089610058B0CDC6B23440F6FD07F26E6E23315"))
    {
      return 213;
    }
    else if (!strcmp(__s1, "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5"))
    {
      return 214;
    }
    else if (!strcmp(__s1, "2C9ACA342CA7C8F4A29CA1C798155F709AC8B8D95F0D20C549DBC00F1C42184D"))
    {
      return 215;
    }
    else if (!strcmp(__s1, "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1"))
    {
      return 216;
    }
    else if (!strcmp(__s1, "0AAC94B02176D8B144479EAFEE546A608C8B5E61D7A27481868626A7820E0CB1"))
    {
      return 217;
    }
    else if (!strcmp(__s1, "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10"))
    {
      return 218;
    }
    else if (!strcmp(__s1, "1ADDCB1D74CE36E8E4C6007CDB14DD6A053A9C2FBDB707345B3C5E7BB07299AA"))
    {
      return 219;
    }
    else if (!strcmp(__s1, "353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F"))
    {
      return 220;
    }
    else if (!strcmp(__s1, "E2D94E3051875514422124C186B05CDA6F417AF1FC67511A17055B65BED227AA"))
    {
      return 221;
    }
    else if (!strcmp(__s1, "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745"))
    {
      return 222;
    }
    else if (!strcmp(__s1, "A6DE7D11FD45FD0B0F5541862F786FAAA17E530F3CBAC5CE63EFD6C7B7B8EC27"))
    {
      return 223;
    }
    else if (!strcmp(__s1, "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC"))
    {
      return 224;
    }
    else if (!strcmp(__s1, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3"))
    {
      return 225;
    }
    else if (!strcmp(__s1, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85"))
    {
      return 226;
    }
    else if (!strcmp(__s1, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59"))
    {
      return 227;
    }
    else if (!strcmp(__s1, "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F"))
    {
      return 228;
    }
    else
    {
      return 229;
    }
  }
  return result;
}

uint64_t sub_176A30(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = (char *)&unk_4C7598 + 4 * (int)a2;
    return *(unsigned int *)v3;
  }
  if (v2 < 0x40)
  {
    uint64_t v4 = (char *)&unk_4C7798;
LABEL_7:
    uint64_t v3 = &v4[4 * v2];
    return *(unsigned int *)v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0x25)
  {
    uint64_t v4 = (char *)&unk_4C7898;
    goto LABEL_7;
  }
  return 16;
}

uint64_t sub_176A84(uint64_t a1, int *a2)
{
  uint64_t v3 = agxps_timeseries_div_ts(a2, 0, 0x41D0000000000000uLL, a2, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 8);

  return v4(a1, v3);
}

void sub_176AF4(uint64_t a1@<X0>, const void *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_8;
  }
  uint64_t v6 = (void *)sub_6460(v5);
  v25[0] = a2;
  v25[1] = (const void *)strlen((const char *)a2);
  uint64_t v7 = sub_178294(v6, v25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!v7)
  {
LABEL_8:
    unint64_t v13 = (char *)operator new(8uLL);
    *a3 = v13;
    *(void *)unint64_t v13 = a2;
    v13 += 8;
    a3[1] = v13;
    a3[2] = v13;
    return;
  }
  uint64_t v9 = v7;
  int v10 = v8;
  if (v7 == v8)
  {
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v12 = v7;
    do
    {
      ++v11;
      uint64_t v12 = (uint64_t **)*v12;
    }
    while (v12 != v10);
  }
  sub_176CC4((void **)a3, v11);
  if (v9 != v10)
  {
    unint64_t v14 = a3 + 2;
    uint64_t v15 = a3[1];
    do
    {
      if ((unint64_t)v15 >= *v14)
      {
        uint64_t v16 = (v15 - *a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          sub_566C();
        }
        uint64_t v17 = *v14 - (void)*a3;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          uint64_t v20 = (char *)sub_5714((uint64_t)(a3 + 2), v19);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = &v20[8 * v16];
        *(void *)uint64_t v21 = v9[4];
        uint64_t v15 = v21 + 8;
        unint64_t v23 = *a3;
        uint64_t v22 = a3[1];
        if (v22 != *a3)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          uint64_t v22 = *a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(void *)uint64_t v15 = v9[4];
        v15 += 8;
      }
      a3[1] = v15;
      uint64_t v9 = (uint64_t **)*v9;
    }
    while (v9 != v10);
  }
}

void sub_176CA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_176CC4(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_566C();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_5714(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_176D6C(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_DB68((uint64_t)a1);
  return a1;
}

void sub_176D9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_176DB8(uint64_t **a1)
{
  sub_DC14();
  unsigned int v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
      agxps_timeseries_destroy(*v2++);
    while (v2 != v3);
    unsigned int v2 = *a1;
  }
  if (v2)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_176E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = agxps_timeseries_create(a2, a3);
  uint64_t v5 = v4;
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(uint64_t **)a1;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_566C();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      unint64_t v14 = (char *)sub_5714(a1 + 16, v13);
      uint64_t v9 = *(uint64_t **)a1;
      uint64_t v7 = *(uint64_t **)(a1 + 8);
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = (uint64_t *)&v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *uint64_t v15 = v5;
    uint64_t v8 = v15 + 1;
    while (v7 != v9)
    {
      uint64_t v17 = *--v7;
      *--uint64_t v15 = v17;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = v4;
    uint64_t v8 = v7 + 1;
  }
  *(void *)(a1 + 8) = v8;
  return v5;
}

uint64_t agxps_derived_counter_gpu_descriptor_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((!a5 || a3 && a4) && (!a8 || a6 && a7)) {
    operator new();
  }
  return 0;
}

void sub_177060(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t agxps_counter_get_raw_counters_used_by_derived_counters(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = (unsigned int *)a1;
  BOOL is_valid = agxps_gpu_is_valid(a1);
  if (a2) {
    BOOL v11 = is_valid;
  }
  else {
    BOOL v11 = 0;
  }
  if (!a3) {
    BOOL v11 = 0;
  }
  if (!a4) {
    BOOL v11 = 0;
  }
  if (a5) {
    uint64_t result = v11;
  }
  else {
    uint64_t result = 0;
  }
  if (result == 1)
  {
    unint64_t v23 = a4;
    long long v25 = 0u;
    long long v26 = 0u;
    int v27 = 1065353216;
    uint64_t v24 = v9;
    do
    {
      unint64_t v13 = *a2;
      if (agxps_counter_is_derived(*a2))
      {
        unint64_t v39 = &off_743838;
        memset(v40, 0, sizeof(v40));
        int v41 = 1065353216;
        uint64_t v36 = &off_743838;
        memset(v37, 0, sizeof(v37));
        int v38 = 1065353216;
        v29[0] = (unint64_t)&off_743810;
        unint64_t v14 = sub_6668(v9);
        v29[0] = (unint64_t)off_743850;
        v29[1] = (unint64_t)v14;
        v29[2] = (unint64_t)v9;
        v29[3] = (unint64_t)&v39;
        v29[4] = (unint64_t)&v36;
        long long __p = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        memset(v34, 0, sizeof(v34));
        int v30 = 1;
        int v35 = 1065353216;
        sub_176D6C(v28);
        uint64_t v15 = sub_66E4(v13);
        sub_5814((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v15, (uint64_t)v9, (uint64_t)v29, (uint64_t)&v39, (uint64_t)&v36, (uint64_t)v28);
        uint64_t v16 = (unint64_t **)*((void *)&v32 + 1);
        uint64_t v17 = (unint64_t **)v33;
        while (v16 != v17)
        {
          uint64_t v18 = *v16;
          unint64_t v19 = v16[1];
          while (v18 != v19)
          {
            sub_177C4C((uint64_t)&v25, v18, v18);
            ++v18;
          }
          v16 += 3;
        }
        sub_176DB8(v28);
        v29[0] = (unint64_t)off_743850;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v34);
        v28[0] = (uint64_t *)&v32 + 1;
        std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100]((void ***)v28);
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        uint64_t v36 = &off_743838;
        sub_85AC((uint64_t)v37);
        unint64_t v39 = &off_743838;
        sub_85AC((uint64_t)v40);
        uint64_t v9 = v24;
      }
      ++a2;
      --a3;
    }
    while (a3);
    v29[0] = agxps_counter_get_ident(v9, kAGXPSCounterGPUCycles);
    sub_178420(&v25, v29);
    v29[0] = agxps_counter_get_ident(v9, kAGXPSCounterDeltaSeconds);
    sub_178420(&v25, v29);
    uint64_t v20 = *((void *)&v26 + 1);
    *a5 = *((void *)&v26 + 1);
    if (v20)
    {
      uint64_t v21 = malloc_type_malloc(8 * v20, 0x100004000313F17uLL);
      void *v23 = v21;
      for (uint64_t i = (void *)v26; i; uint64_t i = (void *)*i)
        *v21++ = i[2];
    }
    else
    {
      void *v23 = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v25);
    return 1;
  }
  return result;
}

void sub_1773CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
}

uint64_t sub_177454(uint64_t a1, char *a2)
{
  uint64_t v2 = a1 + 8;
  sub_B01C(__p, a2);
  sub_1774C8(v2, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1774AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1774C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_9578(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_9A24(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_8F90(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    void *v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  *uint64_t v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_177730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_9ACC(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_17774C(uint64_t a1, uint64_t a2)
{
  uint64_t ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), kAGXPSCounterGPUCycles);
  char v5 = operator new(8uLL);
  long long __p = v5;
  *char v5 = ident;
  unint64_t v8 = v5 + 1;
  unint64_t v9 = v5 + 1;
  sub_177974(a1, (unint64_t **)&__p);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
  return a2;
}

void sub_1777C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1777E4(uint64_t a1, uint64_t a2)
{
  uint64_t ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), kAGXPSCounterDeltaSeconds);
  char v5 = operator new(8uLL);
  long long __p = v5;
  *char v5 = ident;
  unint64_t v8 = v5 + 1;
  unint64_t v9 = v5 + 1;
  sub_177974(a1, (unint64_t **)&__p);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
  return a2;
}

void sub_177860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_17787C(uint64_t a1, const void *a2)
{
  int v3 = *(_DWORD *)(a1 + 40);
  sub_176AF4(a1, a2, (char **)&v11);
  long long __p = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = (char **)v11;
  if (v3) {
    char v5 = (char **)((char *)v11 + 8);
  }
  else {
    char v5 = v12;
  }
  p_p = &__p;
  while (v4 != v5)
  {
    uint64_t ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), *v4);
    sub_1781A4((uint64_t *)&p_p, &ident);
    ++v4;
  }
  sub_177974(a1, (unint64_t **)&__p);
  uint64_t v6 = agxps_timeseries_create(0, 0);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    unint64_t v12 = (char **)v11;
    operator delete(v11);
  }
  return v6;
}

void sub_177944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_177974(uint64_t result, unint64_t **a2)
{
  uint64_t v2 = *a2;
  int v3 = a2[1];
  if (*a2 != v3)
  {
    char v5 = (uint64_t *)result;
    while (1)
    {
      uint64_t result = agxps_counter_is_valid(*v2);
      if (result) {
        break;
      }
      if (++v2 == v3) {
        return result;
      }
    }
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (v6 != *a2 && (unint64_t)((char *)v6 - (char *)*a2) >= 0x10)
    {
      while (1)
      {
        uint64_t result = agxps_counter_is_derived(*v7);
        if (result) {
          break;
        }
        if (++v7 == v6)
        {
          uint64_t v7 = *a2;
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      uint64_t result = (uint64_t)sub_177B98(v5 + 12, v7);
      if (!result)
      {
        unint64_t v9 = (uint64_t **)*a2;
        uint64_t v10 = (uint64_t **)a2[1];
        if (*a2 == (unint64_t *)v10)
        {
          unint64_t v12 = *a2;
        }
        else
        {
          do
          {
            uint64_t v11 = *v9++;
            v29[0] = v11;
            sub_177C4C((uint64_t)(v5 + 12), (unint64_t *)v29, v29);
          }
          while (v9 != v10);
          unint64_t v12 = *a2;
          unint64_t v9 = (uint64_t **)a2[1];
        }
        if ((char *)v9 - (char *)v12 == 8 && (unint64_t v13 = *v12, agxps_counter_is_derived(*v12)))
        {
          unint64_t v14 = v5[8];
          unint64_t v15 = (unint64_t *)v5[7];
          if ((unint64_t)v15 >= v14)
          {
            BOOL v19 = (unint64_t *)v5[6];
            uint64_t v20 = v15 - v19;
            if ((unint64_t)(v20 + 1) >> 61) {
              sub_566C();
            }
            unint64_t v21 = v14 - (void)v19;
            unint64_t v22 = (uint64_t)(v14 - (void)v19) >> 2;
            if (v22 <= v20 + 1) {
              unint64_t v22 = v20 + 1;
            }
            if (v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23)
            {
              uint64_t v24 = (char *)sub_5714((uint64_t)(v5 + 8), v23);
              BOOL v19 = (unint64_t *)v5[6];
              unint64_t v15 = (unint64_t *)v5[7];
            }
            else
            {
              uint64_t v24 = 0;
            }
            unint64_t v25 = (unint64_t *)&v24[8 * v20];
            long long v26 = &v24[8 * v23];
            *unint64_t v25 = v13;
            uint64_t v16 = v25 + 1;
            while (v15 != v19)
            {
              unint64_t v27 = *--v15;
              *--unint64_t v25 = v27;
            }
            v5[6] = (uint64_t)v25;
            v5[7] = (uint64_t)v16;
            v5[8] = (uint64_t)v26;
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *unint64_t v15 = v13;
            uint64_t v16 = v15 + 1;
          }
          v5[7] = (uint64_t)v16;
          unint64_t v28 = sub_66E4(v13);
          sub_176D6C(v29);
          sub_5814((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v28, v5[2], (uint64_t)v5, v5[3], v5[4], (uint64_t)v29);
          return (uint64_t)sub_176DB8(v29);
        }
        else
        {
          float v17 = v5 + 9;
          unint64_t v18 = v5[10];
          if (v18 >= v5[11])
          {
            uint64_t result = sub_177EBC(v17, (uint64_t)a2);
          }
          else
          {
            sub_177E68((uint64_t)v17, (uint64_t)a2);
            uint64_t result = v18 + 24;
          }
          v5[10] = result;
        }
      }
    }
  }
  return result;
}

void sub_177B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_176DB8((uint64_t **)va);
  _Unwind_Resume(a1);
}

void *sub_177B98(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_177C4C(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_8F90(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    BOOL v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_177E54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_177E68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_177FD4(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_177EB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_177EBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_566C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_A524(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_177FD4(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_178050(a1, v14);
  uint64_t v12 = a1[1];
  sub_62FC8((uint64_t)v14);
  return v12;
}

void sub_177FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_62FC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_177FD4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_2F00C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_178034(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_178050(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1780C8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1780C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_17816C((uint64_t)v11);
  return v9;
}

uint64_t sub_17816C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_62F80(a1);
  }
  return a1;
}

uint64_t *sub_1781A4(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    long long v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_566C();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      long long v13 = (char *)sub_5714((uint64_t)v6, v12);
      long long v8 = *(void **)v4;
      uint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      long long v13 = 0;
    }
    long long v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)long long v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t **sub_178294(void *a1, const void **a2)
{
  uint64_t v3 = sub_178308(a1, (uint64_t)a2);
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v6 = *a2;
    size_t v5 = (size_t)a2[1];
    uint64_t v7 = v3;
    do
      uint64_t v7 = (uint64_t **)*v7;
    while (v7 && v7[3] == (uint64_t *)v5 && !memcmp(v7[2], v6, v5));
  }
  return v4;
}

uint64_t **sub_178308(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_CB0C((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    unint64_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *sub_178420(void *a1, unint64_t *a2)
{
  uint64_t result = sub_177B98(a1, a2);
  if (result)
  {
    sub_178458(a1, result);
    return (void *)(&def_1C1270 + 1);
  }
  return result;
}

uint64_t sub_178458(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_17849C(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_17849C@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint8x8_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

unsigned int *sub_1785D0(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = 0;
    uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1[2]);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.i32[0] == 1 && v1[2] - 2049 >= 0xFFFFF80F)
    {
      uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[3]);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.i32[0] == 1 && v1[3] - 8193 >= 0xFFFFE03F)
      {
        uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1[4]);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.i32[0] == 1 && v1[4] - 32769 >= 0xFFFF807F) {
          operator new();
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1786A4(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_743878;
  uint8x8_t v3 = (unsigned char *)(a1 + 39500);
  long long v4 = *a2;
  long long v5 = a2[1];
  unint64_t v6 = (unsigned char *)(a1 + 34256);
  *(void *)(a1 + 48) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 86) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint8x8_t v7 = (unsigned char *)(a1 + 376);
  uint64_t v8 = 152;
  do
  {
    *(v7 - 216) = 0;
    *uint8x8_t v7 = 0;
    v7 += 224;
    --v8;
  }
  while (v8);
  uint64_t v9 = 8;
  do
  {
    *(v6 - 48) = 0;
    unsigned char *v6 = 0;
    v6 += 56;
    --v9;
  }
  while (v9);
  uint64_t v10 = (unsigned char *)(a1 + 34688);
  uint64_t v11 = 16;
  do
  {
    *(v10 - 32) = 0;
    unsigned char *v10 = 0;
    v10 += 40;
    --v11;
  }
  while (v11);
  unint64_t v12 = (unsigned char *)(a1 + 35400);
  uint64_t v13 = 255;
  do
  {
    *(v12 - 8) = 0;
    *unint64_t v12 = 0;
    v12 += 16;
    --v13;
  }
  while (v13);
  uint64_t v14 = 8;
  do
  {
    *(v3 - 12) = 0;
    unsigned char *v3 = 0;
    v3 += 16;
    --v14;
  }
  while (v14);
  unint64_t v15 = (unsigned char *)(a1 + 39628);
  uint64_t v16 = 8;
  do
  {
    *(v15 - 12) = 0;
    *unint64_t v15 = 0;
    v15 += 16;
    --v16;
  }
  while (v16);
  size_t v17 = (unsigned char *)(a1 + 39756);
  uint64_t v18 = 8;
  do
  {
    *(v17 - 12) = 0;
    unsigned char *v17 = 0;
    v17 += 16;
    --v18;
  }
  while (v18);
  BOOL v19 = (unsigned char *)(a1 + 39880);
  uint64_t v20 = 128;
  do
  {
    *(v19 - 8) = 0;
    unsigned char *v19 = 0;
    v19 += 16;
    --v20;
  }
  while (v20);
  *(_OWORD *)(a1 + 39472) = 0u;
  bzero((void *)(a1 + 41920), 0x1CB0uLL);
  int v21 = *(_DWORD *)(a1 + 28);
  if (v21 > 1023)
  {
    if (v21 > 4095)
    {
      if (v21 == 4096)
      {
        int v22 = 6;
        goto LABEL_36;
      }
      if (v21 == 0x2000)
      {
        int v22 = 7;
        goto LABEL_36;
      }
    }
    else
    {
      if (v21 == 1024)
      {
        int v22 = 4;
        goto LABEL_36;
      }
      if (v21 == 2048)
      {
        int v22 = 5;
        goto LABEL_36;
      }
    }
  }
  else if (v21 > 255)
  {
    if (v21 == 256)
    {
      int v22 = 2;
      goto LABEL_36;
    }
    if (v21 == 512)
    {
      int v22 = 3;
      goto LABEL_36;
    }
  }
  else
  {
    if (v21 == 64)
    {
      int v22 = 0;
      goto LABEL_36;
    }
    if (v21 == 128)
    {
      int v22 = 1;
LABEL_36:
      *(_DWORD *)(a1 + 100) = v22;
    }
  }
  return a1;
}

void *sub_17889C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD *a5)
{
  if (a2 && a3)
  {
    unint64_t v612 = 0;
    uint64_t v8 = *(void *)(a1 + 128);
    if (!v8) {
      operator new();
    }
    unint64_t v612 = *(void **)(a1 + 128);
    if (*(unsigned char *)(a1 + 92)) {
      uint64_t v9 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned char *)(a1 + 93)) {
      uint64_t v11 = *(void *)(a1 + 72);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_F63C8(v8, (uint64_t *)(a1 + 136), 1 << (*(_DWORD *)(a1 + 100) + 6), v9, v11);
    uint64_t v574 = *(void *)(v8 + 26024);
    if (a5) {
      *a5 = 0;
    }
    uint64_t v13 = 8 * a3;
    unint64_t v611 = 0;
    if (8 * a3)
    {
      char v568 = a4;
      unint64_t v561 = a5;
      unint64_t v14 = 0;
      uint64_t v577 = 0;
      unint64_t v573 = (void **)(a1 + 41920);
      uint64_t v565 = a1 + 41968;
      uint64_t v564 = a1 + 39472;
      uint64_t v563 = a1 + 35392;
      uint64_t v560 = a1 + 39872;
      uint64_t v562 = a1 + 35296;
      uint64_t v566 = a1 + 34208;
      uint64_t v567 = a1 + 34656;
      uint64_t v571 = a1 + 160;
      unint64_t v572 = (unint64_t *)(a1 + 72);
      unint64_t v569 = (uint64_t *)(a1 + 56);
      unint64_t v570 = (unsigned char *)(a1 + 93);
      while (1)
      {
        if (v13 - v14 <= 0x340)
        {
          memset(__s1, 0, sizeof(__s1));
          uint64_t v12 = memcmp(__s1, (const void *)(a2 + (v14 >> 3)), a3 - (v14 >> 3));
          if (!v12) {
            goto LABEL_875;
          }
        }
        char v610 = 0;
        uint64_t v12 = sub_193710((uint64_t)v624, a2, (uint64_t *)&v611, &v610);
        if (!v610) {
          break;
        }
        if (v624[0] >= 0x11u)
        {
          size_t v17 = sub_12C18C();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s1 = 136315650;
            *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/"
                                  "AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
            *(_WORD *)&__s1[12] = 1024;
            *(_DWORD *)&__s1[14] = 994;
            *(_WORD *)&__s1[18] = 2080;
            *(void *)&__s1[20] = "tokenTypeIndex < numTokenTypes";
            _os_log_error_impl(&def_1C1270, v17, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
          }
          uint64_t v12 = sub_12C17C();
          if (v12) {
            uint64_t v12 = sub_12C184();
          }
        }
        else
        {
          unint64_t v15 = (void *)(v574 + 16 * v624[0]);
          uint64_t v16 = v15[1];
          ++*v15;
          v15[1] = v611 - v14 + v16;
        }
        switch(v624[0])
        {
          case 0:
            unsigned int v18 = (unsigned __int16)v625;
            if (v625 <= 0x97u)
            {
              uint64_t v19 = v571 + 224 * v625;
              uint64_t v20 = v612;
              if (!*(unsigned char *)(v19 + 216))
              {
                *(void *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                char v621 = 0;
                memset(&__s1[40], 0, 64);
                long long v614 = 0u;
                long long v615 = 0u;
                long long __p = 0u;
                long long v617 = 0u;
                char v618 = 0;
                int v622 = 0;
                sub_C2204(v19, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v614 + 1))
                {
                  *(void *)&long long v615 = *((void *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                uint64_t v20 = v612;
                unsigned int v18 = (unsigned __int16)v625;
              }
              int v21 = (char **)(v19 + 40);
              sub_47ECC((void *)(v19 + 40), v20);
              sub_48030((void *)(v19 + 40), 0);
              int v22 = (v18 >> 6) & 0x100 | (v18 >> 8) & 0x3F;
              uint64_t v12 = v19 + 56;
              unint64_t v23 = *(void *)(v19 + 56);
              uint64_t v24 = *(_WORD **)(v19 + 48);
              if ((unint64_t)v24 >= v23)
              {
                uint64_t v170 = (char *)v24 - *v21;
                if (v170 <= -3) {
                  sub_566C();
                }
                uint64_t v171 = v170 >> 1;
                unint64_t v172 = v23 - (void)*v21;
                if (v172 <= (v170 >> 1) + 1) {
                  unint64_t v173 = v171 + 1;
                }
                else {
                  unint64_t v173 = v172;
                }
                if (v172 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v174 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v174 = v173;
                }
                if (v174) {
                  uint64_t v12 = (uint64_t)sub_45900(v12, v174);
                }
                else {
                  uint64_t v12 = 0;
                }
                unint64_t v280 = (_WORD *)(v12 + 2 * v171);
                _WORD *v280 = v22;
                unint64_t v25 = v280 + 1;
                unint64_t v282 = *(char **)(v19 + 40);
                unint64_t v281 = *(char **)(v19 + 48);
                if (v281 != v282)
                {
                  do
                  {
                    __int16 v283 = *((_WORD *)v281 - 1);
                    v281 -= 2;
                    *--unint64_t v280 = v283;
                  }
                  while (v281 != v282);
                  unint64_t v281 = *v21;
                }
                *(void *)(v19 + 40) = v280;
                *(void *)(v19 + 48) = v25;
                *(void *)(v19 + 56) = v12 + 2 * v174;
                if (v281) {
                  operator delete(v281);
                }
              }
              else
              {
                _WORD *v24 = v22;
                unint64_t v25 = v24 + 1;
              }
              *(void *)(v19 + 48) = v25;
            }
            goto LABEL_856;
          case 1:
            unint64_t v76 = *(unsigned int *)(a1 + 24);
            unint64_t v77 = *(void *)(a1 + 72);
            if (v77 % v76)
            {
              unint64_t v78 = (v77 + v76 - 1) / v76 * v76;
            }
            else
            {
              if (*(void *)(a1 + 80) == v77 && !*(_DWORD *)(a1 + 96) && *v570) {
                goto LABEL_351;
              }
              unint64_t v78 = v77 + v76;
            }
            unint64_t *v572 = v78;
            int v144 = v612;
            unint64_t v145 = (unint64_t *)v612[3259];
            unint64_t v146 = v612[3260];
            if ((unint64_t)v145 >= v146)
            {
              uint64_t v12 = v612[3258];
              uint64_t v148 = ((uint64_t)v145 - v12) >> 3;
              if ((unint64_t)(v148 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v149 = v146 - v12;
              unint64_t v150 = (uint64_t)(v146 - v12) >> 2;
              if (v150 <= v148 + 1) {
                unint64_t v150 = v148 + 1;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                unint64_t v152 = (char *)sub_5714((uint64_t)(v612 + 3260), v151);
                unint64_t v145 = (unint64_t *)v144[3259];
                uint64_t v12 = v144[3258];
              }
              else
              {
                unint64_t v152 = 0;
              }
              unint64_t v235 = (unint64_t *)&v152[8 * v148];
              *unint64_t v235 = v78;
              int v147 = v235 + 1;
              while (v145 != (unint64_t *)v12)
              {
                unint64_t v236 = *--v145;
                *--unint64_t v235 = v236;
              }
              v144[3258] = v235;
              v144[3259] = v147;
              v144[3260] = &v152[8 * v151];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *unint64_t v145 = v78;
              int v147 = v145 + 1;
            }
            v144[3259] = v147;
            if (!(v78 % v76)) {
              v144[3264] = ((((void)v147 - v144[3258]) << 29) - 0x100000000) | (((v144[3256]
            }
                                                                                                  - v144[3255]) >> 3)
                                                                                  - 1);
LABEL_351:
            ++*(_DWORD *)(a1 + 96);
            goto LABEL_856;
          case 2:
            unint64_t v45 = v612;
            uint64_t v46 = v612[3259];
            uint64_t v47 = v612[3258];
            if (v46 - v47 == 8 && !*(void *)(v46 - 8)) {
              v612[3259] = v47;
            }
            uint64_t v48 = *(void *)(a1 + 56) + (1 << (*(_DWORD *)(a1 + 100) + 6));
            unint64_t v49 = sub_3EFB8(a1, (uint64_t)v45, v625 & 0xFFFFF, v48);
            uint64_t v12 = sub_F6A5C((uint64_t)v45, v570, *(unsigned int *)(a1 + 24), v572, v49);
            if (v49 < *(void *)(a1 + 72))
            {
              unint64_t v50 = sub_12C18C();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1091;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "uscTimestamp >= parser->lastUSCTimestamp";
                _os_log_error_impl(&def_1C1270, v50, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            uint64_t v51 = v612;
            unint64_t v52 = *(unsigned int *)(a1 + 24);
            unint64_t v53 = (unint64_t *)v612[3259];
            unint64_t v54 = v612[3260];
            if ((unint64_t)v53 >= v54)
            {
              uint64_t v12 = v612[3258];
              uint64_t v134 = ((uint64_t)v53 - v12) >> 3;
              if ((unint64_t)(v134 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v135 = v54 - v12;
              unint64_t v136 = (uint64_t)(v54 - v12) >> 2;
              if (v136 <= v134 + 1) {
                unint64_t v136 = v134 + 1;
              }
              if (v135 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v137 = v136;
              }
              if (v137)
              {
                unint64_t v138 = (char *)sub_5714((uint64_t)(v612 + 3260), v137);
                unint64_t v53 = (unint64_t *)v51[3259];
                uint64_t v12 = v51[3258];
              }
              else
              {
                unint64_t v138 = 0;
              }
              unint64_t v193 = (unint64_t *)&v138[8 * v134];
              unint64_t *v193 = v49;
              uint64_t v55 = v193 + 1;
              while (v53 != (unint64_t *)v12)
              {
                unint64_t v194 = *--v53;
                *--unint64_t v193 = v194;
              }
              v51[3258] = v193;
              v51[3259] = v55;
              v51[3260] = &v138[8 * v137];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *unint64_t v53 = v49;
              uint64_t v55 = v53 + 1;
            }
            v51[3259] = v55;
            if (!(v49 % v52)) {
              v51[3264] = ((((void)v55 - v51[3258]) << 29) - 0x100000000) | (((v51[3256] - v51[3255]) >> 3)
            }
                                                                               - 1);
            *(void *)(a1 + 72) = v49;
            *(void *)(a1 + 80) = v49;
            *(_DWORD *)(a1 + 88) = v625 & 0xFFFFF;
            *(_DWORD *)(a1 + 96) = 0;
            uint64_t v195 = v612;
            unint64_t v196 = (uint64_t *)v612[3256];
            unint64_t v197 = v612[3257];
            if ((unint64_t)v196 >= v197)
            {
              uint64_t v12 = v612[3255];
              uint64_t v199 = ((uint64_t)v196 - v12) >> 3;
              if ((unint64_t)(v199 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v200 = v197 - v12;
              unint64_t v201 = (uint64_t)(v197 - v12) >> 2;
              if (v201 <= v199 + 1) {
                unint64_t v201 = v199 + 1;
              }
              if (v200 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v202 = v201;
              }
              if (v202)
              {
                uint64_t v203 = (char *)sub_5714((uint64_t)(v612 + 3257), v202);
                unint64_t v196 = (uint64_t *)v195[3256];
                uint64_t v12 = v195[3255];
              }
              else
              {
                uint64_t v203 = 0;
              }
              unint64_t v204 = (uint64_t *)&v203[8 * v199];
              *unint64_t v204 = v48;
              unint64_t v198 = v204 + 1;
              while (v196 != (uint64_t *)v12)
              {
                uint64_t v205 = *--v196;
                *--unint64_t v204 = v205;
              }
              v195[3255] = v204;
              v195[3256] = v198;
              v195[3257] = &v203[8 * v202];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *unint64_t v196 = v48;
              unint64_t v198 = v196 + 1;
            }
            v195[3256] = v198;
            *unint64_t v569 = v48;
            unint64_t v206 = v612;
            uint64_t v207 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            unint64_t v208 = (uint64_t *)v612[3262];
            unint64_t v209 = v612[3263];
            if ((unint64_t)v208 >= v209)
            {
              unint64_t v211 = (void **)(v612 + 3261);
              uint64_t v212 = v612[3261];
              uint64_t v213 = ((uint64_t)v208 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v214 = v209 - v212;
              uint64_t v215 = v214 >> 2;
              if (v214 >> 2 <= (unint64_t)(v213 + 1)) {
                uint64_t v215 = v213 + 1;
              }
              if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v612 + 3263), v216);
              }
              else {
                uint64_t v12 = 0;
              }
              uint64_t v231 = (uint64_t *)(v12 + 8 * v213);
              *uint64_t v231 = v207;
              unint64_t v210 = v231 + 1;
              unint64_t v232 = (char *)v206[3262];
              uint64_t v233 = (char *)v206[3261];
              if (v232 != v233)
              {
                do
                {
                  uint64_t v234 = *((void *)v232 - 1);
                  v232 -= 8;
                  *--uint64_t v231 = v234;
                }
                while (v232 != v233);
                unint64_t v232 = (char *)*v211;
              }
              v206[3261] = v231;
              v206[3262] = v210;
              v206[3263] = v12 + 8 * v216;
              if (v232) {
                operator delete(v232);
              }
            }
            else
            {
              *unint64_t v208 = v207;
              unint64_t v210 = v208 + 1;
            }
            v206[3262] = v210;
            goto LABEL_856;
          case 3:
            uint64_t v61 = v612;
            uint64_t v62 = v612[3256];
            uint64_t v63 = v612[3255];
            if (v62 - v63 == 8 && !*(void *)(v62 - 8)) {
              v612[3256] = v63;
            }
            uint64_t v64 = v61[3259];
            uint64_t v65 = v61[3258];
            if (v64 - v65 == 8 && !*(void *)(v64 - 8)) {
              v61[3259] = v65;
            }
            unint64_t v66 = *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v67 = sub_3EFB8(a1, (uint64_t)v61, v625 & 0xFFFFF, *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL);
            sub_F6A04((uint64_t)v61, (unsigned char *)(a1 + 92), 1 << (*(_DWORD *)(a1 + 100) + 6), v569, v66);
            uint64_t v12 = sub_F6A5C((uint64_t)v612, v570, *(unsigned int *)(a1 + 24), v572, v67);
            if ((*((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFuLL) <= *(void *)(a1 + 56))
            {
              unint64_t v68 = sub_12C18C();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1035;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "token.bits.tok.timeStamp.systemTime > parser->lastSystemTimestamp";
                _os_log_error_impl(&def_1C1270, v68, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            unint64_t v69 = v612;
            uint64_t v70 = *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v71 = (uint64_t *)v612[3256];
            unint64_t v72 = v612[3257];
            if ((unint64_t)v71 >= v72)
            {
              uint64_t v12 = v612[3255];
              uint64_t v139 = ((uint64_t)v71 - v12) >> 3;
              if ((unint64_t)(v139 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v140 = v72 - v12;
              unint64_t v141 = (uint64_t)(v72 - v12) >> 2;
              if (v141 <= v139 + 1) {
                unint64_t v141 = v139 + 1;
              }
              if (v140 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v141;
              }
              if (v142)
              {
                unint64_t v143 = (char *)sub_5714((uint64_t)(v612 + 3257), v142);
                unint64_t v71 = (uint64_t *)v69[3256];
                uint64_t v12 = v69[3255];
              }
              else
              {
                unint64_t v143 = 0;
              }
              unint64_t v217 = (uint64_t *)&v143[8 * v139];
              *unint64_t v217 = v70;
              uint64_t v73 = v217 + 1;
              while (v71 != (uint64_t *)v12)
              {
                uint64_t v218 = *--v71;
                *--unint64_t v217 = v218;
              }
              v69[3255] = v217;
              v69[3256] = v73;
              v69[3257] = &v143[8 * v142];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *unint64_t v71 = v70;
              uint64_t v73 = v71 + 1;
            }
            v69[3256] = v73;
            unint64_t v219 = *v572;
            if (v67 <= *v572)
            {
              if (v67 >= *v572) {
                goto LABEL_482;
              }
              *(void *)(a1 + 80) = v219;
              int v225 = (v625 & 0xFFFFF) + v67 - v219;
            }
            else
            {
              unint64_t v220 = v612;
              unint64_t v221 = *(unsigned int *)(a1 + 24);
              unint64_t v222 = (unint64_t *)v612[3259];
              unint64_t v223 = v612[3260];
              if ((unint64_t)v222 >= v223)
              {
                uint64_t v12 = v612[3258];
                uint64_t v226 = ((uint64_t)v222 - v12) >> 3;
                if ((unint64_t)(v226 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v227 = v223 - v12;
                unint64_t v228 = (uint64_t)(v223 - v12) >> 2;
                if (v228 <= v226 + 1) {
                  unint64_t v228 = v226 + 1;
                }
                if (v227 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v229 = v228;
                }
                if (v229)
                {
                  unint64_t v230 = (char *)sub_5714((uint64_t)(v612 + 3260), v229);
                  unint64_t v222 = (unint64_t *)v220[3259];
                  uint64_t v12 = v220[3258];
                }
                else
                {
                  unint64_t v230 = 0;
                }
                unint64_t v308 = (unint64_t *)&v230[8 * v226];
                *unint64_t v308 = v67;
                unint64_t v224 = v308 + 1;
                while (v222 != (unint64_t *)v12)
                {
                  unint64_t v309 = *--v222;
                  *--unint64_t v308 = v309;
                }
                v220[3258] = v308;
                v220[3259] = v224;
                v220[3260] = &v230[8 * v229];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *unint64_t v222 = v67;
                unint64_t v224 = v222 + 1;
              }
              v220[3259] = v224;
              if (!(v67 % v221)) {
                v220[3264] = ((((void)v224 - v220[3258]) << 29) - 0x100000000) | (((v220[3256] - v220[3255]) >> 3)
              }
                                                                                    - 1);
              *(void *)(a1 + 72) = v67;
              *(void *)(a1 + 80) = v67;
              int v225 = v625 & 0xFFFFF;
            }
            *(_DWORD *)(a1 + 88) = v225;
LABEL_482:
            *(_DWORD *)(a1 + 96) = 0;
            unint64_t v310 = v612;
            uint64_t v311 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            unint64_t v312 = (uint64_t *)v612[3262];
            unint64_t v313 = v612[3263];
            if ((unint64_t)v312 >= v313)
            {
              uint64_t v315 = (void **)(v612 + 3261);
              uint64_t v316 = v612[3261];
              uint64_t v317 = ((uint64_t)v312 - v316) >> 3;
              if ((unint64_t)(v317 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v318 = v313 - v316;
              uint64_t v319 = v318 >> 2;
              if (v318 >> 2 <= (unint64_t)(v317 + 1)) {
                uint64_t v319 = v317 + 1;
              }
              if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v320 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v320 = v319;
              }
              if (v320) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v612 + 3263), v320);
              }
              else {
                uint64_t v12 = 0;
              }
              uint64_t v321 = (uint64_t *)(v12 + 8 * v317);
              uint64_t *v321 = v311;
              uint64_t v314 = v321 + 1;
              unint64_t v322 = (char *)v310[3262];
              uint64_t v323 = (char *)v310[3261];
              if (v322 != v323)
              {
                do
                {
                  uint64_t v324 = *((void *)v322 - 1);
                  v322 -= 8;
                  *--uint64_t v321 = v324;
                }
                while (v322 != v323);
                unint64_t v322 = (char *)*v315;
              }
              v310[3261] = v321;
              v310[3262] = v314;
              v310[3263] = v12 + 8 * v320;
              if (v322) {
                operator delete(v322);
              }
            }
            else
            {
              *unint64_t v312 = v311;
              uint64_t v314 = v312 + 1;
            }
            v310[3262] = v314;
            uint64_t v325 = *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 56) = *((void *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 64) = v325;
            *(_DWORD *)(a1 + 100) = v626;
            goto LABEL_856;
          case 4:
            unint64_t v29 = sub_12C18C();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1153;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "false";
              _os_log_error_impl(&def_1C1270, v29, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            goto LABEL_856;
          case 5:
            int v79 = v625;
            unsigned int v80 = BYTE4(v625);
            BOOL v81 = v625 == 1;
            if (v625 == 1) {
              unsigned int v82 = BYTE4(v625) & 7 | 0x60;
            }
            else {
              unsigned int v82 = BYTE4(v625);
            }
            if (v82 > 0x97) {
              goto LABEL_856;
            }
            char v83 = BYTE5(v625);
            unsigned int v84 = DWORD2(v625);
            uint64_t v85 = v571 + 224 * v82;
            if (!*(unsigned char *)(v85 + 216)) {
              goto LABEL_120;
            }
            if (*(unsigned char *)(v85 + 214))
            {
              sub_148550(a1, v612, *(unsigned __int8 *)(v85 + 36), 1);
LABEL_120:
              *(void *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                     - 1);
              memset(&__s1[16], 255, 20);
              __s1[36] = v82;
              char v621 = 0;
              memset(&__s1[40], 0, 64);
              long long v614 = 0u;
              long long v615 = 0u;
              long long __p = 0u;
              long long v617 = 0u;
              char v618 = 0;
              int v622 = 0;
              sub_C2204(v85, (uint64_t)__s1);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (*((void *)&v614 + 1))
              {
                *(void *)&long long v615 = *((void *)&v614 + 1);
                operator delete(*((void **)&v614 + 1));
              }
              if (*(void *)&__s1[88])
              {
                *(void *)&__s1[96] = *(void *)&__s1[88];
                operator delete(*(void **)&__s1[88]);
              }
              if (*(void *)&__s1[64])
              {
                *(void *)&__s1[72] = *(void *)&__s1[64];
                operator delete(*(void **)&__s1[64]);
              }
              uint64_t v12 = *(void *)&__s1[40];
              if (*(void *)&__s1[40])
              {
                *(void *)&__s1[48] = *(void *)&__s1[40];
                operator delete(*(void **)&__s1[40]);
              }
            }
            if (!*(unsigned char *)(v85 + 216)) {
              sub_8894();
            }
            *(unsigned char *)(v85 + 215) = v81;
            *(unsigned char *)(v85 + 214) = 1;
            *(unsigned char *)(v85 + 36) = v82;
            if (v79)
            {
              uint64_t v86 = *(void *)(a1 + 104);
              if (v86 == -1) {
                uint64_t v86 = 0;
              }
              *(void *)(a1 + 104) = v86 + 1;
              *(void *)(v85 + 16) = v86;
              uint64_t v87 = v560 + 16 * (v83 & 0x7F);
              *(void *)uint64_t v87 = v86;
              *(unsigned char *)(v87 + 8) = 1;
              unsigned int v80 = *(unsigned __int8 *)(v85 + 36);
            }
            else
            {
              *(unsigned char *)(v85 + 36) = v80;
              if (v84 <= 7)
              {
                unsigned int v185 = *(_DWORD *)(v562 + 12 * v84);
                *(_DWORD *)(v85 + 208) = v185;
                if (v185 <= 7)
                {
                  uint64_t v186 = v566 + 56 * v185;
                  if (*(unsigned char *)(v186 + 48)) {
                    *(_DWORD *)(v85 + 32) = *(_DWORD *)(v186 + 24);
                  }
                }
                uint64_t v187 = v560 + 16 * (*(unsigned char *)(v562 + 12 * v84 + 8) & 0x7F);
                if (*(unsigned char *)(v187 + 8)) {
                  *(void *)(v85 + 16) = *(void *)v187;
                }
                if (v84 - 4 <= 2)
                {
                  uint64_t v188 = v567 + 40 * (v84 - 4);
                  if (*(unsigned char *)(v188 + 32)) {
                    *(void *)(v85 + 24) = *(void *)(v188 + 16);
                  }
                }
              }
            }
            if (v80 < 0x60) {
              goto LABEL_273;
            }
            if (v80 >= 0x68)
            {
              if (v80 <= 0x97) {
                goto LABEL_856;
              }
            }
            else if (*(unsigned char *)(v85 + 215))
            {
              goto LABEL_856;
            }
LABEL_273:
            if (*(void *)(v565 + 48 * v82 + 40))
            {
              uint64_t v189 = v565 + 48 * v82;
              uint64_t v191 = *(void *)(v189 + 8);
              unint64_t v190 = (void *)(v189 + 8);
              if (*(unsigned char *)(*(void *)(*(void *)(v191 + ((v190[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v190[3] & 0x1FFLL))
                            + 32))
              {
                unint64_t v192 = sub_12C18C();
                if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__s1 = 136315650;
                  *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSu"
                                        "pport/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                  *(_WORD *)&__s1[12] = 1024;
                  *(_DWORD *)&__s1[14] = 1429;
                  *(_WORD *)&__s1[18] = 2080;
                  *(void *)&__s1[20] = "!pendingPositionsForClique.front()->cliqueStartSeen";
                  _os_log_error_impl(&def_1C1270, v192, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
                }
                if (sub_12C17C()) {
                  sub_12C184();
                }
              }
              *(unsigned char *)(*(void *)(*(void *)(*v190 + ((v190[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (v190[3] & 0x1FFLL))
                       + 32) = 1;
              *(unsigned char *)(v85 + 213) = 1;
              sub_199DDC(a1, v612);
            }
            goto LABEL_856;
          case 6:
            sub_148550(a1, v612, v625, 0);
            goto LABEL_856;
          case 7:
            if (DWORD1(v625) == 1)
            {
              uint64_t v74 = (*((void *)&v625 + 1) >> 5) & 0x7FFFFFFFFFFLL;
              uint64_t v75 = v563 + 16 * (BYTE8(v625) & 0x1F);
              *(void *)uint64_t v75 = v74;
              *(unsigned char *)(v75 + 8) = 1;
            }
            else
            {
              if (BYTE8(v625) == 255) {
                goto LABEL_856;
              }
              uint64_t v129 = v563 + 16 * BYTE8(v625);
              if (!*(unsigned char *)(v129 + 8)) {
                goto LABEL_856;
              }
              uint64_t v74 = *(void *)v129;
            }
            if (v625 <= 0x97uLL)
            {
              uint64_t v130 = v571 + 224 * v625;
              if (!*(unsigned char *)(v130 + 216))
              {
                *(void *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                char v621 = 0;
                memset(&__s1[40], 0, 64);
                long long v614 = 0u;
                long long v615 = 0u;
                long long __p = 0u;
                long long v617 = 0u;
                char v618 = 0;
                int v622 = 0;
                sub_C2204(v130, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v614 + 1))
                {
                  *(void *)&long long v615 = *((void *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                uint64_t v12 = *(void *)&__s1[40];
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
              }
              unint64_t v131 = *(void *)(v130 + 80);
              uint64_t v132 = *(uint64_t **)(v130 + 72);
              if ((unint64_t)v132 >= v131)
              {
                uint64_t v12 = *(void *)(v130 + 64);
                uint64_t v237 = ((uint64_t)v132 - v12) >> 3;
                if ((unint64_t)(v237 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v238 = v131 - v12;
                unint64_t v239 = (uint64_t)(v131 - v12) >> 2;
                if (v239 <= v237 + 1) {
                  unint64_t v239 = v237 + 1;
                }
                if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v240 = v239;
                }
                if (v240)
                {
                  unint64_t v241 = (char *)sub_5714(v130 + 80, v240);
                  uint64_t v12 = *(void *)(v130 + 64);
                  uint64_t v132 = *(uint64_t **)(v130 + 72);
                }
                else
                {
                  unint64_t v241 = 0;
                }
                unint64_t v333 = (uint64_t *)&v241[8 * v237];
                uint64_t *v333 = v74;
                uint64_t v133 = v333 + 1;
                while (v132 != (uint64_t *)v12)
                {
                  uint64_t v334 = *--v132;
                  *--unint64_t v333 = v334;
                }
                *(void *)(v130 + 64) = v333;
                *(void *)(v130 + 72) = v133;
                *(void *)(v130 + 80) = &v241[8 * v240];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v132 = v74;
                uint64_t v133 = v132 + 1;
              }
              *(void *)(v130 + 72) = v133;
            }
            goto LABEL_856;
          case 8:
            unint64_t v105 = (void *)(a1 + 41920);
            unint64_t v106 = *(char **)(a1 + 41936);
            unsigned int v107 = v625;
            unint64_t v108 = *(char **)(a1 + 41928);
            uint64_t v109 = v106 - v108;
            *(_OWORD *)__s1 = v625;
            *(_OWORD *)&__s1[16] = v626;
            __s1[32] = 0;
            __s1[40] = 0;
            unsigned __int8 v623 = 0;
            if (v106 == v108) {
              uint64_t v110 = 0;
            }
            else {
              uint64_t v110 = 2 * (v106 - v108) - 1;
            }
            unint64_t v111 = *(void *)(a1 + 41952);
            if (v110 != *(void *)(a1 + 41960) + v111) {
              goto LABEL_750;
            }
            BOOL v112 = v111 >= 0x10;
            unint64_t v113 = v111 - 16;
            if (v112)
            {
              unint64_t v105 = (void *)(a1 + 41920);
              *(void *)(a1 + 41952) = v113;
              uint64_t v116 = *(void *)v108;
              uint64_t v115 = v108 + 8;
              uint64_t v114 = v116;
              *(void *)(a1 + 41928) = v115;
              if (v106 == *(char **)(a1 + 41944))
              {
                unint64_t v117 = (char *)*v573;
                if (v115 <= *v573)
                {
                  if (v106 == v117) {
                    unint64_t v335 = 1;
                  }
                  else {
                    unint64_t v335 = (v106 - v117) >> 2;
                  }
                  if (v335 >> 61) {
LABEL_916:
                  }
                    sub_574C();
                  unint64_t v336 = (char *)operator new(8 * v335);
                  unint64_t v337 = &v336[8 * (v335 >> 2)];
                  uint64_t v338 = v106 - v115;
                  BOOL v532 = v106 == v115;
                  unint64_t v106 = v337;
                  if (!v532)
                  {
                    unint64_t v106 = &v337[v338 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v339 = 8 * (v338 >> 3);
                    unint64_t v340 = &v336[8 * (v335 >> 2)];
                    do
                    {
                      uint64_t v341 = *(void *)v115;
                      v115 += 8;
                      *(void *)unint64_t v340 = v341;
                      v340 += 8;
                      v339 -= 8;
                    }
                    while (v339);
                  }
                  unint64_t v105 = (void *)(a1 + 41920);
                  *unint64_t v573 = v336;
                  *(void *)(a1 + 41928) = v337;
                  *(void *)(a1 + 41936) = v106;
                  *(void *)(a1 + 41944) = &v336[8 * v335];
                  if (v117)
                  {
                    operator delete(v117);
                    unint64_t v106 = *(char **)(a1 + 41936);
                  }
                }
                else
                {
                  uint64_t v118 = (v115 - (unsigned char *)*v573) >> 3;
                  if (v118 >= -1) {
                    uint64_t v119 = v118 + 1;
                  }
                  else {
                    uint64_t v119 = v118 + 2;
                  }
                  unint64_t v120 = &v115[-8 * (v119 >> 1)];
                  int64_t v121 = v106 - v115;
                  unint64_t v105 = (void *)(a1 + 41920);
                  if (v106 != v115)
                  {
                    memmove(&v115[-8 * (v119 >> 1)], v115, v106 - v115);
                    unint64_t v106 = *(char **)(a1 + 41928);
                  }
                  uint64_t v122 = &v106[-8 * (v119 >> 1)];
                  unint64_t v106 = &v120[v121];
                  *(void *)(a1 + 41928) = v122;
                  *(void *)(a1 + 41936) = &v120[v121];
                }
              }
              *(void *)unint64_t v106 = v114;
              goto LABEL_749;
            }
            uint64_t v159 = v109 >> 3;
            uint64_t v160 = *(char **)(a1 + 41944);
            uint64_t v161 = (char *)*v573;
            uint64_t v162 = v160 - (unsigned char *)*v573;
            if (v109 >> 3 < (unint64_t)(v162 >> 3))
            {
              unint64_t v163 = operator new(0x1080uLL);
              unint64_t v164 = v163;
              if (v160 == v106)
              {
                if (v108 == v161)
                {
                  if (v106 == v108) {
                    unint64_t v434 = 1;
                  }
                  else {
                    unint64_t v434 = (v160 - v108) >> 2;
                  }
                  if (v434 >> 61) {
                    goto LABEL_916;
                  }
                  unint64_t v435 = (char *)operator new(8 * v434);
                  unint64_t v342 = &v435[(2 * v434 + 6) & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v436 = v342;
                  if (v106 != v108)
                  {
                    uint64_t v437 = 8 * v159;
                    unint64_t v438 = &v435[(2 * v434 + 6) & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v439 = v108;
                    unint64_t v436 = &v342[8 * v159];
                    do
                    {
                      uint64_t v440 = *(void *)v439;
                      v439 += 8;
                      *(void *)unint64_t v438 = v440;
                      v438 += 8;
                      v437 -= 8;
                    }
                    while (v437);
                  }
                  unint64_t v343 = (void *)(a1 + 41920);
                  *unint64_t v573 = v435;
                  *(void *)(a1 + 41928) = v342;
                  *(void *)(a1 + 41936) = v436;
                  *(void *)(a1 + 41944) = &v435[8 * v434];
                  if (v108)
                  {
                    operator delete(v108);
                    unint64_t v342 = *(char **)(a1 + 41928);
                  }
                }
                else
                {
                  unint64_t v342 = v108;
                  unint64_t v343 = (void *)(a1 + 41920);
                }
                *((void *)v342 - 1) = v164;
                int v442 = (char *)v343[1];
                uint64_t v441 = (char *)v343[2];
                v343[1] = v442 - 8;
                uint64_t v443 = *((void *)v442 - 1);
                v343[1] = v442;
                if (v441 == (char *)v343[3])
                {
                  uint64_t v444 = (char *)*v573;
                  if (v442 <= *v573)
                  {
                    if (v441 == v444) {
                      unint64_t v451 = 1;
                    }
                    else {
                      unint64_t v451 = (v441 - v444) >> 2;
                    }
                    if (v451 >> 61) {
                      goto LABEL_916;
                    }
                    uint64_t v452 = (char *)operator new(8 * v451);
                    unint64_t v453 = &v452[8 * (v451 >> 2)];
                    uint64_t v454 = v441 - v442;
                    BOOL v532 = v441 == v442;
                    uint64_t v441 = v453;
                    if (!v532)
                    {
                      uint64_t v441 = &v453[v454 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v455 = 8 * (v454 >> 3);
                      unint64_t v456 = &v452[8 * (v451 >> 2)];
                      do
                      {
                        uint64_t v457 = *(void *)v442;
                        v442 += 8;
                        *(void *)unint64_t v456 = v457;
                        v456 += 8;
                        v455 -= 8;
                      }
                      while (v455);
                    }
                    *unint64_t v573 = v452;
                    *(void *)(a1 + 41928) = v453;
                    *(void *)(a1 + 41936) = v441;
                    *(void *)(a1 + 41944) = &v452[8 * v451];
                    if (v444)
                    {
                      operator delete(v444);
                      uint64_t v441 = *(char **)(a1 + 41936);
                    }
                  }
                  else
                  {
                    unsigned int v445 = v107;
                    uint64_t v446 = (v442 - (unsigned char *)*v573) >> 3;
                    if (v446 >= -1) {
                      uint64_t v447 = v446 + 1;
                    }
                    else {
                      uint64_t v447 = v446 + 2;
                    }
                    uint64_t v448 = &v442[-8 * (v447 >> 1)];
                    int64_t v449 = v441 - v442;
                    if (v441 == v442)
                    {
                      uint64_t v450 = a1 + 41920;
                    }
                    else
                    {
                      memmove(&v442[-8 * (v447 >> 1)], v442, v441 - v442);
                      uint64_t v450 = a1 + 41920;
                      int v442 = *(char **)(a1 + 41928);
                    }
                    uint64_t v441 = &v448[v449];
                    *(void *)(v450 + 8) = &v442[-8 * (v447 >> 1)];
                    *(void *)(v450 + 16) = &v448[v449];
                    unsigned int v107 = v445;
                  }
                }
                *(void *)uint64_t v441 = v443;
              }
              else
              {
                *(void *)unint64_t v106 = v163;
              }
              unint64_t v105 = (void *)(a1 + 41920);
LABEL_749:
              v105[2] += 8;
              goto LABEL_750;
            }
            uint64_t v246 = v162 >> 2;
            if (v160 == v161) {
              unint64_t v247 = 1;
            }
            else {
              unint64_t v247 = v246;
            }
            if (v247 >> 61) {
              goto LABEL_916;
            }
            unint64_t v248 = (char *)operator new(8 * v247);
            unsigned int v557 = v107;
            uint64_t v249 = operator new(0x1080uLL);
            unint64_t v250 = &v248[8 * v159];
            uint64_t v251 = &v248[8 * v247];
            if (v159 == v247)
            {
              if (v109 < 1)
              {
                if (v106 == v108) {
                  unint64_t v418 = 1;
                }
                else {
                  unint64_t v418 = v109 >> 2;
                }
                if (v418 >> 61) {
                  sub_574C();
                }
                uint64_t v419 = (char *)operator new(8 * v418);
                unint64_t v250 = &v419[8 * (v418 >> 2)];
                uint64_t v251 = &v419[8 * v418];
                operator delete(v248);
                unint64_t v108 = *(char **)(a1 + 41928);
                unint64_t v106 = *(char **)(a1 + 41936);
                unint64_t v248 = v419;
              }
              else
              {
                unint64_t v252 = v159 + 2;
                if (v159 >= -1) {
                  unint64_t v252 = v159 + 1;
                }
                v250 -= 8 * (v252 >> 1);
              }
            }
            *(void *)unint64_t v250 = v249;
            int v420 = v250 + 8;
            if (v106 != v108)
            {
              do
              {
                if (v250 == v248)
                {
                  if (v420 >= v251)
                  {
                    if (v251 == v250) {
                      unint64_t v425 = 1;
                    }
                    else {
                      unint64_t v425 = (v251 - v250) >> 2;
                    }
                    if (v425 >> 61) {
                      sub_574C();
                    }
                    uint64_t v426 = (char *)operator new(8 * v425);
                    unint64_t v248 = v426;
                    uint64_t v421 = &v426[(2 * v425 + 6) & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v422 = v421;
                    uint64_t v427 = v420 - v250;
                    if (v420 != v250)
                    {
                      uint64_t v422 = &v421[v427 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v428 = 8 * (v427 >> 3);
                      unint64_t v429 = &v426[(2 * v425 + 6) & 0xFFFFFFFFFFFFFFF8];
                      int v430 = v250;
                      do
                      {
                        uint64_t v431 = *(void *)v430;
                        v430 += 8;
                        *(void *)unint64_t v429 = v431;
                        v429 += 8;
                        v428 -= 8;
                      }
                      while (v428);
                    }
                    uint64_t v251 = &v426[8 * v425];
                    operator delete(v250);
                  }
                  else
                  {
                    uint64_t v423 = (v251 - v420) >> 3;
                    if (v423 >= -1) {
                      unint64_t v424 = v423 + 1;
                    }
                    else {
                      unint64_t v424 = v423 + 2;
                    }
                    uint64_t v422 = &v420[8 * (v424 >> 1)];
                    uint64_t v421 = &v250[8 * (v424 >> 1)];
                    if (v420 == v250)
                    {
                      unint64_t v248 = v420;
                    }
                    else
                    {
                      memmove(&v250[8 * (v424 >> 1)], v250, v420 - v250);
                      unint64_t v248 = v250;
                    }
                  }
                }
                else
                {
                  uint64_t v421 = v250;
                  uint64_t v422 = v420;
                }
                uint64_t v432 = *((void *)v106 - 1);
                v106 -= 8;
                *((void *)v421 - 1) = v432;
                unint64_t v250 = v421 - 8;
                int v420 = v422;
              }
              while (v106 != *(char **)(a1 + 41928));
            }
            unint64_t v105 = (void *)(a1 + 41920);
            uint64_t v433 = *v573;
            *unint64_t v573 = v248;
            *(void *)(a1 + 41928) = v250;
            *(void *)(a1 + 41936) = v420;
            *(void *)(a1 + 41944) = v251;
            unsigned int v107 = v557;
            if (v433) {
              operator delete(v433);
            }
LABEL_750:
            unint64_t v458 = v105[5] + v105[4];
            uint64_t v459 = *(void *)(v105[1] + ((v458 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 264 * (v458 & 0xF);
            long long v460 = *(_OWORD *)__s1;
            long long v461 = *(_OWORD *)&__s1[16];
            *(unsigned char *)(v459 + 32) = __s1[32];
            *(_OWORD *)uint64_t v459 = v460;
            *(_OWORD *)(v459 + 16) = v461;
            *(unsigned char *)(v459 + 256) = 0;
            *(unsigned char *)(v459 + 40) = 0;
            uint64_t v12 = v459 + 40;
            if (v623)
            {
              sub_C22B0(v12, (long long *)&__s1[40]);
              int v462 = v623;
              ++v105[5];
              if (v462)
              {
                if (v619)
                {
                  unint64_t v620 = v619;
                  operator delete(v619);
                }
                if ((void)v617) {
                  operator delete((void *)v617);
                }
                if (*((void *)&v615 + 1)) {
                  operator delete(*((void **)&v615 + 1));
                }
                if ((void)v614) {
                  operator delete((void *)v614);
                }
                uint64_t v12 = *(void *)&__s1[80];
                if (*(void *)&__s1[80]) {
                  operator delete(*(void **)&__s1[80]);
                }
              }
            }
            else
            {
              ++v105[5];
            }
            if (v107 > 0x97) {
              goto LABEL_856;
            }
            uint64_t v463 = (uint64_t *)(v565 + 48 * v107);
            int v464 = (char *)v463[2];
            uint64_t v465 = (char *)v463[1];
            uint64_t v466 = ((v464 - v465) << 6) - 1;
            uint64_t v467 = v464 - v465;
            unint64_t v468 = *(void *)(a1 + 41960) + *(void *)(a1 + 41952) - 1;
            uint64_t v559 = *(void *)(*(void *)(a1 + 41928) + ((v468 >> 1) & 0x7FFFFFFFFFFFFFF8));
            unint64_t v470 = (unint64_t *)(v463 + 4);
            unint64_t v469 = v463[4];
            if (v464 == v465) {
              uint64_t v466 = 0;
            }
            uint64_t v471 = v463 + 5;
            if (v466 != v463[5] + v469) {
              goto LABEL_849;
            }
            BOOL v112 = v469 >= 0x200;
            unint64_t v472 = v469 - 512;
            if (v112)
            {
              char v473 = *(unsigned char *)(a1 + 41960) + *(unsigned char *)(a1 + 41952) - 1;
              unint64_t *v470 = v472;
              unint64_t v475 = *(void *)v465;
              unint64_t v474 = v465 + 8;
              unint64_t v468 = v475;
              v463[1] = (uint64_t)v474;
              if (v464 == (char *)v463[3])
              {
                uint64_t v476 = (char *)*v463;
                if ((unint64_t)v474 <= *v463)
                {
                  if (v464 == v476) {
                    unint64_t v494 = 1;
                  }
                  else {
                    unint64_t v494 = (v464 - v476) >> 2;
                  }
                  if (v494 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v494);
                  unint64_t v495 = v12 + 8 * (v494 >> 2);
                  unint64_t v496 = (char *)v495;
                  if (v464 != v474)
                  {
                    unint64_t v496 = (char *)(v495 + ((v464 - v474) & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v497 = 8 * ((v464 - v474) >> 3);
                    uint64_t v498 = (void *)(v12 + 8 * (v494 >> 2));
                    do
                    {
                      uint64_t v499 = *(void *)v474;
                      v474 += 8;
                      *v498++ = v499;
                      v497 -= 8;
                    }
                    while (v497);
                  }
                  *uint64_t v463 = v12;
                  v463[1] = v495;
                  v463[2] = (uint64_t)v496;
                  v463[3] = v12 + 8 * v494;
                  int v464 = v496;
                  unint64_t v470 = (unint64_t *)(v463 + 4);
                  if (v476)
                  {
                    operator delete(v476);
                    int v464 = (char *)v463[2];
                  }
                }
                else
                {
                  uint64_t v477 = (uint64_t)&v474[-*v463] >> 3;
                  if (v477 >= -1) {
                    uint64_t v478 = v477 + 1;
                  }
                  else {
                    uint64_t v478 = v477 + 2;
                  }
                  uint64_t v479 = &v474[-8 * (v478 >> 1)];
                  int64_t v480 = v464 - v474;
                  if (v464 != v474)
                  {
                    uint64_t v12 = (uint64_t)memmove(&v474[-8 * (v478 >> 1)], v474, v464 - v474);
                    int v464 = (char *)v463[1];
                  }
                  unint64_t v481 = &v464[-8 * (v478 >> 1)];
                  int v464 = &v479[v480];
                  v463[1] = (uint64_t)v481;
                  v463[2] = (uint64_t)&v479[v480];
                  uint64_t v471 = v463 + 5;
                  unint64_t v470 = (unint64_t *)(v463 + 4);
                }
              }
              *(void *)int v464 = v468;
              v463[2] += 8;
              LOBYTE(v468) = v473;
            }
            else
            {
              uint64_t v482 = v467 >> 3;
              uint64_t v483 = (char *)v463[3];
              unint64_t v484 = (char *)*v463;
              uint64_t v485 = (uint64_t)&v483[-*v463];
              uint64_t v556 = *(void *)(a1 + 41960) + *(void *)(a1 + 41952) - 1;
              if (v467 >> 3 < (unint64_t)(v485 >> 3))
              {
                unsigned int v486 = v107;
                uint64_t v12 = (uint64_t)operator new(0x1000uLL);
                uint64_t v487 = v12;
                if (v483 != v464)
                {
                  *(void *)int v464 = v12;
                  unint64_t v470 = (unint64_t *)(v463 + 4);
                  LOBYTE(v468) = v556;
LABEL_848:
                  v463[2] += 8;
                  uint64_t v471 = v463 + 5;
                  goto LABEL_849;
                }
                if (v465 == v484)
                {
                  if (v464 == v465) {
                    unint64_t v516 = 1;
                  }
                  else {
                    unint64_t v516 = (v483 - v465) >> 2;
                  }
                  if (v516 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v516);
                  unint64_t v500 = (char *)(v12 + 8 * ((v516 + 3) >> 2));
                  unint64_t v517 = v500;
                  if (v464 != v465)
                  {
                    uint64_t v518 = 8 * v482;
                    unint64_t v519 = (void *)(v12 + 8 * ((v516 + 3) >> 2));
                    uint64_t v520 = v465;
                    unint64_t v517 = &v500[8 * v482];
                    do
                    {
                      uint64_t v521 = *(void *)v520;
                      v520 += 8;
                      *v519++ = v521;
                      v518 -= 8;
                    }
                    while (v518);
                  }
                  *uint64_t v463 = v12;
                  v463[1] = (uint64_t)v500;
                  v463[2] = (uint64_t)v517;
                  v463[3] = v12 + 8 * v516;
                  if (v465)
                  {
                    operator delete(v465);
                    unint64_t v500 = (char *)v463[1];
                  }
                }
                else
                {
                  unint64_t v500 = v465;
                }
                *((void *)v500 - 1) = v487;
                uint64_t v523 = (char *)v463[1];
                unsigned int v522 = (char *)v463[2];
                v463[1] = (uint64_t)(v523 - 8);
                uint64_t v524 = *((void *)v523 - 1);
                v463[1] = (uint64_t)v523;
                unint64_t v470 = (unint64_t *)(v463 + 4);
                if (v522 == (char *)v463[3])
                {
                  unint64_t v525 = (char *)*v463;
                  if ((unint64_t)v523 > *v463)
                  {
                    uint64_t v526 = (uint64_t)&v523[-*v463] >> 3;
                    if (v526 >= -1) {
                      uint64_t v527 = v526 + 1;
                    }
                    else {
                      uint64_t v527 = v526 + 2;
                    }
                    unint64_t v528 = &v523[-8 * (v527 >> 1)];
                    int64_t v529 = v522 - v523;
                    if (v522 != v523)
                    {
                      uint64_t v12 = (uint64_t)memmove(&v523[-8 * (v527 >> 1)], v523, v522 - v523);
                      uint64_t v523 = (char *)v463[1];
                    }
                    unsigned int v522 = &v528[v529];
                    v463[1] = (uint64_t)&v523[-8 * (v527 >> 1)];
                    v463[2] = (uint64_t)&v528[v529];
                    unsigned int v107 = v486;
                    goto LABEL_846;
                  }
                  if (v522 == v525) {
                    unint64_t v468 = 1;
                  }
                  else {
                    unint64_t v468 = (v522 - v525) >> 2;
                  }
                  if (v468 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v468);
                  unint64_t v535 = v12 + 8 * (v468 >> 2);
                  unint64_t v536 = (char *)v535;
                  unint64_t v470 = (unint64_t *)(v463 + 4);
                  if (v522 != v523)
                  {
                    unint64_t v536 = (char *)(v535 + ((v522 - v523) & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v537 = 8 * ((v522 - v523) >> 3);
                    unint64_t v538 = (void *)(v12 + 8 * (v468 >> 2));
                    do
                    {
                      uint64_t v539 = *(void *)v523;
                      v523 += 8;
                      *v538++ = v539;
                      v537 -= 8;
                    }
                    while (v537);
                  }
                  *uint64_t v463 = v12;
                  v463[1] = v535;
                  v463[2] = (uint64_t)v536;
                  v463[3] = v12 + 8 * v468;
                  unsigned int v522 = v536;
                  LOBYTE(v468) = v556;
                  if (v525)
                  {
                    operator delete(v525);
                    unsigned int v522 = (char *)v463[2];
                  }
                }
                else
                {
LABEL_846:
                  LOBYTE(v468) = v556;
                }
                *(void *)unsigned int v522 = v524;
                goto LABEL_848;
              }
              unsigned int v558 = v107;
              uint64_t v488 = v485 >> 2;
              if (v483 == v484) {
                unint64_t v489 = 1;
              }
              else {
                unint64_t v489 = v488;
              }
              if (v489 >> 61) {
                sub_574C();
              }
              uint64_t v490 = (char *)operator new(8 * v489);
              unint64_t v491 = operator new(0x1000uLL);
              unint64_t v492 = &v490[8 * v482];
              unint64_t v468 = (unint64_t)&v490[8 * v489];
              if (v482 == v489)
              {
                uint64_t v555 = v491;
                unint64_t v470 = (unint64_t *)(v463 + 4);
                if (v467 < 1)
                {
                  if (v464 == v465) {
                    unint64_t v501 = 1;
                  }
                  else {
                    unint64_t v501 = v467 >> 2;
                  }
                  if (v501 >> 61) {
                    sub_574C();
                  }
                  unint64_t v502 = (char *)operator new(8 * v501);
                  unint64_t v492 = &v502[8 * (v501 >> 2)];
                  unint64_t v468 = (unint64_t)&v502[8 * v501];
                  operator delete(v490);
                  uint64_t v465 = (char *)v463[1];
                  int v464 = (char *)v463[2];
                  uint64_t v490 = v502;
                }
                else
                {
                  unint64_t v493 = v482 + 2;
                  if (v482 >= -1) {
                    unint64_t v493 = v482 + 1;
                  }
                  v492 -= 8 * (v493 >> 1);
                }
                unint64_t v491 = v555;
              }
              else
              {
                unint64_t v470 = (unint64_t *)(v463 + 4);
              }
              *(void *)unint64_t v492 = v491;
              unint64_t v503 = v492 + 8;
              if (v464 != v465)
              {
                do
                {
                  if (v492 == v490)
                  {
                    if ((unint64_t)v503 >= v468)
                    {
                      if ((char *)v468 == v492) {
                        unint64_t v508 = 1;
                      }
                      else {
                        unint64_t v508 = (uint64_t)(v468 - (void)v492) >> 2;
                      }
                      if (v508 >> 61) {
                        sub_574C();
                      }
                      uint64_t v509 = (char *)operator new(8 * v508);
                      uint64_t v490 = v509;
                      unint64_t v504 = &v509[(2 * v508 + 6) & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v505 = v504;
                      uint64_t v510 = v503 - v492;
                      if (v503 != v492)
                      {
                        uint64_t v505 = &v504[v510 & 0xFFFFFFFFFFFFFFF8];
                        uint64_t v511 = 8 * (v510 >> 3);
                        uint64_t v512 = &v509[(2 * v508 + 6) & 0xFFFFFFFFFFFFFFF8];
                        unint64_t v513 = v492;
                        do
                        {
                          uint64_t v514 = *(void *)v513;
                          v513 += 8;
                          *(void *)uint64_t v512 = v514;
                          v512 += 8;
                          v511 -= 8;
                        }
                        while (v511);
                      }
                      unint64_t v468 = (unint64_t)&v509[8 * v508];
                      operator delete(v492);
                    }
                    else
                    {
                      uint64_t v506 = (uint64_t)(v468 - (void)v503) >> 3;
                      if (v506 >= -1) {
                        unint64_t v507 = v506 + 1;
                      }
                      else {
                        unint64_t v507 = v506 + 2;
                      }
                      uint64_t v505 = &v503[8 * (v507 >> 1)];
                      unint64_t v504 = &v492[8 * (v507 >> 1)];
                      if (v503 == v492)
                      {
                        uint64_t v490 = v503;
                      }
                      else
                      {
                        memmove(&v492[8 * (v507 >> 1)], v492, v503 - v492);
                        uint64_t v490 = v492;
                      }
                    }
                  }
                  else
                  {
                    unint64_t v504 = v492;
                    uint64_t v505 = v503;
                  }
                  uint64_t v515 = *((void *)v464 - 1);
                  v464 -= 8;
                  *((void *)v504 - 1) = v515;
                  unint64_t v492 = v504 - 8;
                  unint64_t v503 = v505;
                }
                while (v464 != (char *)v463[1]);
              }
              uint64_t v12 = *v463;
              *uint64_t v463 = (uint64_t)v490;
              v463[1] = (uint64_t)v492;
              v463[2] = (uint64_t)v503;
              v463[3] = v468;
              unsigned int v107 = v558;
              LOBYTE(v468) = v556;
              uint64_t v471 = v463 + 5;
              if (v12) {
                operator delete((void *)v12);
              }
            }
LABEL_849:
            uint64_t v530 = *v471;
            *(void *)(*(void *)(v463[1] + (((*v470 + *v471) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*v470 + *v471) & 0x1FF)) = v559 + 264 * (v468 & 0xF);
            *uint64_t v471 = v530 + 1;
            uint64_t v531 = (unsigned __int8 *)(v571 + 224 * v107);
            if (v531[216]) {
              BOOL v532 = v531[214] == 0;
            }
            else {
              BOOL v532 = 1;
            }
            if (v532 || v531[213]) {
              goto LABEL_856;
            }
            unsigned int v533 = v531[36];
            if (v533 < 0x60) {
              goto LABEL_855;
            }
            if (v533 >= 0x68)
            {
              if (v533 >= 0x98)
              {
LABEL_855:
                unint64_t v534 = *(void *)(a1 + 41960) + *(void *)(a1 + 41952) - 1;
                *(unsigned char *)(*(void *)(*(void *)(a1 + 41928) + ((v534 >> 1) & 0x7FFFFFFFFFFFFFF8))
                         + 264 * (v534 & 0xF)
                         + 32) = 1;
                v531[213] = 1;
                sub_199DDC(a1, v612);
              }
            }
            else if (!v531[215])
            {
              goto LABEL_855;
            }
LABEL_856:
            ++v577;
            unint64_t v14 = v611;
            uint64_t v13 = 8 * a3;
            if (v611 >= 8 * a3) {
              goto LABEL_875;
            }
            break;
          case 9:
            if (v625 <= 0x97uLL)
            {
              uint64_t v39 = v571 + 224 * v625;
              unint64_t v40 = v612;
              if (!*(unsigned char *)(v39 + 216))
              {
                *(void *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                char v621 = 0;
                memset(&__s1[40], 0, 64);
                long long v614 = 0u;
                long long v615 = 0u;
                long long __p = 0u;
                long long v617 = 0u;
                char v618 = 0;
                int v622 = 0;
                sub_C2204(v39, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v614 + 1))
                {
                  *(void *)&long long v615 = *((void *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                unint64_t v40 = v612;
              }
              int v41 = DWORD1(v625);
              sub_47ECC((void *)(v39 + 40), v40);
              sub_48030((void *)(v39 + 40), 1);
              unint64_t v42 = *(void *)(v39 + 104);
              unint64_t v43 = *(_DWORD **)(v39 + 96);
              if ((unint64_t)v43 >= v42)
              {
                uint64_t v12 = *(void *)(v39 + 88);
                uint64_t v165 = ((uint64_t)v43 - v12) >> 2;
                if ((unint64_t)(v165 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v166 = v42 - v12;
                unint64_t v167 = (uint64_t)(v42 - v12) >> 1;
                if (v167 <= v165 + 1) {
                  unint64_t v167 = v165 + 1;
                }
                if (v166 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v168 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v168 = v167;
                }
                if (v168)
                {
                  unint64_t v169 = (char *)sub_458C8(v39 + 104, v168);
                  uint64_t v12 = *(void *)(v39 + 88);
                  unint64_t v43 = *(_DWORD **)(v39 + 96);
                }
                else
                {
                  unint64_t v169 = 0;
                }
                unint64_t v278 = &v169[4 * v165];
                *(_DWORD *)unint64_t v278 = v41;
                unint64_t v44 = v278 + 4;
                while (v43 != (_DWORD *)v12)
                {
                  int v279 = *--v43;
                  *((_DWORD *)v278 - 1) = v279;
                  v278 -= 4;
                }
                *(void *)(v39 + 88) = v278;
                *(void *)(v39 + 96) = v44;
                *(void *)(v39 + 104) = &v169[4 * v168];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *unint64_t v43 = v41;
                unint64_t v44 = v43 + 1;
              }
              *(void *)(v39 + 96) = v44;
            }
            goto LABEL_856;
          case 0xA:
            unint64_t v95 = v612[3264];
            uint64_t v96 = v625;
            *(_DWORD *)__s1 = v625;
            uint64_t v97 = &v612[3 * v625];
            unint64_t v98 = (unint64_t *)v97[3097];
            unint64_t v99 = (unint64_t *)v97[3098];
            if (v98 == v99
              || (unint64_t v100 = v625,
                  *(void *)(v612[3258] + ((v95 >> 29) & 0x7FFFFFFF8))
                - *(void *)(v612[3258] + ((*(v99 - 1) >> 29) & 0x7FFFFFFF8)) >= (unint64_t)*(unsigned int *)(a1 + 32)))
            {
              uint64_t v101 = (void **)(v97 + 3098);
              unint64_t v102 = &v612[3 * v625];
              unint64_t v103 = v102[3099];
              if ((unint64_t)v99 >= v103)
              {
                unint64_t v153 = (void **)(v97 + 3097);
                uint64_t v154 = v99 - v98;
                if ((unint64_t)(v154 + 1) >> 61) {
                  sub_566C();
                }
                uint64_t v155 = v102 + 3099;
                uint64_t v156 = v103 - (void)v98;
                uint64_t v157 = v156 >> 2;
                if (v156 >> 2 <= (unint64_t)(v154 + 1)) {
                  uint64_t v157 = v154 + 1;
                }
                if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v158 = v157;
                }
                if (v158) {
                  uint64_t v12 = (uint64_t)sub_5714((uint64_t)v155, v158);
                }
                else {
                  uint64_t v12 = 0;
                }
                unint64_t v242 = (unint64_t *)(v12 + 8 * v154);
                unint64_t *v242 = v95;
                unint64_t v104 = v242 + 1;
                uint64_t v243 = (char *)*v101;
                unint64_t v244 = (char *)*v153;
                if (*v101 != *v153)
                {
                  do
                  {
                    unint64_t v245 = *((void *)v243 - 1);
                    v243 -= 8;
                    *--unint64_t v242 = v245;
                  }
                  while (v243 != v244);
                  uint64_t v243 = (char *)*v153;
                }
                *unint64_t v153 = v242;
                char *v101 = v104;
                *uint64_t v155 = v12 + 8 * v158;
                if (v243) {
                  operator delete(v243);
                }
              }
              else
              {
                *unint64_t v99 = v95;
                unint64_t v104 = v99 + 1;
              }
              char *v101 = v104;
              unint64_t v100 = *(unsigned int *)__s1;
              if (*(_DWORD *)__s1 <= 0xFu) {
                *(unsigned char *)(v564 + *(unsigned int *)__s1) = 0;
              }
            }
            if (*(void *)(a1 + 136) == *(void *)(a1 + 144))
            {
              switch(v96)
              {
                case 0:
                  v609[0] = a1;
                  v609[1] = (uint64_t)&v612;
                  v609[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_19A338(v609, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 1:
                  v608[0] = a1;
                  v608[1] = (uint64_t)&v612;
                  v608[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_19C7E0(v608, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 2:
                  v607[0] = a1;
                  v607[1] = (uint64_t)&v612;
                  v607[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_152DDC(v607, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 3:
                  v606[0] = a1;
                  v606[1] = (uint64_t)&v612;
                  v606[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_156178(v606, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 4:
                  v605[0] = a1;
                  v605[1] = (uint64_t)&v612;
                  v605[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_157644(v605, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 5:
                  v604[0] = a1;
                  v604[1] = (uint64_t)&v612;
                  v604[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_19D8D8(v604, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 6:
                  v603[0] = a1;
                  v603[1] = (uint64_t)&v612;
                  v603[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_19DFF8(v603, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 7:
                  v602[0] = a1;
                  v602[1] = (uint64_t)&v612;
                  v602[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A01A4(v602, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 8:
                  v601[0] = a1;
                  v601[1] = (uint64_t)&v612;
                  v601[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_15D53C(v601, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 9:
                  v600[0] = a1;
                  v600[1] = (uint64_t)&v612;
                  v600[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_15DD98(v600, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 10:
                  v599[0] = a1;
                  v599[1] = (uint64_t)&v612;
                  v599[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_161134(v599, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 11:
                  v598[0] = a1;
                  v598[1] = (uint64_t)&v612;
                  v598[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_161CD0(v598, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 12:
                  v597[0] = a1;
                  v597[1] = (uint64_t)&v612;
                  v597[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A21A8(v597, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 13:
                  v596[0] = a1;
                  v596[1] = (uint64_t)&v612;
                  v596[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A2EC4(v596, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 14:
                  v595[0] = a1;
                  v595[1] = (uint64_t)&v612;
                  v595[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A471C(v595, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 15:
                  v594[0] = a1;
                  v594[1] = (uint64_t)&v612;
                  v594[2] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A4DFC(v594, (unsigned char *)(v564 + v100));
                  }
                  break;
                default:
                  goto LABEL_856;
              }
            }
            else
            {
              switch(v96)
              {
                case 0:
                  v593[0] = a1;
                  v593[1] = (uint64_t)__s1;
                  v593[2] = (uint64_t)&v612;
                  v593[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A5F0C(v593, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 1:
                  v592[0] = a1;
                  v592[1] = (uint64_t)__s1;
                  v592[2] = (uint64_t)&v612;
                  v592[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A7460(v592, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 2:
                  v591[0] = a1;
                  v591[1] = (uint64_t)__s1;
                  v591[2] = (uint64_t)&v612;
                  v591[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A7ED8(v591, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 3:
                  v590[0] = a1;
                  v590[1] = (uint64_t)__s1;
                  v590[2] = (uint64_t)&v612;
                  v590[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1A9CA0(v590, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 4:
                  v589[0] = a1;
                  v589[1] = (uint64_t)__s1;
                  v589[2] = (uint64_t)&v612;
                  v589[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1AA900(v589, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 5:
                  v588[0] = a1;
                  v588[1] = (uint64_t)__s1;
                  v588[2] = (uint64_t)&v612;
                  v588[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1AB758(v588, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 6:
                  v587[0] = a1;
                  v587[1] = (uint64_t)__s1;
                  v587[2] = (uint64_t)&v612;
                  v587[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1ABC58(v587, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 7:
                  v586[0] = a1;
                  v586[1] = (uint64_t)__s1;
                  v586[2] = (uint64_t)&v612;
                  v586[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1ACFD0(v586, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 8:
                  v585[0] = a1;
                  v585[1] = (uint64_t)__s1;
                  v585[2] = (uint64_t)&v612;
                  v585[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1AE2A4(v585, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 9:
                  v584[0] = a1;
                  v584[1] = (uint64_t)__s1;
                  v584[2] = (uint64_t)&v612;
                  v584[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1AE844(v584, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 10:
                  v583[0] = a1;
                  v583[1] = (uint64_t)__s1;
                  v583[2] = (uint64_t)&v612;
                  v583[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1B060C(v583, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 11:
                  v582[0] = a1;
                  v582[1] = (uint64_t)__s1;
                  v582[2] = (uint64_t)&v612;
                  v582[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_171E60(v582, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 12:
                  v581[0] = a1;
                  v581[1] = (uint64_t)__s1;
                  v581[2] = (uint64_t)&v612;
                  v581[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1B0D74(v581, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 13:
                  v580[0] = a1;
                  v580[1] = (uint64_t)__s1;
                  v580[2] = (uint64_t)&v612;
                  v580[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1B15AC(v580, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 14:
                  v579[0] = a1;
                  v579[1] = (uint64_t)__s1;
                  v579[2] = (uint64_t)&v612;
                  v579[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1B240C(v579, (unsigned char *)(v564 + v100));
                  }
                  break;
                case 15:
                  v578[0] = a1;
                  v578[1] = (uint64_t)__s1;
                  v578[2] = (uint64_t)&v612;
                  v578[3] = (uint64_t)v624;
                  if (v100 <= 0xF) {
                    sub_1B28DC(v578, (unsigned char *)(v564 + v100));
                  }
                  break;
                default:
                  goto LABEL_856;
              }
            }
            goto LABEL_856;
          case 0xB:
            unsigned int v26 = v625;
            if (v625 > 7)
            {
              int v27 = 0;
              __int16 v28 = -1;
            }
            else
            {
              int v27 = dword_4C792C[(int)v625];
              __int16 v28 = word_4C7D30[(int)v625];
            }
            uint64_t v123 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            uint64_t v124 = *((void *)&v625 + 1);
            if (*(_DWORD *)(a1 + 120) == -1) {
              int v125 = 0;
            }
            else {
              int v125 = *(_DWORD *)(a1 + 120);
            }
            *(_DWORD *)(a1 + 120) = v125 + 1;
            if (v26 > 7) {
              goto LABEL_252;
            }
            uint64_t v126 = v566 + 56 * v26;
            if (!*(unsigned char *)(v126 + 48))
            {
              *(void *)uint64_t v126 = v123;
              *(void *)(v126 + 16) = v124;
              *(_DWORD *)(v126 + 24) = v125;
              *(_DWORD *)(v126 + 28) = v27;
              *(_WORD *)(v126 + 32) = v28;
              *(void *)(v126 + 40) = 0;
LABEL_251:
              *(unsigned char *)(v126 + 48) = 1;
              goto LABEL_252;
            }
            unint64_t v127 = sub_12C18C();
            if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1206;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "!currentKick";
              _os_log_error_impl(&def_1C1270, v127, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            int v128 = *(unsigned __int8 *)(v126 + 48);
            *(void *)uint64_t v126 = v123;
            *(void *)(v126 + 16) = v124;
            *(_DWORD *)(v126 + 24) = v125;
            *(_DWORD *)(v126 + 28) = v27;
            *(_WORD *)(v126 + 32) = v28;
            *(void *)(v126 + 40) = 0;
            if (!v128) {
              goto LABEL_251;
            }
LABEL_252:
            if ((v568 & 2) != 0)
            {
              unint64_t v175 = v612;
              unint64_t v176 = (uint64_t *)v612[2];
              uint64_t v12 = (uint64_t)(v612 + 3);
              unint64_t v177 = v612[3];
              if ((unint64_t)v176 >= v177)
              {
                uint64_t v179 = (void **)(v612 + 1);
                uint64_t v180 = v612[1];
                uint64_t v181 = ((uint64_t)v176 - v180) >> 3;
                if ((unint64_t)(v181 + 1) >> 61) {
                  sub_566C();
                }
                uint64_t v182 = v177 - v180;
                uint64_t v183 = v182 >> 2;
                if (v182 >> 2 <= (unint64_t)(v181 + 1)) {
                  uint64_t v183 = v181 + 1;
                }
                if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v184 = v183;
                }
                if (v184) {
                  uint64_t v12 = (uint64_t)sub_5714(v12, v184);
                }
                else {
                  uint64_t v12 = 0;
                }
                unint64_t v253 = (uint64_t *)(v12 + 8 * v181);
                uint64_t *v253 = v123;
                unint64_t v178 = v253 + 1;
                uint64_t v255 = (char *)v175[1];
                unint64_t v254 = (char *)v175[2];
                if (v254 != v255)
                {
                  do
                  {
                    uint64_t v256 = *((void *)v254 - 1);
                    v254 -= 8;
                    *--unint64_t v253 = v256;
                  }
                  while (v254 != v255);
                  unint64_t v254 = (char *)*v179;
                }
                v175[1] = v253;
                v175[2] = v178;
                v175[3] = v12 + 8 * v184;
                if (v254) {
                  operator delete(v254);
                }
              }
              else
              {
                *unint64_t v176 = v123;
                unint64_t v178 = v176 + 1;
              }
              v175[2] = v178;
              uint64_t v257 = v612;
              unint64_t v258 = (_DWORD *)v612[14];
              unint64_t v259 = v612[15];
              if ((unint64_t)v258 >= v259)
              {
                uint64_t v12 = v612[13];
                uint64_t v261 = ((uint64_t)v258 - v12) >> 2;
                if ((unint64_t)(v261 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v262 = v259 - v12;
                unint64_t v263 = (uint64_t)(v259 - v12) >> 1;
                if (v263 <= v261 + 1) {
                  unint64_t v263 = v261 + 1;
                }
                if (v262 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v264 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v264 = v263;
                }
                if (v264)
                {
                  unint64_t v265 = (char *)sub_458C8((uint64_t)(v612 + 15), v264);
                  uint64_t v12 = v257[13];
                  unint64_t v258 = (_DWORD *)v257[14];
                }
                else
                {
                  unint64_t v265 = 0;
                }
                unint64_t v266 = &v265[4 * v261];
                *(_DWORD *)unint64_t v266 = v125;
                unint64_t v260 = v266 + 4;
                while (v258 != (_DWORD *)v12)
                {
                  int v267 = *--v258;
                  *((_DWORD *)v266 - 1) = v267;
                  v266 -= 4;
                }
                v257[13] = v266;
                v257[14] = v260;
                v257[15] = &v265[4 * v264];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *unint64_t v258 = v125;
                unint64_t v260 = v258 + 1;
              }
              v257[14] = v260;
              unint64_t v268 = v612;
              uint64_t v269 = (__int16 *)v612[20];
              unint64_t v270 = v612[21];
              if ((unint64_t)v269 >= v270)
              {
                uint64_t v12 = v612[19];
                uint64_t v272 = (uint64_t)v269 - v12;
                if ((uint64_t)v269 - v12 <= -3) {
                  sub_566C();
                }
                uint64_t v273 = v272 >> 1;
                unint64_t v274 = v270 - v12;
                if (v274 <= (v272 >> 1) + 1) {
                  unint64_t v275 = v273 + 1;
                }
                else {
                  unint64_t v275 = v274;
                }
                if (v274 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v276 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v276 = v275;
                }
                if (v276)
                {
                  unint64_t v277 = (char *)sub_45900((uint64_t)(v612 + 21), v276);
                  uint64_t v12 = v268[19];
                  uint64_t v269 = (__int16 *)v268[20];
                }
                else
                {
                  unint64_t v277 = 0;
                }
                unint64_t v284 = (__int16 *)&v277[2 * v273];
                *unint64_t v284 = v28;
                unint64_t v271 = v284 + 1;
                while (v269 != (__int16 *)v12)
                {
                  __int16 v285 = *--v269;
                  *--unint64_t v284 = v285;
                }
                v268[19] = v284;
                v268[20] = v271;
                v268[21] = &v277[2 * v276];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v269 = v28;
                unint64_t v271 = v269 + 1;
              }
              v268[20] = v271;
              unint64_t v286 = v612;
              uint64_t v287 = (_DWORD *)v612[17];
              unint64_t v288 = v612[18];
              if ((unint64_t)v287 >= v288)
              {
                uint64_t v12 = v612[16];
                uint64_t v290 = ((uint64_t)v287 - v12) >> 2;
                if ((unint64_t)(v290 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v291 = v288 - v12;
                unint64_t v292 = (uint64_t)(v288 - v12) >> 1;
                if (v292 <= v290 + 1) {
                  unint64_t v292 = v290 + 1;
                }
                if (v291 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v293 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v293 = v292;
                }
                if (v293)
                {
                  unint64_t v294 = (char *)sub_458C8((uint64_t)(v612 + 18), v293);
                  uint64_t v12 = v286[16];
                  uint64_t v287 = (_DWORD *)v286[17];
                }
                else
                {
                  unint64_t v294 = 0;
                }
                uint64_t v295 = &v294[4 * v290];
                *(_DWORD *)uint64_t v295 = v27;
                uint64_t v289 = v295 + 4;
                while (v287 != (_DWORD *)v12)
                {
                  int v296 = *--v287;
                  *((_DWORD *)v295 - 1) = v296;
                  v295 -= 4;
                }
                v286[16] = v295;
                v286[17] = v289;
                v286[18] = &v294[4 * v293];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v287 = v27;
                uint64_t v289 = v287 + 1;
              }
              v286[17] = v289;
              uint64_t v297 = v612;
              unint64_t v298 = (void *)v612[8];
              unint64_t v299 = v612[9];
              if ((unint64_t)v298 >= v299)
              {
                uint64_t v12 = v612[7];
                uint64_t v301 = ((uint64_t)v298 - v12) >> 3;
                if ((unint64_t)(v301 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v302 = v299 - v12;
                unint64_t v303 = (uint64_t)(v299 - v12) >> 2;
                if (v303 <= v301 + 1) {
                  unint64_t v303 = v301 + 1;
                }
                if (v302 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v304 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v304 = v303;
                }
                if (v304)
                {
                  uint64_t v305 = (char *)sub_5714((uint64_t)(v612 + 9), v304);
                  uint64_t v12 = v297[7];
                  unint64_t v298 = (void *)v297[8];
                }
                else
                {
                  uint64_t v305 = 0;
                }
                unint64_t v306 = &v305[8 * v301];
                *(void *)unint64_t v306 = v124;
                unint64_t v300 = v306 + 8;
                while (v298 != (void *)v12)
                {
                  uint64_t v307 = *--v298;
                  *((void *)v306 - 1) = v307;
                  v306 -= 8;
                }
                v297[7] = v306;
                v297[8] = v300;
                v297[9] = &v305[8 * v304];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                void *v298 = v124;
                unint64_t v300 = v298 + 1;
              }
              v297[8] = v300;
            }
            goto LABEL_856;
          case 0xC:
            if (v625 <= 7)
            {
              uint64_t v30 = v566 + 56 * v625;
              if (*(unsigned char *)(v30 + 48))
              {
                uint64_t v31 = 0;
                *(void *)(v30 + 8) = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                            - 1);
                *(void *)(v30 + 40) = 0;
                *(_WORD *)(v30 + 40) = WORD2(v625);
                uint64_t v32 = a1 + 192;
                do
                {
                  if (*(unsigned char *)(v32 + 184) && *(_DWORD *)v32 == *(_DWORD *)(v30 + 24)) {
                    sub_148550(a1, v612, v31, 1);
                  }
                  ++v31;
                  v32 += 224;
                }
                while (v31 != 152);
                uint64_t v33 = 0;
                unint64_t v34 = (unsigned char *)(a1 + 34688);
                do
                {
                  if (*v34 && *((_DWORD *)v34 - 2) == *(_DWORD *)(v30 + 24)) {
                    sub_B960C(a1, v612, v33);
                  }
                  ++v33;
                  v34 += 40;
                }
                while (v33 != 16);
                if ((v568 & 2) == 0)
                {
                  int v35 = v612;
                  uint64_t v36 = (void *)v612[2];
                  unint64_t v37 = v612[3];
                  if ((unint64_t)v36 >= v37)
                  {
                    int v326 = (void **)(v612 + 1);
                    uint64_t v327 = v612[1];
                    uint64_t v328 = ((uint64_t)v36 - v327) >> 3;
                    if ((unint64_t)(v328 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v329 = v37 - v327;
                    uint64_t v330 = v329 >> 2;
                    if (v329 >> 2 <= (unint64_t)(v328 + 1)) {
                      uint64_t v330 = v328 + 1;
                    }
                    if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v331 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v331 = v330;
                    }
                    if (v331) {
                      int v332 = (char *)sub_5714((uint64_t)(v612 + 3), v331);
                    }
                    else {
                      int v332 = 0;
                    }
                    unint64_t v344 = &v332[8 * v328];
                    *(void *)unint64_t v344 = *(void *)v30;
                    int v38 = v344 + 8;
                    unint64_t v346 = (char *)v35[1];
                    uint64_t v345 = (char *)v35[2];
                    if (v345 != v346)
                    {
                      do
                      {
                        uint64_t v347 = *((void *)v345 - 1);
                        v345 -= 8;
                        *((void *)v344 - 1) = v347;
                        v344 -= 8;
                      }
                      while (v345 != v346);
                      uint64_t v345 = (char *)*v326;
                    }
                    v35[1] = v344;
                    v35[2] = v38;
                    v35[3] = &v332[8 * v331];
                    if (v345) {
                      operator delete(v345);
                    }
                  }
                  else
                  {
                    *uint64_t v36 = *(void *)v30;
                    int v38 = v36 + 1;
                  }
                  v35[2] = v38;
                  unint64_t v348 = v612;
                  uint64_t v349 = (void *)v612[5];
                  uint64_t v12 = (uint64_t)(v612 + 6);
                  unint64_t v350 = v612[6];
                  if ((unint64_t)v349 >= v350)
                  {
                    unint64_t v352 = (void **)(v612 + 4);
                    uint64_t v353 = v612[4];
                    uint64_t v354 = ((uint64_t)v349 - v353) >> 3;
                    if ((unint64_t)(v354 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v355 = v350 - v353;
                    uint64_t v356 = v355 >> 2;
                    if (v355 >> 2 <= (unint64_t)(v354 + 1)) {
                      uint64_t v356 = v354 + 1;
                    }
                    if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v357 = v356;
                    }
                    if (v357) {
                      uint64_t v12 = (uint64_t)sub_5714(v12, v357);
                    }
                    else {
                      uint64_t v12 = 0;
                    }
                    unint64_t v358 = (void *)(v12 + 8 * v354);
                    void *v358 = *(void *)(v30 + 8);
                    uint64_t v351 = v358 + 1;
                    unint64_t v360 = (char *)v348[4];
                    unint64_t v359 = (char *)v348[5];
                    if (v359 != v360)
                    {
                      do
                      {
                        uint64_t v361 = *((void *)v359 - 1);
                        v359 -= 8;
                        *--unint64_t v358 = v361;
                      }
                      while (v359 != v360);
                      unint64_t v359 = (char *)*v352;
                    }
                    v348[4] = v358;
                    v348[5] = v351;
                    v348[6] = v12 + 8 * v357;
                    if (v359) {
                      operator delete(v359);
                    }
                  }
                  else
                  {
                    *uint64_t v349 = *(void *)(v30 + 8);
                    uint64_t v351 = v349 + 1;
                  }
                  v348[5] = v351;
                  uint64_t v362 = v612;
                  uint64_t v363 = (_DWORD *)v612[14];
                  unint64_t v364 = v612[15];
                  if ((unint64_t)v363 >= v364)
                  {
                    uint64_t v12 = v612[13];
                    uint64_t v366 = ((uint64_t)v363 - v12) >> 2;
                    if ((unint64_t)(v366 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v367 = v364 - v12;
                    unint64_t v368 = (uint64_t)(v364 - v12) >> 1;
                    if (v368 <= v366 + 1) {
                      unint64_t v368 = v366 + 1;
                    }
                    if (v367 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v369 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v369 = v368;
                    }
                    if (v369)
                    {
                      unint64_t v370 = (char *)sub_458C8((uint64_t)(v612 + 15), v369);
                      uint64_t v12 = v362[13];
                      uint64_t v363 = (_DWORD *)v362[14];
                    }
                    else
                    {
                      unint64_t v370 = 0;
                    }
                    uint64_t v371 = &v370[4 * v366];
                    *(_DWORD *)uint64_t v371 = *(_DWORD *)(v30 + 24);
                    uint64_t v365 = v371 + 4;
                    while (v363 != (_DWORD *)v12)
                    {
                      int v372 = *--v363;
                      *((_DWORD *)v371 - 1) = v372;
                      v371 -= 4;
                    }
                    v362[13] = v371;
                    v362[14] = v365;
                    v362[15] = &v370[4 * v369];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *uint64_t v363 = *(_DWORD *)(v30 + 24);
                    uint64_t v365 = v363 + 1;
                  }
                  v362[14] = v365;
                  uint64_t v373 = v612;
                  int v374 = (_WORD *)v612[20];
                  unint64_t v375 = v612[21];
                  if ((unint64_t)v374 >= v375)
                  {
                    uint64_t v12 = v612[19];
                    uint64_t v377 = (uint64_t)v374 - v12;
                    if ((uint64_t)v374 - v12 <= -3) {
                      sub_566C();
                    }
                    uint64_t v378 = v377 >> 1;
                    unint64_t v379 = v375 - v12;
                    if (v379 <= (v377 >> 1) + 1) {
                      unint64_t v380 = v378 + 1;
                    }
                    else {
                      unint64_t v380 = v379;
                    }
                    if (v379 >= 0x7FFFFFFFFFFFFFFELL) {
                      uint64_t v381 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v381 = v380;
                    }
                    if (v381)
                    {
                      unint64_t v382 = (char *)sub_45900((uint64_t)(v612 + 21), v381);
                      uint64_t v12 = v373[19];
                      int v374 = (_WORD *)v373[20];
                    }
                    else
                    {
                      unint64_t v382 = 0;
                    }
                    uint64_t v383 = &v382[2 * v378];
                    *(_WORD *)uint64_t v383 = *(_WORD *)(v30 + 32);
                    unint64_t v376 = v383 + 2;
                    while (v374 != (_WORD *)v12)
                    {
                      __int16 v384 = *--v374;
                      *((_WORD *)v383 - 1) = v384;
                      v383 -= 2;
                    }
                    v373[19] = v383;
                    v373[20] = v376;
                    v373[21] = &v382[2 * v381];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    _WORD *v374 = *(_WORD *)(v30 + 32);
                    unint64_t v376 = v374 + 1;
                  }
                  v373[20] = v376;
                  uint64_t v385 = v612;
                  uint64_t v386 = (_DWORD *)v612[17];
                  unint64_t v387 = v612[18];
                  if ((unint64_t)v386 >= v387)
                  {
                    uint64_t v12 = v612[16];
                    uint64_t v389 = ((uint64_t)v386 - v12) >> 2;
                    if ((unint64_t)(v389 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v390 = v387 - v12;
                    unint64_t v391 = (uint64_t)(v387 - v12) >> 1;
                    if (v391 <= v389 + 1) {
                      unint64_t v391 = v389 + 1;
                    }
                    if (v390 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v392 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v392 = v391;
                    }
                    if (v392)
                    {
                      uint64_t v393 = (char *)sub_458C8((uint64_t)(v612 + 18), v392);
                      uint64_t v12 = v385[16];
                      uint64_t v386 = (_DWORD *)v385[17];
                    }
                    else
                    {
                      uint64_t v393 = 0;
                    }
                    unint64_t v394 = &v393[4 * v389];
                    *(_DWORD *)unint64_t v394 = *(_DWORD *)(v30 + 28);
                    uint64_t v388 = v394 + 4;
                    while (v386 != (_DWORD *)v12)
                    {
                      int v395 = *--v386;
                      *((_DWORD *)v394 - 1) = v395;
                      v394 -= 4;
                    }
                    v385[16] = v394;
                    v385[17] = v388;
                    v385[18] = &v393[4 * v392];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    _DWORD *v386 = *(_DWORD *)(v30 + 28);
                    uint64_t v388 = v386 + 1;
                  }
                  v385[17] = v388;
                  uint64_t v396 = v612;
                  uint64_t v397 = (void *)v612[8];
                  unint64_t v398 = v612[9];
                  if ((unint64_t)v397 >= v398)
                  {
                    uint64_t v12 = v612[7];
                    uint64_t v400 = ((uint64_t)v397 - v12) >> 3;
                    if ((unint64_t)(v400 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v401 = v398 - v12;
                    unint64_t v402 = (uint64_t)(v398 - v12) >> 2;
                    if (v402 <= v400 + 1) {
                      unint64_t v402 = v400 + 1;
                    }
                    if (v401 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v403 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v403 = v402;
                    }
                    if (v403)
                    {
                      uint64_t v404 = (char *)sub_5714((uint64_t)(v612 + 9), v403);
                      uint64_t v12 = v396[7];
                      uint64_t v397 = (void *)v396[8];
                    }
                    else
                    {
                      uint64_t v404 = 0;
                    }
                    uint64_t v405 = &v404[8 * v400];
                    *(void *)uint64_t v405 = *(void *)(v30 + 16);
                    uint64_t v399 = v405 + 8;
                    while (v397 != (void *)v12)
                    {
                      uint64_t v406 = *--v397;
                      *((void *)v405 - 1) = v406;
                      v405 -= 8;
                    }
                    v396[7] = v405;
                    v396[8] = v399;
                    v396[9] = &v404[8 * v403];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *uint64_t v397 = *(void *)(v30 + 16);
                    uint64_t v399 = v397 + 1;
                  }
                  v396[8] = v399;
                  uint64_t v407 = v612;
                  uint64_t v408 = (void *)v612[11];
                  unint64_t v409 = v612[12];
                  if ((unint64_t)v408 >= v409)
                  {
                    uint64_t v12 = v612[10];
                    uint64_t v411 = ((uint64_t)v408 - v12) >> 3;
                    if ((unint64_t)(v411 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v412 = v409 - v12;
                    unint64_t v413 = (uint64_t)(v409 - v12) >> 2;
                    if (v413 <= v411 + 1) {
                      unint64_t v413 = v411 + 1;
                    }
                    if (v412 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v414 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v414 = v413;
                    }
                    if (v414)
                    {
                      uint64_t v415 = (char *)sub_5714((uint64_t)(v612 + 12), v414);
                      uint64_t v12 = v407[10];
                      uint64_t v408 = (void *)v407[11];
                    }
                    else
                    {
                      uint64_t v415 = 0;
                    }
                    unint64_t v416 = &v415[8 * v411];
                    *(void *)unint64_t v416 = *(void *)(v30 + 40);
                    uint64_t v410 = v416 + 8;
                    while (v408 != (void *)v12)
                    {
                      uint64_t v417 = *--v408;
                      *((void *)v416 - 1) = v417;
                      v416 -= 8;
                    }
                    v407[10] = v416;
                    v407[11] = v410;
                    v407[12] = &v415[8 * v414];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *uint64_t v408 = *(void *)(v30 + 40);
                    uint64_t v410 = v408 + 1;
                  }
                  v407[11] = v410;
                }
                if (*(unsigned char *)(v30 + 48)) {
                  *(unsigned char *)(v30 + 48) = 0;
                }
              }
            }
            goto LABEL_856;
          case 0xD:
            uint64_t v88 = v567 + 40 * (v625 & 3);
            if (*(unsigned char *)(v88 + 32))
            {
              unint64_t v89 = sub_12C18C();
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1287;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "!currentTile.has_value()";
                _os_log_error_impl(&def_1C1270, v89, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            uint64_t v90 = v612[3256];
            uint64_t v91 = v612[3255];
            uint64_t v92 = v612[3259];
            uint64_t v93 = v612[3258];
            uint64_t v94 = *(void *)(a1 + 112);
            if (v94 == -1) {
              uint64_t v94 = 0;
            }
            *(void *)(a1 + 112) = v94 + 1;
            if (!*(unsigned char *)(v88 + 32)) {
              *(unsigned char *)(v88 + 32) = 1;
            }
            *(void *)uint64_t v88 = (((v92 - v93) << 29) - 0x100000000) | (((unint64_t)(v90 - v91) >> 3)
                                                                    - 1);
            *(void *)(v88 + 16) = v94;
            *(_DWORD *)(v88 + 24) = -1;
            goto LABEL_856;
          case 0xE:
            sub_B960C(a1, v612, v625 & 3);
            goto LABEL_856;
          case 0xF:
            int v56 = DWORD1(v625);
            if (DWORD1(v625) <= 7)
            {
              uint64_t v57 = v562 + 12 * DWORD1(v625);
              *(void *)uint64_t v57 = v625;
              *(_DWORD *)(v57 + 8) = DWORD2(v625);
              unsigned int v58 = v56 - 4;
              if (v58 <= 2)
              {
                uint64_t v59 = v567 + 40 * v58;
                if (*(unsigned char *)(v59 + 32))
                {
                  if (v625 <= 7)
                  {
                    uint64_t v60 = v566 + 56 * v625;
                    if (*(unsigned char *)(v60 + 48)) {
                      *(_DWORD *)(v59 + 24) = *(_DWORD *)(v60 + 24);
                    }
                  }
                }
              }
            }
            goto LABEL_856;
          case 0x10:
            unint64_t v611 = (v611 & 0xFFFFFFFFFFFF8000) + 0x8000;
            goto LABEL_856;
          default:
            goto LABEL_856;
        }
      }
      if (v561) {
        *unint64_t v561 = 2;
      }
    }
    else
    {
      uint64_t v577 = 0;
    }
LABEL_875:
    uint64_t v540 = 0;
    *(_DWORD *)&__s1[8] = 218;
    *(void *)__s1 = off_7438A8;
    do
    {
      unint64_t v541 = v612;
      if (v612[3 * v540 + 97] != v612[3 * v540 + 98])
      {
        uint64_t v12 = (uint64_t)sub_1936B4(v12, v540);
        uint64_t v542 = v12;
        int v543 = (uint64_t *)v541[3248];
        unint64_t v544 = v541[3249];
        if ((unint64_t)v543 >= v544)
        {
          uint64_t v546 = v541[3247];
          uint64_t v547 = ((uint64_t)v543 - v546) >> 3;
          if ((unint64_t)(v547 + 1) >> 61) {
            sub_566C();
          }
          uint64_t v548 = v544 - v546;
          uint64_t v549 = v548 >> 2;
          if (v548 >> 2 <= (unint64_t)(v547 + 1)) {
            uint64_t v549 = v547 + 1;
          }
          if ((unint64_t)v548 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v550 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v550 = v549;
          }
          if (v550) {
            uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v541 + 3249), v550);
          }
          else {
            uint64_t v12 = 0;
          }
          unint64_t v551 = (uint64_t *)(v12 + 8 * v547);
          *unint64_t v551 = v542;
          unint64_t v545 = v551 + 1;
          unint64_t v552 = (char *)v541[3248];
          unint64_t v553 = (char *)v541[3247];
          if (v552 != v553)
          {
            do
            {
              uint64_t v554 = *((void *)v552 - 1);
              v552 -= 8;
              *--unint64_t v551 = v554;
            }
            while (v552 != v553);
            unint64_t v552 = (char *)v541[3247];
          }
          v541[3247] = v551;
          v541[3248] = v545;
          v541[3249] = v12 + 8 * v550;
          if (v552) {
            operator delete(v552);
          }
        }
        else
        {
          *int v543 = v12;
          unint64_t v545 = v543 + 1;
        }
        v541[3248] = v545;
      }
      ++v540;
    }
    while (v540 != 218);
    uint64_t result = v612;
    v612[3250] = v577;
    result[3251] = v611;
  }
  else
  {
    uint64_t result = 0;
    if (a5) {
      *a5 = 1;
    }
  }
  return result;
}

void sub_17C2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  operator delete(__p);
  operator delete(v10);
  _Unwind_Resume(a1);
}

#error "17C46C: too big function (funcsize=0)"

void sub_1926C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1934A0(uint64_t a1)
{
  *(void *)a1 = off_743878;
  if (*(void *)(a1 + 128))
  {
    sub_F63C4();
    operator delete();
  }
  uint64_t v2 = a1 + 41968;
  uint64_t v3 = a1 + 49264;
  do
  {
    long long v4 = *(void ***)(v3 - 40);
    long long v5 = *(void ***)(v3 - 32);
    *(void *)(v3 - 8) = 0;
    unint64_t v6 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        long long v5 = *(void ***)(v3 - 32);
        long long v4 = (void **)(*(void *)(v3 - 40) + 8);
        *(void *)(v3 - 40) = v4;
        unint64_t v6 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
    unint64_t v7 = v6 >> 3;
    if (v7 == 1)
    {
      uint64_t v8 = 256;
      goto LABEL_10;
    }
    if (v7 == 2)
    {
      uint64_t v8 = 512;
LABEL_10:
      *(void *)(v3 - 16) = v8;
    }
    if (v4 != v5)
    {
      do
      {
        uint64_t v9 = *v4++;
        operator delete(v9);
      }
      while (v4 != v5);
      uint64_t v11 = *(void *)(v3 - 40);
      uint64_t v10 = *(void *)(v3 - 32);
      if (v10 != v11) {
        *(void *)(v3 - 32) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    uint64_t v13 = *(void **)(v3 - 48);
    v3 -= 48;
    uint64_t v12 = v13;
    if (v13) {
      operator delete(v12);
    }
  }
  while (v3 != v2);
  sub_95BEC(a1 + 41920);
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 34024;
  do
  {
    if (*(unsigned char *)(a1 + 34200 + v14))
    {
      uint64_t v16 = v15 + v14;
      size_t v17 = *(void **)(v15 + v14 + 96);
      if (v17)
      {
        *(void *)(v16 + 104) = v17;
        operator delete(v17);
      }
      unsigned int v18 = *(void **)(v16 + 72);
      if (v18)
      {
        *(void *)(v15 + v14 + 80) = v18;
        operator delete(v18);
      }
      uint64_t v19 = v15 + v14;
      uint64_t v20 = *(void **)(v15 + v14 + 48);
      if (v20)
      {
        *(void *)(v19 + 56) = v20;
        operator delete(v20);
      }
      int v21 = *(void **)(v19 + 24);
      if (v21)
      {
        *(void *)(v15 + v14 + 32) = v21;
        operator delete(v21);
      }
      int v22 = *(void **)(v15 + v14);
      if (v22)
      {
        *(void *)(v15 + v14 + 8) = v22;
        operator delete(v22);
      }
    }
    v14 -= 224;
  }
  while (v14 != -34048);
  uint64_t v24 = (void **)(a1 + 136);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v24);
  return a1;
}

void sub_19367C(uint64_t a1)
{
  sub_1934A0(a1);

  operator delete();
}

const char *sub_1936B4(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = &off_7438D0[a2];
    return *v3;
  }
  if (v2 < 0x40)
  {
    long long v4 = off_743CD0;
LABEL_7:
    uint64_t v3 = &v4[v2];
    return *v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0x1A)
  {
    long long v4 = off_743ED0;
    goto LABEL_7;
  }
  return "Invalid";
}

uint64_t sub_193710(uint64_t result, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  *(void *)(result + 96) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *a4 = 1;
  uint64_t v4 = *a3;
  uint64_t v5 = *a3 & 7;
  unint64_t v6 = (unint64_t)*a3 >> 3;
  if (v5 == 7) {
    int v7 = *(unsigned __int16 *)(a2 + v6) >> 7;
  }
  else {
    int v7 = *(unsigned __int8 *)(a2 + v6) >> v5;
  }
  switch(v7 & 3)
  {
    case 1:
      uint64_t v12 = (v4 + 2) & 7;
      unint64_t v13 = (unint64_t)(v4 + 2) >> 3;
      if (v12 == 7) {
        int v14 = *(unsigned __int16 *)(a2 + v13) >> 7;
      }
      else {
        int v14 = *(unsigned __int8 *)(a2 + v13) >> v12;
      }
      switch(v14 & 3)
      {
        case 1:
          unint64_t v44 = v4 + 4;
          uint64_t v45 = (v4 + 4) & 7;
          unint64_t v46 = v44 >> 3;
          if (v45 == 7) {
            int v47 = *(unsigned __int16 *)(a2 + v46) >> 7;
          }
          else {
            int v47 = *(unsigned __int8 *)(a2 + v46) >> v45;
          }
          int v84 = v47 & 3;
          if (v84 == 1)
          {
            *(_WORD *)(result + 8) = 11;
            *(void *)uint64_t result = 0x300000003;
            unint64_t v128 = *a3 + 26;
            unint64_t v129 = v128 & 7;
            unint64_t v130 = v128 >> 3;
            if (v129 > 2)
            {
              unint64_t v132 = ((unint64_t)*(unsigned __int8 *)(v130 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v130 + a2 + 6) << 48);
              unint64_t v131 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 5) << 40;
            }
            else
            {
              unint64_t v131 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 6) << 48;
              unint64_t v132 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 5) << 40;
            }
            uint64_t v182 = (unsigned __int8 *)(a2 + v130);
            *(void *)(result + 24) |= ((v132 | v131 | ((unint64_t)v182[4] << 32) | ((unint64_t)v182[3] << 24) | ((unint64_t)v182[2] << 16) | ((unint64_t)v182[1] << 8) | *v182) >> v129) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v183 = *a3 & 7;
            unint64_t v184 = (unint64_t)(*a3 + 80) >> 3;
            if (v183 > 5) {
              unsigned int v185 = *(unsigned __int16 *)(a2 + v184);
            }
            else {
              unsigned int v185 = *(unsigned __int8 *)(a2 + v184);
            }
            *(_DWORD *)(result + 32) |= (v185 >> v183) & 7;
            unint64_t v186 = *a3 + 6;
            unint64_t v187 = v186 & 7;
            unint64_t v188 = v186 >> 3;
            if (v187 > 4)
            {
              int v190 = (*(unsigned __int8 *)(v188 + a2 + 3) << 24) | (*(unsigned __int8 *)(v188 + a2 + 2) << 16);
              int v189 = *(unsigned __int8 *)(v188 + a2 + 1) << 8;
            }
            else
            {
              int v189 = *(unsigned __int8 *)(v188 + a2 + 2) << 16;
              int v190 = *(unsigned __int8 *)(v188 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 16) |= ((v190 | v189 | *(unsigned __int8 *)(a2 + v188)) >> v187) & 0xFFFFF;
            uint64_t v22 = 83;
          }
          else
          {
            if (v84) {
              goto LABEL_81;
            }
            *(_WORD *)(result + 8) = 4;
            *(void *)uint64_t result = 0x200000002;
            unint64_t v85 = *a3 + 6;
            unint64_t v86 = v85 & 7;
            unint64_t v87 = v85 >> 3;
            if (v86 > 4)
            {
              int v89 = (*(unsigned __int8 *)(v87 + a2 + 3) << 24) | (*(unsigned __int8 *)(v87 + a2 + 2) << 16);
              int v88 = *(unsigned __int8 *)(v87 + a2 + 1) << 8;
            }
            else
            {
              int v88 = *(unsigned __int8 *)(v87 + a2 + 2) << 16;
              int v89 = *(unsigned __int8 *)(v87 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 16) |= ((v89 | v88 | *(unsigned __int8 *)(a2 + v87)) >> v86) & 0xFFFFF;
            uint64_t v22 = 26;
          }
          goto LABEL_398;
        case 2:
          *(_WORD *)(result + 8) = 2;
          *(void *)uint64_t result = 0x500000005;
          if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 4) >> 3)) >> ((*(unsigned char *)a3 + 4) & 7)))
          {
            *(_DWORD *)(result + 16) = 1;
            unint64_t v48 = *a3 + 5;
            unint64_t v49 = v48 & 7;
            unint64_t v50 = v48 >> 3;
            if (v49 > 5) {
              unsigned int v51 = *(unsigned __int16 *)(a2 + v50);
            }
            else {
              unsigned int v51 = *(unsigned __int8 *)(a2 + v50);
            }
            *(unsigned char *)(result + 20) |= (v51 >> v49) & 7;
            unint64_t v137 = *a3 & 7;
            unint64_t v138 = (unint64_t)(*a3 + 8) >> 3;
            if (v137 > 1) {
              unsigned int v139 = *(unsigned __int16 *)(a2 + v138);
            }
            else {
              unsigned int v139 = *(unsigned __int8 *)(a2 + v138);
            }
            *(unsigned char *)(result + 21) |= (v139 >> v137) & 0x7F;
            goto LABEL_122;
          }
          *(_DWORD *)(result + 16) = 0;
          unint64_t v103 = *a3 + 5;
          unint64_t v104 = v103 >> 3;
          unint64_t v105 = v103 & 7;
          if (v105) {
            int v106 = *(unsigned __int16 *)(a2 + v104) >> v105;
          }
          else {
            LOBYTE(v106) = *(unsigned char *)(a2 + v104);
          }
          *(unsigned char *)(result + 20) |= v106;
          unint64_t v191 = *a3 + 13;
          unint64_t v192 = v191 & 7;
          unint64_t v193 = v191 >> 3;
          if (v192 > 5) {
            unsigned __int16 v194 = *(_WORD *)(a2 + v193);
          }
          else {
            unsigned __int16 v194 = *(unsigned __int8 *)(a2 + v193);
          }
          switch((v194 >> v192) & 7)
          {
            case 1:
              int v361 = 1;
              goto LABEL_289;
            case 2:
              int v361 = 2;
              goto LABEL_289;
            case 3:
              int v361 = 3;
              goto LABEL_289;
            case 4:
              int v361 = 4;
              goto LABEL_289;
            case 5:
              int v361 = 5;
              goto LABEL_289;
            case 6:
              int v361 = 6;
              goto LABEL_289;
            case 7:
              int v361 = 7;
LABEL_289:
              *(_DWORD *)(result + 24) = v361;
              break;
            default:
              *(_DWORD *)(result + 24) = 0;
              break;
          }
          uint64_t v22 = 16;
          break;
        case 3:
          *(_WORD *)(result + 8) = 2;
          *(void *)uint64_t result = 0x600000006;
          unint64_t v52 = *a3 + 4;
          unint64_t v53 = v52 >> 3;
          unint64_t v54 = v52 & 7;
          if (v54) {
            int v55 = *(unsigned __int16 *)(a2 + v53) >> v54;
          }
          else {
            LOBYTE(v55) = *(unsigned char *)(a2 + v53);
          }
          *(unsigned char *)(result + 16) |= v55;
          uint64_t v22 = 12;
          goto LABEL_398;
        default:
          *(_WORD *)(result + 8) = 1;
          *(void *)uint64_t result = 0x100000001;
          uint64_t v22 = 4;
          goto LABEL_398;
      }
      break;
    case 2:
      unint64_t v15 = v4 + 2;
      uint64_t v16 = (v4 + 2) & 7;
      unint64_t v17 = v15 >> 3;
      if (v16 == 7) {
        int v18 = *(unsigned __int16 *)(a2 + v17) >> 7;
      }
      else {
        int v18 = *(unsigned __int8 *)(a2 + v17) >> v16;
      }
      switch(v18 & 3)
      {
        case 1:
          *(_WORD *)(result + 8) = 17;
          *(void *)uint64_t result = 0x800000008;
          unint64_t v56 = *a3 + 4;
          unint64_t v57 = v56 >> 3;
          unint64_t v58 = v56 & 7;
          if (v58) {
            int v59 = *(unsigned __int16 *)(a2 + v57) >> v58;
          }
          else {
            LOBYTE(v59) = *(unsigned char *)(a2 + v57);
          }
          *(unsigned char *)(result + 16) |= v59;
          unint64_t v107 = *a3 + 12;
          unint64_t v108 = v107 & 7;
          unint64_t v109 = v107 >> 3;
          if (v108 == 7) {
            int v110 = *(unsigned __int16 *)(a2 + v109) >> 7;
          }
          else {
            int v110 = *(unsigned __int8 *)(a2 + v109) >> v108;
          }
          switch(v110 & 3)
          {
            case 1:
              *(_DWORD *)(result + 20) = 0;
              unint64_t v146 = *a3 + 14;
              unint64_t v147 = v146 >> 3;
              unint64_t v148 = v146 & 7;
              if (v148)
              {
                unint64_t v149 = (unsigned __int8 *)(a2 + v147);
                uint64_t v150 = ((((unint64_t)v149[4] << 32) | ((unint64_t)v149[3] << 24) | ((unint64_t)v149[2] << 16) | ((unint64_t)v149[1] << 8) | *v149) >> v148);
              }
              else
              {
                uint64_t v150 = *(unsigned int *)(a2 + v147);
              }
              int v234 = *(_DWORD *)(result + 32);
              unint64_t v235 = *(void *)(result + 24) & 0xFFFFFFFF00000000 | v150 | *(void *)(result + 24);
              *(void *)(result + 24) = v235;
              unint64_t v236 = *a3 + 46;
              unint64_t v237 = v236 >> 3;
              unint64_t v238 = v236 & 7;
              if (v238)
              {
                unint64_t v239 = (unsigned __int8 *)(a2 + v237);
                uint64_t v240 = ((((unint64_t)v239[4] << 32) | ((unint64_t)v239[3] << 24) | ((unint64_t)v239[2] << 16) | ((unint64_t)v239[1] << 8) | *v239) >> v238);
              }
              else
              {
                uint64_t v240 = *(unsigned int *)(a2 + v237);
              }
              unint64_t v253 = v235 & 0xFFFFFFFF00000000 | (v240 << 32) | v235;
              *(_DWORD *)(result + 32) = v234;
              *(void *)(result + 24) = v253;
              unint64_t v254 = *a3 + 78;
              unint64_t v255 = v254 >> 3;
              unint64_t v256 = v254 & 7;
              if (v256)
              {
                uint64_t v257 = (unsigned __int8 *)(a2 + v255);
                int v258 = (((unint64_t)v257[4] << 32) | ((unint64_t)v257[3] << 24) | ((unint64_t)v257[2] << 16) | ((unint64_t)v257[1] << 8) | *v257) >> v256;
              }
              else
              {
                int v258 = *(_DWORD *)(a2 + v255);
              }
              *(void *)(result + 24) = v253;
              *(_DWORD *)(result + 32) = v258 | v234;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 110) >> 3)) >> ((*(unsigned char *)a3 + 110) & 7)))
              {
                *(_DWORD *)(result + 36) = 1;
                unint64_t v259 = *a3 + 111;
                unint64_t v260 = v259 & 7;
                unint64_t v261 = v259 >> 3;
                if (v260 > 3) {
                  unsigned int v262 = *(unsigned __int16 *)(a2 + v261);
                }
                else {
                  unsigned int v262 = *(unsigned __int8 *)(a2 + v261);
                }
                *(unsigned char *)(result + 40) |= (v262 >> v260) & 0x1F;
                unint64_t v278 = *a3 + 116;
                unint64_t v279 = v278 & 7;
                unint64_t v280 = v278 >> 3;
                if (v279 > 4) {
                  unsigned int v281 = (*(unsigned __int8 *)(a2 + v280 + 2) << 16) | (*(unsigned __int8 *)(a2 + v280 + 1) << 8) | *(unsigned __int8 *)(a2 + v280);
                }
                else {
                  unsigned int v281 = *(unsigned __int16 *)(a2 + v280);
                }
                int v287 = *(_DWORD *)(result + 42) | (v281 >> v279) & 0xFFF;
                *(_DWORD *)(result + 42) = v287;
                unint64_t v288 = *a3 & 7;
                unint64_t v289 = (unint64_t)(*a3 + 128) >> 3;
                if (v288 > 4) {
                  unsigned int v290 = *(unsigned __int16 *)(a2 + v289);
                }
                else {
                  unsigned int v290 = *(unsigned __int8 *)(a2 + v289);
                }
                int v295 = v287 | (((v290 >> v288) & 0xF) << 12);
                *(_DWORD *)(result + 42) = v295;
                unint64_t v296 = (*(unsigned char *)a3 - 124) & 7;
                unint64_t v297 = (unint64_t)(*a3 + 132) >> 3;
                if (v296 > 4) {
                  unsigned int v298 = *(unsigned __int16 *)(a2 + v297);
                }
                else {
                  unsigned int v298 = *(unsigned __int8 *)(a2 + v297);
                }
                *(_DWORD *)(result + 42) = v295 | (((v298 >> v296) & 0xF) << 16);
                uint64_t v22 = 136;
              }
              else
              {
                *(_DWORD *)(result + 36) = 0;
                unint64_t v263 = *a3 + 111;
                unint64_t v264 = v263 & 7;
                unint64_t v265 = v263 >> 3;
                if (v264 > 3) {
                  unsigned int v266 = *(unsigned __int16 *)(a2 + v265);
                }
                else {
                  unsigned int v266 = *(unsigned __int8 *)(a2 + v265);
                }
                *(unsigned char *)(result + 40) |= (v266 >> v264) & 0x1F;
                uint64_t v22 = 116;
              }
              break;
            case 2:
              *(_DWORD *)(result + 20) = 3;
              unint64_t v151 = *a3 + 14;
              unsigned int v152 = *(unsigned __int8 *)(a2 + (v151 >> 3));
              char v153 = v151 & 7;
              char v154 = *(unsigned char *)(result + 24);
              if ((v152 >> v153))
              {
                *(unsigned char *)(result + 24) = v154 | 1;
                unint64_t v155 = *a3 + 15;
                unint64_t v156 = v155 & 7;
                unint64_t v157 = v155 >> 3;
                if (v156 > 4) {
                  unsigned int v158 = *(unsigned __int16 *)(a2 + v157);
                }
                else {
                  unsigned int v158 = *(unsigned __int8 *)(a2 + v157);
                }
                *(unsigned char *)(result + 25) |= (v158 >> v156) & 0xF;
                unint64_t v267 = *a3 + 19;
                unint64_t v268 = v267 & 7;
                unint64_t v269 = v267 >> 3;
                if (v268 > 4) {
                  unsigned int v270 = *(unsigned __int16 *)(a2 + v269);
                }
                else {
                  unsigned int v270 = *(unsigned __int8 *)(a2 + v269);
                }
                *(unsigned char *)(result + 33) |= (v270 >> v268) & 0xF;
                uint64_t v22 = 23;
              }
              else
              {
                *(unsigned char *)(result + 24) = v154 & 0xFE;
                unint64_t v241 = *a3 + 15;
                unint64_t v242 = v241 & 7;
                unint64_t v243 = v241 >> 3;
                if (v242 > 4) {
                  unsigned int v244 = *(unsigned __int16 *)(a2 + v243);
                }
                else {
                  unsigned int v244 = *(unsigned __int8 *)(a2 + v243);
                }
                *(unsigned char *)(result + 25) |= (v244 >> v242) & 0xF;
                unint64_t v362 = *a3 + 19;
                unint64_t v363 = v362 & 7;
                unint64_t v364 = v362 >> 3;
                if (v363 > 4) {
                  unsigned int v365 = *(unsigned __int16 *)(a2 + v364);
                }
                else {
                  unsigned int v365 = *(unsigned __int8 *)(a2 + v364);
                }
                *(unsigned char *)(result + 33) |= (v365 >> v363) & 0xF;
                unint64_t v370 = *a3 + 23;
                unint64_t v371 = v370 & 7;
                unint64_t v372 = v370 >> 3;
                if (v371 > 4) {
                  unsigned int v373 = *(unsigned __int16 *)(a2 + v372);
                }
                else {
                  unsigned int v373 = *(unsigned __int8 *)(a2 + v372);
                }
                *(unsigned char *)(result + 26) |= (v373 >> v371) & 0xF;
                unint64_t v378 = *a3 + 27;
                unint64_t v379 = v378 & 7;
                unint64_t v380 = v378 >> 3;
                if (v379 > 4) {
                  unsigned int v381 = *(unsigned __int16 *)(a2 + v380);
                }
                else {
                  unsigned int v381 = *(unsigned __int8 *)(a2 + v380);
                }
                *(unsigned char *)(result + 34) |= (v381 >> v379) & 0xF;
                unint64_t v386 = *a3 + 31;
                unint64_t v387 = v386 & 7;
                unint64_t v388 = v386 >> 3;
                if (v387 > 4) {
                  unsigned int v389 = *(unsigned __int16 *)(a2 + v388);
                }
                else {
                  unsigned int v389 = *(unsigned __int8 *)(a2 + v388);
                }
                *(unsigned char *)(result + 27) |= (v389 >> v387) & 0xF;
                unint64_t v394 = *a3 + 35;
                unint64_t v395 = v394 & 7;
                unint64_t v396 = v394 >> 3;
                if (v395 > 4) {
                  unsigned int v397 = *(unsigned __int16 *)(a2 + v396);
                }
                else {
                  unsigned int v397 = *(unsigned __int8 *)(a2 + v396);
                }
                *(unsigned char *)(result + 35) |= (v397 >> v395) & 0xF;
                unint64_t v402 = *a3 + 39;
                unint64_t v403 = v402 & 7;
                unint64_t v404 = v402 >> 3;
                if (v403 > 4) {
                  unsigned int v405 = *(unsigned __int16 *)(a2 + v404);
                }
                else {
                  unsigned int v405 = *(unsigned __int8 *)(a2 + v404);
                }
                *(unsigned char *)(result + 28) |= (v405 >> v403) & 0xF;
                unint64_t v410 = *a3 + 43;
                unint64_t v411 = v410 & 7;
                unint64_t v412 = v410 >> 3;
                if (v411 > 4) {
                  unsigned int v413 = *(unsigned __int16 *)(a2 + v412);
                }
                else {
                  unsigned int v413 = *(unsigned __int8 *)(a2 + v412);
                }
                *(unsigned char *)(result + 36) |= (v413 >> v411) & 0xF;
                unint64_t v418 = *a3 + 47;
                unint64_t v419 = v418 & 7;
                unint64_t v420 = v418 >> 3;
                if (v419 > 4) {
                  unsigned int v421 = *(unsigned __int16 *)(a2 + v420);
                }
                else {
                  unsigned int v421 = *(unsigned __int8 *)(a2 + v420);
                }
                *(unsigned char *)(result + 29) |= (v421 >> v419) & 0xF;
                unint64_t v426 = *a3 + 51;
                unint64_t v427 = v426 & 7;
                unint64_t v428 = v426 >> 3;
                if (v427 > 4) {
                  unsigned int v429 = *(unsigned __int16 *)(a2 + v428);
                }
                else {
                  unsigned int v429 = *(unsigned __int8 *)(a2 + v428);
                }
                *(unsigned char *)(result + 37) |= (v429 >> v427) & 0xF;
                unint64_t v434 = *a3 + 55;
                unint64_t v435 = v434 & 7;
                unint64_t v436 = v434 >> 3;
                if (v435 > 4) {
                  unsigned int v437 = *(unsigned __int16 *)(a2 + v436);
                }
                else {
                  unsigned int v437 = *(unsigned __int8 *)(a2 + v436);
                }
                *(unsigned char *)(result + 30) |= (v437 >> v435) & 0xF;
                unint64_t v442 = *a3 + 59;
                unint64_t v443 = v442 & 7;
                unint64_t v444 = v442 >> 3;
                if (v443 > 4) {
                  unsigned int v445 = *(unsigned __int16 *)(a2 + v444);
                }
                else {
                  unsigned int v445 = *(unsigned __int8 *)(a2 + v444);
                }
                *(unsigned char *)(result + 38) |= (v445 >> v443) & 0xF;
                unint64_t v450 = *a3 + 63;
                unint64_t v451 = v450 & 7;
                unint64_t v452 = v450 >> 3;
                if (v451 > 4) {
                  unsigned int v453 = *(unsigned __int16 *)(a2 + v452);
                }
                else {
                  unsigned int v453 = *(unsigned __int8 *)(a2 + v452);
                }
                *(unsigned char *)(result + 31) |= (v453 >> v451) & 0xF;
                unint64_t v458 = *a3 + 67;
                unint64_t v459 = v458 & 7;
                unint64_t v460 = v458 >> 3;
                if (v459 > 4) {
                  unsigned int v461 = *(unsigned __int16 *)(a2 + v460);
                }
                else {
                  unsigned int v461 = *(unsigned __int8 *)(a2 + v460);
                }
                *(unsigned char *)(result + 39) |= (v461 >> v459) & 0xF;
                unint64_t v466 = *a3 + 71;
                unint64_t v467 = v466 & 7;
                unint64_t v468 = v466 >> 3;
                if (v467 > 4) {
                  unsigned int v469 = *(unsigned __int16 *)(a2 + v468);
                }
                else {
                  unsigned int v469 = *(unsigned __int8 *)(a2 + v468);
                }
                *(unsigned char *)(result + 32) |= (v469 >> v467) & 0xF;
                unint64_t v474 = *a3 + 75;
                unint64_t v475 = v474 & 7;
                unint64_t v476 = v474 >> 3;
                if (v475 > 4) {
                  unsigned int v477 = *(unsigned __int16 *)(a2 + v476);
                }
                else {
                  unsigned int v477 = *(unsigned __int8 *)(a2 + v476);
                }
                *(unsigned char *)(result + 40) |= (v477 >> v475) & 0xF;
                uint64_t v22 = 79;
              }
              break;
            case 3:
              *(_DWORD *)(result + 20) = 2;
              unint64_t v159 = *a3 + 14;
              unint64_t v160 = v159 & 7;
              unint64_t v161 = v159 >> 3;
              if (v160 == 7) {
                unsigned int v162 = ((*(unsigned __int8 *)(a2 + v161 + 2) << 16) | (*(unsigned __int8 *)(a2 + v161 + 1) << 8) | *(unsigned __int8 *)(a2 + v161)) >> 7;
              }
              else {
                unsigned int v162 = *(unsigned __int16 *)(a2 + v161) >> v160;
              }
              *(_WORD *)(result + 24) |= v162 & 0x3FF;
              uint64_t v206 = *a3 & 7;
              unint64_t v207 = (unint64_t)(*a3 + 24) >> 3;
              if (v206 == 7) {
                unsigned int v208 = ((*(unsigned __int8 *)(a2 + v207 + 2) << 16) | (*(unsigned __int8 *)(a2 + v207 + 1) << 8) | *(unsigned __int8 *)(a2 + v207)) >> 7;
              }
              else {
                unsigned int v208 = *(unsigned __int16 *)(a2 + v207) >> v206;
              }
              *(_WORD *)(result + 26) |= v208 & 0x3FF;
              unint64_t v218 = *a3 + 34;
              unint64_t v219 = v218 & 7;
              unint64_t v220 = v218 >> 3;
              if (v219 > 5) {
                unsigned int v221 = (*(unsigned __int8 *)(a2 + v220 + 2) << 16) | (*(unsigned __int8 *)(a2 + v220 + 1) << 8) | *(unsigned __int8 *)(a2 + v220);
              }
              else {
                unsigned int v221 = *(unsigned __int16 *)(a2 + v220);
              }
              *(_WORD *)(result + 28) |= (v221 >> v219) & 0x7FF;
              unint64_t v226 = *a3 + 45;
              unsigned int v227 = *(unsigned __int8 *)(a2 + (v226 >> 3));
              char v228 = v226 & 7;
              char v229 = *(unsigned char *)(result + 30);
              if ((v227 >> v228))
              {
                *(unsigned char *)(result + 30) = v229 | 1;
                unint64_t v230 = *a3 + 46;
                unint64_t v231 = v230 & 7;
                unint64_t v232 = v230 >> 3;
                if (v231 > 4) {
                  unsigned int v233 = *(unsigned __int16 *)(a2 + v232);
                }
                else {
                  unsigned int v233 = *(unsigned __int8 *)(a2 + v232);
                }
                *(unsigned char *)(result + 31) |= (v233 >> v231) & 0xF;
                unint64_t v274 = *a3 + 50;
                unint64_t v275 = v274 & 7;
                unint64_t v276 = v274 >> 3;
                if (v275 > 4) {
                  unsigned int v277 = *(unsigned __int16 *)(a2 + v276);
                }
                else {
                  unsigned int v277 = *(unsigned __int8 *)(a2 + v276);
                }
                *(unsigned char *)(result + 39) |= (v277 >> v275) & 0xF;
                uint64_t v22 = 54;
              }
              else
              {
                *(unsigned char *)(result + 30) = v229 & 0xFE;
                unint64_t v249 = *a3 + 46;
                unint64_t v250 = v249 & 7;
                unint64_t v251 = v249 >> 3;
                if (v250 > 4) {
                  unsigned int v252 = *(unsigned __int16 *)(a2 + v251);
                }
                else {
                  unsigned int v252 = *(unsigned __int8 *)(a2 + v251);
                }
                *(unsigned char *)(result + 31) |= (v252 >> v250) & 0xF;
                unint64_t v366 = *a3 + 50;
                unint64_t v367 = v366 & 7;
                unint64_t v368 = v366 >> 3;
                if (v367 > 4) {
                  unsigned int v369 = *(unsigned __int16 *)(a2 + v368);
                }
                else {
                  unsigned int v369 = *(unsigned __int8 *)(a2 + v368);
                }
                *(unsigned char *)(result + 39) |= (v369 >> v367) & 0xF;
                unint64_t v374 = *a3 + 54;
                unint64_t v375 = v374 & 7;
                unint64_t v376 = v374 >> 3;
                if (v375 > 4) {
                  unsigned int v377 = *(unsigned __int16 *)(a2 + v376);
                }
                else {
                  unsigned int v377 = *(unsigned __int8 *)(a2 + v376);
                }
                *(unsigned char *)(result + 32) |= (v377 >> v375) & 0xF;
                unint64_t v382 = *a3 + 58;
                unint64_t v383 = v382 & 7;
                unint64_t v384 = v382 >> 3;
                if (v383 > 4) {
                  unsigned int v385 = *(unsigned __int16 *)(a2 + v384);
                }
                else {
                  unsigned int v385 = *(unsigned __int8 *)(a2 + v384);
                }
                *(unsigned char *)(result + 40) |= (v385 >> v383) & 0xF;
                unint64_t v390 = *a3 + 62;
                unint64_t v391 = v390 & 7;
                unint64_t v392 = v390 >> 3;
                if (v391 > 4) {
                  unsigned int v393 = *(unsigned __int16 *)(a2 + v392);
                }
                else {
                  unsigned int v393 = *(unsigned __int8 *)(a2 + v392);
                }
                *(unsigned char *)(result + 33) |= (v393 >> v391) & 0xF;
                unint64_t v398 = *a3 + 66;
                unint64_t v399 = v398 & 7;
                unint64_t v400 = v398 >> 3;
                if (v399 > 4) {
                  unsigned int v401 = *(unsigned __int16 *)(a2 + v400);
                }
                else {
                  unsigned int v401 = *(unsigned __int8 *)(a2 + v400);
                }
                *(unsigned char *)(result + 41) |= (v401 >> v399) & 0xF;
                unint64_t v406 = *a3 + 70;
                unint64_t v407 = v406 & 7;
                unint64_t v408 = v406 >> 3;
                if (v407 > 4) {
                  unsigned int v409 = *(unsigned __int16 *)(a2 + v408);
                }
                else {
                  unsigned int v409 = *(unsigned __int8 *)(a2 + v408);
                }
                *(unsigned char *)(result + 34) |= (v409 >> v407) & 0xF;
                unint64_t v414 = *a3 + 74;
                unint64_t v415 = v414 & 7;
                unint64_t v416 = v414 >> 3;
                if (v415 > 4) {
                  unsigned int v417 = *(unsigned __int16 *)(a2 + v416);
                }
                else {
                  unsigned int v417 = *(unsigned __int8 *)(a2 + v416);
                }
                *(unsigned char *)(result + 42) |= (v417 >> v415) & 0xF;
                unint64_t v422 = *a3 + 78;
                unint64_t v423 = v422 & 7;
                unint64_t v424 = v422 >> 3;
                if (v423 > 4) {
                  unsigned int v425 = *(unsigned __int16 *)(a2 + v424);
                }
                else {
                  unsigned int v425 = *(unsigned __int8 *)(a2 + v424);
                }
                *(unsigned char *)(result + 35) |= (v425 >> v423) & 0xF;
                unint64_t v430 = *a3 + 82;
                unint64_t v431 = v430 & 7;
                unint64_t v432 = v430 >> 3;
                if (v431 > 4) {
                  unsigned int v433 = *(unsigned __int16 *)(a2 + v432);
                }
                else {
                  unsigned int v433 = *(unsigned __int8 *)(a2 + v432);
                }
                *(unsigned char *)(result + 43) |= (v433 >> v431) & 0xF;
                unint64_t v438 = *a3 + 86;
                unint64_t v439 = v438 & 7;
                unint64_t v440 = v438 >> 3;
                if (v439 > 4) {
                  unsigned int v441 = *(unsigned __int16 *)(a2 + v440);
                }
                else {
                  unsigned int v441 = *(unsigned __int8 *)(a2 + v440);
                }
                *(unsigned char *)(result + 36) |= (v441 >> v439) & 0xF;
                unint64_t v446 = *a3 + 90;
                unint64_t v447 = v446 & 7;
                unint64_t v448 = v446 >> 3;
                if (v447 > 4) {
                  unsigned int v449 = *(unsigned __int16 *)(a2 + v448);
                }
                else {
                  unsigned int v449 = *(unsigned __int8 *)(a2 + v448);
                }
                *(unsigned char *)(result + 44) |= (v449 >> v447) & 0xF;
                unint64_t v454 = *a3 + 94;
                unint64_t v455 = v454 & 7;
                unint64_t v456 = v454 >> 3;
                if (v455 > 4) {
                  unsigned int v457 = *(unsigned __int16 *)(a2 + v456);
                }
                else {
                  unsigned int v457 = *(unsigned __int8 *)(a2 + v456);
                }
                *(unsigned char *)(result + 37) |= (v457 >> v455) & 0xF;
                unint64_t v462 = *a3 + 98;
                unint64_t v463 = v462 & 7;
                unint64_t v464 = v462 >> 3;
                if (v463 > 4) {
                  unsigned int v465 = *(unsigned __int16 *)(a2 + v464);
                }
                else {
                  unsigned int v465 = *(unsigned __int8 *)(a2 + v464);
                }
                *(unsigned char *)(result + 45) |= (v465 >> v463) & 0xF;
                unint64_t v470 = *a3 + 102;
                unint64_t v471 = v470 & 7;
                unint64_t v472 = v470 >> 3;
                if (v471 > 4) {
                  unsigned int v473 = *(unsigned __int16 *)(a2 + v472);
                }
                else {
                  unsigned int v473 = *(unsigned __int8 *)(a2 + v472);
                }
                *(unsigned char *)(result + 38) |= (v473 >> v471) & 0xF;
                unint64_t v478 = *a3 + 106;
                unint64_t v479 = v478 & 7;
                unint64_t v480 = v478 >> 3;
                if (v479 > 4) {
                  unsigned int v481 = *(unsigned __int16 *)(a2 + v480);
                }
                else {
                  unsigned int v481 = *(unsigned __int8 *)(a2 + v480);
                }
                *(unsigned char *)(result + 46) |= (v481 >> v479) & 0xF;
                uint64_t v22 = 110;
              }
              break;
            default:
              *(_DWORD *)(result + 20) = 1;
              unint64_t v111 = *a3 + 14;
              unint64_t v112 = v111 & 7;
              unint64_t v113 = v111 >> 3;
              if (v112 > 4) {
                unsigned __int16 v114 = *(_WORD *)(a2 + v113);
              }
              else {
                unsigned __int16 v114 = *(unsigned __int8 *)(a2 + v113);
              }
              int v201 = *(unsigned __int16 *)(result + 24) | (v114 >> v112) & 0xF;
              *(_WORD *)(result + 24) = v201;
              unint64_t v202 = *a3 + 18;
              unint64_t v203 = v202 & 7;
              unint64_t v204 = v202 >> 3;
              if (v203 > 4) {
                unsigned __int16 v205 = *(_WORD *)(a2 + v204);
              }
              else {
                unsigned __int16 v205 = *(unsigned __int8 *)(a2 + v204);
              }
              int v213 = (16 * ((v205 >> v203) & 0xF)) | v201;
              *(_WORD *)(result + 24) = v213;
              unint64_t v214 = *a3 + 22;
              unint64_t v215 = v214 & 7;
              unint64_t v216 = v214 >> 3;
              if (v215 > 4) {
                unsigned __int16 v217 = *(_WORD *)(a2 + v216);
              }
              else {
                unsigned __int16 v217 = *(unsigned __int8 *)(a2 + v216);
              }
              *(_WORD *)(result + 24) = (((v217 >> v215) & 0xF) << 8) | v213;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 26) >> 3)) >> ((*(unsigned char *)a3 + 26) & 7)))
              {
                *(_DWORD *)(result + 28) = 1;
                unint64_t v222 = *a3 + 27;
                unint64_t v223 = v222 & 7;
                unint64_t v224 = v222 >> 3;
                if (v223 > 3) {
                  unsigned int v225 = *(unsigned __int16 *)(a2 + v224);
                }
                else {
                  unsigned int v225 = *(unsigned __int8 *)(a2 + v224);
                }
                *(unsigned char *)(result + 32) |= (v225 >> v223) & 0x1F;
                unint64_t v271 = *a3 & 7;
                unint64_t v272 = (unint64_t)(*a3 + 32) >> 3;
                if (v271 > 4) {
                  unsigned int v273 = (*(unsigned __int8 *)(a2 + v272 + 2) << 16) | (*(unsigned __int8 *)(a2 + v272 + 1) << 8) | *(unsigned __int8 *)(a2 + v272);
                }
                else {
                  unsigned int v273 = *(unsigned __int16 *)(a2 + v272);
                }
                int v282 = *(_DWORD *)(result + 34) | (v273 >> v271) & 0xFFF;
                *(_DWORD *)(result + 34) = v282;
                unint64_t v283 = *a3 + 44;
                unint64_t v284 = v283 & 7;
                unint64_t v285 = v283 >> 3;
                if (v284 > 4) {
                  unsigned int v286 = *(unsigned __int16 *)(a2 + v285);
                }
                else {
                  unsigned int v286 = *(unsigned __int8 *)(a2 + v285);
                }
                int v291 = v282 | (((v286 >> v284) & 0xF) << 12);
                *(_DWORD *)(result + 34) = v291;
                unint64_t v292 = *a3 & 7;
                unint64_t v293 = (unint64_t)(*a3 + 48) >> 3;
                if (v292 > 4) {
                  unsigned int v294 = *(unsigned __int16 *)(a2 + v293);
                }
                else {
                  unsigned int v294 = *(unsigned __int8 *)(a2 + v293);
                }
                *(_DWORD *)(result + 34) = v291 | (((v294 >> v292) & 0xF) << 16);
                uint64_t v22 = 52;
              }
              else
              {
                *(_DWORD *)(result + 28) = 0;
                unint64_t v245 = *a3 + 27;
                unint64_t v246 = v245 & 7;
                unint64_t v247 = v245 >> 3;
                if (v246 > 3) {
                  unsigned int v248 = *(unsigned __int16 *)(a2 + v247);
                }
                else {
                  unsigned int v248 = *(unsigned __int8 *)(a2 + v247);
                }
                *(unsigned char *)(result + 32) |= (v248 >> v246) & 0x1F;
                uint64_t v22 = 32;
              }
              break;
          }
          break;
        case 2:
          *(_WORD *)(result + 8) = 6;
          *(void *)uint64_t result = 0x900000009;
          unint64_t v60 = *a3 + 4;
          unint64_t v61 = v60 >> 3;
          unint64_t v62 = v60 & 7;
          if (v62) {
            int v63 = *(unsigned __int16 *)(a2 + v61) >> v62;
          }
          else {
            LOBYTE(v63) = *(unsigned char *)(a2 + v61);
          }
          *(unsigned char *)(result + 16) |= v63;
          unint64_t v115 = *a3 + 12;
          unint64_t v116 = v115 >> 3;
          unint64_t v117 = v115 & 7;
          if (v117)
          {
            uint64_t v118 = (unsigned __int8 *)(a2 + v116);
            unint64_t v119 = (((unint64_t)v118[4] << 32) | ((unint64_t)v118[3] << 24) | ((unint64_t)v118[2] << 16) | ((unint64_t)v118[1] << 8) | *v118) >> v117;
          }
          else
          {
            LODWORD(v119) = *(_DWORD *)(a2 + v116);
          }
          *(_DWORD *)(result + 20) |= v119;
          uint64_t v22 = 44;
          break;
        case 3:
          *(_WORD *)(result + 8) = 62;
          *(void *)uint64_t result = 0xA0000000ALL;
          unint64_t v64 = *a3 + 4;
          unint64_t v65 = v64 & 7;
          unint64_t v66 = v64 >> 3;
          if (v65 > 4) {
            unsigned __int16 v67 = *(_WORD *)(a2 + v66);
          }
          else {
            unsigned __int16 v67 = *(unsigned __int8 *)(a2 + v66);
          }
          switch((v67 >> v65) & 0xF)
          {
            case 1:
              *(_DWORD *)(result + 16) = 1;
              unint64_t v299 = *a3 & 7;
              unint64_t v300 = (unint64_t)(*a3 + 8) >> 3;
              if (v299 > 4)
              {
                int v302 = (*(unsigned __int8 *)(v300 + a2 + 3) << 24) | (*(unsigned __int8 *)(v300 + a2 + 2) << 16);
                int v301 = *(unsigned __int8 *)(v300 + a2 + 1) << 8;
              }
              else
              {
                int v301 = *(unsigned __int8 *)(v300 + a2 + 2) << 16;
                int v302 = *(unsigned __int8 *)(v300 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v302 | v301 | *(unsigned __int8 *)(a2 + v300)) >> v299) & 0xFFFFF;
              unint64_t v487 = *a3 + 28;
              unint64_t v488 = v487 & 7;
              unint64_t v489 = v487 >> 3;
              if (v488 > 4)
              {
                int v491 = (*(unsigned __int8 *)(v489 + a2 + 3) << 24) | (*(unsigned __int8 *)(v489 + a2 + 2) << 16);
                int v490 = *(unsigned __int8 *)(v489 + a2 + 1) << 8;
              }
              else
              {
                int v490 = *(unsigned __int8 *)(v489 + a2 + 2) << 16;
                int v491 = *(unsigned __int8 *)(v489 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v491 | v490 | *(unsigned __int8 *)(a2 + v489)) >> v488) & 0xFFFFF;
              unint64_t v547 = *a3 & 7;
              unint64_t v548 = (unint64_t)(*a3 + 48) >> 3;
              if (v547 > 4)
              {
                int v550 = (*(unsigned __int8 *)(v548 + a2 + 3) << 24) | (*(unsigned __int8 *)(v548 + a2 + 2) << 16);
                int v549 = *(unsigned __int8 *)(v548 + a2 + 1) << 8;
              }
              else
              {
                int v549 = *(unsigned __int8 *)(v548 + a2 + 2) << 16;
                int v550 = *(unsigned __int8 *)(v548 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v550 | v549 | *(unsigned __int8 *)(a2 + v548)) >> v547) & 0xFFFFF;
              unint64_t v599 = *a3 + 68;
              unint64_t v600 = v599 & 7;
              unint64_t v601 = v599 >> 3;
              if (v600 > 4)
              {
                int v603 = (*(unsigned __int8 *)(v601 + a2 + 3) << 24) | (*(unsigned __int8 *)(v601 + a2 + 2) << 16);
                int v602 = *(unsigned __int8 *)(v601 + a2 + 1) << 8;
              }
              else
              {
                int v602 = *(unsigned __int8 *)(v601 + a2 + 2) << 16;
                int v603 = *(unsigned __int8 *)(v601 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v603 | v602 | *(unsigned __int8 *)(a2 + v601)) >> v600) & 0xFFFFF;
              unint64_t v641 = *a3 & 7;
              unint64_t v642 = (unint64_t)(*a3 + 88) >> 3;
              if (v641 > 4)
              {
                int v644 = (*(unsigned __int8 *)(v642 + a2 + 3) << 24) | (*(unsigned __int8 *)(v642 + a2 + 2) << 16);
                int v643 = *(unsigned __int8 *)(v642 + a2 + 1) << 8;
              }
              else
              {
                int v643 = *(unsigned __int8 *)(v642 + a2 + 2) << 16;
                int v644 = *(unsigned __int8 *)(v642 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v644 | v643 | *(unsigned __int8 *)(a2 + v642)) >> v641) & 0xFFFFF;
              unint64_t v681 = *a3 + 108;
              unint64_t v682 = v681 & 7;
              unint64_t v683 = v681 >> 3;
              if (v682 > 4)
              {
                int v685 = (*(unsigned __int8 *)(v683 + a2 + 3) << 24) | (*(unsigned __int8 *)(v683 + a2 + 2) << 16);
                int v684 = *(unsigned __int8 *)(v683 + a2 + 1) << 8;
              }
              else
              {
                int v684 = *(unsigned __int8 *)(v683 + a2 + 2) << 16;
                int v685 = *(unsigned __int8 *)(v683 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v685 | v684 | *(unsigned __int8 *)(a2 + v683)) >> v682) & 0xFFFFF;
              unint64_t v718 = *a3 & 7;
              unint64_t v719 = (unint64_t)(*a3 + 128) >> 3;
              if (v718 > 4)
              {
                int v721 = (*(unsigned __int8 *)(v719 + a2 + 3) << 24) | (*(unsigned __int8 *)(v719 + a2 + 2) << 16);
                int v720 = *(unsigned __int8 *)(v719 + a2 + 1) << 8;
              }
              else
              {
                int v720 = *(unsigned __int8 *)(v719 + a2 + 2) << 16;
                int v721 = *(unsigned __int8 *)(v719 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v721 | v720 | *(unsigned __int8 *)(a2 + v719)) >> v718) & 0xFFFFF;
              unint64_t v756 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v757 = (unint64_t)(*a3 + 148) >> 3;
              if (v756 > 4)
              {
                int v759 = (*(unsigned __int8 *)(v757 + a2 + 3) << 24) | (*(unsigned __int8 *)(v757 + a2 + 2) << 16);
                int v758 = *(unsigned __int8 *)(v757 + a2 + 1) << 8;
              }
              else
              {
                int v758 = *(unsigned __int8 *)(v757 + a2 + 2) << 16;
                int v759 = *(unsigned __int8 *)(v757 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v759 | v758 | *(unsigned __int8 *)(a2 + v757)) >> v756) & 0xFFFFF;
              unint64_t v792 = (unint64_t)(*a3 + 168) >> 3;
              uint64_t v793 = *a3 & 7;
              if (v793) {
                unsigned int v794 = ((*(unsigned __int8 *)(a2 + v792 + 2) << 16) | (*(unsigned __int8 *)(a2 + v792 + 1) << 8) | *(unsigned __int8 *)(a2 + v792)) >> v793;
              }
              else {
                LOWORD(v794) = *(_WORD *)(a2 + v792);
              }
              int v1148 = *(_DWORD *)(result + 56) | (unsigned __int16)v794;
              *(_DWORD *)(result + 56) = v1148;
              unint64_t v1149 = (unint64_t)(*a3 + 184) >> 3;
              uint64_t v1150 = *a3 & 7;
              if (v1150) {
                unsigned int v1151 = ((*(unsigned __int8 *)(a2 + v1149 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1149 + 1) << 8) | *(unsigned __int8 *)(a2 + v1149)) >> v1150;
              }
              else {
                unsigned int v1151 = *(unsigned __int16 *)(a2 + v1149);
              }
              *(_DWORD *)(result + 56) = v1148 | (v1151 << 16);
              uint64_t v22 = 200;
              break;
            case 2:
              *(_DWORD *)(result + 16) = 2;
              uint64_t v303 = *a3 & 7;
              unint64_t v304 = (unint64_t)(*a3 + 8) >> 3;
              if (v303 == 7) {
                int v305 = *(unsigned __int16 *)(a2 + v304) >> 7;
              }
              else {
                int v305 = *(unsigned __int8 *)(a2 + v304) >> v303;
              }
              *(unsigned char *)(result + 24) |= v305 & 3;
              unint64_t v492 = *a3 + 10;
              unint64_t v493 = v492 & 7;
              unint64_t v494 = v492 >> 3;
              if (v493 > 1) {
                unsigned int v495 = (*(unsigned __int8 *)(a2 + v494 + 2) << 16) | (*(unsigned __int8 *)(a2 + v494 + 1) << 8) | *(unsigned __int8 *)(a2 + v494);
              }
              else {
                unsigned int v495 = *(unsigned __int16 *)(a2 + v494);
              }
              *(_WORD *)(result + 26) |= (v495 >> v493) & 0x7FFF;
              unint64_t v551 = *a3 + 25;
              unint64_t v552 = v551 & 7;
              unint64_t v553 = v551 >> 3;
              if (v552 > 1) {
                unsigned int v554 = (*(unsigned __int8 *)(a2 + v553 + 2) << 16) | (*(unsigned __int8 *)(a2 + v553 + 1) << 8) | *(unsigned __int8 *)(a2 + v553);
              }
              else {
                unsigned int v554 = *(unsigned __int16 *)(a2 + v553);
              }
              *(_WORD *)(result + 28) |= (v554 >> v552) & 0x7FFF;
              unint64_t v604 = *a3 & 7;
              unint64_t v605 = (unint64_t)(*a3 + 40) >> 3;
              if (v604 > 1) {
                unsigned int v606 = (*(unsigned __int8 *)(a2 + v605 + 2) << 16) | (*(unsigned __int8 *)(a2 + v605 + 1) << 8) | *(unsigned __int8 *)(a2 + v605);
              }
              else {
                unsigned int v606 = *(unsigned __int16 *)(a2 + v605);
              }
              *(_WORD *)(result + 30) |= (v606 >> v604) & 0x7FFF;
              unint64_t v645 = *a3 + 55;
              unint64_t v646 = v645 & 7;
              unint64_t v647 = v645 >> 3;
              if (v646 > 1) {
                unsigned int v648 = (*(unsigned __int8 *)(a2 + v647 + 2) << 16) | (*(unsigned __int8 *)(a2 + v647 + 1) << 8) | *(unsigned __int8 *)(a2 + v647);
              }
              else {
                unsigned int v648 = *(unsigned __int16 *)(a2 + v647);
              }
              *(_WORD *)(result + 32) |= (v648 >> v646) & 0x7FFF;
              unint64_t v686 = *a3 + 70;
              unint64_t v687 = v686 & 7;
              unint64_t v688 = v686 >> 3;
              if (v687 > 1) {
                unsigned int v689 = (*(unsigned __int8 *)(a2 + v688 + 2) << 16) | (*(unsigned __int8 *)(a2 + v688 + 1) << 8) | *(unsigned __int8 *)(a2 + v688);
              }
              else {
                unsigned int v689 = *(unsigned __int16 *)(a2 + v688);
              }
              *(_WORD *)(result + 34) |= (v689 >> v687) & 0x7FFF;
              unint64_t v722 = *a3 + 85;
              unint64_t v723 = v722 & 7;
              unint64_t v724 = v722 >> 3;
              if (v723 > 1) {
                unsigned int v725 = (*(unsigned __int8 *)(a2 + v724 + 2) << 16) | (*(unsigned __int8 *)(a2 + v724 + 1) << 8) | *(unsigned __int8 *)(a2 + v724);
              }
              else {
                unsigned int v725 = *(unsigned __int16 *)(a2 + v724);
              }
              *(_WORD *)(result + 36) |= (v725 >> v723) & 0x7FFF;
              unint64_t v760 = *a3 + 100;
              unint64_t v761 = v760 & 7;
              unint64_t v762 = v760 >> 3;
              if (v761 > 1) {
                unsigned int v763 = (*(unsigned __int8 *)(a2 + v762 + 2) << 16) | (*(unsigned __int8 *)(a2 + v762 + 1) << 8) | *(unsigned __int8 *)(a2 + v762);
              }
              else {
                unsigned int v763 = *(unsigned __int16 *)(a2 + v762);
              }
              *(_WORD *)(result + 38) |= (v763 >> v761) & 0x7FFF;
              unint64_t v795 = *a3 + 115;
              unint64_t v796 = v795 & 7;
              unint64_t v797 = v795 >> 3;
              if (v796 > 1) {
                unsigned int v798 = (*(unsigned __int8 *)(a2 + v797 + 2) << 16) | (*(unsigned __int8 *)(a2 + v797 + 1) << 8) | *(unsigned __int8 *)(a2 + v797);
              }
              else {
                unsigned int v798 = *(unsigned __int16 *)(a2 + v797);
              }
              *(_WORD *)(result + 40) |= (v798 >> v796) & 0x7FFF;
              unint64_t v821 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v822 = (unint64_t)(*a3 + 130) >> 3;
              if (v821 > 1) {
                unsigned int v823 = (*(unsigned __int8 *)(a2 + v822 + 2) << 16) | (*(unsigned __int8 *)(a2 + v822 + 1) << 8) | *(unsigned __int8 *)(a2 + v822);
              }
              else {
                unsigned int v823 = *(unsigned __int16 *)(a2 + v822);
              }
              *(_WORD *)(result + 42) |= (v823 >> v821) & 0x7FFF;
              unint64_t v843 = (*(unsigned char *)a3 - 111) & 7;
              unint64_t v844 = (unint64_t)(*a3 + 145) >> 3;
              if (v843 > 1) {
                unsigned int v845 = (*(unsigned __int8 *)(a2 + v844 + 2) << 16) | (*(unsigned __int8 *)(a2 + v844 + 1) << 8) | *(unsigned __int8 *)(a2 + v844);
              }
              else {
                unsigned int v845 = *(unsigned __int16 *)(a2 + v844);
              }
              *(_WORD *)(result + 44) |= (v845 >> v843) & 0x7FFF;
              unint64_t v860 = *a3 & 7;
              unint64_t v861 = (unint64_t)(*a3 + 160) >> 3;
              if (v860 > 1) {
                unsigned int v862 = (*(unsigned __int8 *)(a2 + v861 + 2) << 16) | (*(unsigned __int8 *)(a2 + v861 + 1) << 8) | *(unsigned __int8 *)(a2 + v861);
              }
              else {
                unsigned int v862 = *(unsigned __int16 *)(a2 + v861);
              }
              *(_WORD *)(result + 46) |= (v862 >> v860) & 0x7FFF;
              unint64_t v877 = (*(unsigned char *)a3 - 81) & 7;
              unint64_t v878 = (unint64_t)(*a3 + 175) >> 3;
              if (v877 > 1) {
                unsigned int v879 = (*(unsigned __int8 *)(a2 + v878 + 2) << 16) | (*(unsigned __int8 *)(a2 + v878 + 1) << 8) | *(unsigned __int8 *)(a2 + v878);
              }
              else {
                unsigned int v879 = *(unsigned __int16 *)(a2 + v878);
              }
              *(_WORD *)(result + 48) |= (v879 >> v877) & 0x7FFF;
              unint64_t v894 = (*(unsigned char *)a3 - 66) & 7;
              unint64_t v895 = (unint64_t)(*a3 + 190) >> 3;
              if (v894 > 1) {
                unsigned int v896 = (*(unsigned __int8 *)(a2 + v895 + 2) << 16) | (*(unsigned __int8 *)(a2 + v895 + 1) << 8) | *(unsigned __int8 *)(a2 + v895);
              }
              else {
                unsigned int v896 = *(unsigned __int16 *)(a2 + v895);
              }
              *(_WORD *)(result + 50) |= (v896 >> v894) & 0x7FFF;
              unint64_t v911 = (*(unsigned char *)a3 - 51) & 7;
              unint64_t v912 = (unint64_t)(*a3 + 205) >> 3;
              if (v911 > 1) {
                unsigned int v913 = (*(unsigned __int8 *)(a2 + v912 + 2) << 16) | (*(unsigned __int8 *)(a2 + v912 + 1) << 8) | *(unsigned __int8 *)(a2 + v912);
              }
              else {
                unsigned int v913 = *(unsigned __int16 *)(a2 + v912);
              }
              *(_WORD *)(result + 52) |= (v913 >> v911) & 0x7FFF;
              unint64_t v929 = (*(unsigned char *)a3 - 36) & 7;
              unint64_t v930 = (unint64_t)(*a3 + 220) >> 3;
              if (v929 > 1) {
                unsigned int v931 = (*(unsigned __int8 *)(a2 + v930 + 2) << 16) | (*(unsigned __int8 *)(a2 + v930 + 1) << 8) | *(unsigned __int8 *)(a2 + v930);
              }
              else {
                unsigned int v931 = *(unsigned __int16 *)(a2 + v930);
              }
              *(_WORD *)(result + 54) |= (v931 >> v929) & 0x7FFF;
              unint64_t v947 = (*(unsigned char *)a3 - 21) & 7;
              unint64_t v948 = (unint64_t)(*a3 + 235) >> 3;
              if (v947 > 1) {
                unsigned int v949 = (*(unsigned __int8 *)(a2 + v948 + 2) << 16) | (*(unsigned __int8 *)(a2 + v948 + 1) << 8) | *(unsigned __int8 *)(a2 + v948);
              }
              else {
                unsigned int v949 = *(unsigned __int16 *)(a2 + v948);
              }
              *(_WORD *)(result + 56) |= (v949 >> v947) & 0x7FFF;
              unint64_t v967 = (*(unsigned char *)a3 - 6) & 7;
              unint64_t v968 = (unint64_t)(*a3 + 250) >> 3;
              if (v967 > 1) {
                unsigned int v969 = (*(unsigned __int8 *)(a2 + v968 + 2) << 16) | (*(unsigned __int8 *)(a2 + v968 + 1) << 8) | *(unsigned __int8 *)(a2 + v968);
              }
              else {
                unsigned int v969 = *(unsigned __int16 *)(a2 + v968);
              }
              *(_WORD *)(result + 58) |= (v969 >> v967) & 0x7FFF;
              unint64_t v983 = *a3 + 265;
              unint64_t v984 = v983 & 7;
              unint64_t v985 = v983 >> 3;
              if (v984 > 1) {
                unsigned int v986 = (*(unsigned __int8 *)(a2 + v985 + 2) << 16) | (*(unsigned __int8 *)(a2 + v985 + 1) << 8) | *(unsigned __int8 *)(a2 + v985);
              }
              else {
                unsigned int v986 = *(unsigned __int16 *)(a2 + v985);
              }
              *(_WORD *)(result + 60) |= (v986 >> v984) & 0x7FFF;
              unint64_t v1000 = *a3 & 7;
              unint64_t v1001 = (unint64_t)(*a3 + 280) >> 3;
              if (v1000 > 1) {
                unsigned int v1002 = (*(unsigned __int8 *)(a2 + v1001 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1001 + 1) << 8) | *(unsigned __int8 *)(a2 + v1001);
              }
              else {
                unsigned int v1002 = *(unsigned __int16 *)(a2 + v1001);
              }
              *(_WORD *)(result + 62) |= (v1002 >> v1000) & 0x7FFF;
              unint64_t v1011 = *a3 + 295;
              unint64_t v1012 = v1011 & 7;
              unint64_t v1013 = v1011 >> 3;
              if (v1012 > 1) {
                unsigned int v1014 = (*(unsigned __int8 *)(a2 + v1013 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1013 + 1) << 8) | *(unsigned __int8 *)(a2 + v1013);
              }
              else {
                unsigned int v1014 = *(unsigned __int16 *)(a2 + v1013);
              }
              *(_WORD *)(result + 64) |= (v1014 >> v1012) & 0x7FFF;
              unint64_t v1019 = *a3 + 310;
              unint64_t v1020 = v1019 & 7;
              unint64_t v1021 = v1019 >> 3;
              if (v1020 > 1) {
                unsigned int v1022 = (*(unsigned __int8 *)(a2 + v1021 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1021 + 1) << 8) | *(unsigned __int8 *)(a2 + v1021);
              }
              else {
                unsigned int v1022 = *(unsigned __int16 *)(a2 + v1021);
              }
              *(_WORD *)(result + 66) |= (v1022 >> v1020) & 0x7FFF;
              unint64_t v1027 = *a3 + 325;
              unint64_t v1028 = v1027 & 7;
              unint64_t v1029 = v1027 >> 3;
              if (v1028 > 1) {
                unsigned int v1030 = (*(unsigned __int8 *)(a2 + v1029 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1029 + 1) << 8) | *(unsigned __int8 *)(a2 + v1029);
              }
              else {
                unsigned int v1030 = *(unsigned __int16 *)(a2 + v1029);
              }
              *(_WORD *)(result + 68) |= (v1030 >> v1028) & 0x7FFF;
              unint64_t v1035 = *a3 + 340;
              unint64_t v1036 = v1035 & 7;
              unint64_t v1037 = v1035 >> 3;
              if (v1036 > 1) {
                unsigned int v1038 = (*(unsigned __int8 *)(a2 + v1037 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1037 + 1) << 8) | *(unsigned __int8 *)(a2 + v1037);
              }
              else {
                unsigned int v1038 = *(unsigned __int16 *)(a2 + v1037);
              }
              *(_WORD *)(result + 70) |= (v1038 >> v1036) & 0x7FFF;
              unint64_t v1043 = *a3 + 355;
              unint64_t v1044 = v1043 & 7;
              unint64_t v1045 = v1043 >> 3;
              if (v1044 > 1) {
                unsigned int v1046 = (*(unsigned __int8 *)(a2 + v1045 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1045 + 1) << 8) | *(unsigned __int8 *)(a2 + v1045);
              }
              else {
                unsigned int v1046 = *(unsigned __int16 *)(a2 + v1045);
              }
              *(_WORD *)(result + 72) |= (v1046 >> v1044) & 0x7FFF;
              unint64_t v1051 = *a3 + 370;
              unint64_t v1052 = v1051 & 7;
              unint64_t v1053 = v1051 >> 3;
              if (v1052 > 1) {
                unsigned int v1054 = (*(unsigned __int8 *)(a2 + v1053 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1053 + 1) << 8) | *(unsigned __int8 *)(a2 + v1053);
              }
              else {
                unsigned int v1054 = *(unsigned __int16 *)(a2 + v1053);
              }
              *(_WORD *)(result + 74) |= (v1054 >> v1052) & 0x7FFF;
              unint64_t v1059 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v1060 = (unint64_t)(*a3 + 385) >> 3;
              if (v1059 > 1) {
                unsigned int v1061 = (*(unsigned __int8 *)(a2 + v1060 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1060 + 1) << 8) | *(unsigned __int8 *)(a2 + v1060);
              }
              else {
                unsigned int v1061 = *(unsigned __int16 *)(a2 + v1060);
              }
              *(_WORD *)(result + 76) |= (v1061 >> v1059) & 0x7FFF;
              unint64_t v1066 = *a3 & 7;
              unint64_t v1067 = (unint64_t)(*a3 + 400) >> 3;
              if (v1066 > 1) {
                unsigned int v1068 = (*(unsigned __int8 *)(a2 + v1067 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1067 + 1) << 8) | *(unsigned __int8 *)(a2 + v1067);
              }
              else {
                unsigned int v1068 = *(unsigned __int16 *)(a2 + v1067);
              }
              *(_WORD *)(result + 78) |= (v1068 >> v1066) & 0x7FFF;
              unint64_t v1072 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v1073 = (unint64_t)(*a3 + 415) >> 3;
              if (v1072 > 1) {
                unsigned int v1074 = (*(unsigned __int8 *)(a2 + v1073 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1073 + 1) << 8) | *(unsigned __int8 *)(a2 + v1073);
              }
              else {
                unsigned int v1074 = *(unsigned __int16 *)(a2 + v1073);
              }
              *(_WORD *)(result + 80) |= (v1074 >> v1072) & 0x7FFF;
              unint64_t v1079 = (*(unsigned char *)a3 - 82) & 7;
              unint64_t v1080 = (unint64_t)(*a3 + 430) >> 3;
              if (v1079 > 1) {
                unsigned int v1081 = (*(unsigned __int8 *)(a2 + v1080 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1080 + 1) << 8) | *(unsigned __int8 *)(a2 + v1080);
              }
              else {
                unsigned int v1081 = *(unsigned __int16 *)(a2 + v1080);
              }
              *(_WORD *)(result + 82) |= (v1081 >> v1079) & 0x7FFF;
              unint64_t v1085 = (*(unsigned char *)a3 - 67) & 7;
              unint64_t v1086 = (unint64_t)(*a3 + 445) >> 3;
              if (v1085 > 1) {
                unsigned int v1087 = (*(unsigned __int8 *)(a2 + v1086 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1086 + 1) << 8) | *(unsigned __int8 *)(a2 + v1086);
              }
              else {
                unsigned int v1087 = *(unsigned __int16 *)(a2 + v1086);
              }
              *(_WORD *)(result + 84) |= (v1087 >> v1085) & 0x7FFF;
              unint64_t v1091 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v1092 = (unint64_t)(*a3 + 460) >> 3;
              if (v1091 > 1) {
                unsigned int v1093 = (*(unsigned __int8 *)(a2 + v1092 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1092 + 1) << 8) | *(unsigned __int8 *)(a2 + v1092);
              }
              else {
                unsigned int v1093 = *(unsigned __int16 *)(a2 + v1092);
              }
              *(_WORD *)(result + 86) |= (v1093 >> v1091) & 0x7FFF;
              unint64_t v1097 = (*(unsigned char *)a3 - 37) & 7;
              unint64_t v1098 = (unint64_t)(*a3 + 475) >> 3;
              if (v1097 > 1) {
                unsigned int v1099 = (*(unsigned __int8 *)(a2 + v1098 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1098 + 1) << 8) | *(unsigned __int8 *)(a2 + v1098);
              }
              else {
                unsigned int v1099 = *(unsigned __int16 *)(a2 + v1098);
              }
              *(_WORD *)(result + 88) |= (v1099 >> v1097) & 0x7FFF;
              uint64_t v22 = 490;
              break;
            case 3:
              *(_DWORD *)(result + 16) = 3;
              *(unsigned char *)(result + 24) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1;
              unint64_t v306 = *a3 + 9;
              unint64_t v307 = v306 >> 3;
              unint64_t v308 = v306 & 7;
              if (v308) {
                unsigned int v309 = ((*(unsigned __int8 *)(a2 + v307 + 2) << 16) | (*(unsigned __int8 *)(a2 + v307 + 1) << 8) | *(unsigned __int8 *)(a2 + v307)) >> v308;
              }
              else {
                LOWORD(v309) = *(_WORD *)(a2 + v307);
              }
              uint64_t v1100 = (unsigned __int16)v309;
              int v1101 = *(_DWORD *)(result + 34);
              uint64_t v1102 = *(void *)(result + 26);
              uint64_t v1103 = v1102 | v1100;
              *(void *)(result + 26) = v1103;
              unint64_t v1104 = *a3 + 25;
              unint64_t v1105 = v1104 >> 3;
              unint64_t v1106 = v1104 & 7;
              if (v1106) {
                unsigned int v1107 = ((*(unsigned __int8 *)(a2 + v1105 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1105 + 1) << 8) | *(unsigned __int8 *)(a2 + v1105)) >> v1106;
              }
              else {
                unsigned int v1107 = *(unsigned __int16 *)(a2 + v1105);
              }
              unint64_t v1155 = v1103 & 0xFFFFFFFF0000FFFFLL | v1103 & 0xFFFF0000 | (unint64_t)(v1107 << 16);
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1155;
              unint64_t v1156 = *a3 + 41;
              unint64_t v1157 = v1156 >> 3;
              unint64_t v1158 = v1156 & 7;
              if (v1158) {
                unsigned int v1159 = ((*(unsigned __int8 *)(a2 + v1157 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1157 + 1) << 8) | *(unsigned __int8 *)(a2 + v1157)) >> v1158;
              }
              else {
                LOWORD(v1159) = *(_WORD *)(a2 + v1157);
              }
              unint64_t v1171 = v1155 & 0xFFFF0000FFFFFFFFLL | v1102 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1159 << 32);
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1171;
              unint64_t v1172 = *a3 + 57;
              unint64_t v1173 = v1172 >> 3;
              unint64_t v1174 = v1172 & 7;
              if (v1174) {
                uint64_t v1175 = ((*(unsigned __int8 *)(a2 + v1173 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1173 + 1) << 8) | *(unsigned __int8 *)(a2 + v1173)) >> v1174;
              }
              else {
                uint64_t v1175 = *(unsigned __int16 *)(a2 + v1173);
              }
              unint64_t v1176 = v1171 & 0xFFFF000000000000 | (v1175 << 48) | v1171 & 0xFFFFFFFFFFFFLL;
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1176;
              unint64_t v1177 = *a3 + 73;
              unint64_t v1178 = v1177 >> 3;
              unint64_t v1179 = v1177 & 7;
              if (v1179) {
                unsigned int v1180 = ((*(unsigned __int8 *)(a2 + v1178 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1178 + 1) << 8) | *(unsigned __int8 *)(a2 + v1178)) >> v1179;
              }
              else {
                LOWORD(v1180) = *(_WORD *)(a2 + v1178);
              }
              unsigned int v1181 = (unsigned __int16)(v1101 | v1180) | v1101 & 0xFFFF0000;
              *(void *)(result + 26) = v1176;
              *(_DWORD *)(result + 34) = v1181;
              unint64_t v1182 = *a3 + 89;
              unint64_t v1183 = v1182 & 7;
              unint64_t v1184 = v1182 >> 3;
              if (v1183 > 1) {
                unsigned int v1185 = (*(unsigned __int8 *)(a2 + v1184 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1184 + 1) << 8) | *(unsigned __int8 *)(a2 + v1184);
              }
              else {
                unsigned int v1185 = *(unsigned __int16 *)(a2 + v1184);
              }
              *(void *)(result + 26) = v1176;
              *(_DWORD *)(result + 34) = v1181 & 0x8000FFFF | ((((v1185 >> v1183) | HIWORD(v1181)) & 0x7FFF) << 16);
              unint64_t v1186 = (unint64_t)(*a3 + 104) >> 3;
              uint64_t v1187 = *a3 & 7;
              if (v1187) {
                unsigned int v1188 = ((*(unsigned __int8 *)(a2 + v1186 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1186 + 1) << 8) | *(unsigned __int8 *)(a2 + v1186)) >> v1187;
              }
              else {
                LOWORD(v1188) = *(_WORD *)(a2 + v1186);
              }
              uint64_t v1189 = (unsigned __int16)v1188;
              int v1190 = *(_DWORD *)(result + 46);
              uint64_t v1191 = *(void *)(result + 38);
              uint64_t v1192 = v1191 | v1189;
              *(void *)(result + 38) = v1192;
              unint64_t v1193 = (unint64_t)(*a3 + 120) >> 3;
              uint64_t v1194 = *a3 & 7;
              if (v1194) {
                unsigned int v1195 = ((*(unsigned __int8 *)(a2 + v1193 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1193 + 1) << 8) | *(unsigned __int8 *)(a2 + v1193)) >> v1194;
              }
              else {
                unsigned int v1195 = *(unsigned __int16 *)(a2 + v1193);
              }
              unint64_t v1196 = v1192 & 0xFFFFFFFF0000FFFFLL | v1192 & 0xFFFF0000 | (unint64_t)(v1195 << 16);
              *(_DWORD *)(result + 46) = v1190;
              *(void *)(result + 38) = v1196;
              unint64_t v1197 = (unint64_t)(*a3 + 136) >> 3;
              uint64_t v1198 = *a3 & 7;
              if (v1198) {
                unsigned int v1199 = ((*(unsigned __int8 *)(a2 + v1197 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1197 + 1) << 8) | *(unsigned __int8 *)(a2 + v1197)) >> v1198;
              }
              else {
                LOWORD(v1199) = *(_WORD *)(a2 + v1197);
              }
              unint64_t v1200 = v1196 & 0xFFFF0000FFFFFFFFLL | v1191 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1199 << 32);
              *(_DWORD *)(result + 46) = v1190;
              *(void *)(result + 38) = v1200;
              unint64_t v1201 = (unint64_t)(*a3 + 152) >> 3;
              uint64_t v1202 = *a3 & 7;
              if (v1202) {
                uint64_t v1203 = ((*(unsigned __int8 *)(a2 + v1201 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1201 + 1) << 8) | *(unsigned __int8 *)(a2 + v1201)) >> v1202;
              }
              else {
                uint64_t v1203 = *(unsigned __int16 *)(a2 + v1201);
              }
              unint64_t v1204 = v1200 & 0xFFFF000000000000 | (v1203 << 48) | v1200 & 0xFFFFFFFFFFFFLL;
              *(_DWORD *)(result + 46) = v1190;
              *(void *)(result + 38) = v1204;
              unint64_t v1205 = (unint64_t)(*a3 + 168) >> 3;
              uint64_t v1206 = *a3 & 7;
              if (v1206) {
                unsigned int v1207 = ((*(unsigned __int8 *)(a2 + v1205 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1205 + 1) << 8) | *(unsigned __int8 *)(a2 + v1205)) >> v1206;
              }
              else {
                LOWORD(v1207) = *(_WORD *)(a2 + v1205);
              }
              unsigned int v1208 = (unsigned __int16)(v1190 | v1207) | v1190 & 0xFFFF0000;
              *(void *)(result + 38) = v1204;
              *(_DWORD *)(result + 46) = v1208;
              unint64_t v1209 = *a3 & 7;
              unint64_t v1210 = (unint64_t)(*a3 + 184) >> 3;
              if (v1209 > 1) {
                unsigned int v1211 = (*(unsigned __int8 *)(a2 + v1210 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1210 + 1) << 8) | *(unsigned __int8 *)(a2 + v1210);
              }
              else {
                unsigned int v1211 = *(unsigned __int16 *)(a2 + v1210);
              }
              *(void *)(result + 38) = v1204;
              *(_DWORD *)(result + 46) = v1208 & 0x8000FFFF | ((((v1211 >> v1209) | HIWORD(v1208)) & 0x7FFF) << 16);
              unint64_t v1212 = (*(unsigned char *)a3 - 57) & 7;
              unint64_t v1213 = (unint64_t)(*a3 + 199) >> 3;
              if (v1212 > 1) {
                unsigned int v1214 = (*(unsigned __int8 *)(a2 + v1213 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1213 + 1) << 8) | *(unsigned __int8 *)(a2 + v1213);
              }
              else {
                unsigned int v1214 = *(unsigned __int16 *)(a2 + v1213);
              }
              *(_WORD *)(result + 50) |= (v1214 >> v1212) & 0x7FFF;
              uint64_t v22 = 214;
              break;
            case 4:
              *(_DWORD *)(result + 16) = 4;
              int v310 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v310;
              unint64_t v311 = *a3 + 9;
              unint64_t v312 = v311 & 7;
              unint64_t v313 = v311 >> 3;
              if (v312 == 7) {
                int v314 = *(_DWORD *)(a2 + v313) >> 7;
              }
              else {
                int v314 = ((*(unsigned __int8 *)(a2 + v313 + 2) << 16) | (*(unsigned __int8 *)(a2 + v313 + 1) << 8) | *(unsigned __int8 *)(a2 + v313)) >> v312;
              }
              *(_DWORD *)(result + 24) = (2 * (v314 & 0x3FFFF)) | v310;
              unint64_t v496 = *a3 + 27;
              unint64_t v497 = v496 & 7;
              unint64_t v498 = v496 >> 3;
              if (v497 == 7) {
                int v499 = *(_DWORD *)(a2 + v498) >> 7;
              }
              else {
                int v499 = ((*(unsigned __int8 *)(a2 + v498 + 2) << 16) | (*(unsigned __int8 *)(a2 + v498 + 1) << 8) | *(unsigned __int8 *)(a2 + v498)) >> v497;
              }
              *(_DWORD *)(result + 28) |= v499 & 0x3FFFF;
              unint64_t v555 = *a3 + 45;
              unint64_t v556 = v555 & 7;
              unint64_t v557 = v555 >> 3;
              if (v556 == 7) {
                int v558 = *(_DWORD *)(a2 + v557) >> 7;
              }
              else {
                int v558 = ((*(unsigned __int8 *)(a2 + v557 + 2) << 16) | (*(unsigned __int8 *)(a2 + v557 + 1) << 8) | *(unsigned __int8 *)(a2 + v557)) >> v556;
              }
              *(_DWORD *)(result + 32) |= v558 & 0x3FFFF;
              unint64_t v607 = *a3 + 63;
              unint64_t v608 = v607 & 7;
              unint64_t v609 = v607 >> 3;
              if (v608 == 7) {
                int v610 = *(_DWORD *)(a2 + v609) >> 7;
              }
              else {
                int v610 = ((*(unsigned __int8 *)(a2 + v609 + 2) << 16) | (*(unsigned __int8 *)(a2 + v609 + 1) << 8) | *(unsigned __int8 *)(a2 + v609)) >> v608;
              }
              *(_DWORD *)(result + 36) |= v610 & 0x3FFFF;
              unint64_t v649 = *a3 + 81;
              unint64_t v650 = v649 & 7;
              unint64_t v651 = v649 >> 3;
              if (v650 == 7) {
                int v652 = *(_DWORD *)(a2 + v651) >> 7;
              }
              else {
                int v652 = ((*(unsigned __int8 *)(a2 + v651 + 2) << 16) | (*(unsigned __int8 *)(a2 + v651 + 1) << 8) | *(unsigned __int8 *)(a2 + v651)) >> v650;
              }
              *(_DWORD *)(result + 40) |= v652 & 0x3FFFF;
              unint64_t v690 = *a3 + 99;
              unint64_t v691 = v690 & 7;
              unint64_t v692 = v690 >> 3;
              if (v691 == 7) {
                int v693 = *(_DWORD *)(a2 + v692) >> 7;
              }
              else {
                int v693 = ((*(unsigned __int8 *)(a2 + v692 + 2) << 16) | (*(unsigned __int8 *)(a2 + v692 + 1) << 8) | *(unsigned __int8 *)(a2 + v692)) >> v691;
              }
              *(_DWORD *)(result + 44) |= v693 & 0x3FFFF;
              unint64_t v726 = *a3 + 117;
              unint64_t v727 = v726 & 7;
              unint64_t v728 = v726 >> 3;
              if (v727 > 4)
              {
                int v730 = (*(unsigned __int8 *)(v728 + a2 + 3) << 24) | (*(unsigned __int8 *)(v728 + a2 + 2) << 16);
                int v729 = *(unsigned __int8 *)(v728 + a2 + 1) << 8;
              }
              else
              {
                int v729 = *(unsigned __int8 *)(v728 + a2 + 2) << 16;
                int v730 = *(unsigned __int8 *)(v728 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v730 | v729 | *(unsigned __int8 *)(a2 + v728)) >> v727) & 0xFFFFF;
              unint64_t v764 = (*(unsigned char *)a3 - 119) & 7;
              unint64_t v765 = (unint64_t)(*a3 + 137) >> 3;
              if (v764 > 4)
              {
                int v767 = (*(unsigned __int8 *)(v765 + a2 + 3) << 24) | (*(unsigned __int8 *)(v765 + a2 + 2) << 16);
                int v766 = *(unsigned __int8 *)(v765 + a2 + 1) << 8;
              }
              else
              {
                int v766 = *(unsigned __int8 *)(v765 + a2 + 2) << 16;
                int v767 = *(unsigned __int8 *)(v765 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v767 | v766 | *(unsigned __int8 *)(a2 + v765)) >> v764) & 0xFFFFF;
              unint64_t v799 = (*(unsigned char *)a3 - 99) & 7;
              unint64_t v800 = (unint64_t)(*a3 + 157) >> 3;
              if (v799 > 4)
              {
                int v802 = (*(unsigned __int8 *)(v800 + a2 + 3) << 24) | (*(unsigned __int8 *)(v800 + a2 + 2) << 16);
                int v801 = *(unsigned __int8 *)(v800 + a2 + 1) << 8;
              }
              else
              {
                int v801 = *(unsigned __int8 *)(v800 + a2 + 2) << 16;
                int v802 = *(unsigned __int8 *)(v800 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v802 | v801 | *(unsigned __int8 *)(a2 + v800)) >> v799) & 0xFFFFF;
              unint64_t v824 = (unint64_t)(*a3 + 177) >> 3;
              if (((*(unsigned char *)a3 - 79) & 7) != 0) {
                unsigned int v825 = ((*(unsigned __int8 *)(a2 + v824 + 2) << 16) | (*(unsigned __int8 *)(a2 + v824 + 1) << 8) | *(unsigned __int8 *)(a2 + v824)) >> ((*(unsigned char *)a3 - 79) & 7);
              }
              else {
                LOWORD(v825) = *(_WORD *)(a2 + v824);
              }
              int v1152 = *(_DWORD *)(result + 60) | (unsigned __int16)v825;
              *(_DWORD *)(result + 60) = v1152;
              unint64_t v1153 = (unint64_t)(*a3 + 193) >> 3;
              if (((*(unsigned char *)a3 - 63) & 7) != 0) {
                unsigned int v1154 = ((*(unsigned __int8 *)(a2 + v1153 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1153 + 1) << 8) | *(unsigned __int8 *)(a2 + v1153)) >> ((*(unsigned char *)a3 - 63) & 7);
              }
              else {
                unsigned int v1154 = *(unsigned __int16 *)(a2 + v1153);
              }
              *(_DWORD *)(result + 60) = v1152 | (v1154 << 16);
              uint64_t v22 = 209;
              break;
            case 5:
              *(_DWORD *)(result + 16) = 5;
              int v315 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v315;
              unint64_t v316 = *a3 + 9;
              unint64_t v317 = v316 & 7;
              unint64_t v318 = v316 >> 3;
              if (v317 > 5)
              {
                int v320 = (*(unsigned __int8 *)(v318 + a2 + 3) << 24) | (*(unsigned __int8 *)(v318 + a2 + 2) << 16);
                int v319 = *(unsigned __int8 *)(v318 + a2 + 1) << 8;
              }
              else
              {
                int v319 = *(unsigned __int8 *)(v318 + a2 + 2) << 16;
                int v320 = *(unsigned __int8 *)(v318 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) = (2
                                        * (((v320 | v319 | *(unsigned __int8 *)(a2 + v318)) >> v317) & 0x7FFFF)) | v315;
              unint64_t v500 = *a3 + 28;
              *(_DWORD *)(result + 28) |= (((*(unsigned __int8 *)(a2 + (v500 >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + (v500 >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + (v500 >> 3))) >> (v500 & 7)) & 0x1FFFF;
              unint64_t v501 = *a3 + 45;
              unint64_t v502 = v501 & 7;
              unint64_t v503 = v501 >> 3;
              if (v502 > 4)
              {
                int v505 = (*(unsigned __int8 *)(v503 + a2 + 3) << 24) | (*(unsigned __int8 *)(v503 + a2 + 2) << 16);
                int v504 = *(unsigned __int8 *)(v503 + a2 + 1) << 8;
              }
              else
              {
                int v504 = *(unsigned __int8 *)(v503 + a2 + 2) << 16;
                int v505 = *(unsigned __int8 *)(v503 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v505 | v504 | *(unsigned __int8 *)(a2 + v503)) >> v502) & 0xFFFFF;
              unint64_t v559 = *a3 + 65;
              unint64_t v560 = v559 & 7;
              unint64_t v561 = v559 >> 3;
              if (v560 > 4)
              {
                int v563 = (*(unsigned __int8 *)(v561 + a2 + 3) << 24) | (*(unsigned __int8 *)(v561 + a2 + 2) << 16);
                int v562 = *(unsigned __int8 *)(v561 + a2 + 1) << 8;
              }
              else
              {
                int v562 = *(unsigned __int8 *)(v561 + a2 + 2) << 16;
                int v563 = *(unsigned __int8 *)(v561 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v563 | v562 | *(unsigned __int8 *)(a2 + v561)) >> v560) & 0xFFFFF;
              uint64_t v22 = 85;
              break;
            case 6:
              *(_DWORD *)(result + 16) = 6;
              int v321 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v321;
              unint64_t v322 = *a3 + 9;
              unint64_t v323 = v322 & 7;
              unint64_t v324 = v322 >> 3;
              if (v323 > 5)
              {
                int v326 = (*(unsigned __int8 *)(v324 + a2 + 3) << 24) | (*(unsigned __int8 *)(v324 + a2 + 2) << 16);
                int v325 = *(unsigned __int8 *)(v324 + a2 + 1) << 8;
              }
              else
              {
                int v325 = *(unsigned __int8 *)(v324 + a2 + 2) << 16;
                int v326 = *(unsigned __int8 *)(v324 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) = (2
                                        * (((v326 | v325 | *(unsigned __int8 *)(a2 + v324)) >> v323) & 0x7FFFF)) | v321;
              unint64_t v506 = *a3 + 28;
              unint64_t v507 = v506 & 7;
              unint64_t v508 = v506 >> 3;
              if (v507 > 5)
              {
                int v510 = (*(unsigned __int8 *)(v508 + a2 + 3) << 24) | (*(unsigned __int8 *)(v508 + a2 + 2) << 16);
                int v509 = *(unsigned __int8 *)(v508 + a2 + 1) << 8;
              }
              else
              {
                int v509 = *(unsigned __int8 *)(v508 + a2 + 2) << 16;
                int v510 = *(unsigned __int8 *)(v508 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v510 | v509 | *(unsigned __int8 *)(a2 + v508)) >> v507) & 0x7FFFF;
              unint64_t v564 = *a3 + 47;
              unint64_t v565 = v564 & 7;
              unint64_t v566 = v564 >> 3;
              if (v565 > 5)
              {
                int v568 = (*(unsigned __int8 *)(v566 + a2 + 3) << 24) | (*(unsigned __int8 *)(v566 + a2 + 2) << 16);
                int v567 = *(unsigned __int8 *)(v566 + a2 + 1) << 8;
              }
              else
              {
                int v567 = *(unsigned __int8 *)(v566 + a2 + 2) << 16;
                int v568 = *(unsigned __int8 *)(v566 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v568 | v567 | *(unsigned __int8 *)(a2 + v566)) >> v565) & 0x7FFFF;
              unint64_t v611 = *a3 + 66;
              unint64_t v612 = v611 & 7;
              unint64_t v613 = v611 >> 3;
              if (v612 > 5)
              {
                int v615 = (*(unsigned __int8 *)(v613 + a2 + 3) << 24) | (*(unsigned __int8 *)(v613 + a2 + 2) << 16);
                int v614 = *(unsigned __int8 *)(v613 + a2 + 1) << 8;
              }
              else
              {
                int v614 = *(unsigned __int8 *)(v613 + a2 + 2) << 16;
                int v615 = *(unsigned __int8 *)(v613 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v615 | v614 | *(unsigned __int8 *)(a2 + v613)) >> v612) & 0x7FFFF;
              unint64_t v653 = *a3 + 85;
              unint64_t v654 = v653 & 7;
              unint64_t v655 = v653 >> 3;
              if (v654 > 5)
              {
                int v657 = (*(unsigned __int8 *)(v655 + a2 + 3) << 24) | (*(unsigned __int8 *)(v655 + a2 + 2) << 16);
                int v656 = *(unsigned __int8 *)(v655 + a2 + 1) << 8;
              }
              else
              {
                int v656 = *(unsigned __int8 *)(v655 + a2 + 2) << 16;
                int v657 = *(unsigned __int8 *)(v655 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v657 | v656 | *(unsigned __int8 *)(a2 + v655)) >> v654) & 0x7FFFF;
              unint64_t v694 = *a3 & 7;
              unint64_t v695 = (unint64_t)(*a3 + 104) >> 3;
              if (v694 > 5)
              {
                int v697 = (*(unsigned __int8 *)(v695 + a2 + 3) << 24) | (*(unsigned __int8 *)(v695 + a2 + 2) << 16);
                int v696 = *(unsigned __int8 *)(v695 + a2 + 1) << 8;
              }
              else
              {
                int v696 = *(unsigned __int8 *)(v695 + a2 + 2) << 16;
                int v697 = *(unsigned __int8 *)(v695 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v697 | v696 | *(unsigned __int8 *)(a2 + v695)) >> v694) & 0x7FFFF;
              unint64_t v731 = *a3 + 123;
              unint64_t v732 = v731 & 7;
              unint64_t v733 = v731 >> 3;
              if (v732 > 5)
              {
                int v735 = (*(unsigned __int8 *)(v733 + a2 + 3) << 24) | (*(unsigned __int8 *)(v733 + a2 + 2) << 16);
                int v734 = *(unsigned __int8 *)(v733 + a2 + 1) << 8;
              }
              else
              {
                int v734 = *(unsigned __int8 *)(v733 + a2 + 2) << 16;
                int v735 = *(unsigned __int8 *)(v733 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v735 | v734 | *(unsigned __int8 *)(a2 + v733)) >> v732) & 0x7FFFF;
              unint64_t v768 = (*(unsigned char *)a3 - 114) & 7;
              unint64_t v769 = (unint64_t)(*a3 + 142) >> 3;
              if (v768 > 5)
              {
                int v771 = (*(unsigned __int8 *)(v769 + a2 + 3) << 24) | (*(unsigned __int8 *)(v769 + a2 + 2) << 16);
                int v770 = *(unsigned __int8 *)(v769 + a2 + 1) << 8;
              }
              else
              {
                int v770 = *(unsigned __int8 *)(v769 + a2 + 2) << 16;
                int v771 = *(unsigned __int8 *)(v769 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v771 | v770 | *(unsigned __int8 *)(a2 + v769)) >> v768) & 0x7FFFF;
              unint64_t v803 = (*(unsigned char *)a3 - 95) & 7;
              unint64_t v804 = (unint64_t)(*a3 + 161) >> 3;
              if (v803 > 5)
              {
                int v806 = (*(unsigned __int8 *)(v804 + a2 + 3) << 24) | (*(unsigned __int8 *)(v804 + a2 + 2) << 16);
                int v805 = *(unsigned __int8 *)(v804 + a2 + 1) << 8;
              }
              else
              {
                int v805 = *(unsigned __int8 *)(v804 + a2 + 2) << 16;
                int v806 = *(unsigned __int8 *)(v804 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v806 | v805 | *(unsigned __int8 *)(a2 + v804)) >> v803) & 0x7FFFF;
              unint64_t v826 = (*(unsigned char *)a3 - 76) & 7;
              unint64_t v827 = (unint64_t)(*a3 + 180) >> 3;
              if (v826 > 5)
              {
                int v829 = (*(unsigned __int8 *)(v827 + a2 + 3) << 24) | (*(unsigned __int8 *)(v827 + a2 + 2) << 16);
                int v828 = *(unsigned __int8 *)(v827 + a2 + 1) << 8;
              }
              else
              {
                int v828 = *(unsigned __int8 *)(v827 + a2 + 2) << 16;
                int v829 = *(unsigned __int8 *)(v827 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v829 | v828 | *(unsigned __int8 *)(a2 + v827)) >> v826) & 0x7FFFF;
              unint64_t v846 = (*(unsigned char *)a3 - 57) & 7;
              unint64_t v847 = (unint64_t)(*a3 + 199) >> 3;
              if (v846 > 5)
              {
                int v849 = (*(unsigned __int8 *)(v847 + a2 + 3) << 24) | (*(unsigned __int8 *)(v847 + a2 + 2) << 16);
                int v848 = *(unsigned __int8 *)(v847 + a2 + 1) << 8;
              }
              else
              {
                int v848 = *(unsigned __int8 *)(v847 + a2 + 2) << 16;
                int v849 = *(unsigned __int8 *)(v847 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v849 | v848 | *(unsigned __int8 *)(a2 + v847)) >> v846) & 0x7FFFF;
              unint64_t v863 = (*(unsigned char *)a3 - 38) & 7;
              unint64_t v864 = (unint64_t)(*a3 + 218) >> 3;
              if (v863 > 5)
              {
                int v866 = (*(unsigned __int8 *)(v864 + a2 + 3) << 24) | (*(unsigned __int8 *)(v864 + a2 + 2) << 16);
                int v865 = *(unsigned __int8 *)(v864 + a2 + 1) << 8;
              }
              else
              {
                int v865 = *(unsigned __int8 *)(v864 + a2 + 2) << 16;
                int v866 = *(unsigned __int8 *)(v864 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v866 | v865 | *(unsigned __int8 *)(a2 + v864)) >> v863) & 0x7FFFF;
              unint64_t v880 = (*(unsigned char *)a3 - 19) & 7;
              unint64_t v881 = (unint64_t)(*a3 + 237) >> 3;
              if (v880 > 5)
              {
                int v883 = (*(unsigned __int8 *)(v881 + a2 + 3) << 24) | (*(unsigned __int8 *)(v881 + a2 + 2) << 16);
                int v882 = *(unsigned __int8 *)(v881 + a2 + 1) << 8;
              }
              else
              {
                int v882 = *(unsigned __int8 *)(v881 + a2 + 2) << 16;
                int v883 = *(unsigned __int8 *)(v881 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v883 | v882 | *(unsigned __int8 *)(a2 + v881)) >> v880) & 0x7FFFF;
              unint64_t v897 = *a3 & 7;
              unint64_t v898 = (unint64_t)(*a3 + 256) >> 3;
              if (v897 > 5)
              {
                int v900 = (*(unsigned __int8 *)(v898 + a2 + 3) << 24) | (*(unsigned __int8 *)(v898 + a2 + 2) << 16);
                int v899 = *(unsigned __int8 *)(v898 + a2 + 1) << 8;
              }
              else
              {
                int v899 = *(unsigned __int8 *)(v898 + a2 + 2) << 16;
                int v900 = *(unsigned __int8 *)(v898 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v900 | v899 | *(unsigned __int8 *)(a2 + v898)) >> v897) & 0x7FFFF;
              unint64_t v914 = *a3 + 275;
              unint64_t v915 = v914 & 7;
              unint64_t v916 = v914 >> 3;
              if (v915 > 5)
              {
                int v918 = (*(unsigned __int8 *)(v916 + a2 + 3) << 24) | (*(unsigned __int8 *)(v916 + a2 + 2) << 16);
                int v917 = *(unsigned __int8 *)(v916 + a2 + 1) << 8;
              }
              else
              {
                int v917 = *(unsigned __int8 *)(v916 + a2 + 2) << 16;
                int v918 = *(unsigned __int8 *)(v916 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 80) |= ((v918 | v917 | *(unsigned __int8 *)(a2 + v916)) >> v915) & 0x7FFFF;
              unint64_t v932 = *a3 + 294;
              unint64_t v933 = v932 & 7;
              unint64_t v934 = v932 >> 3;
              if (v933 > 5)
              {
                int v936 = (*(unsigned __int8 *)(v934 + a2 + 3) << 24) | (*(unsigned __int8 *)(v934 + a2 + 2) << 16);
                int v935 = *(unsigned __int8 *)(v934 + a2 + 1) << 8;
              }
              else
              {
                int v935 = *(unsigned __int8 *)(v934 + a2 + 2) << 16;
                int v936 = *(unsigned __int8 *)(v934 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 84) |= ((v936 | v935 | *(unsigned __int8 *)(a2 + v934)) >> v933) & 0x7FFFF;
              unint64_t v950 = *a3 + 313;
              unint64_t v951 = v950 & 7;
              unint64_t v952 = v950 >> 3;
              if (v951 > 5)
              {
                int v954 = (*(unsigned __int8 *)(v952 + a2 + 3) << 24) | (*(unsigned __int8 *)(v952 + a2 + 2) << 16);
                int v953 = *(unsigned __int8 *)(v952 + a2 + 1) << 8;
              }
              else
              {
                int v953 = *(unsigned __int8 *)(v952 + a2 + 2) << 16;
                int v954 = *(unsigned __int8 *)(v952 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 88) |= ((v954 | v953 | *(unsigned __int8 *)(a2 + v952)) >> v951) & 0x7FFFF;
              unint64_t v970 = *a3 + 332;
              unint64_t v971 = v970 & 7;
              unint64_t v972 = v970 >> 3;
              if (v971 > 5)
              {
                int v974 = (*(unsigned __int8 *)(v972 + a2 + 3) << 24) | (*(unsigned __int8 *)(v972 + a2 + 2) << 16);
                int v973 = *(unsigned __int8 *)(v972 + a2 + 1) << 8;
              }
              else
              {
                int v973 = *(unsigned __int8 *)(v972 + a2 + 2) << 16;
                int v974 = *(unsigned __int8 *)(v972 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 92) |= ((v974 | v973 | *(unsigned __int8 *)(a2 + v972)) >> v971) & 0x7FFFF;
              unint64_t v987 = *a3 + 351;
              unint64_t v988 = v987 & 7;
              unint64_t v989 = v987 >> 3;
              if (v988 > 5)
              {
                int v991 = (*(unsigned __int8 *)(v989 + a2 + 3) << 24) | (*(unsigned __int8 *)(v989 + a2 + 2) << 16);
                int v990 = *(unsigned __int8 *)(v989 + a2 + 1) << 8;
              }
              else
              {
                int v990 = *(unsigned __int8 *)(v989 + a2 + 2) << 16;
                int v991 = *(unsigned __int8 *)(v989 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 96) |= ((v991 | v990 | *(unsigned __int8 *)(a2 + v989)) >> v988) & 0x7FFFF;
              unint64_t v1003 = *a3 + 370;
              unint64_t v1004 = v1003 & 7;
              unint64_t v1005 = v1003 >> 3;
              if (v1004 > 5)
              {
                int v1007 = (*(unsigned __int8 *)(v1005 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1005 + a2 + 2) << 16);
                int v1006 = *(unsigned __int8 *)(v1005 + a2 + 1) << 8;
              }
              else
              {
                int v1006 = *(unsigned __int8 *)(v1005 + a2 + 2) << 16;
                int v1007 = *(unsigned __int8 *)(v1005 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 100) |= ((v1007 | v1006 | *(unsigned __int8 *)(a2 + v1005)) >> v1004) & 0x7FFFF;
              uint64_t v22 = 389;
              break;
            case 7:
              *(_DWORD *)(result + 16) = 7;
              int v327 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v327;
              unint64_t v328 = *a3 + 9;
              unint64_t v329 = v328 & 7;
              unint64_t v330 = v328 >> 3;
              if (v329 > 1) {
                unsigned int v331 = (*(unsigned __int8 *)(a2 + v330 + 2) << 16) | (*(unsigned __int8 *)(a2 + v330 + 1) << 8) | *(unsigned __int8 *)(a2 + v330);
              }
              else {
                unsigned int v331 = *(unsigned __int16 *)(a2 + v330);
              }
              int v511 = (2 * ((v331 >> v329) & 0x7FFF)) | v327;
              *(_DWORD *)(result + 24) = v511;
              unint64_t v512 = *a3 & 7;
              unint64_t v513 = (unint64_t)(*a3 + 24) >> 3;
              if (v512 > 1) {
                unsigned int v514 = (*(unsigned __int8 *)(a2 + v513 + 2) << 16) | (*(unsigned __int8 *)(a2 + v513 + 1) << 8) | *(unsigned __int8 *)(a2 + v513);
              }
              else {
                unsigned int v514 = *(unsigned __int16 *)(a2 + v513);
              }
              *(_DWORD *)(result + 24) = (((v514 >> v512) & 0x7FFF) << 16) | v511;
              unint64_t v569 = *a3 + 39;
              unint64_t v570 = v569 & 7;
              unint64_t v571 = v569 >> 3;
              if (v570 > 1) {
                unsigned int v572 = (*(unsigned __int8 *)(a2 + v571 + 2) << 16) | (*(unsigned __int8 *)(a2 + v571 + 1) << 8) | *(unsigned __int8 *)(a2 + v571);
              }
              else {
                unsigned int v572 = *(unsigned __int16 *)(a2 + v571);
              }
              *(_WORD *)(result + 28) |= (v572 >> v570) & 0x7FFF;
              unint64_t v616 = *a3 + 54;
              unint64_t v617 = v616 & 7;
              unint64_t v618 = v616 >> 3;
              if (v617 > 1) {
                unsigned int v619 = (*(unsigned __int8 *)(a2 + v618 + 2) << 16) | (*(unsigned __int8 *)(a2 + v618 + 1) << 8) | *(unsigned __int8 *)(a2 + v618);
              }
              else {
                unsigned int v619 = *(unsigned __int16 *)(a2 + v618);
              }
              *(_WORD *)(result + 30) |= (v619 >> v617) & 0x7FFF;
              unint64_t v658 = *a3 + 69;
              unint64_t v659 = v658 & 7;
              unint64_t v660 = v658 >> 3;
              if (v659 > 1) {
                unsigned int v661 = (*(unsigned __int8 *)(a2 + v660 + 2) << 16) | (*(unsigned __int8 *)(a2 + v660 + 1) << 8) | *(unsigned __int8 *)(a2 + v660);
              }
              else {
                unsigned int v661 = *(unsigned __int16 *)(a2 + v660);
              }
              *(_WORD *)(result + 32) |= (v661 >> v659) & 0x7FFF;
              unint64_t v698 = *a3 + 84;
              unint64_t v699 = v698 & 7;
              unint64_t v700 = v698 >> 3;
              if (v699 > 1) {
                unsigned int v701 = (*(unsigned __int8 *)(a2 + v700 + 2) << 16) | (*(unsigned __int8 *)(a2 + v700 + 1) << 8) | *(unsigned __int8 *)(a2 + v700);
              }
              else {
                unsigned int v701 = *(unsigned __int16 *)(a2 + v700);
              }
              *(_WORD *)(result + 34) |= (v701 >> v699) & 0x7FFF;
              unint64_t v736 = *a3 + 99;
              unint64_t v737 = v736 & 7;
              unint64_t v738 = v736 >> 3;
              if (v737 > 1) {
                unsigned int v739 = (*(unsigned __int8 *)(a2 + v738 + 2) << 16) | (*(unsigned __int8 *)(a2 + v738 + 1) << 8) | *(unsigned __int8 *)(a2 + v738);
              }
              else {
                unsigned int v739 = *(unsigned __int16 *)(a2 + v738);
              }
              *(_WORD *)(result + 36) |= (v739 >> v737) & 0x7FFF;
              unint64_t v772 = *a3 + 114;
              unint64_t v773 = v772 & 7;
              unint64_t v774 = v772 >> 3;
              if (v773 > 1) {
                unsigned int v775 = (*(unsigned __int8 *)(a2 + v774 + 2) << 16) | (*(unsigned __int8 *)(a2 + v774 + 1) << 8) | *(unsigned __int8 *)(a2 + v774);
              }
              else {
                unsigned int v775 = *(unsigned __int16 *)(a2 + v774);
              }
              *(_WORD *)(result + 38) |= (v775 >> v773) & 0x7FFF;
              unint64_t v807 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v808 = (unint64_t)(*a3 + 129) >> 3;
              if (v807 > 1) {
                unsigned int v809 = (*(unsigned __int8 *)(a2 + v808 + 2) << 16) | (*(unsigned __int8 *)(a2 + v808 + 1) << 8) | *(unsigned __int8 *)(a2 + v808);
              }
              else {
                unsigned int v809 = *(unsigned __int16 *)(a2 + v808);
              }
              *(_WORD *)(result + 40) |= (v809 >> v807) & 0x7FFF;
              unint64_t v830 = *a3 & 7;
              unint64_t v831 = (unint64_t)(*a3 + 144) >> 3;
              if (v830 > 1) {
                unsigned int v832 = (*(unsigned __int8 *)(a2 + v831 + 2) << 16) | (*(unsigned __int8 *)(a2 + v831 + 1) << 8) | *(unsigned __int8 *)(a2 + v831);
              }
              else {
                unsigned int v832 = *(unsigned __int16 *)(a2 + v831);
              }
              *(_WORD *)(result + 42) |= (v832 >> v830) & 0x7FFF;
              unint64_t v850 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v851 = (unint64_t)(*a3 + 159) >> 3;
              if (v850 > 5)
              {
                int v853 = (*(unsigned __int8 *)(v851 + a2 + 3) << 24) | (*(unsigned __int8 *)(v851 + a2 + 2) << 16);
                int v852 = *(unsigned __int8 *)(v851 + a2 + 1) << 8;
              }
              else
              {
                int v852 = *(unsigned __int8 *)(v851 + a2 + 2) << 16;
                int v853 = *(unsigned __int8 *)(v851 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v853 | v852 | *(unsigned __int8 *)(a2 + v851)) >> v850) & 0x7FFFF;
              unint64_t v867 = (*(unsigned char *)a3 - 78) & 7;
              unint64_t v868 = (unint64_t)(*a3 + 178) >> 3;
              if (v867 > 5)
              {
                int v870 = (*(unsigned __int8 *)(v868 + a2 + 3) << 24) | (*(unsigned __int8 *)(v868 + a2 + 2) << 16);
                int v869 = *(unsigned __int8 *)(v868 + a2 + 1) << 8;
              }
              else
              {
                int v869 = *(unsigned __int8 *)(v868 + a2 + 2) << 16;
                int v870 = *(unsigned __int8 *)(v868 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v870 | v869 | *(unsigned __int8 *)(a2 + v868)) >> v867) & 0x7FFFF;
              unint64_t v884 = (*(unsigned char *)a3 - 59) & 7;
              unint64_t v885 = (unint64_t)(*a3 + 197) >> 3;
              if (v884 > 5)
              {
                int v887 = (*(unsigned __int8 *)(v885 + a2 + 3) << 24) | (*(unsigned __int8 *)(v885 + a2 + 2) << 16);
                int v886 = *(unsigned __int8 *)(v885 + a2 + 1) << 8;
              }
              else
              {
                int v886 = *(unsigned __int8 *)(v885 + a2 + 2) << 16;
                int v887 = *(unsigned __int8 *)(v885 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v887 | v886 | *(unsigned __int8 *)(a2 + v885)) >> v884) & 0x7FFFF;
              unint64_t v901 = *a3 & 7;
              unint64_t v902 = (unint64_t)(*a3 + 216) >> 3;
              if (v901 > 5)
              {
                int v904 = (*(unsigned __int8 *)(v902 + a2 + 3) << 24) | (*(unsigned __int8 *)(v902 + a2 + 2) << 16);
                int v903 = *(unsigned __int8 *)(v902 + a2 + 1) << 8;
              }
              else
              {
                int v903 = *(unsigned __int8 *)(v902 + a2 + 2) << 16;
                int v904 = *(unsigned __int8 *)(v902 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v904 | v903 | *(unsigned __int8 *)(a2 + v902)) >> v901) & 0x7FFFF;
              unint64_t v919 = (*(unsigned char *)a3 - 21) & 7;
              unint64_t v920 = (unint64_t)(*a3 + 235) >> 3;
              if (v919 > 5)
              {
                int v922 = (*(unsigned __int8 *)(v920 + a2 + 3) << 24) | (*(unsigned __int8 *)(v920 + a2 + 2) << 16);
                int v921 = *(unsigned __int8 *)(v920 + a2 + 1) << 8;
              }
              else
              {
                int v921 = *(unsigned __int8 *)(v920 + a2 + 2) << 16;
                int v922 = *(unsigned __int8 *)(v920 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v922 | v921 | *(unsigned __int8 *)(a2 + v920)) >> v919) & 0x7FFFF;
              unint64_t v937 = (*(unsigned char *)a3 - 2) & 7;
              unint64_t v938 = (unint64_t)(*a3 + 254) >> 3;
              if (v937 > 5)
              {
                int v940 = (*(unsigned __int8 *)(v938 + a2 + 3) << 24) | (*(unsigned __int8 *)(v938 + a2 + 2) << 16);
                int v939 = *(unsigned __int8 *)(v938 + a2 + 1) << 8;
              }
              else
              {
                int v939 = *(unsigned __int8 *)(v938 + a2 + 2) << 16;
                int v940 = *(unsigned __int8 *)(v938 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v940 | v939 | *(unsigned __int8 *)(a2 + v938)) >> v937) & 0x7FFFF;
              unint64_t v955 = *a3 + 273;
              unint64_t v956 = v955 & 7;
              unint64_t v957 = v955 >> 3;
              if (v956 > 5)
              {
                int v959 = (*(unsigned __int8 *)(v957 + a2 + 3) << 24) | (*(unsigned __int8 *)(v957 + a2 + 2) << 16);
                int v958 = *(unsigned __int8 *)(v957 + a2 + 1) << 8;
              }
              else
              {
                int v958 = *(unsigned __int8 *)(v957 + a2 + 2) << 16;
                int v959 = *(unsigned __int8 *)(v957 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v959 | v958 | *(unsigned __int8 *)(a2 + v957)) >> v956) & 0x7FFFF;
              unint64_t v975 = *a3 + 292;
              unint64_t v976 = v975 & 7;
              unint64_t v977 = v975 >> 3;
              if (v976 > 5)
              {
                int v979 = (*(unsigned __int8 *)(v977 + a2 + 3) << 24) | (*(unsigned __int8 *)(v977 + a2 + 2) << 16);
                int v978 = *(unsigned __int8 *)(v977 + a2 + 1) << 8;
              }
              else
              {
                int v978 = *(unsigned __int8 *)(v977 + a2 + 2) << 16;
                int v979 = *(unsigned __int8 *)(v977 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v979 | v978 | *(unsigned __int8 *)(a2 + v977)) >> v976) & 0x7FFFF;
              unint64_t v992 = *a3 + 311;
              unint64_t v993 = v992 & 7;
              unint64_t v994 = v992 >> 3;
              if (v993 > 5)
              {
                int v996 = (*(unsigned __int8 *)(v994 + a2 + 3) << 24) | (*(unsigned __int8 *)(v994 + a2 + 2) << 16);
                int v995 = *(unsigned __int8 *)(v994 + a2 + 1) << 8;
              }
              else
              {
                int v995 = *(unsigned __int8 *)(v994 + a2 + 2) << 16;
                int v996 = *(unsigned __int8 *)(v994 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v996 | v995 | *(unsigned __int8 *)(a2 + v994)) >> v993) & 0x7FFFF;
              uint64_t v22 = 330;
              break;
            case 8:
              *(_DWORD *)(result + 16) = 8;
              unint64_t v332 = (unint64_t)(*a3 + 8) >> 3;
              uint64_t v333 = *a3 & 7;
              if (v333) {
                unsigned int v334 = ((*(unsigned __int8 *)(a2 + v332 + 2) << 16) | (*(unsigned __int8 *)(a2 + v332 + 1) << 8) | *(unsigned __int8 *)(a2 + v332)) >> v333;
              }
              else {
                LOWORD(v334) = *(_WORD *)(a2 + v332);
              }
              uint64_t v1108 = *(void *)(result + 24) | (unsigned __int16)v334;
              *(void *)(result + 24) = v1108;
              unint64_t v1109 = (unint64_t)(*a3 + 24) >> 3;
              uint64_t v1110 = *a3 & 7;
              if (v1110) {
                unsigned int v1111 = ((*(unsigned __int8 *)(a2 + v1109 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1109 + 1) << 8) | *(unsigned __int8 *)(a2 + v1109)) >> v1110;
              }
              else {
                unsigned int v1111 = *(unsigned __int16 *)(a2 + v1109);
              }
              uint64_t v1160 = v1108 | (v1111 << 16);
              *(void *)(result + 24) = v1160;
              *(void *)(result + 24) = v1160 | ((unint64_t)((((*(unsigned __int8 *)(a2
                                                                                           + ((unint64_t)(*a3 + 40) >> 3)
                                                                                           + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3))) >> (*a3 & 7)) & 0x1FFFF) << 32);
              unsigned int v1161 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3))) >> ((*(unsigned char *)a3 + 57) & 7)) & 0x1FFFF | *(_DWORD *)(result + 32);
              *(_DWORD *)(result + 32) = v1161;
              unint64_t v1162 = *a3 + 74;
              unint64_t v1163 = v1162 & 7;
              unint64_t v1164 = v1162 >> 3;
              if (v1163 > 1) {
                unsigned int v1165 = (*(unsigned __int8 *)(a2 + v1164 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1164 + 1) << 8) | *(unsigned __int8 *)(a2 + v1164);
              }
              else {
                unsigned int v1165 = *(unsigned __int16 *)(a2 + v1164);
              }
              *(_DWORD *)(result + 32) = v1161 | (v1165 >> v1163 << 17);
              uint64_t v22 = 89;
              break;
            case 9:
              *(_DWORD *)(result + 16) = 9;
              int v335 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(unsigned __int16 *)(result + 24);
              *(_WORD *)(result + 24) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1;
              unint64_t v336 = *a3 + 9;
              unint64_t v337 = v336 & 7;
              unint64_t v338 = v336 >> 3;
              if (v337 > 3) {
                unsigned int v339 = (*(unsigned __int8 *)(a2 + v338 + 2) << 16) | (*(unsigned __int8 *)(a2 + v338 + 1) << 8) | *(unsigned __int8 *)(a2 + v338);
              }
              else {
                unsigned int v339 = *(unsigned __int16 *)(a2 + v338);
              }
              *(_WORD *)(result + 24) = (2 * ((v339 >> v337) & 0x1FFF)) | v335;
              unint64_t v515 = *a3 + 22;
              unint64_t v516 = v515 & 7;
              unint64_t v517 = v515 >> 3;
              if (v516 > 3) {
                unsigned int v518 = (*(unsigned __int8 *)(a2 + v517 + 2) << 16) | (*(unsigned __int8 *)(a2 + v517 + 1) << 8) | *(unsigned __int8 *)(a2 + v517);
              }
              else {
                unsigned int v518 = *(unsigned __int16 *)(a2 + v517);
              }
              *(_WORD *)(result + 26) |= (v518 >> v516) & 0x1FFF;
              unint64_t v573 = *a3 + 35;
              unint64_t v574 = v573 & 7;
              unint64_t v575 = v573 >> 3;
              if (v574 > 3) {
                unsigned int v576 = (*(unsigned __int8 *)(a2 + v575 + 2) << 16) | (*(unsigned __int8 *)(a2 + v575 + 1) << 8) | *(unsigned __int8 *)(a2 + v575);
              }
              else {
                unsigned int v576 = *(unsigned __int16 *)(a2 + v575);
              }
              *(_WORD *)(result + 28) |= (v576 >> v574) & 0x1FFF;
              unint64_t v620 = *a3 & 7;
              unint64_t v621 = (unint64_t)(*a3 + 48) >> 3;
              if (v620 > 3) {
                unsigned int v622 = (*(unsigned __int8 *)(a2 + v621 + 2) << 16) | (*(unsigned __int8 *)(a2 + v621 + 1) << 8) | *(unsigned __int8 *)(a2 + v621);
              }
              else {
                unsigned int v622 = *(unsigned __int16 *)(a2 + v621);
              }
              *(_WORD *)(result + 30) |= (v622 >> v620) & 0x1FFF;
              unint64_t v662 = *a3 + 61;
              unint64_t v663 = v662 & 7;
              unint64_t v664 = v662 >> 3;
              if (v663 > 3) {
                unsigned int v665 = (*(unsigned __int8 *)(a2 + v664 + 2) << 16) | (*(unsigned __int8 *)(a2 + v664 + 1) << 8) | *(unsigned __int8 *)(a2 + v664);
              }
              else {
                unsigned int v665 = *(unsigned __int16 *)(a2 + v664);
              }
              *(_WORD *)(result + 32) |= (v665 >> v663) & 0x1FFF;
              unint64_t v702 = *a3 + 74;
              unint64_t v703 = v702 & 7;
              unint64_t v704 = v702 >> 3;
              if (v703 > 3) {
                unsigned int v705 = (*(unsigned __int8 *)(a2 + v704 + 2) << 16) | (*(unsigned __int8 *)(a2 + v704 + 1) << 8) | *(unsigned __int8 *)(a2 + v704);
              }
              else {
                unsigned int v705 = *(unsigned __int16 *)(a2 + v704);
              }
              *(_WORD *)(result + 34) |= (v705 >> v703) & 0x1FFF;
              unint64_t v740 = *a3 + 87;
              unint64_t v741 = v740 & 7;
              unint64_t v742 = v740 >> 3;
              if (v741 > 3) {
                unsigned int v743 = (*(unsigned __int8 *)(a2 + v742 + 2) << 16) | (*(unsigned __int8 *)(a2 + v742 + 1) << 8) | *(unsigned __int8 *)(a2 + v742);
              }
              else {
                unsigned int v743 = *(unsigned __int16 *)(a2 + v742);
              }
              *(_WORD *)(result + 36) |= (v743 >> v741) & 0x1FFF;
              unint64_t v776 = *a3 + 100;
              unint64_t v777 = v776 & 7;
              unint64_t v778 = v776 >> 3;
              if (v777 > 3) {
                unsigned int v779 = (*(unsigned __int8 *)(a2 + v778 + 2) << 16) | (*(unsigned __int8 *)(a2 + v778 + 1) << 8) | *(unsigned __int8 *)(a2 + v778);
              }
              else {
                unsigned int v779 = *(unsigned __int16 *)(a2 + v778);
              }
              *(_WORD *)(result + 38) |= (v779 >> v777) & 0x1FFF;
              unint64_t v810 = *a3 + 113;
              unint64_t v811 = v810 & 7;
              unint64_t v812 = v810 >> 3;
              if (v811 > 3) {
                unsigned int v813 = (*(unsigned __int8 *)(a2 + v812 + 2) << 16) | (*(unsigned __int8 *)(a2 + v812 + 1) << 8) | *(unsigned __int8 *)(a2 + v812);
              }
              else {
                unsigned int v813 = *(unsigned __int16 *)(a2 + v812);
              }
              *(_WORD *)(result + 40) |= (v813 >> v811) & 0x1FFF;
              unint64_t v833 = *a3 + 126;
              unint64_t v834 = v833 & 7;
              unint64_t v835 = v833 >> 3;
              if (v834 > 3) {
                unsigned int v836 = (*(unsigned __int8 *)(a2 + v835 + 2) << 16) | (*(unsigned __int8 *)(a2 + v835 + 1) << 8) | *(unsigned __int8 *)(a2 + v835);
              }
              else {
                unsigned int v836 = *(unsigned __int16 *)(a2 + v835);
              }
              *(_WORD *)(result + 42) |= (v836 >> v834) & 0x1FFF;
              unint64_t v854 = (*(unsigned char *)a3 - 117) & 7;
              unint64_t v855 = (unint64_t)(*a3 + 139) >> 3;
              if (v854 > 3) {
                unsigned int v856 = (*(unsigned __int8 *)(a2 + v855 + 2) << 16) | (*(unsigned __int8 *)(a2 + v855 + 1) << 8) | *(unsigned __int8 *)(a2 + v855);
              }
              else {
                unsigned int v856 = *(unsigned __int16 *)(a2 + v855);
              }
              *(_WORD *)(result + 44) |= (v856 >> v854) & 0x1FFF;
              unint64_t v871 = *a3 & 7;
              unint64_t v872 = (unint64_t)(*a3 + 152) >> 3;
              if (v871 > 3) {
                unsigned int v873 = (*(unsigned __int8 *)(a2 + v872 + 2) << 16) | (*(unsigned __int8 *)(a2 + v872 + 1) << 8) | *(unsigned __int8 *)(a2 + v872);
              }
              else {
                unsigned int v873 = *(unsigned __int16 *)(a2 + v872);
              }
              *(_WORD *)(result + 46) |= (v873 >> v871) & 0x1FFF;
              unint64_t v888 = (*(unsigned char *)a3 - 91) & 7;
              unint64_t v889 = (unint64_t)(*a3 + 165) >> 3;
              if (v888 > 3) {
                unsigned int v890 = (*(unsigned __int8 *)(a2 + v889 + 2) << 16) | (*(unsigned __int8 *)(a2 + v889 + 1) << 8) | *(unsigned __int8 *)(a2 + v889);
              }
              else {
                unsigned int v890 = *(unsigned __int16 *)(a2 + v889);
              }
              *(_WORD *)(result + 48) |= (v890 >> v888) & 0x1FFF;
              unint64_t v905 = (*(unsigned char *)a3 - 78) & 7;
              unint64_t v906 = (unint64_t)(*a3 + 178) >> 3;
              if (v905 > 3) {
                unsigned int v907 = (*(unsigned __int8 *)(a2 + v906 + 2) << 16) | (*(unsigned __int8 *)(a2 + v906 + 1) << 8) | *(unsigned __int8 *)(a2 + v906);
              }
              else {
                unsigned int v907 = *(unsigned __int16 *)(a2 + v906);
              }
              *(_WORD *)(result + 50) |= (v907 >> v905) & 0x1FFF;
              unint64_t v923 = (*(unsigned char *)a3 - 65) & 7;
              unint64_t v924 = (unint64_t)(*a3 + 191) >> 3;
              if (v923 > 3) {
                unsigned int v925 = (*(unsigned __int8 *)(a2 + v924 + 2) << 16) | (*(unsigned __int8 *)(a2 + v924 + 1) << 8) | *(unsigned __int8 *)(a2 + v924);
              }
              else {
                unsigned int v925 = *(unsigned __int16 *)(a2 + v924);
              }
              *(_WORD *)(result + 52) |= (v925 >> v923) & 0x1FFF;
              unint64_t v941 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v942 = (unint64_t)(*a3 + 204) >> 3;
              if (v941 > 3) {
                unsigned int v943 = (*(unsigned __int8 *)(a2 + v942 + 2) << 16) | (*(unsigned __int8 *)(a2 + v942 + 1) << 8) | *(unsigned __int8 *)(a2 + v942);
              }
              else {
                unsigned int v943 = *(unsigned __int16 *)(a2 + v942);
              }
              *(_WORD *)(result + 54) |= (v943 >> v941) & 0x1FFF;
              unint64_t v960 = (*(unsigned char *)a3 - 39) & 7;
              unint64_t v961 = (unint64_t)(*a3 + 217) >> 3;
              if (v960 > 3) {
                unsigned int v962 = (*(unsigned __int8 *)(a2 + v961 + 2) << 16) | (*(unsigned __int8 *)(a2 + v961 + 1) << 8) | *(unsigned __int8 *)(a2 + v961);
              }
              else {
                unsigned int v962 = *(unsigned __int16 *)(a2 + v961);
              }
              *(_WORD *)(result + 56) |= (v962 >> v960) & 0x1FFF;
              unint64_t v980 = (*(unsigned char *)a3 - 26) & 7;
              unint64_t v981 = (unint64_t)(*a3 + 230) >> 3;
              if (v980 > 3) {
                unsigned int v982 = (*(unsigned __int8 *)(a2 + v981 + 2) << 16) | (*(unsigned __int8 *)(a2 + v981 + 1) << 8) | *(unsigned __int8 *)(a2 + v981);
              }
              else {
                unsigned int v982 = *(unsigned __int16 *)(a2 + v981);
              }
              *(_WORD *)(result + 58) |= (v982 >> v980) & 0x1FFF;
              unint64_t v997 = (*(unsigned char *)a3 - 13) & 7;
              unint64_t v998 = (unint64_t)(*a3 + 243) >> 3;
              if (v997 > 3) {
                unsigned int v999 = (*(unsigned __int8 *)(a2 + v998 + 2) << 16) | (*(unsigned __int8 *)(a2 + v998 + 1) << 8) | *(unsigned __int8 *)(a2 + v998);
              }
              else {
                unsigned int v999 = *(unsigned __int16 *)(a2 + v998);
              }
              *(_WORD *)(result + 60) |= (v999 >> v997) & 0x1FFF;
              unint64_t v1008 = *a3 & 7;
              unint64_t v1009 = (unint64_t)(*a3 + 256) >> 3;
              if (v1008 > 3) {
                unsigned int v1010 = (*(unsigned __int8 *)(a2 + v1009 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1009 + 1) << 8) | *(unsigned __int8 *)(a2 + v1009);
              }
              else {
                unsigned int v1010 = *(unsigned __int16 *)(a2 + v1009);
              }
              *(_WORD *)(result + 62) |= (v1010 >> v1008) & 0x1FFF;
              unint64_t v1015 = *a3 + 269;
              unint64_t v1016 = v1015 & 7;
              unint64_t v1017 = v1015 >> 3;
              if (v1016 > 3) {
                unsigned int v1018 = (*(unsigned __int8 *)(a2 + v1017 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1017 + 1) << 8) | *(unsigned __int8 *)(a2 + v1017);
              }
              else {
                unsigned int v1018 = *(unsigned __int16 *)(a2 + v1017);
              }
              *(_WORD *)(result + 64) |= (v1018 >> v1016) & 0x1FFF;
              unint64_t v1023 = *a3 + 282;
              unint64_t v1024 = v1023 & 7;
              unint64_t v1025 = v1023 >> 3;
              if (v1024 > 3) {
                unsigned int v1026 = (*(unsigned __int8 *)(a2 + v1025 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1025 + 1) << 8) | *(unsigned __int8 *)(a2 + v1025);
              }
              else {
                unsigned int v1026 = *(unsigned __int16 *)(a2 + v1025);
              }
              *(_WORD *)(result + 66) |= (v1026 >> v1024) & 0x1FFF;
              unint64_t v1031 = *a3 + 295;
              unint64_t v1032 = v1031 & 7;
              unint64_t v1033 = v1031 >> 3;
              if (v1032 > 3) {
                unsigned int v1034 = (*(unsigned __int8 *)(a2 + v1033 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1033 + 1) << 8) | *(unsigned __int8 *)(a2 + v1033);
              }
              else {
                unsigned int v1034 = *(unsigned __int16 *)(a2 + v1033);
              }
              *(_WORD *)(result + 68) |= (v1034 >> v1032) & 0x1FFF;
              unint64_t v1039 = *a3 + 308;
              unint64_t v1040 = v1039 & 7;
              unint64_t v1041 = v1039 >> 3;
              if (v1040 > 3) {
                unsigned int v1042 = (*(unsigned __int8 *)(a2 + v1041 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1041 + 1) << 8) | *(unsigned __int8 *)(a2 + v1041);
              }
              else {
                unsigned int v1042 = *(unsigned __int16 *)(a2 + v1041);
              }
              *(_WORD *)(result + 70) |= (v1042 >> v1040) & 0x1FFF;
              unint64_t v1047 = *a3 + 321;
              unint64_t v1048 = v1047 & 7;
              unint64_t v1049 = v1047 >> 3;
              if (v1048 > 3) {
                unsigned int v1050 = (*(unsigned __int8 *)(a2 + v1049 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1049 + 1) << 8) | *(unsigned __int8 *)(a2 + v1049);
              }
              else {
                unsigned int v1050 = *(unsigned __int16 *)(a2 + v1049);
              }
              *(_WORD *)(result + 72) |= (v1050 >> v1048) & 0x1FFF;
              unint64_t v1055 = *a3 + 334;
              unint64_t v1056 = v1055 & 7;
              unint64_t v1057 = v1055 >> 3;
              if (v1056 > 3) {
                unsigned int v1058 = (*(unsigned __int8 *)(a2 + v1057 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1057 + 1) << 8) | *(unsigned __int8 *)(a2 + v1057);
              }
              else {
                unsigned int v1058 = *(unsigned __int16 *)(a2 + v1057);
              }
              *(_WORD *)(result + 74) |= (v1058 >> v1056) & 0x1FFF;
              unint64_t v1062 = *a3 + 347;
              unint64_t v1063 = v1062 & 7;
              unint64_t v1064 = v1062 >> 3;
              if (v1063 > 3) {
                unsigned int v1065 = (*(unsigned __int8 *)(a2 + v1064 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1064 + 1) << 8) | *(unsigned __int8 *)(a2 + v1064);
              }
              else {
                unsigned int v1065 = *(unsigned __int16 *)(a2 + v1064);
              }
              *(_WORD *)(result + 76) |= (v1065 >> v1063) & 0x1FFF;
              unint64_t v1069 = *a3 & 7;
              unint64_t v1070 = (unint64_t)(*a3 + 360) >> 3;
              if (v1069 > 3) {
                unsigned int v1071 = (*(unsigned __int8 *)(a2 + v1070 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1070 + 1) << 8) | *(unsigned __int8 *)(a2 + v1070);
              }
              else {
                unsigned int v1071 = *(unsigned __int16 *)(a2 + v1070);
              }
              *(_WORD *)(result + 78) |= (v1071 >> v1069) & 0x1FFF;
              unint64_t v1075 = *a3 + 373;
              unint64_t v1076 = v1075 & 7;
              unint64_t v1077 = v1075 >> 3;
              if (v1076 > 3) {
                unsigned int v1078 = (*(unsigned __int8 *)(a2 + v1077 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1077 + 1) << 8) | *(unsigned __int8 *)(a2 + v1077);
              }
              else {
                unsigned int v1078 = *(unsigned __int16 *)(a2 + v1077);
              }
              *(_WORD *)(result + 80) |= (v1078 >> v1076) & 0x1FFF;
              unint64_t v1082 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v1083 = (unint64_t)(*a3 + 386) >> 3;
              if (v1082 > 3) {
                unsigned int v1084 = (*(unsigned __int8 *)(a2 + v1083 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1083 + 1) << 8) | *(unsigned __int8 *)(a2 + v1083);
              }
              else {
                unsigned int v1084 = *(unsigned __int16 *)(a2 + v1083);
              }
              *(_WORD *)(result + 82) |= (v1084 >> v1082) & 0x1FFF;
              unint64_t v1088 = (*(unsigned char *)a3 - 113) & 7;
              unint64_t v1089 = (unint64_t)(*a3 + 399) >> 3;
              if (v1088 > 3) {
                unsigned int v1090 = (*(unsigned __int8 *)(a2 + v1089 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1089 + 1) << 8) | *(unsigned __int8 *)(a2 + v1089);
              }
              else {
                unsigned int v1090 = *(unsigned __int16 *)(a2 + v1089);
              }
              *(_WORD *)(result + 84) |= (v1090 >> v1088) & 0x1FFF;
              unint64_t v1094 = (*(unsigned char *)a3 - 100) & 7;
              unint64_t v1095 = (unint64_t)(*a3 + 412) >> 3;
              if (v1094 > 3) {
                unsigned int v1096 = (*(unsigned __int8 *)(a2 + v1095 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1095 + 1) << 8) | *(unsigned __int8 *)(a2 + v1095);
              }
              else {
                unsigned int v1096 = *(unsigned __int16 *)(a2 + v1095);
              }
              *(_WORD *)(result + 86) |= (v1096 >> v1094) & 0x1FFF;
              uint64_t v22 = 425;
              break;
            case 0xA:
              *(_DWORD *)(result + 16) = 10;
              unint64_t v340 = (unint64_t)(*a3 + 8) >> 3;
              uint64_t v341 = *a3 & 7;
              if (v341)
              {
                unint64_t v342 = (unsigned __int8 *)(a2 + v340);
                unint64_t v343 = (((unint64_t)v342[4] << 32) | ((unint64_t)v342[3] << 24) | ((unint64_t)v342[2] << 16) | ((unint64_t)v342[1] << 8) | *v342) >> v341;
              }
              else
              {
                LODWORD(v343) = *(_DWORD *)(a2 + v340);
              }
              *(_DWORD *)(result + 24) |= v343;
              v1112 = (unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3));
              unint64_t v1113 = ((((unint64_t)v1112[4] << 32) | ((unint64_t)v1112[3] << 24) | ((unint64_t)v1112[2] << 16) | ((unint64_t)v1112[1] << 8) | *v1112) >> (*a3 & 7)) & 0x1FFFFFFFFLL | *(void *)(result + 32);
              *(void *)(result + 32) = v1113;
              unint64_t v1114 = *a3 + 73;
              unint64_t v1115 = v1114 & 7;
              unint64_t v1116 = v1114 >> 3;
              if (v1115 > 1) {
                unsigned int v1117 = (*(unsigned __int8 *)(a2 + v1116 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1116 + 1) << 8) | *(unsigned __int8 *)(a2 + v1116);
              }
              else {
                unsigned int v1117 = *(unsigned __int16 *)(a2 + v1116);
              }
              unint64_t v1118 = v1113 | ((unint64_t)((v1117 >> v1115) & 0x7FFF) << 33);
              *(void *)(result + 32) = v1118;
              unint64_t v1119 = *a3 & 7;
              unint64_t v1120 = (unint64_t)(*a3 + 88) >> 3;
              if (v1119 > 1) {
                unsigned int v1121 = (*(unsigned __int8 *)(a2 + v1120 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1120 + 1) << 8) | *(unsigned __int8 *)(a2 + v1120);
              }
              else {
                unsigned int v1121 = *(unsigned __int16 *)(a2 + v1120);
              }
              *(void *)(result + 32) = v1118 | ((unint64_t)((v1121 >> v1119) & 0x7FFF) << 48);
              unint64_t v1122 = *a3 + 103;
              unint64_t v1123 = v1122 & 7;
              unint64_t v1124 = v1122 >> 3;
              if (v1123 > 1) {
                unsigned int v1125 = (*(unsigned __int8 *)(a2 + v1124 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1124 + 1) << 8) | *(unsigned __int8 *)(a2 + v1124);
              }
              else {
                unsigned int v1125 = *(unsigned __int16 *)(a2 + v1124);
              }
              *(_WORD *)(result + 40) |= (v1125 >> v1123) & 0x7FFF;
              unint64_t v1126 = *a3 + 118;
              unint64_t v1127 = v1126 & 7;
              unint64_t v1128 = v1126 >> 3;
              if (v1127 > 1) {
                unsigned int v1129 = (*(unsigned __int8 *)(a2 + v1128 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1128 + 1) << 8) | *(unsigned __int8 *)(a2 + v1128);
              }
              else {
                unsigned int v1129 = *(unsigned __int16 *)(a2 + v1128);
              }
              *(_WORD *)(result + 42) |= (v1129 >> v1127) & 0x7FFF;
              unint64_t v1130 = (*(unsigned char *)a3 - 123) & 7;
              unint64_t v1131 = (unint64_t)(*a3 + 133) >> 3;
              if (v1130 > 1) {
                unsigned int v1132 = (*(unsigned __int8 *)(a2 + v1131 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1131 + 1) << 8) | *(unsigned __int8 *)(a2 + v1131);
              }
              else {
                unsigned int v1132 = *(unsigned __int16 *)(a2 + v1131);
              }
              *(_WORD *)(result + 44) |= (v1132 >> v1130) & 0x7FFF;
              uint64_t v22 = 148;
              break;
            case 0xB:
              *(_DWORD *)(result + 16) = 11;
              unint64_t v344 = *a3 & 7;
              unint64_t v345 = (unint64_t)(*a3 + 8) >> 3;
              if (v344 > 1) {
                unsigned int v346 = (*(unsigned __int8 *)(a2 + v345 + 2) << 16) | (*(unsigned __int8 *)(a2 + v345 + 1) << 8) | *(unsigned __int8 *)(a2 + v345);
              }
              else {
                unsigned int v346 = *(unsigned __int16 *)(a2 + v345);
              }
              *(_WORD *)(result + 24) |= (v346 >> v344) & 0x7FFF;
              unint64_t v519 = *a3 + 23;
              unint64_t v520 = v519 & 7;
              unint64_t v521 = v519 >> 3;
              if (v520 > 1) {
                unsigned int v522 = (*(unsigned __int8 *)(a2 + v521 + 2) << 16) | (*(unsigned __int8 *)(a2 + v521 + 1) << 8) | *(unsigned __int8 *)(a2 + v521);
              }
              else {
                unsigned int v522 = *(unsigned __int16 *)(a2 + v521);
              }
              *(_WORD *)(result + 26) |= (v522 >> v520) & 0x7FFF;
              uint64_t v22 = 38;
              break;
            case 0xC:
              *(_DWORD *)(result + 16) = 12;
              unint64_t v347 = *a3 & 7;
              unint64_t v348 = (unint64_t)(*a3 + 8) >> 3;
              if (v347 > 1) {
                unsigned int v349 = (*(unsigned __int8 *)(a2 + v348 + 2) << 16) | (*(unsigned __int8 *)(a2 + v348 + 1) << 8) | *(unsigned __int8 *)(a2 + v348);
              }
              else {
                unsigned int v349 = *(unsigned __int16 *)(a2 + v348);
              }
              *(_WORD *)(result + 24) |= (v349 >> v347) & 0x7FFF;
              unint64_t v523 = *a3 + 23;
              unint64_t v524 = v523 & 7;
              unint64_t v525 = v523 >> 3;
              if (v524 > 1) {
                unsigned int v526 = (*(unsigned __int8 *)(a2 + v525 + 2) << 16) | (*(unsigned __int8 *)(a2 + v525 + 1) << 8) | *(unsigned __int8 *)(a2 + v525);
              }
              else {
                unsigned int v526 = *(unsigned __int16 *)(a2 + v525);
              }
              *(_WORD *)(result + 26) |= (v526 >> v524) & 0x7FFF;
              unint64_t v577 = *a3 + 38;
              unint64_t v578 = v577 >> 3;
              unint64_t v579 = v577 & 7;
              if (v579) {
                unsigned int v580 = ((*(unsigned __int8 *)(a2 + v578 + 2) << 16) | (*(unsigned __int8 *)(a2 + v578 + 1) << 8) | *(unsigned __int8 *)(a2 + v578)) >> v579;
              }
              else {
                LOWORD(v580) = *(_WORD *)(a2 + v578);
              }
              *(_WORD *)(result + 28) |= v580;
              unint64_t v1133 = *a3 + 54;
              unint64_t v1134 = v1133 & 7;
              unint64_t v1135 = v1133 >> 3;
              if (v1134 == 7) {
                int v1136 = *(_DWORD *)(a2 + v1135) >> 7;
              }
              else {
                int v1136 = ((*(unsigned __int8 *)(a2 + v1135 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1135 + 1) << 8) | *(unsigned __int8 *)(a2 + v1135)) >> v1134;
              }
              *(_DWORD *)(result + 32) |= v1136 & 0x3FFFF;
              uint64_t v1137 = *a3 & 7;
              unint64_t v1138 = (unint64_t)(*a3 + 72) >> 3;
              if (v1137 == 7) {
                int v1139 = *(_DWORD *)(a2 + v1138) >> 7;
              }
              else {
                int v1139 = ((*(unsigned __int8 *)(a2 + v1138 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1138 + 1) << 8) | *(unsigned __int8 *)(a2 + v1138)) >> v1137;
              }
              int v1140 = *(_DWORD *)(result + 40);
              *(_DWORD *)(result + 36) |= v1139 & 0x3FFFF;
              *(_DWORD *)(result + 40) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3))) >> ((*(unsigned char *)a3 + 90) & 7)) & 0x1FFFF | v1140;
              unint64_t v1141 = *a3 + 107;
              unint64_t v1142 = v1141 >> 3;
              unint64_t v1143 = v1141 & 7;
              if (v1143) {
                unsigned int v1144 = ((*(unsigned __int8 *)(a2 + v1142 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1142 + 1) << 8) | *(unsigned __int8 *)(a2 + v1142)) >> v1143;
              }
              else {
                LOWORD(v1144) = *(_WORD *)(a2 + v1142);
              }
              int v1166 = *(_DWORD *)(result + 44) | (unsigned __int16)v1144;
              *(_DWORD *)(result + 44) = v1166;
              unint64_t v1167 = *a3 + 123;
              unint64_t v1168 = v1167 >> 3;
              unint64_t v1169 = v1167 & 7;
              if (v1169) {
                unsigned int v1170 = ((*(unsigned __int8 *)(a2 + v1168 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1168 + 1) << 8) | *(unsigned __int8 *)(a2 + v1168)) >> v1169;
              }
              else {
                unsigned int v1170 = *(unsigned __int16 *)(a2 + v1168);
              }
              *(_DWORD *)(result + 44) = v1166 | (v1170 << 16);
              uint64_t v22 = 139;
              break;
            case 0xD:
              *(_DWORD *)(result + 16) = 13;
              unint64_t v350 = *a3 & 7;
              unint64_t v351 = (unint64_t)(*a3 + 8) >> 3;
              if (v350 > 1) {
                unsigned int v352 = (*(unsigned __int8 *)(a2 + v351 + 2) << 16) | (*(unsigned __int8 *)(a2 + v351 + 1) << 8) | *(unsigned __int8 *)(a2 + v351);
              }
              else {
                unsigned int v352 = *(unsigned __int16 *)(a2 + v351);
              }
              *(_WORD *)(result + 24) |= (v352 >> v350) & 0x7FFF;
              unint64_t v527 = *a3 + 23;
              unint64_t v528 = v527 & 7;
              unint64_t v529 = v527 >> 3;
              if (v528 > 1) {
                unsigned int v530 = (*(unsigned __int8 *)(a2 + v529 + 2) << 16) | (*(unsigned __int8 *)(a2 + v529 + 1) << 8) | *(unsigned __int8 *)(a2 + v529);
              }
              else {
                unsigned int v530 = *(unsigned __int16 *)(a2 + v529);
              }
              *(_WORD *)(result + 26) |= (v530 >> v528) & 0x7FFF;
              unint64_t v581 = *a3 + 38;
              unint64_t v582 = v581 & 7;
              unint64_t v583 = v581 >> 3;
              if (v582 > 1) {
                unsigned int v584 = (*(unsigned __int8 *)(a2 + v583 + 2) << 16) | (*(unsigned __int8 *)(a2 + v583 + 1) << 8) | *(unsigned __int8 *)(a2 + v583);
              }
              else {
                unsigned int v584 = *(unsigned __int16 *)(a2 + v583);
              }
              *(_WORD *)(result + 28) |= (v584 >> v582) & 0x7FFF;
              unint64_t v623 = *a3 + 53;
              unint64_t v624 = v623 & 7;
              unint64_t v625 = v623 >> 3;
              if (v624 > 1) {
                unsigned int v626 = (*(unsigned __int8 *)(a2 + v625 + 2) << 16) | (*(unsigned __int8 *)(a2 + v625 + 1) << 8) | *(unsigned __int8 *)(a2 + v625);
              }
              else {
                unsigned int v626 = *(unsigned __int16 *)(a2 + v625);
              }
              uint64_t v666 = *(unsigned int *)(result + 40);
              *(_WORD *)(result + 30) |= (v626 >> v624) & 0x7FFF;
              int v667 = *(_DWORD *)(result + 36);
              *(_DWORD *)(result + 32) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3))) >> ((*(unsigned char *)a3 + 68) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 36) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3))) >> ((*(unsigned char *)a3 + 85) & 7)) & 0x1FFFF | v667;
              unint64_t v668 = v666 | ((unint64_t)*(unsigned __int16 *)(result + 44) << 32);
              unsigned int v669 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3))) >> ((*(unsigned char *)a3 + 102) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 40) = v666 | v669;
              unint64_t v670 = *a3 + 119;
              unint64_t v671 = v670 & 7;
              unint64_t v672 = v670 >> 3;
              if (v671 > 1) {
                unsigned int v673 = (*(unsigned __int8 *)(a2 + v672 + 2) << 16) | (*(unsigned __int8 *)(a2 + v672 + 1) << 8) | *(unsigned __int8 *)(a2 + v672);
              }
              else {
                unsigned int v673 = *(unsigned __int16 *)(a2 + v672);
              }
              uint64_t v706 = v669 | (v673 >> v671 << 17);
              *(_WORD *)(result + 44) = WORD2(v668);
              *(_DWORD *)(result + 40) = v668 | v706;
              unint64_t v707 = (*(unsigned char *)a3 - 122) & 7;
              unint64_t v708 = (unint64_t)(*a3 + 134) >> 3;
              if (v707 > 2) {
                unsigned int v709 = (*(unsigned __int8 *)(a2 + v708 + 2) << 16) | (*(unsigned __int8 *)(a2 + v708 + 1) << 8) | *(unsigned __int8 *)(a2 + v708);
              }
              else {
                unsigned int v709 = *(unsigned __int16 *)(a2 + v708);
              }
              unint64_t v744 = v706 | ((unint64_t)((v709 >> v707) & 0x3FFF) << 32) | v668;
              *(_DWORD *)(result + 40) = v744;
              *(_WORD *)(result + 44) = WORD2(v744);
              unint64_t v745 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v746 = (unint64_t)(*a3 + 148) >> 3;
              if (v745 > 2) {
                unsigned int v747 = (*(unsigned __int8 *)(a2 + v746 + 2) << 16) | (*(unsigned __int8 *)(a2 + v746 + 1) << 8) | *(unsigned __int8 *)(a2 + v746);
              }
              else {
                unsigned int v747 = *(unsigned __int16 *)(a2 + v746);
              }
              *(_WORD *)(result + 46) |= (v747 >> v745) & 0x3FFF;
              int v780 = *(_DWORD *)(result + 52);
              *(_DWORD *)(result + 48) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3))) >> ((*(unsigned char *)a3 - 94) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 52) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3))) >> ((*(unsigned char *)a3 - 77) & 7)) & 0x1FFFF | v780;
              *(_DWORD *)(result + 56) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3))) >> ((*(unsigned char *)a3 - 60) & 7)) & 0x1FFFF;
              unint64_t v781 = (unint64_t)(*a3 + 213) >> 3;
              if (((*(unsigned char *)a3 - 43) & 7) != 0) {
                unsigned int v782 = ((*(unsigned __int8 *)(a2 + v781 + 2) << 16) | (*(unsigned __int8 *)(a2 + v781 + 1) << 8) | *(unsigned __int8 *)(a2 + v781)) >> ((*(unsigned char *)a3 - 43) & 7);
              }
              else {
                LOWORD(v782) = *(_WORD *)(a2 + v781);
              }
              int v1145 = *(_DWORD *)(result + 60) | (unsigned __int16)v782;
              *(_DWORD *)(result + 60) = v1145;
              unint64_t v1146 = (unint64_t)(*a3 + 229) >> 3;
              if (((*(unsigned char *)a3 - 27) & 7) != 0) {
                unsigned int v1147 = ((*(unsigned __int8 *)(a2 + v1146 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1146 + 1) << 8) | *(unsigned __int8 *)(a2 + v1146)) >> ((*(unsigned char *)a3 - 27) & 7);
              }
              else {
                unsigned int v1147 = *(unsigned __int16 *)(a2 + v1146);
              }
              *(_DWORD *)(result + 60) = v1145 | (v1147 << 16);
              uint64_t v22 = 245;
              break;
            case 0xE:
              *(_DWORD *)(result + 16) = 14;
              unint64_t v353 = *a3 & 7;
              unint64_t v354 = (unint64_t)(*a3 + 8) >> 3;
              if (v353 > 2)
              {
                int v356 = (*(unsigned __int8 *)(v354 + a2 + 3) << 24) | (*(unsigned __int8 *)(v354 + a2 + 2) << 16);
                int v355 = *(unsigned __int8 *)(v354 + a2 + 1) << 8;
              }
              else
              {
                int v355 = *(unsigned __int8 *)(v354 + a2 + 2) << 16;
                int v356 = *(unsigned __int8 *)(v354 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v356 | v355 | *(unsigned __int8 *)(a2 + v354)) >> v353) & 0x3FFFFF;
              unint64_t v531 = *a3 + 30;
              unint64_t v532 = v531 & 7;
              unint64_t v533 = v531 >> 3;
              if (v532 > 2)
              {
                int v535 = (*(unsigned __int8 *)(v533 + a2 + 3) << 24) | (*(unsigned __int8 *)(v533 + a2 + 2) << 16);
                int v534 = *(unsigned __int8 *)(v533 + a2 + 1) << 8;
              }
              else
              {
                int v534 = *(unsigned __int8 *)(v533 + a2 + 2) << 16;
                int v535 = *(unsigned __int8 *)(v533 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v535 | v534 | *(unsigned __int8 *)(a2 + v533)) >> v532) & 0x3FFFFF;
              unint64_t v585 = *a3 + 52;
              unint64_t v586 = v585 & 7;
              unint64_t v587 = v585 >> 3;
              if (v586 > 5)
              {
                int v589 = (*(unsigned __int8 *)(v587 + a2 + 3) << 24) | (*(unsigned __int8 *)(v587 + a2 + 2) << 16);
                int v588 = *(unsigned __int8 *)(v587 + a2 + 1) << 8;
              }
              else
              {
                int v588 = *(unsigned __int8 *)(v587 + a2 + 2) << 16;
                int v589 = *(unsigned __int8 *)(v587 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v589 | v588 | *(unsigned __int8 *)(a2 + v587)) >> v586) & 0x7FFFF;
              unint64_t v627 = *a3 + 71;
              unint64_t v628 = v627 & 7;
              unint64_t v629 = v627 >> 3;
              if (v628 > 2)
              {
                int v631 = (*(unsigned __int8 *)(v629 + a2 + 3) << 24) | (*(unsigned __int8 *)(v629 + a2 + 2) << 16);
                int v630 = *(unsigned __int8 *)(v629 + a2 + 1) << 8;
              }
              else
              {
                int v630 = *(unsigned __int8 *)(v629 + a2 + 2) << 16;
                int v631 = *(unsigned __int8 *)(v629 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v631 | v630 | *(unsigned __int8 *)(a2 + v629)) >> v628) & 0x3FFFFF;
              uint64_t v22 = 93;
              break;
            case 0xF:
              *(_DWORD *)(result + 16) = 15;
              unint64_t v357 = *a3 & 7;
              unint64_t v358 = (unint64_t)(*a3 + 8) >> 3;
              if (v357 > 2) {
                unsigned int v359 = (*(unsigned __int8 *)(a2 + v358 + 2) << 16) | (*(unsigned __int8 *)(a2 + v358 + 1) << 8) | *(unsigned __int8 *)(a2 + v358);
              }
              else {
                unsigned int v359 = *(unsigned __int16 *)(a2 + v358);
              }
              *(_WORD *)(result + 24) |= (v359 >> v357) & 0x3FFF;
              unint64_t v536 = *a3 + 22;
              unint64_t v537 = v536 & 7;
              unint64_t v538 = v536 >> 3;
              if (v537 > 2) {
                unsigned int v539 = (*(unsigned __int8 *)(a2 + v538 + 2) << 16) | (*(unsigned __int8 *)(a2 + v538 + 1) << 8) | *(unsigned __int8 *)(a2 + v538);
              }
              else {
                unsigned int v539 = *(unsigned __int16 *)(a2 + v538);
              }
              *(_WORD *)(result + 26) |= (v539 >> v537) & 0x3FFF;
              unint64_t v590 = *a3 + 36;
              unint64_t v591 = v590 & 7;
              unint64_t v592 = v590 >> 3;
              if (v591 > 2) {
                unsigned int v593 = (*(unsigned __int8 *)(a2 + v592 + 2) << 16) | (*(unsigned __int8 *)(a2 + v592 + 1) << 8) | *(unsigned __int8 *)(a2 + v592);
              }
              else {
                unsigned int v593 = *(unsigned __int16 *)(a2 + v592);
              }
              *(_WORD *)(result + 28) |= (v593 >> v591) & 0x3FFF;
              unint64_t v632 = *a3 + 50;
              unint64_t v633 = v632 & 7;
              unint64_t v634 = v632 >> 3;
              if (v633 > 2) {
                unsigned int v635 = (*(unsigned __int8 *)(a2 + v634 + 2) << 16) | (*(unsigned __int8 *)(a2 + v634 + 1) << 8) | *(unsigned __int8 *)(a2 + v634);
              }
              else {
                unsigned int v635 = *(unsigned __int16 *)(a2 + v634);
              }
              *(_WORD *)(result + 30) |= (v635 >> v633) & 0x3FFF;
              unint64_t v674 = *a3 & 7;
              unint64_t v675 = (unint64_t)(*a3 + 64) >> 3;
              if (v674 > 3) {
                unsigned int v676 = (*(unsigned __int8 *)(a2 + v675 + 2) << 16) | (*(unsigned __int8 *)(a2 + v675 + 1) << 8) | *(unsigned __int8 *)(a2 + v675);
              }
              else {
                unsigned int v676 = *(unsigned __int16 *)(a2 + v675);
              }
              *(_WORD *)(result + 32) |= (v676 >> v674) & 0x1FFF;
              unint64_t v710 = *a3 + 77;
              unint64_t v711 = v710 & 7;
              unint64_t v712 = v710 >> 3;
              if (v711 > 3) {
                unsigned int v713 = (*(unsigned __int8 *)(a2 + v712 + 2) << 16) | (*(unsigned __int8 *)(a2 + v712 + 1) << 8) | *(unsigned __int8 *)(a2 + v712);
              }
              else {
                unsigned int v713 = *(unsigned __int16 *)(a2 + v712);
              }
              *(_WORD *)(result + 34) |= (v713 >> v711) & 0x1FFF;
              unint64_t v748 = *a3 + 90;
              unint64_t v749 = v748 & 7;
              unint64_t v750 = v748 >> 3;
              if (v749 > 3) {
                unsigned int v751 = (*(unsigned __int8 *)(a2 + v750 + 2) << 16) | (*(unsigned __int8 *)(a2 + v750 + 1) << 8) | *(unsigned __int8 *)(a2 + v750);
              }
              else {
                unsigned int v751 = *(unsigned __int16 *)(a2 + v750);
              }
              int v783 = *(_DWORD *)(result + 36) | (v751 >> v749) & 0x1FFF;
              *(_DWORD *)(result + 36) = v783;
              unint64_t v784 = *a3 + 103;
              unint64_t v785 = v784 & 7;
              unint64_t v786 = v784 >> 3;
              if (v785 == 7) {
                int v787 = *(_DWORD *)(a2 + v786) >> 7;
              }
              else {
                int v787 = ((*(unsigned __int8 *)(a2 + v786 + 2) << 16) | (*(unsigned __int8 *)(a2 + v786 + 1) << 8) | *(unsigned __int8 *)(a2 + v786)) >> v785;
              }
              *(_DWORD *)(result + 36) = ((v787 & 0x3FFFF) << 13) | v783;
              unint64_t v814 = *a3 + 121;
              unint64_t v815 = v814 & 7;
              unint64_t v816 = v814 >> 3;
              if (v815 == 7) {
                int v817 = *(_DWORD *)(a2 + v816) >> 7;
              }
              else {
                int v817 = ((*(unsigned __int8 *)(a2 + v816 + 2) << 16) | (*(unsigned __int8 *)(a2 + v816 + 1) << 8) | *(unsigned __int8 *)(a2 + v816)) >> v815;
              }
              *(_DWORD *)(result + 40) |= v817 & 0x3FFFF;
              uint64_t v837 = (*(unsigned char *)a3 - 117) & 7;
              unint64_t v838 = (unint64_t)(*a3 + 139) >> 3;
              if (v837 == 7) {
                int v839 = *(_DWORD *)(a2 + v838) >> 7;
              }
              else {
                int v839 = ((*(unsigned __int8 *)(a2 + v838 + 2) << 16) | (*(unsigned __int8 *)(a2 + v838 + 1) << 8) | *(unsigned __int8 *)(a2 + v838)) >> v837;
              }
              *(_DWORD *)(result + 44) |= v839 & 0x3FFFF;
              uint64_t v22 = 157;
              break;
            default:
              *(_DWORD *)(result + 16) = 0;
              uint64_t v90 = *a3 & 7;
              unint64_t v91 = (unint64_t)(*a3 + 8) >> 3;
              if (v90 == 7) {
                int v92 = *(_DWORD *)(a2 + v91) >> 7;
              }
              else {
                int v92 = ((*(unsigned __int8 *)(a2 + v91 + 2) << 16) | (*(unsigned __int8 *)(a2 + v91 + 1) << 8) | *(unsigned __int8 *)(a2 + v91)) >> v90;
              }
              *(_DWORD *)(result + 24) |= v92 & 0x3FFFF;
              unint64_t v483 = *a3 + 26;
              unint64_t v484 = v483 & 7;
              unint64_t v485 = v483 >> 3;
              if (v484 == 7) {
                int v486 = *(_DWORD *)(a2 + v485) >> 7;
              }
              else {
                int v486 = ((*(unsigned __int8 *)(a2 + v485 + 2) << 16) | (*(unsigned __int8 *)(a2 + v485 + 1) << 8) | *(unsigned __int8 *)(a2 + v485)) >> v484;
              }
              uint64_t v540 = *(unsigned int *)(result + 28);
              unint64_t v541 = v540 | ((unint64_t)*(unsigned __int16 *)(result + 32) << 32);
              int v542 = v486 & 0x3FFFF;
              *(_DWORD *)(result + 28) = v540 | v542;
              unint64_t v543 = *a3 + 44;
              unint64_t v544 = v543 & 7;
              unint64_t v545 = v543 >> 3;
              if (v544 > 2) {
                unsigned int v546 = (*(unsigned __int8 *)(a2 + v545 + 2) << 16) | (*(unsigned __int8 *)(a2 + v545 + 1) << 8) | *(unsigned __int8 *)(a2 + v545);
              }
              else {
                unsigned int v546 = *(unsigned __int16 *)(a2 + v545);
              }
              uint64_t v594 = v542 | (v546 >> v544 << 18);
              *(_WORD *)(result + 32) = WORD2(v541);
              *(_DWORD *)(result + 28) = v541 | v594;
              unint64_t v595 = *a3 + 58;
              unint64_t v596 = v595 & 7;
              unint64_t v597 = v595 >> 3;
              if (v596 > 3) {
                unsigned int v598 = (*(unsigned __int8 *)(a2 + v597 + 2) << 16) | (*(unsigned __int8 *)(a2 + v597 + 1) << 8) | *(unsigned __int8 *)(a2 + v597);
              }
              else {
                unsigned int v598 = *(unsigned __int16 *)(a2 + v597);
              }
              unint64_t v636 = v594 | ((unint64_t)((v598 >> v596) & 0x1FFF) << 32) | v541;
              *(_DWORD *)(result + 28) = v636;
              *(_WORD *)(result + 32) = WORD2(v636);
              unint64_t v637 = *a3 + 71;
              unint64_t v638 = v637 & 7;
              unint64_t v639 = v637 >> 3;
              if (v638 > 2) {
                unsigned int v640 = (*(unsigned __int8 *)(a2 + v639 + 2) << 16) | (*(unsigned __int8 *)(a2 + v639 + 1) << 8) | *(unsigned __int8 *)(a2 + v639);
              }
              else {
                unsigned int v640 = *(unsigned __int16 *)(a2 + v639);
              }
              *(_WORD *)(result + 34) |= (v640 >> v638) & 0x3FFF;
              unint64_t v677 = *a3 + 85;
              unint64_t v678 = v677 & 7;
              unint64_t v679 = v677 >> 3;
              if (v678 > 2) {
                unsigned int v680 = (*(unsigned __int8 *)(a2 + v679 + 2) << 16) | (*(unsigned __int8 *)(a2 + v679 + 1) << 8) | *(unsigned __int8 *)(a2 + v679);
              }
              else {
                unsigned int v680 = *(unsigned __int16 *)(a2 + v679);
              }
              *(_WORD *)(result + 36) |= (v680 >> v678) & 0x3FFF;
              unint64_t v714 = *a3 + 99;
              unint64_t v715 = v714 & 7;
              unint64_t v716 = v714 >> 3;
              if (v715 > 2) {
                unsigned int v717 = (*(unsigned __int8 *)(a2 + v716 + 2) << 16) | (*(unsigned __int8 *)(a2 + v716 + 1) << 8) | *(unsigned __int8 *)(a2 + v716);
              }
              else {
                unsigned int v717 = *(unsigned __int16 *)(a2 + v716);
              }
              *(_WORD *)(result + 38) |= (v717 >> v715) & 0x3FFF;
              unint64_t v752 = *a3 + 113;
              unint64_t v753 = v752 & 7;
              unint64_t v754 = v752 >> 3;
              if (v753 > 2) {
                unsigned int v755 = (*(unsigned __int8 *)(a2 + v754 + 2) << 16) | (*(unsigned __int8 *)(a2 + v754 + 1) << 8) | *(unsigned __int8 *)(a2 + v754);
              }
              else {
                unsigned int v755 = *(unsigned __int16 *)(a2 + v754);
              }
              *(_WORD *)(result + 40) |= (v755 >> v753) & 0x3FFF;
              unint64_t v788 = *a3 + 127;
              unint64_t v789 = v788 & 7;
              unint64_t v790 = v788 >> 3;
              if (v789 > 2) {
                unsigned int v791 = (*(unsigned __int8 *)(a2 + v790 + 2) << 16) | (*(unsigned __int8 *)(a2 + v790 + 1) << 8) | *(unsigned __int8 *)(a2 + v790);
              }
              else {
                unsigned int v791 = *(unsigned __int16 *)(a2 + v790);
              }
              *(_WORD *)(result + 42) |= (v791 >> v789) & 0x3FFF;
              unint64_t v818 = (*(unsigned char *)a3 - 115) & 7;
              unint64_t v819 = (unint64_t)(*a3 + 141) >> 3;
              if (v818 > 2) {
                unsigned int v820 = (*(unsigned __int8 *)(a2 + v819 + 2) << 16) | (*(unsigned __int8 *)(a2 + v819 + 1) << 8) | *(unsigned __int8 *)(a2 + v819);
              }
              else {
                unsigned int v820 = *(unsigned __int16 *)(a2 + v819);
              }
              *(_WORD *)(result + 44) |= (v820 >> v818) & 0x3FFF;
              *(_WORD *)(result + 46) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 155) >> 3)) >> ((*(unsigned char *)a3 - 101) & 7)) & 0x1FF;
              *(_WORD *)(result + 48) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 164) >> 3)) >> ((*(unsigned char *)a3 - 92) & 7)) & 0x1FF;
              unint64_t v840 = (*(unsigned char *)a3 - 83) & 7;
              unint64_t v841 = (unint64_t)(*a3 + 173) >> 3;
              if (v840 > 5) {
                unsigned int v842 = (*(unsigned __int8 *)(a2 + v841 + 2) << 16) | (*(unsigned __int8 *)(a2 + v841 + 1) << 8) | *(unsigned __int8 *)(a2 + v841);
              }
              else {
                unsigned int v842 = *(unsigned __int16 *)(a2 + v841);
              }
              *(_WORD *)(result + 50) |= (v842 >> v840) & 0x7FF;
              unint64_t v857 = *a3 & 7;
              unint64_t v858 = (unint64_t)(*a3 + 184) >> 3;
              if (v857 > 2) {
                unsigned int v859 = (*(unsigned __int8 *)(a2 + v858 + 2) << 16) | (*(unsigned __int8 *)(a2 + v858 + 1) << 8) | *(unsigned __int8 *)(a2 + v858);
              }
              else {
                unsigned int v859 = *(unsigned __int16 *)(a2 + v858);
              }
              *(_WORD *)(result + 52) |= (v859 >> v857) & 0x3FFF;
              unint64_t v874 = (*(unsigned char *)a3 - 58) & 7;
              unint64_t v875 = (unint64_t)(*a3 + 198) >> 3;
              if (v874 > 2) {
                unsigned int v876 = (*(unsigned __int8 *)(a2 + v875 + 2) << 16) | (*(unsigned __int8 *)(a2 + v875 + 1) << 8) | *(unsigned __int8 *)(a2 + v875);
              }
              else {
                unsigned int v876 = *(unsigned __int16 *)(a2 + v875);
              }
              *(_WORD *)(result + 54) |= (v876 >> v874) & 0x3FFF;
              unint64_t v891 = (*(unsigned char *)a3 - 44) & 7;
              unint64_t v892 = (unint64_t)(*a3 + 212) >> 3;
              if (v891 > 2) {
                unsigned int v893 = (*(unsigned __int8 *)(a2 + v892 + 2) << 16) | (*(unsigned __int8 *)(a2 + v892 + 1) << 8) | *(unsigned __int8 *)(a2 + v892);
              }
              else {
                unsigned int v893 = *(unsigned __int16 *)(a2 + v892);
              }
              *(_WORD *)(result + 56) |= (v893 >> v891) & 0x3FFF;
              unint64_t v908 = (*(unsigned char *)a3 - 30) & 7;
              unint64_t v909 = (unint64_t)(*a3 + 226) >> 3;
              if (v908 > 2) {
                unsigned int v910 = (*(unsigned __int8 *)(a2 + v909 + 2) << 16) | (*(unsigned __int8 *)(a2 + v909 + 1) << 8) | *(unsigned __int8 *)(a2 + v909);
              }
              else {
                unsigned int v910 = *(unsigned __int16 *)(a2 + v909);
              }
              *(_WORD *)(result + 58) |= (v910 >> v908) & 0x3FFF;
              unint64_t v926 = *a3 & 7;
              unint64_t v927 = (unint64_t)(*a3 + 240) >> 3;
              if (v926 > 2) {
                unsigned int v928 = (*(unsigned __int8 *)(a2 + v927 + 2) << 16) | (*(unsigned __int8 *)(a2 + v927 + 1) << 8) | *(unsigned __int8 *)(a2 + v927);
              }
              else {
                unsigned int v928 = *(unsigned __int16 *)(a2 + v927);
              }
              *(_WORD *)(result + 60) |= (v928 >> v926) & 0x3FFF;
              unint64_t v944 = (*(unsigned char *)a3 - 2) & 7;
              unint64_t v945 = (unint64_t)(*a3 + 254) >> 3;
              if (v944 > 2) {
                unsigned int v946 = (*(unsigned __int8 *)(a2 + v945 + 2) << 16) | (*(unsigned __int8 *)(a2 + v945 + 1) << 8) | *(unsigned __int8 *)(a2 + v945);
              }
              else {
                unsigned int v946 = *(unsigned __int16 *)(a2 + v945);
              }
              *(_WORD *)(result + 62) |= (v946 >> v944) & 0x3FFF;
              *(_WORD *)(result + 64) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 268) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 0x1FF;
              *(_WORD *)(result + 66) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 277) >> 3)) >> ((*(unsigned char *)a3 + 21) & 7)) & 0x1FF;
              unint64_t v963 = *a3 + 286;
              unint64_t v964 = v963 & 7;
              unint64_t v965 = v963 >> 3;
              if (v964 > 5) {
                unsigned int v966 = (*(unsigned __int8 *)(a2 + v965 + 2) << 16) | (*(unsigned __int8 *)(a2 + v965 + 1) << 8) | *(unsigned __int8 *)(a2 + v965);
              }
              else {
                unsigned int v966 = *(unsigned __int16 *)(a2 + v965);
              }
              *(_WORD *)(result + 68) |= (v966 >> v964) & 0x7FF;
              uint64_t v22 = 297;
              break;
          }
          break;
        default:
          *(_WORD *)(result + 8) = 8;
          *(void *)uint64_t result = 0x700000007;
          unint64_t v23 = *a3 + 4;
          unint64_t v24 = v23 >> 3;
          unint64_t v25 = v23 & 7;
          if (v25) {
            int v26 = *(unsigned __int16 *)(a2 + v24) >> v25;
          }
          else {
            LOBYTE(v26) = *(unsigned char *)(a2 + v24);
          }
          *(unsigned char *)(result + 16) |= v26;
          if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1) == 0)
          {
            *(_DWORD *)(result + 20) = 0;
            unint64_t v120 = *a3 + 13;
            unint64_t v121 = v120 & 7;
            unint64_t v122 = v120 >> 3;
            if (v121 > 3) {
              unsigned int v123 = *(unsigned __int16 *)(a2 + v122);
            }
            else {
              unsigned int v123 = *(unsigned __int8 *)(a2 + v122);
            }
            *(unsigned char *)(result + 24) |= (v123 >> v121) & 0x1F;
            goto LABEL_56;
          }
          *(_DWORD *)(result + 20) = 1;
          unint64_t v99 = *a3 + 13;
          unint64_t v100 = v99 & 7;
          unint64_t v101 = v99 >> 3;
          if (v100 > 3) {
            unsigned int v102 = *(unsigned __int16 *)(a2 + v101);
          }
          else {
            unsigned int v102 = *(unsigned __int8 *)(a2 + v101);
          }
          uint64_t v140 = *(void *)(result + 24) | (v102 >> v100) & 0x1F;
          *(void *)(result + 24) = v140;
          unint64_t v141 = *a3 + 18;
          unint64_t v142 = v141 & 7;
          unint64_t v143 = v141 >> 3;
          if (v142 == 7)
          {
            unint64_t v144 = ((unint64_t)*(unsigned __int8 *)(v143 + a2 + 6) << 48) | ((unint64_t)*(unsigned __int8 *)(v143 + a2 + 5) << 40);
            unint64_t v145 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 4) << 32;
          }
          else
          {
            unint64_t v145 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 5) << 40;
            unint64_t v144 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 4) << 32;
          }
          *(void *)(result + 24) = ((((v144 | v145 | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 1) << 8) | *(unsigned __int8 *)(a2 + v143)) >> v142) & 0x3FFFFFFFFFFLL) << 6) | v140;
          uint64_t v22 = 60;
          break;
      }
      break;
    case 3:
      uint64_t v19 = (v4 + 2) & 7;
      unint64_t v20 = (unint64_t)(v4 + 2) >> 3;
      if (v19 == 7) {
        int v21 = *(unsigned __int16 *)(a2 + v20) >> 7;
      }
      else {
        int v21 = *(unsigned __int8 *)(a2 + v20) >> v19;
      }
      switch(v21 & 3)
      {
        case 1:
          unint64_t v68 = v4 + 4;
          uint64_t v69 = (v4 + 4) & 7;
          unint64_t v70 = v68 >> 3;
          if (v69 == 7) {
            int v71 = *(unsigned __int16 *)(a2 + v70) >> 7;
          }
          else {
            int v71 = *(unsigned __int8 *)(a2 + v70) >> v69;
          }
          int v93 = v71 & 3;
          if (v93 == 1)
          {
            *(_WORD *)(result + 8) = 1;
            uint64_t v94 = 0xE0000000ELL;
          }
          else
          {
            if (v93) {
              goto LABEL_81;
            }
            *(_WORD *)(result + 8) = 1;
            uint64_t v94 = 0xD0000000DLL;
          }
          *(void *)uint64_t result = v94;
          unint64_t v133 = *a3 + 6;
          unint64_t v134 = v133 & 7;
          unint64_t v135 = v133 >> 3;
          if (v134 == 7) {
            int v136 = *(unsigned __int16 *)(a2 + v135) >> 7;
          }
          else {
            int v136 = *(unsigned __int8 *)(a2 + v135) >> v134;
          }
          *(unsigned char *)(result + 16) |= v136 & 3;
          uint64_t v22 = 8;
          goto LABEL_398;
        case 2:
          unint64_t v72 = v4 + 4;
          uint64_t v73 = (v4 + 4) & 7;
          unint64_t v74 = v72 >> 3;
          if (v73 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v74) | (*(unsigned __int8 *)(a2 + v74 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_81;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v74) >> v73) & 3) != 0)
          {
            goto LABEL_81;
          }
          *(_WORD *)(result + 8) = 3;
          *(void *)uint64_t result = 0xF0000000FLL;
          unint64_t v95 = *a3 + 6;
          unint64_t v96 = v95 & 7;
          unint64_t v97 = v95 >> 3;
          if (v96 > 1) {
            unsigned int v98 = *(unsigned __int16 *)(a2 + v97);
          }
          else {
            unsigned int v98 = *(unsigned __int8 *)(a2 + v97);
          }
          *(unsigned char *)(result + 24) |= (v98 >> v96) & 0x7F;
          unint64_t v163 = *a3 + 13;
          unint64_t v164 = v163 & 7;
          unint64_t v165 = v163 >> 3;
          if (v164 > 5) {
            unsigned __int16 v166 = *(_WORD *)(a2 + v165);
          }
          else {
            unsigned __int16 v166 = *(unsigned __int8 *)(a2 + v165);
          }
          *(_DWORD *)(result + 20) = (v166 >> v164) & 7;
          unint64_t v167 = *a3 & 7;
          unint64_t v168 = (unint64_t)(*a3 + 16) >> 3;
          if (v167 > 5) {
            unsigned __int16 v169 = *(_WORD *)(a2 + v168);
          }
          else {
            unsigned __int16 v169 = *(unsigned __int8 *)(a2 + v168);
          }
          switch((v169 >> v167) & 7)
          {
            case 1:
              int v360 = 1;
              goto LABEL_280;
            case 2:
              int v360 = 2;
              goto LABEL_280;
            case 3:
              int v360 = 3;
              goto LABEL_280;
            case 4:
              int v360 = 4;
              goto LABEL_280;
            case 5:
              int v360 = 5;
              goto LABEL_280;
            case 6:
              int v360 = 6;
              goto LABEL_280;
            case 7:
              int v360 = 7;
LABEL_280:
              *(_DWORD *)(result + 16) = v360;
              break;
            default:
              *(_DWORD *)(result + 16) = 0;
              break;
          }
          uint64_t v22 = 19;
          goto LABEL_398;
        case 3:
          unint64_t v75 = v4 + 4;
          uint64_t v76 = (v4 + 4) & 7;
          unint64_t v77 = v75 >> 3;
          if (v76 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v77) | (*(unsigned __int8 *)(a2 + v77 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_81;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v77) >> v76) & 3) != 0)
          {
            goto LABEL_81;
          }
          *(_WORD *)(result + 8) = 1;
          *(void *)uint64_t result = 0x1000000010;
          uint64_t v22 = 6;
          goto LABEL_398;
        default:
          unint64_t v27 = v4 + 4;
          uint64_t v28 = (v4 + 4) & 7;
          unint64_t v29 = v27 >> 3;
          if (v28 == 7) {
            int v30 = *(unsigned __int16 *)(a2 + v29) >> 7;
          }
          else {
            int v30 = *(unsigned __int8 *)(a2 + v29) >> v28;
          }
          int v78 = v30 & 3;
          if (v78 == 1)
          {
            *(_WORD *)(result + 8) = 3;
            *(void *)uint64_t result = 0xC0000000CLL;
            unint64_t v124 = *a3 + 6;
            unint64_t v125 = v124 & 7;
            unint64_t v126 = v124 >> 3;
            if (v125 > 5) {
              unsigned __int16 v127 = *(_WORD *)(a2 + v126);
            }
            else {
              unsigned __int16 v127 = *(unsigned __int8 *)(a2 + v126);
            }
            *(_DWORD *)(result + 16) = (v127 >> v125) & 7;
            int v170 = *(_WORD *)(result + 20) & 0xFFFE | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
            *(_WORD *)(result + 20) = v170;
            unsigned int v171 = v170 & 0xFFFFFFFD | (2
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)) & 1));
            *(_WORD *)(result + 20) = v171;
            unsigned int v172 = v171 & 0xFFFFFFFB | (4
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 11) >> 3)) >> ((*(unsigned char *)a3 + 11) & 7)) & 1));
            *(_WORD *)(result + 20) = v172;
            unsigned int v173 = v172 & 0xFFFFFFF7 | (8
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1));
            *(_WORD *)(result + 20) = v173;
            unsigned int v174 = v173 & 0xFFFFFFEF | (16
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 13) >> 3)) >> ((*(unsigned char *)a3 + 13) & 7)) & 1));
            *(_WORD *)(result + 20) = v174;
            unsigned int v175 = v174 & 0xFFFFFFDF | (32
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 14) >> 3)) >> ((*(unsigned char *)a3 + 14) & 7)) & 1));
            *(_WORD *)(result + 20) = v175;
            unsigned int v176 = v175 & 0xFFFFFFBF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 15) >> 3)) >> ((*(unsigned char *)a3 + 15) & 7)) & 1) << 6);
            *(_WORD *)(result + 20) = v176;
            unsigned int v177 = v176 & 0xFFFFFF7F | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7)) & 1) << 7);
            *(_WORD *)(result + 20) = v177;
            unsigned int v178 = v177 & 0xFFFFFEFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 18) >> 3)) >> ((*(unsigned char *)a3 + 18) & 7)) & 1) << 8);
            *(_WORD *)(result + 20) = v178;
            unsigned int v179 = v178 & 0xFFFFFDFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 19) >> 3)) >> ((*(unsigned char *)a3 + 19) & 7)) & 1) << 9);
            *(_WORD *)(result + 20) = v179;
            unsigned int v180 = v179 & 0xFFFFFBFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 20) >> 3)) >> ((*(unsigned char *)a3 + 20) & 7)) & 1) << 10);
            *(_WORD *)(result + 20) = v180;
            if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 21) >> 3)) >> ((*(unsigned char *)a3 + 21) & 7))) {
              __int16 v181 = v180 | 0x800;
            }
            else {
              __int16 v181 = v180 & 0xF7FF;
            }
            *(_WORD *)(result + 20) = v181;
            uint64_t v22 = 22;
          }
          else
          {
            if (v78)
            {
LABEL_81:
              *a4 = 0;
              return result;
            }
            *(_WORD *)(result + 8) = 10;
            *(void *)uint64_t result = 0xB0000000BLL;
            unint64_t v79 = *a3 + 9;
            unint64_t v80 = v79 >> 3;
            unint64_t v81 = v79 & 7;
            if (v81)
            {
              unint64_t v82 = ((unint64_t)*(unsigned __int8 *)(v80 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v80 + a2 + 6) << 48);
              unint64_t v83 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 5) << 40;
            }
            else
            {
              unint64_t v83 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 6) << 48;
              unint64_t v82 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 5) << 40;
            }
            uint64_t v195 = (unsigned __int8 *)(a2 + v80);
            unint64_t v196 = ((v82 | v83 | ((unint64_t)v195[4] << 32) | ((unint64_t)v195[3] << 24) | ((unint64_t)v195[2] << 16) | ((unint64_t)v195[1] << 8) | *v195) >> v81) & 0xFFFFFFFFFFFFFFLL;
            unint64_t v197 = *a3 + 65;
            unint64_t v198 = v197 >> 3;
            unint64_t v199 = v197 & 7;
            if (v199) {
              uint64_t v200 = (*(unsigned __int16 *)(a2 + v198) >> v199);
            }
            else {
              uint64_t v200 = *(unsigned __int8 *)(a2 + v198);
            }
            *(void *)(result + 24) |= v196 | (v200 << 56);
            unint64_t v209 = *a3 + 6;
            unint64_t v210 = v209 & 7;
            unint64_t v211 = v209 >> 3;
            if (v210 > 5) {
              unsigned __int16 v212 = *(_WORD *)(a2 + v211);
            }
            else {
              unsigned __int16 v212 = *(unsigned __int8 *)(a2 + v211);
            }
            switch((v212 >> v210) & 7)
            {
              case 1:
                int v482 = 1;
                goto LABEL_396;
              case 2:
                int v482 = 2;
                goto LABEL_396;
              case 3:
                int v482 = 3;
                goto LABEL_396;
              case 4:
                int v482 = 4;
                goto LABEL_396;
              case 5:
                int v482 = 5;
                goto LABEL_396;
              case 6:
                int v482 = 6;
                goto LABEL_396;
              case 7:
                int v482 = 7;
LABEL_396:
                *(_DWORD *)(result + 16) = v482;
                break;
              default:
                *(_DWORD *)(result + 16) = 0;
                break;
            }
            uint64_t v22 = 73;
          }
          break;
      }
      break;
    default:
      *(_WORD *)(result + 8) = 3;
      *(void *)uint64_t result = 0;
      unint64_t v8 = *a3 + 2;
      unint64_t v9 = v8 >> 3;
      unint64_t v10 = v8 & 7;
      if (v10) {
        int v11 = (*(unsigned __int16 *)(a2 + v9) >> v10);
      }
      else {
        int v11 = *(unsigned __int8 *)(a2 + v9);
      }
      int v31 = *(unsigned __int16 *)(result + 16) | v11;
      *(_WORD *)(result + 16) = v31;
      uint64_t v32 = *a3;
      if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)))
      {
        unint64_t v33 = v32 + 11;
        unint64_t v34 = (v32 + 11) & 7;
        unint64_t v35 = v33 >> 3;
        if (v34 > 2) {
          unsigned __int16 v36 = *(_WORD *)(a2 + v35);
        }
        else {
          unsigned __int16 v36 = *(unsigned __int8 *)(a2 + v35);
        }
        int v42 = (((v36 >> v34) & 0x3F) << 8) | v31;
        *(_WORD *)(result + 16) = v42;
        if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7))) {
          __int16 v43 = v42 | 0x4000;
        }
        else {
          __int16 v43 = v42 & 0xBFFF;
        }
        *(_WORD *)(result + 16) = v43;
LABEL_56:
        uint64_t v22 = 18;
      }
      else
      {
        __int16 v37 = v31 & 0xBFFF;
        *(_WORD *)(result + 16) = v37;
        unint64_t v38 = *a3 + 11;
        unint64_t v39 = v38 & 7;
        unint64_t v40 = v38 >> 3;
        if (v39 > 4) {
          unsigned __int16 v41 = *(_WORD *)(a2 + v40);
        }
        else {
          unsigned __int16 v41 = *(unsigned __int8 *)(a2 + v40);
        }
        *(_WORD *)(result + 16) = (((v41 >> v39) & 0xF) << 8) | v37;
LABEL_122:
        uint64_t v22 = 15;
      }
      break;
  }
LABEL_398:
  *a3 += v22;
  return result;
}

void sub_199DDC(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 41928;
  if (*(void *)(a1 + 41960))
  {
    uint64_t v15 = a1 + 160;
    uint64_t v5 = a1 + 41968;
    unint64_t v6 = *(void *)(a1 + 41952);
    do
    {
      uint64_t v7 = *(void *)(*(void *)v2 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
      unsigned int v8 = v6 & 0xF;
      unint64_t v9 = (unsigned __int8 *)(v7 + 264 * (v6 & 0xF));
      if (!v9[32]) {
        break;
      }
      uint64_t v18 = a1;
      v16[0] = v9;
      v16[1] = &v18;
      v16[2] = a1;
      v16[3] = &v17;
      uint64_t v10 = v7 + 264 * v8;
      if (*(unsigned char *)(v10 + 256))
      {
        sub_19A028((unint64_t)v16, v10 + 40, (uint64_t)v9);
        if (!*(unsigned char *)(v10 + 256)) {
          sub_8894();
        }
        sub_46078(a2, v10 + 40);
      }
      else
      {
        unint64_t v11 = *v9;
        if (v11 <= 0x97)
        {
          sub_19A028((unint64_t)v16, v15 + 224 * *v9, v15);
          uint64_t v12 = (int64x2_t *)(v5 + 48 * v11);
          if (v12[2].i64[1]) {
            goto LABEL_14;
          }
          unint64_t v13 = sub_12C18C();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            unint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp"
                  "ort/APS/AGXPSAPSParserGen1.cpp";
            __int16 v21 = 1024;
            int v22 = 806;
            __int16 v23 = 2080;
            unint64_t v24 = "!pendingPositionsForClique.empty()";
            _os_log_error_impl(&def_1C1270, v13, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", buf, 0x1Cu);
          }
          if (sub_12C17C()) {
            sub_12C184();
          }
          if (v12[2].i64[1]) {
LABEL_14:
          }
            sub_47E68(v12);
        }
      }
      sub_B9500(*(void *)(*(void *)v2 + ((*(void *)(v2 + 24) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 264 * (*(void *)(v2 + 24) & 0xFLL));
      uint64_t v14 = *(void *)(v2 + 32) - 1;
      unint64_t v6 = *(void *)(v2 + 24) + 1;
      *(void *)(v2 + 24) = v6;
      *(void *)(v2 + 32) = v14;
      if (v6 >= 0x20)
      {
        operator delete(**(void ***)v2);
        *(void *)v2 += 8;
        uint64_t v14 = *(void *)(v2 + 32);
        unint64_t v6 = *(void *)(v2 + 24) - 16;
        *(void *)(v2 + 24) = v6;
      }
    }
    while (v14);
  }
}

unint64_t sub_19A028@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)result;
  unint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 208);
  switch(*(_DWORD *)(*(void *)result + 4))
  {
    case 0:
      uint64_t result = sub_14F6D8(*(uint64_t **)(result + 8), *(void *)(v3 + 20), *(_DWORD *)(v3 + 28), v7, a3);
      uint64_t v9 = *(void *)(*(void *)v5 + 8);
      uint64_t v10 = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(void *)v5 + 16);
      if (v7 <= 7)
      {
        *((void *)&v11 + 1) = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(void *)v5 + 16);
        *(void *)&long long v11 = v9 & 0xFFFFFFFF00000000;
        uint64_t v12 = v6 + 16 * v7 + 39616;
        *(_DWORD *)uint64_t v12 = v9;
        *(int32x2_t *)(v12 + 4) = vzip1_s32((int32x2_t)(v11 >> 32), (int32x2_t)v10);
        *(unsigned char *)(v12 + 12) = 1;
      }
      int v14 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(void *)(v13 - 28) = v10;
      *(void *)(v13 - 36) = v9;
      *(v13 - 20) = ((v8 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v14) {
        goto LABEL_23;
      }
      break;
    case 1:
      uint64_t result = sub_14F6D8(*(uint64_t **)(result + 8), *(void *)(v3 + 12), *(_DWORD *)(v3 + 20), v7, a3);
      unint64_t v16 = 0;
      uint64_t v17 = ((HIDWORD(result) & 0x7FF) << 32) | ((v15 & 0x7FF) << 43) | (HIDWORD(v15) << 54);
      if (v7 <= 7)
      {
        uint64_t v18 = (_DWORD *)(v6 + 16 * v7 + 39616);
        if (*(unsigned char *)(v6 + 16 * v7 + 39628))
        {
          unsigned int v19 = *(unsigned __int16 *)(*(void *)v5 + 8);
          int32x2_t v20 = vadd_s32(*(int32x2_t *)(v6 + 16 * v7 + 39620), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL));
          uint64_t v21 = *v18 + (v19 & 0xF);
          unint64_t v16 = v21 | ((unint64_t)v20.u32[0] << 32);
          uint64_t v17 = v20.u32[1] | (unint64_t)v17;
          _DWORD *v18 = v21;
          *(int32x2_t *)(v6 + 16 * v7 + 39620) = v20;
        }
      }
      int v22 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(void *)(v13 - 28) = v17;
      *(void *)(v13 - 36) = v16;
      *(v13 - 20) = ((v15 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v22) {
        goto LABEL_23;
      }
      break;
    case 2:
      __int16 v23 = *(_WORD *)(v3 + 8);
      LODWORD(v24) = ((*(_WORD *)(v3 + 12) & 0x7FF) << 20) | ((*(_WORD *)(v3 + 10) & 0x3FF) << 10) | v23 & 0x3FF;
      uint8x8_t v25 = *(uint8x8_t *)(v3 + 15);
      uint8x8_t v26 = *(uint8x8_t *)(v3 + 23);
      if (*(unsigned char *)(v3 + 14))
      {
        int v31 = v25.u8[0];
        v27.i64[0] = vdupq_n_s16(v25.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v31 + 1).i64[1];
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v26.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        uint16x8_t v27 = vmovl_u8(v25);
        uint16x8_t v28 = vmovl_u8(v26);
      }
      if (v7 <= 7)
      {
        uint64_t v32 = v6 + 16 * v7 + 39744;
        *(_DWORD *)uint64_t v32 = v23 & 0x3FF;
        *(int8x8_t *)(v32 + 4) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x7FF000003FFLL);
        *(unsigned char *)(v32 + 12) = 1;
      }
      goto LABEL_22;
    case 3:
      LODWORD(v24) = *(unsigned __int8 *)(v3 + 8);
      uint8x8_t v29 = *(uint8x8_t *)(v3 + 9);
      uint8x8_t v30 = *(uint8x8_t *)(v3 + 17);
      if (v24)
      {
        int v33 = v29.u8[0];
        v27.i64[0] = vdupq_n_s16(v29.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v33 + 1).i64[1];
        uint64_t v24 = (uint64_t)&unk_4C7000;
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v30.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        uint16x8_t v27 = vmovl_u8(v29);
        uint16x8_t v28 = vmovl_u8(v30);
      }
      if (v7 <= 7)
      {
        uint64_t v24 = v6 + 16 * v7 + 39744;
        if (*(unsigned char *)(v6 + 16 * v7 + 39756)) {
          LODWORD(v24) = *(_DWORD *)v24 & 0x3FF | ((*(_DWORD *)(v6 + 16 * v7 + 39748) & 0x3FF) << 10) & 0x800FFFFF | ((*(_DWORD *)(v6 + 16 * v7 + 39752) & 0x7FF) << 20);
        }
      }
LABEL_22:
      int v34 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(uint16x8_t *)(a2 + 168) = v27;
      *(uint16x8_t *)(a2 + 184) = v28;
      *(_DWORD *)(a2 + 200) = v24;
      if (!v34) {
LABEL_23:
      }
        unsigned char *v13 = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_19A338(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      unint64_t v8 = (char *)v6[497];
      unint64_t v24 = v6[498];
      if ((unint64_t)v8 >= v24)
      {
        uint64_t v10 = (char *)v6[496];
        uint64_t v26 = (v8 - v10) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v27 = v24 - (void)v10;
        unint64_t v28 = (uint64_t)(v24 - (void)v10) >> 2;
        if (v28 <= v26 + 1) {
          unint64_t v28 = v26 + 1;
        }
        if (v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          uint8x8_t v30 = (char *)sub_5714((uint64_t)(v6 + 498), v29);
          unint64_t v8 = (char *)v6[497];
          uint64_t v10 = (char *)v6[496];
        }
        else
        {
          uint8x8_t v30 = 0;
        }
        int v31 = &v30[8 * v26];
        uint64_t v32 = &v30[8 * v29];
        *(void *)int v31 = v7;
        uint8x8_t v25 = v31 + 8;
        while (v8 != v10)
        {
          uint64_t v34 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v31 - 1) = v34;
          v31 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      unint64_t v8 = (char *)v6[497];
      unint64_t v9 = v6[498];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[496];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 498), v14);
          unint64_t v8 = (char *)v6[497];
          uint64_t v10 = (char *)v6[496];
        }
        else
        {
          unint64_t v15 = 0;
        }
        int v31 = &v15[8 * v11];
        uint64_t v32 = &v15[8 * v14];
        *(void *)int v31 = v7;
        uint8x8_t v25 = v31 + 8;
        while (v8 != v10)
        {
          uint64_t v33 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v31 - 1) = v33;
          v31 -= 8;
        }
LABEL_35:
        v6[496] = v31;
        v6[497] = v25;
        v6[498] = v32;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)unint64_t v8 = v7;
    uint8x8_t v25 = v8 + 8;
LABEL_37:
    v6[497] = v25;
LABEL_38:
    int v35 = 1 << *(_DWORD *)(v3 + 48);
    if (v35 == 2)
    {
      unsigned __int16 v36 = *(void **)a1[1];
      uint64_t v37 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      unint64_t v38 = (char *)v36[500];
      unint64_t v46 = v36[501];
      if ((unint64_t)v38 >= v46)
      {
        unint64_t v40 = (char *)v36[499];
        uint64_t v48 = (v38 - v40) >> 3;
        if ((unint64_t)(v48 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v49 = v46 - (void)v40;
        unint64_t v50 = (uint64_t)(v46 - (void)v40) >> 2;
        if (v50 <= v48 + 1) {
          unint64_t v50 = v48 + 1;
        }
        if (v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51)
        {
          unint64_t v52 = (char *)sub_5714((uint64_t)(v36 + 501), v51);
          unint64_t v38 = (char *)v36[500];
          unint64_t v40 = (char *)v36[499];
        }
        else
        {
          unint64_t v52 = 0;
        }
        unint64_t v53 = &v52[8 * v48];
        unint64_t v54 = &v52[8 * v51];
        *(void *)unint64_t v53 = v37;
        int v47 = v53 + 8;
        while (v38 != v40)
        {
          uint64_t v56 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v53 - 1) = v56;
          v53 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v35 != 1) {
        goto LABEL_70;
      }
      unsigned __int16 v36 = *(void **)a1[1];
      uint64_t v37 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      unint64_t v38 = (char *)v36[500];
      unint64_t v39 = v36[501];
      if ((unint64_t)v38 >= v39)
      {
        unint64_t v40 = (char *)v36[499];
        uint64_t v41 = (v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v42 = v39 - (void)v40;
        unint64_t v43 = (uint64_t)(v39 - (void)v40) >> 2;
        if (v43 <= v41 + 1) {
          unint64_t v43 = v41 + 1;
        }
        if (v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          uint64_t v45 = (char *)sub_5714((uint64_t)(v36 + 501), v44);
          unint64_t v38 = (char *)v36[500];
          unint64_t v40 = (char *)v36[499];
        }
        else
        {
          uint64_t v45 = 0;
        }
        unint64_t v53 = &v45[8 * v41];
        unint64_t v54 = &v45[8 * v44];
        *(void *)unint64_t v53 = v37;
        int v47 = v53 + 8;
        while (v38 != v40)
        {
          uint64_t v55 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v53 - 1) = v55;
          v53 -= 8;
        }
LABEL_67:
        v36[499] = v53;
        v36[500] = v47;
        v36[501] = v54;
        if (v40) {
          operator delete(v40);
        }
        goto LABEL_69;
      }
    }
    *(void *)unint64_t v38 = v37;
    int v47 = v38 + 8;
LABEL_69:
    v36[500] = v47;
LABEL_70:
    int v57 = 1 << *(_DWORD *)(v3 + 48);
    if (v57 == 2)
    {
      unint64_t v58 = *(void **)a1[1];
      uint64_t v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      unint64_t v60 = (char *)v58[503];
      unint64_t v68 = v58[504];
      if ((unint64_t)v60 >= v68)
      {
        unint64_t v62 = (char *)v58[502];
        uint64_t v70 = (v60 - v62) >> 3;
        if ((unint64_t)(v70 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v71 = v68 - (void)v62;
        unint64_t v72 = (uint64_t)(v68 - (void)v62) >> 2;
        if (v72 <= v70 + 1) {
          unint64_t v72 = v70 + 1;
        }
        if (v71 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v72;
        }
        if (v73)
        {
          unint64_t v74 = (char *)sub_5714((uint64_t)(v58 + 504), v73);
          unint64_t v60 = (char *)v58[503];
          unint64_t v62 = (char *)v58[502];
        }
        else
        {
          unint64_t v74 = 0;
        }
        unint64_t v75 = &v74[8 * v70];
        uint64_t v76 = &v74[8 * v73];
        *(void *)unint64_t v75 = v59;
        uint64_t v69 = v75 + 8;
        while (v60 != v62)
        {
          uint64_t v78 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v75 - 1) = v78;
          v75 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v57 != 1) {
        goto LABEL_102;
      }
      unint64_t v58 = *(void **)a1[1];
      uint64_t v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      unint64_t v60 = (char *)v58[503];
      unint64_t v61 = v58[504];
      if ((unint64_t)v60 >= v61)
      {
        unint64_t v62 = (char *)v58[502];
        uint64_t v63 = (v60 - v62) >> 3;
        if ((unint64_t)(v63 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v64 = v61 - (void)v62;
        unint64_t v65 = (uint64_t)(v61 - (void)v62) >> 2;
        if (v65 <= v63 + 1) {
          unint64_t v65 = v63 + 1;
        }
        if (v64 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66)
        {
          unsigned __int16 v67 = (char *)sub_5714((uint64_t)(v58 + 504), v66);
          unint64_t v60 = (char *)v58[503];
          unint64_t v62 = (char *)v58[502];
        }
        else
        {
          unsigned __int16 v67 = 0;
        }
        unint64_t v75 = &v67[8 * v63];
        uint64_t v76 = &v67[8 * v66];
        *(void *)unint64_t v75 = v59;
        uint64_t v69 = v75 + 8;
        while (v60 != v62)
        {
          uint64_t v77 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v75 - 1) = v77;
          v75 -= 8;
        }
LABEL_99:
        v58[502] = v75;
        v58[503] = v69;
        v58[504] = v76;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v60 = v59;
    uint64_t v69 = v60 + 8;
LABEL_101:
    v58[503] = v69;
LABEL_102:
    int v79 = 1 << *(_DWORD *)(v3 + 48);
    if (v79 == 2)
    {
      unint64_t v80 = *(void **)a1[1];
      uint64_t v81 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      unint64_t v82 = (char *)v80[506];
      unint64_t v90 = v80[507];
      if ((unint64_t)v82 >= v90)
      {
        int v84 = (char *)v80[505];
        uint64_t v92 = (v82 - v84) >> 3;
        if ((unint64_t)(v92 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v93 = v90 - (void)v84;
        unint64_t v94 = (uint64_t)(v90 - (void)v84) >> 2;
        if (v94 <= v92 + 1) {
          unint64_t v94 = v92 + 1;
        }
        if (v93 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v95 = v94;
        }
        if (v95)
        {
          unint64_t v96 = (char *)sub_5714((uint64_t)(v80 + 507), v95);
          unint64_t v82 = (char *)v80[506];
          int v84 = (char *)v80[505];
        }
        else
        {
          unint64_t v96 = 0;
        }
        unint64_t v97 = &v96[8 * v92];
        unsigned int v98 = &v96[8 * v95];
        *(void *)unint64_t v97 = v81;
        unint64_t v91 = v97 + 8;
        while (v82 != v84)
        {
          uint64_t v100 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v97 - 1) = v100;
          v97 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v79 != 1) {
        goto LABEL_134;
      }
      unint64_t v80 = *(void **)a1[1];
      uint64_t v81 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      unint64_t v82 = (char *)v80[506];
      unint64_t v83 = v80[507];
      if ((unint64_t)v82 >= v83)
      {
        int v84 = (char *)v80[505];
        uint64_t v85 = (v82 - v84) >> 3;
        if ((unint64_t)(v85 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v86 = v83 - (void)v84;
        unint64_t v87 = (uint64_t)(v83 - (void)v84) >> 2;
        if (v87 <= v85 + 1) {
          unint64_t v87 = v85 + 1;
        }
        if (v86 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v87;
        }
        if (v88)
        {
          int v89 = (char *)sub_5714((uint64_t)(v80 + 507), v88);
          unint64_t v82 = (char *)v80[506];
          int v84 = (char *)v80[505];
        }
        else
        {
          int v89 = 0;
        }
        unint64_t v97 = &v89[8 * v85];
        unsigned int v98 = &v89[8 * v88];
        *(void *)unint64_t v97 = v81;
        unint64_t v91 = v97 + 8;
        while (v82 != v84)
        {
          uint64_t v99 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v97 - 1) = v99;
          v97 -= 8;
        }
LABEL_131:
        v80[505] = v97;
        v80[506] = v91;
        v80[507] = v98;
        if (v84) {
          operator delete(v84);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v82 = v81;
    unint64_t v91 = v82 + 8;
LABEL_133:
    v80[506] = v91;
LABEL_134:
    int v101 = 1 << *(_DWORD *)(v3 + 48);
    if (v101 == 2)
    {
      unsigned int v102 = *(void **)a1[1];
      uint64_t v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      unint64_t v104 = (char *)v102[509];
      unint64_t v112 = v102[510];
      if ((unint64_t)v104 >= v112)
      {
        int v106 = (char *)v102[508];
        uint64_t v114 = (v104 - v106) >> 3;
        if ((unint64_t)(v114 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v115 = v112 - (void)v106;
        unint64_t v116 = (uint64_t)(v112 - (void)v106) >> 2;
        if (v116 <= v114 + 1) {
          unint64_t v116 = v114 + 1;
        }
        if (v115 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v117 = v116;
        }
        if (v117)
        {
          uint64_t v118 = (char *)sub_5714((uint64_t)(v102 + 510), v117);
          unint64_t v104 = (char *)v102[509];
          int v106 = (char *)v102[508];
        }
        else
        {
          uint64_t v118 = 0;
        }
        unint64_t v119 = &v118[8 * v114];
        unint64_t v120 = &v118[8 * v117];
        *(void *)unint64_t v119 = v103;
        unint64_t v113 = v119 + 8;
        while (v104 != v106)
        {
          uint64_t v122 = *((void *)v104 - 1);
          v104 -= 8;
          *((void *)v119 - 1) = v122;
          v119 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v101 != 1) {
        goto LABEL_166;
      }
      unsigned int v102 = *(void **)a1[1];
      uint64_t v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      unint64_t v104 = (char *)v102[509];
      unint64_t v105 = v102[510];
      if ((unint64_t)v104 >= v105)
      {
        int v106 = (char *)v102[508];
        uint64_t v107 = (v104 - v106) >> 3;
        if ((unint64_t)(v107 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v108 = v105 - (void)v106;
        unint64_t v109 = (uint64_t)(v105 - (void)v106) >> 2;
        if (v109 <= v107 + 1) {
          unint64_t v109 = v107 + 1;
        }
        if (v108 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v110 = v109;
        }
        if (v110)
        {
          unint64_t v111 = (char *)sub_5714((uint64_t)(v102 + 510), v110);
          unint64_t v104 = (char *)v102[509];
          int v106 = (char *)v102[508];
        }
        else
        {
          unint64_t v111 = 0;
        }
        unint64_t v119 = &v111[8 * v107];
        unint64_t v120 = &v111[8 * v110];
        *(void *)unint64_t v119 = v103;
        unint64_t v113 = v119 + 8;
        while (v104 != v106)
        {
          uint64_t v121 = *((void *)v104 - 1);
          v104 -= 8;
          *((void *)v119 - 1) = v121;
          v119 -= 8;
        }
LABEL_163:
        v102[508] = v119;
        v102[509] = v113;
        v102[510] = v120;
        if (v106) {
          operator delete(v106);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v104 = v103;
    unint64_t v113 = v104 + 8;
LABEL_165:
    v102[509] = v113;
LABEL_166:
    int v123 = 1 << *(_DWORD *)(v3 + 48);
    if (v123 == 2)
    {
      unint64_t v124 = *(void **)a1[1];
      uint64_t v125 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      unint64_t v126 = (char *)v124[512];
      unint64_t v134 = v124[513];
      if ((unint64_t)v126 >= v134)
      {
        unint64_t v128 = (char *)v124[511];
        uint64_t v136 = (v126 - v128) >> 3;
        if ((unint64_t)(v136 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v137 = v134 - (void)v128;
        unint64_t v138 = (uint64_t)(v134 - (void)v128) >> 2;
        if (v138 <= v136 + 1) {
          unint64_t v138 = v136 + 1;
        }
        if (v137 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139)
        {
          uint64_t v140 = (char *)sub_5714((uint64_t)(v124 + 513), v139);
          unint64_t v126 = (char *)v124[512];
          unint64_t v128 = (char *)v124[511];
        }
        else
        {
          uint64_t v140 = 0;
        }
        unint64_t v141 = &v140[8 * v136];
        unint64_t v142 = &v140[8 * v139];
        *(void *)unint64_t v141 = v125;
        unint64_t v135 = v141 + 8;
        while (v126 != v128)
        {
          uint64_t v144 = *((void *)v126 - 1);
          v126 -= 8;
          *((void *)v141 - 1) = v144;
          v141 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v123 != 1) {
        goto LABEL_198;
      }
      unint64_t v124 = *(void **)a1[1];
      uint64_t v125 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      unint64_t v126 = (char *)v124[512];
      unint64_t v127 = v124[513];
      if ((unint64_t)v126 >= v127)
      {
        unint64_t v128 = (char *)v124[511];
        uint64_t v129 = (v126 - v128) >> 3;
        if ((unint64_t)(v129 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v130 = v127 - (void)v128;
        unint64_t v131 = (uint64_t)(v127 - (void)v128) >> 2;
        if (v131 <= v129 + 1) {
          unint64_t v131 = v129 + 1;
        }
        if (v130 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v132 = v131;
        }
        if (v132)
        {
          unint64_t v133 = (char *)sub_5714((uint64_t)(v124 + 513), v132);
          unint64_t v126 = (char *)v124[512];
          unint64_t v128 = (char *)v124[511];
        }
        else
        {
          unint64_t v133 = 0;
        }
        unint64_t v141 = &v133[8 * v129];
        unint64_t v142 = &v133[8 * v132];
        *(void *)unint64_t v141 = v125;
        unint64_t v135 = v141 + 8;
        while (v126 != v128)
        {
          uint64_t v143 = *((void *)v126 - 1);
          v126 -= 8;
          *((void *)v141 - 1) = v143;
          v141 -= 8;
        }
LABEL_195:
        v124[511] = v141;
        v124[512] = v135;
        v124[513] = v142;
        if (v128) {
          operator delete(v128);
        }
        goto LABEL_197;
      }
    }
    *(void *)unint64_t v126 = v125;
    unint64_t v135 = v126 + 8;
LABEL_197:
    v124[512] = v135;
LABEL_198:
    int v145 = 1 << *(_DWORD *)(v3 + 48);
    if (v145 == 2)
    {
      unint64_t v146 = *(void **)a1[1];
      uint64_t v147 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      unint64_t v148 = (uint64_t *)v146[515];
      unint64_t v156 = v146[516];
      if ((unint64_t)v148 >= v156)
      {
        uint64_t v150 = (uint64_t *)v146[514];
        uint64_t v158 = v148 - v150;
        if ((unint64_t)(v158 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v159 = v156 - (void)v150;
        unint64_t v160 = (uint64_t)(v156 - (void)v150) >> 2;
        if (v160 <= v158 + 1) {
          unint64_t v160 = v158 + 1;
        }
        if (v159 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v160;
        }
        if (v161)
        {
          unsigned int v162 = (char *)sub_5714((uint64_t)(v146 + 516), v161);
          unint64_t v148 = (uint64_t *)v146[515];
          uint64_t v150 = (uint64_t *)v146[514];
        }
        else
        {
          unsigned int v162 = 0;
        }
        unint64_t v163 = (uint64_t *)&v162[8 * v158];
        unint64_t v164 = &v162[8 * v161];
        *unint64_t v163 = v147;
        unint64_t v157 = v163 + 1;
        while (v148 != v150)
        {
          uint64_t v166 = *--v148;
          *--unint64_t v163 = v166;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v145 != 1) {
        goto LABEL_230;
      }
      unint64_t v146 = *(void **)a1[1];
      uint64_t v147 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      unint64_t v148 = (uint64_t *)v146[515];
      unint64_t v149 = v146[516];
      if ((unint64_t)v148 >= v149)
      {
        uint64_t v150 = (uint64_t *)v146[514];
        uint64_t v151 = v148 - v150;
        if ((unint64_t)(v151 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v152 = v149 - (void)v150;
        unint64_t v153 = (uint64_t)(v149 - (void)v150) >> 2;
        if (v153 <= v151 + 1) {
          unint64_t v153 = v151 + 1;
        }
        if (v152 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v154 = v153;
        }
        if (v154)
        {
          unint64_t v155 = (char *)sub_5714((uint64_t)(v146 + 516), v154);
          unint64_t v148 = (uint64_t *)v146[515];
          uint64_t v150 = (uint64_t *)v146[514];
        }
        else
        {
          unint64_t v155 = 0;
        }
        unint64_t v163 = (uint64_t *)&v155[8 * v151];
        unint64_t v164 = &v155[8 * v154];
        *unint64_t v163 = v147;
        unint64_t v157 = v163 + 1;
        while (v148 != v150)
        {
          uint64_t v165 = *--v148;
          *--unint64_t v163 = v165;
        }
LABEL_227:
        v146[514] = v163;
        v146[515] = v157;
        v146[516] = v164;
        if (v150) {
          operator delete(v150);
        }
        goto LABEL_229;
      }
    }
    *unint64_t v148 = v147;
    unint64_t v157 = v148 + 1;
LABEL_229:
    v146[515] = v157;
LABEL_230:
    int v167 = 1 << *(_DWORD *)(v3 + 48);
    if (v167 == 2)
    {
      unint64_t v168 = *(void **)a1[1];
      uint64_t v169 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      int v170 = (char *)v168[518];
      unint64_t v178 = v168[519];
      if ((unint64_t)v170 >= v178)
      {
        unsigned int v172 = (char *)v168[517];
        uint64_t v180 = (v170 - v172) >> 3;
        if ((unint64_t)(v180 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v181 = v178 - (void)v172;
        unint64_t v182 = (uint64_t)(v178 - (void)v172) >> 2;
        if (v182 <= v180 + 1) {
          unint64_t v182 = v180 + 1;
        }
        if (v181 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v183 = v182;
        }
        if (v183)
        {
          unint64_t v184 = (char *)sub_5714((uint64_t)(v168 + 519), v183);
          int v170 = (char *)v168[518];
          unsigned int v172 = (char *)v168[517];
        }
        else
        {
          unint64_t v184 = 0;
        }
        unsigned int v185 = &v184[8 * v180];
        unint64_t v186 = &v184[8 * v183];
        *(void *)unsigned int v185 = v169;
        unsigned int v179 = v185 + 8;
        while (v170 != v172)
        {
          uint64_t v188 = *((void *)v170 - 1);
          v170 -= 8;
          *((void *)v185 - 1) = v188;
          v185 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v167 != 1) {
        goto LABEL_262;
      }
      unint64_t v168 = *(void **)a1[1];
      uint64_t v169 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      int v170 = (char *)v168[518];
      unint64_t v171 = v168[519];
      if ((unint64_t)v170 >= v171)
      {
        unsigned int v172 = (char *)v168[517];
        uint64_t v173 = (v170 - v172) >> 3;
        if ((unint64_t)(v173 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v174 = v171 - (void)v172;
        unint64_t v175 = (uint64_t)(v171 - (void)v172) >> 2;
        if (v175 <= v173 + 1) {
          unint64_t v175 = v173 + 1;
        }
        if (v174 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v176 = v175;
        }
        if (v176)
        {
          unsigned int v177 = (char *)sub_5714((uint64_t)(v168 + 519), v176);
          int v170 = (char *)v168[518];
          unsigned int v172 = (char *)v168[517];
        }
        else
        {
          unsigned int v177 = 0;
        }
        unsigned int v185 = &v177[8 * v173];
        unint64_t v186 = &v177[8 * v176];
        *(void *)unsigned int v185 = v169;
        unsigned int v179 = v185 + 8;
        while (v170 != v172)
        {
          uint64_t v187 = *((void *)v170 - 1);
          v170 -= 8;
          *((void *)v185 - 1) = v187;
          v185 -= 8;
        }
LABEL_259:
        v168[517] = v185;
        v168[518] = v179;
        v168[519] = v186;
        if (v172) {
          operator delete(v172);
        }
        goto LABEL_261;
      }
    }
    *(void *)int v170 = v169;
    unsigned int v179 = v170 + 8;
LABEL_261:
    v168[518] = v179;
LABEL_262:
    int v189 = 1 << *(_DWORD *)(v3 + 48);
    if (v189 == 2)
    {
      int v190 = *(void **)a1[1];
      uint64_t v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      unint64_t v192 = (char *)v190[521];
      unint64_t v200 = v190[522];
      if ((unint64_t)v192 >= v200)
      {
        unsigned __int16 v194 = (char *)v190[520];
        uint64_t v202 = (v192 - v194) >> 3;
        if ((unint64_t)(v202 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v203 = v200 - (void)v194;
        unint64_t v204 = (uint64_t)(v200 - (void)v194) >> 2;
        if (v204 <= v202 + 1) {
          unint64_t v204 = v202 + 1;
        }
        if (v203 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v205 = v204;
        }
        if (v205)
        {
          uint64_t v206 = (char *)sub_5714((uint64_t)(v190 + 522), v205);
          unint64_t v192 = (char *)v190[521];
          unsigned __int16 v194 = (char *)v190[520];
        }
        else
        {
          uint64_t v206 = 0;
        }
        unint64_t v207 = &v206[8 * v202];
        unsigned int v208 = &v206[8 * v205];
        *(void *)unint64_t v207 = v191;
        int v201 = v207 + 8;
        while (v192 != v194)
        {
          uint64_t v210 = *((void *)v192 - 1);
          v192 -= 8;
          *((void *)v207 - 1) = v210;
          v207 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v189 != 1) {
        goto LABEL_294;
      }
      int v190 = *(void **)a1[1];
      uint64_t v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      unint64_t v192 = (char *)v190[521];
      unint64_t v193 = v190[522];
      if ((unint64_t)v192 >= v193)
      {
        unsigned __int16 v194 = (char *)v190[520];
        uint64_t v195 = (v192 - v194) >> 3;
        if ((unint64_t)(v195 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v196 = v193 - (void)v194;
        unint64_t v197 = (uint64_t)(v193 - (void)v194) >> 2;
        if (v197 <= v195 + 1) {
          unint64_t v197 = v195 + 1;
        }
        if (v196 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v198 = v197;
        }
        if (v198)
        {
          unint64_t v199 = (char *)sub_5714((uint64_t)(v190 + 522), v198);
          unint64_t v192 = (char *)v190[521];
          unsigned __int16 v194 = (char *)v190[520];
        }
        else
        {
          unint64_t v199 = 0;
        }
        unint64_t v207 = &v199[8 * v195];
        unsigned int v208 = &v199[8 * v198];
        *(void *)unint64_t v207 = v191;
        int v201 = v207 + 8;
        while (v192 != v194)
        {
          uint64_t v209 = *((void *)v192 - 1);
          v192 -= 8;
          *((void *)v207 - 1) = v209;
          v207 -= 8;
        }
LABEL_291:
        v190[520] = v207;
        v190[521] = v201;
        v190[522] = v208;
        if (v194) {
          operator delete(v194);
        }
        goto LABEL_293;
      }
    }
    *(void *)unint64_t v192 = v191;
    int v201 = v192 + 8;
LABEL_293:
    v190[521] = v201;
LABEL_294:
    int v211 = 1 << *(_DWORD *)(v3 + 48);
    if (v211 == 2)
    {
      unsigned __int16 v212 = *(void **)a1[1];
      uint64_t v213 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      unint64_t v214 = (char *)v212[524];
      unint64_t v222 = v212[525];
      if ((unint64_t)v214 >= v222)
      {
        unint64_t v216 = (char *)v212[523];
        uint64_t v224 = (v214 - v216) >> 3;
        if ((unint64_t)(v224 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v225 = v222 - (void)v216;
        unint64_t v226 = (uint64_t)(v222 - (void)v216) >> 2;
        if (v226 <= v224 + 1) {
          unint64_t v226 = v224 + 1;
        }
        if (v225 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v227 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v227 = v226;
        }
        if (v227)
        {
          char v228 = (char *)sub_5714((uint64_t)(v212 + 525), v227);
          unint64_t v214 = (char *)v212[524];
          unint64_t v216 = (char *)v212[523];
        }
        else
        {
          char v228 = 0;
        }
        char v229 = &v228[8 * v224];
        unint64_t v230 = &v228[8 * v227];
        *(void *)char v229 = v213;
        unint64_t v223 = v229 + 8;
        while (v214 != v216)
        {
          uint64_t v232 = *((void *)v214 - 1);
          v214 -= 8;
          *((void *)v229 - 1) = v232;
          v229 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v211 != 1) {
        goto LABEL_326;
      }
      unsigned __int16 v212 = *(void **)a1[1];
      uint64_t v213 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      unint64_t v214 = (char *)v212[524];
      unint64_t v215 = v212[525];
      if ((unint64_t)v214 >= v215)
      {
        unint64_t v216 = (char *)v212[523];
        uint64_t v217 = (v214 - v216) >> 3;
        if ((unint64_t)(v217 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v218 = v215 - (void)v216;
        unint64_t v219 = (uint64_t)(v215 - (void)v216) >> 2;
        if (v219 <= v217 + 1) {
          unint64_t v219 = v217 + 1;
        }
        if (v218 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v220 = v219;
        }
        if (v220)
        {
          unsigned int v221 = (char *)sub_5714((uint64_t)(v212 + 525), v220);
          unint64_t v214 = (char *)v212[524];
          unint64_t v216 = (char *)v212[523];
        }
        else
        {
          unsigned int v221 = 0;
        }
        char v229 = &v221[8 * v217];
        unint64_t v230 = &v221[8 * v220];
        *(void *)char v229 = v213;
        unint64_t v223 = v229 + 8;
        while (v214 != v216)
        {
          uint64_t v231 = *((void *)v214 - 1);
          v214 -= 8;
          *((void *)v229 - 1) = v231;
          v229 -= 8;
        }
LABEL_323:
        v212[523] = v229;
        v212[524] = v223;
        v212[525] = v230;
        if (v216) {
          operator delete(v216);
        }
        goto LABEL_325;
      }
    }
    *(void *)unint64_t v214 = v213;
    unint64_t v223 = v214 + 8;
LABEL_325:
    v212[524] = v223;
LABEL_326:
    int v233 = 1 << *(_DWORD *)(v3 + 48);
    if (v233 == 2)
    {
      int v234 = *(void **)a1[1];
      uint64_t v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      unint64_t v236 = (char *)v234[527];
      unint64_t v244 = v234[528];
      if ((unint64_t)v236 >= v244)
      {
        unint64_t v238 = (char *)v234[526];
        uint64_t v246 = (v236 - v238) >> 3;
        if ((unint64_t)(v246 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v247 = v244 - (void)v238;
        unint64_t v248 = (uint64_t)(v244 - (void)v238) >> 2;
        if (v248 <= v246 + 1) {
          unint64_t v248 = v246 + 1;
        }
        if (v247 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v249 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v249 = v248;
        }
        if (v249)
        {
          unint64_t v250 = (char *)sub_5714((uint64_t)(v234 + 528), v249);
          unint64_t v236 = (char *)v234[527];
          unint64_t v238 = (char *)v234[526];
        }
        else
        {
          unint64_t v250 = 0;
        }
        unint64_t v251 = &v250[8 * v246];
        unsigned int v252 = &v250[8 * v249];
        *(void *)unint64_t v251 = v235;
        unint64_t v245 = v251 + 8;
        while (v236 != v238)
        {
          uint64_t v254 = *((void *)v236 - 1);
          v236 -= 8;
          *((void *)v251 - 1) = v254;
          v251 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v233 != 1) {
        goto LABEL_358;
      }
      int v234 = *(void **)a1[1];
      uint64_t v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      unint64_t v236 = (char *)v234[527];
      unint64_t v237 = v234[528];
      if ((unint64_t)v236 >= v237)
      {
        unint64_t v238 = (char *)v234[526];
        uint64_t v239 = (v236 - v238) >> 3;
        if ((unint64_t)(v239 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v240 = v237 - (void)v238;
        unint64_t v241 = (uint64_t)(v237 - (void)v238) >> 2;
        if (v241 <= v239 + 1) {
          unint64_t v241 = v239 + 1;
        }
        if (v240 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v242 = v241;
        }
        if (v242)
        {
          unint64_t v243 = (char *)sub_5714((uint64_t)(v234 + 528), v242);
          unint64_t v236 = (char *)v234[527];
          unint64_t v238 = (char *)v234[526];
        }
        else
        {
          unint64_t v243 = 0;
        }
        unint64_t v251 = &v243[8 * v239];
        unsigned int v252 = &v243[8 * v242];
        *(void *)unint64_t v251 = v235;
        unint64_t v245 = v251 + 8;
        while (v236 != v238)
        {
          uint64_t v253 = *((void *)v236 - 1);
          v236 -= 8;
          *((void *)v251 - 1) = v253;
          v251 -= 8;
        }
LABEL_355:
        v234[526] = v251;
        v234[527] = v245;
        v234[528] = v252;
        if (v238) {
          operator delete(v238);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v236 = v235;
    unint64_t v245 = v236 + 8;
LABEL_357:
    v234[527] = v245;
LABEL_358:
    int v255 = 1 << *(_DWORD *)(v3 + 48);
    if (v255 == 2)
    {
      unint64_t v256 = *(void **)a1[1];
      uint64_t v257 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
      int v258 = (char *)v256[530];
      unint64_t v266 = v256[531];
      if ((unint64_t)v258 >= v266)
      {
        unint64_t v260 = (char *)v256[529];
        uint64_t v268 = (v258 - v260) >> 3;
        if ((unint64_t)(v268 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v269 = v266 - (void)v260;
        unint64_t v270 = (uint64_t)(v266 - (void)v260) >> 2;
        if (v270 <= v268 + 1) {
          unint64_t v270 = v268 + 1;
        }
        if (v269 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v271 = v270;
        }
        if (v271)
        {
          unint64_t v272 = (char *)sub_5714((uint64_t)(v256 + 531), v271);
          int v258 = (char *)v256[530];
          unint64_t v260 = (char *)v256[529];
        }
        else
        {
          unint64_t v272 = 0;
        }
        unsigned int v273 = &v272[8 * v268];
        unint64_t v274 = &v272[8 * v271];
        *(void *)unsigned int v273 = v257;
        unint64_t v267 = v273 + 8;
        while (v258 != v260)
        {
          uint64_t v276 = *((void *)v258 - 1);
          v258 -= 8;
          *((void *)v273 - 1) = v276;
          v273 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v255 != 1) {
        goto LABEL_390;
      }
      unint64_t v256 = *(void **)a1[1];
      uint64_t v257 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
      int v258 = (char *)v256[530];
      unint64_t v259 = v256[531];
      if ((unint64_t)v258 >= v259)
      {
        unint64_t v260 = (char *)v256[529];
        uint64_t v261 = (v258 - v260) >> 3;
        if ((unint64_t)(v261 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v262 = v259 - (void)v260;
        unint64_t v263 = (uint64_t)(v259 - (void)v260) >> 2;
        if (v263 <= v261 + 1) {
          unint64_t v263 = v261 + 1;
        }
        if (v262 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v264 = v263;
        }
        if (v264)
        {
          unint64_t v265 = (char *)sub_5714((uint64_t)(v256 + 531), v264);
          int v258 = (char *)v256[530];
          unint64_t v260 = (char *)v256[529];
        }
        else
        {
          unint64_t v265 = 0;
        }
        unsigned int v273 = &v265[8 * v261];
        unint64_t v274 = &v265[8 * v264];
        *(void *)unsigned int v273 = v257;
        unint64_t v267 = v273 + 8;
        while (v258 != v260)
        {
          uint64_t v275 = *((void *)v258 - 1);
          v258 -= 8;
          *((void *)v273 - 1) = v275;
          v273 -= 8;
        }
LABEL_387:
        v256[529] = v273;
        v256[530] = v267;
        v256[531] = v274;
        if (v260) {
          operator delete(v260);
        }
        goto LABEL_389;
      }
    }
    *(void *)int v258 = v257;
    unint64_t v267 = v258 + 8;
LABEL_389:
    v256[530] = v267;
LABEL_390:
    int v277 = 1 << *(_DWORD *)(v3 + 48);
    if (v277 == 2)
    {
      unint64_t v278 = *(void **)a1[1];
      uint64_t v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      unint64_t v280 = (char *)v278[533];
      unint64_t v288 = v278[534];
      if ((unint64_t)v280 >= v288)
      {
        int v282 = (char *)v278[532];
        uint64_t v290 = (v280 - v282) >> 3;
        if ((unint64_t)(v290 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v291 = v288 - (void)v282;
        unint64_t v292 = (uint64_t)(v288 - (void)v282) >> 2;
        if (v292 <= v290 + 1) {
          unint64_t v292 = v290 + 1;
        }
        if (v291 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v293 = v292;
        }
        if (v293)
        {
          unsigned int v294 = (char *)sub_5714((uint64_t)(v278 + 534), v293);
          unint64_t v280 = (char *)v278[533];
          int v282 = (char *)v278[532];
        }
        else
        {
          unsigned int v294 = 0;
        }
        int v295 = &v294[8 * v290];
        unint64_t v296 = &v294[8 * v293];
        *(void *)int v295 = v279;
        unint64_t v289 = v295 + 8;
        while (v280 != v282)
        {
          uint64_t v298 = *((void *)v280 - 1);
          v280 -= 8;
          *((void *)v295 - 1) = v298;
          v295 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v277 != 1) {
        goto LABEL_422;
      }
      unint64_t v278 = *(void **)a1[1];
      uint64_t v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      unint64_t v280 = (char *)v278[533];
      unint64_t v281 = v278[534];
      if ((unint64_t)v280 >= v281)
      {
        int v282 = (char *)v278[532];
        uint64_t v283 = (v280 - v282) >> 3;
        if ((unint64_t)(v283 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v284 = v281 - (void)v282;
        unint64_t v285 = (uint64_t)(v281 - (void)v282) >> 2;
        if (v285 <= v283 + 1) {
          unint64_t v285 = v283 + 1;
        }
        if (v284 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v286 = v285;
        }
        if (v286)
        {
          int v287 = (char *)sub_5714((uint64_t)(v278 + 534), v286);
          unint64_t v280 = (char *)v278[533];
          int v282 = (char *)v278[532];
        }
        else
        {
          int v287 = 0;
        }
        int v295 = &v287[8 * v283];
        unint64_t v296 = &v287[8 * v286];
        *(void *)int v295 = v279;
        unint64_t v289 = v295 + 8;
        while (v280 != v282)
        {
          uint64_t v297 = *((void *)v280 - 1);
          v280 -= 8;
          *((void *)v295 - 1) = v297;
          v295 -= 8;
        }
LABEL_419:
        v278[532] = v295;
        v278[533] = v289;
        v278[534] = v296;
        if (v282) {
          operator delete(v282);
        }
        goto LABEL_421;
      }
    }
    *(void *)unint64_t v280 = v279;
    unint64_t v289 = v280 + 8;
LABEL_421:
    v278[533] = v289;
LABEL_422:
    int v299 = 1 << *(_DWORD *)(v3 + 48);
    if (v299 == 2)
    {
      unint64_t v300 = *(void **)a1[1];
      uint64_t v301 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      int v302 = (uint64_t *)v300[536];
      unint64_t v310 = v300[537];
      if ((unint64_t)v302 >= v310)
      {
        unint64_t v304 = (uint64_t *)v300[535];
        uint64_t v312 = v302 - v304;
        if ((unint64_t)(v312 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v313 = v310 - (void)v304;
        unint64_t v314 = (uint64_t)(v310 - (void)v304) >> 2;
        if (v314 <= v312 + 1) {
          unint64_t v314 = v312 + 1;
        }
        if (v313 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v315 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v315 = v314;
        }
        if (v315)
        {
          unint64_t v316 = (char *)sub_5714((uint64_t)(v300 + 537), v315);
          int v302 = (uint64_t *)v300[536];
          unint64_t v304 = (uint64_t *)v300[535];
        }
        else
        {
          unint64_t v316 = 0;
        }
        unint64_t v317 = (uint64_t *)&v316[8 * v312];
        unint64_t v318 = &v316[8 * v315];
        *unint64_t v317 = v301;
        unint64_t v311 = v317 + 1;
        while (v302 != v304)
        {
          uint64_t v320 = *--v302;
          *--unint64_t v317 = v320;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v299 != 1) {
        goto LABEL_454;
      }
      unint64_t v300 = *(void **)a1[1];
      uint64_t v301 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      int v302 = (uint64_t *)v300[536];
      unint64_t v303 = v300[537];
      if ((unint64_t)v302 >= v303)
      {
        unint64_t v304 = (uint64_t *)v300[535];
        uint64_t v305 = v302 - v304;
        if ((unint64_t)(v305 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v306 = v303 - (void)v304;
        unint64_t v307 = (uint64_t)(v303 - (void)v304) >> 2;
        if (v307 <= v305 + 1) {
          unint64_t v307 = v305 + 1;
        }
        if (v306 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v308 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v308 = v307;
        }
        if (v308)
        {
          unsigned int v309 = (char *)sub_5714((uint64_t)(v300 + 537), v308);
          int v302 = (uint64_t *)v300[536];
          unint64_t v304 = (uint64_t *)v300[535];
        }
        else
        {
          unsigned int v309 = 0;
        }
        unint64_t v317 = (uint64_t *)&v309[8 * v305];
        unint64_t v318 = &v309[8 * v308];
        *unint64_t v317 = v301;
        unint64_t v311 = v317 + 1;
        while (v302 != v304)
        {
          uint64_t v319 = *--v302;
          *--unint64_t v317 = v319;
        }
LABEL_451:
        v300[535] = v317;
        v300[536] = v311;
        v300[537] = v318;
        if (v304) {
          operator delete(v304);
        }
        goto LABEL_453;
      }
    }
    *int v302 = v301;
    unint64_t v311 = v302 + 1;
LABEL_453:
    v300[536] = v311;
LABEL_454:
    int v321 = 1 << *(_DWORD *)(v3 + 48);
    if (v321 == 2)
    {
      unint64_t v322 = *(void **)a1[1];
      uint64_t v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      unint64_t v324 = (char *)v322[539];
      unint64_t v332 = v322[540];
      if ((unint64_t)v324 >= v332)
      {
        int v326 = (char *)v322[538];
        uint64_t v334 = (v324 - v326) >> 3;
        if ((unint64_t)(v334 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v335 = v332 - (void)v326;
        unint64_t v336 = (uint64_t)(v332 - (void)v326) >> 2;
        if (v336 <= v334 + 1) {
          unint64_t v336 = v334 + 1;
        }
        if (v335 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v337 = v336;
        }
        if (v337)
        {
          unint64_t v338 = (char *)sub_5714((uint64_t)(v322 + 540), v337);
          unint64_t v324 = (char *)v322[539];
          int v326 = (char *)v322[538];
        }
        else
        {
          unint64_t v338 = 0;
        }
        unsigned int v339 = &v338[8 * v334];
        unint64_t v340 = &v338[8 * v337];
        *(void *)unsigned int v339 = v323;
        uint64_t v333 = v339 + 8;
        while (v324 != v326)
        {
          uint64_t v342 = *((void *)v324 - 1);
          v324 -= 8;
          *((void *)v339 - 1) = v342;
          v339 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v321 != 1) {
        goto LABEL_486;
      }
      unint64_t v322 = *(void **)a1[1];
      uint64_t v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      unint64_t v324 = (char *)v322[539];
      unint64_t v325 = v322[540];
      if ((unint64_t)v324 >= v325)
      {
        int v326 = (char *)v322[538];
        uint64_t v327 = (v324 - v326) >> 3;
        if ((unint64_t)(v327 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v328 = v325 - (void)v326;
        unint64_t v329 = (uint64_t)(v325 - (void)v326) >> 2;
        if (v329 <= v327 + 1) {
          unint64_t v329 = v327 + 1;
        }
        if (v328 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v330 = v329;
        }
        if (v330)
        {
          unsigned int v331 = (char *)sub_5714((uint64_t)(v322 + 540), v330);
          unint64_t v324 = (char *)v322[539];
          int v326 = (char *)v322[538];
        }
        else
        {
          unsigned int v331 = 0;
        }
        unsigned int v339 = &v331[8 * v327];
        unint64_t v340 = &v331[8 * v330];
        *(void *)unsigned int v339 = v323;
        uint64_t v333 = v339 + 8;
        while (v324 != v326)
        {
          uint64_t v341 = *((void *)v324 - 1);
          v324 -= 8;
          *((void *)v339 - 1) = v341;
          v339 -= 8;
        }
LABEL_483:
        v322[538] = v339;
        v322[539] = v333;
        v322[540] = v340;
        if (v326) {
          operator delete(v326);
        }
        goto LABEL_485;
      }
    }
    *(void *)unint64_t v324 = v323;
    uint64_t v333 = v324 + 8;
LABEL_485:
    v322[539] = v333;
LABEL_486:
    int v343 = 1 << *(_DWORD *)(v3 + 48);
    if (v343 == 2)
    {
      unint64_t v344 = *(void **)a1[1];
      uint64_t v345 = *(_WORD *)(a1[2] + 50) & 0x7FF;
      unsigned int v346 = (char *)v344[542];
      unint64_t v354 = v344[543];
      if ((unint64_t)v346 >= v354)
      {
        unint64_t v348 = (char *)v344[541];
        uint64_t v356 = (v346 - v348) >> 3;
        if ((unint64_t)(v356 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v357 = v354 - (void)v348;
        unint64_t v358 = (uint64_t)(v354 - (void)v348) >> 2;
        if (v358 <= v356 + 1) {
          unint64_t v358 = v356 + 1;
        }
        if (v357 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v359 = v358;
        }
        if (v359)
        {
          int v360 = (char *)sub_5714((uint64_t)(v344 + 543), v359);
          unsigned int v346 = (char *)v344[542];
          unint64_t v348 = (char *)v344[541];
        }
        else
        {
          int v360 = 0;
        }
        int v361 = &v360[8 * v356];
        unint64_t v362 = &v360[8 * v359];
        *(void *)int v361 = v345;
        int v355 = v361 + 8;
        while (v346 != v348)
        {
          uint64_t v364 = *((void *)v346 - 1);
          v346 -= 8;
          *((void *)v361 - 1) = v364;
          v361 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v343 != 1) {
        goto LABEL_518;
      }
      unint64_t v344 = *(void **)a1[1];
      uint64_t v345 = *(_WORD *)(a1[2] + 50) & 0x7FF;
      unsigned int v346 = (char *)v344[542];
      unint64_t v347 = v344[543];
      if ((unint64_t)v346 >= v347)
      {
        unint64_t v348 = (char *)v344[541];
        uint64_t v349 = (v346 - v348) >> 3;
        if ((unint64_t)(v349 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v350 = v347 - (void)v348;
        unint64_t v351 = (uint64_t)(v347 - (void)v348) >> 2;
        if (v351 <= v349 + 1) {
          unint64_t v351 = v349 + 1;
        }
        if (v350 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v352 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v352 = v351;
        }
        if (v352)
        {
          unint64_t v353 = (char *)sub_5714((uint64_t)(v344 + 543), v352);
          unsigned int v346 = (char *)v344[542];
          unint64_t v348 = (char *)v344[541];
        }
        else
        {
          unint64_t v353 = 0;
        }
        int v361 = &v353[8 * v349];
        unint64_t v362 = &v353[8 * v352];
        *(void *)int v361 = v345;
        int v355 = v361 + 8;
        while (v346 != v348)
        {
          uint64_t v363 = *((void *)v346 - 1);
          v346 -= 8;
          *((void *)v361 - 1) = v363;
          v361 -= 8;
        }
LABEL_515:
        v344[541] = v361;
        v344[542] = v355;
        v344[543] = v362;
        if (v348) {
          operator delete(v348);
        }
        goto LABEL_517;
      }
    }
    *(void *)unsigned int v346 = v345;
    int v355 = v346 + 8;
LABEL_517:
    v344[542] = v355;
LABEL_518:
    int v365 = 1 << *(_DWORD *)(v3 + 48);
    if (v365 == 2)
    {
      unint64_t v366 = *(void **)a1[1];
      uint64_t v367 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      unint64_t v368 = (char *)v366[545];
      unint64_t v376 = v366[546];
      if ((unint64_t)v368 >= v376)
      {
        unint64_t v370 = (char *)v366[544];
        uint64_t v378 = (v368 - v370) >> 3;
        if ((unint64_t)(v378 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v379 = v376 - (void)v370;
        unint64_t v380 = (uint64_t)(v376 - (void)v370) >> 2;
        if (v380 <= v378 + 1) {
          unint64_t v380 = v378 + 1;
        }
        if (v379 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v381 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v381 = v380;
        }
        if (v381)
        {
          unint64_t v382 = (char *)sub_5714((uint64_t)(v366 + 546), v381);
          unint64_t v368 = (char *)v366[545];
          unint64_t v370 = (char *)v366[544];
        }
        else
        {
          unint64_t v382 = 0;
        }
        unint64_t v383 = &v382[8 * v378];
        unint64_t v384 = &v382[8 * v381];
        *(void *)unint64_t v383 = v367;
        unsigned int v377 = v383 + 8;
        while (v368 != v370)
        {
          uint64_t v386 = *((void *)v368 - 1);
          v368 -= 8;
          *((void *)v383 - 1) = v386;
          v383 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v365 != 1) {
        goto LABEL_550;
      }
      unint64_t v366 = *(void **)a1[1];
      uint64_t v367 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      unint64_t v368 = (char *)v366[545];
      unint64_t v369 = v366[546];
      if ((unint64_t)v368 >= v369)
      {
        unint64_t v370 = (char *)v366[544];
        uint64_t v371 = (v368 - v370) >> 3;
        if ((unint64_t)(v371 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v372 = v369 - (void)v370;
        unint64_t v373 = (uint64_t)(v369 - (void)v370) >> 2;
        if (v373 <= v371 + 1) {
          unint64_t v373 = v371 + 1;
        }
        if (v372 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v374 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v374 = v373;
        }
        if (v374)
        {
          unint64_t v375 = (char *)sub_5714((uint64_t)(v366 + 546), v374);
          unint64_t v368 = (char *)v366[545];
          unint64_t v370 = (char *)v366[544];
        }
        else
        {
          unint64_t v375 = 0;
        }
        unint64_t v383 = &v375[8 * v371];
        unint64_t v384 = &v375[8 * v374];
        *(void *)unint64_t v383 = v367;
        unsigned int v377 = v383 + 8;
        while (v368 != v370)
        {
          uint64_t v385 = *((void *)v368 - 1);
          v368 -= 8;
          *((void *)v383 - 1) = v385;
          v383 -= 8;
        }
LABEL_547:
        v366[544] = v383;
        v366[545] = v377;
        v366[546] = v384;
        if (v370) {
          operator delete(v370);
        }
        goto LABEL_549;
      }
    }
    *(void *)unint64_t v368 = v367;
    unsigned int v377 = v368 + 8;
LABEL_549:
    v366[545] = v377;
LABEL_550:
    int v387 = 1 << *(_DWORD *)(v3 + 48);
    if (v387 == 2)
    {
      unint64_t v388 = *(void **)a1[1];
      uint64_t v389 = *(_WORD *)(a1[2] + 64) & 0x1FF;
      unint64_t v390 = (char *)v388[548];
      unint64_t v398 = v388[549];
      if ((unint64_t)v390 >= v398)
      {
        unint64_t v392 = (char *)v388[547];
        uint64_t v400 = (v390 - v392) >> 3;
        if ((unint64_t)(v400 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v401 = v398 - (void)v392;
        unint64_t v402 = (uint64_t)(v398 - (void)v392) >> 2;
        if (v402 <= v400 + 1) {
          unint64_t v402 = v400 + 1;
        }
        if (v401 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v403 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v403 = v402;
        }
        if (v403)
        {
          unint64_t v404 = (char *)sub_5714((uint64_t)(v388 + 549), v403);
          unint64_t v390 = (char *)v388[548];
          unint64_t v392 = (char *)v388[547];
        }
        else
        {
          unint64_t v404 = 0;
        }
        unsigned int v405 = &v404[8 * v400];
        unint64_t v406 = &v404[8 * v403];
        *(void *)unsigned int v405 = v389;
        unint64_t v399 = v405 + 8;
        while (v390 != v392)
        {
          uint64_t v408 = *((void *)v390 - 1);
          v390 -= 8;
          *((void *)v405 - 1) = v408;
          v405 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v387 != 1) {
        goto LABEL_582;
      }
      unint64_t v388 = *(void **)a1[1];
      uint64_t v389 = *(_WORD *)(a1[2] + 64) & 0x1FF;
      unint64_t v390 = (char *)v388[548];
      unint64_t v391 = v388[549];
      if ((unint64_t)v390 >= v391)
      {
        unint64_t v392 = (char *)v388[547];
        uint64_t v393 = (v390 - v392) >> 3;
        if ((unint64_t)(v393 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v394 = v391 - (void)v392;
        unint64_t v395 = (uint64_t)(v391 - (void)v392) >> 2;
        if (v395 <= v393 + 1) {
          unint64_t v395 = v393 + 1;
        }
        if (v394 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v396 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v396 = v395;
        }
        if (v396)
        {
          unsigned int v397 = (char *)sub_5714((uint64_t)(v388 + 549), v396);
          unint64_t v390 = (char *)v388[548];
          unint64_t v392 = (char *)v388[547];
        }
        else
        {
          unsigned int v397 = 0;
        }
        unsigned int v405 = &v397[8 * v393];
        unint64_t v406 = &v397[8 * v396];
        *(void *)unsigned int v405 = v389;
        unint64_t v399 = v405 + 8;
        while (v390 != v392)
        {
          uint64_t v407 = *((void *)v390 - 1);
          v390 -= 8;
          *((void *)v405 - 1) = v407;
          v405 -= 8;
        }
LABEL_579:
        v388[547] = v405;
        v388[548] = v399;
        v388[549] = v406;
        if (v392) {
          operator delete(v392);
        }
        goto LABEL_581;
      }
    }
    *(void *)unint64_t v390 = v389;
    unint64_t v399 = v390 + 8;
LABEL_581:
    v388[548] = v399;
LABEL_582:
    int v409 = 1 << *(_DWORD *)(v3 + 48);
    if (v409 == 2)
    {
      unint64_t v410 = *(void **)a1[1];
      uint64_t v411 = *(_WORD *)(a1[2] + 46) & 0x1FF;
      unint64_t v412 = (char *)v410[551];
      unint64_t v420 = v410[552];
      if ((unint64_t)v412 >= v420)
      {
        unint64_t v414 = (char *)v410[550];
        uint64_t v422 = (v412 - v414) >> 3;
        if ((unint64_t)(v422 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v423 = v420 - (void)v414;
        unint64_t v424 = (uint64_t)(v420 - (void)v414) >> 2;
        if (v424 <= v422 + 1) {
          unint64_t v424 = v422 + 1;
        }
        if (v423 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v425 = v424;
        }
        if (v425)
        {
          unint64_t v426 = (char *)sub_5714((uint64_t)(v410 + 552), v425);
          unint64_t v412 = (char *)v410[551];
          unint64_t v414 = (char *)v410[550];
        }
        else
        {
          unint64_t v426 = 0;
        }
        unint64_t v427 = &v426[8 * v422];
        unint64_t v428 = &v426[8 * v425];
        *(void *)unint64_t v427 = v411;
        unsigned int v421 = v427 + 8;
        while (v412 != v414)
        {
          uint64_t v430 = *((void *)v412 - 1);
          v412 -= 8;
          *((void *)v427 - 1) = v430;
          v427 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v409 != 1) {
        goto LABEL_614;
      }
      unint64_t v410 = *(void **)a1[1];
      uint64_t v411 = *(_WORD *)(a1[2] + 46) & 0x1FF;
      unint64_t v412 = (char *)v410[551];
      unint64_t v413 = v410[552];
      if ((unint64_t)v412 >= v413)
      {
        unint64_t v414 = (char *)v410[550];
        uint64_t v415 = (v412 - v414) >> 3;
        if ((unint64_t)(v415 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v416 = v413 - (void)v414;
        unint64_t v417 = (uint64_t)(v413 - (void)v414) >> 2;
        if (v417 <= v415 + 1) {
          unint64_t v417 = v415 + 1;
        }
        if (v416 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v418 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v418 = v417;
        }
        if (v418)
        {
          unint64_t v419 = (char *)sub_5714((uint64_t)(v410 + 552), v418);
          unint64_t v412 = (char *)v410[551];
          unint64_t v414 = (char *)v410[550];
        }
        else
        {
          unint64_t v419 = 0;
        }
        unint64_t v427 = &v419[8 * v415];
        unint64_t v428 = &v419[8 * v418];
        *(void *)unint64_t v427 = v411;
        unsigned int v421 = v427 + 8;
        while (v412 != v414)
        {
          uint64_t v429 = *((void *)v412 - 1);
          v412 -= 8;
          *((void *)v427 - 1) = v429;
          v427 -= 8;
        }
LABEL_611:
        v410[550] = v427;
        v410[551] = v421;
        v410[552] = v428;
        if (v414) {
          operator delete(v414);
        }
        goto LABEL_613;
      }
    }
    *(void *)unint64_t v412 = v411;
    unsigned int v421 = v412 + 8;
LABEL_613:
    v410[551] = v421;
LABEL_614:
    int v431 = 1 << *(_DWORD *)(v3 + 48);
    if (v431 == 2)
    {
      unint64_t v432 = *(void **)a1[1];
      uint64_t v433 = *(_WORD *)(a1[2] + 66) & 0x1FF;
      unint64_t v434 = (char *)v432[554];
      unint64_t v442 = v432[555];
      if ((unint64_t)v434 >= v442)
      {
        unint64_t v436 = (char *)v432[553];
        uint64_t v444 = (v434 - v436) >> 3;
        if ((unint64_t)(v444 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v445 = v442 - (void)v436;
        unint64_t v446 = (uint64_t)(v442 - (void)v436) >> 2;
        if (v446 <= v444 + 1) {
          unint64_t v446 = v444 + 1;
        }
        if (v445 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v447 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v447 = v446;
        }
        if (v447)
        {
          unint64_t v448 = (char *)sub_5714((uint64_t)(v432 + 555), v447);
          unint64_t v434 = (char *)v432[554];
          unint64_t v436 = (char *)v432[553];
        }
        else
        {
          unint64_t v448 = 0;
        }
        unsigned int v449 = &v448[8 * v444];
        unint64_t v450 = &v448[8 * v447];
        *(void *)unsigned int v449 = v433;
        unint64_t v443 = v449 + 8;
        while (v434 != v436)
        {
          uint64_t v452 = *((void *)v434 - 1);
          v434 -= 8;
          *((void *)v449 - 1) = v452;
          v449 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v431 != 1) {
        goto LABEL_646;
      }
      unint64_t v432 = *(void **)a1[1];
      uint64_t v433 = *(_WORD *)(a1[2] + 66) & 0x1FF;
      unint64_t v434 = (char *)v432[554];
      unint64_t v435 = v432[555];
      if ((unint64_t)v434 >= v435)
      {
        unint64_t v436 = (char *)v432[553];
        uint64_t v437 = (v434 - v436) >> 3;
        if ((unint64_t)(v437 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v438 = v435 - (void)v436;
        unint64_t v439 = (uint64_t)(v435 - (void)v436) >> 2;
        if (v439 <= v437 + 1) {
          unint64_t v439 = v437 + 1;
        }
        if (v438 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v440 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v440 = v439;
        }
        if (v440)
        {
          unsigned int v441 = (char *)sub_5714((uint64_t)(v432 + 555), v440);
          unint64_t v434 = (char *)v432[554];
          unint64_t v436 = (char *)v432[553];
        }
        else
        {
          unsigned int v441 = 0;
        }
        unsigned int v449 = &v441[8 * v437];
        unint64_t v450 = &v441[8 * v440];
        *(void *)unsigned int v449 = v433;
        unint64_t v443 = v449 + 8;
        while (v434 != v436)
        {
          uint64_t v451 = *((void *)v434 - 1);
          v434 -= 8;
          *((void *)v449 - 1) = v451;
          v449 -= 8;
        }
LABEL_643:
        v432[553] = v449;
        v432[554] = v443;
        v432[555] = v450;
        if (v436) {
          operator delete(v436);
        }
        goto LABEL_645;
      }
    }
    *(void *)unint64_t v434 = v433;
    unint64_t v443 = v434 + 8;
LABEL_645:
    v432[554] = v443;
LABEL_646:
    int v453 = 1 << *(_DWORD *)(v3 + 48);
    if (v453 == 2)
    {
      unint64_t v454 = *(void **)a1[1];
      uint64_t v455 = *(_WORD *)(a1[2] + 48) & 0x1FF;
      unint64_t v456 = (char *)v454[557];
      unint64_t v464 = v454[558];
      if ((unint64_t)v456 >= v464)
      {
        unint64_t v458 = (char *)v454[556];
        uint64_t v466 = (v456 - v458) >> 3;
        if ((unint64_t)(v466 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v467 = v464 - (void)v458;
        unint64_t v468 = (uint64_t)(v464 - (void)v458) >> 2;
        if (v468 <= v466 + 1) {
          unint64_t v468 = v466 + 1;
        }
        if (v467 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v469 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v469 = v468;
        }
        if (v469)
        {
          unint64_t v470 = (char *)sub_5714((uint64_t)(v454 + 558), v469);
          unint64_t v456 = (char *)v454[557];
          unint64_t v458 = (char *)v454[556];
        }
        else
        {
          unint64_t v470 = 0;
        }
        unint64_t v471 = &v470[8 * v466];
        unint64_t v472 = &v470[8 * v469];
        *(void *)unint64_t v471 = v455;
        unsigned int v465 = v471 + 8;
        while (v456 != v458)
        {
          uint64_t v474 = *((void *)v456 - 1);
          v456 -= 8;
          *((void *)v471 - 1) = v474;
          v471 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v453 != 1) {
        goto LABEL_678;
      }
      unint64_t v454 = *(void **)a1[1];
      uint64_t v455 = *(_WORD *)(a1[2] + 48) & 0x1FF;
      unint64_t v456 = (char *)v454[557];
      unint64_t v457 = v454[558];
      if ((unint64_t)v456 >= v457)
      {
        unint64_t v458 = (char *)v454[556];
        uint64_t v459 = (v456 - v458) >> 3;
        if ((unint64_t)(v459 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v460 = v457 - (void)v458;
        unint64_t v461 = (uint64_t)(v457 - (void)v458) >> 2;
        if (v461 <= v459 + 1) {
          unint64_t v461 = v459 + 1;
        }
        if (v460 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v462 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v462 = v461;
        }
        if (v462)
        {
          unint64_t v463 = (char *)sub_5714((uint64_t)(v454 + 558), v462);
          unint64_t v456 = (char *)v454[557];
          unint64_t v458 = (char *)v454[556];
        }
        else
        {
          unint64_t v463 = 0;
        }
        unint64_t v471 = &v463[8 * v459];
        unint64_t v472 = &v463[8 * v462];
        *(void *)unint64_t v471 = v455;
        unsigned int v465 = v471 + 8;
        while (v456 != v458)
        {
          uint64_t v473 = *((void *)v456 - 1);
          v456 -= 8;
          *((void *)v471 - 1) = v473;
          v471 -= 8;
        }
LABEL_675:
        v454[556] = v471;
        v454[557] = v465;
        v454[558] = v472;
        if (v458) {
          operator delete(v458);
        }
        goto LABEL_677;
      }
    }
    *(void *)unint64_t v456 = v455;
    unsigned int v465 = v456 + 8;
LABEL_677:
    v454[557] = v465;
LABEL_678:
    int v475 = 1 << *(_DWORD *)(v3 + 48);
    if (v475 == 2)
    {
      uint64_t v487 = a1[2];
      unsigned int v477 = *(void **)a1[1];
      unint64_t v478 = (unint64_t)*(unsigned int *)(v487 + 28) >> 18;
      unint64_t v479 = (unint64_t *)v477[560];
      unint64_t v488 = v477[561];
      if ((unint64_t)v479 >= v488)
      {
        unsigned int v481 = (unint64_t *)v477[559];
        uint64_t v490 = v479 - v481;
        if (!((unint64_t)(v490 + 1) >> 61))
        {
          unint64_t v491 = v488 - (void)v481;
          unint64_t v492 = (uint64_t)(v488 - (void)v481) >> 2;
          if (v492 <= v490 + 1) {
            unint64_t v492 = v490 + 1;
          }
          if (v491 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v493 = v492;
          }
          if (v493)
          {
            unint64_t v494 = (char *)sub_5714((uint64_t)(v477 + 561), v493);
            unint64_t v479 = (unint64_t *)v477[560];
            unsigned int v481 = (unint64_t *)v477[559];
          }
          else
          {
            unint64_t v494 = 0;
          }
          unsigned int v495 = (unint64_t *)&v494[8 * v490];
          unint64_t v496 = &v494[8 * v493];
          *unsigned int v495 = v478;
          unint64_t v489 = v495 + 1;
          while (v479 != v481)
          {
            unint64_t v498 = *--v479;
            *--unsigned int v495 = v498;
          }
          goto LABEL_707;
        }
LABEL_712:
        sub_566C();
      }
    }
    else
    {
      if (v475 != 1)
      {
LABEL_710:
        *a2 = 1;
        return;
      }
      uint64_t v476 = a1[2];
      unsigned int v477 = *(void **)a1[1];
      unint64_t v478 = (unint64_t)*(unsigned int *)(v476 + 28) >> 18;
      unint64_t v479 = (unint64_t *)v477[560];
      unint64_t v480 = v477[561];
      if ((unint64_t)v479 >= v480)
      {
        unsigned int v481 = (unint64_t *)v477[559];
        uint64_t v482 = v479 - v481;
        if (!((unint64_t)(v482 + 1) >> 61))
        {
          unint64_t v483 = v480 - (void)v481;
          unint64_t v484 = (uint64_t)(v480 - (void)v481) >> 2;
          if (v484 <= v482 + 1) {
            unint64_t v484 = v482 + 1;
          }
          if (v483 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v485 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v485 = v484;
          }
          if (v485)
          {
            int v486 = (char *)sub_5714((uint64_t)(v477 + 561), v485);
            unint64_t v479 = (unint64_t *)v477[560];
            unsigned int v481 = (unint64_t *)v477[559];
          }
          else
          {
            int v486 = 0;
          }
          unsigned int v495 = (unint64_t *)&v486[8 * v482];
          unint64_t v496 = &v486[8 * v485];
          *unsigned int v495 = v478;
          unint64_t v489 = v495 + 1;
          while (v479 != v481)
          {
            unint64_t v497 = *--v479;
            *--unsigned int v495 = v497;
          }
LABEL_707:
          v477[559] = v495;
          v477[560] = v489;
          v477[561] = v496;
          if (v481) {
            operator delete(v481);
          }
          goto LABEL_709;
        }
        goto LABEL_712;
      }
    }
    *unint64_t v479 = v478;
    unint64_t v489 = v479 + 1;
LABEL_709:
    v477[560] = v489;
    goto LABEL_710;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unsigned int v19 = (void *)*v18;
    *(void *)(v19[497] - 8) += *(_WORD *)(v17 + 58) & 0x3FFF;
    *(void *)(v19[500] - 8) += *(_WORD *)(v17 + 40) & 0x3FFF;
    *(void *)(v19[503] - 8) += *(_WORD *)(v17 + 60) & 0x3FFF;
    *(void *)(v19[506] - 8) += *(_WORD *)(v17 + 42) & 0x3FFF;
    *(void *)(v19[509] - 8) += *(_WORD *)(v17 + 62) & 0x3FFF;
    *(void *)(v19[512] - 8) += *(_WORD *)(v17 + 44) & 0x3FFF;
    *(void *)(v19[515] - 8) += *(_DWORD *)(v17 + 28) & 0x3FFFF;
    *(void *)(v19[518] - 8) += *(_WORD *)(v17 + 52) & 0x3FFF;
    *(void *)(v19[521] - 8) += *(_WORD *)(v17 + 34) & 0x3FFF;
    *(void *)(v19[524] - 8) += *(_WORD *)(v17 + 54) & 0x3FFF;
    uint64_t v20 = a1[2];
    uint64_t v21 = *(void **)a1[1];
    *(void *)(v21[527] - 8) += *(_WORD *)(v20 + 36) & 0x3FFF;
    *(void *)(v21[530] - 8) += *(_WORD *)(v20 + 56) & 0x3FFF;
    *(void *)(v21[533] - 8) += *(_WORD *)(v20 + 38) & 0x3FFF;
    *(void *)(v21[536] - 8) += *(_DWORD *)(v20 + 24) & 0x3FFFF;
    *(void *)(v21[539] - 8) += *(_WORD *)(v20 + 68) & 0x7FF;
    *(void *)(v21[542] - 8) += *(_WORD *)(v20 + 50) & 0x7FF;
    *(void *)(v21[545] - 8) += *(_WORD *)(v20 + 32) & 0x1FFF;
    *(void *)(v21[548] - 8) += *(_WORD *)(v20 + 64) & 0x1FF;
    *(void *)(v21[551] - 8) += *(_WORD *)(v20 + 46) & 0x1FF;
    *(void *)(v21[554] - 8) += *(_WORD *)(v20 + 66) & 0x1FF;
    uint64_t v22 = a1[2];
    __int16 v23 = (void *)*v18;
    *(void *)(v23[557] - 8) += *(_WORD *)(v22 + 48) & 0x1FF;
    *(void *)(v23[560] - 8) += (unint64_t)*(unsigned int *)(v22 + 28) >> 18;
  }
}

void sub_19C7E0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      unint64_t v8 = (uint64_t *)v6[593];
      unint64_t v19 = v6[594];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (uint64_t *)v6[592];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          uint8x8_t v25 = (char *)sub_5714((uint64_t)(v6 + 594), v24);
          unint64_t v8 = (uint64_t *)v6[593];
          uint64_t v10 = (uint64_t *)v6[592];
        }
        else
        {
          uint8x8_t v25 = 0;
        }
        uint64_t v26 = (uint64_t *)&v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *uint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--uint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      unint64_t v8 = (uint64_t *)v6[593];
      unint64_t v9 = v6[594];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (uint64_t *)v6[592];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 594), v14);
          unint64_t v8 = (uint64_t *)v6[593];
          uint64_t v10 = (uint64_t *)v6[592];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v26 = (uint64_t *)&v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *uint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--uint64_t v26 = v28;
        }
LABEL_35:
        v6[592] = v26;
        v6[593] = v20;
        v6[594] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *unint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[593] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      int v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      uint64_t v33 = (uint64_t *)v31[596];
      unint64_t v41 = v31[597];
      if ((unint64_t)v33 >= v41)
      {
        int v35 = (uint64_t *)v31[595];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          int v47 = (char *)sub_5714((uint64_t)(v31 + 597), v46);
          uint64_t v33 = (uint64_t *)v31[596];
          int v35 = (uint64_t *)v31[595];
        }
        else
        {
          int v47 = 0;
        }
        uint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *uint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--uint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      int v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      uint64_t v33 = (uint64_t *)v31[596];
      unint64_t v34 = v31[597];
      if ((unint64_t)v33 >= v34)
      {
        int v35 = (uint64_t *)v31[595];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 597), v39);
          uint64_t v33 = (uint64_t *)v31[596];
          int v35 = (uint64_t *)v31[595];
        }
        else
        {
          unint64_t v40 = 0;
        }
        uint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *uint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--uint64_t v48 = v50;
        }
LABEL_67:
        v31[595] = v48;
        v31[596] = v42;
        v31[597] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[596] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      uint64_t v55 = (uint64_t *)v53[599];
      unint64_t v63 = v53[600];
      if ((unint64_t)v55 >= v63)
      {
        int v57 = (uint64_t *)v53[598];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          uint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 600), v68);
          uint64_t v55 = (uint64_t *)v53[599];
          int v57 = (uint64_t *)v53[598];
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v70 = (uint64_t *)&v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *uint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v73 = *--v55;
          *--uint64_t v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      uint64_t v55 = (uint64_t *)v53[599];
      unint64_t v56 = v53[600];
      if ((unint64_t)v55 >= v56)
      {
        int v57 = (uint64_t *)v53[598];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 600), v61);
          uint64_t v55 = (uint64_t *)v53[599];
          int v57 = (uint64_t *)v53[598];
        }
        else
        {
          unint64_t v62 = 0;
        }
        uint64_t v70 = (uint64_t *)&v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *uint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v72 = *--v55;
          *--uint64_t v70 = v72;
        }
LABEL_99:
        v53[598] = v70;
        v53[599] = v64;
        v53[600] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *uint64_t v55 = v54;
    unint64_t v64 = v55 + 1;
LABEL_101:
    v53[599] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v86 = a1[1];
      uint64_t v76 = *(void **)v86;
      uint64_t v77 = *(unsigned __int16 *)(a1[2] + 58);
      uint64_t v78 = *(char **)(*(void *)v86 + 4816);
      unint64_t v87 = *(void *)(*(void *)v86 + 4824);
      if ((unint64_t)v78 >= v87)
      {
        unint64_t v80 = (char *)v76[601];
        uint64_t v89 = (v78 - v80) >> 3;
        if ((unint64_t)(v89 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v90 = v87 - (void)v80;
        unint64_t v91 = (uint64_t)(v87 - (void)v80) >> 2;
        if (v91 <= v89 + 1) {
          unint64_t v91 = v89 + 1;
        }
        if (v90 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        if (v92)
        {
          unint64_t v93 = (char *)sub_5714((uint64_t)(v76 + 603), v92);
          uint64_t v78 = (char *)v76[602];
          unint64_t v80 = (char *)v76[601];
        }
        else
        {
          unint64_t v93 = 0;
        }
        unint64_t v94 = &v93[8 * v89];
        unint64_t v95 = &v93[8 * v92];
        *(void *)unint64_t v94 = v77;
        unint64_t v88 = v94 + 8;
        while (v78 != v80)
        {
          uint64_t v97 = *((void *)v78 - 1);
          v78 -= 8;
          *((void *)v94 - 1) = v97;
          v94 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      uint64_t v75 = a1[1];
      uint64_t v76 = *(void **)v75;
      uint64_t v77 = *(unsigned __int16 *)(a1[2] + 58);
      uint64_t v78 = *(char **)(*(void *)v75 + 4816);
      unint64_t v79 = *(void *)(*(void *)v75 + 4824);
      if ((unint64_t)v78 >= v79)
      {
        unint64_t v80 = (char *)v76[601];
        uint64_t v81 = (v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v82 = v79 - (void)v80;
        unint64_t v83 = (uint64_t)(v79 - (void)v80) >> 2;
        if (v83 <= v81 + 1) {
          unint64_t v83 = v81 + 1;
        }
        if (v82 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v84 = v83;
        }
        if (v84)
        {
          uint64_t v85 = (char *)sub_5714((uint64_t)(v76 + 603), v84);
          uint64_t v78 = (char *)v76[602];
          unint64_t v80 = (char *)v76[601];
        }
        else
        {
          uint64_t v85 = 0;
        }
        unint64_t v94 = &v85[8 * v81];
        unint64_t v95 = &v85[8 * v84];
        *(void *)unint64_t v94 = v77;
        unint64_t v88 = v94 + 8;
        while (v78 != v80)
        {
          uint64_t v96 = *((void *)v78 - 1);
          v78 -= 8;
          *((void *)v94 - 1) = v96;
          v94 -= 8;
        }
LABEL_131:
        v76[601] = v94;
        v76[602] = v88;
        v76[603] = v95;
        if (v80) {
          operator delete(v80);
        }
        goto LABEL_133;
      }
    }
    *(void *)uint64_t v78 = v77;
    unint64_t v88 = v78 + 8;
LABEL_133:
    v76[602] = v88;
LABEL_134:
    int v98 = 1 << *(_DWORD *)(v3 + 48);
    if (v98 == 2)
    {
      uint64_t v110 = a1[1];
      uint64_t v100 = *(void **)v110;
      uint64_t v101 = *(unsigned __int16 *)(a1[2] + 56);
      unsigned int v102 = *(char **)(*(void *)v110 + 4840);
      unint64_t v111 = *(void *)(*(void *)v110 + 4848);
      if ((unint64_t)v102 >= v111)
      {
        unint64_t v104 = (char *)v100[604];
        uint64_t v113 = (v102 - v104) >> 3;
        if ((unint64_t)(v113 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v114 = v111 - (void)v104;
        unint64_t v115 = (uint64_t)(v111 - (void)v104) >> 2;
        if (v115 <= v113 + 1) {
          unint64_t v115 = v113 + 1;
        }
        if (v114 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v116 = v115;
        }
        if (v116)
        {
          unint64_t v117 = (char *)sub_5714((uint64_t)(v100 + 606), v116);
          unsigned int v102 = (char *)v100[605];
          unint64_t v104 = (char *)v100[604];
        }
        else
        {
          unint64_t v117 = 0;
        }
        uint64_t v118 = &v117[8 * v113];
        unint64_t v119 = &v117[8 * v116];
        *(void *)uint64_t v118 = v101;
        unint64_t v112 = v118 + 8;
        while (v102 != v104)
        {
          uint64_t v121 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v118 - 1) = v121;
          v118 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v98 != 1) {
        goto LABEL_166;
      }
      uint64_t v99 = a1[1];
      uint64_t v100 = *(void **)v99;
      uint64_t v101 = *(unsigned __int16 *)(a1[2] + 56);
      unsigned int v102 = *(char **)(*(void *)v99 + 4840);
      unint64_t v103 = *(void *)(*(void *)v99 + 4848);
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (char *)v100[604];
        uint64_t v105 = (v102 - v104) >> 3;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 606), v108);
          unsigned int v102 = (char *)v100[605];
          unint64_t v104 = (char *)v100[604];
        }
        else
        {
          unint64_t v109 = 0;
        }
        uint64_t v118 = &v109[8 * v105];
        unint64_t v119 = &v109[8 * v108];
        *(void *)uint64_t v118 = v101;
        unint64_t v112 = v118 + 8;
        while (v102 != v104)
        {
          uint64_t v120 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v118 - 1) = v120;
          v118 -= 8;
        }
LABEL_163:
        v100[604] = v118;
        v100[605] = v112;
        v100[606] = v119;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    *(void *)unsigned int v102 = v101;
    unint64_t v112 = v102 + 8;
LABEL_165:
    v100[605] = v112;
LABEL_166:
    int v122 = 1 << *(_DWORD *)(v3 + 48);
    if (v122 == 2)
    {
      int v123 = *(void **)a1[1];
      uint64_t v124 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      uint64_t v125 = (uint64_t *)v123[608];
      unint64_t v133 = v123[609];
      if ((unint64_t)v125 >= v133)
      {
        unint64_t v127 = (uint64_t *)v123[607];
        uint64_t v135 = v125 - v127;
        if ((unint64_t)(v135 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v136 = v133 - (void)v127;
        unint64_t v137 = (uint64_t)(v133 - (void)v127) >> 2;
        if (v137 <= v135 + 1) {
          unint64_t v137 = v135 + 1;
        }
        if (v136 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v138 = v137;
        }
        if (v138)
        {
          unint64_t v139 = (char *)sub_5714((uint64_t)(v123 + 609), v138);
          uint64_t v125 = (uint64_t *)v123[608];
          unint64_t v127 = (uint64_t *)v123[607];
        }
        else
        {
          unint64_t v139 = 0;
        }
        uint64_t v140 = (uint64_t *)&v139[8 * v135];
        unint64_t v141 = &v139[8 * v138];
        *uint64_t v140 = v124;
        unint64_t v134 = v140 + 1;
        while (v125 != v127)
        {
          uint64_t v143 = *--v125;
          *--uint64_t v140 = v143;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v122 != 1) {
        goto LABEL_198;
      }
      int v123 = *(void **)a1[1];
      uint64_t v124 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      uint64_t v125 = (uint64_t *)v123[608];
      unint64_t v126 = v123[609];
      if ((unint64_t)v125 >= v126)
      {
        unint64_t v127 = (uint64_t *)v123[607];
        uint64_t v128 = v125 - v127;
        if ((unint64_t)(v128 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v129 = v126 - (void)v127;
        unint64_t v130 = (uint64_t)(v126 - (void)v127) >> 2;
        if (v130 <= v128 + 1) {
          unint64_t v130 = v128 + 1;
        }
        if (v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v131 = v130;
        }
        if (v131)
        {
          unint64_t v132 = (char *)sub_5714((uint64_t)(v123 + 609), v131);
          uint64_t v125 = (uint64_t *)v123[608];
          unint64_t v127 = (uint64_t *)v123[607];
        }
        else
        {
          unint64_t v132 = 0;
        }
        uint64_t v140 = (uint64_t *)&v132[8 * v128];
        unint64_t v141 = &v132[8 * v131];
        *uint64_t v140 = v124;
        unint64_t v134 = v140 + 1;
        while (v125 != v127)
        {
          uint64_t v142 = *--v125;
          *--uint64_t v140 = v142;
        }
LABEL_195:
        v123[607] = v140;
        v123[608] = v134;
        v123[609] = v141;
        if (v127) {
          operator delete(v127);
        }
        goto LABEL_197;
      }
    }
    *uint64_t v125 = v124;
    unint64_t v134 = v125 + 1;
LABEL_197:
    v123[608] = v134;
LABEL_198:
    int v144 = 1 << *(_DWORD *)(v3 + 48);
    if (v144 == 2)
    {
      int v145 = *(void **)a1[1];
      uint64_t v146 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      uint64_t v147 = (uint64_t *)v145[611];
      unint64_t v155 = v145[612];
      if ((unint64_t)v147 >= v155)
      {
        unint64_t v149 = (uint64_t *)v145[610];
        uint64_t v157 = v147 - v149;
        if ((unint64_t)(v157 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v158 = v155 - (void)v149;
        unint64_t v159 = (uint64_t)(v155 - (void)v149) >> 2;
        if (v159 <= v157 + 1) {
          unint64_t v159 = v157 + 1;
        }
        if (v158 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v160 = v159;
        }
        if (v160)
        {
          unint64_t v161 = (char *)sub_5714((uint64_t)(v145 + 612), v160);
          uint64_t v147 = (uint64_t *)v145[611];
          unint64_t v149 = (uint64_t *)v145[610];
        }
        else
        {
          unint64_t v161 = 0;
        }
        unsigned int v162 = (uint64_t *)&v161[8 * v157];
        unint64_t v163 = &v161[8 * v160];
        *unsigned int v162 = v146;
        unint64_t v156 = v162 + 1;
        while (v147 != v149)
        {
          uint64_t v165 = *--v147;
          *--unsigned int v162 = v165;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v144 != 1) {
        goto LABEL_230;
      }
      int v145 = *(void **)a1[1];
      uint64_t v146 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      uint64_t v147 = (uint64_t *)v145[611];
      unint64_t v148 = v145[612];
      if ((unint64_t)v147 >= v148)
      {
        unint64_t v149 = (uint64_t *)v145[610];
        uint64_t v150 = v147 - v149;
        if ((unint64_t)(v150 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v151 = v148 - (void)v149;
        unint64_t v152 = (uint64_t)(v148 - (void)v149) >> 2;
        if (v152 <= v150 + 1) {
          unint64_t v152 = v150 + 1;
        }
        if (v151 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v153 = v152;
        }
        if (v153)
        {
          unint64_t v154 = (char *)sub_5714((uint64_t)(v145 + 612), v153);
          uint64_t v147 = (uint64_t *)v145[611];
          unint64_t v149 = (uint64_t *)v145[610];
        }
        else
        {
          unint64_t v154 = 0;
        }
        unsigned int v162 = (uint64_t *)&v154[8 * v150];
        unint64_t v163 = &v154[8 * v153];
        *unsigned int v162 = v146;
        unint64_t v156 = v162 + 1;
        while (v147 != v149)
        {
          uint64_t v164 = *--v147;
          *--unsigned int v162 = v164;
        }
LABEL_227:
        v145[610] = v162;
        v145[611] = v156;
        v145[612] = v163;
        if (v149) {
          operator delete(v149);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v147 = v146;
    unint64_t v156 = v147 + 1;
LABEL_229:
    v145[611] = v156;
LABEL_230:
    int v166 = 1 << *(_DWORD *)(v3 + 48);
    if (v166 == 2)
    {
      int v167 = *(void **)a1[1];
      uint64_t v168 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      uint64_t v169 = (uint64_t *)v167[614];
      unint64_t v177 = v167[615];
      if ((unint64_t)v169 >= v177)
      {
        unint64_t v171 = (uint64_t *)v167[613];
        uint64_t v179 = v169 - v171;
        if ((unint64_t)(v179 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v180 = v177 - (void)v171;
        unint64_t v181 = (uint64_t)(v177 - (void)v171) >> 2;
        if (v181 <= v179 + 1) {
          unint64_t v181 = v179 + 1;
        }
        if (v180 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v182 = v181;
        }
        if (v182)
        {
          unint64_t v183 = (char *)sub_5714((uint64_t)(v167 + 615), v182);
          uint64_t v169 = (uint64_t *)v167[614];
          unint64_t v171 = (uint64_t *)v167[613];
        }
        else
        {
          unint64_t v183 = 0;
        }
        unint64_t v184 = (uint64_t *)&v183[8 * v179];
        unsigned int v185 = &v183[8 * v182];
        *unint64_t v184 = v168;
        unint64_t v178 = v184 + 1;
        while (v169 != v171)
        {
          uint64_t v187 = *--v169;
          *--unint64_t v184 = v187;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v166 != 1) {
        goto LABEL_262;
      }
      int v167 = *(void **)a1[1];
      uint64_t v168 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      uint64_t v169 = (uint64_t *)v167[614];
      unint64_t v170 = v167[615];
      if ((unint64_t)v169 >= v170)
      {
        unint64_t v171 = (uint64_t *)v167[613];
        uint64_t v172 = v169 - v171;
        if ((unint64_t)(v172 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v173 = v170 - (void)v171;
        unint64_t v174 = (uint64_t)(v170 - (void)v171) >> 2;
        if (v174 <= v172 + 1) {
          unint64_t v174 = v172 + 1;
        }
        if (v173 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v175 = v174;
        }
        if (v175)
        {
          unint64_t v176 = (char *)sub_5714((uint64_t)(v167 + 615), v175);
          uint64_t v169 = (uint64_t *)v167[614];
          unint64_t v171 = (uint64_t *)v167[613];
        }
        else
        {
          unint64_t v176 = 0;
        }
        unint64_t v184 = (uint64_t *)&v176[8 * v172];
        unsigned int v185 = &v176[8 * v175];
        *unint64_t v184 = v168;
        unint64_t v178 = v184 + 1;
        while (v169 != v171)
        {
          uint64_t v186 = *--v169;
          *--unint64_t v184 = v186;
        }
LABEL_259:
        v167[613] = v184;
        v167[614] = v178;
        v167[615] = v185;
        if (v171) {
          operator delete(v171);
        }
        goto LABEL_261;
      }
    }
    uint64_t *v169 = v168;
    unint64_t v178 = v169 + 1;
LABEL_261:
    v167[614] = v178;
LABEL_262:
    int v188 = 1 << *(_DWORD *)(v3 + 48);
    if (v188 == 2)
    {
      int v189 = *(void **)a1[1];
      uint64_t v190 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
      uint64_t v191 = (uint64_t *)v189[617];
      unint64_t v199 = v189[618];
      if ((unint64_t)v191 >= v199)
      {
        unint64_t v193 = (uint64_t *)v189[616];
        uint64_t v201 = v191 - v193;
        if ((unint64_t)(v201 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v202 = v199 - (void)v193;
        unint64_t v203 = (uint64_t)(v199 - (void)v193) >> 2;
        if (v203 <= v201 + 1) {
          unint64_t v203 = v201 + 1;
        }
        if (v202 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v204 = v203;
        }
        if (v204)
        {
          unint64_t v205 = (char *)sub_5714((uint64_t)(v189 + 618), v204);
          uint64_t v191 = (uint64_t *)v189[617];
          unint64_t v193 = (uint64_t *)v189[616];
        }
        else
        {
          unint64_t v205 = 0;
        }
        uint64_t v206 = (uint64_t *)&v205[8 * v201];
        unint64_t v207 = &v205[8 * v204];
        *uint64_t v206 = v190;
        unint64_t v200 = v206 + 1;
        while (v191 != v193)
        {
          uint64_t v209 = *--v191;
          *--uint64_t v206 = v209;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v188 != 1) {
        goto LABEL_294;
      }
      int v189 = *(void **)a1[1];
      uint64_t v190 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
      uint64_t v191 = (uint64_t *)v189[617];
      unint64_t v192 = v189[618];
      if ((unint64_t)v191 >= v192)
      {
        unint64_t v193 = (uint64_t *)v189[616];
        uint64_t v194 = v191 - v193;
        if ((unint64_t)(v194 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v195 = v192 - (void)v193;
        unint64_t v196 = (uint64_t)(v192 - (void)v193) >> 2;
        if (v196 <= v194 + 1) {
          unint64_t v196 = v194 + 1;
        }
        if (v195 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v197 = v196;
        }
        if (v197)
        {
          unint64_t v198 = (char *)sub_5714((uint64_t)(v189 + 618), v197);
          uint64_t v191 = (uint64_t *)v189[617];
          unint64_t v193 = (uint64_t *)v189[616];
        }
        else
        {
          unint64_t v198 = 0;
        }
        uint64_t v206 = (uint64_t *)&v198[8 * v194];
        unint64_t v207 = &v198[8 * v197];
        *uint64_t v206 = v190;
        unint64_t v200 = v206 + 1;
        while (v191 != v193)
        {
          uint64_t v208 = *--v191;
          *--uint64_t v206 = v208;
        }
LABEL_291:
        v189[616] = v206;
        v189[617] = v200;
        v189[618] = v207;
        if (v193) {
          operator delete(v193);
        }
        goto LABEL_293;
      }
    }
    *uint64_t v191 = v190;
    unint64_t v200 = v191 + 1;
LABEL_293:
    v189[617] = v200;
LABEL_294:
    int v210 = 1 << *(_DWORD *)(v3 + 48);
    if (v210 == 2)
    {
      uint64_t v222 = a1[2];
      unsigned __int16 v212 = *(void **)a1[1];
      uint64_t v213 = *(_DWORD *)(v222 + 28) & 0xFFFFFLL;
      unint64_t v214 = (uint64_t *)v212[620];
      unint64_t v223 = v212[621];
      if ((unint64_t)v214 >= v223)
      {
        unint64_t v216 = (uint64_t *)v212[619];
        uint64_t v225 = v214 - v216;
        if (!((unint64_t)(v225 + 1) >> 61))
        {
          unint64_t v226 = v223 - (void)v216;
          unint64_t v227 = (uint64_t)(v223 - (void)v216) >> 2;
          if (v227 <= v225 + 1) {
            unint64_t v227 = v225 + 1;
          }
          if (v226 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v228 = v227;
          }
          if (v228)
          {
            char v229 = (char *)sub_5714((uint64_t)(v212 + 621), v228);
            unint64_t v214 = (uint64_t *)v212[620];
            unint64_t v216 = (uint64_t *)v212[619];
          }
          else
          {
            char v229 = 0;
          }
          unint64_t v230 = (uint64_t *)&v229[8 * v225];
          uint64_t v231 = &v229[8 * v228];
          *unint64_t v230 = v213;
          uint64_t v224 = v230 + 1;
          while (v214 != v216)
          {
            uint64_t v233 = *--v214;
            *--unint64_t v230 = v233;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_566C();
      }
    }
    else
    {
      if (v210 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      uint64_t v211 = a1[2];
      unsigned __int16 v212 = *(void **)a1[1];
      uint64_t v213 = *(_DWORD *)(v211 + 28) & 0xFFFFFLL;
      unint64_t v214 = (uint64_t *)v212[620];
      unint64_t v215 = v212[621];
      if ((unint64_t)v214 >= v215)
      {
        unint64_t v216 = (uint64_t *)v212[619];
        uint64_t v217 = v214 - v216;
        if (!((unint64_t)(v217 + 1) >> 61))
        {
          unint64_t v218 = v215 - (void)v216;
          unint64_t v219 = (uint64_t)(v215 - (void)v216) >> 2;
          if (v219 <= v217 + 1) {
            unint64_t v219 = v217 + 1;
          }
          if (v218 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v220 = v219;
          }
          if (v220)
          {
            unsigned int v221 = (char *)sub_5714((uint64_t)(v212 + 621), v220);
            unint64_t v214 = (uint64_t *)v212[620];
            unint64_t v216 = (uint64_t *)v212[619];
          }
          else
          {
            unsigned int v221 = 0;
          }
          unint64_t v230 = (uint64_t *)&v221[8 * v217];
          uint64_t v231 = &v221[8 * v220];
          *unint64_t v230 = v213;
          uint64_t v224 = v230 + 1;
          while (v214 != v216)
          {
            uint64_t v232 = *--v214;
            *--unint64_t v230 = v232;
          }
LABEL_323:
          v212[619] = v230;
          v212[620] = v224;
          v212[621] = v231;
          if (v216) {
            operator delete(v216);
          }
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *unint64_t v214 = v213;
    uint64_t v224 = v214 + 1;
LABEL_325:
    v212[620] = v224;
    goto LABEL_326;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[593] - 8) += *(_DWORD *)(v17 + 44) & 0xFFFFF;
    *(void *)(v18[596] - 8) += *(_DWORD *)(v17 + 48) & 0xFFFFF;
    *(void *)(v18[599] - 8) += *(_DWORD *)(v17 + 52) & 0xFFFFF;
    *(void *)(v18[602] - 8) += *(unsigned __int16 *)(v17 + 58);
    *(void *)(v18[605] - 8) += *(unsigned __int16 *)(v17 + 56);
    *(void *)(v18[608] - 8) += *(_DWORD *)(v17 + 32) & 0xFFFFF;
    *(void *)(v18[611] - 8) += *(_DWORD *)(v17 + 36) & 0xFFFFF;
    *(void *)(v18[614] - 8) += *(_DWORD *)(v17 + 40) & 0xFFFFF;
    *(void *)(v18[617] - 8) += *(_DWORD *)(v17 + 24) & 0xFFFFF;
    *(void *)(v18[620] - 8) += *(_DWORD *)(v17 + 28) & 0xFFFFF;
  }
}

void sub_19D8D8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      unint64_t v8 = (uint64_t *)v6[740];
      unint64_t v19 = v6[741];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (uint64_t *)v6[739];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          uint8x8_t v25 = (char *)sub_5714((uint64_t)(v6 + 741), v24);
          unint64_t v8 = (uint64_t *)v6[740];
          uint64_t v10 = (uint64_t *)v6[739];
        }
        else
        {
          uint8x8_t v25 = 0;
        }
        uint64_t v26 = (uint64_t *)&v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *uint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--uint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      unint64_t v8 = (uint64_t *)v6[740];
      unint64_t v9 = v6[741];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (uint64_t *)v6[739];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 741), v14);
          unint64_t v8 = (uint64_t *)v6[740];
          uint64_t v10 = (uint64_t *)v6[739];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v26 = (uint64_t *)&v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *uint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--uint64_t v26 = v28;
        }
LABEL_35:
        v6[739] = v26;
        v6[740] = v20;
        v6[741] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *unint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[740] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      int v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      uint64_t v33 = (uint64_t *)v31[743];
      unint64_t v41 = v31[744];
      if ((unint64_t)v33 >= v41)
      {
        int v35 = (uint64_t *)v31[742];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          int v47 = (char *)sub_5714((uint64_t)(v31 + 744), v46);
          uint64_t v33 = (uint64_t *)v31[743];
          int v35 = (uint64_t *)v31[742];
        }
        else
        {
          int v47 = 0;
        }
        uint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *uint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--uint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      int v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      uint64_t v33 = (uint64_t *)v31[743];
      unint64_t v34 = v31[744];
      if ((unint64_t)v33 >= v34)
      {
        int v35 = (uint64_t *)v31[742];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 744), v39);
          uint64_t v33 = (uint64_t *)v31[743];
          int v35 = (uint64_t *)v31[742];
        }
        else
        {
          unint64_t v40 = 0;
        }
        uint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *uint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--uint64_t v48 = v50;
        }
LABEL_67:
        v31[742] = v48;
        v31[743] = v42;
        v31[744] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[743] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      uint64_t v55 = (uint64_t *)v53[746];
      unint64_t v63 = v53[747];
      if ((unint64_t)v55 >= v63)
      {
        int v57 = (uint64_t *)v53[745];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          uint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 747), v68);
          uint64_t v55 = (uint64_t *)v53[746];
          int v57 = (uint64_t *)v53[745];
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v70 = (uint64_t *)&v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *uint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v73 = *--v55;
          *--uint64_t v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      uint64_t v55 = (uint64_t *)v53[746];
      unint64_t v56 = v53[747];
      if ((unint64_t)v55 >= v56)
      {
        int v57 = (uint64_t *)v53[745];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 747), v61);
          uint64_t v55 = (uint64_t *)v53[746];
          int v57 = (uint64_t *)v53[745];
        }
        else
        {
          unint64_t v62 = 0;
        }
        uint64_t v70 = (uint64_t *)&v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *uint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v72 = *--v55;
          *--uint64_t v70 = v72;
        }
LABEL_99:
        v53[745] = v70;
        v53[746] = v64;
        v53[747] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *uint64_t v55 = v54;
    unint64_t v64 = v55 + 1;
LABEL_101:
    v53[746] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v86 = a1[2];
      uint64_t v76 = *(void **)a1[1];
      unint64_t v77 = ((unint64_t)*(unsigned int *)(v86 + 24) >> 1) & 0x7FFFF;
      uint64_t v78 = (unint64_t *)v76[749];
      unint64_t v87 = v76[750];
      if ((unint64_t)v78 >= v87)
      {
        unint64_t v80 = (unint64_t *)v76[748];
        uint64_t v89 = v78 - v80;
        if (!((unint64_t)(v89 + 1) >> 61))
        {
          unint64_t v90 = v87 - (void)v80;
          unint64_t v91 = (uint64_t)(v87 - (void)v80) >> 2;
          if (v91 <= v89 + 1) {
            unint64_t v91 = v89 + 1;
          }
          if (v90 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v91;
          }
          if (v92)
          {
            unint64_t v93 = (char *)sub_5714((uint64_t)(v76 + 750), v92);
            uint64_t v78 = (unint64_t *)v76[749];
            unint64_t v80 = (unint64_t *)v76[748];
          }
          else
          {
            unint64_t v93 = 0;
          }
          unint64_t v94 = (unint64_t *)&v93[8 * v89];
          unint64_t v95 = &v93[8 * v92];
          *unint64_t v94 = v77;
          unint64_t v88 = v94 + 1;
          while (v78 != v80)
          {
            unint64_t v97 = *--v78;
            *--unint64_t v94 = v97;
          }
          goto LABEL_131;
        }
LABEL_136:
        sub_566C();
      }
    }
    else
    {
      if (v74 != 1)
      {
LABEL_134:
        *a2 = 1;
        return;
      }
      uint64_t v75 = a1[2];
      uint64_t v76 = *(void **)a1[1];
      unint64_t v77 = ((unint64_t)*(unsigned int *)(v75 + 24) >> 1) & 0x7FFFF;
      uint64_t v78 = (unint64_t *)v76[749];
      unint64_t v79 = v76[750];
      if ((unint64_t)v78 >= v79)
      {
        unint64_t v80 = (unint64_t *)v76[748];
        uint64_t v81 = v78 - v80;
        if (!((unint64_t)(v81 + 1) >> 61))
        {
          unint64_t v82 = v79 - (void)v80;
          unint64_t v83 = (uint64_t)(v79 - (void)v80) >> 2;
          if (v83 <= v81 + 1) {
            unint64_t v83 = v81 + 1;
          }
          if (v82 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v83;
          }
          if (v84)
          {
            uint64_t v85 = (char *)sub_5714((uint64_t)(v76 + 750), v84);
            uint64_t v78 = (unint64_t *)v76[749];
            unint64_t v80 = (unint64_t *)v76[748];
          }
          else
          {
            uint64_t v85 = 0;
          }
          unint64_t v94 = (unint64_t *)&v85[8 * v81];
          unint64_t v95 = &v85[8 * v84];
          *unint64_t v94 = v77;
          unint64_t v88 = v94 + 1;
          while (v78 != v80)
          {
            unint64_t v96 = *--v78;
            *--unint64_t v94 = v96;
          }
LABEL_131:
          v76[748] = v94;
          v76[749] = v88;
          v76[750] = v95;
          if (v80) {
            operator delete(v80);
          }
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    *uint64_t v78 = v77;
    unint64_t v88 = v78 + 1;
LABEL_133:
    v76[749] = v88;
    goto LABEL_134;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = (unsigned int *)a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[740] - 8) += v17[9] & 0xFFFFF;
    *(void *)(v18[743] - 8) += v17[7] & 0x1FFFF;
    *(void *)(v18[746] - 8) += v17[8] & 0xFFFFF;
    *(void *)(v18[749] - 8) += ((unint64_t)v17[6] >> 1) & 0x7FFFF;
  }
}

void sub_19DFF8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      unint64_t v8 = (uint64_t *)v6[623];
      unint64_t v22 = v6[624];
      if ((unint64_t)v8 >= v22)
      {
        uint64_t v10 = (uint64_t *)v6[622];
        uint64_t v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 624), v27);
          unint64_t v8 = (uint64_t *)v6[623];
          uint64_t v10 = (uint64_t *)v6[622];
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = (uint64_t *)&v28[8 * v24];
        int v30 = &v28[8 * v27];
        *uint64_t v29 = v7;
        unint64_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v32 = *--v8;
          *--uint64_t v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      unint64_t v8 = (uint64_t *)v6[623];
      unint64_t v9 = v6[624];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (uint64_t *)v6[622];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 624), v14);
          unint64_t v8 = (uint64_t *)v6[623];
          uint64_t v10 = (uint64_t *)v6[622];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v29 = (uint64_t *)&v15[8 * v11];
        int v30 = &v15[8 * v14];
        *uint64_t v29 = v7;
        unint64_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v31 = *--v8;
          *--uint64_t v29 = v31;
        }
LABEL_35:
        v6[622] = v29;
        v6[623] = v23;
        v6[624] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *unint64_t v8 = v7;
    unint64_t v23 = v8 + 1;
LABEL_37:
    v6[623] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      uint64_t v36 = (uint64_t *)v34[626];
      unint64_t v44 = v34[627];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (uint64_t *)v34[625];
        uint64_t v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 627), v49);
          uint64_t v36 = (uint64_t *)v34[626];
          unint64_t v38 = (uint64_t *)v34[625];
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (uint64_t *)&v50[8 * v46];
        int v52 = &v50[8 * v49];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v54 = *--v36;
          *--uint64_t v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      uint64_t v36 = (uint64_t *)v34[626];
      unint64_t v37 = v34[627];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (uint64_t *)v34[625];
        uint64_t v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 627), v42);
          uint64_t v36 = (uint64_t *)v34[626];
          unint64_t v38 = (uint64_t *)v34[625];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v51 = (uint64_t *)&v43[8 * v39];
        int v52 = &v43[8 * v42];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v53 = *--v36;
          *--uint64_t v51 = v53;
        }
LABEL_67:
        v34[625] = v51;
        v34[626] = v45;
        v34[627] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *uint64_t v36 = v35;
    unint64_t v45 = v36 + 1;
LABEL_69:
    v34[626] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      unint64_t v56 = *(void **)a1[1];
      unint64_t v57 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
      uint64_t v58 = (unint64_t *)v56[629];
      unint64_t v66 = v56[630];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (unint64_t *)v56[628];
        uint64_t v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          uint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 630), v71);
          uint64_t v58 = (unint64_t *)v56[629];
          unint64_t v60 = (unint64_t *)v56[628];
        }
        else
        {
          uint64_t v72 = 0;
        }
        uint64_t v73 = (unint64_t *)&v72[8 * v68];
        int v74 = &v72[8 * v71];
        *uint64_t v73 = v57;
        unint64_t v67 = v73 + 1;
        while (v58 != v60)
        {
          unint64_t v76 = *--v58;
          *--uint64_t v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      unint64_t v56 = *(void **)a1[1];
      unint64_t v57 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
      uint64_t v58 = (unint64_t *)v56[629];
      unint64_t v59 = v56[630];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (unint64_t *)v56[628];
        uint64_t v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          uint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 630), v64);
          uint64_t v58 = (unint64_t *)v56[629];
          unint64_t v60 = (unint64_t *)v56[628];
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v73 = (unint64_t *)&v65[8 * v61];
        int v74 = &v65[8 * v64];
        *uint64_t v73 = v57;
        unint64_t v67 = v73 + 1;
        while (v58 != v60)
        {
          unint64_t v75 = *--v58;
          *--uint64_t v73 = v75;
        }
LABEL_99:
        v56[628] = v73;
        v56[629] = v67;
        v56[630] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *uint64_t v58 = v57;
    unint64_t v67 = v58 + 1;
LABEL_101:
    v56[629] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      uint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      unint64_t v80 = (uint64_t *)v78[632];
      unint64_t v88 = v78[633];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (uint64_t *)v78[631];
        uint64_t v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          unint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 633), v93);
          unint64_t v80 = (uint64_t *)v78[632];
          unint64_t v82 = (uint64_t *)v78[631];
        }
        else
        {
          unint64_t v94 = 0;
        }
        unint64_t v95 = (uint64_t *)&v94[8 * v90];
        unint64_t v96 = &v94[8 * v93];
        *unint64_t v95 = v79;
        uint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v98 = *--v80;
          *--unint64_t v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      uint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      unint64_t v80 = (uint64_t *)v78[632];
      unint64_t v81 = v78[633];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (uint64_t *)v78[631];
        uint64_t v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          unint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 633), v86);
          unint64_t v80 = (uint64_t *)v78[632];
          unint64_t v82 = (uint64_t *)v78[631];
        }
        else
        {
          unint64_t v87 = 0;
        }
        unint64_t v95 = (uint64_t *)&v87[8 * v83];
        unint64_t v96 = &v87[8 * v86];
        *unint64_t v95 = v79;
        uint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v97 = *--v80;
          *--unint64_t v95 = v97;
        }
LABEL_131:
        v78[631] = v95;
        v78[632] = v89;
        v78[633] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *unint64_t v80 = v79;
    uint64_t v89 = v80 + 1;
LABEL_133:
    v78[632] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      uint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      unsigned int v102 = (uint64_t *)v100[635];
      unint64_t v110 = v100[636];
      if ((unint64_t)v102 >= v110)
      {
        unint64_t v104 = (uint64_t *)v100[634];
        uint64_t v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          unint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 636), v115);
          unsigned int v102 = (uint64_t *)v100[635];
          unint64_t v104 = (uint64_t *)v100[634];
        }
        else
        {
          unint64_t v116 = 0;
        }
        unint64_t v117 = (uint64_t *)&v116[8 * v112];
        uint64_t v118 = &v116[8 * v115];
        *unint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v120 = *--v102;
          *--unint64_t v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      uint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      unsigned int v102 = (uint64_t *)v100[635];
      unint64_t v103 = v100[636];
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (uint64_t *)v100[634];
        uint64_t v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 636), v108);
          unsigned int v102 = (uint64_t *)v100[635];
          unint64_t v104 = (uint64_t *)v100[634];
        }
        else
        {
          unint64_t v109 = 0;
        }
        unint64_t v117 = (uint64_t *)&v109[8 * v105];
        uint64_t v118 = &v109[8 * v108];
        *unint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v119 = *--v102;
          *--unint64_t v117 = v119;
        }
LABEL_163:
        v100[634] = v117;
        v100[635] = v111;
        v100[636] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    *unsigned int v102 = v101;
    unint64_t v111 = v102 + 1;
LABEL_165:
    v100[635] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      int v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      uint64_t v124 = (uint64_t *)v122[638];
      unint64_t v132 = v122[639];
      if ((unint64_t)v124 >= v132)
      {
        unint64_t v126 = (uint64_t *)v122[637];
        uint64_t v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          unint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 639), v137);
          uint64_t v124 = (uint64_t *)v122[638];
          unint64_t v126 = (uint64_t *)v122[637];
        }
        else
        {
          unint64_t v138 = 0;
        }
        unint64_t v139 = (uint64_t *)&v138[8 * v134];
        uint64_t v140 = &v138[8 * v137];
        *unint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v142 = *--v124;
          *--unint64_t v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      int v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      uint64_t v124 = (uint64_t *)v122[638];
      unint64_t v125 = v122[639];
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v126 = (uint64_t *)v122[637];
        uint64_t v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          unint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 639), v130);
          uint64_t v124 = (uint64_t *)v122[638];
          unint64_t v126 = (uint64_t *)v122[637];
        }
        else
        {
          unint64_t v131 = 0;
        }
        unint64_t v139 = (uint64_t *)&v131[8 * v127];
        uint64_t v140 = &v131[8 * v130];
        *unint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v141 = *--v124;
          *--unint64_t v139 = v141;
        }
LABEL_195:
        v122[637] = v139;
        v122[638] = v133;
        v122[639] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    *uint64_t v124 = v123;
    unint64_t v133 = v124 + 1;
LABEL_197:
    v122[638] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      uint64_t v146 = (uint64_t *)v144[641];
      unint64_t v154 = v144[642];
      if ((unint64_t)v146 >= v154)
      {
        unint64_t v148 = (uint64_t *)v144[640];
        uint64_t v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          unint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 642), v159);
          uint64_t v146 = (uint64_t *)v144[641];
          unint64_t v148 = (uint64_t *)v144[640];
        }
        else
        {
          unint64_t v160 = 0;
        }
        unint64_t v161 = (uint64_t *)&v160[8 * v156];
        unsigned int v162 = &v160[8 * v159];
        *unint64_t v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v164 = *--v146;
          *--unint64_t v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      uint64_t v146 = (uint64_t *)v144[641];
      unint64_t v147 = v144[642];
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v148 = (uint64_t *)v144[640];
        uint64_t v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          unint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 642), v152);
          uint64_t v146 = (uint64_t *)v144[641];
          unint64_t v148 = (uint64_t *)v144[640];
        }
        else
        {
          unint64_t v153 = 0;
        }
        unint64_t v161 = (uint64_t *)&v153[8 * v149];
        unsigned int v162 = &v153[8 * v152];
        *unint64_t v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v163 = *--v146;
          *--unint64_t v161 = v163;
        }
LABEL_227:
        v144[640] = v161;
        v144[641] = v155;
        v144[642] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v146 = v145;
    unint64_t v155 = v146 + 1;
LABEL_229:
    v144[641] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      int v166 = *(void **)a1[1];
      uint64_t v167 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
      uint64_t v168 = (uint64_t *)v166[644];
      unint64_t v176 = v166[645];
      if ((unint64_t)v168 >= v176)
      {
        unint64_t v170 = (uint64_t *)v166[643];
        uint64_t v178 = v168 - v170;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          unint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 645), v181);
          uint64_t v168 = (uint64_t *)v166[644];
          unint64_t v170 = (uint64_t *)v166[643];
        }
        else
        {
          unint64_t v182 = 0;
        }
        unint64_t v183 = (uint64_t *)&v182[8 * v178];
        unint64_t v184 = &v182[8 * v181];
        uint64_t *v183 = v167;
        unint64_t v177 = v183 + 1;
        while (v168 != v170)
        {
          uint64_t v186 = *--v168;
          *--unint64_t v183 = v186;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      int v166 = *(void **)a1[1];
      uint64_t v167 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
      uint64_t v168 = (uint64_t *)v166[644];
      unint64_t v169 = v166[645];
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v170 = (uint64_t *)v166[643];
        uint64_t v171 = v168 - v170;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          unint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 645), v174);
          uint64_t v168 = (uint64_t *)v166[644];
          unint64_t v170 = (uint64_t *)v166[643];
        }
        else
        {
          unint64_t v175 = 0;
        }
        unint64_t v183 = (uint64_t *)&v175[8 * v171];
        unint64_t v184 = &v175[8 * v174];
        uint64_t *v183 = v167;
        unint64_t v177 = v183 + 1;
        while (v168 != v170)
        {
          uint64_t v185 = *--v168;
          *--unint64_t v183 = v185;
        }
LABEL_259:
        v166[643] = v183;
        v166[644] = v177;
        v166[645] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v168 = v167;
    unint64_t v177 = v168 + 1;
LABEL_261:
    v166[644] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      int v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[647];
      unint64_t v198 = v188[648];
      if ((unint64_t)v190 >= v198)
      {
        unint64_t v192 = (uint64_t *)v188[646];
        uint64_t v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          unint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 648), v203);
          uint64_t v190 = (uint64_t *)v188[647];
          unint64_t v192 = (uint64_t *)v188[646];
        }
        else
        {
          unint64_t v204 = 0;
        }
        unint64_t v205 = (uint64_t *)&v204[8 * v200];
        uint64_t v206 = &v204[8 * v203];
        *unint64_t v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v208 = *--v190;
          *--unint64_t v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      int v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[647];
      unint64_t v191 = v188[648];
      if ((unint64_t)v190 >= v191)
      {
        unint64_t v192 = (uint64_t *)v188[646];
        uint64_t v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          unint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 648), v196);
          uint64_t v190 = (uint64_t *)v188[647];
          unint64_t v192 = (uint64_t *)v188[646];
        }
        else
        {
          unint64_t v197 = 0;
        }
        unint64_t v205 = (uint64_t *)&v197[8 * v193];
        uint64_t v206 = &v197[8 * v196];
        *unint64_t v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v207 = *--v190;
          *--unint64_t v205 = v207;
        }
LABEL_291:
        v188[646] = v205;
        v188[647] = v199;
        v188[648] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    *uint64_t v190 = v189;
    unint64_t v199 = v190 + 1;
LABEL_293:
    v188[647] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      int v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      unsigned __int16 v212 = (uint64_t *)v210[650];
      unint64_t v220 = v210[651];
      if ((unint64_t)v212 >= v220)
      {
        unint64_t v214 = (uint64_t *)v210[649];
        uint64_t v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          unint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 651), v225);
          unsigned __int16 v212 = (uint64_t *)v210[650];
          unint64_t v214 = (uint64_t *)v210[649];
        }
        else
        {
          unint64_t v226 = 0;
        }
        unint64_t v227 = (uint64_t *)&v226[8 * v222];
        unint64_t v228 = &v226[8 * v225];
        *unint64_t v227 = v211;
        unsigned int v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v230 = *--v212;
          *--unint64_t v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      int v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      unsigned __int16 v212 = (uint64_t *)v210[650];
      unint64_t v213 = v210[651];
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v214 = (uint64_t *)v210[649];
        uint64_t v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          unint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 651), v218);
          unsigned __int16 v212 = (uint64_t *)v210[650];
          unint64_t v214 = (uint64_t *)v210[649];
        }
        else
        {
          unint64_t v219 = 0;
        }
        unint64_t v227 = (uint64_t *)&v219[8 * v215];
        unint64_t v228 = &v219[8 * v218];
        *unint64_t v227 = v211;
        unsigned int v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v229 = *--v212;
          *--unint64_t v227 = v229;
        }
LABEL_323:
        v210[649] = v227;
        v210[650] = v221;
        v210[651] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *unsigned __int16 v212 = v211;
    unsigned int v221 = v212 + 1;
LABEL_325:
    v210[650] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
      int v234 = (uint64_t *)v232[653];
      unint64_t v242 = v232[654];
      if ((unint64_t)v234 >= v242)
      {
        unint64_t v236 = (uint64_t *)v232[652];
        uint64_t v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v245 = v242 - (void)v236;
        unint64_t v246 = (uint64_t)(v242 - (void)v236) >> 2;
        if (v246 <= v244 + 1) {
          unint64_t v246 = v244 + 1;
        }
        if (v245 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v247)
        {
          unint64_t v248 = (char *)sub_5714((uint64_t)(v232 + 654), v247);
          int v234 = (uint64_t *)v232[653];
          unint64_t v236 = (uint64_t *)v232[652];
        }
        else
        {
          unint64_t v248 = 0;
        }
        unint64_t v249 = (uint64_t *)&v248[8 * v244];
        unint64_t v250 = &v248[8 * v247];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v252 = *--v234;
          *--unint64_t v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1) {
        goto LABEL_358;
      }
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
      int v234 = (uint64_t *)v232[653];
      unint64_t v235 = v232[654];
      if ((unint64_t)v234 >= v235)
      {
        unint64_t v236 = (uint64_t *)v232[652];
        uint64_t v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v238 = v235 - (void)v236;
        unint64_t v239 = (uint64_t)(v235 - (void)v236) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          unint64_t v241 = (char *)sub_5714((uint64_t)(v232 + 654), v240);
          int v234 = (uint64_t *)v232[653];
          unint64_t v236 = (uint64_t *)v232[652];
        }
        else
        {
          unint64_t v241 = 0;
        }
        unint64_t v249 = (uint64_t *)&v241[8 * v237];
        unint64_t v250 = &v241[8 * v240];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v251 = *--v234;
          *--unint64_t v249 = v251;
        }
LABEL_355:
        v232[652] = v249;
        v232[653] = v243;
        v232[654] = v250;
        if (v236) {
          operator delete(v236);
        }
        goto LABEL_357;
      }
    }
    *int v234 = v233;
    unint64_t v243 = v234 + 1;
LABEL_357:
    v232[653] = v243;
LABEL_358:
    int v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
      unint64_t v256 = (uint64_t *)v254[656];
      unint64_t v264 = v254[657];
      if ((unint64_t)v256 >= v264)
      {
        int v258 = (uint64_t *)v254[655];
        uint64_t v266 = v256 - v258;
        if ((unint64_t)(v266 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v267 = v264 - (void)v258;
        unint64_t v268 = (uint64_t)(v264 - (void)v258) >> 2;
        if (v268 <= v266 + 1) {
          unint64_t v268 = v266 + 1;
        }
        if (v267 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v269 = v268;
        }
        if (v269)
        {
          unint64_t v270 = (char *)sub_5714((uint64_t)(v254 + 657), v269);
          unint64_t v256 = (uint64_t *)v254[656];
          int v258 = (uint64_t *)v254[655];
        }
        else
        {
          unint64_t v270 = 0;
        }
        unint64_t v271 = (uint64_t *)&v270[8 * v266];
        unint64_t v272 = &v270[8 * v269];
        *unint64_t v271 = v255;
        unint64_t v265 = v271 + 1;
        while (v256 != v258)
        {
          uint64_t v274 = *--v256;
          *--unint64_t v271 = v274;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1) {
        goto LABEL_390;
      }
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
      unint64_t v256 = (uint64_t *)v254[656];
      unint64_t v257 = v254[657];
      if ((unint64_t)v256 >= v257)
      {
        int v258 = (uint64_t *)v254[655];
        uint64_t v259 = v256 - v258;
        if ((unint64_t)(v259 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v260 = v257 - (void)v258;
        unint64_t v261 = (uint64_t)(v257 - (void)v258) >> 2;
        if (v261 <= v259 + 1) {
          unint64_t v261 = v259 + 1;
        }
        if (v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v262 = v261;
        }
        if (v262)
        {
          unint64_t v263 = (char *)sub_5714((uint64_t)(v254 + 657), v262);
          unint64_t v256 = (uint64_t *)v254[656];
          int v258 = (uint64_t *)v254[655];
        }
        else
        {
          unint64_t v263 = 0;
        }
        unint64_t v271 = (uint64_t *)&v263[8 * v259];
        unint64_t v272 = &v263[8 * v262];
        *unint64_t v271 = v255;
        unint64_t v265 = v271 + 1;
        while (v256 != v258)
        {
          uint64_t v273 = *--v256;
          *--unint64_t v271 = v273;
        }
LABEL_387:
        v254[655] = v271;
        v254[656] = v265;
        v254[657] = v272;
        if (v258) {
          operator delete(v258);
        }
        goto LABEL_389;
      }
    }
    *unint64_t v256 = v255;
    unint64_t v265 = v256 + 1;
LABEL_389:
    v254[656] = v265;
LABEL_390:
    int v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      unint64_t v278 = (uint64_t *)v276[659];
      unint64_t v286 = v276[660];
      if ((unint64_t)v278 >= v286)
      {
        unint64_t v280 = (uint64_t *)v276[658];
        uint64_t v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v289 = v286 - (void)v280;
        unint64_t v290 = (uint64_t)(v286 - (void)v280) >> 2;
        if (v290 <= v288 + 1) {
          unint64_t v290 = v288 + 1;
        }
        if (v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291)
        {
          unint64_t v292 = (char *)sub_5714((uint64_t)(v276 + 660), v291);
          unint64_t v278 = (uint64_t *)v276[659];
          unint64_t v280 = (uint64_t *)v276[658];
        }
        else
        {
          unint64_t v292 = 0;
        }
        unint64_t v293 = (uint64_t *)&v292[8 * v288];
        unsigned int v294 = &v292[8 * v291];
        *unint64_t v293 = v277;
        int v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v296 = *--v278;
          *--unint64_t v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1) {
        goto LABEL_422;
      }
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      unint64_t v278 = (uint64_t *)v276[659];
      unint64_t v279 = v276[660];
      if ((unint64_t)v278 >= v279)
      {
        unint64_t v280 = (uint64_t *)v276[658];
        uint64_t v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v282 = v279 - (void)v280;
        unint64_t v283 = (uint64_t)(v279 - (void)v280) >> 2;
        if (v283 <= v281 + 1) {
          unint64_t v283 = v281 + 1;
        }
        if (v282 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v284 = v283;
        }
        if (v284)
        {
          unint64_t v285 = (char *)sub_5714((uint64_t)(v276 + 660), v284);
          unint64_t v278 = (uint64_t *)v276[659];
          unint64_t v280 = (uint64_t *)v276[658];
        }
        else
        {
          unint64_t v285 = 0;
        }
        unint64_t v293 = (uint64_t *)&v285[8 * v281];
        unsigned int v294 = &v285[8 * v284];
        *unint64_t v293 = v277;
        int v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v295 = *--v278;
          *--unint64_t v293 = v295;
        }
LABEL_419:
        v276[658] = v293;
        v276[659] = v287;
        v276[660] = v294;
        if (v280) {
          operator delete(v280);
        }
        goto LABEL_421;
      }
    }
    *unint64_t v278 = v277;
    int v287 = v278 + 1;
LABEL_421:
    v276[659] = v287;
LABEL_422:
    int v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      unint64_t v300 = (uint64_t *)v298[662];
      unint64_t v308 = v298[663];
      if ((unint64_t)v300 >= v308)
      {
        int v302 = (uint64_t *)v298[661];
        uint64_t v310 = v300 - v302;
        if ((unint64_t)(v310 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v311 = v308 - (void)v302;
        unint64_t v312 = (uint64_t)(v308 - (void)v302) >> 2;
        if (v312 <= v310 + 1) {
          unint64_t v312 = v310 + 1;
        }
        if (v311 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v313 = v312;
        }
        if (v313)
        {
          unint64_t v314 = (char *)sub_5714((uint64_t)(v298 + 663), v313);
          unint64_t v300 = (uint64_t *)v298[662];
          int v302 = (uint64_t *)v298[661];
        }
        else
        {
          unint64_t v314 = 0;
        }
        unint64_t v315 = (uint64_t *)&v314[8 * v310];
        unint64_t v316 = &v314[8 * v313];
        uint64_t *v315 = v299;
        unsigned int v309 = v315 + 1;
        while (v300 != v302)
        {
          uint64_t v318 = *--v300;
          *--unint64_t v315 = v318;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1) {
        goto LABEL_454;
      }
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      unint64_t v300 = (uint64_t *)v298[662];
      unint64_t v301 = v298[663];
      if ((unint64_t)v300 >= v301)
      {
        int v302 = (uint64_t *)v298[661];
        uint64_t v303 = v300 - v302;
        if ((unint64_t)(v303 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v304 = v301 - (void)v302;
        unint64_t v305 = (uint64_t)(v301 - (void)v302) >> 2;
        if (v305 <= v303 + 1) {
          unint64_t v305 = v303 + 1;
        }
        if (v304 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v306 = v305;
        }
        if (v306)
        {
          unint64_t v307 = (char *)sub_5714((uint64_t)(v298 + 663), v306);
          unint64_t v300 = (uint64_t *)v298[662];
          int v302 = (uint64_t *)v298[661];
        }
        else
        {
          unint64_t v307 = 0;
        }
        unint64_t v315 = (uint64_t *)&v307[8 * v303];
        unint64_t v316 = &v307[8 * v306];
        uint64_t *v315 = v299;
        unsigned int v309 = v315 + 1;
        while (v300 != v302)
        {
          uint64_t v317 = *--v300;
          *--unint64_t v315 = v317;
        }
LABEL_451:
        v298[661] = v315;
        v298[662] = v309;
        v298[663] = v316;
        if (v302) {
          operator delete(v302);
        }
        goto LABEL_453;
      }
    }
    *unint64_t v300 = v299;
    unsigned int v309 = v300 + 1;
LABEL_453:
    v298[662] = v309;
LABEL_454:
    int v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
      unint64_t v322 = (uint64_t *)v320[665];
      unint64_t v330 = v320[666];
      if ((unint64_t)v322 >= v330)
      {
        unint64_t v324 = (uint64_t *)v320[664];
        uint64_t v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v333 = v330 - (void)v324;
        unint64_t v334 = (uint64_t)(v330 - (void)v324) >> 2;
        if (v334 <= v332 + 1) {
          unint64_t v334 = v332 + 1;
        }
        if (v333 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v335 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v335 = v334;
        }
        if (v335)
        {
          unint64_t v336 = (char *)sub_5714((uint64_t)(v320 + 666), v335);
          unint64_t v322 = (uint64_t *)v320[665];
          unint64_t v324 = (uint64_t *)v320[664];
        }
        else
        {
          unint64_t v336 = 0;
        }
        unint64_t v337 = (uint64_t *)&v336[8 * v332];
        unint64_t v338 = &v336[8 * v335];
        *unint64_t v337 = v321;
        unsigned int v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v340 = *--v322;
          *--unint64_t v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1) {
        goto LABEL_486;
      }
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
      unint64_t v322 = (uint64_t *)v320[665];
      unint64_t v323 = v320[666];
      if ((unint64_t)v322 >= v323)
      {
        unint64_t v324 = (uint64_t *)v320[664];
        uint64_t v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v326 = v323 - (void)v324;
        unint64_t v327 = (uint64_t)(v323 - (void)v324) >> 2;
        if (v327 <= v325 + 1) {
          unint64_t v327 = v325 + 1;
        }
        if (v326 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v328 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v328 = v327;
        }
        if (v328)
        {
          unint64_t v329 = (char *)sub_5714((uint64_t)(v320 + 666), v328);
          unint64_t v322 = (uint64_t *)v320[665];
          unint64_t v324 = (uint64_t *)v320[664];
        }
        else
        {
          unint64_t v329 = 0;
        }
        unint64_t v337 = (uint64_t *)&v329[8 * v325];
        unint64_t v338 = &v329[8 * v328];
        *unint64_t v337 = v321;
        unsigned int v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v339 = *--v322;
          *--unint64_t v337 = v339;
        }
LABEL_483:
        v320[664] = v337;
        v320[665] = v331;
        v320[666] = v338;
        if (v324) {
          operator delete(v324);
        }
        goto LABEL_485;
      }
    }
    *unint64_t v322 = v321;
    unsigned int v331 = v322 + 1;
LABEL_485:
    v320[665] = v331;
LABEL_486:
    int v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      unint64_t v344 = (uint64_t *)v342[668];
      unint64_t v352 = v342[669];
      if ((unint64_t)v344 >= v352)
      {
        unsigned int v346 = (uint64_t *)v342[667];
        uint64_t v354 = v344 - v346;
        if ((unint64_t)(v354 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v355 = v352 - (void)v346;
        unint64_t v356 = (uint64_t)(v352 - (void)v346) >> 2;
        if (v356 <= v354 + 1) {
          unint64_t v356 = v354 + 1;
        }
        if (v355 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v357 = v356;
        }
        if (v357)
        {
          unint64_t v358 = (char *)sub_5714((uint64_t)(v342 + 669), v357);
          unint64_t v344 = (uint64_t *)v342[668];
          unsigned int v346 = (uint64_t *)v342[667];
        }
        else
        {
          unint64_t v358 = 0;
        }
        unint64_t v359 = (uint64_t *)&v358[8 * v354];
        int v360 = &v358[8 * v357];
        *unint64_t v359 = v343;
        unint64_t v353 = v359 + 1;
        while (v344 != v346)
        {
          uint64_t v362 = *--v344;
          *--unint64_t v359 = v362;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1) {
        goto LABEL_518;
      }
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      unint64_t v344 = (uint64_t *)v342[668];
      unint64_t v345 = v342[669];
      if ((unint64_t)v344 >= v345)
      {
        unsigned int v346 = (uint64_t *)v342[667];
        uint64_t v347 = v344 - v346;
        if ((unint64_t)(v347 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v348 = v345 - (void)v346;
        unint64_t v349 = (uint64_t)(v345 - (void)v346) >> 2;
        if (v349 <= v347 + 1) {
          unint64_t v349 = v347 + 1;
        }
        if (v348 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v350 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v350 = v349;
        }
        if (v350)
        {
          unint64_t v351 = (char *)sub_5714((uint64_t)(v342 + 669), v350);
          unint64_t v344 = (uint64_t *)v342[668];
          unsigned int v346 = (uint64_t *)v342[667];
        }
        else
        {
          unint64_t v351 = 0;
        }
        unint64_t v359 = (uint64_t *)&v351[8 * v347];
        int v360 = &v351[8 * v350];
        *unint64_t v359 = v343;
        unint64_t v353 = v359 + 1;
        while (v344 != v346)
        {
          uint64_t v361 = *--v344;
          *--unint64_t v359 = v361;
        }
LABEL_515:
        v342[667] = v359;
        v342[668] = v353;
        v342[669] = v360;
        if (v346) {
          operator delete(v346);
        }
        goto LABEL_517;
      }
    }
    *unint64_t v344 = v343;
    unint64_t v353 = v344 + 1;
LABEL_517:
    v342[668] = v353;
LABEL_518:
    int v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      unint64_t v366 = (uint64_t *)v364[671];
      unint64_t v374 = v364[672];
      if ((unint64_t)v366 >= v374)
      {
        unint64_t v368 = (uint64_t *)v364[670];
        uint64_t v376 = v366 - v368;
        if ((unint64_t)(v376 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v377 = v374 - (void)v368;
        unint64_t v378 = (uint64_t)(v374 - (void)v368) >> 2;
        if (v378 <= v376 + 1) {
          unint64_t v378 = v376 + 1;
        }
        if (v377 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v379 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v379 = v378;
        }
        if (v379)
        {
          unint64_t v380 = (char *)sub_5714((uint64_t)(v364 + 672), v379);
          unint64_t v366 = (uint64_t *)v364[671];
          unint64_t v368 = (uint64_t *)v364[670];
        }
        else
        {
          unint64_t v380 = 0;
        }
        unint64_t v381 = (uint64_t *)&v380[8 * v376];
        unint64_t v382 = &v380[8 * v379];
        *unint64_t v381 = v365;
        unint64_t v375 = v381 + 1;
        while (v366 != v368)
        {
          uint64_t v384 = *--v366;
          *--unint64_t v381 = v384;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1) {
        goto LABEL_550;
      }
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      unint64_t v366 = (uint64_t *)v364[671];
      unint64_t v367 = v364[672];
      if ((unint64_t)v366 >= v367)
      {
        unint64_t v368 = (uint64_t *)v364[670];
        uint64_t v369 = v366 - v368;
        if ((unint64_t)(v369 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v370 = v367 - (void)v368;
        unint64_t v371 = (uint64_t)(v367 - (void)v368) >> 2;
        if (v371 <= v369 + 1) {
          unint64_t v371 = v369 + 1;
        }
        if (v370 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v372 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v372 = v371;
        }
        if (v372)
        {
          unint64_t v373 = (char *)sub_5714((uint64_t)(v364 + 672), v372);
          unint64_t v366 = (uint64_t *)v364[671];
          unint64_t v368 = (uint64_t *)v364[670];
        }
        else
        {
          unint64_t v373 = 0;
        }
        unint64_t v381 = (uint64_t *)&v373[8 * v369];
        unint64_t v382 = &v373[8 * v372];
        *unint64_t v381 = v365;
        unint64_t v375 = v381 + 1;
        while (v366 != v368)
        {
          uint64_t v383 = *--v366;
          *--unint64_t v381 = v383;
        }
LABEL_547:
        v364[670] = v381;
        v364[671] = v375;
        v364[672] = v382;
        if (v368) {
          operator delete(v368);
        }
        goto LABEL_549;
      }
    }
    *unint64_t v366 = v365;
    unint64_t v375 = v366 + 1;
LABEL_549:
    v364[671] = v375;
LABEL_550:
    int v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      unint64_t v388 = (uint64_t *)v386[674];
      unint64_t v396 = v386[675];
      if ((unint64_t)v388 >= v396)
      {
        unint64_t v390 = (uint64_t *)v386[673];
        uint64_t v398 = v388 - v390;
        if ((unint64_t)(v398 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v399 = v396 - (void)v390;
        unint64_t v400 = (uint64_t)(v396 - (void)v390) >> 2;
        if (v400 <= v398 + 1) {
          unint64_t v400 = v398 + 1;
        }
        if (v399 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v401 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v401 = v400;
        }
        if (v401)
        {
          unint64_t v402 = (char *)sub_5714((uint64_t)(v386 + 675), v401);
          unint64_t v388 = (uint64_t *)v386[674];
          unint64_t v390 = (uint64_t *)v386[673];
        }
        else
        {
          unint64_t v402 = 0;
        }
        unint64_t v403 = (uint64_t *)&v402[8 * v398];
        unint64_t v404 = &v402[8 * v401];
        *unint64_t v403 = v387;
        unsigned int v397 = v403 + 1;
        while (v388 != v390)
        {
          uint64_t v406 = *--v388;
          *--unint64_t v403 = v406;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1) {
        goto LABEL_582;
      }
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      unint64_t v388 = (uint64_t *)v386[674];
      unint64_t v389 = v386[675];
      if ((unint64_t)v388 >= v389)
      {
        unint64_t v390 = (uint64_t *)v386[673];
        uint64_t v391 = v388 - v390;
        if ((unint64_t)(v391 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v392 = v389 - (void)v390;
        unint64_t v393 = (uint64_t)(v389 - (void)v390) >> 2;
        if (v393 <= v391 + 1) {
          unint64_t v393 = v391 + 1;
        }
        if (v392 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v394 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v394 = v393;
        }
        if (v394)
        {
          unint64_t v395 = (char *)sub_5714((uint64_t)(v386 + 675), v394);
          unint64_t v388 = (uint64_t *)v386[674];
          unint64_t v390 = (uint64_t *)v386[673];
        }
        else
        {
          unint64_t v395 = 0;
        }
        unint64_t v403 = (uint64_t *)&v395[8 * v391];
        unint64_t v404 = &v395[8 * v394];
        *unint64_t v403 = v387;
        unsigned int v397 = v403 + 1;
        while (v388 != v390)
        {
          uint64_t v405 = *--v388;
          *--unint64_t v403 = v405;
        }
LABEL_579:
        v386[673] = v403;
        v386[674] = v397;
        v386[675] = v404;
        if (v390) {
          operator delete(v390);
        }
        goto LABEL_581;
      }
    }
    uint64_t *v388 = v387;
    unsigned int v397 = v388 + 1;
LABEL_581:
    v386[674] = v397;
LABEL_582:
    int v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      uint64_t v408 = *(void **)a1[1];
      uint64_t v409 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      unint64_t v410 = (uint64_t *)v408[677];
      unint64_t v418 = v408[678];
      if ((unint64_t)v410 >= v418)
      {
        unint64_t v412 = (uint64_t *)v408[676];
        uint64_t v420 = v410 - v412;
        if ((unint64_t)(v420 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v421 = v418 - (void)v412;
        unint64_t v422 = (uint64_t)(v418 - (void)v412) >> 2;
        if (v422 <= v420 + 1) {
          unint64_t v422 = v420 + 1;
        }
        if (v421 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v423 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v423 = v422;
        }
        if (v423)
        {
          unint64_t v424 = (char *)sub_5714((uint64_t)(v408 + 678), v423);
          unint64_t v410 = (uint64_t *)v408[677];
          unint64_t v412 = (uint64_t *)v408[676];
        }
        else
        {
          unint64_t v424 = 0;
        }
        unint64_t v425 = (uint64_t *)&v424[8 * v420];
        unint64_t v426 = &v424[8 * v423];
        *unint64_t v425 = v409;
        unint64_t v419 = v425 + 1;
        while (v410 != v412)
        {
          uint64_t v428 = *--v410;
          *--unint64_t v425 = v428;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v407 != 1) {
        goto LABEL_614;
      }
      uint64_t v408 = *(void **)a1[1];
      uint64_t v409 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      unint64_t v410 = (uint64_t *)v408[677];
      unint64_t v411 = v408[678];
      if ((unint64_t)v410 >= v411)
      {
        unint64_t v412 = (uint64_t *)v408[676];
        uint64_t v413 = v410 - v412;
        if ((unint64_t)(v413 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v414 = v411 - (void)v412;
        unint64_t v415 = (uint64_t)(v411 - (void)v412) >> 2;
        if (v415 <= v413 + 1) {
          unint64_t v415 = v413 + 1;
        }
        if (v414 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v416 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v416 = v415;
        }
        if (v416)
        {
          unint64_t v417 = (char *)sub_5714((uint64_t)(v408 + 678), v416);
          unint64_t v410 = (uint64_t *)v408[677];
          unint64_t v412 = (uint64_t *)v408[676];
        }
        else
        {
          unint64_t v417 = 0;
        }
        unint64_t v425 = (uint64_t *)&v417[8 * v413];
        unint64_t v426 = &v417[8 * v416];
        *unint64_t v425 = v409;
        unint64_t v419 = v425 + 1;
        while (v410 != v412)
        {
          uint64_t v427 = *--v410;
          *--unint64_t v425 = v427;
        }
LABEL_611:
        v408[676] = v425;
        v408[677] = v419;
        v408[678] = v426;
        if (v412) {
          operator delete(v412);
        }
        goto LABEL_613;
      }
    }
    uint64_t *v410 = v409;
    unint64_t v419 = v410 + 1;
LABEL_613:
    v408[677] = v419;
LABEL_614:
    int v429 = 1 << *(_DWORD *)(v3 + 48);
    if (v429 == 2)
    {
      uint64_t v441 = a1[2];
      int v431 = *(void **)a1[1];
      uint64_t v432 = *(_DWORD *)(v441 + 100) & 0x7FFFFLL;
      uint64_t v433 = (uint64_t *)v431[680];
      unint64_t v442 = v431[681];
      if ((unint64_t)v433 >= v442)
      {
        unint64_t v435 = (uint64_t *)v431[679];
        uint64_t v444 = v433 - v435;
        if (!((unint64_t)(v444 + 1) >> 61))
        {
          unint64_t v445 = v442 - (void)v435;
          unint64_t v446 = (uint64_t)(v442 - (void)v435) >> 2;
          if (v446 <= v444 + 1) {
            unint64_t v446 = v444 + 1;
          }
          if (v445 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v447 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v447 = v446;
          }
          if (v447)
          {
            unint64_t v448 = (char *)sub_5714((uint64_t)(v431 + 681), v447);
            uint64_t v433 = (uint64_t *)v431[680];
            unint64_t v435 = (uint64_t *)v431[679];
          }
          else
          {
            unint64_t v448 = 0;
          }
          unsigned int v449 = (uint64_t *)&v448[8 * v444];
          unint64_t v450 = &v448[8 * v447];
          *unsigned int v449 = v432;
          unint64_t v443 = v449 + 1;
          while (v433 != v435)
          {
            uint64_t v452 = *--v433;
            *--unsigned int v449 = v452;
          }
          goto LABEL_643;
        }
LABEL_648:
        sub_566C();
      }
    }
    else
    {
      if (v429 != 1)
      {
LABEL_646:
        *a2 = 1;
        return;
      }
      uint64_t v430 = a1[2];
      int v431 = *(void **)a1[1];
      uint64_t v432 = *(_DWORD *)(v430 + 100) & 0x7FFFFLL;
      uint64_t v433 = (uint64_t *)v431[680];
      unint64_t v434 = v431[681];
      if ((unint64_t)v433 >= v434)
      {
        unint64_t v435 = (uint64_t *)v431[679];
        uint64_t v436 = v433 - v435;
        if (!((unint64_t)(v436 + 1) >> 61))
        {
          unint64_t v437 = v434 - (void)v435;
          unint64_t v438 = (uint64_t)(v434 - (void)v435) >> 2;
          if (v438 <= v436 + 1) {
            unint64_t v438 = v436 + 1;
          }
          if (v437 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v439 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v439 = v438;
          }
          if (v439)
          {
            unint64_t v440 = (char *)sub_5714((uint64_t)(v431 + 681), v439);
            uint64_t v433 = (uint64_t *)v431[680];
            unint64_t v435 = (uint64_t *)v431[679];
          }
          else
          {
            unint64_t v440 = 0;
          }
          unsigned int v449 = (uint64_t *)&v440[8 * v436];
          unint64_t v450 = &v440[8 * v439];
          *unsigned int v449 = v432;
          unint64_t v443 = v449 + 1;
          while (v433 != v435)
          {
            uint64_t v451 = *--v433;
            *--unsigned int v449 = v451;
          }
LABEL_643:
          v431[679] = v449;
          v431[680] = v443;
          v431[681] = v450;
          if (v435) {
            operator delete(v435);
          }
          goto LABEL_645;
        }
        goto LABEL_648;
      }
    }
    *uint64_t v433 = v432;
    unint64_t v443 = v433 + 1;
LABEL_645:
    v431[680] = v443;
    goto LABEL_646;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = (unsigned int *)a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[623] - 8) += v17[12] & 0x7FFFF;
    *(void *)(v19[626] - 8) += v17[22] & 0x7FFFF;
    *(void *)(v19[629] - 8) += ((unint64_t)v17[6] >> 1) & 0x7FFFF;
    *(void *)(v19[632] - 8) += v17[16] & 0x7FFFF;
    *(void *)(v19[635] - 8) += v17[8] & 0x7FFFF;
    *(void *)(v19[638] - 8) += v17[18] & 0x7FFFF;
    *(void *)(v19[641] - 8) += v17[11] & 0x7FFFF;
    *(void *)(v19[644] - 8) += v17[21] & 0x7FFFF;
    *(void *)(v19[647] - 8) += v17[10] & 0x7FFFF;
    *(void *)(v19[650] - 8) += v17[20] & 0x7FFFF;
    uint64_t v20 = (_DWORD *)a1[2];
    uint64_t v21 = (void *)*v18;
    *(void *)(v21[653] - 8) += v20[14] & 0x7FFFF;
    *(void *)(v21[656] - 8) += v20[24] & 0x7FFFF;
    *(void *)(v21[659] - 8) += v20[15] & 0x7FFFF;
    *(void *)(v21[662] - 8) += v20[13] & 0x7FFFF;
    *(void *)(v21[665] - 8) += v20[23] & 0x7FFFF;
    *(void *)(v21[668] - 8) += v20[7] & 0x7FFFF;
    *(void *)(v21[671] - 8) += v20[17] & 0x7FFFF;
    *(void *)(v21[674] - 8) += v20[9] & 0x7FFFF;
    *(void *)(v21[677] - 8) += v20[19] & 0x7FFFF;
    *(void *)(v21[680] - 8) += v20[25] & 0x7FFFF;
  }
}

void sub_1A01A4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      unint64_t v8 = (char *)v6[683];
      unint64_t v22 = v6[684];
      if ((unint64_t)v8 >= v22)
      {
        uint64_t v10 = (char *)v6[682];
        uint64_t v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 684), v27);
          unint64_t v8 = (char *)v6[683];
          uint64_t v10 = (char *)v6[682];
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[8 * v24];
        int v30 = &v28[8 * v27];
        *(void *)uint64_t v29 = v7;
        unint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v32 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      unint64_t v8 = (char *)v6[683];
      unint64_t v9 = v6[684];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[682];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 684), v14);
          unint64_t v8 = (char *)v6[683];
          uint64_t v10 = (char *)v6[682];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v29 = &v15[8 * v11];
        int v30 = &v15[8 * v14];
        *(void *)uint64_t v29 = v7;
        unint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v31 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[682] = v29;
        v6[683] = v23;
        v6[684] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)unint64_t v8 = v7;
    unint64_t v23 = v8 + 8;
LABEL_37:
    v6[683] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      uint64_t v36 = (uint64_t *)v34[686];
      unint64_t v44 = v34[687];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (uint64_t *)v34[685];
        uint64_t v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 687), v49);
          uint64_t v36 = (uint64_t *)v34[686];
          unint64_t v38 = (uint64_t *)v34[685];
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (uint64_t *)&v50[8 * v46];
        int v52 = &v50[8 * v49];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v54 = *--v36;
          *--uint64_t v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      uint64_t v36 = (uint64_t *)v34[686];
      unint64_t v37 = v34[687];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (uint64_t *)v34[685];
        uint64_t v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 687), v42);
          uint64_t v36 = (uint64_t *)v34[686];
          unint64_t v38 = (uint64_t *)v34[685];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v51 = (uint64_t *)&v43[8 * v39];
        int v52 = &v43[8 * v42];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v53 = *--v36;
          *--uint64_t v51 = v53;
        }
LABEL_67:
        v34[685] = v51;
        v34[686] = v45;
        v34[687] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *uint64_t v36 = v35;
    unint64_t v45 = v36 + 1;
LABEL_69:
    v34[686] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      unint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v58 = (char *)v56[689];
      unint64_t v66 = v56[690];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (char *)v56[688];
        uint64_t v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          uint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 690), v71);
          uint64_t v58 = (char *)v56[689];
          unint64_t v60 = (char *)v56[688];
        }
        else
        {
          uint64_t v72 = 0;
        }
        uint64_t v73 = &v72[8 * v68];
        int v74 = &v72[8 * v71];
        *(void *)uint64_t v73 = v57;
        unint64_t v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v76 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      unint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v58 = (char *)v56[689];
      unint64_t v59 = v56[690];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (char *)v56[688];
        uint64_t v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          uint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 690), v64);
          uint64_t v58 = (char *)v56[689];
          unint64_t v60 = (char *)v56[688];
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v73 = &v65[8 * v61];
        int v74 = &v65[8 * v64];
        *(void *)uint64_t v73 = v57;
        unint64_t v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v75 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[688] = v73;
        v56[689] = v67;
        v56[690] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *(void *)uint64_t v58 = v57;
    unint64_t v67 = v58 + 8;
LABEL_101:
    v56[689] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      uint64_t v78 = *(void **)a1[1];
      uint64_t v79 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
      unint64_t v80 = (char *)v78[692];
      unint64_t v88 = v78[693];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (char *)v78[691];
        uint64_t v90 = (v80 - v82) >> 3;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          unint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 693), v93);
          unint64_t v80 = (char *)v78[692];
          unint64_t v82 = (char *)v78[691];
        }
        else
        {
          unint64_t v94 = 0;
        }
        unint64_t v95 = &v94[8 * v90];
        unint64_t v96 = &v94[8 * v93];
        *(void *)unint64_t v95 = v79;
        uint64_t v89 = v95 + 8;
        while (v80 != v82)
        {
          uint64_t v98 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v95 - 1) = v98;
          v95 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      uint64_t v78 = *(void **)a1[1];
      uint64_t v79 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
      unint64_t v80 = (char *)v78[692];
      unint64_t v81 = v78[693];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (char *)v78[691];
        uint64_t v83 = (v80 - v82) >> 3;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          unint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 693), v86);
          unint64_t v80 = (char *)v78[692];
          unint64_t v82 = (char *)v78[691];
        }
        else
        {
          unint64_t v87 = 0;
        }
        unint64_t v95 = &v87[8 * v83];
        unint64_t v96 = &v87[8 * v86];
        *(void *)unint64_t v95 = v79;
        uint64_t v89 = v95 + 8;
        while (v80 != v82)
        {
          uint64_t v97 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v95 - 1) = v97;
          v95 -= 8;
        }
LABEL_131:
        v78[691] = v95;
        v78[692] = v89;
        v78[693] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v80 = v79;
    uint64_t v89 = v80 + 8;
LABEL_133:
    v78[692] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      uint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      unsigned int v102 = (uint64_t *)v100[695];
      unint64_t v110 = v100[696];
      if ((unint64_t)v102 >= v110)
      {
        unint64_t v104 = (uint64_t *)v100[694];
        uint64_t v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          unint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 696), v115);
          unsigned int v102 = (uint64_t *)v100[695];
          unint64_t v104 = (uint64_t *)v100[694];
        }
        else
        {
          unint64_t v116 = 0;
        }
        unint64_t v117 = (uint64_t *)&v116[8 * v112];
        uint64_t v118 = &v116[8 * v115];
        *unint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v120 = *--v102;
          *--unint64_t v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      uint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      unsigned int v102 = (uint64_t *)v100[695];
      unint64_t v103 = v100[696];
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (uint64_t *)v100[694];
        uint64_t v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 696), v108);
          unsigned int v102 = (uint64_t *)v100[695];
          unint64_t v104 = (uint64_t *)v100[694];
        }
        else
        {
          unint64_t v109 = 0;
        }
        unint64_t v117 = (uint64_t *)&v109[8 * v105];
        uint64_t v118 = &v109[8 * v108];
        *unint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v119 = *--v102;
          *--unint64_t v117 = v119;
        }
LABEL_163:
        v100[694] = v117;
        v100[695] = v111;
        v100[696] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    *unsigned int v102 = v101;
    unint64_t v111 = v102 + 1;
LABEL_165:
    v100[695] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      int v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      uint64_t v124 = (char *)v122[698];
      unint64_t v132 = v122[699];
      if ((unint64_t)v124 >= v132)
      {
        unint64_t v126 = (char *)v122[697];
        uint64_t v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          unint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 699), v137);
          uint64_t v124 = (char *)v122[698];
          unint64_t v126 = (char *)v122[697];
        }
        else
        {
          unint64_t v138 = 0;
        }
        unint64_t v139 = &v138[8 * v134];
        uint64_t v140 = &v138[8 * v137];
        *(void *)unint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v142 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      int v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      uint64_t v124 = (char *)v122[698];
      unint64_t v125 = v122[699];
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v126 = (char *)v122[697];
        uint64_t v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          unint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 699), v130);
          uint64_t v124 = (char *)v122[698];
          unint64_t v126 = (char *)v122[697];
        }
        else
        {
          unint64_t v131 = 0;
        }
        unint64_t v139 = &v131[8 * v127];
        uint64_t v140 = &v131[8 * v130];
        *(void *)unint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v141 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[697] = v139;
        v122[698] = v133;
        v122[699] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v124 = v123;
    unint64_t v133 = v124 + 8;
LABEL_197:
    v122[698] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      uint64_t v146 = (uint64_t *)v144[701];
      unint64_t v154 = v144[702];
      if ((unint64_t)v146 >= v154)
      {
        unint64_t v148 = (uint64_t *)v144[700];
        uint64_t v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          unint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 702), v159);
          uint64_t v146 = (uint64_t *)v144[701];
          unint64_t v148 = (uint64_t *)v144[700];
        }
        else
        {
          unint64_t v160 = 0;
        }
        unint64_t v161 = (uint64_t *)&v160[8 * v156];
        unsigned int v162 = &v160[8 * v159];
        *unint64_t v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v164 = *--v146;
          *--unint64_t v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      uint64_t v146 = (uint64_t *)v144[701];
      unint64_t v147 = v144[702];
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v148 = (uint64_t *)v144[700];
        uint64_t v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          unint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 702), v152);
          uint64_t v146 = (uint64_t *)v144[701];
          unint64_t v148 = (uint64_t *)v144[700];
        }
        else
        {
          unint64_t v153 = 0;
        }
        unint64_t v161 = (uint64_t *)&v153[8 * v149];
        unsigned int v162 = &v153[8 * v152];
        *unint64_t v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v163 = *--v146;
          *--unint64_t v161 = v163;
        }
LABEL_227:
        v144[700] = v161;
        v144[701] = v155;
        v144[702] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v146 = v145;
    unint64_t v155 = v146 + 1;
LABEL_229:
    v144[701] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      int v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v168 = (char *)v166[704];
      unint64_t v176 = v166[705];
      if ((unint64_t)v168 >= v176)
      {
        unint64_t v170 = (char *)v166[703];
        uint64_t v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          unint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 705), v181);
          uint64_t v168 = (char *)v166[704];
          unint64_t v170 = (char *)v166[703];
        }
        else
        {
          unint64_t v182 = 0;
        }
        unint64_t v183 = &v182[8 * v178];
        unint64_t v184 = &v182[8 * v181];
        *(void *)unint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v186 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      int v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v168 = (char *)v166[704];
      unint64_t v169 = v166[705];
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v170 = (char *)v166[703];
        uint64_t v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          unint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 705), v174);
          uint64_t v168 = (char *)v166[704];
          unint64_t v170 = (char *)v166[703];
        }
        else
        {
          unint64_t v175 = 0;
        }
        unint64_t v183 = &v175[8 * v171];
        unint64_t v184 = &v175[8 * v174];
        *(void *)unint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v185 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[703] = v183;
        v166[704] = v177;
        v166[705] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v168 = v167;
    unint64_t v177 = v168 + 8;
LABEL_261:
    v166[704] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      int v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[707];
      unint64_t v198 = v188[708];
      if ((unint64_t)v190 >= v198)
      {
        unint64_t v192 = (uint64_t *)v188[706];
        uint64_t v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          unint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 708), v203);
          uint64_t v190 = (uint64_t *)v188[707];
          unint64_t v192 = (uint64_t *)v188[706];
        }
        else
        {
          unint64_t v204 = 0;
        }
        unint64_t v205 = (uint64_t *)&v204[8 * v200];
        uint64_t v206 = &v204[8 * v203];
        *unint64_t v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v208 = *--v190;
          *--unint64_t v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      int v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[707];
      unint64_t v191 = v188[708];
      if ((unint64_t)v190 >= v191)
      {
        unint64_t v192 = (uint64_t *)v188[706];
        uint64_t v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          unint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 708), v196);
          uint64_t v190 = (uint64_t *)v188[707];
          unint64_t v192 = (uint64_t *)v188[706];
        }
        else
        {
          unint64_t v197 = 0;
        }
        unint64_t v205 = (uint64_t *)&v197[8 * v193];
        uint64_t v206 = &v197[8 * v196];
        *unint64_t v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v207 = *--v190;
          *--unint64_t v205 = v207;
        }
LABEL_291:
        v188[706] = v205;
        v188[707] = v199;
        v188[708] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    *uint64_t v190 = v189;
    unint64_t v199 = v190 + 1;
LABEL_293:
    v188[707] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      int v210 = *(void **)a1[1];
      uint64_t v211 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unsigned __int16 v212 = (char *)v210[710];
      unint64_t v220 = v210[711];
      if ((unint64_t)v212 >= v220)
      {
        unint64_t v214 = (char *)v210[709];
        uint64_t v222 = (v212 - v214) >> 3;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          unint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 711), v225);
          unsigned __int16 v212 = (char *)v210[710];
          unint64_t v214 = (char *)v210[709];
        }
        else
        {
          unint64_t v226 = 0;
        }
        unint64_t v227 = &v226[8 * v222];
        unint64_t v228 = &v226[8 * v225];
        *(void *)unint64_t v227 = v211;
        unsigned int v221 = v227 + 8;
        while (v212 != v214)
        {
          uint64_t v230 = *((void *)v212 - 1);
          v212 -= 8;
          *((void *)v227 - 1) = v230;
          v227 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      int v210 = *(void **)a1[1];
      uint64_t v211 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unsigned __int16 v212 = (char *)v210[710];
      unint64_t v213 = v210[711];
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v214 = (char *)v210[709];
        uint64_t v215 = (v212 - v214) >> 3;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          unint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 711), v218);
          unsigned __int16 v212 = (char *)v210[710];
          unint64_t v214 = (char *)v210[709];
        }
        else
        {
          unint64_t v219 = 0;
        }
        unint64_t v227 = &v219[8 * v215];
        unint64_t v228 = &v219[8 * v218];
        *(void *)unint64_t v227 = v211;
        unsigned int v221 = v227 + 8;
        while (v212 != v214)
        {
          uint64_t v229 = *((void *)v212 - 1);
          v212 -= 8;
          *((void *)v227 - 1) = v229;
          v227 -= 8;
        }
LABEL_323:
        v210[709] = v227;
        v210[710] = v221;
        v210[711] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *(void *)unsigned __int16 v212 = v211;
    unsigned int v221 = v212 + 8;
LABEL_325:
    v210[710] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      int v234 = (uint64_t *)v232[713];
      unint64_t v242 = v232[714];
      if ((unint64_t)v234 >= v242)
      {
        unint64_t v236 = (uint64_t *)v232[712];
        uint64_t v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v245 = v242 - (void)v236;
        unint64_t v246 = (uint64_t)(v242 - (void)v236) >> 2;
        if (v246 <= v244 + 1) {
          unint64_t v246 = v244 + 1;
        }
        if (v245 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v247)
        {
          unint64_t v248 = (char *)sub_5714((uint64_t)(v232 + 714), v247);
          int v234 = (uint64_t *)v232[713];
          unint64_t v236 = (uint64_t *)v232[712];
        }
        else
        {
          unint64_t v248 = 0;
        }
        unint64_t v249 = (uint64_t *)&v248[8 * v244];
        unint64_t v250 = &v248[8 * v247];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v252 = *--v234;
          *--unint64_t v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1) {
        goto LABEL_358;
      }
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      int v234 = (uint64_t *)v232[713];
      unint64_t v235 = v232[714];
      if ((unint64_t)v234 >= v235)
      {
        unint64_t v236 = (uint64_t *)v232[712];
        uint64_t v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v238 = v235 - (void)v236;
        unint64_t v239 = (uint64_t)(v235 - (void)v236) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          unint64_t v241 = (char *)sub_5714((uint64_t)(v232 + 714), v240);
          int v234 = (uint64_t *)v232[713];
          unint64_t v236 = (uint64_t *)v232[712];
        }
        else
        {
          unint64_t v241 = 0;
        }
        unint64_t v249 = (uint64_t *)&v241[8 * v237];
        unint64_t v250 = &v241[8 * v240];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v251 = *--v234;
          *--unint64_t v249 = v251;
        }
LABEL_355:
        v232[712] = v249;
        v232[713] = v243;
        v232[714] = v250;
        if (v236) {
          operator delete(v236);
        }
        goto LABEL_357;
      }
    }
    *int v234 = v233;
    unint64_t v243 = v234 + 1;
LABEL_357:
    v232[713] = v243;
LABEL_358:
    int v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      unint64_t v256 = (char *)v254[716];
      unint64_t v264 = v254[717];
      if ((unint64_t)v256 >= v264)
      {
        int v258 = (char *)v254[715];
        uint64_t v266 = (v256 - v258) >> 3;
        if ((unint64_t)(v266 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v267 = v264 - (void)v258;
        unint64_t v268 = (uint64_t)(v264 - (void)v258) >> 2;
        if (v268 <= v266 + 1) {
          unint64_t v268 = v266 + 1;
        }
        if (v267 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v269 = v268;
        }
        if (v269)
        {
          unint64_t v270 = (char *)sub_5714((uint64_t)(v254 + 717), v269);
          unint64_t v256 = (char *)v254[716];
          int v258 = (char *)v254[715];
        }
        else
        {
          unint64_t v270 = 0;
        }
        unint64_t v271 = &v270[8 * v266];
        unint64_t v272 = &v270[8 * v269];
        *(void *)unint64_t v271 = v255;
        unint64_t v265 = v271 + 8;
        while (v256 != v258)
        {
          uint64_t v274 = *((void *)v256 - 1);
          v256 -= 8;
          *((void *)v271 - 1) = v274;
          v271 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1) {
        goto LABEL_390;
      }
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      unint64_t v256 = (char *)v254[716];
      unint64_t v257 = v254[717];
      if ((unint64_t)v256 >= v257)
      {
        int v258 = (char *)v254[715];
        uint64_t v259 = (v256 - v258) >> 3;
        if ((unint64_t)(v259 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v260 = v257 - (void)v258;
        unint64_t v261 = (uint64_t)(v257 - (void)v258) >> 2;
        if (v261 <= v259 + 1) {
          unint64_t v261 = v259 + 1;
        }
        if (v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v262 = v261;
        }
        if (v262)
        {
          unint64_t v263 = (char *)sub_5714((uint64_t)(v254 + 717), v262);
          unint64_t v256 = (char *)v254[716];
          int v258 = (char *)v254[715];
        }
        else
        {
          unint64_t v263 = 0;
        }
        unint64_t v271 = &v263[8 * v259];
        unint64_t v272 = &v263[8 * v262];
        *(void *)unint64_t v271 = v255;
        unint64_t v265 = v271 + 8;
        while (v256 != v258)
        {
          uint64_t v273 = *((void *)v256 - 1);
          v256 -= 8;
          *((void *)v271 - 1) = v273;
          v271 -= 8;
        }
LABEL_387:
        v254[715] = v271;
        v254[716] = v265;
        v254[717] = v272;
        if (v258) {
          operator delete(v258);
        }
        goto LABEL_389;
      }
    }
    *(void *)unint64_t v256 = v255;
    unint64_t v265 = v256 + 8;
LABEL_389:
    v254[716] = v265;
LABEL_390:
    int v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      unint64_t v278 = (uint64_t *)v276[719];
      unint64_t v286 = v276[720];
      if ((unint64_t)v278 >= v286)
      {
        unint64_t v280 = (uint64_t *)v276[718];
        uint64_t v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v289 = v286 - (void)v280;
        unint64_t v290 = (uint64_t)(v286 - (void)v280) >> 2;
        if (v290 <= v288 + 1) {
          unint64_t v290 = v288 + 1;
        }
        if (v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291)
        {
          unint64_t v292 = (char *)sub_5714((uint64_t)(v276 + 720), v291);
          unint64_t v278 = (uint64_t *)v276[719];
          unint64_t v280 = (uint64_t *)v276[718];
        }
        else
        {
          unint64_t v292 = 0;
        }
        unint64_t v293 = (uint64_t *)&v292[8 * v288];
        unsigned int v294 = &v292[8 * v291];
        *unint64_t v293 = v277;
        int v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v296 = *--v278;
          *--unint64_t v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1) {
        goto LABEL_422;
      }
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      unint64_t v278 = (uint64_t *)v276[719];
      unint64_t v279 = v276[720];
      if ((unint64_t)v278 >= v279)
      {
        unint64_t v280 = (uint64_t *)v276[718];
        uint64_t v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v282 = v279 - (void)v280;
        unint64_t v283 = (uint64_t)(v279 - (void)v280) >> 2;
        if (v283 <= v281 + 1) {
          unint64_t v283 = v281 + 1;
        }
        if (v282 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v284 = v283;
        }
        if (v284)
        {
          unint64_t v285 = (char *)sub_5714((uint64_t)(v276 + 720), v284);
          unint64_t v278 = (uint64_t *)v276[719];
          unint64_t v280 = (uint64_t *)v276[718];
        }
        else
        {
          unint64_t v285 = 0;
        }
        unint64_t v293 = (uint64_t *)&v285[8 * v281];
        unsigned int v294 = &v285[8 * v284];
        *unint64_t v293 = v277;
        int v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v295 = *--v278;
          *--unint64_t v293 = v295;
        }
LABEL_419:
        v276[718] = v293;
        v276[719] = v287;
        v276[720] = v294;
        if (v280) {
          operator delete(v280);
        }
        goto LABEL_421;
      }
    }
    *unint64_t v278 = v277;
    int v287 = v278 + 1;
LABEL_421:
    v276[719] = v287;
LABEL_422:
    int v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      unint64_t v300 = (char *)v298[722];
      unint64_t v308 = v298[723];
      if ((unint64_t)v300 >= v308)
      {
        int v302 = (char *)v298[721];
        uint64_t v310 = (v300 - v302) >> 3;
        if ((unint64_t)(v310 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v311 = v308 - (void)v302;
        unint64_t v312 = (uint64_t)(v308 - (void)v302) >> 2;
        if (v312 <= v310 + 1) {
          unint64_t v312 = v310 + 1;
        }
        if (v311 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v313 = v312;
        }
        if (v313)
        {
          unint64_t v314 = (char *)sub_5714((uint64_t)(v298 + 723), v313);
          unint64_t v300 = (char *)v298[722];
          int v302 = (char *)v298[721];
        }
        else
        {
          unint64_t v314 = 0;
        }
        unint64_t v315 = &v314[8 * v310];
        unint64_t v316 = &v314[8 * v313];
        *(void *)unint64_t v315 = v299;
        unsigned int v309 = v315 + 8;
        while (v300 != v302)
        {
          uint64_t v318 = *((void *)v300 - 1);
          v300 -= 8;
          *((void *)v315 - 1) = v318;
          v315 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1) {
        goto LABEL_454;
      }
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      unint64_t v300 = (char *)v298[722];
      unint64_t v301 = v298[723];
      if ((unint64_t)v300 >= v301)
      {
        int v302 = (char *)v298[721];
        uint64_t v303 = (v300 - v302) >> 3;
        if ((unint64_t)(v303 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v304 = v301 - (void)v302;
        unint64_t v305 = (uint64_t)(v301 - (void)v302) >> 2;
        if (v305 <= v303 + 1) {
          unint64_t v305 = v303 + 1;
        }
        if (v304 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v306 = v305;
        }
        if (v306)
        {
          unint64_t v307 = (char *)sub_5714((uint64_t)(v298 + 723), v306);
          unint64_t v300 = (char *)v298[722];
          int v302 = (char *)v298[721];
        }
        else
        {
          unint64_t v307 = 0;
        }
        unint64_t v315 = &v307[8 * v303];
        unint64_t v316 = &v307[8 * v306];
        *(void *)unint64_t v315 = v299;
        unsigned int v309 = v315 + 8;
        while (v300 != v302)
        {
          uint64_t v317 = *((void *)v300 - 1);
          v300 -= 8;
          *((void *)v315 - 1) = v317;
          v315 -= 8;
        }
LABEL_451:
        v298[721] = v315;
        v298[722] = v309;
        v298[723] = v316;
        if (v302) {
          operator delete(v302);
        }
        goto LABEL_453;
      }
    }
    *(void *)unint64_t v300 = v299;
    unsigned int v309 = v300 + 8;
LABEL_453:
    v298[722] = v309;
LABEL_454:
    int v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      unint64_t v322 = (uint64_t *)v320[725];
      unint64_t v330 = v320[726];
      if ((unint64_t)v322 >= v330)
      {
        unint64_t v324 = (uint64_t *)v320[724];
        uint64_t v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v333 = v330 - (void)v324;
        unint64_t v334 = (uint64_t)(v330 - (void)v324) >> 2;
        if (v334 <= v332 + 1) {
          unint64_t v334 = v332 + 1;
        }
        if (v333 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v335 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v335 = v334;
        }
        if (v335)
        {
          unint64_t v336 = (char *)sub_5714((uint64_t)(v320 + 726), v335);
          unint64_t v322 = (uint64_t *)v320[725];
          unint64_t v324 = (uint64_t *)v320[724];
        }
        else
        {
          unint64_t v336 = 0;
        }
        unint64_t v337 = (uint64_t *)&v336[8 * v332];
        unint64_t v338 = &v336[8 * v335];
        *unint64_t v337 = v321;
        unsigned int v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v340 = *--v322;
          *--unint64_t v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1) {
        goto LABEL_486;
      }
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      unint64_t v322 = (uint64_t *)v320[725];
      unint64_t v323 = v320[726];
      if ((unint64_t)v322 >= v323)
      {
        unint64_t v324 = (uint64_t *)v320[724];
        uint64_t v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v326 = v323 - (void)v324;
        unint64_t v327 = (uint64_t)(v323 - (void)v324) >> 2;
        if (v327 <= v325 + 1) {
          unint64_t v327 = v325 + 1;
        }
        if (v326 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v328 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v328 = v327;
        }
        if (v328)
        {
          unint64_t v329 = (char *)sub_5714((uint64_t)(v320 + 726), v328);
          unint64_t v322 = (uint64_t *)v320[725];
          unint64_t v324 = (uint64_t *)v320[724];
        }
        else
        {
          unint64_t v329 = 0;
        }
        unint64_t v337 = (uint64_t *)&v329[8 * v325];
        unint64_t v338 = &v329[8 * v328];
        *unint64_t v337 = v321;
        unsigned int v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v339 = *--v322;
          *--unint64_t v337 = v339;
        }
LABEL_483:
        v320[724] = v337;
        v320[725] = v331;
        v320[726] = v338;
        if (v324) {
          operator delete(v324);
        }
        goto LABEL_485;
      }
    }
    *unint64_t v322 = v321;
    unsigned int v331 = v322 + 1;
LABEL_485:
    v320[725] = v331;
LABEL_486:
    int v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v344 = (char *)v342[728];
      unint64_t v352 = v342[729];
      if ((unint64_t)v344 >= v352)
      {
        unsigned int v346 = (char *)v342[727];
        uint64_t v354 = (v344 - v346) >> 3;
        if ((unint64_t)(v354 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v355 = v352 - (void)v346;
        unint64_t v356 = (uint64_t)(v352 - (void)v346) >> 2;
        if (v356 <= v354 + 1) {
          unint64_t v356 = v354 + 1;
        }
        if (v355 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v357 = v356;
        }
        if (v357)
        {
          unint64_t v358 = (char *)sub_5714((uint64_t)(v342 + 729), v357);
          unint64_t v344 = (char *)v342[728];
          unsigned int v346 = (char *)v342[727];
        }
        else
        {
          unint64_t v358 = 0;
        }
        unint64_t v359 = &v358[8 * v354];
        int v360 = &v358[8 * v357];
        *(void *)unint64_t v359 = v343;
        unint64_t v353 = v359 + 8;
        while (v344 != v346)
        {
          uint64_t v362 = *((void *)v344 - 1);
          v344 -= 8;
          *((void *)v359 - 1) = v362;
          v359 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1) {
        goto LABEL_518;
      }
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v344 = (char *)v342[728];
      unint64_t v345 = v342[729];
      if ((unint64_t)v344 >= v345)
      {
        unsigned int v346 = (char *)v342[727];
        uint64_t v347 = (v344 - v346) >> 3;
        if ((unint64_t)(v347 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v348 = v345 - (void)v346;
        unint64_t v349 = (uint64_t)(v345 - (void)v346) >> 2;
        if (v349 <= v347 + 1) {
          unint64_t v349 = v347 + 1;
        }
        if (v348 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v350 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v350 = v349;
        }
        if (v350)
        {
          unint64_t v351 = (char *)sub_5714((uint64_t)(v342 + 729), v350);
          unint64_t v344 = (char *)v342[728];
          unsigned int v346 = (char *)v342[727];
        }
        else
        {
          unint64_t v351 = 0;
        }
        unint64_t v359 = &v351[8 * v347];
        int v360 = &v351[8 * v350];
        *(void *)unint64_t v359 = v343;
        unint64_t v353 = v359 + 8;
        while (v344 != v346)
        {
          uint64_t v361 = *((void *)v344 - 1);
          v344 -= 8;
          *((void *)v359 - 1) = v361;
          v359 -= 8;
        }
LABEL_515:
        v342[727] = v359;
        v342[728] = v353;
        v342[729] = v360;
        if (v346) {
          operator delete(v346);
        }
        goto LABEL_517;
      }
    }
    *(void *)unint64_t v344 = v343;
    unint64_t v353 = v344 + 8;
LABEL_517:
    v342[728] = v353;
LABEL_518:
    int v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      unint64_t v366 = (uint64_t *)v364[731];
      unint64_t v374 = v364[732];
      if ((unint64_t)v366 >= v374)
      {
        unint64_t v368 = (uint64_t *)v364[730];
        uint64_t v376 = v366 - v368;
        if ((unint64_t)(v376 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v377 = v374 - (void)v368;
        unint64_t v378 = (uint64_t)(v374 - (void)v368) >> 2;
        if (v378 <= v376 + 1) {
          unint64_t v378 = v376 + 1;
        }
        if (v377 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v379 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v379 = v378;
        }
        if (v379)
        {
          unint64_t v380 = (char *)sub_5714((uint64_t)(v364 + 732), v379);
          unint64_t v366 = (uint64_t *)v364[731];
          unint64_t v368 = (uint64_t *)v364[730];
        }
        else
        {
          unint64_t v380 = 0;
        }
        unint64_t v381 = (uint64_t *)&v380[8 * v376];
        unint64_t v382 = &v380[8 * v379];
        *unint64_t v381 = v365;
        unint64_t v375 = v381 + 1;
        while (v366 != v368)
        {
          uint64_t v384 = *--v366;
          *--unint64_t v381 = v384;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1) {
        goto LABEL_550;
      }
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      unint64_t v366 = (uint64_t *)v364[731];
      unint64_t v367 = v364[732];
      if ((unint64_t)v366 >= v367)
      {
        unint64_t v368 = (uint64_t *)v364[730];
        uint64_t v369 = v366 - v368;
        if ((unint64_t)(v369 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v370 = v367 - (void)v368;
        unint64_t v371 = (uint64_t)(v367 - (void)v368) >> 2;
        if (v371 <= v369 + 1) {
          unint64_t v371 = v369 + 1;
        }
        if (v370 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v372 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v372 = v371;
        }
        if (v372)
        {
          unint64_t v373 = (char *)sub_5714((uint64_t)(v364 + 732), v372);
          unint64_t v366 = (uint64_t *)v364[731];
          unint64_t v368 = (uint64_t *)v364[730];
        }
        else
        {
          unint64_t v373 = 0;
        }
        unint64_t v381 = (uint64_t *)&v373[8 * v369];
        unint64_t v382 = &v373[8 * v372];
        *unint64_t v381 = v365;
        unint64_t v375 = v381 + 1;
        while (v366 != v368)
        {
          uint64_t v383 = *--v366;
          *--unint64_t v381 = v383;
        }
LABEL_547:
        v364[730] = v381;
        v364[731] = v375;
        v364[732] = v382;
        if (v368) {
          operator delete(v368);
        }
        goto LABEL_549;
      }
    }
    *unint64_t v366 = v365;
    unint64_t v375 = v366 + 1;
LABEL_549:
    v364[731] = v375;
LABEL_550:
    int v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v388 = (char *)v386[734];
      unint64_t v396 = v386[735];
      if ((unint64_t)v388 >= v396)
      {
        unint64_t v390 = (char *)v386[733];
        uint64_t v398 = (v388 - v390) >> 3;
        if ((unint64_t)(v398 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v399 = v396 - (void)v390;
        unint64_t v400 = (uint64_t)(v396 - (void)v390) >> 2;
        if (v400 <= v398 + 1) {
          unint64_t v400 = v398 + 1;
        }
        if (v399 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v401 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v401 = v400;
        }
        if (v401)
        {
          unint64_t v402 = (char *)sub_5714((uint64_t)(v386 + 735), v401);
          unint64_t v388 = (char *)v386[734];
          unint64_t v390 = (char *)v386[733];
        }
        else
        {
          unint64_t v402 = 0;
        }
        unint64_t v403 = &v402[8 * v398];
        unint64_t v404 = &v402[8 * v401];
        *(void *)unint64_t v403 = v387;
        unsigned int v397 = v403 + 8;
        while (v388 != v390)
        {
          uint64_t v406 = *((void *)v388 - 1);
          v388 -= 8;
          *((void *)v403 - 1) = v406;
          v403 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1) {
        goto LABEL_582;
      }
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v388 = (char *)v386[734];
      unint64_t v389 = v386[735];
      if ((unint64_t)v388 >= v389)
      {
        unint64_t v390 = (char *)v386[733];
        uint64_t v391 = (v388 - v390) >> 3;
        if ((unint64_t)(v391 + 1) >> 61) {
          goto LABEL_616;
        }
        unint64_t v392 = v389 - (void)v390;
        unint64_t v393 = (uint64_t)(v389 - (void)v390) >> 2;
        if (v393 <= v391 + 1) {
          unint64_t v393 = v391 + 1;
        }
        if (v392 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v394 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v394 = v393;
        }
        if (v394)
        {
          unint64_t v395 = (char *)sub_5714((uint64_t)(v386 + 735), v394);
          unint64_t v388 = (char *)v386[734];
          unint64_t v390 = (char *)v386[733];
        }
        else
        {
          unint64_t v395 = 0;
        }
        unint64_t v403 = &v395[8 * v391];
        unint64_t v404 = &v395[8 * v394];
        *(void *)unint64_t v403 = v387;
        unsigned int v397 = v403 + 8;
        while (v388 != v390)
        {
          uint64_t v405 = *((void *)v388 - 1);
          v388 -= 8;
          *((void *)v403 - 1) = v405;
          v403 -= 8;
        }
LABEL_579:
        v386[733] = v403;
        v386[734] = v397;
        v386[735] = v404;
        if (v390) {
          operator delete(v390);
        }
        goto LABEL_581;
      }
    }
    *(void *)unint64_t v388 = v387;
    unsigned int v397 = v388 + 8;
LABEL_581:
    v386[734] = v397;
LABEL_582:
    int v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      uint64_t v419 = a1[2];
      uint64_t v409 = *(void **)a1[1];
      uint64_t v410 = *(_DWORD *)(v419 + 56) & 0x7FFFFLL;
      unint64_t v411 = (uint64_t *)v409[737];
      unint64_t v420 = v409[738];
      if ((unint64_t)v411 >= v420)
      {
        uint64_t v413 = (uint64_t *)v409[736];
        uint64_t v422 = v411 - v413;
        if (!((unint64_t)(v422 + 1) >> 61))
        {
          unint64_t v423 = v420 - (void)v413;
          unint64_t v424 = (uint64_t)(v420 - (void)v413) >> 2;
          if (v424 <= v422 + 1) {
            unint64_t v424 = v422 + 1;
          }
          if (v423 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v425 = v424;
          }
          if (v425)
          {
            unint64_t v426 = (char *)sub_5714((uint64_t)(v409 + 738), v425);
            unint64_t v411 = (uint64_t *)v409[737];
            uint64_t v413 = (uint64_t *)v409[736];
          }
          else
          {
            unint64_t v426 = 0;
          }
          uint64_t v427 = (uint64_t *)&v426[8 * v422];
          uint64_t v428 = &v426[8 * v425];
          *uint64_t v427 = v410;
          unint64_t v421 = v427 + 1;
          while (v411 != v413)
          {
            uint64_t v430 = *--v411;
            *--uint64_t v427 = v430;
          }
          goto LABEL_611;
        }
LABEL_616:
        sub_566C();
      }
    }
    else
    {
      if (v407 != 1)
      {
LABEL_614:
        *a2 = 1;
        return;
      }
      uint64_t v408 = a1[2];
      uint64_t v409 = *(void **)a1[1];
      uint64_t v410 = *(_DWORD *)(v408 + 56) & 0x7FFFFLL;
      unint64_t v411 = (uint64_t *)v409[737];
      unint64_t v412 = v409[738];
      if ((unint64_t)v411 >= v412)
      {
        uint64_t v413 = (uint64_t *)v409[736];
        uint64_t v414 = v411 - v413;
        if (!((unint64_t)(v414 + 1) >> 61))
        {
          unint64_t v415 = v412 - (void)v413;
          unint64_t v416 = (uint64_t)(v412 - (void)v413) >> 2;
          if (v416 <= v414 + 1) {
            unint64_t v416 = v414 + 1;
          }
          if (v415 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v417 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v417 = v416;
          }
          if (v417)
          {
            unint64_t v418 = (char *)sub_5714((uint64_t)(v409 + 738), v417);
            unint64_t v411 = (uint64_t *)v409[737];
            uint64_t v413 = (uint64_t *)v409[736];
          }
          else
          {
            unint64_t v418 = 0;
          }
          uint64_t v427 = (uint64_t *)&v418[8 * v414];
          uint64_t v428 = &v418[8 * v417];
          *uint64_t v427 = v410;
          unint64_t v421 = v427 + 1;
          while (v411 != v413)
          {
            uint64_t v429 = *--v411;
            *--uint64_t v427 = v429;
          }
LABEL_611:
          v409[736] = v427;
          v409[737] = v421;
          v409[738] = v428;
          if (v413) {
            operator delete(v413);
          }
          goto LABEL_613;
        }
        goto LABEL_616;
      }
    }
    *unint64_t v411 = v410;
    unint64_t v421 = v411 + 1;
LABEL_613:
    v409[737] = v421;
    goto LABEL_614;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[683] - 8) += *(_WORD *)(v17 + 36) & 0x7FFF;
    *(void *)(v19[686] - 8) += *(_DWORD *)(v17 + 68) & 0x7FFFF;
    *(void *)(v19[689] - 8) += *(_WORD *)(v17 + 42) & 0x7FFF;
    *(void *)(v19[692] - 8) += (unsigned __int16)*(_DWORD *)(v17 + 24) >> 1;
    *(void *)(v19[695] - 8) += *(_DWORD *)(v17 + 44) & 0x7FFFF;
    *(void *)(v19[698] - 8) += *(_WORD *)(v17 + 28) & 0x7FFF;
    *(void *)(v19[701] - 8) += *(_DWORD *)(v17 + 52) & 0x7FFFF;
    *(void *)(v19[704] - 8) += *(_WORD *)(v17 + 34) & 0x7FFF;
    *(void *)(v19[707] - 8) += *(_DWORD *)(v17 + 64) & 0x7FFFF;
    *(void *)(v19[710] - 8) += *(_WORD *)(v17 + 32) & 0x7FFF;
    uint64_t v20 = a1[2];
    uint64_t v21 = (void *)*v18;
    *(void *)(v21[713] - 8) += *(_DWORD *)(v20 + 60) & 0x7FFFF;
    *(void *)(v21[716] - 8) += *(_WORD *)(v20 + 40) & 0x7FFF;
    *(void *)(v21[719] - 8) += *(_DWORD *)(v20 + 76) & 0x7FFFF;
    *(void *)(v21[722] - 8) += *(_WORD *)(v20 + 38) & 0x7FFF;
    *(void *)(v21[725] - 8) += *(_DWORD *)(v20 + 72) & 0x7FFFF;
    *(void *)(v21[728] - 8) += *(_WORD *)(v20 + 26) & 0x7FFF;
    *(void *)(v21[731] - 8) += *(_DWORD *)(v20 + 48) & 0x7FFFF;
    *(void *)(v21[734] - 8) += *(_WORD *)(v20 + 30) & 0x7FFF;
    *(void *)(v21[737] - 8) += *(_DWORD *)(v20 + 56) & 0x7FFFF;
  }
}

void sub_1A21A8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v8 = (char *)v6[473];
      unint64_t v19 = v6[474];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (char *)v6[472];
        uint64_t v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 474), v24);
          unint64_t v8 = (char *)v6[473];
          uint64_t v10 = (char *)v6[472];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v8 = (char *)v6[473];
      unint64_t v9 = v6[474];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[472];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 474), v14);
          unint64_t v8 = (char *)v6[473];
          uint64_t v10 = (char *)v6[472];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = &v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[472] = v26;
        v6[473] = v20;
        v6[474] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)unint64_t v8 = v7;
    uint64_t v20 = v8 + 8;
LABEL_37:
    v6[473] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      int v33 = (uint64_t *)v31[476];
      unint64_t v41 = v31[477];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (uint64_t *)v31[475];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 477), v46);
          int v33 = (uint64_t *)v31[476];
          uint64_t v35 = (uint64_t *)v31[475];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      int v33 = (uint64_t *)v31[476];
      unint64_t v34 = v31[477];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (uint64_t *)v31[475];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 477), v39);
          int v33 = (uint64_t *)v31[476];
          uint64_t v35 = (uint64_t *)v31[475];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[475] = v48;
        v31[476] = v42;
        v31[477] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[476] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      int v55 = (char *)v53[479];
      unint64_t v63 = v53[480];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (char *)v53[478];
        uint64_t v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 480), v68);
          int v55 = (char *)v53[479];
          uint64_t v57 = (char *)v53[478];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = &v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v73 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      int v55 = (char *)v53[479];
      unint64_t v56 = v53[480];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (char *)v53[478];
        uint64_t v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 480), v61);
          int v55 = (char *)v53[479];
          uint64_t v57 = (char *)v53[478];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = &v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v72 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[478] = v70;
        v53[479] = v64;
        v53[480] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *(void *)int v55 = v54;
    unint64_t v64 = v55 + 8;
LABEL_101:
    v53[479] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      int v77 = (uint64_t *)v75[482];
      unint64_t v85 = v75[483];
      if ((unint64_t)v77 >= v85)
      {
        uint64_t v79 = (uint64_t *)v75[481];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 483), v90);
          int v77 = (uint64_t *)v75[482];
          uint64_t v79 = (uint64_t *)v75[481];
        }
        else
        {
          unint64_t v91 = 0;
        }
        unint64_t v92 = (uint64_t *)&v91[8 * v87];
        unint64_t v93 = &v91[8 * v90];
        *unint64_t v92 = v76;
        unint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v95 = *--v77;
          *--unint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      uint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      int v77 = (uint64_t *)v75[482];
      unint64_t v78 = v75[483];
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v79 = (uint64_t *)v75[481];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 483), v83);
          int v77 = (uint64_t *)v75[482];
          uint64_t v79 = (uint64_t *)v75[481];
        }
        else
        {
          unint64_t v84 = 0;
        }
        unint64_t v92 = (uint64_t *)&v84[8 * v80];
        unint64_t v93 = &v84[8 * v83];
        *unint64_t v92 = v76;
        unint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v94 = *--v77;
          *--unint64_t v92 = v94;
        }
LABEL_131:
        v75[481] = v92;
        v75[482] = v86;
        v75[483] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *int v77 = v76;
    unint64_t v86 = v77 + 1;
LABEL_133:
    v75[482] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      uint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      int v99 = (uint64_t *)v97[485];
      unint64_t v107 = v97[486];
      if ((unint64_t)v99 >= v107)
      {
        uint64_t v101 = (uint64_t *)v97[484];
        uint64_t v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v110 = v107 - (void)v101;
        unint64_t v111 = (uint64_t)(v107 - (void)v101) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v97 + 486), v112);
          int v99 = (uint64_t *)v97[485];
          uint64_t v101 = (uint64_t *)v97[484];
        }
        else
        {
          unint64_t v113 = 0;
        }
        unint64_t v114 = (uint64_t *)&v113[8 * v109];
        unint64_t v115 = &v113[8 * v112];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v117 = *--v99;
          *--unint64_t v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      uint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      int v99 = (uint64_t *)v97[485];
      unint64_t v100 = v97[486];
      if ((unint64_t)v99 >= v100)
      {
        uint64_t v101 = (uint64_t *)v97[484];
        uint64_t v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v103 = v100 - (void)v101;
        unint64_t v104 = (uint64_t)(v100 - (void)v101) >> 2;
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        if (v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v104;
        }
        if (v105)
        {
          unint64_t v106 = (char *)sub_5714((uint64_t)(v97 + 486), v105);
          int v99 = (uint64_t *)v97[485];
          uint64_t v101 = (uint64_t *)v97[484];
        }
        else
        {
          unint64_t v106 = 0;
        }
        unint64_t v114 = (uint64_t *)&v106[8 * v102];
        unint64_t v115 = &v106[8 * v105];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v116 = *--v99;
          *--unint64_t v114 = v116;
        }
LABEL_163:
        v97[484] = v114;
        v97[485] = v108;
        v97[486] = v115;
        if (v101) {
          operator delete(v101);
        }
        goto LABEL_165;
      }
    }
    *int v99 = v98;
    unint64_t v108 = v99 + 1;
LABEL_165:
    v97[485] = v108;
LABEL_166:
    int v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      uint64_t v130 = a1[1];
      uint64_t v120 = *(void **)v130;
      uint64_t v121 = *(unsigned __int16 *)(a1[2] + 46);
      int v122 = *(char **)(*(void *)v130 + 3904);
      unint64_t v131 = *(void *)(*(void *)v130 + 3912);
      if ((unint64_t)v122 >= v131)
      {
        uint64_t v124 = (char *)v120[487];
        uint64_t v133 = (v122 - v124) >> 3;
        if ((unint64_t)(v133 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v134 = v131 - (void)v124;
        unint64_t v135 = (uint64_t)(v131 - (void)v124) >> 2;
        if (v135 <= v133 + 1) {
          unint64_t v135 = v133 + 1;
        }
        if (v134 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v136 = v135;
        }
        if (v136)
        {
          unint64_t v137 = (char *)sub_5714((uint64_t)(v120 + 489), v136);
          int v122 = (char *)v120[488];
          uint64_t v124 = (char *)v120[487];
        }
        else
        {
          unint64_t v137 = 0;
        }
        unint64_t v138 = &v137[8 * v133];
        unint64_t v139 = &v137[8 * v136];
        *(void *)unint64_t v138 = v121;
        unint64_t v132 = v138 + 8;
        while (v122 != v124)
        {
          uint64_t v141 = *((void *)v122 - 1);
          v122 -= 8;
          *((void *)v138 - 1) = v141;
          v138 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1) {
        goto LABEL_198;
      }
      uint64_t v119 = a1[1];
      uint64_t v120 = *(void **)v119;
      uint64_t v121 = *(unsigned __int16 *)(a1[2] + 46);
      int v122 = *(char **)(*(void *)v119 + 3904);
      unint64_t v123 = *(void *)(*(void *)v119 + 3912);
      if ((unint64_t)v122 >= v123)
      {
        uint64_t v124 = (char *)v120[487];
        uint64_t v125 = (v122 - v124) >> 3;
        if ((unint64_t)(v125 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v126 = v123 - (void)v124;
        unint64_t v127 = (uint64_t)(v123 - (void)v124) >> 2;
        if (v127 <= v125 + 1) {
          unint64_t v127 = v125 + 1;
        }
        if (v126 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v128 = v127;
        }
        if (v128)
        {
          unint64_t v129 = (char *)sub_5714((uint64_t)(v120 + 489), v128);
          int v122 = (char *)v120[488];
          uint64_t v124 = (char *)v120[487];
        }
        else
        {
          unint64_t v129 = 0;
        }
        unint64_t v138 = &v129[8 * v125];
        unint64_t v139 = &v129[8 * v128];
        *(void *)unint64_t v138 = v121;
        unint64_t v132 = v138 + 8;
        while (v122 != v124)
        {
          uint64_t v140 = *((void *)v122 - 1);
          v122 -= 8;
          *((void *)v138 - 1) = v140;
          v138 -= 8;
        }
LABEL_195:
        v120[487] = v138;
        v120[488] = v132;
        v120[489] = v139;
        if (v124) {
          operator delete(v124);
        }
        goto LABEL_197;
      }
    }
    *(void *)int v122 = v121;
    unint64_t v132 = v122 + 8;
LABEL_197:
    v120[488] = v132;
LABEL_198:
    int v142 = 1 << *(_DWORD *)(v3 + 48);
    if (v142 == 2)
    {
      uint64_t v154 = a1[1];
      int v144 = *(void **)v154;
      uint64_t v145 = *(unsigned __int16 *)(a1[2] + 44);
      uint64_t v146 = *(char **)(*(void *)v154 + 3928);
      unint64_t v155 = *(void *)(*(void *)v154 + 3936);
      if ((unint64_t)v146 >= v155)
      {
        unint64_t v148 = (char *)v144[490];
        uint64_t v157 = (v146 - v148) >> 3;
        if ((unint64_t)(v157 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v158 = v155 - (void)v148;
        unint64_t v159 = (uint64_t)(v155 - (void)v148) >> 2;
        if (v159 <= v157 + 1) {
          unint64_t v159 = v157 + 1;
        }
        if (v158 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v160 = v159;
        }
        if (v160)
        {
          unint64_t v161 = (char *)sub_5714((uint64_t)(v144 + 492), v160);
          uint64_t v146 = (char *)v144[491];
          unint64_t v148 = (char *)v144[490];
        }
        else
        {
          unint64_t v161 = 0;
        }
        unsigned int v162 = &v161[8 * v157];
        uint64_t v163 = &v161[8 * v160];
        *(void *)unsigned int v162 = v145;
        uint64_t v156 = v162 + 8;
        while (v146 != v148)
        {
          uint64_t v165 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v162 - 1) = v165;
          v162 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v142 != 1) {
        goto LABEL_230;
      }
      uint64_t v143 = a1[1];
      int v144 = *(void **)v143;
      uint64_t v145 = *(unsigned __int16 *)(a1[2] + 44);
      uint64_t v146 = *(char **)(*(void *)v143 + 3928);
      unint64_t v147 = *(void *)(*(void *)v143 + 3936);
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v148 = (char *)v144[490];
        uint64_t v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_264;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          unint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 492), v152);
          uint64_t v146 = (char *)v144[491];
          unint64_t v148 = (char *)v144[490];
        }
        else
        {
          unint64_t v153 = 0;
        }
        unsigned int v162 = &v153[8 * v149];
        uint64_t v163 = &v153[8 * v152];
        *(void *)unsigned int v162 = v145;
        uint64_t v156 = v162 + 8;
        while (v146 != v148)
        {
          uint64_t v164 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v162 - 1) = v164;
          v162 -= 8;
        }
LABEL_227:
        v144[490] = v162;
        v144[491] = v156;
        v144[492] = v163;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *(void *)uint64_t v146 = v145;
    uint64_t v156 = v146 + 8;
LABEL_229:
    v144[491] = v156;
LABEL_230:
    int v166 = 1 << *(_DWORD *)(v3 + 48);
    if (v166 == 2)
    {
      uint64_t v179 = a1[1];
      uint64_t v180 = a1[2];
      unint64_t v169 = *(void **)v179;
      uint64_t v170 = *(unsigned __int16 *)(v180 + 28);
      uint64_t v171 = *(char **)(*(void *)v179 + 3952);
      unint64_t v181 = *(void *)(*(void *)v179 + 3960);
      if ((unint64_t)v171 >= v181)
      {
        unint64_t v173 = (char *)v169[493];
        uint64_t v183 = (v171 - v173) >> 3;
        if (!((unint64_t)(v183 + 1) >> 61))
        {
          unint64_t v184 = v181 - (void)v173;
          unint64_t v185 = (uint64_t)(v181 - (void)v173) >> 2;
          if (v185 <= v183 + 1) {
            unint64_t v185 = v183 + 1;
          }
          if (v184 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v186 = v185;
          }
          if (v186)
          {
            int v187 = (char *)sub_5714((uint64_t)(v169 + 495), v186);
            uint64_t v171 = (char *)v169[494];
            unint64_t v173 = (char *)v169[493];
          }
          else
          {
            int v187 = 0;
          }
          int v188 = &v187[8 * v183];
          uint64_t v189 = &v187[8 * v186];
          *(void *)int v188 = v170;
          unint64_t v182 = v188 + 8;
          while (v171 != v173)
          {
            uint64_t v191 = *((void *)v171 - 1);
            v171 -= 8;
            *((void *)v188 - 1) = v191;
            v188 -= 8;
          }
          goto LABEL_259;
        }
LABEL_264:
        sub_566C();
      }
    }
    else
    {
      if (v166 != 1)
      {
LABEL_262:
        *a2 = 1;
        return;
      }
      uint64_t v167 = a1[1];
      uint64_t v168 = a1[2];
      unint64_t v169 = *(void **)v167;
      uint64_t v170 = *(unsigned __int16 *)(v168 + 28);
      uint64_t v171 = *(char **)(*(void *)v167 + 3952);
      unint64_t v172 = *(void *)(*(void *)v167 + 3960);
      if ((unint64_t)v171 >= v172)
      {
        unint64_t v173 = (char *)v169[493];
        uint64_t v174 = (v171 - v173) >> 3;
        if (!((unint64_t)(v174 + 1) >> 61))
        {
          unint64_t v175 = v172 - (void)v173;
          unint64_t v176 = (uint64_t)(v172 - (void)v173) >> 2;
          if (v176 <= v174 + 1) {
            unint64_t v176 = v174 + 1;
          }
          if (v175 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v177 = v176;
          }
          if (v177)
          {
            uint64_t v178 = (char *)sub_5714((uint64_t)(v169 + 495), v177);
            uint64_t v171 = (char *)v169[494];
            unint64_t v173 = (char *)v169[493];
          }
          else
          {
            uint64_t v178 = 0;
          }
          int v188 = &v178[8 * v174];
          uint64_t v189 = &v178[8 * v177];
          *(void *)int v188 = v170;
          unint64_t v182 = v188 + 8;
          while (v171 != v173)
          {
            uint64_t v190 = *((void *)v171 - 1);
            v171 -= 8;
            *((void *)v188 - 1) = v190;
            v188 -= 8;
          }
LABEL_259:
          v169[493] = v188;
          v169[494] = v182;
          v169[495] = v189;
          if (v173) {
            operator delete(v173);
          }
          goto LABEL_261;
        }
        goto LABEL_264;
      }
    }
    *(void *)uint64_t v171 = v170;
    unint64_t v182 = v171 + 8;
LABEL_261:
    v169[494] = v182;
    goto LABEL_262;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[473] - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
    *(void *)(v18[476] - 8) += *(_DWORD *)(v17 + 40) & 0x1FFFF;
    *(void *)(v18[479] - 8) += *(_WORD *)(v17 + 26) & 0x7FFF;
    *(void *)(v18[482] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
    *(void *)(v18[485] - 8) += *(_DWORD *)(v17 + 32) & 0x3FFFF;
    *(void *)(v18[488] - 8) += *(unsigned __int16 *)(v17 + 46);
    *(void *)(v18[491] - 8) += *(unsigned __int16 *)(v17 + 44);
    *(void *)(v18[494] - 8) += *(unsigned __int16 *)(v17 + 28);
  }
}

void sub_1A2EC4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      unint64_t v7 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
      unint64_t v8 = (unint64_t *)v6[416];
      unint64_t v23 = v6[417];
      if ((unint64_t)v8 >= v23)
      {
        uint64_t v10 = (unint64_t *)v6[415];
        uint64_t v25 = v8 - v10;
        if ((unint64_t)(v25 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v26 = v23 - (void)v10;
        unint64_t v27 = (uint64_t)(v23 - (void)v10) >> 2;
        if (v27 <= v25 + 1) {
          unint64_t v27 = v25 + 1;
        }
        if (v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          uint64_t v29 = (char *)sub_5714((uint64_t)(v6 + 417), v28);
          unint64_t v8 = (unint64_t *)v6[416];
          uint64_t v10 = (unint64_t *)v6[415];
        }
        else
        {
          uint64_t v29 = 0;
        }
        int v30 = (unint64_t *)&v29[8 * v25];
        uint64_t v31 = &v29[8 * v28];
        unint64_t *v30 = v7;
        unint64_t v24 = v30 + 1;
        while (v8 != v10)
        {
          unint64_t v33 = *--v8;
          *--int v30 = v33;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      unint64_t v7 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
      unint64_t v8 = (unint64_t *)v6[416];
      unint64_t v9 = v6[417];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (unint64_t *)v6[415];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 417), v14);
          unint64_t v8 = (unint64_t *)v6[416];
          uint64_t v10 = (unint64_t *)v6[415];
        }
        else
        {
          unint64_t v15 = 0;
        }
        int v30 = (unint64_t *)&v15[8 * v11];
        uint64_t v31 = &v15[8 * v14];
        unint64_t *v30 = v7;
        unint64_t v24 = v30 + 1;
        while (v8 != v10)
        {
          unint64_t v32 = *--v8;
          *--int v30 = v32;
        }
LABEL_35:
        v6[415] = v30;
        v6[416] = v24;
        v6[417] = v31;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *unint64_t v8 = v7;
    unint64_t v24 = v8 + 1;
LABEL_37:
    v6[416] = v24;
LABEL_38:
    int v34 = 1 << *(_DWORD *)(v3 + 48);
    if (v34 == 2)
    {
      uint64_t v35 = *(void **)a1[1];
      uint64_t v36 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      unint64_t v37 = (uint64_t *)v35[419];
      unint64_t v45 = v35[420];
      if ((unint64_t)v37 >= v45)
      {
        unint64_t v39 = (uint64_t *)v35[418];
        uint64_t v47 = v37 - v39;
        if ((unint64_t)(v47 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v48 = v45 - (void)v39;
        unint64_t v49 = (uint64_t)(v45 - (void)v39) >> 2;
        if (v49 <= v47 + 1) {
          unint64_t v49 = v47 + 1;
        }
        if (v48 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50)
        {
          uint64_t v51 = (char *)sub_5714((uint64_t)(v35 + 420), v50);
          unint64_t v37 = (uint64_t *)v35[419];
          unint64_t v39 = (uint64_t *)v35[418];
        }
        else
        {
          uint64_t v51 = 0;
        }
        int v52 = (uint64_t *)&v51[8 * v47];
        uint64_t v53 = &v51[8 * v50];
        *int v52 = v36;
        unint64_t v46 = v52 + 1;
        while (v37 != v39)
        {
          uint64_t v55 = *--v37;
          *--int v52 = v55;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v34 != 1) {
        goto LABEL_70;
      }
      uint64_t v35 = *(void **)a1[1];
      uint64_t v36 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      unint64_t v37 = (uint64_t *)v35[419];
      unint64_t v38 = v35[420];
      if ((unint64_t)v37 >= v38)
      {
        unint64_t v39 = (uint64_t *)v35[418];
        uint64_t v40 = v37 - v39;
        if ((unint64_t)(v40 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v41 = v38 - (void)v39;
        unint64_t v42 = (uint64_t)(v38 - (void)v39) >> 2;
        if (v42 <= v40 + 1) {
          unint64_t v42 = v40 + 1;
        }
        if (v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43)
        {
          unint64_t v44 = (char *)sub_5714((uint64_t)(v35 + 420), v43);
          unint64_t v37 = (uint64_t *)v35[419];
          unint64_t v39 = (uint64_t *)v35[418];
        }
        else
        {
          unint64_t v44 = 0;
        }
        int v52 = (uint64_t *)&v44[8 * v40];
        uint64_t v53 = &v44[8 * v43];
        *int v52 = v36;
        unint64_t v46 = v52 + 1;
        while (v37 != v39)
        {
          uint64_t v54 = *--v37;
          *--int v52 = v54;
        }
LABEL_67:
        v35[418] = v52;
        v35[419] = v46;
        v35[420] = v53;
        if (v39) {
          operator delete(v39);
        }
        goto LABEL_69;
      }
    }
    *unint64_t v37 = v36;
    unint64_t v46 = v37 + 1;
LABEL_69:
    v35[419] = v46;
LABEL_70:
    int v56 = 1 << *(_DWORD *)(v3 + 48);
    if (v56 == 2)
    {
      uint64_t v57 = *(void **)a1[1];
      uint64_t v58 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v59 = (char *)v57[422];
      unint64_t v67 = v57[423];
      if ((unint64_t)v59 >= v67)
      {
        unint64_t v61 = (char *)v57[421];
        uint64_t v69 = (v59 - v61) >> 3;
        if ((unint64_t)(v69 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v70 = v67 - (void)v61;
        unint64_t v71 = (uint64_t)(v67 - (void)v61) >> 2;
        if (v71 <= v69 + 1) {
          unint64_t v71 = v69 + 1;
        }
        if (v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v71;
        }
        if (v72)
        {
          uint64_t v73 = (char *)sub_5714((uint64_t)(v57 + 423), v72);
          unint64_t v59 = (char *)v57[422];
          unint64_t v61 = (char *)v57[421];
        }
        else
        {
          uint64_t v73 = 0;
        }
        int v74 = &v73[8 * v69];
        uint64_t v75 = &v73[8 * v72];
        *(void *)int v74 = v58;
        unint64_t v68 = v74 + 8;
        while (v59 != v61)
        {
          uint64_t v77 = *((void *)v59 - 1);
          v59 -= 8;
          *((void *)v74 - 1) = v77;
          v74 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v56 != 1) {
        goto LABEL_102;
      }
      uint64_t v57 = *(void **)a1[1];
      uint64_t v58 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v59 = (char *)v57[422];
      unint64_t v60 = v57[423];
      if ((unint64_t)v59 >= v60)
      {
        unint64_t v61 = (char *)v57[421];
        uint64_t v62 = (v59 - v61) >> 3;
        if ((unint64_t)(v62 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v63 = v60 - (void)v61;
        unint64_t v64 = (uint64_t)(v60 - (void)v61) >> 2;
        if (v64 <= v62 + 1) {
          unint64_t v64 = v62 + 1;
        }
        if (v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v64;
        }
        if (v65)
        {
          unint64_t v66 = (char *)sub_5714((uint64_t)(v57 + 423), v65);
          unint64_t v59 = (char *)v57[422];
          unint64_t v61 = (char *)v57[421];
        }
        else
        {
          unint64_t v66 = 0;
        }
        int v74 = &v66[8 * v62];
        uint64_t v75 = &v66[8 * v65];
        *(void *)int v74 = v58;
        unint64_t v68 = v74 + 8;
        while (v59 != v61)
        {
          uint64_t v76 = *((void *)v59 - 1);
          v59 -= 8;
          *((void *)v74 - 1) = v76;
          v74 -= 8;
        }
LABEL_99:
        v57[421] = v74;
        v57[422] = v68;
        v57[423] = v75;
        if (v61) {
          operator delete(v61);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v59 = v58;
    unint64_t v68 = v59 + 8;
LABEL_101:
    v57[422] = v68;
LABEL_102:
    int v78 = 1 << *(_DWORD *)(v3 + 48);
    if (v78 == 2)
    {
      uint64_t v79 = *(void **)a1[1];
      uint64_t v80 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v81 = (char *)v79[425];
      unint64_t v89 = v79[426];
      if ((unint64_t)v81 >= v89)
      {
        unint64_t v83 = (char *)v79[424];
        uint64_t v91 = (v81 - v83) >> 3;
        if ((unint64_t)(v91 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v92 = v89 - (void)v83;
        unint64_t v93 = (uint64_t)(v89 - (void)v83) >> 2;
        if (v93 <= v91 + 1) {
          unint64_t v93 = v91 + 1;
        }
        if (v92 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v94 = v93;
        }
        if (v94)
        {
          uint64_t v95 = (char *)sub_5714((uint64_t)(v79 + 426), v94);
          unint64_t v81 = (char *)v79[425];
          unint64_t v83 = (char *)v79[424];
        }
        else
        {
          uint64_t v95 = 0;
        }
        int v96 = &v95[8 * v91];
        uint64_t v97 = &v95[8 * v94];
        *(void *)int v96 = v80;
        unint64_t v90 = v96 + 8;
        while (v81 != v83)
        {
          uint64_t v99 = *((void *)v81 - 1);
          v81 -= 8;
          *((void *)v96 - 1) = v99;
          v96 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v78 != 1) {
        goto LABEL_134;
      }
      uint64_t v79 = *(void **)a1[1];
      uint64_t v80 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v81 = (char *)v79[425];
      unint64_t v82 = v79[426];
      if ((unint64_t)v81 >= v82)
      {
        unint64_t v83 = (char *)v79[424];
        uint64_t v84 = (v81 - v83) >> 3;
        if ((unint64_t)(v84 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v85 = v82 - (void)v83;
        unint64_t v86 = (uint64_t)(v82 - (void)v83) >> 2;
        if (v86 <= v84 + 1) {
          unint64_t v86 = v84 + 1;
        }
        if (v85 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v86;
        }
        if (v87)
        {
          unint64_t v88 = (char *)sub_5714((uint64_t)(v79 + 426), v87);
          unint64_t v81 = (char *)v79[425];
          unint64_t v83 = (char *)v79[424];
        }
        else
        {
          unint64_t v88 = 0;
        }
        int v96 = &v88[8 * v84];
        uint64_t v97 = &v88[8 * v87];
        *(void *)int v96 = v80;
        unint64_t v90 = v96 + 8;
        while (v81 != v83)
        {
          uint64_t v98 = *((void *)v81 - 1);
          v81 -= 8;
          *((void *)v96 - 1) = v98;
          v96 -= 8;
        }
LABEL_131:
        v79[424] = v96;
        v79[425] = v90;
        v79[426] = v97;
        if (v83) {
          operator delete(v83);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v81 = v80;
    unint64_t v90 = v81 + 8;
LABEL_133:
    v79[425] = v90;
LABEL_134:
    int v100 = 1 << *(_DWORD *)(v3 + 48);
    if (v100 == 2)
    {
      uint64_t v101 = *(void **)a1[1];
      uint64_t v102 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v103 = (char *)v101[428];
      unint64_t v111 = v101[429];
      if ((unint64_t)v103 >= v111)
      {
        unint64_t v105 = (char *)v101[427];
        uint64_t v113 = (v103 - v105) >> 3;
        if ((unint64_t)(v113 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v114 = v111 - (void)v105;
        unint64_t v115 = (uint64_t)(v111 - (void)v105) >> 2;
        if (v115 <= v113 + 1) {
          unint64_t v115 = v113 + 1;
        }
        if (v114 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v116 = v115;
        }
        if (v116)
        {
          uint64_t v117 = (char *)sub_5714((uint64_t)(v101 + 429), v116);
          unint64_t v103 = (char *)v101[428];
          unint64_t v105 = (char *)v101[427];
        }
        else
        {
          uint64_t v117 = 0;
        }
        int v118 = &v117[8 * v113];
        uint64_t v119 = &v117[8 * v116];
        *(void *)int v118 = v102;
        unint64_t v112 = v118 + 8;
        while (v103 != v105)
        {
          uint64_t v121 = *((void *)v103 - 1);
          v103 -= 8;
          *((void *)v118 - 1) = v121;
          v118 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v100 != 1) {
        goto LABEL_166;
      }
      uint64_t v101 = *(void **)a1[1];
      uint64_t v102 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v103 = (char *)v101[428];
      unint64_t v104 = v101[429];
      if ((unint64_t)v103 >= v104)
      {
        unint64_t v105 = (char *)v101[427];
        uint64_t v106 = (v103 - v105) >> 3;
        if ((unint64_t)(v106 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v107 = v104 - (void)v105;
        unint64_t v108 = (uint64_t)(v104 - (void)v105) >> 2;
        if (v108 <= v106 + 1) {
          unint64_t v108 = v106 + 1;
        }
        if (v107 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v109 = v108;
        }
        if (v109)
        {
          unint64_t v110 = (char *)sub_5714((uint64_t)(v101 + 429), v109);
          unint64_t v103 = (char *)v101[428];
          unint64_t v105 = (char *)v101[427];
        }
        else
        {
          unint64_t v110 = 0;
        }
        int v118 = &v110[8 * v106];
        uint64_t v119 = &v110[8 * v109];
        *(void *)int v118 = v102;
        unint64_t v112 = v118 + 8;
        while (v103 != v105)
        {
          uint64_t v120 = *((void *)v103 - 1);
          v103 -= 8;
          *((void *)v118 - 1) = v120;
          v118 -= 8;
        }
LABEL_163:
        v101[427] = v118;
        v101[428] = v112;
        v101[429] = v119;
        if (v105) {
          operator delete(v105);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v103 = v102;
    unint64_t v112 = v103 + 8;
LABEL_165:
    v101[428] = v112;
LABEL_166:
    int v122 = 1 << *(_DWORD *)(v3 + 48);
    if (v122 == 2)
    {
      unint64_t v123 = *(void **)a1[1];
      uint64_t v124 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v125 = (char *)v123[431];
      unint64_t v133 = v123[432];
      if ((unint64_t)v125 >= v133)
      {
        unint64_t v127 = (char *)v123[430];
        uint64_t v135 = (v125 - v127) >> 3;
        if ((unint64_t)(v135 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v136 = v133 - (void)v127;
        unint64_t v137 = (uint64_t)(v133 - (void)v127) >> 2;
        if (v137 <= v135 + 1) {
          unint64_t v137 = v135 + 1;
        }
        if (v136 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v138 = v137;
        }
        if (v138)
        {
          unint64_t v139 = (char *)sub_5714((uint64_t)(v123 + 432), v138);
          uint64_t v125 = (char *)v123[431];
          unint64_t v127 = (char *)v123[430];
        }
        else
        {
          unint64_t v139 = 0;
        }
        uint64_t v140 = &v139[8 * v135];
        uint64_t v141 = &v139[8 * v138];
        *(void *)uint64_t v140 = v124;
        unint64_t v134 = v140 + 8;
        while (v125 != v127)
        {
          uint64_t v143 = *((void *)v125 - 1);
          v125 -= 8;
          *((void *)v140 - 1) = v143;
          v140 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v122 != 1) {
        goto LABEL_198;
      }
      unint64_t v123 = *(void **)a1[1];
      uint64_t v124 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v125 = (char *)v123[431];
      unint64_t v126 = v123[432];
      if ((unint64_t)v125 >= v126)
      {
        unint64_t v127 = (char *)v123[430];
        uint64_t v128 = (v125 - v127) >> 3;
        if ((unint64_t)(v128 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v129 = v126 - (void)v127;
        unint64_t v130 = (uint64_t)(v126 - (void)v127) >> 2;
        if (v130 <= v128 + 1) {
          unint64_t v130 = v128 + 1;
        }
        if (v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v131 = v130;
        }
        if (v131)
        {
          unint64_t v132 = (char *)sub_5714((uint64_t)(v123 + 432), v131);
          uint64_t v125 = (char *)v123[431];
          unint64_t v127 = (char *)v123[430];
        }
        else
        {
          unint64_t v132 = 0;
        }
        uint64_t v140 = &v132[8 * v128];
        uint64_t v141 = &v132[8 * v131];
        *(void *)uint64_t v140 = v124;
        unint64_t v134 = v140 + 8;
        while (v125 != v127)
        {
          uint64_t v142 = *((void *)v125 - 1);
          v125 -= 8;
          *((void *)v140 - 1) = v142;
          v140 -= 8;
        }
LABEL_195:
        v123[430] = v140;
        v123[431] = v134;
        v123[432] = v141;
        if (v127) {
          operator delete(v127);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v125 = v124;
    unint64_t v134 = v125 + 8;
LABEL_197:
    v123[431] = v134;
LABEL_198:
    int v144 = 1 << *(_DWORD *)(v3 + 48);
    if (v144 == 2)
    {
      uint64_t v156 = a1[1];
      uint64_t v146 = *(void **)v156;
      uint64_t v147 = *(unsigned __int16 *)(a1[2] + 60);
      unint64_t v148 = *(char **)(*(void *)v156 + 3472);
      unint64_t v157 = *(void *)(*(void *)v156 + 3480);
      if ((unint64_t)v148 >= v157)
      {
        unint64_t v150 = (char *)v146[433];
        uint64_t v159 = (v148 - v150) >> 3;
        if ((unint64_t)(v159 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v160 = v157 - (void)v150;
        unint64_t v161 = (uint64_t)(v157 - (void)v150) >> 2;
        if (v161 <= v159 + 1) {
          unint64_t v161 = v159 + 1;
        }
        if (v160 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v162 = v161;
        }
        if (v162)
        {
          uint64_t v163 = (char *)sub_5714((uint64_t)(v146 + 435), v162);
          unint64_t v148 = (char *)v146[434];
          unint64_t v150 = (char *)v146[433];
        }
        else
        {
          uint64_t v163 = 0;
        }
        uint64_t v164 = &v163[8 * v159];
        uint64_t v165 = &v163[8 * v162];
        *(void *)uint64_t v164 = v147;
        unint64_t v158 = v164 + 8;
        while (v148 != v150)
        {
          uint64_t v167 = *((void *)v148 - 1);
          v148 -= 8;
          *((void *)v164 - 1) = v167;
          v164 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v144 != 1) {
        goto LABEL_230;
      }
      uint64_t v145 = a1[1];
      uint64_t v146 = *(void **)v145;
      uint64_t v147 = *(unsigned __int16 *)(a1[2] + 60);
      unint64_t v148 = *(char **)(*(void *)v145 + 3472);
      unint64_t v149 = *(void *)(*(void *)v145 + 3480);
      if ((unint64_t)v148 >= v149)
      {
        unint64_t v150 = (char *)v146[433];
        uint64_t v151 = (v148 - v150) >> 3;
        if ((unint64_t)(v151 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v152 = v149 - (void)v150;
        unint64_t v153 = (uint64_t)(v149 - (void)v150) >> 2;
        if (v153 <= v151 + 1) {
          unint64_t v153 = v151 + 1;
        }
        if (v152 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v154 = v153;
        }
        if (v154)
        {
          unint64_t v155 = (char *)sub_5714((uint64_t)(v146 + 435), v154);
          unint64_t v148 = (char *)v146[434];
          unint64_t v150 = (char *)v146[433];
        }
        else
        {
          unint64_t v155 = 0;
        }
        uint64_t v164 = &v155[8 * v151];
        uint64_t v165 = &v155[8 * v154];
        *(void *)uint64_t v164 = v147;
        unint64_t v158 = v164 + 8;
        while (v148 != v150)
        {
          uint64_t v166 = *((void *)v148 - 1);
          v148 -= 8;
          *((void *)v164 - 1) = v166;
          v164 -= 8;
        }
LABEL_227:
        v146[433] = v164;
        v146[434] = v158;
        v146[435] = v165;
        if (v150) {
          operator delete(v150);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v148 = v147;
    unint64_t v158 = v148 + 8;
LABEL_229:
    v146[434] = v158;
LABEL_230:
    int v168 = 1 << *(_DWORD *)(v3 + 48);
    if (v168 == 2)
    {
      unint64_t v169 = *(void **)a1[1];
      uint64_t v170 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      uint64_t v171 = (uint64_t *)v169[437];
      unint64_t v179 = v169[438];
      if ((unint64_t)v171 >= v179)
      {
        unint64_t v173 = (uint64_t *)v169[436];
        uint64_t v181 = v171 - v173;
        if ((unint64_t)(v181 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v182 = v179 - (void)v173;
        unint64_t v183 = (uint64_t)(v179 - (void)v173) >> 2;
        if (v183 <= v181 + 1) {
          unint64_t v183 = v181 + 1;
        }
        if (v182 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v184 = v183;
        }
        if (v184)
        {
          unint64_t v185 = (char *)sub_5714((uint64_t)(v169 + 438), v184);
          uint64_t v171 = (uint64_t *)v169[437];
          unint64_t v173 = (uint64_t *)v169[436];
        }
        else
        {
          unint64_t v185 = 0;
        }
        unint64_t v186 = (uint64_t *)&v185[8 * v181];
        int v187 = &v185[8 * v184];
        *unint64_t v186 = v170;
        uint64_t v180 = v186 + 1;
        while (v171 != v173)
        {
          uint64_t v189 = *--v171;
          *--unint64_t v186 = v189;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v168 != 1) {
        goto LABEL_262;
      }
      unint64_t v169 = *(void **)a1[1];
      uint64_t v170 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      uint64_t v171 = (uint64_t *)v169[437];
      unint64_t v172 = v169[438];
      if ((unint64_t)v171 >= v172)
      {
        unint64_t v173 = (uint64_t *)v169[436];
        uint64_t v174 = v171 - v173;
        if ((unint64_t)(v174 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v175 = v172 - (void)v173;
        unint64_t v176 = (uint64_t)(v172 - (void)v173) >> 2;
        if (v176 <= v174 + 1) {
          unint64_t v176 = v174 + 1;
        }
        if (v175 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v177 = v176;
        }
        if (v177)
        {
          uint64_t v178 = (char *)sub_5714((uint64_t)(v169 + 438), v177);
          uint64_t v171 = (uint64_t *)v169[437];
          unint64_t v173 = (uint64_t *)v169[436];
        }
        else
        {
          uint64_t v178 = 0;
        }
        unint64_t v186 = (uint64_t *)&v178[8 * v174];
        int v187 = &v178[8 * v177];
        *unint64_t v186 = v170;
        uint64_t v180 = v186 + 1;
        while (v171 != v173)
        {
          uint64_t v188 = *--v171;
          *--unint64_t v186 = v188;
        }
LABEL_259:
        v169[436] = v186;
        v169[437] = v180;
        v169[438] = v187;
        if (v173) {
          operator delete(v173);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v171 = v170;
    uint64_t v180 = v171 + 1;
LABEL_261:
    v169[437] = v180;
LABEL_262:
    int v190 = 1 << *(_DWORD *)(v3 + 48);
    if (v190 == 2)
    {
      uint64_t v191 = *(void **)a1[1];
      uint64_t v192 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      uint64_t v193 = (uint64_t *)v191[440];
      unint64_t v201 = v191[441];
      if ((unint64_t)v193 >= v201)
      {
        unint64_t v195 = (uint64_t *)v191[439];
        uint64_t v203 = v193 - v195;
        if ((unint64_t)(v203 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v204 = v201 - (void)v195;
        unint64_t v205 = (uint64_t)(v201 - (void)v195) >> 2;
        if (v205 <= v203 + 1) {
          unint64_t v205 = v203 + 1;
        }
        if (v204 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v206 = v205;
        }
        if (v206)
        {
          uint64_t v207 = (char *)sub_5714((uint64_t)(v191 + 441), v206);
          uint64_t v193 = (uint64_t *)v191[440];
          unint64_t v195 = (uint64_t *)v191[439];
        }
        else
        {
          uint64_t v207 = 0;
        }
        uint64_t v208 = (uint64_t *)&v207[8 * v203];
        int v209 = &v207[8 * v206];
        *uint64_t v208 = v192;
        unint64_t v202 = v208 + 1;
        while (v193 != v195)
        {
          uint64_t v211 = *--v193;
          *--uint64_t v208 = v211;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v190 != 1) {
        goto LABEL_294;
      }
      uint64_t v191 = *(void **)a1[1];
      uint64_t v192 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      uint64_t v193 = (uint64_t *)v191[440];
      unint64_t v194 = v191[441];
      if ((unint64_t)v193 >= v194)
      {
        unint64_t v195 = (uint64_t *)v191[439];
        uint64_t v196 = v193 - v195;
        if ((unint64_t)(v196 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v197 = v194 - (void)v195;
        unint64_t v198 = (uint64_t)(v194 - (void)v195) >> 2;
        if (v198 <= v196 + 1) {
          unint64_t v198 = v196 + 1;
        }
        if (v197 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v199 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v199 = v198;
        }
        if (v199)
        {
          uint64_t v200 = (char *)sub_5714((uint64_t)(v191 + 441), v199);
          uint64_t v193 = (uint64_t *)v191[440];
          unint64_t v195 = (uint64_t *)v191[439];
        }
        else
        {
          uint64_t v200 = 0;
        }
        uint64_t v208 = (uint64_t *)&v200[8 * v196];
        int v209 = &v200[8 * v199];
        *uint64_t v208 = v192;
        unint64_t v202 = v208 + 1;
        while (v193 != v195)
        {
          uint64_t v210 = *--v193;
          *--uint64_t v208 = v210;
        }
LABEL_291:
        v191[439] = v208;
        v191[440] = v202;
        v191[441] = v209;
        if (v195) {
          operator delete(v195);
        }
        goto LABEL_293;
      }
    }
    uint64_t *v193 = v192;
    unint64_t v202 = v193 + 1;
LABEL_293:
    v191[440] = v202;
LABEL_294:
    int v212 = 1 << *(_DWORD *)(v3 + 48);
    if (v212 == 2)
    {
      unint64_t v213 = *(void **)a1[1];
      uint64_t v214 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      uint64_t v215 = (uint64_t *)v213[443];
      unint64_t v223 = v213[444];
      if ((unint64_t)v215 >= v223)
      {
        unint64_t v217 = (uint64_t *)v213[442];
        uint64_t v225 = v215 - v217;
        if ((unint64_t)(v225 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v226 = v223 - (void)v217;
        unint64_t v227 = (uint64_t)(v223 - (void)v217) >> 2;
        if (v227 <= v225 + 1) {
          unint64_t v227 = v225 + 1;
        }
        if (v226 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v228 = v227;
        }
        if (v228)
        {
          uint64_t v229 = (char *)sub_5714((uint64_t)(v213 + 444), v228);
          uint64_t v215 = (uint64_t *)v213[443];
          unint64_t v217 = (uint64_t *)v213[442];
        }
        else
        {
          uint64_t v229 = 0;
        }
        uint64_t v230 = (uint64_t *)&v229[8 * v225];
        int v231 = &v229[8 * v228];
        *uint64_t v230 = v214;
        unint64_t v224 = v230 + 1;
        while (v215 != v217)
        {
          uint64_t v233 = *--v215;
          *--uint64_t v230 = v233;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v212 != 1) {
        goto LABEL_326;
      }
      unint64_t v213 = *(void **)a1[1];
      uint64_t v214 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      uint64_t v215 = (uint64_t *)v213[443];
      unint64_t v216 = v213[444];
      if ((unint64_t)v215 >= v216)
      {
        unint64_t v217 = (uint64_t *)v213[442];
        uint64_t v218 = v215 - v217;
        if ((unint64_t)(v218 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v219 = v216 - (void)v217;
        unint64_t v220 = (uint64_t)(v216 - (void)v217) >> 2;
        if (v220 <= v218 + 1) {
          unint64_t v220 = v218 + 1;
        }
        if (v219 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v221 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v221 = v220;
        }
        if (v221)
        {
          uint64_t v222 = (char *)sub_5714((uint64_t)(v213 + 444), v221);
          uint64_t v215 = (uint64_t *)v213[443];
          unint64_t v217 = (uint64_t *)v213[442];
        }
        else
        {
          uint64_t v222 = 0;
        }
        uint64_t v230 = (uint64_t *)&v222[8 * v218];
        int v231 = &v222[8 * v221];
        *uint64_t v230 = v214;
        unint64_t v224 = v230 + 1;
        while (v215 != v217)
        {
          uint64_t v232 = *--v215;
          *--uint64_t v230 = v232;
        }
LABEL_323:
        v213[442] = v230;
        v213[443] = v224;
        v213[444] = v231;
        if (v217) {
          operator delete(v217);
        }
        goto LABEL_325;
      }
    }
    *uint64_t v215 = v214;
    unint64_t v224 = v215 + 1;
LABEL_325:
    v213[443] = v224;
LABEL_326:
    int v234 = 1 << *(_DWORD *)(v3 + 48);
    if (v234 == 2)
    {
      unint64_t v235 = *(void **)a1[1];
      uint64_t v236 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      uint64_t v237 = (char *)v235[446];
      unint64_t v245 = v235[447];
      if ((unint64_t)v237 >= v245)
      {
        unint64_t v239 = (char *)v235[445];
        uint64_t v247 = (v237 - v239) >> 3;
        if ((unint64_t)(v247 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v248 = v245 - (void)v239;
        unint64_t v249 = (uint64_t)(v245 - (void)v239) >> 2;
        if (v249 <= v247 + 1) {
          unint64_t v249 = v247 + 1;
        }
        if (v248 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v250 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v250 = v249;
        }
        if (v250)
        {
          uint64_t v251 = (char *)sub_5714((uint64_t)(v235 + 447), v250);
          uint64_t v237 = (char *)v235[446];
          unint64_t v239 = (char *)v235[445];
        }
        else
        {
          uint64_t v251 = 0;
        }
        uint64_t v252 = &v251[8 * v247];
        int v253 = &v251[8 * v250];
        *(void *)uint64_t v252 = v236;
        unint64_t v246 = v252 + 8;
        while (v237 != v239)
        {
          uint64_t v255 = *((void *)v237 - 1);
          v237 -= 8;
          *((void *)v252 - 1) = v255;
          v252 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v234 != 1) {
        goto LABEL_358;
      }
      unint64_t v235 = *(void **)a1[1];
      uint64_t v236 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      uint64_t v237 = (char *)v235[446];
      unint64_t v238 = v235[447];
      if ((unint64_t)v237 >= v238)
      {
        unint64_t v239 = (char *)v235[445];
        uint64_t v240 = (v237 - v239) >> 3;
        if ((unint64_t)(v240 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v241 = v238 - (void)v239;
        unint64_t v242 = (uint64_t)(v238 - (void)v239) >> 2;
        if (v242 <= v240 + 1) {
          unint64_t v242 = v240 + 1;
        }
        if (v241 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v243 = v242;
        }
        if (v243)
        {
          uint64_t v244 = (char *)sub_5714((uint64_t)(v235 + 447), v243);
          uint64_t v237 = (char *)v235[446];
          unint64_t v239 = (char *)v235[445];
        }
        else
        {
          uint64_t v244 = 0;
        }
        uint64_t v252 = &v244[8 * v240];
        int v253 = &v244[8 * v243];
        *(void *)uint64_t v252 = v236;
        unint64_t v246 = v252 + 8;
        while (v237 != v239)
        {
          uint64_t v254 = *((void *)v237 - 1);
          v237 -= 8;
          *((void *)v252 - 1) = v254;
          v252 -= 8;
        }
LABEL_355:
        v235[445] = v252;
        v235[446] = v246;
        v235[447] = v253;
        if (v239) {
          operator delete(v239);
        }
        goto LABEL_357;
      }
    }
    *(void *)uint64_t v237 = v236;
    unint64_t v246 = v237 + 8;
LABEL_357:
    v235[446] = v246;
LABEL_358:
    int v256 = 1 << *(_DWORD *)(v3 + 48);
    if (v256 == 2)
    {
      unint64_t v257 = *(void **)a1[1];
      uint64_t v258 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      uint64_t v259 = (char *)v257[449];
      unint64_t v267 = v257[450];
      if ((unint64_t)v259 >= v267)
      {
        unint64_t v261 = (char *)v257[448];
        uint64_t v269 = (v259 - v261) >> 3;
        if ((unint64_t)(v269 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v270 = v267 - (void)v261;
        unint64_t v271 = (uint64_t)(v267 - (void)v261) >> 2;
        if (v271 <= v269 + 1) {
          unint64_t v271 = v269 + 1;
        }
        if (v270 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v272 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v272 = v271;
        }
        if (v272)
        {
          uint64_t v273 = (char *)sub_5714((uint64_t)(v257 + 450), v272);
          uint64_t v259 = (char *)v257[449];
          unint64_t v261 = (char *)v257[448];
        }
        else
        {
          uint64_t v273 = 0;
        }
        uint64_t v274 = &v273[8 * v269];
        int v275 = &v273[8 * v272];
        *(void *)uint64_t v274 = v258;
        unint64_t v268 = v274 + 8;
        while (v259 != v261)
        {
          uint64_t v277 = *((void *)v259 - 1);
          v259 -= 8;
          *((void *)v274 - 1) = v277;
          v274 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v256 != 1) {
        goto LABEL_390;
      }
      unint64_t v257 = *(void **)a1[1];
      uint64_t v258 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      uint64_t v259 = (char *)v257[449];
      unint64_t v260 = v257[450];
      if ((unint64_t)v259 >= v260)
      {
        unint64_t v261 = (char *)v257[448];
        uint64_t v262 = (v259 - v261) >> 3;
        if ((unint64_t)(v262 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v263 = v260 - (void)v261;
        unint64_t v264 = (uint64_t)(v260 - (void)v261) >> 2;
        if (v264 <= v262 + 1) {
          unint64_t v264 = v262 + 1;
        }
        if (v263 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v265 = v264;
        }
        if (v265)
        {
          uint64_t v266 = (char *)sub_5714((uint64_t)(v257 + 450), v265);
          uint64_t v259 = (char *)v257[449];
          unint64_t v261 = (char *)v257[448];
        }
        else
        {
          uint64_t v266 = 0;
        }
        uint64_t v274 = &v266[8 * v262];
        int v275 = &v266[8 * v265];
        *(void *)uint64_t v274 = v258;
        unint64_t v268 = v274 + 8;
        while (v259 != v261)
        {
          uint64_t v276 = *((void *)v259 - 1);
          v259 -= 8;
          *((void *)v274 - 1) = v276;
          v274 -= 8;
        }
LABEL_387:
        v257[448] = v274;
        v257[449] = v268;
        v257[450] = v275;
        if (v261) {
          operator delete(v261);
        }
        goto LABEL_389;
      }
    }
    *(void *)uint64_t v259 = v258;
    unint64_t v268 = v259 + 8;
LABEL_389:
    v257[449] = v268;
LABEL_390:
    int v278 = 1 << *(_DWORD *)(v3 + 48);
    if (v278 == 2)
    {
      uint64_t v290 = a1[1];
      unint64_t v280 = *(void **)v290;
      uint64_t v281 = *(unsigned __int16 *)(a1[2] + 62);
      unint64_t v282 = *(char **)(*(void *)v290 + 3616);
      unint64_t v291 = *(void *)(*(void *)v290 + 3624);
      if ((unint64_t)v282 >= v291)
      {
        unint64_t v284 = (char *)v280[451];
        uint64_t v293 = (v282 - v284) >> 3;
        if ((unint64_t)(v293 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v294 = v291 - (void)v284;
        unint64_t v295 = (uint64_t)(v291 - (void)v284) >> 2;
        if (v295 <= v293 + 1) {
          unint64_t v295 = v293 + 1;
        }
        if (v294 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v296 = v295;
        }
        if (v296)
        {
          int v297 = (char *)sub_5714((uint64_t)(v280 + 453), v296);
          unint64_t v282 = (char *)v280[452];
          unint64_t v284 = (char *)v280[451];
        }
        else
        {
          int v297 = 0;
        }
        uint64_t v298 = &v297[8 * v293];
        uint64_t v299 = &v297[8 * v296];
        *(void *)uint64_t v298 = v281;
        unint64_t v292 = v298 + 8;
        while (v282 != v284)
        {
          uint64_t v301 = *((void *)v282 - 1);
          v282 -= 8;
          *((void *)v298 - 1) = v301;
          v298 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v278 != 1) {
        goto LABEL_422;
      }
      uint64_t v279 = a1[1];
      unint64_t v280 = *(void **)v279;
      uint64_t v281 = *(unsigned __int16 *)(a1[2] + 62);
      unint64_t v282 = *(char **)(*(void *)v279 + 3616);
      unint64_t v283 = *(void *)(*(void *)v279 + 3624);
      if ((unint64_t)v282 >= v283)
      {
        unint64_t v284 = (char *)v280[451];
        uint64_t v285 = (v282 - v284) >> 3;
        if ((unint64_t)(v285 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v286 = v283 - (void)v284;
        unint64_t v287 = (uint64_t)(v283 - (void)v284) >> 2;
        if (v287 <= v285 + 1) {
          unint64_t v287 = v285 + 1;
        }
        if (v286 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v288 = v287;
        }
        if (v288)
        {
          unint64_t v289 = (char *)sub_5714((uint64_t)(v280 + 453), v288);
          unint64_t v282 = (char *)v280[452];
          unint64_t v284 = (char *)v280[451];
        }
        else
        {
          unint64_t v289 = 0;
        }
        uint64_t v298 = &v289[8 * v285];
        uint64_t v299 = &v289[8 * v288];
        *(void *)uint64_t v298 = v281;
        unint64_t v292 = v298 + 8;
        while (v282 != v284)
        {
          uint64_t v300 = *((void *)v282 - 1);
          v282 -= 8;
          *((void *)v298 - 1) = v300;
          v298 -= 8;
        }
LABEL_419:
        v280[451] = v298;
        v280[452] = v292;
        v280[453] = v299;
        if (v284) {
          operator delete(v284);
        }
        goto LABEL_421;
      }
    }
    *(void *)unint64_t v282 = v281;
    unint64_t v292 = v282 + 8;
LABEL_421:
    v280[452] = v292;
LABEL_422:
    int v302 = 1 << *(_DWORD *)(v3 + 48);
    if (v302 == 2)
    {
      uint64_t v303 = *(void **)a1[1];
      uint64_t v304 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      unint64_t v305 = (uint64_t *)v303[455];
      unint64_t v313 = v303[456];
      if ((unint64_t)v305 >= v313)
      {
        unint64_t v307 = (uint64_t *)v303[454];
        uint64_t v315 = v305 - v307;
        if ((unint64_t)(v315 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v316 = v313 - (void)v307;
        unint64_t v317 = (uint64_t)(v313 - (void)v307) >> 2;
        if (v317 <= v315 + 1) {
          unint64_t v317 = v315 + 1;
        }
        if (v316 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v318 = v317;
        }
        if (v318)
        {
          int v319 = (char *)sub_5714((uint64_t)(v303 + 456), v318);
          unint64_t v305 = (uint64_t *)v303[455];
          unint64_t v307 = (uint64_t *)v303[454];
        }
        else
        {
          int v319 = 0;
        }
        uint64_t v320 = (uint64_t *)&v319[8 * v315];
        uint64_t v321 = &v319[8 * v318];
        *uint64_t v320 = v304;
        unint64_t v314 = v320 + 1;
        while (v305 != v307)
        {
          uint64_t v323 = *--v305;
          *--uint64_t v320 = v323;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v302 != 1) {
        goto LABEL_454;
      }
      uint64_t v303 = *(void **)a1[1];
      uint64_t v304 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      unint64_t v305 = (uint64_t *)v303[455];
      unint64_t v306 = v303[456];
      if ((unint64_t)v305 >= v306)
      {
        unint64_t v307 = (uint64_t *)v303[454];
        uint64_t v308 = v305 - v307;
        if ((unint64_t)(v308 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v309 = v306 - (void)v307;
        unint64_t v310 = (uint64_t)(v306 - (void)v307) >> 2;
        if (v310 <= v308 + 1) {
          unint64_t v310 = v308 + 1;
        }
        if (v309 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v311 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v311 = v310;
        }
        if (v311)
        {
          unint64_t v312 = (char *)sub_5714((uint64_t)(v303 + 456), v311);
          unint64_t v305 = (uint64_t *)v303[455];
          unint64_t v307 = (uint64_t *)v303[454];
        }
        else
        {
          unint64_t v312 = 0;
        }
        uint64_t v320 = (uint64_t *)&v312[8 * v308];
        uint64_t v321 = &v312[8 * v311];
        *uint64_t v320 = v304;
        unint64_t v314 = v320 + 1;
        while (v305 != v307)
        {
          uint64_t v322 = *--v305;
          *--uint64_t v320 = v322;
        }
LABEL_451:
        v303[454] = v320;
        v303[455] = v314;
        v303[456] = v321;
        if (v307) {
          operator delete(v307);
        }
        goto LABEL_453;
      }
    }
    *unint64_t v305 = v304;
    unint64_t v314 = v305 + 1;
LABEL_453:
    v303[455] = v314;
LABEL_454:
    int v324 = 1 << *(_DWORD *)(v3 + 48);
    if (v324 == 2)
    {
      uint64_t v336 = a1[2];
      unint64_t v326 = *(void **)a1[1];
      uint64_t v327 = *(_DWORD *)(v336 + 36) & 0x1FFFFLL;
      unint64_t v328 = (uint64_t *)v326[458];
      unint64_t v337 = v326[459];
      if ((unint64_t)v328 >= v337)
      {
        unint64_t v330 = (uint64_t *)v326[457];
        uint64_t v339 = v328 - v330;
        if (!((unint64_t)(v339 + 1) >> 61))
        {
          unint64_t v340 = v337 - (void)v330;
          unint64_t v341 = (uint64_t)(v337 - (void)v330) >> 2;
          if (v341 <= v339 + 1) {
            unint64_t v341 = v339 + 1;
          }
          if (v340 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v342 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v342 = v341;
          }
          if (v342)
          {
            uint64_t v343 = (char *)sub_5714((uint64_t)(v326 + 459), v342);
            unint64_t v328 = (uint64_t *)v326[458];
            unint64_t v330 = (uint64_t *)v326[457];
          }
          else
          {
            uint64_t v343 = 0;
          }
          unint64_t v344 = (uint64_t *)&v343[8 * v339];
          unint64_t v345 = &v343[8 * v342];
          *unint64_t v344 = v327;
          unint64_t v338 = v344 + 1;
          while (v328 != v330)
          {
            uint64_t v347 = *--v328;
            *--unint64_t v344 = v347;
          }
          goto LABEL_483;
        }
LABEL_488:
        sub_566C();
      }
    }
    else
    {
      if (v324 != 1)
      {
LABEL_486:
        *a2 = 1;
        return;
      }
      uint64_t v325 = a1[2];
      unint64_t v326 = *(void **)a1[1];
      uint64_t v327 = *(_DWORD *)(v325 + 36) & 0x1FFFFLL;
      unint64_t v328 = (uint64_t *)v326[458];
      unint64_t v329 = v326[459];
      if ((unint64_t)v328 >= v329)
      {
        unint64_t v330 = (uint64_t *)v326[457];
        uint64_t v331 = v328 - v330;
        if (!((unint64_t)(v331 + 1) >> 61))
        {
          unint64_t v332 = v329 - (void)v330;
          unint64_t v333 = (uint64_t)(v329 - (void)v330) >> 2;
          if (v333 <= v331 + 1) {
            unint64_t v333 = v331 + 1;
          }
          if (v332 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v334 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v334 = v333;
          }
          if (v334)
          {
            unint64_t v335 = (char *)sub_5714((uint64_t)(v326 + 459), v334);
            unint64_t v328 = (uint64_t *)v326[458];
            unint64_t v330 = (uint64_t *)v326[457];
          }
          else
          {
            unint64_t v335 = 0;
          }
          unint64_t v344 = (uint64_t *)&v335[8 * v331];
          unint64_t v345 = &v335[8 * v334];
          *unint64_t v344 = v327;
          unint64_t v338 = v344 + 1;
          while (v328 != v330)
          {
            uint64_t v346 = *--v328;
            *--unint64_t v344 = v346;
          }
LABEL_483:
          v326[457] = v344;
          v326[458] = v338;
          v326[459] = v345;
          if (v330) {
            operator delete(v330);
          }
          goto LABEL_485;
        }
        goto LABEL_488;
      }
    }
    *unint64_t v328 = v327;
    unint64_t v338 = v328 + 1;
LABEL_485:
    v326[458] = v338;
    goto LABEL_486;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unsigned int v19 = *(_DWORD *)(v17 + 40);
    v17 += 40;
    uint64_t v20 = (void *)*v18;
    *(void *)(v20[416] - 8) += (unint64_t)v19 >> 17;
    *(void *)(v20[419] - 8) += *(_DWORD *)v17 & 0x1FFFF;
    *(void *)(v20[422] - 8) += *(_WORD *)(v17 - 12) & 0x7FFF;
    *(void *)(v20[425] - 8) += *(_WORD *)(v17 - 10) & 0x7FFF;
    *(void *)(v20[428] - 8) += *(_WORD *)(v17 - 16) & 0x7FFF;
    *(void *)(v20[431] - 8) += *(_WORD *)(v17 - 14) & 0x7FFF;
    *(void *)(v20[434] - 8) += *(unsigned __int16 *)(v17 + 20);
    *(void *)(v20[437] - 8) += *(_DWORD *)(v17 + 12) & 0x1FFFF;
    *(void *)(v20[440] - 8) += *(_DWORD *)(v17 + 8) & 0x1FFFF;
    *(void *)(v20[443] - 8) += *(_DWORD *)(v17 + 16) & 0x1FFFF;
    uint64_t v21 = a1[2];
    unint64_t v22 = (void *)*v18;
    *(void *)(v22[446] - 8) += *(_WORD *)(v21 + 46) & 0x3FFF;
    *(void *)(v22[449] - 8) += *(_WORD *)(v21 + 44) & 0x3FFF;
    *(void *)(v22[452] - 8) += *(unsigned __int16 *)(v21 + 62);
    *(void *)(v22[455] - 8) += *(_DWORD *)(v21 + 32) & 0x1FFFF;
    *(void *)(v22[458] - 8) += *(_DWORD *)(v21 + 36) & 0x1FFFF;
  }
}

void sub_1A471C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      unint64_t v8 = (uint64_t *)v6[461];
      unint64_t v19 = v6[462];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (uint64_t *)v6[460];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          uint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 462), v24);
          unint64_t v8 = (uint64_t *)v6[461];
          uint64_t v10 = (uint64_t *)v6[460];
        }
        else
        {
          uint64_t v25 = 0;
        }
        unint64_t v26 = (uint64_t *)&v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--unint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      unint64_t v8 = (uint64_t *)v6[461];
      unint64_t v9 = v6[462];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (uint64_t *)v6[460];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 462), v14);
          unint64_t v8 = (uint64_t *)v6[461];
          uint64_t v10 = (uint64_t *)v6[460];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = (uint64_t *)&v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--unint64_t v26 = v28;
        }
LABEL_35:
        v6[460] = v26;
        v6[461] = v20;
        v6[462] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *unint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[461] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      unint64_t v33 = (uint64_t *)v31[464];
      unint64_t v41 = v31[465];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (uint64_t *)v31[463];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          uint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 465), v46);
          unint64_t v33 = (uint64_t *)v31[464];
          uint64_t v35 = (uint64_t *)v31[463];
        }
        else
        {
          uint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      unint64_t v33 = (uint64_t *)v31[464];
      unint64_t v34 = v31[465];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (uint64_t *)v31[463];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          uint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 465), v39);
          unint64_t v33 = (uint64_t *)v31[464];
          uint64_t v35 = (uint64_t *)v31[463];
        }
        else
        {
          uint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[463] = v48;
        v31[464] = v42;
        v31[465] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[464] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      uint64_t v55 = (uint64_t *)v53[467];
      unint64_t v63 = v53[468];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (uint64_t *)v53[466];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          uint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 468), v68);
          uint64_t v55 = (uint64_t *)v53[467];
          uint64_t v57 = (uint64_t *)v53[466];
        }
        else
        {
          uint64_t v69 = 0;
        }
        unint64_t v70 = (uint64_t *)&v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *unint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v73 = *--v55;
          *--unint64_t v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      uint64_t v55 = (uint64_t *)v53[467];
      unint64_t v56 = v53[468];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (uint64_t *)v53[466];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_136;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          uint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 468), v61);
          uint64_t v55 = (uint64_t *)v53[467];
          uint64_t v57 = (uint64_t *)v53[466];
        }
        else
        {
          uint64_t v62 = 0;
        }
        unint64_t v70 = (uint64_t *)&v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *unint64_t v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v72 = *--v55;
          *--unint64_t v70 = v72;
        }
LABEL_99:
        v53[466] = v70;
        v53[467] = v64;
        v53[468] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *uint64_t v55 = v54;
    unint64_t v64 = v55 + 1;
LABEL_101:
    v53[467] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v86 = a1[2];
      uint64_t v76 = *(void **)a1[1];
      uint64_t v77 = *(_DWORD *)(v86 + 24) & 0x3FFFFFLL;
      int v78 = (uint64_t *)v76[470];
      unint64_t v87 = v76[471];
      if ((unint64_t)v78 >= v87)
      {
        uint64_t v80 = (uint64_t *)v76[469];
        uint64_t v89 = v78 - v80;
        if (!((unint64_t)(v89 + 1) >> 61))
        {
          unint64_t v90 = v87 - (void)v80;
          unint64_t v91 = (uint64_t)(v87 - (void)v80) >> 2;
          if (v91 <= v89 + 1) {
            unint64_t v91 = v89 + 1;
          }
          if (v90 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v91;
          }
          if (v92)
          {
            unint64_t v93 = (char *)sub_5714((uint64_t)(v76 + 471), v92);
            int v78 = (uint64_t *)v76[470];
            uint64_t v80 = (uint64_t *)v76[469];
          }
          else
          {
            unint64_t v93 = 0;
          }
          unint64_t v94 = (uint64_t *)&v93[8 * v89];
          uint64_t v95 = &v93[8 * v92];
          *unint64_t v94 = v77;
          unint64_t v88 = v94 + 1;
          while (v78 != v80)
          {
            uint64_t v97 = *--v78;
            *--unint64_t v94 = v97;
          }
          goto LABEL_131;
        }
LABEL_136:
        sub_566C();
      }
    }
    else
    {
      if (v74 != 1)
      {
LABEL_134:
        *a2 = 1;
        return;
      }
      uint64_t v75 = a1[2];
      uint64_t v76 = *(void **)a1[1];
      uint64_t v77 = *(_DWORD *)(v75 + 24) & 0x3FFFFFLL;
      int v78 = (uint64_t *)v76[470];
      unint64_t v79 = v76[471];
      if ((unint64_t)v78 >= v79)
      {
        uint64_t v80 = (uint64_t *)v76[469];
        uint64_t v81 = v78 - v80;
        if (!((unint64_t)(v81 + 1) >> 61))
        {
          unint64_t v82 = v79 - (void)v80;
          unint64_t v83 = (uint64_t)(v79 - (void)v80) >> 2;
          if (v83 <= v81 + 1) {
            unint64_t v83 = v81 + 1;
          }
          if (v82 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v83;
          }
          if (v84)
          {
            unint64_t v85 = (char *)sub_5714((uint64_t)(v76 + 471), v84);
            int v78 = (uint64_t *)v76[470];
            uint64_t v80 = (uint64_t *)v76[469];
          }
          else
          {
            unint64_t v85 = 0;
          }
          unint64_t v94 = (uint64_t *)&v85[8 * v81];
          uint64_t v95 = &v85[8 * v84];
          *unint64_t v94 = v77;
          unint64_t v88 = v94 + 1;
          while (v78 != v80)
          {
            uint64_t v96 = *--v78;
            *--unint64_t v94 = v96;
          }
LABEL_131:
          v76[469] = v94;
          v76[470] = v88;
          v76[471] = v95;
          if (v80) {
            operator delete(v80);
          }
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    *int v78 = v77;
    unint64_t v88 = v78 + 1;
LABEL_133:
    v76[470] = v88;
    goto LABEL_134;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = (_DWORD *)a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[461] - 8) += v17[8] & 0x7FFFF;
    *(void *)(v18[464] - 8) += v17[9] & 0x3FFFFF;
    *(void *)(v18[467] - 8) += v17[7] & 0x3FFFFF;
    *(void *)(v18[470] - 8) += v17[6] & 0x3FFFFF;
  }
}

void sub_1A4DFC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      unint64_t v8 = (char *)v6[563];
      unint64_t v19 = v6[564];
      if ((unint64_t)v8 >= v19)
      {
        uint64_t v10 = (char *)v6[562];
        uint64_t v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          uint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 564), v24);
          unint64_t v8 = (char *)v6[563];
          uint64_t v10 = (char *)v6[562];
        }
        else
        {
          uint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      unint64_t v8 = (char *)v6[563];
      unint64_t v9 = v6[564];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v10 = (char *)v6[562];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 564), v14);
          unint64_t v8 = (char *)v6[563];
          uint64_t v10 = (char *)v6[562];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = &v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[562] = v26;
        v6[563] = v20;
        v6[564] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)unint64_t v8 = v7;
    uint64_t v20 = v8 + 8;
LABEL_37:
    v6[563] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      unint64_t v33 = (uint64_t *)v31[566];
      unint64_t v41 = v31[567];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (uint64_t *)v31[565];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          uint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 567), v46);
          unint64_t v33 = (uint64_t *)v31[566];
          uint64_t v35 = (uint64_t *)v31[565];
        }
        else
        {
          uint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      unint64_t v33 = (uint64_t *)v31[566];
      unint64_t v34 = v31[567];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (uint64_t *)v31[565];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          uint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 567), v39);
          unint64_t v33 = (uint64_t *)v31[566];
          uint64_t v35 = (uint64_t *)v31[565];
        }
        else
        {
          uint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[565] = v48;
        v31[566] = v42;
        v31[567] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[566] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      uint64_t v55 = (char *)v53[569];
      unint64_t v63 = v53[570];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (char *)v53[568];
        uint64_t v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          uint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 570), v68);
          uint64_t v55 = (char *)v53[569];
          uint64_t v57 = (char *)v53[568];
        }
        else
        {
          uint64_t v69 = 0;
        }
        unint64_t v70 = &v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v73 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      uint64_t v55 = (char *)v53[569];
      unint64_t v56 = v53[570];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (char *)v53[568];
        uint64_t v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          uint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 570), v61);
          uint64_t v55 = (char *)v53[569];
          uint64_t v57 = (char *)v53[568];
        }
        else
        {
          uint64_t v62 = 0;
        }
        unint64_t v70 = &v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v72 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[568] = v70;
        v53[569] = v64;
        v53[570] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *(void *)uint64_t v55 = v54;
    unint64_t v64 = v55 + 8;
LABEL_101:
    v53[569] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v75 = *(void **)a1[1];
      unint64_t v76 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
      uint64_t v77 = (unint64_t *)v75[572];
      unint64_t v85 = v75[573];
      if ((unint64_t)v77 >= v85)
      {
        unint64_t v79 = (unint64_t *)v75[571];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 573), v90);
          uint64_t v77 = (unint64_t *)v75[572];
          unint64_t v79 = (unint64_t *)v75[571];
        }
        else
        {
          unint64_t v91 = 0;
        }
        unint64_t v92 = (unint64_t *)&v91[8 * v87];
        unint64_t v93 = &v91[8 * v90];
        *unint64_t v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          unint64_t v95 = *--v77;
          *--unint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      uint64_t v75 = *(void **)a1[1];
      unint64_t v76 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
      uint64_t v77 = (unint64_t *)v75[572];
      unint64_t v78 = v75[573];
      if ((unint64_t)v77 >= v78)
      {
        unint64_t v79 = (unint64_t *)v75[571];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 573), v83);
          uint64_t v77 = (unint64_t *)v75[572];
          unint64_t v79 = (unint64_t *)v75[571];
        }
        else
        {
          unint64_t v84 = 0;
        }
        unint64_t v92 = (unint64_t *)&v84[8 * v80];
        unint64_t v93 = &v84[8 * v83];
        *unint64_t v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          unint64_t v94 = *--v77;
          *--unint64_t v92 = v94;
        }
LABEL_131:
        v75[571] = v92;
        v75[572] = v86;
        v75[573] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v77 = v76;
    uint64_t v86 = v77 + 1;
LABEL_133:
    v75[572] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      uint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
      uint64_t v99 = (uint64_t *)v97[575];
      unint64_t v107 = v97[576];
      if ((unint64_t)v99 >= v107)
      {
        uint64_t v101 = (uint64_t *)v97[574];
        uint64_t v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v110 = v107 - (void)v101;
        unint64_t v111 = (uint64_t)(v107 - (void)v101) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          uint64_t v113 = (char *)sub_5714((uint64_t)(v97 + 576), v112);
          uint64_t v99 = (uint64_t *)v97[575];
          uint64_t v101 = (uint64_t *)v97[574];
        }
        else
        {
          uint64_t v113 = 0;
        }
        unint64_t v114 = (uint64_t *)&v113[8 * v109];
        unint64_t v115 = &v113[8 * v112];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v117 = *--v99;
          *--unint64_t v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      uint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
      uint64_t v99 = (uint64_t *)v97[575];
      unint64_t v100 = v97[576];
      if ((unint64_t)v99 >= v100)
      {
        uint64_t v101 = (uint64_t *)v97[574];
        uint64_t v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v103 = v100 - (void)v101;
        unint64_t v104 = (uint64_t)(v100 - (void)v101) >> 2;
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        if (v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v104;
        }
        if (v105)
        {
          uint64_t v106 = (char *)sub_5714((uint64_t)(v97 + 576), v105);
          uint64_t v99 = (uint64_t *)v97[575];
          uint64_t v101 = (uint64_t *)v97[574];
        }
        else
        {
          uint64_t v106 = 0;
        }
        unint64_t v114 = (uint64_t *)&v106[8 * v102];
        unint64_t v115 = &v106[8 * v105];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v116 = *--v99;
          *--unint64_t v114 = v116;
        }
LABEL_163:
        v97[574] = v114;
        v97[575] = v108;
        v97[576] = v115;
        if (v101) {
          operator delete(v101);
        }
        goto LABEL_165;
      }
    }
    *uint64_t v99 = v98;
    unint64_t v108 = v99 + 1;
LABEL_165:
    v97[575] = v108;
LABEL_166:
    int v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      uint64_t v121 = (uint64_t *)v119[578];
      unint64_t v129 = v119[579];
      if ((unint64_t)v121 >= v129)
      {
        unint64_t v123 = (uint64_t *)v119[577];
        uint64_t v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v132 = v129 - (void)v123;
        unint64_t v133 = (uint64_t)(v129 - (void)v123) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          uint64_t v135 = (char *)sub_5714((uint64_t)(v119 + 579), v134);
          uint64_t v121 = (uint64_t *)v119[578];
          unint64_t v123 = (uint64_t *)v119[577];
        }
        else
        {
          uint64_t v135 = 0;
        }
        unint64_t v136 = (uint64_t *)&v135[8 * v131];
        unint64_t v137 = &v135[8 * v134];
        uint64_t *v136 = v120;
        unint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v139 = *--v121;
          *--unint64_t v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1) {
        goto LABEL_198;
      }
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      uint64_t v121 = (uint64_t *)v119[578];
      unint64_t v122 = v119[579];
      if ((unint64_t)v121 >= v122)
      {
        unint64_t v123 = (uint64_t *)v119[577];
        uint64_t v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v125 = v122 - (void)v123;
        unint64_t v126 = (uint64_t)(v122 - (void)v123) >> 2;
        if (v126 <= v124 + 1) {
          unint64_t v126 = v124 + 1;
        }
        if (v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v126;
        }
        if (v127)
        {
          uint64_t v128 = (char *)sub_5714((uint64_t)(v119 + 579), v127);
          uint64_t v121 = (uint64_t *)v119[578];
          unint64_t v123 = (uint64_t *)v119[577];
        }
        else
        {
          uint64_t v128 = 0;
        }
        unint64_t v136 = (uint64_t *)&v128[8 * v124];
        unint64_t v137 = &v128[8 * v127];
        uint64_t *v136 = v120;
        unint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v138 = *--v121;
          *--unint64_t v136 = v138;
        }
LABEL_195:
        v119[577] = v136;
        v119[578] = v130;
        v119[579] = v137;
        if (v123) {
          operator delete(v123);
        }
        goto LABEL_197;
      }
    }
    *uint64_t v121 = v120;
    unint64_t v130 = v121 + 1;
LABEL_197:
    v119[578] = v130;
LABEL_198:
    int v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
      uint64_t v143 = (char *)v141[581];
      unint64_t v151 = v141[582];
      if ((unint64_t)v143 >= v151)
      {
        uint64_t v145 = (char *)v141[580];
        uint64_t v153 = (v143 - v145) >> 3;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v154 = v151 - (void)v145;
        unint64_t v155 = (uint64_t)(v151 - (void)v145) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          unint64_t v157 = (char *)sub_5714((uint64_t)(v141 + 582), v156);
          uint64_t v143 = (char *)v141[581];
          uint64_t v145 = (char *)v141[580];
        }
        else
        {
          unint64_t v157 = 0;
        }
        unint64_t v158 = &v157[8 * v153];
        uint64_t v159 = &v157[8 * v156];
        *(void *)unint64_t v158 = v142;
        unint64_t v152 = v158 + 8;
        while (v143 != v145)
        {
          uint64_t v161 = *((void *)v143 - 1);
          v143 -= 8;
          *((void *)v158 - 1) = v161;
          v158 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1) {
        goto LABEL_230;
      }
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
      uint64_t v143 = (char *)v141[581];
      unint64_t v144 = v141[582];
      if ((unint64_t)v143 >= v144)
      {
        uint64_t v145 = (char *)v141[580];
        uint64_t v146 = (v143 - v145) >> 3;
        if ((unint64_t)(v146 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v147 = v144 - (void)v145;
        unint64_t v148 = (uint64_t)(v144 - (void)v145) >> 2;
        if (v148 <= v146 + 1) {
          unint64_t v148 = v146 + 1;
        }
        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v149 = v148;
        }
        if (v149)
        {
          unint64_t v150 = (char *)sub_5714((uint64_t)(v141 + 582), v149);
          uint64_t v143 = (char *)v141[581];
          uint64_t v145 = (char *)v141[580];
        }
        else
        {
          unint64_t v150 = 0;
        }
        unint64_t v158 = &v150[8 * v146];
        uint64_t v159 = &v150[8 * v149];
        *(void *)unint64_t v158 = v142;
        unint64_t v152 = v158 + 8;
        while (v143 != v145)
        {
          uint64_t v160 = *((void *)v143 - 1);
          v143 -= 8;
          *((void *)v158 - 1) = v160;
          v158 -= 8;
        }
LABEL_227:
        v141[580] = v158;
        v141[581] = v152;
        v141[582] = v159;
        if (v145) {
          operator delete(v145);
        }
        goto LABEL_229;
      }
    }
    *(void *)uint64_t v143 = v142;
    unint64_t v152 = v143 + 8;
LABEL_229:
    v141[581] = v152;
LABEL_230:
    int v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      uint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      uint64_t v165 = (char *)v163[584];
      unint64_t v173 = v163[585];
      if ((unint64_t)v165 >= v173)
      {
        uint64_t v167 = (char *)v163[583];
        uint64_t v175 = (v165 - v167) >> 3;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v176 = v173 - (void)v167;
        unint64_t v177 = (uint64_t)(v173 - (void)v167) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          unint64_t v179 = (char *)sub_5714((uint64_t)(v163 + 585), v178);
          uint64_t v165 = (char *)v163[584];
          uint64_t v167 = (char *)v163[583];
        }
        else
        {
          unint64_t v179 = 0;
        }
        uint64_t v180 = &v179[8 * v175];
        uint64_t v181 = &v179[8 * v178];
        *(void *)uint64_t v180 = v164;
        uint64_t v174 = v180 + 8;
        while (v165 != v167)
        {
          uint64_t v183 = *((void *)v165 - 1);
          v165 -= 8;
          *((void *)v180 - 1) = v183;
          v180 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1) {
        goto LABEL_262;
      }
      uint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      uint64_t v165 = (char *)v163[584];
      unint64_t v166 = v163[585];
      if ((unint64_t)v165 >= v166)
      {
        uint64_t v167 = (char *)v163[583];
        uint64_t v168 = (v165 - v167) >> 3;
        if ((unint64_t)(v168 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v169 = v166 - (void)v167;
        unint64_t v170 = (uint64_t)(v166 - (void)v167) >> 2;
        if (v170 <= v168 + 1) {
          unint64_t v170 = v168 + 1;
        }
        if (v169 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v171 = v170;
        }
        if (v171)
        {
          unint64_t v172 = (char *)sub_5714((uint64_t)(v163 + 585), v171);
          uint64_t v165 = (char *)v163[584];
          uint64_t v167 = (char *)v163[583];
        }
        else
        {
          unint64_t v172 = 0;
        }
        uint64_t v180 = &v172[8 * v168];
        uint64_t v181 = &v172[8 * v171];
        *(void *)uint64_t v180 = v164;
        uint64_t v174 = v180 + 8;
        while (v165 != v167)
        {
          uint64_t v182 = *((void *)v165 - 1);
          v165 -= 8;
          *((void *)v180 - 1) = v182;
          v180 -= 8;
        }
LABEL_259:
        v163[583] = v180;
        v163[584] = v174;
        v163[585] = v181;
        if (v167) {
          operator delete(v167);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v165 = v164;
    uint64_t v174 = v165 + 8;
LABEL_261:
    v163[584] = v174;
LABEL_262:
    int v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      unint64_t v185 = *(void **)a1[1];
      uint64_t v186 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
      int v187 = (char *)v185[587];
      unint64_t v195 = v185[588];
      if ((unint64_t)v187 >= v195)
      {
        uint64_t v189 = (char *)v185[586];
        uint64_t v197 = (v187 - v189) >> 3;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v198 = v195 - (void)v189;
        unint64_t v199 = (uint64_t)(v195 - (void)v189) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          unint64_t v201 = (char *)sub_5714((uint64_t)(v185 + 588), v200);
          int v187 = (char *)v185[587];
          uint64_t v189 = (char *)v185[586];
        }
        else
        {
          unint64_t v201 = 0;
        }
        unint64_t v202 = &v201[8 * v197];
        uint64_t v203 = &v201[8 * v200];
        *(void *)unint64_t v202 = v186;
        uint64_t v196 = v202 + 8;
        while (v187 != v189)
        {
          uint64_t v205 = *((void *)v187 - 1);
          v187 -= 8;
          *((void *)v202 - 1) = v205;
          v202 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v184 != 1) {
        goto LABEL_294;
      }
      unint64_t v185 = *(void **)a1[1];
      uint64_t v186 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
      int v187 = (char *)v185[587];
      unint64_t v188 = v185[588];
      if ((unint64_t)v187 >= v188)
      {
        uint64_t v189 = (char *)v185[586];
        uint64_t v190 = (v187 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v191 = v188 - (void)v189;
        unint64_t v192 = (uint64_t)(v188 - (void)v189) >> 2;
        if (v192 <= v190 + 1) {
          unint64_t v192 = v190 + 1;
        }
        if (v191 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v193 = v192;
        }
        if (v193)
        {
          unint64_t v194 = (char *)sub_5714((uint64_t)(v185 + 588), v193);
          int v187 = (char *)v185[587];
          uint64_t v189 = (char *)v185[586];
        }
        else
        {
          unint64_t v194 = 0;
        }
        unint64_t v202 = &v194[8 * v190];
        uint64_t v203 = &v194[8 * v193];
        *(void *)unint64_t v202 = v186;
        uint64_t v196 = v202 + 8;
        while (v187 != v189)
        {
          uint64_t v204 = *((void *)v187 - 1);
          v187 -= 8;
          *((void *)v202 - 1) = v204;
          v202 -= 8;
        }
LABEL_291:
        v185[586] = v202;
        v185[587] = v196;
        v185[588] = v203;
        if (v189) {
          operator delete(v189);
        }
        goto LABEL_293;
      }
    }
    *(void *)int v187 = v186;
    uint64_t v196 = v187 + 8;
LABEL_293:
    v185[587] = v196;
LABEL_294:
    int v206 = 1 << *(_DWORD *)(v3 + 48);
    if (v206 == 2)
    {
      uint64_t v218 = a1[2];
      uint64_t v208 = *(void **)a1[1];
      uint64_t v209 = *(_WORD *)(v218 + 26) & 0x3FFF;
      uint64_t v210 = (char *)v208[590];
      unint64_t v219 = v208[591];
      if ((unint64_t)v210 >= v219)
      {
        int v212 = (char *)v208[589];
        uint64_t v221 = (v210 - v212) >> 3;
        if (!((unint64_t)(v221 + 1) >> 61))
        {
          unint64_t v222 = v219 - (void)v212;
          unint64_t v223 = (uint64_t)(v219 - (void)v212) >> 2;
          if (v223 <= v221 + 1) {
            unint64_t v223 = v221 + 1;
          }
          if (v222 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v224 = v223;
          }
          if (v224)
          {
            uint64_t v225 = (char *)sub_5714((uint64_t)(v208 + 591), v224);
            uint64_t v210 = (char *)v208[590];
            int v212 = (char *)v208[589];
          }
          else
          {
            uint64_t v225 = 0;
          }
          unint64_t v226 = &v225[8 * v221];
          unint64_t v227 = &v225[8 * v224];
          *(void *)unint64_t v226 = v209;
          unint64_t v220 = v226 + 8;
          while (v210 != v212)
          {
            uint64_t v229 = *((void *)v210 - 1);
            v210 -= 8;
            *((void *)v226 - 1) = v229;
            v226 -= 8;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_566C();
      }
    }
    else
    {
      if (v206 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      uint64_t v207 = a1[2];
      uint64_t v208 = *(void **)a1[1];
      uint64_t v209 = *(_WORD *)(v207 + 26) & 0x3FFF;
      uint64_t v210 = (char *)v208[590];
      unint64_t v211 = v208[591];
      if ((unint64_t)v210 >= v211)
      {
        int v212 = (char *)v208[589];
        uint64_t v213 = (v210 - v212) >> 3;
        if (!((unint64_t)(v213 + 1) >> 61))
        {
          unint64_t v214 = v211 - (void)v212;
          unint64_t v215 = (uint64_t)(v211 - (void)v212) >> 2;
          if (v215 <= v213 + 1) {
            unint64_t v215 = v213 + 1;
          }
          if (v214 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v215;
          }
          if (v216)
          {
            unint64_t v217 = (char *)sub_5714((uint64_t)(v208 + 591), v216);
            uint64_t v210 = (char *)v208[590];
            int v212 = (char *)v208[589];
          }
          else
          {
            unint64_t v217 = 0;
          }
          unint64_t v226 = &v217[8 * v213];
          unint64_t v227 = &v217[8 * v216];
          *(void *)unint64_t v226 = v209;
          unint64_t v220 = v226 + 8;
          while (v210 != v212)
          {
            uint64_t v228 = *((void *)v210 - 1);
            v210 -= 8;
            *((void *)v226 - 1) = v228;
            v226 -= 8;
          }
LABEL_323:
          v208[589] = v226;
          v208[590] = v220;
          v208[591] = v227;
          if (v212) {
            operator delete(v212);
          }
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *(void *)uint64_t v210 = v209;
    unint64_t v220 = v210 + 8;
LABEL_325:
    v208[590] = v220;
    goto LABEL_326;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[563] - 8) += *(_WORD *)(v17 + 34) & 0x1FFF;
    *(void *)(v18[566] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
    *(void *)(v18[569] - 8) += *(_WORD *)(v17 + 32) & 0x1FFF;
    *(void *)(v18[572] - 8) += ((unint64_t)*(unsigned int *)(v17 + 36) >> 13) & 0x3FFFF;
    *(void *)(v18[575] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFF;
    *(void *)(v18[578] - 8) += *(_DWORD *)(v17 + 44) & 0x3FFFF;
    *(void *)(v18[581] - 8) += *(_WORD *)(v17 + 28) & 0x3FFF;
    *(void *)(v18[584] - 8) += *(_WORD *)(v17 + 24) & 0x3FFF;
    *(void *)(v18[587] - 8) += *(_WORD *)(v17 + 30) & 0x3FFF;
    *(void *)(v18[590] - 8) += *(_WORD *)(v17 + 26) & 0x3FFF;
  }
}