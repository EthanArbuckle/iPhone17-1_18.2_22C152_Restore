uint64_t GTMTLReplayController_renderPassDescriptor(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(void *)(*(void *)a1 + 80) + *(unsigned int *)(a1 + 22480);
  if (*(void *)(a1 + 184) <= v1)
  {
    if (*(void *)(a1 + 11336) <= v1) {
      return 0;
    }
    v2 = a1 + 11312;
  }
  else
  {
    v2 = a1 + 160;
  }
  if (*(_DWORD *)v2 == 70 || *(_DWORD *)v2 == 65) {
    return *(void *)(v2 + 56);
  }
  return 0;
}

void GTMTLReplayController_updateCommandEncoder(uint64_t a1, uint64_t a2)
{
  int v5 = IsFuncEnumParallelCommandEncoderCall(*(_DWORD *)(a2 + 8));
  uint64_t v6 = 11312;
  if (v5) {
    uint64_t v6 = 160;
  }
  uint64_t v7 = a1 + v6;
  GTMTLSMCommandEncoder_processTraceFunc(a1 + v6, (uint64_t *)a2, *(void *)(*(void *)a1 + 16));
  int v8 = *(_DWORD *)(a2 + 8);
  switch(v8)
  {
    case -16353:
      goto LABEL_6;
    case -16286:
      unint64_t v19 = *(void *)(a1 + 22464);
      unint64_t v20 = *(void *)(a1 + 22472);
      *(void *)(v7 + 8608) = 1;
      *(double *)(v7 + 8632) = (double)v19;
      *(double *)(v7 + 8640) = (double)v20;
      *(void *)(v7 + 8656) = 0x3FF0000000000000;
      *(void *)(v7 + 9384) = 1;
      *(void *)(v7 + 9408) = v19;
      *(void *)(v7 + 9416) = v20;
      break;
    case -16351:
LABEL_6:
      uint64_t v9 = GTMTLReplayController_renderPassDescriptor(a1);
      id v10 = *(id *)(a1 + 8);
      v11 = [v10 renderPassDescriptorMap];
      v12 = MakeMTLRenderPassDescriptor(v9, v11);

      unint64_t v23 = 0;
      id v24 = 0;
      if ((GT_SUPPORT_0 & 0x400) != 0
        && ([v12 rasterizationRateMap], (uint64_t v13 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        v14 = (void *)v13;
        id v15 = [v12 renderTargetWidth];
        id v24 = v15;
        id v16 = [v12 renderTargetHeight];
        unint64_t v17 = (unint64_t)v16;
        unint64_t v23 = (unint64_t)v16;
        if (v15)
        {
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          [v14 screenSize];
          id v15 = v22;
          id v24 = v22;
          if (!v17)
          {
LABEL_16:
            [v14 screenSize];
            unint64_t v17 = v21;
            unint64_t v23 = v21;
          }
        }
      }
      else
      {
        v18 = [v10 defaultDevice];
        [v12 validate:v18 width:&v24 height:&v23];

        v14 = 0;
        unint64_t v17 = v23;
        id v15 = v24;
      }
      *(void *)(a1 + 22464) = v15;
      *(void *)(a1 + 22472) = v17;
      *(void *)(v7 + 8608) = 1;
      *(double *)(v7 + 8632) = (double)(unint64_t)v15;
      *(double *)(v7 + 8640) = (double)v17;
      *(void *)(v7 + 8656) = 0x3FF0000000000000;
      *(void *)(v7 + 9384) = 1;
      *(void *)(v7 + 9408) = v15;
      *(void *)(v7 + 9416) = v17;

      break;
  }
}

void GTMTLReplayController_playTo(uint64_t a1, unint64_t a2)
{
  v2 = (unsigned int *)(a1 + 22480);
  if (*(unsigned int *)(a1 + 22480) < a2)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 120);
    do
    {
      uint64_t v7 = *(void *)(v5 + 24) + ((unint64_t)*v2 << 6);
      if (GetFuncEnumConstructorType(*(_DWORD *)(v7 + 8)) == 25) {
        GTMTLReplayController_restoreCommandBuffer(a1, v7);
      }
      GTMTLReplayController_updateCommandEncoder(a1, v7);
      if (*(_DWORD *)(v7 + 8) >> 2 == 1073737833) {
        GTMTLReplayController_executeCommandsInBuffer((uint64_t *)a1, (unint64_t *)v7, 0, 0xFFFFFFFFFFFFFFFFLL);
      }
      else {
        GTMTLReplayController_defaultDispatchFunction(a1, v7);
      }
      unint64_t v8 = *v2 + 1;
      unsigned int *v2 = v8;
    }
    while (v8 < a2);
  }
  v2[1] = 0;
}

void GTMTLReplayController_executeCommandsInBuffer(uint64_t *a1, unint64_t *a2, NSUInteger a3, NSUInteger a4)
{
  uint64_t v8 = *a1;
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  GetExecuteCommandsInBufferArgs((uint64_t)&v32, (uint64_t)a2, *(void *)(v8 + 16));
  v36.location = *((void *)&v32 + 1);
  v36.length = v33;
  v35.location = a3;
  v35.length = a4;
  NSRange v9 = NSIntersectionRange(v35, v36);
  if (v9.length)
  {
    long long v28 = 0u;
    memset(v29, 0, sizeof(v29));
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v10 = *(apr_pool_t **)a1[19];
    uint64_t v30 = 0;
    p = v10;
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)v29, *(_DWORD ***)(v8 + 40), *a2, v10);
    Object = GTMTLSMContext_getObject(**(void **)(v8 + 40), v32, *a2);
    GTMTLCreateIndirectCommandEncoder((uint64_t)&v22, Object[13]);
    id v12 = (id)a1[1];
    uint64_t v13 = [v12 defaultDevice];
    uint64_t v14 = v22;
    id v15 = MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex(v22);
    id v16 = [v13 newIndirectCommandBufferWithDescriptor:v15 maxCommandCount:v9.length options:0];

    uint64_t v17 = *((void *)&v33 + 1) + *((void *)&v28 + 1) * v9.location;
    v18 = [v12 restoreIndirectCommandBufferDataMap];
    GTMTLEncodeIndirectCommandBufferWithRange(v16, 0, v9.length, v14, v17, (uint64_t *)v29, v18);

    int v19 = *((_DWORD *)a1 + 2828);
    if (v19 == 28)
    {
      if ((GT_SUPPORT_0 & 0x10) != 0)
      {
        unint64_t v20 = [v12 computeCommandEncoderForKey:a1[1415]];
        goto LABEL_7;
      }
    }
    else if (v19 == 70)
    {
      unint64_t v20 = [v12 renderCommandEncoderForKey:a1[1415]];
LABEL_7:
      unint64_t v21 = v20;
      [v20 executeCommandsInBuffer:v16 withRange:0, v9.length, v22, v23, v24, v25, v26, v27, v28];
    }
    apr_pool_clear(p);
  }
}

id GTMTLReplayController_debugSubCommandStop(uint64_t a1, unsigned int a2, uint64_t a3)
{
  [(id)g_activityLog enterDebugFuncStopFromIndex:*(void *)(a1 + 22480) toIndex:a2 | (unint64_t)(a3 << 32)];
  GTMTLReplayController_debugSubCommand((unsigned int *)a1, a2, a3);
  [*(id *)(a1 + 8) commitCommandBuffers];
  uint64_t v6 = (void *)g_activityLog;

  return [v6 leaveActivity];
}

void sub_255A04(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

unsigned int *GTMTLReplayController_debugSubCommand(unsigned int *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = (uint64_t)result;
  uint64_t v5 = result + 5620;
  uint64_t v6 = *(void *)(*(void *)result + 120);
  unsigned int v7 = *(_DWORD *)(v6 + 12);
  if (v7 >= a2) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = v7;
  }
  if (*v5 == v8)
  {
    unsigned int v9 = result[5621];
    if (v9 == a3) {
      return result;
    }
    BOOL v10 = v9 < a3;
  }
  else
  {
    BOOL v10 = 1;
  }
  if (s_logUsingOsLog)
  {
    v11 = gt_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v8;
      LOWORD(v151) = 1024;
      *(_DWORD *)((char *)&v151 + 2) = v3;
      _os_log_impl(&def_1C1270, v11, OS_LOG_TYPE_INFO, "debugSubCommand - functionIndex: %u, subCommandIndex: %u", buf, 0xEu);
    }
  }
  else
  {
    id v12 = __stdoutp;
    id v13 = +[NSString stringWithFormat:@"debugSubCommand - functionIndex: %u, subCommandIndex: %u", v8, a3];
    fprintf(v12, "%s\n", (const char *)[v13 UTF8String]);
  }
  char v14 = !v10;
  if (v8 < *v5) {
    char v14 = 1;
  }
  if ((v14 & 1) != 0 || (dword_77313C & 0x1000) != 0) {
    GTMTLReplayController_rewind(v4);
  }
  uint64_t v15 = *(void *)(*(void *)v4 + 112);
  int v16 = *(_DWORD *)(v15 + 12);
  uint64_t v17 = *(void **)(v15 + 24);
  unint64_t v136 = (v8 - 1);
  InclusiveRange = GroupBuilder_findInclusiveRange(v16, v17, v136);
  if (InclusiveRange)
  {
    while (1)
    {
      int v19 = *((_DWORD *)InclusiveRange + 7);
      if (v19 == -16353 || v19 == -16351) {
        break;
      }
      uint64_t v21 = *((unsigned int *)InclusiveRange + 4);
      if (v21) {
        BOOL v22 = InclusiveRange == 0;
      }
      else {
        BOOL v22 = 1;
      }
      InclusiveRange -= 4 * v21;
      if (v22)
      {
        InclusiveRange = 0;
        break;
      }
    }
  }
  unint64_t v23 = *v5;
  ExclusiveRange = GroupBuilder_findExclusiveRange(v16, v17, (v23 - 1));
  if (ExclusiveRange)
  {
    long long v25 = ExclusiveRange;
    while (1)
    {
      int v26 = *((_DWORD *)v25 + 7);
      if (v26 == -16353 || v26 == -16351) {
        break;
      }
      uint64_t v28 = *((unsigned int *)v25 + 4);
      if (v28) {
        BOOL v29 = v25 == 0;
      }
      else {
        BOOL v29 = 1;
      }
      v25 -= 4 * v28;
      if (v29)
      {
        long long v25 = 0;
        uint64_t v30 = 0;
        goto LABEL_44;
      }
    }
    if (v25 == InclusiveRange) {
      uint64_t v30 = (*v25 < v23) | 2u;
    }
    else {
      uint64_t v30 = *v25 < v23;
    }
LABEL_44:
    GTMTLReplayController_restoreGroup((unsigned int *)v4, (uint64_t)ExclusiveRange, v30);
    if (!v8) {
      goto LABEL_51;
    }
  }
  else
  {
    long long v25 = 0;
    if (!v8)
    {
LABEL_51:
      uint64_t v32 = 0;
      long long v33 = 0;
      goto LABEL_52;
    }
  }
  uint64_t v31 = *(void *)(v6 + 24);
  if (!v31) {
    goto LABEL_51;
  }
  uint64_t v32 = v31 + (v136 << 6);
  if (*(_DWORD *)(v32 + 8) >> 2 == 1073737833) {
    long long v33 = (unint64_t *)(v31 + (v136 << 6));
  }
  else {
    long long v33 = 0;
  }
LABEL_52:
  if (*v5)
  {
    uint64_t v34 = *(void *)(v6 + 24);
    if (v34)
    {
      uint64_t v35 = v34 + ((unint64_t)(*v5 - 1) << 6);
      if (*(_DWORD *)(v35 + 8) >> 2 == 1073737833)
      {
        unsigned int v36 = v5[1];
        NSUInteger v37 = v36 + 1;
        NSUInteger v38 = v3 - v36;
        if ((unint64_t *)v35 == v33)
        {
          long long v33 = 0;
          NSUInteger v39 = v38;
        }
        else
        {
          NSUInteger v39 = ~v37;
        }
        GTMTLReplayController_executeCommandsInBuffer((uint64_t *)v4, (unint64_t *)v35, v37, v39);
      }
    }
  }
  if (InclusiveRange)
  {
    if (v25 != InclusiveRange)
    {
      uint64_t v135 = v15;
      GTMTLReplayController_playTo(v4, *InclusiveRange);
      GTMTLReplayController_updateCommandEncoder(v4, *(void *)(v6 + 24) + (*InclusiveRange << 6));
      GTMTLReplayController_tileMemoryFree(v4);
      uint64_t v40 = GTMTLReplayController_renderPassDescriptor(v4);
      unint64_t v41 = *(void *)(*(void *)v4 + 80) + *v5;
      for (uint64_t i = 8; i != 520; i += 64)
        AddMemorylessTexture((uint64_t *)v4, *(void *)(v40 + i), v41);
      AddMemorylessTexture((uint64_t *)v4, *(void *)(v40 + 680), v41);
      AddMemorylessTexture((uint64_t *)v4, *(void *)(v40 + 728), v41);
      int v43 = 0;
      if (*(_WORD *)(v40 + 814) && *(_WORD *)(v40 + 812)) {
        int v43 = ((unint64_t)*(unsigned __int16 *)(v40 + 812) + *(void *)(v4 + 22472) - 1)
      }
            / *(unsigned __int16 *)(v40 + 812)
            * (((unint64_t)*(unsigned __int16 *)(v40 + 814) + *(void *)(v4 + 22464) - 1)
             / *(unsigned __int16 *)(v40 + 814));
      if ((GT_SUPPORT_0 & 1) != 0
        && v43
        && !((*(_DWORD *)(v40 + 800) + *(unsigned __int16 *)(v40 + 804) < 0) ^ __OFADD__(*(_DWORD *)(v40 + 800), *(unsigned __int16 *)(v40 + 804)) | (*(_DWORD *)(v40 + 800) + *(unsigned __int16 *)(v40 + 804) == 0)))
      {
        uint64_t v126 = *(unsigned int *)(v40 + 800);
        unint64_t v128 = *(unsigned __int16 *)(v40 + 804);
        v124 = v33;
        uint64_t v125 = v32;
        unint64_t v131 = v8;
        v132 = v5;
        unsigned int v133 = v3;
        uint64_t v130 = v43;
        v137 = [*(id *)(v4 + 8) defaultDevice];
        id v44 = objc_alloc_init((Class)MTLTileRenderPipelineDescriptor);
        v134 = (void *)v4;
        uint64_t v121 = v40;
        FillAttachmentPixelFormats(v40, *(uint64_t **)(*(void *)v4 + 40), v41, v44);
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        do
        {
          v47 = v44;
          v48 = [v44 colorAttachments];
          v49 = [v48 objectAtIndexedSubscript:v45];
          id v50 = [v49 pixelFormat];

          if (v50)
          {
            v148.i64[v46] = (uint64_t)v50;
            uint64_t v51 = v46 + 1;
            v52 = &buf[56 * v46];
            GTMTLPixelFormatGetInfoForDevice((uint64_t)v146, (uint64_t)v137, (uint64_t)v50);
            long long v53 = v146[1];
            *(_OWORD *)v52 = v146[0];
            *((_OWORD *)v52 + 1) = v53;
            *((_OWORD *)v52 + 2) = v146[2];
            *((void *)v52 + 6) = v147;
            uint64_t v46 = v51;
          }
          ++v45;
          id v44 = v47;
        }
        while (v45 != 8);
        [v47 rasterSampleCount];
        unint64_t v54 = (MTLPixelFormatComputeTotalSizeUsed() + 7) & 0xFFFFFFFFFFFFFFF8;
        id v55 = objc_alloc_init((Class)MTLCompileOptions);
        v123 = v55;
        if ((int)v126 <= 0)
        {
          id v122 = 0;
          v72 = v137;
        }
        else
        {
          v56 = v55;
          CFStringRef v145 = @"THREADGROUP_MEMORY_LENGTH";
          v57 = +[NSNumber numberWithInt:v126];
          *(void *)&v146[0] = v57;
          v58 = +[NSDictionary dictionaryWithObjects:v146 forKeys:&v145 count:1];
          [v56 setPreprocessorMacros:v58];

          id v144 = 0;
          unint64_t v119 = v54;
          v59 = [v137 newLibraryWithSource:@"#include <metal_stdlib>\nusing namespace metal;\n\nstruct ThreadgroupData { uint8_t data[THREADGROUP_MEMORY_LENGTH]; };\n\nkernel void ThreadgroupStore(ushort2 threadgroup_position_in_grid [[ threadgroup_position_in_grid ]],\n                                ushort2 threadgroups_per_grid [[ threadgroups_per_grid ]],\n                                device ThreadgroupData* buffer [[ buffer(0) ]],\n                                const threadgroup ThreadgroupData& threadgroupData [[ threadgroup(0) ]])\n{\n   ushort uint64_t i = (threadgroup_position_in_grid.y * threadgroups_per_grid.x) + threadgroup_position_in_grid.x;\n   for (ushort j = 0; j < THREADGROUP_MEMORY_LENGTH; j++)\n       buffer[i].data[j] = threadgroupData.data[j];\n}\n\nkernel void ThreadgroupLoad(ushort2 threadgroup_position_in_grid [[ threadgroup_position_in_grid ]],\n                                ushort2 threadgroups_per_grid [[ threadgroups_per_grid ]],\n                                const device ThreadgroupData* buffer [[ buffer(0) ]],\n                                threadgroup ThreadgroupData& threadgroupData [[ threadgroup(0) ]])\n{\n   ushort uint64_t i = (threadgroup_position_in_grid.y * threadgroups_per_grid.x) + threadgroup_position_in_grid.x;\n   for (ushort j = 0; j < THREADGROUP_MEMORY_LENGTH; j++)\n       threadgroupData.data[j] = buffer[i].data[j];\n}\n\nkernel void Fence()\n{\n}\n"];
                  v56,
                  &v144);
          id v60 = v144;
          id v61 = [v59 newFunctionWithName:@"ThreadgroupStore"];
          [v47 setTileFunction:v61];

          id v143 = v60;
          id v62 = [v137 newRenderPipelineStateWithTileDescriptor:v47 options:0 reflection:0 error:&v143];
          id v63 = v143;

          v64 = (void *)v134[8];
          v134[8] = v62;

          id v65 = [v59 newFunctionWithName:@"ThreadgroupLoad"];
          [v47 setTileFunction:v65];

          id v142 = v63;
          id v66 = [v137 newRenderPipelineStateWithTileDescriptor:v47 options:0 reflection:0 error:&v142];
          id v67 = v142;

          v68 = (void *)v134[9];
          v134[9] = v66;

          id v69 = [v59 newFunctionWithName:@"Fence"];
          [v47 setTileFunction:v69];

          id v141 = v67;
          id v70 = [v137 newRenderPipelineStateWithTileDescriptor:v47 options:0 reflection:0 error:&v141];
          id v122 = v141;

          v71 = (void *)v134[10];
          v134[10] = v70;
          v72 = v137;

          id v73 = [v137 newBufferWithLength:v130 * v126 options:32];
          v74 = (void *)v134[13];
          v134[13] = v73;

          unint64_t v54 = v119;
        }
        int v75 = v128 - v54;
        if (v128 <= v54)
        {
          long long v33 = v124;
          uint64_t v32 = v125;
          v91 = v47;
          uint64_t v4 = (uint64_t)v134;
          v112 = v122;
          v109 = v123;
        }
        else
        {
          int v76 = 8;
          if ((v75 & 7) != 0)
          {
            do
            {
              if (v76 >= 0) {
                int v77 = v76;
              }
              else {
                int v77 = v76 + 1;
              }
              int v76 = v77 >> 1;
            }
            while (v75 % (v77 >> 1));
          }
          uint64_t v129 = v128 - v54;
          int v78 = v75 / v76;
          id v79 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v75 / v76];
          id v80 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v78];
          if (v78 >= 1)
          {
            uint64_t v81 = 0;
            uint64_t v82 = (8 * v76);
            do
            {
              id v83 = [objc_alloc((Class)NSString) initWithFormat:@"uint%d_t _%d" v82, v81];
              [v79 addObject:v83];

              id v84 = [objc_alloc((Class)NSString) initWithFormat:@"(dest)->_%d = (src)->_%d", v81, v81];
              [v80 addObject:v84];

              uint64_t v81 = (v81 + 1);
            }
            while (v78 != v81);
          }
          v148.i64[0] = @"IMAGEBLOCK_SAMPLE_MEMBERS";
          id v85 = objc_alloc((Class)NSString);
          v127 = v79;
          v86 = [v79 componentsJoinedByString:@"; "];
          id v87 = [v85 initWithFormat:@"\"%@\"", v86];
          *(void *)buf = v87;
          v148.i64[1] = @"IMAGEBLOCK_SAMPLE_COPY(dest,src)";
          id v88 = objc_alloc((Class)NSString);
          v120 = v80;
          v89 = [v80 componentsJoinedByString:@"; "];
          id v90 = [v88 initWithFormat:@"\"%@\"", v89];
          uint64_t v151 = (uint64_t)v90;
          CFStringRef v149 = @"SAMPLE_COUNT";
          v91 = v47;
          v92 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v47 rasterSampleCount]);
          uint64_t v152 = (uint64_t)v92;
          v93 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v148 count:3];
          [v123 setPreprocessorMacros:v93];

          id v140 = v122;
          v94 = [v137 newLibraryWithSource:@"#include <metal_stdlib>\nusing namespace metal;\n\nstruct ImageblockData { IMAGEBLOCK_SAMPLE_MEMBERS; };\n\nkernel void ImageblockStore(ushort2 threadgroup_position_in_grid [[ threadgroup_position_in_grid ]],\n                            ushort2 threadgroups_per_grid [[ threadgroups_per_grid ]],\n                            ushort2 threads_per_threadgroup [[ threads_per_threadgroup ]],\n                            ushort thread_index_in_threadgroup [[ thread_index_in_threadgroup ]],\n                            ushort2 thread_position_in_threadgroup [[ thread_position_in_threadgroup ]],\n                            device ImageblockData* buffer [[ buffer(0) ]],\n                            const imageblock<ImageblockData,imageblock_layout_explicit> ib)\n{\n   uint uint64_t i = (threadgroup_position_in_grid.y * threadgroups_per_grid.x) + threadgroup_position_in_grid.x;\n   i *= threads_per_threadgroup.x * threads_per_threadgroup.y;\n   i += thread_index_in_threadgroup;\n   for (ushort j = 0; j < SAMPLE_COUNT; j++)\n   {\n       const threadgroup_imageblock ImageblockData* src = ib.data(thread_position_in_threadgroup, j, imageblock_data_rate::sample);\n       device ImageblockData* dest = buffer + i * SAMPLE_COUNT + j;       IMAGEBLOCK_SAMPLE_COPY(dest,src);\n   }\n}\n\nkernel void ImageblockLoad(ushort2 threadgroup_position_in_grid [[ threadgroup_position_in_grid ]],\n                           ushort2 threadgroups_per_grid [[ threadgroups_per_grid ]],\n                           ushort2 threads_per_threadgroup [[ threads_per_threadgroup ]],\n                           ushort thread_index_in_threadgroup [[ thread_index_in_threadgroup ]],\n                           ushort2 thread_position_in_threadgroup [[ thread_position_in_threadgroup ]],\n                           const device ImageblockData* buffer [[ buffer(0) ]],\n                           imageblock<ImageblockData,imageblock_layout_explicit> ib)\n{\n   uint uint64_t i = (threadgroup_position_in_grid.y * threadgroups_per_grid.x) + threadgroup_position_in_grid.x;\n   i *= threads_per_threadgroup.x * threads_per_threadgroup.y;\n   i += thread_index_in_threadgroup;\n   for (ushort j = 0; j < SAMPLE_COUNT; j++)\n   {\n       threadgroup_imageblock ImageblockData* dest = ib.data(thread_position_in_threadgroup, j, imageblock_data_rate::sample);\n       const device ImageblockData* src = buffer + i * SAMPLE_COUNT +
                  v123,
                  &v140);
          id v95 = v140;

          [v47 setThreadgroupSizeMatchesTileSize:1];
          id v96 = [v94 newFunctionWithName:@"ImageblockStore"];
          [v47 setTileFunction:v96];

          id v139 = v95;
          id v97 = [v137 newRenderPipelineStateWithTileDescriptor:v47 options:0 reflection:0 error:&v139];
          id v98 = v139;

          uint64_t v4 = (uint64_t)v134;
          v99 = (void *)v134[11];
          v134[11] = v97;

          id v100 = [v94 newFunctionWithName:@"ImageblockLoad"];
          [v91 setTileFunction:v100];

          id v138 = v98;
          id v101 = [v137 newRenderPipelineStateWithTileDescriptor:v91 options:0 reflection:0 error:&v138];
          id v102 = v138;

          v103 = (void *)v134[12];
          v134[12] = v101;

          uint64_t v104 = *(unsigned __int16 *)(v121 + 814);
          uint64_t v105 = *(unsigned __int16 *)(v121 + 812);
          id v106 = [v91 rasterSampleCount];
          uint64_t v107 = v129 * v130 * v104;
          v72 = v137;
          uint64_t v108 = v107 * v105;
          v109 = v123;
          id v110 = [v137 newBufferWithLength:v108 * (void)v106 options:32];
          v111 = (void *)v134[14];
          v134[14] = v110;

          v112 = v102;
          uint64_t v5 = v132;
          unsigned int v3 = v133;
          unint64_t v8 = v131;
          long long v33 = v124;
          uint64_t v32 = v125;
        }
      }
      GTMTLReplayController_restoreCommandEncoder();
      *uint64_t v5 = *(_DWORD *)InclusiveRange + 1;
      uint64_t v15 = v135;
    }
  }
  else
  {
    GTMTLReplayController_tileMemoryFree(v4);
  }
  if (v33)
  {
    GTMTLReplayController_playTo(v4, v136);
    GTMTLReplayController_executeCommandsInBuffer((uint64_t *)v4, v33, 0, v3 + 1);
    *uint64_t v5 = v8;
  }
  else
  {
    GTMTLReplayController_playTo(v4, v8);
  }
  v113 = GroupBuilder_findInclusiveRange(*(_DWORD *)(v15 + 12), *(void **)(v15 + 24), v8);
  uint64_t v114 = GroupRange_encoderWithIndirectResources((uint64_t)v113);
  if (v114) {
    GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer(v4, *(void *)(v114 + 8));
  }
  if (!InclusiveRange || (IsFuncEnumEndEncoding(*(_DWORD *)(v32 + 8)) & 1) != 0 || (GT_SUPPORT_0 & 1) == 0) {
    goto LABEL_105;
  }
  uint64_t v115 = GTMTLReplayController_renderPassDescriptor(v4);
  v116 = [*(id *)(v4 + 8) renderCommandEncoderForKey:*(void *)(v4 + 11320)];
  v117 = v116;
  if (*(void *)(v4 + 112))
  {
    [v116 setRenderPipelineState:*(void *)(v4 + 88)];
    [v117 setTileBuffer:*(void *)(v4 + 112) offset:0 atIndex:0];
    uint64_t v118 = *(unsigned __int16 *)(v115 + 812);
    *(void *)buf = *(unsigned __int16 *)(v115 + 814);
    goto LABEL_102;
  }
  if (*(void *)(v4 + 104))
  {
    [v116 setRenderPipelineState:*(void *)(v4 + 80)];
    uint64_t v118 = 1;
    *(void *)buf = 1;
LABEL_102:
    uint64_t v151 = v118;
    uint64_t v152 = 1;
    [v117 dispatchThreadsPerTile];
    if (*(void *)(v4 + 104))
    {
      [v117 setRenderPipelineState:*(void *)(v4 + 64)];
      [v117 setThreadgroupMemoryLength:*(unsigned int *)(v115 + 800) offset:0 atIndex:0];
      [v117 setTileBuffer:*(void *)(v4 + 104) offset:0 atIndex:0];
      int64x2_t v148 = vdupq_n_s64(1uLL);
      CFStringRef v149 = (const __CFString *)(&def_1C1270 + 1);
      [v117 dispatchThreadsPerTile:&v148];
    }
  }

LABEL_105:
  v5[1] = v3;
  return (unsigned int *)[*(id *)(v4 + 24) commitCommandBuffer];
}

void GTMTLReplayController_restoreGroup(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5) {
    BOOL v6 = a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    GTMTLReplayController_restoreGroup(a1, a2 - 32 * v5, a3);
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)a1 + 120) + 24) + (*(void *)a2 << 6);
  if (IsFuncEnumCreateCommandEncoder(*(_DWORD *)(v7 + 8)))
  {
    GTMTLReplayController_restoreCommandEncoder();
    unint64_t v8 = a1[5620];
    GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer((uint64_t)a1, v8);
  }
  else
  {
    GTMTLReplayController_defaultDispatchFunction((uint64_t)a1, v7);
  }
}

void GTMTLReplayController_restoreCommandEncoder()
{
  uint64_t v0 = __chkstk_darwin();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = *(void *)(*(void *)v5 + 16);
  uint64_t v8 = *(void *)(*(void *)v5 + 120);
  id v9 = *(id *)(v5 + 8);
  uint64_t v10 = *(void *)(v8 + 24);
  bzero(v50, 0x2B90uLL);
  GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v50, (uint64_t *)(v10 + (v4 << 6)), v7);
  switch(v50[0])
  {
    case 0x1C:
      GTMTLReplayController_defaultDispatchFunction(v5, v10 + (v4 << 6));
      id v12 = [v9 computeCommandEncoderForKey:*(void *)(v5 + 11320)];
      if ([(id)g_commandBufferDescriptor errorOptions])
      {
        id v13 = [objc_alloc((Class)NSString) initWithFormat:@"debugIndex(%u)" , *(unsigned int *)(v5 + 22480)];
        [v12 insertDebugSignpost:v13];
      }
      GTMTLReplayController_restoreComputeCommandEncoder(v12, (uint64_t)__src, v5 + 11368, v9);
      goto LABEL_49;
    case 0x46:
      uint64_t v14 = v10 + (v4 << 6);
      int v15 = *(_DWORD *)(v14 + 8);
      if (v15 == -16286)
      {
        uint64_t v30 = GTTraceFunc_argumentBytesWithMap((void *)(v10 + (v4 << 6)), *(unsigned __int8 *)(v14 + 13), v7);
        uint64_t v31 = [v9 parallelRenderCommandEncoderForKey:*(void *)v30];
        uint64_t v32 = [v31 renderCommandEncoder];
        if ([(id)g_commandBufferDescriptor errorOptions])
        {
          id v33 = [objc_alloc((Class)NSString) initWithFormat:@"debugIndex(%u)"];
          [v32 insertDebugSignpost:v33];
        }
        [v9 setRenderCommandEncoder:v32 forKey:*((void *)v30 + 1)];

        if ((v2 & 1) == 0) {
          goto LABEL_81;
        }
      }
      else if (v15 == -16353)
      {
        int v16 = GTTraceFunc_argumentBytesWithMap((void *)(v10 + (v4 << 6)), *(unsigned __int8 *)(v10 + (v4 << 6) + 13), v7);
        memcpy(__dst, __src[0], sizeof(__dst));
        if (v2)
        {
          for (uint64_t i = 0; i != 64; i += 8)
            BYTE1(__dst[i + 3]) = 1;
          BYTE1(__dst[87]) = 1;
          BYTE1(__dst[93]) = 1;
        }
        else if (dword_77313C)
        {
          _clearDontCareAttachments((uint64_t)__dst);
        }
        if ((v2 & 2) != 0)
        {
          for (uint64_t j = 0; j != 64; j += 8)
          {
            if (__dst[j]) {
              char v36 = 3;
            }
            else {
              char v36 = 1;
            }
            BYTE3(__dst[j + 3]) = v36;
          }
          if (__dst[84]) {
            char v37 = 3;
          }
          else {
            char v37 = 1;
          }
          BYTE3(__dst[87]) = v37;
          if (__dst[90]) {
            char v38 = 3;
          }
          else {
            char v38 = 1;
          }
          BYTE3(__dst[93]) = v38;
        }
        NSUInteger v39 = [v9 commandBufferForKey:*(void *)v16];
        uint64_t v40 = [v9 renderPassDescriptorMapWithMemorylessSubstitutes:*(void *)(v5 + 40)];
        unint64_t v41 = MakeMTLRenderPassDescriptor((uint64_t)__dst, v40);

        uint64_t v32 = [v39 renderCommandEncoderWithDescriptor:v41];
        if ([(id)g_commandBufferDescriptor errorOptions])
        {
          id v42 = [objc_alloc((Class)NSString) initWithFormat:@"debugIndex(%u)" debugIndex:*(unsigned int *)(v5 + 22480)];
          [v32 insertDebugSignpost:v42];
        }
        [v9 setRenderCommandEncoder:v32 forKey:*((void *)v16 + 1)];

        if ((v2 & 1) == 0) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v32 = 0;
        if ((v2 & 1) == 0)
        {
LABEL_81:
          unint64_t v47 = *(void *)(v5 + 22464);
          unint64_t v48 = *(void *)(v5 + 22472);
          uint64_t v53 = 1;
          double v54 = (double)v47;
          double v55 = (double)v48;
          uint64_t v56 = 0x3FF0000000000000;
          uint64_t v57 = 1;
          unint64_t v58 = v47;
          unint64_t v59 = v48;
          GTMTLReplayController_restoreRenderCommandEncoder(v32, (uint64_t)__src, v5 + 11368, v9);

          goto LABEL_82;
        }
      }
      if (GT_SUPPORT_0)
      {
        uint64_t v43 = GTMTLReplayController_renderPassDescriptor(v5);
        id v44 = [*(id *)(v5 + 8) renderCommandEncoderForKey:*(void *)(v5 + 11320)];
        uint64_t v45 = v44;
        if (*(void *)(v5 + 112))
        {
          [v44 setRenderPipelineState:*(void *)(v5 + 96)];
          [v45 setTileBuffer:*(void *)(v5 + 112) offset:0 atIndex:0];
          uint64_t v46 = *(unsigned __int16 *)(v43 + 812);
          __dst[0] = *(unsigned __int16 *)(v43 + 814);
          __dst[1] = v46;
          __dst[2] = 1;
          [v45 dispatchThreadsPerTile:__dst];
        }
        if (*(void *)(v5 + 104))
        {
          [v45 setRenderPipelineState:*(void *)(v5 + 72)];
          [v45 setThreadgroupMemoryLength:*(unsigned int *)(v43 + 800) offset:0 atIndex:0];
          [v45 setTileBuffer:*(void *)(v5 + 104) offset:0 atIndex:0];
          int64x2_t v60 = vdupq_n_s64(1uLL);
          uint64_t v61 = 1;
          [v45 dispatchThreadsPerTile:&v60];
        }
      }
      goto LABEL_81;
    case 0x41:
      v11 = GTTraceFunc_argumentBytesWithMap((void *)(v10 + (v4 << 6)), *(unsigned __int8 *)(v10 + (v4 << 6) + 13), v7);
      memcpy(__dst, __src[0], sizeof(__dst));
      if (v2)
      {
        for (uint64_t k = 0; k != 64; k += 8)
          BYTE1(__dst[k + 3]) = 1;
        BYTE1(__dst[87]) = 1;
        BYTE1(__dst[93]) = 1;
      }
      else if (dword_77313C)
      {
        _clearDontCareAttachments((uint64_t)__dst);
      }
      if ((v2 & 2) != 0)
      {
        for (uint64_t m = 0; m != 64; m += 8)
        {
          if (__dst[m]) {
            char v19 = 3;
          }
          else {
            char v19 = 1;
          }
          BYTE3(__dst[m + 3]) = v19;
        }
        if (__dst[84]) {
          char v20 = 3;
        }
        else {
          char v20 = 1;
        }
        BYTE3(__dst[87]) = v20;
        if (__dst[90]) {
          char v21 = 3;
        }
        else {
          char v21 = 1;
        }
        BYTE3(__dst[93]) = v21;
      }
      BOOL v22 = [v9 commandBufferForKey:*(void *)v11];
      unint64_t v23 = [v9 renderPassDescriptorMapWithMemorylessSubstitutes:*(void *)(v5 + 40)];
      long long v24 = MakeMTLRenderPassDescriptor((uint64_t)__dst, v23);

      long long v25 = [v22 parallelRenderCommandEncoderWithDescriptor:v24];
      if ([(id)g_commandBufferDescriptor errorOptions])
      {
        id v26 = [objc_alloc((Class)NSString) initWithFormat:@"debugIndex(%u)"];
        [v25 insertDebugSignpost:v26];
      }
      [v9 setParallelRenderCommandEncoder:v25 forKey:*((void *)v11 + 1)];

      id v12 = v25;
      uint64_t v27 = 0;
      uint64_t v28 = (void *)(v5 + 288);
      BOOL v29 = v52;
      do
      {
        if (*(v29 - 8) != *(v28 - 8)) {
          [v12 setColorStoreAction:atIndex:];
        }
        if (*v29 != *v28) {
          [v12 setColorStoreActionOptions:atIndex:];
        }
        ++v28;
        ++v27;
        ++v29;
      }
      while (v27 != 8);
      if (v52[64] != *(unsigned __int8 *)(v5 + 352)) {
        [v12 setDepthStoreAction:];
      }
      if (v52[66] != *(unsigned __int8 *)(v5 + 354)) {
        [v12 setDepthStoreActionOptions:];
      }
      if (v52[65] != *(unsigned __int8 *)(v5 + 353)) {
        [v12 setStencilStoreAction:];
      }
      if (v52[67] != *(unsigned __int8 *)(v5 + 355)) {
        [v12 setStencilStoreActionOptions:];
      }

LABEL_49:
      goto LABEL_82;
  }
  GTMTLReplayController_defaultDispatchFunction(v5, v10 + (v4 << 6));
LABEL_82:
}

void GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if ((*(unsigned char *)(*(void *)a1 + 272) & 2) == 0)
  {
    _restoreIndirectResourceUsage(a1, a2);
    return;
  }
  int v5 = *(_DWORD *)(a1 + 11312);
  if (v5 == 70 || v5 == 28)
  {
    InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(v4[14] + 12), *(void **)(v4[14] + 24), a2);
    if (InclusiveRange)
    {
      uint64_t v8 = InclusiveRange;
      while (1)
      {
        int FuncEnumConstructorType = GetFuncEnumConstructorType(*((_DWORD *)v8 + 7));
        if (FuncEnumConstructorType == 25 || FuncEnumConstructorType == 51) {
          break;
        }
        uint64_t v10 = *((unsigned int *)v8 + 4);
        if (v10) {
          v8 -= 4 * v10;
        }
        else {
          uint64_t v8 = 0;
        }
        if (!v8) {
          return;
        }
      }
      uint64_t v11 = *(void *)(v4[15] + 24) + (*v8 << 6);
      uint64_t v12 = v4[2];
      id v13 = GetFuncEnumConstructorType(*(_DWORD *)(v11 + 8))
          ? (char *)*((void *)GTTraceFunc_argumentBytesWithMap((void *)v11, *(unsigned __int8 *)(v11 + 13), v12) + 1)
          : GTTraceFunc_targetContext(v11, v12);
      unint64_t v48 = v13;
      if (v13)
      {
        entry = find_entry(v4[20], &v48, 8uLL, 0);
        if (*entry)
        {
          uint64_t v15 = *(void *)(*entry + 32);
          if (v15)
          {
            uint64_t v16 = *(int *)(*(void *)(v15 + 16) + 48);
            uint64_t v17 = **(apr_pool_t ***)(a1 + 152);
            v18 = apr_palloc(v17, 8 * v16);
            char v19 = v18;
            if (v18) {
              bzero(v18, 8 * v16);
            }
            uint64_t v45 = (char *)&v19[v16];
            apr_size_t v20 = 8 * *(int *)(*(void *)(v4[5] + 280) + 12);
            char v21 = apr_palloc(v17, v20);
            BOOL v22 = v21;
            if (v21) {
              bzero(v21, v20);
            }
            uint64_t v23 = *(void *)(v15 + 16);
            id v24 = *(id *)(a1 + 8);
            *(void *)(v23 + 24) = 0;
            *(void *)(v23 + 32) = 0;
            *(void *)(v23 + 16) = v23;
            *(_DWORD *)(v23 + 40) = 0;
            long long v25 = apr_hash_next((apr_hash_index_t *)(v23 + 16));
            if (!v25)
            {
              int v27 = 0;
              char v38 = (char *)&v19[v16];
              BOOL v29 = v38;
              goto LABEL_62;
            }
            id v26 = v25;
            id v44 = v17;
            int v27 = 0;
            uint64_t v28 = 0;
            BOOL v29 = (char *)&v19[v16];
            id v46 = v24;
            while (1)
            {
              uint64_t v30 = *(uint64_t **)(*((void *)v26 + 1) + 32);
              int v31 = *((_DWORD *)v30 + 2);
              if (v31 <= 59) {
                break;
              }
              if (v31 <= 79)
              {
                if (v31 != 60)
                {
                  if (v31 == 72)
                  {
                    v22[(int)v28] = [v24 residencySetForKey:*v30];
                    uint64_t v28 = (v28 + 1);
                  }
                  goto LABEL_52;
                }
LABEL_47:
                Object = GTMTLSMContext_getObject(**(void **)(*(void *)a1 + 40), *v30, *(void *)(*(void *)a1 + 80) + a2);
                if ((!Object[15] || *(_DWORD *)(a1 + 11312) != 28) && (!Object[16] || *(_DWORD *)(a1 + 11312) != 70)) {
                  goto LABEL_52;
                }
LABEL_51:
                v19[v27++] = [v24 resourceForKey:*v30];
                goto LABEL_52;
              }
              if (v31 == 80)
              {
                uint64_t v47 = v28;
                uint64_t v34 = v29;
                uint64_t v35 = v22;
                char v36 = [v24 textureForKey:*v30];
                if ([v36 storageMode] != (char *)&def_1C1270 + 3) {
                  v19[v27++] = [v24 resourceForKey:*v30];
                }

                BOOL v22 = v35;
                BOOL v29 = v34;
                id v24 = v46;
                uint64_t v28 = v47;
                goto LABEL_52;
              }
              if (v31 == 83) {
                goto LABEL_47;
              }
LABEL_52:
              id v26 = apr_hash_next(v26);
              if (!v26)
              {
                if (v28)
                {
                  char v37 = [v24 commandBufferForKey:*(void *)(a1 + 11352)];
                  [v37 useResidencySets:v22 count:(int)v28];
                }
                uint64_t v17 = v44;
                char v38 = v45;
LABEL_62:
                uint64_t v39 = v38 - v29;
                unint64_t v40 = (unint64_t)(v38 - v29) >> 3;
                int v41 = *(_DWORD *)(a1 + 11312);
                switch(v41)
                {
                  case 17:
                    uint64_t v43 = [v24 accelerationStructureCommandEncoderForKey:*(void *)(a1 + 11320)];
                    break;
                  case 28:
                    uint64_t v43 = [v24 computeCommandEncoderForKey:*(void *)(a1 + 11320)];
                    break;
                  case 70:
                    id v42 = [v24 renderCommandEncoderForKey:*(void *)(a1 + 11320)];
                    if (!v27)
                    {
LABEL_71:
                      if (v40) {
                        [v42 useHeaps:v29 count:(int)(v39 >> 3)];
                      }

LABEL_74:
                      apr_pool_clear(v17);
                      _restoreIndirectResourceUsage(a1, a2);

                      return;
                    }
LABEL_70:
                    [v42 useResources:v19 count:v27 usage:1];
                    goto LABEL_71;
                  default:
                    goto LABEL_74;
                }
                id v42 = (void *)v43;
                if (!v27) {
                  goto LABEL_71;
                }
                goto LABEL_70;
              }
            }
            if (v31 > 49)
            {
              if (v31 == 50)
              {
                *((void *)v29 - 1) = [v24 heapForKey:*v30];
                v29 -= 8;
                goto LABEL_52;
              }
              if (v31 != 57) {
                goto LABEL_52;
              }
            }
            else if (v31 != 16 && v31 != 22)
            {
              goto LABEL_52;
            }
            goto LABEL_51;
          }
        }
      }
    }
  }
}

void _restoreIndirectResourceUsage(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  InclusiveRange = (int *)GroupBuilder_findInclusiveRange(*(_DWORD *)(*(void *)(*(void *)a1 + 112) + 12), *(void **)(*(void *)(*(void *)a1 + 112) + 24), a2);
  if (InclusiveRange)
  {
    BOOL v6 = InclusiveRange;
    while (1)
    {
      int v7 = v6[7];
      if (IsFuncEnumCreateCommandEncoder(v7)) {
        break;
      }
      uint64_t v8 = v6[4];
      if (v8) {
        v6 -= 8 * v8;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        return;
      }
    }
    int FuncEnumConstructorType = GetFuncEnumConstructorType(v7);
    if ((FuncEnumConstructorType - 17) <= 0x35
      && ((1 << (FuncEnumConstructorType - 17)) & 0x20000000000801) != 0)
    {
      unint64_t v11 = *v6;
      uint64_t v12 = a2 - v11;
      if (a2 > v11)
      {
        uint64_t v13 = v11 << 6;
        do
        {
          uint64_t v14 = *(void *)(*(void *)(v4 + 120) + 24) + v13;
          if (IsFuncEnumUseResourceCall(*(_DWORD *)(v14 + 8))) {
            GTMTLReplayController_defaultDispatchFunction(a1, v14);
          }
          v13 += 64;
          --v12;
        }
        while (v12);
      }
    }
  }
}

uint64_t _clearDontCareAttachments(uint64_t result)
{
  uint64_t v1 = 0;
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    uint64_t v7 = result + v1;
    if (!*(unsigned char *)(result + v1 + 25))
    {
      *(unsigned char *)(v7 + 25) = 2;
      *(_OWORD *)(v7 + 32) = xmmword_4C8030;
      *(_OWORD *)(v7 + 48) = _Q1;
    }
    v1 += 64;
  }
  while (v1 != 512);
  if (!*(unsigned char *)(result + 697))
  {
    *(unsigned char *)(result + 697) = 2;
    *(void *)(result + 704) = 0x3FE0000000000000;
  }
  if (!*(unsigned char *)(result + 745))
  {
    *(unsigned char *)(result + 745) = 2;
    *(_DWORD *)(result + 752) = -1431655766;
  }
  return result;
}

void GTMTLReplayController_debugSubCommandResume(unsigned int *a1, unsigned int a2, int a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)a1;
  if (a2)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + 120) + 24) + ((unint64_t)(a2 - 1) << 6);
    if (!a3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!a3)
    {
LABEL_7:
      if (*(_DWORD *)(v6 - 56) >> 2 == 1073737833)
      {
        uint64_t v13 = 0;
        long long v11 = 0u;
        long long v12 = 0u;
        GetExecuteCommandsInBufferArgs((uint64_t)&v11, v6, *(void *)(v5 + 16));
        unsigned int v7 = a2 - 1;
        uint64_t v8 = v12;
        a1 = v4;
        unsigned int v9 = v7;
      }
      else
      {
        unsigned int v7 = a2 - 1;
        unsigned int v9 = v7;
        uint64_t v8 = 0;
      }
      GTMTLReplayController_debugSubCommandStop((uint64_t)a1, v9, v8);
      goto LABEL_11;
    }
  }
  if ((*(_DWORD *)(v6 + 8) & 0xFFFFFFFC) != 0xFFFFC1A4) {
    goto LABEL_7;
  }
  GTMTLReplayController_debugSubCommandStop((uint64_t)a1, a2, (a3 - 1));
  unsigned int v7 = a2 - 1;
LABEL_11:
  ExclusiveRange = GroupBuilder_findExclusiveRange(*(_DWORD *)(*(void *)(*(void *)v4 + 112) + 12), *(void **)(*(void *)(*(void *)v4 + 112) + 24), v7);

  GTMTLReplayController_restoreGroup(v4, (uint64_t)ExclusiveRange, 3);
}

void GTMTLReplayController_prePlayForProfiling(uint64_t a1)
{
  if (s_logUsingOsLog)
  {
    char v2 = gt_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&def_1C1270, v2, OS_LOG_TYPE_INFO, "Pre-playing for profiling", buf, 2u);
    }
  }
  else
  {
    uint64_t v3 = __stdoutp;
    id v4 = +[NSString stringWithFormat:@"Pre-playing for profiling"];
    fprintf(v3, "%s\n", (const char *)[v4 UTF8String]);
  }
  uint64_t v6 = *(void *)a1;
  if (s_logUsingOsLog)
  {
    unsigned int v7 = gt_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long v12 = 0;
      _os_log_impl(&def_1C1270, v7, OS_LOG_TYPE_INFO, "Rewinding for profiling", v12, 2u);
    }
  }
  else
  {
    uint64_t v8 = __stdoutp;
    unsigned int v7 = +[NSString stringWithFormat:@"Rewinding for profiling"];
    fprintf(v8, "%s\n", (const char *)[v7 UTF8String]);
  }

  Rewind((_DWORD *)a1);
  [*(id *)(a1 + 8) setLayerClass:objc_opt_class()];
  unint64_t v9 = *(void *)(v6 + 96);
  if (v9)
  {
    GTMTLReplayController_playTo(a1, v9);
    uint64_t v10 = [*(id *)(a1 + 8) defaultCommandQueue];
    [v10 finish];
  }
}

void GTMTLReplayController_populateUnusedResources(void *a1, void *a2)
{
  id v12 = a2;
  uint64_t v3 = 0;
  uint64_t v4 = a1[5];
  do
  {
    uint64_t v5 = *(void *)(v4 + 8 * v3 + 8);
    int v6 = *(_DWORD *)(v5 + 12);
    if (v6 >= 1)
    {
      for (uint64_t i = 0; i < v6; ++i)
      {
        uint64_t v8 = *(void *)(*(void *)(v5 + 24) + 8 * i);
        unint64_t v9 = *(void *)(v8 + 16);
        unint64_t v10 = a1[8];
        if (v10 <= v9 && a1[9] + v10 > v9)
        {
          [v12 addUnusedResourceKey:*(void *)(v8 + 8)];
          int v6 = *(_DWORD *)(v5 + 12);
        }
      }
    }
    ++v3;
  }
  while (v3 != 35);
}

id GTMTLReplayController_defaultLibrary(void *a1)
{
  id v1 = a1;
  char v2 = +[NSBundle bundleForClass:objc_opt_class()];
  id v3 = [v1 newDefaultLibraryWithBundle:v2 error:0];

  return v3;
}

void sub_257AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_257C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_257D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_257EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2584F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_258A00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_258B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(uint64_t a1)
{
  char v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      char v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(*a1);
    std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(a1 + 4);
    operator delete(a1);
  }
}

void *std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__value_func[abi:nn180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()(int **a1, uint64_t a2)
{
  if (!a2) {
    return;
  }
  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)));
  if (String)
  {
    std::string::basic_string[abi:nn180100](&__p, String, v5);
  }
  else
  {
    __p = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  int v6 = **a1;
  uint64_t v7 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  if (v7 && *(unsigned char *)v7 == 1)
  {
    uint64_t v8 = *(void *)(v7 + 128);
    if (v8 && *(unsigned char *)(v8 + 16) == 3)
    {
      uint64_t v10 = *(void *)(v8 - 32);
      long long v11 = (void *)(v10 + 24);
      if (*(_DWORD *)(v10 + 32) >= 0x41u) {
        long long v11 = (void *)*v11;
      }
      int v6 = *(_DWORD *)v11;
    }
  }
  id v12 = a1[1];
  char v13 = HIBYTE(v33);
  if (v33 >= 0) {
    p_p = (uint64_t *)&__p;
  }
  else {
    p_p = (uint64_t *)__p;
  }
  if (v33 >= 0) {
    unint64_t v15 = HIBYTE(v33);
  }
  else {
    unint64_t v15 = v32;
  }
  unint64_t v16 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](p_p, v15);
  int8x8_t v17 = *(int8x8_t *)(v12 + 2);
  if (!*(void *)&v17) {
    goto LABEL_37;
  }
  unint64_t v18 = v16;
  uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
  v19.i16[0] = vaddlv_u8(v19);
  unint64_t v20 = v19.u32[0];
  if (v19.u32[0] > 1uLL)
  {
    unint64_t v21 = v16;
    if (v16 >= *(void *)&v17) {
      unint64_t v21 = v16 % *(void *)&v17;
    }
  }
  else
  {
    unint64_t v21 = (*(void *)&v17 - 1) & v16;
  }
  BOOL v22 = *(unsigned __int8 ***)(*(void *)v12 + 8 * v21);
  if (!v22 || (uint64_t v23 = *v22) == 0)
  {
LABEL_37:
    if (v13 < 0) {
      goto LABEL_38;
    }
    return;
  }
  while (1)
  {
    unint64_t v24 = *((void *)v23 + 1);
    if (v18 == v24) {
      break;
    }
    if (v20 > 1)
    {
      if (v24 >= *(void *)&v17) {
        v24 %= *(void *)&v17;
      }
    }
    else
    {
      v24 &= *(void *)&v17 - 1;
    }
    if (v24 != v21) {
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v23 = *(unsigned __int8 **)v23;
    if (!v23) {
      goto LABEL_37;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100](v23 + 16, (unsigned __int8 *)&__p)) {
    goto LABEL_36;
  }
  long long v25 = a1[2];
  v28[0] = a2;
  v28[1] = v25;
  int v29 = v6;
  int v30 = 0;
  uint64_t v34 = v28;
  uint64_t v26 = *((void *)v23 + 8);
  if (v26)
  {
    (*(void (**)(uint64_t, void **))(*(void *)v26 + 48))(v26, &v34);
    if (v33 < 0) {
LABEL_38:
    }
      operator delete(__p);
  }
  else
  {
    uint64_t v27 = std::__throw_bad_function_call[abi:nn180100]();
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>(v27);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>(uint64_t a1)
{
  std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__value_func[abi:nn180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    char v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::string::basic_string[abi:nn180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    int v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v7 = *(_DWORD *)(v6 + 32);
  if (v7 > 0x40) {
    uint64_t v8 = **(void **)(v6 + 24);
  }
  else {
    uint64_t v8 = (uint64_t)(*(void *)(v6 + 24) << -(char)v7) >> -(char)v7;
  }
  uint64_t v9 = v8 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  uint64_t TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v19 = v9;
  uint64_t v17 = 9;
  uint64_t v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 9uLL, &v17);
  long long v11 = v10;
  uint64_t v13 = (uint64_t)(v10 + 40);
  id v12 = (char *)*((void *)v10 + 5);
  uint64_t v14 = (char *)*((void *)v10 + 6);
  unint64_t v15 = v12;
  if (v12 != v14)
  {
    while (*(void *)v15 != v5)
    {
      v15 += 8;
      if (v15 == v14)
      {
        unint64_t v15 = (char *)*((void *)v10 + 6);
        break;
      }
    }
  }
  if (v15 == v14
    || v15 - v12 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v10 + 5, v5))
  {
    uint64_t v17 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v13, v5);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v17);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v19);
    uint64_t v16 = a3;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v16);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &TracePointLocation);
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  if (!v2) {
    return -1;
  }
  uint64_t v4 = *(void *)(v2 - 8 * *(unsigned int *)(v2 + 8));
  if (*(unsigned char *)v4 != 15)
  {
    uint64_t v4 = *(void *)(v4 - 8 * *(unsigned int *)(v4 + 8));
    if (!v4)
    {
      size_t v9 = 0;
      uint64_t v8 = "";
      goto LABEL_10;
    }
  }
  uint64_t v5 = *(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8));
  if (v5)
  {
    uint64_t String = llvm::MDString::getString(v5);
    if (String)
    {
      uint64_t v8 = (char *)String;
      size_t v9 = v7;
LABEL_10:
      std::string::basic_string[abi:nn180100](__dst, v8, v9);
      goto LABEL_11;
    }
  }
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v21 = 0;
LABEL_11:
  uint64_t v11 = *(void *)(v2 - 8 * *(unsigned int *)(v2 + 8));
  if (*(unsigned char *)v11 != 15)
  {
    uint64_t v11 = *(void *)(v11 - 8 * *(unsigned int *)(v11 + 8));
    if (!v11)
    {
      size_t v16 = 0;
      unint64_t v15 = "";
      goto LABEL_18;
    }
  }
  id v12 = *(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
  if (v12)
  {
    uint64_t v13 = llvm::MDString::getString(v12);
    if (v13)
    {
      unint64_t v15 = (char *)v13;
      size_t v16 = v14;
LABEL_18:
      std::string::basic_string[abi:nn180100](__p, v15, v16);
      goto LABEL_19;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
LABEL_19:
  uint64_t v10 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, v2, (uint64_t)__dst, (uint64_t)__p, *(unsigned int *)(v2 + 4), *(unsigned __int16 *)(v2 + 2));
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

uint64_t std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  id v3 = (uint64_t (*)(void *, void, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    id v3 = *(uint64_t (**)(void *, void, void))(*v4 + v3);
  }
  return v3(v4, *a2, a1[4]);
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_7459B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_7459B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__func()
{
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataValueTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  int v7 = *((_DWORD *)a2 + 4);
  uint64_t TracePointLocation = (void *)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  size_t v9 = *(llvm::DIVariable **)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32);
  int v10 = *(unsigned __int8 *)v9;
  if (v10 == 24)
  {
    unint64_t v15 = ((void *)v9 - *((unsigned int *)v9 + 2))[3];
    v46[0] = 0;
    v46[1] = 0;
    uint64_t v45 = v46;
    uint64_t v16 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v15, &v45);
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v46[0]);
    Filename = llvm::DIVariable::getFilename(v9);
    if (Filename)
    {
      std::string::basic_string[abi:nn180100](&__dst, Filename, v18);
    }
    else
    {
      __dst = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
    }
    Directory = llvm::DIVariable::getDirectory(v9);
    if (Directory)
    {
      std::string::basic_string[abi:nn180100](&__p, Directory, v23);
    }
    else
    {
      __p = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
    }
    uint64_t v29 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v9 + 1, (uint64_t)&__dst, (uint64_t)&__p, *((unsigned int *)v9 + 6), -1);
    if (SHIBYTE(v49) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(__dst);
    }
    int v30 = (llvm::MDString *)((void *)v9 - *((unsigned int *)v9 + 2))[1];
    if (v30 && (uint64_t String = (void *)llvm::MDString::getString(v30)) != 0)
    {
      std::string::basic_string[abi:nn180100](&__dst, String, v32);
    }
    else
    {
      __dst = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
    }
    uint64_t v28 = ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(a1, (uint64_t)v9, (uint64_t)&__dst, v16, v29);
  }
  else
  {
    if (v10 != 25)
    {
      uint64_t v19 = -1;
      goto LABEL_39;
    }
    unint64_t v11 = ((void *)v9 - *((unsigned int *)v9 + 2))[3];
    v54[0] = 0;
    v54[1] = 0;
    uint64_t v53 = v54;
    uint64_t v12 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v11, &v53);
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v54[0]);
    uint64_t v13 = llvm::DIVariable::getFilename(v9);
    if (v13)
    {
      std::string::basic_string[abi:nn180100](&__dst, v13, v14);
    }
    else
    {
      __dst = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
    }
    unint64_t v20 = llvm::DIVariable::getDirectory(v9);
    if (v20)
    {
      std::string::basic_string[abi:nn180100](&__p, v20, v21);
    }
    else
    {
      __p = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
    }
    uint64_t v24 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v9 + 1, (uint64_t)&__dst, (uint64_t)&__p, *((unsigned int *)v9 + 6), -1);
    if (SHIBYTE(v49) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(__dst);
    }
    long long v25 = (llvm::MDString *)((void *)v9 - *((unsigned int *)v9 + 2))[1];
    if (v25 && (uint64_t v26 = (void *)llvm::MDString::getString(v25)) != 0)
    {
      std::string::basic_string[abi:nn180100](&__dst, v26, v27);
    }
    else
    {
      __dst = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
    }
    uint64_t v28 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(a1, (uint64_t)v9, (uint64_t)&__dst, v12, v24, *((_WORD *)v9 + 16) != 0);
  }
  uint64_t v19 = v28;
  if (SHIBYTE(v52) < 0) {
    operator delete(__dst);
  }
LABEL_39:
  uint64_t v33 = *(unsigned int *)(v3 + 8);
  if (**(unsigned char **)(v3 - 8 * v33 + 40) == 6)
  {
    llvm::DIExpression::getFragmentInfo();
    uint64_t v34 = __dst;
    if ((_BYTE)v52) {
      uint64_t v35 = v51;
    }
    else {
      uint64_t v35 = 0;
    }
    if (!(_BYTE)v52) {
      uint64_t v34 = 0;
    }
    uint64_t v33 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v34 = 0;
  }
  uint64_t v36 = *(void *)(*(void *)(v3 - 8 * v33 + 48) + 128);
  unsigned int v37 = *(_DWORD *)(v36 + 32);
  if (v37 > 0x40) {
    uint64_t v38 = **(void **)(v36 + 24);
  }
  else {
    uint64_t v38 = (uint64_t)(*(void *)(v36 + 24) << -(char)v37) >> -(char)v37;
  }
  __dst = (void *)(v6 & 0xFFFFFF | (v7 << 24));
  __p = TracePointLocation;
  uint64_t v58 = v38;
  uint64_t v59 = v19;
  uint64_t v56 = v35;
  uint64_t v57 = v34;
  uint64_t v55 = 10;
  uint64_t v39 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 0xAuLL, &v55);
  unint64_t v40 = v39;
  uint64_t v42 = (uint64_t)(v39 + 40);
  int v41 = (char *)*((void *)v39 + 5);
  uint64_t v43 = (char *)*((void *)v39 + 6);
  id v44 = v41;
  if (v41 != v43)
  {
    while (*(void *)v44 != v3)
    {
      v44 += 8;
      if (v44 == v43)
      {
        id v44 = (char *)*((void *)v39 + 6);
        break;
      }
    }
  }
  if (v44 == v43
    || v44 - v41 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v39 + 5, v3))
  {
    uint64_t v55 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v42, v3);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v40 + 11, &v55);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v40 + 11, &__dst);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v40 + 11, &__p);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v40 + 11, &v59);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v40 + 11, &v58);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v40 + 11, &v57);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v40 + 11, &v56);
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(uint64_t **a1, unint64_t a2, void **a3)
{
  unsigned int v5 = a1;
  int v7 = a3 + 1;
  uint64_t v6 = a3[1];
  if (v6)
  {
    uint64_t v8 = a3 + 1;
    size_t v9 = a3[1];
    do
    {
      unint64_t v10 = v9[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      if (v11) {
        uint64_t v8 = (void **)v9;
      }
      size_t v9 = (void *)*v12;
    }
    while (*v12);
    if (v8 != v7 && (unint64_t)v8[4] <= a2)
    {
      __dst = (void **)(&def_1C1270 + 3);
      uint64_t v24 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 3uLL, &__dst);
      long long v25 = (void *)*((void *)v24 + 5);
      uint64_t v26 = (void *)*((void *)v24 + 6);
      size_t v27 = v25;
      if (v25 != v26)
      {
        while (*v27 != a2)
        {
          if (++v27 == v26)
          {
            size_t v27 = (void *)*((void *)v24 + 6);
            break;
          }
        }
      }
      uint64_t v28 = v27 - v25;
      if (v27 == v26) {
        return -1;
      }
      else {
        return v28;
      }
    }
    while (1)
    {
      while (1)
      {
        uint64_t v13 = (uint64_t **)v6;
        unint64_t v14 = v6[4];
        if (v14 <= a2) {
          break;
        }
        uint64_t v6 = *v13;
        unint64_t v15 = v13;
        if (!*v13) {
          goto LABEL_19;
        }
      }
      if (v14 >= a2) {
        break;
      }
      uint64_t v6 = v13[1];
      if (!v6)
      {
        unint64_t v15 = v13 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    unint64_t v15 = a3 + 1;
    uint64_t v13 = a3 + 1;
LABEL_19:
    uint64_t v16 = (uint64_t *)operator new(0x28uLL);
    v16[4] = a2;
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(a3, (uint64_t)v13, v15, v16);
  }
  __dst = (void **)(&def_1C1270 + 3);
  uint64_t v17 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v5, 3uLL, &__dst);
  size_t v18 = (char *)*((void *)v17 + 5);
  uint64_t v19 = (char *)*((void *)v17 + 6);
  unint64_t v20 = v18;
  if (v18 != v19)
  {
    unint64_t v20 = (char *)*((void *)v17 + 5);
    while (*(void *)v20 != a2)
    {
      v20 += 8;
      if (v20 == v19)
      {
        unint64_t v20 = (char *)*((void *)v17 + 6);
        break;
      }
    }
  }
  if (v20 == v19) {
    uint64_t v21 = -1;
  }
  else {
    uint64_t v21 = (v20 - v18) >> 3;
  }
  if (v21 == -1)
  {
    unint64_t v22 = *((void *)v17 + 7);
    if ((unint64_t)v19 >= v22)
    {
      uint64_t v29 = (v19 - v18) >> 3;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61) {
LABEL_248:
      }
        abort();
      uint64_t v31 = v22 - (void)v18;
      if (v31 >> 2 > v30) {
        unint64_t v30 = v31 >> 2;
      }
      BOOL v11 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v11) {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v32);
        size_t v18 = (char *)*((void *)v17 + 5);
        uint64_t v19 = (char *)*((void *)v17 + 6);
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v34 = (unint64_t *)(v32 + 8 * v29);
      unint64_t v35 = v32 + 8 * v33;
      *uint64_t v34 = a2;
      size_t v23 = v34 + 1;
      while (v19 != v18)
      {
        unint64_t v36 = *((void *)v19 - 1);
        v19 -= 8;
        *--uint64_t v34 = v36;
      }
      *((void *)v17 + 5) = v34;
      *((void *)v17 + 6) = v23;
      *((void *)v17 + 7) = v35;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(void *)uint64_t v19 = a2;
      size_t v23 = v19 + 8;
    }
    *((void *)v17 + 6) = v23;
    LOBYTE(v192) = 1;
    std::vector<BOOL>::push_back((uint64_t *)v17 + 8, &v192);
    uint64_t v21 = ((uint64_t)(*((void *)v17 + 6) - *((void *)v17 + 5)) >> 3) - 1;
  }
  v181 = v5;
  switch(*(unsigned char *)a2)
  {
    case 0xB:
      unsigned int v37 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v37 && (uint64_t String = (void *)llvm::MDString::getString(v37)) != 0)
      {
        uint64_t v40 = v21;
        std::string::basic_string[abi:nn180100](&__dst, String, v39);
      }
      else
      {
        uint64_t v40 = v21;
        __dst = 0;
        v196 = 0;
        uint64_t v197 = 0;
      }
      uint64_t v76 = *(unsigned int *)(a2 + 28);
      uint64_t v77 = *(unsigned int *)(a2 + 48);
      uint64_t v79 = *(void *)(a2 + 32);
      uint64_t v78 = *(void *)(a2 + 40);
      unsigned int Tag = llvm::DINode::getTag((llvm::DINode *)a2);
      LODWORD(__p[0]) = *(_DWORD *)(a2 + 52);
      v192 = (void **)(&def_1C1270 + 3);
      uint64_t v81 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v181, 3uLL, &v192);
      uint64_t v82 = v81;
      uint64_t v84 = (uint64_t)(v81 + 40);
      id v83 = (char *)*((void *)v81 + 5);
      id v85 = (char *)*((void *)v81 + 6);
      v86 = v83;
      if (v83 == v85) {
        goto LABEL_108;
      }
      while (*(void *)v86 != a2)
      {
        v86 += 8;
        if (v86 == v85)
        {
          v86 = (char *)*((void *)v81 + 6);
          break;
        }
      }
LABEL_108:
      if (v86 == v85
        || v86 - v83 == -8
        || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v81 + 5, a2))
      {
        uint64_t v87 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v84, a2);
        ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((unint64_t *)v82 + 11, v87, (uint64_t)&__dst, v76, v79, v77, v78, Tag, 0);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned int>((unint64_t *)v82 + 11, __p);
      }
      if (SHIBYTE(v197) < 0) {
        operator delete(__dst);
      }
      return v40;
    case 0xC:
      v189[0] = 0;
      v189[1] = 0;
      v188 = v189;
      std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&v188, *a3, v7);
      uint64_t v41 = *(unsigned int *)(a2 + 8);
      uint64_t v42 = *(void *)(a2 - 8 * v41 + 24);
      if (v42)
      {
        v196 = 0;
        uint64_t v197 = 0;
        __dst = &v196;
        std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&__dst, v188, v189);
        uint64_t v43 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(v5, v42, &__dst);
        std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v196);
        uint64_t v44 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
      else
      {
        uint64_t v44 = -v41;
        uint64_t v43 = -1;
      }
      uint64_t v106 = *(void *)(a2 + 52);
      uint64_t v107 = v106;
      if (v106 >= 9) {
        uint64_t v107 = 100;
      }
      uint64_t v182 = v107;
      uint64_t v108 = *(llvm::MDString **)(a2 + 8 * v44 + 16);
      if (v108 && (v109 = (void *)llvm::MDString::getString(v108)) != 0)
      {
        uint64_t v111 = v21;
        std::string::basic_string[abi:nn180100](&v192, v109, v110);
      }
      else
      {
        uint64_t v111 = v21;
        v192 = 0;
        v193 = 0;
        uint64_t v194 = 0;
      }
      uint64_t v112 = *(unsigned int *)(a2 + 28);
      uint64_t v113 = *(unsigned int *)(a2 + 48);
      uint64_t v115 = *(void *)(a2 + 32);
      uint64_t v114 = *(void *)(a2 + 40);
      unsigned int v116 = llvm::DINode::getTag((llvm::DINode *)a2);
      __p[0] = (void *)v43;
      v199[0] = 3;
      v117 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v181, 3uLL, v199);
      uint64_t v118 = v117;
      uint64_t v120 = (uint64_t)(v117 + 40);
      unint64_t v119 = (char *)*((void *)v117 + 5);
      uint64_t v121 = (char *)*((void *)v117 + 6);
      id v122 = v119;
      if (v119 == v121) {
        goto LABEL_146;
      }
      while (*(void *)v122 != a2)
      {
        v122 += 8;
        if (v122 == v121)
        {
          id v122 = (char *)*((void *)v117 + 6);
          break;
        }
      }
LABEL_146:
      if (v122 == v121
        || v122 - v119 == -8
        || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v117 + 5, a2))
      {
        uint64_t v123 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v120, a2);
        ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((unint64_t *)v118 + 11, v123, (uint64_t)&v192, v112, v115, v113, v114, v116, 2);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v118 + 11, __p);
        uint64_t v124 = 100;
        if ((v106 & 0xFF00000000) != 0) {
          uint64_t v124 = v182;
        }
        v199[0] = v124;
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v118 + 11, v199);
      }
      if (SHIBYTE(v194) < 0) {
        operator delete(v192);
      }
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v189[0]);
      return v111;
    case 0xD:
      v187[0] = 0;
      v187[1] = 0;
      v186 = v187;
      std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&v186, *a3, v7);
      uint64_t v45 = *(unsigned int *)(a2 + 8);
      uint64_t v46 = *(void *)(a2 - 8 * v45 + 24);
      if (v46)
      {
        v196 = 0;
        uint64_t v197 = 0;
        __dst = &v196;
        std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&__dst, v186, v187);
        uint64_t v177 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(v5, v46, &__dst);
        std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v196);
        uint64_t v47 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
      else
      {
        uint64_t v47 = -v45;
        uint64_t v177 = -1;
      }
      uint64_t v180 = v21;
      uint64_t v125 = *(void *)(a2 + 8 * v47 + 32);
      if (v125) {
        uint64_t v126 = (llvm::DISubrange **)(v125 - 8 * *(unsigned int *)(v125 + 8));
      }
      else {
        uint64_t v126 = 0;
      }
      if (v126 != (llvm::DISubrange **)v125)
      {
        v127 = 0;
        unint64_t v128 = 0;
        unint64_t v129 = 0;
        uint64_t v183 = *(void *)(a2 + 8 * v47 + 32);
        while (1)
        {
          uint64_t v130 = *v126;
          int v131 = *(unsigned __int8 *)*v126;
          if ((v131 - 11) < 4 || v131 == 33) {
            break;
          }
          if (v131 == 9)
          {
            uint64_t Count = llvm::DISubrange::getCount(*v126);
            unint64_t v134 = Count & 0xFFFFFFFFFFFFFFF8;
            if ((Count & 6) != 0 || v134 == 0)
            {
              uint64_t v136 = -1;
            }
            else
            {
              unsigned int v144 = *(_DWORD *)(v134 + 32);
              if (v144 > 0x40) {
                uint64_t v136 = **(void **)(v134 + 24);
              }
              else {
                uint64_t v136 = (uint64_t)(*(void *)(v134 + 24) << -(char)v144) >> -(char)v144;
              }
            }
            uint64_t LowerBound = llvm::DISubrange::getLowerBound(v130);
            uint64_t v146 = 0;
            if ((LowerBound & 6) == 0)
            {
              unint64_t v147 = LowerBound & 0xFFFFFFFFFFFFFFF8;
              if ((LowerBound & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                unsigned int v148 = *(_DWORD *)(v147 + 32);
                if (v148 > 0x40) {
                  uint64_t v146 = **(void **)(v147 + 24);
                }
                else {
                  uint64_t v146 = (uint64_t)(*(void *)(v147 + 24) << -(char)v148) >> -(char)v148;
                }
              }
            }
            __p[0] = (void *)v146;
            uint64_t v198 = 4;
            v199[0] = v136;
            CFStringRef v149 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v5, 4uLL, &v198);
            v150 = v149;
            uint64_t v152 = (uint64_t)(v149 + 40);
            uint64_t v151 = (llvm::DISubrange **)*((void *)v149 + 5);
            v153 = (llvm::DISubrange **)*((void *)v149 + 6);
            v154 = v151;
            if (v151 != v153)
            {
              while (*v154 != v130)
              {
                if (++v154 == v153)
                {
                  v154 = (llvm::DISubrange **)*((void *)v149 + 6);
                  break;
                }
              }
            }
            uint64_t v155 = v154 - v151;
            if (v154 == v153) {
              uint64_t v156 = -1;
            }
            else {
              uint64_t v156 = v155;
            }
            if (v156 == -1
              || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v149 + 5, (uint64_t)v130))
            {
              uint64_t v156 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v152, (uint64_t)v130);
              uint64_t v198 = v156;
              ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v150 + 11, &v198);
              ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v150 + 11, __p);
              ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v150 + 11, v199);
            }
            if ((unint64_t)v128 < v129)
            {
              *(void *)unint64_t v128 = 4;
              *((void *)v128 + 1) = v156;
              v128 += 16;
              unsigned int v5 = v181;
              goto LABEL_223;
            }
            uint64_t v157 = (v128 - v127) >> 4;
            unint64_t v158 = v157 + 1;
            if ((unint64_t)(v157 + 1) >> 60) {
              goto LABEL_248;
            }
            if ((uint64_t)(v129 - (void)v127) >> 3 > v158) {
              unint64_t v158 = (uint64_t)(v129 - (void)v127) >> 3;
            }
            if (v129 - (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v139 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v139 = v158;
            }
            if (v139) {
              unint64_t v139 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v139);
            }
            else {
              uint64_t v140 = 0;
            }
            id v141 = (void *)(v139 + 16 * v157);
            *id v141 = 4;
            v141[1] = v156;
            if (v128 == v127)
            {
              id v143 = (char *)(v139 + 16 * v157);
              unsigned int v5 = v181;
            }
            else
            {
              unint64_t v159 = v139 + 16 * v157;
              unsigned int v5 = v181;
              do
              {
                id v143 = (char *)(v159 - 16);
                *(_OWORD *)(v159 - 16) = *((_OWORD *)v128 - 1);
                v128 -= 16;
                v159 -= 16;
              }
              while (v128 != v127);
            }
            goto LABEL_220;
          }
LABEL_224:
          if (++v126 == (llvm::DISubrange **)v125)
          {
            uint64_t v47 = -(uint64_t)*(unsigned int *)(a2 + 8);
            goto LABEL_227;
          }
        }
        v193 = 0;
        uint64_t v194 = 0;
        v192 = &v193;
        std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&v192, v186, v187);
        uint64_t v132 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(v5, v130, &v192);
        std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v193);
        if ((unint64_t)v128 < v129)
        {
          *(void *)unint64_t v128 = 3;
          *((void *)v128 + 1) = v132;
          v128 += 16;
LABEL_223:
          uint64_t v125 = v183;
          goto LABEL_224;
        }
        uint64_t v137 = (v128 - v127) >> 4;
        unint64_t v138 = v137 + 1;
        if ((unint64_t)(v137 + 1) >> 60) {
          goto LABEL_248;
        }
        if ((uint64_t)(v129 - (void)v127) >> 3 > v138) {
          unint64_t v138 = (uint64_t)(v129 - (void)v127) >> 3;
        }
        if (v129 - (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v139 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139) {
          unint64_t v139 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v139);
        }
        else {
          uint64_t v140 = 0;
        }
        id v141 = (void *)(v139 + 16 * v137);
        *id v141 = 3;
        v141[1] = v132;
        if (v128 == v127)
        {
          id v143 = (char *)(v139 + 16 * v137);
        }
        else
        {
          unint64_t v142 = v139 + 16 * v137;
          do
          {
            id v143 = (char *)(v142 - 16);
            *(_OWORD *)(v142 - 16) = *((_OWORD *)v128 - 1);
            v128 -= 16;
            v142 -= 16;
          }
          while (v128 != v127);
        }
LABEL_220:
        unint64_t v129 = v139 + 16 * v140;
        unint64_t v128 = (char *)(v141 + 2);
        if (v127) {
          operator delete(v127);
        }
        v127 = v143;
        goto LABEL_223;
      }
      v127 = 0;
      unint64_t v128 = 0;
LABEL_227:
      v160 = *(llvm::MDString **)(a2 + 8 * v47 + 16);
      if (v160 && (v161 = (void *)llvm::MDString::getString(v160)) != 0)
      {
        std::string::basic_string[abi:nn180100](__p, v161, v162);
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v191 = 0;
      }
      uint64_t v163 = *(unsigned int *)(a2 + 28);
      uint64_t v164 = *(unsigned int *)(a2 + 48);
      uint64_t v166 = *(void *)(a2 + 32);
      uint64_t v165 = *(void *)(a2 + 40);
      unsigned int v167 = llvm::DINode::getTag((llvm::DINode *)a2);
      uint64_t v198 = 3;
      v199[0] = v177;
      v168 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v181, 3uLL, &v198);
      v169 = v168;
      uint64_t v171 = (uint64_t)(v168 + 40);
      v170 = (char *)*((void *)v168 + 5);
      v172 = (char *)*((void *)v168 + 6);
      v173 = v170;
      if (v170 != v172)
      {
        while (*(void *)v173 != a2)
        {
          v173 += 8;
          if (v173 == v172)
          {
            v173 = (char *)*((void *)v168 + 6);
            break;
          }
        }
      }
      if (v173 == v172
        || v173 - v170 == -8
        || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v168 + 5, a2))
      {
        uint64_t v174 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v171, a2);
        ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((unint64_t *)v169 + 11, v174, (uint64_t)__p, v163, v166, v164, v165, v167, 1);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v169 + 11, v199);
        uint64_t v198 = (v128 - v127) >> 4;
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v169 + 11, &v198);
        if (v128 != v127)
        {
          v175 = (uint64_t *)v127;
          do
          {
            uint64_t v198 = *v175;
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v169 + 11, &v198);
            uint64_t v198 = v175[1];
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v169 + 11, &v198);
            v175 += 2;
          }
          while (v175 != (uint64_t *)v128);
        }
      }
      if (SHIBYTE(v191) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v21 = v180;
      if (v127) {
        operator delete(v127);
      }
      uint64_t v105 = (void *)v187[0];
LABEL_246:
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v105);
      break;
    case 0xE:
      uint64_t v179 = v21;
      uint64_t v48 = v185;
      v185[0] = 0;
      v185[1] = 0;
      v184 = v185;
      std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&v184, *a3, v7);
      uint64_t v49 = *(unsigned int *)(a2 + 8);
      uint64_t v50 = -v49;
      uint64_t v51 = *(void *)(a2 - 8 * v49 + 24);
      if (v51 && (uint64_t v52 = *(unsigned int *)(v51 + 8), (int)v52 >= 1))
      {
        uint64_t v53 = 0;
        unint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = &v196;
        uint64_t v178 = *(void *)(a2 - 8 * v49 + 24);
        do
        {
          uint64_t v58 = *(void *)(v51 - 8 * *(unsigned int *)(v51 + 8) + 8 * v56);
          if (v56 || v58)
          {
            void *v57 = 0;
            v57[1] = 0;
            __dst = v57;
            std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&__dst, v184, v48);
            uint64_t v59 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(v181, v58, &__dst);
            std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v196);
            if ((unint64_t)v53 >= v54)
            {
              v64 = v57;
              uint64_t v65 = v52;
              id v66 = v48;
              uint64_t v67 = (v53 - v55) >> 4;
              unint64_t v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 60) {
                goto LABEL_248;
              }
              if ((uint64_t)(v54 - (void)v55) >> 3 > v68) {
                unint64_t v68 = (uint64_t)(v54 - (void)v55) >> 3;
              }
              if (v54 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v69 = v68;
              }
              if (v69) {
                unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v69);
              }
              else {
                uint64_t v70 = 0;
              }
              id v73 = (void *)(v69 + 16 * v67);
              *id v73 = 3;
              v73[1] = v59;
              if (v53 == v55)
              {
                int v75 = v53;
                uint64_t v55 = (char *)(v69 + 16 * v67);
                uint64_t v48 = v66;
              }
              else
              {
                v74 = (char *)(v69 + 16 * v67);
                uint64_t v48 = v66;
                do
                {
                  *((_OWORD *)v74 - 1) = *((_OWORD *)v53 - 1);
                  v74 -= 16;
                  v53 -= 16;
                }
                while (v53 != v55);
                int v75 = v55;
                uint64_t v55 = v74;
              }
              uint64_t v52 = v65;
              unint64_t v54 = v69 + 16 * v70;
              uint64_t v53 = (char *)(v73 + 2);
              uint64_t v57 = v64;
              if (v75) {
                operator delete(v75);
              }
              uint64_t v51 = v178;
            }
            else
            {
              *(void *)uint64_t v53 = 3;
              *((void *)v53 + 1) = v59;
              v53 += 16;
            }
          }
          else if ((unint64_t)v53 >= v54)
          {
            uint64_t v60 = (v53 - v55) >> 4;
            unint64_t v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 60) {
              goto LABEL_248;
            }
            if ((uint64_t)(v54 - (void)v55) >> 3 > v61) {
              unint64_t v61 = (uint64_t)(v54 - (void)v55) >> 3;
            }
            if (v54 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v62 = v61;
            }
            if (v62) {
              unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v62);
            }
            else {
              uint64_t v63 = 0;
            }
            v71 = (char *)(v62 + 16 * v60);
            *(_OWORD *)v71 = xmmword_4C8040;
            v72 = v71 + 16;
            if (v53 != v55)
            {
              do
              {
                *((_OWORD *)v71 - 1) = *((_OWORD *)v53 - 1);
                v71 -= 16;
                v53 -= 16;
              }
              while (v53 != v55);
              uint64_t v53 = v55;
            }
            uint64_t v55 = v71;
            unint64_t v54 = v62 + 16 * v63;
            if (v53) {
              operator delete(v53);
            }
            uint64_t v53 = v72;
          }
          else
          {
            *(_OWORD *)uint64_t v53 = xmmword_4C8040;
            v53 += 16;
          }
          ++v56;
        }
        while (v56 != v52);
        uint64_t v50 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v55 = 0;
      }
      id v88 = *(llvm::MDString **)(a2 + 8 * v50 + 16);
      if (v88 && (v89 = (void *)llvm::MDString::getString(v88)) != 0)
      {
        std::string::basic_string[abi:nn180100](&v192, v89, v90);
      }
      else
      {
        v192 = 0;
        v193 = 0;
        uint64_t v194 = 0;
      }
      uint64_t v91 = *(unsigned int *)(a2 + 28);
      uint64_t v92 = *(unsigned int *)(a2 + 48);
      uint64_t v94 = *(void *)(a2 + 32);
      uint64_t v93 = *(void *)(a2 + 40);
      unsigned int v95 = llvm::DINode::getTag((llvm::DINode *)a2);
      __p[0] = &def_1C1270 + 3;
      id v96 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v181, 3uLL, __p);
      id v97 = v96;
      uint64_t v99 = (uint64_t)(v96 + 40);
      id v98 = (char *)*((void *)v96 + 5);
      id v100 = (char *)*((void *)v96 + 6);
      id v101 = v98;
      if (v98 != v100)
      {
        while (*(void *)v101 != a2)
        {
          v101 += 8;
          if (v101 == v100)
          {
            id v101 = (char *)*((void *)v96 + 6);
            break;
          }
        }
      }
      if (v101 == v100
        || v101 - v98 == -8
        || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v96 + 5, a2))
      {
        uint64_t v102 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v99, a2);
        v103 = (unint64_t *)(v97 + 88);
        ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((unint64_t *)v97 + 11, v102, (uint64_t)&v192, v91, v94, v92, v93, v95, 3);
        __p[0] = (void *)((v53 - v55) >> 4);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v97 + 11, __p);
        if (v53 != v55)
        {
          uint64_t v104 = (void **)v55;
          do
          {
            __p[0] = *v104;
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v103, __p);
            __p[0] = v104[1];
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v103, __p);
            v104 += 2;
          }
          while (v104 != (void **)v53);
        }
      }
      if (SHIBYTE(v194) < 0) {
        operator delete(v192);
      }
      uint64_t v21 = v179;
      if (v55) {
        operator delete(v55);
      }
      uint64_t v105 = (void *)v185[0];
      goto LABEL_246;
    default:
      return v21;
  }
  return v21;
}

llvm::MDString *llvm::DIVariable::getFilename(llvm::DIVariable *this)
{
  uint64_t v1 = ((void *)this - *((unsigned int *)this + 2))[2];
  if (!v1) {
    return (llvm::MDString *)"";
  }
  __n128 result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8));
  if (result) {
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  return result;
}

llvm::MDString *llvm::DIVariable::getDirectory(llvm::DIVariable *this)
{
  uint64_t v1 = ((void *)this - *((unsigned int *)this + 2))[2];
  if (!v1) {
    return (llvm::MDString *)"";
  }
  __n128 result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8) + 8);
  if (result) {
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  return result;
}

char *std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 1;
  unsigned int v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = v5;
        unint64_t v8 = *((void *)v5 + 4);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *(char **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (char *)(a1 + 1);
LABEL_9:
    size_t v9 = v7;
    int v7 = (char *)operator new(0x70uLL);
    *((void *)v7 + 4) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *((void *)v7 + 13) = 0;
    *(void *)int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    *uint64_t v6 = (uint64_t *)v7;
    unint64_t v10 = (uint64_t *)**a1;
    BOOL v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      BOOL v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unsigned int v5 = result;
    uint64_t v6 = result + 1;
    do
    {
      int v7 = (uint64_t *)v5[1];
      unint64_t v8 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      size_t v9 = (uint64_t *)v5[1];
      unint64_t v10 = v6;
      if (v7)
      {
        do
        {
          unint64_t v8 = v9;
          size_t v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          unint64_t v10 = v8;
        }
        while (v11);
      }
      unint64_t v12 = v4[4];
      if (v8[4] < v12)
      {
LABEL_9:
        if (v7) {
          uint64_t v13 = (uint64_t **)v8;
        }
        else {
          uint64_t v13 = (uint64_t **)v6;
        }
        if (v7) {
          unint64_t v14 = (uint64_t **)(v8 + 1);
        }
        else {
          unint64_t v14 = (uint64_t **)v6;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t **)v6;
        unint64_t v14 = (uint64_t **)v6;
        if (v7)
        {
          unint64_t v14 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v7;
              unint64_t v18 = v7[4];
              if (v12 >= v18) {
                break;
              }
              int v7 = *v13;
              unint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_16;
              }
            }
            if (v18 >= v12) {
              break;
            }
            unint64_t v14 = v13 + 1;
            int v7 = v13[1];
            if (!v7) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_16:
        unint64_t v15 = (uint64_t *)operator new(0x28uLL);
        v15[4] = v4[4];
        __n128 result = std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v13, v14, v15);
      }
      uint64_t v16 = (void *)v4[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v4[2];
          BOOL v11 = *v17 == (void)v4;
          uint64_t v4 = v17;
        }
        while (!v11);
      }
      uint64_t v4 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void std::__destroy_at[abi:nn180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  int v7 = *((_DWORD *)a2 + 4);
  uint64_t TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v9 = v3 - 8 * *(unsigned int *)(v3 + 8);
  uint64_t v10 = *(void *)(*(void *)(v9 + 32) + 128);
  unsigned int v11 = *(_DWORD *)(v10 + 32);
  if (v11 > 0x40) {
    uint64_t v12 = **(void **)(v10 + 24);
  }
  else {
    uint64_t v12 = (uint64_t)(*(void *)(v10 + 24) << -(char)v11) >> -(char)v11;
  }
  uint64_t v13 = *(void *)(*(void *)(v9 + 40) + 128);
  unsigned int v14 = *(_DWORD *)(v13 + 32);
  if (v14 > 0x40) {
    LODWORD(v15) = **(_DWORD **)(v13 + 24);
  }
  else {
    uint64_t v15 = (uint64_t)(*(void *)(v13 + 24) << -(char)v14) >> -(char)v14;
  }
  uint64_t v25 = TracePointLocation;
  uint64_t v26 = v6 & 0xFFFFFF | (v7 << 24);
  int v24 = v12;
  uint64_t v23 = 8;
  uint64_t v16 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 8uLL, &v23);
  uint64_t v17 = v16;
  uint64_t v19 = (uint64_t)(v16 + 40);
  unint64_t v18 = (char *)*((void *)v16 + 5);
  unint64_t v20 = (char *)*((void *)v16 + 6);
  uint64_t v21 = v18;
  if (v18 != v20)
  {
    while (*(void *)v21 != v3)
    {
      v21 += 8;
      if (v21 == v20)
      {
        uint64_t v21 = (char *)*((void *)v16 + 6);
        break;
      }
    }
  }
  if (v21 == v20
    || v21 - v18 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v16 + 5, v3))
  {
    uint64_t v23 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v19, v3);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v17 + 11, &v23);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v17 + 11, &v26);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v17 + 11, &v25);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned int>((unint64_t *)v17 + 11, &v24);
    uint64_t v22 = v15;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v17 + 11, &v22);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeVariableTracePoint(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)a2 - 8 * *(unsigned int *)(*(void *)a2 + 8);
  uint64_t v5 = *(void *)(*(void *)(v4 + 16) + 128);
  unsigned int v6 = *(_DWORD *)(v5 + 32);
  if (v6 > 0x40) {
    uint64_t v7 = **(void **)(v5 + 24);
  }
  else {
    uint64_t v7 = (uint64_t)(*(void *)(v5 + 24) << -(char)v6) >> -(char)v6;
  }
  uint64_t v8 = *(void *)(*(void *)(v4 + 40) + 128);
  unsigned int v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40) {
    LODWORD(v10) = **(_DWORD **)(v8 + 24);
  }
  else {
    uint64_t v10 = (uint64_t)(*(void *)(v8 + 24) << -(char)v9) >> -(char)v9;
  }
  int v11 = *(_DWORD *)(a2 + 16);
  uint64_t v12 = *(llvm::DIVariable **)(v4 + 32);
  int v13 = *(unsigned __int8 *)v12;
  if (*(unsigned char *)v12)
  {
    if (v13 == 24)
    {
      unint64_t v58 = ((void *)v12 - *((unsigned int *)v12 + 2))[3];
      v101[0] = 0;
      v101[1] = 0;
      id v100 = v101;
      uint64_t v59 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v58, &v100);
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v101[0]);
      Filename = llvm::DIVariable::getFilename(v12);
      if (Filename)
      {
        std::string::basic_string[abi:nn180100](&__p, Filename, v61);
      }
      else
      {
        __p = 0;
        unint64_t v106 = 0;
        uint64_t v107 = 0;
      }
      Directory = llvm::DIVariable::getDirectory(v12);
      if (Directory)
      {
        std::string::basic_string[abi:nn180100](&__dst, Directory, v65);
      }
      else
      {
        __dst = 0;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
      }
      uint64_t v76 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v12 + 1, (uint64_t)&__p, (uint64_t)&__dst, *((unsigned int *)v12 + 6), -1);
      if (SHIBYTE(v104) < 0) {
        operator delete(__dst);
      }
      if (SHIBYTE(v107) < 0) {
        operator delete(__p);
      }
      uint64_t v77 = (llvm::MDString *)((void *)v12 - *((unsigned int *)v12 + 2))[1];
      if (v77 && (uint64_t String = (void *)llvm::MDString::getString(v77)) != 0)
      {
        std::string::basic_string[abi:nn180100](&__p, String, v79);
      }
      else
      {
        __p = 0;
        unint64_t v106 = 0;
        uint64_t v107 = 0;
      }
      uint64_t v75 = ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(a1, (uint64_t)v12, (uint64_t)&__p, v59, v76);
      goto LABEL_105;
    }
    if (v13 == 25)
    {
      unint64_t v14 = ((void *)v12 - *((unsigned int *)v12 + 2))[3];
      v109[0] = 0;
      v109[1] = 0;
      uint64_t v108 = v109;
      uint64_t v15 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v14, &v108);
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v109[0]);
      uint64_t v16 = llvm::DIVariable::getFilename(v12);
      if (v16)
      {
        std::string::basic_string[abi:nn180100](&__p, v16, v17);
      }
      else
      {
        __p = 0;
        unint64_t v106 = 0;
        uint64_t v107 = 0;
      }
      unint64_t v62 = llvm::DIVariable::getDirectory(v12);
      if (v62)
      {
        std::string::basic_string[abi:nn180100](&__dst, v62, v63);
      }
      else
      {
        __dst = 0;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
      }
      uint64_t v66 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v12 + 1, (uint64_t)&__p, (uint64_t)&__dst, *((unsigned int *)v12 + 6), -1);
      if (SHIBYTE(v104) < 0) {
        operator delete(__dst);
      }
      if (SHIBYTE(v107) < 0) {
        operator delete(__p);
      }
      uint64_t v67 = (llvm::MDString *)((void *)v12 - *((unsigned int *)v12 + 2))[1];
      if (v67 && (unint64_t v68 = (void *)llvm::MDString::getString(v67)) != 0)
      {
        std::string::basic_string[abi:nn180100](&__p, v68, v69);
      }
      else
      {
        __p = 0;
        unint64_t v106 = 0;
        uint64_t v107 = 0;
      }
      char v70 = *((_WORD *)v12 + 16) != 0;
      v71 = a1;
      uint64_t v72 = (uint64_t)v12;
      uint64_t v73 = v15;
      uint64_t v74 = v66;
      goto LABEL_94;
    }
LABEL_75:
    uint64_t v57 = -1;
    goto LABEL_107;
  }
  uint64_t v18 = *(void *)(a2 + 8);
  uint64_t v19 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v4 + 32));
  if (v20 < 0xD) {
    goto LABEL_75;
  }
  uint64_t v21 = v19;
  BOOL v22 = *v19 == 0x765F6E7275746572 && *(void *)((char *)v19 + 5) == 0x2865756C61765F6ELL;
  if (!v22) {
    goto LABEL_75;
  }
  unint64_t v23 = v20;
  if (*((unsigned char *)v19 + v20 - 1) != 41) {
    goto LABEL_75;
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, "return_value(");
  unint64_t v24 = v106;
  if (v107 >= 0) {
    unint64_t v24 = HIBYTE(v107);
  }
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v97 = v24;
  if (v24 <= v23 - 1) {
    unint64_t v24 = v23 - 1;
  }
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v96 = v24;
  if (SHIBYTE(v107) < 0) {
    operator delete(__p);
  }
  uint64_t v25 = *(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 24);
  if (!v25
    || *(unsigned char *)v25 != 5
    || (Subprograuint64_t m = llvm::DILocalScope::getSubprogram(*(llvm::DILocalScope **)(v25 - 8 * *(unsigned int *)(v25 + 8)))) == 0)
  {
    uint64_t v27 = *(unsigned int *)(v18 + 88);
    if (v27)
    {
      __s2 = (char *)v21 + v97;
      uint64_t v28 = v18;
      size_t v29 = v96 - v97;
      uint64_t v92 = v28;
      unint64_t v30 = *(uint64_t **)(v28 + 80);
      uint64_t v31 = 8 * v27;
      int v94 = v7;
      int v95 = v10;
      do
      {
        Subprograuint64_t m = *v30;
        unint64_t v32 = *(llvm::MDString **)(*v30 - 8 * *(unsigned int *)(*v30 + 8) + 24);
        if (v32 && (uint64_t v33 = (void *)llvm::MDString::getString(v32)) != 0)
        {
          std::string::basic_string[abi:nn180100](&__p, v33, v34);
          unint64_t v35 = HIBYTE(v107);
          unsigned int v37 = (void **)__p;
          unint64_t v36 = v106;
        }
        else
        {
          unint64_t v36 = 0;
          unsigned int v37 = 0;
          unint64_t v35 = 0;
          __p = 0;
          unint64_t v106 = 0;
          uint64_t v107 = 0;
        }
        int v38 = (char)v35;
        if ((v35 & 0x80u) != 0) {
          unint64_t v35 = v36;
        }
        size_t v39 = v29;
        BOOL v40 = v35 == v29;
        if (v40 && v96 != v97)
        {
          if (v38 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = v37;
          }
          BOOL v40 = memcmp(p_p, __s2, v39) == 0;
        }
        if (v38 < 0) {
          operator delete(v37);
        }
        if (v40)
        {
LABEL_116:
          LODWORD(v7) = v94;
          LODWORD(v10) = v95;
          goto LABEL_117;
        }
        ++v30;
        v31 -= 8;
        LODWORD(v7) = v94;
        LODWORD(v10) = v95;
        size_t v29 = v96 - v97;
      }
      while (v31);
      uint64_t v43 = *(unsigned int *)(v92 + 88);
      if (v43)
      {
        uint64_t v44 = *(uint64_t **)(v92 + 80);
        uint64_t v45 = 8 * v43;
        while (1)
        {
          Subprograuint64_t m = *v44;
          uint64_t v46 = *(llvm::MDString **)(*v44 - 8 * *(unsigned int *)(*v44 + 8) + 16);
          if (v46 && (uint64_t v47 = (void *)llvm::MDString::getString(v46)) != 0)
          {
            std::string::basic_string[abi:nn180100](&__p, v47, v48);
            unint64_t v49 = HIBYTE(v107);
            uint64_t v51 = (void **)__p;
            unint64_t v50 = v106;
          }
          else
          {
            unint64_t v50 = 0;
            uint64_t v51 = 0;
            unint64_t v49 = 0;
            __p = 0;
            unint64_t v106 = 0;
            uint64_t v107 = 0;
          }
          int v52 = (char)v49;
          if ((v49 & 0x80u) != 0) {
            unint64_t v49 = v50;
          }
          BOOL v22 = v49 == v29;
          size_t v53 = v29;
          BOOL v54 = v49 == v29;
          if (!v22 || v96 == v97)
          {
            if (v52 < 0) {
              goto LABEL_72;
            }
          }
          else
          {
            if (v52 >= 0) {
              uint64_t v56 = &__p;
            }
            else {
              uint64_t v56 = v51;
            }
            BOOL v54 = memcmp(v56, __s2, v53) == 0;
            if (v52 < 0)
            {
LABEL_72:
              operator delete(v51);
              if (v54) {
                goto LABEL_116;
              }
              goto LABEL_73;
            }
          }
          if (v54) {
            goto LABEL_116;
          }
LABEL_73:
          ++v44;
          v45 -= 8;
          LODWORD(v7) = v94;
          LODWORD(v10) = v95;
          size_t v29 = v96 - v97;
          if (!v45) {
            goto LABEL_122;
          }
        }
      }
    }
    goto LABEL_122;
  }
LABEL_117:
  uint64_t v86 = *(void *)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 32);
  if (!v86
    || (uint64_t v87 = *(void *)(v86 - 8 * *(unsigned int *)(v86 + 8) + 24)) == 0
    || (uint64_t v88 = *(unsigned int *)(v87 + 8), !v88)
    || (unint64_t v89 = *(void *)(v87 - 8 * v88)) == 0)
  {
LABEL_122:
    uint64_t v90 = -1;
    goto LABEL_123;
  }
  v99[0] = 0;
  v99[1] = 0;
  id v98 = v99;
  uint64_t v90 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v89, &v98);
  std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v99[0]);
LABEL_123:
  uint64_t v91 = *(void *)(v4 + 32);
  std::string::basic_string[abi:nn180100]<0>(&__p, "ret");
  v71 = a1;
  uint64_t v72 = v91;
  uint64_t v73 = v90;
  uint64_t v74 = -1;
  char v70 = 0;
LABEL_94:
  uint64_t v75 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(v71, v72, (uint64_t)&__p, v73, v74, v70);
LABEL_105:
  uint64_t v57 = v75;
  if (SHIBYTE(v107) < 0) {
    operator delete(__p);
  }
LABEL_107:
  __p = (void *)(v7 & 0xFFFFFF | (v11 << 24));
  __dst = (void *)v57;
  v111[0] = 7;
  id v80 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 7uLL, v111);
  uint64_t v81 = v80;
  uint64_t v83 = (uint64_t)(v80 + 40);
  uint64_t v82 = (char *)*((void *)v80 + 5);
  uint64_t v84 = (char *)*((void *)v80 + 6);
  id v85 = v82;
  if (v82 != v84)
  {
    while (*(void *)v85 != v3)
    {
      v85 += 8;
      if (v85 == v84)
      {
        id v85 = (char *)*((void *)v80 + 6);
        break;
      }
    }
  }
  if (v85 == v84
    || v85 - v82 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v80 + 5, v3))
  {
    v111[0] = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v83, v3);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v81 + 11, v111);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v81 + 11, &__p);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v81 + 11, &__dst);
    uint64_t v110 = v10;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v81 + 11, &v110);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionCallTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  uint64_t v7 = v6 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  uint64_t TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  unsigned int v9 = *(llvm::MDString **)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32);
  if (v9)
  {
    if (*(unsigned char *)v9)
    {
      if (*(unsigned char *)v9 == 17)
      {
        uint64_t v10 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, (uint64_t)v9);
        ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 0, v10, TracePointLocation);
      }
      return;
    }
    uint64_t String = (void *)llvm::MDString::getString(v9);
    if (String)
    {
      std::string::basic_string[abi:nn180100](__p, String, v12);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v15 = 0;
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(__p, "__gt_unnamed_function_call__");
  }
  uint64_t v13 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, -1, (uint64_t)__p, TracePointLocation);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 0, v13, TracePointLocation);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a2 + 1;
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    uint64_t v5 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (!v5)
    {
      size_t v10 = 0;
      unsigned int v9 = "";
      goto LABEL_8;
    }
  }
  uint64_t v6 = *(llvm::MDString **)(v5 - 8 * *(unsigned int *)(v5 + 8));
  if (v6)
  {
    uint64_t String = llvm::MDString::getString(v6);
    if (String)
    {
      unsigned int v9 = (char *)String;
      size_t v10 = v8;
LABEL_8:
      std::string::basic_string[abi:nn180100](&__dst, v9, v10);
      goto LABEL_9;
    }
  }
  __dst = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
LABEL_9:
  uint64_t v11 = a2;
  if (*(unsigned char *)a2 == 15 || (uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
  {
    size_t v12 = *(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
    if (!v12 || (uint64_t v13 = llvm::MDString::getString(v12)) == 0)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v24 = 0;
      goto LABEL_17;
    }
    uint64_t v15 = (char *)v13;
    size_t v16 = v14;
  }
  else
  {
    size_t v16 = 0;
    uint64_t v15 = "";
  }
  std::string::basic_string[abi:nn180100](__p, v15, v16);
LABEL_17:
  uint64_t v17 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, v4, (uint64_t)&__dst, (uint64_t)__p, *(unsigned int *)(a2 + 24), -1);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(__dst);
  }
  uint64_t v18 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v18 && (uint64_t v19 = (void *)llvm::MDString::getString(v18)) != 0)
  {
    std::string::basic_string[abi:nn180100](&__dst, v19, v20);
  }
  else
  {
    __dst = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  uint64_t v21 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, a2, (uint64_t)&__dst, v17);
  if (SHIBYTE(v27) < 0) {
    operator delete(__dst);
  }
  return v21;
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionEndTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  uint64_t v7 = v6 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  uint64_t TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v9 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, *(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32));

  ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 2, v9, TracePointLocation);
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionBeginTracePoint(uint64_t **a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)a2 - 8 * *(unsigned int *)(*(void *)a2 + 8);
  uint64_t v5 = *(void *)(*(void *)(v4 + 16) + 128);
  unsigned int v6 = *(_DWORD *)(v5 + 32);
  if (v6 > 0x40) {
    uint64_t v7 = **(void **)(v5 + 24);
  }
  else {
    uint64_t v7 = (uint64_t)(*(void *)(v5 + 24) << -(char)v6) >> -(char)v6;
  }
  uint64_t v8 = v7 & 0xFFFFFF | (a2[4] << 24);
  uint64_t v9 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, *(void *)(v4 + 32));

  ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v8, 1, v9, -1);
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeThreadTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  int v7 = *((_DWORD *)a2 + 4);
  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v8 = *(void *)(*(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32) + 128);
  unsigned int v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40) {
    LODWORD(v8) = **(_DWORD **)(v8 + 24);
  }
  else {
    uint64_t v8 = (uint64_t)(*(void *)(v8 + 24) << -(char)v9) >> -(char)v9;
  }
  uint64_t v17 = v8;
  uint64_t v18 = v6 & 0xFFFFFF | (v7 << 24);
  uint64_t v16 = 5;
  size_t v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 5uLL, &v16);
  uint64_t v11 = v10;
  uint64_t v13 = (uint64_t)(v10 + 40);
  size_t v12 = (char *)*((void *)v10 + 5);
  size_t v14 = (char *)*((void *)v10 + 6);
  uint64_t v15 = v12;
  if (v12 != v14)
  {
    while (*(void *)v15 != v3)
    {
      v15 += 8;
      if (v15 == v14)
      {
        uint64_t v15 = (char *)*((void *)v10 + 6);
        break;
      }
    }
  }
  if (v15 == v14
    || v15 - v12 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v10 + 5, v3))
  {
    uint64_t v16 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v13, v3);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v16);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v18);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v17);
  }
}

uint64_t std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_745968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_745968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__func()
{
}

id StringFromArchive(void *a1, uint64_t a2, char *a3)
{
  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)a1, a3);
  if ((FileWithFilename[4] & 2) != 0)
  {
    size_t v10 = +[NSString stringWithUTF8String:*a1];
    uint64_t v11 = +[NSString stringWithUTF8String:a3];
    size_t v12 = [v10 stringByAppendingPathComponent:v11];

    id v9 = [objc_alloc((Class)NSString) initWithContentsOfFile:v12 encoding:4 error:0];
  }
  else
  {
    int v7 = FileWithFilename;
    uint64_t v8 = malloc_type_malloc(*FileWithFilename, 0xEA1EA036uLL);
    GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)a1, a2, (uint64_t)v7, v8, *v7, 0);
    id v9 = [objc_alloc((Class)NSString) initWithBytesNoCopy:v8 length:*v7 encoding:4 freeWhenDone:1];
  }

  return v9;
}

void GTMTLReplayController_defaultDispatchFunction(uint64_t a1, uint64_t a2)
{
  if ((dword_77313C & 0x4000000) != 0)
  {
    int v4 = *(_DWORD *)(a1 + 22488);
    if (v4)
    {
      if (v4 == *(_DWORD *)(a1 + 22480)) {
        return;
      }
    }
  }
  if ((GT_SUPPORT_0 & 0x80000) != 0)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 16);
    id v6 = *(id *)(a1 + 8);
    int v7 = *(_DWORD *)(a2 + 8);
    if (v7 <= -15660)
    {
      if (v7 <= -16164)
      {
        if (v7 <= -16314)
        {
          if (v7 == -16370) {
            goto LABEL_75;
          }
          int v20 = -16314;
          goto LABEL_37;
        }
        if (v7 != -16313)
        {
          int v21 = -16312;
LABEL_43:
          if (v7 != v21) {
            goto LABEL_74;
          }
        }
      }
      else
      {
        if (v7 <= -15779)
        {
          uint64_t v8 = (v7 + 16163);
          if (v8 <= 0x2F)
          {
            if (((1 << v8) & 0x680000000001) == 0)
            {
              if (v8 == 47)
              {
                id v9 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v5);
                size_t v10 = [v6 heapForKey:*(void *)v9];
                if ([v10 type] == (char *)&def_1C1270 + 1)
                {
                  uint64_t Object = GTMTLSMContext_lastObject(**(void **)(*(void *)a1 + 40), *((void *)v9 + 1), *(void *)a2);
                  GTTraceFunc_argumentBytesWithMap((void *)a2, v9[16], v5);
                  size_t v12 = _MakeMTLTextureDescriptor();
                  id v13 = [v10 newTextureWithDescriptor:v12 offset:*(unsigned int *)(Object + 80)];
                }
                else
                {
                  GTTraceFunc_argumentBytesWithMap((void *)a2, v9[16], v5);
                  size_t v12 = _MakeMTLTextureDescriptor();
                  id v13 = [v10 newTextureWithDescriptor:v12];
                }
                unint64_t v30 = v13;

                uint64_t v31 = *((void *)v9 + 1);
                if (v30)
                {
                  [v6 setTexture:v30 forKey:v31];
                }
                else if (v31)
                {
                  GTMTLReplay_dispatchFailedToSet(a2, *((void *)v9 + 1));
                }

                goto LABEL_75;
              }
              goto LABEL_74;
            }
LABEL_75:

            return;
          }
LABEL_74:
          GTMTLReplayController_defaultDispatchFunction_noPinning(a1, a2);
          goto LABEL_75;
        }
        if (v7 == -15778) {
          goto LABEL_75;
        }
        if (v7 != -15707)
        {
          int v20 = -15705;
          goto LABEL_37;
        }
      }
      BOOL v22 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v5);
      unint64_t v23 = [v6 bufferForKey:*((void *)v22 + 1)];
      uint64_t v24 = *((void *)v22 + 1);
      *(void *)buf = 22;
      uint64_t v37 = v24;
      uint64_t v38 = 0;
      size_t v39 = GTTraceFunc_argumentBytesWithMap((void *)a2, v22[40], v5);
      long long v40 = 0u;
      long long v41 = 0u;
      *((void *)&v40 + 1) = *((void *)v22 + 2);
      GTMTLReplayController_restoreMTLBufferContents(a1, buf);

      goto LABEL_75;
    }
    if (v7 > -15465)
    {
      switch(v7)
      {
        case -15356:
        case -15355:
        case -15354:
        case -15353:
          size_t v14 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v5);
          uint64_t v15 = GTMTLSMContext_getObject(**(void **)(*(void *)a1 + 40), *((void *)v14 + 1), *(void *)a2);
          if ((GT_SUPPORT_0 & 0x100000) != 0 && v15[19]) {
            goto LABEL_74;
          }
          break;
        case -15352:
        case -15351:
          if ((GT_SUPPORT_0 & 0x80000) == 0) {
            goto LABEL_74;
          }
          break;
        default:
          if (v7 != -15464)
          {
            int v21 = -10237;
            goto LABEL_43;
          }
          break;
      }
      goto LABEL_75;
    }
    if (v7 > -15615)
    {
      if (v7 != -15614)
      {
        int v20 = -15509;
LABEL_37:
        if (v7 == v20) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
      uint64_t v28 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v5);
      size_t v29 = GTMTLSMContext_getObject(**(void **)(*(void *)a1 + 40), *((void *)v28 + 1), *(void *)a2);
      uint64_t v18 = v29;
      if ((GT_SUPPORT_0 & 0x100000) == 0 && v29[19])
      {
        if (s_logUsingOsLog)
        {
          uint64_t v19 = gt_default_log();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            goto LABEL_78;
          }
LABEL_57:

          goto LABEL_70;
        }
LABEL_64:
        unint64_t v32 = __stderrp;
        id v33 = +[NSString stringWithFormat:@"warning: Acceleration structure indirection is not supported, but acceleration structures have indices"];
        fprintf(v32, "%s\n", (const char *)[v33 UTF8String]);
      }
    }
    else
    {
      if (v7 == -15659)
      {
        uint64_t v25 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v5);
        uint64_t v26 = GTMTLSMContext_getObject(**(void **)(*(void *)a1 + 40), *v25, *(void *)a2 - 1);
        uint64_t v18 = v26;
        if ((GT_SUPPORT_0 & 0x100000) == 0 && v26[19])
        {
          if (s_logUsingOsLog)
          {
            uint64_t v27 = gt_default_log();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&def_1C1270, v27, OS_LOG_TYPE_ERROR, "warning: Acceleration structure indirection is not supported, but acceleration structures have indices", buf, 2u);
            }
          }
          else
          {
            size_t v34 = __stderrp;
            id v35 = +[NSString stringWithFormat:@"warning: Acceleration structure indirection is not supported, but acceleration structures have indices"];
            fprintf(v34, "%s\n", (const char *)[v35 UTF8String]);
          }
        }
        if (v18[6])
        {
          if ((GT_SUPPORT_0 & 0x100000) == 0 || !v18[19]) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
        goto LABEL_70;
      }
      if (v7 != -15615) {
        goto LABEL_74;
      }
      uint64_t v16 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v5);
      uint64_t v17 = GTMTLSMContext_getObject(**(void **)(*(void *)a1 + 40), *((void *)v16 + 1), *(void *)a2);
      uint64_t v18 = v17;
      if ((GT_SUPPORT_0 & 0x100000) == 0 && v17[19])
      {
        if (s_logUsingOsLog)
        {
          uint64_t v19 = gt_default_log();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
LABEL_78:
            _os_log_error_impl(&def_1C1270, v19, OS_LOG_TYPE_ERROR, "warning: Acceleration structure indirection is not supported, but acceleration structures have indices", buf, 2u);
            goto LABEL_57;
          }
          goto LABEL_57;
        }
        goto LABEL_64;
      }
    }
LABEL_70:
    if (v18[18] || ((GT_SUPPORT_0 & 0x100000) == 0 || !v18[19]) && v18[20]) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }

  GTMTLReplayController_defaultDispatchFunction_noPinning(a1, a2);
}

#error "25C98C: too big function (funcsize=0)"

id _MakeMTLTextureDescriptor()
{
  uint64_t v0 = MakeMTLTextureDescriptor();
  unint64_t v1 = (unint64_t)[v0 resourceOptions];
  if ((dword_77313C & 0x40000) != 0) {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFCFFLL;
  }
  else {
    unint64_t v2 = v1;
  }
  [v0 setResourceOptions:v2];

  return v0;
}

id _MakeMTLComputePipelineDescriptor()
{
  uint64_t v0 = MakeMTLComputePipelineDescriptor();
  [v0 setBinaryArchives:insertBinaryArchives];

  return v0;
}

id _MakeMTLRenderPipelineDescriptor()
{
  uint64_t v0 = MakeMTLRenderPipelineDescriptor();
  [v0 setBinaryArchives:insertBinaryArchives];

  return v0;
}

id _MakeMTLMeshRenderPipelineDescriptor()
{
  uint64_t v0 = MakeMTLMeshRenderPipelineDescriptor();
  [v0 setBinaryArchives:insertBinaryArchives];

  return v0;
}

id _MakeMTLTileRenderPipelineDescriptor(uint64_t a1, void *a2)
{
  unint64_t v2 = MakeMTLTileRenderPipelineDescriptor(a1, a2);
  [v2 setBinaryArchives:insertBinaryArchives];

  return v2;
}

id NewCommandBuffer(void *a1)
{
  if (g_commandBufferDescriptor) {
    [a1 commandBufferWithDescriptor:];
  }
  else {
  unint64_t v1 = [a1 commandBuffer];
  }

  return v1;
}

id MTLDevice_newBufferWithBytes_length_options(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = **(const char ****)a1;
  int v7 = *(apr_pool_t ***)(a1 + 152);
  uint64_t v8 = *(void *)(*(void *)a1 + 16);
  id v9 = *(id *)(a1 + 8);
  size_t v10 = [v9 deviceForKey:*(void *)a3];
  p = *v7;
  uint64_t v11 = GTTraceFunc_argumentBytesWithMap(a2, *(unsigned __int8 *)(a3 + 40), v8);
  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)v6, v11);
  uint64_t v13 = *(void *)(a3 + 24);
  unint64_t v14 = v13 & 0xFFFFFFFFFFEFFFFFLL;
  if ((v13 & 0xF0) == 0x20
    || (uint64_t v15 = (uint64_t)FileWithFilename, v16 = FileWithFilename[4], (v16 & 2) == 0) && (v13 & 0xF) == 1)
  {
    id v17 = [v10 newBufferWithLength:*(void *)(a3 + 16) options:v14];
    uint64_t v18 = *(void *)(a3 + 16);
    id v33 = v10;
    id v19 = v9;
    id v20 = *(id *)(a1 + 24);
    int v21 = [v20 bufferWithLength:v18 alignment:1];
    BOOL v22 = GTTraceFunc_argumentBytesWithMap(a2, *(unsigned __int8 *)(a3 + 40), v8);
    GTCaptureArchive_fillBuffer(v6, v7, v22, (char *)[v21 contents], *(void *)(a3 + 16), 0);
    unint64_t v23 = [v20 blitCommandEncoder];

    uint64_t v24 = [v21 heapBuffer];
    [v23 copyFromBuffer:v24 sourceOffset:[v21 heapLocation] destinationOffset:v17 size:*(void *)(a3 + 16)];

    id v9 = v19;
    size_t v10 = v33;

LABEL_5:
    uint64_t v25 = p;
    goto LABEL_6;
  }
  if ((v16 & 2) == 0)
  {
    id v27 = [v10 newBufferWithLength:*(void *)(a3 + 16) options:v14];
    uint64_t v28 = v10;
    id v29 = v9;
    uint64_t v30 = *(void *)(a1 + 152);
    id v17 = v27;
    id v31 = [v17 contents];
    uint64_t v32 = v30;
    id v9 = v29;
    size_t v10 = v28;
    GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)v6, v32, v15, v31, *(void *)(a3 + 16), 0);
    goto LABEL_5;
  }
  uint64_t v25 = p;
  id v17 = [v10 newBufferWithBytes:GTCaptureArchive_mapDataSeperateFile((uint64_t)v6, FileWithFilename, p, 0) length:*(void *)(a3 + 16) options:v14];
LABEL_6:
  apr_pool_clear(v25);

  return v17;
}

id _MakeIOSurface(uint64_t a1, void *a2)
{
  id v59 = a2;
  uint64_t v62 = a1;
  if (*(void *)(a1 + 104))
  {
    id v3 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 104) length:*(void *)(a1 + 112) freeWhenDone:0];
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v58 = v5;
    a1 = v62;
    uint64_t v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v58, v6, v7, objc_opt_class(), 0);
    id v9 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v8 fromData:v3 error:0];
    uint64_t v60 = [v9 objectForKeyedSubscript:kIOSurfaceCreationProperties];
  }
  else
  {
    uint64_t v60 = 0;
  }
  id v10 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v11 = +[NSNumber numberWithUnsignedLongLong:*(void *)a1];
  [v10 setObject:v11 forKeyedSubscript:@"address"];

  size_t v12 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 92)];
  [v10 setObject:v12 forKeyedSubscript:IOSurfacePropertyKeyWidth];

  uint64_t v13 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 94)];
  [v10 setObject:v13 forKeyedSubscript:IOSurfacePropertyKeyHeight];

  unint64_t v14 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 84)];
  [v10 setObject:v14 forKeyedSubscript:IOSurfacePropertyKeyPixelFormat];

  if (!*(unsigned char *)(a1 + 102))
  {
    uint64_t v15 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 96)];
    [v10 setObject:v15 forKeyedSubscript:IOSurfacePropertyKeyBytesPerElement];

    unsigned int v16 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
    [v10 setObject:v16 forKeyedSubscript:IOSurfacePropertyKeyBytesPerRow];

    id v17 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 98)];
    [v10 setObject:v17 forKeyedSubscript:IOSurfacePropertyKeyElementWidth];

    uint64_t v18 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 100)];
    [v10 setObject:v18 forKeyedSubscript:IOSurfacePropertyKeyElementHeight];
  }
  id v19 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 8)];
  size_t v61 = v10;
  [v10 setObject:v19 forKeyedSubscript:IOSurfacePropertyKeyAllocSize];

  id v20 = v60;
  if (v60)
  {
    v78[0] = IOSurfacePropertyKeyAllocSize;
    v78[1] = IOSurfacePropertyKeyWidth;
    v78[2] = IOSurfacePropertyKeyHeight;
    v78[3] = IOSurfacePropertyKeyBytesPerElement;
    v78[4] = IOSurfacePropertyKeyBytesPerRow;
    v78[5] = IOSurfacePropertyKeyElementWidth;
    v78[6] = IOSurfacePropertyKeyElementHeight;
    v78[7] = IOSurfacePropertyKeyPixelFormat;
    v78[8] = @"IOSurfaceAddress";
    v78[9] = @"IOSurfaceProtectionOptions";
    int v21 = +[NSArray arrayWithObjects:v78 count:10];
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    id v22 = v60;
    id v23 = [v22 countByEnumeratingWithState:&v71 objects:v77 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v72;
      do
      {
        for (uint64_t i = 0; i != v24; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v72 != v25) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = *(void *)(*((void *)&v71 + 1) + 8 * i);
          if (([v21 containsObject:v27] & 1) == 0)
          {
            uint64_t v28 = [v22 objectForKeyedSubscript:v27];
            [v61 setObject:v28 forKeyedSubscript:v27];
          }
        }
        id v24 = [v22 countByEnumeratingWithState:&v71 objects:v77 count:16];
      }
      while (v24);
    }
  }
  uint64_t v29 = v62;
  if (*(unsigned char *)(v62 + 102))
  {
    v76[0] = IOSurfacePropertyKeyPlaneWidth;
    v76[1] = IOSurfacePropertyKeyPlaneHeight;
    v76[2] = IOSurfacePropertyKeyPlaneBytesPerElement;
    v76[3] = IOSurfacePropertyKeyPlaneBytesPerRow;
    v76[4] = IOSurfacePropertyKeyPlaneElementWidth;
    v76[5] = IOSurfacePropertyKeyPlaneElementHeight;
    uint64_t v30 = +[NSArray arrayWithObjects:v76 count:6];
    id v63 = [objc_alloc((Class)NSMutableArray) initWithCapacity:*(unsigned __int8 *)(v62 + 102)];
    uint64_t v66 = [v60 objectForKeyedSubscript:IOSurfacePropertyKeyPlaneInfo];
    id v31 = &send_ptr;
    if (*(unsigned char *)(v62 + 102))
    {
      unint64_t v32 = 0;
      uint64_t v65 = 0;
      do
      {
        uint64_t v33 = v29 + 16 * v32;
        int v34 = *(unsigned __int16 *)(v33 + 22);
        int v35 = *(_DWORD *)(v33 + 16);
        id v36 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v37 = [v31[211] numberWithUnsignedShort:*(unsigned __int16 *)(v33 + 20)];
        [v36 setObject:v37 forKeyedSubscript:IOSurfacePropertyKeyPlaneWidth];

        uint64_t v38 = [v31[211] numberWithUnsignedShort:*(unsigned __int16 *)(v33 + 22)];
        [v36 setObject:v38 forKeyedSubscript:IOSurfacePropertyKeyPlaneHeight];

        size_t v39 = [v31[211] numberWithUnsignedShort:*(unsigned __int16 *)(v33 + 24)];
        [v36 setObject:v39 forKeyedSubscript:IOSurfacePropertyKeyPlaneBytesPerElement];

        long long v40 = [v31[211] numberWithUnsignedInt:*(unsigned int *)(v33 + 16)];
        [v36 setObject:v40 forKeyedSubscript:IOSurfacePropertyKeyPlaneBytesPerRow];

        if (*(_WORD *)(v33 + 26))
        {
          long long v41 = [v31[211] numberWithUnsignedShort:];
          [v36 setObject:v41 forKeyedSubscript:IOSurfacePropertyKeyPlaneElementWidth];
        }
        if (*(_WORD *)(v33 + 28))
        {
          uint64_t v42 = [v31[211] numberWithUnsignedShort:];
          [v36 setObject:v42 forKeyedSubscript:IOSurfacePropertyKeyPlaneElementHeight];
        }
        uint64_t v43 = (v35 * v34);
        uint64_t v44 = [v31[211] numberWithUnsignedInteger:v65];
        [v36 setObject:v44 forKeyedSubscript:IOSurfacePropertyKeyPlaneOffset];

        uint64_t v45 = [v31[211] numberWithUnsignedInteger:v43];
        [v36 setObject:v45 forKeyedSubscript:IOSurfacePropertyKeyPlaneSize];

        if (v66)
        {
          uint64_t v64 = v43;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          uint64_t v46 = [v66 objectAtIndexedSubscript:v32];
          id v47 = [v46 countByEnumeratingWithState:&v67 objects:v75 count:16];
          if (v47)
          {
            id v48 = v47;
            uint64_t v49 = *(void *)v68;
            do
            {
              for (uint64_t j = 0; j != v48; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v68 != v49) {
                  objc_enumerationMutation(v46);
                }
                uint64_t v51 = *(void *)(*((void *)&v67 + 1) + 8 * (void)j);
                if (([v30 containsObject:v51] & 1) == 0)
                {
                  int v52 = [v66 objectAtIndexedSubscript:v32];
                  size_t v53 = [v52 objectForKeyedSubscript:v51];
                  [v36 setObject:v53 forKeyedSubscript:v51];
                }
              }
              id v48 = [v46 countByEnumeratingWithState:&v67 objects:v75 count:16];
            }
            while (v48);
          }

          uint64_t v29 = v62;
          id v31 = &send_ptr;
          uint64_t v43 = v64;
        }
        id v54 = [v36 copy];
        [v63 addObject:v54];

        v65 += v43;
        ++v32;
      }
      while (v32 < *(unsigned __int8 *)(v29 + 102));
    }
    id v55 = [v63 copy];
    [v61 setObject:v55 forKeyedSubscript:IOSurfacePropertyKeyPlaneInfo];

    id v20 = v60;
  }

  uint64_t v56 = [v59 iosurfaceForProperties:v61];

  return v56;
}

id MakeNSArray(uint64_t *a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = [objc_alloc((Class)NSMutableArray) initWithCapacity:a2];
  if (a2 >= 1)
  {
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = *a1++;
      id v9 = +[NSNumber numberWithUnsignedLongLong:v8];
      id v10 = [v5 objectForKeyedSubscript:v9];
      [v6 addObject:v10];

      --v7;
    }
    while (v7);
  }

  return v6;
}

id NewLibraryWithFile(void *a1, uint64_t a2, char *a3, char *a4, int a5, uint64_t a6, void *a7)
{
  id v13 = a1;
  unint64_t v14 = *(void **)(a2 + 144);
  uint64_t v15 = +[NSNumber numberWithUnsignedLongLong:a6];
  id v16 = [v14 objectForKeyedSubscript:v15];

  if (!v16)
  {
    if (!a3)
    {
      id v16 = 0;
      goto LABEL_16;
    }
    id v17 = *(void **)(a2 + 128);
    uint64_t v18 = +[NSNumber numberWithUnsignedLongLong:a6];
    id v19 = [v17 objectForKeyedSubscript:v18];

    if (v19)
    {
      id v20 = MTLDevice_newLibraryWithFile(v13, (uint64_t)v19, a7);
    }
    else
    {
      int v21 = **(void ***)a2;
      uint64_t v22 = *(void *)(a2 + 152);
      FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)v21, a3);
      if (a5)
      {
        if (a4) {
          id v24 = a4;
        }
        else {
          id v24 = a3;
        }
        uint64_t v25 = GTMTLReplayController_dumpLibrary(a2, a3, v24);
        uint64_t v26 = MTLDevice_newLibraryWithFile(v13, (uint64_t)v25, a7);
      }
      else
      {
        uint64_t v27 = FileWithFilename;
        if ((FileWithFilename[4] & 2) != 0)
        {
          uint64_t v29 = +[NSString stringWithUTF8String:*v21];
          uint64_t v30 = +[NSString stringWithUTF8String:a3];
          id v31 = [v29 stringByAppendingPathComponent:v30];

          unint64_t v32 = +[NSURL fileURLWithPath:v31];
          id v20 = MTLDevice_newLibraryWithFile(v13, (uint64_t)v32, a7);

          goto LABEL_15;
        }
        uint64_t v28 = malloc_type_malloc(*FileWithFilename, 0xB740AAF1uLL);
        GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)v21, v22, (uint64_t)v27, v28, *v27, 0);
        uint64_t v25 = dispatch_data_create(v28, *v27, 0, _dispatch_data_destructor_free);
        uint64_t v26 = MTLDevice_newLibraryWithData(v13, (uint64_t)v25, a7);
      }
      id v20 = (void *)v26;
    }
LABEL_15:
    id v16 = v20;
  }
LABEL_16:

  return v16;
}

id _MakeMTLCompileOptions(uint64_t a1, void *a2)
{
  if (a1)
  {
    MakeMTLCompileOptions(a1, a2);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v2 = objc_alloc_init((Class)MTLCompileOptions);
  }
  id v3 = v2;
  [v2 setDebuggingEnabled:1];

  return v3;
}

id NewLibraryWithSource(uint64_t a1, void *a2, char *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  uint64_t v11 = StringFromArchive(**(void ***)a1, *(void *)(a1 + 152), a3);
  if ([v10 libraryType] == (char *)&def_1C1270 + 1)
  {
    size_t v12 = [v10 installName];
    unsigned int v13 = [v12 hasPrefix:@"/"];

    if (v13)
    {
      unint64_t v14 = *(void **)(a1 + 22568);
      uint64_t v15 = [v10 installName];
      id v16 = [v15 substringFromIndex:1];
      id v17 = [v14 URLByAppendingPathComponent:v16];

      uint64_t v18 = [v17 path];
      [v10 setInstallName:v18];
    }
  }
  id v23 = 0;
  id v19 = [v9 newLibraryWithSource:v11 options:v10 error:&v23];
  id v20 = v23;
  int v21 = v20;
  if (a5) {
    *a5 = v20;
  }
  ValidateLibrary(v19);
  objc_claimAutoreleasedReturnValue();

  return v19;
}

void GTMTLReplay_dispatchFailedToSet(uint64_t a1, uint64_t a2)
{
  id v5 = +[NSData dataWithBytes:a1 length:64];
  id v3 = (void *)funcMap;
  uint64_t v4 = +[NSNumber numberWithUnsignedLongLong:a2];
  [v3 setObject:v5 forKeyedSubscript:v4];
}

void GTMTLReplay_dispatchFailedToGet(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = (void *)funcMap;
    id v5 = +[NSNumber numberWithUnsignedLongLong:a1];
    id v26 = [v4 objectForKeyedSubscript:v5];

    if (v26) {
      id v6 = [v26 bytes];
    }
    else {
      id v6 = 0;
    }
    uint64_t v7 = (void *)failureMap;
    uint64_t v8 = +[NSNumber numberWithUnsignedLongLong:a1];
    id v9 = [v7 objectForKeyedSubscript:v8];

    if (v9)
    {
      +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v9 integerValue] + 1);
      id v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      uint64_t v11 = (void *)failureMap;
      id v12 = +[NSNumber numberWithUnsignedLongLong:a1];
      [v11 setObject:v10 forKeyedSubscript:v12];
    }
    else
    {
      unsigned int v13 = +[NSNumber numberWithInt:1];
      unint64_t v14 = (void *)failureMap;
      uint64_t v15 = +[NSNumber numberWithUnsignedLongLong:a1];
      [v14 setObject:v13 forKeyedSubscript:v15];

      if (v6)
      {
        unsigned int v16 = GetFuncEnumConstructorType(v6[2]) - 1;
        if (v16 > 0x55) {
          id v17 = "Unknown";
        }
        else {
          id v17 = (&off_7479A0)[v16];
        }
        id v10 = +[NSString stringWithUTF8String:v17];
        FuncEnumAsuint64_t String = GetFuncEnumAsString(v6[2]);
      }
      else
      {
        id v10 = 0;
        FuncEnumAsuint64_t String = 0;
      }
      id v12 = objc_alloc_init((Class)NSMutableDictionary);
      id v19 = +[NSNumber numberWithUnsignedLongLong:a1];
      [v12 setObject:v19 forKeyedSubscript:@"GTErrorKeyTraceStreamID"];

      if (a2) {
        [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"GTErrorKeyResourceUnused"];
      }
      if (v6)
      {
        id v20 = +[NSNumber numberWithUnsignedLongLong:*(void *)v6];
        [v12 setObject:v20 forKeyedSubscript:@"GTErrorKeyFunctionIndex"];
      }
      if (FuncEnumAsString)
      {
        int v21 = +[NSString stringWithUTF8String:FuncEnumAsString];
        [v12 setObject:v21 forKeyedSubscript:@"GTErrorKeyFenum"];
      }
      if (!v10
        || ([v12 setObject:v10 forKeyedSubscript:@"GTErrorKeyReceiverType"],
            [(__CFString *)v10 isEqualToString:@"Unknown"]))
      {

        id v10 = @"Metal object";
      }
      if (FuncEnumAsString)
      {
        uint64_t v22 = +[NSString stringWithUTF8String:FuncEnumAsString];
        id v23 = PrettifyFenumString(v22);
        id v24 = +[NSString stringWithFormat:@"%@ creation failed when calling %@.", v10, v23];
      }
      else
      {
        id v24 = +[NSString stringWithFormat:@"%@ creation failed.", v10];
      }
      [v12 setObject:v24 forKeyedSubscript:NSLocalizedDescriptionKey];
      uint64_t v25 = +[NSError errorWithDomain:@"com.apple.gputools.MTLReplayer" code:150 userInfo:v12];
      GTMTLReplay_handleNSError(v25);
    }
  }
}

uint64_t GetEnvDefault(const char *a1, uint64_t a2)
{
  id v3 = getenv(a1);
  if (!v3) {
    return a2;
  }

  return strtol(v3, 0, 0);
}

id GTApplePMPPerfStateControl::EnableConsistentPerfState(GTApplePMPPerfStateControl *this, unsigned int a2)
{
  if (a2 <= 2)
  {
    id v5 = objc_opt_new();
    *((_DWORD *)this + 3) = a2;
    uint64_t v6 = *(void *)this;
    uint64_t v7 = operator new(0x28uLL);
    *uint64_t v7 = 0u;
    v7[1] = 0u;
    *((void *)v7 + 4) = v6;
    unsigned int v8 = *((_DWORD *)this + 452);
    if (v8)
    {
      char v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = this;
      do
      {
        uint64_t v12 = *((void *)v11 + 5);
        if (v12)
        {
          unsigned int v13 = (uint64_t *)((char *)this + 56 * v10 + 8 * *((unsigned int *)this + 3) + 24);
          unint64_t v14 = v13;
        }
        else
        {
          unsigned int v13 = (uint64_t *)((char *)v11 + 56);
          unint64_t v14 = (uint64_t *)((char *)v11 + 64);
        }
        uint64_t v15 = *v14;
        *((void *)v7 + (v10 >> 4)) |= *v13 << (v9 & 0x3C);
        *((void *)v7 + (v10 >> 4) + 2) |= v15 << (v9 & 0x3C);
        if (v12 && *((void *)v11 + 2))
        {
          unsigned int v16 = +[NSNumber numberWithUnsignedLongLong:*((void *)v11 + *((unsigned int *)this + 3) + 3)];
          [v5 setObject:v16 forKeyedSubscript:*((void *)v11 + 2)];

          unsigned int v8 = *((_DWORD *)this + 452);
        }
        ++v10;
        uint64_t v11 = (GTApplePMPPerfStateControl *)((char *)v11 + 56);
        v9 += 4;
      }
      while (v10 < v8);
    }
    GTApplePMPPerfStateControl::SetDVFSContraints(this, 0);
    if (GTApplePMPPerfStateControl::SetDVFSStates(this, (uint64_t *)v7)) {
      id v2 = 0;
    }
    else {
      id v2 = [v5 copy];
    }
    operator delete(v7);
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_26F52C(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void GTApplePMPPerfStateControl::SetDVFSContraints(GTApplePMPPerfStateControl *this, int a2)
{
  if (!*((_DWORD *)this + 454))
  {
    uint64_t v2 = 0;
    input[0] = 2;
    input[1] = 0;
    if (a2) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
    input[2] = 0;
    input[3] = v3;
    if ((a2 & 1) == 0) {
      uint64_t v2 = *(void *)this;
    }
    input[4] = v2;
    uint64_t v4 = IOConnectCallMethod(*((_DWORD *)this + 2), 6u, input, 5u, 0, 0, 0, 0, 0, 0);
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v6 = +[NSString stringWithUTF8String:mach_error_string(v4)];
      uint64_t v7 = +[NSString stringWithFormat:@"Failed to send PM command (0x%x - %@)", v5, v6];

      unsigned int v8 = __stdoutp;
      int v9 = g_runningInCI;
      id v10 = v7;
      uint64_t v11 = (const char *)[v10 UTF8String];
      uint64_t v12 = "#CI_ERROR# ";
      if (!v9) {
        uint64_t v12 = "";
      }
      fprintf(v8, "%s%s %u: %s\n", v12, "IOReturn GTApplePMPPerfStateControl::SetDVFSContraints(BOOL)", 328, v11);
      id v13 = v10;
      GTMTLReplay_handleError(101, (uint64_t)[v13 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTApplePMPPerfStateControl.mm", (uint64_t)"SetDVFSContraints", 328, 2);
    }
  }
}

void sub_26F6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GTApplePMPPerfStateControl::SetDVFSStates(GTApplePMPPerfStateControl *this, uint64_t *input)
{
  mach_port_t v3 = *((_DWORD *)this + 2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = IOConnectCallMethod(v3, *((_DWORD *)this + 459), input, 5u, 0, 0, 0, 0, 0, 0);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = +[NSString stringWithUTF8String:mach_error_string(v4)];
    uint64_t v7 = +[NSString stringWithFormat:@"_setDVFSStates (0x%x - %@)", v5, v6];

    unsigned int v8 = __stdoutp;
    int v9 = g_runningInCI;
    id v10 = v7;
    uint64_t v11 = (const char *)[v10 UTF8String];
    uint64_t v12 = "#CI_ERROR# ";
    if (!v9) {
      uint64_t v12 = "";
    }
    fprintf(v8, "%s%s %u: %s\n", v12, "IOReturn GTApplePMPPerfStateControl::SetDVFSStates(uint64_t *, uint32_t)", 306, v11);
    id v13 = v10;
    GTMTLReplay_handleError(101, (uint64_t)[v13 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTApplePMPPerfStateControl.mm", (uint64_t)"SetDVFSStates", 306, 2);
  }
  return v5;
}

void sub_26F864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GTApplePMPPerfStateControl::DisableConsistentPerfState(GTApplePMPPerfStateControl *this)
{
  if (*((_DWORD *)this + 3) != 3)
  {
    uint64_t v2 = operator new(0x28uLL);
    mach_port_t v3 = v2;
    _OWORD *v2 = 0u;
    v2[1] = 0u;
    *((void *)v2 + 4) = 0;
    uint64_t v4 = *((unsigned int *)this + 452);
    if (*((_DWORD *)this + 452))
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = (uint64_t *)((char *)this + 64);
      do
      {
        *((void *)v2 + (v6 >> 4)) |= *(v7 - 1) << (v5 & 0x3C);
        uint64_t v8 = *v7;
        v7 += 7;
        *((void *)v2 + (v6++ >> 4) + 2) |= v8 << (v5 & 0x3C);
        v5 += 4;
      }
      while (v4 != v6);
    }
    *((_DWORD *)this + 3) = 3;
    GTApplePMPPerfStateControl::SetDVFSStates(this, (uint64_t *)v2);
    GTApplePMPPerfStateControl::SetDVFSContraints(this, 1);
    operator delete(v3);
  }
}

void sub_26F954(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void GTApplePMPPerfStateControl::Close(GTApplePMPPerfStateControl *this)
{
  io_connect_t v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    IOServiceClose(v2);
    *((_DWORD *)this + 2) = 0;
    if (g_runningInCI)
    {
      id v5 = +[NSString stringWithFormat:@"%u Connection Closed", mach_task_self_];
      mach_port_t v3 = [v5 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

      uint64_t v4 = __stdoutp;
      id v6 = v3;
      fprintf(v4, "#CI-INFO# %s\n", (const char *)[v6 UTF8String]);
    }
  }
}

void sub_26FA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id GTMTLReplayController_getResizeRenderPipelineState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(void **)(a1 + 152);
  uint64_t v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:");
  id v8 = [v6 objectForKeyedSubscript:v7];

  if (!v8)
  {
    id v9 = *(id *)(a1 + 80);
    id v10 = v9;
    int v11 = *(_DWORD *)(a2 + 8);
    uint64_t v12 = 10;
    uint64_t v13 = 90;
    if ((v11 & 0x800010) == 0x10) {
      uint64_t v13 = a3;
    }
    if ((v11 & 0x40) == 0) {
      uint64_t v12 = v13;
    }
    if ((v11 & 0x20) != 0) {
      uint64_t v14 = 55;
    }
    else {
      uint64_t v14 = v12;
    }
    uint64_t v15 = [v9 colorAttachments];
    unsigned int v16 = [v15 objectAtIndexedSubscript:0];
    [v16 setPixelFormat:v14];

    int v17 = *(_DWORD *)(a2 + 8);
    uint64_t v18 = (void *)(a1 + 88);
    if ((v17 & 0x40000) != 0) {
      uint64_t v18 = (void *)(a1 + 104);
    }
    if ((v17 & 0x80000) != 0) {
      uint64_t v18 = (void *)(a1 + 96);
    }
    if ((v17 & 0x40) != 0) {
      uint64_t v18 = (void *)(a1 + 120);
    }
    if ((v17 & 0x20) != 0) {
      id v19 = (void *)(a1 + 112);
    }
    else {
      id v19 = v18;
    }
    [v10 setFragmentFunction:*v19];
    id v20 = [v10 fragmentFunction];
    int v21 = [v20 device];

    id v26 = 0;
    id v8 = [v21 newRenderPipelineStateWithDescriptor:v10 error:&v26];
    id v22 = v26;
    id v23 = *(void **)(a1 + 152);
    id v24 = +[NSNumber numberWithUnsignedInteger:a3];
    [v23 setObject:v8 forKeyedSubscript:v24];
  }

  return v8;
}

id GTMTLReplayController_resizeTexture(void *a1, uint64_t a2, void *a3, void *a4, unint64_t a5, unint64_t a6, void **a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a1;
  unsigned int v16 = [v14 device];
  id v17 = [v14 pixelFormat];
  uint64_t v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v46 = 0u;
  GTMTLPixelFormatGetInfoForDevice((uint64_t)&v46, (uint64_t)v16, (uint64_t)v17);
  uint64_t v18 = 10;
  uint64_t v19 = 90;
  if ((DWORD2(v46) & 0x800010) == 0x10) {
    uint64_t v19 = (uint64_t)v17;
  }
  if ((BYTE8(v46) & 0x40) == 0) {
    uint64_t v18 = v19;
  }
  if ((BYTE8(v46) & 0x20) != 0) {
    uint64_t v20 = 55;
  }
  else {
    uint64_t v20 = v18;
  }
  unint64_t v42 = a6;
  int v21 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:v20 width:a5 height:a6 mipmapped:0];
  [v21 setUsage:5];
  [v21 setResourceOptions:32];
  [v21 setAllowGPUOptimizedContents:0];
  id v45 = 0;
  id v22 = [v15 newTextureWithDescriptor:v21 error:&v45];

  id v23 = v45;
  id v24 = v23;
  if (v22)
  {
    id v37 = v23;
    size_t v39 = v16;
    long long v52 = 0u;
    long long v53 = 0u;
    uint64_t v54 = 0;
    long long v56 = 0u;
    long long v51 = 0u;
    int v50 = 1065353216;
    LODWORD(v52) = 1065353216;
    DWORD1(v53) = 1065353216;
    int v55 = 1065353216;
    id v25 = objc_alloc_init((Class)MTLRenderPassDescriptor);
    id v26 = [v25 colorAttachments];
    [v26 objectAtIndexedSubscript:0];
    v28 = uint64_t v27 = v13;
    [v28 setTexture:v22];

    long long v41 = v27;
    uint64_t v29 = [v27 renderCommandEncoderWithDescriptor:v25];
    uint64_t v30 = +[NSString stringWithFormat:@"ResizeTexture"];
    [v29 setLabel:v30];

    v43[0] = v46;
    v43[1] = v47;
    v43[2] = v48;
    uint64_t v44 = v49;
    id v31 = GTMTLReplayController_getResizeRenderPipelineState(a2, (uint64_t)v43, (uint64_t)v17);
    [v29 setRenderPipelineState:v31];

    [v29 setVertexBuffer:*(void *)(a2 + 144) offset:0 atIndex:0];
    [v29 setVertexBuffer:*(void *)(a2 + 144) offset:96 atIndex:1];
    if ((unint64_t)[v14 width] >= a5 || (unint64_t)objc_msgSend(v14, "height") >= v42) {
      unint64_t v32 = (void *)(a2 + 136);
    }
    else {
      unint64_t v32 = (void *)(a2 + 128);
    }
    [v29 setFragmentSamplerState:*v32 atIndex:0 v37, v39];
    [v29 setFragmentTexture:v14 atIndex:0];
    [v29 setFragmentBytes:&v50 length:80 atIndex:0];
    [v29 drawPrimitives:3 vertexStart:0 vertexCount:6];
    [v29 endEncoding];
    id v33 = v22;

    unsigned int v16 = v40;
    id v13 = v41;
    id v24 = v38;
  }
  else
  {
    if (v23)
    {
      NSErrorUserInfoKey v57 = NSUnderlyingErrorKey;
      id v58 = v23;
      int v34 = +[NSDictionary dictionaryWithObjects:&v58 forKeys:&v57 count:1];
    }
    else
    {
      int v34 = 0;
    }
    GTMTLReplay_fillError(a7, 101, v34);
    if (a7) {
      int v35 = *a7;
    }
    else {
      int v35 = 0;
    }
    GTMTLReplay_handleNSError(v35);
  }

  return v22;
}

id GTMTLReplayClient_retrieveTexturesForResize(id *a1, void *a2, void *a3, int a4, void **a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a1[1];
  id v11 = a1[3];
  id v84 = a1[2];
  uint64_t v91 = [v10 defaultDevice];
  id v82 = [v91 maxTextureWidth2D];
  long long v112 = 0uLL;
  id v83 = objc_alloc_init((Class)MTLTextureDescriptor);
  [v83 setResourceOptions:32];
  id v12 = [v9 count];
  id v13 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v8 count]];
  id v14 = v13;
  id v15 = &send_ptr;
  id v92 = v12;
  if (!v12)
  {
    id v63 = v9;
    id v85 = 0;
    id v17 = v8;
LABEL_76:
    long long v68 = [v15[219] stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"TextureBlit"];
    long long v69 = [v11 commandBuffer];
    [v69 setLabel:v68];

    [v11 commitCommandBuffer];
    id v70 = v14;
    goto LABEL_88;
  }
  uint64_t v77 = a5;
  uint64_t v78 = v10;
  id v80 = v11;
  id v85 = 0;
  id v86 = v13;
  uint64_t v16 = 0;
  id v87 = v9;
  id v88 = v8;
  id v17 = v8;
  uint64_t v18 = v9;
  while (1)
  {
    uint64_t v19 = [v18 objectAtIndexedSubscript:v16];
    uint64_t v20 = [v17 objectAtIndexedSubscript:v16];
    int v21 = (uint32_t *)[v19 pixelFormat];
    id v22 = [v20 objectForKeyedSubscript:@"DependencyGraphRequestedTextureAttachmentIndex"];
    id v23 = (int *)[v22 unsignedIntegerValue];

    if (v21 == &stru_B8.reserved3) {
      break;
    }
    uint64_t PlanePixelFormat = GetPlanePixelFormat((uint64_t)v21, 0);
    uint64_t v24 = (uint64_t)v21;
    if (!PlanePixelFormat) {
      goto LABEL_9;
    }
    [v14 addObject:v19];
LABEL_68:

    if (v92 == (id)++v16)
    {
      id v63 = v18;
      if (v85) {
        GTMTLReplay_commitCommandBuffer(v85);
      }
      else {
        id v85 = 0;
      }
      id v10 = v78;
      id v11 = v80;
      id v15 = &send_ptr;
      goto LABEL_76;
    }
  }
  uint64_t v24 = 260;
  if (v23 == (int *)((char *)&dword_8 + 1)) {
    uint64_t v24 = 261;
  }
LABEL_9:
  id v98 = (uint32_t *)v24;
  unsigned __int8 v26 = [v19 usage];
  BOOL v27 = (v26 & 1) == 0;
  uint64_t v28 = [v20 objectForKeyedSubscript:@"DependencyGraphRequestedTextureLevel"];
  uint64_t v29 = [v20 objectForKeyedSubscript:@"DependencyGraphRequestedTextureSlice"];
  unint64_t v97 = v28;
  id v96 = [v28 unsignedIntegerValue];
  uint64_t v93 = v29;
  id v94 = [v29 unsignedIntegerValue];
  int v30 = 0;
  switch((unint64_t)[v19 textureType])
  {
    case 0uLL:
    case 1uLL:
    case 7uLL:
    case 9uLL:
      int v30 = 0;
      if (v21 != v98)
      {
        BOOL v27 = 1;
        goto LABEL_22;
      }
      int v95 = 0;
      goto LABEL_30;
    case 2uLL:
      int v30 = 0;
      if (!v28) {
        goto LABEL_21;
      }
      goto LABEL_22;
    case 3uLL:
    case 5uLL:
    case 6uLL:
      goto LABEL_22;
    case 4uLL:
    case 8uLL:
      if (v26) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = a4;
      }
      if (!a4 || v21 == v98)
      {
        int v30 = a4;
LABEL_27:
        int v95 = 0;
        if ((v30 & 1) == 0 && !v27)
        {
          id v32 = v19;
          id v14 = v86;
          uint64_t v18 = v87;
          id v17 = v88;
          id v33 = v98;
          id v34 = v94;
          id v35 = v96;
          goto LABEL_63;
        }
      }
      else
      {
        int v30 = 1;
LABEL_22:
        unsigned __int8 v31 = [v19 usage];
        int v95 = 1;
        if ((v30 & 1) == 0 && (v31 & 0x10) != 0 && !v27)
        {
          id v32 = v19;
          id v14 = v86;
          uint64_t v18 = v87;
          id v17 = v88;
          id v33 = v98;
          id v34 = v94;
          id v35 = v96;
          goto LABEL_61;
        }
      }
LABEL_30:
      id v36 = [v19 width];
      id v37 = [v19 height];
      if (v97)
      {
        uint64_t v111 = 0;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v108 = 0u;
        GTMTLPixelFormatGetInfoForDevice((uint64_t)&v108, (uint64_t)v91, (uint64_t)v21);
        unint64_t v38 = ((unint64_t)DWORD2(v108) >> 11) & 4;
        if ((~DWORD2(v108) & 0x60) == 0)
        {
          if (v23 == (int *)((char *)&dword_8 + 1))
          {
            v38 |= 2uLL;
          }
          else if (v23 == &dword_8)
          {
            v38 |= 1uLL;
          }
        }
        uint64_t v107 = 0;
        long long v105 = 0u;
        long long v106 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        unint64_t v76 = v38;
        GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v101, (uint64_t)v91, (uint64_t)v21, (uint64_t)v36, (uint64_t)v37, 1, (uint64_t)[v19 sampleCount]);
        id v37 = (id)*((void *)&v101 + 1);
        id v36 = (id)v101;
        uint64_t v39 = v102;
      }
      else
      {
        uint64_t v39 = 1;
      }
      if (v82 >= v36) {
        id v40 = v36;
      }
      else {
        id v40 = v82;
      }
      uint64_t v41 = 5;
      if (!v30) {
        uint64_t v41 = 1;
      }
      if (v95) {
        uint64_t v42 = v41 | 0x10;
      }
      else {
        uint64_t v42 = v41;
      }
      [v83 setPixelFormat:v21, v76];
      [v83 setWidth:v40];
      [v83 setHeight:v37];
      [v83 setUsage:v42];
      id v100 = 0;
      id v32 = [v84 newTextureWithDescriptor:v83 error:&v100];
      id v43 = v100;
      uint64_t v90 = v43;
      if (v32)
      {
        uint64_t v44 = v20;
        uint64_t v45 = v39;
        unint64_t v89 = v44;
        long long v46 = [v44 objectForKeyedSubscript:@"DependencyGraphRequestedTextureDepthPlane"];
        id v47 = [v46 unsignedIntegerValue];

        if (!v30)
        {
          long long v53 = [v80 blitCommandEncoder];
          v99[0] = 0;
          v99[1] = 0;
          v99[2] = v47;
          *(void *)&long long v101 = v40;
          *((void *)&v101 + 1) = v37;
          *(void *)&long long v102 = v45;
          long long v108 = v112;
          *(void *)&long long v109 = 0;
          [v53 copyFromTexture:v19 sourceSlice:v94 sourceLevel:v96 sourceOrigin:v99 sourceSize:&v101 toTexture:v32 destinationSlice:0 destinationLevel:0 destinationOrigin:&v108];

          uint64_t v18 = v87;
          id v17 = v88;
          id v14 = v86;
          id v33 = v98;
          uint64_t v20 = v89;
          goto LABEL_60;
        }
        id v81 = v47;
        *(void *)&long long v104 = 0;
        long long v102 = 0u;
        long long v103 = 0u;
        long long v101 = 0u;
        GTMTLPixelFormatGetInfoForDevice((uint64_t)&v101, (uint64_t)v91, (uint64_t)v21);
        char v48 = BYTE8(v101);
        id v49 = objc_alloc_init((Class)MTLRenderPassDescriptor);
        int v50 = v49;
        if ((v48 & 0x20) != 0)
        {
          long long v52 = [v49 depthAttachment];
          [v52 setTexture:v19];
          [v52 setLevel:v96];
          [v52 setSlice:v94];
          [v52 setDepthPlane:v47];
          [v52 setResolveTexture:v32];
          [v52 setLoadAction:1];
          [v52 setStoreAction:2];
          id v17 = v88;
          uint64_t v20 = v89;
          id v33 = v98;
          if ((v48 & 0x40) == 0)
          {
            id v14 = v86;
LABEL_57:
            int v55 = v85;
            if (!v85)
            {
              long long v56 = [v78 defaultCommandQueue];
              [v56 commandBuffer];
              v58 = NSErrorUserInfoKey v57 = v17;

              id v59 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"ThumbnailsResolve"];
              [v58 setLabel:v59];

              int v55 = v58;
              id v17 = v57;
              id v33 = v98;
            }
            id v85 = v55;
            uint64_t v60 = [v55 renderCommandEncoderWithDescriptor:v50];
            [v60 endEncoding];

            uint64_t v18 = v87;
LABEL_60:

            id v35 = 0;
            id v34 = 0;
            if (v95)
            {
LABEL_61:
              size_t v61 = v32;
              id v32 = [v32 newTextureViewWithPixelFormat:v33 textureType:2 levels:v35 slices:v34];

              if (!v32)
              {
                id v63 = v18;
                CFStringRef v115 = @"GTErrorKeyMTLPixelFormat";
                uint64_t v64 = +[NSNumber numberWithUnsignedInteger:v33];
                unsigned int v116 = v64;
                uint64_t v65 = &v116;
                uint64_t v66 = &v115;
LABEL_78:
                uint64_t v19 = +[NSDictionary dictionaryWithObjects:v65 forKeys:v66 count:1];

                GTMTLReplay_fillError(v77, 101, v19);
                if (v77) {
                  long long v71 = *v77;
                }
                else {
                  long long v71 = 0;
                }
                id v10 = v78;
                id v11 = v80;
                long long v72 = v93;
                long long v73 = v97;
                GTMTLReplay_handleNSError(v71);
                goto LABEL_87;
              }
LABEL_67:
              [v14 addObject:v32];

              uint64_t v19 = v32;
              goto LABEL_68;
            }
LABEL_63:
            if ([v32 textureType] == &dword_4 || objc_msgSend(v32, "textureType") == &dword_8)
            {
              id v62 = [v32 newTextureViewWithPixelFormat:v33 textureType:[v32 textureType] levels:v35 slices:1 v34:1];

              if (!v62)
              {
                id v63 = v18;
                CFStringRef v113 = @"GTErrorKeyMTLPixelFormat";
                uint64_t v64 = +[NSNumber numberWithUnsignedInteger:v33];
                uint64_t v114 = v64;
                uint64_t v65 = &v114;
                uint64_t v66 = &v113;
                goto LABEL_78;
              }
              id v32 = v62;
            }
            goto LABEL_67;
          }
          uint64_t v54 = [v50 stencilAttachment];

          long long v52 = (void *)v54;
        }
        else
        {
          id v17 = v88;
          uint64_t v20 = v89;
          id v33 = v98;
          if ((v48 & 0x40) != 0)
          {
            long long v52 = [v49 stencilAttachment];
          }
          else
          {
            long long v51 = [v49 colorAttachments];
            long long v52 = [v51 objectAtIndexedSubscript:0];
          }
        }
        id v14 = v86;
        [v52 setTexture:v19];
        [v52 setLevel:v96];
        [v52 setSlice:v94];
        [v52 setDepthPlane:v81];
        [v52 setResolveTexture:v32];
        [v52 setLoadAction:1];
        [v52 setStoreAction:2];
        goto LABEL_57;
      }
      if (v43)
      {
        NSErrorUserInfoKey v117 = NSUnderlyingErrorKey;
        id v118 = v43;
        long long v67 = +[NSDictionary dictionaryWithObjects:&v118 forKeys:&v117 count:1];
      }
      else
      {
        long long v67 = 0;
      }
      id v63 = v87;
      id v17 = v88;
      id v10 = v78;
      id v11 = v80;
      id v14 = v86;
      long long v73 = v97;
      GTMTLReplay_fillError(v77, 101, v67);
      if (v77) {
        long long v74 = *v77;
      }
      else {
        long long v74 = 0;
      }
      GTMTLReplay_handleNSError(v74);

      long long v72 = v93;
LABEL_87:

      id v70 = 0;
LABEL_88:

      return v70;
    default:
      int v30 = 0;
LABEL_21:
      if (v21 != v98) {
        goto LABEL_22;
      }
      goto LABEL_27;
  }
}

void GTMTLReplayClient_resizeResolution(unint64_t *a1, void *a2, unint64_t *a3)
{
  id v5 = a2;
  id v6 = [v5 objectForKeyedSubscript:@"width"];
  id v7 = [v6 unsignedIntegerValue];
  id v8 = [v5 objectForKeyedSubscript:@"height"];
  id v9 = [v8 unsignedIntegerValue];

  id v10 = [v5 objectForKeyedSubscript:@"format"];

  id v11 = [v10 unsignedIntegerValue];
  unint64_t v12 = *a3;
  unint64_t v13 = a3[1];
  unint64_t v14 = *a3;
  unint64_t v15 = v13;
  if (*a3 < (unint64_t)v7 && v13 < (unint64_t)v9 && v11)
  {
    float v16 = (float)(unint64_t)v7 / (float)v12;
    unint64_t v14 = (unint64_t)(float)(v16 * (float)v12);
    unint64_t v15 = (unint64_t)(float)(v16 * (float)v13);
  }
  if (v14 <= (unint64_t)v7)
  {
    if (v15 <= (unint64_t)v9 || !v11) {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  if (!v11) {
    goto LABEL_17;
  }
  if (v15 > (unint64_t)v9)
  {
LABEL_11:
    float v20 = (float)(unint64_t)v9 / (float)v13;
    float v18 = v20 * (float)v12;
    float v19 = v20 * (float)v13;
    if (v18 > (float)(unint64_t)v7)
    {
      float v21 = (float)(unint64_t)v7 / v18;
      float v18 = v18 * v21;
      float v19 = v19 * v21;
    }
    goto LABEL_13;
  }
  float v17 = (float)(unint64_t)v7 / (float)v14;
  float v18 = v17 * (float)v14;
  float v19 = v17 * (float)v15;
LABEL_13:
  unint64_t v15 = (unint64_t)v19;
  unint64_t v14 = (unint64_t)v18;
  if ((unint64_t)v18 <= 8) {
    unint64_t v14 = 8;
  }
  if (v15 <= 0x10) {
    unint64_t v15 = 16;
  }
LABEL_17:
  if (v7) {
    unint64_t v12 = v14;
  }
  if (v9) {
    unint64_t v13 = v15;
  }
  *a1 = v12;
  a1[1] = v13;
  a1[2] = 1;
}

void AccelerationStructureViewerServer::ReplayerTransport::teardown(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    if (![WeakRetained sessionID] && objc_msgSend(v8, "requestID"))
    {
      unint64_t v13 = _NSConcreteStackBlock;
      uint64_t v14 = 3221225472;
      unint64_t v15 = ___ZN33AccelerationStructureViewerServer17ReplayerTransport8teardownEPNS_8EndpointEP7NSError_block_invoke;
      float v16 = &unk_745EA8;
      uint64_t v19 = a1;
      id v17 = v8;
      id v18 = v6;
      unint64_t v12 = +[NSBlockOperation blockOperationWithBlock:&v13];
      [*(id *)(*(void *)(a1 + 24) + 264) addOperation:v12, v13, v14, v15, v16];

      id v9 = v17;
      goto LABEL_12;
    }
    id v9 = v6;
    id v25 = off_744268;
    long long v26 = 0u;
    objc_storeStrong((id *)&v26, a3);
    *((void *)&v26 + 1) = 0;
    *(void *)&v20[0] = off_744168;
    *(_OWORD *)((char *)v20 + 8) = 0u;
    AccelerationStructureViewer::DataSourceError::encode((uint64_t)&v25, (uint64_t)v20);
    id v10 = 0;
    uint64_t v11 = *(void *)&v20[1];
    uint64_t v24 = 0;
    long long v23 = 0u;
    if (*(void *)&v20[1] != -1)
    {
      std::vector<unsigned char>::__append((unint64_t *)&v23, *(void *)&v20[1] + 1);
      id v10 = (unsigned char *)v23;
    }
    memset((char *)v20 + 8, 0, 24);
    *(void *)&v20[0] = off_7441B0;
    float v21 = v10 + 1;
    uint64_t v22 = v11;
    AccelerationStructureViewer::DataSourceError::encode((uint64_t)&v25, (uint64_t)v20);
    if (v20[1] == v22)
    {
      *id v10 = 6;
      (*(void (**)(uint64_t, uint64_t, void, void, unsigned char *, uint64_t))(*(void *)a1 + 32))(a1, a2, 0, 0, v10, v11 + 1);
    }
    else if (!v10)
    {
LABEL_9:

LABEL_12:
      goto LABEL_13;
    }
    operator delete(v10);
    goto LABEL_9;
  }
LABEL_13:
}

void sub_270E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *___ZN33AccelerationStructureViewerServer17ReplayerTransport8teardownEPNS_8EndpointEP7NSError_block_invoke(void *a1)
{
  __n128 result = (void *)a1[4];
  if (result)
  {
    uint64_t v3 = a1[6];
    if (!*(void *)(v3 + 32))
    {
      uint64_t v4 = *(void *)(v3 + 48);
      id v5 = [result requestID];
      uint64_t v6 = a1[5];
      id v7 = *(uint64_t (**)(uint64_t, id, void, uint64_t))(v4 + 16);
      return (void *)v7(v4, v5, 0, v6);
    }
  }
  return result;
}

void AccelerationStructureViewerServer::ReplayerTransport::send(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12) {
      BOOL v13 = a3 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13 || (unint64_t v14 = atomic_load((unsigned int *)(v12 + 48)), *(void *)(a1 + 40) >= v14))
    {
      unint64_t v15 = +[NSData dataWithBytes:a5 length:a6];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = ___ZN33AccelerationStructureViewerServer17ReplayerTransport4sendEPNS_8EndpointEbmPvm_block_invoke;
      v18[3] = &unk_745A90;
      uint64_t v21 = a1;
      char v23 = a3;
      id v19 = WeakRetained;
      uint64_t v22 = a4;
      id v16 = v15;
      id v20 = v16;
      id v17 = +[NSBlockOperation blockOperationWithBlock:v18];
      [*(id *)(*(void *)(a1 + 24) + 264) addOperation:v17];
    }
    else
    {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a4);
    }
  }
}

void sub_2710A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN33AccelerationStructureViewerServer17ReplayerTransport4sendEPNS_8EndpointEbmPvm_block_invoke(uint64_t a1)
{
  io_connect_t v2 = *(void **)(a1 + 32);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4)
  {
    if (!*(unsigned char *)(a1 + 64)) {
      goto LABEL_9;
    }
    unint64_t v5 = atomic_load((unsigned int *)(v4 + 48));
    if (*(void *)(v3 + 40) < v5)
    {
      uint64_t v6 = *(void (**)(void))(**(void **)(v3 + 16) + 24);
      v6();
      return;
    }
    io_connect_t v2 = *(void **)(a1 + 32);
    if (*(void *)(v3 + 32))
    {
LABEL_9:
      CFStringRef v14 = @"sessionId";
      id v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v2 sessionID]);
      unint64_t v15 = v7;
      id v8 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
      id v9 = +[GTTransportMessage_replayer messageWithKind:4609 attributes:v8 payload:*(void *)(a1 + 40)];

      [*(id *)(v3 + 32) send:v9 inReplyTo:0 error:0];
      return;
    }
  }
  uint64_t v10 = *(void *)(v3 + 48);
  id v11 = [v2 sessionID];
  uint64_t v12 = *(void *)(a1 + 40);
  BOOL v13 = *(void (**)(uint64_t, id, uint64_t, void))(v10 + 16);

  v13(v10, v11, v12, 0);
}

void sub_2712D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AccelerationStructureViewerServer::ReplayerTransport::disconnect(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t AccelerationStructureViewerServer::ReplayerTransport::connect(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

void AccelerationStructureViewerServer::ReplayerTransport::~ReplayerTransport(id *this)
{
  AccelerationStructureViewerServer::ReplayerTransport::~ReplayerTransport(this);

  operator delete();
}

{
  id *v2;

  *this = off_745A58;
  io_connect_t v2 = this + 1;
  objc_storeWeak(this + 1, 0);

  objc_destroyWeak(v2);
}

void sub_271504(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_271940(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);

  _Unwind_Resume(a1);
}

void sub_271B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_271C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_271CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_271E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GTAccelerationStructureServerSession;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_273924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36)
{
  _Unwind_Resume(a1);
}

void GTMTLReplayWireframeRenderer_initWithDevice(uint64_t a1, void *a2)
{
  *(void *)(a1 + 48) = 1;
  id v3 = a2;
  uint64_t v4 = GTMTLReplayController_defaultLibrary(v3);
  id v5 = [v4 newFunctionWithName:@"wireframeCreationFragment"];
  [v5 setLabel:@"wireframeCreationFragment"];
  uint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  id v7 = v5;

  *(void *)(a1 + 16) = 10;
  id v8 = [v4 newFunctionWithName:@"createOutlineTexture"];
  id v58 = 0;
  id v9 = [v3 newComputePipelineStateWithFunction:v8 error:&v58];
  id v10 = v58;
  id v11 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v9;

  id v12 = [v4 newFunctionWithName:@"createOutlineTextureMS"];
  id v57 = v10;
  id v13 = [v3 newComputePipelineStateWithFunction:v12 error:&v57];
  id v14 = v57;

  unint64_t v15 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v13;

  id v16 = objc_alloc_init((Class)NSMutableDictionary);
  id v17 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v16;

  id v18 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  id v19 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v18;

  id v20 = [v4 newFunctionWithName:@"passthoughVertex"];
  [*(id *)(a1 + 80) setVertexFunction:v20];

  id v21 = [v4 newFunctionWithName:@"fragmentShader"];
  uint64_t v22 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v21;

  id v23 = [v4 newFunctionWithName:@"fragmentShaderUint"];
  uint64_t v24 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v23;

  id v25 = [v4 newFunctionWithName:@"fragmentShaderSint"];
  long long v26 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v25;

  id v27 = [v4 newFunctionWithName:@"depthShader"];
  uint64_t v28 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v27;

  id v29 = [v4 newFunctionWithName:@"stencilShader"];
  int v30 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v29;

  id v31 = objc_alloc_init((Class)MTLSamplerDescriptor);
  [v31 setMinFilter:0];
  [v31 setMagFilter:0];
  [v31 setMipFilter:0];
  id v32 = [v3 newSamplerStateWithDescriptor:v31];
  id v33 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v32;

  [v31 setMinFilter:1];
  [v31 setMagFilter:1];
  [v31 setMipFilter:2];
  id v34 = [v3 newSamplerStateWithDescriptor:v31];
  id v35 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v34;

  uint64_t v36 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:10 width:128 height:128 mipmapped:0];
  id v37 = *(id *)a1;
  *(void *)a1 = v36;

  [*(id *)a1 setUsage:21];
  [*(id *)a1 setResourceOptions:32];
  id v38 = objc_alloc_init((Class)MTLRenderPassDescriptor);
  uint64_t v39 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v38;

  id v40 = [*(id *)(a1 + 8) colorAttachments];
  uint64_t v41 = [v40 objectAtIndexedSubscript:0];

  [v41 setLoadAction:2];
  [v41 setClearColor:0.0, 0.0, 0.0, 0.0];
  id v42 = [v3 newBufferWithBytes:&GTMTLReplayWireframeRenderer_initWithDevice_posData length:144 options:0];
  id v43 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v42;

  uint64_t v44 = [*(id *)(a1 + 80) vertexDescriptor];
  uint64_t v45 = [v44 attributes];
  long long v46 = [v45 objectAtIndexedSubscript:0];
  [v46 setFormat:31];

  id v47 = [v44 attributes];
  char v48 = [v47 objectAtIndexedSubscript:1];
  [v48 setFormat:29];

  id v49 = [v44 attributes];
  int v50 = [v49 objectAtIndexedSubscript:1];
  [v50 setBufferIndex:1];

  long long v51 = [v44 layouts];
  long long v52 = [v51 objectAtIndexedSubscript:0];
  [v52 setStride:16];

  long long v53 = [v44 layouts];
  uint64_t v54 = [v53 objectAtIndexedSubscript:1];
  [v54 setStride:8];

  id v55 = [v3 newBufferWithLength:0x2000000 options:0];
  long long v56 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v55;
}

id GTMTLReplayController_generateWireframeTexture()
{
  uint64_t v0 = __chkstk_darwin();
  io_connect_t v2 = v1;
  int v4 = (int)v3;
  uint64_t v112 = v5;
  uint64_t v114 = v6;
  uint64_t v7 = v0;
  id v8 = (_DWORD *)(v0 + 22480);
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v3);
  uint64_t v113 = *(void *)v7;
  id v115 = *(id *)(v7 + 8);
  uint64_t v9 = *(void *)(*(void *)v7 + 120);
  unint64_t v10 = (*v8 - 1);
  if (v10 >= *(int *)(v9 + 12))
  {
    GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
    if (v2) {
      unint64_t v15 = *v2;
    }
    else {
      unint64_t v15 = 0;
    }
    goto LABEL_12;
  }
  id v137 = 0;
  v138[0] = 0;
  v138[1] = 0;
  uint64_t v11 = GTMTLReplayController_renderPassDescriptor(v7);
  if (!v11)
  {
    GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
    if (v2) {
      unint64_t v15 = *v2;
    }
    else {
      unint64_t v15 = 0;
    }
LABEL_12:
    GTMTLReplay_handleNSError(v15);
LABEL_42:
    id v32 = 0;
    goto LABEL_43;
  }
  uint64_t v12 = v11;
  id v13 = [v115 renderPassDescriptorMap];
  id v14 = MakeMTLRenderPassDescriptor(v12, v13);

  if (!v14)
  {
    GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
    if (v2) {
      id v16 = *v2;
    }
    else {
      id v16 = 0;
    }
    GTMTLReplay_handleNSError(v16);
    goto LABEL_41;
  }
  if ((GT_SUPPORT_0 & 0x80) == 0)
  {
    unsigned int v111 = 1;
    if ((GT_SUPPORT_0 & 0x100) == 0) {
      goto LABEL_19;
    }
LABEL_18:
    id v18 = [v115 rasterizationRateMapForKey:*(void *)(v12 + 784)];
    [(id)v114[1] setRasterizationRateMap:v18];

    [v14 setRasterizationRateMap:0];
    goto LABEL_19;
  }
  [(id)v114[1] setRenderTargetArrayLength:*(unsigned __int16 *)(v12 + 806)];
  unsigned int v17 = *(unsigned __int16 *)(v12 + 806);
  if (v17 <= 1) {
    unsigned int v17 = 1;
  }
  unsigned int v111 = v17;
  if ((GT_SUPPORT_0 & 0x100) != 0) {
    goto LABEL_18;
  }
LABEL_19:
  id v19 = [v115 defaultDevice];
  unsigned __int8 v20 = [v14 validate:v19 width:&v137 height:v138];

  if ((v20 & 1) == 0)
  {
    GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
    if (v2) {
      long long v26 = *v2;
    }
    else {
      long long v26 = 0;
    }
    GTMTLReplay_handleNSError(v26);
LABEL_41:

    goto LABEL_42;
  }

  unint64_t v107 = v10;
  uint64_t v21 = *(void *)(v9 + 24) + (v10 << 6);
  unsigned int v22 = *(_DWORD *)(v21 + 8);
  long long v106 = (unsigned int *)(v21 + 8);
  int v23 = IsFuncEnumDrawCall(v22);
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  memset(v131, 0, sizeof(v131));
  long long v130 = 0u;
  long long v129 = 0u;
  long long v128 = 0u;
  long long v127 = 0u;
  long long v126 = 0u;
  long long v125 = 0u;
  long long v124 = 0u;
  long long v123 = 0u;
  long long v122 = 0u;
  memcpy(__dst, (const void *)(v7 + 11368), sizeof(__dst));
  if ((v22 & 0xFFFFFFFC) == 0xFFFFC1A4) {
    int v24 = 1;
  }
  else {
    int v24 = v23;
  }
  char v108 = v24;
  if ((v22 & 0xFFFFFFFC) == 0xFFFFC1A4)
  {
    *((void *)&v136 + 1) = **(void **)(v7 + 152);
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)&v131[1], *(_DWORD ***)(v113 + 40), *(void *)v21, *((apr_pool_t **)&v136 + 1));
    GetExecuteCommandsInBufferArgs((uint64_t)&v122, v21, *(void *)(v113 + 16));
    uint64_t Object = GTMTLSMContext_getObject(**(void **)(v113 + 40), v122, *(void *)v21);
    if (!Object)
    {
      GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
      if (v2) {
        id v34 = *v2;
      }
      else {
        id v34 = 0;
      }
      goto LABEL_52;
    }
    GTMTLCreateIndirectCommandEncoder((uint64_t)&v124 + 8, Object[13]);
    uint64_t v27 = *((void *)&v123 + 1) + v131[0] * v8[1];
    *(void *)&long long v136 = v27;
    GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)__dst, (void *)&v124 + 1, v27, &v131[1]);
    unsigned int v22 = *v106;
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(void *)(v7 + 19912);
  if (v22 >> 2 == 1073737833 && !*(unsigned char *)(*((void *)&v124 + 1) + 11)) {
    uint64_t v28 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(v132, *(void *)(v27 + *((void *)&v125 + 1)));
  }
  id v29 = GTMTLSMContext_getObject(**(void **)(v113 + 40), v28, *(void *)v21);
  if (!v29)
  {
    GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
    if (v2) {
      id v34 = *v2;
    }
    else {
      id v34 = 0;
    }
LABEL_52:
    GTMTLReplay_handleNSError(v34);
    goto LABEL_42;
  }
  uint64_t v103 = v27;
  long long v104 = v29;
  if ((v24 & v4) == 1)
  {
    uint64_t v30 = v29[6];
    if (v30) {
      unint64_t v31 = *(void *)(v30 + 1272);
    }
    else {
      unint64_t v31 = 1;
    }
    uint64_t v35 = v29[9];
    if (v35) {
      unint64_t v31 = *(unsigned __int8 *)(v35 + 508);
    }
  }
  else
  {
    unint64_t v31 = 1;
  }
  uint64_t v36 = (id *)(v114 + 4);
  uint64_t v37 = 5;
  if (v112 == 1) {
    uint64_t v37 = 4;
  }
  else {
    uint64_t v36 = (id *)(v114 + 5);
  }
  location = v36;
  id v38 = (id)v114[v37];
  uint64_t v39 = [v115 defaultDevice];
  if (!v38
    || (id v40 = [v38 width], v40 != v137)
    || (id v41 = [v38 height], v41 != (id)v138[0])
    || [v38 arrayLength] != (id)v111
    || [v38 sampleCount] != (id)v31)
  {

    id v42 = [(id)v114[1] colorAttachments];
    id v43 = [v42 objectAtIndexedSubscript:0];
    [v43 setTexture:0];

    uint64_t v44 = [(id)v114[1] colorAttachments];
    uint64_t v45 = [v44 objectAtIndexedSubscript:0];
    [v45 setResolveTexture:0];

    [(id)*v114 setWidth:v137];
    [(id)*v114 setHeight:v138[0]];
    uint64_t v46 = 2;
    if (v111 > 1) {
      uint64_t v46 = 3;
    }
    uint64_t v47 = 4;
    if (v111 > 1) {
      uint64_t v47 = 8;
    }
    if (v31 <= 1) {
      uint64_t v48 = v46;
    }
    else {
      uint64_t v48 = v47;
    }
    [(id)*v114 setTextureType:v48];
    v114[6] = v31;
    [(id)*v114 setArrayLength:v111];
    [(id)*v114 setSampleCount:v31];
    id v49 = [v39 newTextureWithDescriptor:*v114];
    if (!v49)
    {
      CFStringRef v144 = @"GTErrorKeyMTLTextureDescriptor";
      id v57 = SerializeMTLTextureDescriptorToDictionary((void *)*v114);
      CFStringRef v145 = v57;
      id v58 = +[NSDictionary dictionaryWithObjects:&v145 forKeys:&v144 count:1];

      GTMTLReplay_fillError(v2, 101, v58);
      if (v2) {
        id v59 = *v2;
      }
      else {
        id v59 = 0;
      }
      GTMTLReplay_handleNSError(v59);

      id v38 = 0;
      goto LABEL_85;
    }
    id v38 = v49;
    objc_storeStrong(location, v49);
    int v50 = [(id)v114[1] colorAttachments];
    long long v51 = [v50 objectAtIndexedSubscript:0];
    [v51 setStoreAction:1];
  }
  long long v52 = [(id)v114[1] colorAttachments];
  long long v53 = [v52 objectAtIndexedSubscript:0];
  [v53 setTexture:v38];

  if ((v108 & 1) == 0)
  {
    id v60 = v38;
LABEL_81:
    id v32 = v60;
    id v38 = v60;
    goto LABEL_86;
  }
  switch(GTMTLSMRenderPipelineState_renderPipelineDescriptorType(*(uint64_t **)(v113 + 40), v104))
  {
    case 1u:
      memset(v120, 0, 512);
      GTMTLSMRenderPipelineState_renderPipelineDescriptor(*(uint64_t **)(v113 + 40), v104, (uint64_t)v120, newpool);
      size_t v61 = [v115 renderPipelineDescriptorMap];
      MakeMTLRenderPipelineDescriptorWithoutResourceIndex((uint64_t)v120, v61);
      id v56 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_88;
    case 2u:
      GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
      if (v2) {
        id v70 = *v2;
      }
      else {
        id v70 = 0;
      }
      goto LABEL_110;
    case 3u:
      memset(v120, 0, 512);
      long long v71 = (const void *)v104[9];
      if (!v71 || (memcpy(v120, v71, 0x200uLL), !BYTE13(v120[31])))
      {
        id v60 = v38;
        goto LABEL_81;
      }
      long long v72 = [v115 renderPipelineDescriptorMap];
      long long v73 = MakeMTLMeshRenderPipelineDescriptorWithoutResourceIndex((uint64_t)v120, v72);

      [v73 setRasterSampleCount:v31];
      [v73 setFragmentFunction:v114[3]];
      [v73 setFragmentLinkedFunctions:0];
      [v73 setFragmentPreloadedLibraries:&__NSArray0__struct];
      uint64_t v74 = v114[2];
      uint64_t v75 = [v73 colorAttachments];
      unint64_t v76 = [v75 objectAtIndexedSubscript:0];
      [v76 setPixelFormat:v74];

      uint64_t v77 = [v73 colorAttachments];
      uint64_t v78 = [v77 objectAtIndexedSubscript:0];
      [v78 setBlendingEnabled:0];

      [v73 setDepthAttachmentPixelFormat:0];
      [v73 setStencilAttachmentPixelFormat:0];
      id v118 = 0;
      id v79 = [v39 newRenderPipelineStateWithMeshDescriptor:v73 options:0 reflection:0 error:&v118];
      id v80 = v118;
      id v81 = v80;
      if (v79)
      {
        long long v110 = v79;

        goto LABEL_97;
      }
      if (v80)
      {
        NSErrorUserInfoKey v140 = NSUnderlyingErrorKey;
        id v141 = v80;
        int v95 = +[NSDictionary dictionaryWithObjects:&v141 forKeys:&v140 count:1];
      }
      else
      {
        int v95 = 0;
      }
      GTMTLReplay_fillError(v2, 101, v95);
      if (v2) {
        uint64_t v99 = *v2;
      }
      else {
        uint64_t v99 = 0;
      }
      GTMTLReplay_handleNSError(v99);
      id v38 = v38;

      goto LABEL_138;
    default:
      if (v104[11])
      {
        uint64_t v54 = [v115 pipelineLibraryForKey:v104[5]];
        long long v109 = DEVICEOBJECT(v54);
        id v55 = +[NSString stringWithUTF8String:v104[11]];
        id v56 = [v109 newRenderPipelineDescriptorWithName:v55 error:v2];

        if (v56)
        {

LABEL_88:
          if ([v56 isRasterizationEnabled])
          {
            [v56 setRasterSampleCount:v31];
            [v56 setFragmentFunction:v114[3]];
            [v56 setFragmentLinkedFunctions:0];
            [v56 setFragmentPreloadedLibraries:&__NSArray0__struct];
            uint64_t v62 = v114[2];
            id v63 = [v56 colorAttachments];
            uint64_t v64 = [v63 objectAtIndexedSubscript:0];
            [v64 setPixelFormat:v62];

            uint64_t v65 = [v56 colorAttachments];
            uint64_t v66 = [v65 objectAtIndexedSubscript:0];
            [v66 setBlendingEnabled:0];

            [v56 setDepthAttachmentPixelFormat:0];
            [v56 setStencilAttachmentPixelFormat:0];
            id v119 = 0;
            id v67 = [v39 newRenderPipelineStateWithDescriptor:v56 error:&v119];
            id v68 = v119;
            long long v69 = v68;
            if (!v67)
            {
              if (v68)
              {
                NSErrorUserInfoKey v142 = NSUnderlyingErrorKey;
                id v143 = v68;
                id v92 = +[NSDictionary dictionaryWithObjects:&v143 forKeys:&v142 count:1];
              }
              else
              {
                id v92 = 0;
              }
              GTMTLReplay_fillError(v2, 101, v92);
              if (v2) {
                unint64_t v97 = *v2;
              }
              else {
                unint64_t v97 = 0;
              }
              GTMTLReplay_handleNSError(v97);
              id v38 = v38;

              goto LABEL_138;
            }
            long long v110 = v67;

LABEL_97:
            CommandBuffer = GroupBuilder_getCommandBuffer(*(_DWORD *)(*(void *)(v113 + 112) + 12), *(void **)(*(void *)(v113 + 112) + 24), v107);
            if (CommandBuffer)
            {
              uint64_t v83 = *(void *)(v9 + 24) + (*CommandBuffer << 6);
              GTMTLReplayController_defaultDispatchFunction(v7, v83);
              id v84 = [v115 commandBufferForKey:*(void *)GTTraceFunc_argumentBytesWithMap((void *)v83, *(unsigned __int8 *)(v83 + 13), *(void *)(v113 + 16))+ 1];
              if (v84)
              {
                CommandEncoder = GroupBuilder_getCommandEncoder(*(_DWORD *)(*(void *)(v113 + 112) + 12), *(void **)(*(void *)(v113 + 112) + 24), v107);
                if (CommandEncoder)
                {
                  id v86 = CommandEncoder;
                  id v87 = [v84 renderCommandEncoderWithDescriptor:v114[1]];
                  if (v87)
                  {
                    uint64_t v88 = *(void *)(v9 + 24) + (*v86 << 6);
                    [v115 setRenderCommandEncoder:v87 forKey:*(void *)GTTraceFunc_argumentBytesWithMap(v88, *(unsigned __int8 *)(v88 + 13), *(void *)(v113 + 16))+ 1];
                    __dst[1068] = 0;
                    __dst[1231] = 0;
                    BYTE3(__dst[1385]) = v112;
                    LODWORD(__dst[1335]) = 1065353216;
                    BYTE5(__dst[1385]) = 0;
                    HIDWORD(__dst[1384]) = 0;
                    GTMTLReplayController_restoreDefaultRenderCommandEncoder();
                    [v87 setRenderPipelineState:v110];
                    if (*v106 >> 2 == 1073737833)
                    {
                      unint64_t v89 = [v115 executeIndirectCommandBufferMap];
                      char v90 = DYMTLDrawRenderCommandEncoder(v87, (uint64_t)&v124 + 8, v103, (uint64_t)&v131[1], v89);

                      apr_pool_clear(*((apr_pool_t **)&v136 + 1));
                      if ((v90 & 1) == 0)
                      {
                        GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
                        if (v2) {
                          uint64_t v91 = *v2;
                        }
                        else {
                          uint64_t v91 = 0;
                        }
                        GTMTLReplay_handleNSError(v91);
                        id v102 = v38;

                        goto LABEL_137;
                      }
                    }
                    else
                    {
                      GTMTLReplayController_defaultDispatchFunction(v7, v21);
                    }
                    v116[0] = _NSConcreteStackBlock;
                    v116[1] = 3221225472;
                    v116[2] = __GTMTLReplayController_generateWireframeTexture_block_invoke;
                    v116[3] = &unk_746210;
                    id v117 = v110;
                    [v84 addCompletedHandler:v116];
                    GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer(v7, v107);
                    [v115 commitCommandBuffers];
                    id v100 = v38;

LABEL_137:
LABEL_138:
                    id v32 = v38;
                    goto LABEL_86;
                  }
                  GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
                  if (v2) {
                    id v96 = *v2;
                  }
                  else {
                    id v96 = 0;
                  }
                }
                else
                {
                  GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
                  if (v2) {
                    id v96 = *v2;
                  }
                  else {
                    id v96 = 0;
                  }
                }
                GTMTLReplay_handleNSError(v96);
                id v101 = v38;

                goto LABEL_137;
              }
              GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
              if (v2) {
                uint64_t v93 = *v2;
              }
              else {
                uint64_t v93 = 0;
              }
            }
            else
            {
              GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
              if (v2) {
                uint64_t v93 = *v2;
              }
              else {
                uint64_t v93 = 0;
              }
            }
            GTMTLReplay_handleNSError(v93);
            id v98 = v38;
            goto LABEL_137;
          }
          id v32 = v38;
          uint64_t v54 = v56;
        }
        else
        {
          GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
          if (v2) {
            id v94 = *v2;
          }
          else {
            id v94 = 0;
          }
          GTMTLReplay_handleNSError(v94);
          id v32 = 0;
        }

        goto LABEL_86;
      }
      GTMTLReplay_fillError(v2, 101, &__NSDictionary0__struct);
      if (v2) {
        id v70 = *v2;
      }
      else {
        id v70 = 0;
      }
LABEL_110:
      GTMTLReplay_handleNSError(v70);
      break;
  }
LABEL_85:
  id v32 = 0;
LABEL_86:

LABEL_43:
  apr_pool_destroy(newpool);

  return v32;
}

void sub_274F0C(_Unwind_Exception *a1)
{
  apr_pool_destroy(*(apr_pool_t **)(v1 - 160));
  _Unwind_Resume(a1);
}

void *GroupBuilder_getCommandEncoder(int a1, void *a2, unint64_t a3)
{
  InclusiveRange = GroupBuilder_findInclusiveRange(a1, a2, a3);
  while (InclusiveRange)
  {
    if (IsFuncEnumCreateCommandEncoder(*((_DWORD *)InclusiveRange + 7))) {
      break;
    }
    uint64_t v4 = *((unsigned int *)InclusiveRange + 4);
    if (v4) {
      InclusiveRange -= 4 * v4;
    }
    else {
      InclusiveRange = 0;
    }
  }
  return InclusiveRange;
}

id GTMTLReplayController_generateOutlineTexture(uint64_t a1, id *a2, void **a3)
{
  v39[3] = 0;
  uint64_t v6 = GTMTLReplayController_generateWireframeTexture();
  id v7 = 0;
  id v8 = v7;
  if (!v6)
  {
    if (v7)
    {
      NSErrorUserInfoKey v42 = NSUnderlyingErrorKey;
      id v43 = v7;
      id v9 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
    }
    else
    {
      id v9 = 0;
    }
    GTMTLReplay_fillError(a3, 101, v9);
    if (a3) {
      id v32 = *a3;
    }
    else {
      id v32 = 0;
    }
    GTMTLReplay_handleNSError(v32);
    id v12 = 0;
    goto LABEL_30;
  }
  id v9 = [*a2 copy];
  [v9 setUsage:18];
  if ((unint64_t)[v6 sampleCount] >= 2)
  {
    [v9 setSampleCount:1];
    if ([v6 textureType] == &dword_4)
    {
      uint64_t v10 = 2;
LABEL_9:
      [v9 setTextureType:v10];
      goto LABEL_10;
    }
    if ([v6 textureType] == &dword_8)
    {
      uint64_t v10 = 3;
      goto LABEL_9;
    }
  }
LABEL_10:
  uint64_t v11 = [v6 device];
  id v12 = [v11 newTextureWithDescriptor:v9];

  if (v12)
  {
    id v35 = v9;
    uint64_t v36 = v8;
    id v34 = [*(id *)(a1 + 8) defaultCommandQueue];
    id v13 = [v34 commandBuffer];
    id v14 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"GenerateOutlineTexture"];
    [v13 setLabel:v14];

    unint64_t v15 = [v13 computeCommandEncoder];
    id v16 = [v6 sampleCount];
    uint64_t v17 = 7;
    if ((unint64_t)v16 > 1) {
      uint64_t v17 = 8;
    }
    [v15 setComputePipelineState:a2[v17]];
    unint64_t v37 = (unint64_t)[a2[7] threadExecutionWidth];
    unint64_t v18 = (unint64_t)[a2[7] maxTotalThreadsPerThreadgroup];
    id v19 = [v6 width];
    id v20 = [v6 height];
    if ([v6 arrayLength])
    {
      unint64_t v21 = 0;
      unint64_t v22 = v18 / v37;
      unint64_t v23 = ((unint64_t)v19 + v37 - 1) / v37;
      unint64_t v24 = ((unint64_t)v20 + v22 - 1) / v22;
      do
      {
        id v25 = [v6 pixelFormat];
        if ((unint64_t)[v6 sampleCount] >= 2) {
          uint64_t v26 = 4;
        }
        else {
          uint64_t v26 = 2;
        }
        id v27 = objc_msgSend(v6, "newTextureViewWithPixelFormat:textureType:levels:slices:", v25, v26, 0, objc_msgSend(v6, "mipmapLevelCount"), v21, 1);
        id v28 = [v12 newTextureViewWithPixelFormat:[v12 pixelFormat] textureType:2 levels:0 slices:[v12 mipmapLevelCount] v21:1];
        [v15 setTexture:v27 atIndex:0];
        [v15 setTexture:v28 atIndex:1];
        v39[0] = v23;
        v39[1] = v24;
        v39[2] = 1;
        v38[0] = v37;
        v38[1] = v22;
        v38[2] = 1;
        [v15 dispatchThreadgroups:v39 threadsPerThreadgroup:v38];

        ++v21;
      }
      while (v21 < (unint64_t)[v6 arrayLength]);
    }
    [v15 endEncoding];
    GTMTLReplay_commitCommandBuffer(v13);
    id v29 = v12;

    id v9 = v35;
    id v8 = v36;
    uint64_t v30 = v34;
  }
  else
  {
    CFStringRef v40 = @"GTErrorKeyMTLTextureDescriptor";
    id v41 = v9;
    uint64_t v30 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
    GTMTLReplay_fillError(a3, 101, v30);
    if (a3) {
      unint64_t v31 = *a3;
    }
    else {
      unint64_t v31 = 0;
    }
    GTMTLReplay_handleNSError(v31);
  }

LABEL_30:

  return v12;
}

void sub_2758C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      io_connect_t v2 = (void *)*v1;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)(v1 + 3));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_2767F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10)
{
  operator delete(v10);

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

void sub_276964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_276C18(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_276D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::unique_ptr<std::vector<double>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  io_connect_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::unique_ptr<std::vector<double>>>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::__deallocate_node(*(void **)(a1 + 16));
  io_connect_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      io_connect_t v2 = (void *)*v1;
      id v3 = (id *)v1[3];
      v1[3] = 0;
      if (v3) {
        std::default_delete<ShaderBinaryStatsInfo>::operator()[abi:nn180100](v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::default_delete<ShaderBinaryStatsInfo>::operator()[abi:nn180100](id *a1)
{
  io_connect_t v2 = a1 + 2;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v2);

  operator delete();
}

void std::vector<std::pair<ShaderBinaryStatsInfo *,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  io_connect_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>>>::~__hash_table(uint64_t a1)
{
  io_connect_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void **)*v2;
      if (*((char *)v2 + 55) < 0) {
        operator delete(v2[4]);
      }
      operator delete(v2);
      io_connect_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      io_connect_t v2 = (void *)*v1;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,0>(uint64_t a1)
{
  std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>::reset[abi:nn180100]((uint64_t **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    io_connect_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  io_connect_t v2 = (void ***)**a1;
  if (v2)
  {
    uint64_t v4 = (void ***)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>::reset[abi:nn180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>::reset[abi:nn180100](void ***result, void **a2)
{
  io_connect_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    id v3 = (char *)*v2;
    if (*v2)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = *v2;
      if (v4 != v3)
      {
        uint64_t v6 = (char *)v2[1];
        do
        {
          id v8 = (void *)*((void *)v6 - 3);
          v6 -= 24;
          id v7 = v8;
          if (v8)
          {
            *((void *)v4 - 2) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        uint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    operator delete();
  }
  return result;
}

void std::vector<std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  io_connect_t v2 = (void ***)**a1;
  if (v2)
  {
    uint64_t v4 = (void ***)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::reset[abi:nn180100](--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::reset[abi:nn180100](void ***result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    io_connect_t v2 = v1;
    std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&v2);
    operator delete();
  }
  return result;
}

void std::vector<std::unique_ptr<std::vector<double>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  io_connect_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          std::default_delete<std::vector<double>>::operator()[abi:nn180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<std::vector<double>>::operator()[abi:nn180100](uint64_t a1)
{
  io_connect_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_27A814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v67 - 232) = &a58;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v67 - 232));
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::~__hash_table((uint64_t)&a49);
  std::__hash_table<std::__hash_value_type<std::string,BinaryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BinaryInfo>>>::~__hash_table((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>>>::~__hash_table((uint64_t)&a67);
  if (STACK[0x2D8]) {
    operator delete((void *)STACK[0x2D8]);
  }
  _Block_object_dispose(&STACK[0x2F0], 8);
  a67 = a21;
  std::vector<std::unordered_map<std::string,BinaryInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a67);
  _Block_object_dispose(&STACK[0x338], 8);
  STACK[0x2F0] = a22;
  std::vector<std::unordered_map<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x2F0]);
  _Block_object_dispose(&STACK[0x380], 8);
  STACK[0x338] = a26;
  std::vector<std::unordered_map<std::string,std::unordered_map<unsigned int,ClauseData>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x338]);
  _Block_object_dispose(&STACK[0x3C8], 8);
  STACK[0x380] = a23;
  std::vector<std::vector<InstructionPCInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x380]);
  _Block_object_dispose(&STACK[0x410], 8);
  STACK[0x3C8] = a24;
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x3C8]);
  if (a28) {
    operator delete(a28);
  }
  if (a39) {
    operator delete(a39);
  }

  _Block_object_dispose(&STACK[0x4E0], 8);
  long long v69 = (void *)STACK[0x510];
  if (STACK[0x510])
  {
    STACK[0x518] = (unint64_t)v69;
    operator delete(v69);
  }
  _Block_object_dispose(&STACK[0x528], 8);
  STACK[0x4E0] = a19;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x4E0]);
  _Block_object_dispose(&STACK[0x570], 8);
  id v70 = (void *)STACK[0x5A0];
  if (STACK[0x5A0])
  {
    STACK[0x5A8] = (unint64_t)v70;
    operator delete(v70);
  }
  _Block_object_dispose(&STACK[0x5B8], 8);
  long long v71 = (void *)STACK[0x5E8];
  if (STACK[0x5E8])
  {
    STACK[0x5F0] = (unint64_t)v71;
    operator delete(v71);
  }
  STACK[0x5B8] = (unint64_t)&STACK[0x600];
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x5B8]);
  _Block_object_dispose(&STACK[0x640], 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>>>::~__hash_table(a20);
  if (SLOBYTE(STACK[0x6B7]) < 0) {
    operator delete((void *)STACK[0x6A0]);
  }

  STACK[0x640] = (unint64_t)&STACK[0x6B8];
  std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x640]);

  _Unwind_Resume(a1);
}

uint64_t std::pair<ShaderBinaryInfo * {__strong},std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  return a1;
}

uint64_t __Block_byref_object_copy__626(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  id v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *id v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__627(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>>>::~__hash_table(a1 + 48);
}

void sub_27B2A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)va1);
  std::pair<ShaderBinaryInfo * {__strong},std::string>::~pair((uint64_t)va);

  _Unwind_Resume(a1);
}

void std::vector<std::vector<ShaderProfilerUSCSampleInfo>>::resize(uint64_t a1, unint64_t a2)
{
  id v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      size_t v28 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v28);
      *(void *)(a1 + 8) = (char *)v4 + v28;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v10);
    id v12 = &v11[24 * v5];
    id v14 = &v11[24 * v13];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v12, v15);
    id v16 = &v12[v15];
    unint64_t v18 = *(void **)a1;
    uint64_t v17 = *(void **)(a1 + 8);
    if (v17 == *(void **)a1)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v17) {
        return;
      }
    }
    else
    {
      do
      {
        *((void *)v12 - 3) = 0;
        *((void *)v12 - 2) = 0;
        v12 -= 24;
        *((void *)v12 + 2) = 0;
        long long v19 = *(_OWORD *)(v17 - 3);
        v17 -= 3;
        *(_OWORD *)id v12 = v19;
        *((void *)v12 + 2) = v17[2];
        *uint64_t v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
      }
      while (v17 != v18);
      id v20 = *(void **)a1;
      uint64_t v17 = *(void **)(a1 + 8);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v17 != v20)
      {
        unint64_t v21 = v17;
        do
        {
          unint64_t v23 = (void *)*(v21 - 3);
          v21 -= 3;
          unint64_t v22 = v23;
          if (v23)
          {
            *(v17 - 2) = v22;
            operator delete(v22);
          }
          uint64_t v17 = v21;
        }
        while (v21 != v20);
        uint64_t v17 = v20;
      }
      if (!v17) {
        return;
      }
    }
    operator delete(v17);
    return;
  }
  if (a2 < v5)
  {
    unint64_t v24 = &v3[3 * a2];
    if (v4 != v24)
    {
      id v25 = *(void **)(a1 + 8);
      do
      {
        id v27 = (void *)*(v25 - 3);
        v25 -= 3;
        uint64_t v26 = v27;
        if (v27)
        {
          *(v4 - 2) = v26;
          operator delete(v26);
        }
        uint64_t v4 = v25;
      }
      while (v25 != v24);
    }
    *(void *)(a1 + 8) = v24;
  }
}

__n128 __Block_byref_object_copy__629(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__630(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__583(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__584(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__587(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__588(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::vector<ShaderProfilerUSCSampleInfo>::reserve(void **a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      abort();
    }
    uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 40;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(a2);
    unint64_t v5 = &v4[40 * v3];
    uint64_t v7 = &v4[40 * v6];
    uint64_t v9 = (char *)*a1;
    unint64_t v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *(_OWORD *)(v8 - 40);
        long long v12 = *(_OWORD *)(v8 - 24);
        *((void *)v10 - 1) = *((void *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v12;
        *(_OWORD *)(v10 - 40) = v11;
        v10 -= 40;
        v8 -= 40;
      }
      while (v8 != v9);
      unint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_27BCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(40 * a1);
}

double std::__introsort<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *,false>(unint64_t a1, double *a2, uint64_t a3, char a4, double result)
{
  while (2)
  {
    uint64_t v11 = (uint64_t)(a2 - 5);
    uint64_t v12 = (uint64_t)(a2 - 10);
    uint64_t v13 = (uint64_t)(a2 - 15);
    v193 = a2 - 4;
    unint64_t v195 = (unint64_t)a2;
    unint64_t i = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = i;
          uint64_t v15 = (uint64_t)a2 - i;
          uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (USCSampleComparator::operator()(v11, a1))
                {
                  uint64_t v209 = *(void *)(a1 + 32);
                  long long v199 = *(_OWORD *)a1;
                  long long v204 = *(_OWORD *)(a1 + 16);
                  long long v94 = *(_OWORD *)v11;
                  long long v95 = *(_OWORD *)(v11 + 16);
                  *(void *)(a1 + 32) = *(void *)(v11 + 32);
                  *(_OWORD *)a1 = v94;
                  *(_OWORD *)(a1 + 16) = v95;
                  __n128 result = *(double *)&v199;
                  *(void *)(v11 + 32) = v209;
                  *(_OWORD *)uint64_t v11 = v199;
                  *(_OWORD *)(v11 + 16) = v204;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, v11);
                break;
              case 4:
                *(void *)&__n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80, v11).n128_u64[0];
                break;
              case 5:
                *(void *)&__n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80, a1 + 120, v11).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v15 <= 959)
          {
            uint64_t v96 = a1 + 40;
            BOOL v98 = (double *)a1 == a2 || v96 == (void)a2;
            if (a4)
            {
              if (!v98)
              {
                uint64_t v99 = 0;
                uint64_t v100 = a1;
                do
                {
                  uint64_t v101 = v96;
                  if (USCSampleComparator::operator()(v96, v100))
                  {
                    uint64_t v102 = *(void *)(v100 + 40);
                    unsigned int v103 = *(_DWORD *)(v100 + 48);
                    unsigned int v104 = *(_DWORD *)(v100 + 52);
                    uint64_t v106 = *(void *)(v100 + 56);
                    unint64_t v105 = *(void *)(v100 + 64);
                    __n128 result = *(double *)(v100 + 72);
                    long long v107 = *(_OWORD *)(v100 + 16);
                    *(_OWORD *)uint64_t v101 = *(_OWORD *)v100;
                    *(_OWORD *)(v101 + 16) = v107;
                    unint64_t v108 = a1;
                    *(void *)(v101 + 32) = *(void *)(v100 + 32);
                    if (v100 != a1)
                    {
                      uint64_t v109 = v99;
                      do
                      {
                        uint64_t v110 = a1 + v109;
                        unsigned int v111 = (_DWORD *)(a1 + v109 - 40);
                        unsigned int v112 = *(_DWORD *)(a1 + v109 - 28);
                        BOOL v113 = v104 >= v112;
                        if (v104 == v112
                          && (unsigned int v114 = *(_DWORD *)(v110 - 8), v113 = LODWORD(result) >= v114, LODWORD(result) == v114)
                          && (BOOL v113 = v102 >= *v111, v102 == *v111)
                          && (unsigned int v115 = *(_DWORD *)(a1 + v109 - 32), v113 = v103 >= v115, v103 == v115))
                        {
                          if (v105 >= *(void *)(a1 + v109 - 16))
                          {
                            unint64_t v108 = a1 + v109;
                            goto LABEL_161;
                          }
                        }
                        else if (v113)
                        {
                          unint64_t v108 = v100;
                          goto LABEL_161;
                        }
                        v100 -= 40;
                        long long v116 = *(_OWORD *)(a1 + v109 - 24);
                        *(_OWORD *)uint64_t v110 = *(_OWORD *)v111;
                        *(_OWORD *)(v110 + 16) = v116;
                        *(void *)(v110 + 32) = *(void *)(a1 + v109 - 8);
                        v109 -= 40;
                      }
                      while (v109);
                      unint64_t v108 = a1;
                    }
LABEL_161:
                    *(void *)unint64_t v108 = v102;
                    *(_DWORD *)(v108 + 8) = v103;
                    *(_DWORD *)(v108 + 12) = v104;
                    *(void *)(v108 + 16) = v106;
                    *(void *)(v108 + 24) = v105;
                    *(double *)(v108 + 32) = result;
                  }
                  uint64_t v96 = v101 + 40;
                  v99 += 40;
                  uint64_t v100 = v101;
                }
                while ((double *)(v101 + 40) != a2);
              }
            }
            else if (!v98)
            {
              do
              {
                v172 = (double *)v96;
                if (USCSampleComparator::operator()(v96, a1))
                {
                  __n128 result = *v172;
                  unsigned int v173 = *(_DWORD *)(a1 + 48);
                  unsigned int v174 = *(_DWORD *)(a1 + 52);
                  uint64_t v175 = *(void *)(a1 + 56);
                  unint64_t v176 = *(void *)(a1 + 64);
                  uint64_t v177 = *(void *)(a1 + 72);
                  unsigned int v178 = *(void *)v172;
                  do
                  {
                    unint64_t v179 = a1;
                    long long v180 = *(_OWORD *)(a1 + 16);
                    *(_OWORD *)(a1 + 40) = *(_OWORD *)a1;
                    *(_OWORD *)(a1 + 56) = v180;
                    *(void *)(a1 + 72) = *(void *)(a1 + 32);
                    a1 -= 40;
                    unsigned int v181 = *(_DWORD *)(v179 - 28);
                    BOOL v182 = v174 >= v181;
                    if (v174 == v181)
                    {
                      unsigned int v183 = *(_DWORD *)(v179 - 8);
                      BOOL v182 = v177 >= v183;
                      if (v177 == v183)
                      {
                        unsigned int v184 = *(_DWORD *)(v179 - 40);
                        BOOL v182 = v178 >= v184;
                        if (v178 == v184)
                        {
                          unsigned int v185 = *(_DWORD *)(v179 - 32);
                          BOOL v182 = v173 >= v185;
                          if (v173 == v185) {
                            BOOL v182 = v176 >= *(void *)(v179 - 16);
                          }
                        }
                      }
                    }
                  }
                  while (!v182);
                  *(double *)unint64_t v179 = result;
                  *(_DWORD *)(v179 + 8) = v173;
                  *(_DWORD *)(v179 + 12) = v174;
                  *(void *)(v179 + 16) = v175;
                  *(void *)(v179 + 24) = v176;
                  *(void *)(v179 + 32) = v177;
                }
                uint64_t v96 = (uint64_t)(v172 + 5);
                a1 = (unint64_t)v172;
              }
              while (v172 + 5 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((double *)a1 != a2)
            {
              int64_t v117 = (unint64_t)(v16 - 2) >> 1;
              int64_t v194 = v117;
              do
              {
                int64_t v118 = v117;
                if (v194 >= v117)
                {
                  uint64_t v119 = (2 * v117) | 1;
                  uint64_t v120 = a1 + 40 * v119;
                  if (2 * v117 + 2 < v16 && USCSampleComparator::operator()(a1 + 40 * v119, v120 + 40))
                  {
                    v120 += 40;
                    uint64_t v119 = 2 * v118 + 2;
                  }
                  uint64_t v121 = a1 + 40 * v118;
                  a2 = (double *)v195;
                  if (!USCSampleComparator::operator()(v120, v121))
                  {
                    uint64_t v122 = *(void *)v121;
                    unsigned int v123 = *(_DWORD *)(v121 + 12);
                    unsigned int v189 = *(_DWORD *)(v121 + 8);
                    uint64_t v186 = *(void *)(v121 + 16);
                    unint64_t v187 = *(void *)(v121 + 24);
                    uint64_t v124 = *(void *)(v121 + 32);
                    uint64_t v125 = *(void *)(v120 + 32);
                    long long v126 = *(_OWORD *)(v120 + 16);
                    *(_OWORD *)uint64_t v121 = *(_OWORD *)v120;
                    *(_OWORD *)(v121 + 16) = v126;
                    *(void *)(v121 + 32) = v125;
                    if (v194 >= v119)
                    {
                      unsigned int v190 = v124;
                      unsigned int v188 = v122;
                      uint64_t v191 = v122;
                      uint64_t v192 = v124;
                      while (1)
                      {
                        uint64_t v127 = v120;
                        uint64_t v128 = 2 * v119;
                        uint64_t v119 = (2 * v119) | 1;
                        uint64_t v120 = a1 + 40 * v119;
                        uint64_t v129 = v128 + 2;
                        if (v128 + 2 < v16)
                        {
                          BOOL v130 = USCSampleComparator::operator()(a1 + 40 * v119, v120 + 40);
                          uint64_t v122 = v191;
                          uint64_t v124 = v192;
                          if (v130)
                          {
                            v120 += 40;
                            uint64_t v119 = v129;
                          }
                        }
                        unsigned int v131 = *(_DWORD *)(v120 + 12);
                        BOOL v132 = v131 >= v123;
                        if (v131 == v123)
                        {
                          unsigned int v133 = *(_DWORD *)(v120 + 32);
                          BOOL v132 = v133 >= v190;
                          if (v133 == v190)
                          {
                            BOOL v132 = *(_DWORD *)v120 >= v188;
                            if (*(_DWORD *)v120 == v188)
                            {
                              unsigned int v134 = *(_DWORD *)(v120 + 8);
                              BOOL v132 = v134 >= v189;
                              if (v134 == v189) {
                                BOOL v132 = *(void *)(v120 + 24) >= v187;
                              }
                            }
                          }
                        }
                        if (!v132) {
                          break;
                        }
                        long long v135 = *(_OWORD *)v120;
                        long long v136 = *(_OWORD *)(v120 + 16);
                        *(void *)(v127 + 32) = *(void *)(v120 + 32);
                        *(_OWORD *)uint64_t v127 = v135;
                        *(_OWORD *)(v127 + 16) = v136;
                        if (v194 < v119) {
                          goto LABEL_184;
                        }
                      }
                      uint64_t v120 = v127;
                    }
LABEL_184:
                    *(void *)uint64_t v120 = v122;
                    *(_DWORD *)(v120 + 8) = v189;
                    *(_DWORD *)(v120 + 12) = v123;
                    *(void *)(v120 + 16) = v186;
                    *(void *)(v120 + 24) = v187;
                    *(void *)(v120 + 32) = v124;
                    a2 = (double *)v195;
                  }
                }
                int64_t v117 = v118 - 1;
              }
              while (v118);
              int64_t v137 = v15 / 0x28uLL;
              do
              {
                unint64_t v138 = a2;
                uint64_t v139 = 0;
                uint64_t v210 = *(void *)(a1 + 32);
                long long v200 = *(_OWORD *)a1;
                long long v205 = *(_OWORD *)(a1 + 16);
                uint64_t v140 = v137 - 2;
                if (v137 < 2) {
                  uint64_t v140 = v137 - 1;
                }
                uint64_t v141 = v140 >> 1;
                unint64_t v142 = a1;
                do
                {
                  uint64_t v143 = v142 + 40 * v139 + 40;
                  uint64_t v144 = (2 * v139) | 1;
                  uint64_t v145 = 2 * v139 + 2;
                  if (v145 < v137 && USCSampleComparator::operator()(v142 + 40 * v139 + 40, v142 + 40 * v139 + 80))
                  {
                    v143 += 40;
                    uint64_t v144 = v145;
                  }
                  long long v146 = *(_OWORD *)v143;
                  long long v147 = *(_OWORD *)(v143 + 16);
                  *(void *)(v142 + 32) = *(void *)(v143 + 32);
                  *(_OWORD *)unint64_t v142 = v146;
                  *(_OWORD *)(v142 + 16) = v147;
                  unint64_t v142 = v143;
                  uint64_t v139 = v144;
                }
                while (v144 <= v141);
                unsigned int v148 = v138 - 5;
                if ((double *)v143 == v148)
                {
                  uint64_t v151 = v148;
                  __n128 result = *(double *)&v200;
                  *(void *)(v143 + 32) = v210;
                  *(_OWORD *)uint64_t v143 = v200;
                  *(_OWORD *)(v143 + 16) = v205;
                }
                else
                {
                  long long v149 = *(_OWORD *)v148;
                  long long v150 = *((_OWORD *)v148 + 1);
                  *(double *)(v143 + 32) = v148[4];
                  *(_OWORD *)uint64_t v143 = v149;
                  *(_OWORD *)(v143 + 16) = v150;
                  __n128 result = *(double *)&v200;
                  *((void *)v148 + 4) = v210;
                  *(_OWORD *)unsigned int v148 = v200;
                  *((_OWORD *)v148 + 1) = v205;
                  uint64_t v151 = v148;
                  uint64_t v152 = v143 - a1 + 40;
                  if (v152 >= 41)
                  {
                    unint64_t v153 = -2 - 0x3333333333333333 * (v152 >> 3);
                    unint64_t v154 = v153 >> 1;
                    uint64_t v155 = a1 + 40 * (v153 >> 1);
                    if (USCSampleComparator::operator()(v155, v143))
                    {
                      uint64_t v156 = *(void *)v143;
                      unsigned int v157 = *(_DWORD *)(v143 + 8);
                      unsigned int v158 = *(_DWORD *)(v143 + 12);
                      uint64_t v160 = *(void *)(v143 + 16);
                      unint64_t v159 = *(void *)(v143 + 24);
                      __n128 result = *(double *)(v143 + 32);
                      uint64_t v161 = *(void *)(v155 + 32);
                      long long v162 = *(_OWORD *)(v155 + 16);
                      *(_OWORD *)uint64_t v143 = *(_OWORD *)v155;
                      *(_OWORD *)(v143 + 16) = v162;
                      *(void *)(v143 + 32) = v161;
                      if (v153 >= 2)
                      {
                        while (1)
                        {
                          uint64_t v163 = v155;
                          unint64_t v164 = v154 - 1;
                          unint64_t v154 = (v154 - 1) >> 1;
                          uint64_t v155 = a1 + 40 * v154;
                          unsigned int v165 = *(_DWORD *)(v155 + 12);
                          BOOL v166 = v165 >= v158;
                          if (v165 == v158)
                          {
                            unsigned int v167 = *(_DWORD *)(a1 + 40 * v154 + 32);
                            BOOL v166 = v167 >= LODWORD(result);
                            if (v167 == LODWORD(result))
                            {
                              BOOL v166 = *(_DWORD *)v155 >= v156;
                              if (*(_DWORD *)v155 == v156)
                              {
                                unsigned int v168 = *(_DWORD *)(a1 + 40 * v154 + 8);
                                BOOL v166 = v168 >= v157;
                                if (v168 == v157) {
                                  BOOL v166 = *(void *)(a1 + 40 * v154 + 24) >= v159;
                                }
                              }
                            }
                          }
                          if (v166) {
                            break;
                          }
                          long long v169 = *(_OWORD *)v155;
                          long long v170 = *(_OWORD *)(v155 + 16);
                          *(void *)(v163 + 32) = *(void *)(v155 + 32);
                          *(_OWORD *)uint64_t v163 = v169;
                          *(_OWORD *)(v163 + 16) = v170;
                          if (v164 <= 1) {
                            goto LABEL_208;
                          }
                        }
                        uint64_t v155 = v163;
                      }
LABEL_208:
                      *(void *)uint64_t v155 = v156;
                      *(_DWORD *)(v155 + 8) = v157;
                      *(_DWORD *)(v155 + 12) = v158;
                      *(void *)(v155 + 16) = v160;
                      *(void *)(v155 + 24) = v159;
                      *(double *)(v155 + 32) = result;
                    }
                  }
                }
                BOOL v171 = v137-- <= 2;
                a2 = v151;
              }
              while (!v171);
            }
            return result;
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          uint64_t v18 = a1 + 40 * ((unint64_t)v16 >> 1);
          if ((unint64_t)v15 < 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(v18, a1, v11);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, v18, v11);
            uint64_t v19 = 5 * v17;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1 + 40, a1 + 8 * v19 - 40, v12);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1 + 80, a1 + 40 + 8 * v19, v13);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1 + 8 * v19 - 40, v18, a1 + 40 + 8 * v19);
            uint64_t v206 = *(void *)(a1 + 32);
            long long v196 = *(_OWORD *)a1;
            long long v201 = *(_OWORD *)(a1 + 16);
            long long v20 = *(_OWORD *)v18;
            long long v21 = *(_OWORD *)(v18 + 16);
            *(void *)(a1 + 32) = *(void *)(v18 + 32);
            *(_OWORD *)a1 = v20;
            *(_OWORD *)(a1 + 16) = v21;
            *(void *)(v18 + 32) = v206;
            *(_OWORD *)uint64_t v18 = v196;
            *(_OWORD *)(v18 + 16) = v201;
          }
          --a3;
          a2 = (double *)v195;
          if ((a4 & 1) != 0 || USCSampleComparator::operator()(a1 - 40, a1)) {
            break;
          }
          __n128 result = *(double *)a1;
          unsigned int v59 = *(_DWORD *)(a1 + 8);
          unsigned int v60 = *(_DWORD *)(a1 + 12);
          uint64_t v62 = *(void *)(a1 + 16);
          unint64_t v61 = *(void *)(a1 + 24);
          uint64_t v63 = *(void *)(a1 + 32);
          unsigned int v64 = *(_DWORD *)(v195 - 28);
          if (v60 == v64)
          {
            unsigned int v65 = *(_DWORD *)(v195 - 8);
            unsigned int v66 = *(void *)(a1 + 32);
            BOOL v67 = v63 >= v65;
            if (v63 == v65)
            {
              BOOL v67 = LODWORD(result) >= *(_DWORD *)v11;
              if (LODWORD(result) == *(_DWORD *)v11)
              {
                unsigned int v68 = *(_DWORD *)(v195 - 32);
                BOOL v67 = v59 >= v68;
                if (v59 == v68) {
                  BOOL v67 = v61 >= *(void *)(v195 - 16);
                }
              }
            }
            if (!v67) {
              goto LABEL_77;
            }
          }
          else if (v60 < v64)
          {
            unsigned int v66 = *(void *)(a1 + 32);
LABEL_77:
            for (unint64_t i = a1 + 40; ; i += 40)
            {
              unsigned int v69 = *(_DWORD *)(i + 12);
              BOOL v70 = v60 >= v69;
              if (v60 == v69)
              {
                unsigned int v71 = *(_DWORD *)(i + 32);
                BOOL v70 = v66 >= v71;
                if (v66 == v71)
                {
                  BOOL v70 = LODWORD(result) >= *(_DWORD *)i;
                  if (LODWORD(result) == *(_DWORD *)i)
                  {
                    unsigned int v72 = *(_DWORD *)(i + 8);
                    BOOL v70 = v59 >= v72;
                    if (v59 == v72) {
                      BOOL v70 = v61 >= *(void *)(i + 24);
                    }
                  }
                }
              }
              if (!v70) {
                break;
              }
            }
            goto LABEL_95;
          }
          for (unint64_t i = a1 + 40; i < v195; i += 40)
          {
            unsigned int v73 = *(_DWORD *)(i + 12);
            BOOL v74 = v60 >= v73;
            if (v60 == v73)
            {
              unsigned int v75 = *(_DWORD *)(i + 32);
              BOOL v74 = v63 >= v75;
              if (v63 == v75)
              {
                BOOL v74 = LODWORD(result) >= *(_DWORD *)i;
                if (LODWORD(result) == *(_DWORD *)i)
                {
                  unsigned int v76 = *(_DWORD *)(i + 8);
                  BOOL v74 = v59 >= v76;
                  if (v59 == v76) {
                    BOOL v74 = v61 >= *(void *)(i + 24);
                  }
                }
              }
            }
            if (!v74) {
              break;
            }
          }
LABEL_95:
          unint64_t v77 = v195;
          if (i < v195)
          {
            for (uint64_t j = v193; ; j -= 5)
            {
              BOOL v79 = v60 >= v64;
              if (v60 == v64)
              {
                unsigned int v80 = *((_DWORD *)j + 6);
                BOOL v79 = v63 >= v80;
                if (v63 == v80)
                {
                  unsigned int v81 = *((_DWORD *)j - 2);
                  BOOL v79 = LODWORD(result) >= v81;
                  if (LODWORD(result) == v81)
                  {
                    BOOL v79 = v59 >= *(_DWORD *)j;
                    if (v59 == *(_DWORD *)j) {
                      BOOL v79 = v61 >= *((void *)j + 2);
                    }
                  }
                }
              }
              if (v79) {
                break;
              }
              unsigned int v64 = *((_DWORD *)j - 9);
            }
            unint64_t v77 = (unint64_t)(j - 1);
          }
          while (i < v77)
          {
            uint64_t v208 = *(void *)(i + 32);
            long long v198 = *(_OWORD *)i;
            long long v203 = *(_OWORD *)(i + 16);
            long long v82 = *(_OWORD *)v77;
            long long v83 = *(_OWORD *)(v77 + 16);
            *(void *)(i + 32) = *(void *)(v77 + 32);
            *(_OWORD *)unint64_t i = v82;
            *(_OWORD *)(i + 16) = v83;
            *(void *)(v77 + 32) = v208;
            *(_OWORD *)unint64_t v77 = v198;
            *(_OWORD *)(v77 + 16) = v203;
            do
            {
              i += 40;
              unsigned int v84 = *(_DWORD *)(i + 12);
              BOOL v85 = v60 >= v84;
              if (v60 == v84)
              {
                unsigned int v86 = *(_DWORD *)(i + 32);
                BOOL v85 = v63 >= v86;
                if (v63 == v86)
                {
                  BOOL v85 = LODWORD(result) >= *(_DWORD *)i;
                  if (LODWORD(result) == *(_DWORD *)i)
                  {
                    unsigned int v87 = *(_DWORD *)(i + 8);
                    BOOL v85 = v59 >= v87;
                    if (v59 == v87) {
                      BOOL v85 = v61 >= *(void *)(i + 24);
                    }
                  }
                }
              }
            }
            while (v85);
            do
            {
              v77 -= 40;
              unsigned int v88 = *(_DWORD *)(v77 + 12);
              BOOL v89 = v60 >= v88;
              if (v60 == v88)
              {
                unsigned int v90 = *(_DWORD *)(v77 + 32);
                BOOL v89 = v63 >= v90;
                if (v63 == v90)
                {
                  BOOL v89 = LODWORD(result) >= *(_DWORD *)v77;
                  if (LODWORD(result) == *(_DWORD *)v77)
                  {
                    unsigned int v91 = *(_DWORD *)(v77 + 8);
                    BOOL v89 = v59 >= v91;
                    if (v59 == v91) {
                      BOOL v89 = v61 >= *(void *)(v77 + 24);
                    }
                  }
                }
              }
            }
            while (!v89);
          }
          BOOL v5 = i - 40 >= a1;
          BOOL v6 = i - 40 == a1;
          if (i - 40 != a1)
          {
            long long v92 = *(_OWORD *)(i - 40);
            long long v93 = *(_OWORD *)(i - 24);
            *(void *)(a1 + 32) = *(void *)(i - 8);
            *(_OWORD *)a1 = v92;
            *(_OWORD *)(a1 + 16) = v93;
          }
          a4 = 0;
          *(double *)(i - 40) = result;
          *(_DWORD *)(i - 32) = v59;
          *(_DWORD *)(i - 28) = v60;
          *(void *)(i - 24) = v62;
          *(void *)(i - 16) = v61;
          *(void *)(i - 8) = v63;
        }
        uint64_t v22 = *(void *)a1;
        unsigned int v23 = *(_DWORD *)(a1 + 8);
        unsigned int v24 = *(_DWORD *)(a1 + 12);
        uint64_t v25 = *(void *)(a1 + 16);
        unint64_t v26 = *(void *)(a1 + 24);
        uint64_t v27 = *(void *)(a1 + 32);
        unsigned int v28 = *(void *)a1;
        for (unint64_t k = a1 + 40; ; k += 40)
        {
          unsigned int v30 = *(_DWORD *)(k + 12);
          BOOL v31 = v30 >= v24;
          if (v30 == v24)
          {
            unsigned int v32 = *(_DWORD *)(k + 32);
            BOOL v31 = v32 >= v27;
            if (v32 == v27)
            {
              BOOL v31 = *(_DWORD *)k >= v28;
              if (*(_DWORD *)k == v28)
              {
                unsigned int v33 = *(_DWORD *)(k + 8);
                BOOL v31 = v33 >= v23;
                if (v33 == v23) {
                  BOOL v31 = *(void *)(k + 24) >= v26;
                }
              }
            }
          }
          if (v31) {
            break;
          }
        }
        unint64_t m = v11;
        if (k - 40 == a1)
        {
          unint64_t m = v195;
          if (k < v195)
          {
            for (unint64_t m = v11; ; m -= 40)
            {
              unsigned int v39 = *(_DWORD *)(m + 12);
              BOOL v40 = v39 >= v24;
              if (v39 == v24
                && (v41 = *(_DWORD *)(m + 32), BOOL v40 = v41 >= v27, v41 == v27)
                && (BOOL v40 = *(_DWORD *)m >= v28, *(_DWORD *)m == v28))
              {
                unsigned int v42 = *(_DWORD *)(m + 8);
                BOOL v43 = v42 >= v23;
                if (v42 == v23) {
                  BOOL v43 = *(void *)(m + 24) >= v26;
                }
                if (!v43 || k >= m) {
                  break;
                }
              }
              else if (!v40 || k >= m)
              {
                break;
              }
            }
          }
        }
        else
        {
          while (1)
          {
            unsigned int v35 = *(_DWORD *)(m + 12);
            BOOL v36 = v35 >= v24;
            if (v35 == v24)
            {
              unsigned int v37 = *(_DWORD *)(m + 32);
              BOOL v36 = v37 >= v27;
              if (v37 == v27)
              {
                BOOL v36 = *(_DWORD *)m >= v28;
                if (*(_DWORD *)m == v28)
                {
                  unsigned int v38 = *(_DWORD *)(m + 8);
                  BOOL v36 = v38 >= v23;
                  if (v38 == v23) {
                    BOOL v36 = *(void *)(m + 24) >= v26;
                  }
                }
              }
            }
            if (!v36) {
              break;
            }
            m -= 40;
          }
        }
        unint64_t i = k;
        if (k < m)
        {
          unint64_t i = k;
          unint64_t v45 = m;
          do
          {
            uint64_t v207 = *(void *)(i + 32);
            long long v197 = *(_OWORD *)i;
            long long v202 = *(_OWORD *)(i + 16);
            long long v46 = *(_OWORD *)v45;
            long long v47 = *(_OWORD *)(v45 + 16);
            *(void *)(i + 32) = *(void *)(v45 + 32);
            *(_OWORD *)unint64_t i = v46;
            *(_OWORD *)(i + 16) = v47;
            *(void *)(v45 + 32) = v207;
            *(_OWORD *)unint64_t v45 = v197;
            *(_OWORD *)(v45 + 16) = v202;
            do
            {
              i += 40;
              unsigned int v48 = *(_DWORD *)(i + 12);
              BOOL v49 = v48 >= v24;
              if (v48 == v24)
              {
                unsigned int v50 = *(_DWORD *)(i + 32);
                BOOL v49 = v50 >= v27;
                if (v50 == v27)
                {
                  BOOL v49 = *(_DWORD *)i >= v28;
                  if (*(_DWORD *)i == v28)
                  {
                    unsigned int v51 = *(_DWORD *)(i + 8);
                    BOOL v49 = v51 >= v23;
                    if (v51 == v23) {
                      BOOL v49 = *(void *)(i + 24) >= v26;
                    }
                  }
                }
              }
            }
            while (!v49);
            do
            {
              v45 -= 40;
              unsigned int v52 = *(_DWORD *)(v45 + 12);
              BOOL v53 = v52 >= v24;
              if (v52 == v24)
              {
                unsigned int v54 = *(_DWORD *)(v45 + 32);
                BOOL v53 = v54 >= v27;
                if (v54 == v27)
                {
                  BOOL v53 = *(_DWORD *)v45 >= v28;
                  if (*(_DWORD *)v45 == v28)
                  {
                    unsigned int v55 = *(_DWORD *)(v45 + 8);
                    BOOL v53 = v55 >= v23;
                    if (v55 == v23) {
                      BOOL v53 = *(void *)(v45 + 24) >= v26;
                    }
                  }
                }
              }
            }
            while (v53);
          }
          while (i < v45);
        }
        if (i - 40 != a1)
        {
          long long v56 = *(_OWORD *)(i - 40);
          long long v57 = *(_OWORD *)(i - 24);
          *(void *)(a1 + 32) = *(void *)(i - 8);
          *(_OWORD *)a1 = v56;
          *(_OWORD *)(a1 + 16) = v57;
        }
        *(void *)(i - 40) = v22;
        *(_DWORD *)(i - 32) = v23;
        *(_DWORD *)(i - 28) = v24;
        *(void *)(i - 24) = v25;
        *(void *)(i - 16) = v26;
        *(void *)(i - 8) = v27;
        if (k >= m) {
          break;
        }
LABEL_66:
        std::__introsort<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *,false>(a1, i - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v58 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, i - 40);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(i, v195))
      {
        break;
      }
      if (!v58) {
        goto LABEL_66;
      }
    }
    a2 = (double *)(i - 40);
    if (!v58) {
      continue;
    }
    return result;
  }
}

__n128 __Block_byref_object_copy__637(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__638(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__640(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__641(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::vector<InstructionPCInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__643(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__644(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<std::string,std::unordered_map<unsigned int,ClauseData>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__646(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__647(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__649(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__650(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<std::string,BinaryInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void sub_27E518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void *std::pair<ShaderBinaryInfo * {__strong},std::string>::pair[abi:nn180100](void *a1, uint64_t a2)
{
  *a1 = *(id *)a2;
  uint64_t v4 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    a1[3] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_27E660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__init_with_size[abi:nn180100]<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>*,std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    __n128 result = std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__vallocate[abi:nn180100](result, a4);
    if (a2 == a3)
    {
      uint64_t v7 = (void *)v6[1];
    }
    else
    {
      uint64_t v7 = (void *)v6[1];
      do
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        uint64_t v8 = *a2;
        uint64_t v9 = a2[1];
        uint64_t v10 = v9 - *a2;
        if (v9 != *a2)
        {
          if (v10 < 0) {
            abort();
          }
          __n128 result = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v10 >> 5);
          *uint64_t v7 = result;
          v7[1] = result;
          v7[2] = &result[4 * v11];
          do
          {
            uint64_t v12 = std::pair<ShaderBinaryInfo * {__strong},std::string>::pair[abi:nn180100](result, v8);
            v8 += 32;
            __n128 result = v12 + 4;
          }
          while (v8 != v9);
          v7[1] = result;
        }
        a2 += 3;
        v7 += 3;
      }
      while (a2 != a3);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_27E740(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<ShaderProfilerUSCSampleInfo>>::__init_with_size[abi:nn180100]<std::vector<ShaderProfilerUSCSampleInfo>*,std::vector<ShaderProfilerUSCSampleInfo>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    long long v5 = result;
    __n128 result = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(a4);
    BOOL v6 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * v7];
    if (a2 != a3)
    {
      unint64_t v17 = v5;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = a2 + v8;
        uint64_t v10 = &v6[v8 / 8];
        *uint64_t v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        uint64_t v12 = *(unsigned char **)(a2 + v8);
        uint64_t v11 = *(unsigned char **)(a2 + v8 + 8);
        int64_t v13 = v11 - v12;
        if (v11 != v12)
        {
          if (0xCCCCCCCCCCCCCCCDLL * (v13 >> 3) >= 0x666666666666667) {
            abort();
          }
          id v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(0xCCCCCCCCCCCCCCCDLL * (v13 >> 3));
          uint64_t v15 = &v6[v8 / 8];
          *uint64_t v15 = v14;
          v10[1] = v14;
          v15[2] = &v14[40 * v16];
          __n128 result = memmove(v14, v12, v13);
          v10[1] = &v14[8 * (v13 >> 3)];
        }
        v8 += 24;
      }
      while (v9 + 24 != a3);
      BOOL v6 = (void *)((char *)v6 + v8);
      long long v5 = v17;
    }
    v5[1] = v6;
  }
  return result;
}

void sub_27E890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(a9 + 8) = v9;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      BOOL v6 = (void **)v1[1];
      do
      {
        unint64_t v8 = *(v6 - 3);
        v6 -= 3;
        uint64_t v7 = v8;
        if (v8)
        {
          uint64_t v9 = (uint64_t)*(v4 - 2);
          uint64_t v10 = v7;
          if ((void *)v9 != v7)
          {
            do
            {
              v9 -= 32;
              std::allocator<std::pair<ShaderBinaryInfo * {__strong},std::string>>::destroy[abi:nn180100](v9);
            }
            while ((void *)v9 != v7);
            uint64_t v10 = *v6;
          }
          *(v4 - 2) = v7;
          operator delete(v10);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (uint64_t *)a2;
  }
  else {
    uint64_t v10 = *(uint64_t **)a2;
  }
  if (v9 >= 0) {
    unint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v11 = *(void *)(a2 + 8);
  }
  unint64_t v12 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v10, v11);
  unint64_t v13 = v12;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    unint64_t v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v4 = v12;
      if (v12 >= v14) {
        unint64_t v4 = v12 % v14;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v12;
    }
    unint64_t v17 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v17)
    {
      for (unint64_t i = *v17; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v19 = *((void *)i + 1);
        if (v19 == v13)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14) {
              v19 %= v14;
            }
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v20 = (void *)(a1 + 16);
  long long v21 = operator new(0x30uLL);
  v45[0] = v21;
  v45[1] = a1 + 16;
  char v46 = 0;
  *long long v21 = 0;
  v21[1] = v13;
  uint64_t v22 = (std::string *)(v21 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v21[4] = *(void *)(a3 + 16);
  }
  uint64_t v23 = *a4;
  *a4 = 0;
  v21[5] = v23;
  char v46 = 1;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (!v14 || (float)(v25 * (float)v14) < v24)
  {
    BOOL v26 = 1;
    if (v14 >= 3) {
      BOOL v26 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v14);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      int8x8_t prime = (int8x8_t)v28;
    }
    else {
      int8x8_t prime = (int8x8_t)v27;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v14 = *(void *)(a1 + 8);
    if (*(void *)&prime > v14) {
      goto LABEL_39;
    }
    if (*(void *)&prime < v14)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (*(void *)&prime <= v36) {
        int8x8_t prime = (int8x8_t)v36;
      }
      if (*(void *)&prime >= v14)
      {
        unint64_t v14 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unsigned int v30 = operator new(8 * *(void *)&prime);
          BOOL v31 = *(void **)a1;
          *(void *)a1 = v30;
          if (v31) {
            operator delete(v31);
          }
          uint64_t v32 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v32++) = 0;
          while (*(void *)&prime != v32);
          unsigned int v33 = (void *)*v20;
          if (*v20)
          {
            unint64_t v34 = v33[1];
            uint8x8_t v35 = (uint8x8_t)vcnt_s8(prime);
            v35.i16[0] = vaddlv_u8(v35);
            if (v35.u32[0] > 1uLL)
            {
              if (v34 >= *(void *)&prime) {
                v34 %= *(void *)&prime;
              }
            }
            else
            {
              v34 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v34) = v20;
            unsigned int v39 = (void *)*v33;
            if (*v33)
            {
              do
              {
                unint64_t v40 = v39[1];
                if (v35.u32[0] > 1uLL)
                {
                  if (v40 >= *(void *)&prime) {
                    v40 %= *(void *)&prime;
                  }
                }
                else
                {
                  v40 &= *(void *)&prime - 1;
                }
                if (v40 != v34)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v40))
                  {
                    *(void *)(*(void *)a1 + 8 * v40) = v33;
                    goto LABEL_64;
                  }
                  *unsigned int v33 = *v39;
                  *unsigned int v39 = **(void **)(*(void *)a1 + 8 * v40);
                  **(void **)(*(void *)a1 + 8 * v40) = v39;
                  unsigned int v39 = v33;
                }
                unint64_t v40 = v34;
LABEL_64:
                unsigned int v33 = v39;
                unsigned int v39 = (void *)*v39;
                unint64_t v34 = v40;
              }
              while (v39);
            }
          }
          unint64_t v14 = (unint64_t)prime;
          goto LABEL_68;
        }
        uint64_t v44 = *(void **)a1;
        *(void *)a1 = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v14 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_68:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v4 = v13 % v14;
      }
      else {
        unint64_t v4 = v13;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v13;
    }
  }
  unsigned int v41 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  unint64_t i = (unsigned __int8 *)v45[0];
  if (v41)
  {
    *(void *)v45[0] = *v41;
LABEL_81:
    *unsigned int v41 = i;
    goto LABEL_82;
  }
  *(void *)v45[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v4) = v20;
  if (*(void *)i)
  {
    unint64_t v42 = *(void *)(*(void *)i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v42 >= v14) {
        v42 %= v14;
      }
    }
    else
    {
      v42 &= v14 - 1;
    }
    unsigned int v41 = (unsigned __int8 **)(*(void *)a1 + 8 * v42);
    goto LABEL_81;
  }
LABEL_82:
  v45[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>>>>::reset[abi:nn180100]((uint64_t)v45);
  return i;
}

void sub_27EDD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<ClauseData>>(unint64_t a1)
{
  if (a1 >= 0x924924924924925) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(28 * a1);
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(long long *a1, long long *a2, std::string *this)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v6 = *v5;
        this->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      long long v5 = (long long *)((char *)v5 + 24);
      ++this;
    }
    while (v5 != a2);
  }
  return this;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  int v9 = (unsigned int *)result;
  while (2)
  {
    uint64_t v10 = a2 - 2;
    unint64_t i = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = i;
          uint64_t v12 = (char *)a2 - (char *)i;
          unint64_t v13 = ((char *)a2 - (char *)i) >> 3;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unsigned int v48 = *v10;
                unsigned int v49 = *i;
                if (*v10 < *i || v49 >= v48 && *(a2 - 1) < i[1])
                {
                  *unint64_t i = v48;
                  *(a2 - 2) = v49;
                  unsigned int v50 = i[1];
                  i[1] = *(a2 - 1);
                  *(a2 - 1) = v50;
                }
                break;
              case 3uLL:
                __n128 result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(i, i + 2, a2 - 2);
                break;
              case 4uLL:
                __n128 result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(i, i + 2, i + 4, a2 - 2);
                break;
              case 5uLL:
                __n128 result = (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(i, i + 2, i + 4, i + 6, a2 - 2);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            unsigned int v51 = i + 2;
            BOOL v53 = i == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 0;
                unsigned int v55 = i;
                do
                {
                  long long v56 = v55;
                  unsigned int v55 = v51;
                  unsigned int v57 = v56[2];
                  unsigned int v58 = *v56;
                  if (v57 < *v56 || v58 >= v57 && v56[3] < v56[1])
                  {
                    unsigned int v60 = v56[2];
                    unsigned int v59 = v56[3];
                    unsigned int v61 = v56[1];
                    v56[2] = v58;
                    v55[1] = v61;
                    uint64_t v62 = i;
                    if (v56 != i)
                    {
                      uint64_t v63 = v54;
                      do
                      {
                        unsigned int v64 = *(unsigned int *)((char *)i + v63 - 8);
                        if (v64 <= v60)
                        {
                          if (v64 < v60)
                          {
                            uint64_t v62 = v56;
                            goto LABEL_120;
                          }
                          uint64_t v62 = (unsigned int *)((char *)i + v63);
                          unsigned int v65 = *(unsigned int *)((char *)i + v63 - 4);
                          if (v65 <= v59) {
                            goto LABEL_120;
                          }
                        }
                        else
                        {
                          unsigned int v65 = *(unsigned int *)((char *)i + v63 - 4);
                        }
                        v56 -= 2;
                        unsigned int v66 = (unsigned int *)((char *)i + v63);
                        *unsigned int v66 = v64;
                        v66[1] = v65;
                        v63 -= 8;
                      }
                      while (v63);
                      uint64_t v62 = i;
                    }
LABEL_120:
                    *uint64_t v62 = v60;
                    v62[1] = v59;
                  }
                  unsigned int v51 = v55 + 2;
                  v54 += 8;
                }
                while (v55 + 2 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                long long v82 = v9;
                int v9 = v51;
                unsigned int v83 = v82[2];
                unsigned int v84 = *v82;
                if (v83 < *v82 || v84 >= v83 && v82[3] < v82[1])
                {
                  unsigned int v85 = *v51;
                  unsigned int v86 = v51[1];
                  do
                  {
                    do
                    {
                      unsigned int v87 = v82;
                      unsigned int v88 = *(v82 - 2);
                      v82 -= 2;
                      unsigned int v89 = v82[3];
                      v82[4] = v84;
                      v82[5] = v89;
                      unsigned int v84 = v88;
                      BOOL v90 = v88 >= v85;
                    }
                    while (v88 > v85);
                  }
                  while (v90 && *(v87 - 1) > v86);
                  *unsigned int v87 = v85;
                  v87[1] = v86;
                }
                unsigned int v51 = v9 + 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (i != a2)
            {
              int64_t v67 = (v13 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  unsigned int v71 = &i[2 * v70];
                  if (2 * v69 + 2 < (uint64_t)v13)
                  {
                    unsigned int v72 = v71[2];
                    if (*v71 < v72 || v72 >= *v71 && i[2 * v70 + 1] < v71[3])
                    {
                      v71 += 2;
                      uint64_t v70 = 2 * v69 + 2;
                    }
                  }
                  unsigned int v73 = &i[2 * v69];
                  unsigned int v74 = *v71;
                  if (*v71 >= *v73 && (*v73 < v74 || v71[1] >= i[2 * v69 + 1]))
                  {
                    __n128 result = (unint64_t)&i[2 * v69];
                    unsigned int v75 = *(_DWORD *)result;
                    unsigned int v76 = *(_DWORD *)(result + 4);
                    *unsigned int v73 = v74;
                    *(_DWORD *)(result + 4) = v71[1];
                    if (v67 >= v70)
                    {
                      while (1)
                      {
                        uint64_t v78 = 2 * v70;
                        uint64_t v70 = (2 * v70) | 1;
                        unint64_t v77 = &i[2 * v70];
                        uint64_t v79 = v78 + 2;
                        if (v79 < (uint64_t)v13)
                        {
                          __n128 result = (unint64_t)(v77 + 2);
                          unsigned int v80 = v77[2];
                          if (*v77 < v80 || v80 >= *v77 && i[2 * v70 + 1] < v77[3])
                          {
                            v77 += 2;
                            uint64_t v70 = v79;
                          }
                        }
                        unsigned int v81 = *v77;
                        if (*v77 < v75) {
                          break;
                        }
                        if (v81 <= v75)
                        {
                          __n128 result = v77[1];
                          if (result < v76) {
                            break;
                          }
                        }
                        unsigned int *v71 = v81;
                        v71[1] = v77[1];
                        unsigned int v71 = v77;
                        if (v67 < v70) {
                          goto LABEL_136;
                        }
                      }
                    }
                    unint64_t v77 = v71;
LABEL_136:
                    *unint64_t v77 = v75;
                    v77[1] = v76;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              uint64_t v91 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v92 = 0;
                uint64_t v93 = *(void *)i;
                uint64_t v94 = v91 - 2;
                if (v91 < 2) {
                  uint64_t v94 = v91 - 1;
                }
                uint64_t v95 = v94 >> 1;
                uint64_t v96 = i;
                do
                {
                  unint64_t v97 = v96;
                  uint64_t v98 = v92 + 1;
                  v96 += 2 * v92 + 2;
                  uint64_t v99 = 2 * v92;
                  uint64_t v92 = (2 * v92) | 1;
                  uint64_t v100 = v99 + 2;
                  if (v100 < v91)
                  {
                    __n128 result = v96[2];
                    if (*v96 < result
                      || result >= *v96 && (__n128 result = v96[3], v97[2 * v98 + 1] < result))
                    {
                      v96 += 2;
                      uint64_t v92 = v100;
                    }
                  }
                  *unint64_t v97 = *v96;
                  v97[1] = v96[1];
                }
                while (v92 <= v95);
                if (v96 == a2 - 2)
                {
                  *(void *)uint64_t v96 = v93;
                }
                else
                {
                  *uint64_t v96 = *(a2 - 2);
                  v96[1] = *(a2 - 1);
                  *((void *)a2 - 1) = v93;
                  uint64_t v101 = (char *)v96 - (char *)i + 8;
                  if (v101 >= 9)
                  {
                    unint64_t v102 = (v101 >> 3) - 2;
                    unint64_t v103 = v102 >> 1;
                    unsigned int v104 = &i[2 * (v102 >> 1)];
                    unsigned int v105 = *v104;
                    if (*v104 < *v96 || *v96 >= v105 && i[2 * v103 + 1] < v96[1])
                    {
                      unsigned int v106 = *v96;
                      unsigned int v107 = v96[1];
                      *uint64_t v96 = v105;
                      v96[1] = v104[1];
                      if (v102 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v109 = v103 - 1;
                          unint64_t v103 = (v103 - 1) >> 1;
                          unint64_t v108 = &i[2 * v103];
                          unsigned int v110 = *v108;
                          if (*v108 >= v106)
                          {
                            if (v110 > v106) {
                              break;
                            }
                            __n128 result = i[2 * v103 + 1];
                            if (result >= v107) {
                              break;
                            }
                          }
                          else
                          {
                            __n128 result = v108[1];
                          }
                          *unsigned int v104 = v110;
                          v104[1] = result;
                          unsigned int v104 = &i[2 * v103];
                          if (v109 <= 1) {
                            goto LABEL_183;
                          }
                        }
                      }
                      unint64_t v108 = v104;
LABEL_183:
                      *unint64_t v108 = v106;
                      v108[1] = v107;
                    }
                  }
                }
                a2 -= 2;
                BOOL v32 = v91-- <= 2;
              }
              while (!v32);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint8x8_t v15 = &i[2 * (v13 >> 1)];
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            __n128 result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            uint64_t v16 = *(void *)v9;
            *(void *)int v9 = *(void *)v15;
            *(void *)uint8x8_t v15 = v16;
          }
          else
          {
            __n128 result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          unsigned int v17 = *(v9 - 2);
          if (v17 < *v9 || *v9 >= v17 && *(v9 - 1) < v9[1]) {
            break;
          }
          unsigned int v36 = *v9;
          unsigned int v35 = v9[1];
          unsigned int v37 = *v10;
          if (*v10 <= *v9 && (v37 < v36 || *(a2 - 1) <= v35))
          {
            for (unint64_t i = v9 + 2; i < a2 && *i <= v36 && (*i < v36 || i[1] <= v35); i += 2)
              ;
          }
          else
          {
            unint64_t i = v9;
            do
            {
              unsigned int v39 = i[2];
              i += 2;
              unsigned int v38 = v39;
            }
            while (v39 <= v36 && (v38 < v36 || i[1] <= v35));
          }
          uint64_t j = a2;
          if (i < a2)
          {
            for (uint64_t j = a2 - 2; v37 > v36 || v37 >= v36 && j[1] > v35; j -= 2)
            {
              unsigned int v41 = *(j - 2);
              unsigned int v37 = v41;
            }
          }
          if (i < j)
          {
            unsigned int v42 = *i;
            unsigned int v43 = *j;
            do
            {
              *unint64_t i = v43;
              *uint64_t j = v42;
              unsigned int v44 = i[1];
              i[1] = j[1];
              j[1] = v44;
              do
              {
                unsigned int v45 = i[2];
                i += 2;
                unsigned int v42 = v45;
              }
              while (v45 <= v36 && (v42 < v36 || i[1] <= v35));
              do
              {
                do
                {
                  unsigned int v46 = *(j - 2);
                  j -= 2;
                  unsigned int v43 = v46;
                  BOOL v47 = v46 >= v36;
                }
                while (v46 > v36);
              }
              while (v47 && j[1] > v35);
            }
            while (i < j);
          }
          BOOL v4 = i - 2 >= v9;
          BOOL v5 = i - 2 == v9;
          if (i - 2 != v9)
          {
            *int v9 = *(i - 2);
            v9[1] = *(i - 1);
          }
          a4 = 0;
          *(i - 2) = v36;
          *(i - 1) = v35;
        }
        uint64_t v18 = v9 + 2;
        uint64_t v19 = *(void *)v9;
        uint64_t v20 = HIDWORD(*(void *)v9);
        while (1)
        {
          unsigned int v21 = *v18;
          if (*v18 >= v19 && (v21 > v19 || v18[1] >= v20)) {
            break;
          }
          v18 += 2;
        }
        if (v18 - 2 == v9)
        {
          unint64_t k = a2;
          if (v18 < a2)
          {
            unsigned int v25 = *v10;
            unint64_t k = a2 - 2;
            if (*v10 >= v19)
            {
              unint64_t k = a2 - 2;
              do
              {
                if (v25 <= v19)
                {
                  if (k[1] < v20 || v18 >= k) {
                    break;
                  }
                }
                else if (v18 >= k)
                {
                  break;
                }
                unsigned int v27 = *(k - 2);
                k -= 2;
                unsigned int v25 = v27;
              }
              while (v27 >= v19);
            }
          }
        }
        else
        {
          unsigned int v22 = *v10;
          for (unint64_t k = a2 - 2; v22 >= v19 && (v22 > v19 || k[1] >= v20); k -= 2)
          {
            unsigned int v24 = *(k - 2);
            unsigned int v22 = v24;
          }
        }
        unint64_t i = v18;
        if (v18 < k)
        {
          unsigned int v28 = *k;
          unint64_t i = v18;
          id v29 = k;
          do
          {
            *unint64_t i = v28;
            *id v29 = v21;
            unsigned int v30 = i[1];
            i[1] = v29[1];
            v29[1] = v30;
            do
            {
              do
              {
                unsigned int v31 = i[2];
                i += 2;
                unsigned int v21 = v31;
                BOOL v32 = v31 > v19;
              }
              while (v31 < v19);
            }
            while (!v32 && i[1] < v20);
            do
            {
              unsigned int v33 = *(v29 - 2);
              v29 -= 2;
              unsigned int v28 = v33;
            }
            while (v33 >= v19 && (v28 > v19 || v29[1] >= v20));
          }
          while (i < v29);
        }
        if (i - 2 != v9)
        {
          *int v9 = *(i - 2);
          v9[1] = *(i - 1);
        }
        *(i - 2) = v19;
        *(i - 1) = v20;
        if (v18 >= k) {
          break;
        }
LABEL_51:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(v9, i - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, i - 2);
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(i, a2);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_51;
      }
    }
    a2 = i - 2;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,BinaryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BinaryInfo>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,BinaryInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unordered_map<unsigned int,ClauseData>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<std::unordered_map<std::string,BinaryInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,BinaryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BinaryInfo>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_map<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_map<std::string,std::unordered_map<unsigned int,ClauseData>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<InstructionPCInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        std::vector<InstructionPCInfo>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<unsigned long long const,std::pair<ShaderBinaryInfo * {__strong},std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<unsigned long long const,std::pair<ShaderBinaryInfo * {__strong},std::string>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(void **)(a1 + 8);
}

void std::vector<InstructionPCInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<InstructionPCInfo>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<InstructionPCInfo>::destroy[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unordered_map<unsigned int,ClauseData>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,BinaryInfo>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 48);
      do
      {
        uint64_t v7 = *(void **)(v5 - 56);
        v5 -= 56;
        long long v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 48) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v8 = *(void **)a1;
    operator delete(v8);
  }
}

unsigned int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    unsigned int v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      unint64_t v8 = a2 + 1;
      unsigned int v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      unsigned int v10 = *a2;
      unsigned int v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        unsigned int v15 = *result;
        *__n128 result = *v8;
        *unint64_t v8 = v15;
      }
    }
  }
  else
  {
    unsigned int v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      long long v6 = a3 + 1;
LABEL_17:
      unint64_t v8 = v6;
      goto LABEL_18;
    }
    *__n128 result = v3;
    *a2 = v4;
    unsigned int v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    unsigned int v13 = *a3;
    unsigned int v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      long long v6 = a3 + 1;
      __n128 result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

unsigned int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3);
  unsigned int v9 = *a4;
  unsigned int v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unsigned int v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unsigned int v12 = *a3;
    unsigned int v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unsigned int v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unsigned int v15 = *a2;
      unsigned int v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unsigned int v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unsigned int *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  __n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3, a4);
  unsigned int v11 = *a5;
  unsigned int v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unsigned int v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unsigned int v14 = *a4;
    unsigned int v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unsigned int v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unsigned int v17 = *a3;
      unsigned int v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unsigned int v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unsigned int v20 = *a2;
        unsigned int v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unsigned int v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unsigned int v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unsigned int v9 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4);
      unsigned int v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unsigned int v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1])) {
      goto LABEL_22;
    }
    unsigned int v14 = *v10;
    unsigned int v15 = v10[1];
    *unsigned int v10 = v13;
    v10[1] = v9[1];
    unsigned int v16 = a1;
    if (v9 == a1) {
      goto LABEL_21;
    }
    uint64_t v17 = v11;
    while (1)
    {
      unsigned int v18 = (char *)a1 + v17;
      unsigned int v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14) {
        break;
      }
      unsigned int v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        unsigned int v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      unsigned int v16 = v9;
      goto LABEL_21;
    }
    unsigned int v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15) {
      goto LABEL_18;
    }
    unsigned int v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *unsigned int v16 = v14;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_22:
    unsigned int v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = a2[5];
  BOOL v5 = *a2 < *(_DWORD *)a1;
  if (*a2 == *(_DWORD *)a1) {
    BOOL v5 = v4 < *(_DWORD *)(a1 + 20);
  }
  BOOL v6 = *(_DWORD *)(a3 + 20) < v4;
  BOOL v7 = *(_DWORD *)a3 == v3;
  BOOL v8 = *(_DWORD *)a3 < v3;
  if (v7) {
    BOOL v8 = v6;
  }
  if (v5)
  {
    if (v8)
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)a1;
      *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 12);
      long long v9 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 12) = v9;
LABEL_17:
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v17[12];
      __n128 result = *(__n128 *)v17;
      *(_OWORD *)a3 = *(_OWORD *)v17;
      return result;
    }
    *(_OWORD *)unsigned int v20 = *(_OWORD *)a1;
    *(_OWORD *)&v20[12] = *(_OWORD *)(a1 + 12);
    long long v14 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = v14;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v20[12];
    __n128 result = *(__n128 *)v20;
    *(_OWORD *)a2 = *(_OWORD *)v20;
    BOOL v15 = *(_DWORD *)a3 < *a2;
    if (*(_DWORD *)a3 == *a2) {
      BOOL v15 = *(_DWORD *)(a3 + 20) < a2[5];
    }
    if (v15)
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
      *(_OWORD *)&v17[12] = *(_OWORD *)(a2 + 3);
      long long v16 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 3) = v16;
      goto LABEL_17;
    }
  }
  else if (v8)
  {
    *(_OWORD *)unsigned int v18 = *(_OWORD *)a2;
    *(_OWORD *)&v18[12] = *(_OWORD *)(a2 + 3);
    long long v10 = *(_OWORD *)(a3 + 12);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 3) = v10;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v18[12];
    __n128 result = *(__n128 *)v18;
    *(_OWORD *)a3 = *(_OWORD *)v18;
    BOOL v12 = *a2 < *(_DWORD *)a1;
    if (*a2 == *(_DWORD *)a1) {
      BOOL v12 = a2[5] < *(_DWORD *)(a1 + 20);
    }
    if (v12)
    {
      *(_OWORD *)unsigned int v19 = *(_OWORD *)a1;
      *(_OWORD *)&v19[12] = *(_OWORD *)(a1 + 12);
      long long v13 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 12) = v13;
      *(_OWORD *)(a2 + 3) = *(_OWORD *)&v19[12];
      __n128 result = *(__n128 *)v19;
      *(_OWORD *)a2 = *(_OWORD *)v19;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, (int *)a2, a3).n128_u64[0];
  BOOL v9 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3) {
    BOOL v9 = *(_DWORD *)(a4 + 20) < *(_DWORD *)(a3 + 20);
  }
  if (v9)
  {
    *(_OWORD *)BOOL v15 = *(_OWORD *)a3;
    *(_OWORD *)&v15[12] = *(_OWORD *)(a3 + 12);
    long long v10 = *(_OWORD *)(a4 + 12);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 12) = v10;
    *(_OWORD *)(a4 + 12) = *(_OWORD *)&v15[12];
    __n128 result = *(__n128 *)v15;
    *(_OWORD *)a4 = *(_OWORD *)v15;
    BOOL v11 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2) {
      BOOL v11 = *(_DWORD *)(a3 + 20) < *(_DWORD *)(a2 + 20);
    }
    if (v11)
    {
      *(_OWORD *)long long v16 = *(_OWORD *)a2;
      *(_OWORD *)&v16[12] = *(_OWORD *)(a2 + 12);
      long long v12 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 12) = v12;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v16[12];
      __n128 result = *(__n128 *)v16;
      *(_OWORD *)a3 = *(_OWORD *)v16;
      BOOL v13 = *(_DWORD *)a2 < *(_DWORD *)a1;
      if (*(_DWORD *)a2 == *(_DWORD *)a1) {
        BOOL v13 = *(_DWORD *)(a2 + 20) < *(_DWORD *)(a1 + 20);
      }
      if (v13)
      {
        *(_OWORD *)uint64_t v17 = *(_OWORD *)a1;
        *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 12);
        long long v14 = *(_OWORD *)(a2 + 12);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 12) = v14;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v17[12];
        __n128 result = *(__n128 *)v17;
        *(_OWORD *)a2 = *(_OWORD *)v17;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v7 = (_OWORD *)(a2 - 28);
      unsigned int v6 = *(_DWORD *)(a2 - 28);
      BOOL v8 = v6 == *(_DWORD *)a1;
      BOOL v9 = v6 < *(_DWORD *)a1;
      if (v8) {
        BOOL v9 = *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 20);
      }
      if (v9)
      {
        *(_OWORD *)unsigned int v41 = *(_OWORD *)a1;
        *(_OWORD *)&v41[12] = *(_OWORD *)(a1 + 12);
        long long v10 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 12) = v10;
        *(_OWORD *)(a2 - 16) = *(_OWORD *)&v41[12];
        *BOOL v7 = *(_OWORD *)v41;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, (int *)(a1 + 28), a2 - 28);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, a1 + 28, a1 + 56, a2 - 28);
      return 1;
    case 5:
      unsigned int v25 = (_OWORD *)(a1 + 28);
      BOOL v26 = (_OWORD *)(a1 + 56);
      unsigned int v27 = (_OWORD *)(a1 + 84);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, a1 + 28, a1 + 56, a1 + 84);
      unsigned int v29 = *(_DWORD *)(a2 - 28);
      uint64_t v28 = a2 - 28;
      unsigned int v30 = *(_DWORD *)(a1 + 84);
      BOOL v31 = v29 < v30;
      if (v29 == v30) {
        BOOL v31 = *(_DWORD *)(v28 + 20) < *(_DWORD *)(a1 + 104);
      }
      if (v31)
      {
        *(_OWORD *)unsigned int v43 = *v27;
        *(_OWORD *)&v43[12] = *(_OWORD *)(a1 + 96);
        long long v32 = *(_OWORD *)(v28 + 12);
        *unsigned int v27 = *(_OWORD *)v28;
        *(_OWORD *)(a1 + 96) = v32;
        *(_OWORD *)(v28 + 12) = *(_OWORD *)&v43[12];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v43;
        unsigned int v33 = *(_DWORD *)(a1 + 84);
        unsigned int v34 = *(_DWORD *)(a1 + 56);
        BOOL v8 = v33 == v34;
        BOOL v35 = v33 < v34;
        if (v8) {
          BOOL v35 = *(_DWORD *)(a1 + 104) < *(_DWORD *)(a1 + 76);
        }
        if (v35)
        {
          *(_OWORD *)unsigned int v44 = *v26;
          *(_OWORD *)&v44[12] = *(_OWORD *)(a1 + 68);
          *BOOL v26 = *v27;
          *(_OWORD *)(a1 + 68) = *(_OWORD *)(a1 + 96);
          *unsigned int v27 = *(_OWORD *)v44;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)&v44[12];
          unsigned int v36 = *(_DWORD *)(a1 + 56);
          unsigned int v37 = *(_DWORD *)(a1 + 28);
          BOOL v8 = v36 == v37;
          BOOL v38 = v36 < v37;
          if (v8) {
            BOOL v38 = *(_DWORD *)(a1 + 76) < *(_DWORD *)(a1 + 48);
          }
          if (v38)
          {
            *(_OWORD *)unsigned int v45 = *v25;
            *(_OWORD *)&v45[12] = *(_OWORD *)(a1 + 40);
            *unsigned int v25 = *v26;
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 68);
            *BOOL v26 = *(_OWORD *)v45;
            *(_OWORD *)(a1 + 68) = *(_OWORD *)&v45[12];
            unsigned int v39 = *(_DWORD *)(a1 + 28);
            BOOL v8 = v39 == *(_DWORD *)a1;
            BOOL v40 = v39 < *(_DWORD *)a1;
            if (v8) {
              BOOL v40 = *(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 20);
            }
            if (v40)
            {
              *(_OWORD *)unsigned int v46 = *(_OWORD *)a1;
              *(_OWORD *)&v46[12] = *(_OWORD *)(a1 + 12);
              *(_OWORD *)a1 = *v25;
              *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 40);
              *unsigned int v25 = *(_OWORD *)v46;
              *(_OWORD *)(a1 + 40) = *(_OWORD *)&v46[12];
            }
          }
        }
      }
      return 1;
    default:
      BOOL v11 = (_DWORD *)(a1 + 56);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, (int *)(a1 + 28), a1 + 56);
      uint64_t v12 = a1 + 84;
      if (a1 + 84 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *(_DWORD *)v12;
    unsigned int v16 = *(_DWORD *)(v12 + 20);
    BOOL v17 = *(_DWORD *)v12 < *v11;
    if (*(_DWORD *)v12 == *v11) {
      BOOL v17 = v16 < v11[5];
    }
    if (v17)
    {
      long long v42 = *(_OWORD *)(v12 + 4);
      int v18 = *(_DWORD *)(v12 + 24);
      uint64_t v19 = v13;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(_OWORD *)(v20 + 84) = *(_OWORD *)(a1 + v19 + 56);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(a1 + v19 + 68);
        if (v19 == -56) {
          break;
        }
        unsigned int v21 = *(_DWORD *)(v20 + 28);
        BOOL v22 = v16 < *(_DWORD *)(v20 + 48);
        BOOL v8 = v15 == v21;
        BOOL v23 = v15 < v21;
        if (!v8) {
          BOOL v22 = v23;
        }
        v19 -= 28;
        if (!v22)
        {
          uint64_t v24 = a1 + v19 + 84;
          goto LABEL_19;
        }
      }
      uint64_t v24 = a1;
LABEL_19:
      *(_DWORD *)uint64_t v24 = v15;
      *(_OWORD *)(v24 + 4) = v42;
      *(_DWORD *)(v24 + 20) = v16;
      *(_DWORD *)(v24 + 24) = v18;
      if (++v14 == 8) {
        return v12 + 28 == a2;
      }
    }
    BOOL v11 = (_DWORD *)v12;
    v13 += 28;
    v12 += 28;
    if (v12 == a2) {
      return 1;
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BinaryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BinaryInfo>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,BinaryInfo>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unordered_map<unsigned int,ClauseData>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::allocator<std::pair<ShaderBinaryInfo * {__strong},std::string>>::destroy[abi:nn180100](uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  uint64_t v2 = *(void **)a1;
}

char *std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  uint64_t v3 = 3 * a2;
  BOOL result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void __destroy_helper_block_ea8_88c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE120c106_ZTSNSt3__14pairIU8__strongP16ShaderBinaryInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE152c146_ZTSNSt3__16vectorINS0_INS_4pairIU8__strongP16ShaderBinaryInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS8_ISB_EEEENS8_ISD_EEEE176c86_ZTSNSt3__16vectorINS0_I27ShaderProfilerUSCSampleInfoNS_9allocatorIS1_EEEENS2_IS4_EEEE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 152);
  uint64_t v4 = (void **)(a1 + 176);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v4);
  uint64_t v4 = v2;
  std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__destroy_vector::operator()[abi:nn180100](&v4);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }

  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
}

void *__copy_helper_block_ea8_88c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE120c106_ZTSNSt3__14pairIU8__strongP16ShaderBinaryInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE152c146_ZTSNSt3__16vectorINS0_INS_4pairIU8__strongP16ShaderBinaryInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS8_ISB_EEEENS8_ISD_EEEE176c86_ZTSNSt3__16vectorINS0_I27ShaderProfilerUSCSampleInfoNS_9allocatorIS1_EEEENS2_IS4_EEEE(void *a1, uint64_t a2)
{
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  BOOL v5 = *(unsigned char **)(a2 + 88);
  uint64_t v4 = *(unsigned char **)(a2 + 96);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](a1 + 11, v6 >> 3);
    BOOL v7 = (char *)a1[12];
    memmove(v7, v5, v6);
    a1[12] = &v7[v6];
  }
  std::pair<ShaderBinaryInfo * {__strong},std::string>::pair[abi:nn180100](a1 + 15, a2 + 120);
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__init_with_size[abi:nn180100]<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>*,std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>*>(a1 + 19, *(uint64_t **)(a2 + 152), *(uint64_t **)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3));
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  return std::vector<std::vector<ShaderProfilerUSCSampleInfo>>::__init_with_size[abi:nn180100]<std::vector<ShaderProfilerUSCSampleInfo>*,std::vector<ShaderProfilerUSCSampleInfo>*>(a1 + 22, *(void *)(a2 + 176), *(void *)(a2 + 184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3));
}

void sub_2818AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  std::pair<ShaderBinaryInfo * {__strong},std::string>::~pair(v4);
  int64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 96) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = (char *)operator new(0x38uLL);
  *(void *)long long v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)long long v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *(void *)long long v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_281AF8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DrawDurationInfo>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::unordered_map<unsigned int,ClauseData>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<DYMTLShaderProfilerProcessedUSCSample>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(20 * a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DrawDurationInfo>,void *>>>::operator()[abi:nn180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

BOOL USCSampleComparator::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 12);
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  BOOL v4 = v2 >= v3;
  if (v2 == v3)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 32);
    unsigned int v6 = *(_DWORD *)(a2 + 32);
    BOOL v4 = v5 >= v6;
    if (v5 == v6)
    {
      BOOL v4 = *(_DWORD *)a1 >= *(_DWORD *)a2;
      if (*(_DWORD *)a1 == *(_DWORD *)a2)
      {
        unsigned int v7 = *(_DWORD *)(a1 + 8);
        unsigned int v8 = *(_DWORD *)(a2 + 8);
        BOOL v4 = v7 >= v8;
        if (v7 == v8) {
          BOOL v4 = *(void *)(a1 + 24) >= *(void *)(a2 + 24);
        }
      }
    }
  }
  return !v4;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = USCSampleComparator::operator()(a2, a1);
  BOOL result = USCSampleComparator::operator()(a3, a2);
  if (v6)
  {
    if (result)
    {
      long long v8 = *(_OWORD *)a1;
      long long v9 = *(_OWORD *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a3 + 32);
      long long v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v12;
      *(void *)(a1 + 32) = v11;
    }
    else
    {
      long long v23 = *(_OWORD *)a1;
      long long v24 = *(_OWORD *)(a1 + 16);
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = *(void *)(a2 + 32);
      long long v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(void *)(a1 + 32) = v26;
      *(void *)(a2 + 32) = v25;
      *(_OWORD *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v24;
      BOOL result = USCSampleComparator::operator()(a3, a2);
      if (!result) {
        return result;
      }
      long long v8 = *(_OWORD *)a2;
      long long v9 = *(_OWORD *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v28 = *(void *)(a3 + 32);
      long long v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v29;
      *(void *)(a2 + 32) = v28;
    }
    *(void *)(a3 + 32) = v10;
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
  }
  else if (result)
  {
    long long v13 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)(a2 + 16);
    uint64_t v15 = *(void *)(a2 + 32);
    uint64_t v16 = *(void *)(a3 + 32);
    long long v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v17;
    *(void *)(a2 + 32) = v16;
    *(void *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 16) = v14;
    BOOL result = USCSampleComparator::operator()(a2, a1);
    if (result)
    {
      long long v18 = *(_OWORD *)a1;
      long long v19 = *(_OWORD *)(a1 + 16);
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a2 + 32);
      long long v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v22;
      *(void *)(a1 + 32) = v21;
      *(void *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a2, a3);
  if (USCSampleComparator::operator()(a4, a3))
  {
    long long v9 = *(_OWORD *)a3;
    long long v10 = *(_OWORD *)(a3 + 16);
    uint64_t v11 = *(void *)(a3 + 32);
    uint64_t v12 = *(void *)(a4 + 32);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v12;
    *(void *)(a4 + 32) = v11;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = v10;
    if (USCSampleComparator::operator()(a3, a2))
    {
      __n128 v14 = *(__n128 *)a2;
      long long v15 = *(_OWORD *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 32);
      uint64_t v17 = *(void *)(a3 + 32);
      long long v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v18;
      *(void *)(a2 + 32) = v17;
      *(void *)(a3 + 32) = v16;
      *(__n128 *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v15;
      if (USCSampleComparator::operator()(a2, a1))
      {
        __n128 result = *(__n128 *)a1;
        long long v19 = *(_OWORD *)(a1 + 16);
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = *(void *)(a2 + 32);
        long long v22 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v22;
        *(void *)(a1 + 32) = v21;
        *(void *)(a2 + 32) = v20;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v19;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a2, a3, a4);
  if (USCSampleComparator::operator()(a5, a4))
  {
    long long v11 = *(_OWORD *)a4;
    long long v12 = *(_OWORD *)(a4 + 16);
    uint64_t v13 = *(void *)(a4 + 32);
    uint64_t v14 = *(void *)(a5 + 32);
    long long v15 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v15;
    *(void *)(a4 + 32) = v14;
    *(void *)(a5 + 32) = v13;
    *(_OWORD *)a5 = v11;
    *(_OWORD *)(a5 + 16) = v12;
    if (USCSampleComparator::operator()(a4, a3))
    {
      long long v16 = *(_OWORD *)a3;
      long long v17 = *(_OWORD *)(a3 + 16);
      uint64_t v18 = *(void *)(a3 + 32);
      uint64_t v19 = *(void *)(a4 + 32);
      long long v20 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v20;
      *(void *)(a3 + 32) = v19;
      *(void *)(a4 + 32) = v18;
      *(_OWORD *)a4 = v16;
      *(_OWORD *)(a4 + 16) = v17;
      if (USCSampleComparator::operator()(a3, a2))
      {
        __n128 v21 = *(__n128 *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        uint64_t v23 = *(void *)(a2 + 32);
        uint64_t v24 = *(void *)(a3 + 32);
        long long v25 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v25;
        *(void *)(a2 + 32) = v24;
        *(void *)(a3 + 32) = v23;
        *(__n128 *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v22;
        if (USCSampleComparator::operator()(a2, a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v26 = *(_OWORD *)(a1 + 16);
          uint64_t v27 = *(void *)(a1 + 32);
          uint64_t v28 = *(void *)(a2 + 32);
          long long v29 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v29;
          *(void *)(a1 + 32) = v28;
          *(void *)(a2 + 32) = v27;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 40;
      if (!USCSampleComparator::operator()(a2 - 40, a1)) {
        return 1;
      }
      long long v7 = *(_OWORD *)a1;
      long long v8 = *(_OWORD *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(v6 + 32);
      long long v11 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 16) = v11;
      *(void *)(a1 + 32) = v10;
      *(void *)(v6 + 32) = v9;
      BOOL result = 1;
      *(_OWORD *)uint64_t v6 = v7;
      *(_OWORD *)(v6 + 16) = v8;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v12 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80);
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (2)
  {
    if (!USCSampleComparator::operator()(v13, v12)) {
      goto LABEL_20;
    }
    uint64_t v16 = *(void *)v13;
    unsigned int v17 = *(_DWORD *)(v13 + 8);
    unsigned int v18 = *(_DWORD *)(v13 + 12);
    uint64_t v20 = *(void *)(v13 + 16);
    unint64_t v19 = *(void *)(v13 + 24);
    uint64_t v21 = *(void *)(v13 + 32);
    long long v22 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
    *(_OWORD *)(v13 + 16) = v22;
    uint64_t v23 = a1;
    *(void *)(v13 + 32) = *(void *)(v12 + 32);
    if (v12 == a1) {
      goto LABEL_19;
    }
    uint64_t v24 = v14;
    while (1)
    {
      uint64_t v25 = a1 + v24;
      long long v26 = (_DWORD *)(a1 + v24 + 40);
      unsigned int v27 = *(_DWORD *)(a1 + v24 + 52);
      BOOL v28 = v18 >= v27;
      if (v18 == v27)
      {
        unsigned int v29 = *(_DWORD *)(v25 + 72);
        BOOL v28 = v21 >= v29;
        if (v21 == v29)
        {
          BOOL v28 = v16 >= *v26;
          if (v16 == *v26)
          {
            unsigned int v30 = *(_DWORD *)(a1 + v24 + 48);
            BOOL v28 = v17 >= v30;
            if (v17 == v30)
            {
              if (v19 >= *(void *)(a1 + v24 + 64))
              {
                uint64_t v23 = a1 + v24 + 80;
                goto LABEL_19;
              }
              goto LABEL_16;
            }
          }
        }
      }
      if (v28) {
        break;
      }
LABEL_16:
      v12 -= 40;
      long long v31 = *(_OWORD *)(a1 + v24 + 56);
      *(_OWORD *)(v25 + 80) = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 96) = v31;
      *(void *)(v25 + 112) = *(void *)(a1 + v24 + 72);
      v24 -= 40;
      if (v24 == -80)
      {
        uint64_t v23 = a1;
        goto LABEL_19;
      }
    }
    uint64_t v23 = v12;
LABEL_19:
    *(void *)uint64_t v23 = v16;
    *(_DWORD *)(v23 + 8) = v17;
    *(_DWORD *)(v23 + 12) = v18;
    *(void *)(v23 + 16) = v20;
    *(void *)(v23 + 24) = v19;
    ++v15;
    *(void *)(v23 + 32) = v21;
    if (v15 != 8)
    {
LABEL_20:
      uint64_t v12 = v13;
      v14 += 40;
      v13 += 40;
      if (v13 == a2) {
        return 1;
      }
      continue;
    }
    return v13 + 40 == a2;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<unsigned long long const,std::pair<ShaderBinaryInfo * {__strong},std::string>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<std::pair<ShaderBinaryInfo * {__strong},std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::allocator<std::pair<ShaderBinaryInfo * {__strong},std::string>>::destroy[abi:nn180100](i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_28327C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, id *a16, id *a17, id *location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  objc_destroyWeak(location);
  _Block_object_dispose(&a60, 8);
  std::vector<std::vector<-[DYPMTLShaderProfilerHelper adjustHWBiasAndFinalizeResult]::ClauseInfo>>::~vector[abi:nn180100](a14);
  std::vector<-[DYPMTLShaderProfilerHelper adjustHWBiasAndFinalizeResult]::ClauseInfo>::~vector[abi:nn180100]((void **)(v62 - 224));
  std::__hash_table<std::__hash_value_type<std::string,BinaryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BinaryInfo>>>::~__hash_table(v62 - 192);

  objc_destroyWeak((id *)(v62 - 152));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__622(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void **__Block_byref_object_dispose__623(uint64_t a1)
{
  return std::vector<std::vector<-[DYPMTLShaderProfilerHelper adjustHWBiasAndFinalizeResult]::ClauseInfo>>::~vector[abi:nn180100]((void **)(a1 + 48));
}

void sub_28384C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_283AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_283EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_28405C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2840B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_28411C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2842F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_2844F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2846C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_284CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_285158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&a16);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::vector<double>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  long long v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    unint64_t v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    abort();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  long long v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = &v11[8 * v5];
  uint64_t v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  unsigned int v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    uint64_t v18 = *((void *)v13 - 1);
    v13 -= 8;
    *((void *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

_OWORD *std::vector<std::pair<unsigned long long,unsigned long long>>::__init_with_size[abi:nn180100]<std::pair<unsigned long long,unsigned long long>*,std::pair<unsigned long long,unsigned long long>*>(_OWORD *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      abort();
    }
    unint64_t v6 = result;
    __n128 result = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(a4);
    *unint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *result++ = v8;
    }
    v6[1] = result;
  }
  return result;
}

void sub_285A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void sub_285D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
}

void sub_288A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::mutex *a41)
{
  operator delete(v41);
  std::mutex::unlock(a41);

  _Block_object_dispose(&STACK[0x670], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3540(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3541(uint64_t a1)
{
}

uint64_t std::__split_buffer<std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>::reset[abi:nn180100]((void ***)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<std::vector<double>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<std::vector<double>>::operator()[abi:nn180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::reset[abi:nn180100]((void ***)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 __Block_byref_object_copy__574(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__575(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<long,std::unordered_map<unsigned int,DrawDurationInfo>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__577(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__578(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__580(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__581(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::vector<std::vector<GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::CounterValueData,std::allocator<GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::CounterValueData>>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void sub_289C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<unsigned int,unsigned int>>::__init_with_size[abi:nn180100]<std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 61) {
      abort();
    }
    unint64_t v6 = result;
    __n128 result = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(a4);
    *unint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *result++ = v8;
    }
    v6[1] = result;
  }
  return result;
}

__n128 __Block_byref_object_copy__603(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__604(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void sub_28B120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_map<long,std::unordered_map<unsigned int,DrawDurationInfo>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*(v4 - 3);
        if (v6)
        {
          do
          {
            uint64_t v7 = (void *)*v6;
            std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::~__hash_table((uint64_t)(v6 + 3));
            operator delete(v6);
            unint64_t v6 = v7;
          }
          while (v7);
        }
        uint64_t v9 = (void *)*(v4 - 5);
        v4 -= 5;
        uint64_t v8 = v9;
        void *v4 = 0;
        if (v9) {
          operator delete(v8);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::pair<unsigned long long,unsigned long long>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x28uLL);
  void *v12 = 0;
  v12[1] = v6;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v12[4] = *(void *)(a3 + 16);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v12 = *v20;
LABEL_38:
    *uint64_t v20 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_28B5A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::~__hash_table(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void __destroy_helper_block_ea8_112c101_ZTSNSt3__14pairIP21ShaderBinaryStatsInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
}

void __copy_helper_block_ea8_112c101_ZTSNSt3__14pairIP21ShaderBinaryStatsInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE(std::string *a1, uint64_t a2)
{
  a1[4].__r_.__value_.__r.__words[2] = *(void *)(a2 + 112);
  unsigned int v2 = a1 + 5;
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 120);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 136);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<unsigned int,DrawDurationInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<unsigned int,DrawDurationInfo>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

void std::vector<ShaderProfilerUSCSampleInfo>::__insert_with_size[abi:nn180100]<std::__wrap_iter<ShaderProfilerUSCSampleInfo*>,std::__wrap_iter<ShaderProfilerUSCSampleInfo*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v6 = __src;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v10) >> 3)) < a5)
  {
    unint64_t v11 = *(char **)a1;
    unint64_t v12 = a5 - 0x3333333333333333 * ((uint64_t)(v10 - *(void *)a1) >> 3);
    if (v12 > 0x666666666666666) {
      abort();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - v11) >> 3);
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (uint64_t)v11) >> 3);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v12) {
      uint64_t v15 = v12;
    }
    if (v14 >= 0x333333333333333) {
      unint64_t v16 = 0x666666666666666;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v27 = v16 + 40 * v13;
    uint64_t v28 = 5 * a5;
    unsigned int v29 = (char *)(v27 + 40 * a5);
    uint64_t v30 = 8 * v28;
    unint64_t v31 = v27;
    do
    {
      long long v32 = *(_OWORD *)v6;
      long long v33 = *((_OWORD *)v6 + 1);
      *(void *)(v31 + 32) = *((void *)v6 + 4);
      *(_OWORD *)unint64_t v31 = v32;
      *(_OWORD *)(v31 + 16) = v33;
      v31 += 40;
      v6 += 40;
      v30 -= 40;
    }
    while (v30);
    unsigned int v34 = *(char **)a1;
    if (*(char **)a1 == __dst)
    {
      unint64_t v38 = v16 + 40 * v13;
    }
    else
    {
      BOOL v35 = __dst;
      do
      {
        long long v36 = *(_OWORD *)(v35 - 40);
        long long v37 = *(_OWORD *)(v35 - 24);
        unint64_t v38 = v27 - 40;
        *(void *)(v27 - 8) = *((void *)v35 - 1);
        *(_OWORD *)(v27 - 24) = v37;
        *(_OWORD *)(v27 - 40) = v36;
        v35 -= 40;
        v27 -= 40;
      }
      while (v35 != v34);
    }
    unint64_t v39 = v16 + 40 * v17;
    BOOL v40 = *(unsigned char **)(a1 + 8);
    uint64_t v41 = v40 - __dst;
    if (v40 != __dst) {
      memmove(v29, __dst, v40 - __dst);
    }
    long long v42 = *(char **)a1;
    *(void *)a1 = v38;
    *(void *)(a1 + 8) = &v29[v41];
    *(void *)(a1 + 16) = v39;
    if (v42)
    {
      operator delete(v42);
    }
    return;
  }
  uint64_t v18 = v10 - (void)__dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)__dst) >> 3)) >= a5)
  {
    uint64_t v19 = &__src[40 * a5];
    unint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    long long v22 = &__dst[40 * a5];
    uint64_t v23 = &v21[-40 * a5];
    uint64_t v24 = v21;
    if ((unint64_t)v23 < v10)
    {
      uint64_t v24 = v21;
      do
      {
        long long v25 = *(_OWORD *)v23;
        long long v26 = *((_OWORD *)v23 + 1);
        *((void *)v24 + 4) = *((void *)v23 + 4);
        *(_OWORD *)uint64_t v24 = v25;
        *((_OWORD *)v24 + 1) = v26;
        v23 += 40;
        v24 += 40;
      }
      while ((unint64_t)v23 < v10);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&__dst[40 * a5], __dst, v21 - v22);
    }
    if (v19 != v6)
    {
      memmove(__dst, v6, v19 - v6);
    }
    return;
  }
  uint64_t v19 = &__src[8 * ((uint64_t)(v10 - (void)__dst) >> 3)];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(*(void **)(a1 + 8), &__src[8 * ((uint64_t)(v10 - (void)__dst) >> 3)], a4 - v19);
  }
  unint64_t v21 = (char *)(v10 + v20);
  *(void *)(a1 + 8) = v10 + v20;
  if (v18 >= 1) {
    goto LABEL_17;
  }
}

void __destroy_helper_block_ea8_80c53_ZTSNSt3__16vectorINS_4pairIjjEENS_9allocatorIS2_EEEE(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_ea8_80c53_ZTSNSt3__16vectorINS_4pairIjjEENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  unsigned int v2 = (void *)(a1 + 80);
  v2[2] = 0;
  return std::vector<std::pair<unsigned int,unsigned int>>::__init_with_size[abi:nn180100]<std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(v2, *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
}

void ProfileEventHelper::~ProfileEventHelper(ProfileEventHelper *this)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this + 456);
  uint64_t v4 = (void **)((char *)this + 432);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v4);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this + 392);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this + 352);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((void *)this + 38);
  unsigned int v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
  std::deque<unsigned int>::~deque[abi:nn180100]((uint64_t)this + 200);
  std::deque<unsigned int>::~deque[abi:nn180100]((uint64_t)this + 152);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((void *)this + 13);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((void *)this + 7);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((void *)this + 1);
}

void ProfileEventHelper::ProcessQueue(ProfileEventHelper *this)
{
  unsigned int v2 = (void **)*((void *)this + 14);
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 18) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *((void *)this + 15);
      unsigned int v2 = (void **)(*((void *)this + 14) + 8);
      *((void *)this + 14) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 512;
  }
  *((void *)this + 17) = v6;
LABEL_8:
  unsigned int v7 = *(_DWORD *)this;
  std::deque<unsigned int>::push_front((char **)this + 19, (_DWORD *)this + 124);
  std::deque<unsigned int>::push_front((char **)this + 25, (_DWORD *)this + 125);
  std::deque<ProfileEvent>::operator=((void *)this + 7, (void *)this + 1);
  uint64_t v9 = *((void *)this + 12);
  if (v9)
  {
    unint64_t v10 = (char *)this + 456;
    unint64_t v11 = (char *)this + 352;
    do
    {
      ++*(_DWORD *)this;
      uint64_t v12 = *(void *)(*(void *)(*((void *)this + 8) + ((*((void *)this + 11) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*((void *)this + 11) & 0x1FFLL));
      ++*((void *)this + 11);
      *((void *)this + 12) = v9 - 1;
      std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 56);
      if (v12 >> 28)
      {
        if (v12 >> 28 == 2 && *((_DWORD *)this + 1) == 6) {
          LODWORD(v12) = v12 & 0xFFFFFFF | 0x80000000;
        }
        unsigned int v13 = v12 >> 28;
        unsigned int v14 = (v12 >> 28) - 3;
        if (v14 >= 6)
        {
          if (v13 == 2)
          {
            for (uint64_t i = (void *)*((void *)this + 54); i != *((void **)this + 55); i += 3)
            {
              long long v26 = (_DWORD *)*i;
              if (*i != i[1] && *v26 >> 28 == 1)
              {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v11, v26[1], v26[1]);
                *(_DWORD *)*uint64_t i = *(_DWORD *)*i & 0xFFFFFFF | 0x20000000;
                *(_DWORD *)(*i + 4) = *(_DWORD *)this;
                break;
              }
            }
          }
          else if (v13 == 1)
          {
            uint64_t v19 = *(unsigned int *)this;
            unsigned int v18 = *((_DWORD *)this + 1);
            *((_DWORD *)this + 1) = v18 + 1;
            int64_t v20 = (void **)(*((void *)this + 54) + 24 * v18);
            long long v22 = v20 + 1;
            unint64_t v21 = (unint64_t *)v20[1];
            unint64_t v23 = (unint64_t)v20[2];
            if ((unint64_t)v21 >= v23)
            {
              uint64_t v27 = ((char *)v21 - (unsigned char *)*v20) >> 3;
              if ((unint64_t)(v27 + 1) >> 61) {
LABEL_110:
              }
                abort();
              uint64_t v28 = v23 - (void)*v20;
              uint64_t v29 = v28 >> 2;
              if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
                uint64_t v29 = v27 + 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30) {
                unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v30);
              }
              else {
                uint64_t v31 = 0;
              }
              long long v32 = (unint64_t *)(v30 + 8 * v27);
              *long long v32 = v12 | (unint64_t)(v19 << 32);
              uint64_t v24 = v32 + 1;
              long long v33 = (char *)*v22;
              unsigned int v34 = (char *)*v20;
              if (*v22 == *v20)
              {
                unint64_t v10 = (char *)this + 456;
              }
              else
              {
                unint64_t v10 = (char *)this + 456;
                do
                {
                  unint64_t v35 = *((void *)v33 - 1);
                  v33 -= 8;
                  *--long long v32 = v35;
                }
                while (v33 != v34);
                long long v33 = (char *)*v20;
              }
              *int64_t v20 = v32;
              char *v22 = v24;
              v20[2] = (void *)(v30 + 8 * v31);
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *unint64_t v21 = v12 | (unint64_t)(v19 << 32);
              uint64_t v24 = v21 + 1;
              unint64_t v10 = (char *)this + 456;
            }
            unint64_t v11 = (char *)this + 352;
            char *v22 = v24;
          }
        }
        else
        {
          uint64_t v15 = (void *)(*((void *)this + 54) + 24 * v14);
          if (*v15 == v15[1])
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v11, *(_DWORD *)this, *(_DWORD *)this);
          }
          else
          {
            int v16 = *(_DWORD *)(*v15 + 4);
            LODWORD(v103) = v12 >> 28;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v10, v13, &v103)+ 5) = v16;
            uint64_t v17 = *((void *)this + 54) + 24 * v14;
            *(void *)(v17 + 8) -= 8;
          }
        }
      }
      uint64_t v9 = *((void *)this + 12);
    }
    while (v9);
  }
  uint64_t v36 = 0;
  uint64_t v100 = (int64x2_t *)((char *)this + 104);
  do
  {
    long long v37 = (void *)(*((void *)this + 54) + v36);
    if (*v37 != v37[1]) {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)this + 352, *(_DWORD *)(*v37 + 4), *(_DWORD *)(*v37 + 4));
    }
    v36 += 24;
  }
  while (v36 != 144);
  unint64_t v38 = *((void *)this + 35);
  *((void *)this + 36) = v38;
  *((_DWORD *)this + 1) = 0;
  uint64_t v39 = *((void *)this + 6);
  if (v39)
  {
    uint64_t v40 = 0;
    int v41 = 0;
    uint64_t v101 = (char *)this + 392;
    while (1)
    {
      unint64_t v42 = *((void *)this + 5);
      ++v7;
      uint64_t v103 = *(void *)(*(void *)(*((void *)this + 2) + ((v42 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v42 & 0x1FF));
      unsigned int v43 = v103;
      *((void *)this + 5) = v42 + 1;
      *((void *)this + 6) = v39 - 1;
      std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 8);
      if ((v43 & 0xF0000000) == 0x10000000)
      {
        ++*((_DWORD *)this + 1);
        if (!std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)this + 44, v7))goto LABEL_63; {
      }
        }
      else if (v43 >> 28 {
             && !std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)this + 44, v7))
      }
      {
        if ((v43 & 0xF0000000) == 0x20000000 && *((_DWORD *)this + 1) == 6)
        {
          LODWORD(v103) = v43 & 0xFFFFFFF | 0x80000000;
          unsigned int v43 = v103;
        }
LABEL_63:
        unint64_t v45 = *((void *)this + 18);
        uint64_t v44 = v43 & 0xFFFFFFF;
        if (v45) {
          v41 += (v44 - v40) / v45;
        }
        int v102 = v43 & 0xFFFFFFF;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v101, v43 & 0xFFFFFFF, &v102)+ 5) = v41;
        unsigned int v46 = v43 >> 28;
        unsigned int v47 = (v43 >> 28) - 3;
        if (v47 >= 6)
        {
          if (v46 - 1 <= 1)
          {
            HIDWORD(v103) = v7;
            std::deque<ProfileEvent>::emplace_back<ProfileEvent&>(v100, &v103);
          }
        }
        else
        {
          unsigned int v48 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)this + 57, v46);
          if (v48)
          {
            uint64_t v49 = *((void *)this + 14);
            if (*((void *)this + 15) != v49)
            {
              unint64_t v50 = *((void *)this + 17);
              unsigned int v51 = (char **)(v49 + 8 * (v50 >> 9));
              unsigned int v52 = *v51;
              BOOL v53 = &(*v51)[8 * (v50 & 0x1FF)];
              uint64_t v54 = *(void *)(v49 + (((*((void *)this + 18) + v50) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*((void *)this + 18) + v50) & 0x1FF);
              if (v53 != (char *)v54)
              {
                while (*((_DWORD *)v53 + 1) != *((_DWORD *)v48 + 5))
                {
                  v53 += 8;
                  if (v53 - v52 == 4096)
                  {
                    unsigned int v55 = v51[1];
                    ++v51;
                    unsigned int v52 = v55;
                    BOOL v53 = v55;
                  }
                  if (v53 == (char *)v54) {
                    goto LABEL_58;
                  }
                }
                unsigned int v56 = *(_DWORD *)v53;
                std::deque<ProfileEvent>::erase(v100, (char *)v51, (uint64_t)v53);
                int v102 = v56 & 0xFFFFFFF;
                int v57 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v101, v56 & 0xFFFFFFF, &v102)+ 5);
                int v102 = v44;
                unsigned int v58 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v101, v44, &v102);
                unint64_t v59 = *((void *)this + 24);
                uint64_t v60 = (*((unsigned int *)this + 125) | (v59 << 36)) & 0x3000000FFFLL;
                if (v59 < 2 || (unint64_t v61 = *((void *)this + 30), v61 < 2))
                {
                  int v65 = 0;
                  int v62 = 0;
                }
                else
                {
                  int v62 = 0;
                  uint64_t v63 = *((void *)this + 23);
                  uint64_t v64 = *((void *)this + 20);
                  int v65 = *(_DWORD *)(*(void *)(v64 + (((unint64_t)(v63 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * ((v63 + 1) & 0x3FF));
                  uint64_t v66 = *((void *)this + 29);
                  uint64_t v67 = *((void *)this + 26);
                  v60 |= (unint64_t)(*(_DWORD *)(*(void *)(v67
                                                                  + (((unint64_t)(v66 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                      + 4 * ((v66 + 1) & 0x3FF)) & 0xFFF) << 12;
                  if (v59 >= 3 && v61 != 2)
                  {
                    int v62 = *(_DWORD *)(*(void *)(v64 + (((unint64_t)(v63 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * ((v63 + 2) & 0x3FF));
                    v60 |= (unint64_t)(*(_DWORD *)(*(void *)(v67
                                                                    + (((unint64_t)(v66 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                        + 4 * ((v66 + 2) & 0x3FF)) & 0xFFF) << 24;
                  }
                }
                int v68 = *((_DWORD *)v58 + 5) - v57;
                int v70 = *((_DWORD *)this + 62);
                int v69 = *((_DWORD *)this + 63);
                int v71 = *((_DWORD *)this + 124);
                if (v70 == -1) {
                  BOOL v72 = v56 >> 28 == 2;
                }
                else {
                  BOOL v72 = v62;
                }
                unint64_t v73 = *((void *)this + 36);
                unint64_t v74 = *((void *)this + 37);
                if (v73 >= v74)
                {
                  uint64_t v76 = *((void *)this + 35);
                  unint64_t v77 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v73 - v76) >> 3);
                  unint64_t v78 = v77 + 1;
                  if (v77 + 1 > 0x666666666666666) {
                    goto LABEL_110;
                  }
                  unint64_t v79 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v74 - v76) >> 3);
                  if (2 * v79 > v78) {
                    unint64_t v78 = 2 * v79;
                  }
                  if (v79 >= 0x333333333333333) {
                    unint64_t v80 = 0x666666666666666;
                  }
                  else {
                    unint64_t v80 = v78;
                  }
                  if (v80)
                  {
                    uint64_t v99 = v60;
                    int v97 = v68;
                    int v98 = v65;
                    BOOL v95 = v72;
                    int v96 = *((_DWORD *)this + 124);
                    int v94 = *((_DWORD *)this + 63);
                    unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(v80);
                    int v69 = v94;
                    BOOL v72 = v95;
                    int v71 = v96;
                    int v68 = v97;
                    int v65 = v98;
                    uint64_t v60 = v99;
                  }
                  else
                  {
                    uint64_t v81 = 0;
                  }
                  unint64_t v82 = v80 + 40 * v77;
                  *(_DWORD *)unint64_t v82 = v70;
                  *(_DWORD *)(v82 + 4) = v69;
                  *(_DWORD *)(v82 + 8) = v68;
                  *(_DWORD *)(v82 + 12) = v71;
                  *(_DWORD *)(v82 + 16) = v65;
                  *(_DWORD *)(v82 + 20) = v72;
                  *(void *)(v82 + 24) = v60;
                  *(_DWORD *)(v82 + 32) = v47;
                  *(_DWORD *)(v82 + 36) = 0;
                  unsigned int v84 = (char *)*((void *)this + 35);
                  unsigned int v83 = (char *)*((void *)this + 36);
                  unint64_t v85 = v82;
                  if (v83 != v84)
                  {
                    do
                    {
                      long long v8 = *(_OWORD *)(v83 - 40);
                      long long v86 = *(_OWORD *)(v83 - 24);
                      *(void *)(v85 - 8) = *((void *)v83 - 1);
                      *(_OWORD *)(v85 - 24) = v86;
                      *(_OWORD *)(v85 - 40) = v8;
                      v85 -= 40;
                      v83 -= 40;
                    }
                    while (v83 != v84);
                    unsigned int v83 = (char *)*((void *)this + 35);
                  }
                  unint64_t v75 = v82 + 40;
                  *((void *)this + 35) = v85;
                  *((void *)this + 36) = v82 + 40;
                  *((void *)this + 37) = v80 + 40 * v81;
                  if (v83) {
                    operator delete(v83);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v73 = v70;
                  *(_DWORD *)(v73 + 4) = v69;
                  *(_DWORD *)(v73 + 8) = v68;
                  *(_DWORD *)(v73 + 12) = v71;
                  *(_DWORD *)(v73 + 16) = v65;
                  *(_DWORD *)(v73 + 20) = v72;
                  *(void *)(v73 + 24) = v60;
                  unint64_t v75 = v73 + 40;
                  *(_DWORD *)(v73 + 32) = v47;
                  *(_DWORD *)(v73 + 36) = 0;
                }
                *((void *)this + 36) = v75;
              }
            }
          }
        }
        goto LABEL_58;
      }
      uint64_t v44 = v40;
LABEL_58:
      uint64_t v39 = *((void *)this + 6);
      uint64_t v40 = v44;
      if (!v39)
      {
        unint64_t v87 = *((void *)this + 35);
        unint64_t v38 = *((void *)this + 36);
        goto LABEL_103;
      }
    }
  }
  unint64_t v87 = v38;
LABEL_103:
  unint64_t v88 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - v87) >> 3));
  if (v38 == v87) {
    uint64_t v89 = 0;
  }
  else {
    uint64_t v89 = v88;
  }
  std::__introsort<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*,false>(v87, v38, v89, 1, *(double *)&v8);
  BOOL v90 = (char *)*((void *)this + 35);
  uint64_t v91 = (char *)*((void *)this + 36);
  if (v90 != v91)
  {
    int v92 = 0;
    uint64_t v93 = *((void *)this + 35);
    do
    {
      *(_DWORD *)(v93 + 32) = v92++;
      v93 += 40;
    }
    while ((char *)v93 != v91);
  }
  std::vector<ShaderProfilerUSCSampleInfo>::__insert_with_size[abi:nn180100]<std::__wrap_iter<ShaderProfilerUSCSampleInfo*>,std::__wrap_iter<ShaderProfilerUSCSampleInfo*>>((uint64_t)this + 256, *((char **)this + 33), v90, v91, 0xCCCCCCCCCCCCCCCDLL * ((v91 - v90) >> 3));
}

void ProfileEventHelper::ProcessQueueLegacy(ProfileEventHelper *this)
{
  unsigned int v2 = (void **)*((void *)this + 14);
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 18) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *((void *)this + 15);
      unsigned int v2 = (void **)(*((void *)this + 14) + 8);
      *((void *)this + 14) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 512;
  }
  *((void *)this + 17) = v6;
LABEL_8:
  std::deque<unsigned int>::push_front((char **)this + 19, (_DWORD *)this + 124);
  std::deque<unsigned int>::push_front((char **)this + 25, (_DWORD *)this + 125);
  std::deque<ProfileEvent>::operator=((void *)this + 7, (void *)this + 1);
  *(_DWORD *)this = 0;
  for (uint64_t i = *((void *)this + 12); i; uint64_t i = *((void *)this + 12))
  {
    ++*(_DWORD *)this;
    unint64_t v8 = *((void *)this + 11);
    uint64_t v70 = *(void *)(*(void *)(*((void *)this + 8) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
    unsigned int v9 = v70;
    *((void *)this + 11) = v8 + 1;
    *((void *)this + 12) = i - 1;
    std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 56);
    if (v9 >> 28)
    {
      switch(v9 >> 28)
      {
        case 1u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          HIDWORD(v70) = *(_DWORD *)this;
          std::deque<ProfileEvent>::emplace_back<ProfileEvent&>((void *)this + 38, &v70);
          break;
        case 2u:
          uint64_t v10 = *((void *)this + 39);
          if (*((void *)this + 40) != v10)
          {
            unint64_t v11 = *((void *)this + 42);
            uint64_t v12 = (int **)(v10 + 8 * (v11 >> 9));
            unsigned int v13 = *v12;
            unsigned int v14 = &(*v12)[2 * (v11 & 0x1FF)];
            uint64_t v15 = *(void *)(v10 + (((*((void *)this + 43) + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * ((*((void *)this + 43) + v11) & 0x1FF);
            while (v14 != (int *)v15)
            {
              if (*v14 >> 28 == 1)
              {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)this + 352, v14[1], v14[1]);
                int *v14 = *v14 & 0xFFFFFFF | 0x20000000;
                goto LABEL_12;
              }
              v14 += 2;
              if ((char *)v14 - (char *)v13 == 4096)
              {
                int v16 = v12[1];
                ++v12;
                unsigned int v13 = v16;
                unsigned int v14 = v16;
              }
            }
          }
          break;
        case 3u:
          uint64_t v17 = *((void *)this + 43);
          if (v17)
          {
            ++*((void *)this + 42);
            *((void *)this + 43) = v17 - 1;
            std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 304);
          }
          break;
        default:
          continue;
      }
    }
LABEL_12:
    ;
  }
  for (uint64_t j = *((void *)this + 43); j; uint64_t j = *((void *)this + 43))
  {
    unsigned int v19 = *(_DWORD *)(*(void *)(*((void *)this + 39) + ((*((void *)this + 42) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (*((void *)this + 42) & 0x1FFLL)
                    + 4);
    ++*((void *)this + 42);
    *((void *)this + 43) = j - 1;
    std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 304);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)this + 352, v19, v19);
  }
  *(_DWORD *)this = 0;
  uint64_t v20 = *((void *)this + 6);
  if (v20)
  {
    uint64_t v21 = 0;
    int v22 = 0;
    unsigned int v23 = 0;
    do
    {
      ++*(_DWORD *)this;
      unint64_t v24 = *((void *)this + 5);
      uint64_t v70 = *(void *)(*(void *)(*((void *)this + 2) + ((v24 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v24 & 0x1FF));
      unsigned int v25 = v70;
      *((void *)this + 5) = v24 + 1;
      *((void *)this + 6) = v20 - 1;
      std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 8);
      if (v25 >> 28
        && !std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((void *)this + 44, *(_DWORD *)this))
      {
        unint64_t v27 = *((void *)this + 18);
        uint64_t v26 = v25 & 0xFFFFFFF;
        if (v27) {
          v22 += (v26 - v21) / v27;
        }
        int v69 = v25 & 0xFFFFFFF;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 392, v25 & 0xFFFFFFF, &v69)+ 5) = v22;
        unsigned int v28 = v25 >> 28;
        if (v25 >> 28 <= 7)
        {
          if (((1 << v28) & 0xF6) != 0)
          {
            std::deque<ProfileEvent>::emplace_back<ProfileEvent&>((void *)this + 13, &v70);
          }
          else if (v28 == 3)
          {
            uint64_t v29 = *((void *)this + 18);
            if (v29)
            {
              unsigned int v30 = *(_DWORD *)(*(void *)(*((void *)this + 14)
                                          + ((*((void *)this + 17) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*((void *)this + 17) & 0x1FFLL));
              ++*((void *)this + 17);
              *((void *)this + 18) = v29 - 1;
              std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 104);
              int v69 = v30 & 0xFFFFFFF;
              int v31 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 392, v30 & 0xFFFFFFF, &v69)+ 5);
              int v69 = v26;
              long long v32 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 392, v26, &v69);
              unint64_t v33 = *((void *)this + 24);
              uint64_t v34 = (*((unsigned int *)this + 125) | (v33 << 36)) & 0x3000000FFFLL;
              unsigned int v68 = v23;
              if (v33 < 2 || (unint64_t v35 = *((void *)this + 30), v35 < 2))
              {
                int v39 = 0;
                int v36 = 0;
              }
              else
              {
                int v36 = 0;
                uint64_t v37 = *((void *)this + 23);
                uint64_t v38 = *((void *)this + 20);
                int v39 = *(_DWORD *)(*(void *)(v38 + (((unint64_t)(v37 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * ((v37 + 1) & 0x3FF));
                uint64_t v40 = *((void *)this + 29);
                uint64_t v41 = *((void *)this + 26);
                v34 |= (unint64_t)(*(_DWORD *)(*(void *)(v41
                                                                + (((unint64_t)(v40 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                    + 4 * ((v40 + 1) & 0x3FF)) & 0xFFF) << 12;
                if (v33 >= 3 && v35 != 2)
                {
                  int v36 = *(_DWORD *)(*(void *)(v38 + (((unint64_t)(v37 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * ((v37 + 2) & 0x3FF));
                  v34 |= (unint64_t)(*(_DWORD *)(*(void *)(v41
                                                                  + (((unint64_t)(v40 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                      + 4 * ((v40 + 2) & 0x3FF)) & 0xFFF) << 24;
                }
              }
              int v42 = *((_DWORD *)v32 + 5) - v31;
              int v44 = *((_DWORD *)this + 62);
              int v43 = *((_DWORD *)this + 63);
              int v45 = *((_DWORD *)this + 124);
              if (v44 == -1) {
                BOOL v46 = v30 >> 28 == 2;
              }
              else {
                BOOL v46 = v36;
              }
              unint64_t v47 = *((void *)this + 33);
              unint64_t v48 = *((void *)this + 34);
              if (v47 >= v48)
              {
                uint64_t v50 = *((void *)this + 32);
                unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v50) >> 3);
                unint64_t v52 = v51 + 1;
                if (v51 + 1 > 0x666666666666666) {
                  abort();
                }
                unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v50) >> 3);
                if (2 * v53 > v52) {
                  unint64_t v52 = 2 * v53;
                }
                if (v53 >= 0x333333333333333) {
                  unint64_t v54 = 0x666666666666666;
                }
                else {
                  unint64_t v54 = v52;
                }
                if (v54)
                {
                  uint64_t v67 = v34;
                  int v55 = v39;
                  int v65 = *((_DWORD *)this + 124);
                  int v66 = v42;
                  int v63 = *((_DWORD *)this + 63);
                  BOOL v64 = v46;
                  unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(v54);
                  int v43 = v63;
                  BOOL v46 = v64;
                  int v45 = v65;
                  int v42 = v66;
                  int v39 = v55;
                  uint64_t v34 = v67;
                }
                else
                {
                  uint64_t v56 = 0;
                }
                unint64_t v57 = v54 + 40 * v51;
                *(_DWORD *)unint64_t v57 = v44;
                *(_DWORD *)(v57 + 4) = v43;
                *(_DWORD *)(v57 + 8) = v42;
                *(_DWORD *)(v57 + 12) = v45;
                *(_DWORD *)(v57 + 16) = v39;
                *(_DWORD *)(v57 + 20) = v46;
                *(void *)(v57 + 24) = v34;
                unsigned int v23 = v68;
                *(void *)(v57 + 32) = v68;
                unint64_t v59 = (char *)*((void *)this + 32);
                unsigned int v58 = (char *)*((void *)this + 33);
                unint64_t v60 = v57;
                if (v58 != v59)
                {
                  do
                  {
                    long long v61 = *(_OWORD *)(v58 - 40);
                    long long v62 = *(_OWORD *)(v58 - 24);
                    *(void *)(v60 - 8) = *((void *)v58 - 1);
                    *(_OWORD *)(v60 - 24) = v62;
                    *(_OWORD *)(v60 - 40) = v61;
                    v60 -= 40;
                    v58 -= 40;
                  }
                  while (v58 != v59);
                  unsigned int v58 = (char *)*((void *)this + 32);
                }
                unint64_t v49 = v57 + 40;
                *((void *)this + 32) = v60;
                *((void *)this + 33) = v57 + 40;
                *((void *)this + 34) = v54 + 40 * v56;
                if (v58) {
                  operator delete(v58);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v47 = v44;
                *(_DWORD *)(v47 + 4) = v43;
                *(_DWORD *)(v47 + 8) = v42;
                *(_DWORD *)(v47 + 12) = v45;
                *(_DWORD *)(v47 + 16) = v39;
                *(_DWORD *)(v47 + 20) = v46;
                *(void *)(v47 + 24) = v34;
                unint64_t v49 = v47 + 40;
                *(void *)(v47 + 32) = v23;
              }
              ++v23;
              *((void *)this + 33) = v49;
            }
          }
        }
      }
      else
      {
        uint64_t v26 = v21;
      }
      uint64_t v20 = *((void *)this + 6);
      uint64_t v21 = v26;
    }
    while (v20);
  }
}

void std::deque<ProfileEvent>::emplace_back<unsigned int &,unsigned int &>(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  uint64_t v8 = ((v6 - v7) << 6) - 1;
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  unint64_t v9 = a1[5] + a1[4];
  if (v8 == v9)
  {
    std::deque<ProfileEvent>::__add_back_capacity(a1);
    uint64_t v7 = a1[1];
    unint64_t v9 = a1[5] + a1[4];
  }
  uint64_t v10 = (int *)(*(void *)(v7 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
  *uint64_t v10 = *a2 & 0xFFFFFFF | (*a3 << 28);
  v10[1] = -1;
  ++a1[5];
}

void std::deque<ProfileEvent>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(void *)uint64_t v6 = v8;
      a1[2] += 8;
      return;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v28 = 1;
      }
      else {
        unint64_t v28 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v28);
      unsigned int v30 = &v29[8 * (v28 >> 2)];
      long long v32 = &v29[8 * v31];
      unint64_t v33 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      uint64_t v34 = a1[2] - (void)v33;
      if (v34)
      {
        uint64_t v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v35 = 8 * (v34 >> 3);
        int v36 = &v29[8 * (v28 >> 2)];
        do
        {
          uint64_t v37 = *v33++;
          *(void *)int v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  uint64_t v19 = a1[2];
  unint64_t v20 = (v19 - a1[1]) >> 3;
  uint64_t v21 = a1[3];
  uint64_t v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(void *)&long long v49 = operator new(0x1000uLL);
      std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(a1, &v49);
      return;
    }
    *(void *)&long long v49 = operator new(0x1000uLL);
    std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v49);
    int v39 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v40 = *v39;
    uint64_t v7 = (char *)(v39 + 1);
    uint64_t v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_31;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v41);
      unsigned int v30 = &v29[8 * (v41 >> 2)];
      long long v32 = &v29[8 * v42];
      int v43 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        BOOL v46 = &v29[8 * (v41 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)BOOL v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      uint64_t v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22 >> 2;
  }
  unint64_t v51 = a1 + 3;
  *(void *)&long long v49 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v23);
  *((void *)&v49 + 1) = v49 + 8 * v20;
  *(void *)&long long v50 = *((void *)&v49 + 1);
  *((void *)&v50 + 1) = v49 + 8 * v24;
  unint64_t v48 = operator new(0x1000uLL);
  std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v49, &v48);
  for (uint64_t i = (void *)a1[2];
        i != (void *)a1[1];
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  uint64_t v26 = (char *)*a1;
  long long v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26) {
    operator delete(v26);
  }
}

void sub_28CBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<unsigned int>::push_front(char **a1, _DWORD *a2)
{
  unint64_t v4 = (unint64_t)a1[4];
  if (!v4)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
    uint64_t v7 = ((v6 - v5) << 7) - 1;
    if (v6 == v5) {
      uint64_t v7 = 0;
    }
    if ((unint64_t)(v7 - (void)a1[5]) < 0x400)
    {
      uint64_t v8 = a1[3];
      uint64_t v9 = *a1;
      uint64_t v10 = v8 - *a1;
      if (v6 - v5 >= (unint64_t)v10)
      {
        if (v8 == v9) {
          unint64_t v11 = 1;
        }
        else {
          unint64_t v11 = v10 >> 2;
        }
        uint64_t v47 = a1 + 3;
        int v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v11);
        uint64_t v44 = v43;
        uint64_t v45 = v43;
        BOOL v46 = &v43[8 * v12];
        uint64_t v42 = operator new(0x1000uLL);
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v43, &v42);
        uint64_t v14 = (uint64_t *)a1[1];
        uint64_t v13 = a1[2];
        uint64_t v15 = v45;
        while (v14 != (uint64_t *)v13)
        {
          if (v15 == v46)
          {
            uint64_t v17 = v43;
            uint64_t v16 = v44;
            if (v44 <= v43)
            {
              if (v15 == v43) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v15 - v43) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v23);
              uint64_t v27 = v15 - v16;
              BOOL v26 = v15 == v16;
              uint64_t v15 = &v24[8 * (v23 >> 2)];
              if (!v26)
              {
                uint64_t v15 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v16;
                  v16 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              int v43 = v24;
              uint64_t v44 = &v24[8 * (v23 >> 2)];
              uint64_t v45 = v15;
              BOOL v46 = &v24[8 * v25];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              uint64_t v18 = (v44 - v43) >> 3;
              if (v18 >= -1) {
                uint64_t v19 = v18 + 1;
              }
              else {
                uint64_t v19 = v18 + 2;
              }
              unint64_t v20 = &v44[-8 * (v19 >> 1)];
              int64_t v21 = v15 - v44;
              if (v15 != v44)
              {
                memmove(&v44[-8 * (v19 >> 1)], v44, v15 - v44);
                uint64_t v15 = v16;
              }
              uint64_t v22 = &v15[-8 * (v19 >> 1)];
              uint64_t v15 = &v20[v21];
              uint64_t v44 = v22;
              uint64_t v45 = &v20[v21];
            }
          }
          uint64_t v31 = *v14++;
          *(void *)uint64_t v15 = v31;
          uint64_t v15 = v45 + 8;
          v45 += 8;
          uint64_t v13 = a1[2];
        }
        long long v32 = *a1;
        unint64_t v33 = v44;
        *a1 = v43;
        a1[1] = v33;
        uint64_t v34 = v46;
        a1[2] = v15;
        a1[3] = v34;
        if (v15 - v33 == 8) {
          uint64_t v35 = 512;
        }
        else {
          uint64_t v35 = (uint64_t)(a1[4] + 1024);
        }
        a1[4] = (char *)v35;
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        if (v5 == v9)
        {
          int v43 = (char *)operator new(0x1000uLL);
          std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(a1, &v43);
          int v36 = a1[2];
          int v43 = (char *)*((void *)v36 - 1);
          a1[2] = v36 - 8;
        }
        else
        {
          int v43 = (char *)operator new(0x1000uLL);
        }
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v43);
        if (a1[2] - a1[1] == 8) {
          uint64_t v37 = 512;
        }
        else {
          uint64_t v37 = (uint64_t)(a1[4] + 1024);
        }
        a1[4] = (char *)v37;
      }
    }
    else
    {
      a1[4] = (unsigned char *)(&stru_3D8 + 40);
      int v43 = (char *)*((void *)v6 - 1);
      a1[2] = v6 - 8;
      std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v43);
    }
    unint64_t v4 = (unint64_t)a1[4];
  }
  uint64_t v38 = a1[1];
  int v39 = &v38[8 * (v4 >> 10)];
  if (a1[2] == v38) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = *(void *)v39 + 4 * (v4 & 0x3FF);
  }
  if (v40 == *(void *)v39) {
    uint64_t v40 = *((void *)v39 - 1) + 4096;
  }
  *(_DWORD *)(v40 - 4) = *a2;
  uint64_t v41 = (uint64_t)(a1[5] + 1);
  a1[4] = (char *)(v4 - 1);
  a1[5] = (char *)v41;
}

void sub_28CEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::deque<ProfileEvent>::operator=(void *a1, void *a2)
{
  if (a1 == a2) {
    return a1;
  }
  unint64_t v3 = a2[4];
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)(v4 + 8 * (v3 >> 9));
  if (a2[2] == v4)
  {
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = (char *)(v4 + 8 * ((a2[5] + v3) >> 9));
  }
  else
  {
    uint64_t v6 = (unsigned char *)(*(void *)v5 + 8 * (a2[4] & 0x1FFLL));
    unint64_t v7 = a2[5] + v3;
    uint64_t v8 = (char *)(v4 + 8 * (v7 >> 9));
    uint64_t v9 = *(void *)v8 + 8 * (v7 & 0x1FF);
  }
  if ((unsigned char *)v9 == v6)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = ((v9 - *(void *)v8) >> 3) + ((v8 - v5) << 6) - ((uint64_t)&v6[-*(void *)v5] >> 3);
    unint64_t v11 = a1[5];
    if (v11 < v10)
    {
      uint64_t v13 = std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](v5, (uint64_t)v6, v11);
      uint64_t v14 = v12;
      uint64_t v15 = a1[1];
      if (a1[2] == v15) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = *(void *)(v15 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
      }
      uint64_t v29 = (char *)(v15 + 8 * (a1[4] >> 9));
      uint64_t v30 = v16;
      std::__for_each_segment[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>>>((uint64_t *)v5, v6, v13, v12, (uint64_t)&v29);
      std::deque<ProfileEvent>::__append_with_size[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>>(a1, v13, v14, v10 - a1[5]);
      return a1;
    }
  }
  uint64_t v17 = a1[1];
  uint64_t v18 = (char *)(v17 + 8 * (a1[4] >> 9));
  if (a1[2] == v17) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)v18 + 8 * (a1[4] & 0x1FFLL);
  }
  unint64_t v20 = std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](v5, (uint64_t)v6, v10);
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  std::__for_each_segment[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>>>((uint64_t *)v5, v6, v20, v21, (uint64_t)&v29);
  uint64_t v22 = a1[5];
  unint64_t v23 = a1[4] + v22;
  uint64_t v24 = a1[1];
  uint64_t v25 = (char *)(v24 + 8 * (v23 >> 9));
  if (a1[2] == v24) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = *(void *)v25 + 8 * (v23 & 0x1FF);
  }
  if (v26 != v30)
  {
    uint64_t v27 = ((v26 - *(void *)v25) >> 3) + ((v25 - v29) << 6) - ((v30 - *(void *)v29) >> 3);
    if (v27 >= 1)
    {
      a1[5] = v22 - v27;
      while (std::deque<ProfileEvent>::__maybe_remove_back_spare[abi:nn180100](a1))
        ;
    }
  }
  return a1;
}

void std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100](uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
}

void std::deque<ProfileEvent>::emplace_back<ProfileEvent&>(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<ProfileEvent>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void *std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 3);
    if (v3 < 1) {
      result -= (unint64_t)(511 - v3) >> 9;
    }
    else {
      result += (unint64_t)v3 >> 9;
    }
  }
  return result;
}

double std::__for_each_segment[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>>>(uint64_t *a1, unsigned char *a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v19 = *(void **)a5;
    unint64_t v20 = *(char **)(a5 + 8);
    uint64_t v18 = a4;
  }
  else
  {
    uint64_t v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(&v22, a2, (unsigned char *)(*a1 + 4096), *(void **)a5, *(char **)(a5 + 8));
    *(_OWORD *)a5 = v23;
    uint64_t v9 = *(void **)a5;
    for (uint64_t i = *(char **)(a5 + 8); v8 != a3; ++v8)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *v8;
      uint64_t v13 = (char *)*v9;
      while (1)
      {
        uint64_t v14 = v13 - i + 4096;
        if ((4096 - 8 * v11) >> 3 >= v14 >> 3) {
          uint64_t v15 = v14 >> 3;
        }
        else {
          uint64_t v15 = (4096 - 8 * v11) >> 3;
        }
        if (v15) {
          memmove(i, (const void *)(v12 + 8 * v11), 8 * v15);
        }
        v11 += v15;
        if (v11 == 512) {
          break;
        }
        uint64_t v16 = (char *)v9[1];
        ++v9;
        uint64_t v13 = v16;
        uint64_t i = v16;
      }
      i += 8 * v15;
      if ((char *)(*v9 + 4096) == i)
      {
        uint64_t v17 = (char *)v9[1];
        ++v9;
        uint64_t i = v17;
      }
      *(void *)a5 = v9;
      *(void *)(a5 + 8) = i;
    }
    a2 = (unsigned char *)*a3;
    uint64_t v18 = a4;
    uint64_t v19 = v9;
    unint64_t v20 = i;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(&v22, a2, v18, v19, v20);
  double result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  return result;
}

char *std::deque<ProfileEvent>::__append_with_size[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>>(void *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = (char *)a1[1];
  uint64_t v9 = (char *)a1[2];
  uint64_t v10 = v9 - v8;
  if (v9 == v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v12 = a1[4];
  uint64_t v13 = a1[5];
  unint64_t v14 = v13 + v12;
  unint64_t v15 = v11 - (v13 + v12);
  BOOL v16 = a4 >= v15;
  unint64_t v17 = a4 - v15;
  if (v17 != 0 && v16)
  {
    if (v9 == v8) {
      unint64_t v18 = v17 + 1;
    }
    else {
      unint64_t v18 = v17;
    }
    unint64_t v19 = v18 >> 9;
    if ((v18 & 0x1FF) != 0) {
      ++v19;
    }
    if (v19 >= v12 >> 9) {
      unint64_t v20 = v12 >> 9;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v19 <= v12 >> 9)
    {
      for (a1[4] = v12 - (v20 << 9); v20; --v20)
      {
        uint64_t v27 = (void *)a1[1];
        uint64_t v30 = *v27;
        uint64_t v28 = (char *)(v27 + 1);
        uint64_t v29 = v30;
        a1[1] = v28;
        if (v9 == (char *)a1[3])
        {
          uint64_t v31 = (uint64_t)&v28[-*a1];
          if ((unint64_t)v28 <= *a1)
          {
            if (v9 == (char *)*a1) {
              unint64_t v39 = 1;
            }
            else {
              unint64_t v39 = (uint64_t)&v9[-*a1] >> 2;
            }
            uint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v39);
            uint64_t v42 = &v40[8 * (v39 >> 2)];
            int v43 = (uint64_t *)a1[1];
            uint64_t v9 = v42;
            uint64_t v44 = a1[2] - (void)v43;
            if (v44)
            {
              uint64_t v9 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v45 = 8 * (v44 >> 3);
              BOOL v46 = &v40[8 * (v39 >> 2)];
              do
              {
                uint64_t v47 = *v43++;
                *(void *)BOOL v46 = v47;
                v46 += 8;
                v45 -= 8;
              }
              while (v45);
            }
            unint64_t v48 = (char *)*a1;
            *a1 = v40;
            a1[1] = v42;
            a1[2] = v9;
            a1[3] = &v40[8 * v41];
            if (v48)
            {
              operator delete(v48);
              uint64_t v9 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v32 = v31 >> 3;
            BOOL v33 = v31 >> 3 < -1;
            uint64_t v34 = (v31 >> 3) + 2;
            if (v33) {
              uint64_t v35 = v34;
            }
            else {
              uint64_t v35 = v32 + 1;
            }
            int v36 = &v28[-8 * (v35 >> 1)];
            int64_t v37 = v9 - v28;
            if (v9 != v28)
            {
              memmove(&v28[-8 * (v35 >> 1)], v28, v9 - v28);
              uint64_t v9 = (char *)a1[1];
            }
            uint64_t v38 = &v9[-8 * (v35 >> 1)];
            uint64_t v9 = &v36[v37];
            a1[1] = v38;
            a1[2] = &v36[v37];
          }
        }
        *(void *)uint64_t v9 = v29;
        uint64_t v9 = (char *)(a1[2] + 8);
        a1[2] = v9;
      }
    }
    else
    {
      unint64_t v21 = v19 - v20;
      uint64_t v22 = a1[3] - *a1;
      if (v21 <= (v22 >> 3) - (v10 >> 3))
      {
        if (v21)
        {
          while (a1[3] != a1[2])
          {
            *(void *)&long long v106 = operator new(0x1000uLL);
            std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(a1, &v106);
            if (!--v21)
            {
              uint64_t v9 = (char *)a1[2];
              goto LABEL_78;
            }
          }
          for (uint64_t i = 0; i != v21; ++i)
          {
            *(void *)&long long v106 = operator new(0x1000uLL);
            std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v106);
            uint64_t v9 = (char *)a1[2];
            if (&v9[-a1[1]] == (char *)&dword_8) {
              uint64_t v71 = 511;
            }
            else {
              uint64_t v71 = 512;
            }
            uint64_t v72 = v71 + a1[4];
            a1[4] = v72;
          }
          v20 += v21;
        }
        else
        {
LABEL_78:
          uint64_t v72 = a1[4];
        }
        for (a1[4] = v72 - (v20 << 9); v20; --v20)
        {
          unint64_t v73 = (void *)a1[1];
          uint64_t v76 = *v73;
          unint64_t v74 = (char *)(v73 + 1);
          uint64_t v75 = v76;
          a1[1] = v74;
          if (v9 == (char *)a1[3])
          {
            uint64_t v77 = (uint64_t)&v74[-*a1];
            if ((unint64_t)v74 <= *a1)
            {
              if (v9 == (char *)*a1) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (uint64_t)&v9[-*a1] >> 2;
              }
              unint64_t v85 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v84);
              unint64_t v87 = &v85[8 * (v84 >> 2)];
              unint64_t v88 = (uint64_t *)a1[1];
              uint64_t v9 = v87;
              uint64_t v89 = a1[2] - (void)v88;
              if (v89)
              {
                uint64_t v9 = &v87[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = &v85[8 * (v84 >> 2)];
                do
                {
                  uint64_t v92 = *v88++;
                  *(void *)uint64_t v91 = v92;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              uint64_t v93 = (char *)*a1;
              *a1 = v85;
              a1[1] = v87;
              a1[2] = v9;
              a1[3] = &v85[8 * v86];
              if (v93)
              {
                operator delete(v93);
                uint64_t v9 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v78 = v77 >> 3;
              BOOL v33 = v77 >> 3 < -1;
              uint64_t v79 = (v77 >> 3) + 2;
              if (v33) {
                uint64_t v80 = v79;
              }
              else {
                uint64_t v80 = v78 + 1;
              }
              uint64_t v81 = &v74[-8 * (v80 >> 1)];
              int64_t v82 = v9 - v74;
              if (v9 != v74)
              {
                memmove(&v74[-8 * (v80 >> 1)], v74, v9 - v74);
                uint64_t v9 = (char *)a1[1];
              }
              unsigned int v83 = &v9[-8 * (v80 >> 1)];
              uint64_t v9 = &v81[v82];
              a1[1] = v83;
              a1[2] = &v81[v82];
            }
          }
          *(void *)uint64_t v9 = v75;
          uint64_t v9 = (char *)(a1[2] + 8);
          a1[2] = v9;
        }
      }
      else
      {
        uint64_t v23 = v10 >> 3;
        if (v22 >> 2 <= v21 + (v10 >> 3)) {
          unint64_t v24 = v21 + v23;
        }
        else {
          unint64_t v24 = v22 >> 2;
        }
        unint64_t v25 = v23 - v20;
        unint64_t v108 = a1 + 3;
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v24);
        }
        else {
          uint64_t v26 = 0;
        }
        *(void *)&long long v106 = v24;
        *((void *)&v106 + 1) = v24 + 8 * v25;
        *(void *)&long long v107 = *((void *)&v106 + 1);
        *((void *)&v107 + 1) = v24 + 8 * v26;
        do
        {
          unsigned int v105 = operator new(0x1000uLL);
          std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v106, &v105);
          --v21;
        }
        while (v21);
        uint64_t v103 = v20 << 9;
        uint64_t v104 = v4;
        if (v20)
        {
          long long v49 = (void *)a1[1];
          long long v50 = (char *)v107;
          do
          {
            if (v50 == *((char **)&v107 + 1))
            {
              unint64_t v51 = (char *)*((void *)&v106 + 1);
              unint64_t v52 = (void *)v106;
              if (*((void *)&v106 + 1) <= (unint64_t)v106)
              {
                if (v50 == (char *)v106) {
                  unint64_t v58 = 1;
                }
                else {
                  unint64_t v58 = (uint64_t)&v50[-v106] >> 2;
                }
                unint64_t v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v58);
                uint64_t v62 = v50 - v51;
                BOOL v61 = v50 == v51;
                long long v50 = &v59[8 * (v58 >> 2)];
                if (!v61)
                {
                  long long v50 = &v59[8 * (v58 >> 2) + (v62 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v63 = 8 * (v62 >> 3);
                  BOOL v64 = &v59[8 * (v58 >> 2)];
                  do
                  {
                    uint64_t v65 = *(void *)v51;
                    v51 += 8;
                    *(void *)BOOL v64 = v65;
                    v64 += 8;
                    v63 -= 8;
                  }
                  while (v63);
                }
                *(void *)&long long v106 = v59;
                *((void *)&v106 + 1) = &v59[8 * (v58 >> 2)];
                *(void *)&long long v107 = v50;
                *((void *)&v107 + 1) = &v59[8 * v60];
                if (v52) {
                  operator delete(v52);
                }
              }
              else
              {
                uint64_t v53 = (uint64_t)(*((void *)&v106 + 1) - v106) >> 3;
                if (v53 >= -1) {
                  uint64_t v54 = v53 + 1;
                }
                else {
                  uint64_t v54 = v53 + 2;
                }
                uint64_t v55 = *((void *)&v106 + 1) - 8 * (v54 >> 1);
                uint64_t v56 = &v50[-*((void *)&v106 + 1)];
                if (v50 != *((char **)&v106 + 1))
                {
                  memmove((void *)(*((void *)&v106 + 1) - 8 * (v54 >> 1)), *((const void **)&v106 + 1), (size_t)&v50[-*((void *)&v106 + 1)]);
                  long long v50 = v51;
                }
                unint64_t v57 = &v50[-8 * (v54 >> 1)];
                long long v50 = &v56[v55];
                *((void *)&v106 + 1) = v57;
                *(void *)&long long v107 = &v56[v55];
              }
            }
            *(void *)long long v50 = *v49;
            long long v50 = (char *)(v107 + 8);
            *(void *)&long long v107 = v107 + 8;
            long long v49 = (void *)(a1[1] + 8);
            a1[1] = v49;
            --v20;
          }
          while (v20);
        }
        int v66 = (void *)a1[2];
        uint64_t v4 = v104;
        while (v66 != (void *)a1[1])
          std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)&v106, --v66);
        long long v69 = v106;
        long long v68 = v107;
        *(void *)&long long v106 = *a1;
        uint64_t v67 = (void *)v106;
        *((void *)&v106 + 1) = v66;
        *(_OWORD *)a1 = v69;
        *((_OWORD *)a1 + 1) = v68;
        a1[4] -= v103;
        if (v67)
        {
          operator delete(v67);
          uint64_t v9 = (char *)a1[2];
        }
        else
        {
          uint64_t v9 = (char *)v68;
        }
      }
    }
    uint64_t v13 = a1[5];
    uint64_t v8 = (char *)a1[1];
    unint64_t v14 = a1[4] + v13;
  }
  int v94 = &v8[8 * (v14 >> 9)];
  if (v9 == v8) {
    uint64_t v95 = 0;
  }
  else {
    uint64_t v95 = *(void *)v94 + 8 * (v14 & 0x1FF);
  }
  double result = (char *)std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](v94, v95, v4);
  while (v95 != v97)
  {
    int v98 = (void *)(v94 == result ? v97 : *(void *)v94 + 4096);
    if ((void *)v95 == v98)
    {
      int v98 = (void *)v95;
    }
    else
    {
      uint64_t v99 = (void *)v95;
      do
      {
        uint64_t v100 = *a3++;
        *v99++ = v100;
        if ((char *)a3 - *a2 == "ework/LLDB")
        {
          uint64_t v101 = (uint64_t *)a2[1];
          ++a2;
          a3 = v101;
        }
      }
      while (v99 != v98);
      uint64_t v13 = a1[5];
    }
    v13 += ((uint64_t)v98 - v95) >> 3;
    a1[5] = v13;
    if (v94 == result) {
      break;
    }
    uint64_t v102 = *((void *)v94 + 1);
    v94 += 8;
    uint64_t v95 = v102;
  }
  return result;
}

void sub_28D944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::deque<ProfileEvent>::__maybe_remove_back_spare[abi:nn180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 6) - 1;
  }
  unint64_t v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x3FF;
}

void *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(void *result, unsigned char *__src, unsigned char *a3, void *a4, char *__dst)
{
  uint64_t v6 = a4;
  uint64_t v8 = result;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      if ((a3 - v9) >> 3 >= v11 >> 3) {
        uint64_t v12 = v11 >> 3;
      }
      else {
        uint64_t v12 = (a3 - v9) >> 3;
      }
      if (v12) {
        double result = memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)v6[1];
      ++v6;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)(*v6 + 4096) == __dst)
    {
      unint64_t v14 = (char *)v6[1];
      ++v6;
      __dst = v14;
    }
  }
  *uint64_t v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void std::deque<ProfileEvent>::erase(int64x2_t *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1->i64[1];
  uint64_t v5 = a1[1].i64[0];
  uint64_t v6 = (char *)(v4 + 8 * ((unint64_t)a1[2].i64[0] >> 9));
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)v6 + 8 * (a1[2].i64[0] & 0x1FF);
  }
  if (v7 == a3) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = ((a3 - *(void *)a2) >> 3) + ((a2 - v6) << 6) - ((v7 - *(void *)v6) >> 3);
  }
  uint64_t v9 = (char **)std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](v6, v7, v8);
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = a1[2].i64[1];
  uint64_t v14 = v10 - *v9;
  uint64_t v15 = v14 >> 3;
  if (v8 <= (unint64_t)(v13 - 1) >> 1)
  {
    if (v14 < -7)
    {
      unint64_t v18 = &v9[-((unint64_t)(510 - v15) >> 9)];
      unint64_t v19 = &(*v18)[8 * (~(510 - (_WORD)v15) & 0x1FF)];
    }
    else
    {
      unint64_t v18 = &v9[(unint64_t)(v15 + 1) >> 9];
      unint64_t v19 = &(*v18)[8 * (((_WORD)v15 + 1) & 0x1FF)];
    }
    if (v6 == (char *)v9)
    {
      int v36 = (char *)v7;
      uint64_t v35 = v12;
    }
    else
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<ProfileEvent *,std::__deque_iterator<ProfileEvent,ProfileEvent *,ProfileEvent&,ProfileEvent **,long,512l>,0>(&v50, *v9, v10, v18, v19);
      unint64_t v25 = v51;
      uint64_t v26 = v52;
      uint64_t v27 = (char *)(v11 - 1);
      if (v11 - 1 != (char **)v6)
      {
        uint64_t v28 = *v51;
        do
        {
          uint64_t v29 = *(unsigned char **)v27;
          uint64_t v30 = (char *)(*(void *)v27 + 4096);
          while (1)
          {
            uint64_t v31 = v26 - v28;
            if ((v30 - v29) >> 3 >= v31 >> 3) {
              uint64_t v32 = v31 >> 3;
            }
            else {
              uint64_t v32 = (v30 - v29) >> 3;
            }
            v30 -= 8 * v32;
            v26 -= 8 * v32;
            if (v32) {
              memmove(v26, v30, 8 * v32);
            }
            if (v30 == v29) {
              break;
            }
            BOOL v33 = *--v25;
            uint64_t v28 = v33;
            uint64_t v26 = v33 + 4096;
          }
          uint64_t v28 = *v25;
          if (*v25 + 4096 == v26)
          {
            uint64_t v34 = v25[1];
            ++v25;
            uint64_t v28 = v34;
            uint64_t v26 = v34;
          }
          v27 -= 8;
        }
        while (v27 != v6);
      }
      uint64_t v35 = (char *)(*(void *)v6 + 4096);
      int v36 = (char *)v7;
      unint64_t v18 = v25;
      unint64_t v19 = v26;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<ProfileEvent *,std::__deque_iterator<ProfileEvent,ProfileEvent *,ProfileEvent&,ProfileEvent **,long,512l>,0>(&v50, v36, v35, v18, v19);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_4C7D20);
    std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)a1);
  }
  else
  {
    if (v14 < -7)
    {
      unint64_t v20 = 510 - v15;
      __int16 v16 = ~(_WORD)v20;
      unint64_t v17 = &v9[-(v20 >> 9)];
    }
    else
    {
      __int16 v16 = v15 + 1;
      unint64_t v17 = &v9[(unint64_t)(v15 + 1) >> 9];
    }
    unint64_t v21 = &(*v17)[8 * (v16 & 0x1FF)];
    unint64_t v22 = a1[2].i64[0] + v13;
    uint64_t v23 = (char **)(v4 + 8 * (v22 >> 9));
    if (v5 == v4) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = (uint64_t)&(*v23)[8 * (v22 & 0x1FF)];
    }
    if (v17 == v23)
    {
      uint64_t v47 = (unsigned char *)v24;
      unint64_t v48 = v9;
      long long v49 = v12;
    }
    else
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(&v50, v21, *v17 + 4096, v9, v12);
      int64_t v37 = v51;
      uint64_t v38 = v52;
      unint64_t v39 = v17 + 1;
      if (v17 + 1 != v23)
      {
        uint64_t v40 = *v51;
        do
        {
          uint64_t v41 = 0;
          uint64_t v42 = *v39;
          while (1)
          {
            uint64_t v43 = v40 - v38 + 4096;
            if ((4096 - 8 * v41) >> 3 >= v43 >> 3) {
              uint64_t v44 = v43 >> 3;
            }
            else {
              uint64_t v44 = (4096 - 8 * v41) >> 3;
            }
            if (v44) {
              memmove(v38, &v42[8 * v41], 8 * v44);
            }
            v41 += v44;
            if (v41 == 512) {
              break;
            }
            uint64_t v45 = v37[1];
            ++v37;
            uint64_t v40 = v45;
            uint64_t v38 = v45;
          }
          v38 += 8 * v44;
          uint64_t v40 = *v37;
          if (*v37 + 4096 == v38)
          {
            BOOL v46 = v37[1];
            ++v37;
            uint64_t v40 = v46;
            uint64_t v38 = v46;
          }
          ++v39;
        }
        while (v39 != v23);
      }
      unint64_t v21 = *v23;
      uint64_t v47 = (unsigned char *)v24;
      unint64_t v48 = v37;
      long long v49 = v38;
    }
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(&v50, v21, v47, v48, v49);
    --a1[2].i64[1];
    std::deque<ProfileEvent>::__maybe_remove_back_spare[abi:nn180100](a1);
  }
}

double std::__introsort<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, double result)
{
  while (2)
  {
    uint64_t v11 = (long long *)(a2 - 40);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v12) >> 3);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v12 + 32))
                {
                  uint64_t v136 = *(void *)(v12 + 32);
                  long long v121 = *(_OWORD *)v12;
                  long long v129 = *(_OWORD *)(v12 + 16);
                  long long v55 = *v11;
                  long long v56 = *(_OWORD *)(a2 - 24);
                  *(void *)(v12 + 32) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v12 = v55;
                  *(_OWORD *)(v12 + 16) = v56;
                  double result = *(double *)&v121;
                  *(void *)(a2 - 8) = v136;
                  long long *v11 = v121;
                  *(_OWORD *)(a2 - 24) = v129;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)v12, (long long *)(v12 + 40), (long long *)(a2 - 40));
                break;
              case 4uLL:
                *(void *)&double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v12, v12 + 40, v12 + 80, a2 - 40).n128_u64[0];
                break;
              case 5uLL:
                *(void *)&double result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v12, v12 + 40, v12 + 80, v12 + 120, a2 - 40).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 959)
          {
            unint64_t v57 = (_OWORD *)(v12 + 40);
            BOOL v59 = v12 == a2 || v57 == (_OWORD *)a2;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                BOOL v61 = (_DWORD *)v12;
                do
                {
                  uint64_t v62 = v57;
                  unsigned int v63 = v61[18];
                  if (v63 < v61[8])
                  {
                    long long v122 = *v62;
                    long long v130 = v62[1];
                    int v64 = v61[19];
                    uint64_t v65 = v60;
                    while (1)
                    {
                      uint64_t v66 = v12 + v65;
                      long long v67 = *(_OWORD *)(v12 + v65 + 16);
                      *(_OWORD *)(v66 + 40) = *(_OWORD *)(v12 + v65);
                      *(_OWORD *)(v66 + 56) = v67;
                      *(void *)(v66 + 72) = *(void *)(v12 + v65 + 32);
                      if (!v65) {
                        break;
                      }
                      v65 -= 40;
                      if (v63 >= *(_DWORD *)(v66 - 8))
                      {
                        uint64_t v68 = v12 + v65 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v68 = v12;
LABEL_81:
                    double result = *(double *)&v122;
                    *(_OWORD *)uint64_t v68 = v122;
                    *(_OWORD *)(v68 + 16) = v130;
                    *(_DWORD *)(v68 + 32) = v63;
                    *(_DWORD *)(v68 + 36) = v64;
                  }
                  unint64_t v57 = (_OWORD *)((char *)v62 + 40);
                  v60 += 40;
                  BOOL v61 = v62;
                }
                while ((_OWORD *)((char *)v62 + 40) != (_OWORD *)a2);
              }
            }
            else if (!v59)
            {
              do
              {
                long long v107 = v57;
                unsigned int v108 = *(_DWORD *)(a1 + 72);
                if (v108 < *(_DWORD *)(a1 + 32))
                {
                  long long v125 = *v57;
                  long long v133 = v57[1];
                  int v109 = *(_DWORD *)(a1 + 76);
                  unsigned int v110 = v107;
                  do
                  {
                    long long v111 = *(_OWORD *)((char *)v110 - 24);
                    *unsigned int v110 = *(_OWORD *)((char *)v110 - 40);
                    v110[1] = v111;
                    *((void *)v110 + 4) = *((void *)v110 - 1);
                    unsigned int v112 = *((_DWORD *)v110 - 12);
                    unsigned int v110 = (_OWORD *)((char *)v110 - 40);
                  }
                  while (v108 < v112);
                  double result = *(double *)&v125;
                  *unsigned int v110 = v125;
                  v110[1] = v133;
                  *((_DWORD *)v110 + 8) = v108;
                  *((_DWORD *)v110 + 9) = v109;
                }
                unint64_t v57 = (_OWORD *)((char *)v107 + 40);
                a1 = (unint64_t)v107;
              }
              while ((_OWORD *)((char *)v107 + 40) != (_OWORD *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v69 = (v14 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  unint64_t v73 = v12 + 40 * v72;
                  if (2 * v71 + 2 < (uint64_t)v14)
                  {
                    unsigned int v74 = *(_DWORD *)(v12 + 40 * v72 + 32);
                    unsigned int v75 = *(_DWORD *)(v73 + 72);
                    v73 += 40 * (v74 < v75);
                    if (v74 < v75) {
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  unsigned int v76 = *(_DWORD *)(v12 + 40 * v71 + 32);
                  if (*(_DWORD *)(v73 + 32) >= v76)
                  {
                    unint64_t v77 = v12 + 40 * v71;
                    long long v123 = *(_OWORD *)v77;
                    long long v131 = *(_OWORD *)(v77 + 16);
                    int v78 = *(_DWORD *)(v77 + 36);
                    do
                    {
                      unint64_t v79 = v77;
                      unint64_t v77 = v73;
                      long long v80 = *(_OWORD *)v73;
                      long long v81 = *(_OWORD *)(v73 + 16);
                      *(void *)(v79 + 32) = *(void *)(v73 + 32);
                      *(_OWORD *)unint64_t v79 = v80;
                      *(_OWORD *)(v79 + 16) = v81;
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v82 = (2 * v72) | 1;
                      unint64_t v73 = v12 + 40 * v82;
                      uint64_t v83 = 2 * v72 + 2;
                      if (v83 < (uint64_t)v14)
                      {
                        unsigned int v84 = *(_DWORD *)(v12 + 40 * v82 + 32);
                        unsigned int v85 = *(_DWORD *)(v73 + 72);
                        v73 += 40 * (v84 < v85);
                        if (v84 < v85) {
                          uint64_t v82 = v83;
                        }
                      }
                      uint64_t v72 = v82;
                    }
                    while (*(_DWORD *)(v73 + 32) >= v76);
                    *(_OWORD *)unint64_t v77 = v123;
                    *(_OWORD *)(v77 + 16) = v131;
                    *(_DWORD *)(v77 + 32) = v76;
                    *(_DWORD *)(v77 + 36) = v78;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              int64_t v86 = v13 / 0x28uLL;
              do
              {
                uint64_t v87 = 0;
                uint64_t v137 = *(void *)(v12 + 32);
                long long v124 = *(_OWORD *)v12;
                long long v132 = *(_OWORD *)(v12 + 16);
                unint64_t v88 = v12;
                do
                {
                  uint64_t v89 = v87 + 1;
                  unint64_t v90 = v88 + 40 * (v87 + 1);
                  uint64_t v91 = (2 * v87) | 1;
                  uint64_t v92 = 2 * v87 + 2;
                  if (v92 < v86)
                  {
                    unsigned int v93 = *(_DWORD *)(v88 + 40 * v89 + 32);
                    unsigned int v94 = *(_DWORD *)(v90 + 72);
                    v90 += 40 * (v93 < v94);
                    if (v93 < v94) {
                      uint64_t v91 = v92;
                    }
                  }
                  long long v95 = *(_OWORD *)v90;
                  long long v96 = *(_OWORD *)(v90 + 16);
                  *(void *)(v88 + 32) = *(void *)(v90 + 32);
                  *(_OWORD *)unint64_t v88 = v95;
                  *(_OWORD *)(v88 + 16) = v96;
                  unint64_t v88 = v90;
                  uint64_t v87 = v91;
                }
                while (v91 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
                a2 -= 40;
                if (v90 == a2)
                {
                  double result = *(double *)&v124;
                  *(void *)(v90 + 32) = v137;
                  *(_OWORD *)unint64_t v90 = v124;
                  *(_OWORD *)(v90 + 16) = v132;
                }
                else
                {
                  long long v97 = *(_OWORD *)a2;
                  long long v98 = *(_OWORD *)(a2 + 16);
                  *(void *)(v90 + 32) = *(void *)(a2 + 32);
                  *(_OWORD *)unint64_t v90 = v97;
                  *(_OWORD *)(v90 + 16) = v98;
                  double result = *(double *)&v124;
                  *(void *)(a2 + 32) = v137;
                  *(_OWORD *)a2 = v124;
                  *(_OWORD *)(a2 + 16) = v132;
                  uint64_t v99 = v90 - v12 + 40;
                  if (v99 >= 41)
                  {
                    unint64_t v100 = (unint64_t)(-2 - 0x3333333333333333 * (v99 >> 3)) >> 1;
                    unsigned int v101 = *(_DWORD *)(v90 + 32);
                    if (*(_DWORD *)(v12 + 40 * v100 + 32) < v101)
                    {
                      long long v115 = *(_OWORD *)v90;
                      long long v118 = *(_OWORD *)(v90 + 16);
                      int v102 = *(_DWORD *)(v90 + 36);
                      do
                      {
                        unint64_t v103 = v90;
                        unint64_t v90 = v12 + 40 * v100;
                        long long v104 = *(_OWORD *)v90;
                        long long v105 = *(_OWORD *)(v90 + 16);
                        *(void *)(v103 + 32) = *(void *)(v90 + 32);
                        *(_OWORD *)unint64_t v103 = v104;
                        *(_OWORD *)(v103 + 16) = v105;
                        if (!v100) {
                          break;
                        }
                        unint64_t v100 = (v100 - 1) >> 1;
                      }
                      while (*(_DWORD *)(v12 + 40 * v100 + 32) < v101);
                      double result = *(double *)&v115;
                      *(_OWORD *)unint64_t v90 = v115;
                      *(_OWORD *)(v90 + 16) = v118;
                      *(_DWORD *)(v90 + 32) = v101;
                      *(_DWORD *)(v90 + 36) = v102;
                    }
                  }
                }
              }
              while (v86-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          unint64_t v16 = v12 + 40 * (v14 >> 1);
          if ((unint64_t)v13 >= 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)a1, (long long *)(a1 + 40 * (v14 >> 1)), (long long *)(a2 - 40));
            uint64_t v17 = 5 * v15;
            unint64_t v18 = (long long *)(a1 + 40 * v15 - 40);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)(a1 + 40), v18, (long long *)(a2 - 80));
            unint64_t v19 = (long long *)(a1 + 40 + 8 * v17);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)(a1 + 80), v19, (long long *)(a2 - 120));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v18, (long long *)v16, v19);
            uint64_t v134 = *(void *)(a1 + 32);
            long long v119 = *(_OWORD *)a1;
            long long v126 = *(_OWORD *)(a1 + 16);
            long long v20 = *(_OWORD *)v16;
            long long v21 = *(_OWORD *)(v16 + 16);
            *(void *)(a1 + 32) = *(void *)(v16 + 32);
            *(_OWORD *)a1 = v20;
            *(_OWORD *)(a1 + 16) = v21;
            *(void *)(v16 + 32) = v134;
            *(_OWORD *)unint64_t v16 = v119;
            *(_OWORD *)(v16 + 16) = v126;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)(a1 + 40 * (v14 >> 1)), (long long *)a1, (long long *)(a2 - 40));
          }
          --a3;
          if ((a4 & 1) != 0 || *(_DWORD *)(a1 - 8) < *(_DWORD *)(a1 + 32)) {
            break;
          }
          long long v114 = *(_OWORD *)a1;
          long long v117 = *(_OWORD *)(a1 + 16);
          double result = *(double *)(a1 + 32);
          if (LODWORD(result) >= *(_DWORD *)(a2 - 8))
          {
            unint64_t v43 = a1 + 40;
            do
            {
              unint64_t v12 = v43;
              if (v43 >= a2) {
                break;
              }
              unsigned int v44 = *(_DWORD *)(v43 + 32);
              v43 += 40;
            }
            while (LODWORD(result) >= v44);
          }
          else
          {
            unint64_t v41 = a1;
            do
            {
              unint64_t v12 = v41 + 40;
              unsigned int v42 = *(_DWORD *)(v41 + 72);
              v41 += 40;
            }
            while (LODWORD(result) >= v42);
          }
          unint64_t v45 = a2;
          if (v12 < a2)
          {
            unint64_t v46 = a2;
            do
            {
              unint64_t v45 = v46 - 40;
              unsigned int v47 = *(_DWORD *)(v46 - 8);
              v46 -= 40;
            }
            while (LODWORD(result) < v47);
          }
          while (v12 < v45)
          {
            uint64_t v135 = *(void *)(v12 + 32);
            long long v120 = *(_OWORD *)v12;
            long long v128 = *(_OWORD *)(v12 + 16);
            long long v48 = *(_OWORD *)v45;
            long long v49 = *(_OWORD *)(v45 + 16);
            *(void *)(v12 + 32) = *(void *)(v45 + 32);
            *(_OWORD *)unint64_t v12 = v48;
            *(_OWORD *)(v12 + 16) = v49;
            *(void *)(v45 + 32) = v135;
            *(_OWORD *)unint64_t v45 = v120;
            *(_OWORD *)(v45 + 16) = v128;
            do
            {
              unsigned int v50 = *(_DWORD *)(v12 + 72);
              v12 += 40;
            }
            while (LODWORD(result) >= v50);
            do
            {
              unsigned int v51 = *(_DWORD *)(v45 - 8);
              v45 -= 40;
            }
            while (LODWORD(result) < v51);
          }
          unint64_t v52 = (long long *)(v12 - 40);
          BOOL v5 = v12 - 40 >= a1;
          BOOL v6 = v12 - 40 == a1;
          if (v12 - 40 != a1)
          {
            long long v53 = *v52;
            long long v54 = *(_OWORD *)(v12 - 24);
            *(void *)(a1 + 32) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v53;
            *(_OWORD *)(a1 + 16) = v54;
          }
          a4 = 0;
          long long *v52 = v114;
          *(_OWORD *)(v12 - 24) = v117;
          *(double *)(v12 - 8) = result;
        }
        long long v113 = *(_OWORD *)a1;
        long long v116 = *(_OWORD *)(a1 + 16);
        uint64_t v22 = *(void *)(a1 + 32);
        unint64_t v23 = a1;
        do
        {
          unint64_t v24 = v23;
          v23 += 40;
        }
        while (*(_DWORD *)(v24 + 72) < v22);
        unint64_t v25 = a2;
        if (v24 == a1)
        {
          unint64_t v28 = a2;
          while (v23 < v28)
          {
            unint64_t v26 = v28 - 40;
            unsigned int v29 = *(_DWORD *)(v28 - 8);
            v28 -= 40;
            if (v29 < v22) {
              goto LABEL_21;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            unsigned int v27 = *(_DWORD *)(v25 - 8);
            v25 -= 40;
          }
          while (v27 >= v22);
        }
LABEL_21:
        unint64_t v12 = v23;
        if (v23 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            long long v31 = *(_OWORD *)v12;
            long long v127 = *(_OWORD *)(v12 + 16);
            uint64_t v32 = *(void *)(v12 + 32);
            long long v34 = *(_OWORD *)v30;
            long long v33 = *(_OWORD *)(v30 + 16);
            *(void *)(v12 + 32) = *(void *)(v30 + 32);
            *(_OWORD *)unint64_t v12 = v34;
            *(_OWORD *)(v12 + 16) = v33;
            *(void *)(v30 + 32) = v32;
            *(_OWORD *)unint64_t v30 = v31;
            *(_OWORD *)(v30 + 16) = v127;
            do
            {
              unsigned int v35 = *(_DWORD *)(v12 + 72);
              v12 += 40;
            }
            while (v35 < v22);
            do
            {
              unsigned int v36 = *(_DWORD *)(v30 - 8);
              v30 -= 40;
            }
            while (v36 >= v22);
          }
          while (v12 < v30);
        }
        int64_t v37 = (long long *)(v12 - 40);
        if (v12 - 40 != a1)
        {
          long long v38 = *v37;
          long long v39 = *(_OWORD *)(v12 - 24);
          *(void *)(a1 + 32) = *(void *)(v12 - 8);
          *(_OWORD *)a1 = v38;
          *(_OWORD *)(a1 + 16) = v39;
        }
        *int64_t v37 = v113;
        *(_OWORD *)(v12 - 24) = v116;
        *(void *)(v12 - 8) = v22;
        if (v23 >= v26) {
          break;
        }
LABEL_32:
        std::__introsort<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*,false>(a1, v12 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, v12 - 40);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v12, a2))
      {
        break;
      }
      if (!v40) {
        goto LABEL_32;
      }
    }
    a2 = v12 - 40;
    if (!v40) {
      continue;
    }
    return result;
  }
}

long long *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(long long *result, long long *a2, long long *a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 8);
  unsigned int v4 = *((_DWORD *)a3 + 8);
  if (v3 >= *((_DWORD *)result + 8))
  {
    if (v4 < v3)
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      uint64_t v12 = *((void *)a2 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      long long v14 = a3[1];
      *a2 = *a3;
      a2[1] = v14;
      *((void *)a2 + 4) = v13;
      *((void *)a3 + 4) = v12;
      *a3 = v10;
      a3[1] = v11;
      if (*((_DWORD *)a2 + 8) < *((_DWORD *)result + 8))
      {
        long long v15 = *result;
        long long v16 = result[1];
        uint64_t v17 = *((void *)result + 4);
        uint64_t v18 = *((void *)a2 + 4);
        long long v19 = a2[1];
        *double result = *a2;
        result[1] = v19;
        *((void *)result + 4) = v18;
        *((void *)a2 + 4) = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v20 = *result;
      long long v21 = result[1];
      uint64_t v22 = *((void *)result + 4);
      uint64_t v23 = *((void *)a2 + 4);
      long long v24 = a2[1];
      *double result = *a2;
      result[1] = v24;
      *((void *)result + 4) = v23;
      *((void *)a2 + 4) = v22;
      *a2 = v20;
      a2[1] = v21;
      if (*((_DWORD *)a3 + 8) >= *((_DWORD *)a2 + 8)) {
        return result;
      }
      long long v5 = *a2;
      long long v6 = a2[1];
      uint64_t v7 = *((void *)a2 + 4);
      uint64_t v25 = *((void *)a3 + 4);
      long long v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      *((void *)a2 + 4) = v25;
    }
    else
    {
      long long v5 = *result;
      long long v6 = result[1];
      uint64_t v7 = *((void *)result + 4);
      uint64_t v8 = *((void *)a3 + 4);
      long long v9 = a3[1];
      *double result = *a3;
      result[1] = v9;
      *((void *)result + 4) = v8;
    }
    *((void *)a3 + 4) = v7;
    *a3 = v5;
    a3[1] = v6;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)(a4 + 32) < *(_DWORD *)(a3 + 32))
  {
    __n128 result = *(__n128 *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = *(void *)(a4 + 32);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(void *)(a3 + 32) = v11;
    *(void *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    if (*(_DWORD *)(a3 + 32) < *(_DWORD *)(a2 + 32))
    {
      __n128 result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)(a2 + 32) < *(_DWORD *)(a1 + 32))
      {
        __n128 result = *(__n128 *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(void *)(a2 + 32);
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(void *)(a1 + 32) = v19;
        *(void *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)(a5 + 32) < *(_DWORD *)(a4 + 32))
  {
    __n128 result = *(__n128 *)a4;
    long long v11 = *(_OWORD *)(a4 + 16);
    uint64_t v12 = *(void *)(a4 + 32);
    uint64_t v13 = *(void *)(a5 + 32);
    long long v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(void *)(a4 + 32) = v13;
    *(void *)(a5 + 32) = v12;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (*(_DWORD *)(a4 + 32) < *(_DWORD *)(a3 + 32))
    {
      __n128 result = *(__n128 *)a3;
      long long v15 = *(_OWORD *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 32);
      uint64_t v17 = *(void *)(a4 + 32);
      long long v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(void *)(a3 + 32) = v17;
      *(void *)(a4 + 32) = v16;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v15;
      if (*(_DWORD *)(a3 + 32) < *(_DWORD *)(a2 + 32))
      {
        __n128 result = *(__n128 *)a2;
        long long v19 = *(_OWORD *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 32);
        uint64_t v21 = *(void *)(a3 + 32);
        long long v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(void *)(a2 + 32) = v21;
        *(void *)(a3 + 32) = v20;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v19;
        if (*(_DWORD *)(a2 + 32) < *(_DWORD *)(a1 + 32))
        {
          __n128 result = *(__n128 *)a1;
          long long v23 = *(_OWORD *)(a1 + 16);
          uint64_t v24 = *(void *)(a1 + 32);
          uint64_t v25 = *(void *)(a2 + 32);
          long long v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(void *)(a1 + 32) = v25;
          *(void *)(a2 + 32) = v24;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 32))
      {
        long long v6 = *(_OWORD *)a1;
        long long v7 = *(_OWORD *)(a1 + 16);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 32) = v9;
        *(void *)(a2 - 8) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_OWORD *)(a2 - 40) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *(_DWORD *)(v12 + 32);
    if (v15 < *(_DWORD *)(v11 + 32))
    {
      long long v21 = *(_OWORD *)v12;
      long long v22 = *(_OWORD *)(v12 + 16);
      int v16 = *(_DWORD *)(v12 + 36);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(_DWORD *)(v18 + 72))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v20 = v21;
      *(_OWORD *)(v20 + 16) = v22;
      *(_DWORD *)(v20 + 32) = v15;
      *(_DWORD *)(v20 + 36) = v16;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<ProfileEvent *,std::__deque_iterator<ProfileEvent,ProfileEvent *,ProfileEvent&,ProfileEvent **,long,512l>,0>(void *result, char *a2, char *a3, void *a4, char *a5)
{
  long long v6 = a4;
  uint64_t v8 = result;
  if (a2 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a2) >> 3;
      }
      v11 -= 8 * v13;
      a5 -= 8 * v13;
      if (v13) {
        BOOL result = memmove(a5, v11, 8 * v13);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      unsigned int v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *uint64_t v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void std::vector<std::vector<ProfileEvent>>::resize(uint64_t a1)
{
  unsigned int v3 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v4 = (uint64_t)v2 - *(void *)a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  if (v5 <= 0x11)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v2) >> 3) >= 18 - v5)
    {
      bzero(*(void **)(a1 + 8), 24 * ((408 - v4) / 0x18uLL) + 24);
      *(void *)(a1 + 8) = &v2[3 * ((408 - v4) / 0x18uLL) + 3];
      return;
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v3) >> 3);
    unint64_t v8 = 0x5555555555555556 * ((v6 - (uint64_t)v3) >> 3);
    if (v8 <= 0x12) {
      unint64_t v8 = 18;
    }
    if (v7 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v10 = 3 * v9;
    uint64_t v11 = (char *)operator new(24 * v9);
    uint64_t v12 = &v11[8 * (v4 >> 3)];
    uint64_t v13 = &v11[8 * v10];
    size_t v14 = 24 * ((408 - v4) / 0x18uLL) + 24;
    bzero(v12, v14);
    unsigned int v15 = &v12[v14];
    if (v2 == v3)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v13;
      if (!v2) {
        return;
      }
    }
    else
    {
      do
      {
        int v16 = v12;
        *((void *)v12 - 1) = 0;
        long long v17 = *(_OWORD *)(v2 - 3);
        v2 -= 3;
        *(_OWORD *)(v12 - 24) = v17;
        v12 -= 24;
        *((void *)v16 - 1) = v2[2];
        void *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      while (v2 != v3);
      uint64_t v18 = *(void **)a1;
      uint64_t v2 = *(void **)(a1 + 8);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v13;
      if (v2 != v18)
      {
        long long v19 = v2;
        do
        {
          long long v21 = (void *)*(v19 - 3);
          v19 -= 3;
          uint64_t v20 = v21;
          if (v21)
          {
            *(v2 - 2) = v20;
            operator delete(v20);
          }
          uint64_t v2 = v19;
        }
        while (v19 != v18);
        uint64_t v2 = v18;
      }
      if (!v2) {
        return;
      }
    }
    operator delete(v2);
    return;
  }
  if (v4 != 432)
  {
    long long v22 = v3 + 54;
    if (v2 != v3 + 54)
    {
      long long v23 = *(void **)(a1 + 8);
      do
      {
        uint64_t v25 = (void *)*(v23 - 3);
        v23 -= 3;
        uint64_t v24 = v25;
        if (v25)
        {
          *(v2 - 2) = v24;
          operator delete(v24);
        }
        uint64_t v2 = v23;
      }
      while (v23 != v22);
    }
    *(void *)(a1 + 8) = v22;
  }
}

void sub_2904DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::unique_ptr<std::vector<double>>>>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    unint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (char *)operator new(24 * v10);
    uint64_t v13 = &v12[24 * v5];
    size_t v14 = &v12[8 * v11];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    int v16 = &v13[v15];
    if (v3 == v4)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        long long v17 = v13;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v3 - 24);
        v3 -= 24;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = *((void *)v3 + 2);
        *(void *)unsigned int v3 = 0;
        *((void *)v3 + 1) = 0;
        *((void *)v3 + 2) = 0;
      }
      while (v3 != v4);
      long long v19 = *a1;
      unsigned int v3 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v3 != v19)
      {
        do
        {
          v3 -= 24;
          long long v21 = (void **)v3;
          std::vector<std::unique_ptr<std::vector<double>>>::__destroy_vector::operator()[abi:nn180100](&v21);
        }
        while (v3 != v19);
        unsigned int v3 = v19;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    uint64_t v20 = &v4[24 * a2];
    while (v3 != v20)
    {
      v3 -= 24;
      long long v21 = (void **)v3;
      std::vector<std::unique_ptr<std::vector<double>>>::__destroy_vector::operator()[abi:nn180100](&v21);
    }
    a1[1] = v20;
  }
}

int64x2_t *std::vector<std::unique_ptr<std::vector<double>>>::reserve(int64x2_t *result)
{
  uint64_t v1 = result[1].i64[0];
  uint64_t v2 = (char *)result->i64[0];
  if ((unint64_t)(v1 - result->i64[0]) <= 0x9F)
  {
    unsigned int v3 = result;
    uint64_t v4 = (char *)result->i64[1];
    uint64_t v13 = result + 1;
    unint64_t v5 = (char *)operator new(0xA0uLL);
    unint64_t v6 = &v5[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == v2)
    {
      int64x2_t v9 = vdupq_n_s64((unint64_t)v4);
      unint64_t v7 = &v5[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      unint64_t v7 = &v5[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v8 = *((void *)v4 - 1);
        v4 -= 8;
        *(void *)uint64_t v4 = 0;
        *((void *)v7 - 1) = v8;
        v7 -= 8;
      }
      while (v4 != v2);
      int64x2_t v9 = *v3;
      uint64_t v1 = v3[1].i64[0];
    }
    v3->i64[0] = (uint64_t)v7;
    v3->i64[1] = (uint64_t)v6;
    int64x2_t v11 = v9;
    v3[1].i64[0] = (uint64_t)(v5 + 160);
    uint64_t v12 = v1;
    uint64_t v10 = v9.i64[0];
    return (int64x2_t *)std::__split_buffer<std::unique_ptr<std::vector<double>>>::~__split_buffer((uint64_t)&v10);
  }
  return result;
}

void sub_290ED4(uint64_t a1, ...)
{
  va_start(va, a1);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)va);

  operator delete();
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>,void *>>>::operator()[abi:nn180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v2 = (id *)__p[3];
    __p[3] = 0;
    if (v2) {
      std::default_delete<ShaderBinaryStatsInfo>::operator()[abi:nn180100](v2);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__split_buffer<std::pair<ShaderBinaryStatsInfo *,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2911CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t *a10)
{
  _Unwind_Resume(a1);
}

void sub_2914D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::deque<ProfileEvent>::~deque[abi:nn180100](&a10);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a47);
  a35 = (void **)&a53;
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&a35);
  std::deque<unsigned int>::~deque[abi:nn180100](v53 - 224);
  std::deque<unsigned int>::~deque[abi:nn180100](v53 - 176);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((void *)(v53 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::deque<ProfileEvent>::deque(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    uint64_t v8 = (uint64_t *)(*(void *)v7 + 8 * (v4 & 0x1FF));
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
    uint64_t v11 = *(void *)v10 + 8 * (v9 & 0x1FF);
  }
  if ((uint64_t *)v11 == v8) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = ((v11 - *(void *)v10) >> 3) + ((v10 - v7) << 6) - (((uint64_t)v8 - *(void *)v7) >> 3);
  }
  std::deque<ProfileEvent>::__append_with_size[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>>((void *)a1, v7, v8, v12);
  return a1;
}

void sub_29162C(_Unwind_Exception *a1)
{
  std::__split_buffer<ProfileEvent *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void sub_291CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a15);
  std::deque<ProfileEvent>::~deque[abi:nn180100](&a21);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a27);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((void *)(v27 - 144));
  _Unwind_Resume(a1);
}

void sub_2926DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (v23) {
    operator delete(v23);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a17);
  std::deque<ProfileEvent>::~deque[abi:nn180100](&a23);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v24 - 128);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper _processTracePackets:forRenderIndex:andGenerateSampleList:forTargetIndex:forLimiterIndex:]::$_1::operator() const(std::queue<ProfileEvent>)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 32))
      {
        long long v6 = *(_OWORD *)a1;
        long long v7 = *(_OWORD *)(a1 + 16);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 32) = v9;
        *(void *)(a2 - 8) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_OWORD *)(a2 - 40) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      long long v21 = (long long *)(a1 + 40);
      long long v22 = (long long *)(a1 + 80);
      long long v23 = (long long *)(a1 + 120);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a1 + 40, a1 + 80, a1 + 120);
      if (*(_DWORD *)(a2 - 8) >= *(_DWORD *)(a1 + 152)) {
        return 1;
      }
      long long v24 = *v23;
      long long v25 = *(_OWORD *)(a1 + 136);
      uint64_t v26 = *(void *)(a1 + 152);
      uint64_t v27 = *(void *)(a2 - 8);
      long long v28 = *(_OWORD *)(a2 - 24);
      *long long v23 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 136) = v28;
      *(void *)(a1 + 152) = v27;
      *(void *)(a2 - 8) = v26;
      *(_OWORD *)(a2 - 24) = v25;
      *(_OWORD *)(a2 - 40) = v24;
      if (*(_DWORD *)(a1 + 152) >= *(_DWORD *)(a1 + 112)) {
        return 1;
      }
      uint64_t v29 = *(void *)(a1 + 112);
      long long v31 = *v22;
      long long v30 = *(_OWORD *)(a1 + 96);
      long long v32 = *(_OWORD *)(a1 + 136);
      long long *v22 = *v23;
      *(_OWORD *)(a1 + 96) = v32;
      *(void *)(a1 + 112) = *(void *)(a1 + 152);
      *long long v23 = v31;
      *(_OWORD *)(a1 + 136) = v30;
      *(void *)(a1 + 152) = v29;
      if (*(_DWORD *)(a1 + 112) >= *(_DWORD *)(a1 + 72)) {
        return 1;
      }
      uint64_t v33 = *(void *)(a1 + 72);
      long long v35 = *v21;
      long long v34 = *(_OWORD *)(a1 + 56);
      long long v36 = *(_OWORD *)(a1 + 96);
      *long long v21 = *v22;
      *(_OWORD *)(a1 + 56) = v36;
      *(void *)(a1 + 72) = *(void *)(a1 + 112);
      long long *v22 = v35;
      *(_OWORD *)(a1 + 96) = v34;
      *(void *)(a1 + 112) = v33;
      if (*(_DWORD *)(a1 + 72) >= *(_DWORD *)(a1 + 32)) {
        return 1;
      }
      uint64_t v37 = *(void *)(a1 + 32);
      long long v39 = *(_OWORD *)a1;
      long long v38 = *(_OWORD *)(a1 + 16);
      long long v40 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v40;
      *(void *)(a1 + 32) = *(void *)(a1 + 72);
      *long long v21 = v39;
      *(_OWORD *)(a1 + 56) = v38;
      BOOL result = 1;
      *(void *)(a1 + 72) = v37;
      return result;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *(_DWORD *)(v12 + 32);
    if (v15 < *(_DWORD *)(v11 + 32))
    {
      long long v41 = *(_OWORD *)v12;
      long long v42 = *(_OWORD *)(v12 + 16);
      int v16 = *(_DWORD *)(v12 + 36);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(_DWORD *)(v18 + 72))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v20 = v41;
      *(_OWORD *)(v20 + 16) = v42;
      *(_DWORD *)(v20 + 32) = v15;
      *(_DWORD *)(v20 + 36) = v16;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

void sub_293B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a23);

  a23 = (void **)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a23);
  _Unwind_Resume(a1);
}

void sub_293D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

GTMTLReplayRasterMapQuery *GTMTLReplayClient_queryRasterMap(uint64_t a1, uint64_t a2, void **a3)
{
  if (a1)
  {
    uint64_t v3 = [*(id *)(a1 + 8) rasterizationRateMapForKey:a2];
    uint64_t v4 = v3;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (v3)
    {
      [v3 screenSize];
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      [v4 physicalGranularity];
    }
    else
    {
      long long v30 = 0uLL;
      uint64_t v31 = 0;
    }
    id v7 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v4, "layerCount"));
    if ([v4 layerCount])
    {
      unint64_t v8 = 0;
      do
      {
        long long v28 = 0uLL;
        uint64_t v29 = 0;
        if (v4) {
          [v4 physicalSizeForLayer:v8];
        }
        id v9 = objc_alloc_init((Class)NSMutableArray);
        if ((void)v28)
        {
          unint64_t v11 = 0;
          do
          {
            *(float *)&double v10 = (float)v11;
            [v4 mapPhysicalToScreenCoordinates:v8 forLayer:v10];
            uint64_t v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
            [v9 addObject:v12];

            v11 += v30;
          }
          while (v11 < (unint64_t)v28);
        }
        uint64_t v13 = +[NSNumber numberWithUnsignedInteger:v32];
        [v9 addObject:v13];

        id v14 = objc_alloc_init((Class)NSMutableArray);
        if (*((void *)&v28 + 1))
        {
          unint64_t v16 = 0;
          do
          {
            *(float *)&double v15 = (float)v16;
            [v4 mapPhysicalToScreenCoordinates:v8 forLayer:0.0 v15];
            LODWORD(v18) = v17;
            long long v19 = +[NSNumber numberWithFloat:v18];
            [v14 addObject:v19];

            v16 += *((void *)&v30 + 1);
          }
          while (v16 < *((void *)&v28 + 1));
        }
        uint64_t v20 = +[NSNumber numberWithUnsignedInteger:v33];
        [v14 addObject:v20];

        long long v21 = objc_alloc_init(GTMTLReplayRasterMapLayerQuery);
        long long v26 = v28;
        uint64_t v27 = 0;
        [(GTMTLReplayRasterMapLayerQuery *)v21 setSize:&v26];
        [(GTMTLReplayRasterMapLayerQuery *)v21 setHorizontalLogicalCoordinatesAtPhysicalTileBoundaries:v9];
        [(GTMTLReplayRasterMapLayerQuery *)v21 setVerticalLogicalCoordinatesAtPhysicalTileBoundaries:v14];
        [v7 setObject:v21 atIndexedSubscript:v8];

        ++v8;
      }
      while (v8 < (unint64_t)[v4 layerCount]);
    }
    long long v22 = objc_alloc_init(GTMTLReplayRasterMapQuery);
    long long v24 = v30;
    uint64_t v25 = v31;
    [(GTMTLReplayRasterMapQuery *)v22 setPhysicalGranularity:&v24];
    [(GTMTLReplayRasterMapQuery *)v22 setLayers:v7];
  }
  else
  {
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    CFStringRef v36 = @"Raster map query failed: controller not initialized";
    uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    GTMTLReplay_fillError(a3, 101, v4);
    if (a3) {
      long long v6 = *a3;
    }
    else {
      long long v6 = 0;
    }
    GTMTLReplay_handleNSError(v6);
    long long v22 = 0;
  }

  return v22;
}

void *HarvestResourceObject()
{
  uint64_t v0 = __chkstk_darwin();
  v383 = v1;
  v395 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = (id *)v0;
  id v7 = v6;
  [(id)g_activityLog enterHarvestResourceObjectWithAttributes:v7];
  v396 = v7;
  unint64_t v8 = [v7 objectForKeyedSubscript:@"requestID"];
  id v386 = [v8 unsignedLongLongValue];

  id v9 = [v396 objectForKeyedSubscript:@"streamref"];
  uint64_t v387 = (uint64_t)[v9 unsignedLongLongValue];

  double v10 = [v396 objectForKeyedSubscript:@"type"];
  id v11 = [v10 unsignedIntValue];

  uint64_t v12 = [v396 objectForKeyedSubscript:@"object"];
  obuint64_t j = (char *)[v12 unsignedLongLongValue];

  uint64_t v13 = [v396 objectForKeyedSubscript:@"functionIndex"];
  unsigned int v14 = [v13 unsignedIntValue];

  double v15 = [v396 objectForKeyedSubscript:@"functionIndex"];
  unint64_t v16 = (unint64_t)[v15 unsignedLongLongValue];

  v390 = [v396 objectForKeyedSubscript:@"resolution"];
  v389 = [v396 objectForKeyedSubscript:@"objectThreadgroupRange"];
  [(*v395)[2] appendBytes:"MTSP" length:8];
  long long v433 = 0u;
  long long v434 = 0u;
  long long v435 = 0u;
  DWORD2(v433) = 7;
  LODWORD(v434) = 2;
  DYTraceEncode_InternalData((uint64_t)&v433, **v395);
  int v17 = **v395;
  uint64_t v18 = *v17;
  if ((*((unsigned char *)v17 + 33) & 0x10) != 0)
  {
    uint64_t v20 = **v395;
    uint64_t v19 = *v17;
    do
    {
      uint64_t v20 = (unsigned int *)((char *)v20 + v18);
      uint64_t v18 = *v20;
      v19 += v18;
    }
    while ((*((unsigned char *)v20 + 33) & 0x20) == 0);
  }
  else
  {
    uint64_t v19 = *v17;
  }
  [(*v395)[2] appendBytes:v17 length:v19];
  uint64_t v21 = HIDWORD(v16);
  long long v22 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    LODWORD(v477[0]) = 67109120;
    DWORD1(v477[0]) = v14;
    _os_signpost_emit_with_name_impl(&def_1C1270, v22, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "debugFuncStop %u", (uint8_t *)v477, 8u);
  }
  GTMTLReplayController_debugSubCommandStop((uint64_t)v5, v14, v21);
  long long v23 = v5 + 2810;
  long long v24 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    LOWORD(v477[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4CA5E5, (uint8_t *)v477, 2u);
  }
  if ((int)v11 > 21)
  {
    if (v11 != 22)
    {
      if (v11 != 24)
      {
        if (v11 == 39)
        {
          ht = (apr_hash_t *)v5[1];
          AliasStreaunint64_t m = (uint64_t *)GetAliasStream(*((void *)*v5 + 3), (uint64_t)obj, *((void *)*v5 + 10) + v14 - 1);
          if (AliasStream) {
            uint64_t v27 = *AliasStream;
          }
          else {
            uint64_t v27 = 0;
          }
          if (s_logUsingOsLog)
          {
            uint64_t v34 = gt_tagged_log(1uLL);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              LODWORD(v477[0]) = 134217984;
              *(void *)((char *)v477 + 4) = v27;
              _os_log_impl(&def_1C1270, v34, OS_LOG_TYPE_INFO, "Harvesting rasterization rate map %llu", (uint8_t *)v477, 0xCu);
            }
          }
          else
          {
            BOOL v59 = __stdoutp;
            uint64_t v34 = +[NSString stringWithFormat:@"Harvesting rasterization rate map %llu", v27];
            fprintf(v59, "%s\n", (const char *)[v34 UTF8String]);
          }

          uint64_t v60 = GTMTLReplayClient_queryRasterMap((uint64_t)v5, v27, v383);
          if (!v60)
          {
            GTMTLReplay_fillError(v383, 101, &__NSDictionary0__struct);
            if (v383) {
              uint64_t v83 = *v383;
            }
            else {
              uint64_t v83 = 0;
            }
            GTMTLReplay_handleNSError(v83);
            uint64_t v33 = 0;
            goto LABEL_238;
          }
          pa = (apr_pool_t *)objc_alloc_init((Class)NSMutableArray);
          long long v413 = 0u;
          long long v414 = 0u;
          long long v411 = 0u;
          long long v412 = 0u;
          v381 = v60;
          BOOL v61 = [v60 layers];
          id v62 = [v61 countByEnumeratingWithState:&v411 objects:v444 count:16];
          if (v62)
          {
            uint64_t v63 = *(void *)v412;
            id obja = v61;
            do
            {
              for (uint64_t i = 0; i != v62; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v412 != v63) {
                  objc_enumerationMutation(obja);
                }
                uint64_t v65 = *(void **)(*((void *)&v411 + 1) + 8 * i);
                v442[0] = @"RasterizationRateLayerPhysicalSize";
                if (v65)
                {
                  [v65 size];
                  uint64_t v66 = v408;
                }
                else
                {
                  uint64_t v66 = 0;
                  uint64_t v408 = 0;
                  uint64_t v409 = 0;
                  uint64_t v410 = 0;
                }
                long long v67 = +[NSNumber numberWithUnsignedLongLong:v66];
                v441[0] = v67;
                if (v65)
                {
                  [v65 size];
                  uint64_t v68 = v406;
                }
                else
                {
                  uint64_t v68 = 0;
                  v405[10] = 0;
                  uint64_t v406 = 0;
                  uint64_t v407 = 0;
                }
                int64_t v69 = +[NSNumber numberWithUnsignedLongLong:v68];
                v441[1] = v69;
                int64_t v70 = +[NSArray arrayWithObjects:v441 count:2];
                v443[0] = v70;
                v442[1] = @"RasterizationRateLayerHorizontalLogicalCoordinatesAtPhysicalTileBoundaries";
                int64_t v71 = [v65 horizontalLogicalCoordinatesAtPhysicalTileBoundaries];
                v443[1] = v71;
                v442[2] = @"RasterizationRateLayerVerticalLogicalCoordinatesAtPhysicalTileBoundaries";
                uint64_t v72 = [v65 verticalLogicalCoordinatesAtPhysicalTileBoundaries];
                v443[2] = v72;
                unint64_t v73 = +[NSDictionary dictionaryWithObjects:v443 forKeys:v442 count:3];
                [(apr_pool_t *)pa addObject:v73];
              }
              BOOL v61 = obja;
              id v62 = [obja countByEnumeratingWithState:&v411 objects:v444 count:16];
            }
            while (v62);
          }

          v439[0] = @"RasterizationRateMapPhysicalGranularity";
          [v381 physicalGranularity];
          unsigned int v74 = +[NSNumber numberWithUnsignedLongLong:v405[7]];
          v438[0] = v74;
          [v381 physicalGranularity];
          unsigned int v75 = +[NSNumber numberWithUnsignedLongLong:v405[5]];
          v438[1] = v75;
          [v381 physicalGranularity];
          unsigned int v76 = +[NSNumber numberWithUnsignedLongLong:v405[3]];
          v438[2] = v76;
          unint64_t v77 = +[NSArray arrayWithObjects:v438 count:3];
          v439[1] = @"RasterizationRateLayers";
          v440[0] = v77;
          v440[1] = pa;
          int v78 = +[NSDictionary dictionaryWithObjects:v440 forKeys:v439 count:2];
          v405[0] = 0;
          unint64_t v79 = +[NSKeyedArchiver archivedDataWithRootObject:v78 requiringSecureCoding:0 error:v405];
          id v80 = v405[0];
          [v395[1] setObject:v79 forKeyedSubscript:@"MTLRasterizationRateMap-DerivedMetadata"];

          if (v80)
          {
            v436[0] = NSLocalizedDescriptionKey;
            v436[1] = NSUnderlyingErrorKey;
            v437[0] = @"Serializing MTLRasterizationRateMap-DerivedMetadata failed.";
            v437[1] = v80;
            id v81 = +[NSDictionary dictionaryWithObjects:v437 forKeys:v436 count:2];
            GTMTLReplay_fillError(v383, 101, v81);
            if (v383) {
              uint64_t v82 = *v383;
            }
            else {
              uint64_t v82 = 0;
            }
            GTMTLReplay_handleNSError(v82);

            goto LABEL_222;
          }

LABEL_211:
          uint64_t v33 = &def_1C1270 + 1;
LABEL_223:
          id v184 = v381;
LABEL_237:

LABEL_238:
          goto LABEL_239;
        }
        goto LABEL_34;
      }
      uint64_t v30 = v387;
      if (!v387)
      {
        uint64_t v31 = (uint64_t *)GetAliasStream(*((void *)*v5 + 3), (uint64_t)obj, *((void *)*v5 + 10) + v14 - 1);
        if (v31) {
          uint64_t v30 = *v31;
        }
        else {
          uint64_t v30 = 0;
        }
      }
      ht = [v5[1] indirectCommandBufferForKey:v30];
      if (s_logUsingOsLog)
      {
        unint64_t v103 = gt_tagged_log(1uLL);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
        {
          long long v104 = [(apr_hash_t *)ht label];
          if (v104)
          {
            long long v24 = [(apr_hash_t *)ht label];
            long long v105 = (const char *)[v24 UTF8String];
          }
          else
          {
            long long v105 = "no label";
          }
          LODWORD(v477[0]) = 134218242;
          *(void *)((char *)v477 + 4) = v30;
          WORD6(v477[0]) = 2080;
          *(void *)((char *)v477 + 14) = v105;
          _os_log_impl(&def_1C1270, v103, OS_LOG_TYPE_INFO, "Harvesting Indirect Command Buffer %llu (%s)", (uint8_t *)v477, 0x16u);
          if (v104) {
        }
          }
      }
      else
      {
        long long v106 = __stdoutp;
        unint64_t v103 = [(apr_hash_t *)ht label];
        if (v103)
        {
          uint64_t v4 = [(apr_hash_t *)ht label];
          long long v107 = (const char *)[(apr_pool_t *)v4 UTF8String];
        }
        else
        {
          long long v107 = "no label";
        }
        id v108 = +[NSString stringWithFormat:@"Harvesting Indirect Command Buffer %llu (%s)", v30, v107];
        fprintf(v106, "%s\n", (const char *)[v108 UTF8String]);

        if (v103) {
        else
        }
          unint64_t v103 = 0;
      }

      uint64_t v189 = GTMTLSMContext_getObject(**((void **)*v5 + 5), v30, *((void *)*v5 + 10) + v14 - 1)[13];
      id v184 = [(apr_hash_t *)ht device];
      id v190 = [(apr_hash_t *)ht size];
      uint64_t v191 = MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex(v189);
      id v192 = [v184 newIndirectCommandBufferWithDescriptor:v191 maxCommandCount:v190 options:0];

      v193 = [v5[3] blitCommandEncoder];
      [v193 copyIndirectCommandBuffer:ht sourceRange:0 destination:v190 destinationIndex:0];

      if (v387) {
        int64_t v194 = (char *)v387;
      }
      else {
        int64_t v194 = obj;
      }
      unint64_t v195 = +[NSString stringWithFormat:@"MTLIndirectCommandBuffer-0x%llx-Fetch", v194];
      v445[0] = v192;
      long long v196 = +[NSData dataWithBytes:v189 length:24];
      v445[1] = v196;
      long long v197 = +[NSArray arrayWithObjects:v445 count:2];

      [v395[1] setObject:v197 forKeyedSubscript:v195];
      memset(v477, 0, 112);
      GTMTLCreateIndirectCommandEncoder((uint64_t)v477, v189);
      if (v395[2] && v386)
      {
        long long v198 = +[NSNumber numberWithUnsignedLongLong:v386];
        [v395[2] setObject:v198 forKeyedSubscript:v195];
      }
      v416[0] = 0;
      v416[1] = v194;
      id v199 = v195;
      v416[2] = [v199 UTF8String];
      v416[3] = 0;
      v416[4] = *((void *)&v477[6] + 1) * (void)v190;
      DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v416, **v395);
      long long v200 = **v395;
      uint64_t v201 = *v200;
      if ((*((unsigned char *)v200 + 33) & 0x10) != 0)
      {
        long long v203 = **v395;
        uint64_t v202 = *v200;
        do
        {
          long long v203 = (unsigned int *)((char *)v203 + v201);
          uint64_t v201 = *v203;
          v202 += v201;
        }
        while ((*((unsigned char *)v203 + 33) & 0x20) == 0);
      }
      else
      {
        uint64_t v202 = *v200;
      }
      [(*v395)[2] appendBytes:v200 length:v202];

LABEL_236:
      uint64_t v33 = &def_1C1270 + 1;
      goto LABEL_237;
    }
    if (s_logUsingOsLog)
    {
      uint64_t v29 = gt_tagged_log(1uLL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        LOWORD(v477[0]) = 0;
        _os_log_impl(&def_1C1270, v29, OS_LOG_TYPE_INFO, "Harvesting threadgroup buffer", (uint8_t *)v477, 2u);
      }
    }
    else
    {
      NSErrorUserInfoKey v35 = __stdoutp;
      uint64_t v29 = +[NSString stringWithFormat:@"Harvesting threadgroup buffer"];
      fprintf(v35, "%s\n", (const char *)[v29 UTF8String]);
    }

    GTMTLReplayController_rewind((uint64_t)v5);
    GTMTLReplayController_debugSubCommand((unsigned int *)v5, v14, v21);
    if (*((_DWORD *)v5 + 2828) != 70) {
      goto LABEL_227;
    }
    CFStringRef v36 = obj + 1025;
    uint64_t v37 = (void)(obj + 1025) << 32;
    uint64_t v38 = *(unsigned int *)((char *)v5 + (v37 >> 30) + 22064);
    if (!v38) {
      goto LABEL_227;
    }
    if ((obj + 1025) >= 0x1FuLL) {
      goto LABEL_227;
    }
    long long v39 = (uint64_t **)*v5;
    long long v40 = (apr_hash_t *)*((void *)*v5 + 10);
    uint64_t v41 = *v23;
    uint64_t v42 = *(unsigned int *)((char *)v5 + (v37 >> 30) + 22188);
    uint64_t v43 = GTMTLReplayController_renderPassDescriptor((uint64_t)v5);
    unint64_t v44 = *(unsigned __int16 *)(v43 + 814);
    if (!*(_WORD *)(v43 + 814) || (uint64_t v45 = v43, ht = v40, v46 = *(unsigned __int16 *)(v43 + 812), !*(_WORD *)(v43 + 812)))
    {
LABEL_227:
      MakeNSError(101, &__NSDictionary0__struct);
      id v49 = (id)objc_claimAutoreleasedReturnValue();
      GTMTLReplay_handleNSError(v49);
      ht = +[NSData data];
      goto LABEL_228;
    }
    uint64_t v377 = v42;
    uint64_t v380 = v41;
    id v47 = v5[2808];
    id v48 = v5[2809];
    id v49 = v5[1];
    p = [v49 defaultDevice];
    id v388 = v5[3];
    unsigned int v50 = [v388 bufferWithLength:((unint64_t)v47 + (v44 - 1))/ v44* v38* (((unint64_t)v48 + (v46 - 1))/ v46) alignment:1];
    if (v50)
    {
      if (GT_SUPPORT_0)
      {
        v384 = (apr_hash_t *)objc_alloc_init((Class)MTLCompileOptions);
        v478[0] = (apr_pool_t *)@"THREADGROUP_MEMORY_LENGTH";
        unsigned int v51 = +[NSNumber numberWithUnsignedLongLong:v38];
        *(void *)__dst = v51;
        v478[1] = (apr_pool_t *)@"THREADGROUP_MEMORY_INDEX";
        unint64_t v52 = +[NSNumber numberWithInt:v36];
        *(void *)&__dst[8] = v52;
        uint64_t v53 = +[NSDictionary dictionaryWithObjects:__dst forKeys:v478 count:2];
        [(apr_hash_t *)v384 setPreprocessorMacros:v53];

        *(void *)&long long v460 = 0;
        v54 = -[apr_pool_t newLibraryWithSource:options:error:](p, "newLibraryWithSource:options:error:", @"#include <metal_stdlib>\nusing namespace metal;\n\nkernel void dumpThreadgroupData(uint2 threadgroupInGrid [[ threadgroup_position_in_grid ]],\n                                uint2 threadgroupsPerGrid [[ threadgroups_per_grid ]],\n                                device uint8_t* threadgroupBufferDump [[ buffer(0) ]],\n                                threadgroup uint8_t* threadgroupData [[ threadgroup(THREADGROUP_MEMORY_INDEX) ]])\n{\n   uint tileIndex = (threadgroupInGrid.y * threadgroupsPerGrid.x) + threadgroupInGrid.x;\n   uint offset = THREADGROUP_MEMORY_LENGTH * tileIndex;\n\n   for (int uint64_t i = 0; i < THREADGROUP_MEMORY_LENGTH; i++)\n   {\n       threadgroupBufferDump[offset + i] = threadgroupData[i];\n   }\n}\n",
                v384,
                &v460);
        v375 = (apr_pool_t *)(id)v460;
        if (v54)
        {
          v373 = (NSString *)[v54 newFunctionWithName:@"dumpThreadgroupData"];
          if (v373)
          {
            NSErrorUserInfoKey v55 = (NSErrorUserInfoKey)objc_alloc_init((Class)MTLTileRenderPipelineDescriptor);
            [(NSString *)v55 setLabel:@"Tile Pipeline for dumping Threadgroup data"];
            [(NSString *)v55 setTileFunction:v373];
            FillAttachmentPixelFormats(v45, v39[5], (unint64_t)ht + v380, v55);
            NSErrorUserInfoKey v495 = (NSErrorUserInfoKey)v375;
            id v56 = [(apr_pool_t *)p newRenderPipelineStateWithTileDescriptor:v55 error:&v495];
            unint64_t v57 = v495;

            if (v56)
            {
              int v58 = 0;
            }
            else
            {
              NSErrorUserInfoKey v494 = 0;
              GTMTLReplay_fillError(&v494, 101, &__NSDictionary0__struct);
              v344 = v494;
              GTMTLReplay_handleNSError(v344);
              ht = +[NSData data];

              id v56 = 0;
              int v58 = 1;
            }
            v375 = (apr_pool_t *)v57;
          }
          else
          {
            NSErrorUserInfoKey v495 = 0;
            GTMTLReplay_fillError(&v495, 101, &__NSDictionary0__struct);
            NSErrorUserInfoKey v55 = v495;
            GTMTLReplay_handleNSError(v55);
            ht = +[NSData data];
            id v56 = 0;
            int v58 = 1;
          }
        }
        else
        {
          NSErrorUserInfoKey v495 = 0;
          GTMTLReplay_fillError(&v495, 101, &__NSDictionary0__struct);
          v373 = v495;
          GTMTLReplay_handleNSError(v373);
          ht = +[NSData data];
          id v56 = 0;
          int v58 = 1;
        }

        if (v58) {
          goto LABEL_341;
        }
        v345 = [v49 renderCommandEncoderForKey:v5[1415]];
        [v345 pushDebugGroup:@"Dump Tile Threadgroup Data"];
        [v345 setRenderPipelineState:v56];
        v346 = [v50 heapBuffer];
        [v345 setTileBuffer:v346 offset:[v50 heapLocation] atIndex:0];

        [v345 setThreadgroupMemoryLength:v38 offset:v377 atIndex:(int)v36];
        v477[0] = vdupq_n_s64(1uLL);
        *(void *)&v477[1] = 1;
        [v345 dispatchThreadsPerTile:v477];
        [v345 popDebugGroup];
      }
      ht = [v50 data];
      goto LABEL_344;
    }
    MakeNSError(101, &__NSDictionary0__struct);
    id v56 = (id)objc_claimAutoreleasedReturnValue();
    GTMTLReplay_handleNSError(v56);
    ht = +[NSData data];
LABEL_341:

LABEL_344:
LABEL_228:

    [v5[1] commitCommandBuffers];
    v252 = +[NSString stringWithFormat:@"MTLBuffer-0x%llx-Fetch", obj];
    [v395[1] setObject:ht forKeyedSubscript:v252];
    if (v395[2] && v386)
    {
      v253 = +[NSNumber numberWithUnsignedLongLong:v386];
      [v395[2] setObject:v253 forKeyedSubscript:v252];
    }
    v415[0] = 0;
    v415[1] = obj;
    id v184 = v252;
    v415[2] = [v184 UTF8String];
    v415[3] = 0;
    v415[4] = [(apr_hash_t *)ht length];
    DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v415, **v395);
    v254 = **v395;
    uint64_t v255 = *v254;
    if ((*((unsigned char *)v254 + 33) & 0x10) != 0)
    {
      v257 = **v395;
      uint64_t v256 = *v254;
      do
      {
        v257 = (unsigned int *)((char *)v257 + v255);
        uint64_t v255 = *v257;
        v256 += v255;
      }
      while ((*((unsigned char *)v257 + 33) & 0x20) == 0);
    }
    else
    {
      uint64_t v256 = *v254;
    }
    [(*v395)[2] appendBytes:v254 length:v256];
    goto LABEL_236;
  }
  if (v11 == 1)
  {
    if (obj == (char *)-3)
    {
      if (s_logUsingOsLog)
      {
        uint64_t v87 = gt_tagged_log(1uLL);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
        {
          LOWORD(v477[0]) = 0;
          _os_log_impl(&def_1C1270, v87, OS_LOG_TYPE_INFO, "Harvesting solid wireframe texture", (uint8_t *)v477, 2u);
        }
      }
      else
      {
        uint64_t v208 = __stdoutp;
        uint64_t v87 = +[NSString stringWithFormat:@"Harvesting solid wireframe texture"];
        fprintf(v208, "%s\n", (const char *)[v87 UTF8String]);
      }

      uint64_t v431 = 0;
      long long v205 = (id *)&v431;
      uint64_t v206 = GTMTLReplayController_generateWireframeTexture();
      goto LABEL_186;
    }
    if (obj == (char *)-2)
    {
      if (s_logUsingOsLog)
      {
        int64_t v86 = gt_tagged_log(1uLL);
        if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
        {
          LOWORD(v477[0]) = 0;
          _os_log_impl(&def_1C1270, v86, OS_LOG_TYPE_INFO, "Harvesting outline texture", (uint8_t *)v477, 2u);
        }
      }
      else
      {
        uint64_t v207 = __stdoutp;
        int64_t v86 = +[NSString stringWithFormat:@"Harvesting outline texture"];
        fprintf(v207, "%s\n", (const char *)[v86 UTF8String]);
      }

      v430 = 0;
      long long v205 = &v430;
      uint64_t v206 = GTMTLReplayController_generateOutlineTexture((uint64_t)v5, (id *)v4, &v430);
      goto LABEL_186;
    }
    if (obj == (char *)-1)
    {
      if (s_logUsingOsLog)
      {
        uint64_t v32 = gt_tagged_log(1uLL);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          LOWORD(v477[0]) = 0;
          _os_log_impl(&def_1C1270, v32, OS_LOG_TYPE_INFO, "Harvesting wireframe texture", (uint8_t *)v477, 2u);
        }
      }
      else
      {
        long long v204 = __stdoutp;
        uint64_t v32 = +[NSString stringWithFormat:@"Harvesting wireframe texture"];
        fprintf(v204, "%s\n", (const char *)[v32 UTF8String]);
      }

      uint64_t v432 = 0;
      long long v205 = (id *)&v432;
      uint64_t v206 = GTMTLReplayController_generateWireframeTexture();
LABEL_186:
      id v209 = (id)v206;
      id v210 = *v205;
LABEL_187:
      if (v209) {
        goto LABEL_188;
      }
      if (v210)
      {
        NSErrorUserInfoKey v458 = NSUnderlyingErrorKey;
        id v459 = v210;
        +[NSDictionary dictionaryWithObjects:&v459 forKeys:&v458 count:1];
        v219 = char v218 = 0;
      }
      else
      {
        v219 = 0;
        char v218 = 1;
      }
      goto LABEL_271;
    }
    if ((unint64_t)obj < 0xFFFFFFFFFFFFFDFFLL)
    {
      uint64_t v173 = v387;
      if (!v387)
      {
        unsigned int v174 = (uint64_t *)GetAliasStream(*((void *)*v5 + 3), (uint64_t)obj, *((void *)*v5 + 10) + v14 - 1);
        if (v174) {
          uint64_t v173 = *v174;
        }
        else {
          uint64_t v173 = 0;
        }
      }
      id v272 = v5[5];
      v273 = +[NSNumber numberWithUnsignedLongLong:v173];
      id v209 = [v272 objectForKeyedSubscript:v273];

      if (!v209)
      {
        id v209 = [v5[1] textureForKey:v173];
      }
      if (s_logUsingOsLog)
      {
        v274 = gt_tagged_log(1uLL);
        if (os_log_type_enabled(v274, OS_LOG_TYPE_INFO))
        {
          v275 = [v209 label];
          if (v275)
          {
            long long v24 = [v209 label];
            v276 = (const char *)[v24 UTF8String];
          }
          else
          {
            v276 = "no label";
          }
          LODWORD(v477[0]) = 134218242;
          *(void *)((char *)v477 + 4) = v173;
          WORD6(v477[0]) = 2080;
          *(void *)((char *)v477 + 14) = v276;
          _os_log_impl(&def_1C1270, v274, OS_LOG_TYPE_INFO, "Harvesting texture %llu (%s)", (uint8_t *)v477, 0x16u);
          if (v275) {
        }
          }
      }
      else
      {
        v277 = __stdoutp;
        v274 = [v209 label];
        if (v274)
        {
          long long v23 = [v209 label];
          v278 = (const char *)[v23 UTF8String];
        }
        else
        {
          v278 = "no label";
        }
        id v279 = +[NSString stringWithFormat:@"Harvesting texture %llu (%s)", v173, v278];
        fprintf(v277, "%s\n", (const char *)[v279 UTF8String]);

        if (v274) {
        else
        }
          v274 = 0;
      }

      v280 = [v396 objectForKeyedSubscript:@"DependencyGraphRequestedThumbnailTextureID"];
      v281 = v280;
      if (v280) {
        obuint64_t j = (char *)[v280 unsignedLongLongValue];
      }

      id v210 = 0;
      if (v209)
      {
LABEL_188:
        v381 = v210;
        id v457 = v209;
        v211 = +[NSArray arrayWithObjects:&v457 count:1];
        GTMTLReplayClient_waitForUntrackedWritesToComplete((uint64_t)v5, v211);

        memset(v477, 0, 24);
        id v212 = [v209 width];
        id v213 = [v209 height];
        *(void *)&v477[0] = v212;
        *((void *)&v477[0] + 1) = v213;
        *(void *)&v477[1] = 1;
        memset(__dst, 0, 24);
        *(_OWORD *)v478 = v477[0];
        *(void *)&long long v479 = 1;
        GTMTLReplayClient_resizeResolution((unint64_t *)__dst, v390, (unint64_t *)v478);
        if ([v209 storageMode] == (char *)&def_1C1270 + 3)
        {
          v477[0] = *(_OWORD *)__dst;
          *(void *)&v477[1] = *(void *)&__dst[16];
          v214 = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v209);
          [v214 setWidth:*(void *)&v477[0]];
          [v214 setHeight:*((void *)&v477[0] + 1)];
          [v214 setDepth:*(void *)&v477[1]];
          [v214 setStorageMode:2];
          v215 = [v209 device];
          v216 = (apr_hash_t *)[v215 newTextureWithDescriptor:v214];

          if (!v216)
          {
            CFStringRef v455 = @"GTErrorKeyMTLTextureDescriptor";
            v228 = SerializeMTLTextureDescriptorToDictionary(v214);
            v456 = v228;
            v229 = +[NSDictionary dictionaryWithObjects:&v456 forKeys:&v455 count:1];
            GTMTLReplay_fillError(v383, 102, v229);
            ht = 0;
LABEL_221:

            goto LABEL_222;
          }

          v217 = v216;
        }
        else
        {
          v217 = (apr_hash_t *)v209;
        }
        uint64_t v220 = *(void *)&v477[0] ^ *(void *)__dst | *((void *)&v477[0] + 1) ^ *(void *)&__dst[8] | *(void *)&v477[1] ^ *(void *)&__dst[16];
        ht = v217;
        if ([(apr_hash_t *)v217 textureType] == &dword_4
          || [(apr_hash_t *)v217 textureType] == &dword_8)
        {
          v221 = [v396 objectForKeyedSubscript:@"resolveMultisampleTexture"];
          v222 = v221;
          if (v221)
          {
            id v223 = v221;
          }
          else
          {
            +[NSNumber numberWithBool:v220 != 0];
            id v223 = (id)objc_claimAutoreleasedReturnValue();
          }
          v224 = v223;

          int v225 = [v224 BOOLValue];
        }
        else
        {
          int v225 = 0;
        }
        if (v220 | v387)
        {
          v454 = v396;
          v226 = +[NSArray arrayWithObjects:&v454 count:1];
          v453 = v217;
          v227 = +[NSArray arrayWithObjects:&v453 count:1];
          v428 = 0;
          v228 = GTMTLReplayClient_retrieveTexturesForResize(v5, v226, v227, v225, &v428);
          v214 = v428;

          if (v214)
          {
            NSErrorUserInfoKey v451 = NSUnderlyingErrorKey;
            v452 = v214;
            v229 = +[NSDictionary dictionaryWithObjects:&v452 forKeys:&v451 count:1];
            GTMTLReplay_fillError(v383, 101, v229);
            if (v383) {
              v230 = *v383;
            }
            else {
              v230 = 0;
            }
            GTMTLReplay_handleNSError(v230);
            goto LABEL_221;
          }
          if (v220)
          {
            v237 = [v5[1] defaultCommandQueue];
            v229 = InternalCommandBuffer(v237, @"ResizeTexture");

            id v238 = v5[2];
            v239 = [v228 objectAtIndexedSubscript:0];
            v427 = 0;
            uint64_t v378 = GTMTLReplayController_resizeTexture(v238, (uint64_t)v4, v229, v239, *(unint64_t *)__dst, *(unint64_t *)&__dst[8], &v427);
            v214 = v427;

            if (v214)
            {
              NSErrorUserInfoKey v449 = NSUnderlyingErrorKey;
              v450 = v214;
              v240 = +[NSDictionary dictionaryWithObjects:&v450 forKeys:&v449 count:1];
              GTMTLReplay_fillError(v383, 101, v240);
              if (v383) {
                v241 = *v383;
              }
              else {
                v241 = 0;
              }
              GTMTLReplay_handleNSError(v241);

              ht = (apr_hash_t *)v378;
              goto LABEL_221;
            }
            GTMTLReplay_commitCommandBuffer(v229);
          }
          else
          {
            [v228 firstObject];
            uint64_t v378 = v229 = ht;
          }

          if (v387)
          {
            v259 = [v396 objectForKeyedSubscript:@"DependencyGraphRequestedTextureLevel"];
            id v260 = [v259 unsignedIntegerValue];

            v261 = [v396 objectForKeyedSubscript:@"DependencyGraphRequestedTextureSlice"];
            id v262 = [v261 unsignedIntegerValue];

            v263 = [v396 objectForKeyedSubscript:@"DependencyGraphRequestedTextureDepthPlane"];
            id v264 = [v263 unsignedIntegerValue];

            v265 = [v396 objectForKeyedSubscript:@"DependencyGraphRequestedTextureAttachmentIndex"];
            unint64_t v232 = (unint64_t)[v265 unsignedIntegerValue];

            if (v232 == 8)
            {
              unint64_t v232 = 0;
              id v266 = v386;
            }
            else
            {
              id v266 = v386;
              if (v232 == 9) {
                unint64_t v232 = 1;
              }
            }
            v231 = +[NSString stringWithFormat:@"MTLTexture-0x%llx-%llx-%llu-%llu-%llu-%llu-Fetch", v387, v266, v260, v262, v264, v232];
            v217 = (apr_hash_t *)v378;
            obuint64_t j = (char *)v387;
          }
          else
          {
            v231 = 0;
            unint64_t v232 = -1;
            v217 = (apr_hash_t *)v378;
          }
        }
        else
        {
          v231 = 0;
          unint64_t v232 = -1;
        }
        id v233 = v5[3];
        v426 = 0;
        GTMTLReplayClient_harvestTexture((uint64_t)v4, v233, v217, (uint64_t)obj, v395, v232, v231, (uint64_t)v386, &v426);
        v234 = v426;
        ht = v217;
        if (!v234)
        {

          goto LABEL_211;
        }
        v235 = v234;
        NSErrorUserInfoKey v447 = NSUnderlyingErrorKey;
        v448 = v234;
        v236 = +[NSDictionary dictionaryWithObjects:&v448 forKeys:&v447 count:1];
        GTMTLReplay_fillError(v383, 102, v236);

LABEL_222:
        uint64_t v33 = 0;
        goto LABEL_223;
      }
      char v218 = 1;
      v219 = 0;
LABEL_271:
      v282 = v219;
      GTMTLReplay_fillError(v383, 102, v219);
      ht = (apr_hash_t *)v210;
      uint64_t v33 = 0;
      id v184 = v282;
      if (v218) {
        goto LABEL_238;
      }
      goto LABEL_237;
    }
    GTMTLReplayController_rewind((uint64_t)v5);
    GTMTLReplayController_debugSubCommand((unsigned int *)v5, v14, v21);
    v429 = 0;
    if (*((_DWORD *)v5 + 2828) != 70)
    {
      GTMTLReplay_fillError(&v429, 101, &__NSDictionary0__struct);
      GTMTLReplay_handleNSError(v429);
      id v209 = 0;
LABEL_353:
      id v210 = v429;
      [v5[1] commitCommandBuffers];
      goto LABEL_187;
    }
    unint64_t v88 = *(apr_pool_t **)v5[19];
    unint64_t v372 = *((void *)*v5 + 10) + *v23;
    v374 = (uint64_t **)*v5;
    uint64_t v89 = GTMTLSMContext_getObject(**((void **)*v5 + 5), (uint64_t)v5[2489], v372)[7];
    uint64_t v90 = *(void *)(v89 + 64);
    LODWORD(v91) = *(unsigned __int16 *)(v89 + 200);
    uint64_t v92 = 32;
    if (!*(_WORD *)(v89 + 200)) {
      uint64_t v92 = 56;
    }
    uint64_t v93 = *(void *)(v89 + v92);
    if (!*(_WORD *)(v89 + 200)) {
      LODWORD(v91) = *(unsigned __int16 *)(v89 + 202);
    }
    if (v90) {
      BOOL v94 = 1;
    }
    else {
      BOOL v94 = v91 == 0;
    }
    if (!v94)
    {
      uint64_t v95 = 0;
      uint64_t v90 = v93;
      uint64_t v91 = v91;
      do
      {
        int v96 = *(unsigned __int8 *)(v90 + 16);
        if (v96 == 17)
        {
          if (*(unsigned char *)(v90 + 38) == 1) {
            goto LABEL_279;
          }
        }
        else if (v96 == 16)
        {
          uint64_t v90 = v93 + 56 * v95;
          goto LABEL_279;
        }
        v90 += 56;
        ++v95;
        --v91;
      }
      while (v91);
      uint64_t v90 = 0;
    }
LABEL_279:
    uint64_t v288 = (uint64_t)(obj + 513);
    int v289 = *(unsigned __int8 *)(v90 + 16);
    if (v289 == 17 || v289 == 16)
    {
      uint64_t v290 = *(void *)(v90 + 24);
      if (!v290) {
        uint64_t v290 = *(void *)(v90 + 8);
      }
    }
    else
    {
      uint64_t v290 = 0;
    }
    uint64_t v291 = *(unsigned int *)(v290 + 16);
    if (v291)
    {
      uint64_t v292 = *(void *)(v290 + 8);
      do
      {
        countStructMember(v292);
        v292 += 32;
        --v291;
      }
      while (v291);
    }
    v293 = apr_array_make(v88, 8, 8);
    nameStructType1(v293, v290, v288);
    unint64_t v295 = v294;
    *(void *)&__dst[8] = v294;
    v297 = apr_array_pstrcat(v88, v293, v296);
    v298 = apr_psprintf(v88, v297, v288);
    *(void *)__dst = v298;
    id v379 = v5[1];
    htb = [v379 defaultDevice];
    id v299 = objc_alloc_init((Class)MTLTextureDescriptor);
    v300 = v299;
    if (v295)
    {
      [v299 setTextureType:3];
      [v300 setArrayLength:v295];
      uint64_t v301 = 19;
    }
    else
    {
      uint64_t v301 = 3;
    }
    [v300 setUsage:v301];
    [v300 setWidth:v5[2808]];
    [v300 setHeight:v5[2809]];
    if ((v295 & 0xFFFF00000000) != 0)
    {
      unint64_t v302 = HIDWORD(v295);
    }
    else if ((BYTE6(v295) - 3) > 0x35u)
    {
      LOWORD(v302) = 0;
    }
    else
    {
      LOWORD(v302) = word_4C8470[4 * (BYTE6(v295) - 3)];
    }
    [v300 setPixelFormat:(unsigned __int16)v302];
    [v300 setStorageMode:2];
    id v382 = [(apr_hash_t *)htb newTextureWithDescriptor:v300];
    if (!v382)
    {
      v478[0] = (apr_pool_t *)@"GTErrorKeyMTLTextureDescriptor";
      *(void *)&v477[0] = v300;
      v306 = +[NSDictionary dictionaryWithObjects:v477 forKeys:v478 count:1];
      GTMTLReplay_fillError(&v429, 101, v306);
      GTMTLReplay_handleNSError(v429);

LABEL_349:
      id v209 = 0;
      v347 = v382;
LABEL_352:

      goto LABEL_353;
    }
    v371 = v298;
    v376 = v88;

    if ((GT_SUPPORT_0 & 1) == 0)
    {
LABEL_351:
      apr_pool_clear(v376);
      v347 = v382;
      id v209 = v382;
      goto LABEL_352;
    }
    v303 = apr_array_make(v88, 8, 8);
    *(void *)apr_array_push(v303) = "#include <metal_stdlib>\n"
                                      "#include <metal_imageblocks>\n"
                                      "#include <simd/simd.h>\n"
                                      "using namespace metal;\n"
                                      "\n"
                                      "struct ImageblockMaster {\n";
    int v304 = *(unsigned __int8 *)(v90 + 16);
    pd = v4;
    if (v304 == 17 || v304 == 16)
    {
      uint64_t v305 = *(void *)(v90 + 24);
      if (!v305) {
        uint64_t v305 = *(void *)(v90 + 8);
      }
    }
    else
    {
      uint64_t v305 = 0;
    }
    v307 = apr_array_make(v88, 8, 8);
    if (*(_DWORD *)(v305 + 16))
    {
      v308 = v307;
      uint64_t v309 = 0;
      unint64_t v310 = 0;
      do
      {
        v308->uint64_t nelts = 0;
        processStructMember(v308, *(void *)(v305 + 8) + v309, 1, 0);
        v312 = apr_array_pstrcat(v303->pool, v308, v311);
        *(void *)apr_array_push(v303) = v312;
        ++v310;
        v309 += 32;
      }
      while (v310 < *(unsigned int *)(v305 + 16));
    }
    *(void *)apr_array_push(v303) = "};\n\n";
    int v313 = *(unsigned __int8 *)(v90 + 16);
    if (v313 == 16 || v313 == 17)
    {
      int v314 = *(unsigned __int8 *)(v90 + 37);
      unsigned int v315 = *(unsigned __int8 *)(v90 + 36);
      *(void *)apr_array_push(v303) = "kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_ex"
                                        "plicit> imageBlock";
      uint64_t v4 = pd;
      if (v314)
      {
        v316 = apr_array_push(v303);
        v317 = " [[ alias_implicit_imageblock ]]";
LABEL_317:
        void *v316 = v317;
        goto LABEL_318;
      }
      if (v315 <= 7)
      {
        *(void *)apr_array_push(v303) = " [[ alias_implicit_imageblock_color";
        v320 = apr_psprintf(v303->pool, "(%u)", v315);
        *(void *)apr_array_push(v303) = v320;
        v316 = apr_array_push(v303);
        v317 = " ]]";
        goto LABEL_317;
      }
    }
    else
    {
      *(void *)apr_array_push(v303) = "kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_ex"
                                        "plicit> imageBlock";
      uint64_t v4 = pd;
    }
LABEL_318:
    *(void *)apr_array_push(v303) = ",\n"
                                      "\tuint2 gid [[ thread_position_in_grid ]],\n"
                                      "\tushort2 lid [[ thread_position_in_threadgroup ]],\n"
                                      "\t";
    if (v295) {
      v321 = "texture2d_array";
    }
    else {
      v321 = "texture2d";
    }
    *(void *)apr_array_push(v303) = v321;
    *(void *)apr_array_push(v303) = "<";
    unsigned __int8 v322 = BYTE6(v295) - 3;
    if ((BYTE6(v295) - 3) > 0x35u) {
      v323 = 0;
    }
    else {
      v323 = off_746CC0[(BYTE6(v295) - 3)];
    }
    *(void *)apr_array_push(v303) = v323;
    *(void *)apr_array_push(v303) = ", access::write> imageBlockData [[ texture(0) ]])\n";
    *(void *)apr_array_push(v303) = "{\n";
    *(void *)apr_array_push(v303) = "\tthreadgroup_imageblock ImageblockMaster* ib = imageBlock.data(lid);\n";
    v324 = apr_array_push(v303);
    if (v295)
    {
      *v324 = "\tfor (int uint64_t i = 0; i < ";
      v325 = apr_psprintf(v303->pool, "%u", v295);
      *(void *)apr_array_push(v303) = v325;
      *(void *)apr_array_push(v303) = "; i++) {\n";
      *(void *)apr_array_push(v303) = "\t\t";
      if ((BYTE6(v295) - 3) > 0x35u) {
        v326 = 0;
      }
      else {
        v326 = off_746E70[(BYTE6(v295) - 3)];
      }
      v327 = v376;
      *(void *)apr_array_push(v303) = v326;
      *(void *)apr_array_push(v303) = " currData = ib->";
      *(void *)apr_array_push(v303) = v371;
      *(void *)apr_array_push(v303) = "[i];\n";
      *(void *)apr_array_push(v303) = "\t\timageBlockData.write(";
      GenerateStringForWritingDataToTexture(v303, (uint64_t)__dst);
      *(void *)apr_array_push(v303) = ", gid, i);\n";
      v329 = apr_array_push(v303);
      v330 = "\t}\n";
    }
    else
    {
      void *v324 = "\t";
      v327 = v376;
      if (v322 > 0x35u) {
        v328 = 0;
      }
      else {
        v328 = off_746E70[v322];
      }
      *(void *)apr_array_push(v303) = v328;
      *(void *)apr_array_push(v303) = " currData = ib->";
      *(void *)apr_array_push(v303) = v371;
      *(void *)apr_array_push(v303) = ";\n";
      *(void *)apr_array_push(v303) = "\timageBlockData.write(";
      GenerateStringForWritingDataToTexture(v303, (uint64_t)__dst);
      v329 = apr_array_push(v303);
      v330 = ", gid);\n";
    }
    void *v329 = v330;
    *(void *)apr_array_push(v303) = "}\n";
    v332 = +[NSString stringWithUTF8String:apr_array_pstrcat(v327, v303, v331)];
    v478[0] = 0;
    id v333 = [(apr_hash_t *)htb newLibraryWithSource:v332 options:0 error:v478];
    v334 = v478[0];
    v335 = v334;
    if (v334)
    {
      NSErrorUserInfoKey v495 = NSUnderlyingErrorKey;
      *(void *)&long long v460 = v334;
      id v336 = +[NSDictionary dictionaryWithObjects:&v460 forKeys:&v495 count:1];
      GTMTLReplay_fillError(&v429, 101, v336);
      GTMTLReplay_handleNSError(v429);
      id v337 = 0;
      int v338 = 1;
    }
    else
    {
      id v336 = objc_alloc_init((Class)MTLTileRenderPipelineDescriptor);
      [v336 setLabel:@"Tile Pipeline for dumping Image Block data"];
      id v339 = [v333 newFunctionWithName:@"dumpImageBlockData"];
      [v336 setTileFunction:v339];

      [v336 setThreadgroupSizeMatchesTileSize:1];
      uint64_t v340 = GTMTLReplayController_renderPassDescriptor((uint64_t)v5);
      FillAttachmentPixelFormats(v340, v374[5], v372, v336);
      *(void *)&long long v460 = 0;
      id v337 = [(apr_hash_t *)htb newRenderPipelineStateWithTileDescriptor:v336 error:&v460];
      id v341 = (id)v460;
      v342 = v341;
      if (v341)
      {
        NSErrorUserInfoKey v494 = NSUnderlyingErrorKey;
        NSErrorUserInfoKey v495 = (NSErrorUserInfoKey)v341;
        v343 = +[NSDictionary dictionaryWithObjects:&v495 forKeys:&v494 count:1];
        GTMTLReplay_fillError(&v429, 101, v343);
        GTMTLReplay_handleNSError(v429);

        int v338 = 1;
      }
      else
      {
        int v338 = 0;
      }
    }
    if (v338)
    {

      goto LABEL_349;
    }
    v348 = [v379 renderCommandEncoderForKey:v5[1415]];
    [v348 pushDebugGroup:@"Dump Tile Data"];
    [v348 setRenderPipelineState:v337];
    [v348 setTileTexture:v382 atIndex:0];
    id v349 = [v348 tileWidth];
    id v350 = [v348 tileHeight];
    *(void *)&v477[0] = v349;
    *((void *)&v477[0] + 1) = v350;
    *(void *)&v477[1] = 1;
    [v348 dispatchThreadsPerTile:v477];
    [v348 popDebugGroup];

    goto LABEL_351;
  }
  if (v11 != 2)
  {
LABEL_34:
    htc = +[NSString stringWithFormat:@"kDYMessageFetchResourceObject: %u invalidType", v11];
    GTMTLReplay_handleError(101, (uint64_t)[(apr_hash_t *)htc UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_harvestResource.m", (uint64_t)"HarvestResourceObject", 573, 32);
    uint64_t v33 = &def_1C1270 + 1;

    goto LABEL_239;
  }
  if (obj == (char *)-1347)
  {
    if (s_logUsingOsLog)
    {
      unsigned int v84 = gt_tagged_log(1uLL);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
      {
        LOWORD(v477[0]) = 0;
        _os_log_impl(&def_1C1270, v84, OS_LOG_TYPE_INFO, "Harvesting translation buffer", (uint8_t *)v477, 2u);
      }
    }
    else
    {
      long long v118 = __stdoutp;
      unsigned int v84 = +[NSString stringWithFormat:@"Harvesting translation buffer"];
      fprintf(v118, "%s\n", (const char *)[v84 UTF8String]);
    }

    v478[0] = 0;
    apr_pool_create_ex(v478, 0, 0, v119);
    long long v120 = *v5;
    memset(v477, 0, 88);
    unint64_t v121 = v120[10] + v14;
    long long v122 = v478[0];
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)v477, (_DWORD **)v120[5], v121, v478[0]);
    uint64_t v123 = v120[1];
    id v124 = v5[1];
    uint64_t v125 = *(void *)&v477[0];
    long long v126 = apr_array_make(v122, *(_DWORD *)(*(void *)&v477[0] + 12), 24);
    hta = apr_hash_make(v122);
    pc = v122;
    v385 = apr_hash_make(v122);
    if (*(int *)(v125 + 12) >= 1)
    {
      uint64_t v127 = 0;
      uint64_t v128 = 16;
      do
      {
        uint64_t v129 = *(void *)(v125 + 24);
        long long v130 = apr_array_push(v126);
        long long v131 = [v124 bufferForKey:*(void *)(v129 + v128)];
        long long v132 = DEVICEOBJECT(v131);

        *long long v130 = [v132 gpuAddress];
        v130[1] = [v132 length];
        v130[2] = *(void *)(v129 + v128);

        ++v127;
        v128 += 24;
      }
      while (v127 < *(int *)(v125 + 12));
    }
    qsort(v126->elts, v126->nelts, v126->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
    uint64_t v133 = *((void *)&v477[1] + 1);
    uint64_t v134 = (apr_hash_index_t *)(*((void *)&v477[1] + 1) + 16);
    *(void *)(*((void *)&v477[1] + 1) + 24) = 0;
    *(void *)(v133 + 32) = 0;
    *(void *)(v133 + 16) = v133;
    *(_DWORD *)(v133 + 40) = 0;
    uint64_t v135 = apr_hash_next(v134);
    if (v135)
    {
      uint64_t v136 = v135;
      do
      {
        uint64_t v137 = *(void *)(*((void *)v136 + 1) + 32);
        unint64_t v138 = apr_palloc(pc, 0x20uLL);
        uint64_t v139 = [v124 renderPipelineStateForKey:*(void *)(v137 + 8)];
        uint64_t v140 = DEVICEOBJECT(v139);

        *unint64_t v138 = [v140 uniqueIdentifier];
        v138[1] = *(void *)(v137 + 8);
        void v138[2] = [v140 gpuResourceID];
        apr_hash_set(hta, v138, 8, v138);

        uint64_t v136 = apr_hash_next(v136);
      }
      while (v136);
    }
    uint64_t v141 = *(void *)&v477[2];
    unint64_t v142 = (apr_hash_index_t *)(*(void *)&v477[2] + 16);
    *(void *)(*(void *)&v477[2] + 24) = 0;
    *(void *)(v141 + 32) = 0;
    *(void *)(v141 + 16) = v141;
    *(_DWORD *)(v141 + 40) = 0;
    uint64_t v143 = apr_hash_next(v142);
    if (v143)
    {
      uint64_t v144 = v143;
      do
      {
        uint64_t v145 = *(void *)(*((void *)v144 + 1) + 32);
        long long v146 = apr_palloc(pc, 0x20uLL);
        long long v147 = [v124 computePipelineStateForKey:*(void *)(v145 + 8)];
        unsigned int v148 = DEVICEOBJECT(v147);

        *long long v146 = [v148 uniqueIdentifier];
        v146[1] = *(void *)(v145 + 8);
        v146[2] = [v148 gpuResourceID];
        apr_hash_set(v385, v146, 8, v146);

        uint64_t v144 = apr_hash_next(v144);
      }
      while (v144);
    }
    long long v149 = apr_array_make(pc, 3 * v126->nelts + 2 * (*((_DWORD *)v385 + 12) + *((_DWORD *)hta + 12)) + 3, 8);
    uint64_t nelts = v126->nelts;
    *(void *)apr_array_push(v149) = nelts;
    if (v126->nelts >= 1)
    {
      uint64_t v151 = 0;
      uint64_t v152 = 0;
      do
      {
        unint64_t v153 = &v126->elts[v151];
        *(void *)__dst = *((void *)v153 + 2);
        uint64_t v154 = *(void *)(*(void *)(*find_entry(v123, __dst, 8uLL, 0) + 32) + 8);
        *(void *)apr_array_push(v149) = v154;
        uint64_t v155 = *(void *)v153;
        *(void *)apr_array_push(v149) = v155;
        uint64_t v156 = *((void *)v153 + 1);
        *(void *)apr_array_push(v149) = v156;
        ++v152;
        v151 += 24;
      }
      while (v152 < v126->nelts);
    }
    uint64_t v157 = *((unsigned int *)hta + 12);
    *(void *)apr_array_push(v149) = v157;
    *((_DWORD *)hta + 10) = 0;
    *((void *)hta + 2) = hta;
    *((void *)hta + 3) = 0;
    *((void *)hta + 4) = 0;
    unsigned int v158 = apr_hash_next((apr_hash_t *)((char *)hta + 16));
    if (v158)
    {
      unint64_t v159 = v158;
      do
      {
        uint64_t v160 = *(uint64_t **)(*((void *)v159 + 1) + 32);
        *(void *)__dst = v160[1];
        uint64_t v161 = *(void *)(*(void *)(*find_entry(v123, __dst, 8uLL, 0) + 32) + 8);
        *(void *)apr_array_push(v149) = v161;
        uint64_t v162 = *v160;
        *(void *)apr_array_push(v149) = v162;
        unint64_t v159 = apr_hash_next(v159);
      }
      while (v159);
    }
    uint64_t v163 = *((unsigned int *)v385 + 12);
    *(void *)apr_array_push(v149) = v163;
    *((_DWORD *)v385 + 10) = 0;
    *((void *)v385 + 2) = v385;
    *((void *)v385 + 3) = 0;
    *((void *)v385 + 4) = 0;
    unint64_t v164 = apr_hash_next((apr_hash_t *)((char *)v385 + 16));
    if (v164)
    {
      unsigned int v165 = v164;
      do
      {
        BOOL v166 = *(uint64_t **)(*((void *)v165 + 1) + 32);
        *(void *)__dst = v166[1];
        uint64_t v167 = *(void *)(*(void *)(*find_entry(v123, __dst, 8uLL, 0) + 32) + 8);
        *(void *)apr_array_push(v149) = v167;
        uint64_t v168 = *v166;
        *(void *)apr_array_push(v149) = v168;
        unsigned int v165 = apr_hash_next(v165);
      }
      while (v165);
    }
    elts = v149->elts;
    int elt_size = v149->elt_size;
    int v170 = v149->nelts;

    id v172 = objc_alloc((Class)NSData);
    v423[0] = _NSConcreteStackBlock;
    v423[1] = 3221225472;
    v423[2] = __HarvestResourceObject_block_invoke_180;
    v423[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
    v423[4] = pc;
    int v102 = (apr_hash_t *)[v172 initWithBytesNoCopy:elts length:elt_size * (uint64_t)v170 deallocator:v423];
    goto LABEL_146;
  }
  if (obj != (char *)-1026)
  {
    if ((unint64_t)obj > 0xFFFFFFFFFFFFFBFELL)
    {
      unsigned int v85 = 0;
LABEL_153:
      uint64_t v180 = 0;
LABEL_154:
      if (v387) {
        unsigned int v181 = (char *)v387;
      }
      else {
        unsigned int v181 = obj;
      }
      BOOL v182 = +[NSString stringWithFormat:@"MTLBuffer-0x%llx-Fetch", v181];
      [v395[1] setObject:v85 forKeyedSubscript:v182];
      ht = v85;
      if (v395[2] && v386)
      {
        unsigned int v183 = +[NSNumber numberWithUnsignedLongLong:v386];
        [v395[2] setObject:v183 forKeyedSubscript:v182];
      }
      v417[0] = 0;
      v417[1] = v181;
      id v184 = v182;
      v417[2] = [v184 UTF8String];
      v417[3] = v180;
      v417[4] = [(apr_hash_t *)ht length];
      DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v417, **v395);
      unsigned int v185 = **v395;
      uint64_t v186 = *v185;
      if ((*((unsigned char *)v185 + 33) & 0x10) != 0)
      {
        unsigned int v188 = **v395;
        uint64_t v187 = *v185;
        do
        {
          unsigned int v188 = (unsigned int *)((char *)v188 + v186);
          uint64_t v186 = *v188;
          v187 += v186;
        }
        while ((*((unsigned char *)v188 + 33) & 0x20) == 0);
      }
      else
      {
        uint64_t v187 = *v185;
      }
      [(*v395)[2] appendBytes:v185 length:v187];
      goto LABEL_236;
    }
    if ((unint64_t)obj < 0xFFFFFFFFFFFFFBBELL)
    {
      if ((unint64_t)obj < 0xFFFFFFFFFFFFFB7ELL)
      {
        if ((unint64_t)obj < 0xFFFFFFFFFFFFFB3ELL)
        {
          if ((unint64_t)obj < 0xFFFFFFFFFFFFFAFELL)
          {
            if ((unint64_t)obj < 0xFFFFFFFFFFFFFABELL)
            {
              pe = (apr_pool_t *)v5[3];
              uint64_t v318 = v387;
              if (!v387)
              {
                v319 = (uint64_t *)GetAliasStream(*((void *)*v5 + 3), (uint64_t)obj, *((void *)*v5 + 10) + v14 - 1);
                if (v319) {
                  uint64_t v318 = *v319;
                }
                else {
                  uint64_t v318 = 0;
                }
              }
              v351 = [v5[1] bufferForKey:v318];
              v352 = [v396 objectForKeyedSubscript:@"range.location"];
              id v353 = [v352 unsignedIntValue];
              id v354 = [v396 objectForKeyedSubscript:@"range.length"];
              unsigned int v355 = [v354 unsignedIntValue];

              v356 = (char *)[v351 length];
              v357 = v356;
              if (v355)
              {
                unint64_t v358 = v355 + (unint64_t)v353;
                if (v358 >= (unint64_t)v356) {
                  unint64_t v358 = (unint64_t)v356;
                }
                BOOL v359 = v358 >= v353;
                unint64_t v360 = v358 - v353;
                if (v359) {
                  uint64_t v180 = v353;
                }
                else {
                  uint64_t v180 = 0;
                }
                if (v359) {
                  v357 = (char *)v360;
                }
                else {
                  v357 = 0;
                }
              }
              else
              {
                uint64_t v180 = 0;
              }
              if (s_logUsingOsLog)
              {
                v361 = gt_tagged_log(1uLL);
                if (os_log_type_enabled(v361, OS_LOG_TYPE_INFO))
                {
                  v362 = [v351 label];
                  if (v362)
                  {
                    id v353 = [v351 label];
                    v363 = (const char *)[v353 UTF8String];
                  }
                  else
                  {
                    v363 = "no label";
                  }
                  LODWORD(v477[0]) = 134218754;
                  *(void *)((char *)v477 + 4) = v318;
                  WORD6(v477[0]) = 2080;
                  *(void *)((char *)v477 + 14) = v363;
                  WORD3(v477[1]) = 2048;
                  *((void *)&v477[1] + 1) = v180;
                  LOWORD(v477[2]) = 2048;
                  *(void *)((char *)&v477[2] + 2) = &v357[v180];
                  _os_log_impl(&def_1C1270, v361, OS_LOG_TYPE_INFO, "Harvesting buffer %llu (%s) range: %llu - %llu", (uint8_t *)v477, 0x2Au);
                  if (v362) {
                }
                  }
              }
              else
              {
                v364 = __stdoutp;
                v361 = [v351 label];
                if (v361)
                {
                  id v354 = [v351 label];
                  v365 = (const char *)[v354 UTF8String];
                }
                else
                {
                  v365 = "no label";
                }
                id v366 = +[NSString stringWithFormat:@"Harvesting buffer %llu (%s) range: %llu - %llu", v318, v365, v180, &v357[v180]];
                fprintf(v364, "%s\n", (const char *)[v366 UTF8String]);

                if (v361) {
                else
                }
                  v361 = 0;
              }

              v367 = [(apr_pool_t *)pe bufferWithLength:v357 alignment:1];
              v446 = v351;
              v368 = +[NSArray arrayWithObjects:&v446 count:1];
              GTMTLReplayClient_waitForUntrackedWritesToComplete((uint64_t)v5, v368);

              v369 = [(apr_pool_t *)pe blitCommandEncoder];
              v370 = [v367 heapBuffer];
              [v369 copyFromBuffer:v351 sourceOffset:v180 toBuffer:v370 destinationOffset:[v367 heapLocation] size:v357];

              unsigned int v85 = [v367 data];

              goto LABEL_154;
            }
            *(void *)&v477[0] = 0;
            apr_pool_create_ex((apr_pool_t **)v477, 0, 0, v25);
            uint64_t v283 = *(void *)&v477[0];
            v284 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer();
            uint64_t v286 = v285;
            id v287 = objc_alloc((Class)NSData);
            v418[0] = _NSConcreteStackBlock;
            v418[1] = 3221225472;
            v418[2] = __HarvestResourceObject_block_invoke_6;
            v418[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
            v418[4] = v283;
            int v102 = (apr_hash_t *)[v287 initWithBytesNoCopy:v284 length:v286 deallocator:v418];
          }
          else
          {
            *(void *)&v477[0] = 0;
            apr_pool_create_ex((apr_pool_t **)v477, 0, 0, v25);
            uint64_t v267 = *(void *)&v477[0];
            v268 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer();
            uint64_t v270 = v269;
            id v271 = objc_alloc((Class)NSData);
            v419[0] = _NSConcreteStackBlock;
            v419[1] = 3221225472;
            v419[2] = __HarvestResourceObject_block_invoke_5;
            v419[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
            v419[4] = v267;
            int v102 = (apr_hash_t *)[v271 initWithBytesNoCopy:v268 length:v270 deallocator:v419];
          }
        }
        else
        {
          *(void *)&v477[0] = 0;
          apr_pool_create_ex((apr_pool_t **)v477, 0, 0, v25);
          uint64_t v247 = *(void *)&v477[0];
          v248 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer();
          uint64_t v250 = v249;
          id v251 = objc_alloc((Class)NSData);
          v420[0] = _NSConcreteStackBlock;
          v420[1] = 3221225472;
          v420[2] = __HarvestResourceObject_block_invoke_4;
          v420[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
          v420[4] = v247;
          int v102 = (apr_hash_t *)[v251 initWithBytesNoCopy:v248 length:v250 deallocator:v420];
        }
      }
      else
      {
        *(void *)&v477[0] = 0;
        apr_pool_create_ex((apr_pool_t **)v477, 0, 0, v25);
        uint64_t v242 = *(void *)&v477[0];
        v243 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer();
        uint64_t v245 = v244;
        id v246 = objc_alloc((Class)NSData);
        v421[0] = _NSConcreteStackBlock;
        v421[1] = 3221225472;
        v421[2] = __HarvestResourceObject_block_invoke_3;
        v421[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
        v421[4] = v242;
        int v102 = (apr_hash_t *)[v246 initWithBytesNoCopy:v243 length:v245 deallocator:v421];
      }
    }
    else
    {
      *(void *)&v477[0] = 0;
      apr_pool_create_ex((apr_pool_t **)v477, 0, 0, v25);
      uint64_t v97 = *(void *)&v477[0];
      long long v98 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer();
      uint64_t v100 = v99;
      id v101 = objc_alloc((Class)NSData);
      v422[0] = _NSConcreteStackBlock;
      v422[1] = 3221225472;
      v422[2] = __HarvestResourceObject_block_invoke_2;
      v422[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
      v422[4] = v97;
      int v102 = (apr_hash_t *)[v101 initWithBytesNoCopy:v98 length:v100 deallocator:v422];
    }
LABEL_146:
    unsigned int v85 = v102;
    goto LABEL_153;
  }
  if (s_logUsingOsLog)
  {
    long long v28 = gt_tagged_log(1uLL);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      LOWORD(v477[0]) = 0;
      _os_log_impl(&def_1C1270, v28, OS_LOG_TYPE_INFO, "Harvesting vertex data", (uint8_t *)v477, 2u);
    }
  }
  else
  {
    int v109 = __stdoutp;
    long long v28 = +[NSString stringWithFormat:@"Harvesting vertex data"];
    fprintf(v109, "%s\n", (const char *)[v28 UTF8String]);
  }

  pb = v4;
  id v110 = v389;
  id v111 = v5[1];
  uint64_t v112 = (uint64_t)*v5;
  uint64_t v113 = *((void *)*v5 + 15);
  uint64_t v114 = (*v23 - 1);
  uint64_t v115 = *(void *)(v113 + 24) + (v114 << 6);
  long long v493 = 0u;
  long long v492 = 0u;
  long long v491 = 0u;
  long long v490 = 0u;
  long long v489 = 0u;
  long long v488 = 0u;
  long long v487 = 0u;
  long long v486 = 0u;
  long long v485 = 0u;
  long long v484 = 0u;
  long long v483 = 0u;
  long long v482 = 0u;
  long long v481 = 0u;
  long long v480 = 0u;
  long long v479 = 0u;
  *(_OWORD *)v478 = 0u;
  memcpy(v477, v5 + 1421, 0x2B58uLL);
  if (*(_DWORD *)(v115 + 8) >> 2 == 1073737833)
  {
    *((void *)&v493 + 1) = *(void *)v5[19];
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)&v487 + 8, *(_DWORD ***)(v112 + 40), *(void *)v115, *((apr_pool_t **)&v493 + 1));
    GetExecuteCommandsInBufferArgs((uint64_t)v478, v115, *(void *)(v112 + 16));
    uint64_t Object = GTMTLSMContext_getObject(**(void **)(v112 + 40), (uint64_t)v478[0], *(void *)v115);
    GTMTLCreateIndirectCommandEncoder((uint64_t)&v480 + 8, Object[13]);
    *(void *)&long long v493 = *((void *)&v479 + 1) + v487 * *((unsigned int *)v5 + 5621);
    GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)v477, (void *)&v480 + 1, v493, (uint64_t *)&v487 + 1);
  }
  long long v117 = GTMTLSMContext_getObject(**(void **)(v112 + 40), *(uint64_t *)&v477[534], *(void *)v115);
  if (v117[9])
  {
    memcpy(__dst, v477, sizeof(__dst));
    long long v472 = v490;
    long long v473 = v491;
    long long v474 = v492;
    long long v475 = v493;
    long long v468 = v486;
    long long v469 = v487;
    long long v470 = v488;
    long long v471 = v489;
    long long v464 = v482;
    long long v465 = v483;
    long long v466 = v484;
    long long v467 = v485;
    long long v460 = *(_OWORD *)v478;
    long long v461 = v479;
    long long v462 = v480;
    long long v463 = v481;
    GTMTLReplayController_generatePostMeshData((uint64_t)v5, (uint64_t)v111, v112, v113, v114, v115, (uint64_t)__dst, (uint64_t)v117, (uint64_t)&v460, (uint64_t)pb, v110, v383);
  }
  else
  {
    memcpy(__dst, v477, sizeof(__dst));
    long long v472 = v490;
    long long v473 = v491;
    long long v474 = v492;
    long long v475 = v493;
    long long v468 = v486;
    long long v469 = v487;
    long long v470 = v488;
    long long v471 = v489;
    long long v464 = v482;
    long long v465 = v483;
    long long v466 = v484;
    long long v467 = v485;
    long long v460 = *(_OWORD *)v478;
    long long v461 = v479;
    long long v462 = v480;
    long long v463 = v481;
    GTMTLReplayController_generatePostVertexData((uint64_t)v5, (uint64_t)v111, v112, v113, v114, v115, (uint64_t)__dst, (uint64_t)v117, (uint64_t)&v460, (uint64_t)pb, v383);
  uint64_t v33 = };

  if (v33)
  {
    id v175 = objc_alloc((Class)NSData);
    id v176 = v33;
    id v177 = [v176 contents];
    id v178 = [v176 length];
    v424[0] = _NSConcreteStackBlock;
    v424[1] = 3221225472;
    v424[2] = __HarvestResourceObject_block_invoke;
    v424[3] = &unk_745D38;
    id v179 = v176;
    id v425 = v179;
    unsigned int v85 = (apr_hash_t *)[v175 initWithBytesNoCopy:v177 length:v178 deallocator:v424];

    goto LABEL_153;
  }
LABEL_239:

  [(id)g_activityLog leaveActivity];
  return v33;
}

void sub_297F9C(_Unwind_Exception *a1)
{
}

void GTMTLReplayClient_waitForUntrackedWritesToComplete(uint64_t a1, void *a2)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * i), "hazardTrackingMode", (void)v9) == (char *)&def_1C1270 + 1)
        {
          unint64_t v8 = [*(id *)(a1 + 8) defaultCommandQueue];
          [v8 finish];

          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

id __HarvestResourceObject_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) length];
}

void __HarvestResourceObject_block_invoke_180(uint64_t a1)
{
}

void __HarvestResourceObject_block_invoke_2(uint64_t a1)
{
}

void __HarvestResourceObject_block_invoke_3(uint64_t a1)
{
}

void __HarvestResourceObject_block_invoke_4(uint64_t a1)
{
}

void __HarvestResourceObject_block_invoke_5(uint64_t a1)
{
}

void __HarvestResourceObject_block_invoke_6(uint64_t a1)
{
}

uint64_t GetPlanePixelFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 > 539)
  {
    unint64_t v4 = a1 - 550;
    uint64_t v5 = 10;
    if (!a2) {
      uint64_t v5 = 554;
    }
    uint64_t v6 = 30;
    if (!a2) {
      uint64_t v6 = 10;
    }
    uint64_t v7 = 578;
    if (!a2) {
      uint64_t v7 = 576;
    }
    if (a1 != 543) {
      uint64_t v7 = 0;
    }
    if (a1 == 540) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    if (v4 >= 2) {
      return v8;
    }
    else {
      return v5;
    }
  }
  else
  {
    if (a1 <= 519)
    {
      if (a1 != 500 && a1 != 503) {
        return result;
      }
LABEL_22:
      if (a2) {
        return 30;
      }
      else {
        return 10;
      }
    }
    if (a1 == 520 || a1 == 523) {
      goto LABEL_22;
    }
  }
  return result;
}

void GTMTLReplayClient_harvestTexture(uint64_t a1, void *a2, void *a3, uint64_t a4, unsigned int ***a5, unint64_t a6, void *a7, uint64_t a8, void **a9)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a7;
  uint64_t v137 = [v14 device];
  id v16 = v14;
  id v17 = v13;
  uint64_t v133 = v17;
  if (v16)
  {
    uint64_t v18 = [v16 device];
    uint64_t v19 = v16;
    if ([v16 storageMode] == (char *)&def_1C1270 + 3)
    {
      uint64_t v19 = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v16);
      [v19 setStorageMode:2];
      id v20 = [v18 newTextureWithDescriptor:v19];

      if (!v20)
      {
        v186[0] = @"GTErrorKeyMTLTextureDescriptor";
        uint64_t v30 = SerializeMTLTextureDescriptorToDictionary(v19);
        *(void *)&long long v171 = v30;
        id v24 = +[NSDictionary dictionaryWithObjects:&v171 forKeys:v186 count:1];

        GTMTLReplay_fillError(a9, 101, v24);
        if (a9) {
          uint64_t v31 = *a9;
        }
        else {
          uint64_t v31 = 0;
        }
        GTMTLReplay_handleNSError(v31);
        uint64_t v29 = 0;
        goto LABEL_23;
      }

      uint64_t v19 = v20;
    }
    if ([v19 isFramebufferOnly])
    {
      uint64_t v21 = [v17 blitCommandEncoder];

      if (v21) {
        [v17 commitCommandBuffer];
      }
      long long v22 = [v17 resourcePool];
      long long v23 = [v17 commandBuffer];
      *(void *)&long long v171 = 0;
      GTMTLReplayController_resizeTexture(v22, a1, v23, v19, (unint64_t)[v19 width], (unint64_t)[v19 height], (void **)&v171);
      id v24 = (id)objc_claimAutoreleasedReturnValue();
      id v25 = (id)v171;

      if (v25)
      {
        NSErrorUserInfoKey v183 = NSUnderlyingErrorKey;
        v186[0] = v25;
        long long v26 = +[NSDictionary dictionaryWithObjects:v186 forKeys:&v183 count:1];
        GTMTLReplay_fillError(a9, 101, v26);
        if (a9) {
          uint64_t v27 = *a9;
        }
        else {
          uint64_t v27 = 0;
        }
        GTMTLReplay_handleNSError(v27);

        uint64_t v29 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      id v24 = v19;
    }
    id v24 = v24;
    uint64_t v29 = v24;
LABEL_23:

    goto LABEL_24;
  }
  GTMTLReplay_fillError(a9, 101, &__NSDictionary0__struct);
  if (a9) {
    long long v28 = *a9;
  }
  else {
    long long v28 = 0;
  }
  GTMTLReplay_handleNSError(v28);
  uint64_t v29 = 0;
LABEL_24:

  uint64_t v32 = (char *)[v29 pixelFormat];
  id v136 = [v29 sampleCount];
  long long v169 = 0uLL;
  uint64_t v170 = 0;
  uint64_t v33 = (NSString *)[v29 width];
  id v34 = [v29 height];
  id v150 = [v29 depth];
  long long v187 = 0uLL;
  memset(v186, 0, 56);
  GTMTLPixelFormatGetInfoForDevice((uint64_t)v186, (uint64_t)v137, (uint64_t)v32);
  *(void *)&long long v187 = 0;
  if ((~LODWORD(v186[1]) & 0x60) != 0)
  {
    if ((v186[1] & 0x2000) != 0) {
      *(void *)&long long v187 = 4;
    }
    unint64_t v35 = 1;
  }
  else
  {
    long long v187 = xmmword_4C8070;
    unint64_t v35 = 2;
  }
  v185[0] = v32;
  v185[1] = v32;
  NSErrorUserInfoKey v183 = v33;
  v184[0] = v34;
  v184[1] = v150;
  v184[2] = v33;
  v184[3] = v34;
  v184[4] = v150;
  v182[0] = v16;
  id v118 = v182[0];
  v182[1] = v118;
  uint64_t PlanePixelFormat = GetPlanePixelFormat((uint64_t)v32, 0);
  unint64_t v121 = a5;
  long long v117 = v29;
  if (!PlanePixelFormat) {
    goto LABEL_58;
  }
  uint64_t v37 = PlanePixelFormat;
  unsigned int v148 = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v118);
  id v144 = objc_alloc_init((Class)MTLRenderPassDescriptor);
  id v146 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  uint64_t v38 = 0;
  v39.i64[0] = (uint64_t)v33;
  v39.i64[1] = (uint64_t)v34;
  char v40 = 1;
  int8x16_t v152 = (int8x16_t)v39;
  int8x16_t v142 = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v39, vdupq_n_s64(1uLL)), 1uLL);
  while (1)
  {
    v185[v38] = v37;
    if (v32 == (unsigned char *)&stru_1F8.addr + 7 || (int8x16_t v41 = v152, v32 == (unsigned char *)&stru_1F8.addr + 4))
    {
      if (v40) {
        unint64_t v42 = -1;
      }
      else {
        unint64_t v42 = 0;
      }
      int8x16_t v41 = vbslq_s8((int8x16_t)vdupq_n_s64(v42), v152, v142);
    }
    uint64_t v43 = (int8x16_t *)&v184[3 * v38 - 1];
    *uint64_t v43 = v41;
    v43[1].i64[0] = (uint64_t)v150;
    [v148 setWidth:v41.i64[0]];
    [v148 setHeight:v184[3 * v38]];
    [v148 setPixelFormat:v37];
    id v44 = [v137 newTextureWithDescriptor:v148];
    id v45 = v182[v38];
    v182[v38] = v44;

    if (!v44)
    {
      CFStringRef v180 = @"GTErrorKeyMTLTextureDescriptor";
      NSErrorUserInfoKey v55 = SerializeMTLTextureDescriptorToDictionary(v148);
      unsigned int v181 = v55;
      id v56 = +[NSDictionary dictionaryWithObjects:&v181 forKeys:&v180 count:1];

      GTMTLReplay_fillError(a9, 101, v56);
      uint64_t v46 = (uint64_t)v32;
      if (a9) {
        unint64_t v57 = *a9;
      }
      else {
        unint64_t v57 = 0;
      }
      long long v67 = v133;
      GTMTLReplay_handleNSError(v57);
      int v68 = 1;
      goto LABEL_56;
    }
    uint64_t v46 = (uint64_t)v32;
    id v47 = [v144 colorAttachments];
    id v48 = [v47 objectAtIndexedSubscript:v38];
    [v48 setTexture:v44];

    id v49 = [v144 colorAttachments];
    unsigned int v50 = [v49 objectAtIndexedSubscript:v38];
    [v50 setLoadAction:0];

    unsigned int v51 = [v144 colorAttachments];
    unint64_t v52 = [v51 objectAtIndexedSubscript:v38];
    [v52 setStoreAction:1];

    uint64_t v53 = [v146 colorAttachments];
    id v54 = [v53 objectAtIndexedSubscript:v38];
    [v54 setPixelFormat:v37];

    if ((v40 & 1) == 0) {
      break;
    }
    uint64_t v32 = (char *)v46;
    uint64_t v37 = GetPlanePixelFormat(v46, 1);
    char v40 = 0;
    uint64_t v38 = 1;
  }
  id v56 = GTMTLReplayController_defaultLibrary(v137);
  id v58 = [v56 newFunctionWithName:@"Harvest2PVertex"];
  [v146 setVertexFunction:v58];

  CFStringRef v59 = @"Harvest2PFragmentDownloadYCbCr";
  if (((1 << (v46 + 12)) & 0x90000900009) == 0) {
    CFStringRef v59 = @"Harvest2PFragmentDownload";
  }
  if ((unint64_t)(v46 - 500) <= 0x2B) {
    CFStringRef v60 = v59;
  }
  else {
    CFStringRef v60 = @"Harvest2PFragmentDownload";
  }
  id v61 = [v56 newFunctionWithName:v60];
  [v146 setFragmentFunction:v61];

  id v168 = 0;
  id v62 = [v137 newRenderPipelineStateWithDescriptor:v146 error:&v168];
  id v63 = v168;
  if (v63)
  {
    int v64 = v63;
    NSErrorUserInfoKey v178 = NSUnderlyingErrorKey;
    id v179 = v63;
    uint64_t v65 = +[NSDictionary dictionaryWithObjects:&v179 forKeys:&v178 count:1];
    GTMTLReplay_fillError(a9, 101, v65);
    if (a9) {
      uint64_t v66 = *a9;
    }
    else {
      uint64_t v66 = 0;
    }
    GTMTLReplay_handleNSError(v66);

    int v68 = 1;
    long long v67 = v133;
  }
  else
  {
    long long v67 = v133;
    uint64_t v65 = [v133 renderCommandEncoderWithDescriptor:v144];
    [v65 setRenderPipelineState:v62];
    [v65 setFragmentTexture:v118 atIndex:0];
    [v65 drawPrimitives:3 vertexStart:0 vertexCount:3];
    int v68 = 0;
  }

LABEL_56:
  if (!v68)
  {
    unint64_t v35 = 2;
    uint64_t v29 = v117;
    uint64_t v32 = (char *)v46;
LABEL_58:
    long long v119 = (char *)[v29 mipmapLevelCount];
    uint64_t v134 = v32;
    if ([v29 textureType] == (char *)&dword_4 + 1
      || [v29 textureType] == (char *)&dword_4 + 2)
    {
      uint64_t v124 = 6 * (void)[v29 arrayLength];
    }
    else
    {
      uint64_t v124 = (uint64_t)[v29 arrayLength];
    }
    unint64_t v70 = a6;
    long long v67 = v133;
    if (v119)
    {
      uint64_t v145 = 0;
      size_t v123 = (48 * (_WORD)v35 + 279) & 0x300;
      unint64_t v141 = v35;
      long long v120 = v15;
      do
      {
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        unint64_t v128 = 1;
        uint64_t v129 = 0;
        unsigned int v74 = v184;
        size_t v132 = v123;
        do
        {
          if (v35 <= v70 || v70 == v71)
          {
            uint64_t v177 = 0;
            long long v175 = 0u;
            long long v176 = 0u;
            long long v173 = 0u;
            long long v174 = 0u;
            uint64_t v75 = v185[v71];
            long long v171 = 0u;
            long long v172 = 0u;
            uint64_t v115 = *((void *)&v187 + v71);
            *(void *)&double v69 = GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v171, (uint64_t)v137, v75, *(v74 - 1), *v74, v74[1], (uint64_t)v136).n128_u64[0];
            if (v71) {
              BOOL v76 = v70 == v71;
            }
            else {
              BOOL v76 = 1;
            }
            uint64_t v77 = v129;
            if (v76) {
              uint64_t v77 = v171;
            }
            uint64_t v78 = v130;
            if (v76) {
              uint64_t v78 = *((void *)&v171 + 1);
            }
            uint64_t v129 = v77;
            uint64_t v130 = v78;
            if (v76) {
              uint64_t v79 = v172;
            }
            else {
              uint64_t v79 = v131;
            }
            v73 += v176;
            v72 += *((void *)&v176 + 1);
            uint64_t v131 = v79;
            v132 += v177;
            unint64_t v80 = v128;
            if (v128 <= *((void *)&v175 + 1)) {
              unint64_t v80 = *((void *)&v175 + 1);
            }
            unint64_t v128 = v80;
          }
          ++v71;
          v74 += 3;
        }
        while (v35 != v71);
        if (v124)
        {
          for (uint64_t i = 0; i != v124; ++i)
          {
            uint64_t v126 = v73;
            uint64_t v127 = v72;
            id v81 = [v67 bufferWithLength:v132 alignment:v128];
            uint64_t v82 = [v81 contents];
            size_t v83 = v123;
            bzero(v82, v123);
            *(void *)uint64_t v82 = 0x63617074757265;
            v82[2] = 65538;
            v82[3] = v123;
            long long v149 = v81;
            uint64_t v139 = (char *)[v81 heapLocation];
            uint64_t v143 = [v67 blitCommandEncoder];
            uint64_t v140 = v82;
            unint64_t v138 = v82 + 6;
            unsigned int v84 = v182;
            unsigned int v85 = &v187;
            int64_t v86 = v185;
            uint64_t v87 = v184;
            unint64_t v88 = v70;
            unint64_t v89 = v35;
            do
            {
              if (v35 <= v70 || !v88)
              {
                uint64_t v177 = 0;
                long long v175 = 0u;
                long long v176 = 0u;
                long long v173 = 0u;
                long long v174 = 0u;
                long long v171 = 0u;
                long long v172 = 0u;
                uint64_t v90 = *(void *)v85;
                uint64_t v116 = *(void *)v85;
                GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v171, (uint64_t)v137, *v86, *(v87 - 1), *v87, v87[1], (uint64_t)v136);
                uint64_t v91 = v172;
                long long v92 = v171;
                long long v151 = v176;
                long long v93 = v176;
                BOOL v94 = &v138[12 * *((void *)v140 + 2)];
                *(void *)BOOL v94 = v134;
                *(_OWORD *)(v94 + 2) = v92;
                *((void *)v94 + 3) = v91;
                *((_OWORD *)v94 + 2) = v93;
                ++*((void *)v140 + 2);
                id v153 = *v84;
                long long v166 = v92;
                uint64_t v167 = v91;
                uint64_t v95 = [v149 heapBuffer];
                long long v164 = v169;
                uint64_t v165 = v170;
                [v143 copyFromTexture:v153 sourceSlice:i sourceLevel:v145 sourceOrigin:&v164 sourceSize:&v166 toBuffer:v95 destinationOffset:&v139[v83] destinationBytesPerRow:v151 destinationBytesPerImage:v90];

                if ((v186[1] & 0x2000) != 0)
                {
                  int v96 = [v133 commandBuffer];
                  v154[0] = _NSConcreteStackBlock;
                  v154[1] = 3221225472;
                  v154[2] = __GTMTLReplayClient_harvestTexture_block_invoke;
                  v154[3] = &unk_745D80;
                  id v155 = v149;
                  size_t v156 = v83;
                  long long v161 = v175;
                  long long v162 = v176;
                  uint64_t v163 = v177;
                  long long v157 = v171;
                  long long v158 = v172;
                  long long v159 = v173;
                  long long v160 = v174;
                  [v96 addCompletedHandler:v154];
                }
                v83 += v177;
                unint64_t v70 = a6;
                unint64_t v35 = v141;
              }
              ++v84;
              unsigned int v85 = (long long *)((char *)v85 + 8);
              --v88;
              ++v86;
              v87 += 3;
              --v89;
            }
            while (v89);
            id v15 = v120;
            if (v120)
            {
              id v97 = v120;
              uint64_t v98 = a8;
            }
            else
            {
              uint64_t v98 = a8;
              id v97 = +[NSString stringWithFormat:@"MTLTexture-0x%llx-%llx-%llu-%llu-Fetch", a4, a8, v145, i];
            }
            long long v67 = v133;
            uint64_t v73 = v126;
            uint64_t v72 = v127;
            uint64_t v99 = [v149 data];
            [v121[1] setObject:v99 forKeyedSubscript:v97];

            if (v98 && v121[2])
            {
              uint64_t v100 = +[NSNumber numberWithUnsignedLongLong:v98];
              [v121[2] setObject:v100 forKeyedSubscript:v97];
            }
            id v101 = v97;
            int v102 = (const char *)[v101 UTF8String];
            unint64_t v103 = **v121;
            *((void *)v103 + 1) = 0;
            *((void *)v103 + 2) = 0;
            *((void *)v103 + 3) = 0;
            *(void *)unint64_t v103 = 0xFFFFC09400000024;
            v103[8] = 0;
            strcpy((char *)v103 + 36, "C@6ulululU<b>ululul");
            *((void *)v103 + 7) = a4;
            *((void *)v103 + 8) = 0;
            *((void *)v103 + 9) = 0;
            *((void *)v103 + 10) = 0;
            *((void *)v103 + 11) = v129;
            *((void *)v103 + 12) = v130;
            *((void *)v103 + 13) = v131;
            *((void *)v103 + 14) = v145;
            *((void *)v103 + 15) = i;
            unsigned int *v103 = 128;
            AppendString(v102, (int *)v103);
            uint64_t v104 = *v103;
            uint64_t v105 = (v104 + 3) & 0xFFFFFFFC;
            bzero((char *)v103 + v104, v105 - v104);
            unsigned int *v103 = v105;
            *(void *)((char *)v103 + v105) = v126;
            unsigned int v106 = *v103 + 8;
            unsigned int *v103 = v106;
            *(void *)((char *)v103 + v106) = v127;
            unsigned int v107 = *v103 + 8;
            unsigned int *v103 = v107;
            *(void *)((char *)v103 + v107) = v132;
            *v103 += 8;
            id v108 = *v121;
            int v109 = **v121;
            v109[1] = -10236;
            id v110 = v108[2];
            uint64_t v111 = *v109;
            if ((*((unsigned char *)v109 + 33) & 0x10) != 0)
            {
              uint64_t v112 = *v109;
              uint64_t v113 = v109;
              unint64_t v35 = v141;
              do
              {
                uint64_t v113 = (unsigned int *)((char *)v113 + v112);
                uint64_t v112 = *v113;
                v111 += v112;
              }
              while ((*((unsigned char *)v113 + 33) & 0x20) == 0);
            }
            else
            {
              unint64_t v35 = v141;
            }
            [v110 appendBytes:length:];
          }
        }
        ++v145;
      }
      while (v145 != v119);
    }
  }
  for (uint64_t j = 1; j != -1; --j)
}

void AddAttachmentToArray(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a1;
  uint64_t v10 = *find_entry(a4, a2, 8uLL, 0);
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 32);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *find_entry(a4, (unsigned char *)a2 + 8, 8uLL, 0);
  if (v12) {
    uint64_t v12 = *(void *)(v12 + 32);
  }
  if (v11 && (*(void *)(v11 + 32) & 0x8000000000000000) == 0)
  {
    uint64_t v23 = *a2;
    uint64_t v13 = *(void *)(*(void *)(*find_entry(a5, &v23, 8uLL, 0) + 32) + 8);
    v26[0] = @"DependencyGraphRequestedTextureID";
    id v14 = +[NSNumber numberWithUnsignedLongLong:v13];
    v27[0] = v14;
    v26[1] = @"DependencyGraphRequestedTextureAttachmentIndex";
    id v15 = +[NSNumber numberWithInt:a3];
    v27[1] = v15;
    v26[2] = @"DependencyGraphRequestedTextureSlice";
    id v16 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a2 + 10)];
    v27[2] = v16;
    v26[3] = @"DependencyGraphRequestedTextureLevel";
    id v17 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 26)];
    v27[3] = v17;
    v26[4] = @"DependencyGraphRequestedTextureDepthPlane";
    uint64_t v18 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a2 + 9)];
    v27[4] = v18;
    uint64_t v19 = v27;
    id v20 = v26;
LABEL_12:
    long long v22 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v20 count:5];
    [v9 addObject:v22];

    goto LABEL_13;
  }
  if (v12 && (*(void *)(v12 + 32) & 0x8000000000000000) == 0)
  {
    uint64_t v23 = a2[1];
    uint64_t v21 = *(void *)(*(void *)(*find_entry(a5, &v23, 8uLL, 0) + 32) + 8);
    v24[0] = @"DependencyGraphRequestedTextureID";
    id v14 = +[NSNumber numberWithUnsignedLongLong:v21];
    v25[0] = v14;
    v24[1] = @"DependencyGraphRequestedTextureAttachmentIndex";
    id v15 = +[NSNumber numberWithInt:a3];
    v25[1] = v15;
    v24[2] = @"DependencyGraphRequestedTextureSlice";
    id v16 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a2 + 11)];
    v25[2] = v16;
    v24[3] = @"DependencyGraphRequestedTextureLevel";
    id v17 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 24)];
    v25[3] = v17;
    v24[4] = @"DependencyGraphRequestedTextureDepthPlane";
    uint64_t v18 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a2 + 8)];
    v25[4] = v18;
    uint64_t v19 = v25;
    id v20 = v24;
    goto LABEL_12;
  }
LABEL_13:
}

unint64_t GTMTLReplayHost_IsFuncEnumSampledEncoder(int a1, int a2, unsigned char *a3)
{
  if (!IsFuncEnumCreateCommandEncoder(a1))
  {
    if (a3)
    {
      unint64_t result = 0;
      *a3 = 0;
      return result;
    }
    return 0;
  }
  if (a2) {
    int v6 = -16286;
  }
  else {
    int v6 = -16351;
  }
  if (v6 == a1) {
    return 0;
  }
  int FuncEnumConstructorType = GetFuncEnumConstructorType(a1);
  if ((FuncEnumConstructorType - 17) >= 0x36) {
    return 0;
  }
  else {
    return (0x21000000000811uLL >> (FuncEnumConstructorType - 17)) & 1;
  }
}

id GTMTLReplayHost_generateDerivedDataPayload(uint64_t a1, int a2)
{
  id v68 = objc_alloc_init((Class)NSMutableArray);
  id v4 = objc_alloc_init((Class)NSMutableArray);
  id v63 = objc_alloc_init((Class)NSMutableDictionary);
  id v65 = objc_alloc_init((Class)NSMutableDictionary);
  id v59 = objc_alloc_init((Class)NSMutableDictionary);
  id v60 = objc_alloc_init((Class)NSMutableArray);
  id v62 = objc_alloc_init((Class)NSMutableArray);
  id v61 = objc_alloc_init((Class)NSMutableArray);
  id v58 = objc_alloc_init((Class)NSMutableArray);
  id v57 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v5 = *(void *)(a1 + 112);
  int v6 = &send_ptr;
  long long v67 = v4;
  if (*(int *)(v5 + 12) < 1)
  {
    uint64_t v51 = 0;
    goto LABEL_55;
  }
  uint64_t v55 = 0;
  uint64_t v56 = a1;
  uint64_t v7 = 0;
  int v8 = 0;
  double v69 = *(void **)(a1 + 120);
  int v66 = a2;
  do
  {
    uint64_t v9 = v8;
    uint64_t v10 = 32 * v8;
    while (1)
    {
      uint64_t v11 = *(void *)(v5 + 24);
      uint64_t v12 = *(void *)(v11 + v10);
      uint64_t v13 = v69[3];
      uint64_t v14 = v13 + (v12 << 6);
      int v15 = *(_DWORD *)(v14 + 8);
      if (v15 != -10224) {
        break;
      }
      id v16 = [v6[211] numberWithUnsignedInteger:v7];
      [v68 addObject:v16];

      int v6 = &send_ptr;
      uint64_t v7 = 0;
      ++v9;
      v10 += 32;
      if (v9 >= *(int *)(v5 + 12)) {
        goto LABEL_53;
      }
    }
    int FuncEnumConstructorType = GetFuncEnumConstructorType(v15);
    if (FuncEnumConstructorType == 51)
    {
      if ((*(unsigned char *)(v13 + (v12 << 6) + 15) & 0x40) == 0 || (uint64_t v18 = v11 + 32 * v9, *(_DWORD *)(v18 + 28) == -12543))
      {
        uint64_t v22 = *(int *)(v11 + 32 * v9 + 20);
        uint64_t v20 = 0;
        if ((int)v22 >= 1)
        {
          uint64_t v23 = v11 + 60;
          do
          {
            v20 += GTMTLReplayHost_IsFuncEnumSampledEncoder(*(_DWORD *)(v23 + v10), v66, 0);
            v23 += 32;
            --v22;
          }
          while (v22);
        }
        goto LABEL_36;
      }
      goto LABEL_48;
    }
    if (FuncEnumConstructorType == 25)
    {
      if ((*(unsigned char *)(v13 + (v12 << 6) + 15) & 0x40) == 0 || (uint64_t v18 = v11 + 32 * v9, *(_DWORD *)(v18 + 28) == -12544))
      {
        uint64_t v19 = *(int *)(v11 + 32 * v9 + 20);
        if ((int)v19 < 1)
        {
          uint64_t v20 = 0;
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v21 = v11 + 60;
          do
          {
            v20 += GTMTLReplayHost_IsFuncEnumSampledEncoder(*(_DWORD *)(v21 + v10), v66, 0);
            v21 += 32;
            --v19;
          }
          while (v19);
        }
LABEL_36:
        ++v7;
        uint64_t v31 = +[NSNumber numberWithUnsignedInteger:v20];
        [v67 addObject:v31];

        int v6 = &send_ptr;
        goto LABEL_50;
      }
      goto LABEL_48;
    }
    if (GTMTLReplayHost_IsFuncEnumSampledEncoder(v15, v66, v71))
    {
      id v54 = (unint64_t *)(v11 + 32 * v9 + 8);
      unint64_t v24 = v12 + 1;
      unint64_t v64 = *v54;
      if (v24 >= *v54)
      {
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = 0;
        do
        {
          uint64_t v26 = v69[3] + (v24 << 6);
          unsigned int v27 = *(_DWORD *)(v26 + 8);
          if (IsFuncEnumSampledCall(v27, v66))
          {
            ++v25;
          }
          else if (v27 >> 2 == 1073737833)
          {
            GetExecuteCommandsInBufferArgs((uint64_t)v71, v26, *(void *)(v56 + 16));
            long long v75 = 0u;
            memset(v74, 0, sizeof(v74));
            uint64_t Object = GTMTLSMContext_getObject(**(void **)(v56 + 40), v71[0], *(void *)v26);
            GTMTLCreateIndirectCommandEncoder((uint64_t)v74, Object[13]);
            uint64_t v29 = v72;
            if (v72)
            {
              uint64_t v30 = v71[1] << 32;
              do
              {
                if (*(void *)(v73 + v74[1] + *((void *)&v75 + 1) * (v30 >> 32))) {
                  ++v25;
                }
                v30 += 0x100000000;
                --v29;
              }
              while (v29);
            }
            unint64_t v64 = *v54;
          }
          ++v24;
        }
        while (v24 < v64);
      }
      id v32 = [v65 count];
      uint64_t v33 = *(void *)v14 - *(void *)(v56 + 80);
      id v34 = +[NSNumber numberWithUnsignedInteger:v25];
      [v62 addObject:v34];

      unint64_t v35 = +[NSNumber numberWithUnsignedInteger:v25];
      CFStringRef v36 = +[NSNumber numberWithUnsignedInteger:v33];
      [v63 setObject:v35 forKeyedSubscript:v36];

      uint64_t v37 = +[NSNumber numberWithUnsignedInteger:v25];
      uint64_t v38 = +[NSNumber numberWithUnsignedInteger:v32];
      [v65 setObject:v37 forKeyedSubscript:v38];

      v55 += v25;
      unsigned int v39 = GetFuncEnumConstructorType(*(_DWORD *)(v14 + 8));
      if (((1 << v39) & 0x10220000) != 0) {
        unsigned int v40 = 1;
      }
      else {
        unsigned int v40 = 2;
      }
      if (v39 <= 0x1C) {
        uint64_t v41 = v40;
      }
      else {
        uint64_t v41 = 2;
      }
      unsigned int v42 = v39;
      uint64_t v43 = +[NSNumber numberWithInt:v41];
      [v61 addObject:v43];

      if ((v42 | 4) == 0x15)
      {
        id v44 = +[NSNumber numberWithUnsignedInteger:v32];
        id v45 = v60;
      }
      else
      {
        id v46 = [v59 count];
        id v47 = +[NSNumber numberWithUnsignedInteger:v25];
        id v48 = +[NSNumber numberWithUnsignedInteger:v46];
        [v59 setObject:v47 forKeyedSubscript:v48];

        id v49 = +[NSNumber numberWithUnsignedInteger:v25];
        [v58 addObject:v49];

        id v44 = +[NSNumber numberWithInt:v41];
        id v45 = v57;
      }
      [v45 addObject:v44];

      uint64_t v18 = v11 + 32 * v9;
LABEL_48:
      LODWORD(v9) = *(_DWORD *)(v18 + 20) + v9;
    }
    int v6 = &send_ptr;
LABEL_50:
    int v8 = v9 + 1;
  }
  while ((int)v9 + 1 < *(_DWORD *)(v5 + 12));
  if (v7)
  {
    unsigned int v50 = +[NSNumber numberWithUnsignedInteger:v7];
    [v68 addObject:v50];

    int v6 = &send_ptr;
  }
LABEL_53:
  id v4 = v67;
  uint64_t v51 = v55;
LABEL_55:
  v76[0] = @"blitEncoderIndices";
  v76[1] = @"perCommandBufferEncoderCount";
  v77[0] = v60;
  v77[1] = v4;
  v76[2] = @"perEncoderDrawCallCount";
  v76[3] = @"perEncoderIndexDrawCallCount";
  v77[2] = v63;
  v77[3] = v65;
  v77[4] = v68;
  v76[4] = @"perFrameCommandBufferCount";
  v76[5] = @"totalDrawCallCount";
  unint64_t v52 = [v6[211] numberWithUnsignedInteger:v51];
  v77[5] = v52;
  v77[6] = &off_759B70;
  void v76[6] = @"uscSamplingPeriod";
  v76[7] = @"withoutBlitPerEncoderIndexDrawCallCount";
  v77[7] = v59;
  v77[8] = v62;
  v76[8] = @"activePerEncoderDrawCallCount";
  v76[9] = @"perEncoderKickCount";
  v77[9] = v61;
  v77[10] = v58;
  v76[10] = @"splitEncoderCommandCount";
  v76[11] = @"splitPerEncoderKickCount";
  v77[11] = v57;
  id v70 = +[NSDictionary dictionaryWithObjects:v77 forKeys:v76 count:12];

  return v70;
}

BOOL IsFuncEnumSampledCall(int a1, int a2)
{
  if (IsFuncEnumDrawCall(a1)) {
    return 1;
  }
  BOOL result = 1;
  if (a1 <= -16138)
  {
    if (a1 == -16327) {
      return result;
    }
    int v5 = -16220;
  }
  else
  {
    if ((a1 + 16137) <= 0x3B && ((1 << (a1 + 9)) & 0xC00000000000001) != 0
      || a1 == -15486)
    {
      return result;
    }
    int v5 = -15297;
  }
  if (a1 != v5)
  {
    BOOL result = IsFuncEnumSampledBlitCall(a1);
    if (!result)
    {
      if (a2)
      {
        return IsFuncEnumSampledBlitCallAGX(a1);
      }
    }
  }
  return result;
}

uint64_t RenderPassDescriptorContainsClear(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(void *)(a1 + 680) && *(unsigned char *)(a1 + 697) == 2 || *(void *)(a1 + 728) && *(unsigned char *)(a1 + 745) == 2) {
    return 1;
  }
  uint64_t v2 = 0;
  uint64_t v1 = 1;
  while (!*(void *)(a1 + v2 + 8) || *(unsigned char *)(a1 + v2 + 25) != 2)
  {
    v2 += 64;
    if (v2 == 512) {
      return 0;
    }
  }
  return v1;
}

uint64_t SoftwareCounterForFunc(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 <= -16219)
  {
    if (v4 == -16251) {
      goto LABEL_15;
    }
    if (v4 == -16249 || v4 == -16248) {
      return *((void *)GTTraceFunc_argumentBytesWithMap((void *)a1, *(unsigned __int8 *)(a1 + 13), a2) + 2);
    }
  }
  else
  {
    if (v4 <= -16148)
    {
      if (v4 != -16218)
      {
        if (v4 != -16217) {
          return result;
        }
        return *((void *)GTTraceFunc_argumentBytesWithMap((void *)a1, *(unsigned __int8 *)(a1 + 13), a2) + 2);
      }
LABEL_15:
      GTTraceFunc_argumentBytesWithMap((void *)a1, *(unsigned __int8 *)(a1 + 13), a2);
      return 0;
    }
    if (v4 == -16147 || v4 == -16145) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t SoftwareCounterForIndirectCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  switch(*(void *)(a3 + a1))
  {
    case 1:
      uint64_t result = 0;
      break;
    case 2:
      uint64_t result = *(void *)(a3 + a2 + 8);
      break;
    case 4:
      uint64_t result = 0;
      break;
    case 8:
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

id GTMTLReplayHost_collectSoftwareEncoderCounters(uint64_t a1, int a2)
{
  id v38 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v42 = a1;
  uint64_t v4 = *(void *)(a1 + 112);
  int v5 = *(_DWORD *)(v4 + 12);
  if (v5 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = *(void *)(v42 + 120);
    uint64_t v37 = v4;
    uint64_t v44 = v7;
    uint64_t v45 = *(void *)(v42 + 16);
    int v41 = a2;
    do
    {
      uint64_t v8 = *(void *)(v4 + 24);
      uint64_t v9 = (int *)(v8 + 32 * v6);
      if (GTMTLReplayHost_IsFuncEnumSampledEncoder(*(_DWORD *)(*(void *)(v7 + 24) + (*(void *)v9 << 6) + 8), a2, 0))
      {
        uint64_t RenderPassDescriptor = GetRenderPassDescriptor();
        uint64_t v11 = RenderPassDescriptorContainsClear(RenderPassDescriptor);
        int v12 = *v9;
        unint64_t v14 = *((void *)v9 + 1);
        uint64_t v13 = v9 + 2;
        int v15 = v12 + 1;
        uint64_t v40 = v8;
        uint64_t v39 = v11;
        if (v14 <= v12 + 1)
        {
          uint64_t v18 = 0;
          uint64_t v17 = 0;
        }
        else
        {
          id v16 = v13;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = v15;
          uint64_t v43 = v13;
          do
          {
            uint64_t v20 = *(void *)(v7 + 24) + (v19 << 6);
            unsigned int v21 = *(_DWORD *)(v20 + 8);
            if (IsFuncEnumSampledCall(v21, a2))
            {
              v18 += SoftwareCounterForFunc(v20, v45);
              v17 += v22;
            }
            else if (v21 >> 2 == 1073737833)
            {
              GetExecuteCommandsInBufferArgs((uint64_t)v46, v20, *(void *)(v42 + 16));
              long long v50 = 0u;
              memset(v49, 0, sizeof(v49));
              uint64_t Object = GTMTLSMContext_getObject(**(void **)(v42 + 40), v46[0], *(void *)v20);
              GTMTLCreateIndirectCommandEncoder((uint64_t)v49, Object[13]);
              uint64_t v24 = v47;
              if (v47)
              {
                uint64_t v25 = v48;
                long long v26 = v50;
                uint64_t v27 = v49[1];
                uint64_t v28 = v46[1] << 32;
                do
                {
                  uint64_t v29 = v25 + *((void *)&v26 + 1) * (v28 >> 32);
                  if (*(void *)(v29 + v27))
                  {
                    v18 += SoftwareCounterForIndirectCommand(v27, v26, v29);
                    v17 += v30;
                  }
                  v28 += 0x100000000;
                  --v24;
                }
                while (v24);
              }
              a2 = v41;
              id v16 = v43;
              uint64_t v7 = v44;
            }
            uint64_t v19 = ++v15;
          }
          while (*v16 > (unint64_t)v15);
        }
        uint64_t v31 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v39, v37);
        v51[0] = v31;
        id v32 = +[NSNumber numberWithUnsignedLongLong:v18];
        v51[1] = v32;
        uint64_t v33 = +[NSNumber numberWithUnsignedLongLong:v17];
        v51[2] = v33;
        id v34 = +[NSArray arrayWithObjects:v51 count:3];
        [v38 addObject:v34];

        uint64_t v7 = v44;
        v6 += *(_DWORD *)(v40 + 32 * v6 + 20);
        uint64_t v4 = v37;
        int v5 = *(_DWORD *)(v37 + 12);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  id v35 = [v38 copy];

  return v35;
}

id GTMTLReplayHost_rawCounters(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)NSMutableSet) initWithCapacity:[v1 count]];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = v1;
  id v16 = [v3 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v16)
  {
    uint64_t v15 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(v3);
        }
        int v5 = [v3 objectForKeyedSubscript:*(void *)(*((void *)&v21 + 1) + 8 * i) v15];
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        int v6 = [v5 objectForKeyedSubscript:@"counters"];
        id v7 = [v6 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v18;
          do
          {
            for (uint64_t j = 0; j != v8; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v18 != v9) {
                objc_enumerationMutation(v6);
              }
              uint64_t v11 = *(void *)(*((void *)&v17 + 1) + 8 * (void)j);
              int v12 = [v3 objectForKeyedSubscript:v11];

              if (!v12) {
                [v2 addObject:v11];
              }
            }
            id v8 = [v6 countByEnumeratingWithState:&v17 objects:v25 count:16];
          }
          while (v8);
        }
      }
      id v16 = [v3 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v16);
  }

  uint64_t v13 = [v2 allObjects];

  return v13;
}

id GTMTLReplayHost_rawCountersToNormalizeSet(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)NSMutableSet) initWithCapacity:[v1 count]];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v26;
    uint64_t v18 = *(void *)v26;
    do
    {
      id v7 = 0;
      id v19 = v5;
      do
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [v3 objectForKeyedSubscript:*(void *)(*((void *)&v25 + 1) + 8 * (void)v7)];
        uint64_t v9 = [v8 objectForKeyedSubscript:@"subtype"];
        if ([v9 isEqualToString:@"Normalize"])
        {
          long long v20 = v9;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          uint64_t v10 = [v8 objectForKeyedSubscript:@"counters"];
          id v11 = [v10 countByEnumeratingWithState:&v21 objects:v29 count:16];
          if (v11)
          {
            id v12 = v11;
            uint64_t v13 = *(void *)v22;
            do
            {
              for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v22 != v13) {
                  objc_enumerationMutation(v10);
                }
                uint64_t v15 = *(void *)(*((void *)&v21 + 1) + 8 * i);
                id v16 = [v3 objectForKeyedSubscript:v15];

                if (!v16) {
                  [v2 addObject:v15];
                }
              }
              id v12 = [v10 countByEnumeratingWithState:&v21 objects:v29 count:16];
            }
            while (v12);
          }

          uint64_t v6 = v18;
          id v5 = v19;
          uint64_t v9 = v20;
        }

        id v7 = (char *)v7 + 1;
      }
      while (v7 != v5);
      id v5 = [v3 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v5);
  }

  return v2;
}

id GTMTLReplayHost_createPerCounterCommandData(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v3, "count"));
  id v19 = v4;
  id v6 = [v4 count];
  if ([v3 count])
  {
    unint64_t v7 = 0;
    do
    {
      id v8 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v6];
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v9 = v19;
      id v10 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v21;
        do
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v21 != v12) {
              objc_enumerationMutation(v9);
            }
            unint64_t v14 = [*(id *)(*((void *)&v20 + 1) + 8 * i) objectAtIndexedSubscript:v7];
            [v8 addObject:v14];
          }
          id v11 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
        }
        while (v11);
      }

      uint64_t v15 = [v3 objectAtIndexedSubscript:v7];
      id v16 = [v8 copy];
      [v5 setObject:v16 forKeyedSubscript:v15];

      ++v7;
    }
    while (v7 < (unint64_t)[v3 count]);
  }
  id v17 = [v5 copy];

  return v17;
}

id GTMTLReplayClient_getThumbnailInfo(uint64_t a1, uint64_t a2, unint64_t *a3, int a4, void *a5, void *a6, uint64_t a7)
{
  LODWORD(v21) = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v31 = 0;
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  GTMTLSMContext_getTextureDescriptor(*(uint64_t **)(a2 + 40), a1, *a3, (uint64_t)v29);
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v32 = a1;
  uint64_t v15 = *(void *)(*(void *)(*find_entry(v14, &v32, 8uLL, 0) + 32) + 8);
  v36[0] = &off_759B88;
  v35[0] = @"type";
  v35[1] = @"object";
  id v16 = +[NSNumber numberWithUnsignedLongLong:v15];
  v36[1] = v16;
  v36[2] = v12;
  v35[2] = @"resolution";
  v35[3] = @"format";
  id v17 = +[NSNumber numberWithUnsignedLongLong:ResizeFormat(WORD1(v30))];
  v36[3] = v17;
  uint64_t v18 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:4];

  id v19 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v13 count]);
  long long v20 = [v18 objectForKeyedSubscript:@"format"];
  uint64_t v21 = (int)v21;
  InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(a7 + 12), *(void **)(a7 + 24), (int)v21);
  if (InclusiveRange)
  {
    long long v23 = InclusiveRange;
    while (GetFuncEnumConstructorType(*((_DWORD *)v23 + 7)) != 25)
    {
      uint64_t v24 = *((unsigned int *)v23 + 4);
      if (v24) {
        v23 -= 4 * v24;
      }
      else {
        long long v23 = 0;
      }
      if (!v23) {
        goto LABEL_8;
      }
    }
    id v25 = [v18 mutableCopy];
    uint64_t v21 = v23[1];
  }
  else
  {
LABEL_8:
    id v25 = [v18 mutableCopy];
  }
  long long v26 = +[NSNumber numberWithUnsignedLongLong:v21 + 1];
  [v25 setObject:v26 forKeyedSubscript:@"functionIndex"];

  [v25 setObject:v19 forKeyedSubscript:@"DependencyGraphRequestedThumbnailTextureID"];
  [v13 addObject:v25];

  v33[0] = @"object";
  v33[1] = @"format";
  v34[0] = v19;
  v34[1] = v20;
  long long v27 = +[NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:2];

  return v27;
}

uint64_t ResizeFormat(uint64_t result)
{
  char v1 = result + 6;
  if ((unint64_t)(result - 250) > 0xC) {
    goto LABEL_6;
  }
  if (((1 << v1) & 0x425) != 0) {
    return 252;
  }
  if (((1 << v1) & 0x1808) != 0) {
    return 253;
  }
LABEL_6:
  uint64_t v2 = 10;
  uint64_t v3 = 90;
  if ((unint64_t)(result - 2) < 0x7C) {
    uint64_t v3 = result;
  }
  if (result != 1) {
    uint64_t v2 = v3;
  }
  if ((unint64_t)(result - 552) >= 4) {
    return v2;
  }
  return result;
}

id GTMTLReplayClient_generateThumbnails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = __chkstk_darwin(a1, a2, a3, a4);
  id v6 = v5;
  unint64_t v7 = (void *)v4;
  id v9 = v8;
  id v122 = v6;
  id v10 = [v9 objectForKeyedSubscript:@"attachments"];
  int v109 = v9;
  uint64_t v124 = [v9 objectForKeyedSubscript:@"resolution"];
  uint64_t v113 = v7[2];
  uint64_t v11 = v7[15];
  long long v120 = v7;
  uint64_t v117 = v7[14];
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  id v12 = v10;
  id v13 = [v12 countByEnumeratingWithState:&v134 objects:v147 count:16];
  if (v13)
  {
    id v14 = v13;
    unint64_t v15 = 0;
    uint64_t v16 = *(void *)v135;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v135 != v16) {
          objc_enumerationMutation(v12);
        }
        id v18 = [&off_758C18 indexOfObject:*(void *)(*((void *)&v134 + 1) + 8 * i)];
        uint64_t v19 = 1 << (char)v18;
        if (v18 == (id)0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v19 = 0;
        }
        v15 |= v19;
      }
      id v14 = [v12 countByEnumeratingWithState:&v134 objects:v147 count:16];
    }
    while (v14);
  }
  else
  {
    unint64_t v15 = 0;
  }

  unsigned int v116 = [v12 containsObject:@"All"];
  id v121 = objc_alloc_init((Class)NSMutableDictionary);
  id v127 = [objc_alloc((Class)NSMutableArray) initWithCapacity:8];
  uint64_t v20 = (uint64_t)v120;
  uint64_t v21 = v113;
  if (*(int *)(v11 + 12) >= 1)
  {
    unint64_t v22 = 0;
    long long v23 = 0;
    id v108 = (long long *)((char *)&v130 + 8);
    id v110 = v12;
    uint64_t v118 = v11;
    while (1)
    {
      uint64_t v24 = *(void *)(v11 + 24);
      uint64_t v25 = v24 + (v22 << 6);
      long long v27 = (int *)(v25 + 8);
      int v26 = *(_DWORD *)(v25 + 8);
      if (v26 > -16134) {
        break;
      }
      if (v26 > -16360)
      {
        if (v26 != -16359 && v26 != -16358) {
          goto LABEL_38;
        }
        goto LABEL_32;
      }
      if (v26 == -20474)
      {
        id v35 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)v25, *(unsigned __int8 *)(v24 + (v22 << 6) + 13), v21);
        uint64_t Object = GTMTLSMContext_getObject(**(void **)(v20 + 40), *v35, *(void *)v25);
        if (Object)
        {
          uint64_t v31 = Object[9];
          goto LABEL_35;
        }
      }
      else if (v26 == -20457)
      {
        uint64_t v29 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)v25, *(unsigned __int8 *)(v24 + (v22 << 6) + 13), v21);
        long long v30 = GTMTLSMContext_getObject(**(void **)(v20 + 40), *v29, *(void *)v25);
        if (v30)
        {
          uint64_t v31 = v30[12];
LABEL_35:
          uint64_t v33 = GTMTLReplayClient_getThumbnailInfo(v31, v20, (unint64_t *)v25, v22, v124, v122, v117);
          id v34 = +[NSNumber numberWithInt:v22];
          [v121 setObject:v33 forKeyedSubscript:v34];

          goto LABEL_118;
        }
      }
LABEL_38:
      size_t v123 = (unint64_t *)v25;
      int v37 = *v27;
      if ((IsFuncEnumDrawCall(*v27) & 1) != 0 || (v37 & 0xFFFFFFFC) == 0xFFFFC1A4)
      {
        if (v23 && *v23 <= v22 && v23[1] >= v22) {
          goto LABEL_108;
        }
        InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(v117 + 12), *(void **)(v117 + 24), v22);
        if (InclusiveRange)
        {
          uint64_t v39 = InclusiveRange;
          while (1)
          {
            int v40 = *((_DWORD *)v39 + 7);
            if (v40 == -16353 || v40 == -16351) {
              break;
            }
            uint64_t v42 = *((unsigned int *)v39 + 4);
            if (v42) {
              BOOL v43 = v39 == 0;
            }
            else {
              BOOL v43 = 1;
            }
            v39 -= 4 * v42;
            if (v43) {
              goto LABEL_54;
            }
          }
          bzero(&v128, 0x2B90uLL);
          GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v128, (uint64_t *)(*(void *)(v11 + 24) + (*v39 << 6)), v21);
          uint64_t v114 = v39;
          uint64_t v111 = v27;
          unint64_t v112 = v22;
          if (v128 == 70 || v128 == 65) {
            uint64_t v44 = v132;
          }
          else {
            uint64_t v44 = 0;
          }
          [v127 removeAllObjects];
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          long long v119 = v44;
          do
          {
            if ((v15 >> v46))
            {
              uint64_t v47 = &v44[v45];
              if (v44[v45 + 1])
              {
                uint64_t v48 = (unsigned __int16 *)(v47 + 2);
                BOOL v49 = *v47 == 0;
                if (*v47) {
                  uint64_t v50 = *v47;
                }
                else {
                  uint64_t v50 = v44[v45 + 1];
                }
                uint64_t v131 = 0;
                long long v129 = 0u;
                long long v130 = 0u;
                long long v128 = 0u;
                if (v49) {
                  uint64_t v51 = (unsigned __int16 *)v47 + 11;
                }
                else {
                  uint64_t v51 = (unsigned __int16 *)v47 + 10;
                }
                if (v49) {
                  unint64_t v52 = (unsigned __int8 *)(v47 + 3);
                }
                else {
                  unint64_t v52 = (unsigned __int8 *)v47 + 26;
                }
                uint64_t v53 = (unsigned __int16 *)v47 + 9;
                if (v49) {
                  uint64_t v53 = v48;
                }
                uint64_t v125 = v53;
                GTMTLSMContext_getTextureDescriptor((uint64_t *)v120[5], v50, *v123, (uint64_t)&v128);
                uint64_t v54 = v120[1];
                uint64_t v138 = v50;
                uint64_t v55 = *(void *)(*(void *)(*find_entry(v54, &v138, 8uLL, 0) + 32) + 8);
                v146[0] = &off_759B88;
                v145[0] = @"type";
                v145[1] = @"DependencyGraphRequestedTextureAttachmentIndex";
                uint64_t v56 = +[NSNumber numberWithInt:v46];
                v146[1] = v56;
                v145[2] = @"object";
                id v57 = +[NSNumber numberWithUnsignedLongLong:v55];
                v146[2] = v57;
                _OWORD v146[3] = v124;
                v145[3] = @"resolution";
                v145[4] = @"DependencyGraphRequestedTextureSlice";
                id v58 = +[NSNumber numberWithInt:*v51];
                v146[4] = v58;
                v145[5] = @"DependencyGraphRequestedTextureLevel";
                id v59 = +[NSNumber numberWithInt:*v52];
                v146[5] = v59;
                v145[6] = @"DependencyGraphRequestedTextureDepthPlane";
                id v60 = +[NSNumber numberWithInt:*v125];
                v146[6] = v60;
                v145[7] = @"format";
                id v61 = +[NSNumber numberWithUnsignedLongLong:ResizeFormat(WORD1(v130))];
                v146[7] = v61;
                id v62 = +[NSDictionary dictionaryWithObjects:v146 forKeys:v145 count:8];
                [v127 addObject:v62];

                uint64_t v44 = v119;
                uint64_t v11 = v118;

                if (!v116)
                {
                  id v12 = v110;
                  uint64_t v20 = (uint64_t)v120;
                  unint64_t v22 = v112;
                  uint64_t v21 = v113;
                  long long v23 = v114;
                  goto LABEL_107;
                }
              }
            }
            ++v46;
            v45 += 8;
          }
          while (v45 != 64);
          long long v23 = v114;
          if ((v15 & 0x100) == 0 || !v44[85]) {
            goto LABEL_90;
          }
          uint64_t v63 = v44[84];
          uint64_t v64 = v63 ? v44[84] : v44[85];
          uint64_t v131 = 0;
          long long v129 = 0u;
          long long v130 = 0u;
          long long v128 = 0u;
          uint64_t v65 = v63 ? 692 : 694;
          uint64_t v66 = v63 ? 698 : 696;
          uint64_t v67 = v63 ? 690 : 688;
          GTMTLSMContext_getTextureDescriptor((uint64_t *)v120[5], v64, *v123, (uint64_t)&v128);
          uint64_t v68 = v120[1];
          uint64_t v138 = v64;
          uint64_t v69 = *(void *)(*(void *)(*find_entry(v68, &v138, 8uLL, 0) + 32) + 8);
          v143[0] = @"type";
          v143[1] = @"DependencyGraphRequestedTextureAttachmentIndex";
          v144[0] = &off_759B88;
          v144[1] = &off_759BA0;
          v143[2] = @"object";
          id v70 = +[NSNumber numberWithUnsignedLongLong:v69];
          v144[2] = v70;
          v144[3] = v124;
          v143[3] = @"resolution";
          v143[4] = @"DependencyGraphRequestedTextureSlice";
          uint64_t v71 = +[NSNumber numberWithInt:*(unsigned __int16 *)((char *)v119 + v65)];
          v144[4] = v71;
          v143[5] = @"DependencyGraphRequestedTextureLevel";
          uint64_t v72 = +[NSNumber numberWithInt:*((unsigned __int8 *)v119 + v66)];
          v144[5] = v72;
          v143[6] = @"DependencyGraphRequestedTextureDepthPlane";
          uint64_t v73 = +[NSNumber numberWithInt:*(unsigned __int16 *)((char *)v119 + v67)];
          v144[6] = v73;
          v143[7] = @"format";
          unsigned int v74 = +[NSNumber numberWithUnsignedLongLong:ResizeFormat(WORD1(v130))];
          v144[7] = v74;
          long long v75 = +[NSDictionary dictionaryWithObjects:v144 forKeys:v143 count:8];
          [v127 addObject:v75];

          uint64_t v11 = v118;
          uint64_t v44 = v119;

          long long v23 = v114;
          if (!v116)
          {
            id v12 = v110;
            uint64_t v20 = (uint64_t)v120;
            unint64_t v22 = v112;
            uint64_t v21 = v113;
          }
          else
          {
LABEL_90:
            id v12 = v110;
            uint64_t v20 = (uint64_t)v120;
            if ((v15 & 0x200) != 0 && v44[91])
            {
              uint64_t v76 = v44[90];
              uint64_t v77 = v44;
              if (v76) {
                uint64_t v78 = v44[90];
              }
              else {
                uint64_t v78 = v44[91];
              }
              uint64_t v131 = 0;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v128 = 0u;
              if (v76) {
                uint64_t v79 = 740;
              }
              else {
                uint64_t v79 = 742;
              }
              if (v76) {
                uint64_t v80 = 746;
              }
              else {
                uint64_t v80 = 744;
              }
              uint64_t v81 = 738;
              if (!v76) {
                uint64_t v81 = 736;
              }
              uint64_t v126 = v81;
              GTMTLSMContext_getTextureDescriptor((uint64_t *)v120[5], v78, *v123, (uint64_t)&v128);
              uint64_t v82 = v120[1];
              uint64_t v138 = v78;
              uint64_t v83 = *(void *)(*(void *)(*find_entry(v82, &v138, 8uLL, 0) + 32) + 8);
              v141[0] = @"type";
              v141[1] = @"DependencyGraphRequestedTextureAttachmentIndex";
              v142[0] = &off_759B88;
              v142[1] = &off_759BB8;
              v141[2] = @"object";
              unsigned int v84 = +[NSNumber numberWithUnsignedLongLong:v83];
              v142[2] = v84;
              v142[3] = v124;
              v141[3] = @"resolution";
              v141[4] = @"DependencyGraphRequestedTextureSlice";
              unsigned int v85 = +[NSNumber numberWithInt:*(unsigned __int16 *)((char *)v77 + v79)];
              v142[4] = v85;
              v141[5] = @"DependencyGraphRequestedTextureLevel";
              int64_t v86 = +[NSNumber numberWithInt:*((unsigned __int8 *)v77 + v80)];
              v142[5] = v86;
              v141[6] = @"DependencyGraphRequestedTextureDepthPlane";
              uint64_t v87 = +[NSNumber numberWithInt:*(unsigned __int16 *)((char *)v77 + v126)];
              v142[6] = v87;
              v141[7] = @"format";
              unint64_t v88 = +[NSNumber numberWithUnsignedLongLong:ResizeFormat(WORD1(v130))];
              v142[7] = v88;
              unint64_t v89 = +[NSDictionary dictionaryWithObjects:v142 forKeys:v141 count:8];
              [v127 addObject:v89];

              uint64_t v11 = v118;
              uint64_t v20 = (uint64_t)v120;

              long long v23 = v114;
            }
            unint64_t v22 = v112;
            uint64_t v21 = v113;
          }
LABEL_107:
          long long v27 = v111;
LABEL_108:
          if (objc_msgSend(v127, "count", v108))
          {
            uint64_t v115 = v23;
            if (*v27 >> 2 == 1073737833)
            {
              GetExecuteCommandsInBufferArgs((uint64_t)&v128, *(void *)(v11 + 24) + (v22 << 6), *(void *)(v20 + 16));
              v108[5] = 0u;
              v108[6] = 0u;
              v108[3] = 0u;
              v108[4] = 0u;
              v108[1] = 0u;
              v108[2] = 0u;
              *id v108 = 0u;
              uint64_t v90 = GTMTLSMContext_getObject(**(void **)(v20 + 40), v128, *v123);
              GTMTLCreateIndirectCommandEncoder((uint64_t)v108, v90[13]);
              unint64_t v91 = v129;
              if ((void)v129)
              {
                unint64_t v92 = 0;
                uint64_t v93 = v133;
                uint64_t v94 = *((void *)&v128 + 1) << 32;
                uint64_t v95 = (void *)(*((void *)&v129 + 1) + v131 + v133 * *((void *)&v128 + 1));
                do
                {
                  if (*v95)
                  {
                    unint64_t v96 = v22;
                    uint64_t v97 = v94 | v22;
                    uint64_t v98 = _processThumbnailAttachments(v122, v127, v97);
                    uint64_t v99 = +[NSNumber numberWithUnsignedLongLong:v97];
                    [v121 setObject:v98 forKeyedSubscript:v99];

                    unint64_t v22 = v96;
                  }
                  uint64_t v95 = (void *)((char *)v95 + v93);
                  ++v92;
                  v94 += 0x100000000;
                }
                while (v91 > v92);
              }
              uint64_t v20 = (uint64_t)v120;
              uint64_t v21 = v113;
              uint64_t v11 = v118;
            }
            else
            {
              _processThumbnailAttachments(v122, v127, v22);
              v101 = unint64_t v100 = v22;
              int v102 = +[NSNumber numberWithInt:v100];
              [v121 setObject:v101 forKeyedSubscript:v102];

              unint64_t v22 = v100;
            }
            long long v23 = v115;
          }
          goto LABEL_118;
        }
LABEL_54:
        long long v23 = 0;
      }
LABEL_118:
      if ((uint64_t)++v22 >= *(int *)(v11 + 12)) {
        goto LABEL_119;
      }
    }
    if (v26 <= -7159)
    {
      if (v26 != -16133)
      {
        if (v26 == -15310)
        {
          uint64_t v31 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)v25, *(unsigned __int8 *)(v24 + (v22 << 6) + 13), v21)+ 1);
          if (v31) {
            goto LABEL_35;
          }
        }
        goto LABEL_38;
      }
LABEL_32:
      long long v28 = GTTraceFunc_argumentBytesWithMap((void *)v25, *(unsigned __int8 *)(v24 + (v22 << 6) + 13), v21) + 8;
    }
    else
    {
      if (v26 != -7156 && v26 != -7157 && v26 != -7158) {
        goto LABEL_38;
      }
      long long v28 = GTTraceFunc_argumentBytesWithMap((void *)v25, *(unsigned __int8 *)(v24 + (v22 << 6) + 13), v21);
    }
    uint64_t v32 = GTMTLSMContext_getObject(**(void **)(v20 + 40), *(void *)v28, *(void *)v25);
    if (v32)
    {
      uint64_t v31 = v32[6];
      goto LABEL_35;
    }
    goto LABEL_38;
  }
LABEL_119:
  uint64_t v103 = *(void *)(v20 + 8);
  *(void *)&long long v128 = 1;
  uint64_t v104 = *(void *)(*(void *)(*find_entry(v103, &v128, 8uLL, 0) + 32) + 8);
  v139[0] = @"device";
  uint64_t v105 = +[NSNumber numberWithUnsignedLongLong:v104];
  v139[1] = @"object";
  v140[0] = v105;
  v140[1] = v121;
  unsigned int v106 = +[NSDictionary dictionaryWithObjects:v140 forKeys:v139 count:2];

  return v106;
}

id _processThumbnailAttachments(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  id v26 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v6, "count"));
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  obuint64_t j = v6;
  id v7 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v7)
  {
    id v8 = v7;
    id v9 = 0;
    uint64_t v24 = *(void *)v28;
    uint64_t v25 = a3 + 1;
    do
    {
      id v10 = 0;
      uint64_t v11 = v9;
      do
      {
        if (*(void *)v28 != v24) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v27 + 1) + 8 * (void)v10);
        id v13 = [v12 objectForKeyedSubscript:@"DependencyGraphRequestedTextureAttachmentIndex"];
        id v14 = [v12 objectForKeyedSubscript:@"format"];
        unint64_t v15 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v5 count]);
        v33[0] = @"object";
        v33[1] = @"format";
        v34[0] = v15;
        v34[1] = v14;
        id v9 = +[NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:2];

        uint64_t v16 = [&off_758C18 objectAtIndexedSubscript:[v13 unsignedIntegerValue]];
        [v26 setObject:v9 forKeyedSubscript:v16];

        id v17 = [v12 mutableCopy];
        id v18 = +[NSNumber numberWithUnsignedLongLong:v25];
        [v17 setObject:v18 forKeyedSubscript:@"functionIndex"];

        [v17 setObject:v15 forKeyedSubscript:@"DependencyGraphRequestedThumbnailTextureID"];
        [v5 addObject:v17];

        id v10 = (char *)v10 + 1;
        uint64_t v11 = v9;
      }
      while (v8 != v10);
      id v8 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v8);
  }
  else
  {
    id v9 = 0;
  }

  uint64_t v19 = [v9 objectForKeyedSubscript:@"object"];
  uint64_t v20 = [v9 objectForKeyedSubscript:@"format"];
  v31[0] = @"object";
  v31[1] = @"format";
  v32[0] = v19;
  v32[1] = v20;
  v31[2] = @"target";
  v32[2] = v26;
  uint64_t v21 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:3];

  return v21;
}

id GTMTLReplayClient_generateDependencyGraphThumbnails(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 objectForKeyedSubscript:@"DependencyGraphRequestedTexturesForThumbnail"];
  uint64_t v44 = v5;
  uint64_t v55 = [v5 objectForKeyedSubscript:@"resolution"];
  id v47 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:[v7 count]];
  uint64_t v48 = v7;
  id v8 = [v7 allKeys];
  id v9 = [v8 sortedArrayUsingSelector:"compare:"];

  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  obuint64_t j = v9;
  id v49 = [obj countByEnumeratingWithState:&v76 objects:v90 count:16];
  if (v49)
  {
    uint64_t v46 = *(void *)v77;
    uint64_t v53 = a1;
    uint64_t v54 = v6;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v77 != v46) {
          objc_enumerationMutation(obj);
        }
        uint64_t v51 = v10;
        uint64_t v11 = *(void **)(*((void *)&v76 + 1) + 8 * v10);
        id v12 = (char *)[v11 unsignedLongLongValue];
        uint64_t v50 = v11;
        id v13 = [v48 objectForKeyedSubscript:v11];
        id v58 = objc_alloc_init((Class)NSMutableArray);
        long long v72 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        id v52 = v13;
        id v60 = [v52 countByEnumeratingWithState:&v72 objects:v89 count:16];
        if (v60)
        {
          uint64_t v59 = *(void *)v73;
          uint64_t v56 = v12 + 1;
          id v57 = v12;
          do
          {
            for (uint64_t i = 0; i != v60; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v73 != v59) {
                objc_enumerationMutation(v52);
              }
              unint64_t v15 = *(void **)(*((void *)&v72 + 1) + 8 * i);
              uint64_t v16 = [v15 objectForKeyedSubscript:@"DependencyGraphRequestedTextureID"];
              AliasStreaunint64_t m = (uint64_t *)GetAliasStream(*(void *)(a1 + 24), (uint64_t)[v16 unsignedLongLongValue], (unint64_t)&v12[*(void *)(a1 + 80)]);
              if (AliasStream) {
                uint64_t v18 = *AliasStream;
              }
              else {
                uint64_t v18 = 0;
              }
              uint64_t v71 = 0;
              long long v69 = 0u;
              long long v70 = 0u;
              long long v68 = 0u;
              GTMTLSMContext_getTextureDescriptor(*(uint64_t **)(a1 + 40), v18, (unint64_t)&v12[*(void *)(a1 + 80)], (uint64_t)&v68);
              if (DWORD2(v69))
              {
                uint64_t v19 = WORD1(v70);
                if ((unint64_t)WORD1(v70) - 261 >= 2)
                {
                  if (WORD1(v70) == 1) {
                    uint64_t v19 = 10;
                  }
                }
                else
                {
                  uint64_t v19 = 253;
                }
                long long v23 = [v15 objectForKeyedSubscript:@"DependencyGraphRequestedTextureAttachmentIndex"];
                id v62 = v23;
                if (v23 && (v19 == 260 || v19 == 255))
                {
                  uint64_t v24 = v6;
                  if ([v23 unsignedIntegerValue] == (char *)&dword_8 + 1)
                  {
                    WORD1(v70) = 253;
                    uint64_t v19 = 253;
                  }
                }
                else
                {
                  uint64_t v24 = v6;
                }
                id v25 = [v15 mutableCopy];
                id v26 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v24 count]);
                v86[0] = v26;
                v85[0] = @"DependencyGraphRequestedThumbnailTextureID";
                v85[1] = @"format";
                long long v27 = +[NSNumber numberWithUnsignedLongLong:ResizeFormat(v19)];
                v86[1] = v27;
                long long v28 = +[NSDictionary dictionaryWithObjects:v86 forKeys:v85 count:2];
                [v25 addEntriesFromDictionary:v28];

                id v61 = v25;
                [v58 addObject:v25];
                v83[0] = @"type";
                v83[1] = @"object";
                v84[0] = &off_759B88;
                uint64_t v63 = v16;
                v84[1] = v16;
                v83[2] = @"functionIndex";
                long long v29 = +[NSNumber numberWithUnsignedLongLong:v56];
                v84[2] = v29;
                v84[3] = v55;
                v83[3] = @"resolution";
                v83[4] = @"DependencyGraphRequestedThumbnailTextureID";
                v84[4] = v26;
                long long v30 = +[NSDictionary dictionaryWithObjects:v84 forKeys:v83 count:5];
                id v31 = [v30 mutableCopy];

                long long v66 = 0u;
                long long v67 = 0u;
                long long v64 = 0u;
                long long v65 = 0u;
                id v32 = [&off_758C30 countByEnumeratingWithState:&v64 objects:v82 count:16];
                if (v32)
                {
                  id v33 = v32;
                  uint64_t v34 = *(void *)v65;
                  do
                  {
                    for (uint64_t j = 0; j != v33; uint64_t j = (char *)j + 1)
                    {
                      if (*(void *)v65 != v34) {
                        objc_enumerationMutation(&off_758C30);
                      }
                      uint64_t v36 = *(void *)(*((void *)&v64 + 1) + 8 * (void)j);
                      int v37 = [v15 objectForKeyedSubscript:v36];
                      if (v37) {
                        [v31 setObject:v37 forKeyedSubscript:v36];
                      }
                    }
                    id v33 = [&off_758C30 countByEnumeratingWithState:&v64 objects:v82 count:16];
                  }
                  while (v33);
                }
                id v6 = v54;
                [v54 addObject:v31];

                a1 = v53;
                id v12 = v57;
                id v22 = v62;
                uint64_t v16 = v63;
              }
              else
              {
                v88[0] = @"Failed to generate dependency graph thumbnail";
                v87[0] = NSLocalizedDescriptionKey;
                v87[1] = @"GTErrorKeyTraceStreamID";
                uint64_t v20 = +[NSNumber numberWithUnsignedLongLong:v18];
                v88[1] = v20;
                uint64_t v21 = +[NSDictionary dictionaryWithObjects:v88 forKeys:v87 count:2];
                MakeNSError(101, v21);
                id v22 = (id)objc_claimAutoreleasedReturnValue();

                GTMTLReplay_handleNSError(v22);
              }
            }
            id v60 = [v52 countByEnumeratingWithState:&v72 objects:v89 count:16];
          }
          while (v60);
        }

        [v47 setObject:v58 forKeyedSubscript:v50];
        uint64_t v10 = v51 + 1;
      }
      while ((id)(v51 + 1) != v49);
      id v49 = [obj countByEnumeratingWithState:&v76 objects:v90 count:16];
    }
    while (v49);
  }

  uint64_t v38 = *(void *)(a1 + 8);
  *(void *)&long long v68 = 1;
  uint64_t v39 = *(void *)(*(void *)(*find_entry(v38, &v68, 8uLL, 0) + 32) + 8);
  v80[0] = @"device";
  int v40 = +[NSNumber numberWithUnsignedLongLong:v39];
  v80[1] = @"object";
  v81[0] = v40;
  int v41 = +[NSDictionary dictionaryWithDictionary:v47];
  v81[1] = v41;
  uint64_t v42 = +[NSDictionary dictionaryWithObjects:v81 forKeys:v80 count:2];

  return v42;
}

void GTMTLReplayErrorHandling_initWithObserver(id obj)
{
}

id GTMTLReplay_dictionaryFromCommandBuffer(void *a1)
{
  id v1 = a1;
  long long v70 = [v1 error];
  v101[0] = @"retainedReferences";
  uint64_t v2 = &send_ptr;
  long long v69 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v1 retainedReferences]);
  v102[0] = v69;
  v101[1] = @"label";
  long long v68 = [v1 label];
  if (v68) {
    [v1 label];
  }
  else {
  long long v67 = +[NSNull null];
  }
  v102[1] = v67;
  v101[2] = @"kernelStartTime";
  [v1 kernelStartTime];
  long long v66 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v102[2] = v66;
  v101[3] = @"kernelEndTime";
  [v1 kernelEndTime];
  long long v65 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v102[3] = v65;
  v101[4] = @"GPUStartTime";
  [v1 GPUStartTime];
  long long v64 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v102[4] = v64;
  v101[5] = @"GPUEndTime";
  [v1 GPUEndTime];
  uint64_t v63 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v102[5] = v63;
  v101[6] = @"status";
  uint64_t v71 = v1;
  id v62 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 status]);
  v102[6] = v62;
  v101[7] = @"error";
  if (v70)
  {
    id v3 = v70;
    uint64_t v4 = [v3 userInfo];
    id v5 = [v4 objectForKeyedSubscript:@"MTLCommandBufferEncoderInfoErrorKey"];

    CFStringRef v103 = @"domain";
    id v6 = [v3 domain];
    uint64_t v114 = v6;
    CFStringRef v104 = @"code";
    id v7 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 code]);
    uint64_t v115 = v7;
    CFStringRef v105 = @"localizedDescription";
    uint64_t v8 = [v3 localizedDescription];
    id v9 = (void *)v8;
    uint64_t v116 = v8;
    CFStringRef v106 = @"commandBufferEncoderInfo";
    if (v5)
    {
      unint64_t v89 = (void *)v8;
      id v91 = v7;
      uint64_t v93 = v6;
      uint64_t v95 = v5;
      id v97 = v3;
      id v10 = v5;
      id v11 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v10, "count"));
      long long v125 = 0u;
      long long v126 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      obuint64_t j = v10;
      id v12 = [obj countByEnumeratingWithState:&v125 objects:&v133 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v126;
        do
        {
          for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v126 != v14) {
              objc_enumerationMutation(obj);
            }
            uint64_t v16 = *(void **)(*((void *)&v125 + 1) + 8 * i);
            *(void *)&long long v129 = @"label";
            id v17 = [v16 label];
            if (v17) {
              [v16 label];
            }
            else {
            uint64_t v18 = +[NSNull null];
            }
            *(void *)&long long v137 = v18;
            *((void *)&v129 + 1) = @"debugSignposts";
            uint64_t v19 = [v16 debugSignposts];
            if (v19) {
              [v16 debugSignposts];
            }
            else {
            uint64_t v20 = +[NSNull null];
            }
            *((void *)&v137 + 1) = v20;
            *(void *)&long long v130 = @"errorState";
            uint64_t v21 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v16 errorState]);
            *(void *)&long long v138 = v21;
            id v22 = +[NSDictionary dictionaryWithObjects:&v137 forKeys:&v129 count:3];
            [v11 addObject:v22];
          }
          id v13 = [obj countByEnumeratingWithState:&v125 objects:&v133 count:16];
        }
        while (v13);
      }

      id v23 = [v11 copy];
      uint64_t v2 = &send_ptr;
      id v5 = v95;
      id v3 = v97;
      id v7 = v91;
      id v6 = v93;
      id v9 = v89;
    }
    else
    {
      id v23 = +[NSNull null];
    }
    id v117 = v23;
    uint64_t v24 = +[NSDictionary dictionaryWithObjects:&v114 forKeys:&v103 count:4];
  }
  else
  {
    uint64_t v24 = +[NSNull null];
  }
  id v61 = (void *)v24;
  v102[7] = v24;
  v101[8] = @"errorOptions";
  id v60 = [v2[211] numberWithUnsignedInteger:[v71 errorOptions]];
  v102[8] = v60;
  v101[9] = @"logs";
  id v25 = [v71 logs];
  id v74 = objc_alloc_init((Class)NSMutableArray);
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  id v72 = v25;
  id v75 = [v72 countByEnumeratingWithState:&v129 objects:&v125 count:16];
  if (v75)
  {
    uint64_t v73 = *(void *)v130;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v130 != v73) {
          objc_enumerationMutation(v72);
        }
        long long v27 = *(void **)(*((void *)&v129 + 1) + 8 * v26);
        long long v28 = [v27 function];
        long long v29 = [v27 buffer];
        uint64_t v87 = v26;
        if (objc_opt_respondsToSelector()) {
          +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v27 performSelector:"encoderIdentifier"]);
        }
        else {
        uint64_t v90 = +[NSNull null];
        }
        if (objc_opt_respondsToSelector())
        {
          id v30 = [v27 performSelector:"encoderLabel"];
        }
        else
        {
          id v30 = +[NSNull null];
        }
        uint64_t v31 = (uint64_t)v30;
        unsigned int v85 = v30;
        CFStringRef v103 = @"type";
        unsigned int v84 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v27 type]);
        uint64_t v114 = v84;
        CFStringRef v104 = @"encoderMethodIdentifier";
        uint64_t v83 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v27 encoderMethodIdentifier]);
        uint64_t v115 = v83;
        uint64_t v116 = v31;
        CFStringRef v105 = @"encoderLabel";
        CFStringRef v106 = @"encoderIdentifier";
        id v117 = v90;
        CFStringRef v107 = @"function";
        int64_t v86 = v28;
        unint64_t v88 = v29;
        if (v28)
        {
          id v32 = v28;
          *(void *)&long long v137 = @"label";
          id v33 = [v32 label];
          if (v33) {
            [v32 label];
          }
          else {
          id v35 = +[NSNull null];
          }
          uint64_t v133 = v35;
          *((void *)&v137 + 1) = @"functionType";
          uint64_t v36 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v32 functionType]);
          long long v134 = v36;
          *(void *)&long long v138 = @"name";
          int v37 = [v32 name];
          long long v135 = v37;
          uint64_t v34 = +[NSDictionary dictionaryWithObjects:&v133 forKeys:&v137 count:3];

          long long v29 = v88;
        }
        else
        {
          uint64_t v34 = +[NSNull null];
        }
        uint64_t v118 = v34;
        CFStringRef v108 = @"logMessage";
        uint64_t v81 = [v27 description];
        if (v81) {
          [v27 description];
        }
        else {
        uint64_t v80 = +[NSNull null];
        }
        long long v119 = v80;
        CFStringRef v109 = @"addressSpace";
        long long v79 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v27 addressSpace]);
        long long v120 = v79;
        CFStringRef v110 = @"buffer";
        uint64_t v82 = (void *)v34;
        if (v29)
        {
          id v38 = v29;
          *(void *)&long long v137 = @"length";
          uint64_t v39 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v38 length]);
          uint64_t v133 = v39;
          *((void *)&v137 + 1) = @"label";
          int v40 = [v38 label];
          if (v40) {
            [v38 label];
          }
          else {
          long long v29 = +[NSNull null];
          }
          long long v134 = v29;
          *(void *)&long long v138 = @"resourceOptions";
          uint64_t v42 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v38 resourceOptions]);
          long long v135 = v42;
          *((void *)&v138 + 1) = @"allocatedSize";
          BOOL v43 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v38 allocatedSize]);
          long long v136 = v43;
          uint64_t v41 = +[NSDictionary dictionaryWithObjects:&v133 forKeys:&v137 count:4];
        }
        else
        {
          uint64_t v41 = +[NSNull null];
        }
        long long v78 = (void *)v41;
        uint64_t v121 = v41;
        CFStringRef v111 = @"offset";
        long long v77 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v27 offset]);
        id v122 = v77;
        CFStringRef v112 = @"operation";
        long long v76 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v27 operation]);
        size_t v123 = v76;
        CFStringRef v113 = @"errorStackTrace";
        id v44 = [v27 errorStackTrace];
        id v96 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v44, "count"));
        long long v137 = 0u;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v140 = 0u;
        id v92 = v44;
        id v98 = [v92 countByEnumeratingWithState:&v137 objects:&v133 count:16];
        if (v98)
        {
          uint64_t v94 = *(void *)v138;
          do
          {
            for (uint64_t j = 0; j != v98; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v138 != v94) {
                objc_enumerationMutation(v92);
              }
              id v46 = *(id *)(*((void *)&v137 + 1) + 8 * (void)j);
              v141[0] = @"functionName";
              uint64_t v47 = [v46 functionName];
              if (v47) {
                [v46 functionName];
              }
              else {
              uint64_t v48 = +[NSNull null];
              }
              v142[0] = v48;
              v141[1] = @"URL";
              id v49 = [v46 URL];
              uint64_t v50 = [v49 path];
              id obja = (id)v47;
              if (v50)
              {
                long long v29 = [v46 URL];
                [v29 path];
              }
              else
              {
                +[NSNull null];
              uint64_t v51 = };
              v142[1] = v51;
              v141[2] = @"line";
              id v52 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v46 line]);
              v142[2] = v52;
              v141[3] = @"column";
              uint64_t v53 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v46 column]);
              v142[3] = v53;
              uint64_t v54 = +[NSDictionary dictionaryWithObjects:v142 forKeys:v141 count:4];

              if (v50)
              {

                uint64_t v51 = v29;
              }

              [v96 addObject:v54];
            }
            id v98 = [v92 countByEnumeratingWithState:&v137 objects:&v133 count:16];
          }
          while (v98);
        }

        id v55 = [v96 copy];
        id v124 = v55;
        uint64_t v56 = +[NSDictionary dictionaryWithObjects:&v114 forKeys:&v103 count:11];
        [v74 addObject:v56];

        uint64_t v26 = v87 + 1;
      }
      while ((id)(v87 + 1) != v75);
      id v75 = [v72 countByEnumeratingWithState:&v129 objects:&v125 count:16];
    }
    while (v75);
  }

  id v57 = [v74 copy];
  v102[9] = v57;
  id v58 = +[NSDictionary dictionaryWithObjects:v102 forKeys:v101 count:10];

  return v58;
}

void GTMTLReplay_handleError(int a1, uint64_t a2, char *__s1, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = strstr(__s1, "gputools");
  if (a6 > 15)
  {
    if (a6 > 63)
    {
      if (a6 == 64)
      {
        id v13 = "Access tracking";
        goto LABEL_16;
      }
      if (a6 == 128)
      {
        id v13 = "Post vertex";
        goto LABEL_16;
      }
    }
    else
    {
      if (a6 == 16)
      {
        id v13 = "Wireframe";
        goto LABEL_16;
      }
      if (a6 == 32)
      {
        id v13 = "Fetch resource";
LABEL_16:
        unint64_t v15 = +[NSString stringWithUTF8String:v13];
        uint64_t v16 = +[NSString stringWithUTF8String:a2];
        uint64_t v14 = +[NSString stringWithFormat:@"%@: %@", v15, v16];

        goto LABEL_17;
      }
    }
LABEL_15:
    id v13 = "Internal";
    goto LABEL_16;
  }
  id v13 = "Shader Profiler";
  switch(a6)
  {
    case 1:
      uint64_t v14 = +[NSString stringWithUTF8String:a2];
      break;
    case 2:
      goto LABEL_16;
    case 4:
      id v13 = "Shader Debugger";
      goto LABEL_16;
    case 8:
      id v13 = "Thumbnails";
      goto LABEL_16;
    default:
      goto LABEL_15;
  }
LABEL_17:
  if (v12) {
    id v17 = v12;
  }
  else {
    id v17 = __s1;
  }
  v24[0] = v14;
  v23[0] = NSLocalizedDescriptionKey;
  v23[1] = @"GTErrorKeyFile";
  uint64_t v18 = +[NSString stringWithUTF8String:v17];
  v24[1] = v18;
  v23[2] = @"GTErrorKeyFunction";
  uint64_t v19 = +[NSString stringWithUTF8String:a4];
  v24[2] = v19;
  v23[3] = @"GTErrorKeyLine";
  uint64_t v20 = +[NSNumber numberWithInt:a5];
  v24[3] = v20;
  uint64_t v21 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:4];
  id v22 = MakeNSError(a1, v21);

  GTMTLReplay_handleNSError(v22);
}

id MakeNSError(int a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        id v11 = [v5 objectForKeyedSubscript:v10, v23];
        [v4 setObject:v11 forKey:v10];
      }
      id v7 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v7);
  }

  id v12 = +[NSThread callStackSymbols];
  if (v12) {
    [v4 setObject:v12 forKey:@"GTErrorKeyCallStack"];
  }
  if (a1 == 100) {
    goto LABEL_11;
  }
  uint64_t v14 = pthread_self();
  pthread_rwlock_rdlock(&rwlock);
  uint64_t v15 = 0;
  uint64_t v16 = (pthread_t *)threadLocalLogs;
  while (!pthread_equal(v14, *v16))
  {
    ++v15;
    v16 += 2;
    if (v15 == 7)
    {
      id v13 = 0;
      goto LABEL_18;
    }
  }
  id v13 = (id)threadLocalLogs[2 * v15 + 1];
LABEL_18:
  pthread_rwlock_unlock(&rwlock);
  if (!v13)
  {
    label = dispatch_queue_get_label(0);
    if (strncmp(label, "gputools.MTLReplayer.serialQueue", 0x20uLL)) {
      goto LABEL_26;
    }
LABEL_11:
    id v13 = (id)g_activityLog;
    if (!v13) {
      goto LABEL_26;
    }
  }
  id v17 = [v13 getBreadcrumbSummary];
  if ([v17 count]) {
    [v4 setObject:v17 forKey:@"GTErrorKeyReplayerContext"];
  }
  uint64_t v18 = [v13 getBreadcrumbsAsJSON];
  if (v18) {
    [v4 setObject:v18 forKey:@"GTErrorKeyReplayerBreadcrumbs"];
  }
  uint64_t v19 = [v13 gputracePath];
  if (v19) {
    [v4 setObject:v19 forKey:@"GTErrorKeyGputracePath"];
  }

LABEL_26:
  uint64_t v20 = +[NSError errorWithDomain:@"com.apple.gputools.MTLReplayer", a1, v4, (void)v23 code userInfo];

  return v20;
}

void GTMTLReplay_handleNSError(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 domain];

  if (v2 != @"com.apple.gputools.MTLReplayer") {
    goto LABEL_10;
  }
  id v3 = [v1 userInfo];
  id v4 = [v3 objectForKeyedSubscript:NSLocalizedDescriptionKey];

  id v5 = [v1 userInfo];
  id v6 = [v5 objectForKeyedSubscript:NSLocalizedFailureReasonErrorKey];

  if (v4 && v6 != 0)
  {
LABEL_10:
    id v11 = v1;
    goto LABEL_11;
  }
  id v8 = objc_alloc((Class)NSMutableDictionary);
  id v9 = [v1 userInfo];
  id v10 = [v8 initWithDictionary:v9];

  if (!v4)
  {
    id v29 = v1;
    id v30 = [v29 domain];
    unsigned int v31 = [v30 isEqualToString:@"com.apple.gputools.MTLReplayer"];

    if (v31)
    {
      id v32 = (char *)[v29 code];
      if (v32 == &stru_B8.segname[1])
      {
        uint64_t v34 = (__CFString *)objc_alloc_init((Class)NSMutableString);
        [(__CFString *)v34 appendString:@"The replayer encountered an error during command buffer"];
        id v35 = [v29 userInfo];
        uint64_t v36 = [v35 objectForKeyedSubscript:@"GTErrorKeyMTLCommandBuffer"];
        int v37 = [v36 objectForKeyedSubscript:@"label"];

        if (v37)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            [(__CFString *)v34 appendFormat:@" \"%@\"", v37];
          }
        }
        [(__CFString *)v34 appendString:@" execution."];
      }
      else
      {
        CFStringRef v33 = @"The replayer encountered an internal error.";
        if (v32 != (unsigned char *)&stru_20.flags + 1) {
          CFStringRef v33 = 0;
        }
        if (v32 == (unsigned char *)&stru_20.flags + 2) {
          uint64_t v34 = @"The replayer could not harvest a resource.";
        }
        else {
          uint64_t v34 = (__CFString *)v33;
        }
      }
    }
    else
    {
      uint64_t v34 = 0;
    }

    [v10 setObject:v34 forKeyedSubscript:NSLocalizedDescriptionKey];
    if (v6) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  if (!v6)
  {
LABEL_38:
    id v38 = v1;
    uint64_t v39 = [v38 domain];
    unsigned int v40 = [v39 isEqualToString:@"com.apple.gputools.MTLReplayer"];

    if (v40 && [v38 code] == &stru_B8.segname[1])
    {
      uint64_t v41 = [v38 userInfo];
      uint64_t v42 = [v41 objectForKeyedSubscript:@"GTErrorKeyMTLCommandBuffer"];
      BOOL v43 = [v42 objectForKeyedSubscript:@"error"];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v44 = [v43 objectForKeyedSubscript:@"localizedDescription"];
      }
      else
      {
        id v44 = 0;
      }
    }
    else
    {
      id v44 = 0;
    }

    [v10 setObject:v44 forKeyedSubscript:NSLocalizedFailureReasonErrorKey];
  }
LABEL_46:
  uint64_t v45 = [v1 domain];
  +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v45, [v1 code], v10);
  id v11 = (id)objc_claimAutoreleasedReturnValue();

LABEL_11:
  id v12 = v11;
  if (v12)
  {
    id v13 = objc_alloc_init((Class)NSMutableString);
    uint64_t v14 = [v12 domain];
    id v15 = [v12 code];
    uint64_t v16 = [v12 localizedDescription];
    id v17 = [v12 localizedFailureReason];
    [v13 appendFormat:@"Replayer error\nDomain: %@\nCode: %d\nDescription: %@\nReason: %@\n", v14, v15, v16, v17];

    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v18 = [v12 userInfo];
    id v19 = [v18 countByEnumeratingWithState:&v46 objects:v52 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v47 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void *)(*((void *)&v46 + 1) + 8 * i);
          long long v24 = [v12 userInfo];
          long long v25 = [v24 objectForKeyedSubscript:v23];
          [v13 appendFormat:@"%@: %@\n", v23, v25];
        }
        id v20 = [v18 countByEnumeratingWithState:&v46 objects:v52 count:16];
      }
      while (v20);
    }

    if (s_logUsingOsLog)
    {
      long long v26 = gt_default_log();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      {
        id v27 = [v13 UTF8String];
        *(_DWORD *)buf = 136315138;
        id v51 = v27;
        _os_log_fault_impl(&def_1C1270, v26, OS_LOG_TYPE_FAULT, "fail: %s", buf, 0xCu);
      }
    }
    else
    {
      long long v28 = __stderrp;
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"fail: %s", [v13 UTF8String]);
      long long v26 = objc_claimAutoreleasedReturnValue();
      fprintf(v28, "%s\n", (const char *)[v26 UTF8String]);
    }
  }
  [(id)_observer notifyError:v12];
}

void GTMTLReplay_handleUnderlyingNSError(void *a1, void *a2)
{
  id v6 = a2;
  id v3 = a1;
  id v4 = +[NSMutableDictionary dictionary];
  [v4 setObject:v3 forKeyedSubscript:NSLocalizedDescriptionKey];

  if (v6) {
    [v4 setObject:v6 forKeyedSubscript:NSUnderlyingErrorKey];
  }
  MakeNSError(101, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  GTMTLReplay_handleNSError(v5);
}

void *GTMTLReplay_fillError(void *result, int a2, void *a3)
{
  if (result)
  {
    id v3 = result;
    MakeNSError(a2, a3);
    uint64_t result = (id)objc_claimAutoreleasedReturnValue();
    *id v3 = result;
  }
  return result;
}

void GTMTLReplay_handleCommandBufferError(uint64_t a1)
{
  id v1 = +[NSError errorWithDomain:@"com.apple.gputools.MTLReplayer" code:201 userInfo:a1];
  GTMTLReplay_handleNSError(v1);
}

void HandleCrashSignal(uint64_t a1)
{
  v9[0] = NSLocalizedDescriptionKey;
  uint64_t v2 = +[NSString stringWithUTF8String:strsignal(a1)];
  v9[1] = @"GTErrorKeyProcessSignal";
  v10[0] = v2;
  id v3 = +[NSString stringWithUTF8String:sys_signame[(int)a1]];
  id v4 = [v3 uppercaseString];
  id v5 = +[NSString stringWithFormat:@"SIG%@", v4];
  v10[1] = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];
  MakeNSError(100, v6);
  id v7 = (id)objc_claimAutoreleasedReturnValue();

  GTMTLReplay_handleNSError(v7);
  sigaction v8 = *(sigaction *)&oldHandlers[2 * (int)a1];
  sigaction(a1, &v8, 0);
  if (v8.__sigaction_u.__sa_handler != (void (__cdecl *)(int))((char *)&def_1C1270 + 1))
  {
    if (v8.__sigaction_u.__sa_handler) {
      ((void (*)(uint64_t))v8.__sigaction_u.__sa_handler)(a1);
    }
    else {
      raise(a1);
    }
  }
}

id SerializeMTLTextureDescriptorToDictionary(void *a1)
{
  v19[0] = @"textureType";
  id v1 = a1;
  uint64_t v18 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 textureType]);
  v20[0] = v18;
  v19[1] = @"pixelFormat";
  id v17 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 pixelFormat]);
  v20[1] = v17;
  v19[2] = @"width";
  uint64_t v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 width]);
  v20[2] = v16;
  v19[3] = @"height";
  id v15 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 height]);
  v20[3] = v15;
  v19[4] = @"depth";
  uint64_t v14 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 depth]);
  v20[4] = v14;
  v19[5] = @"mipmapLevelCount";
  id v13 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 mipmapLevelCount]);
  v20[5] = v13;
  v19[6] = @"sampleCount";
  uint64_t v2 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 sampleCount]);
  v20[6] = v2;
  v19[7] = @"arrayLength";
  id v3 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 arrayLength]);
  v20[7] = v3;
  v19[8] = @"cpuCacheMode";
  id v4 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 cpuCacheMode]);
  v20[8] = v4;
  v19[9] = @"storageMode";
  id v5 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 storageMode]);
  v20[9] = v5;
  v19[10] = @"hazardTrackingMode";
  id v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 hazardTrackingMode]);
  v20[10] = v6;
  v19[11] = @"allowGPUOptimizedContents";
  id v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v1 allowGPUOptimizedContents]);
  v20[11] = v7;
  v19[12] = @"usage";
  sigaction v8 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1 usage]);
  v20[12] = v8;
  v19[13] = @"swizzleKey";
  id v9 = [v1 swizzleKey];

  id v10 = +[NSNumber numberWithUnsignedInt:v9];
  v20[13] = v10;
  id v11 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:14];

  return v11;
}

id GTAGXProfilingSupportHelper::RemappedCSV(GTAGXProfilingSupportHelper *this)
{
  RemappingCSVPath(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v2 = +[NSString stringWithUTF8String:p_p];
  id v3 = +[NSData dataWithContentsOfFile:v2];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v3;
}

void sub_29E59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *RemappingCSVPath(std::string *a1)
{
  uint64_t v2 = (std::string *)std::string::basic_string[abi:nn180100]<0>(a1, "/Apple");
  std::string::append(v2, "Internal/");
  std::string::append(a1, "Library/");
  std::string::append(a1, "AGX/");
  std::string::append(a1, "AGXRawCounterMapping");
  return std::string::append(a1, ".csv");
}

void sub_29E63C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void GTAGXProfilingSupportHelper::Initialize(GTAGXProfilingSupportHelper *this, NSDictionary *a2)
{
  id v6 = this;
  uint64_t v2 = [(GTAGXProfilingSupportHelper *)v6 objectForKeyedSubscript:@"gpu_gen"];
  [v2 unsignedIntValue];

  id v3 = [(GTAGXProfilingSupportHelper *)v6 objectForKeyedSubscript:@"num_cores"];
  [v3 unsignedIntValue];

  id v4 = [(GTAGXProfilingSupportHelper *)v6 objectForKeyedSubscript:@"num_mgpus"];
  [v4 unsignedIntValue];

  id v5 = [(GTAGXProfilingSupportHelper *)v6 objectForKeyedSubscript:@"gpu_rev"];
  if (([v5 isEqualToString:@"A0"] & 1) == 0
    && ([v5 isEqualToString:@"A1"] & 1) == 0
    && ([v5 isEqualToString:@"B0"] & 1) == 0
    && ([v5 isEqualToString:@"B1"] & 1) == 0
    && ([v5 isEqualToString:@"C0"] & 1) == 0)
  {
    [v5 isEqualToString:@"C1"];
  }

  agxps_gpu_create();
}

void sub_29F548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (*(char *)(v56 - 185) < 0) {
    operator delete(*(void **)(v56 - 208));
  }

  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_impl<char const*&,std::vector<std::string>>(uint64_t *a1, char *a2, uint64_t a3)
{
  id v6 = a1 + 2;
  id v7 = (char *)operator new(0x40uLL);
  v44[0] = v7;
  v44[1] = v6;
  char v45 = 0;
  *(void *)id v7 = 0;
  *((void *)v7 + 1) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)v7 + 2, a2);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)a3;
  *((void *)v7 + 7) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  char v45 = 1;
  int v8 = v7[39];
  if (v8 >= 0) {
    id v9 = (uint64_t *)(v7 + 16);
  }
  else {
    id v9 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v7[39];
  }
  else {
    unint64_t v10 = *((void *)v7 + 3);
  }
  *((void *)v7 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  *((void *)v7 + 1) = v11;
  unint64_t v12 = a1[1];
  if (!v12) {
    goto LABEL_23;
  }
  unint64_t v13 = v11;
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = v11;
    if (v12 <= v11) {
      unint64_t v16 = v11 % v12;
    }
  }
  else
  {
    unint64_t v16 = (v12 - 1) & v11;
  }
  id v17 = *(void ***)(*a1 + 8 * v16);
  if (!v17 || (uint64_t v18 = (char *)*v17) == 0)
  {
LABEL_23:
    float v20 = (float)(unint64_t)(a1[3] + 1);
    float v21 = *((float *)a1 + 8);
    if (!v12 || (float)(v21 * (float)v12) < v20)
    {
      BOOL v22 = 1;
      if (v12 >= 3) {
        BOOL v22 = (v12 & (v12 - 1)) != 0;
      }
      unint64_t v23 = v22 | (2 * v12);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v12 = a1[1];
      }
      if (*(void *)&prime > v12) {
        goto LABEL_91;
      }
      if (*(void *)&prime >= v12) {
        goto LABEL_64;
      }
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v12 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v12)
      {
        unint64_t v12 = a1[1];
        goto LABEL_64;
      }
      if (prime)
      {
LABEL_91:
        if (*(void *)&prime >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v26 = operator new(8 * *(void *)&prime);
        id v27 = (void *)*a1;
        *a1 = (uint64_t)v26;
        if (v27) {
          operator delete(v27);
        }
        uint64_t v28 = 0;
        a1[1] = (uint64_t)prime;
        do
          *(void *)(*a1 + 8 * v28++) = 0;
        while (*(void *)&prime != v28);
        id v29 = (void *)*v6;
        if (*v6)
        {
          unint64_t v30 = v29[1];
          uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
          v31.i16[0] = vaddlv_u8(v31);
          if (v31.u32[0] > 1uLL)
          {
            if (v30 >= *(void *)&prime) {
              v30 %= *(void *)&prime;
            }
          }
          else
          {
            v30 &= *(void *)&prime - 1;
          }
          *(void *)(*a1 + 8 * v30) = v6;
          id v35 = (void *)*v29;
          if (*v29)
          {
            do
            {
              unint64_t v36 = v35[1];
              if (v31.u32[0] > 1uLL)
              {
                if (v36 >= *(void *)&prime) {
                  v36 %= *(void *)&prime;
                }
              }
              else
              {
                v36 &= *(void *)&prime - 1;
              }
              if (v36 != v30)
              {
                if (!*(void *)(*a1 + 8 * v36))
                {
                  *(void *)(*a1 + 8 * v36) = v29;
                  goto LABEL_60;
                }
                *id v29 = *v35;
                *id v35 = **(void **)(*a1 + 8 * v36);
                **(void **)(*a1 + 8 * v36) = v35;
                id v35 = v29;
              }
              unint64_t v36 = v30;
LABEL_60:
              id v29 = v35;
              id v35 = (void *)*v35;
              unint64_t v30 = v36;
            }
            while (v35);
          }
        }
        unint64_t v12 = (unint64_t)prime;
      }
      else
      {
        BOOL v43 = (void *)*a1;
        *a1 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v12 = 0;
        a1[1] = 0;
      }
    }
LABEL_64:
    unint64_t v37 = *((void *)v7 + 1);
    uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.u32[0] > 1uLL)
    {
      if (v37 >= v12) {
        v37 %= v12;
      }
    }
    else
    {
      v37 &= v12 - 1;
    }
    uint64_t v39 = *a1;
    unsigned int v40 = *(void **)(*a1 + 8 * v37);
    if (v40)
    {
      *(void *)id v7 = *v40;
    }
    else
    {
      *(void *)id v7 = *v6;
      *id v6 = v7;
      *(void *)(v39 + 8 * v37) = v6;
      if (!*(void *)v7)
      {
LABEL_77:
        ++a1[3];
        v44[0] = 0;
        goto LABEL_78;
      }
      unint64_t v41 = *(void *)(*(void *)v7 + 8);
      if (v38.u32[0] > 1uLL)
      {
        if (v41 >= v12) {
          v41 %= v12;
        }
      }
      else
      {
        v41 &= v12 - 1;
      }
      unsigned int v40 = (void *)(*a1 + 8 * v41);
    }
    *unsigned int v40 = v7;
    goto LABEL_77;
  }
  while (1)
  {
    unint64_t v19 = *((void *)v18 + 1);
    if (v19 == v13) {
      break;
    }
    if (v15 > 1)
    {
      if (v19 >= v12) {
        v19 %= v12;
      }
    }
    else
    {
      v19 &= v12 - 1;
    }
    if (v19 != v16) {
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v18 = *(char **)v18;
    if (!v18) {
      goto LABEL_23;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v18 + 16, (unsigned __int8 *)v7 + 16)) {
    goto LABEL_22;
  }
  id v7 = v18;
LABEL_78:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)v44);
  return v7;
}

void sub_29FC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    int v8 = (uint64_t *)a2;
  }
  else {
    int v8 = *(uint64_t **)a2;
  }
  if (v7 >= 0) {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v9 = *(void *)(a2 + 8);
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v12) {
        unint64_t v3 = v10 % v12;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v18 = operator new(0x28uLL);
  void *v18 = 0;
  v18[1] = v11;
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  void v18[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v24);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v3 = v11 % v12;
      }
      else {
        unint64_t v3 = v11;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v11;
    }
  }
  uint64_t v25 = *(void *)a1;
  long long v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    void *v18 = *v26;
LABEL_44:
    *long long v26 = v18;
    goto LABEL_45;
  }
  void *v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v25 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v27 = *(void *)(*v18 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12) {
        v27 %= v12;
      }
    }
    else
    {
      v27 &= v12 - 1;
    }
    long long v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
}

void sub_29FEA8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__emplace_back_slow_path<char const*&>(std::__split_buffer<std::string>::pointer *a1, char **a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  id v6 = (std::allocator<std::string> *)(a1 + 2);
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  v18.__end_cap_.__value_ = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  v18.__first_ = (std::__split_buffer<std::string>::pointer)v7;
  v18.__begin_ = (std::__split_buffer<std::string>::pointer)(v7 + 24 * v2);
  v18.__end_ = v18.__begin_;
  v18.__end_cap_.__value_ = (std::string *)(v7 + 24 * v8);
  std::string::basic_string[abi:nn180100]<0>(v18.__begin_->__r_.__value_.__r.__words, *a2);
  std::__split_buffer<std::string>::pointer v10 = *a1;
  unint64_t v9 = (unint64_t)a1[1];
  std::__split_buffer<std::string>::pointer begin = v18.__begin_;
  std::__split_buffer<std::string>::pointer v11 = v18.__begin_;
  if ((std::__split_buffer<std::string>::pointer)v9 == *a1)
  {
    int64x2_t v14 = vdupq_n_s64(v9);
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v9 - 24);
      begin[-1].__r_.__value_.__r.__words[2] = *(void *)(v9 - 8);
      *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v13;
      --begin;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(void *)(v9 - 24) = 0;
      v9 -= 24;
    }
    while ((std::__split_buffer<std::string>::pointer)v9 != v10);
    int64x2_t v14 = *(int64x2_t *)a1;
  }
  std::__split_buffer<std::string>::pointer v15 = v11 + 1;
  *a1 = begin;
  a1[1] = v11 + 1;
  *(int64x2_t *)&v18.__begin_ = v14;
  unint64_t v16 = a1[2];
  a1[2] = v18.__end_cap_.__value_;
  v18.__end_cap_.__value_ = v16;
  v18.__first_ = (std::__split_buffer<std::string>::pointer)v14.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v18);
  return v15;
}

void sub_29FFFC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(uint64_t *a1, void *a2, unint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = a1[2];
  unint64_t v7 = (std::string *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3) < a3)
  {
    if (v7)
    {
      std::vector<std::string>::__clear[abi:nn180100](a1);
      operator delete((void *)*a1);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a3 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_30;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a3) {
      uint64_t v9 = a3;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_30:
    }
      abort();
    std::__split_buffer<std::string>::pointer v11 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v10);
    *a1 = (uint64_t)v11;
    a1[1] = (uint64_t)v11;
    a1[2] = (uint64_t)&v11[v12];
    long long v13 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>((uint64_t *)v4, v11);
LABEL_21:
    a1[1] = (uint64_t)v13;
    return;
  }
  int64x2_t v14 = (std::string *)a1[1];
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v7) >> 3);
  if (v15 < a3)
  {
    if ((char *)v14 - (char *)v7 >= 1)
    {
      unint64_t v16 = v15 + 1;
      unint64_t v17 = a2;
      do
      {
        unint64_t v17 = (void *)*v17;
        --v16;
      }
      while (v16 > 1);
      if (v17 != a2)
      {
        do
        {
          std::string::operator=(v7, (const std::string *)(v4 + 16));
          uint64_t v4 = *(void *)v4;
          ++v7;
        }
        while ((void *)v4 != v17);
        int64x2_t v14 = (std::string *)a1[1];
      }
      uint64_t v4 = (uint64_t)v17;
    }
    long long v13 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>((uint64_t *)v4, v14);
    goto LABEL_21;
  }
  if (a2)
  {
    do
    {
      std::string::operator=(v7, (const std::string *)(v4 + 16));
      uint64_t v4 = *(void *)v4;
      ++v7;
    }
    while (v4);
    int64x2_t v14 = (std::string *)a1[1];
  }
  while (v14 != v7)
  {
    if (SHIBYTE(v14[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14[-1].__r_.__value_.__l.__data_);
    }
    --v14;
  }
  a1[1] = (uint64_t)v7;
}

void sub_2A01B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2A01C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>(uint64_t *a1, std::string *this)
{
  if (a1)
  {
    unint64_t v3 = a1;
    do
    {
      if (*((char *)v3 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(this, (const std::string::value_type *)v3[2], v3[3]);
      }
      else
      {
        long long v4 = *((_OWORD *)v3 + 1);
        this->__r_.__value_.__r.__words[2] = v3[4];
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
      }
      unint64_t v3 = (uint64_t *)*v3;
      ++this;
    }
    while (v3);
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t *GTAGXProfilingSupportHelper::GetCountersForDerivedCounter(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v3 = v2;
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  unint64_t v5 = *((void *)&xmmword_772A98 + 1);
  if (!*((void *)&xmmword_772A98 + 1)) {
    goto LABEL_21;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_772A98 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *((void *)&xmmword_772A98 + 1)) {
      unint64_t v9 = v4 % *((void *)&xmmword_772A98 + 1);
    }
  }
  else
  {
    unint64_t v9 = (*((void *)&xmmword_772A98 + 1) - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(xmmword_772A98 + 8 * v9);
  if (v10)
  {
    for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
    {
      unint64_t v12 = *((void *)i + 1);
      if (v6 == v12)
      {
        if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1)) {
          break;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= v5) {
            v12 %= v5;
          }
        }
        else
        {
          v12 &= v5 - 1;
        }
        if (v12 != v9) {
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t i = 0;
  }
  if (i) {
    return (uint64_t *)(i + 40);
  }
  else {
    return 0;
  }
}

id GTShaderDebuggerMDSerializerError(unsigned int a1, NSString *a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = v3;
  if (v3) {
    CFStringRef v5 = (const __CFString *)v3;
  }
  else {
    CFStringRef v5 = &stru_7482F0;
  }
  NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
  CFStringRef v10 = v5;
  unint64_t v6 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  uint8x8_t v7 = +[NSError errorWithDomain:@"GTShaderDebuggerMDSerializerErrorDomain" code:a1 userInfo:v6];

  return v7;
}

void sub_2A04EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

llvm::Module *std::unique_ptr<llvm::Module>::reset[abi:nn180100](llvm::Module **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    llvm::Module::~Module(result);
    operator delete();
  }
  return result;
}

void std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (llvm::Module **)**a1;
  if (v2)
  {
    unint64_t v4 = (llvm::Module **)v1[1];
    CFStringRef v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<llvm::Module>::reset[abi:nn180100](--v4);
      while (v4 != v2);
      CFStringRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0) {
        operator delete(*(void **)&v2[v4 - 24]);
      }
      v4 -= 40;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

apr_array_header_t *GetQueueForRef(apr_pool_t **a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = *find_entry((uint64_t)a1, &v8, 8uLL, 0);
  if (!v3 || (uint64_t v4 = *(apr_array_header_t **)(v3 + 32)) == 0)
  {
    CFStringRef v5 = *a1;
    uint64_t v4 = apr_array_make(*a1, 4, 8);
    unint64_t v6 = apr_palloc(v5, 8uLL);
    *unint64_t v6 = v8;
    apr_hash_set((apr_hash_t *)a1, v6, 8, v4);
  }
  return v4;
}

void GTMTLReplayController_restoreMTLBufferContents(uint64_t a1, void *a2)
{
  uint64_t v4 = **(const char ****)a1;
  CFStringRef v5 = *(apr_pool_t ***)(a1 + 152);
  unint64_t v6 = (char *)a2[3];
  id v7 = *(id *)(a1 + 8);
  id v16 = v7;
  if (*a2 == 50)
  {
    uint64_t v8 = [v7 bufferForHeapKey:a2[1]];
    goto LABEL_5;
  }
  if (*a2 == 22)
  {
    uint64_t v8 = [v7 bufferForKey:a2[1]];
LABEL_5:
    NSErrorUserInfoKey v9 = (void *)v8;
    goto LABEL_7;
  }
  NSErrorUserInfoKey v9 = 0;
LABEL_7:
  uint64_t v10 = a2[5];
  id v11 = *(id *)(a1 + 24);
  unint64_t v12 = [v11 bufferWithLength:v10 alignment:1];
  GTCaptureArchive_fillBuffer(v4, v5, v6, (char *)[v12 contents], a2[5], 0);
  long long v13 = [v11 blitCommandEncoder];
  int64x2_t v14 = [v12 heapBuffer];
  [v13 copyFromBuffer:v14 sourceOffset:[v12 heapLocation] toBuffer:a2[4] destinationOffset:a2[5] size:5];

  unint64_t v15 = *v5;
  apr_pool_clear(v15);
}

void GTMTLReplayController_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(const char ****)a1;
  CFStringRef v5 = *(apr_pool_t ***)(a1 + 152);
  id v6 = *(id *)(a1 + 8);
  id v7 = v6;
  uint64_t v98 = a2;
  if (!*(void *)(a2 + 8))
  {
    MakeNSError(101, &__NSDictionary0__struct);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    GTMTLReplay_handleNSError(v9);
    goto LABEL_63;
  }
  uint64_t v8 = [v6 textureForKey:];
  id v9 = v8;
  if (!v8)
  {
    MakeNSError(101, &__NSDictionary0__struct);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    GTMTLReplay_handleNSError(v10);
    goto LABEL_62;
  }
  id v10 = [v8 device];
  id v11 = (char *)[v9 pixelFormat];
  id v95 = [v9 sampleCount];
  uint64_t v111 = 0;
  memset(v110, 0, sizeof(v110));
  GTMTLPixelFormatGetInfoForDevice((uint64_t)v110, (uint64_t)v10, (uint64_t)v11);
  *(void *)&long long v116 = 0;
  uint64_t v80 = v7;
  if ((~DWORD2(v110[0]) & 0x60) != 0)
  {
    if ((WORD4(v110[0]) & 0x2000) != 0)
    {
      uint64_t v12 = 4;
      *(void *)&long long v116 = 4;
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v88 = 1;
  }
  else
  {
    long long v116 = xmmword_4C8070;
    uint64_t v88 = 2;
    uint64_t v12 = 1;
  }
  uint64_t v85 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v84 = *(unsigned __int16 *)(a2 + 38);
  uint64_t v83 = *(unsigned __int16 *)(a2 + 40);
  uint64_t v13 = *(unsigned __int16 *)(a2 + 42);
  uint64_t v14 = *(unsigned __int16 *)(a2 + 44);
  uint64_t v15 = *(unsigned __int16 *)(a2 + 46);
  uint64_t v109 = 0;
  long long v107 = 0u;
  *(_OWORD *)size = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  uint64_t v77 = v12;
  uint64_t v90 = v15;
  uint64_t v92 = v14;
  GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v103, (uint64_t)v10, (uint64_t)v11, v13, v14, v15, (uint64_t)v95);
  size_t v16 = *(unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)v4, *(char **)(a2 + 24));
  id v82 = *(id *)(a1 + 24);
  unint64_t v17 = [v82 bufferWithLength:v16 alignment:*((void *)&v107 + 1) v77];
  GTCaptureArchive_fillBuffer(v4, v5, *(char **)(v98 + 24), (char *)[v17 contents], v16, 0);
  std::__split_buffer<std::string> v18 = (int *)[v17 contents];
  id v97 = v17;
  id v19 = [v17 length];
  float v20 = 0;
  uint64_t v21 = 0;
  if (v18 && (unint64_t)v19 >= 0x10)
  {
    if (*(void *)v18 == 0x63617074757265)
    {
      if (*((_WORD *)v18 + 4) == 1) {
        uint64_t v21 = v18[3] + 16;
      }
      else {
        uint64_t v21 = v18[3];
      }
      float v20 = v18;
    }
    else
    {
      float v20 = 0;
      uint64_t v21 = 0;
    }
  }
  if ((BYTE9(v110[0]) & 0x20) != 0
    && ((*(unsigned char *)(*(void *)a1 + 272) & 1) != 0 || strncmp(*(const char **)(v98 + 24), "MTLTexture-", 0xBuLL)))
  {
    unint64_t v22 = (char *)[v97 contents] + v21;
    size_t v23 = size[1];
    size_t v24 = (char *)apr_palloc(*v5, size[1]);
    if ((int)v105 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = v105;
      int v27 = DWORD2(v104);
      uint64_t v28 = DWORD2(v104);
      uint64_t v29 = 8 * SDWORD2(v104);
      unint64_t v30 = v24;
      do
      {
        if (v27 >= 1)
        {
          uint64_t v31 = 0;
          do
          {
            uint64_t v32 = *(void *)&vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v31, v25), 8uLL), vand_s8((int8x8_t)__PAIR64__(v31, v25), (int8x8_t)0xFFFF0000FFFFLL)) & 0xFF00FF00FF00FFLL;
            unint64_t v33 = *(void *)&vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v32, 4uLL), (int8x8_t)v32) & 0xFF0FFF0FFF0FFF0FLL;
            int8x8_t v34 = vand_s8(vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v33, 2uLL), (int8x8_t)v33), (int8x8_t)0x3333333333333333);
            int8x8_t v35 = (int8x8_t)vshl_u32((uint32x2_t)v34, (uint32x2_t)0x200000001);
            v34.i32[1] *= 2;
            int32x2_t v36 = (int32x2_t)vand_s8(vorr_s8(v35, v34), (int8x8_t)0xAAAAAAAA55555555);
            *(void *)&v30[8 * v31++] = *(void *)&v22[8
                                                       * vorr_s8((int8x8_t)v36, (int8x8_t)vdup_lane_s32(v36, 1)).i32[0]];
          }
          while (v28 != v31);
        }
        ++v25;
        v30 += v29;
      }
      while (v25 != v26);
    }
    memcpy(v22, v24, v23);
  }
  long long v78 = v5;
  id v79 = v9;
  v115[0] = v11;
  v115[1] = v11;
  v114[0] = v13;
  v114[1] = v92;
  v114[2] = v90;
  v114[3] = v13;
  v114[4] = v92;
  v114[5] = v90;
  id v112 = v9;
  id v96 = v112;
  id v113 = v96;
  uint64_t v87 = v20;
  uint64_t PlanePixelFormat = GetPlanePixelFormat((uint64_t)v11, 0);
  if (PlanePixelFormat)
  {
    unint64_t v37 = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v96);
    uint64_t v38 = 0;
    v39.i64[0] = v13;
    v39.i64[1] = v92;
    char v40 = 1;
    int8x16_t v93 = (int8x16_t)v39;
    int8x16_t v89 = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v39, vdupq_n_s64(1uLL)), 1uLL);
    uint64_t v41 = PlanePixelFormat;
    while (1)
    {
      v115[v38] = v41;
      if (v11 == (unsigned char *)&stru_1F8.addr + 7 || (int8x16_t v42 = v93, v11 == (unsigned char *)&stru_1F8.addr + 4))
      {
        if (v40) {
          unint64_t v43 = -1;
        }
        else {
          unint64_t v43 = 0;
        }
        int8x16_t v42 = vbslq_s8((int8x16_t)vdupq_n_s64(v43), v93, v89);
      }
      id v44 = (int8x16_t *)&v114[3 * v38];
      *id v44 = v42;
      v44[1].i64[0] = v90;
      [v37 setWidth:v42.i64[0]];
      [v37 setHeight:v114[3 * v38 + 1]];
      [v37 setPixelFormat:v41];
      id v45 = [v10 newTextureWithDescriptor:v37];
      long long v46 = *(&v112 + v38);
      *(&v112 + v38) = v45;

      if ((v40 & 1) == 0) {
        break;
      }
      uint64_t v41 = GetPlanePixelFormat((uint64_t)v11, 1);
      char v40 = 0;
      uint64_t v38 = 1;
    }

    uint64_t v88 = 2;
    float v20 = v87;
  }
  [v82 blitCommandEncoder];
  uint64_t v94 = v91 = v10;
  unint64_t v47 = 0;
  long long v48 = (apr_size_t *)(v20 + 16);
  long long v49 = v114;
  int64_t v86 = v11;
  do
  {
    uint64_t v50 = *((void *)&v116 + v47);
    *(void *)&double v51 = GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v103, (uint64_t)v10, v115[v47], *v49, v49[1], v49[2], (uint64_t)v95).n128_u64[0];
    if (v20 && *((_WORD *)v20 + 5) == 1 && *((void *)v20 + 2) >= v47)
    {
      apr_size_t v52 = *(v48 - 1);
      apr_size_t v53 = *v48;
    }
    else
    {
      apr_size_t v52 = *(unsigned int *)(v98 + 48);
      apr_size_t v53 = *(unsigned int *)(v98 + 52);
    }
    uint64_t v54 = (char *)[v96 textureType:v51, v50];
    if ((unint64_t)v54 < 2) {
      goto LABEL_46;
    }
    if (v54 != (unsigned char *)&dword_4 + 3)
    {
      if (!v52) {
LABEL_46:
      }
        apr_size_t v52 = size[0];
      apr_size_t v53 = v105 * v52;
      goto LABEL_54;
    }
    if (!v52) {
      apr_size_t v52 = size[0];
    }
    if (!v53) {
      apr_size_t v53 = v52 * v105;
    }
LABEL_54:
    id v55 = [v97 heapBuffer];
    uint64_t v56 = (char *)[v97 heapLocation];
    uint64_t v57 = (uint64_t)*(&v112 + v47);
    uint64_t v58 = *(unsigned __int16 *)(v98 + 32);
    uint64_t v59 = *(unsigned __int16 *)(v98 + 34);
    long long v101 = *(_OWORD *)v49;
    uint64_t v102 = v49[2];
    v100[0] = v85;
    v100[1] = v84;
    v100[2] = v83;
    [v94 copyFromBuffer:v55 sourceOffset:&v56[v21] sourceBytesPerRow:v52 sourceBytesPerImage:v53 sourceSize:&v101 toTexture:v57 destinationSlice:v58 destinationLevel:v59 destinationOrigin:v100 options:v50];

    v21 += v109;
    ++v47;
    v48 += 6;
    v49 += 3;
    float v20 = v87;
    id v10 = v91;
  }
  while (v88 != v47);
  if (PlanePixelFormat)
  {
    id v60 = GTMTLReplayController_defaultLibrary(v91);
    id v61 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
    id v62 = [v61 colorAttachments];
    uint64_t v63 = [v62 objectAtIndexedSubscript:0];
    [v63 setPixelFormat:v86];

    id v64 = [v60 newFunctionWithName:@"Harvest2PVertexForDownloader"];
    [v61 setVertexFunction:v64];

    id v65 = [v60 newFunctionWithName:@"Harvest2PFragmentUpload"];
    [v61 setFragmentFunction:v65];

    id v99 = 0;
    id v66 = [v91 newRenderPipelineStateWithDescriptor:v61 error:&v99];
    id v67 = v99;
    id v68 = objc_alloc_init((Class)MTLRenderPassDescriptor);
    long long v69 = [v68 colorAttachments];
    long long v70 = [v69 objectAtIndexedSubscript:0];
    [v70 setTexture:v96];

    uint64_t v71 = [v68 colorAttachments];
    id v72 = [v71 objectAtIndexedSubscript:0];
    [v72 setLoadAction:0];

    uint64_t v73 = [v68 colorAttachments];
    id v74 = [v73 objectAtIndexedSubscript:0];
    [v74 setStoreAction:1];

    id v10 = v91;
    id v75 = [v82 renderCommandEncoderWithDescriptor:v68];
    [v75 setRenderPipelineState:v66];
    [v75 setFragmentTexture:v112 atIndex:0];
    [v75 setFragmentTexture:v113 atIndex:1];

    [v75 drawPrimitives:3 vertexStart:0 vertexCount:3];
  }
  apr_pool_clear(*v78);

  uint64_t v76 = 8;
  id v9 = v79;
  do
  {

    v76 -= 8;
  }
  while (v76 != -8);

  id v7 = v80;
LABEL_62:

LABEL_63:
}

uint64_t *GTMTLReplayController_makeDataSource(const char *a1, apr_pool_t *a2)
{
  uint64_t v4 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v4))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = a1;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "LoadArchive %{public}s", buf, 0xCu);
  }

  bzero(buf, 0x400uLL);
  CFStringRef v5 = realpath_DARWIN_EXTSN(a1, (char *)buf);
  memset(&v674.st_blksize, 0, 32);
  if (v5) {
    id v6 = v5;
  }
  else {
    id v6 = a1;
  }
  memset(&v674, 0, 112);
  id v7 = gt_filepath_merge(v6, "index", a2);
  int v8 = open(v7, 0);
  v659 = a2;
  if (v8 < 0) {
    goto LABEL_23;
  }
  int v9 = v8;
  fstat(v8, &v674);
  id v10 = apr_palloc(a2, v674.st_size);
  uint64_t v11 = 0;
  off_t st_size = v674.st_size;
  do
  {
    if ((unint64_t)(st_size - v11) >= 0x100000) {
      size_t v13 = 0x100000;
    }
    else {
      size_t v13 = st_size - v11;
    }
    ssize_t v14 = read(v9, (char *)v10 + v11, v13);
    if (v14 == -1) {
      ssize_t v15 = 0;
    }
    else {
      ssize_t v15 = v14;
    }
    v11 += v15;
  }
  while (v14 != -1 && v11 != st_size);
  close(v9);
  if (v674.st_size < 0x14uLL
    || *(_DWORD *)v10 != 1667851384
    || *((_DWORD *)v10 + 1)
    || (uint64_t v17 = *((unsigned int *)v10 + 2), v674.st_size - 20 < (unint64_t)(12 * v17)))
  {
LABEL_23:
    std::__split_buffer<std::string> v18 = 0;
  }
  else
  {
    v622 = a1;
    uint64_t v587 = (uint64_t)v10 + 12 * v17 + 20;
    uint64_t v588 = *((unsigned int *)v10 + 3);
    if (v674.st_size - (12 * (unint64_t)v17 + 20) < 24 * v588) {
      goto LABEL_744;
    }
    uint64_t v589 = v587 + 24 * v588;
    uint64_t v590 = *((unsigned int *)v10 + 4);
    if ((unint64_t)v10 + v674.st_size - v589 < 2 * v590) {
      goto LABEL_744;
    }
    v591 = apr_array_make(a2, v590, 8);
    uint64_t v592 = *((unsigned int *)v10 + 4);
    if (v592)
    {
      unint64_t v593 = 0;
      v594 = (char *)v10 + v674.st_size;
      unint64_t v595 = v589 + 2 * v592;
      while ((unint64_t)v594 > v595)
      {
        *(void *)apr_array_push(v591) = v595;
        v595 += *(unsigned __int16 *)(v589 + 2 * v593++);
        if (v593 >= *((unsigned int *)v10 + 4)) {
          goto LABEL_725;
        }
      }
      std::__split_buffer<std::string> v18 = 0;
      a1 = v622;
      a2 = v659;
      goto LABEL_24;
    }
LABEL_725:
    a2 = v659;
    v596 = gt_filepath_merge(v6, "store0", v659);
    int v597 = open(v596, 0);
    if (v597 < 0)
    {
LABEL_744:
      std::__split_buffer<std::string> v18 = 0;
      a1 = v622;
    }
    else
    {
      int v598 = v597;
      memset(&v673, 0, sizeof(v673));
      fstat(v597, &v673);
      v599 = (apr_pool_t *)mmap(0, v673.st_size, 1, 2, v598, 0);
      off_t v600 = v673.st_size;
      close(v598);
      v601 = (apr_array_header_t *)apr_palloc(v659, 0x70uLL);
      v602 = v601;
      if (v601)
      {
        *(_OWORD *)&v601[2].nalloc = 0u;
        *(_OWORD *)&v601[3].pool = 0u;
        *(_OWORD *)&v601[1].nalloc = 0u;
        *(_OWORD *)&v601[2].pool = 0u;
        *(_OWORD *)&v601->nalloc = 0u;
        *(_OWORD *)&v601[1].pool = 0u;
        *(_OWORD *)&v601->pool = 0u;
      }
      v601->pool = (apr_pool_t *)apr_pstrdup(v659, v6);
      *(void *)&v602->int elt_size = v659;
      *(void *)&v602->nalloc = v10;
      v602->elts = (char *)v674.st_size;
      v602[1].pool = (apr_pool_t *)((char *)v10 + 20);
      *(void *)&v602[1].int elt_size = v587;
      *(void *)&v602[1].nalloc = v591;
      v602[1].elts = (char *)v10[1];
      v602[2].pool = v599;
      *(void *)&v602[2].int elt_size = v600;
      a2 = v659;
      *(void *)&v602[2].nalloc = apr_array_make(v659, 4, 24);
      v602[2].elts = (char *)apr_hash_make(v659);
      v668[0] = 0;
      a1 = v622;
      std::__split_buffer<std::string> v18 = v602;
      if (!apr_pool_create_ex(v668, v659, 0, v603))
      {
        v604 = v602 + 3;
        v605 = v668[0];
        v606 = gt_filepath_merge(v6, "metadata", v668[0]);
        int v607 = open(v606, 0);
        if (v607 < 0)
        {
          v604->pool = 0;
          *(void *)&v602[3].int elt_size = 0;
        }
        else
        {
          int v608 = v607;
          memset(&v673, 0, sizeof(v673));
          fstat(v607, &v673);
          v609 = (const UInt8 *)apr_palloc(v605, v673.st_size);
          uint64_t v610 = 0;
          off_t v611 = v673.st_size;
          do
          {
            if ((unint64_t)(v611 - v610) >= 0x100000) {
              size_t v612 = 0x100000;
            }
            else {
              size_t v612 = v611 - v610;
            }
            ssize_t v613 = read(v608, (void *)&v609[v610], v612);
            if (v613 == -1) {
              ssize_t v614 = 0;
            }
            else {
              ssize_t v614 = v613;
            }
            v610 += v614;
          }
          while (v613 != -1 && v610 != v611);
          close(v608);
          CFDataRef v616 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v609, v673.st_size, kCFAllocatorNull);
          CFErrorRef error = 0;
          CFDictionaryRef v617 = (const __CFDictionary *)CFPropertyListCreateWithData(kCFAllocatorDefault, v616, 0, 0, &error);
          CFRelease(v616);
          if (error)
          {
            v604->pool = 0;
            *(void *)&v602[3].int elt_size = 0;
            a1 = v622;
            std::__split_buffer<std::string> v18 = v602;
          }
          else
          {
            CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v617, @"(uuid)");
            a1 = v622;
            std::__split_buffer<std::string> v18 = v602;
            if (Value)
            {
              CFUUIDRef v619 = CFUUIDCreateFromString(kCFAllocatorDefault, Value);
              *(CFUUIDBytes *)&v602[3].pool = CFUUIDGetUUIDBytes(v619);
              CFRelease(v619);
            }
            else
            {
              v604->pool = 0;
              *(void *)&v602[3].int elt_size = 0;
            }
          }
          CFRelease(v617);
        }
        apr_pool_destroy(v605);
      }
      if (v659)
      {
        v620 = (void *)*((void *)v659 + 5);
        if (v620) {
          *((void *)v659 + 5) = *v620;
        }
        else {
          v620 = apr_palloc(v659, 0x20uLL);
        }
        v620[1] = v18;
        v620[2] = GTCaptureArchive_cleanup;
        v620[3] = apr_pool_cleanup_null;
        void *v620 = *((void *)v659 + 4);
        *((void *)v659 + 4) = v620;
      }
    }
  }
LABEL_24:
  id v19 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v19))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
  }

  if (!v18) {
    return 0;
  }
  newpool = 0;
  apr_pool_create_ex(&newpool, a2, 0, v20);
  memset(&v673.st_ino, 0, 88);
  uint64_t v21 = newpool;
  *(void *)&v673.st_dev = v18;
  v673.st_ino = (__darwin_ino64_t)GTCaptureArchiveDecompressor_create(newpool);
  *(void *)buf = 0;
  apr_pool_create_ex((apr_pool_t **)buf, 0, 0, v22);
  size_t v23 = *(apr_pool_t **)buf;
  size_t v24 = (pthread_mutex_t *)apr_palloc(*(apr_pool_t **)buf, 0x200uLL);
  uint64_t v25 = (uint64_t)v24;
  if (v24)
  {
    *(_OWORD *)&v24[7].__opaque[24] = 0u;
    *(_OWORD *)&v24[7].__opaque[40] = 0u;
    *(_OWORD *)&v24[7].__sig = 0u;
    *(_OWORD *)&v24[7].__opaque[8] = 0u;
    *(_OWORD *)&v24[6].__opaque[24] = 0u;
    *(_OWORD *)&v24[6].__opaque[40] = 0u;
    *(_OWORD *)&v24[6].__sig = 0u;
    *(_OWORD *)&v24[6].__opaque[8] = 0u;
    *(_OWORD *)&v24[5].__opaque[24] = 0u;
    *(_OWORD *)&v24[5].__opaque[40] = 0u;
    *(_OWORD *)&v24[5].__sig = 0u;
    *(_OWORD *)&v24[5].__opaque[8] = 0u;
    *(_OWORD *)&v24[4].__opaque[24] = 0u;
    *(_OWORD *)&v24[4].__opaque[40] = 0u;
    *(_OWORD *)&v24[4].__sig = 0u;
    *(_OWORD *)&v24[4].__opaque[8] = 0u;
    *(_OWORD *)&v24[3].__opaque[24] = 0u;
    *(_OWORD *)&v24[3].__opaque[40] = 0u;
    *(_OWORD *)&v24[3].__sig = 0u;
    *(_OWORD *)&v24[3].__opaque[8] = 0u;
    *(_OWORD *)&v24[2].__opaque[24] = 0u;
    *(_OWORD *)&v24[2].__opaque[40] = 0u;
    *(_OWORD *)&v24[2].__sig = 0u;
    *(_OWORD *)&v24[2].__opaque[8] = 0u;
    *(_OWORD *)&v24[1].__opaque[24] = 0u;
    *(_OWORD *)&v24[1].__opaque[40] = 0u;
    *(_OWORD *)&v24[1].__sig = 0u;
    *(_OWORD *)&v24[1].__opaque[8] = 0u;
    *(_OWORD *)&v24->__opaque[24] = 0u;
    *(_OWORD *)&v24->__opaque[40] = 0u;
    *(_OWORD *)&v24->__sig = 0u;
    *(_OWORD *)&v24->__opaque[8] = 0u;
  }
  pthread_mutex_init(v24, 0);
  *(void *)(v25 + 88) = apr_hash_make(v23);
  vm_address_t v26 = GTCoreAlloc(0x148uLL);
  pthread_mutex_init((pthread_mutex_t *)(v26 + 264), 0);
  *(void *)(v25 + 64) = v26;
  *(void *)(v25 + 112) = GTTraceContext_openStream(v25, 0);
  atomic_store(0, (unsigned __int8 *)(v25 + 120));
  atomic_store(0, (unsigned int *)(v25 + 104));
  *(void *)&v673.st_uid = v25;
  *(void *)&v673.st_rdev = apr_hash_make(a2);
  v673.st_atimespec.tv_sec = (__darwin_time_t)apr_hash_make(a2);
  v673.st_atimespec.uint64_t tv_nsec = (uint64_t)a2;
  memset(&v673.st_mtimespec, 0, 48);
  st_ino = (apr_pool_t *)v673.st_ino;
  uint64_t v623 = *(void *)&v673.st_uid;
  int v27 = (char *)apr_palloc(a2, 0x118uLL);
  uint64_t v28 = (uint64_t *)v27;
  if (v27)
  {
    *(_OWORD *)(v27 + 8) = 0u;
    *(_OWORD *)(v27 + 248) = 0u;
    *(_OWORD *)(v27 + 264) = 0u;
    *(_OWORD *)(v27 + 216) = 0u;
    *(_OWORD *)(v27 + 232) = 0u;
    *(_OWORD *)(v27 + 184) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *(_OWORD *)(v27 + 152) = 0u;
    *(_OWORD *)(v27 + 168) = 0u;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 24) = 0u;
    *(_OWORD *)(v27 + 40) = 0u;
  }
  *(void *)int v27 = v18;
  *(_OWORD *)(v27 + 24) = *(_OWORD *)&v673.st_rdev;
  uint64_t v29 = apr_array_make(a2, 128, 64);
  atomic_store(1u, (unsigned int *)(*(void *)&v673.st_uid + 104));
  p = 0;
  apr_pool_create_ex(&p, v21, 0, v30);
  uint64_t v31 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v31))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v31, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "SortArchiveStrings", buf, 2u);
  }

  uint64_t v32 = apr_array_copy(p, *(const apr_array_header_t **)&v18[1].nalloc);
  qsort(v32->elts, v32->nelts, v32->elt_size, (int (__cdecl *)(const void *, const void *))GTCaptureArchive_strcmp);
  unint64_t v33 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v33))
  {
    int nelts = v32->nelts;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = nelts;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v33, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "x%d", buf, 8u);
  }
  arr = v18;
  v621 = a1;

  int8x8_t v35 = apr_array_make(v21, 4, 8);
  GTCaptureArchive_filenamesWithPrefix(v32->nelts, (const char **)v32->elts, "startup", v35);
  GTCaptureArchive_filenamesWithPrefix(v32->nelts, (const char **)v32->elts, "device-resources", v35);
  if ((dword_77313C & 0x800) == 0) {
    GTCaptureArchive_filenamesWithPrefix(v32->nelts, (const char **)v32->elts, "unused-device-resources", v35);
  }
  v660 = v28;
  v643 = v29;
  if (v35->nelts >= 1)
  {
    uint64_t v36 = 0;
    v637 = (apr_hash_t *)v35;
    while (1)
    {
      unint64_t v37 = *(char **)&v35->elts[8 * v36];
      uint64_t v38 = p;
      int64x2_t v39 = GTCaptureArchive_mapData((uint64_t)arr, (uint64_t)st_ino, v37, p);
      unint64_t v41 = v40;
      int v656 = strncmp(v37, "unused-device-resources", 0x17uLL);
      __int16 v42 = dword_77313C;
      unint64_t v43 = apr_array_make(v38, 16, 8);
      id v44 = g_signpostLog;
      if (os_signpost_enabled((os_log_t)v44))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v37;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v41;
        _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v44, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "ReadTrace %{public}s (%{xcode:size-in-bytes}zu)", buf, 0x16u);
      }

      unint64_t v45 = atomic_load((unint64_t *)(*(void *)&v673.st_uid + 72));
      v650 = (apr_hash_t *)v45;
      if (v41 >= 9) {
        break;
      }
LABEL_65:
      uint64_t v29 = v643;
      if (v43->nelts)
      {
        unint64_t v57 = 0;
        do
          AddResourceRestoreRequest(v643, (uint64_t)&v673, *(void *)&v43->elts[8 * v57++], 0xFFFFFFFFFFFFFFFFLL);
        while (v57 < v43->nelts);
      }
      uint64_t v58 = g_signpostLog;
      int8x8_t v35 = (apr_array_header_t *)v637;
      if (os_signpost_enabled((os_log_t)v58))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v58, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
      }

      apr_pool_clear(p);
      uint64_t v28 = v660;
      if (!v656)
      {
        unint64_t v59 = atomic_load((unint64_t *)(*(void *)&v673.st_uid + 72));
        v660[8] = (uint64_t)v650;
        v660[9] = v59 - (void)v650;
      }
      if (++v36 >= *((int *)v637 + 3)) {
        goto LABEL_73;
      }
    }
    BOOL v46 = (v656 | v42 & 0x400) != 0;
    unint64_t v47 = 8;
    while (1)
    {
      long long v48 = (unsigned int *)((char *)v39 + v47);
      GTTraceFbufToFunc(&v673, (char *)v39 + v47);
      int v49 = *(unsigned int *)((char *)v39 + v47 + 4);
      if (v49 <= -10241)
      {
        if (v49 == -16313 || v49 == -16236 || v49 == -16234)
        {
LABEL_58:
          if (v46) {
            *(void *)apr_array_push(v43) = v48;
          }
        }
      }
      else
      {
        unsigned int v50 = v49 + 10240;
        BOOL v297 = v50 > 0x32;
        uint64_t v51 = (1 << v50) & 0x440000020011DLL;
        if (!v297 && v51 != 0) {
          goto LABEL_58;
        }
      }
      uint64_t v55 = *v48;
      if ((*((unsigned char *)v48 + 33) & 0x10) != 0)
      {
        uint64_t v56 = *v48;
        do
        {
          long long v48 = (unsigned int *)((char *)v48 + v55);
          uint64_t v55 = *v48;
          v56 += v55;
        }
        while ((*((unsigned char *)v48 + 33) & 0x20) == 0);
      }
      else
      {
        uint64_t v56 = *v48;
      }
      v47 += v56;
      if (v47 >= v41) {
        goto LABEL_65;
      }
    }
  }
LABEL_73:
  qsort(v29->elts, v29->nelts, v29->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLDataSource_compareRestores);
  unint64_t v60 = atomic_load((unint64_t *)(*(void *)&v673.st_uid + 72));
  if (!(v28[8] + v28[9])) {
    v28[8] = v60;
  }
  uint64_t v61 = v29->nelts;
  id v62 = v659;
  uint64_t v63 = v623;
  if ((int)v61 >= 1)
  {
    id v64 = (unint64_t *)(v29->elts + 16);
    do
    {
      unint64_t *v64 = v60;
      v64 += 8;
      --v61;
    }
    while (v61);
  }
  v626 = (apr_hash_t *)v60;
  v669 = 0;
  v670 = 0;
  LODWORD(v668[0]) = 1;
  *(_OWORD *)((char *)v668 + 4) = 0u;
  memset((char *)&v668[2] + 4, 0, 28);
  v670 = apr_array_make(v659, 15, 8);
  v669 = apr_array_make(v659, 2048, 32);
  v28[16] = (uint64_t)apr_array_make(v659, 128, 8);
  v28[18] = (uint64_t)apr_hash_make(v659);
  v28[21] = (uint64_t)apr_hash_make(v659);
  id v65 = apr_hash_make(v659);
  v28[22] = (uint64_t)v65;
  id v66 = (apr_hash_t *)v28[21];
  id v67 = p;
  v632 = GTCaptureArchive_mapData((uint64_t)arr, (uint64_t)st_ino, "capture", p);
  unint64_t v69 = v68;
  ht = apr_hash_make(v67);
  v638 = apr_hash_make(v67);
  long long v70 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v70))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "capture";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v69;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v70, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-2-restore", "ReadTrace %{public}s (%{xcode:size-in-bytes}zu)", buf, 0x16u);
  }

  uint64_t v71 = ht;
  if (v69 >= 9)
  {
    BOOL v636 = 0;
    uint64_t v72 = 8;
    v651 = v626;
    v634 = v626;
    v630 = v66;
    v631 = v65;
    unint64_t v629 = v69;
    while (1)
    {
      v657 = (apr_array_header_t *)((char *)v632 + v72);
      int v73 = *(unsigned int *)((char *)v632 + v72 + 4);
      BOOL v74 = (v73 + 15345) > 0x38 || ((0x17C40BE00017E7FuLL >> (v73 - 15)) & 1) == 0;
      uint64_t v635 = v72;
      if (!v74) {
        break;
      }
      if (!v636)
      {
        BOOL v78 = GetFuncEnumConstructorType(v73) == 25;
LABEL_97:
        BOOL v75 = v78;
        goto LABEL_106;
      }
      BOOL v75 = 0;
      if (v73 <= -15909)
      {
        BOOL v76 = v73 == -16361;
        int v77 = -16202;
      }
      else
      {
        BOOL v76 = v73 == -15908 || v73 == -15318;
        int v77 = -15316;
      }
      if (!v76 && v73 != v77) {
        BOOL v75 = 1;
      }
LABEL_106:
      BOOL v636 = v75;
      if (IsFuncEnumDestructor(v73))
      {
        uint64_t v80 = *(void *)&v657[1].elt_size;
        uint64_t v81 = *(void *)&v673.st_rdev;
        unint64_t v82 = atomic_load((unint64_t *)(*(void *)&v673.st_uid + 72));
        if (GetAliasStream(v81, v80, v82))
        {
          uint64_t v83 = v657;
          GTTraceFbufToFunc(&v673, v657);
          goto LABEL_191;
        }
      }
      if (((uint64_t)v657[1].pool & 2) != 0
        || v75 && AddResourceRestoreRequest(v29, (uint64_t)&v673, (uint64_t)v657, (unint64_t)v651))
      {
        atomic_fetch_add((atomic_ullong *volatile)(v63 + 72), 1uLL);
        int pool_high = HIDWORD(v657->pool);
        if (!GetFuncEnumConstructorType(pool_high))
        {
          uint64_t v83 = v657;
          goto LABEL_192;
        }
        atomic_fetch_add((atomic_ullong *volatile)(v63 + 80), 1uLL);
        uint64_t v83 = v657;
        goto LABEL_191;
      }
      if (HIDWORD(v657->pool) == -10229)
      {
        int v85 = strcmp((const char *)&v657[1].pool + 4, "CUUUU");
        v667 = 0;
        CFErrorRef error = *(CFErrorRef *)&v657[1].nelts;
        *(void *)buf = 16;
        appended = (char *)AppendString_12841((const char **)&appended, (uint64_t)&v657[1].pool + 4, (uint64_t *)buf);
        v665 = (char *)AppendString_12841((const char **)&v665, (uint64_t)&v657[1].pool + 4, (uint64_t *)buf);
        v666 = (char *)AppendString_12841((const char **)&v666, (uint64_t)&v657[1].pool + 4, (uint64_t *)buf);
        if (!v85) {
          v667 = (char *)AppendString_12841((const char **)&v667, (uint64_t)&v657[1].pool + 4, (uint64_t *)buf);
        }
        int64_t v86 = (apr_pool_t **)v28[18];
        uint64_t v87 = *v86;
        uint64_t v88 = (char *)apr_palloc(*v86, 0x80uLL);
        if (v88)
        {
          *((void *)v88 + 15) = 0;
          *(_OWORD *)(v88 + 104) = 0u;
          *(_OWORD *)(v88 + 88) = 0u;
          *(_OWORD *)(v88 + 72) = 0u;
          *(_OWORD *)(v88 + 56) = 0u;
          *(_OWORD *)(v88 + 40) = 0u;
          *(_OWORD *)(v88 + 24) = 0u;
          *(_OWORD *)(v88 + 8) = 0u;
        }
        *(void *)uint64_t v88 = error;
        v628 = v88;
        apr_hash_set((apr_hash_t *)v86, v88, 8, v88);
        v627 = *(apr_pool_t **)v673.st_ino;
        Data = GTCaptureArchive_readData(*(const char ***)&v673.st_dev, (apr_pool_t **)v673.st_ino, appended, *(apr_pool_t **)v673.st_ino, 0);
        uint64_t v90 = (apr_pool_t *)*((void *)Data + 1);
        arra = apr_array_make(v87, (int)v90, 8);
        v640 = v90;
        if (v90)
        {
          id v91 = 0;
          uint64_t v92 = (uint64_t *)(Data + 16);
          do
          {
            uint64_t v94 = *v92++;
            uint64_t v93 = v94;
            id v95 = apr_hash_make(v87);
            *(void *)apr_array_push(arra) = v95;
            if (v94)
            {
              uint64_t v96 = 0;
              do
              {
                id v97 = apr_palloc(v87, 8uLL);
                AliasStream2 = (uint64_t *)GetAliasStream2((uint64_t)&v673, *v92);
                if (AliasStream2) {
                  uint64_t v99 = *AliasStream2;
                }
                else {
                  uint64_t v99 = 0;
                }
                *id v97 = v99;
                uint64_t v100 = v92[1];
                long long v101 = apr_array_make(v87, v100, 16);
                apr_hash_set(v95, v97, 8, v101);
                for (v92 += 2; v100; --v100)
                {
                  uint64_t v102 = (uint64_t *)GetAliasStream2((uint64_t)&v673, *v92);
                  if (v102)
                  {
                    uint64_t v103 = *v102;
                    if (*v102)
                    {
                      uint64_t v104 = v92[1];
                      long long v105 = apr_array_push(v101);
                      *long long v105 = v103;
                      v105[1] = v104;
                    }
                  }
                  v92 += 2;
                }
                qsort(v101->elts, v101->nelts, v101->elt_size, (int (__cdecl *)(const void *, const void *))DYMTLMutableBufferAncestor_compare);
                ++v96;
              }
              while (v96 != v93);
            }
            id v91 = (apr_pool_t *)((char *)v91 + 1);
          }
          while (v91 != v640);
        }
        *((void *)v628 + 12) = arra;
        apr_pool_clear(v627);
        long long v106 = GTCaptureArchive_readData(*(const char ***)&v673.st_dev, (apr_pool_t **)v673.st_ino, v665, v627, 0);
        int v107 = *((_DWORD *)v106 + 2);
        CFStringRef v108 = apr_array_make(v87, 32, 40);
        arrb = apr_array_make(v87, v107, 16);
        if (v107 >= 1)
        {
          int v109 = 0;
          CFStringRef v110 = (uint64_t *)(v106 + 16);
          do
          {
            uint64_t v111 = v108->nelts;
            uint64_t v113 = *v110++;
            size_t v112 = v113;
            uint64_t v114 = apr_array_push(arrb);
            *uint64_t v114 = v111;
            v114[1] = v113;
            uint64_t v115 = v113;
            if (v113)
            {
              do
              {
                long long v116 = apr_array_push(v108);
                id v117 = v110 + 5;
                uint64_t v118 = (uint64_t *)GetAliasStream2((uint64_t)&v673, *v110);
                if (v118) {
                  uint64_t v119 = *v118;
                }
                else {
                  uint64_t v119 = 0;
                }
                void *v116 = v119;
                v116[1] = v110[1];
                v116[2] = v110[2];
                long long v120 = (uint64_t *)GetAliasStream2((uint64_t)&v673, v110[3]);
                if (v120) {
                  uint64_t v121 = *v120;
                }
                else {
                  uint64_t v121 = 0;
                }
                v116[3] = v121;
                void v116[4] = v110[4];
                v110 += 5;
                --v115;
              }
              while (v115);
              CFStringRef v110 = v117;
            }
            qsort(&v108->elts[40 * (int)v111], v112, v108->elt_size, (int (__cdecl *)(const void *, const void *))GTTrackerIndirectArgumentBufferInfo_compare);
            ++v109;
          }
          while (v109 != v107);
        }
        *((void *)v628 + 13) = v108;
        *((void *)v628 + 14) = arrb;
        apr_pool_clear(v627);
        id v122 = (unsigned int *)GTCaptureArchive_readData(*(const char ***)&v673.st_dev, (apr_pool_t **)v673.st_ino, v666, v627, 0);
        memset(&v674.st_rdev, 0, 48);
        unsigned int v123 = *v122;
        id v124 = v122 + 4;
        int v125 = v122[2];
        long long v126 = apr_array_make(v87, v125, 24);
        if (v125 >= 1)
        {
          do
          {
            long long v127 = apr_array_push(v126);
            v127[2] = *v124;
            void *v127 = v124[1];
            uint64_t v128 = v124[2];
            v124 += 3;
            v127[1] = v128;
            --v125;
          }
          while (v125);
        }
        *(void *)buf = v124;
        *(void *)&v674.st_dev = v126;
        UniqueIdentifierResourceGroup = LoadUniqueIdentifierResourceGroup((int **)buf, v123, v87);
        v674.st_ino = (__darwin_ino64_t)UniqueIdentifierResourceGroup;
        arrc = LoadUniqueIdentifierResourceGroup((int **)buf, v123, v87);
        *(void *)&v674.st_uid = arrc;
        if (v123 <= 0x16)
        {
          v641 = apr_array_make(v87, 0, 32);
          *(void *)&v674.st_rdev = v641;
          v625 = apr_array_make(v87, 0, 32);
          v674.st_atimespec.tv_sec = (__darwin_time_t)v625;
          uint64_t tv_nsec = (uint64_t)apr_array_make(v87, 0, 32);
          v674.st_atimespec.uint64_t tv_nsec = tv_nsec;
          uint64_t v29 = v643;
        }
        else
        {
          v641 = LoadUniqueIdentifierResourceGroup((int **)buf, v123, v87);
          *(void *)&v674.st_rdev = v641;
          v625 = LoadUniqueIdentifierResourceGroup((int **)buf, v123, v87);
          v674.st_atimespec.tv_sec = (__darwin_time_t)v625;
          v674.st_atimespec.uint64_t tv_nsec = (uint64_t)LoadUniqueIdentifierResourceGroup((int **)buf, v123, v87);
          uint64_t v29 = v643;
          uint64_t tv_nsec = v674.st_atimespec.tv_nsec;
          if (v123 > 0x2E)
          {
            long long v130 = LoadUniqueIdentifierResourceGroup((int **)buf, v123, v87);
            v674.st_mtimespec.tv_sec = (__darwin_time_t)v130;
            if (v123 >= 0x36)
            {
              long long v131 = LoadUniqueIdentifierResourceGroup((int **)buf, v123, v87);
              v674.st_mtimespec.uint64_t tv_nsec = (uint64_t)v131;
              long long v132 = LoadUniqueIdentifierResourceGroup((int **)buf, v123, v87);
              goto LABEL_159;
            }
LABEL_158:
            long long v131 = apr_array_make(v87, 0, 32);
            v674.st_mtimespec.uint64_t tv_nsec = (uint64_t)v131;
            long long v132 = apr_array_make(v87, 0, 32);
LABEL_159:
            uint64_t v139 = (uint64_t)v132;
            v674.st_ctimespec.tv_sec = (__darwin_time_t)v132;
            if (v126->nelts >= 1)
            {
              uint64_t v140 = 0;
              uint64_t v141 = 16;
              do
              {
                elts = v126->elts;
                uint64_t v143 = (uint64_t *)GetAliasStream2((uint64_t)&v673, *(void *)&elts[v141]);
                if (v143) {
                  uint64_t v144 = *v143;
                }
                else {
                  uint64_t v144 = 0;
                }
                *(void *)&elts[v141] = v144;
                ++v140;
                v141 += 24;
              }
              while (v140 < v126->nelts);
            }
            ConvertUniqueIdentifierResources((uint64_t *)&v673.st_dev, (uint64_t)UniqueIdentifierResourceGroup);
            ConvertUniqueIdentifierResources((uint64_t *)&v673.st_dev, (uint64_t)arrc);
            ConvertUniqueIdentifierResources((uint64_t *)&v673.st_dev, (uint64_t)v641);
            ConvertUniqueIdentifierResources((uint64_t *)&v673.st_dev, (uint64_t)v625);
            ConvertUniqueIdentifierResources((uint64_t *)&v673.st_dev, tv_nsec);
            ConvertUniqueIdentifierResources((uint64_t *)&v673.st_dev, (uint64_t)v130);
            ConvertUniqueIdentifierResources((uint64_t *)&v673.st_dev, (uint64_t)v131);
            ConvertUniqueIdentifierResources((uint64_t *)&v673.st_dev, v139);
            GTMTLIndirectResources_optimizeByKey((uint64_t *)buf, (uint64_t *)&v674.st_dev, 0, v87);
            *(_OWORD *)(v628 + 40) = v676;
            *(_OWORD *)(v628 + 56) = v677;
            *(_OWORD *)(v628 + 72) = v678;
            *((void *)v628 + 11) = v679;
            *(_OWORD *)(v628 + 8) = *(_OWORD *)buf;
            *(_OWORD *)(v628 + 24) = *(_OWORD *)&buf[16];
            apr_pool_clear(v627);
            id v62 = v659;
            uint64_t v28 = v660;
            uint64_t v71 = ht;
            uint64_t v83 = v657;
            uint64_t v63 = v623;
            if (v667)
            {
              uint64_t v145 = GTCaptureArchive_readData(*(const char ***)&v673.st_dev, (apr_pool_t **)v673.st_ino, v667, v87, 0);
              dispatch_data_t v147 = dispatch_data_create(v145, v146, 0, &__block_literal_global_2490);
              unsigned int v148 = (void *)*((void *)v628 + 15);
              *((void *)v628 + 15) = v147;

              long long v149 = (void *)*((void *)v87 + 5);
              if (v149) {
                *((void *)v87 + 5) = *v149;
              }
              else {
                long long v149 = apr_palloc(v87, 0x20uLL);
              }
              v149[1] = v628;
              v149[2] = DYMTLIndirectArgumentBufferManager_cleanup;
              v149[3] = apr_pool_cleanup_null;
              *long long v149 = *((void *)v87 + 4);
              *((void *)v87 + 4) = v149;
            }
            atomic_fetch_add((atomic_ullong *volatile)(v623 + 72), 1uLL);
LABEL_191:
            int pool_high = HIDWORD(v83->pool);
            goto LABEL_192;
          }
        }
        long long v130 = apr_array_make(v87, 0, 32);
        v674.st_mtimespec.tv_sec = (__darwin_time_t)v130;
        goto LABEL_158;
      }
      GTTraceFbufToFunc(&v673, v657);
      int v133 = HIDWORD(v657->pool);
      int FuncEnumConstructorType = GetFuncEnumConstructorType(v133);
      if (FuncEnumConstructorType == 51 || FuncEnumConstructorType == 25)
      {
        uint64_t v135 = (LODWORD(v657->pool) - 36);
        *(void *)&v674.st_dev = 0;
        FBDecoder_DecodeArguments((unsigned int *)&v674, (uint64_t)&v657[1].pool + 4, v135, (uint64_t)buf, 0x10uLL);
        *(_DWORD *)&v674.st_mode = 0;
        FBDecoder_DecodeArguments((unsigned int *)&v674, (uint64_t)&v657[1].pool + 4, v135, (uint64_t)buf, 0x10uLL);
        *(void *)&v674.st_dev = **(void **)buf;
        long long v136 = (apr_hash_t *)v28[18];
        long long v137 = *(uint64_t **)(*(void *)(*find_entry(v28[3], &v674, 8uLL, 0) + 32) + 8);
        if (v137) {
          uint64_t v138 = *v137;
        }
        else {
          uint64_t v138 = 0;
        }
        entry = find_entry((uint64_t)v136, &v674, 8uLL, 0);
        if (*entry)
        {
          long long v151 = *(void **)(*entry + 32);
          if (v151)
          {
            *(void *)buf = *v151;
            apr_hash_set(v136, buf, 8, 0);
            *long long v151 = v138;
            apr_hash_set(v136, v151, 8, v151);
          }
        }
        int v133 = HIDWORD(v657->pool);
        uint64_t v71 = ht;
      }
      uint64_t v152 = v651 - v626;
      if (v133 == -12281
        || (IsFuncEnumPushDebugGroup(v133) & 1) != 0
        || IsFuncEnumCreateCommandEncoder(v133)
        || (int v153 = GetFuncEnumConstructorType(v133), v153 == 51)
        || v153 == 25)
      {
        int v154 = v670->nelts;
        if (v154) {
          id v155 = &v670->elts[8 * v154 - 8];
        }
        else {
          id v155 = 0;
        }
        size_t v156 = apr_array_push(v670);
        long long v157 = v669;
        *size_t v156 = v669->nelts;
        v156[1] = v133;
        long long v158 = apr_array_push(v157);
        v158[7] = v156[1];
        if (v155) {
          int v159 = *v156 - *(_DWORD *)v155;
        }
        else {
          int v159 = 0;
        }
        v158[4] = v159;
        *(void *)long long v158 = v152;
      }
      else
      {
        if (v133 != -12280 && (IsFuncEnumPopDebugGroup(v133) & 1) == 0 && (IsFuncEnumEndEncoding(v133) & 1) == 0)
        {
          if (v133 > -15344)
          {
            if ((v133 + 15343) > 0x1B || ((1 << (v133 - 17)) & 0xA000001) == 0) {
              goto LABEL_185;
            }
          }
          else if (v133 != -16361 && v133 != -16202 && v133 != -15908)
          {
            goto LABEL_185;
          }
        }
        if (IsFuncEnumEndEncoding(v133)) {
          goto LABEL_259;
        }
        if (v133 > -15344)
        {
          if ((v133 + 15343) <= 0x1B && ((1 << (v133 - 17)) & 0xA000001) != 0)
          {
LABEL_259:
            while (1)
            {
              long long v187 = v670;
              if (!v670) {
                break;
              }
              int v188 = v670->nelts;
              if (!v188 || !IsFuncEnumPushDebugGroup(*(_DWORD *)&v670->elts[8 * v188 - 4])) {
                goto LABEL_264;
              }
              GroupBuilder_popGroup((uint64_t)v668, v152);
            }
LABEL_268:
            *(void *)&uint8_t buf[16] = 0;
            *(void *)&buf[24] = 0;
            long long v676 = 0uLL;
            *(_DWORD *)buf = v668[0];
            *(_DWORD *)&uint8_t buf[4] = 500;
            *(void *)&uint8_t buf[8] = "!apr_is_empty_array(builder->stack)";
            GTError_addError((int *)v668, (uint64_t)buf);
            goto LABEL_185;
          }
        }
        else if (v133 == -16361 || v133 == -16202 || v133 == -15908)
        {
          goto LABEL_259;
        }
        long long v187 = v670;
        if (!v670) {
          goto LABEL_268;
        }
LABEL_264:
        int v189 = v187->nelts;
        if (!v189) {
          goto LABEL_268;
        }
        if (!IsFuncEnumPopDebugGroup(v133)
          || IsFuncEnumPushDebugGroup(*(_DWORD *)&v187->elts[8 * v189 - 4]))
        {
          GroupBuilder_popGroup((uint64_t)v668, v152);
        }
      }
LABEL_185:
      uint64_t v83 = v657;
      int pool_high = HIDWORD(v657->pool);
      id v62 = v659;
      if (IsFuncEnumGPUCommandCall(pool_high) || (pool_high & 0xFFFFFFFC) == 0xFFFFC1A4)
      {
        *(void *)apr_array_push((apr_array_header_t *)v28[16]) = v152;
        goto LABEL_191;
      }
LABEL_192:
      if (pool_high == -15597)
      {
        *(void *)buf = *(void *)&v83[1].nelts;
        *(void *)&v674.st_dev = 16;
        AppendString_12841((const char **)&buf[8], (uint64_t)&v83[1].pool + 4, (uint64_t *)&v674.st_dev);
        uint64_t DeviceObjectStreamRef = GetDeviceObjectStreamRef((uint64_t)&v673, *(uint64_t *)buf);
        uint64_t v165 = apr_palloc(*(apr_pool_t **)v71, 8uLL);
        *uint64_t v165 = DeviceObjectStreamRef;
        apr_hash_set(v71, v165, 8, &RecordVisibleFunctionTableMutation_sValue);
        long long v161 = v630;
        long long v160 = v631;
      }
      else
      {
        long long v161 = v630;
        long long v160 = v631;
        if (pool_high != -15598) {
          goto LABEL_197;
        }
        uint64_t v162 = GetDeviceObjectStreamRef((uint64_t)&v673, *(void *)&v83[1].nelts);
        uint64_t v163 = apr_palloc(*(apr_pool_t **)v71, 8uLL);
        *uint64_t v163 = v162;
        apr_hash_set(v71, v163, 8, &RecordVisibleFunctionTableMutation_sValue);
      }
      int pool_high = HIDWORD(v83->pool);
LABEL_197:
      if (pool_high > -15531)
      {
        if (pool_high > -15259)
        {
          if (pool_high != -15258)
          {
            int v166 = -15257;
            goto LABEL_211;
          }
        }
        else if (pool_high != -15530)
        {
          int v166 = -15529;
LABEL_211:
          if (pool_high != v166) {
            goto LABEL_214;
          }
        }
LABEL_212:
        uint64_t v167 = *(void *)&v83[1].nelts;
        goto LABEL_213;
      }
      if (pool_high > -15546)
      {
        if (pool_high == -15545) {
          goto LABEL_212;
        }
        if (pool_high != -15544) {
          goto LABEL_214;
        }
        *(void *)&long long v676 = 0;
        memset(buf, 0, sizeof(buf));
        DYTraceDecode_MTLArgumentEncoder_setBuffers_offsets_withRange((uint64_t)buf, (uint64_t)v83, (LODWORD(v83->pool) - 36), 0);
      }
      else
      {
        if (pool_high == -15559) {
          goto LABEL_212;
        }
        if (pool_high != -15558) {
          goto LABEL_214;
        }
        memset(buf, 0, sizeof(buf));
        DYTraceDecode_MTLArgumentEncoder_setIndirectCommandBuffers_withRange((uint64_t)buf, (uint64_t)v83, (LODWORD(v83->pool) - 36), 0);
      }
      uint64_t v167 = *(void *)buf;
LABEL_213:
      uint64_t v168 = GetDeviceObjectStreamRef((uint64_t)&v673, v167);
      long long v169 = apr_palloc(*(apr_pool_t **)v638, 8uLL);
      void *v169 = v168;
      uint64_t v83 = v657;
      apr_hash_set(v638, v169, 8, &RecordIntersectionFunctionTableMutation_sValue);
LABEL_214:
      int v170 = HIDWORD(v83->pool);
      if (v170 <= -15909)
      {
        if (v170 == -16361) {
          goto LABEL_221;
        }
        int v171 = -16202;
      }
      else
      {
        if (v170 == -15908 || v170 == -15316)
        {
LABEL_221:
          *((void *)v71 + 2) = v71;
          *((void *)ht + 3) = 0;
          *((void *)ht + 4) = 0;
          *((_DWORD *)ht + 10) = 0;
          long long v172 = apr_hash_next((apr_hash_t *)((char *)ht + 16));
          if (v172)
          {
            long long v173 = v172;
            do
            {
              *(void *)buf = 0;
              *(void *)buf = **(void **)(*((void *)v173 + 1) + 16);
              uint64_t v174 = *find_entry((uint64_t)v161, buf, 8uLL, 0);
              if (!v174 || (long long v175 = *(apr_array_header_t **)(v174 + 32)) == 0)
              {
                long long v175 = apr_array_make(v62, 8, 16);
                long long v176 = apr_palloc(v62, 8uLL);
                *long long v176 = *(void *)buf;
                apr_hash_set(v161, v176, 8, v175);
              }
              uint64_t v177 = apr_array_push(v175);
              *uint64_t v177 = (char *)v634 + 1;
              v177[1] = v651 - v634;
              long long v173 = apr_hash_next(v173);
            }
            while (v173);
          }
          *((void *)v638 + 2) = v638;
          *((void *)v638 + 3) = 0;
          *((void *)v638 + 4) = 0;
          *((_DWORD *)v638 + 10) = 0;
          NSErrorUserInfoKey v178 = apr_hash_next((apr_hash_t *)((char *)v638 + 16));
          unint64_t v179 = v629;
          if (v178)
          {
            CFStringRef v180 = v178;
            do
            {
              *(void *)buf = 0;
              *(void *)buf = **(void **)(*((void *)v180 + 1) + 16);
              uint64_t v181 = *find_entry((uint64_t)v160, buf, 8uLL, 0);
              if (!v181 || (BOOL v182 = *(apr_array_header_t **)(v181 + 32)) == 0)
              {
                BOOL v182 = apr_array_make(v62, 8, 16);
                NSErrorUserInfoKey v183 = apr_palloc(v62, 8uLL);
                *NSErrorUserInfoKey v183 = *(void *)buf;
                apr_hash_set(v160, v183, 8, v182);
              }
              id v184 = apr_array_push(v182);
              void *v184 = (char *)v634 + 1;
              v184[1] = v651 - v634;
              CFStringRef v180 = apr_hash_next(v180);
            }
            while (v180);
          }
          uint64_t v71 = ht;
          apr_hash_clear(ht);
          apr_hash_clear(v638);
          uint64_t v83 = v657;
          v634 = v651;
          goto LABEL_234;
        }
        int v171 = -15318;
      }
      if (v170 == v171) {
        goto LABEL_221;
      }
      unint64_t v179 = v629;
LABEL_234:
      uint64_t pool_low = LODWORD(v83->pool);
      if ((BYTE1(v83[1].pool) & 0x10) != 0)
      {
        uint64_t v186 = LODWORD(v83->pool);
        do
        {
          uint64_t v83 = (apr_array_header_t *)((char *)v83 + pool_low);
          uint64_t pool_low = LODWORD(v83->pool);
          v186 += pool_low;
        }
        while ((BYTE1(v83[1].pool) & 0x20) == 0);
      }
      else
      {
        uint64_t v186 = LODWORD(v83->pool);
      }
      uint64_t v72 = v186 + v635;
      v651 = (apr_hash_t *)((char *)v651 + 1);
      if (v186 + v635 >= v179) {
        goto LABEL_269;
      }
    }
    if (v636)
    {
      BOOL v75 = v73 != -15343;
      goto LABEL_106;
    }
    BOOL v78 = GetFuncEnumConstructorType(v73) == 51;
    goto LABEL_97;
  }
LABEL_269:
  id v190 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v190))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v190, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-2-restore", (const char *)&unk_4CA5E5, buf, 2u);
  }

  apr_pool_clear(p);
  uint64_t v191 = atomic_load((unint64_t *)(*(void *)&v673.st_uid + 72));
  v28[10] = (uint64_t)v626;
  v28[11] = v191 - (void)v626;
  while (v670 && v670->nelts)
    GroupBuilder_popGroup((uint64_t)v668, v191);
  v28[14] = (uint64_t)v669;
  apr_pool_destroy(p);
  id v192 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v192))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v192, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "BuildMemoryMap", buf, 2u);
  }

  uint64_t v193 = *(void *)&v673.st_uid;
  pthread_mutex_lock(*(pthread_mutex_t **)&v673.st_uid);
  int64_t v194 = apr_hash_copy(v62, *(const apr_hash_t **)(v193 + 88));
  pthread_mutex_unlock((pthread_mutex_t *)v193);
  v28[1] = (uint64_t)v194;
  unint64_t v195 = apr_hash_make(v62);
  *((void *)v194 + 3) = 0;
  *((void *)v194 + 4) = 0;
  *((void *)v194 + 2) = v194;
  *((_DWORD *)v194 + 10) = 0;
  long long v196 = apr_hash_next((apr_hash_t *)((char *)v194 + 16));
  if (v196)
  {
    long long v197 = v196;
    do
    {
      for (uint64_t i = *(void *)(*(void *)(*(void *)(*((void *)v197 + 1) + 32) + 24) + 8); i; uint64_t i = *(void *)(i + 40))
      {
        unsigned int v199 = atomic_load((unsigned int *)(i + 4));
        int v200 = v199 - 64;
        if ((int)(v199 - 64) >= 1)
        {
          uint64_t v201 = (_DWORD *)(i + 64);
          do
          {
            apr_hash_set(v195, v201, 9, v201);
            signed int v202 = (v201[3] + 23) & 0xFFFFFFF8;
            uint64_t v201 = (_DWORD *)((char *)v201 + v202);
            BOOL v203 = __OFSUB__(v200, v202);
            v200 -= v202;
          }
          while (!((v200 < 0) ^ v203 | (v200 == 0)));
        }
      }
      long long v197 = apr_hash_next(v197);
    }
    while (v197);
  }
  void v28[2] = (uint64_t)v195;
  long long v204 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v204))
  {
    int v205 = *(_DWORD *)(v28[2] + 48);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v205;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v204, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "%d", buf, 8u);
  }

  unint64_t v206 = v28[10];
  uint64_t v207 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v207))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v207, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "OrderDispatchCommandBuffers", buf, 2u);
  }

  uint64_t v208 = v28[1];
  unint64_t v210 = v28[10];
  uint64_t v209 = v28[11];
  v211 = apr_array_make(v62, v209, 64);
  v211->int nelts = v209;
  *(_DWORD *)(v208 + 40) = 0;
  *(void *)(v208 + 16) = v208;
  *(void *)(v208 + 24) = 0;
  *(void *)(v208 + 32) = 0;
  id v212 = apr_hash_next((apr_hash_index_t *)(v208 + 16));
  if (v212)
  {
    unint64_t v213 = v209 + v210;
    do
    {
      for (uint64_t j = *(void *)(*(void *)(*((void *)v212 + 1) + 32) + 32); j; uint64_t j = *(void *)(j + 40))
      {
        unsigned int v215 = atomic_load((unsigned int *)(j + 4));
        int v216 = (v215 >> 6) - 1;
        if (v215 >> 6 == 1)
        {
          uint64_t v217 = 0;
        }
        else
        {
          uint64_t v217 = v216;
          char v218 = (char *)(j + (v215 & 0xFFFFFFC0) - 49);
          do
          {
            char v219 = *v218;
            v218 -= 64;
            if ((v219 & 8) != 0) {
              break;
            }
            --v217;
          }
          while (v217);
        }
        if (v215 < 0x80)
        {
          unint64_t v220 = j + 64;
        }
        else
        {
          unint64_t v220 = j + 64;
          do
          {
            unsigned int v221 = v216 >> 1;
            v222 = (unint64_t *)(v220 + (v216 >> 1 << 6));
            unint64_t v224 = *v222;
            id v223 = v222 + 8;
            v216 += ~(v216 >> 1);
            if (v224 >= v210) {
              int v216 = v221;
            }
            else {
              unint64_t v220 = (unint64_t)v223;
            }
          }
          while (v216 > 0);
        }
        unint64_t v225 = j + 64 + (v217 << 6);
        while (v220 < v225)
        {
          if (*(void *)v220 < v210 || *(void *)v220 >= v213) {
            goto LABEL_315;
          }
          v227 = &v211->elts[64 * (*(void *)v220 - v210)];
          long long v228 = *(_OWORD *)v220;
          long long v229 = *(_OWORD *)(v220 + 16);
          long long v230 = *(_OWORD *)(v220 + 48);
          *((_OWORD *)v227 + 2) = *(_OWORD *)(v220 + 32);
          *((_OWORD *)v227 + 3) = v230;
          *(_OWORD *)v227 = v228;
          *((_OWORD *)v227 + 1) = v229;
          v220 += 64;
        }
      }
LABEL_315:
      id v212 = apr_hash_next(v212);
    }
    while (v212);
  }
  v28[15] = (uint64_t)v211;
  uint64_t v231 = v28[1];
  uint64_t v232 = v28[2];
  v658 = apr_array_make(v62, 8, 8);
  if (!v211->nelts) {
    goto LABEL_370;
  }
  unint64_t v234 = *(void *)v211->elts;
  *(void *)buf = 0;
  apr_pool_create_ex((apr_pool_t **)buf, v62, 0, v233);
  v235 = *(apr_pool_t **)buf;
  v652 = apr_hash_make(*(apr_pool_t **)buf);
  if (v211->nelts < 1) {
    goto LABEL_369;
  }
  uint64_t v236 = 0;
  do
  {
    uint64_t v237 = (uint64_t)&v211->elts[64 * v236];
    int v238 = *(_DWORD *)(v237 + 8);
    if (v238 <= -15909)
    {
      if (v238 == -16362)
      {
        *(void *)&v674.st_dev = 0;
        *(void *)&v674.st_dev = GTTraceFunc_targetContext(v237, v232);
        v253 = find_entry(v231, &v674, 8uLL, 0);
        if (*v253
          && (uint64_t v254 = *(void *)(*v253 + 32)) != 0
          && (uint64_t v255 = *(void *)(v254 + 32)) != 0
          && (*(unsigned char *)(v255 + 79) & 8) != 0)
        {
          uint64_t v256 = (unint64_t *)(v255 + 64);
        }
        else
        {
          uint64_t v256 = 0;
        }
        if (v234 <= *v256)
        {
          v257 = GTTraceFunc_targetContext((uint64_t)v256, v232);
          QueueForRef = GetQueueForRef((apr_pool_t **)v652, (uint64_t)v257);
          uint64_t v259 = *(void *)&v674.st_dev;
          *(void *)apr_array_push(QueueForRef) = v259;
        }
        goto LABEL_364;
      }
      if (v238 != -16361 && v238 != -16202) {
        goto LABEL_364;
      }
    }
    else if (((v238 + 15343) > 0x1B || ((1 << (v238 - 17)) & 0xA000001) == 0) && v238 != -15908)
    {
      goto LABEL_364;
    }
    *(void *)&v674.st_dev = 0;
    *(void *)&v674.st_dev = GTTraceFunc_targetContext(v237, v232);
    uint64_t v242 = find_entry(v231, &v674, 8uLL, 0);
    if (*v242
      && (uint64_t v243 = *(void *)(*v242 + 32)) != 0
      && (uint64_t v244 = *(void *)(v243 + 32)) != 0
      && (*(unsigned char *)(v244 + 79) & 8) != 0)
    {
      uint64_t v245 = (unint64_t *)(v244 + 64);
    }
    else
    {
      uint64_t v245 = 0;
    }
    if (v234 <= *v245)
    {
      id v246 = GTTraceFunc_targetContext((uint64_t)v245, v232);
      uint64_t v247 = GetQueueForRef((apr_pool_t **)v652, (uint64_t)v246);
      v248 = v247;
      uint64_t v249 = *(void *)&v674.st_dev;
      uint64_t v250 = v247->nelts;
      if ((int)v250 < 1) {
        goto LABEL_353;
      }
      uint64_t v251 = 0;
      v252 = v247->elts;
      while (*(void *)&v252[8 * v251] != *(void *)&v674.st_dev)
      {
        if (v250 == ++v251) {
          goto LABEL_353;
        }
      }
      if (v250 == v251)
      {
LABEL_353:
        *(void *)apr_array_push(v248) = v249;
        v252 = v248->elts;
        LODWORD(v260) = v248->nelts;
      }
      else
      {
        LODWORD(v260) = v250;
        LODWORD(v250) = v251;
      }
      *(void *)&v252[8 * (int)v250] |= 0x8000000000000000;
      id v62 = v659;
      if ((int)v260 < 1)
      {
        LODWORD(v262) = 0;
      }
      else
      {
        uint64_t v261 = *(void *)v252;
        if ((*(void *)v252 & 0x8000000000000000) != 0)
        {
          uint64_t v263 = 1;
          do
          {
            uint64_t v262 = v263;
            *(void *)apr_array_push(v658) = v261 & 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v260 = v248->nelts;
            v252 = v248->elts;
            if (v262 >= v260) {
              break;
            }
            uint64_t v261 = *(void *)&v252[8 * v262];
            uint64_t v263 = v262 + 1;
          }
          while (v261 < 0);
        }
        else
        {
          LODWORD(v262) = 0;
        }
        id v62 = v659;
      }
      int v264 = v260 - v262;
      v248->int nelts = v264;
      memmove(v252, &v252[8 * v262], v248->elt_size * (uint64_t)v264);
      uint64_t v28 = v660;
    }
LABEL_364:
    ++v236;
  }
  while (v236 < v211->nelts);
  v235 = *(apr_pool_t **)buf;
LABEL_369:
  apr_pool_destroy(v235);
LABEL_370:
  id v266 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v266))
  {
    int v267 = *(_DWORD *)(v28[15] + 12);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v267;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v266, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "%d", buf, 8u);
  }

  v268 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v268))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v268, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "BuildDeviceMirror", buf, 2u);
  }

  v28[5] = (uint64_t)GTMTLSMContext_buildDeviceMirrorWithIgnoreFlags(v28[1], v28[2], v28[15], v28[10], v28[11], v62);
  uint64_t v269 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v269))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v269, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
  }

  v28[12] = 0;
  uint64_t v270 = v28[14];
  v653 = (apr_hash_t *)v28[15];
  v28[13] = *((int *)v653 + 3);
  int v271 = *(_DWORD *)(v270 + 12);
  if (v271 >= 1)
  {
    arrd = 0;
    id v272 = 0;
    char v273 = 0;
    int v274 = 0;
    int v275 = 0;
    uint64_t v276 = *(void *)(v270 + 24);
    while (1)
    {
      uint64_t v277 = v276 + 32 * v274;
      int v278 = *(_DWORD *)(v277 + 28);
      int v279 = GetFuncEnumConstructorType(v278);
      if (v279 == 51) {
        break;
      }
      if (v279 == 25)
      {
        v280 = *(apr_array_header_t **)v277;
        if ((*(unsigned char *)(*((void *)v653 + 3) + (*(void *)v277 << 6) + 15) & 0x40) != 0 && v278 != -12544) {
          goto LABEL_389;
        }
        id v272 = arrd;
        if (v273 & 1 | (v275 == 0))
        {
LABEL_388:
          v660[13] = *(void *)(v276 + 32 * v274 + 8) - (void)v272 + 1;
          char v273 = 1;
LABEL_389:
          v274 += *(_DWORD *)(v276 + 32 * v274 + 20);
          ++v275;
          goto LABEL_390;
        }
LABEL_387:
        v660[12] = (uint64_t)v280;
        arrd = v280;
        id v272 = v280;
        goto LABEL_388;
      }
LABEL_390:
      if (++v274 >= v271) {
        goto LABEL_391;
      }
    }
    v280 = *(apr_array_header_t **)v277;
    if ((*(unsigned char *)(*((void *)v653 + 3) + (*(void *)v277 << 6) + 15) & 0x40) != 0 && v278 != -12543) {
      goto LABEL_389;
    }
    if (v273 & 1 | (v275 == 0)) {
      goto LABEL_388;
    }
    goto LABEL_387;
  }
LABEL_391:
  v281 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v281))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v281, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "Delta", buf, 2u);
  }

  v282 = apr_array_make(v659, 128, 8);
  v660[25] = (uint64_t)v282;
  GTMTLSMContext_getObjects(*(_DWORD **)(v660[5] + 200), v206, v282);
  uint64_t v283 = v282->nelts;
  if ((int)v283 >= 1)
  {
    unint64_t v284 = v283 + 1;
    do
    {
      uint64_t v285 = (v284 - 2);
      uint64_t v286 = v282->elts;
      if (*(unsigned char *)(*(void *)&v286[8 * v285] + 60) != 1)
      {
        LODWORD(v283) = v283 - 1;
        v282->int nelts = v283;
        *(void *)&v286[8 * v285] = *(void *)&v286[8 * (int)v283];
      }
      --v284;
    }
    while (v284 > 1);
  }
  uint64_t v287 = 0;
  uint64_t v288 = (apr_array_header_t *)v660[25];
  uint64_t v289 = v660[5];
  unint64_t v290 = v660[10];
  unint64_t v291 = v290 + v660[11];
  do
  {
    uint64_t v292 = *(void *)(v289 + 8 * v287 + 8);
    int v293 = *(_DWORD *)(v292 + 12);
    if (v293 >= 1)
    {
      for (uint64_t k = 0; k < v293; ++k)
      {
        uint64_t v295 = *(void *)(*(void *)(v292 + 24) + 8 * k);
        unint64_t v296 = *(void *)(v295 + 16);
        BOOL v297 = v290 <= v296 && v291 > v296;
        if (!v297)
        {
          unint64_t v298 = *(void *)(v295 + 24);
          if (v290 <= v298 && v291 > v298)
          {
            *(void *)apr_array_push(v288) = v295;
            int v293 = *(_DWORD *)(v292 + 12);
          }
        }
      }
    }
    ++v287;
  }
  while (v287 != 35);
  unint64_t v300 = v660[8];
  uint64_t v301 = v660[9];
  uint64_t v302 = v288->nelts;
  v288->int nelts = 0;
  if ((int)v302 < 1)
  {
    int v304 = 0;
    v307 = v659;
  }
  else
  {
    uint64_t v303 = 0;
    int v304 = 0;
    unint64_t v305 = v301 + v300;
    uint64_t v306 = 8 * v302;
    v307 = v659;
    do
    {
      v308 = v288->elts;
      uint64_t v309 = *(void *)&v308[v303];
      unint64_t v310 = *(void *)(v309 + 16);
      if (v300 > v310 || v305 <= v310)
      {
        v288->int nelts = v304 + 1;
        *(void *)&v308[v303] = *(void *)&v308[8 * v304];
        *(void *)&v288->elts[8 * v304++] = v309;
      }
      v303 += 8;
    }
    while (v306 != v303);
  }
  qsort(v288->elts, v304, 8uLL, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  GTMTLSMContext_getObjects(*(_DWORD **)(v660[5] + 120), v206, v288);
  GTMTLSMContext_getObjects(*(_DWORD **)(v660[5] + 136), v206, v288);
  GTMTLSMContext_getObjects(*(_DWORD **)(v660[5] + 128), v206, v288);
  v312 = apr_array_make(v307, 128, 8);
  uint64_t v313 = 0;
  v660[24] = (uint64_t)v312;
  uint64_t v314 = v660[5];
  unint64_t v315 = v660[10];
  unint64_t v316 = v315 + v660[11];
  do
  {
    uint64_t v317 = *(void *)(v314 + 8 * v313 + 8);
    int v318 = *(_DWORD *)(v317 + 12);
    if (v318 >= 1)
    {
      for (uint64_t m = 0; m < v318; ++m)
      {
        uint64_t v320 = *(void *)(*(void *)(v317 + 24) + 8 * m);
        unint64_t v321 = *(void *)(v320 + 16);
        if (v315 <= v321 && v316 > v321)
        {
          *(void *)apr_array_push(v312) = v320;
          int v318 = *(_DWORD *)(v317 + 12);
        }
      }
    }
    ++v313;
  }
  while (v313 != 35);
  v323 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v323))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v323, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
  }

  v324 = newpool;
  v325 = apr_array_make(newpool, 128, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(v660[5] + 56), v206, v325);
  if (v325->nelts >= 1)
  {
    uint64_t v326 = 0;
    v327 = (apr_hash_t *)v660[21];
    do
    {
      *(void *)buf = *(void *)(*(void *)&v325->elts[8 * v326] + 8);
      uint64_t v328 = *find_entry((uint64_t)v327, buf, 8uLL, 0);
      if (!v328 || (v329 = *(apr_array_header_t **)(v328 + 32)) == 0)
      {
        v329 = apr_array_make(v659, 8, 16);
        v330 = apr_palloc(v659, 8uLL);
        void *v330 = *(void *)buf;
        apr_hash_set(v327, v330, 8, v329);
      }
      char v331 = apr_array_push(v329);
      uint64_t v332 = v660[10];
      *char v331 = 0;
      v331[1] = v332;
      ++v326;
    }
    while (v326 < v325->nelts);
  }
  id v333 = apr_array_make(v324, 128, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(v660[5] + 64), v206, v333);
  if (v333->nelts >= 1)
  {
    uint64_t v334 = 0;
    v335 = (apr_hash_t *)v660[22];
    do
    {
      *(void *)buf = *(void *)(*(void *)&v333->elts[8 * v334] + 8);
      uint64_t v336 = *find_entry((uint64_t)v335, buf, 8uLL, 0);
      if (!v336 || (id v337 = *(apr_array_header_t **)(v336 + 32)) == 0)
      {
        id v337 = apr_array_make(v659, 8, 16);
        int v338 = apr_palloc(v659, 8uLL);
        *int v338 = *(void *)buf;
        apr_hash_set(v335, v338, 8, v337);
      }
      id v339 = apr_array_push(v337);
      uint64_t v340 = v660[10];
      *id v339 = 0;
      v339[1] = v340;
      ++v334;
    }
    while (v334 < v333->nelts);
  }
  v642 = v324;
  id v341 = apr_hash_make(v659);
  v342 = *(apr_hash_t **)(v660[5] + 200);
  int v343 = *((_DWORD *)v342 + 3);
  if (v343 >= 1)
  {
    uint64_t v344 = 0;
    uint64_t v345 = *(void *)(v660[14] + 24) + 32 * *(int *)(v660[14] + 12);
    v654 = *(apr_hash_t **)(v660[5] + 200);
    do
    {
      uint64_t v346 = *(void *)(*((void *)v342 + 3) + 8 * v344);
      if (*(unsigned char *)(v346 + 60) == 1)
      {
        v348 = (uint64_t *)(v346 + 32);
        uint64_t v347 = *(void *)(v346 + 32);
        if (v347)
        {
          id v349 = 0;
          do
          {
            uint64_t v350 = v660[14];
            v351 = *(void **)(v350 + 24);
            int v352 = *(_DWORD *)(v350 + 12);
            if (v352 >= 1)
            {
              do
              {
                uint64_t v353 = v352 >> 1;
                id v354 = &v351[4 * v353];
                unint64_t v356 = *v354;
                unsigned int v355 = v354 + 4;
                v352 += ~(v352 >> 1);
                if (v356 > *(_DWORD *)(v347 + 24) - *((_DWORD *)v660 + 20)) {
                  int v352 = v353;
                }
                else {
                  v351 = v355;
                }
              }
              while (v352 > 0);
            }
            if (v351 != (void *)v345 && v351 != v349)
            {
              uint64_t v358 = *(void *)(v660[15] + 24) + (*v351 << 6);
              *(void *)buf = 0;
              *(void *)buf = *((void *)GTTraceFunc_argumentBytesWithMap((void *)v358, *(unsigned __int8 *)(v358 + 13), v660[2])+ 1);
              uint64_t v359 = *find_entry((uint64_t)v341, buf, 8uLL, 0);
              if (!v359 || (unint64_t v360 = *(apr_array_header_t **)(v359 + 32)) == 0)
              {
                unint64_t v360 = apr_array_make(v659, 1, 8);
                v361 = apr_palloc(v659, 8uLL);
                void *v361 = *(void *)buf;
                apr_hash_set(v341, v361, 8, v360);
              }
              *(void *)apr_array_push(v360) = v346;
              uint64_t v347 = *v348;
              id v349 = v351;
            }
            uint64_t v346 = v347;
            v348 = (uint64_t *)(v347 + 32);
            uint64_t v347 = *(void *)(v347 + 32);
          }
          while (v347);
          v342 = v654;
          int v343 = *((_DWORD *)v654 + 3);
        }
      }
      ++v344;
    }
    while (v344 < v343);
  }
  v265 = v660;
  v660[23] = (uint64_t)v341;
  v362 = apr_hash_make(v659);
  v660[17] = (uint64_t)v362;
  *(void *)&v674.st_dev = 0;
  v363 = v643;
  if (v643->nelts >= 1)
  {
    uint64_t v364 = 0;
    v365 = 0;
    LODWORD(v366) = 0;
    while (1)
    {
      v367 = &v363->elts[64 * v364];
      unint64_t v369 = *((void *)v367 + 2);
      v368 = (unint64_t *)(v367 + 16);
      if (v206 < v369) {
        break;
      }
      v363 = v643;
      if (!v365) {
        goto LABEL_476;
      }
LABEL_477:
      int v375 = v365[3] + 1;
      v365[3] = v375;
      v365[4] = v375;
      if (++v364 >= v363->nelts) {
        goto LABEL_478;
      }
    }
    uint64_t v366 = (int)v366;
    do
    {
      uint64_t v370 = *(void *)&v658->elts[8 * v366++];
      *(void *)&v674.st_dev = v370;
      uint64_t v371 = v660[1];
      *(void *)buf = v370;
      unint64_t v372 = find_entry(v371, buf, 8uLL, 0);
      unint64_t v373 = CommandBufferCommitIndex(*(void *)(*(void *)(*v372 + 32) + 32));
    }
    while (v373 < *v368);
    unint64_t v206 = v373;
    v363 = v643;
LABEL_476:
    v365 = apr_palloc(v659, 0x20uLL);
    *(void *)v365 = v659;
    v365[2] = v363->elt_size;
    v365[3] = 0;
    v365[4] = 0;
    *((void *)v365 + 3) = &v363->elts[v364 * v363->elt_size];
    v374 = apr_palloc(v659, 8uLL);
    void *v374 = *(void *)&v674.st_dev;
    apr_hash_set(v362, v374, 8, v365);
    goto LABEL_477;
  }
LABEL_478:
  *(void *)&v674.st_dev = 0;
  uint64_t v376 = *find_entry((uint64_t)v362, &v674, 8uLL, 0);
  if (!v376)
  {
    v660[26] = 0;
    uint64_t v378 = (apr_array_header_t **)(v660 + 26);
    goto LABEL_482;
  }
  uint64_t v377 = *(void *)(v376 + 32);
  v660[26] = v377;
  uint64_t v378 = (apr_array_header_t **)(v660 + 26);
  if (!v377) {
LABEL_482:
  }
    *uint64_t v378 = apr_array_make(v659, 0, 64);
  arre = (apr_array_header_t *)v378;
  uint64_t v380 = GTResourceTrackerMake(v660[1], v660[2], v642);
  if (v658->nelts >= 1)
  {
    uint64_t v381 = 0;
    do
      GTResourceTrackerProcessCommandBuffer((uint64_t)v380, *(apr_pool_t **)&v658->elts[8 * v381++], 1);
    while (v381 < v658->nelts);
  }
  if (*(_DWORD *)(v380[3] + 48))
  {
    uint64_t v382 = *v380;
    v383 = (apr_hash_index_t *)(*v380 + 16);
    *(void *)(v382 + 24) = 0;
    *(void *)(v382 + 32) = 0;
    *(void *)(v382 + 16) = v382;
    *(_DWORD *)(v382 + 40) = 0;
    v384 = apr_hash_next(v383);
    if (v384)
    {
      v385 = v384;
      do
      {
        uint64_t v386 = *(void *)(*((void *)v385 + 1) + 32);
        if (!v386) {
          goto LABEL_511;
        }
        uint64_t v387 = *(void *)(v386 + 32);
        if (!v387 || (*(unsigned char *)(v387 + 79) & 8) == 0) {
          goto LABEL_511;
        }
        id v388 = (uint64_t *)(v387 + 64);
        int v389 = GetFuncEnumConstructorType(*(_DWORD *)(v387 + 72));
        switch(v389)
        {
          case 16:
            memset(buf, 0, 24);
            long long v685 = 0u;
            long long v686 = 0u;
            long long v683 = 0u;
            long long v684 = 0u;
            long long v681 = 0u;
            long long v682 = 0u;
            long long v679 = 0u;
            long long v680 = 0u;
            long long v677 = 0u;
            long long v678 = 0u;
            long long v676 = 0u;
            *(_DWORD *)buf = 16;
            WORD1(v680) = 2;
            *(void *)&buf[24] = -1;
            *(void *)&long long v678 = -1;
            GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)buf, v380[1], v388);
            if (!(void)v677) {
              goto LABEL_511;
            }
            uint64_t v398 = *find_entry(v380[3], &v677, 8uLL, 0);
            if (!v398) {
              goto LABEL_511;
            }
            uint64_t v399 = *(void *)(v398 + 32);
            if (!v399) {
              goto LABEL_511;
            }
            unint64_t v392 = *(void *)(v399 + 8);
            uint64_t v393 = *(void *)&buf[8];
            if (v392 > IsHeapResourceMadeAliasable(v382, *(uint64_t *)&buf[8], v392)) {
              goto LABEL_511;
            }
            v394 = v380;
            int v395 = 16;
            break;
          case 80:
            memset(buf, 0, 24);
            long long v685 = 0u;
            long long v686 = 0u;
            long long v683 = 0u;
            long long v684 = 0u;
            long long v681 = 0u;
            long long v682 = 0u;
            long long v679 = 0u;
            long long v680 = 0u;
            long long v677 = 0u;
            long long v678 = 0u;
            long long v676 = 0u;
            *(_DWORD *)buf = 80;
            WORD1(v680) = 2;
            *(void *)&buf[24] = -1;
            *(void *)&long long v678 = -1;
            uint64_t v687 = 0xFFFFFFFFLL;
            GTMTLSMTexture_processTraceFuncWithMap((char *)buf, v380[1], v388);
            if (!(void)v677) {
              goto LABEL_511;
            }
            uint64_t v396 = *find_entry(v380[3], &v677, 8uLL, 0);
            if (!v396) {
              goto LABEL_511;
            }
            uint64_t v397 = *(void *)(v396 + 32);
            if (!v397) {
              goto LABEL_511;
            }
            unint64_t v392 = *(void *)(v397 + 8);
            uint64_t v393 = *(void *)&buf[8];
            if (v392 > IsHeapResourceMadeAliasable(v382, *(uint64_t *)&buf[8], v392)) {
              goto LABEL_511;
            }
            v394 = v380;
            int v395 = 80;
            break;
          case 22:
            memset(buf, 0, 24);
            long long v680 = 0u;
            long long v681 = 0u;
            long long v682 = 0u;
            long long v683 = 0u;
            long long v678 = 0u;
            long long v679 = 0u;
            long long v676 = 0u;
            long long v677 = 0u;
            *(_DWORD *)buf = 22;
            WORD1(v680) = 2;
            *(void *)&buf[24] = -1;
            *(void *)&long long v678 = -1;
            *(void *)&long long v681 = -1;
            GTMTLSMBuffer_processTraceFuncWithMap((char *)buf, v380[1], v388);
            if (!(void)v677) {
              goto LABEL_511;
            }
            uint64_t v390 = *find_entry(v380[3], &v677, 8uLL, 0);
            if (!v390) {
              goto LABEL_511;
            }
            uint64_t v391 = *(void *)(v390 + 32);
            if (!v391) {
              goto LABEL_511;
            }
            unint64_t v392 = *(void *)(v391 + 8);
            uint64_t v393 = *(void *)&buf[8];
            if (v392 > IsHeapResourceMadeAliasable(v382, *(uint64_t *)&buf[8], v392)) {
              goto LABEL_511;
            }
            v394 = v380;
            int v395 = 22;
            break;
          default:
            goto LABEL_511;
        }
        GTResourceTrackerResourceRead(v394, v395, v393, v392);
LABEL_511:
        v385 = apr_hash_next(v385);
      }
      while (v385);
    }
    apr_hash_clear((apr_hash_t *)v380[3]);
    v265 = v660;
  }
  *(void *)&v674.st_dev = 0;
  apr_pool_create_ex((apr_pool_t **)&v674, *(apr_pool_t **)v380[4], 0, v379);
  v400 = *(apr_pool_t **)&v674.st_dev;
  v401 = apr_array_make(*(apr_pool_t **)&v674.st_dev, 16, 8);
  uint64_t v402 = v380[4];
  *(_DWORD *)(v402 + 40) = 0;
  *(void *)(v402 + 16) = v402;
  *(void *)(v402 + 24) = 0;
  *(void *)(v402 + 32) = 0;
  v403 = apr_hash_next((apr_hash_index_t *)(v402 + 16));
  if (v403)
  {
    v404 = v403;
    do
    {
      uint64_t v405 = *(void *)(*((void *)v404 + 1) + 32);
      if (*(_DWORD *)(v405 + 40) == 16) {
        *(void *)apr_array_push(v401) = v405;
      }
      v404 = apr_hash_next(v404);
    }
    while (v404);
  }
  if (v401->nelts >= 1)
  {
    uint64_t v406 = 0;
    do
    {
      uint64_t v407 = *(void *)&v401->elts[8 * v406];
      memset(buf, 0, 24);
      long long v685 = 0u;
      long long v686 = 0u;
      long long v683 = 0u;
      long long v684 = 0u;
      long long v681 = 0u;
      long long v682 = 0u;
      long long v679 = 0u;
      long long v680 = 0u;
      long long v677 = 0u;
      long long v678 = 0u;
      long long v676 = 0u;
      *(_DWORD *)buf = 16;
      WORD1(v680) = 2;
      *(void *)&buf[24] = -1;
      *(void *)&long long v678 = -1;
      uint64_t v408 = *(void *)(*(void *)(*find_entry(*v380, (unsigned char *)(v407 + 8), 8uLL, 0) + 32) + 32);
      if (v408)
      {
        unsigned int v409 = 0;
        while (1)
        {
          unsigned int v410 = atomic_load((unsigned int *)(v408 + 4));
          uint64_t v411 = v409 + (v410 >> 6) - 1;
          if ((int)v411 > 0) {
            break;
          }
          uint64_t v408 = *(void *)(v408 + 40);
          unsigned int v409 = v411;
          if (!v408)
          {
            unsigned int v409 = v411;
            goto LABEL_527;
          }
        }
      }
      else
      {
        unsigned int v409 = 0;
      }
      uint64_t v411 = 0;
LABEL_527:
      unint64_t v412 = v409 | (unint64_t)(v411 << 32);
LABEL_528:
      uint64_t v413 = v408 + 64;
      while (v408 && (*(unsigned char *)(v413 + ((uint64_t)(HIDWORD(v412) - (int)v412) << 6) + 15) & 8) != 0)
      {
        uint64_t v414 = v413 + ((uint64_t)(HIDWORD(v412) - (int)v412) << 6);
        GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)buf, v380[1], (uint64_t *)v414);
        if (*(_DWORD *)(v414 + 8) == -15552 && (void)v681 != 0) {
          GTResourceTrackerUsingAccelerationStructureDescriptor(v380, (uint64_t *)v681, *(void *)v414);
        }
        unsigned int v416 = atomic_load((unsigned int *)(v408 + 4));
        int v417 = v412 + (v416 >> 6);
        uint64_t v418 = (HIDWORD(v412) + 1);
        unint64_t v412 = (v418 << 32) | v412;
        if (v418 == v417 - 1)
        {
          unint64_t v412 = (v418 << 32) | v418;
          uint64_t v408 = *(void *)(v408 + 40);
          goto LABEL_528;
        }
      }
      ++v406;
    }
    while (v406 < v401->nelts);
    v400 = *(apr_pool_t **)&v674.st_dev;
    v265 = v660;
  }
  apr_pool_destroy(v400);
  *(void *)&v674.st_dev = 0;
  apr_pool_create_ex((apr_pool_t **)&v674, *(apr_pool_t **)v380[4], 0, v419);
  v420 = *(apr_pool_t **)&v674.st_dev;
  v421 = apr_array_make(*(apr_pool_t **)&v674.st_dev, 16, 16);
  v422 = apr_hash_make(v420);
  uint64_t v423 = v380[2];
  *(_DWORD *)(v423 + 40) = 0;
  *(void *)(v423 + 16) = v423;
  *(void *)(v423 + 24) = 0;
  *(void *)(v423 + 32) = 0;
  v424 = apr_hash_next((apr_hash_index_t *)(v423 + 16));
  if (v424)
  {
    id v425 = v424;
    v655 = v422;
    do
    {
      v426 = *(_DWORD **)(*((void *)v425 + 1) + 32);
      int v427 = v426[2];
      if (v427 == 2)
      {
        uint64_t v431 = *(void *)(*find_entry(*v380, *(unsigned char **)(*((void *)v425 + 1) + 32), 8uLL, 0) + 32);
        memset(buf, 0, 24);
        long long v676 = 0u;
        *(_DWORD *)buf = 2;
        *(void *)&long long v677 = 0;
        *(void *)&buf[24] = -1;
        uint64_t v432 = *(void *)(v431 + 32);
        if (v432)
        {
          unsigned int v433 = 0;
          while (1)
          {
            unsigned int v434 = atomic_load((unsigned int *)(v432 + 4));
            uint64_t v435 = v433 + (v434 >> 6) - 1;
            if ((int)v435 > 0) {
              break;
            }
            uint64_t v432 = *(void *)(v432 + 40);
            unsigned int v433 = v435;
            if (!v432)
            {
              unsigned int v433 = v435;
              goto LABEL_557;
            }
          }
        }
        else
        {
          unsigned int v433 = 0;
        }
        uint64_t v435 = 0;
LABEL_557:
        unint64_t v436 = v433 | (unint64_t)(v435 << 32);
LABEL_558:
        uint64_t v437 = v432 + 64;
        while (v432)
        {
          if ((*(unsigned char *)(v437 + ((uint64_t)(HIDWORD(v436) - (int)v436) << 6) + 15) & 8) == 0) {
            break;
          }
          uint64_t v438 = v437 + ((uint64_t)(HIDWORD(v436) - (int)v436) << 6);
          GTMTLSMDrawable_processTraceFuncWithMap((char *)buf, v380[1], (uint64_t *)v438);
          if (*(_DWORD *)(v438 + 8) == -7167) {
            break;
          }
          unsigned int v439 = atomic_load((unsigned int *)(v432 + 4));
          int v440 = v436 + (v439 >> 6);
          uint64_t v441 = (HIDWORD(v436) + 1);
          unint64_t v436 = (v441 << 32) | v436;
          if (v441 == v440 - 1)
          {
            unint64_t v436 = (v441 << 32) | v441;
            uint64_t v432 = *(void *)(v432 + 40);
            goto LABEL_558;
          }
        }
        v420 = *(apr_pool_t **)&v674.st_dev;
        v442 = apr_palloc(*(apr_pool_t **)&v674.st_dev, 8uLL);
        void *v442 = v677;
        v422 = v655;
        apr_hash_set(v655, v442, 8, v426);
        v265 = v660;
      }
      else if (v427 == 80)
      {
        uint64_t v428 = *find_entry(*v380, *(unsigned char **)(*((void *)v425 + 1) + 32), 8uLL, 0);
        if (v428)
        {
          uint64_t v429 = *(void *)(v428 + 32);
          if (v429)
          {
            uint64_t v430 = *(void *)(v429 + 32);
            if (v430)
            {
              if ((*(unsigned char *)(v430 + 79) & 8) != 0)
              {
                memset(buf, 0, 24);
                long long v685 = 0u;
                long long v686 = 0u;
                long long v683 = 0u;
                long long v684 = 0u;
                long long v681 = 0u;
                long long v682 = 0u;
                long long v679 = 0u;
                long long v680 = 0u;
                long long v677 = 0u;
                long long v678 = 0u;
                long long v676 = 0u;
                *(_DWORD *)buf = 80;
                WORD1(v680) = 2;
                *(void *)&buf[24] = -1;
                *(void *)&long long v678 = -1;
                uint64_t v687 = 0xFFFFFFFFLL;
                GTMTLSMTexture_processTraceFuncWithMap((char *)buf, v380[1], (uint64_t *)(v430 + 64));
                if ((void)v686 || *((void *)&v680 + 1) && *(unsigned char *)(*((void *)&v680 + 1) + 44)) {
                  *(_OWORD *)apr_array_push(v421) = *(_OWORD *)v426;
                }
              }
            }
          }
        }
      }
      id v425 = apr_hash_next(v425);
    }
    while (v425);
  }
  int v443 = v421->nelts;
  if (v443 < 1)
  {
    v445 = v659;
    if (!v443) {
      goto LABEL_609;
    }
  }
  else
  {
    int v444 = 0;
    v445 = v659;
    do
    {
      v446 = find_entry((uint64_t)v422, &v421->elts[16 * v444], 8uLL, 0);
      if (*v446 && *(void *)(*v446 + 32))
      {
        uint64_t v447 = v421->nelts - 1;
        v421->int nelts = v447;
        v448 = v421->elts;
        long long v449 = *(_OWORD *)&v448[16 * v444];
        *(_OWORD *)&v448[16 * v444] = *(_OWORD *)&v448[16 * v447];
        *(_OWORD *)&v421->elts[16 * v447] = v449;
      }
      else
      {
        ++v444;
      }
      int v450 = v421->nelts;
    }
    while (v444 < v450);
    if (!v450) {
      goto LABEL_609;
    }
  }
  uint64_t v451 = *v380;
  v452 = (apr_hash_index_t *)(*v380 + 16);
  *(void *)(v451 + 24) = 0;
  *(void *)(v451 + 32) = 0;
  *(void *)(v451 + 16) = v451;
  *(_DWORD *)(v451 + 40) = 0;
  v453 = apr_hash_next(v452);
  if (v453)
  {
    v454 = v453;
    do
    {
      uint64_t v455 = *(void *)(*((void *)v454 + 1) + 32);
      if (v455)
      {
        uint64_t v456 = *(void *)(v455 + 32);
        if (v456)
        {
          if ((*(unsigned char *)(v456 + 79) & 8) != 0 && GetFuncEnumConstructorType(*(_DWORD *)(v456 + 72)) == 2)
          {
            memset(buf, 0, 24);
            long long v676 = 0u;
            *(_DWORD *)buf = 2;
            *(void *)&long long v677 = 0;
            *(void *)&buf[24] = -1;
            GTMTLSMDrawable_processTraceFuncWithMap((char *)buf, v380[1], (uint64_t *)(v456 + 64));
            uint64_t v457 = *(void *)(v455 + 32);
            if (v457)
            {
              unsigned int v458 = 0;
              while (1)
              {
                unsigned int v459 = atomic_load((unsigned int *)(v457 + 4));
                uint64_t v460 = v458 + (v459 >> 6) - 1;
                if ((int)v460 > 1) {
                  break;
                }
                uint64_t v457 = *(void *)(v457 + 40);
                unsigned int v458 = v460;
                if (!v457)
                {
                  unsigned int v458 = v460;
                  goto LABEL_593;
                }
              }
              uint64_t v460 = 1;
            }
            else
            {
              unsigned int v458 = 0;
              uint64_t v460 = 0;
            }
LABEL_593:
            unint64_t v461 = v458 | (unint64_t)(v460 << 32);
LABEL_594:
            uint64_t v462 = v457 + 64;
            while (v457)
            {
              if ((*(unsigned char *)(v462 + ((uint64_t)(HIDWORD(v461) - (int)v461) << 6) + 15) & 8) == 0) {
                break;
              }
              uint64_t v463 = v462 + ((uint64_t)(HIDWORD(v461) - (int)v461) << 6);
              GTMTLSMDrawable_processTraceFuncWithMap((char *)buf, v380[1], (uint64_t *)v463);
              if (*(_DWORD *)(v463 + 8) == -7167) {
                break;
              }
              unsigned int v464 = atomic_load((unsigned int *)(v457 + 4));
              int v465 = v461 + (v464 >> 6);
              uint64_t v466 = (HIDWORD(v461) + 1);
              unint64_t v461 = (v466 << 32) | v461;
              if (v466 == v465 - 1)
              {
                unint64_t v461 = (v466 << 32) | v466;
                uint64_t v457 = *(void *)(v457 + 40);
                goto LABEL_594;
              }
            }
            int v467 = v421->nelts;
            v265 = v660;
            if (v467 >= 1)
            {
              int v468 = 0;
              uint64_t v469 = v677;
              uint64_t v470 = *(void *)&buf[8];
              do
              {
                if (*(void *)&v421->elts[16 * v468] == v469)
                {
                  GTResourceTrackerUsingResource(v380[2], 2, v470, *v380, v380[1]);
                  uint64_t v471 = v421->nelts - 1;
                  v421->int nelts = v471;
                  long long v472 = v421->elts;
                  long long v473 = *(_OWORD *)&v472[16 * v468];
                  *(_OWORD *)&v472[16 * v468] = *(_OWORD *)&v472[16 * v471];
                  *(_OWORD *)&v421->elts[16 * v471] = v473;
                  int v467 = v421->nelts;
                }
                else
                {
                  ++v468;
                }
              }
              while (v468 < v467);
            }
            v445 = v659;
          }
        }
      }
      v454 = apr_hash_next(v454);
    }
    while (v454);
    v420 = *(apr_pool_t **)&v674.st_dev;
  }
LABEL_609:
  apr_pool_destroy(v420);
  pool = arre->pool;
  uint64_t v475 = *((unsigned int *)arre->pool + 3);
  *((_DWORD *)arre->pool + 3) = 0;
  if ((int)v475 < 1)
  {
    int v486 = 0;
  }
  else
  {
    uint64_t v476 = 0;
    do
    {
      uint64_t v477 = *((void *)pool + 3);
      v478 = (_OWORD *)(v477 + v476);
      uint64_t v479 = *(void *)(v477 + v476);
      if (v479 != 16 && v479 != 57)
      {
        uint64_t v480 = *((int *)pool + 3);
        *((_DWORD *)pool + 3) = v480 + 1;
        *(_OWORD *)buf = *v478;
        *(_OWORD *)&uint8_t buf[16] = v478[1];
        long long v676 = v478[2];
        long long v677 = v478[3];
        long long v481 = (long long *)(v477 + (v480 << 6));
        long long v482 = v481[3];
        long long v484 = *v481;
        long long v483 = v481[1];
        v478[2] = v481[2];
        v478[3] = v482;
        _OWORD *v478 = v484;
        v478[1] = v483;
        long long v485 = (_OWORD *)(*((void *)pool + 3) + (v480 << 6));
        *long long v485 = *(_OWORD *)buf;
        v485[1] = *(_OWORD *)&buf[16];
        v485[2] = v676;
        v485[3] = v677;
      }
      v476 += 64;
    }
    while (v475 << 6 != v476);
    int v486 = *((_DWORD *)pool + 3);
  }
  *((_DWORD *)pool + 4) = v486;
  int v487 = v475 - v486;
  long long v488 = apr_palloc(v445, 0x20uLL);
  *(void *)long long v488 = v445;
  int v489 = *((_DWORD *)pool + 2);
  v488[3] = v487;
  v488[4] = v487;
  v488[2] = v489;
  *((void *)v488 + 3) = *((void *)pool + 3) + *((int *)pool + 2) * (uint64_t)v486;
  v265[30] = (uint64_t)v488;
  uint64_t v490 = v265[25];
  if (*(int *)(v490 + 12) >= 1)
  {
    uint64_t v491 = 0;
    do
    {
      long long v492 = find_entry(v380[4], (unsigned char *)(*(void *)(*(void *)(v490 + 24) + 8 * v491) + 8), 8uLL, 0);
      if (*v492)
      {
        uint64_t v493 = *(void *)(*v492 + 32);
        if (v493) {
          *(void *)(v493 + 32) = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      ++v491;
      uint64_t v490 = v265[25];
    }
    while (v491 < *(int *)(v490 + 12));
  }
  uint64_t v494 = *((unsigned int *)pool + 3);
  *((_DWORD *)pool + 3) = 0;
  if ((int)v494 >= 1)
  {
    uint64_t v495 = 0;
    while (1)
    {
      uint64_t v496 = *((void *)pool + 3);
      uint64_t v497 = *find_entry(v380[4], (unsigned char *)(v496 + v495 + 8), 8uLL, 0);
      if (v497)
      {
        uint64_t v498 = *(void *)(v497 + 32);
        if (v498)
        {
          uint64_t v499 = *(void *)(v496 + v495);
          if (v499 == 80) {
            goto LABEL_632;
          }
          if (v499 == 22) {
            break;
          }
        }
      }
LABEL_643:
      v495 += 64;
      if (v494 << 6 == v495)
      {
        int v514 = *((_DWORD *)pool + 3);
        v445 = v659;
        goto LABEL_646;
      }
    }
    uint64_t Object = GTMTLSMContext_getObject(*(void *)v265[5], *(void *)(v496 + v495 + 8), v265[10]);
    __int16 v501 = *((_WORD *)Object + 48);
    if ((IsFuncEnumSharedResourceConstructor(*((_DWORD *)Object + 1)) & 1) != 0 || (v501 & 0xE0) == 0) {
      *(void *)(v498 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    }
LABEL_632:
    BOOL v502 = (dword_77313C & 0x10) == 0 || *(unsigned char *)(v498 + 48) == 0;
    uint64_t v503 = *(void *)(v498 + 32);
    if (v503 != -1)
    {
      uint64_t v504 = *(void *)(v498 + 24);
      if (v504 == -1 || v504 > v503) {
        BOOL v502 = 0;
      }
      if (v502)
      {
        uint64_t v506 = *((int *)pool + 3);
        *((_DWORD *)pool + 3) = v506 + 1;
        uint64_t v507 = *((void *)pool + 3);
        v508 = (_OWORD *)(v507 + v495);
        *(_OWORD *)buf = *(_OWORD *)(v507 + v495);
        *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(v507 + v495 + 16);
        long long v676 = *(_OWORD *)(v507 + v495 + 32);
        long long v677 = *(_OWORD *)(v507 + v495 + 48);
        v509 = (long long *)(v507 + (v506 << 6));
        long long v510 = v509[3];
        long long v512 = *v509;
        long long v511 = v509[1];
        v508[2] = v509[2];
        v508[3] = v510;
        _OWORD *v508 = v512;
        v508[1] = v511;
        v513 = (_OWORD *)(*((void *)pool + 3) + (v506 << 6));
        _OWORD *v513 = *(_OWORD *)buf;
        v513[1] = *(_OWORD *)&buf[16];
        v513[2] = v676;
        v513[3] = v677;
      }
    }
    goto LABEL_643;
  }
  int v514 = 0;
LABEL_646:
  *((_DWORD *)pool + 4) = v514;
  v515 = apr_palloc(v445, 0x20uLL);
  *(void *)v515 = v445;
  int v516 = *((_DWORD *)pool + 2);
  v515[3] = v494 - v514;
  v515[4] = v494 - v514;
  v515[2] = v516;
  *((void *)v515 + 3) = *((void *)pool + 3) + *((int *)pool + 2) * (uint64_t)v514;
  v265[27] = (uint64_t)v515;
  uint64_t v517 = *(void *)(v265[5] + 280);
  uint64_t v518 = *(void *)(v517 + 24);
  v265[32] = (uint64_t)apr_array_make(v445, *(_DWORD *)(v517 + 12), 8);
  LODWORD(v519) = *(_DWORD *)(v517 + 12);
  if ((int)v519 >= 1)
  {
    uint64_t v520 = 0;
    do
    {
      uint64_t v521 = *(void *)(v518 + 8 * v520);
      if (v521) {
        uint64_t v522 = *(void *)(v521 + 8);
      }
      else {
        uint64_t v522 = 0;
      }
      uint64_t v523 = v265[1];
      *(void *)buf = v522;
      uint64_t v524 = *find_entry(v523, buf, 8uLL, 0);
      if (v524) {
        uint64_t v525 = *(void *)(v524 + 32);
      }
      else {
        uint64_t v525 = 0;
      }
      if (*(void *)GTTraceStream_lastFunc(v525) >= (unint64_t)v265[10]) {
        *(void *)apr_array_push((apr_array_header_t *)v265[32]) = v521;
      }
      ++v520;
      uint64_t v519 = *(int *)(v517 + 12);
    }
    while (v520 < v519);
  }
  v265[33] = (uint64_t)apr_array_make(v445, v519, 8);
  uint64_t v526 = *(void *)(v265[5] + 184);
  v527 = (apr_pool_t **)apr_hash_make(v445);
  if (*(int *)(v526 + 12) >= 1)
  {
    uint64_t v528 = 0;
    do
    {
      uint64_t v529 = v265[1];
      *(void *)buf = *(void *)(*(void *)(*(void *)(v526 + 24) + 8 * v528) + 8);
      v530 = find_entry(v529, buf, 8uLL, 0);
      if (*v530) {
        uint64_t v531 = *(void *)(*v530 + 32);
      }
      else {
        uint64_t v531 = 0;
      }
      GatherCommandQueueResidencySetsUpToIndexInternal(v527, v531, v265[2], v265[11] + v265[10], 0);
      ++v528;
    }
    while (v528 < *(int *)(v526 + 12));
  }
  v532 = apr_hash_first(*v527, (apr_hash_t *)v527);
  if (v532)
  {
    v533 = v532;
    do
    {
      uint64_t v534 = **(void **)(*((void *)v533 + 1) + 16);
      *(void *)apr_array_push((apr_array_header_t *)v265[33]) = v534;
      v533 = apr_hash_next(v533);
    }
    while (v533);
  }
  v265[20] = (uint64_t)apr_hash_make(v445);
  if (v658->nelts >= 1)
  {
    uint64_t v535 = 0;
    do
    {
      v536 = GTResourceTrackerMake(v265[1], v265[2], v445);
      v537 = *(apr_pool_t **)&v658->elts[8 * v535];
      GTResourceTrackerProcessCommandBuffer((uint64_t)v536, v537, 0);
      v538 = (apr_hash_t *)v265[20];
      v539 = apr_palloc(v445, 8uLL);
      void *v539 = v537;
      apr_hash_set(v538, v539, 8, v536);
      ++v535;
    }
    while (v535 < v658->nelts);
  }
  uint64_t v540 = v265[5];
  unint64_t v541 = v265[10];
  v542 = newpool;
  v543 = (int *)apr_hash_make(newpool);
  v544 = apr_array_make(v542, 8, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(v540 + 80), v541, v544);
  if (v544->nelts >= 1)
  {
    uint64_t v545 = 0;
    v546 = 0;
    do
    {
      uint64_t v547 = *(void *)&v544->elts[8 * v545];
      if (*(unsigned char *)(*(void *)(v547 + 48) + 19) == 2)
      {
        if (!v546)
        {
          v546 = apr_hash_make(v542);
          GTMTLSMContext_buildResourceChildrenMap((uint64_t *)v540, v541, (uint64_t)v546, v548);
        }
        v549 = find_entry((uint64_t)v546, (unsigned char *)(v547 + 8), 8uLL, 0);
        if (*v549)
        {
          uint64_t v550 = *(void *)(*v549 + 32);
          if (v550)
          {
            if (*(int *)(v550 + 12) >= 1)
            {
              uint64_t v551 = 0;
              do
              {
                uint64_t v552 = *(void *)(*(void *)(v550 + 24) + 8 * v551);
                apr_hash_set((apr_hash_t *)v543, (const void *)(v552 + 8), 8, (const void *)v552);
                ++v551;
              }
              while (v551 < *(int *)(v550 + 12));
              v445 = v659;
            }
          }
        }
      }
      ++v545;
    }
    while (v545 < v544->nelts);
  }
  v553 = apr_array_make(v445, v543[12], 64);
  v265[29] = (uint64_t)v553;
  PushSparseDownloadRequests((_OWORD *)v265[27], v553, (uint64_t)v543);
  qsort(*(void **)(v265[29] + 24), *(int *)(v265[29] + 12), *(int *)(v265[29] + 8), (int (__cdecl *)(const void *, const void *))CompareRequestByTextureLevel);
  v554 = apr_array_make(v445, v543[12], 64);
  v265[28] = (uint64_t)v554;
  PushSparseDownloadRequests((_OWORD *)v265[26], v554, (uint64_t)v543);
  qsort(*(void **)(v265[28] + 24), *(int *)(v265[28] + 12), *(int *)(v265[28] + 8), (int (__cdecl *)(const void *, const void *))CompareRequestByTextureLevel);
  unint64_t v555 = v265[34] & 0xFFFFFFFFFFFFFFFELL | (GTCaptureArchive_getFileWithFilename(*v265, "gttrace-dump") == 0);
  v265[34] = v555;
  v556 = (uint64_t *)v265[5];
  if (*(int *)(v556[9] + 12) <= 0)
  {
    uint64_t v568 = v265[15];
    uint64_t v569 = v556[4];
    uint64_t v570 = *(unsigned int *)(v569 + 12);
    if ((int)v570 >= 1)
    {
      uint64_t v571 = *(void *)(v569 + 24);
      do
      {
        v572 = *(void **)v571;
        if (*(void *)(*(void *)v571 + 168) || v572[28] || v572[35] || v572[42] || v572[49]) {
          goto LABEL_682;
        }
        v571 += 8;
      }
      while (--v570);
    }
    uint64_t v573 = v556[5];
    uint64_t v574 = *(unsigned int *)(v573 + 12);
    if ((int)v574 >= 1)
    {
      uint64_t v575 = *(void *)(v573 + 24);
      while (!*(void *)(*(void *)v575 + 168))
      {
        v575 += 8;
        if (!--v574) {
          goto LABEL_702;
        }
      }
      goto LABEL_682;
    }
LABEL_702:
    uint64_t v576 = *(int *)(v568 + 12);
    if ((int)v576 >= 1)
    {
      v577 = (int *)(*(void *)(v568 + 24) + 8);
      do
      {
        int v578 = *v577;
        v577 += 16;
        if (IsFuncEnumUseResourceCall(v578)) {
          goto LABEL_682;
        }
      }
      while (--v576);
    }
    uint64_t v579 = v556[2];
    uint64_t v580 = *(unsigned int *)(v579 + 12);
    if ((int)v580 >= 1)
    {
      v581 = *(uint64_t **)(v579 + 24);
      uint64_t v582 = v580 - 1;
      do
      {
        uint64_t v583 = *v581++;
        unsigned int v584 = *(_DWORD *)(v583 + 4) + 15690;
      }
      while (v584 >= 3 && v582-- != 0);
      if (v584 < 3) {
        goto LABEL_682;
      }
    }
    uint64_t v559 = 0;
    v265[34] = v555 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
LABEL_682:
    v265[34] = v555 | 2;
    uint64_t v557 = GTMTLSMContext_getObject(*v556, 1, v265[10])[5];
    v558 = *(const char **)(v557 + 72);
    if (!v558 || !strcmp(v558, "Apple")) {
      uint64_t v559 = 4 * (*(void *)(v557 + 32) != 0);
    }
    else {
      uint64_t v559 = 0;
    }
  }
  v265[34] = v265[34] & 0xFFFFFFFFFFFFFFFBLL | v559;
  v560 = +[NSString stringWithFormat:@"%s/overrides/database", v621];
  v561 = +[NSFileManager defaultManager];
  unsigned __int8 v562 = [v561 fileExistsAtPath:v560];

  if (v562)
  {
    id v662 = 0;
    v563 = +[NSData dataWithContentsOfFile:v560 options:0 error:&v662];
    id v564 = v662;
    if (v563)
    {
      v565 = +[GTCaptureArchiveOverrides allowedClasses];
      id v661 = v564;
      v566 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v565 fromData:v563 error:&v661];
      id v567 = v661;

      id v564 = v567;
    }
    else
    {
      v566 = 0;
    }
  }
  else
  {
    v566 = 0;
  }
  objc_storeStrong((id *)v265 + 6, v566);
  apr_pool_destroy(newpool);

  return v265;
}

uint64_t GetDeviceObjectStreamRef(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  entry = find_entry(*(void *)(a1 + 24), &v7, 8uLL, 0);
  if (*entry
    && (uint64_t v4 = *(void *)(*entry + 32)) != 0
    && (unint64_t v5 = atomic_load((unint64_t *)(*(void *)(a1 + 16) + 72)), v5 < *(void *)(v4 + 24)))
  {
    return **(void **)(v4 + 8);
  }
  else
  {
    return 0;
  }
}

_OWORD *PushSparseDownloadRequests(_OWORD *result, apr_array_header_t *a2, uint64_t a3)
{
  if (*((int *)result + 3) >= 1)
  {
    unint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      int v8 = (long long *)(*((void *)v5 + 3) + v6);
      if (*(void *)v8 == 80)
      {
        uint64_t result = find_entry(a3, (unsigned char *)v8 + 8, 8uLL, 0);
        if (*(void *)result)
        {
          if (*(void *)(*(void *)result + 32))
          {
            uint64_t result = apr_array_push(a2);
            long long v9 = v8[3];
            long long v11 = *v8;
            long long v10 = v8[1];
            result[2] = v8[2];
            result[3] = v9;
            *uint64_t result = v11;
            result[1] = v10;
          }
        }
      }
      ++v7;
      v6 += 64;
    }
    while (v7 < *((int *)v5 + 3));
  }
  return result;
}

uint64_t CompareRequestByTextureLevel(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 34);
    unsigned int v5 = *(unsigned __int16 *)(a2 + 34);
    BOOL v6 = v4 >= v5;
    BOOL v7 = v4 != v5;
    if (v6) {
      return v7;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else if (v2 < v3)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

id GTMTLReplayController_dumpLibrary(uint64_t a1, char *a2, char *a3)
{
  if (!a3) {
    a3 = a2;
  }
  unsigned int v5 = +[NSString stringWithUTF8String:a3];
  if ([v5 hasPrefix:@"/"])
  {
    uint64_t v6 = [v5 substringFromIndex:1];

    unsigned int v5 = (void *)v6;
  }
  BOOL v7 = [*(id *)(a1 + 22568) URLByAppendingPathComponent:v5];
  int v8 = +[NSFileManager defaultManager];
  long long v9 = [v7 path];
  unsigned int v10 = [v8 fileExistsAtPath:v9];

  if (v10)
  {
    id v11 = v7;
    goto LABEL_22;
  }
  uint64_t v12 = **(void ***)a1;
  size_t FileWithFilename = GTCaptureArchive_getFileWithFilename((uint64_t)v12, a2);
  if (!FileWithFilename)
  {
    MakeNSError(101, &__NSDictionary0__struct);
    id v25 = (id)objc_claimAutoreleasedReturnValue();
    GTMTLReplay_handleNSError(v25);

    goto LABEL_21;
  }
  ssize_t v14 = (unsigned int *)FileWithFilename;
  if ((*(unsigned char *)(FileWithFilename + 16) & 2) != 0)
  {
    vm_address_t v26 = +[NSString stringWithUTF8String:*v12];
    int v27 = +[NSString stringWithUTF8String:a2];
    id v20 = [v26 stringByAppendingPathComponent:v27];

    uint64_t v28 = +[NSFileManager defaultManager];
    uint64_t v29 = [v7 URLByDeletingLastPathComponent];
    id v41 = 0;
    unsigned __int8 v30 = [v28 createDirectoryAtURL:v29 withIntermediateDirectories:1 attributes:0 error:&v41];
    id v18 = v41;

    if (v30)
    {
      uint64_t v31 = +[NSFileManager defaultManager];
      uint64_t v32 = [v7 path];
      id v40 = v18;
      unsigned __int8 v33 = [v31 copyItemAtPath:v20 toPath:v32 error:&v40];
      id v22 = v40;

      if (v33) {
        goto LABEL_15;
      }
      NSErrorUserInfoKey v46 = NSUnderlyingErrorKey;
      id v47 = v22;
      int8x8_t v35 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
      id v18 = v22;
    }
    else
    {
      NSErrorUserInfoKey v48 = NSUnderlyingErrorKey;
      id v49 = v18;
      int8x8_t v35 = +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
    }
    MakeNSError(101, v35);
    id v36 = (id)objc_claimAutoreleasedReturnValue();
    GTMTLReplay_handleNSError(v36);

LABEL_20:
    goto LABEL_21;
  }
  ssize_t v15 = +[NSFileManager defaultManager];
  size_t v16 = [v7 URLByDeletingLastPathComponent];
  id v39 = 0;
  unsigned __int8 v17 = [v15 createDirectoryAtURL:v16 withIntermediateDirectories:1 attributes:0 error:&v39];
  id v18 = v39;

  if ((v17 & 1) == 0)
  {
    NSErrorUserInfoKey v44 = NSUnderlyingErrorKey;
    id v45 = v18;
    id v20 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
    MakeNSError(101, v20);
    id v34 = (id)objc_claimAutoreleasedReturnValue();
    GTMTLReplay_handleNSError(v34);

    goto LABEL_20;
  }
  uint64_t v19 = *(void *)(a1 + 152);
  id v20 = [objc_alloc((Class)NSMutableData) initWithLength:*v14];
  GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)v12, v19, (uint64_t)v14, [v20 mutableBytes], *v14, 0);
  id v38 = v18;
  unsigned __int8 v21 = [v20 writeToURL:v7 options:1 error:&v38];
  id v22 = v38;

  if (v21)
  {
LABEL_15:

    id v11 = v7;
    goto LABEL_22;
  }
  NSErrorUserInfoKey v42 = NSUnderlyingErrorKey;
  id v43 = v22;
  size_t v23 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
  MakeNSError(101, v23);
  id v24 = (id)objc_claimAutoreleasedReturnValue();
  GTMTLReplay_handleNSError(v24);

LABEL_21:
  id v11 = 0;
LABEL_22:

  return v11;
}

id GTMTLReplayController_dumpPipelineLibrary(uint64_t a1, char *a2, char *a3)
{
  if (!a3) {
    a3 = a2;
  }
  unsigned int v5 = &send_ptr;
  uint64_t v6 = +[NSString stringWithUTF8String:a3];
  if ([v6 hasPrefix:@"/"])
  {
    uint64_t v7 = [v6 substringFromIndex:1];

    uint64_t v6 = (void *)v7;
  }
  int v8 = [*(id *)(a1 + 22568) URLByAppendingPathComponent:v6];
  long long v9 = +[NSFileManager defaultManager];
  char v59 = 0;
  unsigned int v10 = [v8 path];
  unsigned int v11 = [v9 fileExistsAtPath:v10 isDirectory:&v59];

  if (v11)
  {
    if (v59)
    {
      id v13 = v8;
    }
    else
    {
      MakeNSError(101, &__NSDictionary0__struct);
      id v23 = (id)objc_claimAutoreleasedReturnValue();
      GTMTLReplay_handleNSError(v23);

      id v13 = 0;
    }
    goto LABEL_16;
  }
  uint64_t v14 = **(void **)a1;
  uint64_t v15 = *(void *)(a1 + 152);
  id v58 = 0;
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v12);
  size_t v16 = newpool;
  unsigned __int8 v17 = GTCaptureArchive_mapData(v14, v15, a2, newpool);
  if (v17)
  {
    uint64_t v19 = +[NSData dataWithBytesNoCopy:v17 length:v18 freeWhenDone:0];
    uint64_t v20 = objc_opt_class();
    uint64_t v45 = objc_opt_class();
    unsigned __int8 v21 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v20, v45, objc_opt_class(), 0);
    id v22 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v21 fromData:v19 error:&v58];

    apr_pool_destroy(v16);
  }
  else
  {
    apr_pool_destroy(v16);
    NSErrorUserInfoKey v69 = NSLocalizedDescriptionKey;
    CFStringRef v70 = @"File not found in archive";
    uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v70 forKeys:&v69 count:1];
    MakeNSError(101, v19);
    id v58 = (id)objc_claimAutoreleasedReturnValue();
    GTMTLReplay_handleNSError(v58);
    id v22 = 0;
  }

  id v24 = v58;
  if (v24 || ![v22 count])
  {
    v67[0] = NSLocalizedDescriptionKey;
    v67[1] = NSUnderlyingErrorKey;
    v68[0] = @"Failed to decode pipeline library data";
    v68[1] = v24;
    id v25 = (id *)v68;
    vm_address_t v26 = (NSErrorUserInfoKey *)v67;
    uint64_t v27 = 2;
LABEL_14:
    uint64_t v28 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v26 count:v27];
    MakeNSError(101, v28);
    id v29 = (id)objc_claimAutoreleasedReturnValue();
    GTMTLReplay_handleNSError(v29);

    id v13 = 0;
    goto LABEL_15;
  }
  id v57 = 0;
  [v9 createDirectoryAtURL:v8 withIntermediateDirectories:1 attributes:0 error:&v57];
  id v31 = v57;
  if (v31)
  {
    id v24 = v31;
    NSErrorUserInfoKey v65 = NSUnderlyingErrorKey;
    id v66 = v31;
    id v25 = &v66;
    vm_address_t v26 = &v65;
    uint64_t v27 = 1;
    goto LABEL_14;
  }
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  obuint64_t j = v22;
  id v47 = [obj countByEnumeratingWithState:&v53 objects:v64 count:16];
  if (!v47) {
    goto LABEL_32;
  }
  uint64_t v48 = *(void *)v54;
  NSErrorUserInfoKey v46 = v22;
  while (2)
  {
    for (uint64_t i = 0; i != v47; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v54 != v48) {
        objc_enumerationMutation(obj);
      }
      uint64_t v33 = *(void *)(*((void *)&v53 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v52 = 0;
        GTMTLReplay_fillError(&v52, 101, &__NSDictionary0__struct);
        id v34 = v52;
        GTMTLReplay_handleNSError(v34);
LABEL_36:

        id v13 = 0;
        id v22 = v46;
        goto LABEL_15;
      }
      id v34 = [obj objectForKeyedSubscript:v33];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v51 = 0;
        GTMTLReplay_fillError(&v51, 101, &__NSDictionary0__struct);
        id v42 = v51;
        GTMTLReplay_handleNSError(v42);

        goto LABEL_36;
      }
      int8x8_t v35 = v5;
      id v36 = v9;
      unint64_t v37 = v5[219];
      id v38 = [v8 path];
      v63[0] = v38;
      v63[1] = v33;
      id v39 = +[NSArray arrayWithObjects:v63 count:2];
      id v40 = v37;
      long long v9 = v36;
      id v41 = [v40 pathWithComponents:v39];

      if (([v36 createFileAtPath:v41 contents:v34 attributes:0] & 1) == 0)
      {
        NSErrorUserInfoKey v61 = NSLocalizedDescriptionKey;
        CFStringRef v62 = @"Failed to create temporary pipeline library file";
        id v43 = +[NSDictionary dictionaryWithObjects:&v62 forKeys:&v61 count:1];
        id v50 = 0;
        GTMTLReplay_fillError(&v50, 101, v43);
        id v44 = v50;
        GTMTLReplay_handleNSError(v44);

        goto LABEL_36;
      }

      unsigned int v5 = v35;
    }
    id v22 = v46;
    id v47 = [obj countByEnumeratingWithState:&v53 objects:v64 count:16];
    if (v47) {
      continue;
    }
    break;
  }
LABEL_32:

  id v13 = v8;
LABEL_15:

LABEL_16:

  return v13;
}

uint64_t GTMTLReplayController_makeController(uint64_t a1, apr_pool_t *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a3;
  obuint64_t j = a4;
  id v207 = a5;
  id v209 = a4;
  id v203 = a5;
  id context = a6;
  id v204 = a6;
  newpool = 0;
  pool = a2;
  apr_pool_create_ex(&newpool, a2, 0, v12);
  uint64_t v13 = 80;
  if ((dword_77313C & 0x400) == 0) {
    uint64_t v13 = 64;
  }
  unint64_t v14 = *(void *)(a1 + v13);
  uint64_t v15 = (apr_pool_t **)apr_hash_make(newpool);
  GTMTLSMContext_buildResourceChildrenMap(*(uint64_t **)(a1 + 40), v14, (uint64_t)v15, v16);
  ht = (apr_hash_t *)v15;
  uint64_t v217 = a1;
  uint64_t v17 = *(void *)(a1 + 40);
  p[0] = 0;
  uint64_t v18 = *v15;
  apr_pool_create_ex(p, *v15, 0, v19);
  uint64_t v20 = apr_array_make(p[0], *(_DWORD *)(*(void *)(v17 + 224) + 12), 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(v17 + 224), v14, v20);
  if (v20->nelts >= 1)
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = *(void *)&v20->elts[8 * v21];
      uint64_t v23 = *find_entry((uint64_t)ht, (unsigned char *)(v22 + 40), 8uLL, 0);
      if (!v23 || (id v24 = *(apr_array_header_t **)(v23 + 32)) == 0)
      {
        id v24 = apr_array_make(v18, 1, 8);
        apr_hash_set(ht, (const void *)(v22 + 40), 8, v24);
      }
      *(void *)apr_array_push(v24) = v22;
      ++v21;
    }
    while (v21 < v20->nelts);
  }
  unint64_t v211 = v14;
  uint64_t v25 = GT_ENV;
  id v26 = v11;
  uint64_t v27 = (void *)insertBinaryArchives;
  insertBinaryArchives = 0;

  if (v25)
  {
    uint64_t v28 = +[NSString stringWithUTF8String:v25];
    id v29 = [v28 componentsSeparatedByString:@":"];
    id v30 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v29 count]];
    id v31 = objc_alloc_init((Class)MTLBinaryArchiveDescriptor);
    *(_OWORD *)id v223 = 0u;
    long long v224 = 0u;
    long long v225 = 0u;
    long long v226 = 0u;
    id v32 = v29;
    uint64_t v33 = (char *)[v32 countByEnumeratingWithState:v223 objects:p count:16];
    if (v33)
    {
      uint64_t v34 = *(void *)v224;
      do
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (*(void *)v224 != v34) {
            objc_enumerationMutation(v32);
          }
          id v36 = [objc_alloc((Class)NSURL) initFileURLWithPath:*((void *)v223[1] + i) isDirectory:0];
          [v31 setUrl:v36];

          uint64_t v222 = 0;
          id v37 = [v26 newBinaryArchiveWithDescriptor:v31 error:&v222];
          [v30 addObject:v37];
        }
        uint64_t v33 = (char *)[v32 countByEnumeratingWithState:v223 objects:p count:16];
      }
      while (v33);
    }

    id v38 = [v30 copy];
    id v39 = (void *)insertBinaryArchives;
    insertBinaryArchives = (uint64_t)v38;
  }
  uint64_t v40 = *(void *)(*(void *)(v217 + 40) + 184);
  uint64_t v41 = *(unsigned int *)(v40 + 12);
  if ((int)v41 < 1)
  {
    uint64_t v43 = 64;
  }
  else
  {
    id v42 = *(uint64_t **)(v40 + 24);
    uint64_t v43 = 64;
    do
    {
      uint64_t v44 = *v42++;
      v43 += *(unsigned int *)(v44 + 64);
      --v41;
    }
    while (v41);
  }
  if ((dword_77313C & 0x10000000) != 0)
  {
    id v45 = (id)objc_opt_new();
    [v45 setMaxCommandBufferCount:v43];
    [v45 setLockParameterBufferSizeToMax:1];
    id v46 = v26;
    id v47 = [v46 newCommandQueueWithDescriptor:v45];
    [v209 setDefaultCommandQueue:v47];
  }
  else
  {
    id v45 = [v26 newCommandQueueWithMaxCommandBufferCount:v43];
    [v209 setDefaultCommandQueue:v45];
  }

  if (byte_77313B >= 7u) {
    uint64_t v48 = 7;
  }
  else {
    uint64_t v48 = byte_77313B;
  }
  id v49 = apr_palloc(pool, (24 * v48) + 22584);
  uint64_t v50 = (uint64_t)v49;
  if (v49) {
    bzero(v49, (24 * v48) + 22584);
  }
  id v51 = pool;
  id v52 = (void *)*((void *)pool + 5);
  if (v52)
  {
    *((void *)pool + 5) = *v52;
  }
  else
  {
    id v52 = apr_palloc(pool, 0x20uLL);
    id v51 = pool;
  }
  v52[1] = v50;
  v52[2] = GTMTLReplayController_cleanup;
  v52[3] = apr_pool_cleanup_null;
  void *v52 = *((void *)v51 + 4);
  *((void *)v51 + 4) = v52;
  *(void *)uint64_t v50 = v217;
  uint64_t v201 = v50 + 8;
  objc_storeStrong((id *)(v50 + 8), obj);
  long long v53 = [[GTMTLReplaySharedResourcePool alloc] initWithDevice:v26 bufferCapacity:0x2000000];
  long long v54 = *(void **)(v50 + 16);
  *(void *)(v50 + 16) = v53;

  [*(id *)(v50 + 16) setMaxPooledBuffers:(v48 + 2)];
  long long v55 = [GTMTLReplaySharedBlitBuffer alloc];
  long long v56 = [v209 defaultCommandQueue];
  id v57 = [(GTMTLReplaySharedBlitBuffer *)v55 initWithCommandQueue:v56 resourcePool:*(void *)(v50 + 16)];
  id v58 = *(void **)(v50 + 24);
  *(void *)(v50 + 24) = v57;

  *(void *)(v50 + 152) = GTCaptureArchiveDecompressor_create(pool);
  objc_storeStrong((id *)(v50 + 136), v207);
  objc_storeStrong((id *)(v50 + 128), context);
  char v59 = [v209 defaultDevice];
  LODWORD(v55) = [v59 supportsRaytracing];

  if (v55)
  {
    unint64_t v60 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(), v201, v203, v204);
    NSErrorUserInfoKey v61 = [v209 defaultDevice];
    id v220 = 0;
    id v62 = [v61 newDefaultLibraryWithBundle:v60 error:&v220];
    id v63 = v220;

    id v64 = [v62 newFunctionWithName:@"RestoreMTLIntersectionFunctionTable"];
    if (v64)
    {
      NSErrorUserInfoKey v65 = [v209 defaultDevice];
      id v219 = v63;
      id v66 = [v65 newComputePipelineStateWithFunction:v64 error:&v219];
      id v67 = v219;

      if (v66) {
        objc_storeStrong((id *)(v50 + 120), v66);
      }
      else {
        GTMTLReplay_handleUnderlyingNSError(@"Failed to create IFT restore pipeline", v67);
      }
    }
    else
    {
      id v67 = v63;
    }
  }
  unint64_t v68 = +[NSProcessInfo processInfo];
  id obja = [v68 globallyUniqueString];

  NSErrorUserInfoKey v69 = NSTemporaryDirectory();
  id v208 = [v69 stringByAppendingPathComponent:obja];

  uint64_t v70 = +[NSURL fileURLWithPath:v208 isDirectory:1];
  uint64_t v71 = *(void **)(v50 + 22560);
  *(void *)(v50 + 22560) = v70;

  uint64_t v72 = +[NSFileManager defaultManager];
  uint64_t v73 = *(void *)(v50 + 22560);
  id v218 = 0;
  LODWORD(v69) = [v72 createDirectoryAtURL:v73 withIntermediateDirectories:1 attributes:0 error:&v218];
  id v74 = v218;

  if (v69)
  {
    uint64_t v75 = [*(id *)(v50 + 22560) URLByAppendingPathComponent:@"lib_root" isDirectory:1];
    BOOL v76 = *(void **)(v50 + 22568);
    *(void *)(v50 + 22568) = v75;

    int v77 = *(void **)v50;
    uint64_t v78 = *(void *)(*(void *)v50 + 40);
    uint64_t v79 = *(void *)(v78 + 40);
    int v80 = *(_DWORD *)(v79 + 12);
    if (v80 >= 1)
    {
      for (uint64_t j = 0; j < v80; ++j)
      {
        uint64_t v82 = *(void *)(*(void *)(v79 + 24) + 8 * j);
        if ((dword_77313C & 0x400) == 0)
        {
          unint64_t v83 = *(void *)(v82 + 16);
          unint64_t v84 = v77[8];
          if (v84 <= v83 && v77[9] + v84 > v83) {
            continue;
          }
        }
        uint64_t v86 = *(void *)(v82 + 64);
        if (*(_WORD *)(v86 + 96))
        {
          unint64_t v87 = 0;
          do
          {
            id v88 = GTMTLReplayController_dumpLibrary(v50, *(char **)(*(void *)(v86 + 40) + 8 * v87), *(char **)(*(void *)(v86 + 48) + 8 * v87));
            ++v87;
          }
          while (v87 < *(unsigned __int16 *)(v86 + 96));
          int v80 = *(_DWORD *)(v79 + 12);
        }
      }
      uint64_t v78 = v77[5];
    }
    uint64_t v89 = *(void *)(v78 + 32);
    int v90 = *(_DWORD *)(v89 + 12);
    if (v90 >= 1)
    {
      for (uint64_t k = 0; k < v90; ++k)
      {
        uint64_t v92 = *(void *)(*(void *)(v89 + 24) + 8 * k);
        if ((dword_77313C & 0x400) == 0)
        {
          unint64_t v93 = *(void *)(v92 + 16);
          unint64_t v94 = v77[8];
          if (v94 <= v93 && v77[9] + v94 > v93) {
            continue;
          }
        }
        uint64_t v96 = *(void *)(v92 + 56);
        if (*(_WORD *)(v96 + 214))
        {
          unint64_t v97 = 0;
          do
          {
            id v98 = GTMTLReplayController_dumpLibrary(v50, *(char **)(*(void *)(v96 + 96) + 8 * v97), *(char **)(*(void *)(v96 + 104) + 8 * v97));
            ++v97;
          }
          while (v97 < *(unsigned __int16 *)(v96 + 214));
          int v90 = *(_DWORD *)(v89 + 12);
        }
      }
    }
  }
  else
  {
    GTMTLReplay_handleUnderlyingNSError(@"Failed to create replay controller temporary directory", v74);
  }

  *(void *)(v50 + 22504) = apr_array_make(pool, 128, 16);
  dispatch_semaphore_t v99 = dispatch_semaphore_create(0);
  uint64_t v100 = *(void **)(v50 + 22520);
  *(void *)(v50 + 22520) = v99;

  dispatch_group_t v101 = dispatch_group_create();
  uint64_t v102 = *(void **)(v50 + 22528);
  *(void *)(v50 + 22528) = v101;

  objb = (atomic_uint *)(v50 + 22512);
  *(_DWORD *)(v50 + 22576) = v48;
  if (v48)
  {
    uint64_t v103 = v50 + 22584;
    do
    {
      *(void *)(v103 + 8) = v50;
      pthread_create((pthread_t *)v103, 0, (void *(__cdecl *)(void *))StartLoadingThread, (void *)v103);
      v103 += 24;
      --v48;
    }
    while (v48);
  }
  uint64_t v104 = (void *)g_activityLog;
  long long v105 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", **(void **)v217, v201);
  [v104 enterLoadArchiveWithPath:v105];

  long long v106 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v106))
  {
    LOWORD(p[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v106, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "CreateDeviceResources", (uint8_t *)p, 2u);
  }

  int v107 = *(_DWORD ***)(v217 + 40);
  uint64_t v108 = *(void *)v50;
  v223[0] = 0;
  apr_pool_create_ex(v223, 0, 0, v109);
  CFStringRef v110 = v223[0];
  uint64_t v111 = apr_array_make(v223[0], 128, 8);
  size_t v112 = apr_array_make(v110, 128, 8);
  GTMTLSMContext_getObjects(v107[10], v211, v112);
  if (v112->nelts >= 1)
  {
    uint64_t v113 = 0;
    do
      ExpandChildren(v111, *(void *)&v112->elts[8 * v113++], (uint64_t)ht);
    while (v113 < v112->nelts);
  }
  v112->int nelts = 0;
  GTMTLSMContext_getObjects(v107[2], v211, v112);
  int nelts = v112->nelts;
  if (nelts >= 1)
  {
    for (uint64_t m = 0; m < nelts; ++m)
    {
      long long v116 = *(void **)&v112->elts[8 * m];
      if (!v116[6] && !v116[17] && !v116[18])
      {
        ExpandChildren(v111, (uint64_t)v116, (uint64_t)ht);
        int nelts = v112->nelts;
      }
    }
  }
  v112->int nelts = 0;
  GTMTLSMContext_getObjects(v107[1], v211, v112);
  int v117 = v112->nelts;
  if (v117 >= 1)
  {
    for (uint64_t n = 0; n < v117; ++n)
    {
      uint64_t v119 = *(void *)&v112->elts[8 * n];
      if (!*(void *)(v119 + 48))
      {
        ExpandChildren(v111, v119, (uint64_t)ht);
        int v117 = v112->nelts;
      }
    }
  }
  GTMTLSMContext_getObjects(v107[9], v211, v111);
  hta = *(apr_hash_t **)(v108 + 8);
  uint64_t v120 = *(void *)(*(void *)v50 + 8);
  p[0] = 0;
  uint64_t v121 = *(void *)(*(void *)(*find_entry(v120, p, 8uLL, 0) + 32) + 32);
  if (v121)
  {
    unsigned int v122 = 0;
    while (1)
    {
      unsigned int v123 = atomic_load((unsigned int *)(v121 + 4));
      uint64_t v124 = v122 + (v123 >> 6) - 1;
      if ((int)v124 > 0) {
        break;
      }
      uint64_t v121 = *(void *)(v121 + 40);
      unsigned int v122 = v124;
      if (!v121)
      {
        unsigned int v122 = v124;
        goto LABEL_97;
      }
    }
  }
  else
  {
    unsigned int v122 = 0;
  }
  uint64_t v124 = 0;
LABEL_97:
  unint64_t v125 = v122 | (unint64_t)(v124 << 32);
LABEL_98:
  uint64_t v126 = v121 + 64;
  while (v121)
  {
    int v127 = HIDWORD(v125) - v125;
    if ((*(unsigned char *)(v126 + ((uint64_t)(HIDWORD(v125) - (int)v125) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v128 = v127;
    long long v129 = (unint64_t *)(v126 + ((uint64_t)v127 << 6));
    if (*v129 >= v211) {
      break;
    }
    if (*(_DWORD *)(v126 + (v128 << 6) + 8) == -7155) {
      GTMTLReplayController_defaultDispatchFunction(v50, (uint64_t)v129);
    }
    unsigned int v131 = atomic_load((unsigned int *)(v121 + 4));
    int v132 = v125 + (v131 >> 6);
    uint64_t v133 = (HIDWORD(v125) + 1);
    unint64_t v125 = (v133 << 32) | v125;
    if (v133 == v132 - 1)
    {
      unint64_t v125 = (v133 << 32) | v133;
      uint64_t v121 = *(void *)(v121 + 40);
      goto LABEL_98;
    }
  }
  for (iuint64_t i = (apr_pool_t *)(&def_1C1270 + 1); ; iuint64_t i = (apr_pool_t *)((char *)ii + 1))
  {
    p[0] = ii;
    uint64_t v135 = *find_entry((uint64_t)hta, p, 8uLL, 0);
    if (!v135) {
      break;
    }
    uint64_t v136 = *(void *)(v135 + 32);
    if (!v136) {
      break;
    }
    uint64_t v137 = *(void *)(v136 + 32);
    if (!v137 || (*(unsigned char *)(v137 + 79) & 8) == 0) {
      break;
    }
    int v138 = *(_DWORD *)(v137 + 72);
    if (v138 != -7163 && v138 != -10239) {
      break;
    }
    CreateResourceFromStream((id *)v50, v136, v211);
  }
  LODWORD(v140) = v111->nelts;
  if ((int)v140 >= 1)
  {
    uint64_t v141 = 0;
    do
    {
      int8x16_t v142 = *(apr_pool_t **)&v111->elts[8 * v141];
      if (v142) {
        int8x16_t v142 = (apr_pool_t *)*((void *)v142 + 1);
      }
      p[0] = v142;
      uint64_t v143 = *find_entry((uint64_t)hta, p, 8uLL, 0);
      if (v143) {
        uint64_t v144 = *(void *)(v143 + 32);
      }
      else {
        uint64_t v144 = 0;
      }
      CreateResourceFromStream((id *)v50, v144, v211);
      ++v141;
      uint64_t v140 = v111->nelts;
    }
    while (v141 < v140);
  }
  apr_pool_destroy(v223[0]);
  uint64_t v145 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v145))
  {
    LODWORD(p[0]) = 67109120;
    HIDWORD(p[0]) = v140;
    _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v145, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "%d", (uint8_t *)p, 8u);
  }

  if ((GT_SUPPORT_0 & 0x800) != 0
    && (*(_DWORD *)(*(void *)(v217 + 232) + 12) || *(_DWORD *)(*(void *)(v217 + 224) + 12)))
  {
    dispatch_data_t v147 = [v209 defaultCommandQueue];
    unsigned int v148 = InternalCommandBuffer(v147, @"MapSparseTextureRegions");

    long long v149 = [v148 resourceStateCommandEncoder];
    id v150 = **(apr_pool_t ***)(v50 + 152);
    MapSparseTextureRegions(v149, *(void **)(v50 + 8), *(void *)(v217 + 232), v150);
    MapSparseTextureRegions(v149, *v202, *(void *)(v217 + 224), v150);
    apr_pool_clear(v150);
    [v149 endEncoding];
    GTMTLReplay_commitCommandBuffer(v148);
  }
  FillRequestsAlignment(*(void *)(v217 + 216), *(uint64_t **)(v217 + 40), v26);
  GroupRequestsByCapacity(*(apr_array_header_t **)(v217 + 216), v151, v152, v153);
  uint64_t v154 = *(void *)(v217 + 136);
  id v155 = (apr_hash_index_t *)(v154 + 16);
  *(void *)(v154 + 24) = 0;
  *(void *)(v154 + 32) = 0;
  *(void *)(v154 + 16) = v154;
  *(_DWORD *)(v154 + 40) = 0;
  while (1)
  {
    size_t v156 = apr_hash_next(v155);
    if (!v156) {
      break;
    }
    id v155 = v156;
    long long v157 = *(apr_array_header_t **)(*((void *)v156 + 1) + 32);
    FillRequestsAlignment((uint64_t)v157, *(uint64_t **)(v217 + 40), v26);
    GroupRequestsByCapacity(v157, v158, v159, v160);
  }
  AppendRestoreJobsToLoadQueue(v50, *(void *)(v217 + 216));
  AppendRestoreJobsToLoadQueue(v50, *(void *)(v217 + 208));
  SignalLoadQueueThreads(v50, *(_DWORD *)(*(void *)(v50 + 22504) + 12));
  os_signpost_id_t v161 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, (const void *)v50);
  uint64_t v162 = apr_array_make(newpool, 128, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 96), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 88), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 224), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 104), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 32), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 40), v211, v162);
  qsort(v162->elts, v162->nelts, 8uLL, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  uint64_t v163 = g_signpostLog;
  long long v164 = v163;
  unint64_t v165 = v161 - 1;
  if (v161 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v163))
  {
    int v166 = v162->nelts;
    LODWORD(p[0]) = 67109120;
    HIDWORD(p[0]) = v166;
    _os_signpost_emit_with_name_impl(&def_1C1270, v164, OS_SIGNPOST_INTERVAL_BEGIN, v161, "Replayer-1-serial", "CreatePipelineStates %d", (uint8_t *)p, 8u);
  }

  if (v162->nelts >= 1)
  {
    uint64_t v167 = 0;
    do
    {
      uint64_t v168 = *(apr_pool_t **)&v162->elts[8 * v167];
      if (v168) {
        uint64_t v168 = (apr_pool_t *)*((void *)v168 + 1);
      }
      uint64_t v169 = *(void *)(v217 + 8);
      p[0] = v168;
      uint64_t v170 = *find_entry(v169, p, 8uLL, 0);
      if (v170) {
        uint64_t v171 = *(void *)(v170 + 32);
      }
      else {
        uint64_t v171 = 0;
      }
      CreateResourceFromStream((id *)v50, v171, v211);
      ++v167;
    }
    while (v167 < v162->nelts);
  }
  long long v172 = g_signpostLog;
  long long v173 = v172;
  if (v165 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v172))
  {
    LOWORD(p[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v173, OS_SIGNPOST_INTERVAL_END, v161, "Replayer-1-serial", (const char *)&unk_4CA5E5, (uint8_t *)p, 2u);
  }

  v162->int nelts = 0;
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 152), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 120), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 112), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 216), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 48), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 200), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 24), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 136), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 128), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 256), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 56), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 64), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 264), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 272), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 280), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 184), v211, v162);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v217 + 40) + 192), v211, v162);
  uint64_t v174 = g_signpostLog;
  long long v175 = v174;
  if (v165 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v174))
  {
    int v176 = v162->nelts;
    LODWORD(p[0]) = 67109120;
    HIDWORD(p[0]) = v176;
    _os_signpost_emit_with_name_impl(&def_1C1270, v175, OS_SIGNPOST_INTERVAL_BEGIN, v161, "Replayer-1-serial", "CreateOtherStates %d", (uint8_t *)p, 8u);
  }

  if (v162->nelts >= 1)
  {
    uint64_t v177 = 0;
    do
    {
      NSErrorUserInfoKey v178 = *(apr_pool_t **)&v162->elts[8 * v177];
      if (v178) {
        NSErrorUserInfoKey v178 = (apr_pool_t *)*((void *)v178 + 1);
      }
      uint64_t v179 = *(void *)(v217 + 8);
      p[0] = v178;
      uint64_t v180 = *find_entry(v179, p, 8uLL, 0);
      if (v180) {
        uint64_t v181 = *(void *)(v180 + 32);
      }
      else {
        uint64_t v181 = 0;
      }
      CreateResourceFromStream((id *)v50, v181, v211);
      ++v177;
    }
    while (v177 < v162->nelts);
  }
  BOOL v182 = g_signpostLog;
  NSErrorUserInfoKey v183 = v182;
  if (v165 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v182))
  {
    LOWORD(p[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v183, OS_SIGNPOST_INTERVAL_END, v161, "Replayer-1-serial", (const char *)&unk_4CA5E5, (uint8_t *)p, 2u);
  }

  id v184 = [GTMTLReplayActivityLog alloc];
  unsigned int v185 = [(GTMTLReplayActivityLog *)v184 initWithLog:g_activityLog];
  RestoreOrderedResourcesFromArchive((id *)v50, *(void *)(*(void *)(v217 + 240) + 24), *(unsigned int *)(*(void *)(v217 + 240) + 12), v185);
  RestoreVisibleFunctionTablesForFunctionIndex((id *)v50, v211 - 1);
  RestoreIntersectionFunctionTablesForFunctionIndex((uint64_t *)v50, v211 - 1);
  signed int add = atomic_fetch_add(objb, 1u);
  uint64_t v187 = *(void *)(v50 + 22504);
  if (add >= *(_DWORD *)(v187 + 12)) {
    uint64_t v188 = 0;
  }
  else {
    uint64_t v188 = *(void *)(v187 + 24) + 16 * add;
  }
  while (v188)
  {
    DoLoadJob((void **)v50, v188, v185, 0);
    signed int v190 = atomic_fetch_add(objb, 1u);
    uint64_t v191 = *(void *)(v50 + 22504);
    if (v190 >= *(_DWORD *)(v191 + 12)) {
      uint64_t v188 = 0;
    }
    else {
      uint64_t v188 = *(void *)(v191 + 24) + 16 * v190;
    }
  }

  dispatch_group_wait(*(dispatch_group_t *)(v50 + 22528), 0xFFFFFFFFFFFFFFFFLL);
  *(_DWORD *)(*(void *)(v50 + 22504) + 12) = 0;
  apr_pool_destroy(newpool);
  id v192 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:8];
  uint64_t v193 = *(void **)(v50 + 40);
  *(void *)(v50 + 40) = v192;

  dispatch_semaphore_t v194 = dispatch_semaphore_create(1);
  unint64_t v195 = *(void **)(v50 + 48);
  *(void *)(v50 + 48) = v194;

  uint64_t v196 = +[NSMapTable strongToStrongObjectsMapTable];
  long long v197 = *(void **)(v50 + 56);
  *(void *)(v50 + 56) = v196;

  id v198 = objc_alloc_init((Class)NSMutableDictionary);
  unsigned int v199 = *(void **)(v50 + 144);
  *(void *)(v50 + 144) = v198;

  *(void *)(v50 + 22496) = apr_hash_make(pool);
  *(void *)(v50 + 22544) = apr_hash_make(pool);
  *(void *)(v50 + 22552) = *(void *)(v217 + 136);
  [(id)g_activityLog leaveActivity];

  return v50;
}

void sub_2A728C(_Unwind_Exception *a1)
{
}

void *ExpandChildren(apr_array_header_t *a1, uint64_t a2, uint64_t a3)
{
  *(void *)apr_array_push(a1) = a2;
  uint64_t result = find_entry(a3, (unsigned char *)(a2 + 8), 8uLL, 0);
  if (*result)
  {
    uint64_t v7 = *(void *)(*result + 32);
    if (v7)
    {
      if (*(int *)(v7 + 12) >= 1)
      {
        uint64_t v8 = 0;
        do
          uint64_t result = (void *)ExpandChildren(a1, *(void *)(*(void *)(v7 + 24) + 8 * v8++), a3);
        while (v8 < *(int *)(v7 + 12));
      }
    }
  }
  return result;
}

void CreateResourceFromStream(id *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v25 = *((void *)*a1 + 2);
  id v27 = a1[1];
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    unsigned int v6 = 0;
    while (1)
    {
      unsigned int v7 = atomic_load((unsigned int *)(v5 + 4));
      uint64_t v8 = v6 + (v7 >> 6) - 1;
      if ((int)v8 > 0) {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 40);
      unsigned int v6 = v8;
      if (!v5)
      {
        unsigned int v6 = v8;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v8 = 0;
LABEL_8:
  unint64_t v9 = v6 | (unint64_t)(v8 << 32);
LABEL_9:
  uint64_t v10 = v5 + 64;
  while (v5)
  {
    int v11 = HIDWORD(v9) - v9;
    if ((*(unsigned char *)(v10 + ((uint64_t)(HIDWORD(v9) - (int)v9) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v12 = v11;
    uint64_t v13 = v10 + ((uint64_t)v11 << 6);
    if (*(void *)v13 >= a3) {
      break;
    }
    int v15 = *(_DWORD *)(v13 + 8);
    uint64_t v16 = (v15 + 10238);
    if (v16 <= 0x30)
    {
      if (((1 << (v15 - 2)) & 0x1100000000005) != 0) {
        goto LABEL_26;
      }
      if (v16 == 1) {
        goto LABEL_18;
      }
    }
    if (v15 != -16236)
    {
      if (v15 == -16313)
      {
LABEL_18:
        if ((GT_SUPPORT_0 & 0x80000) == 0)
        {
          uint64_t v17 = GTTraceFunc_argumentBytesWithMap((void *)v13, *(unsigned __int8 *)(v10 + (v12 << 6) + 13), v25);
          uint64_t v18 = [v27 deviceForKey:*(void *)v17];
          uint64_t v19 = v18;
          if ((dword_77313C & 4) != 0) {
            unint64_t v20 = 32;
          }
          else {
            unint64_t v20 = *((void *)v17 + 3) & 0xFFFFFFFFFFEFFFFFLL;
          }
          id v21 = [v18 newBufferWithLength:*((void *)v17 + 2) options:v20];
          if (v21) {
            [v27 setBuffer:v21 forKey:*((void *)v17 + 1)];
          }
        }
        goto LABEL_26;
      }
      GTMTLReplayController_defaultDispatchFunction((uint64_t)a1, v13);
    }
LABEL_26:
    unsigned int v22 = atomic_load((unsigned int *)(v5 + 4));
    int v23 = v9 + (v22 >> 6);
    uint64_t v24 = (HIDWORD(v9) + 1);
    unint64_t v9 = (v24 << 32) | v9;
    if (v24 == v23 - 1)
    {
      unint64_t v9 = (v24 << 32) | v24;
      uint64_t v5 = *(void *)(v5 + 40);
      goto LABEL_9;
    }
  }
}

void MapSparseTextureRegions(void *a1, void *a2, uint64_t a3, apr_pool_t *a4)
{
  id v7 = a1;
  id v41 = a2;
  uint64_t v8 = apr_array_make(a4, 8, 48);
  arr = apr_array_make(a4, 8, 48);
  uint64_t v43 = apr_array_make(a4, 8, 8);
  id v42 = apr_array_make(a4, 8, 8);
  uint64_t v40 = v7;
  id v39 = [v7 device];
  if (*(int *)(a3 + 12) < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    id v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 32;
    do
    {
      uint64_t v14 = *(void *)(a3 + 24);
      uint64_t v15 = v14 + v13;
      uint64_t v16 = *(void *)(v14 + v13 - 24);
      if (v16 != v12)
      {
        if (v8->nelts >= 1)
        {
          long long v47 = 0uLL;
          uint64_t v48 = 0;
          id v17 = [v10 textureType];
          id v18 = [v10 pixelFormat];
          id v19 = [v10 sampleCount];
          if (v39)
          {
            [v39 sparseTileSizeWithTextureType:v17 pixelFormat:v18 sampleCount:v19];
          }
          else
          {
            long long v47 = 0uLL;
            uint64_t v48 = 0;
          }
          elts = v8->elts;
          id v21 = arr->elts;
          uint64_t nelts = v8->nelts;
          long long v45 = v47;
          uint64_t v46 = v48;
          [v39 convertSparsePixelRegions:elts toTileRegions:v21 withTileSize:v45 alignmentMode:0 numRegions:nelts];
          [v40 updateTextureMappings:v10 mode:0 regions:arr->elts mipLevels:v43->elts slices:v42->elts numRegions:v8->nelts];
          arr->uint64_t nelts = 0;
          v8->uint64_t nelts = 0;
          v43->uint64_t nelts = 0;
          v42->uint64_t nelts = 0;
          uint64_t v16 = *(void *)(v15 - 24);
        }
        int v23 = [v41 textureForKey:v16, v39];

        id v11 = [v23 firstMipmapInTail];
        uint64_t v12 = *(void *)(v15 - 24);
        uint64_t v10 = v23;
      }
      if ((unint64_t)v11 >= *(unsigned __int16 *)(v15 + 2))
      {
        apr_array_push(arr);
        uint64_t v24 = apr_array_push(v8);
        uint64_t v25 = *(unsigned __int16 *)(v14 + v13 + 6);
        uint64_t v26 = *(unsigned __int16 *)(v14 + v13 + 8);
        uint64_t v27 = *(unsigned __int16 *)(v14 + v13 + 10);
        uint64_t v28 = *(unsigned __int16 *)(v14 + v13 + 12);
        uint64_t v29 = *(unsigned __int16 *)(v14 + v13 + 14);
        *uint64_t v24 = *(unsigned __int16 *)(v14 + v13 + 4);
        v24[1] = v25;
        v24[2] = v26;
        v24[3] = v27;
        void v24[4] = v28;
        void v24[5] = v29;
        uint64_t v30 = *(unsigned __int16 *)(v15 + 2);
        *(void *)apr_array_push(v43) = v30;
        uint64_t v31 = *(unsigned __int16 *)(v14 + v13);
        *(void *)apr_array_push(v42) = v31;
      }
      ++v9;
      v13 += 64;
    }
    while (v9 < *(int *)(a3 + 12));
  }
  id v32 = v39;
  if (v8->nelts > 0)
  {
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    id v33 = [v10 textureType];
    id v34 = [v10 pixelFormat];
    id v35 = [v10 sampleCount];
    if (v39)
    {
      [v39 sparseTileSizeWithTextureType:v33 pixelFormat:v34 sampleCount:v35];
    }
    else
    {
      long long v47 = 0uLL;
      uint64_t v48 = 0;
    }
    id v36 = v8->elts;
    id v37 = arr->elts;
    uint64_t v38 = v8->nelts;
    long long v45 = v47;
    uint64_t v46 = v48;
    [v39 convertSparsePixelRegions:v36 toTileRegions:v37 withTileSize:v45 alignmentMode:0 numRegions:v38];
    [v40 updateTextureMappings:v10 mode:0 regions:arr->elts mipLevels:v43->elts slices:v42->elts numRegions:v8->nelts];
  }
}

void FillRequestsAlignment(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  int v6 = *(_DWORD *)(a1 + 12);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    long long v9 = 0uLL;
    do
    {
      uint64_t v10 = *(void *)(a1 + 24);
      if (*(void *)(v10 + v7) == 80)
      {
        uint64_t v25 = 0;
        long long v23 = v9;
        long long v24 = v9;
        long long v22 = v9;
        uint64_t v11 = v10 + v7;
        GTMTLSMContext_getTextureDescriptor(a2, *(void *)(v10 + v7 + 8), *(void *)(v10 + v7 + 16), (uint64_t)&v22);
        uint64_t v12 = WORD1(v24);
        uint64_t v21 = 0;
        memset(v20, 0, sizeof(v20));
        GTMTLPixelFormatGetInfoForDevice((uint64_t)v20, (uint64_t)v5, WORD1(v24));
        long long v13 = xmmword_4C8070;
        if ((~DWORD2(v20[0]) & 0x60) != 0)
        {
          *((void *)&v13 + 1) = v15;
          LOBYTE(v13) = 0;
          if ((WORD4(v20[0]) & 0x2000) != 0) {
            LOBYTE(v13) = 4;
          }
        }
        uint64_t v15 = *((void *)&v13 + 1);
        memset(v16, 0, sizeof(v16));
        uint64_t v19 = 0;
        long long v17 = 0uLL;
        long long v18 = 0uLL;
        char v14 = v13;
        GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)v16, (uint64_t)v5, v12, DWORD2(v23), (unsigned __int16)v24, HIWORD(v23), HIBYTE(v24));
        *(_WORD *)(v11 + 60) = WORD4(v17);
        *(unsigned char *)(v11 + 62) = v14;
        int v6 = *(_DWORD *)(a1 + 12);
        long long v9 = 0uLL;
      }
      ++v8;
      v7 += 64;
    }
    while (v8 < v6);
  }
}

void GroupRequestsByCapacity(apr_array_header_t *a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, a1->pool, 0, a4);
  p = newpool;
  id v5 = apr_array_copy(newpool, a1);
  qsort(v5->elts, v5->nelts, v5->elt_size, (int (__cdecl *)(const void *, const void *))CompareRequestsBySize);
  a1->uint64_t nelts = 0;
  while (v5->nelts)
  {
    elts = v5->elts;
    uint64_t v7 = apr_array_push(a1);
    long long v8 = *((_OWORD *)elts + 3);
    long long v10 = *(_OWORD *)elts;
    long long v9 = *((_OWORD *)elts + 1);
    v7[2] = *((_OWORD *)elts + 2);
    v7[3] = v8;
    *uint64_t v7 = v10;
    v7[1] = v9;
    uint64_t v11 = RequestSize((uint64_t)elts);
    uint64_t nelts = v5->nelts;
    v5->uint64_t nelts = 0;
    if ((int)nelts < 2) {
      break;
    }
    uint64_t v13 = v11;
    uint64_t v14 = 0;
    uint64_t v15 = (nelts << 6) - 64;
    do
    {
      uint64_t v16 = 0;
      long long v17 = v5->elts;
      uint64_t v18 = *(void *)&v17[v14 + 64];
      if (v18 <= 56)
      {
        if (v18 == 16)
        {
          uint64_t v20 = v13 + 31;
          uint64_t v19 = 32;
          goto LABEL_20;
        }
        if (v18 != 22) {
          goto LABEL_11;
        }
      }
      else if (v18 != 57)
      {
        if (v18 == 86)
        {
          uint64_t v20 = v13 + 255;
          uint64_t v19 = 256;
          goto LABEL_20;
        }
        if (v18 == 80)
        {
          uint64_t v19 = *(unsigned __int16 *)&v17[v14 + 124];
          uint64_t v20 = v13 + v19 - 1;
          goto LABEL_20;
        }
LABEL_11:
        uint64_t v16 = -1;
      }
      uint64_t v20 = v16 + v13;
      uint64_t v19 = v18 <= 79 && (v18 == 22 || v18 == 57);
LABEL_20:
      uint64_t v21 = v20 & -v19;
      uint64_t v22 = RequestSize((uint64_t)&v17[v14 + 64]);
      if ((unint64_t)(v21 + v22) > 0x2000000)
      {
        uint64_t v26 = v5;
        goto LABEL_39;
      }
      uint64_t v23 = 0;
      if (v18 <= 56)
      {
        if (v18 != 16)
        {
          if (v18 != 22) {
LABEL_29:
          }
            uint64_t v23 = -1;
LABEL_30:
          uint64_t v25 = v23 + v13;
          uint64_t v24 = v18 <= 79 && (v18 == 22 || v18 == 57);
          goto LABEL_38;
        }
        uint64_t v25 = v13 + 31;
        uint64_t v24 = 32;
      }
      else
      {
        switch(v18)
        {
          case '9':
            goto LABEL_30;
          case 'V':
            uint64_t v25 = v13 + 255;
            uint64_t v24 = 256;
            break;
          case 'P':
            uint64_t v24 = *(unsigned __int16 *)&v17[v14 + 124];
            uint64_t v25 = v13 + v24 - 1;
            break;
          default:
            goto LABEL_29;
        }
      }
LABEL_38:
      uint64_t v13 = (v25 & -v24) + v22;
      uint64_t v26 = a1;
LABEL_39:
      uint64_t v27 = apr_array_push(v26);
      long long v28 = *(_OWORD *)&v17[v14 + 112];
      long long v30 = *(_OWORD *)&v17[v14 + 64];
      long long v29 = *(_OWORD *)&v17[v14 + 80];
      v27[2] = *(_OWORD *)&v17[v14 + 96];
      v27[3] = v28;
      *uint64_t v27 = v30;
      v27[1] = v29;
      v14 += 64;
    }
    while (v15 != v14);
  }

  apr_pool_destroy(p);
}

uint64_t AppendRestoreJobsToLoadQueue(uint64_t result, uint64_t a2)
{
  if (a2 && *(int *)(a2 + 12) >= 1)
  {
    uint64_t v3 = result;
    int v4 = 0;
    do
    {
      id v5 = apr_array_push(*(apr_array_header_t **)(v3 + 22504));
      *(_DWORD *)id v5 = 0;
      uint64_t v6 = *(void *)(a2 + 24) + ((uint64_t)v4 << 6);
      v5[1] = v6;
      int v7 = *(_DWORD *)(a2 + 12);
      uint64_t result = CountRequestsWithinCapacity(v6, (v7 - v4));
      *((_DWORD *)v5 + 1) = result;
      v4 += result;
    }
    while (v4 < v7);
  }
  return result;
}

intptr_t SignalLoadQueueThreads(intptr_t result, int a2)
{
  atomic_store(0, (unsigned int *)(result + 22512));
  int v2 = *(_DWORD *)(result + 22576);
  if (v2 >= a2) {
    int v2 = a2;
  }
  if (v2 >= 1)
  {
    intptr_t v3 = result;
    int v4 = v2 & ~(v2 >> 31);
    do
    {
      dispatch_group_enter(*(dispatch_group_t *)(v3 + 22528));
      uint64_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 22520));
      --v4;
    }
    while (v4);
  }
  return result;
}

void RestoreOrderedResourcesFromArchive(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  os_signpost_id_t v8 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, a1);
  int v77 = v7;
  [v7 enterRestoreResources:a2 count:a3];
  id v79 = a1[3];
  unint64_t v83 = a1;
  BOOL v76 = [a1[1] defaultDevice];
  id v9 = [v76 sharedMemorySize];
  long long v10 = g_signpostLog;
  uint64_t v11 = v10;
  os_signpost_id_t spid = v8;
  unint64_t v91 = v8 - 1;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v10))
  {
    LODWORD(buf[0]) = 67109120;
    DWORD1(buf[0]) = a3;
    _os_signpost_emit_with_name_impl(&def_1C1270, v11, OS_SIGNPOST_INTERVAL_BEGIN, v8, "Replayer-2-restore", "RestoreOrderedResourcesFromArchive x%d", (uint8_t *)buf, 8u);
  }

  if ((int)a3 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v86 = 4 * (uint64_t)v9 / 0xAuLL;
    uint64_t v85 = a3;
    uint64_t v84 = a2;
    while (1)
    {
      uint64_t v16 = (void *)(a2 + (v12 << 6));
      uint64_t v17 = RequestSize((uint64_t)v16);
      id v18 = &_os_log_disabled;
      if (v91 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)&_os_log_disabled))
      {
        uint64_t v19 = a2 + (v12 << 6);
        uint64_t v20 = *(void *)(v19 + 8);
        uint64_t v21 = *(void *)(v19 + 24);
        LODWORD(buf[0]) = 134218498;
        *(void *)((char *)buf + 4) = v20;
        WORD6(buf[0]) = 2048;
        *(void *)((char *)buf + 14) = v17;
        WORD3(buf[1]) = 2082;
        *((void *)&buf[1] + 1) = v21;
        _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)&_os_log_disabled, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Replayer-6-high", "%llu. %{xcode:size-in-bytes}zu %{public}s", (uint8_t *)buf, 0x20u);
      }

      if (*v16 == 16)
      {
        uint64_t v87 = v17;
        id v88 = v15;
        unint64_t v90 = v14;
        uint64_t v38 = *(const char ***)*v83;
        id v39 = (apr_pool_t **)v83[19];
        id v40 = v83[1];
        uint64_t v41 = a2 + (v12 << 6);
        uint64_t v43 = *(void *)(v41 + 8);
        id v42 = (void *)(v41 + 8);
        uint64_t v44 = (char *)v42[2];
        id v82 = v40;
        uint64_t v45 = [v40 accelerationStructureForKey:v43];
        id v46 = v83[3];
        long long v47 = [v46 bufferWithLength:v42[3] alignment:32];
        int v80 = v39;
        GTCaptureArchive_fillBuffer(v38, v39, v44, (char *)[v47 contents], v42[3], 0);
        uint64_t v48 = (void *)v45;
        id v49 = [v83[1] defaultDevice];
        uint64_t v50 = [v47 contents];
        if ((unint64_t)[v47 length] >= 0x18
          && [v49 isCompatibleWithAccelerationStructure:*v50]
          && (unint64_t)[v48 size] >= v50[2])
        {
          uint64_t v51 = [v46 accelerationStructureCommandEncoder];
          uint64_t v52 = v84 + (v12 << 6);
          long long v53 = (void *)(v52 + 40);
          if (*(void *)(v52 + 40))
          {
            uint64_t v72 = (void *)v51;
            uint64_t v73 = v49;
            id v74 = v47;
            uint64_t v75 = v48;
            id v54 = objc_alloc((Class)NSMutableArray);
            unsigned int v56 = *(_DWORD *)(v52 + 48);
            long long v55 = (_DWORD *)(v52 + 48);
            id v57 = [v54 initWithCapacity:v56];
            if (*v55)
            {
              unint64_t v58 = 0;
              do
              {
                char v59 = [v82 accelerationStructureForKey:*(void *)(*v53 + 8 * v58)];
                [v57 addObject:v59];

                ++v58;
              }
              while (v58 < *v55);
            }
            unint64_t v60 = +[NSString stringWithFormat:@"deserializeInstanceAccelerationStructure %llu", *v42];
            NSErrorUserInfoKey v61 = v72;
            [v72 insertDebugSignpost:v60];

            long long v47 = v74;
            id v62 = [v74 heapBuffer];
            uint64_t v48 = v75;
            [v72 deserializeInstanceAccelerationStructure:v75 primitiveAccelerationStructures:v57 fromBuffer:v62 serializedBufferOffset:[v74 heapLocation]];

            id v49 = v73;
          }
          else
          {
            NSErrorUserInfoKey v61 = (void *)v51;
            id v63 = +[NSString stringWithFormat:@"deserializePrimitiveAccelerationStructure %llu", *v42];
            [v61 insertDebugSignpost:v63];

            id v57 = [v47 heapBuffer];
            [v61 deserializePrimitiveAccelerationStructure:v48 fromBuffer:v57 serializedBufferOffset:[v47 heapLocation]];
          }
        }
        apr_pool_clear(*v80);

        unint64_t v14 = v90;
        id v29 = v82;
      }
      else
      {
        if (*v16 != 57) {
          goto LABEL_24;
        }
        uint64_t v87 = v17;
        id v88 = v15;
        uint64_t v22 = (const char ***)*v83;
        uint64_t v23 = a2 + (v12 << 6);
        uint64_t Object = GTMTLSMContext_getObject(**((void **)*v83 + 5), *(void *)(v23 + 8), *(void *)(v23 + 16));
        uint64_t v25 = *((unsigned int *)Object + 34);
        uint64_t v81 = v25;
        uint64_t v26 = Object[13];
        MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex(v26);
        uint64_t v27 = v89 = v14;
        long long v28 = [v83[1] defaultDevice];
        id v29 = [v28 newIndirectCommandBufferWithDescriptor:v27 maxCommandCount:v25 options:256];

        long long v30 = (apr_pool_t **)v83[19];
        uint64_t v31 = *v30;
        Data = GTCaptureArchive_readData(*v22, v30, *(char **)(v23 + 24), *v30, 0);
        uint64_t v93 = 0;
        memset(buf, 0, sizeof(buf));
        GTMTLSMContext_indirectCommandBufferResources((uint64_t)buf, (_DWORD **)v22[5], (unint64_t)v22[10], v31);
        id v33 = [v29 size];
        id v34 = [v83[1] restoreIndirectCommandBufferDataMap];
        GTMTLEncodeIndirectCommandBufferWithRange(v29, 0, (uint64_t)v33, v26, (uint64_t)Data, (uint64_t *)buf, v34);

        id v35 = [v83[1] indirectCommandBufferForKey:*(void *)(v23 + 8)];
        id v36 = [v83[3] blitCommandEncoder];
        [v36 copyIndirectCommandBuffer:v29 sourceRange:0 destination:v81 destinationIndex:v35];

        id v37 = v31;
        unint64_t v14 = v89;
        apr_pool_clear(v37);
      }
      a2 = v84;
      uint64_t v17 = v87;
      uint64_t v15 = v88;
LABEL_24:
      id v64 = g_signpostLog;
      NSErrorUserInfoKey v65 = v64;
      if (v91 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v64))
      {
        LOWORD(buf[0]) = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, v65, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-6-high", (const char *)&unk_4CA5E5, (uint8_t *)buf, 2u);
      }
      v14 += v17;

      if (v14 >= v86)
      {
        id v66 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"RestoreOrderedResourcesFromArchive"];
        id v67 = [v79 commandBuffer];
        [v67 setLabel:v66];

        [v79 commitCommandBuffer];
        unint64_t v14 = 0;
      }
      v13 += v17;
      if (++v12 == v85) {
        goto LABEL_32;
      }
    }
  }
  uint64_t v13 = 0;
LABEL_32:
  unint64_t v68 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"RestoreOrderedResourcesFromArchive"];
  NSErrorUserInfoKey v69 = [v79 commandBuffer];
  [v69 setLabel:v68];

  [v79 commitCommandBuffer];
  uint64_t v70 = g_signpostLog;
  uint64_t v71 = v70;
  if (v91 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v70))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v13;
    _os_signpost_emit_with_name_impl(&def_1C1270, v71, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-2-restore", "%{xcode:size-in-bytes}zu", (uint8_t *)buf, 0xCu);
  }

  [v77 leaveActivity];
}

apr_hash_index_t *RestoreVisibleFunctionTablesForFunctionIndex(id *a1, unint64_t a2)
{
  intptr_t v3 = a1;
  uint64_t v4 = *((void *)*a1 + 21);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v4;
  *(_DWORD *)(v4 + 40) = 0;
  uint64_t result = apr_hash_next((apr_hash_index_t *)(v4 + 16));
  if (result)
  {
    uint64_t v6 = result;
    char v7 = 1;
    unint64_t v53 = a2;
    id v54 = v3;
    do
    {
      uint64_t v8 = *((void *)v6 + 1);
      uint64_t v9 = *(void *)(v8 + 32);
      if (*(int *)(v9 + 12) < 1) {
        goto LABEL_52;
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = **(void **)(v8 + 16);
      do
      {
        uint64_t Object = GTMTLSMContext_getObject(**((void **)*v3 + 5), v12, a2);
        if (Object)
        {
          unint64_t v14 = Object[2];
          uint64_t v15 = *v3;
          unint64_t v16 = *((void *)*v3 + 8);
          if (v16 > v14 || *((void *)*v3 + 9) + v16 <= v14)
          {
            id v18 = (unint64_t *)(*(void *)(v9 + 24) + v10);
            unint64_t v19 = *v18;
            unint64_t v20 = v18[1] + *v18;
            if (*v18 <= a2 && v20 > a2)
            {
              if (v7)
              {
                os_signpost_id_t v22 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, v3);
                uint64_t v23 = g_signpostLog;
                uint64_t v24 = v23;
                if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v23))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl(&def_1C1270, v24, OS_SIGNPOST_INTERVAL_BEGIN, v22, "Replayer-2-restore", "RestoreVisibleFunctionTablesFlush", buf, 2u);
                }

                uint64_t v25 = [v3[1] defaultCommandQueue];
                [v25 finish];
                uint64_t v26 = g_signpostLog;
                uint64_t v27 = v26;
                if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v26))
                {
                  *(_WORD *)char v59 = 0;
                  _os_signpost_emit_with_name_impl(&def_1C1270, v27, OS_SIGNPOST_INTERVAL_END, v22, "Replayer-2-restore", (const char *)&unk_4CA5E5, v59, 2u);
                }

                uint64_t v15 = *v3;
              }
              uint64_t v58 = v15[2];
              id v28 = v3[1];
              uint64_t v29 = *((void *)*v3 + 1);
              uint64_t v61 = v12;
              uint64_t v30 = *(void *)(*(void *)(*find_entry(v29, &v61, 8uLL, 0) + 32) + 32);
              unsigned int v31 = 0;
              if (v30)
              {
                do
                {
                  unsigned int v32 = atomic_load((unsigned int *)(v30 + 4));
                  uint64_t v33 = v31 + (v32 >> 6) - 1;
                  if ((int)v33 > 0) {
                    goto LABEL_28;
                  }
                  uint64_t v30 = *(void *)(v30 + 40);
                  unsigned int v31 = v33;
                }
                while (v30);
                unsigned int v31 = v33;
              }
              else
              {
LABEL_28:
                uint64_t v33 = 0;
              }
              unint64_t v34 = v31 | (unint64_t)(v33 << 32);
              id v57 = v28;
LABEL_30:
              uint64_t v35 = v30 + 64;
LABEL_31:
              if (!v30
                || (int v36 = HIDWORD(v34) - v34, (*(unsigned char *)(v35 + ((uint64_t)(HIDWORD(v34) - (int)v34) << 6) + 15) & 8) == 0))
              {
LABEL_51:

                char v7 = 0;
                a2 = v53;
                break;
              }
              uint64_t v37 = v35 + ((uint64_t)v36 << 6);
              unint64_t v38 = *(void *)v37;
              if (v19 <= *(void *)v37 && v20 > v38)
              {
                int v40 = *(_DWORD *)(v37 + 8);
                if (v40 == -15597)
                {
                  uint64_t v44 = GTTraceFunc_argumentBytesWithMap((void *)v37, *(unsigned __int8 *)(v35 + ((uint64_t)v36 << 6) + 13), v58);
                  intptr_t v3 = v54;
                  unsigned int v56 = [v28 visibleFunctionTableForKey:*(void *)v44];
                  p = *(apr_pool_t **)v54[19];
                  uint64_t v45 = apr_palloc(p, 8 * *((void *)v44 + 2));
                  id v46 = GTTraceFunc_argumentBytesWithMap((void *)v37, v44[24], v58);
                  if (*((void *)v44 + 2))
                  {
                    long long v47 = v46;
                    unint64_t v48 = 0;
                    do
                    {
                      v45[v48] = [v57 functionHandleForKey:*(void *)&v47[8 * v48] v53];
                      ++v48;
                      unint64_t v49 = *((void *)v44 + 2);
                    }
                    while (v49 > v48);
                    intptr_t v3 = v54;
                  }
                  else
                  {
                    unint64_t v49 = 0;
                  }
                  id v42 = v56;
                  [v56 setFunctions:v45 withRange:*((void *)v44 + 1) v49, v53];
                  apr_pool_clear(p);
                  id v28 = v57;
                }
                else
                {
                  if (v40 != -15598) {
                    goto LABEL_49;
                  }
                  uint64_t v41 = GTTraceFunc_argumentBytesWithMap((void *)v37, *(unsigned __int8 *)(v35 + ((uint64_t)v36 << 6) + 13), v58);
                  id v42 = [v28 visibleFunctionTableForKey:*(void *)v41];
                  uint64_t v43 = [v28 functionHandleForKey:*((void *)v41 + 1)];
                  [v42 setFunction:v43 atIndex:*((void *)v41 + 2)];
                }
                uint64_t v35 = v30 + 64;
              }
              else if (v38 > v20)
              {
                goto LABEL_51;
              }
LABEL_49:
              unsigned int v50 = atomic_load((unsigned int *)(v30 + 4));
              int v51 = v34 + (v50 >> 6);
              uint64_t v52 = (HIDWORD(v34) + 1);
              unint64_t v34 = (v52 << 32) | v34;
              if (v52 == v51 - 1)
              {
                unint64_t v34 = (v52 << 32) | v52;
                uint64_t v30 = *(void *)(v30 + 40);
                goto LABEL_30;
              }
              goto LABEL_31;
            }
          }
        }
        ++v11;
        v10 += 16;
      }
      while (v11 < *(int *)(v9 + 12));
LABEL_52:
      uint64_t result = apr_hash_next(v6);
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

apr_hash_index_t *RestoreIntersectionFunctionTablesForFunctionIndex(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 176);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v4;
  *(_DWORD *)(v4 + 40) = 0;
  uint64_t result = apr_hash_next((apr_hash_index_t *)(v4 + 16));
  if (result)
  {
    uint64_t v6 = result;
    char v7 = 1;
    do
    {
      uint64_t v8 = *((void *)v6 + 1);
      uint64_t v9 = *(void *)(v8 + 32);
      if (*(int *)(v9 + 12) < 1) {
        goto LABEL_82;
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = **(void **)(v8 + 16);
      do
      {
        uint64_t Object = GTMTLSMContext_getObject(**(void **)(*a1 + 40), v12, a2);
        if (Object)
        {
          unint64_t v14 = Object[2];
          uint64_t v15 = *a1;
          unint64_t v16 = *(void *)(*a1 + 64);
          if (v16 > v14 || *(void *)(*a1 + 72) + v16 <= v14)
          {
            id v18 = (unint64_t *)(*(void *)(v9 + 24) + v10);
            unint64_t v19 = *v18;
            unint64_t v20 = v18[1] + *v18;
            if (*v18 <= a2 && v20 > a2)
            {
              if (v7)
              {
                os_signpost_id_t v22 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, a1);
                uint64_t v23 = g_signpostLog;
                uint64_t v24 = v23;
                if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v23))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl(&def_1C1270, v24, OS_SIGNPOST_INTERVAL_BEGIN, v22, "Replayer-2-restore", "RestoreIntersectionFunctionTablesFlush", buf, 2u);
                }

                uint64_t v25 = [(id)a1[1] defaultCommandQueue];
                [v25 finish];
                uint64_t v26 = g_signpostLog;
                uint64_t v27 = v26;
                if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v26))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl(&def_1C1270, v27, OS_SIGNPOST_INTERVAL_END, v22, "Replayer-2-restore", (const char *)&unk_4CA5E5, buf, 2u);
                }

                uint64_t v15 = *a1;
              }
              uint64_t v88 = *(void *)(v15 + 16);
              id v28 = (id)a1[1];
              uint64_t v29 = *(void *)(*a1 + 8);
              *(void *)buf = v12;
              uint64_t v30 = *(void *)(*(void *)(*find_entry(v29, buf, 8uLL, 0) + 32) + 32);
              uint64_t v81 = v6;
              unsigned int v31 = 0;
              if (v30)
              {
                do
                {
                  unsigned int v32 = atomic_load((unsigned int *)(v30 + 4));
                  uint64_t v33 = v31 + (v32 >> 6) - 1;
                  if ((int)v33 > 0)
                  {
                    uint64_t v33 = 0;
                    goto LABEL_30;
                  }
                  uint64_t v30 = *(void *)(v30 + 40);
                  unsigned int v31 = v33;
                }
                while (v30);
                unsigned int v31 = v33;
              }
              else
              {
                uint64_t v33 = 0;
              }
LABEL_30:
              unint64_t v34 = v31 | (unint64_t)(v33 << 32);
              uint64_t v87 = v28;
LABEL_31:
              uint64_t v35 = v30 + 64;
LABEL_32:
              if (!v30
                || (unint64_t v36 = HIDWORD(v34),
                    int v37 = HIDWORD(v34) - v34,
                    (*(unsigned char *)(v35 + ((uint64_t)(HIDWORD(v34) - (int)v34) << 6) + 15) & 8) == 0))
              {
LABEL_81:

                char v7 = 0;
                uint64_t v6 = v81;
                break;
              }
              uint64_t v38 = v35 + ((uint64_t)v37 << 6);
              unint64_t v39 = *(void *)v38;
              if (v19 > *(void *)v38 || v20 <= v39)
              {
                if (v39 > v20) {
                  goto LABEL_81;
                }
                goto LABEL_79;
              }
              int v41 = *(_DWORD *)(v38 + 8);
              unint64_t v89 = HIDWORD(v34);
              if (v41 > -15531)
              {
                if (v41 <= -15259)
                {
                  if (v41 == -15530)
                  {
                    NSErrorUserInfoKey v69 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                    unsigned int v56 = [v28 intersectionFunctionTableForKey:*(void *)v69];
                    [v56 setOpaqueTriangleIntersectionFunctionWithSignature:*((void *)v69 + 1) atIndex:*((void *)v69 + 2)];
                  }
                  else
                  {
                    if (v41 != -15529) {
                      goto LABEL_79;
                    }
                    long long v55 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                    unsigned int v56 = [v28 intersectionFunctionTableForKey:*(void *)v55];
                    [v56 setOpaqueTriangleIntersectionFunctionWithSignature:*((void *)v55 + 1) withRange:*((void *)v55 + 2) *((void *)v55 + 3)];
                  }
                }
                else if (v41 == -15258)
                {
                  NSErrorUserInfoKey v65 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                  unsigned int v56 = [v28 intersectionFunctionTableForKey:*(void *)v65];
                  [v56 setOpaqueCurveIntersectionFunctionWithSignature:*((void *)v65 + 1) atIndex:*((void *)v65 + 2)];
                }
                else
                {
                  if (v41 != -15257)
                  {
                    if (v41 == -10152)
                    {
                      int v85 = v34;
                      id v42 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                      unint64_t v34 = [v28 intersectionFunctionTableForKey:*(void *)v42];
                      uint64_t v43 = GTTraceFunc_argumentBytesWithMap((void *)v38, v42[8], v88);
                      uint64_t v76 = *(void *)v43;
                      id v82 = [(id)a1[1] defaultCommandQueue];
                      uint64_t v44 = [v82 commandBuffer];
                      uint64_t v45 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"RestoreIFT"];
                      [v44 setLabel:v45];

                      id v46 = [v44 computeCommandEncoder];
                      long long v47 = v46;
                      unint64_t v48 = (apr_pool_t *)a1[15];
                      p = v48;
                      if (v48)
                      {
                        [v46 setComputePipelineState:v48];
                        [v47 setIntersectionFunctionTable:v34 atBufferIndex:0];
                        [v47 setBytes:v43 + 8 length:8 * (int)v76 atIndex:1];
                        [v47 setBytes:v43 length:8 atIndex:2];
                        uint64_t v92 = *(void *)v43;
                        int64x2_t v77 = vdupq_n_s64(1uLL);
                        int64x2_t v93 = v77;
                        id v90 = [(id)a1[15] threadExecutionWidth];
                        int64x2_t v91 = v77;
                        [v47 dispatchThreads:&v92 threadsPerThreadgroup:&v90];
                        [v47 endEncoding];
                        [v44 addCompletedHandler:&__block_literal_global_127];
                        GTMTLReplay_commitCommandBuffer(v44);
                      }
                      else
                      {
                        MakeNSError(101, &__NSDictionary0__struct);
                        id v71 = (id)objc_claimAutoreleasedReturnValue();
                        GTMTLReplay_handleNSError(v71);
                      }
                      LODWORD(v34) = v85;
                      id v28 = v87;
                      uint64_t v35 = v30 + 64;
                      LODWORD(v36) = v89;
                      if (!p) {
                        goto LABEL_81;
                      }
                    }
LABEL_79:
                    unsigned int v73 = atomic_load((unsigned int *)(v30 + 4));
                    int v74 = v34 + (v73 >> 6);
                    uint64_t v75 = (v36 + 1);
                    unint64_t v34 = (v75 << 32) | v34;
                    if (v75 == v74 - 1)
                    {
                      unint64_t v34 = (v75 << 32) | v75;
                      uint64_t v30 = *(void *)(v30 + 40);
                      goto LABEL_31;
                    }
                    goto LABEL_32;
                  }
                  id v66 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                  unsigned int v56 = [v28 intersectionFunctionTableForKey:*(void *)v66];
                  [v56 setOpaqueCurveIntersectionFunctionWithSignature:*((void *)v66 + 1) withRange:*((void *)v66 + 2) withRange:*((void *)v66 + 3)];
                }
LABEL_78:

                uint64_t v35 = v30 + 64;
                LODWORD(v36) = v89;
                goto LABEL_79;
              }
              if (v41 > -15546)
              {
                if (v41 != -15545)
                {
                  if (v41 != -15544) {
                    goto LABEL_79;
                  }
                  id v57 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                  uint64_t v84 = [v28 intersectionFunctionTableForKey:*(void *)v57];
                  uint64_t v109 = 0;
                  long long v107 = 0u;
                  long long v108 = 0u;
                  long long v105 = 0u;
                  long long v106 = 0u;
                  long long v103 = 0u;
                  long long v104 = 0u;
                  long long v101 = 0u;
                  long long v102 = 0u;
                  long long v99 = 0u;
                  long long v100 = 0u;
                  long long v97 = 0u;
                  long long v98 = 0u;
                  long long v95 = 0u;
                  long long v96 = 0u;
                  *(_OWORD *)buf = 0u;
                  uint64_t v58 = GTTraceFunc_argumentBytesWithMap((void *)v38, v57[24], v88);
                  char v59 = GTTraceFunc_argumentBytesWithMap((void *)v38, v57[25], v88);
                  unint64_t v60 = v59;
                  if (*((void *)v57 + 2))
                  {
                    pb = (apr_pool_t *)v59;
                    unint64_t v61 = 0;
                    do
                    {
                      uint64_t v62 = [v87 bufferForKey:*(void *)&v58[8 * v61] v60];
                      id v63 = *(void **)&buf[8 * v61];
                      *(void *)&buf[8 * v61] = v62;

                      ++v61;
                      unint64_t v64 = *((void *)v57 + 2);
                    }
                    while (v64 > v61);
                    unint64_t v60 = pb;
                  }
                  else
                  {
                    unint64_t v64 = 0;
                  }
                  unsigned int v56 = v84;
                  [v84 setBuffers:buf offsets:v60 withRange:*((void *)v57 + 1) v64];
                  uint64_t v72 = 240;
                  id v28 = v87;
                  do
                  {

                    v72 -= 8;
                  }
                  while (v72 != -8);
                  goto LABEL_78;
                }
                uint64_t v70 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                unsigned int v56 = [v28 intersectionFunctionTableForKey:*(void *)v70];
                unint64_t v68 = [v28 bufferForKey:*((void *)v70 + 1)];
                [v56 setBuffer:v68 offset:*((void *)v70 + 2) atIndex:*((void *)v70 + 3)];
              }
              else
              {
                if (v41 != -15559)
                {
                  if (v41 != -15558) {
                    goto LABEL_79;
                  }
                  unint64_t v49 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                  unint64_t v83 = [v28 intersectionFunctionTableForKey:*(void *)v49];
                  pa = *(apr_pool_t **)a1[19];
                  unsigned int v50 = apr_palloc(pa, 8 * *((void *)v49 + 2));
                  int v51 = GTTraceFunc_argumentBytesWithMap((void *)v38, v49[24], v88);
                  if (*((void *)v49 + 2))
                  {
                    uint64_t v52 = v51;
                    int v86 = v34;
                    unint64_t v53 = 0;
                    do
                    {
                      v50[v53] = [v87 functionHandleForKey:*(void *)&v52[8 * v53]];
                      ++v53;
                      unint64_t v54 = *((void *)v49 + 2);
                    }
                    while (v54 > v53);
                    LODWORD(v34) = v86;
                  }
                  else
                  {
                    unint64_t v54 = 0;
                  }
                  unsigned int v56 = v83;
                  [v83 setFunctions:v50 withRange:*((void *)v49 + 1)];
                  apr_pool_clear(pa);
                  goto LABEL_74;
                }
                id v67 = GTTraceFunc_argumentBytesWithMap((void *)v38, *(unsigned __int8 *)(v35 + ((uint64_t)v37 << 6) + 13), v88);
                unsigned int v56 = [v28 intersectionFunctionTableForKey:*(void *)v67];
                unint64_t v68 = [v28 functionHandleForKey:*((void *)v67 + 1)];
                [v56 setFunction:v68 atIndex:*((void *)v67 + 2)];
              }

LABEL_74:
              id v28 = v87;
              goto LABEL_78;
            }
          }
        }
        ++v11;
        v10 += 16;
      }
      while (v11 < *(int *)(v9 + 12));
LABEL_82:
      uint64_t result = apr_hash_next(v6);
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void DoLoadJob(void **a1, uint64_t a2, void *a3, apr_hash_t *a4)
{
  id v6 = a3;
  char v7 = v6;
  if (*(_DWORD *)a2 == 1)
  {
    ht = a4;
    uint64_t v25 = *(void *)(a2 + 8);
    uint64_t v26 = *(unsigned int *)(a2 + 4);
    id v27 = v6;
    os_signpost_id_t v28 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, a1);
    int64x2_t v91 = v27;
    uint64_t v98 = v25;
    [v27 enterRestoreResources:v25 count:v26];
    uint64_t v29 = a1[3];
    long long v108 = a1[1];
    id v107 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:(int)v26];
    uint64_t v30 = g_signpostLog;
    unsigned int v31 = v30;
    os_signpost_id_t spid = v28;
    unint64_t v95 = v28 - 1;
    if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v30))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&def_1C1270, v31, OS_SIGNPOST_INTERVAL_BEGIN, v28, "Replayer-2-restore", "DownloadBufferContent", buf, 2u);
    }

    uint64_t v97 = v26;
    if ((int)v26 >= 1)
    {
      uint64_t v32 = v26;
      uint64_t v33 = (void *)(v25 + 40);
      do
      {
        if (*(v33 - 5) == 22)
        {
          unint64_t v34 = [v108 bufferForKey:*(v33 - 4)];
          uint64_t v35 = [v29 bufferWithLength:*v33 alignment:1];
          unint64_t v36 = [v29 blitCommandEncoder];
          uint64_t v37 = *(v33 - 1);
          uint64_t v38 = [v35 heapBuffer];
          [v36 copyFromBuffer:v34 sourceOffset:v37 toBuffer:v38 destinationOffset:[v35 heapLocation] size:*v33];

          unint64_t v39 = +[NSNumber numberWithUnsignedLongLong:*(v33 - 4)];
          [v107 setObject:v35 forKey:v39];
        }
        v33 += 8;
        --v32;
      }
      while (v32);
    }
    int v40 = [v29 commandBuffer];
    int v41 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"DownloadBufferContent"];
    [v40 setLabel:v41];

    [v29 commitCommandBuffer];
    [v40 waitUntilCompleted];

    p_info = &OBJC_METACLASS___GTShaderProfilerBinaryAnalysisResult.info;
    uint64_t v43 = g_signpostLog;
    uint64_t v44 = v43;
    unint64_t v45 = v95;
    if (v95 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v43))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&def_1C1270, v44, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-2-restore", (const char *)&unk_4CA5E5, buf, 2u);
    }

    unint64_t v94 = (const char **)**a1;
    id v46 = (apr_pool_t **)a1[19];
    p = *(apr_pool_t **)ht;
    long long v47 = g_signpostLog;
    unint64_t v48 = v47;
    uint64_t v50 = v97;
    uint64_t v49 = v98;
    if (v95 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v47))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v114) = v97;
      _os_signpost_emit_with_name_impl(&def_1C1270, v48, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Replayer-2-restore", "CompareAndRestoreResourcesFromArchive x%d", buf, 8u);
    }
    uint64_t v92 = v7;

    if ((int)v97 < 1)
    {
      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      long long v100 = v29;
      int64x2_t v93 = v46;
      do
      {
        unint64_t v53 = (uint64_t *)(v49 + (v51 << 6));
        uint64_t v112 = RequestSize((uint64_t)v53);
        id v54 = &_os_log_disabled;
        if (v45 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)&_os_log_disabled))
        {
          uint64_t v55 = v49 + (v51 << 6);
          uint64_t v56 = *(void *)(v55 + 8);
          uint64_t v57 = *(void *)(v55 + 24);
          *(_DWORD *)buf = 134218498;
          uint64_t v114 = v56;
          __int16 v115 = 2048;
          uint64_t v116 = v112;
          __int16 v117 = 2082;
          uint64_t v118 = v57;
          _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)&_os_log_disabled, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Replayer-6-high", "%llu. %{xcode:size-in-bytes}zu %{public}s", buf, 0x20u);
        }

        uint64_t v58 = *v53;
        if (*v53 == 86)
        {
          GTMTLReplayController_restoreIOSurfaceData_length_forPlane((uint64_t)a1, v49 + (v51 << 6));
        }
        else if (v58 == 80)
        {
          GTMTLReplayController_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage((uint64_t)a1, v49 + (v51 << 6));
        }
        else if (v58 == 22)
        {
          uint64_t v59 = v49 + (v51 << 6);
          unint64_t v60 = [v29 bufferWithLength:*(void *)(v59 + 40) alignment:1];
          GTCaptureArchive_fillBuffer(v94, v46, *(char **)(v59 + 24), (char *)[v60 contents], *(void *)(v59 + 40), 0);
          unint64_t v61 = apr_array_make(p, 0, 16);
          long long v104 = (void *)(v59 + 8);
          long long v102 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v59 + 8)];
          uint64_t v62 = [v107 objectForKeyedSubscript:];
          id v63 = v60;
          unint64_t v64 = (char *)[v62 length];
          long long v101 = v62;
          NSErrorUserInfoKey v65 = (char *)[v62 contents];
          long long v103 = v63;
          id v66 = (char *)[v63 contents];
          if (v64)
          {
            id v67 = v66;
            BOOL v68 = 0;
            unint64_t v69 = 0;
            unint64_t v70 = 0;
            do
            {
              unint64_t v71 = (unint64_t)&v64[-v69];
              while (1)
              {
                unint64_t v72 = v71 - 0x10000;
                size_t v73 = v71 >= 0x10000 ? 0x10000 : v71;
                int v74 = memcmp(&v65[v69], &v67[v69], v73);
                if (v74 || !v68) {
                  break;
                }
                uint64_t v75 = apr_array_push(v61);
                BOOL v68 = 0;
                *uint64_t v75 = v70;
                v75[1] = v69 - v70;
                v69 += 0x10000;
                unint64_t v71 = v72;
                if (v69 >= (unint64_t)v64) {
                  goto LABEL_59;
                }
              }
              if ((v68 ^ (v74 != 0)))
              {
                unint64_t v70 = v69;
                BOOL v68 = v74 != 0;
              }
              v69 += 0x10000;
            }
            while (v69 < (unint64_t)v64);
            if (v68)
            {
              uint64_t v76 = apr_array_push(v61);
              *uint64_t v76 = v70;
              v76[1] = &v64[-v70];
            }
          }
LABEL_59:

          int64x2_t v77 = apr_palloc(p, 8uLL);
          *int64x2_t v77 = *v104;
          apr_hash_set(ht, v77, 8, v61);
          uint64_t v78 = [v108 bufferForKey:*v104];
          uint64_t v29 = v100;
          id v79 = [v100 blitCommandEncoder];
          int v80 = [v103 heapBuffer];
          [v79 copyFromBuffer:v80 sourceOffset:[v103 heapLocation] toBuffer:v78 destinationOffset:v104[3] size:v104[4]];

          id v46 = v93;
          apr_pool_clear(*v93);

          p_info = (__objc2_class_ro **)(&OBJC_METACLASS___GTShaderProfilerBinaryAnalysisResult + 32);
          uint64_t v50 = v97;
          uint64_t v49 = v98;
          unint64_t v45 = v95;
        }
        uint64_t v81 = p_info[424];
        id v82 = v81;
        if (v45 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v81))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&def_1C1270, v82, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-6-high", (const char *)&unk_4CA5E5, buf, 2u);
        }
        v52 += v112;

        ++v51;
      }
      while (v51 != v50);
    }
    uint64_t v87 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"CompareAndRestoreResourcesFromArchive"];
    uint64_t v88 = [v29 commandBuffer];
    [v88 setLabel:v87];

    [v29 commitCommandBufferWithLog:v91];
    unint64_t v89 = p_info[424];
    id v90 = v89;
    if (v45 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v89))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v114 = v52;
      _os_signpost_emit_with_name_impl(&def_1C1270, v90, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-2-restore", "%{xcode:size-in-bytes}zu", buf, 0xCu);
    }

    [v91 leaveActivity];
    goto LABEL_77;
  }
  if (!*(_DWORD *)a2)
  {
    uint64_t v8 = *(uint64_t **)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a2 + 4);
    id v10 = v6;
    os_signpost_id_t v11 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, a1);
    CFStringRef v110 = v10;
    [v10 enterRestoreResources:v8 count:v9];
    uint64_t v12 = a1[3];
    uint64_t v13 = g_signpostLog;
    unint64_t v14 = v13;
    unint64_t v15 = v11 - 1;
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v13))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v114) = v9;
      _os_signpost_emit_with_name_impl(&def_1C1270, v14, OS_SIGNPOST_INTERVAL_BEGIN, v11, "Replayer-2-restore", "RestoreResourceFromArchive x%d", buf, 8u);
    }
    long long v99 = v12;
    uint64_t v92 = v7;

    if ((int)v9 < 1)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v18 = RequestSize((uint64_t)v8);
        id v19 = &_os_log_disabled;
        if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)&_os_log_disabled))
        {
          uint64_t v20 = v8[1];
          uint64_t v21 = v8[3];
          *(_DWORD *)buf = 134218498;
          uint64_t v114 = v20;
          __int16 v115 = 2048;
          uint64_t v116 = v18;
          __int16 v117 = 2082;
          uint64_t v118 = v21;
          _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)&_os_log_disabled, OS_SIGNPOST_INTERVAL_BEGIN, v11, "Replayer-6-high", "%llu. %{xcode:size-in-bytes}zu %{public}s", buf, 0x20u);
        }

        uint64_t v22 = *v8;
        if (*v8 == 86)
        {
          GTMTLReplayController_restoreIOSurfaceData_length_forPlane((uint64_t)a1, (uint64_t)v8);
        }
        else if (v22 == 80)
        {
          GTMTLReplayController_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage((uint64_t)a1, (uint64_t)v8);
        }
        else if (v22 == 22)
        {
          GTMTLReplayController_restoreMTLBufferContents((uint64_t)a1, v8);
        }
        uint64_t v23 = g_signpostLog;
        uint64_t v24 = v23;
        if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v23))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&def_1C1270, v24, OS_SIGNPOST_INTERVAL_END, v11, "Replayer-6-high", (const char *)&unk_4CA5E5, buf, 2u);
        }
        v16 += v18;

        v8 += 8;
        --v9;
      }
      while (v9);
    }
    unint64_t v83 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"RestoreResourcesFromArchive"];
    uint64_t v29 = v99;
    uint64_t v84 = [v99 commandBuffer];
    [v84 setLabel:v83];

    [v99 commitCommandBufferWithLog:v110];
    int v85 = g_signpostLog;
    int v86 = v85;
    if (v15 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v85))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v114 = v16;
      _os_signpost_emit_with_name_impl(&def_1C1270, v86, OS_SIGNPOST_INTERVAL_END, v11, "Replayer-2-restore", "%{xcode:size-in-bytes}zu", buf, 0xCu);
    }

    [v110 leaveActivity];
LABEL_77:
    char v7 = v92;
  }
}

uint64_t RequestSize(uint64_t a1)
{
  uint64_t result = 0;
  uint64_t v3 = *(void *)a1;
  if (*(uint64_t *)a1 > 49)
  {
    if (v3 == 86) {
      return *(unsigned int *)(a1 + 32);
    }
    if (v3 == 80) {
      return *(unsigned int *)(a1 + 56);
    }
    if (v3 != 50) {
      return result;
    }
    return *(void *)(a1 + 40);
  }
  if (v3 == 16) {
    return *(void *)(a1 + 32);
  }
  if (v3 == 22) {
    return *(void *)(a1 + 40);
  }
  return result;
}

void GTMTLReplayController_restoreIOSurfaceData_length_forPlane(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 152);
  id v5 = *v4;
  Data = GTCaptureArchive_readData(**(const char ****)a1, v4, *(char **)(a2 + 24), *v4, 0);
  unint64_t v8 = v7;
  id v37 = *(id *)(a1 + 8);
  uint64_t v9 = [v37 textureForKey:*(void *)(a2 + 8)];
  id v10 = (__IOSurface *)[v9 iosurface];
  os_signpost_id_t v11 = v10;
  if (Data) {
    BOOL v12 = v8 >= 0x10;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12 && *(void *)Data == 0x63617074757265)
  {
    IOSurfaceLock(v10, 0, 0);
    if (!IOSurfaceGetPlaneCount(v11)) {
      IOSurfaceGetAllocSize(v11);
    }
    uint64_t v13 = *((void *)Data + 2);
    if (v13 <= 1)
    {
      if (v13 != 1) {
        goto LABEL_31;
      }
      uint64_t v14 = *(int *)(a2 + 36);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v29 = Data;
    if (*(void *)Data == 0x63617074757265)
    {
      uint64_t v30 = *((int *)Data + 3);
      if (*((_WORD *)Data + 4) == 1) {
        v30 += 16;
      }
      uint64_t v29 = &Data[v30];
    }
    uint64_t v31 = 0;
    uint64_t v32 = (size_t *)(Data + 64);
    do
    {
      IOSurfaceGetHeightOfPlane(v11, v14 + v31);
      IOSurfaceGetWidthOfPlane(v11, v14 + v31);
      IOSurfaceGetBytesPerRowOfPlane(v11, v14 + v31);
      BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(v11, v14 + v31);
      memcpy(BaseAddressOfPlane, v29, *v32);
      size_t v34 = *v32;
      v32 += 6;
      v29 += v34;
      ++v31;
    }
    while (*((void *)Data + 2) > v31);
  }
  else if (((unint64_t)[v9 pixelFormat] & 0xFFFFFFFFFFFFFFFELL) == 0x226)
  {
    os_signpost_id_t v11 = (__IOSurface *)[v9 iosurface];
    IOSurfaceLock(v11, 0, 0);
    Planeuint64_t Count = IOSurfaceGetPlaneCount(v11);
    if (PlaneCount)
    {
      size_t v16 = PlaneCount;
      uint64_t v35 = v9;
      unint64_t v36 = v5;
      size_t v17 = 0;
      uint64_t v18 = 0;
      do
      {
        size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(v11, v17);
        size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(v11, v17);
        size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v11, v17);
        size_t BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(v11, v17);
        uint64_t v23 = (char *)IOSurfaceGetBaseAddressOfPlane(v11, v17);
        if (HeightOfPlane)
        {
          uint64_t v24 = v23;
          size_t v25 = BytesPerElementOfPlane * WidthOfPlane;
          do
          {
            memcpy(v24, &Data[v18], v25);
            v18 += v25;
            v24 += BytesPerRowOfPlane;
            --HeightOfPlane;
          }
          while (HeightOfPlane);
        }
        ++v17;
      }
      while (v17 != v16);
      uint64_t v9 = v35;
      id v5 = v36;
    }
  }
  else
  {
    IOSurfaceLock(v11, 0, 0);
    uint64_t v26 = IOSurfaceGetBaseAddressOfPlane(v11, *(unsigned int *)(a2 + 36));
    size_t v27 = *(unsigned int *)(a2 + 32);
    if (IOSurfaceGetAllocSize(v11) <= v27) {
      size_t AllocSize = IOSurfaceGetAllocSize(v11);
    }
    else {
      size_t AllocSize = *(unsigned int *)(a2 + 32);
    }
    memcpy(v26, Data, AllocSize);
  }
LABEL_31:
  IOSurfaceUnlock(v11, 0, 0);
  apr_pool_clear(v5);
}

uint64_t CountRequestsWithinCapacity(uint64_t a1, uint64_t a2)
{
  if ((int)a2 >= 2)
  {
    uint64_t v2 = a2;
    unint64_t v4 = RequestSize(a1);
    uint64_t v5 = a1 + 64;
    uint64_t v6 = 1;
    while (1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)v5;
      if (*(uint64_t *)v5 <= 56)
      {
        if (v8 == 16)
        {
          uint64_t v10 = v4 + 31;
          uint64_t v9 = 32;
          goto LABEL_22;
        }
        if (v8 != 22) {
          goto LABEL_10;
        }
      }
      else if (v8 != 57)
      {
        if (v8 == 86)
        {
          uint64_t v10 = v4 + 255;
LABEL_19:
          uint64_t v9 = 256;
          goto LABEL_22;
        }
        if (v8 == 80)
        {
          uint64_t v9 = *(unsigned __int16 *)(v5 + 60);
          uint64_t v10 = v4 + v9 - 1;
          goto LABEL_22;
        }
LABEL_10:
        uint64_t v7 = -1;
      }
      uint64_t v10 = v7 + v4;
      if (v8 > 79)
      {
        if (v8 == 86) {
          goto LABEL_19;
        }
        if (v8 == 80)
        {
          uint64_t v9 = *(unsigned __int16 *)(v5 + 60);
          goto LABEL_22;
        }
      }
      else if (v8 == 22 || v8 == 57)
      {
        uint64_t v9 = 1;
        goto LABEL_22;
      }
      uint64_t v9 = 0;
LABEL_22:
      unint64_t v4 = (v10 & -v9) + RequestSize(v5);
      if (v4 > 0x2000000) {
        return v6;
      }
      ++v6;
      v5 += 64;
      if (v2 == v6) {
        return v2;
      }
    }
  }
  return 1;
}

uint64_t CompareRequestsBySize(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = RequestSize(a2);
  unint64_t v5 = RequestSize(a1);
  if (v4 < v5) {
    return 0xFFFFFFFFLL;
  }
  if (v4 != v5) {
    return 1;
  }
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = v7 >= v8;
  BOOL v10 = v7 != v8;
  if (v9) {
    return v10;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t StartLoadingThread()
{
  uint64_t v0 = __chkstk_darwin();
  long long v47 = 0;
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v1);
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = (atomic_uint *)(v2 + 22512);
  id v4 = *(id *)(v2 + 8);
  unint64_t v5 = newpool;
  apr_pool_create_ex(&v47, newpool, 0, v6);
  *(void *)(v0 + 16) = apr_hash_make(v47);
  uint64_t v33 = *(void **)v2;
  id v34 = v4;
  uint64_t v35 = 0;
  unint64_t v7 = [GTMTLReplaySharedBlitBuffer alloc];
  id v31 = v34;
  unint64_t v8 = [v34 defaultCommandQueue];
  unint64_t v36 = [(GTMTLReplaySharedBlitBuffer *)v7 initWithCommandQueue:v8 resourcePool:*(void *)(v2 + 16)];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v44 = 0;
  unint64_t v45 = GTCaptureArchiveDecompressor_create(v5);
  bzero(&v46, 0x5798uLL);

  while (1)
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 22520), 0xFFFFFFFFFFFFFFFFLL);
    if (atomic_load((unsigned int *)(v2 + 22516))) {
      break;
    }
    BOOL v10 = pthread_self();
    os_signpost_id_t v11 = [GTMTLReplayActivityLog alloc];
    BOOL v12 = [(GTMTLReplayActivityLog *)v11 initWithLog:g_activityLog];
    pthread_rwlock_wrlock(&rwlock);
    uint64_t v13 = 0;
    uint64_t v14 = (pthread_t *)threadLocalLogs;
    do
    {
      if (pthread_equal(v10, *v14))
      {
        size_t v17 = (void **)&threadLocalLogs[2 * v13 + 1];
        uint64_t v18 = v12;
        goto LABEL_12;
      }
      ++v13;
      v14 += 2;
    }
    while (v13 != 7);
    uint64_t v15 = 0;
    size_t v16 = &qword_772D30;
    while (*v16)
    {
      ++v15;
      v16 += 2;
      if (v15 == 7) {
        goto LABEL_13;
      }
    }
    id v19 = &threadLocalLogs[2 * v15];
    uint64_t v20 = v12;
    *id v19 = (uint64_t)v10;
    size_t v17 = (void **)(v19 + 1);
LABEL_12:
    uint64_t v21 = *v17;
    *size_t v17 = v12;

LABEL_13:
    pthread_rwlock_unlock(&rwlock);

    signed int add = atomic_fetch_add(v3, 1u);
    uint64_t v23 = *(void *)(v2 + 22504);
    if (add < *(_DWORD *)(v23 + 12))
    {
      uint64_t v24 = *(void *)(v23 + 24);
      if (v24)
      {
        uint64_t v25 = v24 + 16 * add;
        do
        {
          DoLoadJob(&v33, v25, v12, *(apr_hash_t **)(v0 + 16));
          signed int v27 = atomic_fetch_add(v3, 1u);
          uint64_t v28 = *(void *)(v2 + 22504);
          if (v27 >= *(_DWORD *)(v28 + 12)) {
            break;
          }
          uint64_t v29 = *(void *)(v28 + 24);
          uint64_t v25 = v29 + 16 * v27;
        }
        while (v29);
      }
    }
    [(GTMTLReplaySharedBlitBuffer *)v36 releaseBuffer];
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 22528));
  }
  apr_pool_destroy(newpool);
  __destructor_8_s8_s16_s24_s40_s48_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_S_s144_S_s22520_s22528_S_s22536_s22560_s22568((uint64_t)&v33);

  return 0;
}

void sub_2AA5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __destructor_8_s8_s16_s24_s40_s48_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_S_s144_S_s22520_s22528_S_s22536_s22560_s22568((uint64_t)va);
  _Unwind_Resume(a1);
}

void __destructor_8_s8_s16_s24_s40_s48_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_S_s144_S_s22520_s22528_S_s22536_s22560_s22568(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 22568);
}

uint64_t GTMTLReplayController_cleanup(intptr_t a1)
{
  intptr_t v2 = a1 + 22516;
  atomic_store(1u, (unsigned int *)(a1 + 22516));
  SignalLoadQueueThreads(a1, *(_DWORD *)(a1 + 22576));
  if (*(int *)(v2 + 60) >= 1)
  {
    uint64_t v3 = 0;
    id v4 = (_opaque_pthread_t **)(a1 + 22584);
    do
    {
      unint64_t v5 = *v4;
      v4 += 3;
      pthread_join(v5, 0);
      ++v3;
    }
    while (v3 < *(int *)(v2 + 60));
  }
  uint64_t v6 = *(void **)(a1 + 22520);
  *(void *)(a1 + 22520) = 0;

  unint64_t v7 = *(void **)(a1 + 22528);
  *(void *)(a1 + 22528) = 0;

  unint64_t v8 = *(void **)(a1 + 22536);
  *(void *)(a1 + 22536) = 0;

  BOOL v9 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  BOOL v10 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  os_signpost_id_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  BOOL v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;

  uint64_t v13 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;

  uint64_t v14 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;

  uint64_t v15 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = 0;

  size_t v16 = +[NSFileManager defaultManager];
  [v16 removeItemAtURL:*(void *)(a1 + 22560) error:0];

  size_t v17 = *(void **)(a1 + 22560);
  *(void *)(a1 + 22560) = 0;

  uint64_t v18 = *(void **)(a1 + 22568);
  *(void *)(a1 + 22568) = 0;

  id v19 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;

  uint64_t v20 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = 0;

  GTMTLReplayController_tileMemoryFree(a1);
  return 0;
}

void GTMTLReplayController_optimizeRestores(uint64_t a1, unint64_t a2)
{
  id v4 = *(void **)(a1 + 22536);
  *(void *)(a1 + 22536) = 0;

  apr_hash_clear(*(apr_hash_t **)(a1 + 22544));
  long long v149 = (unsigned int *)a1;
  *(void *)(a1 + 22552) = *(void *)(*(void *)a1 + 136);
  if (a2 && (dword_77313C & 0x10) == 0)
  {
    [*(id *)(a1 + 24) releaseBuffer];
    [*(id *)(a1 + 16) waitUntilCapacity];
    [(id)g_activityLog enterOptimizeRestores];
    os_signpost_id_t v5 = os_signpost_id_generate((os_log_t)g_signpostLog);
    uint64_t v6 = g_signpostLog;
    unint64_t v7 = v6;
    os_signpost_id_t spid = v5;
    unint64_t v136 = v5 - 1;
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&def_1C1270, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "Replayer-1-serial", "PlayCaptureAndRewind", buf, 2u);
    }

    newpool = 0;
    apr_pool_create_ex(&newpool, 0, 0, v8);
    p = newpool;
    uint64_t v140 = (apr_pool_t **)apr_hash_make(newpool);
    GTMTLReplayController_rewind((uint64_t)v149);
    uint64_t v9 = *(void *)(*(void *)v149 + 120);
    BOOL v10 = v149 + 5620;
    for (i = v149[5620]; i < *(_DWORD *)(v9 + 12); *BOOL v10 = i)
    {
      uint64_t v13 = *(void *)(v9 + 24) + ((unint64_t)*v10 << 6);
      int v14 = *(_DWORD *)(v13 + 8);
      if (GetFuncEnumConstructorType(v14) == 25)
      {
        CompareCommandBufferRestore((apr_array_header_t **)v149, v13, v140);
        int v14 = *(_DWORD *)(v13 + 8);
      }
      if (GetFuncEnumConstructorType(v14) == 51) {
        CompareCommandBufferRestore((apr_array_header_t **)v149, v13, v140);
      }
      GTMTLReplayController_updateCommandEncoder((uint64_t)v149, v13);
      GTMTLReplayController_defaultDispatchFunction((uint64_t)v149, v13);
      unsigned int i = *v10 + 1;
    }
    RewindWithoutRestore((uint64_t)v149);
    RestoreCommandBuffer((apr_array_header_t **)v149, 0, p, (apr_hash_t *)v140);
    uint64_t v15 = g_signpostLog;
    size_t v16 = v15;
    if (v136 > 0xFFFFFFFFFFFFFFFDLL)
    {

      size_t v17 = g_signpostLog;
    }
    else
    {
      if (os_signpost_enabled((os_log_t)v15))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, v16, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
      }

      size_t v17 = g_signpostLog;
      if (os_signpost_enabled((os_log_t)v17))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v17, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Replayer-1-serial", "SortCommandBufferKeys", buf, 2u);
      }
    }

    uint64_t v18 = *(void *)(*(void *)v149 + 136);
    arr = apr_array_make(p, *(_DWORD *)(v18 + 48), 8);
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = 0;
    id v19 = (apr_hash_index_t *)(v18 + 16);
    *(void *)(v18 + 16) = v18;
    *(_DWORD *)(v18 + 40) = 0;
    while (1)
    {
      uint64_t v20 = apr_hash_next(v19);
      if (!v20) {
        break;
      }
      id v19 = v20;
      uint64_t v21 = **(void **)(*((void *)v20 + 1) + 16);
      *(void *)apr_array_push(arr) = v21;
    }
    qsort(arr->elts, arr->nelts, arr->elt_size, (int (__cdecl *)(const void *, const void *))CompareU64Pointer);
    int nelts = arr->nelts;
    if (nelts)
    {
      elts = arr->elts;
      if (!*(void *)elts)
      {
        memmove(elts, elts + 8, 8 * (nelts - 1));
        *(void *)&arr->elts[8 * arr->nelts - 8] = 0;
      }
    }
    uint64_t v24 = g_signpostLog;
    uint64_t v25 = v24;
    if (v136 > 0xFFFFFFFFFFFFFFFDLL)
    {

      uint64_t v26 = g_signpostLog;
    }
    else
    {
      if (os_signpost_enabled((os_log_t)v24))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, v25, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
      }

      uint64_t v26 = g_signpostLog;
      if (os_signpost_enabled((os_log_t)v26))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v26, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Replayer-1-serial", "FitResourcesInOptimizedBuffer", buf, 2u);
      }
    }

    uint64_t v141 = (apr_pool_t *)**((void **)v149 + 2819);
    ht = apr_hash_make(p);
    if (arr->nelts >= 1)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = arr;
      while (1)
      {
        *(void *)&v174[0] = 0;
        *(void *)&v174[0] = *(void *)&v29->elts[8 * v27];
        uint64_t v30 = *find_entry((uint64_t)v140, v174, 8uLL, 0);
        uint64_t v31 = v30 ? *(void *)(v30 + 32) : 0;
        uint64_t v32 = *find_entry(v18, v174, 8uLL, 0);
        uint64_t v33 = v32 ? *(const apr_array_header_t **)(v32 + 32) : 0;
        id v34 = apr_array_copy(v141, v33);
        qsort(v34->elts, v34->nelts, v34->elt_size, (int (__cdecl *)(const void *, const void *))CompareRequestsBySize);
        uint64_t v35 = v34->nelts;
        v34->int nelts = 0;
        if ((int)v35 >= 1) {
          break;
        }
LABEL_97:
        uint64_t v29 = arr;
        apr_hash_set(ht, &arr->elts[8 * v27], 8, v34);
        int v63 = v34->nelts;
        unint64_t v64 = (apr_array_header_t *)apr_palloc(v141, 0x20uLL);
        v64->pool = v141;
        int elt_size = v34->elt_size;
        v64->int nelts = v35 - v63;
        v64->nalloc = v35 - v63;
        v64->int elt_size = elt_size;
        v64->elts = &v34->elts[v34->elt_size * (uint64_t)v63];
        GroupRequestsByCapacity(v64, v66, v67, v68);
        unint64_t v69 = (apr_hash_t *)*((void *)v149 + 2819);
        unint64_t v70 = apr_palloc(v141, 8uLL);
        *unint64_t v70 = *(void *)&v174[0];
        apr_hash_set(v69, v70, 8, v64);
        if (++v27 >= arr->nelts) {
          goto LABEL_100;
        }
      }
      uint64_t v36 = 0;
      while (1)
      {
        long long v37 = v34->elts;
        long long v38 = &v37[64 * v36];
        if (*(void *)v38 != 22)
        {
          if (*(void *)v38 != 80) {
            goto LABEL_96;
          }
          *(void *)&long long v180 = 0;
          long long v178 = 0u;
          long long v179 = 0u;
          *(_OWORD *)buf = 0u;
          GTMTLSMContext_getTextureDescriptor(*(uint64_t **)(*(void *)v149 + 40), *(void *)&v37[64 * v36 + 8], *(void *)&v37[64 * v36 + 16], (uint64_t)buf);
          if (GetPlanePixelFormat(WORD1(v179), 0)) {
            goto LABEL_96;
          }
        }
        uint64_t v39 = *find_entry(v31, v38 + 8, 8uLL, 0);
        if (!v39 || (uint64_t v40 = *(void *)(v39 + 32)) == 0)
        {
          uint64_t v43 = RequestSize((uint64_t)&v37[64 * v36]);
          uint64_t v41 = *(void *)v38;
          goto LABEL_62;
        }
        uint64_t v41 = *(void *)v38;
        if (*(uint64_t *)v38 <= 56)
        {
          if (v41 != 16)
          {
            uint64_t v42 = 1;
            if (v41 == 22) {
              goto LABEL_57;
            }
            goto LABEL_54;
          }
          uint64_t v42 = 32;
        }
        else
        {
          uint64_t v42 = 1;
          if (v41 == 57) {
            goto LABEL_57;
          }
          if (v41 != 86)
          {
            if (v41 == 80)
            {
              uint64_t v42 = *(unsigned __int16 *)&v37[64 * v36 + 60];
              goto LABEL_57;
            }
LABEL_54:
            uint64_t v42 = 0;
            goto LABEL_57;
          }
          uint64_t v42 = 256;
        }
LABEL_57:
        uint64_t v44 = *(unsigned int *)(v40 + 12);
        if ((int)v44 < 1)
        {
          uint64_t v43 = 0;
        }
        else
        {
          uint64_t v43 = 0;
          uint64_t v45 = v42 - 1;
          uint64_t v46 = -v42;
          long long v47 = (uint64_t *)(*(void *)(v40 + 24) + 8);
          do
          {
            uint64_t v48 = *v47;
            v47 += 2;
            uint64_t v43 = ((v45 + v43) & v46) + v48;
            --v44;
          }
          while (v44);
        }
LABEL_62:
        uint64_t v49 = 0;
        if (v41 <= 56)
        {
          if (v41 == 16)
          {
            uint64_t v51 = v28 + 31;
            uint64_t v50 = 32;
            goto LABEL_78;
          }
          if (v41 != 22) {
            goto LABEL_69;
          }
        }
        else if (v41 != 57)
        {
          if (v41 == 86)
          {
            uint64_t v51 = v28 + 255;
            uint64_t v50 = 256;
            goto LABEL_78;
          }
          if (v41 == 80)
          {
            uint64_t v50 = *(unsigned __int16 *)&v37[64 * v36 + 60];
            uint64_t v51 = v28 + v50 - 1;
            goto LABEL_78;
          }
LABEL_69:
          uint64_t v49 = -1;
        }
        uint64_t v51 = v49 + v28;
        uint64_t v50 = v41 <= 79 && (v41 == 22 || v41 == 57);
LABEL_78:
        if ((v51 & (unint64_t)-v50) + v43 <= a2)
        {
          uint64_t v52 = 0;
          if (v41 <= 56)
          {
            if (v41 == 16)
            {
              uint64_t v54 = v28 + 31;
              uint64_t v53 = 32;
              goto LABEL_95;
            }
            if (v41 != 22) {
              goto LABEL_86;
            }
          }
          else if (v41 != 57)
          {
            if (v41 == 86)
            {
              uint64_t v54 = v28 + 255;
              uint64_t v53 = 256;
              goto LABEL_95;
            }
            if (v41 == 80)
            {
              uint64_t v53 = *(unsigned __int16 *)&v37[64 * v36 + 60];
              uint64_t v54 = v28 + v53 - 1;
LABEL_95:
              uint64_t v28 = (v54 & -v53) + v43;
              uint64_t v55 = v34->nelts;
              v34->int nelts = v55 + 1;
              uint64_t v56 = v34->elts;
              uint64_t v57 = &v56[64 * v36];
              *(_OWORD *)buf = *(_OWORD *)v57;
              long long v178 = *((_OWORD *)v57 + 1);
              long long v179 = *((_OWORD *)v57 + 2);
              long long v180 = *((_OWORD *)v57 + 3);
              uint64_t v58 = &v56[64 * v55];
              long long v59 = *((_OWORD *)v58 + 3);
              long long v61 = *(_OWORD *)v58;
              long long v60 = *((_OWORD *)v58 + 1);
              *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
              *((_OWORD *)v57 + 3) = v59;
              *(_OWORD *)uint64_t v57 = v61;
              *((_OWORD *)v57 + 1) = v60;
              uint64_t v62 = &v34->elts[64 * v55];
              *(_OWORD *)uint64_t v62 = *(_OWORD *)buf;
              *((_OWORD *)v62 + 1) = v178;
              *((_OWORD *)v62 + 2) = v179;
              *((_OWORD *)v62 + 3) = v180;
              goto LABEL_96;
            }
LABEL_86:
            uint64_t v52 = -1;
          }
          uint64_t v54 = v52 + v28;
          uint64_t v53 = v41 <= 79 && (v41 == 22 || v41 == 57);
          goto LABEL_95;
        }
LABEL_96:
        if (++v36 == v35) {
          goto LABEL_97;
        }
      }
    }
    uint64_t v28 = 0;
LABEL_100:
    unint64_t v71 = g_signpostLog;
    unint64_t v72 = v71;
    if (v136 >= 0xFFFFFFFFFFFFFFFELL)
    {

      size_t v73 = g_signpostLog;
    }
    else
    {
      if (os_signpost_enabled((os_log_t)v71))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, v72, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
      }

      size_t v73 = g_signpostLog;
      if (os_signpost_enabled((os_log_t)v73))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, (os_log_t)v73, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Replayer-1-serial", "FillDirtyRangesInOptimizedBuffer", buf, 2u);
      }
    }

    int v74 = v149;
    long long v134 = [*((id *)v149 + 1) defaultDevice];
    uint64_t v75 = arr;
    if (v28)
    {
      id v76 = [v134 newBufferWithLength:v28 options:288];
      int64x2_t v77 = (void *)*((void *)v149 + 2817);
      *((void *)v149 + 2817) = v76;

      int v74 = v149;
      uint64_t v75 = arr;
    }
    if (v75->nelts >= 1)
    {
      uint64_t v78 = 0;
      uint64_t v169 = 0;
      while (1)
      {
        uint64_t v170 = 0;
        uint64_t v138 = v78;
        uint64_t v170 = *(void *)&v75->elts[8 * v78];
        uint64_t v79 = *find_entry((uint64_t)v140, &v170, 8uLL, 0);
        uint64_t v145 = v79 ? *(void *)(v79 + 32) : 0;
        uint64_t v80 = *find_entry((uint64_t)ht, &v170, 8uLL, 0);
        uint64_t v81 = v80 ? *(void *)(v80 + 32) : 0;
        id v82 = apr_array_make(v141, *(_DWORD *)(v81 + 12), 48);
        unint64_t v83 = (apr_hash_t *)*((void *)v74 + 2818);
        uint64_t v84 = apr_palloc(v141, 8uLL);
        *uint64_t v84 = v170;
        long long v164 = v82;
        apr_hash_set(v83, v84, 8, v82);
        uint64_t v151 = *(void *)(v81 + 24);
        uint64_t v85 = *(unsigned int *)(v81 + 12);
        id v152 = *((id *)v74 + 2817);
        uint64_t v143 = **(const char ****)v74;
        unsigned int v148 = (apr_pool_t **)*((void *)v74 + 19);
        id v144 = *((id *)v74 + 3);
        uint64_t v147 = v85;
        if ((int)v85 >= 1) {
          break;
        }
LABEL_184:

        int v74 = v149;
        [*((id *)v149 + 3) commitCommandBuffer];
        uint64_t v78 = v138 + 1;
        uint64_t v75 = arr;
        if (v138 + 1 >= arr->nelts) {
          goto LABEL_185;
        }
      }
      uint64_t v153 = 0;
      while (1)
      {
        uint64_t v86 = v151 + (v153 << 6);
        if (*(void *)v86 == 80) {
          break;
        }
        if (*(void *)v86 == 22)
        {
          if (v145)
          {
            entry = find_entry(v145, (unsigned char *)(v151 + (v153 << 6) + 8), 8uLL, 0);
            if (*entry) {
              uint64_t v88 = *(void *)(*entry + 32);
            }
            else {
              uint64_t v88 = 0;
            }
            if (*(_DWORD *)(v88 + 12))
            {
              uint64_t v105 = v151 + (v153 << 6);
              id v165 = [v144 bufferWithLength:*(void *)(v105 + 40) alignment:1];
              GTCaptureArchive_fillBuffer(v143, v148, *(char **)(v105 + 24), (char *)[v165 contents], *(void *)(v105 + 40), 0);
              if (*(int *)(v88 + 12) >= 1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = 0;
                do
                {
                  uint64_t v169 = FillBufferWithBufferBlitOperation((uint64_t)v149, v86, v165, *(void *)(*(void *)(v88 + 24) + v106), *(void *)(*(void *)(v88 + 24) + v106 + 8), v152, v169, v164);
                  ++v107;
                  v106 += 16;
                }
                while (v107 < *(int *)(v88 + 12));
              }
LABEL_182:
            }
          }
          else
          {
            long long v99 = (size_t *)(v151 + (v153 << 6));
            size_t v100 = v99[5];
            v99 += 5;
            int v166 = [v144 bufferWithLength:v100 alignment:1];
            GTCaptureArchive_fillBuffer(v143, v148, *(char **)(v151 + (v153 << 6) + 24), (char *)[v166 contents], *v99, 0);
            uint64_t v169 = FillBufferWithBufferBlitOperation((uint64_t)v149, v86, v166, 0, *v99, v152, v169, v164);
          }
        }
        apr_pool_clear(*v148);
        if (++v153 == v147) {
          goto LABEL_184;
        }
      }
      id v165 = v152;
      unint64_t v89 = **(const char ****)v149;
      id v90 = (apr_pool_t **)*((void *)v149 + 19);
      id v163 = *((id *)v149 + 3);
      id v146 = *((id *)v149 + 1);
      uint64_t v162 = [v146 defaultDevice];
      uint64_t v91 = v151 + (v153 << 6);
      size_t FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)v89, *(char **)(v91 + 24));
      int64x2_t v93 = [v163 bufferWithLength:*FileWithFilename alignment:1];
      GTCaptureArchive_fillBuffer(v89, v90, *(char **)(v91 + 24), (char *)[v93 contents], *FileWithFilename, 0);
      unint64_t v94 = (int *)[v93 contents];
      id v95 = [v93 length];
      if (v94) {
        BOOL v96 = (unint64_t)v95 >= 0x10;
      }
      else {
        BOOL v96 = 0;
      }
      if (v96)
      {
        uint64_t v98 = v149;
        if (*(void *)v94 == 0x63617074757265)
        {
          if (*((_WORD *)v94 + 4) == 1) {
            uint64_t v97 = v94[3] + 16;
          }
          else {
            uint64_t v97 = v94[3];
          }
        }
        else
        {
          unint64_t v94 = 0;
          uint64_t v97 = 0;
        }
      }
      else
      {
        unint64_t v94 = 0;
        uint64_t v97 = 0;
        uint64_t v98 = v149;
      }
      uint64_t v101 = 0;
      uint64_t v102 = *(void *)v86;
      uint64_t v168 = v93;
      if (*(uint64_t *)v86 <= 56)
      {
        if (v102 == 16)
        {
          uint64_t v104 = v169 + 31;
          uint64_t v103 = 32;
          goto LABEL_159;
        }
        if (v102 == 22) {
          goto LABEL_142;
        }
      }
      else
      {
        switch(v102)
        {
          case '9':
LABEL_142:
            uint64_t v104 = v101 + v169;
            if (v102 <= 79)
            {
              if (v102 == 22 || v102 == 57)
              {
                uint64_t v103 = 1;
                goto LABEL_159;
              }
LABEL_158:
              uint64_t v103 = 0;
              goto LABEL_159;
            }
            if (v102 != 86)
            {
              if (v102 == 80)
              {
                uint64_t v103 = *(unsigned __int16 *)(v151 + (v153 << 6) + 60);
                goto LABEL_159;
              }
              goto LABEL_158;
            }
LABEL_156:
            uint64_t v103 = 256;
            goto LABEL_159;
          case 'V':
            uint64_t v104 = v169 + 255;
            goto LABEL_156;
          case 'P':
            uint64_t v103 = *(unsigned __int16 *)(v151 + (v153 << 6) + 60);
            uint64_t v104 = v169 + v103 - 1;
LABEL_159:
            uint64_t v176 = 0;
            long long v175 = 0u;
            memset(v174, 0, sizeof(v174));
            uint64_t v108 = v151 + (v153 << 6);
            uint64_t v158 = (uint64_t *)(v108 + 8);
            GTMTLSMContext_getTextureDescriptor(*(uint64_t **)(*(void *)v98 + 40), *(void *)(v108 + 8), *(void *)(v108 + 16), (uint64_t)v174);
            uint64_t v173 = 0;
            memset(v172, 0, sizeof(v172));
            uint64_t v161 = WORD1(v175);
            GTMTLPixelFormatGetInfoForDevice((uint64_t)v172, (uint64_t)v162, WORD1(v175));
            *(void *)&long long v184 = 0;
            if ((~DWORD2(v172[0]) & 0x60) != 0)
            {
              if ((WORD4(v172[0]) & 0x2000) != 0) {
                *(void *)&long long v184 = 4;
              }
              uint64_t v109 = 1;
            }
            else
            {
              long long v184 = xmmword_4C8070;
              uint64_t v109 = 2;
            }
            uint64_t v157 = v109;
            unint64_t v110 = 0;
            uint64_t v169 = v104 & -v103;
            uint64_t v111 = v151 + (v153 << 6);
            uint64_t v154 = (void *)(v111 + 48);
            size_t v156 = (__int16 *)(v111 + 32);
            unsigned int v112 = BYTE1(v176);
            uint64_t v159 = v94;
            uint64_t v160 = HIBYTE(v175);
            uint64_t v113 = (long long *)(v94 + 14);
            unsigned int v155 = BYTE1(v176);
            while (1)
            {
              if (v94 && *((_WORD *)v94 + 5) == 1 && *((void *)v94 + 2) >= v110)
              {
                long long v115 = *v113;
              }
              else
              {
                *(void *)&long long v114 = *v154;
                *((void *)&v114 + 1) = HIDWORD(*v154);
                long long v115 = v114;
              }
              if (v112 < 2) {
                break;
              }
              unint64_t v116 = v115;
              if (v112 != 7) {
                goto LABEL_172;
              }
LABEL_173:
              long long v167 = v115;
              uint64_t v183 = 0;
              long long v181 = 0u;
              long long v182 = 0u;
              long long v179 = 0u;
              long long v180 = 0u;
              *(_OWORD *)buf = 0u;
              long long v178 = 0u;
              uint64_t v117 = *((void *)&v184 + v110);
              GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)buf, (uint64_t)v162, v161, *(unsigned __int16 *)(v86 + 42), *(unsigned __int16 *)(v86 + 44), *(unsigned __int16 *)(v86 + 46), v160);
              if ((void)v167) {
                int v118 = v167;
              }
              else {
                int v118 = v182;
              }
              if (*((void *)&v167 + 1)) {
                int v119 = DWORD2(v167);
              }
              else {
                int v119 = v118 * v179;
              }
              uint64_t v120 = [v163 blitCommandEncoder];
              uint64_t v121 = [v168 heapBuffer];
              unsigned int v122 = (char *)[v168 heapLocation];
              uint64_t v123 = v183;
              [v120 copyFromBuffer:v121 sourceOffset:&v122[v97] toBuffer:v165 destinationOffset:v169 size:v183];

              uint64_t v124 = apr_array_push(v164);
              int v125 = *(unsigned __int16 *)(v86 + 42);
              int v126 = *(_DWORD *)(v86 + 44);
              uint64_t v127 = *v158;
              int v128 = *(unsigned __int16 *)(v86 + 36);
              int v129 = *(_DWORD *)(v86 + 38);
              __int16 v130 = *v156;
              char v131 = *(unsigned char *)(v86 + 34);
              _DWORD *v124 = v169;
              v124[1] = 80;
              v124[2] = v118;
              v124[3] = v119;
              v124[4] = v125;
              v124[5] = v126;
              *((void *)v124 + 3) = v127;
              v124[8] = v128;
              v124[9] = v129;
              *((_WORD *)v124 + 20) = v130;
              *((unsigned char *)v124 + 42) = v131;
              v169 += v123;
              v97 += v123;
              *((unsigned char *)v124 + 43) = v117;
              ++v110;
              v113 += 3;
              v124[11] = 0;
              unint64_t v94 = v159;
              unsigned int v112 = v155;
              if (v157 == v110)
              {

                goto LABEL_182;
              }
            }
            unint64_t v116 = 0;
LABEL_172:
            long long v115 = v116;
            goto LABEL_173;
        }
      }
      uint64_t v101 = -1;
      goto LABEL_142;
    }
LABEL_185:
    apr_pool_destroy(p);
    int v132 = g_signpostLog;
    uint64_t v133 = v132;
    if (v136 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v132))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&def_1C1270, v133, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
    }

    [(id)g_activityLog leaveActivity];
  }
}

void sub_2ABA24(_Unwind_Exception *a1)
{
}

id GTMTLReplayController_rewind(uint64_t a1)
{
  if (s_logUsingOsLog)
  {
    intptr_t v2 = gt_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&def_1C1270, v2, OS_LOG_TYPE_INFO, "Rewinding", buf, 2u);
    }
  }
  else
  {
    uint64_t v3 = __stdoutp;
    id v4 = +[NSString stringWithFormat:@"Rewinding"];
    fprintf(v3, "%s\n", (const char *)[v4 UTF8String]);
  }
  Rewind((_DWORD *)a1);
  return [*(id *)(a1 + 8) setLayerClass:objc_opt_class()];
}

id CompareCommandBufferRestore(apr_array_header_t **a1, uint64_t a2, apr_pool_t **a3)
{
  [(id)g_activityLog enterRestoreCommandBufferAtIndex:*((unsigned int *)a1 + 5620)];
  uint64_t v9 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), *(void *)&(*a1)->nalloc)+ 1);
  [(apr_array_header_t *)a1[3] commitCommandBuffer];
  RestoreCommandBuffer(a1, v9, *a3, (apr_hash_t *)a3);
  uint64_t v6 = *find_entry(*(void *)&(*a1)[4].nalloc, &v9, 8uLL, 0);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  DYMTLIndirectArgumentBufferManager_processCommandBuffer((uint64_t)a1, v7);
  return [(id)g_activityLog leaveActivity];
}

void sub_2ABC2C(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

void RewindWithoutRestore(uint64_t a1)
{
  uint64_t v1 = (id *)a1;
  GTMTLReplayController_tileMemoryFree(a1);
  id v2 = v1[1];
  id v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 24);
  id v5 = [objc_alloc((Class)NSMutableArray) initWithCapacity:*(int *)(v4 + 12)];
  if (*(int *)(v4 + 12) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(*(void *)(v4 + 24) + 8 * v6) + 8)];
      [v5 addObject:v7];

      ++v6;
    }
    while (v6 < *(int *)(v4 + 12));
  }
  [v2 removeResourcesForKeys:v5];

  if ((dword_77313C & 0x8000) != 0 || (*((unsigned char *)v3 + 272) & 4) != 0)
  {
    unint64_t v8 = [v1[1] defaultCommandQueue];
    [v8 finish];
  }
  uint64_t v9 = *((void *)v3 + 25);
  if (*(int *)(v9 + 12) >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *((void *)v3 + 10);
    do
    {
      uint64_t v12 = *(void *)(*(void *)(v9 + 24) + 8 * v10);
      if (v12) {
        uint64_t v12 = *(void *)(v12 + 8);
      }
      uint64_t v13 = *((void *)v3 + 1);
      *(void *)&long long v66 = v12;
      uint64_t v14 = *find_entry(v13, &v66, 8uLL, 0);
      if (v14) {
        uint64_t v15 = *(void *)(v14 + 32);
      }
      else {
        uint64_t v15 = 0;
      }
      CreateResourceFromStream(v1, v15, v11);
      ++v10;
    }
    while (v10 < *(int *)(v9 + 12));
  }
  if ((GT_SUPPORT_0 & 0x800) != 0 && *(_DWORD *)(*((void *)v3 + 28) + 12))
  {
    size_t v16 = [v2 defaultCommandQueue];
    size_t v17 = InternalCommandBuffer(v16, @"MapSparseTextureRegions");

    uint64_t v50 = v17;
    uint64_t v18 = [v17 resourceStateCommandEncoder];
    uint64_t v54 = v1;
    id v19 = *(apr_pool_t **)v1[19];
    uint64_t v52 = v3;
    uint64_t v20 = *((void *)v3 + 28);
    id v21 = v18;
    id v53 = v2;
    id v57 = v2;
    uint64_t v22 = apr_array_make(v19, 8, 48);
    uint64_t v23 = apr_array_make(v19, 8, 48);
    uint64_t v24 = apr_array_make(v19, 8, 8);
    uint64_t v49 = v19;
    uint64_t v25 = apr_array_make(v19, 8, 8);
    uint64_t v58 = v21;
    uint64_t v26 = [v21 device];
    uint64_t v27 = (void *)v26;
    int v28 = *(_DWORD *)(v20 + 12);
    if (v28 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v55 = v20;
      uint64_t v56 = (void *)v26;
      do
      {
        uint64_t v31 = *(void *)(v20 + 24) + (v29 << 6);
        uint64_t v33 = *(void *)(v31 + 8);
        uint64_t v32 = (uint64_t *)(v31 + 8);
        if (v33 != v30)
        {
          long long v60 = v32;
          uint64_t v61 = v29;
          id v34 = [v57 textureForKey:];
          uint64_t v35 = (char *)[v34 textureType];
          unint64_t v36 = (unint64_t)[v34 width];
          unint64_t v37 = (unint64_t)[v34 height];
          unint64_t v38 = (unint64_t)[v34 depth];
          uint64_t v62 = v34;
          id v63 = [v34 firstMipmapInTail];
          long long v59 = v35;
          uint64_t v39 = (uint64_t)[v34 arrayLength];
          unint64_t v40 = 0;
          if ((unint64_t)(v35 - 5) >= 2) {
            uint64_t v41 = v39;
          }
          else {
            uint64_t v41 = 6 * v39;
          }
          do
          {
            if (v41)
            {
              for (uint64_t i = 0; i != v41; ++i)
              {
                apr_array_push(v23);
                uint64_t v43 = apr_array_push(v22);
                *uint64_t v43 = 0;
                v43[1] = 0;
                v43[2] = 0;
                _OWORD v43[3] = v36;
                v43[4] = v37;
                v43[5] = v38;
                *(void *)apr_array_push(v24) = v40;
                *(void *)apr_array_push(v25) = i;
              }
            }
            if (v36 <= 1) {
              unint64_t v36 = 1;
            }
            else {
              v36 >>= 1;
            }
            if (v37 <= 1) {
              unint64_t v37 = 1;
            }
            else {
              v37 >>= 1;
            }
            if (v38 <= 1) {
              unint64_t v38 = 1;
            }
            else {
              v38 >>= 1;
            }
            ++v40;
          }
          while (v40 <= (unint64_t)v63);
          long long v66 = 0uLL;
          uint64_t v67 = 0;
          id v44 = [v62 pixelFormat];
          id v45 = [v62 sampleCount];
          uint64_t v27 = v56;
          if (v56)
          {
            [v56 sparseTileSizeWithTextureType:v59 pixelFormat:v44 sampleCount:v45];
          }
          else
          {
            long long v66 = 0uLL;
            uint64_t v67 = 0;
          }
          uint64_t v20 = v55;
          uint64_t v29 = v61;
          elts = v22->elts;
          long long v47 = v23->elts;
          uint64_t nelts = v22->nelts;
          long long v64 = v66;
          uint64_t v65 = v67;
          [v56 convertSparsePixelRegions:elts toTileRegions:v47 withTileSize:&v64 alignmentMode:0 numRegions:nelts];
          [v58 updateTextureMappings:v62 mode:1 regions:v23->elts mipLevels:v24->elts slices:v25->elts numRegions:v22->nelts];
          v22->uint64_t nelts = 0;
          v23->uint64_t nelts = 0;
          v24->uint64_t nelts = 0;
          v25->uint64_t nelts = 0;
          uint64_t v30 = *v60;

          int v28 = *(_DWORD *)(v55 + 12);
        }
        ++v29;
      }
      while (v29 < v28);
    }

    MapSparseTextureRegions(v58, v57, v52[28], v49);
    apr_pool_clear(v49);
    [v58 endEncoding];
    GTMTLReplay_commitCommandBuffer(v50);

    id v2 = v53;
    uint64_t v1 = v54;
  }
  v1[2810] = 0;
  bzero(v1 + 20, 0x5720uLL);
}

apr_array_header_t *RestoreCommandBuffer(apr_array_header_t **a1, uint64_t a2, apr_pool_t *pool, apr_hash_t *a4)
{
  uint64_t v48 = a2;
  unint64_t v8 = apr_hash_make(pool);
  uint64_t v9 = apr_palloc(pool, 8uLL);
  *uint64_t v9 = a2;
  apr_hash_set(a4, v9, 8, v8);
  uint64_t result = (apr_array_header_t *)find_entry(*(void *)&(*a1)[4].elt_size, &v48, 8uLL, 0);
  if (result->pool)
  {
    uint64_t v11 = *((void *)result->pool + 4);
    if (v11)
    {
      int v12 = *(_DWORD *)(v11 + 12);
      if (v12)
      {
        long long v47 = (atomic_uint *)(a1 + 2814);
        if (v12 >= 1)
        {
          int v13 = 0;
          do
          {
            uint64_t v14 = apr_array_push(a1[2813]);
            *(_DWORD *)uint64_t v14 = 1;
            uint64_t v15 = *(void *)(v11 + 24) + ((uint64_t)v13 << 6);
            v14[1] = v15;
            int v16 = *(_DWORD *)(v11 + 12);
            int v17 = CountRequestsWithinCapacity(v15, (v16 - v13));
            *((_DWORD *)v14 + 1) = v17;
            v13 += v17;
          }
          while (v13 < v16);
        }
        SignalLoadQueueThreads((intptr_t)a1, a1[2813]->nelts - 1);
        uint64_t v18 = *(void *)&(*a1)->elt_size;
        uint64_t v49 = v48;
        entry = find_entry(v18, &v49, 8uLL, 0);
        unint64_t v20 = CommandBufferCommitIndex(*(void *)(*(void *)(*entry + 32) + 32));
        RestoreVisibleFunctionTablesForFunctionIndex((id *)a1, v20);
        uint64_t v21 = *(void *)&(*a1)->elt_size;
        uint64_t v49 = v48;
        uint64_t v22 = find_entry(v21, &v49, 8uLL, 0);
        unint64_t v23 = CommandBufferCommitIndex(*(void *)(*(void *)(*v22 + 32) + 32));
        RestoreIntersectionFunctionTablesForFunctionIndex((uint64_t *)a1, v23);
        uint64_t v24 = [GTMTLReplayActivityLog alloc];
        uint64_t v25 = [(GTMTLReplayActivityLog *)v24 initWithLog:g_activityLog];
        signed int add = atomic_fetch_add(v47, 1u);
        uint64_t v27 = a1[2813];
        if (add < v27->nelts)
        {
          elts = v27->elts;
          if (elts)
          {
            uint64_t v29 = (uint64_t)&elts[16 * add];
            while (1)
            {
              DoLoadJob((void **)a1, v29, v25, v8);
              signed int v31 = atomic_fetch_add(v47, 1u);
              uint64_t v32 = a1[2813];
              if (v31 >= v32->nelts) {
                break;
              }
              uint64_t v33 = v32->elts;
              uint64_t v29 = (uint64_t)&v33[16 * v31];
              if (!v33) {
                goto LABEL_14;
              }
            }
          }
        }
LABEL_14:

        uint64_t result = (apr_array_header_t *)dispatch_group_wait((dispatch_group_t)a1[2816], 0xFFFFFFFFFFFFFFFFLL);
        a1[2813]->uint64_t nelts = 0;
        if (*((int *)a1 + 5644) >= 1)
        {
          uint64_t v34 = 0;
          uint64_t v35 = *(apr_pool_t **)v8;
          do
          {
            unint64_t v36 = &a1[3 * v34];
            unint64_t v37 = v36[2825];
            v37->elts = 0;
            v37[1].pool = 0;
            p_nalloc = (apr_hash_index_t *)&v37->nalloc;
            *(void *)&v37->nalloc = v37;
            v37[1].int elt_size = 0;
            while (1)
            {
              uint64_t v39 = apr_hash_next(p_nalloc);
              unint64_t v40 = v39;
              if (!v39) {
                break;
              }
              uint64_t v41 = *((void *)v39 + 1);
              uint64_t v43 = *(const void **)(v41 + 16);
              size_t v42 = *(void *)(v41 + 24);
              if (v43)
              {
                id v44 = apr_palloc(v35, *(void *)(v41 + 24));
                memcpy(v44, v43, v42);
                uint64_t v41 = *((void *)v40 + 1);
              }
              else
              {
                id v44 = 0;
              }
              id v45 = apr_array_copy(v35, *(const apr_array_header_t **)(v41 + 32));
              apr_hash_set(v8, v44, v42, v45);
              p_nalloc = v40;
            }
            uint64_t v46 = v37->pool;
            apr_pool_clear(v37->pool);
            uint64_t result = (apr_array_header_t *)apr_hash_make(v46);
            v36[2825] = result;
            ++v34;
          }
          while (v34 < *((int *)a1 + 5644));
        }
      }
    }
  }
  return result;
}

uint64_t FillBufferWithBufferBlitOperation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, apr_array_header_t *a8)
{
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)a2;
  if (*(uint64_t *)a2 > 56)
  {
    switch(v14)
    {
      case '9':
        goto LABEL_9;
      case 'V':
        uint64_t v16 = a7 + 255;
        goto LABEL_17;
      case 'P':
        uint64_t v15 = *(unsigned __int16 *)(a2 + 60);
        uint64_t v16 = a7 + v15 - 1;
        goto LABEL_20;
    }
    goto LABEL_8;
  }
  if (v14 == 16)
  {
    uint64_t v16 = a7 + 31;
    uint64_t v15 = 32;
    goto LABEL_20;
  }
  if (v14 != 22) {
LABEL_8:
  }
    uint64_t v13 = -1;
LABEL_9:
  uint64_t v16 = v13 + a7;
  if (v14 > 79)
  {
    if (v14 != 86)
    {
      if (v14 == 80)
      {
        uint64_t v15 = *(unsigned __int16 *)(a2 + 60);
        goto LABEL_20;
      }
LABEL_19:
      uint64_t v15 = 0;
      goto LABEL_20;
    }
LABEL_17:
    uint64_t v15 = 256;
    goto LABEL_20;
  }
  uint64_t v15 = 1;
  if (v14 != 22 && v14 != 57) {
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v17 = v16 & -v15;
  uint64_t v18 = *(void **)(a1 + 24);
  id v19 = a6;
  id v20 = a3;
  uint64_t v21 = [v18 blitCommandEncoder];
  uint64_t v22 = [v20 heapBuffer];
  unint64_t v23 = (char *)[v20 heapLocation];

  [v21 copyFromBuffer:v22 sourceOffset:&v23[a4] toBuffer:v19 destinationOffset:v17 size:a5];
  uint64_t v24 = apr_array_push(a8);
  uint64_t v25 = *(void *)(a2 + 8);
  int v26 = *(_DWORD *)(a2 + 32) + a4;
  *uint64_t v24 = v17;
  v24[1] = 22;
  *((void *)v24 + 1) = v25;
  void v24[4] = v26;
  void v24[5] = a5;
  return v17 + a5;
}

uint64_t CompareU64Pointer(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

_DWORD *Rewind(_DWORD *result)
{
  uint64_t v1 = result + 5620;
  if (result[5620])
  {
    uint64_t v2 = (uint64_t)result;
    [(id)g_activityLog enterRewind];
    RewindWithoutRestore(v2);
    uint64_t v43 = 0;
    uint64_t v3 = *find_entry(*(void *)(v2 + 22552), &v43, 8uLL, 0);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 32);
    }
    else {
      uint64_t v4 = 0;
    }
    AppendRestoreJobsToLoadQueue(v2, v4);
    SignalLoadQueueThreads(v2, *(_DWORD *)(*(void *)(v2 + 22504) + 12));
    id v5 = [GTMTLReplayActivityLog alloc];
    uint64_t v6 = [(GTMTLReplayActivityLog *)v5 initWithLog:g_activityLog];
    entry = find_entry(*(void *)(v2 + 22544), &v43, 8uLL, 0);
    if (*entry)
    {
      uint64_t v8 = *(void *)(*entry + 32);
      if (v8) {
        RestoreResourcesFromBuffer((id *)v2, *(void **)(v2 + 22536), *(void *)(v8 + 24), *(_DWORD *)(v8 + 12), v6);
      }
    }
    RestoreOrderedResourcesFromArchive((id *)v2, *(void *)(*(void *)(*(void *)v2 + 240) + 24), *(unsigned int *)(*(void *)(*(void *)v2 + 240) + 12), v6);
    RestoreVisibleFunctionTablesForFunctionIndex((id *)v2, *(void *)(*(void *)v2 + 80) - 1);
    RestoreIntersectionFunctionTablesForFunctionIndex((uint64_t *)v2, *(void *)(*(void *)v2 + 80) - 1);
    signed int add = atomic_fetch_add(v1 + 8, 1u);
    uint64_t v10 = *(void *)(v2 + 22504);
    if (add >= *(_DWORD *)(v10 + 12)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *(void *)(v10 + 24) + 16 * add;
    }
    while (v11)
    {
      DoLoadJob((void **)v2, v11, v6, 0);
      signed int v13 = atomic_fetch_add(v1 + 8, 1u);
      uint64_t v14 = *(void *)(v2 + 22504);
      if (v13 >= *(_DWORD *)(v14 + 12)) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *(void *)(v14 + 24) + 16 * v13;
      }
    }

    dispatch_group_wait(*(dispatch_group_t *)(v2 + 22528), 0xFFFFFFFFFFFFFFFFLL);
    *(_DWORD *)(*(void *)(v2 + 22504) + 12) = 0;
    uint64_t v15 = *(void **)v2;
    unint64_t v16 = *(void *)(*(void *)v2 + 80);
    uint64_t v17 = *(void *)(*(void *)v2 + 256);
    if (*(int *)(v17 + 12) >= 1)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = *(void *)(*(void *)(v17 + 24) + 8 * v18);
        id v20 = [*(id *)(v2 + 8) residencySetForKey:*(void *)(v19 + 8)];
        [v20 removeAllAllocations];
        uint64_t v21 = v15[1];
        uint64_t v44 = *(void *)(v19 + 8);
        uint64_t v22 = *find_entry(v21, &v44, 8uLL, 0);
        if (v22) {
          uint64_t v23 = *(void *)(v22 + 32);
        }
        else {
          uint64_t v23 = 0;
        }
        RestoreResourceFromStream(v2, v23, v16);

        ++v18;
        uint64_t v17 = v15[32];
      }
      while (v18 < *(int *)(v17 + 12));
    }
    uint64_t v24 = *(int *)(v15[33] + 12);
    if (v24)
    {
      uint64_t v25 = **(apr_pool_t ***)(v2 + 152);
      int v26 = apr_palloc(v25, 8 * v24);
      uint64_t v27 = v26;
      if (v26) {
        bzero(v26, 8 * v24);
      }
      if ((int)v24 >= 1)
      {
        uint64_t v28 = 0;
        int v29 = 0;
        uint64_t v30 = 8 * v24;
        do
        {
          signed int v31 = [*(id *)(v2 + 8) residencySetForKey:*(void *)(*(void *)(v15[33] + 24) + v28)];
          if (v31) {
            v27[v29++] = v31;
          }

          v28 += 8;
        }
        while (v30 != v28);
        if (v29)
        {
          uint64_t v32 = [*(id *)(v2 + 8) defaultCommandQueue];
          [v32 removeResidencySets:v27 count:v29];
        }
      }
      apr_pool_clear(v25);
    }
    uint64_t v33 = *(void *)(v15[5] + 184);
    int v34 = *(_DWORD *)(v33 + 12);
    if (v34 >= 1)
    {
      for (uint64_t i = 0; i < v34; ++i)
      {
        uint64_t v36 = *(void *)(*(void *)(v33 + 24) + 8 * i);
        unint64_t v37 = *(void *)(v36 + 16);
        unint64_t v38 = v15[8];
        if (v38 > v37 || v15[9] + v38 <= v37)
        {
          uint64_t v40 = v15[1];
          uint64_t v44 = *(void *)(v36 + 8);
          uint64_t v41 = *find_entry(v40, &v44, 8uLL, 0);
          if (v41) {
            uint64_t v42 = *(void *)(v41 + 32);
          }
          else {
            uint64_t v42 = 0;
          }
          RestoreResourceFromStream(v2, v42, v16);
          int v34 = *(_DWORD *)(v33 + 12);
        }
      }
    }
    return [(id)g_activityLog leaveActivity];
  }
  return result;
}

void sub_2AC97C(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id RestoreResourcesFromBuffer(id *a1, void *a2, uint64_t a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  os_signpost_id_t v11 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, a1);
  id v43 = a1[3];
  id v12 = a1[1];
  signed int v13 = g_signpostLog;
  uint64_t v14 = v13;
  unint64_t v37 = v11 - 1;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v13))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = a4;
    _os_signpost_emit_with_name_impl(&def_1C1270, v14, OS_SIGNPOST_INTERVAL_BEGIN, v11, "Replayer-2-restore", "RestoreResourcesFromBuffer x%d", (uint8_t *)&buf, 8u);
  }
  os_signpost_id_t spid = v11;
  unint64_t v38 = v10;

  if (a4 >= 1)
  {
    uint64_t v15 = 0;
    unint64_t v16 = (unsigned __int16 *)(a3 + 22);
    uint64_t v17 = a4;
    id v39 = v12;
    id v40 = v9;
    while (1)
    {
      int v19 = *(_DWORD *)(v16 - 9);
      if (v19 == 80) {
        break;
      }
      if (v19 == 22)
      {
        id v20 = [v12 bufferForKey:*(void *)(v16 - 7)];
        uint64_t v21 = [v43 blitCommandEncoder];
        [v21 copyFromBuffer:v9 sourceOffset:*(unsigned int *)(v16 - 11) toBuffer:v20 destinationOffset:*(unsigned int *)(v16 - 3) size:*(unsigned int *)(v16 - 1)];

        unsigned int v22 = *(_DWORD *)(v16 - 1);
LABEL_10:
        v15 += v22;
      }
      v16 += 24;
      if (!--v17) {
        goto LABEL_14;
      }
    }
    id v20 = [v12 textureForKey:*(void *)(v16 + 1)];
    uint64_t v42 = *(unsigned int *)(v16 - 3);
    uint64_t v41 = *(v16 - 1);
    uint64_t v23 = *v16;
    uint64_t v24 = v15;
    uint64_t v25 = *(unsigned int *)(v16 + 5);
    uint64_t v26 = v16[7];
    uint64_t v27 = v16[8];
    uint64_t v28 = [v43 blitCommandEncoder];
    uint64_t v29 = v16[9];
    uint64_t v30 = *((unsigned __int8 *)v16 + 20);
    uint64_t v31 = *((unsigned __int8 *)v16 + 21);
    void v44[2] = v27;
    *(void *)&long long buf = v42;
    *((void *)&buf + 1) = v41;
    uint64_t v46 = v23;
    id v12 = v39;
    v44[0] = v25;
    v44[1] = v26;
    uint64_t v15 = v24;
    id v9 = v40;
    [v28 copyFromBuffer:v29 sourceOffset:v30 sourceBytesPerRow:v44 sourceBytesPerImage:v31 toTexture:v29 destinationSlice:v30 destinationLevel:v30 destinationOrigin:v31 options:v32];

    unsigned int v22 = *(_DWORD *)(v16 - 5) * *v16;
    goto LABEL_10;
  }
  uint64_t v15 = 0;
LABEL_14:
  id v32 = [v43 commitCommandBufferWithLog:v38];
  uint64_t v33 = g_signpostLog;
  int v34 = v33;
  if (v37 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v33))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v15;
    _os_signpost_emit_with_name_impl(&def_1C1270, v34, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-2-restore", "%{xcode:size-in-bytes}zu", (uint8_t *)&buf, 0xCu);
  }

  return v32;
}

void RestoreResourceFromStream(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v6 = *(id *)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 32);
  id v18 = v6;
  unsigned int v8 = 0;
  if (v7)
  {
    while (1)
    {
      unsigned int v9 = atomic_load((unsigned int *)(v7 + 4));
      uint64_t v10 = v8 + (v9 >> 6) - 1;
      if ((int)v10 > 0) {
        break;
      }
      uint64_t v7 = *(void *)(v7 + 40);
      unsigned int v8 = v10;
      if (!v7)
      {
        unsigned int v8 = v10;
        goto LABEL_6;
      }
    }
  }
  uint64_t v10 = 0;
LABEL_6:
  unint64_t v11 = v8 | (unint64_t)(v10 << 32);
LABEL_7:
  uint64_t v12 = v7 + 64;
  while (v7)
  {
    if ((*(unsigned char *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v13 = v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6);
    if (*(void *)v13 >= a3) {
      break;
    }
    if (!GetFuncEnumConstructorType(*(_DWORD *)(v13 + 8)))
    {
      GTMTLReplayController_defaultDispatchFunction(a1, v13);
    }
    unsigned int v15 = atomic_load((unsigned int *)(v7 + 4));
    int v16 = v11 + (v15 >> 6);
    uint64_t v17 = (HIDWORD(v11) + 1);
    unint64_t v11 = (v17 << 32) | v11;
    if (v17 == v16 - 1)
    {
      unint64_t v11 = (v17 << 32) | v17;
      uint64_t v7 = *(void *)(v7 + 40);
      goto LABEL_7;
    }
  }
}

uint64_t GTMTLReplayController_restoreCommandBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 22480;
  [(id)g_activityLog enterRestoreCommandBufferAtIndex:*(unsigned int *)(a1 + 22480)];
  uint64_t v41 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), *(void *)(*(void *)a1 + 16))+ 1);
  unsigned int v5 = [*(id *)(a1 + 24) commitCommandBuffer];
  uint64_t v6 = *find_entry(*(void *)(*(void *)a1 + 184), &v41, 8uLL, 0);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *find_entry(*(void *)(a1 + 22552), &v41, 8uLL, 0);
  if (!v8)
  {
    if (v7)
    {
      char v10 = 0;
      uint64_t v9 = 0;
      goto LABEL_9;
    }
LABEL_16:
    char v10 = 1;
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)(v8 + 32);
  if (v7)
  {
    char v10 = 0;
LABEL_9:
    unint64_t v11 = [*(id *)(a1 + 8) defaultCommandQueue];
    [v11 finish];

    goto LABEL_10;
  }
  if (!v9) {
    goto LABEL_16;
  }
  unint64_t v12 = *(unsigned int *)(v9 + 12);
  if ((int)v12 < 1)
  {
    char v10 = 1;
    goto LABEL_11;
  }
  uint64_t v13 = *(void **)(v9 + 24);
  if (*v13 == 86)
  {
    char v10 = 1;
    goto LABEL_9;
  }
  unint64_t v38 = 0;
  id v39 = v13 + 8;
  do
  {
    if (v12 - 1 == v38)
    {
      char v10 = 1;
      goto LABEL_10;
    }
    uint64_t v40 = *v39;
    v39 += 8;
    ++v38;
  }
  while (v40 != 86);
  char v10 = 1;
  if (v38 < v12) {
    goto LABEL_9;
  }
LABEL_10:
  if (v9)
  {
LABEL_11:
    AppendRestoreJobsToLoadQueue(a1, v9);
    SignalLoadQueueThreads(a1, *(_DWORD *)(*(void *)(a1 + 22504) + 12));
  }
LABEL_17:
  uint64_t v14 = [GTMTLReplayActivityLog alloc];
  unsigned int v15 = [(GTMTLReplayActivityLog *)v14 initWithLog:g_activityLog];
  if ((v10 & 1) == 0 && *(int *)(v7 + 12) >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(void *)(*(void *)(v7 + 24) + 8 * v16);
      id v18 = [*(id *)(a1 + 8) rasterizationRateMapForKey:*(void *)(v17 + 8)];
      int v19 = MakeMTLRasterizationRateMapDescriptor(*(void *)(v17 + 48));
      [v18 resetUsingDescriptor:v19];

      ++v16;
    }
    while (v16 < *(int *)(v7 + 12));
  }
  uint64_t v20 = *(void *)(*(void *)a1 + 8);
  uint64_t v42 = v41;
  entry = find_entry(v20, &v42, 8uLL, 0);
  unint64_t v22 = CommandBufferCommitIndex(*(void *)(*(void *)(*entry + 32) + 32));
  RestoreVisibleFunctionTablesForFunctionIndex((id *)a1, v22);
  uint64_t v23 = *(void *)(*(void *)a1 + 8);
  uint64_t v42 = v41;
  uint64_t v24 = find_entry(v23, &v42, 8uLL, 0);
  unint64_t v25 = CommandBufferCommitIndex(*(void *)(*(void *)(*v24 + 32) + 32));
  RestoreIntersectionFunctionTablesForFunctionIndex((uint64_t *)a1, v25);
  uint64_t v26 = find_entry(*(void *)(a1 + 22544), &v41, 8uLL, 0);
  if (*v26)
  {
    uint64_t v27 = *(void *)(*v26 + 32);
    if (v27) {
      v5 |= RestoreResourcesFromBuffer((id *)a1, *(void **)(a1 + 22536), *(void *)(v27 + 24), *(_DWORD *)(v27 + 12), v15);
    }
  }
  signed int add = atomic_fetch_add((atomic_uint *volatile)(v4 + 32), 1u);
  uint64_t v29 = *(void *)(a1 + 22504);
  if (add >= *(_DWORD *)(v29 + 12)) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 24) + 16 * add;
  }
  while (v30)
  {
    DoLoadJob((void **)a1, v30, v15, 0);
    signed int v32 = atomic_fetch_add((atomic_uint *volatile)(v4 + 32), 1u);
    uint64_t v33 = *(void *)(a1 + 22504);
    if (v32 >= *(_DWORD *)(v33 + 12)) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(v33 + 24) + 16 * v32;
    }
  }

  dispatch_group_wait(*(dispatch_group_t *)(a1 + 22528), 0xFFFFFFFFFFFFFFFFLL);
  *(_DWORD *)(*(void *)(a1 + 22504) + 12) = 0;
  if (byte_77313A) {
    sleep(byte_77313A);
  }
  uint64_t v34 = *find_entry(*(void *)(*(void *)a1 + 144), &v41, 8uLL, 0);
  if (v34) {
    uint64_t v35 = *(void *)(v34 + 32);
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = v5 | DYMTLIndirectArgumentBufferManager_processCommandBuffer(a1, v35);
  [(id)g_activityLog leaveActivity];
  return v36;
}

void sub_2AD1C8(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

uint64_t GTMTLReplayController_init(uint64_t a1)
{
  if (a1 && !initialized)
  {
    shared_initialized = 1;
    apr_pools_initialized = 1;
    apr_pools_shared_initialized = 1;
    global_pool = a1;
    global_allocator = *(void *)(a1 + 48);
  }
  qword_773118 = GetEnvDefault("MTLREPLAYER_ABORT_ON_ERROR_CODE", -1);
  qword_773120 = GetEnvDefault("MTLREPLAYER_ABORT_ON_FAILURE_TYPE", 1);
  qword_773128 = GetEnvDefault("MTLREPLAYER_FORCE_PATCHING_TYPE_REPLACE_MASK", 0);
  word_773138 = GetEnvDefault("MTLREPLAYER_SHARED_RESOURCE_POOL_MAX_SIZE", 128);
  uint64_t v1 = +[NSProcessInfo processInfo];
  byte_77313B = GetEnvDefault("MTLREPLAYER_RESTORE_THREAD_COUNT", (uint64_t)[v1 activeProcessorCount] - 1);

  byte_77313A = GetEnvDefault("MTLREPLAYER_SLEEP_AFTER_RESTORE", 0);
  dword_77313C = dword_77313C & 0xFFFFFFFE | GetEnvDefault("MTLREPLAYER_VALIDATE_LOAD_ACTIONS", 0) & 1;
  dword_77313C = dword_77313C & 0xFFFFFFFD | (2 * (GetEnvDefault("MTLREPLAYER_FORCE_WAIT_UNTIL_COMPLETED", 0) & 1));
  dword_77313C = dword_77313C & 0xFFFFFFFB | (4
                                            * (GetEnvDefault("MTLREPLAYER_FORCE_BUFFER_STORAGE_MODE_PRIVATE", 0) & 1));
  dword_77313C = dword_77313C & 0xFFFFFFF7 | (8 * (GetEnvDefault("MTLREPLAYER_ENHANCED_COMMAND_BUFFER_ERRORS", 0) & 1));
  dword_77313C = dword_77313C & 0xFFFFFFEF | (16 * (GetEnvDefault("MTLREPLAYER_DISABLE_OPTIMIZE_RESTORES", 0) & 1));
  uint64_t v2 = +[NSProcessInfo processInfo];
  dword_77313C = dword_77313C & 0xFFFFFFDF | (32
                                            * (GetEnvDefault("METAL_FRAME_DEBUGGER_DISABLE_DISPLAY_ON_DEVICE", [v2 isiOSAppOnMac]) & 1));

  dword_77313C = dword_77313C & 0xFFFFFFBF | ((GetEnvDefault("MTLREPLAYER_DISABLE_PATCHING_ARRAYS", 0) & 1) << 6);
  dword_77313C = dword_77313C & 0xFFFFFF7F | ((GetEnvDefault("MTLREPLAYER_PATCH_USING_ALL_RESOURCES", 0) & 1) << 7);
  dword_77313C = dword_77313C & 0xFFFFFEFF | ((GetEnvDefault("MTLREPLAYER_ALLOW_BUFFER_PINNING", 1) & 1) << 8);
  dword_77313C = dword_77313C & 0xFFFEFFFF | ((GetEnvDefault("MTLREPLAYER_BUFFER_PINNING_REQUIRES_AB", 1) & 1) << 16);
  dword_77313C = dword_77313C & 0xFFFFFDFF | ((GetEnvDefault("MTLREPLAYER_ALLOW_PROGRAM_ADDRESS_TABLES", 1) & 1) << 9);
  dword_77313C = dword_77313C & 0xFFFFF7FF | ((GetEnvDefault("MTLREPLAYER_IGNORE_UNUSED_RESOURCE", 0) & 1) << 11);
  dword_77313C = dword_77313C & 0xFFFFFBFF | ((GetEnvDefault("MTLREPLAYER_FORCE_LOAD_UNUSED_RESOURCE", 0) & 1) << 10);
  dword_77313C = dword_77313C & 0xFFFFEFFF | ((GetEnvDefault("MTLREPLAYER_DISABLE_COMMAND_ENCODER_RESUME", 0) & 1) << 12);
  dword_77313C = dword_77313C & 0xFFFFDFFF | ((GetEnvDefault("MTLREPLAYER_DISABLE_HEAP_TEXTURE_COMPRESSION", 0) & 1) << 13);
  dword_77313C = dword_77313C & 0xFFFFBFFF | ((GetEnvDefault("MTLREPLAYER_DISABLE_SHADER_DEBUGGER_DRIVER_COMPILER_OPTIONS", 0) & 1) << 14);
  dword_77313C = dword_77313C & 0xFFFF7FFF | ((GetEnvDefault("MTLREPLAYER_FORCE_FINISH_ON_REWIND", 0) & 1) << 15);
  dword_77313C = dword_77313C & 0xFFFDFFFF | ((GetEnvDefault("MTLREPLAYER_DISABLE_MEMORY_BARRIER_RENDER_TARGETS", 0) & 1) << 17);
  GT_ENV = (uint64_t)getenv("MTLREPLAYER_INSERT_BINARY_ARCHIVES");
  dword_77313C = dword_77313C & 0xFFFBFFFF | ((GetEnvDefault("MTLREPLAYER_FORCE_DEFAULT_HAZARD_TRACKING", 0) & 1) << 18);
  dword_77313C = dword_77313C & 0xFFF7FFFF | ((GetEnvDefault("MTLREPLAYER_ALLOW_OTHER_PLATFORMS", 0) & 1) << 19);
  dword_77313C = dword_77313C & 0xFFEFFFFF | ((GetEnvDefault("MTLREPLAYER_DRAWABLE_RESOURCE_INDEX_WORKAROUND", 0) & 1) << 20);
  dword_77313C = dword_77313C & 0xFFBFFFFF | ((GetEnvDefault("MTLREPLAYER_GPURESOURCEID_SCAN_AND_PATCH", 1) & 1) << 22);
  qword_773130 = GetEnvDefault("MTLREPLAYER_ERROR_FILTERING", -1);
  dword_77313C = dword_77313C & 0xFFDFFFFF | ((GetEnvDefault("MTLREPLAYER_ALLOW_ALIAS_IOSURFACE_BACKED_BUFFERS", 1) & 1) << 21);
  dword_77313C = dword_77313C & 0xFF7FFFFF | ((GetEnvDefault("MTLREPLAYER_LOAD_VALIDATION", 0) & 1) << 23);
  dword_77313C = dword_77313C & 0xFEFFFFFF | ((GetEnvDefault("MTLREPLAYER_LOAD_CAPTURE", 0) & 1) << 24);
  dword_77313C = dword_77313C & 0xFDFFFFFF | ((GetEnvDefault("MTLREPLAYER_LOAD_HUD", 0) & 1) << 25);
  dword_77313C = dword_77313C & 0xFBFFFFFF | ((GetEnvDefault("MTLREPLAYER_STOP_ON_COMMIT_ERROR", 0) & 1) << 26);
  dword_77313C = dword_77313C & 0xF7FFFFFF | ((GetEnvDefault("MTLREPLAYER_REDIRECT_LOGGING_TO_STREAMS", 0) & 1) << 27);
  dword_77313C = dword_77313C & 0xEFFFFFFF | ((GetEnvDefault("MTLREPLAYER_LOCK_PARAM_BUFFER_SIZE_TO_MAX", 1) & 1) << 28);
  if (s_defaultLog == &_os_log_default)
  {
    os_log_t v4 = os_log_create("com.apple.gputools.MTLReplayController", "");
    unsigned int v5 = s_defaultLog;
    s_defaultLog = v4;

    uint64_t v6 = 0;
    s_logs = (uint64_t)malloc_type_calloc(3uLL, 0x20uLL, 0x8004018A671A6uLL);
    s_loguint64_t Count = 1;
    uint64_t v7 = &off_745DC0;
    for (uint64_t i = 24; i != 120; i += 32)
    {
      uint64_t v9 = *v7;
      if (v6 == *(v7 - 1))
      {
        uint64_t v10 = s_logs;
        uint64_t v11 = s_logs + i;
        uint64_t v12 = +[NSString stringWithUTF8String:"com.apple.gputools.MTLReplayController"];
        uint64_t v13 = *(void **)(v11 - 24);
        *(void *)(v11 - 24) = v12;

        uint64_t v14 = +[NSString stringWithUTF8String:v9];
        unsigned int v15 = *(void **)(v11 - 16);
        *(void *)(v11 - 16) = v14;

        if (*((unsigned char *)v7 + 8))
        {
          uint64_t v16 = +[NSString stringWithFormat:@"%@.%@.enableLog", *(void *)(v11 - 24), *(void *)(v11 - 16)];
          uint64_t v17 = *(void **)(v11 - 8);
          *(void *)(v11 - 8) = v16;
        }
        else
        {
          uint64_t v17 = *(void **)(v11 - 8);
          *(void *)(v11 - 8) = 0;
        }

        os_log_t v19 = os_log_create("com.apple.gputools.MTLReplayController", v9);
        uint64_t v20 = *(void **)(v10 + i);
        *(void *)(v10 + i) = v19;

        GTCoreLog_enabled(v11 - 24);
      }
      else
      {
        if (s_logUsingOsLog)
        {
          id v18 = gt_default_log();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v9;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v6;
            _os_log_error_impl(&def_1C1270, v18, OS_LOG_TYPE_ERROR, "warning: Invalid tag ID for %s, %d expected. Falling back to OS_LOG_DEFAULT", buf, 0x12u);
          }
        }
        else
        {
          uint64_t v21 = __stderrp;
          id v18 = +[NSString stringWithFormat:@"warning: Invalid tag ID for %s, %d expected. Falling back to OS_LOG_DEFAULT", *v7, v6];
          fprintf(v21, "%s\n", (const char *)[v18 UTF8String]);
        }

        objc_storeStrong((id *)(s_logs + i), &_os_log_default);
      }
      ++v6;
      v7 += 3;
    }
    unint64_t v22 = +[NSUserDefaults standardUserDefaults];
    unsigned __int8 v23 = [v22 BOOLForKey:@"GPUToolsPerfLogging"];

    if (v23)
    {
      os_log_t v24 = os_log_create("com.apple.gputools.MTLReplayController", "");
      unint64_t v25 = g_signpostLog;
      g_signpostLog = v24;
    }
  }
  else if (s_logUsingOsLog)
  {
    uint64_t v3 = gt_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "Log already initialized, did you call GTCoreLogInit twice?";
      _os_log_error_impl(&def_1C1270, v3, OS_LOG_TYPE_ERROR, "warning: %s", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v26 = __stderrp;
    id v27 = +[NSString stringWithFormat:@"warning: %s", "Log already initialized, did you call GTCoreLogInit twice?"];
    fprintf(v26, "%s\n", (const char *)[v27 UTF8String]);
  }
  int v28 = dword_77313C;
  s_logUsingOsLog = (dword_77313C & 0x8000000) == 0;
  if ((dword_77313C & 0x800000) == 0)
  {
    if ((dword_77313C & 0x1000000) == 0) {
      goto LABEL_26;
    }
LABEL_39:
    setenv("METAL_CAPTURE_ENABLED", "1", 1);
    if ((dword_77313C & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  setenv("MTL_DEBUG_LAYER", "1", 1);
  int v28 = dword_77313C;
  if ((dword_77313C & 0x1000000) != 0) {
    goto LABEL_39;
  }
LABEL_26:
  if ((v28 & 0x2000000) != 0) {
LABEL_27:
  }
    setenv("MTL_HUD_ENABLED", "1", 1);
LABEL_28:
  setenv("AGX_SUPPORT_D24_S8", "1", 1);
  id v29 = [[GTMTLReplayActivityLog alloc] init:0];
  uint64_t v30 = (void *)g_activityLog;
  g_activityLog = (uint64_t)v29;

  *(void *)long long buf = 0;
  mach_timebase_info((mach_timebase_info_t)buf);
  LODWORD(v32) = *(_DWORD *)&buf[4];
  LODWORD(v31) = *(_DWORD *)buf;
  *(double *)&time_scale = (double)v31 / (double)v32 * 0.000000001;
  unint64_t v33 = dword_77313C;
  uint64_t v34 = NSClassFromString(@"_MTLCommandBufferDescriptor");
  if (v34 || (uint64_t v34 = NSClassFromString(@"MTLCommandBufferDescriptor")) != 0)
  {
    id v35 = objc_alloc_init(v34);
    uint64_t v36 = (void *)g_commandBufferDescriptor;
    g_commandBufferDescriptor = (uint64_t)v35;

    [(id)g_commandBufferDescriptor setRetainedReferences:1];
    [(id)g_commandBufferDescriptor setErrorOptions:(v33 >> 3) & 1];
    id v37 = (id)g_commandBufferDescriptor;
    if (objc_opt_respondsToSelector()) {
      [v37 setCaptureProgramAddressTable:(v33 >> 9) & 1];
    }
  }
  uint64_t v38 = 0;
  newHandler = (uint64_t)HandleCrashSignal;
  *(void *)algn_772DF8 = 0;
  do
  {
    oldHandlers[v38] = 0;
    v38 += 2;
  }
  while (v38 != 64);
  for (uint64_t j = 0; j != 5; ++j)
    sigaction(GTMTLReplay_registerSignalHandlers_signals[j], (const sigaction *)&newHandler, (sigaction *)&oldHandlers[2 * GTMTLReplay_registerSignalHandlers_signals[j]]);
  id v40 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v41 = (void *)funcMap;
  funcMap = (uint64_t)v40;

  id v42 = objc_alloc_init((Class)NSMutableDictionary);
  id v43 = (void *)failureMap;
  failureMap = (uint64_t)v42;

  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  getrlimit(8, (rlimit *)buf);
  *(void *)long long buf = 10000;
  setrlimit(8, (const rlimit *)buf);
  return MTLSetReportFailureBlock();
}

void sub_2ADE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2ADF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2ADF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2AE074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2AE0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2AE1A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(void *)(a2 + 8));
  unsigned int v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      uint64_t v7 = v5 + 2;
      unint64_t v8 = v5[3] ^ (v5[2] << 32);
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[3] ^ (v5[2] << 32);
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
        uint64_t v11 = *(void **)(*(void *)a1 + 8 * v2);
        if (v11)
        {
          for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (i[2] == *v7 && i[3] == v5[3]) {
                goto LABEL_45;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v2) {
                break;
              }
            }
          }
        }
      }
      unsigned int v15 = operator new(0x28uLL);
      *unsigned int v15 = 0;
      v15[1] = v8;
      *((_OWORD *)v15 + 1) = *(_OWORD *)v7;
      v15[4] = (id)v5[4];
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        BOOL v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v9);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v21);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v22 = *(void *)a1;
      unsigned __int8 v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        *unsigned int v15 = *v23;
      }
      else
      {
        *unsigned int v15 = *v6;
        *uint64_t v6 = v15;
        *(void *)(v22 + 8 * v2) = v6;
        if (!*v15) {
          goto LABEL_44;
        }
        unint64_t v24 = *(void *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v24 >= v9) {
            v24 %= v9;
          }
        }
        else
        {
          v24 &= v9 - 1;
        }
        unsigned __int8 v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unsigned __int8 v23 = v15;
LABEL_44:
      ++*(void *)(a1 + 24);
LABEL_45:
      unsigned int v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2AE40C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    unsigned int v5 = a2;
    uint64_t v6 = &a2[6 * a3];
    uint64_t v7 = (void *)(a1 + 16);
    do
    {
      unint64_t v8 = *v5;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
        if (v11)
        {
          for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (i[2] == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v14 = operator new(0x40uLL);
      v25[0] = v14;
      v25[1] = a1 + 16;
      char v26 = 0;
      void *v14 = 0;
      v14[1] = v8;
      v14[2] = v8;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)(v14 + 3), (uint64_t)(v5 + 1));
      char v26 = 1;
      float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v16 = *(float *)(a1 + 32);
      if (!v9 || (float)(v16 * (float)v9) < v15)
      {
        BOOL v17 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v17 = 1;
        }
        unint64_t v18 = v17 | (2 * v9);
        unint64_t v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19) {
          size_t v20 = v19;
        }
        else {
          size_t v20 = v18;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v20);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
      }
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
      if (v22)
      {
        void *v14 = *v22;
      }
      else
      {
        void *v14 = *v7;
        *uint64_t v7 = v14;
        *(void *)(v21 + 8 * v3) = v7;
        if (!*v14) {
          goto LABEL_40;
        }
        unint64_t v23 = *(void *)(*v14 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v23 >= v9) {
            v23 %= v9;
          }
        }
        else
        {
          v23 &= v9 - 1;
        }
        uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
      }
      void *v22 = v14;
LABEL_40:
      v25[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,void *>,std::__hash_node_destructor<std::equal_to<FunctionHandleKey><void *>>>::reset[abi:nn180100]((uint64_t)v25);
LABEL_41:
      v5 += 6;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_2AE68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,void *>,std::__hash_node_destructor<std::equal_to<FunctionHandleKey><void *>>>::reset[abi:nn180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  os_log_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  os_log_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void GTMTLReplayAccessTracking::~GTMTLReplayAccessTracking(id *this)
{
  std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)(this + 25));
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)(this + 20));
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)(this + 15));
  std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table((uint64_t)(this + 10));
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)(this + 5));

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  os_log_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

BOOL InstrumentRenderSubCommand()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v8 = *(void *)(v5 + 8);
  if (v8 <= v2)
  {
    uint64_t v9 = v5;
    unint64_t v10 = v2;
    if (*(void *)(v5 + 16) + v8 >= v2)
    {
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v4;
      float v15 = v3;
      float v16 = v1;
      uint64_t v17 = v0;
      uint64_t v18 = *(void *)v0;
      id v19 = *(id *)(v0 + 8);
      GTMTLReplayController_debugSubCommandResume((unsigned int *)v17, *(_DWORD *)v16 - *(_DWORD *)(v18 + 80) + 1, v10 + 1);
      uint64_t v20 = *(void *)(v9 + 24);
      if (v20)
      {
        uint64_t v21 = v20 + v15[13] * v10;
        unint64_t v22 = *(void *)(v21 + v15[1]);
        if (v22 <= 8)
        {
          if (((1 << v22) & 0x116) != 0) {
            goto LABEL_11;
          }
          if (!v22)
          {
            BOOL v11 = 1;
LABEL_30:

            return v11;
          }
        }
        if (v22 == 256 || v22 == 128)
        {
LABEL_11:
          unint64_t v23 = [v19 renderCommandEncoderForKey:*(void *)(v17 + 11320)];
          unint64_t v24 = v23;
          if (v23)
          {
            [v23 useResource:*(void *)(v13 + 240) usage:3];
            if (*(unsigned char *)(*v15 + 11))
            {
              uint64_t v25 = *(void *)(v17 + 19912);
              if (v25) {
                goto LABEL_14;
              }
            }
            else
            {
              uint64_t v25 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(v14[3], *(void *)(v21 + v15[2]));
              if (v25)
              {
LABEL_14:
                unint64_t v33 = v19;
                uint64_t Object = GTMTLSMContext_getObject(**(void **)(v18 + 40), v25, *v16);
                if (!Object)
                {
                  int v30 = 1;
LABEL_28:
                  id v19 = v33;
                  goto LABEL_29;
                }
                id v27 = Object;
                int v28 = ObtainTracingRenderPipelineState(*(uint64_t **)(v18 + 40), v33, Object, v13, *v16, v12);
                if (!v28)
                {
                  int v30 = 1;
LABEL_27:

                  goto LABEL_28;
                }
                id v32 = v28;
                ReplaceFunctionTablesWithInstrumented((uint64_t)v35, v17, v13, *v16, v27, v14, v12);
                std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v36);
                std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v35);
                if (*(unsigned char *)(*v15 + 10))
                {
                  [v24 setRenderPipelineState:v32];
                  id v29 = [v33 executeIndirectCommandBufferMap];
                  DYMTLDrawRenderCommandEncoder(v24, (uint64_t)v15, v21, (uint64_t)v14, v29);
                }
                else
                {
                  memcpy(__dst, (const void *)(v17 + 11368), sizeof(__dst));
                  if (!GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)__dst, v15, v21, v14))
                  {
                    int v30 = 1;
                    goto LABEL_26;
                  }
                  GTMTLReplayController_restoreRenderCommandEncoder(v24, v17 + 11368, (uint64_t)__dst, v33);
                  [v24 setRenderPipelineState:v32];
                  id v29 = [v33 executeIndirectCommandBufferMap];
                  DYMTLDrawRenderCommandEncoder(v24, (uint64_t)v15, v21, (uint64_t)v14, v29);
                }

                int v30 = 2;
LABEL_26:
                int v28 = v32;
                goto LABEL_27;
              }
            }
          }
          int v30 = 1;
LABEL_29:

          BOOL v11 = v30 == 2;
          goto LABEL_30;
        }
      }
      BOOL v11 = 0;
      goto LABEL_30;
    }
  }
  return 0;
}

void sub_2AEB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

id ObtainTracingRenderPipelineState(uint64_t *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, apr_pool_t *a6)
{
  id v11 = a2;
  uint64_t v12 = [v11 defaultDevice];
  if (a3[11]) {
    goto LABEL_2;
  }
  v106[0] = a3[1];
  id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>((uint64_t *)(a4 + 40), v106[0], v106)[3];
  if (!v13)
  {
    uint64_t v14 = *(void *)(a4 + 248);
    unint64_t v15 = (unint64_t)(v14 == 2) << 31;
    BOOL v16 = v14 == 1;
    uint64_t v17 = 0x40000000;
    if (!v16) {
      uint64_t v17 = v15;
    }
    uint64_t v82 = v17;
    int v18 = GTMTLSMRenderPipelineState_renderPipelineDescriptorType(a1, a3);
    int v100 = v18;
    switch(v18)
    {
      case 3:
        id v19 = (const void *)a3[9];
        if (!v19) {
          goto LABEL_16;
        }
        memcpy(v101, v19, 0x200uLL);
        break;
      case 2:
        GTMTLSMRenderPipelineState_tilePipelineDescriptor(a1, a3, v101, a6);
        break;
      case 1:
        GTMTLSMRenderPipelineState_renderPipelineDescriptor(a1, a3, (uint64_t)v101, a6);
        break;
      default:
        goto LABEL_30;
    }
    if (v100 != 1)
    {
      if (v100 != 2)
      {
        if (v100 == 3)
        {
LABEL_16:
          uint64_t v20 = (void (*)(uint64_t **, void *))MakeMTLMeshRenderPipelineDescriptor;
          uint64_t v21 = [v11 renderPipelineDescriptorMap];
          uint64_t v81 = v20(v101, v21);

          int v22 = *(_DWORD *)(a4 + 256);
          switch(v22)
          {
            case 2:
              uint64_t v47 = *(void *)(a3[9] + 344);
              if (v47)
              {
                uint64_t Object = GTMTLSMContext_lastObject(*a1, v47, a5);
                if (Object)
                {
                  uint64_t v49 = Object;
                  uint64_t v80 = [v11 libraryForKey:*(void *)(Object + 40)];
                  uint64_t v50 = [v11 functionMap];
                  id v86 = 0;
                  id v27 = ObtainTracingFunction(v12, v80, a4, v49, v50, (uint64_t)&v86);
                  id v28 = v86;

                  if (v27)
                  {
                    [v81 setFragmentFunction:v27];
                    goto LABEL_50;
                  }
                  goto LABEL_81;
                }
              }
              break;
            case 32:
              uint64_t v51 = *(void *)(a3[9] + 360);
              if (v51)
              {
                uint64_t v52 = GTMTLSMContext_lastObject(*a1, v51, a5);
                if (v52)
                {
                  uint64_t v53 = v52;
                  uint64_t v80 = [v11 libraryForKey:*(void *)(v52 + 40)];
                  uint64_t v54 = [v11 functionMap];
                  id v87 = 0;
                  id v27 = ObtainTracingFunction(v12, v80, a4, v53, v54, (uint64_t)&v87);
                  id v28 = v87;

                  if (v27)
                  {
                    [v81 setMeshFunction:v27];
                    goto LABEL_50;
                  }
                  goto LABEL_81;
                }
              }
              break;
            case 16:
              uint64_t v23 = *(void *)(a3[9] + 368);
              if (v23)
              {
                uint64_t v24 = GTMTLSMContext_lastObject(*a1, v23, a5);
                if (v24)
                {
                  uint64_t v25 = v24;
                  uint64_t v80 = [v11 libraryForKey:*(void *)(v24 + 40)];
                  char v26 = [v11 functionMap];
                  id v88 = 0;
                  id v27 = ObtainTracingFunction(v12, v80, a4, v25, v26, (uint64_t)&v88);
                  id v28 = v88;

                  if (v27)
                  {
                    [v81 setObjectFunction:v27];
LABEL_50:

                    uint64_t v55 = v28;
                    goto LABEL_52;
                  }
                  goto LABEL_81;
                }
              }
              break;
            default:
              uint64_t v55 = 0;
LABEL_52:
              if (SupportsGlobalRelocation(v12, a4))
              {
                id v85 = v55;
                id v13 = [v12 newRenderPipelineStateWithMeshDescriptor:v81 options:v82 reflection:0 error:&v85];
                id v37 = v85;
                goto LABEL_67;
              }
              if (objc_opt_respondsToSelector()) {
                [v81 setGpuCompilerSPIOptions:&off_759288];
              }
              id v83 = v55;
              id v84 = 0;
              id v13 = [v12 newRenderPipelineStateWithMeshDescriptor:v81 options:v82 | 1 reflection:&v84 error:&v83];
              id v56 = v84;
              id v37 = v83;

              unsigned int v57 = *(_DWORD *)(a4 + 256);
              switch(v57)
              {
                case 2u:
                  uint64_t v58 = [v56 fragmentBindings];
                  break;
                case 0x20u:
                  uint64_t v58 = [v56 meshBindings];
                  break;
                case 0x10u:
                  uint64_t v58 = [v56 objectBindings];
                  break;
                default:
                  uint64_t v62 = 0;
                  goto LABEL_66;
              }
              uint64_t v62 = (void *)v58;
              unsigned int v57 = *(_DWORD *)(a4 + 256);
LABEL_66:
              unsigned int v63 = TraceBufferBindingIndex(v62, v57);
              unint64_t v93 = a3[1];
              *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a4, v93, &v93)+ 6) = v63;

              uint64_t v55 = v56;
              goto LABEL_67;
          }
LABEL_80:
          id v28 = 0;
          goto LABEL_82;
        }
LABEL_30:
        id v37 = 0;
        goto LABEL_31;
      }
      if (*(_DWORD *)(a4 + 256) != 4) {
        goto LABEL_30;
      }
      uint64_t v29 = GTMTLSMContext_lastObject(*a1, (uint64_t)v101[15], a5);
      if (!v29)
      {
LABEL_2:
        id v13 = 0;
        goto LABEL_33;
      }
      uint64_t v30 = v29;
      uint64_t v81 = [v11 renderPipelineStateForKey:a3[1]];
      uint64_t v80 = [v11 libraryForKey:*(void *)(v30 + 40)];
      unint64_t v31 = [v11 functionMap];
      id v92 = 0;
      uint64_t v32 = ObtainTracingFunction(v12, v80, a4, v30, v31, (uint64_t)&v92);
      id v28 = v92;

      uint64_t v78 = (void *)v32;
      if (!v32) {
        goto LABEL_81;
      }
      unint64_t v33 = [v11 renderPipelineDescriptorMap];
      uint64_t v34 = MakeMTLTileRenderPipelineDescriptor((uint64_t)v101, v33);

      uint64_t v79 = v34;
      [v34 setTileFunction:v78];
      id v35 = ObtainTracingLinkedFunctions((const GTMTLSMContext *)a1, v11, (GTMTLReplayAccessTracking *)a4, (uint64_t)v101, a5);
      [v34 setLinkedFunctions:v35];

      if (v81) {
        [v34 setMaxTotalThreadsPerThreadgroup:[v81 maxTotalThreadsPerThreadgroup]];
      }
      if (SupportsGlobalRelocation(v12, a4))
      {
        id v91 = v28;
        id v13 = [v12 newRenderPipelineStateWithTileDescriptor:v34 options:v82 reflection:0 error:&v91];
        id v36 = v91;
      }
      else
      {
        id v89 = v28;
        id v90 = 0;
        id v13 = [v12 newRenderPipelineStateWithTileDescriptor:v34 options:v82 | 1 reflection:&v90 error:&v89];
        id v59 = v90;
        id v36 = v89;

        long long v60 = [v59 tileBindings];
        unsigned int v61 = TraceBufferBindingIndex(v60, 4u);

        unint64_t v93 = a3[1];
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a4, v93, &v93)+ 6) = v61;
        id v28 = v59;
      }

      id v37 = v36;
      uint64_t v55 = v80;
LABEL_67:

      if (v13)
      {
        long long v64 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>((uint64_t *)(a4 + 40), v106[0], v106);
        objc_storeStrong(v64 + 3, v13);
        if (v100 == 2)
        {
          if (*(_DWORD *)(a4 + 256) == 4)
          {
            long long v66 = v101;
            unint64_t v67 = 4;
            goto LABEL_88;
          }
        }
        else if (v100 == 1)
        {
          int v65 = *(_DWORD *)(a4 + 256);
          if (v65 == 2)
          {
            long long v66 = (uint64_t **)v102;
            unint64_t v67 = 2;
            goto LABEL_88;
          }
          if (v65 == 1)
          {
            long long v66 = (uint64_t **)v103;
            unint64_t v67 = 1;
LABEL_88:
            CreateRenderFunctionHandles((GTMTLReplayAccessTracking *)a4, a3[1], (uint64_t)v66, v67);
          }
        }
LABEL_32:

        goto LABEL_33;
      }
LABEL_31:
      id v13 = 0;
      GTMTLReplay_handleNSError(v37);
      goto LABEL_32;
    }
    uint64_t v39 = GTMTLSMContext_lastObject(*a1, v105, a5);
    if (!v39) {
      goto LABEL_2;
    }
    uint64_t v40 = v39;
    if (*(unsigned char *)(v39 + 132)) {
      goto LABEL_2;
    }
    uint64_t v41 = (void (*)(uint64_t **, void *))MakeMTLRenderPipelineDescriptor;
    id v42 = [v11 renderPipelineDescriptorMap];
    uint64_t v81 = v41(v101, v42);

    int v43 = *(_DWORD *)(a4 + 256);
    if (v43 == 2)
    {
      if (!v104) {
        goto LABEL_80;
      }
      uint64_t v68 = GTMTLSMContext_lastObject(*a1, v104, a5);
      id v28 = (id)v68;
      if (!v68)
      {
LABEL_82:

        goto LABEL_2;
      }
      uint64_t v80 = [v11 libraryForKey:*(void *)(v68 + 40)];
      unint64_t v69 = [v11 functionMap];
      id v98 = 0;
      id v45 = ObtainTracingFunction(v12, v80, a4, (uint64_t)v28, v69, (uint64_t)&v98);
      id v28 = v98;

      if (v45)
      {
        [v81 setFragmentFunction:v45];
        uint64_t v46 = ObtainTracingLinkedFunctions((const GTMTLSMContext *)a1, v11, (GTMTLReplayAccessTracking *)a4, (uint64_t)v102, a5);
        [v81 setFragmentLinkedFunctions:v46];
        goto LABEL_79;
      }
    }
    else
    {
      if (v43 != 1)
      {
        id v28 = 0;
LABEL_84:
        if (!SupportsGlobalRelocation(v12, a4)) {
          goto LABEL_82;
        }
        id v97 = v28;
        id v70 = [v12 newRenderPipelineStateWithDescriptor:v81 options:v82 reflection:0 error:&v97];
        id v71 = v97;

        unint64_t v72 = v70;
        if (SupportsGlobalRelocation(v12, a4))
        {
          id v96 = v71;
          id v73 = [v12 newRenderPipelineStateWithDescriptor:v81 options:v82 reflection:0 error:&v96];
          id v37 = v96;
          id v13 = v73;
LABEL_96:

          uint64_t v55 = v72;
          goto LABEL_67;
        }
        id v94 = v71;
        id v95 = 0;
        id v13 = [v12 newRenderPipelineStateWithDescriptor:v81 options:v82 | 1 reflection:&v95 error:&v94];
        id v74 = v95;
        id v37 = v94;

        unsigned int v75 = *(_DWORD *)(a4 + 256);
        if (v75 == 2)
        {
          uint64_t v76 = [v74 fragmentBindings];
        }
        else
        {
          if (v75 != 1)
          {
            id v71 = 0;
            goto LABEL_95;
          }
          uint64_t v76 = [v74 vertexBindings];
        }
        id v71 = (id)v76;
        unsigned int v75 = *(_DWORD *)(a4 + 256);
LABEL_95:
        unsigned int v77 = TraceBufferBindingIndex(v71, v75);
        unint64_t v93 = a3[1];
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a4, v93, &v93)+ 6) = v77;
        unint64_t v72 = v74;
        goto LABEL_96;
      }
      uint64_t v80 = [v11 libraryForKey:*(void *)(v40 + 40)];
      uint64_t v44 = [v11 functionMap];
      id v99 = 0;
      id v45 = ObtainTracingFunction(v12, v80, a4, v40, v44, (uint64_t)&v99);
      id v28 = v99;

      if (v45)
      {
        [v81 setVertexFunction:v45];
        uint64_t v46 = ObtainTracingLinkedFunctions((const GTMTLSMContext *)a1, v11, (GTMTLReplayAccessTracking *)a4, (uint64_t)v103, a5);
        [v81 setVertexLinkedFunctions:v46];
LABEL_79:

        goto LABEL_84;
      }
    }
LABEL_81:

    goto LABEL_82;
  }
LABEL_33:

  return v13;
}

void sub_2AF620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ReplaceFunctionTablesWithInstrumented(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t *a6, apr_pool_t *p)
{
  uint64_t v11 = *(void *)a2;
  uint64_t v12 = apr_array_make(p, 5, 8);
  pa = p;
  id v13 = apr_array_make(p, 5, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v11 + 40) + 56), a4, v12);
  unint64_t v76 = a4;
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v11 + 40) + 64), a4, v13);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  unint64_t v69 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v73 = a1;
  *(_DWORD *)(a1 + 72) = 1065353216;
  if (v12->nelts >= 1)
  {
    uint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = *(void *)&v12->elts[8 * v14];
      if (v15)
      {
        unint64_t v16 = *(void *)(v15 + 16);
        unint64_t v17 = *(void *)(v11 + 64);
        if (v17 > v16 || *(void *)(v11 + 72) + v17 <= v16)
        {
          int v19 = *(_DWORD *)(a3 + 256);
          if (!*(void *)(v15 + 120) || v19 == 8)
          {
            uint64_t v21 = *(void *)(v15 + 128);
            if (!v21) {
              break;
            }
            HIDWORD(v23) = *(unsigned __int8 *)(v15 + 168);
            LODWORD(v23) = (HIDWORD(v23) << 24) - 0x2000000;
            unsigned __int8 v22 = v23 >> 25;
            int v24 = v22 > 7u ? 1 : dword_4C8408[v22];
            if (v24 == v19) {
              break;
            }
          }
        }
      }
LABEL_46:
      if (++v14 >= v12->nelts) {
        goto LABEL_47;
      }
    }
    uint64_t v25 = a5[1];
    if (v21 != v25)
    {
      uint64_t v32 = *(uint64_t **)(v11 + 40);
      uint64_t Object = a5;
      while (*(void *)(v15 + 120) != v25)
      {
        if (*(_DWORD *)Object == 29)
        {
          uint64_t Object = GTMTLSMContext_getObject(*v32, Object[5], Object[2]);
          if (!Object || *(_DWORD *)Object != 29) {
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_DWORD *)Object != 71) {
            goto LABEL_46;
          }
          uint64_t Object = GTMTLSMContext_getObject(*v32, Object[5], Object[2]);
          if (!Object || *(_DWORD *)Object != 71) {
            goto LABEL_46;
          }
        }
        uint64_t v25 = Object[1];
        if (*(void *)(v15 + 128) == v25) {
          break;
        }
      }
    }
    id v71 = *(id *)(a2 + 8);
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    GetVisibleFunctionTableState((uint64_t)&v80, v11, v15, v76, pa);
    id v26 = objc_alloc_init((Class)MTLVisibleFunctionTableDescriptor);
    [v26 setFunctionCount:**(void **)(v15 + 104)];
    [v26 setResourceIndex:*(void *)(*(void *)(v15 + 104) + 8)];
    [v26 setForceResourceIndex:1];
    if (*(void *)(v15 + 128))
    {
      unint64_t v27 = *(unsigned __int8 *)(v15 + 168);
      id v28 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100](*(void *)(a3 + 40), *(void *)(a3 + 48), a5[1]);
      if (v28)
      {
        id v29 = (id)v28[3];
        if (v29)
        {
          unint64_t v67 = v29;
          id v30 = [v29 newVisibleFunctionTableWithDescriptor:v26 stage:v27];
          if (v30)
          {
            unint64_t v31 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100](*(void *)(a3 + 80), *(void *)(a3 + 88), v27);
            if (!v31) {
              abort();
            }
            SetupInstrumentedFunctionTable(v30, *(uint64_t **)(v11 + 40), (uint64_t)(v31 + 3), (uint64_t)&v80, a5[1], v76);
          }
LABEL_41:

LABEL_43:
          if (v30)
          {
            *(void *)&long long v80 = *(void *)(v15 + 8);
            id v37 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(v73, v80, &v80);
            objc_storeStrong(v37 + 3, v30);
            [*(id *)(a2 + 8) setVisibleFunctionTable:v30 forKey:*(void *)(v15 + 8)];
          }

          goto LABEL_46;
        }
      }
    }
    else if (*(void *)(v15 + 120))
    {
      uint64_t v34 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100](*(void *)(a3 + 120), *(void *)(a3 + 128), a5[1]);
      if (v34)
      {
        id v35 = (id)v34[3];
        if (v35)
        {
          unint64_t v67 = v35;
          id v36 = [v35 newVisibleFunctionTableWithDescriptor:v26];
          id v30 = v36;
          if (v36) {
            SetupInstrumentedFunctionTable(v36, *(uint64_t **)(v11 + 40), a3 + 200, (uint64_t)&v80, a5[1], v76);
          }
          goto LABEL_41;
        }
      }
    }
    id v30 = 0;
    goto LABEL_43;
  }
LABEL_47:
  if (v13->nelts >= 1)
  {
    for (uint64_t i = 0; i < v13->nelts; ++i)
    {
      uint64_t v39 = *(void *)&v13->elts[8 * i];
      if (!v39) {
        continue;
      }
      unint64_t v40 = *(void *)(v39 + 16);
      unint64_t v41 = *(void *)(v11 + 64);
      if (v41 <= v40 && *(void *)(v11 + 72) + v41 > v40) {
        continue;
      }
      int v43 = *(_DWORD *)(a3 + 256);
      if (*(void *)(v39 + 120) && v43 != 8) {
        continue;
      }
      uint64_t v45 = *(void *)(v39 + 128);
      if (v45)
      {
        HIDWORD(v47) = *(unsigned __int8 *)(v39 + 160);
        LODWORD(v47) = (HIDWORD(v47) << 24) - 0x2000000;
        unsigned __int8 v46 = v47 >> 25;
        int v48 = v46 > 7u ? 1 : dword_4C8408[v46];
        if (v48 != v43) {
          continue;
        }
      }
      uint64_t v49 = a5[1];
      if (v45 != v49)
      {
        id v59 = *(uint64_t **)(v11 + 40);
        long long v60 = a5;
        while (*(void *)(v39 + 120) != v49)
        {
          if (*(_DWORD *)v60 == 29)
          {
            long long v60 = GTMTLSMContext_getObject(*v59, v60[5], v60[2]);
            if (!v60 || *(_DWORD *)v60 != 29) {
              goto LABEL_94;
            }
          }
          else
          {
            if (*(_DWORD *)v60 != 71) {
              goto LABEL_94;
            }
            long long v60 = GTMTLSMContext_getObject(*v59, v60[5], v60[2]);
            if (!v60 || *(_DWORD *)v60 != 71) {
              goto LABEL_94;
            }
          }
          uint64_t v49 = v60[1];
          if (*(void *)(v39 + 128) == v49) {
            break;
          }
        }
      }
      std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map((uint64_t)v78, v73);
      id v50 = *(id *)(a2 + 8);
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      GetIntersectionFunctionTableState(&v80, v11, v39, v76, a6, pa);
      id v51 = objc_alloc_init((Class)MTLIntersectionFunctionTableDescriptor);
      [v51 setFunctionCount:*(unsigned int *)(*(void *)(v39 + 104) + 8)];
      [v51 setResourceIndex:**(void **)(v39 + 104)];
      [v51 setForceResourceIndex:1];
      uint64_t v52 = *(void *)(v39 + 128);
      if (v52)
      {
        unint64_t v53 = *(unsigned __int8 *)(v39 + 160);
        uint64_t v54 = GTMTLSMContext_getObject(**(void **)(v11 + 40), v52, v76);
        if (v54)
        {
          uint64_t v55 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100](*(void *)(a3 + 40), *(void *)(a3 + 48), v54[1]);
          if (v55)
          {
            unint64_t v72 = v50;
            id v68 = (id)v55[3];
            id v56 = [v68 newIntersectionFunctionTableWithDescriptor:v51 stage:v53];
            if (v56)
            {
              long long v66 = *(uint64_t **)(v11 + 40);
              unsigned int v57 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100](*(void *)(a3 + 80), *(void *)(a3 + 88), v53);
              if (!v57) {
                abort();
              }
              uint64_t v58 = v57;
              std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map((uint64_t)v79, (uint64_t)v78);
              SetupInstrumentedIntersectionFunctionTable(v56, v72, v66, (uint64_t)(v58 + 3), v79, &v80, *(void *)(v39 + 128), v76);
LABEL_88:
              std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v79);
            }
            goto LABEL_90;
          }
        }
        id v56 = 0;
      }
      else
      {
        uint64_t v61 = *(void *)(v39 + 120);
        if (v61)
        {
          uint64_t v62 = GTMTLSMContext_getObject(**(void **)(v11 + 40), v61, v76);
          if (v62)
          {
            unsigned int v63 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100](*(void *)(a3 + 120), *(void *)(a3 + 128), v62[1]);
            if (v63)
            {
              unint64_t v72 = v50;
              id v68 = (id)v63[3];
              id v56 = [v68 newIntersectionFunctionTableWithDescriptor:v51];
              if (v56)
              {
                long long v64 = *(uint64_t **)(v11 + 40);
                std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map((uint64_t)v79, (uint64_t)v78);
                SetupInstrumentedIntersectionFunctionTable(v56, v50, v64, a3 + 200, v79, &v80, *(void *)(v39 + 120), v76);
                goto LABEL_88;
              }
LABEL_90:

              id v50 = v72;
              goto LABEL_91;
            }
          }
        }
        id v56 = 0;
      }
LABEL_91:

      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v78);
      if (v56)
      {
        *(void *)&long long v80 = *(void *)(v39 + 8);
        int v65 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(v69, v80, &v80);
        objc_storeStrong(v65 + 3, v56);
        [*(id *)(a2 + 8) setIntersectionFunctionTable:v56 forKey:*(void *)(v39 + 8)];
      }

LABEL_94:
      ;
    }
  }
}

void sub_2AFFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&a26);

  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table(a16);
  _Unwind_Resume(a1);
}

void *GetVisibleFunctionTableState(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, apr_pool_t *p)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)a1 = 83;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 98) = 2;
  *(void *)(a1 + 64) = -1;
  uint64_t v9 = **(void **)(a3 + 104);
  *(void *)(a1 + 184) = v9;
  size_t v10 = 8 * v9;
  uint64_t v11 = apr_palloc(p, 8 * v9);
  *(void *)(a1 + 176) = v11;
  bzero(v11, v10);
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v25 = *(void *)(a3 + 8);
  uint64_t result = find_entry(v12, &v25, 8uLL, 0);
  if (*(void *)result)
  {
    uint64_t v14 = *(void *)(*(void *)result + 32);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 32);
      if (v15)
      {
        unsigned int v16 = 0;
        while (1)
        {
          unsigned int v17 = atomic_load((unsigned int *)(v15 + 4));
          uint64_t v18 = v16 + (v17 >> 6) - 1;
          if ((int)v18 > 0) {
            break;
          }
          uint64_t v15 = *(void *)(v15 + 40);
          unsigned int v16 = v18;
          if (!v15)
          {
            unsigned int v16 = v18;
            goto LABEL_10;
          }
        }
      }
      else
      {
        unsigned int v16 = 0;
      }
      uint64_t v18 = 0;
LABEL_10:
      unint64_t v19 = v16 | (unint64_t)(v18 << 32);
LABEL_11:
      uint64_t v20 = v15 + 64;
      while (v15)
      {
        if ((*(unsigned char *)(v20 + ((uint64_t)(HIDWORD(v19) - (int)v19) << 6) + 15) & 8) == 0) {
          break;
        }
        uint64_t v21 = (unint64_t *)(v20 + ((uint64_t)(HIDWORD(v19) - (int)v19) << 6));
        if (*v21 >= a4) {
          break;
        }
        uint64_t result = GTMTLSMVisibleFunctionTableStateful_processTraceFuncWithMap(a1, *(void *)(a2 + 16), (uint64_t)v21);
        unsigned int v22 = atomic_load((unsigned int *)(v15 + 4));
        int v23 = v19 + (v22 >> 6);
        uint64_t v24 = (HIDWORD(v19) + 1);
        unint64_t v19 = (v24 << 32) | v19;
        if (v24 == v23 - 1)
        {
          unint64_t v19 = (v24 << 32) | v24;
          uint64_t v15 = *(void *)(v15 + 40);
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

void SetupInstrumentedFunctionTable(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  id v17 = a1;
  if (*(void *)(a4 + 184))
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(*(void *)(a4 + 176) + 8 * v11);
      if (v12)
      {
        uint64_t Object = GTMTLSMContext_getObject(*a2, v12, a6);
        if (Object)
        {
          uint64_t v14 = Object[5];
          v18[0] = a5;
          v18[1] = v14;
          uint64_t v15 = std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::find<FunctionHandleKey>(*(void *)a3, *(void *)(a3 + 8), v18);
          if (v15)
          {
            id v16 = (id)v15[4];
            [v17 setFunction:v16 atIndex:v11];
          }
        }
      }
      else
      {
        [v17 setFunction:0 atIndex:v11];
      }
      ++v11;
    }
    while (*(void *)(a4 + 184) > v11);
  }
}

void sub_2B032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *unint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2B0548(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = v5[2];
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 >= v8) {
            unint64_t v2 = v7 % v8;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
        size_t v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v7)
            {
              if (i[2] == v7) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8) {
                  v12 %= v8;
                }
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      float v13 = operator new(0x20uLL);
      *float v13 = 0;
      v13[1] = v7;
      BOOL v14 = (void *)v5[3];
      v13[2] = v5[2];
      v13[3] = v14;
      float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v16 = *(float *)(a1 + 32);
      if (!v8 || (float)(v16 * (float)v8) < v15)
      {
        BOOL v17 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v17 = 1;
        }
        unint64_t v18 = v17 | (2 * v8);
        unint64_t v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19) {
          size_t v20 = v19;
        }
        else {
          size_t v20 = v18;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v20);
        unint64_t v8 = *(void *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8) {
            unint64_t v2 = v7 % v8;
          }
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
      }
      uint64_t v21 = *(void *)a1;
      unsigned int v22 = *(void **)(*(void *)a1 + 8 * v2);
      if (v22)
      {
        *float v13 = *v22;
      }
      else
      {
        *float v13 = *v6;
        *uint64_t v6 = v13;
        *(void *)(v21 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v23 = *(void *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v23 >= v8) {
            v23 %= v8;
          }
        }
        else
        {
          v23 &= v8 - 1;
        }
        unsigned int v22 = (void *)(*(void *)a1 + 8 * v23);
      }
      void *v22 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2B0790(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *GetIntersectionFunctionTableState(_DWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, apr_pool_t *a6)
{
  bzero(a1, 0x3A0uLL);
  *a1 = 60;
  *((void *)a1 + 3) = -1;
  *((_WORD *)a1 + 49) = 2;
  *((void *)a1 + 8) = -1;
  uint64_t v12 = *(unsigned int *)(*(void *)(a3 + 104) + 8);
  *((void *)a1 + 22) = v12;
  size_t v13 = 16 * v12;
  BOOL v14 = apr_palloc(a6, 16 * v12);
  *((void *)a1 + 21) = v14;
  bzero(v14, v13);
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v28 = *(void *)(a3 + 8);
  uint64_t result = find_entry(v15, &v28, 8uLL, 0);
  if (*(void *)result)
  {
    uint64_t v17 = *(void *)(*(void *)result + 32);
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 32);
      if (v18)
      {
        unsigned int v19 = 0;
        while (1)
        {
          unsigned int v20 = atomic_load((unsigned int *)(v18 + 4));
          uint64_t v21 = v19 + (v20 >> 6) - 1;
          if ((int)v21 > 0) {
            break;
          }
          uint64_t v18 = *(void *)(v18 + 40);
          unsigned int v19 = v21;
          if (!v18)
          {
            unsigned int v19 = v21;
            goto LABEL_10;
          }
        }
      }
      else
      {
        unsigned int v19 = 0;
      }
      uint64_t v21 = 0;
LABEL_10:
      unint64_t v22 = v19 | (unint64_t)(v21 << 32);
LABEL_11:
      uint64_t v23 = v18 + 64;
      while (v18)
      {
        if ((*(unsigned char *)(v23 + ((uint64_t)(HIDWORD(v22) - (int)v22) << 6) + 15) & 8) == 0) {
          break;
        }
        uint64_t v24 = (unint64_t *)(v23 + ((uint64_t)(HIDWORD(v22) - (int)v22) << 6));
        if (*v24 >= a4) {
          break;
        }
        uint64_t result = GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)a1, *(void *)(a2 + 16), (uint64_t)v24, a5);
        unsigned int v25 = atomic_load((unsigned int *)(v18 + 4));
        int v26 = v22 + (v25 >> 6);
        uint64_t v27 = (HIDWORD(v22) + 1);
        unint64_t v22 = (v27 << 32) | v22;
        if (v27 == v26 - 1)
        {
          unint64_t v22 = (v27 << 32) | v27;
          uint64_t v18 = *(void *)(v18 + 40);
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

void SetupInstrumentedIntersectionFunctionTable(void *a1, void *a2, uint64_t *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, unint64_t a8)
{
  id v30 = a1;
  id v15 = a2;
  if (a6[22])
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = a6[21];
      int v19 = *(_DWORD *)(v18 + v16);
      switch(v19)
      {
        case 3:
          [v30 setOpaqueCurveIntersectionFunctionWithSignature:*(void *)(v18 + v16 + 8) atIndex:v17];
          break;
        case 2:
          [v30 setOpaqueTriangleIntersectionFunctionWithSignature:*(void *)(v18 + v16 + 8) atIndex:v17];
          break;
        case 1:
          uint64_t v20 = *(void *)(v18 + v16 + 8);
          if (v20)
          {
            uint64_t Object = GTMTLSMContext_getObject(*a3, v20, a8);
            if (Object && (Object[7] == a7 || Object[6] == a7))
            {
              uint64_t v22 = Object[5];
              v31[0] = a7;
              v31[1] = v22;
              uint64_t v23 = std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::find<FunctionHandleKey>(*(void *)a4, *(void *)(a4 + 8), v31);
              if (v23)
              {
                id v24 = (id)v23[4];
                [v30 setFunction:v24 atIndex:v17];
              }
            }
          }
          else
          {
            [v30 setFunction:0 atIndex:v17];
          }
          break;
      }
      ++v17;
      v16 += 16;
    }
    while (a6[22] > v17);
  }
  uint64_t v25 = 0;
  int v26 = a6 + 25;
  do
  {
    int v27 = *((_DWORD *)v26 - 4);
    if (v27 == 2)
    {
      id v29 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(a5, *(v26 - 1));
      if (!v29) {
        goto LABEL_23;
      }
      id v28 = (id)v29[3];
      [v30 setVisibleFunctionTable:v28 atBufferIndex:v25];
    }
    else
    {
      if (v27 != 1) {
        goto LABEL_23;
      }
      id v28 = [v15 bufferForKey:*(v26 - 1)];
      [v30 setBuffer:v28 offset:*v26 atIndex:v25];
    }

LABEL_23:
    ++v25;
    v26 += 3;
  }
  while (v25 != 31);
}

void sub_2B0B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 2;
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  int v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  uint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    id v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          void *v22 = *v28;
          *id v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          id v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        uint64_t v22 = v28;
        id v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v30 = *a1;
  unint64_t v31 = *(void **)(*a1 + 8 * v5);
  if (v31)
  {
    *uint64_t i = *v31;
LABEL_72:
    *unint64_t v31 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v12;
  void *v12 = i;
  *(void *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    unint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_2B0F64(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,void *>>>::operator()[abi:nn180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void *std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::find<FunctionHandleKey>(uint64_t a1, unint64_t a2, void *a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = a3[1] ^ (*a3 << 32);
  uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a3[1] ^ (*a3 << 32);
    if (v3 >= a2) {
      unint64_t v5 = v3 % a2;
    }
  }
  else
  {
    unint64_t v5 = (a2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a3 && result[3] == a3[1]) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= a2) {
            v8 %= a2;
          }
        }
        else
        {
          v8 &= a2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 2;
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  int v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  uint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    id v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          void *v22 = *v28;
          *id v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          id v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        uint64_t v22 = v28;
        id v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v30 = *a1;
  unint64_t v31 = *(void **)(*a1 + 8 * v5);
  if (v31)
  {
    *uint64_t i = *v31;
LABEL_72:
    *unint64_t v31 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v12;
  void *v12 = i;
  *(void *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    unint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_2B1468(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

id ObtainTracingFunction(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a5;
  if (*(unsigned char *)(a4 + 132)) {
    goto LABEL_2;
  }
  uint64_t v15 = a3 + 160;
  unint64_t v32 = *(void *)(a4 + 8);
  id v14 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(a3 + 160, v32, &v32)[3];
  if (!v14)
  {
    uint64_t v16 = *(void *)(a4 + 112);
    if (v16)
    {
      unint64_t v17 = MakeMTLFunctionDescriptor(v16, v13);
      id v18 = [v12 newFunctionWithDescriptor:v17 error:a6];
    }
    else
    {
      uint64_t v19 = *(void *)(a4 + 120);
      if (v19)
      {
        unint64_t v17 = MakeMTLIntersectionFunctionDescriptor(v19, v13);
        id v18 = [v12 newIntersectionFunctionWithDescriptor:v17 error:a6];
      }
      else
      {
        if (!*(void *)(a4 + 56))
        {
LABEL_2:
          id v14 = 0;
          goto LABEL_15;
        }
        unint64_t v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
        uint64_t v30 = *(void **)(a4 + 72);
        if (v30)
        {
          unint64_t v31 = MakeMTLFunctionConstantValues(v30);
          id v14 = [v12 newFunctionWithName:v17 constantValues:v31 error:a6];

LABEL_9:
          if (v14)
          {
            uint64_t v20 = [v14 device];
            unsigned int v21 = SupportsGlobalRelocation(v20, a3);

            if (v21)
            {
              uint64_t v22 = *(void **)(a3 + 240);
              id v23 = v14;
              id v24 = v22;
              id v25 = [objc_alloc((Class)MTLBufferRelocation) initWithSymbolName:@"__resource_tracking_impl_trace_buffer" buffer:v24 offset:0];
              uint8x8_t v26 = v25;
              if (v25)
              {
                unint64_t v32 = (unint64_t)v25;
                uint64_t v27 = +[NSArray arrayWithObjects:&v32 count:1];
                [v23 setRelocations:v27];
              }
            }
            unint64_t v32 = *(void *)(a4 + 8);
            id v28 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(v15, v32, &v32);
            objc_storeStrong(v28 + 3, v14);
          }
          goto LABEL_15;
        }
        id v18 = [v12 newFunctionWithName:v17];
      }
    }
    id v14 = v18;
    goto LABEL_9;
  }
LABEL_15:

  return v14;
}

void sub_2B16F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ObtainTracingLinkedFunctions(const GTMTLSMContext *a1, void *a2, GTMTLReplayAccessTracking *a3, uint64_t a4, unint64_t a5)
{
  uint8x8_t v9 = a2;
  if (a4)
  {
    size_t v10 = ObtainTracingFunctions(a1, v9, a3, *(const unint64_t **)(a4 + 16), *(void *)(a4 + 24), a5);
    id v11 = ObtainTracingFunctions(a1, v9, a3, *(const unint64_t **)a4, *(void *)(a4 + 8), a5);
    uint64_t v12 = ObtainTracingFunctions(a1, v9, a3, *(const unint64_t **)(a4 + 48), *(void *)(a4 + 56), a5);
    id v13 = (void *)v12;
    if (v10 || v11 || v12)
    {
      id v14 = objc_alloc_init((Class)MTLLinkedFunctions);
      [v14 setFunctions:v10];
      [v14 setBinaryFunctions:v11];
      [v14 setPrivateFunctions:v13];
    }
    else
    {
      id v14 = 0;
    }
  }
  else
  {
    id v14 = 0;
  }

  return v14;
}

void sub_2B18C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SupportsGlobalRelocation(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint8x8_t v4 = v3;
  id v5 = 0;
  int v6 = *(_DWORD *)(a2 + 256);
  switch(v6)
  {
    case 1:
    case 4:
      goto LABEL_11;
    case 2:
      if (!*(unsigned char *)(a2 + 261) || [v3 supportsFamily:1009]) {
        goto LABEL_11;
      }
      goto LABEL_14;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_15;
    case 8:
      if ((objc_opt_respondsToSelector() & 1) == 0) {
        goto LABEL_14;
      }
      id v7 = [v4 supportsGlobalVariableRelocationCompute];
      goto LABEL_13;
    default:
      if (v6 != 16 && v6 != 32) {
        goto LABEL_15;
      }
      if (![v3 supportsFamily:1009]) {
        goto LABEL_14;
      }
LABEL_11:
      if (objc_opt_respondsToSelector())
      {
        id v7 = [v4 supportsGlobalVariableRelocationRender];
LABEL_13:
        id v5 = v7;
      }
      else
      {
LABEL_14:
        id v5 = 0;
      }
LABEL_15:

      return v5;
  }
}

void sub_2B1A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *TraceBufferBindingIndex(void *a1, unsigned int a2)
{
  id v3 = a1;
  uint8x8_t v4 = 0;
  if (a2 <= 0x20 && ((1 << a2) & 0x100010116) != 0)
  {
    uint8x8_t v4 = 0;
    while (2)
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      id v5 = v3;
      id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v12;
LABEL_6:
        uint64_t v8 = 0;
        while (1)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v5);
          }
          uint8x8_t v9 = *(void **)(*((void *)&v11 + 1) + 8 * v8);
          if (![v9 type] && objc_msgSend(v9, "index") == v4) {
            break;
          }
          if (v6 == (id)++v8)
          {
            id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
            if (v6) {
              goto LABEL_6;
            }
            goto LABEL_16;
          }
        }

        if (++v4 != (unsigned char *)&dword_1C + 3) {
          continue;
        }
        uint8x8_t v4 = 0;
      }
      else
      {
LABEL_16:
      }
      break;
    }
  }

  return v4;
}

void sub_2B1BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      size_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          size_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  size_t v10 = operator new(0x20uLL);
  *size_t v10 = 0;
  v10[1] = a2;
  void v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *size_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *size_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2B1DF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CreateRenderFunctionHandles(GTMTLReplayAccessTracking *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  CreateRenderFunctionHandles(a1, a2, *(const unint64_t **)(a3 + 16), *(void *)(a3 + 24), a4);
  uint8x8_t v8 = *(const unint64_t **)a3;
  uint64_t v9 = *(void *)(a3 + 8);

  CreateRenderFunctionHandles(a1, a2, v8, v9, a4);
}

void CreateRenderFunctionHandles(GTMTLReplayAccessTracking *a1, unint64_t a2, const unint64_t *a3, uint64_t a4, unint64_t a5)
{
  if (a3 && a4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)((char *)a1 + 80);
    unint64_t v31 = (char *)a1 + 160;
    unint64_t v32 = (uint64_t *)((char *)a1 + 40);
    size_t v10 = (void *)((char *)a1 + 96);
    do
    {
      unint64_t v11 = a3[v8];
      unint64_t v36 = v11;
      unint64_t v37 = a2;
      unint64_t v12 = *((void *)a1 + 11);
      if (v12)
      {
        uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          uint64_t v5 = a5;
          if (v12 <= a5) {
            uint64_t v5 = a5 % v12;
          }
        }
        else
        {
          uint64_t v5 = (v12 - 1) & a5;
        }
        BOOL v14 = *(void ***)(*v9 + 8 * v5);
        if (v14)
        {
          unint64_t v15 = (char *)*v14;
          if (*v14)
          {
            do
            {
              unint64_t v16 = *((void *)v15 + 1);
              if (v16 == a5)
              {
                if (*((void *)v15 + 2) == a5) {
                  goto LABEL_42;
                }
              }
              else
              {
                if (v13.u32[0] > 1uLL)
                {
                  if (v16 >= v12) {
                    v16 %= v12;
                  }
                }
                else
                {
                  v16 &= v12 - 1;
                }
                if (v16 != v5) {
                  break;
                }
              }
              unint64_t v15 = *(char **)v15;
            }
            while (v15);
          }
        }
      }
      unint64_t v15 = (char *)operator new(0x40uLL);
      *(void *)&long long v38 = v15;
      *((void *)&v38 + 1) = v10;
      *(void *)unint64_t v15 = 0;
      *((void *)v15 + 1) = a5;
      *((void *)v15 + 2) = a5;
      *(_OWORD *)(v15 + 24) = 0u;
      *(_OWORD *)(v15 + 40) = 0u;
      *((_DWORD *)v15 + 14) = 1065353216;
      char v39 = 1;
      float v17 = (float)(unint64_t)(*((void *)a1 + 13) + 1);
      float v18 = *((float *)a1 + 28);
      if (!v12 || (float)(v18 * (float)v12) < v17)
      {
        BOOL v19 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3) {
          BOOL v19 = 1;
        }
        unint64_t v20 = v19 | (2 * v12);
        unint64_t v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21) {
          size_t v22 = v21;
        }
        else {
          size_t v22 = v20;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v9, v22);
        unint64_t v12 = *((void *)a1 + 11);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v12 <= a5) {
            uint64_t v5 = a5 % v12;
          }
          else {
            uint64_t v5 = a5;
          }
        }
        else
        {
          uint64_t v5 = (v12 - 1) & a5;
        }
      }
      uint64_t v23 = *v9;
      id v24 = *(void **)(*v9 + 8 * v5);
      if (v24)
      {
        *(void *)unint64_t v15 = *v24;
      }
      else
      {
        *(void *)unint64_t v15 = *v10;
        *size_t v10 = v15;
        *(void *)(v23 + 8 * v5) = v10;
        if (!*(void *)v15) {
          goto LABEL_41;
        }
        unint64_t v25 = *(void *)(*(void *)v15 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v25 >= v12) {
            v25 %= v12;
          }
        }
        else
        {
          v25 &= v12 - 1;
        }
        id v24 = (void *)(*v9 + 8 * v25);
      }
      *id v24 = v15;
LABEL_41:
      *(void *)&long long v38 = 0;
      ++*((void *)a1 + 13);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,void *>,std::__hash_node_destructor<std::equal_to<FunctionHandleKey><void *>>>::reset[abi:nn180100]((uint64_t)&v38);
LABEL_42:
      uint64_t v5 = (uint64_t)(v15 + 24);
      *(void *)&long long v38 = a2;
      *((void *)&v38 + 1) = v11;
      id v26 = (id)std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::__emplace_unique_key_args<FunctionHandleKey,std::piecewise_construct_t const&,std::tuple<FunctionHandleKey const&>,std::piecewise_construct_t const&<>>((uint64_t)(v15 + 24), &v38, &v38)[4];
      if (!v26)
      {
        id v27 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(v32, v37, &v37)[3];
        if (v27)
        {
          id v28 = v27;
          id v29 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>((uint64_t)v31, v36, &v36)[3];
          if (v29)
          {
            id v26 = [v28 functionHandleWithFunction:v29 stage:a5];
            if (v26)
            {
              uint64_t v30 = (id *)std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::__emplace_unique_key_args<FunctionHandleKey,std::piecewise_construct_t const&,std::tuple<FunctionHandleKey const&>,std::piecewise_construct_t const&<>>(v5, &v38, &v38);
              objc_storeStrong(v30 + 4, v26);
            }
          }
          else
          {
            id v26 = 0;
          }
        }
        else
        {
          id v26 = 0;
        }
      }

      ++v8;
    }
    while (v8 != a4);
  }
}

void sub_2B21AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::__emplace_unique_key_args<FunctionHandleKey,std::piecewise_construct_t const&,std::tuple<FunctionHandleKey const&>,std::piecewise_construct_t const&<>>(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = a2[1] ^ (*a2 << 32);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2[1] ^ (*a2 << 32);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  i[4] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_42:
    *unint64_t v20 = i;
    goto LABEL_43;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2B23EC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2B2600(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,void *>>>::operator()[abi:nn180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,void *>,std::__hash_node_destructor<std::equal_to<FunctionHandleKey><void *>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

id ObtainTracingFunctions(const GTMTLSMContext *a1, GTMTLReplayObjectMap *a2, GTMTLReplayAccessTracking *a3, const unint64_t *a4, uint64_t a5, unint64_t a6)
{
  size_t v10 = a2;
  uint64_t v23 = [(GTMTLReplayObjectMap *)v10 defaultDevice];
  if (a4)
  {
    id v21 = [objc_alloc((Class)NSMutableArray) initWithCapacity:a5];
    if (a5)
    {
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = *a4++;
        uint64_t Object = GTMTLSMContext_lastObject(*(void *)a1, v12, a6);
        if (Object)
        {
          uint64_t v14 = Object;
          unint64_t v15 = [(GTMTLReplayObjectMap *)v10 libraryForKey:*(void *)(Object + 40)];
          unint64_t v16 = [(GTMTLReplayObjectMap *)v10 functionMap];
          id v24 = v11;
          size_t v17 = ObtainTracingFunction(v23, v15, (uint64_t)a3, v14, v16, (uint64_t)&v24);
          id v18 = v24;

          if (v17) {
            [v21 addObject:v17];
          }

          unint64_t v11 = v18;
        }
        else
        {
          id v18 = v11;
        }
        --a5;
      }
      while (a5);
    }
    else
    {
      id v18 = 0;
    }

    uint64_t v19 = v21;
  }
  else
  {
    uint64_t v19 = 0;
  }

  return v19;
}

void sub_2B2830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2B2A88(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void FlushCommandQueue(GTMTLReplayController *a1)
{
  [a1->var1 commitCommandBuffers];
  unint64_t v2 = [a1->var1 defaultCommandQueue];
  id v3 = [v2 commandBuffer];

  [v3 commit];
  [v3 waitUntilCompleted];
  [v3 status];
}

void sub_2B2B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t UpdateDrawFunctionTables(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, void *a5, unint64_t a6)
{
  id v11 = a5;
  uint64_t updated = 0;
  signed int v13 = *(_DWORD *)(a1 + 256);
  if (v13 > 15)
  {
    if (v13 == 16)
    {
      uint64_t v14 = a4 + 3584;
      uint64_t v15 = a4 + 3576;
      goto LABEL_10;
    }
    if (v13 == 32)
    {
      uint64_t v14 = a4 + 5240;
      uint64_t v15 = a4 + 5232;
      goto LABEL_10;
    }
  }
  else
  {
    if (v13 == 1)
    {
      uint64_t v14 = a4 + 24;
      uint64_t v15 = a4 + 8;
      goto LABEL_10;
    }
    if (v13 == 2)
    {
      uint64_t v14 = a4 + 1928;
      uint64_t v15 = a4 + 1920;
LABEL_10:
      uint64_t updated = UpdateFunctionTables<31ul,1ul>(v13, v11, v14, v15, a2, a6, a3);
    }
  }

  return updated;
}

void sub_2B2C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t UpdateFunctionTables<31ul,1ul>(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, void *a7)
{
  id v13 = a2;
  uint64_t v14 = v13;
  LOBYTE(v15) = 0;
  if (a1 > 0x20) {
    goto LABEL_46;
  }
  if (((1 << a1) & 0x100010016) == 0)
  {
    if (a1 != 8) {
      goto LABEL_46;
    }
    if ([v13 conformsToProtocol:&OBJC_PROTOCOL___MTLComputeCommandEncoder]) {
      goto LABEL_4;
    }
LABEL_45:
    LOBYTE(v15) = 0;
    goto LABEL_46;
  }
  if (([v13 conformsToProtocol:&OBJC_PROTOCOL___MTLRenderCommandEncoder] & 1) == 0) {
    goto LABEL_45;
  }
LABEL_4:
  uint64_t v16 = 0;
  uint64_t v17 = 1;
  do
  {
    uint64_t v18 = *(void *)(a3 + 8 * v16);
    if (!v18 || ((*(void *)(a4 + 8 * (v16 >> 6)) >> v16) & 1) != 0) {
      goto LABEL_7;
    }
    uint64_t Object = GTMTLSMContext_getObject(*a5, v18, a6);
    if (!Object) {
      goto LABEL_33;
    }
    if (*(_DWORD *)Object != 60)
    {
      if (*(_DWORD *)Object != 83) {
        goto LABEL_7;
      }
      unint64_t v20 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(a7, Object[1]);
      if (v20)
      {
        id v21 = (uint64_t *)(id)v20[3];
        switch(a1)
        {
          case 1u:
            [v14 setVertexVisibleFunctionTable:v21 atBufferIndex:v16];
            break;
          case 2u:
            [v14 setFragmentVisibleFunctionTable:v21 atBufferIndex:v16];
            break;
          case 4u:
            [v14 setTileVisibleFunctionTable:v21 atBufferIndex:v16];
            break;
          case 8u:
            [v14 setVisibleFunctionTable:v21 atBufferIndex:v16];
            break;
          default:
            goto LABEL_37;
        }
        goto LABEL_37;
      }
LABEL_33:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    int8x8_t v22 = (int8x8_t)a7[6];
    if (!*(void *)&v22) {
      goto LABEL_33;
    }
    unint64_t v23 = Object[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v25 = Object[1];
      if (v23 >= *(void *)&v22) {
        unint64_t v25 = v23 % *(void *)&v22;
      }
    }
    else
    {
      unint64_t v25 = (*(void *)&v22 - 1) & v23;
    }
    id v26 = *(uint64_t ****)(a7[5] + 8 * v25);
    if (!v26) {
      goto LABEL_33;
    }
    id v27 = *v26;
    if (!v27) {
      goto LABEL_33;
    }
    while (1)
    {
      unint64_t v28 = (unint64_t)v27[1];
      if (v23 == v28) {
        break;
      }
      if (v24.u32[0] > 1uLL)
      {
        if (v28 >= *(void *)&v22) {
          v28 %= *(void *)&v22;
        }
      }
      else
      {
        v28 &= *(void *)&v22 - 1;
      }
      if (v28 != v25) {
        goto LABEL_33;
      }
LABEL_31:
      uint64_t v15 = 0;
      id v27 = (uint64_t **)*v27;
      if (!v27) {
        goto LABEL_8;
      }
    }
    if (v27[2] != (uint64_t *)v23) {
      goto LABEL_31;
    }
    id v21 = v27[3];
    switch(a1)
    {
      case 1u:
        [v14 setVertexIntersectionFunctionTable:v21 atBufferIndex:v16];
        break;
      case 2u:
        [v14 setFragmentIntersectionFunctionTable:v21 atBufferIndex:v16];
        break;
      case 4u:
        [v14 setTileIntersectionFunctionTable:v21 atBufferIndex:v16];
        break;
      case 8u:
        [v14 setIntersectionFunctionTable:v21 atBufferIndex:v16];
        break;
      default:
        break;
    }
LABEL_37:

LABEL_7:
    uint64_t v15 = v17;
LABEL_8:
    ++v16;
    uint64_t v17 = v15;
  }
  while (v16 != 31);
LABEL_46:

  return v15 & 1;
}

void sub_2B2F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ObtainTracingComputePipelineState(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, apr_pool_t *a6)
{
  id v11 = a2;
  int v43 = [v11 defaultDevice];
  unint64_t v12 = *(void *)(a3 + 8);
  v51[0] = v12;
  id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>((uint64_t *)(a4 + 120), v12, v51)[3];
  unsigned int v42 = SupportsGlobalRelocation(v43, a4);
  if (v13)
  {
LABEL_2:
    id v13 = v13;
    uint64_t v14 = v13;
    goto LABEL_20;
  }
  uint64_t v15 = *(void *)(a4 + 248);
  unint64_t v16 = (unint64_t)(v15 == 2) << 31;
  BOOL v17 = v15 == 1;
  uint64_t v18 = 0x40000000;
  if (!v17) {
    uint64_t v18 = v16;
  }
  uint64_t v38 = v18;
  uint64_t v19 = *(void *)(a3 + 48);
  if (!v19)
  {
    uint64_t Object = (void *)a3;
    while (1)
    {
      uint64_t v21 = Object[7];
      if (v21) {
        break;
      }
      uint64_t Object = GTMTLSMContext_getObject(*a1, Object[5], Object[2]);
      uint64_t v19 = Object[6];
      if (v19) {
        goto LABEL_11;
      }
    }
    uint64_t v19 = *(void *)(v21 + 848);
  }
LABEL_11:
  id v13 = (void *)GTMTLSMContext_lastObject(*a1, v19, a5);
  if (!v13) {
    goto LABEL_19;
  }
  unint64_t v41 = [v11 computePipelineStateForKey:*(void *)(a3 + 8)];
  char v39 = [v11 libraryForKey:v13[5]];
  if (!v39)
  {

    id v13 = 0;
LABEL_19:
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  int8x8_t v22 = [v11 functionMap];
  id v50 = 0;
  id v13 = ObtainTracingFunction(v43, v39, a4, (uint64_t)v13, v22, (uint64_t)&v50);
  id v40 = v50;

  unint64_t v23 = v13;
  if (v13)
  {
    unint64_t v36 = v13;
    GTMTLSMComputePipelineState_computePipelineDescriptor(a1, a3, v48, a6);
    uint8x8_t v24 = (void (*)(void *, void *))MakeMTLComputePipelineDescriptor;
    unint64_t v25 = [v11 computePipelineDescriptorMap];
    id v26 = v24(v48, v25);

    unint64_t v37 = v26;
    [v26 setComputeFunction:v36];
    id v27 = ObtainTracingLinkedFunctions((const GTMTLSMContext *)a1, v11, (GTMTLReplayAccessTracking *)a4, (uint64_t)v49, a5);
    [v26 setLinkedFunctions:v27];

    if (v41) {
      [v26 setMaxTotalThreadsPerThreadgroup:[v41 maxTotalThreadsPerThreadgroup]];
    }
    if (v42)
    {
      id v47 = v40;
      id v13 = [v43 newComputePipelineStateWithDescriptor:v26 options:v38 reflection:0 error:&v47];
      id v28 = v47;

      id v29 = 0;
      id v40 = v28;
    }
    else
    {
      id v45 = v40;
      id v46 = 0;
      id v13 = [v43 newComputePipelineStateWithDescriptor:v26 options:v38 | 1 reflection:&v46 error:&v45];
      id v29 = v46;
      id v31 = v45;

      unint64_t v32 = [v29 bindings];
      unsigned int v33 = TraceBufferBindingIndex(v32, *(_DWORD *)(a4 + 256));

      unint64_t v44 = *(void *)(a3 + 8);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a4, v44, &v44)+ 6) = v33;
      id v40 = v31;
    }
    if (v13)
    {
      uint64_t v34 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>((uint64_t *)(a4 + 120), v12, v51);
      objc_storeStrong(v34 + 3, v13);
      if (*(_DWORD *)(a4 + 256) == 8)
      {
        unint64_t v35 = *(void *)(a3 + 8);
        CreateComputeFunctionHandles(a4, v35, v49[2], (uint64_t)v49[3]);
        CreateComputeFunctionHandles(a4, v35, v49[0], (uint64_t)v49[1]);
      }
    }
    else
    {
      GTMTLReplay_handleNSError(v40);
    }

    unint64_t v23 = v36;
  }
  uint64_t v14 = v23;

  if (v14) {
    goto LABEL_2;
  }
LABEL_20:

  return v14;
}

void sub_2B33A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = a1 + 2;
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v19 = operator new(8 * *(void *)&prime);
  unint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  int8x8_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    id v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          void *v22 = *v28;
          *id v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          id v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        int8x8_t v22 = v28;
        id v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v30 = *a1;
  id v31 = *(void **)(*a1 + 8 * v5);
  if (v31)
  {
    *uint64_t i = *v31;
LABEL_72:
    *id v31 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v12;
  void *v12 = i;
  *(void *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    id v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_2B3864(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void CreateComputeFunctionHandles(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    if (a4)
    {
      unint64_t v5 = a3;
      uint64_t v7 = a1 + 200;
      uint8x8_t v8 = (uint64_t *)(a1 + 120);
      uint64_t v9 = a1 + 160;
      do
      {
        unint64_t v11 = *v5++;
        unint64_t v10 = v11;
        unint64_t v18 = v11;
        unint64_t v19 = a2;
        *(void *)&long long v17 = a2;
        *((void *)&v17 + 1) = v11;
        id v12 = (id)std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::__emplace_unique_key_args<FunctionHandleKey,std::piecewise_construct_t const&,std::tuple<FunctionHandleKey const&>,std::piecewise_construct_t const&<>>(v7, &v17, &v17)[4];
        if (!v12)
        {
          id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(v8, a2, &v19)[3];
          if (v13)
          {
            float v14 = v13;
            id v15 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(v9, v10, &v18)[3];
            if (v15)
            {
              id v12 = [v14 functionHandleWithFunction:v15];
              if (v12)
              {
                unint64_t v16 = (id *)std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::__emplace_unique_key_args<FunctionHandleKey,std::piecewise_construct_t const&,std::tuple<FunctionHandleKey const&>,std::piecewise_construct_t const&<>>(v7, &v17, &v17);
                objc_storeStrong(v16 + 4, v12);
              }
            }
            else
            {
              id v12 = 0;
            }
          }
          else
          {
            id v12 = 0;
          }
        }

        --v4;
      }
      while (v4);
    }
  }
}

void sub_2B39AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ReplaceFunctionTablesWithRegular(uint64_t a1, uint64_t a2, int a3, unint64_t a4, uint64_t *a5, apr_pool_t *p)
{
  id v59 = a5;
  uint64_t v9 = *(void *)a2;
  unint64_t v10 = apr_array_make(p, 5, 8);
  pa = p;
  unint64_t v11 = apr_array_make(p, 5, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v9 + 40) + 56), a4, v10);
  unint64_t v64 = a4;
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(v9 + 40) + 64), a4, v11);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v58 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v60 = a1;
  *(_DWORD *)(a1 + 72) = 1065353216;
  int nelts = v10->nelts;
  if (nelts >= 1)
  {
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)&v10->elts[8 * v13];
      if (v14)
      {
        unint64_t v15 = *(void *)(v14 + 16);
        unint64_t v16 = *(void *)(v9 + 64);
        BOOL v17 = v16 <= v15 && *(void *)(v9 + 72) + v16 > v15;
        if (!v17 && ((a3 & 8) != 0 || !*(void *)(v14 + 120)))
        {
          if (!*(void *)(v14 + 128)) {
            break;
          }
          HIDWORD(v19) = *(unsigned __int8 *)(v14 + 168);
          LODWORD(v19) = (HIDWORD(v19) << 24) - 0x2000000;
          unsigned __int8 v18 = v19 >> 25;
          int v20 = v18 > 7u ? 1 : dword_4C8408[v18];
          if ((v20 & a3) != 0) {
            break;
          }
        }
      }
LABEL_30:
      if (++v13 >= nelts) {
        goto LABEL_31;
      }
    }
    id v21 = *(id *)(a2 + 8);
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    GetVisibleFunctionTableState((uint64_t)&v68, v9, v14, v64, pa);
    id v22 = objc_alloc_init((Class)MTLVisibleFunctionTableDescriptor);
    [v22 setFunctionCount:**(void **)(v14 + 104), v58, v59];
    [v22 setResourceIndex:*(void *)(*(void *)(v14 + 104) + 8)];
    [v22 setForceResourceIndex:1];
    uint64_t v23 = *(void *)(v14 + 128);
    if (v23)
    {
      uint64_t v24 = *(unsigned __int8 *)(v14 + 168);
      uint64_t Object = GTMTLSMContext_getObject(**(void **)(v9 + 40), v23, v64);
      if (Object)
      {
        uint8x8_t v26 = [v21 renderPipelineStateForKey:Object[1]];
        uint64_t v27 = v26;
        if (v26)
        {
          id v28 = [v26 newVisibleFunctionTableWithDescriptor:v22 stage:v24];
          unint64_t v29 = v28;
          if (v28) {
            goto LABEL_24;
          }
          goto LABEL_25;
        }
      }
    }
    else
    {
      uint64_t v30 = *(void *)(v14 + 120);
      if (v30)
      {
        id v31 = GTMTLSMContext_getObject(**(void **)(v9 + 40), v30, v64);
        if (v31)
        {
          unint64_t v32 = [v21 computePipelineStateForKey:v31[1]];
          uint64_t v27 = v32;
          if (v32)
          {
            id v28 = [v32 newVisibleFunctionTableWithDescriptor:v22];
            unint64_t v29 = v28;
            if (v28) {
LABEL_24:
            }
              SetupRegularVisibleFunctionTable(v28, *(uint64_t **)(v9 + 40), v21, (uint64_t)&v68, v64);
LABEL_25:

LABEL_27:
            if (v29)
            {
              *(void *)&long long v68 = *(void *)(v14 + 8);
              unsigned int v33 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(v60, v68, &v68);
              objc_storeStrong(v33 + 3, v29);
              [*(id *)(a2 + 8) setVisibleFunctionTable:v29 forKey:*(void *)(v14 + 8)];
            }

            int nelts = v10->nelts;
            goto LABEL_30;
          }
        }
      }
    }
    unint64_t v29 = 0;
    goto LABEL_27;
  }
LABEL_31:
  int v34 = v11->nelts;
  if (v34 >= 1)
  {
    uint64_t v35 = 0;
    unint64_t v36 = &send_ptr;
    do
    {
      uint64_t v37 = *(void *)&v11->elts[8 * v35];
      if (!v37) {
        goto LABEL_61;
      }
      unint64_t v38 = *(void *)(v37 + 16);
      unint64_t v39 = *(void *)(v9 + 64);
      BOOL v40 = v39 <= v38 && *(void *)(v9 + 72) + v39 > v38;
      if (v40 || (a3 & 8) == 0 && *(void *)(v37 + 120)) {
        goto LABEL_61;
      }
      if (*(void *)(v37 + 128))
      {
        HIDWORD(v42) = *(unsigned __int8 *)(v37 + 160);
        LODWORD(v42) = (HIDWORD(v42) << 24) - 0x2000000;
        unsigned __int8 v41 = v42 >> 25;
        int v43 = v41 > 7u ? 1 : dword_4C8408[v41];
        if ((v43 & a3) == 0) {
          goto LABEL_61;
        }
      }
      std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map((uint64_t)v66, v60);
      id v62 = *(id *)(a2 + 8);
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      GetIntersectionFunctionTableState(&v68, v9, v37, v64, v59, pa);
      id v44 = objc_alloc_init((Class)v36[167]);
      [v44 setFunctionCount:*(unsigned int *)(*(void *)(v37 + 104) + 8)];
      [v44 setResourceIndex:**(void **)(v37 + 104)];
      [v44 setForceResourceIndex:1];
      uint64_t v45 = *(void *)(v37 + 128);
      if (v45)
      {
        uint64_t v46 = *(unsigned __int8 *)(v37 + 160);
        id v47 = GTMTLSMContext_getObject(**(void **)(v9 + 40), v45, v64);
        if (!v47) {
          goto LABEL_57;
        }
        int v48 = [v62 renderPipelineStateForKey:v47[1]];
        uint64_t v49 = v48;
        if (!v48) {
          goto LABEL_57;
        }
        id v50 = [v48 newIntersectionFunctionTableWithDescriptor:v44 stage:v46];
        if (v50)
        {
          id v51 = *(uint64_t **)(v9 + 40);
          std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map((uint64_t)v67, (uint64_t)v66);
          SetupRegularIntersectionFunctionTable(v50, v62, v51, v67, &v68, *(void *)(v37 + 128), v64);
LABEL_55:
          std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v67);
        }
      }
      else
      {
        uint64_t v52 = *(void *)(v37 + 120);
        if (!v52
          || (unint64_t v53 = GTMTLSMContext_getObject(**(void **)(v9 + 40), v52, v64)) == 0
          || ([v62 computePipelineStateForKey:v53[1]],
              uint64_t v54 = objc_claimAutoreleasedReturnValue(),
              (uint64_t v49 = v54) == 0))
        {
LABEL_57:
          id v50 = 0;
          goto LABEL_58;
        }
        uint64_t v55 = v36;
        id v50 = [v54 newIntersectionFunctionTableWithDescriptor:v44];
        if (v50)
        {
          id v56 = *(uint64_t **)(v9 + 40);
          std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map((uint64_t)v67, (uint64_t)v66);
          SetupRegularIntersectionFunctionTable(v50, v62, v56, v67, &v68, *(void *)(v37 + 120), v64);
          unint64_t v36 = v55;
          goto LABEL_55;
        }
      }

LABEL_58:
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v66);
      if (v50)
      {
        *(void *)&long long v68 = *(void *)(v37 + 8);
        unsigned int v57 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto28MTLIntersectionFunctionTable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(v58, v68, &v68);
        objc_storeStrong(v57 + 3, v50);
        [*(id *)(a2 + 8) setIntersectionFunctionTable:v50 forKey:*(void *)(v37 + 8)];
      }

      int v34 = v11->nelts;
LABEL_61:
      ++v35;
    }
    while (v35 < v34);
  }
}

void sub_2B3FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)va1);

  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table(a4);
  _Unwind_Resume(a1);
}

DYMTLResourceUsageItem *MakeResourceUsageItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(DYMTLResourceUsageItem);
  [(DYMTLResourceUsageItem *)v4 setStage:a2];
  [(DYMTLResourceUsageItem *)v4 setKind:*(void *)(a1 + 8)];
  [(DYMTLResourceUsageItem *)v4 setResourceID:*(void *)a1];
  [(DYMTLResourceUsageItem *)v4 setUsage:*(unsigned __int8 *)(a1 + 16)];

  return v4;
}

void sub_2B4114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

DYMTLResourceUsageItem *MakeResourceUsageItem(uint64_t a1)
{
  unint64_t v2 = objc_alloc_init(DYMTLResourceUsageItem);
  [(DYMTLResourceUsageItem *)v2 setStage:0];
  [(DYMTLResourceUsageItem *)v2 setKind:*(void *)(a1 + 8)];
  [(DYMTLResourceUsageItem *)v2 setResourceID:*(void *)a1];
  [(DYMTLResourceUsageItem *)v2 setUsage:*(unsigned __int8 *)(a1 + 16)];

  return v2;
}

void sub_2B4194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ObtainResourceTrackingTracingBufferV2(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [v3 newBufferWithLength:24 * *(int *)(*a2 + 12)+ 16* (*(_DWORD *)(a2[2] + 48)+ *(_DWORD *)(a2[1] + 48)+ *(_DWORD *)(a2[3] + 48)+ *(_DWORD *)(a2[4] + 48)+ *(_DWORD *)(a2[5] + 48)+ *(_DWORD *)(a2[6] + 48)+ *(_DWORD *)(a2[7] + 48)+ 2 * *(_DWORD *)(a2[8] + 48))+ 64 options:0];

  return v4;
}

void sub_2B4254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void InstrumentSubCommandWithAccessTrackingV2(uint64_t a1, GTMTLReplayController *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6, apr_pool_t *a7)
{
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (v8 >> 2 != 1073737833) {
    goto LABEL_9;
  }
  unsigned int v15 = v8 & 0xFFFFFFFE;
  if (v15 != -15964)
  {
    if (v15 == -15962)
    {
      var0 = a2->var0;
      id v62 = a2->var1;
      uint64_t v78 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      GetExecuteCommandsInBufferArgs((uint64_t)&v76, a3, (uint64_t)var0->var2);
      uint64_t Object = GTMTLSMContext_getObject(*(void *)var0->var5, v76, *(void *)a3);
      GTMTLCreateIndirectCommandEncoder((uint64_t)__dst, Object[13]);
      if (*((void *)&v76 + 1) <= a4 && (void)v77 + *((void *)&v76 + 1) >= a4 && *((void *)&v77 + 1))
      {
        GTMTLReplayController_debugSubCommandResume((unsigned int *)a2, *(_DWORD *)a3 - LODWORD(var0->var9.var0.var0) + 1, a4 + 1);
        if (InstrumentRenderSubCommand())
        {
          uint64_t v70 = 0;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v65 = 0u;
          RemapIndirectResources((uint64_t)&v65, (uint64_t)a6, v62, a7);
          PopulateResourceTrackingBufferV2(*(void **)(a5 + 240), &v65, v18, v19, v20, v21, v22, v23, (uint64_t)v53, v56, (uint64_t)v59, (uint64_t)v62, v65, v66, v67, v68);
          FlushCommandQueue(a2);
          DecodeResourceTrackingBufferV2((unint64_t *)&v72, *(void **)(a5 + 240), &v65, v24, v25, v26, v27, v28, (uint64_t)v54, v57, v60, (uint64_t)v63, v65, v66, v67, v68);
          uint64_t v29 = v73;
          *(unsigned char *)a1 = 1;
          *(_OWORD *)(a1 + 8) = v72;
          *(void *)(a1 + 24) = v29;
          goto LABEL_22;
        }
        FlushCommandQueue(a2);
      }
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(unsigned char *)a1 = 0;
LABEL_22:
      goto LABEL_40;
    }
LABEL_9:
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)a1 = 0;
    return;
  }
  uint64_t v30 = a2->var0;
  id v62 = a2->var1;
  uint64_t v74 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  GetExecuteCommandsInBufferArgs((uint64_t)&v72, a3, (uint64_t)v30->var2);
  id v31 = GTMTLSMContext_getObject(*(void *)v30->var5, v72, *(void *)a3);
  GTMTLCreateIndirectCommandEncoder((uint64_t)&v65, v31[13]);
  if (*((void *)&v72 + 1) > a4 || (void)v73 + *((void *)&v72 + 1) < a4) {
    goto LABEL_39;
  }
  GTMTLReplayController_debugSubCommandResume((unsigned int *)a2, *(_DWORD *)a3 - LODWORD(v30->var9.var0.var0) + 1, a4 + 1);
  unint64_t v32 = a2->var0;
  id v33 = a2->var1;
  uint64_t v34 = *((void *)&v73 + 1) + v71 * a4;
  uint64_t v35 = *(void *)(v34 + *((void *)&v65 + 1));
  if (v35 == 64 || v35 == 32)
  {
    id v59 = v33;
    id v47 = [v33 computeCommandEncoderForKey:a2->var21.var0.var2];
    int v48 = v47;
    if (v47)
    {
      [v47 useResource:*(void *)(a5 + 240) usage:3];
      uint64_t v56 = v65;
      uint64_t v49 = *(unsigned char *)(v65 + 11)
          ? a2->var21.var3.var0.var1[0]
          : GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a6[4], *(void *)(v34 + v66));
      if (v49)
      {
        id v50 = GTMTLSMContext_getObject(*(void *)v32->var5, v49, *(void *)a3);
        if (v50)
        {
          id v51 = v50;
          uint64_t v52 = ObtainTracingComputePipelineState((uint64_t *)v32->var5, v59, (uint64_t)v50, a5, *(void *)a3, a7);
          if (v52)
          {
            id v53 = v52;
            ReplaceFunctionTablesWithInstrumented((uint64_t)&v76, (uint64_t)a2, a5, *(void *)a3, v51, a6, a7);
            std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v79);
            std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v76);
            if (*(unsigned char *)(v56 + 10))
            {
              [v48 setComputePipelineState:v53];
              DYMTLDispatchComputeCommandEncoder(v48, (uint64_t)&v65, v34);
LABEL_34:

              goto LABEL_16;
            }
            memcpy(__dst, &a2->var21.var3, sizeof(__dst));
            if (GTMTLSMComputeCommandEncoder_loadIndirectCommand((uint64_t)&a2->var21.var3, &v65, v34, a6))
            {
              GTMTLReplayController_restoreComputeCommandEncoder(v48, (uint64_t)&a2->var21.var3, (uint64_t)__dst, v59);
              [v48 setComputePipelineState:v53];
              DYMTLDispatchComputeCommandEncoder(v48, (uint64_t)&v65, v34);
              goto LABEL_34;
            }
            uint64_t v52 = v53;
          }
        }
      }
    }

    goto LABEL_38;
  }
  if (v35)
  {

LABEL_38:
    FlushCommandQueue(a2);
LABEL_39:
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_40;
  }

LABEL_16:
  memset(__dst, 0, 88);
  RemapIndirectResources((uint64_t)__dst, (uint64_t)a6, v62, a7);
  PopulateResourceTrackingBufferV2(*(void **)(a5 + 240), __dst, v36, v37, v38, v39, v40, v41, (uint64_t)v53, v56, (uint64_t)v59, (uint64_t)v62, v65, v66, v67, v68);
  FlushCommandQueue(a2);
  DecodeResourceTrackingBufferV2((unint64_t *)&v76, *(void **)(a5 + 240), __dst, v42, v43, v44, v45, v46, (uint64_t)v55, v58, v61, (uint64_t)v64, v65, v66, v67, v68);
  *(unsigned char *)a1 = 1;
  *(_OWORD *)(a1 + 8) = v76;
  *(void *)(a1 + 24) = v77;
LABEL_40:
}

void sub_2B4728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void RemapIndirectResources(uint64_t a1, uint64_t a2, void *a3, apr_pool_t *a4)
{
  id v91 = a3;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v92 = *(_OWORD *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = apr_hash_make(a4);
  *(void *)(a1 + 56) = apr_hash_make(a4);
  unsigned int v8 = apr_hash_make(a4);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = v8;
  if ((GT_SUPPORT_0 & 0x80000) == 0)
  {
    int v9 = *((_DWORD *)v92[0] + 3);
    if (v9 <= 0)
    {
      unint64_t v14 = v9;
    }
    else
    {
      uint64_t v10 = 0;
      for (uint64_t i = 0; i < v9; ++i)
      {
        uint64_t v12 = *((void *)v92[0] + 3);
        uint64_t v13 = [v91 bufferForKey:*(void *)(v12 + v10 + 16)];
        *(void *)(v12 + v10) = [v13 gpuAddress];

        int v9 = *((_DWORD *)v92[0] + 3);
        v10 += 24;
      }
      unint64_t v14 = v9;
    }
    unint64_t v15 = *((void *)v92[0] + 3);
    unint64_t v16 = v15 + 24 * (int)v14;
    long long v94 = (uint64_t (*)(long long *, long long *))CompareGTMTLGPUAddressResource;
    unint64_t v17 = 126 - 2 * __clz(v14);
    if (v9) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*,false>(v15, v16, &v94, v18, 1);
  }
  char v19 = g_enableIndexedResourceType;
  if ((g_enableIndexedResourceType & 1) == 0)
  {
    uint64_t v20 = *(void *)(a2 + 8);
    id v21 = v91;
    uint64_t v22 = apr_hash_make(a4);
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = 0;
    *(void *)(v20 + 16) = v20;
    *(_DWORD *)(v20 + 40) = 0;
    for (uint64_t j = apr_hash_next((apr_hash_index_t *)(v20 + 16)); j; uint64_t j = apr_hash_next(j))
    {
      uint64_t v24 = *(void *)(*((void *)j + 1) + 32);
      uint64_t v25 = [v21 resourceForKey:*(void *)(v24 + 8)];
      if (v25 && (objc_opt_respondsToSelector() & 1) != 0)
      {
        id v26 = [v25 uniqueIdentifier];
        uint64_t v27 = apr_palloc(a4, 0x20uLL);
        uint64_t v28 = *(void *)(v24 + 8);
        *uint64_t v27 = v26;
        v27[1] = v28;
        apr_hash_set(v22, v27, 8, v27);
      }
    }
    *(void *)(a1 + 8) = v22;
    char v19 = g_enableIndexedResourceType;
  }
  if ((v19 & 2) == 0)
  {
    uint64_t v29 = *(void *)(a2 + 16);
    id v30 = v91;
    id v31 = apr_hash_make(a4);
    *(void *)(v29 + 24) = 0;
    *(void *)(v29 + 32) = 0;
    *(void *)(v29 + 16) = v29;
    *(_DWORD *)(v29 + 40) = 0;
    for (uint64_t k = apr_hash_next((apr_hash_index_t *)(v29 + 16)); k; uint64_t k = apr_hash_next(k))
    {
      uint64_t v33 = *(void *)(*((void *)k + 1) + 32);
      uint64_t v34 = [v30 resourceForKey:*(void *)(v33 + 8)];
      if (v34 && (objc_opt_respondsToSelector() & 1) != 0)
      {
        id v35 = [v34 uniqueIdentifier];
        uint64_t v36 = apr_palloc(a4, 0x20uLL);
        uint64_t v37 = *(void *)(v33 + 8);
        *uint64_t v36 = v35;
        v36[1] = v37;
        apr_hash_set(v31, v36, 8, v36);
      }
    }
    *(void *)(a1 + 16) = v31;
    char v19 = g_enableIndexedResourceType;
  }
  if ((v19 & 0x10) == 0)
  {
    uint64_t v38 = *(void *)(a2 + 24);
    id v39 = v91;
    uint64_t v40 = apr_hash_make(a4);
    *(void *)(v38 + 24) = 0;
    *(void *)(v38 + 32) = 0;
    *(void *)(v38 + 16) = v38;
    *(_DWORD *)(v38 + 40) = 0;
    for (uint64_t m = apr_hash_next((apr_hash_index_t *)(v38 + 16)); m; uint64_t m = apr_hash_next(m))
    {
      uint64_t v42 = *(void *)(*((void *)m + 1) + 32);
      uint64_t v43 = [v39 resourceForKey:*(void *)(v42 + 8)];
      if (v43 && (objc_opt_respondsToSelector() & 1) != 0)
      {
        id v44 = [v43 uniqueIdentifier];
        uint64_t v45 = apr_palloc(a4, 0x20uLL);
        uint64_t v46 = *(void *)(v42 + 8);
        *uint64_t v45 = v44;
        v45[1] = v46;
        apr_hash_set(v40, v45, 8, v45);
      }
    }
    *(void *)(a1 + 24) = v40;
    uint64_t v47 = *(void *)(a2 + 32);
    id v48 = v39;
    uint64_t v49 = apr_hash_make(a4);
    *(void *)(v47 + 24) = 0;
    *(void *)(v47 + 32) = 0;
    *(void *)(v47 + 16) = v47;
    *(_DWORD *)(v47 + 40) = 0;
    for (uint64_t n = apr_hash_next((apr_hash_index_t *)(v47 + 16)); n; uint64_t n = apr_hash_next(n))
    {
      uint64_t v51 = *(void *)(*((void *)n + 1) + 32);
      uint64_t v52 = [v48 resourceForKey:*(void *)(v51 + 8)];
      if (v52 && (objc_opt_respondsToSelector() & 1) != 0)
      {
        id v53 = [v52 uniqueIdentifier];
        id v54 = apr_palloc(a4, 0x20uLL);
        uint64_t v55 = *(void *)(v51 + 8);
        *id v54 = v53;
        v54[1] = v55;
        apr_hash_set(v49, v54, 8, v54);
      }
    }
    *(void *)(a1 + 32) = v49;
  }
  uint64_t v56 = *(void *)(a2 + 40);
  id v57 = v91;
  uint64_t v58 = apr_hash_make(a4);
  *(void *)(v56 + 24) = 0;
  *(void *)(v56 + 32) = 0;
  *(void *)(v56 + 16) = v56;
  *(_DWORD *)(v56 + 40) = 0;
  for (iuint64_t i = apr_hash_next((apr_hash_index_t *)(v56 + 16)); ii; iuint64_t i = apr_hash_next(ii))
  {
    uint64_t v60 = *(void *)(*((void *)ii + 1) + 32);
    uint64_t v61 = [v57 resourceForKey:*(void *)(v60 + 8)];
    if (v61 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      id v62 = [v61 uniqueIdentifier];
      id v63 = apr_palloc(a4, 0x20uLL);
      uint64_t v64 = *(void *)(v60 + 8);
      *id v63 = v62;
      v63[1] = v64;
      apr_hash_set(v58, v63, 8, v63);
    }
  }
  *(void *)(a1 + 40) = v58;
  uint64_t v65 = *(void *)(a2 + 48);
  id v66 = v57;
  long long v67 = apr_hash_make(a4);
  *(void *)(v65 + 24) = 0;
  *(void *)(v65 + 32) = 0;
  *(void *)(v65 + 16) = v65;
  *(_DWORD *)(v65 + 40) = 0;
  for (juint64_t j = apr_hash_next((apr_hash_index_t *)(v65 + 16)); jj; juint64_t j = apr_hash_next(jj))
  {
    uint64_t v69 = *(void *)(*((void *)jj + 1) + 32);
    uint64_t v70 = [v66 resourceForKey:*(void *)(v69 + 8)];
    if (v70 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      id v71 = [v70 uniqueIdentifier];
      long long v72 = apr_palloc(a4, 0x20uLL);
      uint64_t v73 = *(void *)(v69 + 8);
      void *v72 = v71;
      v72[1] = v73;
      apr_hash_set(v67, v72, 8, v72);
    }
  }
  *(void *)(a1 + 48) = v67;
  uint64_t v74 = *(void *)(a2 + 56);
  id v75 = v66;
  long long v76 = apr_hash_make(a4);
  *(void *)(v74 + 24) = 0;
  *(void *)(v74 + 32) = 0;
  *(void *)(v74 + 16) = v74;
  *(_DWORD *)(v74 + 40) = 0;
  for (kuint64_t k = apr_hash_next((apr_hash_index_t *)(v74 + 16)); kk; kuint64_t k = apr_hash_next(kk))
  {
    uint64_t v78 = *(void *)(*((void *)kk + 1) + 32);
    uint64_t v79 = [v75 resourceForKey:*(void *)(v78 + 8)];
    if (v79 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      id v80 = [v79 uniqueIdentifier];
      long long v81 = apr_palloc(a4, 0x20uLL);
      uint64_t v82 = *(void *)(v78 + 8);
      *long long v81 = v80;
      v81[1] = v82;
      apr_hash_set(v76, v81, 8, v81);
    }
  }
  *(void *)(a1 + 56) = v76;
  uint64_t v83 = *(void *)(a2 + 64);
  id v93 = v75;
  long long v84 = apr_hash_make(a4);
  *(void *)(v83 + 24) = 0;
  *(void *)(v83 + 32) = 0;
  *(void *)(v83 + 16) = v83;
  *(_DWORD *)(v83 + 40) = 0;
  for (muint64_t m = apr_hash_next((apr_hash_index_t *)(v83 + 16)); mm; muint64_t m = apr_hash_next(mm))
  {
    uint64_t v86 = *(void *)(*((void *)mm + 1) + 32);
    long long v87 = [v93 resourceForKey:*(void *)(v86 + 8)];
    if (v87 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      id v88 = [v87 uniqueIdentifier];
      long long v89 = apr_palloc(a4, 0x20uLL);
      uint64_t v90 = *(void *)(v86 + 8);
      void *v89 = v88;
      v89[1] = v90;
      apr_hash_set(v84, v89, 8, v89);
    }
  }
  *(void *)(a1 + 64) = v84;
}

void sub_2B4EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id a11)
{
  _Unwind_Resume(a1);
}

void PopulateResourceTrackingBufferV2(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, long long a15, long long a16)
{
  id v62 = a1;
  uint64_t v17 = 0;
  a15 = 0u;
  a16 = 0u;
  a13 = 0u;
  a14 = 0u;
  LOBYTE(a13) = 2;
  unint64_t v18 = *(int *)(*a2 + 12);
  int v19 = *(_DWORD *)(a2[1] + 48);
  HIDWORD(vars8) = v19;
  DWORD1(a13) = v18;
  HIDWORD(a13) = v19;
  do
  {
    v19 += *(_DWORD *)((char *)&vars8 + v17 + 8);
    *(_DWORD *)((char *)&a13 + v17 + 16) = v19;
    v17 += 4;
  }
  while (v17 != 32);
  if (v18)
  {
    if ((v18 & 0x80000000) != 0) {
      abort();
    }
    uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v18);
    uint64_t v22 = v20;
    uint64_t v23 = *a2;
    if (*(int *)(*a2 + 12) < 1)
    {
      id v26 = v20;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v20[24 * v21];
      id v26 = v20;
      do
      {
        uint64_t v27 = (uint64_t *)(*(void *)(v23 + 24) + 24 * v24);
        uint64_t v28 = *v27;
        uint64_t v29 = v27[1] + *v27;
        if (v26 >= v25)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v22) >> 3) + 1;
          if (v30 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v25 - v22) >> 3) > v30) {
            unint64_t v30 = 0x5555555555555556 * ((v25 - v22) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v25 - v22) >> 3) >= 0x555555555555555) {
            unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v31);
          }
          else {
            uint64_t v32 = 0;
          }
          uint64_t v33 = (void *)(v31 + 8 * ((v26 - v22) >> 3));
          *uint64_t v33 = v28;
          v33[1] = v29;
          void v33[2] = 0;
          if (v26 == v22)
          {
            uint64_t v36 = (char *)(v31 + 8 * ((v26 - v22) >> 3));
          }
          else
          {
            unint64_t v34 = v31 + 8 * ((v26 - v22) >> 3);
            do
            {
              long long v35 = *(_OWORD *)(v26 - 24);
              uint64_t v36 = (char *)(v34 - 24);
              *(void *)(v34 - 8) = *((void *)v26 - 1);
              *(_OWORD *)(v34 - 24) = v35;
              v26 -= 24;
              v34 -= 24;
            }
            while (v26 != v22);
          }
          uint64_t v25 = (char *)(v31 + 24 * v32);
          id v26 = (char *)(v33 + 3);
          if (v22) {
            operator delete(v22);
          }
          uint64_t v22 = v36;
        }
        else
        {
          *(void *)id v26 = v28;
          *((void *)v26 + 1) = v29;
          *((void *)v26 + 2) = 0;
          v26 += 24;
        }
        ++v24;
        uint64_t v23 = *a2;
      }
      while (v24 < *(int *)(*a2 + 12));
    }
  }
  else
  {
    uint64_t v22 = 0;
    id v26 = 0;
  }
  unint64_t v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v26 - v22) >> 3));
  if (v26 == v22) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v37;
  }
  std::__introsort<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *,false>((unint64_t)v22, (unint64_t)v26, v38, 1);
  size_t v61 = v26 - v22;
  if (HIDWORD(a15))
  {
    id v39 = (long long *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(HIDWORD(a15));
    uint64_t v41 = &v39[v40];
  }
  else
  {
    id v39 = 0;
    uint64_t v41 = 0;
  }
  int v42 = 0;
  uint64_t v43 = v39;
  do
  {
    uint64_t v44 = IndirectResourcesByTypeIndex(a2, v42);
    if (v44)
    {
      uint64_t v45 = (apr_hash_index_t *)(v44 + 16);
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = 0;
      *(void *)(v44 + 16) = v44;
      uint64_t v46 = v43;
      *(_DWORD *)(v44 + 40) = 0;
LABEL_39:
      uint64_t v47 = v39;
      while (1)
      {
        id v48 = apr_hash_next(v45);
        if (!v48) {
          break;
        }
        uint64_t v45 = v48;
        uint64_t v49 = **(void **)(*((void *)v48 + 1) + 32);
        if (v46 >= v41)
        {
          uint64_t v50 = v46 - v47;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 60) {
            abort();
          }
          if (((char *)v41 - (char *)v47) >> 3 > v51) {
            unint64_t v51 = ((char *)v41 - (char *)v47) >> 3;
          }
          if ((unint64_t)((char *)v41 - (char *)v47) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v51;
          }
          if (v52) {
            unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v52);
          }
          else {
            uint64_t v53 = 0;
          }
          id v54 = (void *)(v52 + 16 * v50);
          *id v54 = v49;
          v54[1] = 0;
          if (v46 == v47)
          {
            id v39 = (long long *)(v52 + 16 * v50);
          }
          else
          {
            unint64_t v55 = 0;
            do
            {
              *(_OWORD *)&v54[v55 / 8 - 2] = v46[v55 / 0x10 - 1];
              v55 -= 16;
            }
            while (&v46[v55 / 0x10] != v47);
            id v39 = (long long *)&v54[v55 / 8];
          }
          uint64_t v41 = (long long *)(v52 + 16 * v53);
          uint64_t v46 = (long long *)(v54 + 2);
          if (v47) {
            operator delete(v47);
          }
          goto LABEL_39;
        }
        *(void *)uint64_t v46 = v49;
        *((void *)v46++ + 1) = 0;
      }
      unint64_t v56 = 126 - 2 * __clz(v46 - v43);
      vars0 = (uint64_t (*)(long long *, long long *))CompareResourceTrackingTracingResourceEntryV2;
      if (v46 == v43) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = v56;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*,false>(v43, v46, &vars0, v57, 1);
      id v39 = v47;
      uint64_t v43 = v46;
    }
    ++v42;
  }
  while (v42 != 9);
  if ((unint64_t)[v62 length] >= (char *)v43 - (char *)v39 + v61 + 64)
  {
    uint64_t v58 = [v62 contents];
    long long v59 = a14;
    _OWORD *v58 = a13;
    v58[1] = v59;
    long long v60 = a16;
    v58[2] = a15;
    v58[3] = v60;
    memcpy(v58 + 4, v22, v61);
    memcpy((char *)v58 + v61 + 64, v39, (char *)v43 - (char *)v39);
  }
  if (v39) {
    operator delete(v39);
  }
  if (v22) {
    operator delete(v22);
  }
}

void sub_2B5440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  if (v19) {
    operator delete(v19);
  }
  if (v18) {
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

void DecodeResourceTrackingBufferV2(unint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, long long a15, long long a16)
{
  id v17 = a2;
  if (IsTraceBufferValidV2(v17))
  {
    id v73 = v17;
    unint64_t v18 = [v17 contents];
    long long v19 = v18[1];
    a13 = *v18;
    a14 = v19;
    long long v20 = v18[3];
    a15 = v18[2];
    a16 = v20;
    unint64_t v21 = HIDWORD(a15);
    size_t v22 = 24 * DWORD1(a13);
    if (DWORD1(a13))
    {
      uint64_t v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(DWORD1(a13));
      bzero(v23, 24 * ((v22 - 24) / 0x18) + 24);
      uint64_t v24 = &v23[24 * ((v22 - 24) / 0x18) + 24];
      __dst = v23;
    }
    else
    {
      __dst = 0;
      uint64_t v24 = 0;
    }
    size_t v25 = 16 * v21;
    if (v21)
    {
      id v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v21);
      bzero(v26, v25);
      uint64_t v79 = &v26[v25];
    }
    else
    {
      id v26 = 0;
      uint64_t v79 = 0;
    }
    uint64_t v27 = (char *)(v18 + 4);
    memcpy(__dst, v27, v22);
    size_t v28 = v25;
    uint64_t v29 = __dst;
    memcpy(v26, &v27[v22], v28);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    uint64_t vars8 = a1;
    unint64_t v30 = 0;
    if (v24 != __dst)
    {
      uint64_t v31 = 0;
      if ((unint64_t)((v24 - __dst) / 24) <= 1) {
        uint64_t v32 = 1;
      }
      else {
        uint64_t v32 = (v24 - __dst) / 24;
      }
      do
      {
        int v33 = v29[6 * v31 + 4];
        if (v33)
        {
          unint64_t v34 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*a3 + 24), *(int *)(*a3 + 12), *(void *)&v29[6 * v31]);
          if (v34)
          {
            uint64_t v35 = v34[2];
            unint64_t v36 = vars8[2];
            if ((unint64_t)v30 >= v36)
            {
              uint64_t v38 = (void *)*vars8;
              unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v30 - *vars8) >> 3);
              unint64_t v40 = v39 + 1;
              if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v38) >> 3);
              if (2 * v41 > v40) {
                unint64_t v40 = 2 * v41;
              }
              if (v41 >= 0x555555555555555) {
                unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42) {
                unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v42);
              }
              else {
                uint64_t v43 = 0;
              }
              unint64_t v44 = v42 + 24 * v39;
              *(void *)unint64_t v44 = v35;
              *(void *)(v44 + 8) = 60;
              *(unsigned char *)(v44 + 16) = v33;
              *(_DWORD *)(v44 + 17) = 0;
              *(_DWORD *)(v44 + 20) = 0;
              unint64_t v45 = v44;
              if (v30 == v38)
              {
                uint64_t v29 = __dst;
                uint64_t v47 = vars8;
              }
              else
              {
                uint64_t v29 = __dst;
                do
                {
                  long long v46 = *(_OWORD *)(v30 - 3);
                  *(void *)(v45 - 8) = *(v30 - 1);
                  *(_OWORD *)(v45 - 24) = v46;
                  v45 -= 24;
                  v30 -= 3;
                }
                while (v30 != v38);
                uint64_t v47 = vars8;
                unint64_t v30 = (void *)*vars8;
              }
              unint64_t v37 = (void *)(v44 + 24);
              unint64_t *v47 = v45;
              v47[1] = v44 + 24;
              v47[2] = v42 + 24 * v43;
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *unint64_t v30 = v35;
              v30[1] = 60;
              *((unsigned char *)v30 + 16) = v33;
              *(_DWORD *)((char *)v30 + 17) = 0;
              unint64_t v37 = v30 + 3;
              *((_DWORD *)v30 + 5) = 0;
              uint64_t v29 = __dst;
            }
            vars8[1] = (unint64_t)v37;
            unint64_t v30 = v37;
          }
        }
        ++v31;
      }
      while (v31 != v32);
    }
    uint64_t v48 = 0;
    uint64_t v49 = vars8;
    unint64_t v74 = (v79 - v26) >> 4;
    do
    {
      uint64_t v80 = ResourceKindByResourceTypeIndex[v48];
      uint64_t v50 = IndirectResourcesByTypeIndex(a3, v48);
      if (v50)
      {
        unint64_t v51 = *((unsigned int *)&a13 + v48++ + 2);
        uint64_t v78 = (unsigned int *)&a13 + v48 + 2;
        unint64_t v52 = *v78;
        if (v51 < v52)
        {
          uint64_t v53 = v50;
          if (v74 <= v51) {
            unint64_t v54 = v51;
          }
          else {
            unint64_t v54 = v74;
          }
          do
          {
            if (v51 == v54) {
              break;
            }
            unint64_t v55 = &v26[16 * v51];
            int v57 = *((_DWORD *)v55 + 2);
            unint64_t v56 = (int *)(v55 + 8);
            if (v57)
            {
              a12 = *(void *)&v26[16 * v51];
              uint64_t v58 = *find_entry(v53, &a12, 8uLL, 0);
              if (v58)
              {
                uint64_t v59 = *(void *)(v58 + 32);
                if (v59)
                {
                  uint64_t v60 = *(void *)(v59 + 8);
                  int v61 = *v56;
                  unint64_t v62 = v49[2];
                  if ((unint64_t)v30 >= v62)
                  {
                    uint64_t v64 = (void *)*v49;
                    unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v30 - *v49) >> 3);
                    unint64_t v66 = v65 + 1;
                    if (v65 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      abort();
                    }
                    unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (void)v64) >> 3);
                    if (2 * v67 > v66) {
                      unint64_t v66 = 2 * v67;
                    }
                    if (v67 >= 0x555555555555555) {
                      unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v68 = v66;
                    }
                    if (v68) {
                      unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v68);
                    }
                    else {
                      uint64_t v69 = 0;
                    }
                    unint64_t v70 = v68 + 24 * v65;
                    *(void *)unint64_t v70 = v60;
                    *(void *)(v70 + 8) = v80;
                    *(unsigned char *)(v70 + 16) = v61;
                    *(_DWORD *)(v70 + 17) = 0;
                    *(_DWORD *)(v70 + 20) = 0;
                    unint64_t v71 = v70;
                    if (v30 == v64)
                    {
                      uint64_t v49 = vars8;
                    }
                    else
                    {
                      uint64_t v49 = vars8;
                      do
                      {
                        long long v72 = *(_OWORD *)(v30 - 3);
                        *(void *)(v71 - 8) = *(v30 - 1);
                        *(_OWORD *)(v71 - 24) = v72;
                        v71 -= 24;
                        v30 -= 3;
                      }
                      while (v30 != v64);
                      unint64_t v30 = (void *)*vars8;
                    }
                    id v63 = (void *)(v70 + 24);
                    unint64_t *v49 = v71;
                    v49[1] = v70 + 24;
                    v49[2] = v68 + 24 * v69;
                    if (v30) {
                      operator delete(v30);
                    }
                  }
                  else
                  {
                    *unint64_t v30 = v60;
                    v30[1] = v80;
                    *((unsigned char *)v30 + 16) = v61;
                    *(_DWORD *)((char *)v30 + 17) = 0;
                    id v63 = v30 + 3;
                    *((_DWORD *)v30 + 5) = 0;
                  }
                  v49[1] = (unint64_t)v63;
                  unint64_t v52 = *v78;
                  unint64_t v30 = v63;
                }
              }
            }
            ++v51;
          }
          while (v51 < v52);
        }
      }
      else
      {
        ++v48;
      }
    }
    while (v48 != 9);
    if (v26) {
      operator delete(v26);
    }
    if (__dst) {
      operator delete(__dst);
    }
    id v17 = v73;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_2B59CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  _Unwind_Resume(a1);
}

BOOL IsTraceBufferValidV2(void *a1)
{
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1 && ![v1 storageMode] && (unint64_t)objc_msgSend(v2, "length") >= 0x40)
  {
    id v5 = v2;
    unint64_t v6 = [v5 contents];
    unsigned int v7 = v6[1];
    uint64_t v8 = v6[11];
    BOOL v3 = (unint64_t)[v5 length] >= 16 * v8 + 24 * (unint64_t)v7 + 64;
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_2B5AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t IndirectResourcesByTypeIndex(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[1];
      break;
    case 1:
      uint64_t result = a1[2];
      break;
    case 2:
      uint64_t result = a1[6];
      break;
    case 3:
      uint64_t result = a1[7];
      break;
    case 4:
    case 5:
      uint64_t result = a1[8];
      break;
    case 6:
      uint64_t result = a1[3];
      break;
    case 7:
      uint64_t result = a1[4];
      break;
    case 8:
      uint64_t result = a1[5];
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a2 - 24;
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(void *)v10 < *(void *)v11)
                {
                  uint64_t v110 = *(void *)(v11 + 16);
                  long long v102 = *(_OWORD *)v11;
                  long long v43 = *(_OWORD *)v10;
                  *(void *)(v11 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v11 = v43;
                  *(void *)(a2 - 8) = v110;
                  *(_OWORD *)unint64_t v10 = v102;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)v11, (unint64_t *)(v11 + 24), (unint64_t *)(a2 - 24));
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(v11, (unint64_t *)(v11 + 24), (unint64_t *)(v11 + 48), a2 - 24);
                break;
              case 5uLL:
                unint64_t v44 = (long long *)(v11 + 24);
                unint64_t v45 = (long long *)(v11 + 48);
                long long v46 = (long long *)(v11 + 72);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(v11, (unint64_t *)(v11 + 24), (unint64_t *)(v11 + 48), v11 + 72);
                if (*(void *)v10 < *(void *)(v11 + 72))
                {
                  long long v47 = *v46;
                  uint64_t v48 = *(void *)(v11 + 88);
                  uint64_t v49 = *(void *)(v10 + 16);
                  *long long v46 = *(_OWORD *)v10;
                  *(void *)(v11 + 88) = v49;
                  *(void *)(v10 + 16) = v48;
                  *(_OWORD *)unint64_t v10 = v47;
                  if (*(void *)v46 < *(void *)v45)
                  {
                    uint64_t v50 = *(void *)(v11 + 64);
                    long long v51 = *v45;
                    *unint64_t v45 = *v46;
                    *(void *)(v11 + 64) = *(void *)(v11 + 88);
                    *long long v46 = v51;
                    *(void *)(v11 + 88) = v50;
                    if (*(void *)v45 < *(void *)v44)
                    {
                      uint64_t v52 = *(void *)(v11 + 40);
                      long long v53 = *v44;
                      *unint64_t v44 = *v45;
                      *(void *)(v11 + 40) = *(void *)(v11 + 64);
                      *unint64_t v45 = v53;
                      *(void *)(v11 + 64) = v52;
                      if (*(void *)(v11 + 24) < *(void *)v11)
                      {
                        uint64_t v111 = *(void *)(v11 + 16);
                        long long v103 = *(_OWORD *)v11;
                        *(_OWORD *)unint64_t v11 = *v44;
                        *(void *)(v11 + 16) = *(void *)(v11 + 40);
                        *unint64_t v44 = v103;
                        *(void *)(v11 + 40) = v111;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 575)
          {
            unint64_t v54 = v11 + 24;
            BOOL v56 = v11 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v11;
                do
                {
                  unint64_t v59 = v54;
                  unint64_t v60 = *(void *)(v58 + 24);
                  if (v60 < *(void *)v58)
                  {
                    long long v104 = *(_OWORD *)(v58 + 32);
                    uint64_t v61 = v57;
                    while (1)
                    {
                      uint64_t v62 = v11 + v61;
                      *(_OWORD *)(v62 + 24) = *(_OWORD *)(v11 + v61);
                      *(void *)(v62 + 40) = *(void *)(v11 + v61 + 16);
                      if (!v61) {
                        break;
                      }
                      v61 -= 24;
                      if (v60 >= *(void *)(v62 - 24))
                      {
                        uint64_t v63 = v11 + v61 + 24;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v63 = v11;
LABEL_80:
                    *(void *)uint64_t v63 = v60;
                    *(_OWORD *)(v63 + 8) = v104;
                  }
                  unint64_t v54 = v59 + 24;
                  v57 += 24;
                  unint64_t v58 = v59;
                }
                while (v59 + 24 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v94 = v54;
                unint64_t v95 = *(void *)(a1 + 24);
                if (v95 < *(void *)a1)
                {
                  long long v107 = *(_OWORD *)(a1 + 32);
                  do
                  {
                    *(_OWORD *)unint64_t v54 = *(_OWORD *)(v54 - 24);
                    *(void *)(v54 + 16) = *(void *)(v54 - 8);
                    unint64_t v96 = *(void *)(v54 - 48);
                    v54 -= 24;
                  }
                  while (v95 < v96);
                  *(void *)unint64_t v54 = v95;
                  *(_OWORD *)(v54 + 8) = v107;
                }
                unint64_t v54 = v94 + 24;
                a1 = v94;
              }
              while (v94 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v64 = (v13 - 2) >> 1;
              int64_t v65 = v64;
              do
              {
                int64_t v66 = v65;
                if (v64 >= v65)
                {
                  uint64_t v67 = (2 * v65) | 1;
                  unint64_t v68 = (unint64_t *)(v11 + 24 * v67);
                  if (2 * v66 + 2 < (uint64_t)v13)
                  {
                    unint64_t v70 = v68[3];
                    BOOL v69 = *v68 >= v70;
                    if (*v68 > v70) {
                      unint64_t v70 = *v68;
                    }
                    if (!v69)
                    {
                      v68 += 3;
                      uint64_t v67 = 2 * v66 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v70 = *v68;
                  }
                  unint64_t v71 = (unint64_t *)(v11 + 24 * v66);
                  unint64_t v72 = *v71;
                  if (v70 >= *v71)
                  {
                    long long v105 = *(_OWORD *)(v71 + 1);
                    do
                    {
                      id v73 = v71;
                      unint64_t v71 = v68;
                      long long v74 = *(_OWORD *)v68;
                      v73[2] = v68[2];
                      *(_OWORD *)id v73 = v74;
                      if (v64 < v67) {
                        break;
                      }
                      uint64_t v75 = (2 * v67) | 1;
                      unint64_t v68 = (unint64_t *)(v11 + 24 * v75);
                      uint64_t v67 = 2 * v67 + 2;
                      if (v67 < (uint64_t)v13)
                      {
                        unint64_t v78 = *v68;
                        unint64_t v76 = v68[3];
                        BOOL v77 = *v68 >= v76;
                        if (*v68 <= v76) {
                          unint64_t v78 = v68[3];
                        }
                        if (*v68 < v76) {
                          v68 += 3;
                        }
                        if (v77) {
                          uint64_t v67 = v75;
                        }
                      }
                      else
                      {
                        unint64_t v78 = *v68;
                        uint64_t v67 = v75;
                      }
                    }
                    while (v78 >= v72);
                    unint64_t *v71 = v72;
                    *(_OWORD *)(v71 + 1) = v105;
                  }
                }
                int64_t v65 = v66 - 1;
              }
              while (v66);
              int64_t v79 = v12 / 0x18uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v112 = *(void *)(v11 + 16);
                long long v106 = *(_OWORD *)v11;
                unint64_t v81 = v11;
                do
                {
                  uint64_t v82 = v81 + 24 * v80 + 24;
                  uint64_t v83 = (2 * v80) | 1;
                  uint64_t v84 = 2 * v80 + 2;
                  if (v84 < v79 && *(void *)v82 < *(void *)(v82 + 24))
                  {
                    v82 += 24;
                    uint64_t v83 = v84;
                  }
                  long long v85 = *(_OWORD *)v82;
                  *(void *)(v81 + 16) = *(void *)(v82 + 16);
                  *(_OWORD *)unint64_t v81 = v85;
                  unint64_t v81 = v82;
                  uint64_t v80 = v83;
                }
                while (v83 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 24;
                if (v82 == a2)
                {
                  *(void *)(v82 + 16) = v112;
                  *(_OWORD *)uint64_t v82 = v106;
                }
                else
                {
                  long long v86 = *(_OWORD *)a2;
                  *(void *)(v82 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)uint64_t v82 = v86;
                  *(void *)(a2 + 16) = v112;
                  *(_OWORD *)a2 = v106;
                  uint64_t v87 = v82 - v11 + 24;
                  if (v87 >= 25)
                  {
                    unint64_t v88 = (v87 / 0x18uLL - 2) >> 1;
                    uint64_t v89 = v11 + 24 * v88;
                    unint64_t v90 = *(void *)v82;
                    if (*(void *)v89 < *(void *)v82)
                    {
                      long long v99 = *(_OWORD *)(v82 + 8);
                      do
                      {
                        uint64_t v91 = v82;
                        uint64_t v82 = v89;
                        long long v92 = *(_OWORD *)v89;
                        *(void *)(v91 + 16) = *(void *)(v89 + 16);
                        *(_OWORD *)uint64_t v91 = v92;
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        uint64_t v89 = v11 + 24 * v88;
                      }
                      while (*(void *)v89 < v90);
                      *(void *)uint64_t v82 = v90;
                      *(_OWORD *)(v82 + 8) = v99;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = (unint64_t *)(v11 + 24 * (v13 >> 1));
          if ((unint64_t)v12 >= 0xC01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)a1, (unint64_t *)(a1 + 24 * (v13 >> 1)), (unint64_t *)(a2 - 24));
            uint64_t v16 = 3 * v14;
            id v17 = (unint64_t *)(a1 + 24 * v14 - 24);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)(a1 + 24), v17, (unint64_t *)(a2 - 48));
            unint64_t v18 = (unint64_t *)(a1 + 24 + 8 * v16);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)(a1 + 48), v18, (unint64_t *)(a2 - 72));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)v17, v15, v18);
            unint64_t v108 = *(void *)(a1 + 16);
            long long v100 = *(_OWORD *)a1;
            unint64_t v19 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v19;
            v15[2] = v108;
            *(_OWORD *)unint64_t v15 = v100;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)(a1 + 24 * (v13 >> 1)), (unint64_t *)a1, (unint64_t *)(a2 - 24));
          }
          --a3;
          unint64_t v20 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 24) < v20) {
            break;
          }
          long long v98 = *(_OWORD *)(a1 + 8);
          if (v20 >= *(void *)v10)
          {
            unint64_t v36 = a1 + 24;
            do
            {
              unint64_t v11 = v36;
              if (v36 >= a2) {
                break;
              }
              v36 += 24;
            }
            while (v20 >= *(void *)v11);
          }
          else
          {
            unint64_t v11 = a1;
            do
            {
              unint64_t v35 = *(void *)(v11 + 24);
              v11 += 24;
            }
            while (v20 >= v35);
          }
          unint64_t v37 = a2;
          if (v11 < a2)
          {
            unint64_t v37 = a2;
            do
            {
              unint64_t v38 = *(void *)(v37 - 24);
              v37 -= 24;
            }
            while (v20 < v38);
          }
          while (v11 < v37)
          {
            uint64_t v109 = *(void *)(v11 + 16);
            long long v101 = *(_OWORD *)v11;
            long long v39 = *(_OWORD *)v37;
            *(void *)(v11 + 16) = *(void *)(v37 + 16);
            *(_OWORD *)unint64_t v11 = v39;
            *(void *)(v37 + 16) = v109;
            *(_OWORD *)unint64_t v37 = v101;
            do
            {
              unint64_t v40 = *(void *)(v11 + 24);
              v11 += 24;
            }
            while (v20 >= v40);
            do
            {
              unint64_t v41 = *(void *)(v37 - 24);
              v37 -= 24;
            }
            while (v20 < v41);
          }
          BOOL v4 = v11 - 24 >= a1;
          BOOL v5 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            long long v42 = *(_OWORD *)(v11 - 24);
            *(void *)(a1 + 16) = *(void *)(v11 - 8);
            *(_OWORD *)a1 = v42;
          }
          a4 = 0;
          *(void *)(v11 - 24) = v20;
          *(_OWORD *)(v11 - 16) = v98;
        }
        long long v97 = *(_OWORD *)(a1 + 8);
        unint64_t v21 = a1;
        do
        {
          unint64_t v22 = v21;
          unint64_t v23 = *(void *)(v21 + 24);
          v21 += 24;
        }
        while (v23 < v20);
        unint64_t v24 = a2;
        if (v22 == a1)
        {
          unint64_t v24 = a2;
          do
          {
            if (v21 >= v24) {
              break;
            }
            unint64_t v26 = *(void *)(v24 - 24);
            v24 -= 24;
          }
          while (v26 >= v20);
        }
        else
        {
          do
          {
            unint64_t v25 = *(void *)(v24 - 24);
            v24 -= 24;
          }
          while (v25 >= v20);
        }
        unint64_t v11 = v21;
        if (v21 < v24)
        {
          unint64_t v27 = v24;
          do
          {
            long long v28 = *(_OWORD *)v11;
            uint64_t v29 = *(void *)(v11 + 16);
            uint64_t v30 = *(void *)(v27 + 16);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v27;
            *(void *)(v11 + 16) = v30;
            *(void *)(v27 + 16) = v29;
            *(_OWORD *)unint64_t v27 = v28;
            do
            {
              unint64_t v31 = *(void *)(v11 + 24);
              v11 += 24;
            }
            while (v31 < v20);
            do
            {
              unint64_t v32 = *(void *)(v27 - 24);
              v27 -= 24;
            }
            while (v32 >= v20);
          }
          while (v11 < v27);
        }
        if (v11 - 24 != a1)
        {
          long long v33 = *(_OWORD *)(v11 - 24);
          *(void *)(a1 + 16) = *(void *)(v11 - 8);
          *(_OWORD *)a1 = v33;
        }
        *(void *)(v11 - 24) = v20;
        *(_OWORD *)(v11 - 16) = v97;
        if (v21 >= v24) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *,false>(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(a1, v11 - 24);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(v11, a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_30;
      }
    }
    a2 = v11 - 24;
    if (!v34) {
      continue;
    }
    break;
  }
}

double std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*,false>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  while (2)
  {
    int64_t v64 = a2;
    int64_t v65 = a2 - 1;
    uint64_t v62 = a2 - 3;
    uint64_t v63 = a2 - 2;
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if ((*a3)(v65, v12))
                {
                  long long v68 = *v12;
                  long long *v12 = *v65;
                  double result = *(double *)&v68;
                  *int64_t v65 = v68;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v12, v12 + 1, v65, a3);
                break;
              case 4uLL:
                *(void *)&double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v12, v12 + 1, v12 + 2, v65, a3).n128_u64[0];
                break;
              case 5uLL:
                *(void *)&double result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v12, v12 + 1, v12 + 2, v12 + 3, v65, a3).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 383)
          {
            long long v28 = v12 + 1;
            BOOL v30 = v12 == a2 || v28 == a2;
            if (a5)
            {
              if (!v30)
              {
                uint64_t v31 = 0;
                unint64_t v32 = v12;
                do
                {
                  long long v33 = v32;
                  unint64_t v32 = v28;
                  if ((*a3)(v28, v33))
                  {
                    long long v68 = *v32;
                    uint64_t v34 = v31;
                    while (1)
                    {
                      *(long long *)((char *)v12 + v34 + 16) = *(long long *)((char *)v12 + v34);
                      if (!v34) {
                        break;
                      }
                      v34 -= 16;
                      if (((*a3)(&v68, (long long *)((char *)v12 + v34)) & 1) == 0)
                      {
                        unint64_t v35 = (long long *)((char *)v12 + v34 + 16);
                        goto LABEL_78;
                      }
                    }
                    unint64_t v35 = v12;
LABEL_78:
                    double result = *(double *)&v68;
                    *unint64_t v35 = v68;
                    a2 = v64;
                  }
                  long long v28 = v32 + 1;
                  v31 += 16;
                }
                while (v32 + 1 != a2);
              }
            }
            else if (!v30)
            {
              do
              {
                unint64_t v58 = a1;
                a1 = v28;
                if ((*a3)(v28, v58))
                {
                  long long v68 = *a1;
                  unint64_t v59 = a1;
                  do
                  {
                    unint64_t v60 = v59 - 1;
                    *unint64_t v59 = *(v59 - 1);
                    char v61 = (*a3)(&v68, v59 - 2);
                    unint64_t v59 = v60;
                  }
                  while ((v61 & 1) != 0);
                  double result = *(double *)&v68;
                  *unint64_t v60 = v68;
                }
                long long v28 = a1 + 1;
              }
              while (a1 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v36 = (v14 - 2) >> 1;
              int64_t v66 = v36;
              do
              {
                int64_t v37 = v36;
                if (v66 >= v36)
                {
                  uint64_t v38 = (2 * v36) | 1;
                  long long v39 = &a1[v38];
                  if (2 * v36 + 2 < (uint64_t)v14 && (*a3)(&a1[v38], v39 + 1))
                  {
                    ++v39;
                    uint64_t v38 = 2 * v37 + 2;
                  }
                  unint64_t v40 = &a1[v37];
                  if (((*a3)(v39, v40) & 1) == 0)
                  {
                    long long v68 = *v40;
                    do
                    {
                      unint64_t v41 = v39;
                      *unint64_t v40 = *v39;
                      if (v66 < v38) {
                        break;
                      }
                      uint64_t v42 = (2 * v38) | 1;
                      long long v39 = &a1[v42];
                      uint64_t v43 = 2 * v38 + 2;
                      if (v43 < (uint64_t)v14 && (*a3)(&a1[v42], v39 + 1))
                      {
                        ++v39;
                        uint64_t v42 = v43;
                      }
                      unint64_t v40 = v41;
                      uint64_t v38 = v42;
                    }
                    while (!(*a3)(v39, &v68));
                    *unint64_t v41 = v68;
                  }
                }
                int64_t v36 = v37 - 1;
              }
              while (v37);
              uint64_t v44 = (unint64_t)v13 >> 4;
              unint64_t v45 = v64;
              do
              {
                long long v46 = v45;
                uint64_t v47 = 0;
                long long v67 = *a1;
                uint64_t v48 = a1;
                do
                {
                  uint64_t v49 = &v48[v47 + 1];
                  uint64_t v50 = (2 * v47) | 1;
                  uint64_t v51 = 2 * v47 + 2;
                  if (v51 < v44 && (*a3)(&v48[v47 + 1], &v48[v47 + 2]))
                  {
                    ++v49;
                    uint64_t v50 = v51;
                  }
                  long long *v48 = *v49;
                  uint64_t v48 = v49;
                  uint64_t v47 = v50;
                }
                while (v50 <= (uint64_t)((unint64_t)(v44 - 2) >> 1));
                uint64_t v52 = v46 - 1;
                if (v49 == v52)
                {
                  unint64_t v45 = v52;
                  double result = *(double *)&v67;
                  long long *v49 = v67;
                }
                else
                {
                  long long *v49 = *v52;
                  double result = *(double *)&v67;
                  unint64_t v45 = v52;
                  long long *v52 = v67;
                  uint64_t v53 = (char *)v49 - (char *)a1 + 16;
                  if (v53 >= 17)
                  {
                    unint64_t v54 = (unint64_t)((v53 >> 4) - 2) >> 1;
                    unint64_t v55 = &a1[v54];
                    if ((*a3)(v55, v49))
                    {
                      long long v68 = *v49;
                      do
                      {
                        BOOL v56 = v55;
                        long long *v49 = *v55;
                        if (!v54) {
                          break;
                        }
                        unint64_t v54 = (v54 - 1) >> 1;
                        unint64_t v55 = &a1[v54];
                        uint64_t v49 = v56;
                      }
                      while (((*a3)(v55, &v68) & 1) != 0);
                      double result = *(double *)&v68;
                      long long *v56 = v68;
                    }
                  }
                }
              }
              while (v44-- > 2);
            }
            return result;
          }
          unint64_t v15 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v12, &v12[v14 >> 1], v65, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v12 + 1, v15 - 1, v63, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v12 + 2, &v12[(v14 >> 1) + 1], v62, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v15 - 1, &v12[v14 >> 1], &v12[(v14 >> 1) + 1], a3);
            long long v68 = *v12;
            long long *v12 = *v15;
            *unint64_t v15 = v68;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(&v12[v14 >> 1], v12, v65, a3);
          }
          --a4;
          a2 = v64;
          if (a5 & 1) != 0 || ((*a3)(v12 - 1, v12)) {
            break;
          }
          long long v67 = *v12;
          if ((*a3)(&v67, v65))
          {
            do
              ++v12;
            while (((*a3)(&v67, v12) & 1) == 0);
          }
          else
          {
            unint64_t v24 = v12 + 1;
            do
            {
              uint64_t v12 = v24;
              if (v24 >= v64) {
                break;
              }
              int v25 = (*a3)(&v67, v24);
              unint64_t v24 = v12 + 1;
            }
            while (!v25);
          }
          unint64_t v26 = v64;
          if (v12 < v64)
          {
            unint64_t v26 = v64;
            do
              --v26;
            while (((*a3)(&v67, v26) & 1) != 0);
          }
          while (v12 < v26)
          {
            long long v68 = *v12;
            long long *v12 = *v26;
            *unint64_t v26 = v68;
            do
              ++v12;
            while (!(*a3)(&v67, v12));
            do
              --v26;
            while (((*a3)(&v67, v26) & 1) != 0);
          }
          unint64_t v27 = v12 - 1;
          BOOL v5 = v12 - 1 >= a1;
          BOOL v6 = v12 - 1 == a1;
          if (v12 - 1 != a1) {
            *a1 = *v27;
          }
          a5 = 0;
          double result = *(double *)&v67;
          *unint64_t v27 = v67;
        }
        long long v67 = *v12;
        uint64_t v16 = v12;
        do
          id v17 = v16++;
        while (((*a3)(v16, &v67) & 1) != 0);
        unint64_t v18 = v64;
        if (v17 == v12)
        {
          unint64_t v18 = v64;
          do
          {
            if (v16 >= v18) {
              break;
            }
            --v18;
          }
          while (((*a3)(v18, &v67) & 1) == 0);
        }
        else
        {
          do
            --v18;
          while (!(*a3)(v18, &v67));
        }
        if (v16 < v18)
        {
          unint64_t v19 = v16;
          unint64_t v20 = v18;
          do
          {
            long long v68 = *v19;
            long long v21 = v68;
            *unint64_t v19 = *v20;
            *unint64_t v20 = v21;
            do
              id v17 = v19++;
            while (((*a3)(v19, &v67) & 1) != 0);
            do
              --v20;
            while (!(*a3)(v20, &v67));
          }
          while (v19 < v20);
        }
        if (v17 != a1) {
          *a1 = *v17;
        }
        *id v17 = v67;
        if (v16 >= v18) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*,false>(a1, v17, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v17 + 1;
      }
      BOOL v22 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(a1, v17, a3);
      uint64_t v12 = v17 + 1;
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v17 + 1, v64, a3))
      {
        break;
      }
      if (!v22) {
        goto LABEL_30;
      }
    }
    a2 = v17;
    if (!v22) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v10 = *a1;
      *a1 = *a3;
    }
    else
    {
      long long v13 = *a1;
      *a1 = *a2;
      *a2 = v13;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      long long v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if (result)
  {
    long long v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      long long v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    long long v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if ((*a5)(a3, a2))
    {
      long long v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if ((*a5)(a2, a1))
      {
        __n128 result = (__n128)*a1;
        *a1 = *a2;
        *a2 = (__int128)result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(long long *, long long *, __n128))*a6)(a5, a4, v12))
  {
    long long v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    if ((*a6)(a4, a3))
    {
      long long v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      if ((*a6)(a3, a2))
      {
        long long v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        if ((*a6)(a2, a1))
        {
          __n128 result = (__n128)*a1;
          *a1 = *a2;
          *a2 = (__int128)result;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        long long v9 = *a1;
        *a1 = *v8;
        *char v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      long long v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(a1, a1 + 1, a1 + 2, a3);
      long long v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (long long *)((char *)a1 + v14);
        *(long long *)((char *)a1 + v14 + 48) = *(long long *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          long long v16 = (long long *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = a1;
LABEL_12:
      *long long v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    long long v10 = v11;
    v12 += 16;
    if (++v11 == a2) {
      return 1;
    }
  }
}

BOOL CompareResourceTrackingTracingResourceEntryV2(void *a1, void *a2)
{
  return *a1 < *a2;
}

long long *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      unint64_t v8 = a2[2];
      long long v9 = *(_OWORD *)a2;
      unint64_t v10 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v10;
      *(_OWORD *)a3 = v9;
      a3[2] = v8;
      if (*a2 < *(void *)result)
      {
        unint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        unint64_t v13 = a2[2];
        *BOOL result = *(_OWORD *)a2;
        *((void *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        a2[2] = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      unint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      unint64_t v16 = a2[2];
      *BOOL result = *(_OWORD *)a2;
      *((void *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      if (*a3 >= *a2) {
        return result;
      }
      unint64_t v5 = a2[2];
      long long v6 = *(_OWORD *)a2;
      unint64_t v17 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v17;
    }
    else
    {
      unint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      unint64_t v7 = a3[2];
      *BOOL result = *(_OWORD *)a3;
      *((void *)result + 2) = v7;
    }
    *(_OWORD *)a3 = v6;
    a3[2] = v5;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    unint64_t v9 = a3[2];
    __n128 result = *(__n128 *)a3;
    unint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if (*a3 < *a2)
    {
      unint64_t v11 = a2[2];
      __n128 result = *(__n128 *)a2;
      unint64_t v12 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      a3[2] = v11;
      if (*a2 < *(void *)a1)
      {
        unint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        unint64_t v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (long long *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *long long v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      unint64_t v18 = (long long *)(a1 + 24);
      unint64_t v19 = (long long *)(a1 + 48);
      unint64_t v20 = (long long *)(a1 + 72);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a1 + 72);
      unint64_t v22 = *(void *)(a2 - 24);
      uint64_t v21 = a2 - 24;
      if (v22 < *(void *)(a1 + 72))
      {
        uint64_t v23 = *(void *)(a1 + 88);
        long long v24 = *v20;
        uint64_t v25 = *(void *)(v21 + 16);
        *unint64_t v20 = *(_OWORD *)v21;
        *(void *)(a1 + 88) = v25;
        *(_OWORD *)uint64_t v21 = v24;
        *(void *)(v21 + 16) = v23;
        if (*(void *)v20 < *(void *)v19)
        {
          uint64_t v26 = *(void *)(a1 + 64);
          long long v27 = *v19;
          *unint64_t v19 = *v20;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *unint64_t v20 = v27;
          *(void *)(a1 + 88) = v26;
          if (*(void *)v19 < *(void *)v18)
          {
            uint64_t v28 = *(void *)(a1 + 40);
            long long v29 = *v18;
            long long *v18 = *v19;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *unint64_t v19 = v29;
            *(void *)(a1 + 64) = v28;
            if (*(void *)(a1 + 24) < *(void *)a1)
            {
              uint64_t v30 = *(void *)(a1 + 16);
              long long v31 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              long long *v18 = v31;
              *(void *)(a1 + 40) = v30;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = (void *)(a1 + 48);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v32 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 8) = v32;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    unint64_t v10 = (void *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

double std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*,false>(unint64_t a1, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v90 = a2;
    uint64_t v92 = a2 - 24;
    unint64_t v88 = (long long *)(a2 - 72);
    uint64_t v89 = (long long *)(a2 - 48);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 3);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return *(double *)&v31;
              case 2uLL:
                if ((*a3)((long long *)v92, (long long *)v12))
                {
                  long long v41 = *(_OWORD *)v12;
                  uint64_t v97 = *(void *)(v12 + 16);
                  long long v96 = v41;
                  long long v42 = *(_OWORD *)v92;
                  *(void *)(v12 + 16) = *(void *)(v92 + 16);
                  *(_OWORD *)unint64_t v12 = v42;
                  long long v31 = v96;
                  *(void *)(v92 + 16) = v97;
                  *(_OWORD *)uint64_t v92 = v31;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)v12, (long long *)(v12 + 24), (long long *)v92, a3);
                break;
              case 4uLL:
                *(void *)&long long v31 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(v12, v12 + 24, v12 + 48, v92, a3).n128_u64[0];
                break;
              case 5uLL:
                *(void *)&long long v31 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__n128 *)v12, v12 + 24, v12 + 48, v12 + 72, v92, a3).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return *(double *)&v31;
          }
          if (v13 <= 575)
          {
            uint64_t v43 = (long long *)(v12 + 24);
            BOOL v45 = v12 == a2 || v43 == (long long *)a2;
            if (a5)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unint64_t v47 = v12;
                do
                {
                  uint64_t v48 = (long long *)v47;
                  unint64_t v47 = (unint64_t)v43;
                  if ((*a3)(v43, v48))
                  {
                    long long v49 = *(_OWORD *)v47;
                    uint64_t v97 = *(void *)(v47 + 16);
                    long long v96 = v49;
                    uint64_t v50 = v46;
                    while (1)
                    {
                      uint64_t v51 = v12 + v50;
                      *(_OWORD *)(v51 + 24) = *(_OWORD *)(v12 + v50);
                      *(void *)(v51 + 40) = *(void *)(v12 + v50 + 16);
                      if (!v50) {
                        break;
                      }
                      v50 -= 24;
                      if (((*a3)(&v96, (long long *)(v50 + v12)) & 1) == 0)
                      {
                        uint64_t v52 = v12 + v50 + 24;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v52 = v12;
LABEL_78:
                    long long v31 = v96;
                    *(void *)(v52 + 16) = v97;
                    *(_OWORD *)uint64_t v52 = v31;
                    a2 = v90;
                  }
                  uint64_t v43 = (long long *)(v47 + 24);
                  v46 += 24;
                }
                while (v47 + 24 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                uint64_t v82 = (long long *)a1;
                a1 = (unint64_t)v43;
                if ((*a3)(v43, v82))
                {
                  long long v83 = *(_OWORD *)a1;
                  uint64_t v97 = *(void *)(a1 + 16);
                  long long v96 = v83;
                  unint64_t v84 = a1;
                  do
                  {
                    unint64_t v85 = v84 - 24;
                    *(_OWORD *)unint64_t v84 = *(_OWORD *)(v84 - 24);
                    *(void *)(v84 + 16) = *(void *)(v84 - 8);
                    char v86 = (*a3)(&v96, (long long *)(v84 - 48));
                    unint64_t v84 = v85;
                  }
                  while ((v86 & 1) != 0);
                  long long v31 = v96;
                  *(void *)(v85 + 16) = v97;
                  *(_OWORD *)unint64_t v85 = v31;
                }
                uint64_t v43 = (long long *)(a1 + 24);
              }
              while (a1 + 24 != a2);
            }
            return *(double *)&v31;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v53 = (v14 - 2) >> 1;
              int64_t v93 = v53;
              do
              {
                int64_t v54 = v53;
                if (v93 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  unint64_t v56 = a1 + 24 * v55;
                  if (2 * v53 + 2 < (uint64_t)v14
                    && (*a3)((long long *)(a1 + 24 * v55), (long long *)(v56 + 24)))
                  {
                    v56 += 24;
                    uint64_t v55 = 2 * v54 + 2;
                  }
                  unint64_t v57 = a1 + 24 * v54;
                  if (((*a3)((long long *)v56, (long long *)v57) & 1) == 0)
                  {
                    long long v58 = *(_OWORD *)v57;
                    uint64_t v97 = *(void *)(v57 + 16);
                    long long v96 = v58;
                    do
                    {
                      unint64_t v59 = v56;
                      long long v60 = *(_OWORD *)v56;
                      *(void *)(v57 + 16) = *(void *)(v56 + 16);
                      *(_OWORD *)unint64_t v57 = v60;
                      if (v93 < v55) {
                        break;
                      }
                      uint64_t v61 = (2 * v55) | 1;
                      unint64_t v56 = a1 + 24 * v61;
                      uint64_t v62 = 2 * v55 + 2;
                      if (v62 < (uint64_t)v14
                        && (*a3)((long long *)(a1 + 24 * v61), (long long *)(v56 + 24)))
                      {
                        v56 += 24;
                        uint64_t v61 = v62;
                      }
                      unint64_t v57 = v59;
                      uint64_t v55 = v61;
                    }
                    while (!(*a3)((long long *)v56, &v96));
                    long long v63 = v96;
                    *(void *)(v59 + 16) = v97;
                    *(_OWORD *)unint64_t v59 = v63;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              int64_t v64 = v13 / 0x18uLL;
              unint64_t v65 = v90;
              do
              {
                unint64_t v91 = v65;
                uint64_t v66 = 0;
                long long v67 = *(_OWORD *)a1;
                uint64_t v95 = *(void *)(a1 + 16);
                long long v94 = v67;
                unint64_t v68 = a1;
                do
                {
                  uint64_t v69 = v68 + 24 * v66 + 24;
                  uint64_t v70 = (2 * v66) | 1;
                  uint64_t v71 = 2 * v66 + 2;
                  if (v71 < v64
                    && (*a3)((long long *)(v68 + 24 * v66 + 24), (long long *)(v68 + 24 * v66 + 48)))
                  {
                    v69 += 24;
                    uint64_t v70 = v71;
                  }
                  long long v72 = *(_OWORD *)v69;
                  *(void *)(v68 + 16) = *(void *)(v69 + 16);
                  *(_OWORD *)unint64_t v68 = v72;
                  unint64_t v68 = v69;
                  uint64_t v66 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
                id v73 = (long long *)(v91 - 24);
                if (v69 == v91 - 24)
                {
                  unint64_t v65 = v91 - 24;
                  long long v31 = v94;
                  *(void *)(v69 + 16) = v95;
                  *(_OWORD *)uint64_t v69 = v31;
                }
                else
                {
                  long long v74 = *v73;
                  *(void *)(v69 + 16) = *(void *)(v91 - 8);
                  *(_OWORD *)uint64_t v69 = v74;
                  long long v31 = v94;
                  *(void *)(v91 - 8) = v95;
                  unint64_t v65 = v91 - 24;
                  *id v73 = v31;
                  uint64_t v75 = v69 - a1 + 24;
                  if (v75 >= 25)
                  {
                    unint64_t v76 = (unint64_t)(-2 - 0x5555555555555555 * (v75 >> 3)) >> 1;
                    unint64_t v77 = a1 + 24 * v76;
                    if ((*a3)((long long *)v77, (long long *)v69))
                    {
                      long long v78 = *(_OWORD *)v69;
                      uint64_t v97 = *(void *)(v69 + 16);
                      long long v96 = v78;
                      do
                      {
                        uint64_t v79 = v77;
                        long long v80 = *(_OWORD *)v77;
                        *(void *)(v69 + 16) = *(void *)(v77 + 16);
                        *(_OWORD *)uint64_t v69 = v80;
                        if (!v76) {
                          break;
                        }
                        unint64_t v76 = (v76 - 1) >> 1;
                        unint64_t v77 = a1 + 24 * v76;
                        uint64_t v69 = v79;
                      }
                      while (((*a3)((long long *)v77, &v96) & 1) != 0);
                      long long v31 = v96;
                      *(void *)(v79 + 16) = v97;
                      *(_OWORD *)uint64_t v79 = v31;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return *(double *)&v31;
          }
          unint64_t v15 = v12 + 24 * (v14 >> 1);
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)v12, (long long *)(v12 + 24 * (v14 >> 1)), (long long *)v92, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)(v12 + 24), (long long *)(v12 + 24 * (v14 >> 1) - 24), v89, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)(v12 + 48), (long long *)(v12 + 24 + 24 * (v14 >> 1)), v88, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)(v12 + 24 * (v14 >> 1) - 24), (long long *)(v12 + 24 * (v14 >> 1)), (long long *)(v12 + 24 + 24 * (v14 >> 1)), a3);
            long long v16 = *(_OWORD *)v12;
            uint64_t v97 = *(void *)(v12 + 16);
            long long v96 = v16;
            uint64_t v17 = *(void *)(v15 + 16);
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v15;
            *(void *)(v12 + 16) = v17;
            long long v18 = v96;
            *(void *)(v15 + 16) = v97;
            *(_OWORD *)unint64_t v15 = v18;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)(v12 + 24 * (v14 >> 1)), (long long *)v12, (long long *)v92, a3);
          }
          --a4;
          a2 = v90;
          if (a5 & 1) != 0 || ((*a3)((long long *)(v12 - 24), (long long *)v12)) {
            break;
          }
          long long v32 = *(_OWORD *)v12;
          uint64_t v95 = *(void *)(v12 + 16);
          long long v94 = v32;
          if ((*a3)(&v94, (long long *)v92))
          {
            do
              v12 += 24;
            while (((*a3)(&v94, (long long *)v12) & 1) == 0);
          }
          else
          {
            long long v33 = (long long *)(v12 + 24);
            do
            {
              unint64_t v12 = (unint64_t)v33;
              if ((unint64_t)v33 >= v90) {
                break;
              }
              int v34 = (*a3)(&v94, v33);
              long long v33 = (long long *)(v12 + 24);
            }
            while (!v34);
          }
          unint64_t v35 = v90;
          if (v12 < v90)
          {
            unint64_t v35 = v90;
            do
              v35 -= 24;
            while (((*a3)(&v94, (long long *)v35) & 1) != 0);
          }
          while (v12 < v35)
          {
            long long v36 = *(_OWORD *)v12;
            uint64_t v97 = *(void *)(v12 + 16);
            long long v96 = v36;
            long long v37 = *(_OWORD *)v35;
            *(void *)(v12 + 16) = *(void *)(v35 + 16);
            *(_OWORD *)unint64_t v12 = v37;
            long long v38 = v96;
            *(void *)(v35 + 16) = v97;
            *(_OWORD *)unint64_t v35 = v38;
            do
              v12 += 24;
            while (!(*a3)(&v94, (long long *)v12));
            do
              v35 -= 24;
            while (((*a3)(&v94, (long long *)v35) & 1) != 0);
          }
          long long v39 = (long long *)(v12 - 24);
          BOOL v5 = v12 - 24 >= a1;
          BOOL v6 = v12 - 24 == a1;
          if (v12 - 24 != a1)
          {
            long long v40 = *v39;
            *(void *)(a1 + 16) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v40;
          }
          a5 = 0;
          long long v31 = v94;
          *(void *)(v12 - 8) = v95;
          *long long v39 = v31;
        }
        long long v19 = *(_OWORD *)v12;
        uint64_t v95 = *(void *)(v12 + 16);
        long long v94 = v19;
        unint64_t v20 = (long long *)v12;
        do
        {
          uint64_t v21 = (uint64_t)v20;
          unint64_t v20 = (long long *)((char *)v20 + 24);
        }
        while (((*a3)(v20, &v94) & 1) != 0);
        unint64_t v22 = (long long *)v90;
        if (v21 == v12)
        {
          unint64_t v22 = (long long *)v90;
          do
          {
            if (v20 >= v22) {
              break;
            }
            unint64_t v22 = (long long *)((char *)v22 - 24);
          }
          while (((*a3)(v22, &v94) & 1) == 0);
        }
        else
        {
          do
            unint64_t v22 = (long long *)((char *)v22 - 24);
          while (!(*a3)(v22, &v94));
        }
        if (v20 < v22)
        {
          unint64_t v23 = (unint64_t)v20;
          long long v24 = v22;
          do
          {
            long long v96 = *(_OWORD *)v23;
            long long v25 = v96;
            uint64_t v97 = *(void *)(v23 + 16);
            uint64_t v26 = v97;
            uint64_t v27 = *((void *)v24 + 2);
            *(_OWORD *)unint64_t v23 = *v24;
            *(void *)(v23 + 16) = v27;
            *((void *)v24 + 2) = v26;
            *long long v24 = v25;
            do
            {
              uint64_t v21 = v23;
              v23 += 24;
            }
            while (((*a3)((long long *)v23, &v94) & 1) != 0);
            do
              long long v24 = (long long *)((char *)v24 - 24);
            while (!(*a3)(v24, &v94));
          }
          while (v23 < (unint64_t)v24);
        }
        if (v21 != a1)
        {
          long long v28 = *(_OWORD *)v21;
          *(void *)(a1 + 16) = *(void *)(v21 + 16);
          *(_OWORD *)a1 = v28;
        }
        long long v29 = v94;
        *(void *)(v21 + 16) = v95;
        *(_OWORD *)uint64_t v21 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*,false>(a1, v21, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v21 + 24;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(a1, v21, a3);
      unint64_t v12 = v21 + 24;
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(v21 + 24, v90, a3))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v21;
    if (!v30) {
      continue;
    }
    return *(double *)&v31;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = *((void *)a1 + 2);
      long long v11 = *a1;
      uint64_t v12 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v12;
    }
    else
    {
      uint64_t v19 = *((void *)a1 + 2);
      long long v20 = *a1;
      uint64_t v21 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v21;
      *a2 = v20;
      *((void *)a2 + 2) = v19;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = *((void *)a2 + 2);
      long long v11 = *a2;
      uint64_t v22 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v22;
    }
    *a3 = v11;
    *((void *)a3 + 2) = v10;
  }
  else if (result)
  {
    uint64_t v13 = *((void *)a2 + 2);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v15;
    *a3 = v14;
    *((void *)a3 + 2) = v13;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v16 = *((void *)a1 + 2);
      long long v17 = *a1;
      uint64_t v18 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v18;
      *a2 = v17;
      *((void *)a2 + 2) = v16;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(void *)(a3 + 16) = v14;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(void *)(a5 + 16) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v17 = *(void *)(a3 + 16);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v17;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v20 = *(void *)(a2 + 16);
        __n128 v21 = *(__n128 *)a2;
        uint64_t v22 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(void *)(a3 + 16) = v20;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          unint64_t v23 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v24 = *(void *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *char v8 = v10;
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      __n128 v12 = (long long *)(a1 + 48);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    __n128 v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

BOOL CompareGTMTLGPUAddressResource(void *a1, void *a2)
{
  return *a1 < *a2;
}

void SetupRegularVisibleFunctionTable(void *a1, uint64_t *a2, void *a3, uint64_t a4, unint64_t a5)
{
  id v14 = a1;
  id v9 = a3;
  if (*(void *)(a4 + 184))
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a4 + 176) + 8 * v10);
      if (v11)
      {
        uint64_t Object = GTMTLSMContext_getObject(*a2, v11, a5);
        if (Object)
        {
          uint64_t v13 = [v9 functionHandleForKey:Object[1]];
          [v14 setFunction:v13 atIndex:v10];
        }
      }
      else
      {
        [v14 setFunction:0 atIndex:v10];
      }
      ++v10;
    }
    while (*(void *)(a4 + 184) > v10);
  }
}

void sub_2B8510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SetupRegularIntersectionFunctionTable(void *a1, void *a2, uint64_t *a3, void *a4, void *a5, uint64_t a6, unint64_t a7)
{
  id v26 = a1;
  id v13 = a2;
  if (a5[22])
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = a5[21];
      int v17 = *(_DWORD *)(v16 + v14);
      switch(v17)
      {
        case 3:
          [v26 setOpaqueCurveIntersectionFunctionWithSignature:*(void *)(v16 + v14 + 8) atIndex:v15];
          break;
        case 2:
          [v26 setOpaqueTriangleIntersectionFunctionWithSignature:*(void *)(v16 + v14 + 8) atIndex:v15];
          break;
        case 1:
          uint64_t v18 = *(void *)(v16 + v14 + 8);
          if (v18)
          {
            uint64_t Object = GTMTLSMContext_getObject(*a3, v18, a7);
            if (Object && (Object[7] == a6 || Object[6] == a6))
            {
              uint64_t v20 = [v13 functionHandleForKey:Object[1]];
              [v26 setFunction:v20 atIndex:v15];
            }
          }
          else
          {
            [v26 setFunction:0 atIndex:v15];
          }
          break;
      }
      ++v15;
      v14 += 16;
    }
    while (a5[22] > v15);
  }
  uint64_t v21 = 0;
  uint64_t v22 = a5 + 25;
  do
  {
    int v23 = *((_DWORD *)v22 - 4);
    if (v23 == 2)
    {
      long long v25 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(a4, *(v22 - 1));
      if (!v25) {
        goto LABEL_22;
      }
      id v24 = (id)v25[3];
      [v26 setVisibleFunctionTable:v24 atBufferIndex:v21];
    }
    else
    {
      if (v23 != 1) {
        goto LABEL_22;
      }
      id v24 = [v13 bufferForKey:*(v22 - 1)];
      [v26 setBuffer:v24 offset:*v22 atIndex:v21];
    }

LABEL_22:
    ++v21;
    v22 += 3;
  }
  while (v21 != 31);
}

void sub_2B8728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t GTMTLReplayClient_generateFunctionResourceUsageInfoV2(unsigned int *a1, unint64_t a2, unint64_t a3, void *a4)
{
  *a4 = &__NSArray0__struct;
  uint64_t v4 = *(void *)(*(void *)a1 + 120);
  if (*(int *)(v4 + 12) <= a2) {
    return 0;
  }
  char v8 = (_DWORD *)(*(void *)(v4 + 24) + (a2 << 6));
  GTMTLReplayController_debugSubCommandResume(a1, *v8 - *(_DWORD *)(*(void *)a1 + 80) + 1, a3 + 1);

  return GTMTLReplayClient_generateFunctionResourceUsageInfoV2_impl((GTMTLReplayController *)a1, (uint64_t)v8, a3, a4);
}

uint64_t GTMTLReplayClient_generateFunctionResourceUsageInfoV2_impl(GTMTLReplayController *a1, uint64_t a2, unint64_t a3, void *a4)
{
  var0 = a1->var0;
  BOOL v5 = [a1->var1 defaultDevice];
  id v6 = [v5 argumentBuffersSupport];

  if (!v6) {
    return 0;
  }
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v7);
  uint64_t v221 = 0;
  memset(v220, 0, sizeof(v220));
  unint64_t v8 = *(void *)a2;
  id v9 = newpool;
  var5 = var0->var5;
  uint64_t v11 = apr_array_make(newpool, 32, 8);
  long long v237 = 0u;
  long long v236 = 0u;
  *(_OWORD *)&v235[8] = 0u;
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 1), v8, v11);
  __n128 v12 = apr_array_make(v9, v11->nelts, 24);
  *(void *)&long long v234 = v12;
  int nelts = v11->nelts;
  uint64_t v14 = a1;
  if (nelts >= 1)
  {
    unint64_t v15 = v12;
    for (uint64_t i = 0; i < nelts; ++i)
    {
      uint64_t v17 = *(void *)&v11->elts[8 * i];
      unint64_t v18 = *(void *)(v17 + 16);
      unint64_t v19 = var0->var8.var0;
      if (v19 > v18 || var0->var8.var1 + v19 <= v18)
      {
        uint64_t v21 = (int8x16_t *)apr_array_push(v15);
        *uint64_t v21 = vextq_s8(*(int8x16_t *)(v17 + 104), *(int8x16_t *)(v17 + 104), 8uLL);
        v21[1].i64[0] = *(void *)(v17 + 8);
        int nelts = v11->nelts;
      }
    }
  }
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 2), v8, v11);
  uint64_t v22 = apr_array_make(v9, v11->nelts, 32);
  *((void *)&v234 + 1) = v22;
  int v23 = v11->nelts;
  if (v23 >= 1)
  {
    id v24 = v22;
    for (uint64_t j = 0; j < v23; ++j)
    {
      id v26 = *(void **)&v11->elts[8 * j];
      unint64_t v27 = v26[2];
      unint64_t v28 = var0->var8.var0;
      if (v28 > v27 || var0->var8.var1 + v28 <= v27)
      {
        BOOL v30 = apr_array_push(v24);
        v30[1] = v26[1];
        *BOOL v30 = v26[21];
        int v23 = v11->nelts;
      }
    }
  }
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 3), v8, v11);
  long long v31 = apr_array_make(v9, v11->nelts, 32);
  *(void *)v235 = v31;
  int v32 = v11->nelts;
  if (v32 >= 1)
  {
    long long v33 = v31;
    for (uint64_t k = 0; k < v32; ++k)
    {
      unint64_t v35 = *(void **)&v11->elts[8 * k];
      unint64_t v36 = v35[2];
      unint64_t v37 = var0->var8.var0;
      if (v37 > v36 || var0->var8.var1 + v37 <= v36)
      {
        uint64_t v39 = v35[6];
        if (!v39 || *(unsigned char *)(v39 + 62))
        {
          long long v40 = apr_array_push(v33);
          v40[1] = v35[1];
          *long long v40 = v35[8];
          int v32 = v11->nelts;
        }
      }
    }
  }
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 4), v8, v11);
  long long v41 = apr_array_make(v9, v11->nelts, 32);
  *(void *)&v235[8] = v41;
  int v42 = v11->nelts;
  if (v42 >= 1)
  {
    uint64_t v43 = v41;
    for (uint64_t m = 0; m < v42; ++m)
    {
      BOOL v45 = *(void **)&v11->elts[8 * m];
      unint64_t v46 = v45[2];
      unint64_t v47 = var0->var8.var0;
      BOOL v48 = v47 <= v46 && var0->var8.var1 + v47 > v46;
      if (!v48 && GTMTLSMPipelineState_supportsIndirectCommandBuffers(*(void *)&v11->elts[8 * m]))
      {
        long long v49 = apr_array_push(v43);
        v49[1] = v45[1];
        void *v49 = v45[12];
        int v42 = v11->nelts;
      }
    }
  }
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 5), v8, v11);
  uint64_t v50 = apr_array_make(v9, v11->nelts, 32);
  *(void *)&v235[16] = v50;
  int v51 = v11->nelts;
  if (v51 >= 1)
  {
    uint64_t v52 = v50;
    for (uint64_t n = 0; n < v51; ++n)
    {
      int64_t v54 = *(void **)&v11->elts[8 * n];
      unint64_t v55 = v54[2];
      unint64_t v56 = var0->var8.var0;
      BOOL v57 = v56 <= v55 && var0->var8.var1 + v56 > v55;
      if (!v57 && GTMTLSMPipelineState_supportsIndirectCommandBuffers(*(void *)&v11->elts[8 * n]))
      {
        long long v58 = apr_array_push(v52);
        v58[1] = v54[1];
        void *v58 = v54[12];
        int v51 = v11->nelts;
      }
    }
  }
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 6), v8, v11);
  unint64_t v59 = apr_array_make(v9, v11->nelts, 32);
  *(void *)&long long v236 = v59;
  int v60 = v11->nelts;
  if (v60 >= 1)
  {
    uint64_t v61 = v59;
    for (iuint64_t i = 0; ii < v60; ++ii)
    {
      long long v63 = *(void **)&v11->elts[8 * ii];
      unint64_t v64 = v63[2];
      unint64_t v65 = var0->var8.var0;
      if (v65 > v64 || var0->var8.var1 + v65 <= v64)
      {
        long long v67 = apr_array_push(v61);
        v67[1] = v63[1];
        *long long v67 = v63[15];
        int v60 = v11->nelts;
      }
    }
  }
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 7), v8, v11);
  unint64_t v68 = apr_array_make(v9, v11->nelts, 32);
  *((void *)&v236 + 1) = v68;
  int v69 = v11->nelts;
  if (v69 >= 1)
  {
    uint64_t v70 = v68;
    for (juint64_t j = 0; jj < v69; ++jj)
    {
      long long v72 = *(void **)&v11->elts[8 * jj];
      unint64_t v73 = v72[2];
      unint64_t v74 = var0->var8.var0;
      if (v74 > v73 || var0->var8.var1 + v74 <= v73)
      {
        unint64_t v76 = apr_array_push(v70);
        v76[1] = v72[1];
        *unint64_t v76 = v72[17];
        int v69 = v11->nelts;
      }
    }
  }
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 8), v8, v11);
  unint64_t v77 = apr_array_make(v9, v11->nelts, 32);
  *(void *)&long long v237 = v77;
  int v78 = v11->nelts;
  if (v78 >= 1)
  {
    uint64_t v79 = v77;
    for (kuint64_t k = 0; kk < v78; ++kk)
    {
      unint64_t v81 = *(void **)&v11->elts[8 * kk];
      unint64_t v82 = v81[2];
      unint64_t v83 = var0->var8.var0;
      if (v83 > v82 || var0->var8.var1 + v83 <= v82)
      {
        unint64_t v85 = apr_array_push(v79);
        v85[1] = v81[1];
        *unint64_t v85 = v81[18];
        int v78 = v11->nelts;
      }
    }
  }
  v11->int nelts = 0;
  GTMTLSMContext_getObjects(*((_DWORD **)var5 + 9), v8, v11);
  char v86 = apr_array_make(v9, v11->nelts, 32);
  *((void *)&v237 + 1) = v86;
  int v87 = v11->nelts;
  if (v87 >= 1)
  {
    unint64_t v88 = v86;
    for (muint64_t m = 0; mm < v87; ++mm)
    {
      unint64_t v90 = *(void **)&v11->elts[8 * mm];
      unint64_t v91 = v90[2];
      unint64_t v92 = var0->var8.var0;
      if (v92 > v91 || var0->var8.var1 + v92 <= v91)
      {
        long long v94 = apr_array_push(v88);
        v94[1] = v90[1];
        *long long v94 = v90[16];
        int v87 = v11->nelts;
      }
    }
  }
  GTMTLIndirectResources_optimizeByKey((uint64_t *)v220, (uint64_t *)&v234, 0, v9);
  int v96 = *(_DWORD *)(a2 + 8);
  id context = v95;
  if (IsFuncEnumDrawCall(v96))
  {
    uint64_t v97 = [a1->var1 defaultDevice];
    uint64_t v186 = ObtainResourceTrackingTracingBufferV2(v97, v220);

    int v98 = *(_DWORD *)(a2 + 8);
    if ((v98 + 15416) > 2)
    {
      *(_OWORD *)v235 = 0u;
      long long v234 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      *(_DWORD *)&v235[16] = 1065353216;
      int v238 = 1065353216;
      long long v217 = 0u;
      long long v218 = 0u;
      *(void *)&long long v223 = 1;
      int v219 = 1065353216;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
      long long v214 = 0u;
      long long v215 = 0u;
      int v216 = 1065353216;
      uint64_t v226 = 2;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
      long long v211 = 0u;
      long long v212 = 0u;
      int v213 = 1065353216;
      uint64_t v228 = 4;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
      long long v208 = 0u;
      long long v209 = 0u;
      int v210 = 1065353216;
      uint64_t v230 = 16;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
      long long v205 = 0u;
      long long v206 = 0u;
      int v207 = 1065353216;
      uint64_t v232 = 8;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
      std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
      for (nuint64_t n = 200; nn != -40; nn -= 48)
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + nn);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
      long long v240 = 0u;
      long long v241 = 0u;
      int v242 = 1065353216;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      int v245 = 1065353216;
      int v248 = 1065353216;
      id v249 = v186;
      uint64_t v250 = 2;
      uint64_t v251 = 1;
      uint64_t v109 = newpool;
      InstrumentFunctionWithResourceTrackingV2((uint64_t)&v223, a1, a2, (uint64_t)&v234, (uint64_t)v220, newpool);
      int v185 = v223;
      uint64_t v110 = (unsigned char *)*((void *)&v223 + 1);
      uint64_t v111 = (unsigned char *)v224;

      long long v184 = v110;
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v246);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v243);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v240);
      std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table((uint64_t)v239);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v236);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v234);
      uint64_t v112 = 0;
      std::string __p = 0;
      long long v105 = 0;
      uint64_t v113 = 0;
    }
    else
    {
      long long v99 = a1->var0;
      if (IsFuncEnumDrawCall(v98)
        && a1->var21.var0.var0 == 70
        && (uint64_t Object = GTMTLSMContext_getObject(*(void *)v99->var5, a1->var21.var3.var0.var23, *(void *)a2)) != 0
        && (uint64_t v101 = Object[9]) != 0
        && *(void *)(v101 + 368))
      {
        *(_OWORD *)v235 = 0u;
        long long v234 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        *(_DWORD *)&v235[16] = 1065353216;
        int v238 = 1065353216;
        long long v217 = 0u;
        long long v218 = 0u;
        *(void *)&long long v223 = 1;
        int v219 = 1065353216;
        std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
        long long v214 = 0u;
        long long v215 = 0u;
        int v216 = 1065353216;
        uint64_t v226 = 2;
        std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
        long long v211 = 0u;
        long long v212 = 0u;
        int v213 = 1065353216;
        uint64_t v228 = 4;
        std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
        long long v208 = 0u;
        long long v209 = 0u;
        int v210 = 1065353216;
        uint64_t v230 = 16;
        std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
        long long v205 = 0u;
        long long v206 = 0u;
        int v207 = 1065353216;
        uint64_t v232 = 8;
        std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
        std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
        for (uint64_t i1 = 200; i1 != -40; i1 -= 48)
          std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i1);
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
        long long v240 = 0u;
        long long v241 = 0u;
        int v242 = 1065353216;
        long long v243 = 0u;
        long long v244 = 0u;
        long long v246 = 0u;
        long long v247 = 0u;
        int v245 = 1065353216;
        int v248 = 1065353216;
        id v249 = v186;
        uint64_t v250 = 2;
        uint64_t v251 = 0x10000000010;
        InstrumentFunctionWithResourceTrackingV2((uint64_t)&v223, a1, a2, (uint64_t)&v234, (uint64_t)v220, newpool);
        BOOL v103 = (_BYTE)v223 != 0;
        long long v104 = (unsigned char *)*((void *)&v223 + 1);
        long long v105 = (unsigned char *)v224;

        uint64_t v183 = v104;
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v246);
        std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v243);
        std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v240);
        std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table((uint64_t)v239);
        std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v236);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v234);
        uint64_t v14 = a1;
      }
      else
      {
        long long v105 = 0;
        uint64_t v183 = 0;
        BOOL v103 = 1;
      }
      *(_OWORD *)v235 = 0u;
      long long v234 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      *(_DWORD *)&v235[16] = 1065353216;
      int v238 = 1065353216;
      long long v217 = 0u;
      long long v218 = 0u;
      *(void *)&long long v223 = 1;
      int v219 = 1065353216;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
      long long v214 = 0u;
      long long v215 = 0u;
      int v216 = 1065353216;
      uint64_t v226 = 2;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
      long long v211 = 0u;
      long long v212 = 0u;
      int v213 = 1065353216;
      uint64_t v228 = 4;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
      long long v208 = 0u;
      long long v209 = 0u;
      int v210 = 1065353216;
      uint64_t v230 = 16;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
      long long v205 = 0u;
      long long v206 = 0u;
      int v207 = 1065353216;
      uint64_t v232 = 8;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
      std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
      for (uint64_t i2 = 200; i2 != -40; i2 -= 48)
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i2);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
      long long v240 = 0u;
      long long v241 = 0u;
      int v242 = 1065353216;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      int v245 = 1065353216;
      int v248 = 1065353216;
      id v249 = v186;
      uint64_t v250 = 2;
      uint64_t v251 = 0x10000000020;
      uint64_t v109 = newpool;
      InstrumentFunctionWithResourceTrackingV2((uint64_t)&v223, v14, a2, (uint64_t)&v234, (uint64_t)v220, newpool);
      if ((_BYTE)v223) {
        BOOL v115 = v103;
      }
      else {
        BOOL v115 = 0;
      }
      int v185 = v115;
      std::string __p = (unsigned char *)*((void *)&v223 + 1);
      uint64_t v112 = (unsigned char *)v224;

      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v246);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v243);
      uint64_t v113 = v183;
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v240);
      std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table((uint64_t)v239);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v236);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v234);
      uint64_t v111 = 0;
      long long v184 = 0;
    }
    uint64_t v116 = (uint64_t)a1;
    if (ShouldInstrumentFragmentStage((uint64_t *)a1, (uint64_t)v220, a2, a3))
    {
      *(_OWORD *)v235 = 0u;
      long long v234 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      *(_DWORD *)&v235[16] = 1065353216;
      int v238 = 1065353216;
      long long v217 = 0u;
      long long v218 = 0u;
      *(void *)&long long v223 = 1;
      int v219 = 1065353216;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
      long long v214 = 0u;
      long long v215 = 0u;
      int v216 = 1065353216;
      uint64_t v226 = 2;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
      long long v211 = 0u;
      long long v212 = 0u;
      int v213 = 1065353216;
      uint64_t v228 = 4;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
      long long v208 = 0u;
      long long v209 = 0u;
      int v210 = 1065353216;
      uint64_t v230 = 16;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
      long long v205 = 0u;
      long long v206 = 0u;
      int v207 = 1065353216;
      uint64_t v232 = 8;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
      std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
      for (uint64_t i3 = 200; i3 != -40; i3 -= 48)
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i3);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
      long long v240 = 0u;
      long long v241 = 0u;
      int v242 = 1065353216;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      int v245 = 1065353216;
      int v248 = 1065353216;
      id v249 = v186;
      uint64_t v250 = 2;
      LODWORD(v251) = 2;
      BYTE4(v251) = 0;
      BYTE5(v251) = (*(_DWORD *)(a2 + 8) + 15416) < 3;
      HIWORD(v251) = 0;
      uint64_t v109 = newpool;
      InstrumentFunctionWithResourceTrackingV2((uint64_t)&v223, a1, a2, (uint64_t)&v234, (uint64_t)v220, newpool);
      if (v185) {
        BOOL v118 = v223 == 0;
      }
      else {
        BOOL v118 = 1;
      }
      char v119 = !v118;
      LOBYTE(v185) = v119;
      int v189 = (unsigned char *)*((void *)&v223 + 1);
      uint64_t v120 = (unsigned char *)v224;

      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v246);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v243);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v240);
      std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table((uint64_t)v239);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v236);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v234);
      uint64_t v116 = (uint64_t)a1;
    }
    else
    {
      uint64_t v120 = 0;
      int v189 = 0;
    }
    ReplaceFunctionTablesWithRegular((uint64_t)v203, v116, 3, *(void *)a2, (uint64_t *)v220, v109);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v204);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v203);
    id v121 = [objc_alloc((Class)NSMutableArray) initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((v112 - __p) >> 3)- 0x5555555555555555 * ((v105 - v113) >> 3)- 0x5555555555555555 * ((v111 - v184) >> 3)- 0x5555555555555555 * ((v120 - v189) >> 3)];
    if (v113 != v105)
    {
      unsigned int v122 = v113;
      do
      {
        long long v123 = *(_OWORD *)v122;
        *(void *)v235 = v122[2];
        long long v234 = v123;
        uint64_t v124 = MakeResourceUsageItem((uint64_t)&v234, 8);
        [v121 addObject:v124];

        v122 += 3;
      }
      while (v122 != (void *)v105);
    }
    if (__p != v112)
    {
      int v125 = __p;
      do
      {
        long long v234 = *(_OWORD *)v125;
        *(void *)v235 = v125[2];
        int v126 = MakeResourceUsageItem((uint64_t)&v234, 16);
        [v121 addObject:v126];

        v125 += 3;
      }
      while (v125 != (void *)v112);
    }
    if (v184 != v111)
    {
      uint64_t v127 = v184;
      do
      {
        long long v234 = *(_OWORD *)v127;
        *(void *)v235 = v127[2];
        int v128 = MakeResourceUsageItem((uint64_t)&v234, 1);
        [v121 addObject:v128];

        v127 += 3;
      }
      while (v127 != (void *)v111);
    }
    if (v189 != v120)
    {
      int v129 = v189;
      do
      {
        long long v234 = *(_OWORD *)v129;
        *(void *)v235 = v129[2];
        __int16 v130 = MakeResourceUsageItem((uint64_t)&v234, 2);
        [v121 addObject:v130];

        v129 += 3;
      }
      while (v129 != (void *)v120);
    }
    if (__p) {
      operator delete(__p);
    }
    if (v113) {
      operator delete(v113);
    }
    if (v189) {
      operator delete(v189);
    }
    if (v184) {
      operator delete(v184);
    }

    uint64_t v106 = v185 & 1;
    goto LABEL_156;
  }
  if (v96 <= -16080)
  {
    if (v96 != -16327 && v96 != -16220)
    {
      int v107 = -16137;
      goto LABEL_138;
    }
LABEL_147:
    *(_OWORD *)v235 = 0u;
    long long v234 = 0u;
    long long v236 = 0u;
    long long v237 = 0u;
    *(_DWORD *)&v235[16] = 1065353216;
    int v238 = 1065353216;
    long long v217 = 0u;
    long long v218 = 0u;
    *(void *)&long long v223 = 1;
    int v219 = 1065353216;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
    long long v214 = 0u;
    long long v215 = 0u;
    int v216 = 1065353216;
    uint64_t v226 = 2;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
    long long v211 = 0u;
    long long v212 = 0u;
    int v213 = 1065353216;
    uint64_t v228 = 4;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
    long long v208 = 0u;
    long long v209 = 0u;
    int v210 = 1065353216;
    uint64_t v230 = 16;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
    long long v205 = 0u;
    long long v206 = 0u;
    int v207 = 1065353216;
    uint64_t v232 = 8;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
    std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
    for (uint64_t i4 = 200; i4 != -40; i4 -= 48)
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i4);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
    long long v240 = 0u;
    long long v241 = 0u;
    int v242 = 1065353216;
    long long v243 = 0u;
    long long v244 = 0u;
    long long v246 = 0u;
    long long v247 = 0u;
    int v245 = 1065353216;
    int v248 = 1065353216;
    uint64_t v140 = [a1->var1 defaultDevice];
    ObtainResourceTrackingTracingBufferV2(v140, v220);
    id v249 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v250 = 2;
    uint64_t v251 = 0x100000008;

    uint64_t v141 = newpool;
    InstrumentFunctionWithResourceTrackingV2((uint64_t)&v223, a1, a2, (uint64_t)&v234, (uint64_t)v220, newpool);
    uint64_t v106 = (_BYTE)v223 != 0;
    ReplaceFunctionTablesWithRegular((uint64_t)v199, (uint64_t)a1, 8, *(void *)a2, (uint64_t *)v220, v141);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v200);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v199);
    id v142 = objc_alloc((Class)NSMutableArray);
    uint64_t v143 = (void *)v224;
    id v144 = (void *)*((void *)&v223 + 1);
    id v121 = [v142 initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - *((void *)&v223 + 1)) >> 3)];
    if (v144 != v143)
    {
      uint64_t v145 = v144;
      do
      {
        long long v217 = *(_OWORD *)v145;
        *(void *)&long long v218 = v145[2];
        id v146 = MakeResourceUsageItem((uint64_t)&v217);
        [v121 addObject:v146];

        v145 += 3;
      }
      while (v145 != v143);
    }
    if (v144) {
      operator delete(v144);
    }

    goto LABEL_155;
  }
  if ((v96 + 16079) < 2) {
    goto LABEL_147;
  }
  if (v96 == -15297) {
    goto LABEL_139;
  }
  int v107 = -15486;
LABEL_138:
  if (v96 != v107)
  {
    if ((v96 & 0xFFFFFFFE) == 0xFFFFC1A4)
    {
      uint64_t v158 = v95;
      *(_OWORD *)v235 = 0u;
      long long v234 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      *(_DWORD *)&v235[16] = 1065353216;
      int v238 = 1065353216;
      long long v217 = 0u;
      long long v218 = 0u;
      *(void *)&long long v223 = 1;
      int v219 = 1065353216;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
      long long v214 = 0u;
      long long v215 = 0u;
      int v216 = 1065353216;
      uint64_t v226 = 2;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
      long long v211 = 0u;
      long long v212 = 0u;
      int v213 = 1065353216;
      uint64_t v228 = 4;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
      long long v208 = 0u;
      long long v209 = 0u;
      int v210 = 1065353216;
      uint64_t v230 = 16;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
      long long v205 = 0u;
      long long v206 = 0u;
      int v207 = 1065353216;
      uint64_t v232 = 8;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
      std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
      for (uint64_t i5 = 200; i5 != -40; i5 -= 48)
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i5);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
      long long v240 = 0u;
      long long v241 = 0u;
      int v242 = 1065353216;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      int v245 = 1065353216;
      int v248 = 1065353216;
      uint64_t v160 = [a1->var1 defaultDevice];
      ObtainResourceTrackingTracingBufferV2(v160, v220);
      id v249 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v250 = 2;
      uint64_t v251 = 8;

      uint64_t v161 = newpool;
      InstrumentSubCommandWithAccessTrackingV2((uint64_t)&v223, a1, a2, a3, (uint64_t)&v234, (uint64_t *)v220, newpool);
      uint64_t v106 = (_BYTE)v223 != 0;
      ReplaceFunctionTablesWithRegular((uint64_t)v195, (uint64_t)a1, 8, *(void *)a2, (uint64_t *)v220, v161);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v196);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v195);
      id v162 = objc_alloc((Class)NSMutableArray);
      id v163 = (void *)v224;
      long long v164 = (void *)*((void *)&v223 + 1);
      id v121 = [v162 initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - *((void *)&v223 + 1)) >> 3)];
      if (v164 != v163)
      {
        id v165 = v164;
        do
        {
          long long v217 = *(_OWORD *)v165;
          *(void *)&long long v218 = v165[2];
          int v166 = MakeResourceUsageItem((uint64_t)&v217);
          [v121 addObject:v166];

          v165 += 3;
        }
        while (v165 != v163);
      }
      if (v164) {
        operator delete(v164);
      }
      GTMTLReplayAccessTracking::~GTMTLReplayAccessTracking((id *)&v234);
      uint64_t v95 = v158;
      goto LABEL_157;
    }
    if ((v96 & 0xFFFFFFFE) != 0xFFFFC1A6)
    {
      uint64_t v106 = 0;
      id v121 = 0;
      goto LABEL_157;
    }
    long long v149 = [a1->var1 defaultDevice];
    id v150 = ObtainResourceTrackingTracingBufferV2(v149, v220);

    __pa = v150;
    if (*(_DWORD *)(a2 + 8) >> 2 == 1073737833)
    {
      uint64_t v151 = a1->var0;
      id v152 = a1->var1;
      uint64_t v225 = 0;
      long long v223 = 0u;
      long long v224 = 0u;
      GetExecuteCommandsInBufferArgs((uint64_t)&v223, a2, (uint64_t)v151->var2);
      uint64_t v153 = GTMTLSMContext_getObject(*(void *)v151->var5, v223, *(void *)a2);
      GTMTLCreateIndirectCommandEncoder((uint64_t)&v234, v153[13]);
      if (*((void *)&v223 + 1) <= a3 && (void)v224 + *((void *)&v223 + 1) >= a3 && *((void *)&v224 + 1))
      {
        unint64_t v154 = (*(void *)(*((void *)&v224 + 1) + v239[3] * a3 + *((void *)&v234 + 1)) - 128) & 0xFFFFFFFFFFFFFF7FLL;

        if (!v154)
        {
          if (ShouldInstrumentICBObjectStage((uint64_t *)a1, a2, a3))
          {
            *(_OWORD *)v235 = 0u;
            long long v234 = 0u;
            long long v236 = 0u;
            long long v237 = 0u;
            *(_DWORD *)&v235[16] = 1065353216;
            int v238 = 1065353216;
            long long v217 = 0u;
            long long v218 = 0u;
            *(void *)&long long v223 = 1;
            int v219 = 1065353216;
            std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
            long long v214 = 0u;
            long long v215 = 0u;
            int v216 = 1065353216;
            uint64_t v226 = 2;
            std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
            long long v211 = 0u;
            long long v212 = 0u;
            int v213 = 1065353216;
            uint64_t v228 = 4;
            std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
            long long v208 = 0u;
            long long v209 = 0u;
            int v210 = 1065353216;
            uint64_t v230 = 16;
            std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
            long long v205 = 0u;
            long long v206 = 0u;
            int v207 = 1065353216;
            uint64_t v232 = 8;
            std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
            std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
            for (uint64_t i6 = 200; i6 != -40; i6 -= 48)
              std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i6);
            std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
            std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
            std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
            std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
            std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
            long long v240 = 0u;
            long long v241 = 0u;
            int v242 = 1065353216;
            long long v243 = 0u;
            long long v244 = 0u;
            long long v246 = 0u;
            long long v247 = 0u;
            int v245 = 1065353216;
            int v248 = 1065353216;
            id v249 = v150;
            uint64_t v250 = 2;
            uint64_t v251 = 16;
            InstrumentSubCommandWithAccessTrackingV2((uint64_t)&v223, a1, a2, a3, (uint64_t)&v234, (uint64_t *)v220, newpool);
            BOOL v156 = (_BYTE)v223 != 0;
            uint64_t v157 = (void *)*((void *)&v223 + 1);
            GTMTLReplayAccessTracking::~GTMTLReplayAccessTracking((id *)&v234);
          }
          else
          {
            uint64_t v157 = 0;
            BOOL v156 = 1;
          }
          *(_OWORD *)v235 = 0u;
          long long v234 = 0u;
          long long v236 = 0u;
          long long v237 = 0u;
          *(_DWORD *)&v235[16] = 1065353216;
          int v238 = 1065353216;
          long long v217 = 0u;
          long long v218 = 0u;
          *(void *)&long long v223 = 1;
          int v219 = 1065353216;
          std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
          long long v214 = 0u;
          long long v215 = 0u;
          int v216 = 1065353216;
          uint64_t v226 = 2;
          std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
          long long v211 = 0u;
          long long v212 = 0u;
          int v213 = 1065353216;
          uint64_t v228 = 4;
          std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
          long long v208 = 0u;
          long long v209 = 0u;
          int v210 = 1065353216;
          uint64_t v230 = 16;
          std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
          long long v205 = 0u;
          long long v206 = 0u;
          int v207 = 1065353216;
          uint64_t v232 = 8;
          std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
          uint64_t v173 = a2;
          std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
          for (uint64_t i7 = 200; i7 != -40; i7 -= 48)
            std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i7);
          std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
          std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
          std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
          std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
          std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
          long long v240 = 0u;
          long long v241 = 0u;
          int v242 = 1065353216;
          long long v243 = 0u;
          long long v244 = 0u;
          long long v246 = 0u;
          long long v247 = 0u;
          int v245 = 1065353216;
          int v248 = 1065353216;
          id v249 = v150;
          uint64_t v250 = 2;
          uint64_t v251 = 32;
          uint64_t v168 = newpool;
          InstrumentSubCommandWithAccessTrackingV2((uint64_t)&v223, a1, a2, a3, (uint64_t)&v234, (uint64_t *)v220, newpool);
          if ((_BYTE)v223) {
            int v171 = v156;
          }
          else {
            int v171 = 0;
          }
          long long v172 = (void *)*((void *)&v223 + 1);
          GTMTLReplayAccessTracking::~GTMTLReplayAccessTracking((id *)&v234);
          uint64_t v170 = 0;
          uint64_t v169 = 0;
          goto LABEL_186;
        }
      }
      else
      {
      }
    }
    *(_OWORD *)v235 = 0u;
    long long v234 = 0u;
    long long v236 = 0u;
    long long v237 = 0u;
    *(_DWORD *)&v235[16] = 1065353216;
    int v238 = 1065353216;
    long long v217 = 0u;
    long long v218 = 0u;
    *(void *)&long long v223 = 1;
    int v219 = 1065353216;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
    long long v214 = 0u;
    long long v215 = 0u;
    int v216 = 1065353216;
    uint64_t v226 = 2;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
    long long v211 = 0u;
    long long v212 = 0u;
    int v213 = 1065353216;
    uint64_t v228 = 4;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
    long long v208 = 0u;
    long long v209 = 0u;
    int v210 = 1065353216;
    uint64_t v230 = 16;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
    long long v205 = 0u;
    long long v206 = 0u;
    int v207 = 1065353216;
    uint64_t v232 = 8;
    std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
    std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
    for (uint64_t i8 = 200; i8 != -40; i8 -= 48)
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i8);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
    long long v240 = 0u;
    long long v241 = 0u;
    int v242 = 1065353216;
    long long v243 = 0u;
    long long v244 = 0u;
    long long v246 = 0u;
    long long v247 = 0u;
    int v245 = 1065353216;
    int v248 = 1065353216;
    id v249 = v150;
    uint64_t v250 = 2;
    uint64_t v251 = 1;
    uint64_t v168 = newpool;
    InstrumentSubCommandWithAccessTrackingV2((uint64_t)&v223, a1, a2, a3, (uint64_t)&v234, (uint64_t *)v220, newpool);
    uint64_t v169 = (unsigned char *)*((void *)&v223 + 1);
    uint64_t v170 = (unsigned char *)v224;
    int v171 = v223;

    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v246);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v243);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v240);
    std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table((uint64_t)v239);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v236);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v234);
    long long v172 = 0;
    uint64_t v157 = 0;
    uint64_t v173 = a2;
LABEL_186:
    if (ShouldInstrumentFragmentStage((uint64_t *)a1, (uint64_t)v220, v173, a3))
    {
      *(_OWORD *)v235 = 0u;
      long long v234 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      *(_DWORD *)&v235[16] = 1065353216;
      int v238 = 1065353216;
      long long v217 = 0u;
      long long v218 = 0u;
      *(void *)&long long v223 = 1;
      int v219 = 1065353216;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
      long long v214 = 0u;
      long long v215 = 0u;
      int v216 = 1065353216;
      uint64_t v226 = 2;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
      long long v211 = 0u;
      long long v212 = 0u;
      int v213 = 1065353216;
      uint64_t v228 = 4;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
      long long v208 = 0u;
      long long v209 = 0u;
      int v210 = 1065353216;
      uint64_t v230 = 16;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
      long long v205 = 0u;
      long long v206 = 0u;
      int v207 = 1065353216;
      uint64_t v232 = 8;
      std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
      std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
      for (uint64_t i9 = 200; i9 != -40; i9 -= 48)
        std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i9);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
      std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
      long long v240 = 0u;
      long long v241 = 0u;
      int v242 = 1065353216;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      int v245 = 1065353216;
      int v248 = 1065353216;
      id v249 = __pa;
      uint64_t v250 = 2;
      uint64_t v251 = 0x100000002;
      uint64_t v168 = newpool;
      InstrumentSubCommandWithAccessTrackingV2((uint64_t)&v223, a1, a2, a3, (uint64_t)&v234, (uint64_t *)v220, newpool);
      long long v175 = (unsigned char *)*((void *)&v223 + 1);
      uint64_t v176 = (unsigned char *)v224;
      if (v171) {
        BOOL v177 = v223 == 0;
      }
      else {
        BOOL v177 = 1;
      }
      LOBYTE(v171) = !v177;
      GTMTLReplayAccessTracking::~GTMTLReplayAccessTracking((id *)&v234);
    }
    else
    {
      uint64_t v176 = 0;
      long long v175 = 0;
    }
    ReplaceFunctionTablesWithRegular((uint64_t)v197, (uint64_t)a1, 3, *(void *)a2, (uint64_t *)v220, v168);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v198);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v197);
    id v121 = [objc_alloc((Class)NSMutableArray) initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((v170 - v169) >> 3) - 0x5555555555555555 * ((v176 - v175) >> 3)];
    if (v169 != v170)
    {
      long long v178 = v169;
      do
      {
        long long v234 = *(_OWORD *)v178;
        *(void *)v235 = v178[2];
        long long v179 = MakeResourceUsageItem((uint64_t)&v234, 1);
        [v121 addObject:v179];

        v178 += 3;
      }
      while (v178 != (void *)v170);
    }
    if (v175 != v176)
    {
      long long v180 = v175;
      do
      {
        long long v234 = *(_OWORD *)v180;
        *(void *)v235 = v180[2];
        long long v181 = MakeResourceUsageItem((uint64_t)&v234, 2);
        [v121 addObject:v181];

        v180 += 3;
      }
      while (v180 != (void *)v176);
    }
    if (v172) {
      operator delete(v172);
    }
    if (v157) {
      operator delete(v157);
    }
    if (v175) {
      operator delete(v175);
    }
    if (v169) {
      operator delete(v169);
    }

    uint64_t v106 = v171 & 1;
    goto LABEL_156;
  }
LABEL_139:
  *(_OWORD *)v235 = 0u;
  long long v234 = 0u;
  long long v236 = 0u;
  long long v237 = 0u;
  *(_DWORD *)&v235[16] = 1065353216;
  int v238 = 1065353216;
  long long v217 = 0u;
  long long v218 = 0u;
  *(void *)&long long v223 = 1;
  int v219 = 1065353216;
  std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)&v223 + 8, (uint64_t)&v217);
  long long v214 = 0u;
  long long v215 = 0u;
  int v216 = 1065353216;
  uint64_t v226 = 2;
  std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v227, (uint64_t)&v214);
  long long v211 = 0u;
  long long v212 = 0u;
  int v213 = 1065353216;
  uint64_t v228 = 4;
  std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v229, (uint64_t)&v211);
  long long v208 = 0u;
  long long v209 = 0u;
  int v210 = 1065353216;
  uint64_t v230 = 16;
  std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v231, (uint64_t)&v208);
  long long v205 = 0u;
  long long v206 = 0u;
  int v207 = 1065353216;
  uint64_t v232 = 8;
  std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>::unordered_map((uint64_t)v233, (uint64_t)&v205);
  std::unordered_map<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,std::equal_to<FunctionHandleKey><std::allocator<unsigned long const>>>::unordered_map((uint64_t)v239, (unint64_t *)&v223, 5);
  for (uint64_t i10 = 200; i10 != -40; i10 -= 48)
    std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v223 + i10);
  std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v205);
  std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v208);
  std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v211);
  std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v214);
  std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v217);
  long long v240 = 0u;
  long long v241 = 0u;
  int v242 = 1065353216;
  long long v243 = 0u;
  long long v244 = 0u;
  long long v246 = 0u;
  long long v247 = 0u;
  int v245 = 1065353216;
  int v248 = 1065353216;
  int v132 = [a1->var1 defaultDevice];
  ObtainResourceTrackingTracingBufferV2(v132, v220);
  id v249 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v250 = 2;
  uint64_t v251 = 0x100000004;

  uint64_t v133 = newpool;
  InstrumentFunctionWithResourceTrackingV2((uint64_t)&v223, a1, a2, (uint64_t)&v234, (uint64_t)v220, newpool);
  uint64_t v106 = (_BYTE)v223 != 0;
  ReplaceFunctionTablesWithRegular((uint64_t)v201, (uint64_t)a1, 4, *(void *)a2, (uint64_t *)v220, v133);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v202);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v201);
  id v134 = objc_alloc((Class)NSMutableArray);
  uint64_t v135 = (void *)v224;
  unint64_t v136 = (void *)*((void *)&v223 + 1);
  id v121 = [v134 initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - *((void *)&v223 + 1)) >> 3)];
  if (v136 != v135)
  {
    uint64_t v137 = v136;
    do
    {
      long long v217 = *(_OWORD *)v137;
      *(void *)&long long v218 = v137[2];
      uint64_t v138 = MakeResourceUsageItem((uint64_t)&v217, 4);
      [v121 addObject:v138];

      v137 += 3;
    }
    while (v137 != v135);
  }
  if (v136) {
    operator delete(v136);
  }

LABEL_155:
  std::__hash_table<std::__hash_value_type<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong}>,std::__unordered_map_hasher<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,true>,std::__unordered_map_equal<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto17MTLFunctionHandle}* {__strong}>>::~__hash_table((uint64_t)&v246);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v243);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v240);
  std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>,std::__unordered_map_hasher<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,FunctionHandleKeyHash<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>,std::hash<unsigned long>,std::hash,true>,std::equal_to<FunctionHandleKey><std::unordered_map<FunctionHandleKey,objc_object  {objcproto17MTLFunctionHandle}* {__strong},FunctionHandleKeyHash,std::equal_to<FunctionHandleKey>,std::allocator<std::pair<FunctionHandleKey const,objc_object  {objcproto17MTLFunctionHandle}*>>>>>::~__hash_table((uint64_t)v239);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v236);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v234);
LABEL_156:
  uint64_t v95 = context;
LABEL_157:
  apr_pool_destroy(newpool);
  if (v121)
  {
    id v147 = [v121 copy];
    *a4 = v147;
  }
  else
  {
    *a4 = &__NSArray0__struct;
  }

  return v106;
}

void sub_2BABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void InstrumentFunctionWithResourceTrackingV2(uint64_t a1, GTMTLReplayController *a2, uint64_t a3, uint64_t a4, uint64_t a5, apr_pool_t *a6)
{
  __n128 v12 = [a2->var1 defaultDevice];
  var0 = a2->var0;
  long long v14 = *(_OWORD *)(a5 + 32);
  long long v15 = *(_OWORD *)(a5 + 64);
  long long v67 = *(_OWORD *)(a5 + 48);
  long long v68 = v15;
  uint64_t v69 = *(void *)(a5 + 80);
  long long v16 = *(_OWORD *)(a5 + 16);
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  long long v64 = *(_OWORD *)a5;
  long long v65 = v16;
  long long v66 = v14;
  if (v17 >> 2 == 1073737833) {
    goto LABEL_60;
  }
  GTMTLReplayController_debugSubCommandResume((unsigned int *)a2, *(_DWORD *)a3 - LODWORD(var0->var9.var0.var0) + 1, -1);
  if (!*(void *)(a4 + 240)) {
    goto LABEL_59;
  }
  unint64_t v18 = [a2->var1 defaultDevice];
  unint64_t v19 = a2->var0;
  var5 = (uint64_t *)a2->var0->var5;
  unsigned int v20 = a2->var21.var0.var0;
  if (v20 != 28)
  {
    if (v20 != 70)
    {
LABEL_58:

LABEL_59:
      GTMTLReplay_handleError(101, (uint64_t)"Resource access tracking failed", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_accessTracking.mm", (uint64_t)"InstrumentFunctionWithResourceTrackingV2", 4806, 64);
      FlushCommandQueue(a2);
      goto LABEL_60;
    }
    *(void *)uint64_t v61 = v18;
    BOOL v57 = [a2->var1 renderCommandEncoderForKey:a2->var21.var0.var2];
    if (!v57) {
      goto LABEL_56;
    }
    uint64_t Object = GTMTLSMContext_getObject(*(void *)v19->var5, a2->var21.var3.var0.var23, *(void *)a3);
    if (!Object) {
      goto LABEL_56;
    }
    uint64_t v22 = Object;
    uint64_t v23 = ObtainTracingRenderPipelineState((uint64_t *)v19->var5, a2->var1, Object, a4, *(void *)a3, a6);
    if (!v23) {
      goto LABEL_56;
    }
    unint64_t v55 = (void *)v23;
    ReplaceFunctionTablesWithInstrumented((uint64_t)&v61[8], (uint64_t)a2, a4, *(void *)a3, v22, (uint64_t *)&v64, a6);
    [v57 setRenderPipelineState:v23];
    uint64_t v24 = *(_DWORD *)(a4 + 256) & 0x37;
    if ((*(_DWORD *)(a4 + 256) & 0x37u) <= 3)
    {
      if ((*(_DWORD *)(a4 + 256) & 0x37) != 1)
      {
        if ((*(_DWORD *)(a4 + 256) & 0x37) != 2) {
          goto LABEL_55;
        }
        uint64_t v24 = 2;
      }
    }
    else
    {
      switch(*(_DWORD *)(a4 + 256) & 0x37)
      {
        case 4:
          uint64_t v24 = 4;
          break;
        case 16:
          uint64_t v24 = 8;
          break;
        case 32:
          uint64_t v24 = 16;
          break;
        default:
          goto LABEL_55;
      }
    }
    [v57 useResource:*(void *)(a4 + 240) usage:3 stages:v24];
    int v31 = *(_DWORD *)(a3 + 8);
    if (!IsFuncEnumDrawCall(v31))
    {
      if (v31 == -16137 || v31 == -15297 || v31 == -15486)
      {
        if ((SupportsGlobalRelocation(*(void **)v61, a4) & 1) == 0)
        {
          int v32 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)a4, v22[1]);
          if (!v32) {
            goto LABEL_55;
          }
          [v57 setTileBuffer:*(void *)(a4 + 240) offset:0 atIndex:*((unsigned int *)v32 + 6)];
        }
        if (!UpdateFunctionTables<31ul,1ul>(4u, v57, (uint64_t)&a2->var21.var3.var0.var20.var0, (uint64_t)a2->var21.var3.var0.var19, var5, *(void *)a3, &v61[8]))goto LABEL_55; {
      }
        }
LABEL_39:
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v61[48]);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v61[8]);

      unint64_t v18 = *(void **)v61;
      goto LABEL_40;
    }
    GTMTLSMRenderPipelineState_fragmentFunction(var5, v22);
    if (SupportsGlobalRelocation(*(void **)v61, a4)) {
      goto LABEL_30;
    }
    uint64_t v50 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)a4, v22[1]);
    if (v50)
    {
      uint64_t v51 = *((unsigned int *)v50 + 6);
      int v52 = *(_DWORD *)(a4 + 256);
      if (v52 > 15)
      {
        if (v52 == 16)
        {
          [v57 setObjectBuffer:*(void *)(a4 + 240) offset:0 atIndex:v51];
        }
        else
        {
          if (v52 != 32) {
            goto LABEL_55;
          }
          [v57 setMeshBuffer:*(void *)(a4 + 240) offset:0 atIndex:v51];
        }
      }
      else
      {
        if (v52 != 1)
        {
          if (v52 == 2)
          {
            [v57 setFragmentBuffer:*(void *)(a4 + 240) offset:0 atIndex:v51];
            goto LABEL_30;
          }
          goto LABEL_55;
        }
        [v57 setVertexBuffer:*(void *)(a4 + 240) offset:0 atIndex:v51];
      }
LABEL_30:
      if ((UpdateDrawFunctionTables(a4, var5, &v61[8], (uint64_t)&a2->var21.var3, v57, *(void *)a3) & 1) == 0) {
        goto LABEL_55;
      }
      goto LABEL_39;
    }
LABEL_55:
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v61[48]);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v61[8]);

LABEL_56:
    goto LABEL_57;
  }
  *(void *)uint64_t v61 = v18;
  long long v25 = [a2->var1 computeCommandEncoderForKey:a2->var21.var0.var2];
  if (!v25
    || (id v26 = GTMTLSMContext_getObject(*(void *)a2->var0->var5, a2->var21.var3.var0.var1[0], *(void *)a3)) == 0
    || (unint64_t v27 = v26,
        ObtainTracingComputePipelineState((uint64_t *)a2->var0->var5, a2->var1, (uint64_t)v26, a4, *(void *)a3, a6),
        (uint64_t v28 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_25:

LABEL_57:
    unint64_t v18 = *(void **)v61;
    goto LABEL_58;
  }
  BOOL v57 = (void *)v28;
  ReplaceFunctionTablesWithInstrumented((uint64_t)&v61[8], (uint64_t)a2, a4, *(void *)a3, v27, (uint64_t *)&v64, a6);
  if (SupportsGlobalRelocation(*(void **)v61, a4)) {
    goto LABEL_19;
  }
  long long v29 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)a4, v27[1]);
  if (!v29)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v61[48]);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v61[8]);

    goto LABEL_25;
  }
  [v25 setBuffer:*(void *)(a4 + 240) offset:0 atIndex:*((unsigned int *)v29 + 6)];
LABEL_19:
  [v25 setComputePipelineState:v57];
  [v25 useResource:*(void *)(a4 + 240) usage:3];
  char updated = UpdateFunctionTables<31ul,1ul>(8u, v25, (uint64_t)&a2->var21.var3.var0.var3.var0.var0[1], (uint64_t)a2->var21.var3.var0.var2, var5, *(void *)a3, &v61[8]);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v61[48]);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v61[8]);

  unint64_t v18 = *(void **)v61;
  if ((updated & 1) == 0) {
    goto LABEL_58;
  }
LABEL_40:

  RemapIndirectResources((uint64_t)&v61[8], a5, a2->var1, a6);
  long long v67 = *(_OWORD *)&v61[56];
  long long v68 = v62;
  uint64_t v69 = v63;
  long long v64 = *(_OWORD *)&v61[8];
  long long v65 = *(_OWORD *)&v61[24];
  long long v66 = *(_OWORD *)&v61[40];
  PopulateResourceTrackingBufferV2(*(void **)(a4 + 240), &v64, v33, v34, v35, v36, v37, v38, v53, (uint64_t)v55, (uint64_t)v57, (uint64_t)var5, *(long long *)v61, *(long long *)&v61[16], *(long long *)&v61[32], *(long long *)&v61[48]);
  GTMTLReplayController_defaultDispatchFunction((uint64_t)a2, a3);
  FlushCommandQueue(a2);
  if (!IsTraceBufferValidV2(*(void **)(a4 + 240)))
  {
LABEL_60:
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_61;
  }
  DecodeResourceTrackingBufferV2((unint64_t *)&v61[8], *(void **)(a4 + 240), &v64, v39, v40, v41, v42, v43, v54, v56, v58, v60, *(long long *)v61, *(long long *)&v61[16], *(long long *)&v61[32], *(long long *)&v61[48]);
  uint64_t v44 = *(void **)&v61[8];
  int64_t v45 = *(void *)&v61[16] - *(void *)&v61[8];
  if (*(void *)&v61[16] == *(void *)&v61[8])
  {
    unint64_t v46 = 0;
    BOOL v48 = 0;
    long long v49 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v45 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    unint64_t v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(0xAAAAAAAAAAAAAAABLL * (v45 >> 3));
    BOOL v48 = &v46[24 * v47];
    memmove(v46, v44, v45);
    long long v49 = &v46[8 * (v45 >> 3)];
  }
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = v46;
  *(void *)(a1 + 16) = v49;
  *(void *)(a1 + 24) = v48;
  if (v44) {
    operator delete(v44);
  }
LABEL_61:
}

void sub_2BBD4C(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)va1);
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)va);

  _Unwind_Resume(a1);
}

void *ShouldInstrumentFragmentStage(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *a1;
  unsigned int v9 = *(_DWORD *)(a3 + 8);
  if (IsFuncEnumDrawCall(v9))
  {
    if (*((_DWORD *)a1 + 2828) == 70)
    {
      BOOL result = GTMTLSMContext_getObject(**(void **)(v8 + 40), a1[2489], *(void *)a3);
      if (!result) {
        return result;
      }
      BOOL v11 = GTMTLSMRenderPipelineState_fragmentFunction(*(uint64_t **)(v8 + 40), result) == 0;
      return (void *)!v11;
    }
    return 0;
  }
  if (v9 >> 1 != 2147475667) {
    return 0;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  GetExecuteCommandsInBufferArgs((uint64_t)&v21, a3, *(void *)(v8 + 16));
  uint64_t Object = GTMTLSMContext_getObject(**(void **)(v8 + 40), v21, *(void *)a3);
  GTMTLCreateIndirectCommandEncoder((uint64_t)v20, Object[13]);
  if (*((void *)&v21 + 1) > a4 || (void)v22 + *((void *)&v21 + 1) < a4) {
    return 0;
  }
  uint64_t v13 = *((void *)&v22 + 1) + v20[13] * a4;
  unint64_t v14 = *(void *)(v13 + v20[1]);
  BOOL v15 = v14 > 8;
  uint64_t v16 = (1 << v14) & 0x116;
  if (v15 || v16 == 0) {
    return 0;
  }
  if (*(unsigned char *)(v20[0] + 11))
  {
    uint64_t v18 = a1[2489];
    if (!v18) {
      return 0;
    }
  }
  else
  {
    uint64_t v18 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(*(void *)(a2 + 24), *(void *)(v13 + v20[2]));
    if (!v18) {
      return 0;
    }
  }
  BOOL result = GTMTLSMContext_getObject(**(void **)(v8 + 40), v18, *(void *)a3);
  if (!result) {
    return result;
  }
  uint64_t v19 = result[6];
  if (!v19) {
    return 0;
  }
  BOOL v11 = *(void *)(v19 + 1176) == 0;
  return (void *)!v11;
}

BOOL ShouldInstrumentICBObjectStage(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  if (*(_DWORD *)(a2 + 8) >> 2 != 1073737833) {
    return 0;
  }
  uint64_t v6 = *a1;
  id v7 = (id)a1[1];
  uint64_t v8 = *(apr_pool_t **)a1[19];
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  GTMTLSMContext_indirectCommandBufferResources((uint64_t)&v20, *(_DWORD ***)(v6 + 40), *(void *)a2, v8);
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  GetExecuteCommandsInBufferArgs((uint64_t)&v17, a2, *(void *)(v6 + 16));
  uint64_t Object = GTMTLSMContext_getObject(**(void **)(v6 + 40), v17, *(void *)a2);
  GTMTLCreateIndirectCommandEncoder((uint64_t)v16, Object[13]);
  BOOL v12 = *((void *)&v17 + 1) <= a3
     && (void)v18 + *((void *)&v17 + 1) >= a3
     && *((void *)&v18 + 1)
     && (uint64_t v10 = Object[13]) != 0
     && (!*(unsigned char *)(v10 + 11)
       ? (v11 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(*((uint64_t *)&v21 + 1), *(void *)(*((void *)&v18 + 1) + v16[13] * a3 + v16[2]))): (v11 = a1[2489]), (uint64_t v13 = GTMTLSMContext_getObject(**(void **)(v6 + 40), v11, *(void *)a2)) != 0 && (v14 = v13[9]) != 0)&& *(void *)(v14 + 368) != 0;

  return v12;
}

void MakeRootResourceAliasable(void *a1)
{
  id v6 = a1;
  id v1 = [v6 heap];
  unint64_t v2 = v1;
  if (v1 && ![v1 type])
  {
    if (![v6 conformsToProtocol:&OBJC_PROTOCOL___MTLTexture]) {
      goto LABEL_7;
    }
    id v3 = v6;
    uint64_t v4 = [v3 parentTexture];
    if (v4)
    {

      goto LABEL_8;
    }
    BOOL v5 = [v3 buffer];

    if (!v5) {
LABEL_7:
    }
      [v6 makeAliasable];
  }
LABEL_8:
}

uint64_t IsResourceIndirectCommandBuffer(void *a1)
{
  id v1 = a1;
  if (IsResourceIndirectCommandBuffer_onceToken != -1) {
    dispatch_once(&IsResourceIndirectCommandBuffer_onceToken, &__block_literal_global_5190);
  }
  if ([v1 conformsToProtocol:&OBJC_PROTOCOL___MTLIndirectCommandBuffer])
  {
    char isKindOfClass = 1;
  }
  else if (IsResourceIndirectCommandBuffer__MTLIOAccelIndirectCommandBufferClass)
  {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

id GTMTLReplayController_generatePostMeshData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = v13;
  __src = v16;
  uint64_t v226 = v15;
  unint64_t v232 = v17;
  uint64_t v227 = v18;
  __uint64_t n = v19;
  uint64_t v20 = v12;
  id v241 = v21;
  id v22 = a11;
  id v23 = *(id *)(a10 + 72);
  long long v24 = [v23 device];
  uint64_t v222 = v14;
  memcpy(v264, *(const void **)(v14 + 72), sizeof(v264));
  uint64_t v25 = 0;
  int v26 = BYTE5(v264[63]);
  do
  {
    unint64_t v27 = &v264[v25];
    *(_WORD *)unint64_t v27 = 0;
    *((unsigned char *)v27 + 3) = 0;
    v25 += 2;
  }
  while (v25 != 16);
  LOWORD(v264[50]) = 0;
  LOWORD(v264[51]) = 0;
  BYTE6(v264[63]) = 0;
  LOWORD(v264[0]) = 70;
  memset(&v264[16], 0, 64);
  v264[43] = 0;
  v264[47] = 0;
  uint64_t v230 = v20;
  uint64_t v28 = [*(id *)(v20 + 8) renderPipelineDescriptorMap];
  long long v29 = MakeMTLMeshRenderPipelineDescriptorWithoutResourceIndex((uint64_t)v264, v28);

  int v272 = 0;
  uint64_t v271 = 0;
  [v29 setRasterizationEnabled:0];
  [v29 setLabel:@"GPUToolsInternalPostTransformPipelineStateLabel"];
  BOOL v30 = +[NSMutableDictionary dictionary];
  int v31 = +[NSMutableDictionary dictionary];
  id v263 = 0;
  id v262 = 0;
  id v32 = [v24 newRenderPipelineStateWithMeshDescriptor:v29 options:1 reflection:&v263 error:&v262];
  id v33 = v263;
  id v34 = v262;
  obuint64_t j = v32;
  if (!v32)
  {
    GTPostVertexDataError(2u, @"Post-vertex data fetch pipeline reflection error", 0, v34);
    *a12 = (id)objc_claimAutoreleasedReturnValue();

    id v44 = 0;
    uint64_t v39 = v241;
    goto LABEL_122;
  }
  long long v237 = v24;
  int v238 = v29;
  [v33 meshBuiltInArguments];
  long long v258 = 0u;
  long long v259 = 0u;
  long long v260 = 0u;
  long long v261 = 0u;
  id v35 = (id)objc_claimAutoreleasedReturnValue();
  id v36 = [v35 countByEnumeratingWithState:&v258 objects:v270 count:16];
  id v236 = v23;
  if (v36)
  {
    id v37 = v36;
    id v214 = v33;
    int v218 = v26;
    id v223 = v22;
    uint64_t v38 = *(void *)v259;
    uint64_t v39 = v241;
    while (2)
    {
      for (uint64_t i = 0; i != v37; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v259 != v38) {
          objc_enumerationMutation(v35);
        }
        uint64_t v41 = *(void **)(*((void *)&v258 + 1) + 8 * i);
        if ([v41 builtInType] == &dword_18)
        {
          unsigned int v216 = [v41 meshVertexCount];
          unsigned int v217 = [v41 meshPrimitiveCount];
          unint64_t v43 = (unint64_t)[v41 meshTopologyType] - 1;
          id v212 = v34;
          if (v43 > 2) {
            int v209 = 0;
          }
          else {
            int v209 = dword_4C8428[v43];
          }
          int64_t v45 = [v41 meshVertexStruct];
          long long v234 = [v41 meshPrimitiveStruct];
          long long v254 = 0u;
          long long v255 = 0u;
          long long v256 = 0u;
          long long v257 = 0u;
          int v210 = v45;
          unint64_t v46 = [v45 members];
          id v47 = [v46 countByEnumeratingWithState:&v254 objects:v269 count:16];
          if (v47)
          {
            id v48 = v47;
            uint64_t v49 = *(void *)v255;
            do
            {
              for (uint64_t j = 0; j != v48; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v255 != v49) {
                  objc_enumerationMutation(v46);
                }
                uint64_t v51 = *(void **)(*((void *)&v254 + 1) + 8 * (void)j);
                int v52 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v51 dataType]);
                uint64_t v53 = [v51 name];
                [v30 setObject:v52 forKeyedSubscript:v53];
              }
              id v48 = [v46 countByEnumeratingWithState:&v254 objects:v269 count:16];
            }
            while (v48);
          }

          long long v253 = 0u;
          long long v252 = 0u;
          long long v251 = 0u;
          long long v250 = 0u;
          uint64_t v54 = [v234 members];
          id v55 = [v54 countByEnumeratingWithState:&v250 objects:v268 count:16];
          if (v55)
          {
            id v56 = v55;
            uint64_t v57 = *(void *)v251;
            do
            {
              for (uint64_t k = 0; k != v56; uint64_t k = (char *)k + 1)
              {
                if (*(void *)v251 != v57) {
                  objc_enumerationMutation(v54);
                }
                unint64_t v59 = *(void **)(*((void *)&v250 + 1) + 8 * (void)k);
                uint64_t v60 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v59 dataType]);
                uint64_t v61 = [v59 name];
                [v31 setObject:v60 forKeyedSubscript:v61];
              }
              id v56 = [v54 countByEnumeratingWithState:&v250 objects:v268 count:16];
            }
            while (v56);
          }

          char v42 = 1;
          uint64_t v39 = v241;
          id v22 = v223;
          int v26 = v218;
          id v34 = v212;
          goto LABEL_33;
        }
      }
      id v37 = [v35 countByEnumeratingWithState:&v258 objects:v270 count:16];
      if (v37) {
        continue;
      }
      break;
    }
    int v209 = 0;
    unsigned int v216 = 0;
    unsigned int v217 = 0;
    char v42 = 0;
    id v22 = v223;
    int v26 = v218;
LABEL_33:
    id v33 = v214;
  }
  else
  {
    int v209 = 0;
    unsigned int v216 = 0;
    unsigned int v217 = 0;
    char v42 = 0;
    uint64_t v39 = v241;
  }

  long long v29 = v238;
  if ((v42 & 1) == 0 && v26)
  {
    GTPostVertexDataError(1u, @"Internal error: Missing mesh reflection", 0, 0);
    id v44 = 0;
    *a12 = (id)objc_claimAutoreleasedReturnValue();
    id v23 = v236;
    long long v24 = v237;
    goto LABEL_122;
  }
  long long v24 = v237;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    GTPostVertexDataError(3u, @"Post-vertex data fetch for mesh pipelines is not supported", @"Update target OS to the latest version", 0);
    id v44 = 0;
    *a12 = (id)objc_claimAutoreleasedReturnValue();
    id v23 = v236;
    goto LABEL_122;
  }
  int v219 = v26;
  CFStringRef v266 = @"enable-post-mesh-dump-instrumentation";
  long long v62 = +[NSNull null];
  int v267 = v62;
  uint64_t v63 = +[NSDictionary dictionaryWithObjects:&v267 forKeys:&v266 count:1];
  [v238 setGpuCompilerSPIOptions:v63];

  id v249 = 0;
  id v248 = 0;
  id v64 = [v237 newRenderPipelineStateWithMeshDescriptor:v238 options:0x200000001 reflection:&v249 error:&v248];
  id v65 = v249;
  id v66 = v248;
  int v213 = v65;
  long long v215 = v64;
  v235 = v66;
  if (v64)
  {
    id v224 = v22;
    [v65 meshBindings];
    long long v244 = 0u;
    long long v245 = 0u;
    long long v246 = 0u;
    long long v247 = 0u;
    id obja = (id)objc_claimAutoreleasedReturnValue();
    id v67 = [obja countByEnumeratingWithState:&v244 objects:v265 count:16];
    if (v67)
    {
      id v68 = v67;
      uint64_t v69 = *(void *)v245;
LABEL_41:
      uint64_t v70 = 0;
      while (1)
      {
        if (*(void *)v245 != v69) {
          objc_enumerationMutation(obja);
        }
        uint64_t v71 = *(void **)(*((void *)&v244 + 1) + 8 * v70);
        long long v72 = [v71 name];
        if ([v72 isEqualToString:@"__post_mesh_dump_impl_trace_buffer"])
        {
          id v73 = [v71 type];

          if (!v73)
          {
            id v168 = [v71 index];
            unint64_t v83 = [v71 bufferStructType];
            unint64_t v84 = [v83 memberByName:@"size"];
            long long v167 = (char *)[v84 offset];
            unint64_t v85 = [v83 memberByName:@"os_tg_bounds"];
            int v166 = (char *)[v85 offset];
            char v86 = [v85 arrayType];
            unint64_t v165 = (unint64_t)[v86 stride];
            int v87 = [v83 memberByName:@"num_dumped_mesh_threadgroups"];
            uint64_t v188 = (char *)[v87 offset];
            unint64_t v88 = [v83 memberByName:@"max_ms_tg_ids"];
            int v185 = (char *)[v88 offset];

            long long v206 = v83;
            uint64_t v89 = [v83 memberByName:@"mesh_data"];
            long long v208 = [v89 offset];
            uint64_t v204 = v89;
            unint64_t v90 = [v89 arrayType];
            unsigned int v211 = [v90 stride];
            uint64_t v202 = v90;
            unint64_t v91 = [v90 elementStructType];
            uint64_t v200 = [v91 memberByName:@"primitive_count"];
            unsigned int v187 = [v200 offset];
            uint64_t v198 = [v91 memberByName:@"amplification_id"];
            unsigned int v186 = [v198 offset];
            uint64_t v196 = [v91 memberByName:@"object_threadgroup_position_in_grid"];
            unsigned int v184 = [v196 offset];
            unint64_t v195 = [v91 memberByName:@"threadgroup_position_in_grid"];
            unsigned int v183 = [v195 offset];
            dispatch_semaphore_t v194 = [v91 memberByName:@"indices"];
            unsigned int v182 = [v194 offset];
            uint64_t v193 = [v91 memberByName:@"indices_present"];
            unsigned int v181 = [v193 offset];
            unint64_t v92 = [v91 memberByName:@"indices_thread_id"];
            unsigned int v180 = [v92 offset];
            id v192 = v92;
            if (v217)
            {
              int64_t v93 = [v92 arrayType];
              unsigned int v179 = [v93 stride];
            }
            else
            {
              unsigned int v179 = 0;
            }
            uint64_t v39 = v241;
            uint64_t v191 = [v91 memberByName:@"vertices_present"];
            unsigned int v178 = [v191 offset];
            long long v94 = [v91 memberByName:@"vertices_thread_id"];
            unsigned int v177 = [v94 offset];
            if (v216)
            {
              uint64_t v95 = [v94 arrayType];
              unsigned int v176 = [v95 stride];
            }
            else
            {
              unsigned int v176 = 0;
            }
            signed int v190 = v94;
            int v96 = [v91 memberByName:@"vertices"];
            unsigned int v174 = [v96 offset];
            if (v216)
            {
              uint64_t v97 = [v96 arrayType];
              unsigned int v98 = [v97 stride];
              uint64_t v220 = [v97 elementStructType];

              unsigned int v175 = v98;
              unsigned int v169 = v98;
            }
            else
            {
              unsigned int v175 = 0;
              unsigned int v169 = 0;
              uint64_t v220 = 0;
            }
            long long v99 = [v91 memberByName:@"primitives_present"];
            unsigned int v173 = [v99 offset];
            long long v100 = [v91 memberByName:@"primitives_thread_id"];
            unsigned int v172 = [v100 offset];
            if (v217)
            {
              uint64_t v101 = [v100 arrayType];
              unsigned int v171 = [v101 stride];
            }
            else
            {
              unsigned int v171 = 0;
            }
            long long v102 = [v91 memberByName:@"primitives"];
            unsigned int v170 = [v102 offset];
            if (v217)
            {
              BOOL v103 = [v102 arrayType];
              unsigned int v189 = [v103 stride];
              [v103 elementStructType];
              long long v104 = v99;
              v106 = long long v105 = v96;

              int v107 = (void *)v106;
              int v96 = v105;
              long long v99 = v104;
            }
            else
            {
              unsigned int v189 = 0;
              int v107 = 0;
            }

            BOOL v108 = 0;
            int v109 = 1;
            id v22 = v224;
            id v23 = v236;
            long long v29 = v238;
            uint64_t v110 = (void *)v220;
            if (!v220) {
              goto LABEL_80;
            }
            goto LABEL_81;
          }
        }
        else
        {
        }
        if (v68 == (id)++v70)
        {
          id v68 = [obja countByEnumeratingWithState:&v244 objects:v265 count:16];
          if (v68) {
            goto LABEL_41;
          }
          break;
        }
      }
    }

    if (v219) {
      char v74 = 1;
    }
    else {
      char v74 = v42;
    }
    if (v74)
    {
      GTPostVertexDataError(1u, @"Internal error: Post-vertex data buffer binding is missing", 0, 0);
      id v44 = 0;
      *a12 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v39 = v241;
      id v22 = v224;
      id v23 = v236;
      long long v24 = v237;
LABEL_119:
      long long v29 = v238;
      goto LABEL_120;
    }
    unsigned int v174 = 0;
    unsigned int v175 = 0;
    unsigned int v170 = 0;
    unsigned int v171 = 0;
    unsigned int v189 = 0;
    unsigned int v211 = 0;
    unsigned int v186 = 0;
    unsigned int v187 = 0;
    unsigned int v183 = 0;
    unsigned int v184 = 0;
    unsigned int v181 = 0;
    unsigned int v182 = 0;
    unsigned int v177 = 0;
    unsigned int v178 = 0;
    unsigned int v172 = 0;
    unsigned int v173 = 0;
    unsigned int v176 = 0;
    unsigned int v179 = 0;
    unsigned int v180 = 0;
    id v168 = 0;
    unsigned int v169 = 0;
    uint64_t v110 = 0;
    int v107 = 0;
    int v109 = 0;
    long long v167 = 0;
    BOOL v108 = v264[46] != 0;
    unint64_t v165 = 0;
    int v166 = (char *)&dword_4;
    uint64_t v188 = (unsigned char *)(&stru_20 + 4);
    int v185 = (unsigned char *)(&stru_20 + 8);
    long long v208 = (unsigned char *)(&stru_20 + 12);
    uint64_t v39 = v241;
    id v22 = v224;
    id v23 = v236;
    long long v29 = v238;
LABEL_80:
    if (!v216)
    {
LABEL_81:
      if (v107 || !v217)
      {
        BOOL v199 = v108;
        id v203 = v107;
        uint64_t v221 = v110;
        if (v109)
        {
          uint64_t v111 = *(void *)(__n + 24)
               + (*GroupBuilder_getCommandBuffer(*(_DWORD *)(*(void *)(v227 + 112) + 12), *(void **)(*(void *)(v227 + 112) + 24), v232) << 6);
          GTMTLReplayController_defaultDispatchFunction(v230, v111);
          long long v205 = [v39 commandBufferForKey:*(void *)GTTraceFunc_argumentBytesWithMap((void *)v111, *(unsigned __int8 *)(v111 + 13), *(void *)(v227 + 16))+ 1];
          id v112 = objc_alloc_init((Class)MTLRenderPassDescriptor);
          [v112 setRenderTargetWidth:*(void *)(v230 + 22464)];
          [v112 setRenderTargetHeight:*(void *)(v230 + 22472)];
          uint64_t v113 = [v29 colorAttachments];
          long long v114 = [v113 objectAtIndexedSubscript:0];
          BOOL v115 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", [v114 pixelFormat], *(void *)(v230 + 22464), *(void *)(v230 + 22472), 0);

          [v115 setStorageMode:2];
          if ([v237 supportsMemorylessRenderTargets]) {
            [v115 setStorageMode:3];
          }
          id v116 = [v237 newTextureWithDescriptor:v115];
          uint64_t v117 = [v112 colorAttachments];
          BOOL v118 = [v117 objectAtIndexedSubscript:0];
          [v118 setTexture:v116];

          char v119 = [v112 colorAttachments];
          uint64_t v120 = [v119 objectAtIndexedSubscript:0];
          [v120 setLoadAction:0];

          id v121 = [v112 colorAttachments];
          unsigned int v122 = [v121 objectAtIndexedSubscript:0];
          [v122 setStoreAction:0];

          if ((GT_SUPPORT_0 & 0x40) != 0) {
            [v112 setDefaultRasterSampleCount:1];
          }
          CommandEncoder = GroupBuilder_getCommandEncoder(*(_DWORD *)(*(void *)(v227 + 112) + 12), *(void **)(*(void *)(v227 + 112) + 24), v232);
          uint64_t v124 = [v205 renderCommandEncoderWithDescriptor:v112];
          uint64_t v125 = *(void *)(__n + 24) + (*CommandEncoder << 6);
          [v39 setRenderCommandEncoder:v124 forKey:*(void *)(GTTraceFunc_argumentBytesWithMap(v125, *(unsigned __int8 *)(v125 + 13), *(void *)(v227 + 16))+ 1)];
          __src[1068] = 0;
          __src[1231] = 0;
          *((unsigned char *)__src + 11085) = 0;
          *((_DWORD *)__src + 2769) = 0;
          GTMTLReplayController_restoreDefaultRenderCommandEncoder();
          uint64_t v201 = v124;
          [v124 setRenderPipelineState:v215];

          id v22 = v224;
          int v126 = v221;
        }
        else
        {
          int v126 = v110;
          uint64_t v201 = 0;
          long long v205 = 0;
        }
        id v127 = v23;
        id v128 = [v127 contents];
        int v129 = [v127 length];
        bzero(v128, (size_t)v129);
        id v207 = v128;
        if (v109)
        {
          id v130 = [v22 length];
          char v131 = (char *)[v22 bytes];
          *(_DWORD *)&v167[(void)v128] = v129;
          int v132 = &v166[(void)v128];
          uint64_t v133 = &v166[(void)v128 + v165];
          bzero(v132, 2 * v165);
          if (v130)
          {
            uint64_t v134 = *(void *)v131;
            *((_DWORD *)v132 + 2) = *((_DWORD *)v131 + 2);
            *(void *)int v132 = v134;
            uint64_t v135 = *(void *)(v131 + 12);
            *((_DWORD *)v133 + 2) = *((_DWORD *)v131 + 5);
            *(void *)uint64_t v133 = v135;
          }
          else
          {
            *((_DWORD *)v132 + 2) = 0;
            *(void *)int v132 = 0;
            *(void *)uint64_t v133 = -1;
            *((_DWORD *)v133 + 2) = -1;
          }
          *(_DWORD *)&v188[(void)v207] = 0;
          [v201 setMeshBuffer:v127 offset:0 atIndex:v168];
          if (*(_DWORD *)(v226 + 8) >> 2 == 1073737833)
          {
            uint64_t v197 = *(void *)(a9 + 240);
            unint64_t v136 = [v39 executeIndirectCommandBufferMap];
            DYMTLDrawRenderCommandEncoder(v201, a9 + 40, v197, a9 + 152, v136);

            apr_pool_clear(*(apr_pool_t **)(a9 + 248));
            uint64_t v137 = v230;
          }
          else
          {
            uint64_t v137 = v230;
            GTMTLReplayController_defaultDispatchFunction(v230, v226);
          }
          int v126 = v221;
          GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer(v137, v232);
          [v39 commitCommandBuffers];
          [v205 waitUntilCompleted];
          id v128 = v207;
        }
        unint64_t v138 = *(unsigned int *)&v188[(void)v128];
        unint64_t v139 = v208 + v211 * v138;
        long long v24 = v237;
        id v140 = [v237 maxBufferLength];
        if ((unint64_t)v140 >= v139) {
          unint64_t v141 = v208 + v211 * v138;
        }
        else {
          unint64_t v141 = (unint64_t)v140;
        }
        if (v141 >= 0x20000000) {
          size_t v142 = 0x20000000;
        }
        else {
          size_t v142 = v141;
        }
        if (v142 > (unint64_t)v129
          && v142 < os_proc_available_memory() - 0x10000000
          && (id v143 = [v237 newBufferWithLength:v142 options:0]) != 0)
        {
          id v144 = *(void **)(a10 + 72);
          *(void *)(a10 + 72) = v143;

          memcpy(__dst, __src, sizeof(__dst));
          long long v145 = *(_OWORD *)(a9 + 208);
          v242[12] = *(_OWORD *)(a9 + 192);
          v242[13] = v145;
          long long v146 = *(_OWORD *)(a9 + 240);
          v242[14] = *(_OWORD *)(a9 + 224);
          v242[15] = v146;
          long long v147 = *(_OWORD *)(a9 + 144);
          v242[8] = *(_OWORD *)(a9 + 128);
          v242[9] = v147;
          long long v148 = *(_OWORD *)(a9 + 176);
          v242[10] = *(_OWORD *)(a9 + 160);
          v242[11] = v148;
          long long v149 = *(_OWORD *)(a9 + 80);
          v242[4] = *(_OWORD *)(a9 + 64);
          v242[5] = v149;
          long long v150 = *(_OWORD *)(a9 + 112);
          v242[6] = *(_OWORD *)(a9 + 96);
          v242[7] = v150;
          long long v151 = *(_OWORD *)(a9 + 16);
          v242[0] = *(_OWORD *)a9;
          v242[1] = v151;
          long long v152 = *(_OWORD *)(a9 + 48);
          v242[2] = *(_OWORD *)(a9 + 32);
          v242[3] = v152;
          id v22 = v224;
          GTMTLReplayController_generatePostMeshData(v230, v39, v227, __n, v232, v226, __dst, v222, v242, a10, v224, a12);
          id v44 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v153 = v203;
          unint64_t v154 = v126;
        }
        else
        {
          unint64_t v155 = SaveObjectStruct(v169, v126, v30, 0, 0);
          unint64_t v233 = SaveObjectStruct(v189, v203, v31, 0, 0);
          unint64_t v156 = (v155 + v233 + 380) & 0xFFFFFFFFFFFFFF00;
          BOOL v231 = (unint64_t)v129 < v139;
          if ((unint64_t)v129 < v139) {
            unint64_t v138 = (v129 - v208) / (unint64_t)v211;
          }
          uint64_t v157 = &v185[(void)v207];
          if (v199)
          {
            id v158 = [v215 maxTotalThreadgroupsPerMeshGrid];
            unint64_t v159 = 0xFFFFFFFFLL;
            if ((unint64_t)v158 < 0xFFFFFFFF) {
              unint64_t v159 = (unint64_t)v158;
            }
            if (v159 <= 1) {
              LODWORD(v159) = 1;
            }
            int v160 = v159 - 1;
            *(_DWORD *)uint64_t v157 = v160;
            *((_DWORD *)v157 + 1) = v160;
            *((_DWORD *)v157 + 2) = v160;
          }
          uint64_t v271 = *(void *)v157;
          int v272 = *((_DWORD *)v157 + 2);
          size_t __na = v138 * v211;
          id v44 = [v237 newBufferWithLength:((__na + 255) & 0xFFFFFFFFFFFFFF00) + v156 options:0];
          uint64_t v161 = (char *)[v44 contents];
          *(_DWORD *)uint64_t v161 = 2;
          *((_DWORD *)v161 + 1) = v156;
          *((_DWORD *)v161 + 2) = 125;
          *((_DWORD *)v161 + 3) = v155;
          *((_DWORD *)v161 + 4) = v233;
          *((_DWORD *)v161 + 5) = v209;
          *((_DWORD *)v161 + 6) = v216;
          *((_DWORD *)v161 + 7) = v174;
          *((_DWORD *)v161 + 8) = v175;
          *((_DWORD *)v161 + 9) = v217;
          *((_DWORD *)v161 + 10) = v170;
          *((_DWORD *)v161 + 11) = v189;
          *((_DWORD *)v161 + 12) = v138;
          *((_DWORD *)v161 + 13) = v211;
          *((_DWORD *)v161 + 14) = v187;
          *((_DWORD *)v161 + 15) = v186;
          *((_DWORD *)v161 + 16) = v184;
          *((_DWORD *)v161 + 17) = v183;
          *((_DWORD *)v161 + 18) = v182;
          int v162 = v272;
          *(void *)(v161 + 76) = v271;
          *((_DWORD *)v161 + 21) = v162;
          *((_DWORD *)v161 + 22) = v178;
          *((_DWORD *)v161 + 23) = v173;
          *((_DWORD *)v161 + 24) = v181;
          *((_DWORD *)v161 + 25) = v177;
          *((_DWORD *)v161 + 26) = v176;
          *((_DWORD *)v161 + 27) = v172;
          *((_DWORD *)v161 + 28) = v171;
          *((_DWORD *)v161 + 29) = v180;
          *((_DWORD *)v161 + 30) = v179;
          v161[124] = v231;
          unint64_t v154 = v221;
          SaveObjectStruct(v175, v221, v30, v161 + 125, v155);
          id v163 = &v161[v155 + 125];
          long long v24 = v237;
          uint64_t v153 = v203;
          SaveObjectStruct(v189, v203, v31, v163, v233);
          memcpy(&v161[v156], &v208[(void)v207], __na);
          id v22 = v224;
          id v23 = v236;
        }

        goto LABEL_119;
      }
    }
    GTPostVertexDataError(1u, @"Internal error: Post-vertex data buffer binding error", 0, 0);
    *a12 = (id)objc_claimAutoreleasedReturnValue();

    id v44 = 0;
    long long v24 = v237;
LABEL_120:

    goto LABEL_121;
  }
  uint64_t v75 = v66;
  unint64_t v76 = [v66 domain];
  if (([v76 hasPrefix:@"AGXMetal"] & 1) == 0)
  {

    id v23 = v236;
    goto LABEL_62;
  }
  unint64_t v77 = [v75 localizedDescription];
  unsigned int v78 = [v77 containsString:@"Payload size >"];

  id v23 = v236;
  if (!v78)
  {
LABEL_62:
    uint64_t v79 = @"Post-vertex data fetch pipeline error";
    unsigned int v81 = 2;
    long long v80 = 0;
    unint64_t v82 = v235;
    goto LABEL_63;
  }
  uint64_t v79 = @"Maximum tools-supported payload size exceeded";
  long long v80 = @"Reduce your object data payload to 16368 bytes or less";
  unsigned int v81 = 3;
  unint64_t v82 = 0;
LABEL_63:
  GTPostVertexDataError(v81, v79, v80, v82);
  id v44 = 0;
  long long v29 = v238;
  *a12 = (id)objc_claimAutoreleasedReturnValue();
LABEL_121:

LABEL_122:

  return v44;
}

id GTMTLReplayController_generatePostVertexData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v11 = __chkstk_darwin();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v86 = v18;
  unint64_t v87 = v19;
  uint64_t v85 = v20;
  uint64_t v21 = v11;
  id v23 = v22;
  unint64_t v24 = 63 - __clz(~(*(_DWORD *)(v13 + 128) | *(_DWORD *)(v13 + 120)) & 0x7FFFFFFF);
  id v25 = *(id *)(a10 + 72);
  unint64_t v88 = [v25 device];
  if ((unint64_t)[v88 maxVertexBuffers] <= v24)
  {
    GTPostVertexDataError(1u, @"Internal error: Post-vertex data buffer binding error", 0, 0);
    id v30 = 0;
    *a11 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v82 = v17;
    memcpy(v93, *(const void **)(v13 + 48), 0x5E8uLL);
    for (uint64_t i = 0; i != 16; i += 2)
    {
      unint64_t v27 = &v93[i];
      *((_WORD *)v27 + 372) = 0;
      *((unsigned char *)v27 + 747) = 0;
    }
    uint64_t v81 = v15;
    WORD2(v93[167]) = 0;
    LOWORD(v93[169]) = 0;
    BYTE3(v93[187]) = 0;
    LOWORD(v93[93]) = 70;
    v93[147] = 0;
    memset(&v93[109], 0, 64);
    uint64_t v28 = [*(id *)(v21 + 8) renderPipelineDescriptorMap];
    long long v29 = MakeMTLRenderPipelineDescriptorWithoutResourceIndex((uint64_t)v93, v28);

    [v29 setLabel:@"GPUToolsInternalPostTransformPipelineStateLabel"];
    [v29 setRasterizationEnabled:0];
    if ((GT_SUPPORT_0 & 0x20) != 0)
    {
      [v29 setTessellationPartitionMode:1];
      [v29 setMaxTessellationFactor:1];
      [v29 setTessellationFactorScaleEnabled:1];
    }
    [v29 setPostVertexDumpBufferIndex:v24];
    id v92 = 0;
    id v91 = 0;
    id v30 = [v88 newRenderPipelineStateWithDescriptor:v29 options:0x80000 reflection:&v92 error:&v91];
    id v31 = v92;
    id v32 = v91;
    unint64_t v84 = v30;
    if (v30)
    {
      id v75 = v32;
      unint64_t v76 = v31;
      unint64_t v33 = (unint64_t)[v31 postVertexDumpStride];
      id v77 = v25;
      id v34 = v25;
      id v35 = (unsigned int *)[v34 contents];
      *id v35 = 0;
      id v80 = v34;
      uint64_t v79 = v33;
      char v74 = v35;
      v35[1] = ((unint64_t)[v34 length] - 8) / v33;
      uint64_t v36 = *(void *)(v86 + 24)
          + (*GroupBuilder_getCommandBuffer(*(_DWORD *)(*(void *)(v85 + 112) + 12), *(void **)(*(void *)(v85 + 112) + 24), v87) << 6);
      GTMTLReplayController_defaultDispatchFunction(v21, v36);
      unsigned int v78 = v23;
      unint64_t v83 = [v23 commandBufferForKey:*(void *)GTTraceFunc_argumentBytesWithMap((void *)v36, *(unsigned __int8 *)(v36 + 13), *(void *)(v85 + 16))+ 1];
      id v37 = objc_alloc_init((Class)MTLRenderPassDescriptor);
      [v37 setRenderTargetWidth:*(void *)(v21 + 22464)];
      [v37 setRenderTargetHeight:*(void *)(v21 + 22472)];
      uint64_t v38 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:LOWORD(v93[93]) width:*(void *)(v21 + 22464) height:*(void *)(v21 + 22472) mipmapped:0];
      [v38 setStorageMode:2];
      if ([v88 supportsMemorylessRenderTargets]) {
        [v38 setStorageMode:3];
      }
      id v39 = [v88 newTextureWithDescriptor:v38];
      uint64_t v40 = [v37 colorAttachments];
      uint64_t v41 = [v40 objectAtIndexedSubscript:0];
      [v41 setTexture:v39];

      char v42 = [v37 colorAttachments];
      unint64_t v43 = [v42 objectAtIndexedSubscript:0];
      [v43 setLoadAction:0];

      id v44 = [v37 colorAttachments];
      int64_t v45 = [v44 objectAtIndexedSubscript:0];
      [v45 setStoreAction:0];

      unint64_t v46 = (const void *)v81;
      if ((GT_SUPPORT_0 & 0x40) != 0) {
        [v37 setDefaultRasterSampleCount:1];
      }
      CommandEncoder = GroupBuilder_getCommandEncoder(*(_DWORD *)(*(void *)(v85 + 112) + 12), *(void **)(*(void *)(v85 + 112) + 24), v87);
      id v48 = [v83 renderCommandEncoderWithDescriptor:v37];
      uint64_t v49 = *(void *)(v86 + 24) + (*CommandEncoder << 6);
      id v23 = v78;
      [v78 setRenderCommandEncoder:v48 forKey:*((void *)GTTraceFunc_argumentBytesWithMap((void *)v49, *(unsigned __int8 *)(v49 + 13), *(void *)(v85 + 16))+ 1)];
      *(void *)(v81 + 8544) = 0;
      *(void *)(v81 + 9848) = 0;
      *(unsigned char *)(v81 + 11085) = 0;
      *(_DWORD *)(v81 + 11076) = 0;
      GTMTLReplayController_restoreDefaultRenderCommandEncoder();

      if ((GT_SUPPORT_0 & 0x20) != 0)
      {
        LODWORD(v50) = 925353388;
        [v48 setTessellationFactorScale:v50];
      }
      [v48 setRenderPipelineState:v84];
      [v48 setVertexBuffer:v80 offset:0 atIndex:v24];
      uint64_t v51 = v82;
      if (*(_DWORD *)(v82 + 8) >> 2 == 1073737833)
      {
        uint64_t v52 = *(void *)(a9 + 240);
        uint64_t v53 = [v78 executeIndirectCommandBufferMap];
        uint64_t v51 = v82;
        DYMTLDrawRenderCommandEncoder(v48, a9 + 40, v52, a9 + 152, v53);

        unint64_t v46 = (const void *)v81;
        apr_pool_clear(*(apr_pool_t **)(a9 + 248));
      }
      else
      {
        GTMTLReplayController_defaultDispatchFunction(v21, v82);
      }
      GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer(v21, v87);
      [v78 commitCommandBuffers];
      [v83 waitUntilCompleted];
      uint64_t v55 = *v74;
      if (v55 <= v74[1] || (unint64_t v56 = v79 * v55 + 8, v56 >= os_proc_available_memory() - 0x10000000))
      {
        id v31 = v76;
        id v67 = [v76 postVertexDumpOutputs];
        unint64_t v68 = (SaveObject(v79, v67, 0, 0) + 259) & 0xFFFFFFFFFFFFFF00;
        LODWORD(v69) = *v74;
        unsigned int v70 = v74[1];
        if (*v74 >= v70) {
          uint64_t v69 = v70;
        }
        else {
          uint64_t v69 = v69;
        }
        size_t v71 = (v79 * v69 + 263) & 0xFFFFFFFFFFFFFF00;
        id v30 = [v88 newBufferWithLength:v71 + v68 options:0];
        long long v72 = (char *)[v30 contents];
        *(_DWORD *)long long v72 = v68;
        SaveObject(v79, v67, v72 + 4, v68 - 4);
        memcpy(&v72[v68], [v80 contents], v71);

        id v25 = v77;
      }
      else
      {
        id v57 = [v88 newBufferWithLength:v56 options:0];
        uint64_t v58 = *(void **)(a10 + 72);
        *(void *)(a10 + 72) = v57;

        memcpy(__dst, v46, sizeof(__dst));
        long long v59 = *(_OWORD *)(a9 + 208);
        v89[12] = *(_OWORD *)(a9 + 192);
        v89[13] = v59;
        long long v60 = *(_OWORD *)(a9 + 240);
        v89[14] = *(_OWORD *)(a9 + 224);
        v89[15] = v60;
        long long v61 = *(_OWORD *)(a9 + 144);
        v89[8] = *(_OWORD *)(a9 + 128);
        v89[9] = v61;
        long long v62 = *(_OWORD *)(a9 + 176);
        v89[10] = *(_OWORD *)(a9 + 160);
        v89[11] = v62;
        long long v63 = *(_OWORD *)(a9 + 80);
        v89[4] = *(_OWORD *)(a9 + 64);
        v89[5] = v63;
        long long v64 = *(_OWORD *)(a9 + 112);
        v89[6] = *(_OWORD *)(a9 + 96);
        v89[7] = v64;
        long long v65 = *(_OWORD *)(a9 + 16);
        v89[0] = *(_OWORD *)a9;
        v89[1] = v65;
        long long v66 = *(_OWORD *)(a9 + 48);
        v89[2] = *(_OWORD *)(a9 + 32);
        v89[3] = v66;
        GTMTLReplayController_generatePostVertexData(v21, v78, v85, v86, v87, v51, __dst, v13, v89, a10, a11);
        id v30 = (id)objc_claimAutoreleasedReturnValue();
        id v31 = v76;
        id v25 = v77;
      }

      uint64_t v54 = v75;
    }
    else
    {
      uint64_t v54 = v32;
      GTPostVertexDataError(2u, @"Post-vertex data fetch pipeline error", 0, v32);
      *a11 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  return v30;
}

id GTPostVertexDataError(unsigned int a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  id v10 = [objc_alloc((Class)NSMutableDictionary) initWithObjectsAndKeys:v9, NSLocalizedDescriptionKey, 0];

  if (v7) {
    [v10 setObject:v7 forKeyedSubscript:NSLocalizedRecoverySuggestionErrorKey];
  }
  if (v8) {
    [v10 setObject:v8 forKeyedSubscript:NSUnderlyingErrorKey];
  }
  uint64_t v11 = +[NSError errorWithDomain:@"GTPostVertexDumpErrorDomain" code:a1 userInfo:v10];

  return v11;
}

uint64_t SaveObject(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  id v7 = a2;
  id v8 = v7;
  unint64_t v27 = a3;
  unint64_t v29 = a4;
  if (a4 >= 8 && (*a3 = 81, a4 > 0xF))
  {
    a3[1] = a1;
    id v22 = [v7 count];
    if (a4 >= 0x18) {
      a3[2] = v22;
    }
  }
  else
  {
    [v7 count];
  }
  uint64_t v9 = 24;
  uint64_t v28 = 24;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v10 = v8;
  id v11 = [v10 countByEnumeratingWithState:&v23 objects:v30 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        [v15 airMDType:v23];
        id v16 = objc_claimAutoreleasedReturnValue();
        WriteDynamicBufferString(&v27, (const char *)[v16 UTF8String]);

        id v17 = [v15 dataType];
        uint64_t v18 = v28 + 8;
        if (v28 + 8 <= v29) {
          *(void *)((char *)v27 + v28) = v17;
        }
        uint64_t v28 = v18;
        id v19 = [v15 name];
        WriteDynamicBufferString(&v27, (const char *)[v19 UTF8String]);

        id v20 = [v15 offset];
        uint64_t v9 = v28 + 8;
        if (v28 + 8 <= v29) {
          *(void *)((char *)v27 + v28) = v20;
        }
        uint64_t v28 = v9;
      }
      id v12 = [v10 countByEnumeratingWithState:&v23 objects:v30 count:16];
    }
    while (v12);
  }

  return v9;
}

void WriteDynamicBufferString(void *a1, const char *a2)
{
  if (a2) {
    id v3 = a2;
  }
  else {
    id v3 = "";
  }
  size_t v4 = strlen(v3);
  size_t v5 = v4 + 1;
  uint64_t v7 = a1[1];
  size_t v6 = a1[2];
  size_t v8 = v7 + v4 + 1;
  if (v8 <= v6)
  {
    memcpy((void *)(*a1 + v7), v3, v5);
    size_t v6 = a1[2];
    size_t v8 = a1[1] + v5;
  }
  a1[1] = v8;
  unint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + ~v4 + 8;
  BOOL v10 = v6 > v8;
  size_t v11 = v6 - v8;
  if (v10)
  {
    if (v11 >= v9) {
      size_t v12 = v9;
    }
    else {
      size_t v12 = v11;
    }
    bzero((void *)(*a1 + v8), v12);
    size_t v8 = a1[1];
  }
  a1[1] = v8 + v9;
}

uint64_t SaveObjectStruct(uint64_t a1, void *a2, void *a3, void *a4, unint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  int64_t v45 = a4;
  unint64_t v47 = a5;
  if (a5 >= 8)
  {
    *a4 = 81;
    if (a5 >= 0x10) {
      a4[1] = a1;
    }
  }
  size_t v11 = [v9 members];
  id v12 = [v11 count];
  if (a5 >= 0x18) {
    a4[2] = v12;
  }
  uint64_t v13 = 24;
  uint64_t v46 = 24;

  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  obuint64_t j = [v9 members];
  id v39 = [obj countByEnumeratingWithState:&v41 objects:v48 count:16];
  if (v39)
  {
    id v35 = v9;
    id v36 = v10;
    uint64_t v38 = *(void *)v42;
    uint64_t v14 = obj;
    while (1)
    {
      for (uint64_t i = 0; i != v39; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v42 != v38) {
          objc_enumerationMutation(v14);
        }
        id v16 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        id v17 = [v16 name];
        uint64_t v18 = [v17 componentsSeparatedByString:@"/"];
        id v19 = [v18 objectAtIndexedSubscript:0];
        id v20 = &stru_7482F0;
        if ((unint64_t)[v18 count] >= 2)
        {
          id v20 = [v18 objectAtIndexedSubscript:1];
        }
        uint64_t v40 = v17;
        if ([(__CFString *)v20 length]
          || [v19 isEqualToString:@"air.position"])
        {
          uint64_t v21 = [v10 objectForKeyedSubscript:v20];
          if ([v16 dataType] != (char *)&def_1C1270 + 2)
          {
            if (v21)
            {
              id v24 = [v21 unsignedIntegerValue];
            }
            else
            {
LABEL_33:
              id v24 = [v16 dataType];
              uint64_t v21 = 0;
            }
LABEL_34:
            WriteDynamicBufferString(&v45, (const char *)[v19 UTF8String]);
            uint64_t v31 = v46 + 8;
            if (v46 + 8 <= v47) {
              *(void *)((char *)v45 + v46) = v24;
            }
            uint64_t v46 = v31;
            WriteDynamicBufferString(&v45, (const char *)[(__CFString *)v20 UTF8String]);
            id v32 = [v16 offset];
            uint64_t v33 = v46 + 8;
            if (v46 + 8 <= v47) {
              *(void *)((char *)v45 + v46) = v32;
            }
            long long v23 = 0;
            uint64_t v46 = v33;
            goto LABEL_39;
          }
        }
        else
        {
          if ([v16 dataType] != (char *)&def_1C1270 + 2) {
            goto LABEL_33;
          }
          uint64_t v21 = 0;
        }
        id v22 = [v16 arrayType];
        long long v23 = v22;
        if (v21)
        {
          id v24 = [v21 unsignedIntegerValue];
          if (!v23) {
            goto LABEL_34;
          }
        }
        else
        {
          if (!v22) {
            goto LABEL_33;
          }
          id v24 = [v22 elementType];
        }
        if ([v23 arrayLength])
        {
          unint64_t v25 = 0;
          do
          {
            WriteDynamicBufferString(&v45, (const char *)[v19 UTF8String]);
            uint64_t v26 = v46 + 8;
            if (v46 + 8 <= v47) {
              *(void *)((char *)v45 + v46) = v24;
            }
            uint64_t v46 = v26;
            id v27 = [(__CFString *)v20 stringByAppendingFormat:@"[%lu]", v25];
            WriteDynamicBufferString(&v45, (const char *)[v27 UTF8String]);

            uint64_t v28 = (char *)[v16 offset];
            id v29 = [v23 stride];
            uint64_t v30 = v46 + 8;
            if (v46 + 8 <= v47) {
              *(void *)((char *)v45 + v46) = &v28[(void)v29 * v25];
            }
            uint64_t v46 = v30;
            ++v25;
          }
          while (v25 < (unint64_t)[v23 arrayLength]);
          id v10 = v36;
          uint64_t v14 = obj;
        }
LABEL_39:
      }
      id v39 = [v14 countByEnumeratingWithState:&v41 objects:v48 count:16];
      if (!v39)
      {
        uint64_t v13 = v46;
        id v9 = v35;
        break;
      }
    }
  }

  return v13;
}

void sub_2C7504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2C7744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2C780C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2C7998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2C7CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  if (v24 > v23) {
  _Unwind_Resume(a1);
  }
}

void sub_2C7FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_2C8160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2C823C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getRenderPipelineBinaries(void *a1)
{
  id v1 = DEVICEOBJECT(a1);
  if (dword_77313C & 0x200) != 0 && (objc_opt_respondsToSelector())
  {
    unint64_t v2 = [v1 pipelineBinaries];
  }
  else
  {
    unint64_t v2 = &__NSDictionary0__struct;
  }

  return v2;
}

void sub_2C82C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getComputePipelineBinaries(void *a1)
{
  id v1 = DEVICEOBJECT(a1);
  if (dword_77313C & 0x200) != 0 && (objc_opt_respondsToSelector())
  {
    unint64_t v2 = [v1 pipelineBinaries];
  }
  else
  {
    unint64_t v2 = &__NSDictionary0__struct;
  }

  return v2;
}

void sub_2C8358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GTMTLReplayController_dispatchForUSCSampling(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v21 = a3;
  id v11 = a5;
  if ((dword_77313C & 0x200) == 0) {
    goto LABEL_2;
  }
  int v12 = *(_DWORD *)(a2 + 8);
  if (v12 <= -16286)
  {
    if (v12 == -16337)
    {
      id v19 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a4);
      uint64_t v14 = [v21 computeCommandEncoderForKey:*(void *)v19];
      uint64_t v15 = [v21 computePipelineStateForKey:*((void *)v19 + 1)];
      GTMTLReplayController_defaultDispatchFunction(a1, a2);
      id v20 = getComputePipelineBinaries(v15);
      [v11 addBinaries:v20];

      goto LABEL_14;
    }
    if (v12 == -16325)
    {
      id v16 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a4);
      uint64_t v14 = [v21 computeCommandEncoderForKey:*(void *)v16];
      uint64_t v15 = [v14 endEncodingAndRetrieveProgramAddressTable];
      [v11 addProgramAddressTable:v15 forEncoder:[v21 globalTraceIdForEncoder:ofType:0]];
      [v21 removeComputeCommandEncoderForKey:*(void *)v16];
      goto LABEL_14;
    }
LABEL_2:
    GTMTLReplayController_defaultDispatchFunction(a1, a2);
    goto LABEL_16;
  }
  if (v12 == -16285)
  {
    id v17 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a4);
    uint64_t v14 = [v21 parallelRenderCommandEncoderForKey:*(void *)v17];
    uint64_t v15 = [v14 endEncodingAndRetrieveProgramAddressTable];
    [v11 addProgramAddressTable:v15 forEncoder:[v21 globalTraceIdForEncoder:ofType:1]];
    [v21 removeRenderCommandEncoderForKey:*(void *)v17];
    goto LABEL_14;
  }
  if (v12 != -16279)
  {
    if (v12 == -16246)
    {
      uint64_t v13 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a4);
      uint64_t v14 = [v21 renderCommandEncoderForKey:*(void *)v13];
      uint64_t v15 = [v14 endEncodingAndRetrieveProgramAddressTable];
      [v11 addProgramAddressTable:v15 forEncoder:[v21 globalTraceIdForEncoder:ofType:v13] atEncoderIndex:a6];
      [v21 removeRenderCommandEncoderForKey:*(void *)v13];
LABEL_14:

      goto LABEL_15;
    }
    goto LABEL_2;
  }
  uint64_t v14 = [v21 renderPipelineStateForKey:*((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a4) + 1)];
  uint64_t v18 = getRenderPipelineBinaries(v14);
  [v11 addBinaries:v18];

  GTMTLReplayController_defaultDispatchFunction(a1, a2);
LABEL_15:

LABEL_16:
}

void sub_2C864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ProcessMessage(uint64_t a1, void *a2, void *a3)
{
  id v233 = a2;
  id v5 = a3;
  unsigned int v6 = [v5 serial];
  os_signpost_id_t v7 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, v5);
  int v8 = [v5 kind];
  if (v8 <= 1793)
  {
    if (v8 > 1536)
    {
      switch(v8)
      {
        case 1537:
          id v45 = v233;
          uint64_t v46 = +[GTTransportMessage_replayer messageWithKind:4096 attributes:&off_759378];
          [v45 send:v46 error:0];
LABEL_44:

LABEL_45:
          break;
        case 1540:
          unint64_t v47 = g_signpostLog;
          id v48 = v47;
          if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v47))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v6;
            _os_signpost_emit_with_name_impl(&def_1C1270, v48, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageGuestAppInvalidateSavePointerAliases", buf, 8u);
          }

          uint64_t v49 = +[GTTransportMessage_replayer messageWithKind:](GTTransportMessage_replayer, "messageWithKind:", [v5 kind]);
          [v233 send:v49 inReplyTo:v5 error:0];

          break;
        case 1793:
          id v27 = g_signpostLog;
          uint64_t v28 = v27;
          if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v27))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v6;
            _os_signpost_emit_with_name_impl(&def_1C1270, v28, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageTraceConfiguration", buf, 8u);
          }

          id v29 = [v5 uint32ForKey:@"trace mode"];
          *(_DWORD *)(a1 + 56) = v29;
          SetTraceMode(v233, (uint64_t)v29);
          *(void *)(a1 + 24) = [v5 uint64ForKey:@"trace host type"];
          *(void *)(a1 + 32) = [v5 uint64ForKey:@"profiling send period"];
          *(void *)(a1 + 40) = [v5 uint64ForKey:@"profiling flags"];
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case 1026:
          id v35 = [v5 attributes];
          id v36 = [v35 objectForKeyedSubscript:@"object"];
          id v37 = [v36 unsignedLongLongValue];

          uint64_t v38 = g_signpostLog;
          id v39 = v38;
          if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v38))
          {
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v6;
            LOWORD(v349) = 2048;
            *(void *)((char *)&v349 + 2) = v37;
            _os_signpost_emit_with_name_impl(&def_1C1270, v39, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageFetchResourceObject %{xcode:address}llu", buf, 0x12u);
          }

          uint64_t v40 = [v5 attributes];
          v309[0] = _NSConcreteStackBlock;
          v309[1] = 3221225472;
          v309[2] = __ProcessMessage_block_invoke_76;
          v309[3] = &unk_745F90;
          uint64_t v312 = a1;
          id v310 = v233;
          id v311 = v5;
          os_signpost_id_t v313 = v7;
          unsigned int v314 = v6;
          FetchResourceObject((id *)a1, v40, v309);

          break;
        case 1028:
          long long v41 = g_signpostLog;
          long long v42 = v41;
          if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v41))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v6;
            _os_signpost_emit_with_name_impl(&def_1C1270, v42, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageUpdateResourceObject", buf, 8u);
          }

          v242[0] = _NSConcreteStackBlock;
          v242[1] = 3221225472;
          v242[2] = __ProcessMessage_block_invoke_266;
          v242[3] = &unk_745ED0;
          uint64_t v43 = *(void *)(a1 + 64);
          id v243 = v5;
          os_signpost_id_t v245 = v7;
          uint64_t v246 = a1;
          unsigned int v247 = v6;
          id v244 = v233;
          uint64_t v248 = v43;
          long long v44 = +[NSBlockOperation blockOperationWithBlock:v242];
          [*(id *)(a1 + 256) addOperation:v44];

          break;
        case 1030:
          uint64_t v18 = g_signpostLog;
          id v19 = v18;
          if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v18))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v6;
            _os_signpost_emit_with_name_impl(&def_1C1270, v19, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYGenerateShaderDebuggerTrace", buf, 8u);
          }

          id v20 = *(void **)(a1 + 256);
          v254[0] = _NSConcreteStackBlock;
          v254[1] = 3221225472;
          v254[2] = __ProcessMessage_block_invoke_251;
          v254[3] = &unk_745FE0;
          id v255 = v5;
          os_signpost_id_t v257 = v7;
          uint64_t v258 = a1;
          unsigned int v259 = v6;
          id v256 = v233;
          [v20 addOperationWithBlock:v254];

          break;
      }
    }
  }
  else
  {
    switch(v8)
    {
      case 4098:
        id v9 = g_signpostLog;
        id v10 = v9;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v9))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v10, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Replayer-1-serial", "%u. kDYMessageReplayerReplayArchive", buf, 8u);
        }

        id v11 = [v5 stringPayload];
        int v12 = [v5 attributes];
        uint64_t v13 = [v12 objectForKeyedSubscript:@"archivedExperiments"];
        uint64_t v14 = [v12 objectForKeyedSubscript:@"queryAvailableCounters"];
        uint64_t v15 = [v12 objectForKeyedSubscript:@"profileCounters"];
        id v16 = g_signpostLog;
        id v17 = v16;
        if (v7 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v16))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&def_1C1270, v17, OS_SIGNPOST_INTERVAL_END, v7, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
        }

        break;
      case 4099:
      case 4100:
      case 4101:
      case 4105:
      case 4110:
      case 4111:
      case 4112:
      case 4113:
      case 4115:
      case 4116:
      case 4123:
      case 4124:
      case 4126:
      case 4127:
      case 4128:
        break;
      case 4102:
        double v50 = g_signpostLog;
        uint64_t v51 = v50;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v50))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v51, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerDeleteAllArchives", buf, 8u);
        }

        uint64_t v52 = *(void **)(a1 + 256);
        v322[0] = _NSConcreteStackBlock;
        v322[1] = 3221225472;
        v322[2] = __ProcessMessage_block_invoke_63;
        v322[3] = &unk_745EF8;
        id v323 = v5;
        os_signpost_id_t v325 = v7;
        unsigned int v326 = v6;
        id v324 = v233;
        [v52 addBarrierBlock:v322];

        break;
      case 4103:
        uint64_t v53 = [v5 stringPayload];
        uint64_t v54 = g_signpostLog;
        uint64_t v55 = v54;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v54))
        {
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v6;
          LOWORD(v349) = 2082;
          *(void *)((char *)&v349 + 2) = [v53 UTF8String];
          _os_signpost_emit_with_name_impl(&def_1C1270, v55, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerBeginDebugArchive %{public}s", buf, 0x12u);
        }

        dispatch_semaphore_t v56 = dispatch_semaphore_create(0);
        id v57 = *(void **)(a1 + 256);
        v316[0] = _NSConcreteStackBlock;
        v316[1] = 3221225472;
        v316[2] = __ProcessMessage_block_invoke_64;
        v316[3] = &unk_745F48;
        uint64_t v321 = a1;
        id v317 = v5;
        id v318 = v53;
        id v319 = v233;
        dispatch_semaphore_t v320 = v56;
        uint64_t v58 = v56;
        id v59 = v53;
        [v57 addBarrierBlock:v316];
        dispatch_semaphore_wait(v58, 0xFFFFFFFFFFFFFFFFLL);

        break;
      case 4104:
        long long v60 = g_signpostLog;
        long long v61 = v60;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v60))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v61, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerEndDebugArchive", buf, 8u);
        }

        break;
      case 4106:
        long long v62 = [v5 objectPayload];
        id v63 = [v62 unsignedLongLongValue];

        long long v64 = g_signpostLog;
        long long v65 = v64;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v64))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v6;
          LOWORD(v349) = 1024;
          *(_DWORD *)((char *)&v349 + 2) = v63;
          _os_signpost_emit_with_name_impl(&def_1C1270, v65, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerDebugFuncStop %u", buf, 0xEu);
        }

        long long v66 = +[GTTransportMessage_replayer messageWithKind:4105 objectPayload:&__kCFBooleanTrue];
        [v233 send:v66 inReplyTo:v5 error:0];

        if (*(id *)(a1 + 64) != v63)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = __ProcessMessage_block_invoke_72;
          block[3] = &__block_descriptor_40_e5_v8__0l;
          block[4] = a1;
          dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
          *(void *)(a1 + 64) = v63;
          DisplayAttachmentIfNeeded(a1, (int)v63, SHIDWORD(v63));
        }
        break;
      case 4107:
        id v67 = [v5 objectPayload];
        if ([v67 BOOLValue]) {
          int v68 = 2;
        }
        else {
          int v68 = 0;
        }
        *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFFFFFFFD | v68;

        uint64_t v69 = g_signpostLog;
        unsigned int v70 = v69;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v69))
        {
          int v71 = (*(_DWORD *)(a1 + 84) >> 1) & 1;
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v6;
          LOWORD(v349) = 1024;
          *(_DWORD *)((char *)&v349 + 2) = v71;
          _os_signpost_emit_with_name_impl(&def_1C1270, v70, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerDebugEnableWireframePresent %d", buf, 0xEu);
        }
        goto LABEL_113;
      case 4108:
        long long v72 = [v5 objectPayload];
        *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFFFFFFFE | [v72 BOOLValue];

        id v73 = g_signpostLog;
        unsigned int v70 = v73;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v73))
        {
          int v74 = *(_DWORD *)(a1 + 84) & 1;
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v6;
          LOWORD(v349) = 1024;
          *(_DWORD *)((char *)&v349 + 2) = v74;
          _os_signpost_emit_with_name_impl(&def_1C1270, v70, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerDebugEnableDrawCallPresent %d", buf, 0xEu);
        }
        goto LABEL_113;
      case 4109:
        id v75 = [v5 objectPayload];
        [v75 floatValue];
        *(_DWORD *)(a1 + 80) = v76;

        id v77 = g_signpostLog;
        unsigned int v78 = v77;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v77))
        {
          double v79 = *(float *)(a1 + 80);
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v6;
          LOWORD(v349) = 2048;
          *(double *)((char *)&v349 + 2) = v79;
          _os_signpost_emit_with_name_impl(&def_1C1270, v78, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerDebugWireframeLineWidth %f", buf, 0x12u);
        }

        id v80 = +[GTTransportMessage_replayer messageWithKind:4105 objectPayload:&__kCFBooleanTrue];
        [v233 send:v80 inReplyTo:v5 error:0];

        break;
      case 4114:
        uint64_t v81 = [v5 plistPayload];
        uint64_t v82 = [v81 objectAtIndexedSubscript:0];
        unint64_t v83 = g_signpostLog;
        unint64_t v84 = v83;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v83))
        {
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v6;
          LOWORD(v349) = 2082;
          *(void *)((char *)&v349 + 2) = [v82 UTF8String];
          _os_signpost_emit_with_name_impl(&def_1C1270, v84, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Replayer-1-serial", "%u. kDYMessageReplayerLoadArchives %{public}s", buf, 0x12u);
        }

        dispatch_semaphore_t v85 = dispatch_semaphore_create(0);
        uint64_t v86 = *(void **)(a1 + 256);
        v249[0] = _NSConcreteStackBlock;
        v249[1] = 3221225472;
        v249[2] = __ProcessMessage_block_invoke_252;
        v249[3] = &unk_746988;
        id v87 = v5;
        id v250 = v87;
        id v88 = v82;
        id v251 = v88;
        uint64_t v253 = a1;
        uint64_t v89 = v85;
        long long v252 = v89;
        [v86 addBarrierBlock:v249];
        dispatch_semaphore_wait(v89, 0xFFFFFFFFFFFFFFFFLL);
        BOOL v90 = *(void *)(a1 + 8) != 0;
        id v91 = [v87 kind];
        id v92 = +[NSNumber numberWithBool:v90];
        int64_t v93 = +[GTTransportMessage_replayer messageWithKind:v91 objectPayload:v92];
        [v233 send:v93 inReplyTo:v87 error:0];

        long long v94 = g_signpostLog;
        uint64_t v95 = v94;
        if (v7 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v94))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&def_1C1270, v95, OS_SIGNPOST_INTERVAL_END, v7, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
        }

        break;
      case 4117:
        int v96 = g_signpostLog;
        uint64_t v97 = v96;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v96))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v97, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerQueryShaderInfo", buf, 8u);
        }

        v269[0] = _NSConcreteStackBlock;
        v269[1] = 3221225472;
        v269[2] = __ProcessMessage_block_invoke_188;
        v269[3] = &unk_745FE0;
        uint64_t v272 = a1;
        os_signpost_id_t v273 = v7;
        unsigned int v274 = v6;
        id v270 = v233;
        id v271 = v5;
        unsigned int v98 = +[NSBlockOperation blockOperationWithBlock:v269];
        [*(id *)(a1 + 264) addOperation:v98];

        break;
      case 4118:
        long long v99 = g_signpostLog;
        long long v100 = v99;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v99))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v100, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerDerivedCounterData", buf, 8u);
        }

        uint64_t v101 = [v5 objectPayload];
        long long v102 = [v101 objectForKeyedSubscript:@"profileCounters"];
        if (v102)
        {
          BOOL v103 = *(void **)(a1 + 264);
          long long v104 = v260;
          v260[0] = _NSConcreteStackBlock;
          v260[1] = 3221225472;
          v260[2] = __ProcessMessage_block_invoke_243;
          v260[3] = &unk_7460A8;
          uint64_t v262 = a1;
          v260[4] = v5;
          v260[5] = v101;
          id v261 = v233;
          os_signpost_id_t v263 = v7;
          unsigned int v264 = v6;
          [v103 addOperationWithBlock:v260];

          goto LABEL_195;
        }
        id v212 = [v101 objectForKeyedSubscript:@"pause"];
        if (v212)
        {

LABEL_194:
          uint64_t v220 = *(void **)(a1 + 264);
          long long v104 = v267;
          v267[0] = _NSConcreteStackBlock;
          v267[1] = 3221225472;
          v267[2] = __ProcessMessage_block_invoke_238;
          v267[3] = &unk_746080;
          v267[4] = v101;
          v267[5] = v233;
          id v268 = v5;
          [v220 addOperationWithBlock:v267];

          goto LABEL_195;
        }
        int v218 = [v101 objectForKeyedSubscript:@"resume"];
        BOOL v219 = v218 == 0;

        if (!v219) {
          goto LABEL_194;
        }
        uint64_t v221 = *(void **)(a1 + 264);
        long long v104 = v265;
        v265[0] = _NSConcreteStackBlock;
        v265[1] = 3221225472;
        v265[2] = __ProcessMessage_block_invoke_2_242;
        v265[3] = &unk_745FE0;
        unsigned int v266 = v6;
        v265[6] = v7;
        v265[7] = a1;
        v265[4] = v233;
        v265[5] = v5;
        [v221 addOperationWithBlock:v265];
LABEL_195:

        break;
      case 4119:
        long long v105 = g_signpostLog;
        uint64_t v106 = v105;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v105))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v106, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerGenerateThumbnails", buf, 8u);
        }

        v294[0] = _NSConcreteStackBlock;
        v294[1] = 3221225472;
        v294[2] = __ProcessMessage_block_invoke_107;
        v294[3] = &unk_745FE0;
        id v295 = v5;
        os_signpost_id_t v297 = v7;
        unsigned int v299 = v6;
        uint64_t v298 = a1;
        id v296 = v233;
        int v107 = +[NSBlockOperation blockOperationWithBlock:v294];
        [v107 setQueuePriority:4];
        [*(id *)(a1 + 256) addOperation:v107];

        break;
      case 4120:
        BOOL v108 = g_signpostLog;
        int v109 = v108;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v108))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v109, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerGenerateDependencyGraphThumbnails", buf, 8u);
        }

        v288[0] = _NSConcreteStackBlock;
        v288[1] = 3221225472;
        v288[2] = __ProcessMessage_block_invoke_108;
        v288[3] = &unk_745FE0;
        id v289 = v5;
        os_signpost_id_t v291 = v7;
        unsigned int v293 = v6;
        uint64_t v292 = a1;
        id v290 = v233;
        uint64_t v110 = +[NSBlockOperation blockOperationWithBlock:v288];
        [v110 setQueuePriority:4];
        [*(id *)(a1 + 256) addOperation:v110];

        break;
      case 4121:
        uint64_t v111 = [v5 attributes];
        id v112 = [v111 objectForKeyedSubscript:@"stream"];

        uint64_t v113 = [v5 attributes];
        long long v114 = [v113 objectForKeyedSubscript:@"compressed"];

        v306[0] = _NSConcreteStackBlock;
        v306[1] = 3221225472;
        v306[2] = __ProcessMessage_block_invoke_104;
        v306[3] = &unk_745FB8;
        id v307 = v233;
        id v308 = v5;
        FetchResourceObjectBatch(a1, v112, v114, v306);

        break;
      case 4122:
        BOOL v115 = [v5 objectPayload];
        if ([v115 BOOLValue]) {
          int v116 = 4;
        }
        else {
          int v116 = 0;
        }
        *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFFFFFFFB | v116;

        uint64_t v117 = g_signpostLog;
        unsigned int v70 = v117;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v117))
        {
          int v118 = (*(_DWORD *)(a1 + 84) >> 2) & 1;
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v6;
          LOWORD(v349) = 1024;
          *(_DWORD *)((char *)&v349 + 2) = v118;
          _os_signpost_emit_with_name_impl(&def_1C1270, v70, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerDebugEnableOutlinePresent %d", buf, 0xEu);
        }
LABEL_113:

        DisplayAttachmentIfNeeded(a1, *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68));
        char v119 = +[GTTransportMessage_replayer messageWithKind:4105 objectPayload:&__kCFBooleanTrue];
        [v233 send:v119 inReplyTo:v5 error:0];

        break;
      case 4125:
        uint64_t v120 = g_signpostLog;
        id v121 = v120;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v120))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v121, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kGTMessageQueryInducedGPUPerfState", buf, 8u);
        }

        unsigned int v122 = *(void **)(a1 + 256);
        v282[0] = _NSConcreteStackBlock;
        v282[1] = 3221225472;
        v282[2] = __ProcessMessage_block_invoke_109;
        v282[3] = &unk_745FE0;
        id v283 = v5;
        os_signpost_id_t v285 = v7;
        unsigned int v287 = v6;
        uint64_t v286 = a1;
        id v284 = v233;
        [v122 addOperationWithBlock:v282];

        break;
      case 4129:
        long long v123 = g_signpostLog;
        uint64_t v124 = v123;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v123))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v124, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kGTMessageReplayerResourcesUsedForFunctionIndex", buf, 8u);
        }

        uint64_t v125 = *(void **)(a1 + 256);
        v300[0] = _NSConcreteStackBlock;
        v300[1] = 3221225472;
        v300[2] = __ProcessMessage_block_invoke_106;
        v300[3] = &unk_745FE0;
        id v301 = v5;
        os_signpost_id_t v303 = v7;
        unsigned int v305 = v6;
        uint64_t v304 = a1;
        id v302 = v233;
        [v125 addOperationWithBlock:v300];

        break;
      case 4130:
        int v126 = g_signpostLog;
        id v127 = v126;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v126))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_signpost_emit_with_name_impl(&def_1C1270, v127, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kGTMessageReplayerQueryAPSData", buf, 8u);
        }

        id v128 = [*(id *)(*(void *)(a1 + 8) + 8) defaultDevice];
        int v129 = DEVICEOBJECT(v128);
        io_registry_entry_t v130 = [v129 acceleratorPort];

        LODWORD(v351) = 0x7FFFFFFF;
        uint64_t v228 = GetMetalPluginName(v130, &v351);
        unsigned int v132 = IsAGXMetalPlugin(v228, v131);
        if ((int)v351 > 4) {
          unsigned int v133 = v132;
        }
        else {
          unsigned int v133 = 0;
        }
        if (v133 == 1)
        {
          uint64_t v225 = GTMTLReplayHost_generateDerivedDataPayload(**(void **)(a1 + 8), 1);
          uint64_t v226 = +[NSMutableDictionary dictionaryWithDictionary:v225];
          uint64_t v230 = [v5 objectPayload];
          id v223 = [v5 attributes];
          if (v230)
          {
            uint64_t v134 = [v230 objectForKeyedSubscript:@"UseMTLCounters"];
            BOOL v135 = v134 == 0;

            if (!v135) {
              [v226 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseMTLCounters"];
            }
            unint64_t v136 = [v230 objectForKeyedSubscript:@"UseKicktimestamps"];
            BOOL v137 = v136 == 0;

            if (!v137) {
              [v226 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseKicktimestamps"];
            }
            unint64_t v138 = [v230 objectForKeyedSubscript:@"CoalesceComputeEncoders"];
            BOOL v139 = v138 == 0;

            if (!v139) {
              [v226 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceComputeEncoders"];
            }
            id v140 = [v230 objectForKeyedSubscript:@"CoalesceBlitEncoders"];
            BOOL v141 = v140 == 0;

            if (!v141) {
              [v226 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceBlitEncoders"];
            }
            size_t v142 = [v230 objectForKeyedSubscript:@"GPUState"];
            if (v142) {
              [v226 setObject:v142 forKeyedSubscript:@"GPUState"];
            }
            id v143 = [v230 objectForKeyedSubscript:@"ProfilingConfig"];
            BOOL v144 = v143 == 0;

            if (!v144)
            {
              long long v145 = [v230 objectForKeyedSubscript:@"ProfilingConfig"];
              [v226 setObject:v145 forKeyedSubscript:@"ProfilingConfig"];
            }
            long long v146 = [v230 objectForKeyedSubscript:@"CounterConfig"];
            BOOL v147 = v146 == 0;

            if (!v147)
            {
              long long v148 = [v230 objectForKeyedSubscript:@"CounterConfig"];
              [v226 setObject:v148 forKeyedSubscript:@"CounterConfig"];
            }
            long long v149 = [v230 objectForKeyedSubscript:@"TimelineConfig"];
            BOOL v150 = v149 == 0;

            if (!v150)
            {
              long long v151 = [v230 objectForKeyedSubscript:@"TimelineConfig"];
              [v226 setObject:v151 forKeyedSubscript:@"TimelineConfig"];
            }
            long long v152 = [v230 objectForKeyedSubscript:@"useOverlap"];
            BOOL v153 = v152 == 0;

            if (!v153)
            {
              unint64_t v154 = [v230 objectForKeyedSubscript:@"useOverlap"];
              [v226 setObject:v154 forKeyedSubscript:@"useOverlap"];
            }
          }
          [v226 setObject:v228 forKeyedSubscript:@"MetalPluginName"];
          if (v351 != 0x7FFFFFFF)
          {
            unint64_t v155 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
            [v226 setObject:v155 forKeyedSubscript:@"gpuTarget"];
          }
          unint64_t v156 = GTShaderProfilerStreamDataFromReplayDataSource();
          v346[0] = @"Streaming APS Data";
          v346[1] = @"MetalPluginName";
          v347[0] = &__kCFBooleanTrue;
          v347[1] = v228;
          v346[2] = @"gpuTarget";
          uint64_t v157 = +[NSNumber numberWithInt:v351];
          v347[2] = v157;
          id v224 = +[NSDictionary dictionaryWithObjects:v347 forKeys:v346 count:3];

          id v158 = +[GTTransportMessage_replayer messageWithKind:objectPayload:](GTTransportMessage_replayer, "messageWithKind:objectPayload:", [v5 kind], v224);
          [v233 send:v158 inReplyTo:v5 error:0];

          dispatch_semaphore_t v159 = dispatch_semaphore_create(0);
          *(void *)long long buf = 0;
          *(void *)&long long v349 = buf;
          *((void *)&v349 + 1) = 0x2020000000;
          char v350 = 0;
          *(void *)&long long v338 = 0;
          *((void *)&v338 + 1) = &v338;
          *(void *)&long long v339 = 0x2020000000;
          BYTE8(v339) = 0;
          uint64_t v160 = *(void *)(a1 + 8);
          uint64_t v161 = (id *)(a1 + 256);
          v277[0] = _NSConcreteStackBlock;
          v277[1] = 3221225472;
          v277[2] = __ProcessMessage_block_invoke_169;
          v277[3] = &unk_746008;
          int v162 = v159;
          int v278 = v162;
          v280 = buf;
          id v163 = v156;
          id v279 = v163;
          v281 = &v338;
          GTMTLReplayClient_collectAPSData(v160, v161, v226, v277);
          long long v164 = v162;
          dispatch_semaphore_wait(v162, 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v165 = [v163 traceName];
          int v166 = (void *)v165;
          CFStringRef v167 = @"local";
          if (v165) {
            CFStringRef v167 = (const __CFString *)v165;
          }
          id v168 = +[NSString stringWithFormat:@"/tmp/com.apple.gputools.profiling/%@.gpuprofiler_raw", v167];

          [v163 setMetalPluginName:v228];
          unsigned int v169 = +[NSFileManager defaultManager];
          unsigned int v170 = [v168 stringByDeletingLastPathComponent];
          [v169 createDirectoryAtPath:v170 withIntermediateDirectories:1 attributes:0 error:0];

          if ([v169 fileExistsAtPath:v168])
          {
            uint64_t v276 = 0;
            [v169 removeItemAtPath:v168 error:&v276];
          }
          id v275 = 0;
          unsigned int v171 = +[NSKeyedArchiver archivedDataWithRootObject:v163 requiringSecureCoding:1 error:&v275];
          id v172 = v275;
          [v171 writeToFile:v168 atomically:0];
          CFStringRef v344 = @"Profiler Raw";
          uint64_t v345 = v171;
          unsigned int v173 = +[NSDictionary dictionaryWithObjects:&v345 forKeys:&v344 count:1];
          unsigned int v174 = +[GTTransportMessage_replayer messageWithKind:4124 plistPayload:v173];
          [v233 send:v174 inReplyTo:0 error:0];

          _Block_object_dispose(&v338, 8);
          _Block_object_dispose(buf, 8);
        }

        break;
      default:
        switch(v8)
        {
          case 4608:
            id v21 = [v5 objectPayload];
            id v22 = [v21 objectForKeyedSubscript:@"functionIndex"];
            id v23 = [v22 unsignedIntegerValue];

            unint64_t v24 = [v21 objectForKeyedSubscript:@"object"];
            id v25 = [v24 unsignedIntegerValue];

            v234[0] = _NSConcreteStackBlock;
            v234[1] = 3221225472;
            v234[2] = __ProcessMessage_block_invoke_267;
            v234[3] = &unk_7460F8;
            uint64_t v237 = a1;
            id v238 = v23;
            id v239 = v25;
            os_signpost_id_t v240 = v7;
            unsigned int v241 = v6;
            id v235 = v233;
            id v236 = v5;
            uint64_t v26 = +[NSBlockOperation blockOperationWithBlock:v234];
            [*(id *)(a1 + 256) addOperation:v26];

            goto LABEL_196;
          case 4609:
            unsigned int v175 = [v5 attributes];
            uint64_t v46 = [v175 objectForKeyedSubscript:@"sessionId"];

            if (!v46 || (objc_opt_respondsToSelector() & 1) == 0) {
              goto LABEL_45;
            }
            id v176 = [v46 unsignedIntegerValue];
            uint64_t v177 = *(void *)(a1 + 8);
            unsigned int v178 = *(NSObject **)(v177 + 48);
            v177 += 48;
            dispatch_semaphore_wait(v178, 0xFFFFFFFFFFFFFFFFLL);
            unsigned int v179 = *(void **)(v177 + 8);
            unsigned int v180 = +[NSNumber numberWithUnsignedInteger:v176];
            id v45 = [v179 objectForKey:v180];

            dispatch_semaphore_signal(*(dispatch_semaphore_t *)v177);
            if (v45)
            {
              unsigned int v181 = [v5 payload];
              [v45 receiveData:v181];
            }
            goto LABEL_44;
          case 4610:
            unsigned int v182 = [v5 objectPayload];
            unsigned int v183 = [v182 objectForKeyedSubscript:@"sessionId"];
            id v184 = [v183 unsignedIntegerValue];

            uint64_t v185 = *(void *)(a1 + 8);
            dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v185 + 48), 0xFFFFFFFFFFFFFFFFLL);
            unsigned int v186 = *(void **)(v185 + 56);
            unsigned int v187 = +[NSNumber numberWithUnsignedLongLong:v184];
            uint64_t v188 = [v186 objectForKey:v187];

            if (v188)
            {
              unsigned int v189 = *(void **)(v185 + 56);
              signed int v190 = +[NSNumber numberWithUnsignedLongLong:v184];
              [v189 removeObjectForKey:v190];
            }
            else
            {
              NSLog(@"ASV session %llu does not exist", v184);
            }

            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v185 + 48));
            id v213 = [v5 kind];
            CFStringRef v342 = @"sessionId";
            id v214 = +[NSNumber numberWithUnsignedLongLong:v184];
            int v343 = v214;
            long long v215 = +[NSDictionary dictionaryWithObjects:&v343 forKeys:&v342 count:1];
            unsigned int v216 = +[GTTransportMessage_replayer messageWithKind:v213 objectPayload:v215];

            [v233 send:v216 inReplyTo:v5 error:0];
            goto LABEL_196;
          case 4611:
            uint64_t v191 = g_signpostLog;
            id v192 = v191;
            if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v191))
            {
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v6;
              _os_signpost_emit_with_name_impl(&def_1C1270, v192, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerGenerateListOfDebugFilesInCache", buf, 8u);
            }

            BOOL v231 = ArchiveDirectory();
            id v229 = [objc_alloc((Class)NSURL) initFileURLWithPath:v231];
            uint64_t v227 = +[NSFileManager defaultManager];
            NSURLResourceKey v351 = NSURLNameKey;
            uint64_t v193 = +[NSArray arrayWithObjects:&v351 count:1];
            dispatch_semaphore_t v194 = [v227 enumeratorAtURL:v229 includingPropertiesForKeys:v193 options:17 errorHandler:0];

            id v195 = objc_alloc_init((Class)NSMutableArray);
            long long v341 = 0u;
            long long v340 = 0u;
            long long v339 = 0u;
            long long v338 = 0u;
            id v196 = v194;
            id v197 = [v196 countByEnumeratingWithState:&v338 objects:buf count:16];
            if (v197)
            {
              uint64_t v198 = *(void *)v339;
              do
              {
                for (uint64_t i = 0; i != v197; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v339 != v198) {
                    objc_enumerationMutation(v196);
                  }
                  uint64_t v200 = *(void **)(*((void *)&v338 + 1) + 8 * i);
                  uint64_t v201 = [v200 lastPathComponent];
                  uint64_t v202 = [v201 stringByDeletingPathExtension];

                  id v203 = [v200 pathExtension];
                  LODWORD(v201) = [v203 isEqualToString:@"metallib"];

                  if (v201) {
                    [v195 addObject:v202];
                  }
                }
                id v197 = [v196 countByEnumeratingWithState:&v338 objects:buf count:16];
              }
              while (v197);
            }

            uint64_t v204 = +[GTTransportMessage_replayer messageWithKind:4611 objectPayload:v195];
            [v233 send:v204 inReplyTo:v5 error:0];

            goto LABEL_196;
          case 4612:
            long long v205 = g_signpostLog;
            long long v206 = v205;
            if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v205))
            {
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v6;
              _os_signpost_emit_with_name_impl(&def_1C1270, v206, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerSendDebuggingFiles", buf, 8u);
            }

            v334[0] = _NSConcreteStackBlock;
            v334[1] = 3221225472;
            v334[2] = __ProcessMessage_block_invoke;
            v334[3] = &unk_745EA8;
            id v335 = v5;
            uint64_t v337 = a1;
            id v336 = v233;
            id v207 = +[NSBlockOperation blockOperationWithBlock:v334];
            [*(id *)(a1 + 256) addOperation:v207];

            goto LABEL_196;
          case 4613:
            long long v208 = g_signpostLog;
            int v209 = v208;
            if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v208))
            {
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v6;
              _os_signpost_emit_with_name_impl(&def_1C1270, v209, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageReplayerUpdateLibraries", buf, 8u);
            }

            v327[0] = _NSConcreteStackBlock;
            v327[1] = 3221225472;
            v327[2] = __ProcessMessage_block_invoke_59;
            v327[3] = &unk_745ED0;
            uint64_t v210 = *(void *)(a1 + 64);
            id v328 = v5;
            os_signpost_id_t v330 = v7;
            unsigned int v332 = v6;
            uint64_t v331 = a1;
            id v329 = v233;
            uint64_t v333 = v210;
            unsigned int v211 = +[NSBlockOperation blockOperationWithBlock:v327];
            [*(id *)(a1 + 256) addOperation:v211];

            goto LABEL_196;
          default:
            if (v8 != 1794) {
              goto LABEL_196;
            }
            uint64_t v30 = g_signpostLog;
            uint64_t v31 = v30;
            if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v30))
            {
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v6;
              _os_signpost_emit_with_name_impl(&def_1C1270, v31, OS_SIGNPOST_EVENT, v7, "Replayer-5-network", "%u. kDYMessageTraceOverridesConfiguration", buf, 8u);
            }

            unsigned int v32 = [v5 uint32ForKey:@"override_flags"];
            unsigned int v33 = v32;
            if (v32 == *(_DWORD *)(a1 + 60)) {
              goto LABEL_191;
            }
            if (v32)
            {
              if (*(_DWORD *)(a1 + 56) == 7) {
                goto LABEL_190;
              }
              uint64_t v34 = 7;
            }
            else
            {
              uint64_t v34 = 1;
            }
            SetTraceMode(v233, v34);
LABEL_190:
            *(_DWORD *)(a1 + 60) = v33;
LABEL_191:
            if ((v33 & 0x40) != 0)
            {
              [v5 doubleForKey:@"override_scale_tesselation_factor"];
              *(void *)(a1 + 48) = v217;
            }
            break;
        }
        break;
    }
  }
LABEL_196:
}

void sub_2CB2C4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x5C0], 8);
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

void SetTraceMode(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v5 = +[NSNumber numberWithUnsignedInt:a2];
  size_t v4 = +[GTTransportMessage_replayer messageWithKind:1796 objectPayload:v5];
  [v3 send:v4 error:0];
}

void DisplayAttachmentIfNeeded(uint64_t a1, int a2, int a3)
{
  if (*(void *)(a1 + 280))
  {
    if ((dword_77313C & 0x20) == 0)
    {
      uint64_t v6 = *(void *)(**(void **)(a1 + 8) + 112);
      ExclusiveRange = GroupBuilder_findExclusiveRange(*(_DWORD *)(v6 + 12), *(void **)(v6 + 24), (a2 - 1));
      if (ExclusiveRange)
      {
        while (1)
        {
          int v8 = *((_DWORD *)ExclusiveRange + 7);
          if (v8 == -16353 || v8 == -16351) {
            break;
          }
          uint64_t v10 = *((unsigned int *)ExclusiveRange + 4);
          if (v10) {
            BOOL v11 = ExclusiveRange == 0;
          }
          else {
            BOOL v11 = 1;
          }
          ExclusiveRange -= 4 * v10;
          if (v11) {
            return;
          }
        }
        v17[0] = 0;
        v17[1] = v17;
        v17[2] = 0x3010000000;
        v17[3] = &unk_4E231D;
        v17[4] = *(void *)(a1 + 72);
        char v12 = *(unsigned char *)(a1 + 84);
        char v18 = v12 & 1;
        BOOL v19 = (v12 & 2) != 0;
        BOOL v20 = (v12 & 4) != 0;
        char v21 = 0;
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = __DisplayAttachmentIfNeeded_block_invoke;
        v14[3] = &unk_746198;
        int v15 = a2;
        int v16 = a3;
        v14[4] = v17;
        v14[5] = a1;
        uint64_t v13 = +[NSBlockOperation blockOperationWithBlock:v14];
        [*(id *)(a1 + 256) addOperation:v13];

        _Block_object_dispose(v17, 8);
      }
    }
  }
}

void sub_2CB5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *ArchiveDirectory()
{
  uint64_t v0 = +[NSProcessInfo processInfo];
  unsigned __int8 v1 = [v0 isiOSAppOnMac];

  if (v1)
  {
    unint64_t v2 = @"/tmp/com.apple.GPUToolsAgent";
  }
  else
  {
    id v3 = +[NSString stringWithUTF8String:getpwnam("mobile")->pw_dir];
    unint64_t v2 = [v3 stringByAppendingPathComponent:@"Library/GPUTools"];
  }

  return v2;
}

void __ProcessMessage_block_invoke(uint64_t a1)
{
  id v10 = [*(id *)(a1 + 32) objectPayload];
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  id v3 = *(void **)(v2 + 128);
  size_t v4 = *(void **)(v2 + 136);
  id v5 = ArchiveDirectory();
  BOOL updated = UpdateDebugFileCache(v10, v3, v4, v5);

  os_signpost_id_t v7 = *(void **)(a1 + 40);
  int v8 = +[NSNumber numberWithBool:updated];
  id v9 = +[GTTransportMessage_replayer messageWithKind:4612 objectPayload:v8];
  [v7 send:v9 inReplyTo:*(void *)(a1 + 32) error:0];
}

id __ProcessMessage_block_invoke_59(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = g_signpostLog;
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-1-serial", "%u. kDYMessageReplayerUpdateLibraries", buf, 8u);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id v7 = [*(id *)(a1 + 32) objectPayload];
  uint64_t v18 = 0;
  BOOL v19 = &v18;
  uint64_t v20 = 0x2020000000;
  char v21 = 0;
  int v8 = objc_opt_new();
  *(void *)long long buf = _NSConcreteStackBlock;
  uint64_t v23 = 3221225472;
  unint64_t v24 = __UpdateLibraries_block_invoke;
  id v25 = &unk_7461C0;
  id v27 = &v18;
  uint64_t v28 = v6;
  id v9 = v8;
  id v26 = v9;
  [v7 enumerateKeysAndObjectsUsingBlock:buf];
  id v10 = +[NSNumber numberWithBool:*((unsigned __int8 *)v19 + 24)];
  [v9 setObject:v10 forKeyedSubscript:@"succeeded"];

  _Block_object_dispose(&v18, 8);
  BOOL v11 = *(void **)(a1 + 40);
  char v12 = +[GTTransportMessage_replayer messageWithKind:attributes:objectPayload:](GTTransportMessage_replayer, "messageWithKind:attributes:objectPayload:", [*(id *)(a1 + 32) kind], 0, v9);
  [v11 send:v12 inReplyTo:*(void *)(a1 + 32) error:0];

  uint64_t v13 = [v9 objectForKeyedSubscript:@"succeeded"];
  LODWORD(v12) = [v13 BOOLValue];

  if (v12) {
    DisplayAttachmentIfNeeded(*(void *)(a1 + 56), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72));
  }
  uint64_t v14 = g_signpostLog;
  int v15 = v14;
  os_signpost_id_t v16 = *(void *)(a1 + 48);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v14))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v15, OS_SIGNPOST_INTERVAL_END, v16, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
  }

  return [(id)g_activityLog leaveActivity];
}

void sub_2CB9F4(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id __ProcessMessage_block_invoke_63(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = ArchiveDirectory();
  id v3 = g_signpostLog;
  os_signpost_id_t v4 = v3;
  os_signpost_id_t v5 = *(void *)(a1 + 48);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v3))
  {
    int v6 = *(_DWORD *)(a1 + 56);
    v13[0] = 67109378;
    v13[1] = v6;
    __int16 v14 = 2082;
    id v15 = [v2 UTF8String];
    _os_signpost_emit_with_name_impl(&def_1C1270, v4, OS_SIGNPOST_EVENT, v5, "Replayer-1-serial", "%u. kDYMessageReplayerDeleteAllArchives %{public}s", (uint8_t *)v13, 0x12u);
  }

  DeleteAllArchives();
  id v7 = g_signpostLog;
  int v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 48);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v7))
  {
    LOWORD(v13[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v8, OS_SIGNPOST_EVENT, v9, "Replayer-1-serial", (const char *)&unk_4CA5E5, (uint8_t *)v13, 2u);
  }

  id v10 = *(void **)(a1 + 40);
  BOOL v11 = +[GTTransportMessage_replayer messageWithKind:](GTTransportMessage_replayer, "messageWithKind:", [*(id *)(a1 + 32) kind]);
  [v10 send:v11 inReplyTo:*(void *)(a1 + 32) error:0];

  return [(id)g_activityLog leaveActivity];
}

void sub_2CBBF8(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id __ProcessMessage_block_invoke_64(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = [*(id *)(a1 + 32) attributes];
  id v3 = [v2 objectForKeyedSubscript:@"sandbox_extensions"];

  os_signpost_id_t v4 = [*(id *)(a1 + 32) attributes];
  os_signpost_id_t v5 = [v4 objectForKeyedSubscript:@"debug_files"];

  int v6 = *(apr_pool_t ***)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 40);
  int v8 = ArchiveDirectory();
  id v17 = _NSConcreteStackBlock;
  uint64_t v18 = 3221225472;
  BOOL v19 = __ProcessMessage_block_invoke_2;
  uint64_t v20 = &unk_745F20;
  id v21 = *(id *)(a1 + 48);
  id v22 = *(id *)(a1 + 32);
  id v9 = v8;
  id v10 = v3;
  id v11 = v5;
  char v12 = &v17;
  uint64_t v13 = [v9 stringByAppendingPathComponent:v7, v17, v18, v19, v20];
  if (v10)
  {
    [v10 UTF8String];
    uint64_t v14 = sandbox_extension_consume();
    id v15 = apr_palloc(*v6, 8uLL);
    *id v15 = v14;
    apr_pool_cleanup_register(*v6, v15, (apr_status_t (__cdecl *)(void *))CleanupSandboxExtension, apr_pool_cleanup_null);
  }
  BeginDebugArchivePath(v6, v13, v9, v11, v12);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  return [(id)g_activityLog leaveActivity];
}

void sub_2CBE20(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id __ProcessMessage_block_invoke_72(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 272) makeObjectsPerformSelector:"cancel"];
}

void __ProcessMessage_block_invoke_76(void *a1, void *a2, void *a3)
{
  id v42 = a2;
  id v5 = a3;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v45 = [v5 countByEnumeratingWithState:&v50 objects:v66 count:16];
  if (v45)
  {
    uint64_t v44 = *(void *)v51;
    id v43 = v5;
    uint64_t v49 = a1;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v51 != v44) {
          objc_enumerationMutation(v5);
        }
        uint64_t v7 = *(void **)(*((void *)&v50 + 1) + 8 * v6);
        v64[0] = @"buffer name";
        v64[1] = @"capture serial";
        v65[0] = v7;
        int v8 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1[6] + 16)];
        v65[1] = v8;
        unint64_t v47 = +[NSDictionary dictionaryWithObjects:v65 forKeys:v64 count:2];

        id v46 = v7;
        id v9 = [v5 objectForKeyedSubscript:v7];
        uint64_t v48 = v6;
        if ((unint64_t)[v9 length] < 0x40000001)
        {
          id v27 = v47;
        }
        else
        {
          id v10 = +[NSUUID UUID];
          id v11 = [v10 UUIDString];

          if ([v9 length])
          {
            uint64_t v12 = 0;
            unint64_t v13 = 0;
            uint64_t v14 = v9;
            do
            {
              id v15 = v9;
              os_signpost_id_t v16 = (char *)[v15 bytes];
              if (((unint64_t)[v15 length] + v12) >> 30) {
                uint64_t v17 = 0x40000000;
              }
              else {
                uint64_t v17 = (uint64_t)[v15 length] + v12;
              }
              uint64_t v18 = +[NSData dataWithBytesNoCopy:&v16[v13] length:v17 freeWhenDone:0];
              v63[0] = v11;
              v62[0] = @"chunkUUID";
              v62[1] = @"fullSize";
              BOOL v19 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v15 length]);
              v63[1] = v19;
              v62[2] = @"index";
              uint64_t v20 = +[NSNumber numberWithUnsignedLong:v13 >> 30];
              void v63[2] = v20;
              v62[3] = @"currentOffset";
              id v21 = +[NSNumber numberWithUnsignedLong:v13];
              v63[3] = v21;
              id v22 = +[NSDictionary dictionaryWithObjects:v63 forKeys:v62 count:4];

              uint64_t v23 = (void *)v49[4];
              unint64_t v24 = +[GTTransportMessage_replayer messageWithKind:271 attributes:v22 payload:v18];
              [v23 send:v24 inReplyTo:v49[5] error:0];

              v13 += 0x40000000;
              v12 -= 0x40000000;
              id v9 = v14;
            }
            while (v13 < (unint64_t)[v15 length]);
          }

          v61[0] = v46;
          v60[0] = @"buffer name";
          v60[1] = @"capture serial";
          a1 = v49;
          id v25 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v49[6] + 16)];
          v60[2] = @"chunkUUID";
          v61[1] = v25;
          v61[2] = v11;
          uint64_t v26 = +[NSDictionary dictionaryWithObjects:v61 forKeys:v60 count:3];

          id v9 = 0;
          id v27 = (void *)v26;
          id v5 = v43;
        }
        uint64_t v28 = g_signpostLog;
        id v29 = v28;
        os_signpost_id_t v30 = a1[7];
        if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v28))
        {
          uint64_t v31 = v27;
          int v32 = *((_DWORD *)a1 + 16);
          id v33 = [v46 UTF8String];
          id v34 = [v9 length];
          *(_DWORD *)long long buf = 67109634;
          int v55 = v32;
          id v27 = v31;
          __int16 v56 = 2082;
          id v57 = v33;
          __int16 v58 = 2048;
          id v59 = v34;
          _os_signpost_emit_with_name_impl(&def_1C1270, v29, OS_SIGNPOST_INTERVAL_BEGIN, v30, "Replayer-5-network", "%u. send %{public}s %{xcode:size-in-bytes}lu", buf, 0x1Cu);
        }

        id v35 = (void *)a1[4];
        id v36 = +[GTTransportMessage_replayer messageWithKind:258 attributes:v27 payload:v9];
        [v35 send:v36 inReplyTo:a1[5] error:0];

        id v37 = g_signpostLog;
        uint64_t v38 = v37;
        os_signpost_id_t v39 = a1[7];
        if (v39 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v37))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&def_1C1270, v38, OS_SIGNPOST_INTERVAL_END, v39, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
        }

        uint64_t v6 = v48 + 1;
      }
      while ((id)(v48 + 1) != v45);
      id v45 = [v5 countByEnumeratingWithState:&v50 objects:v66 count:16];
    }
    while (v45);
  }
  uint64_t v40 = (void *)a1[4];
  long long v41 = +[GTTransportMessage_replayer messageWithKind:attributes:payload:](GTTransportMessage_replayer, "messageWithKind:attributes:payload:", [(id)a1[5] kind], 0, v42);
  [v40 send:v41 inReplyTo:a1[5] error:0];
}

void __ProcessMessage_block_invoke_104(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  os_signpost_id_t v4 = *(void **)(a1 + 40);
  id v5 = a2;
  +[GTTransportMessage_replayer messageWithKind:attributes:payload:](GTTransportMessage_replayer, "messageWithKind:attributes:payload:", [v4 kind], 0, v5);
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  [v3 send:v6 inReplyTo:*(void *)(a1 + 40) error:0];
}

id __ProcessMessage_block_invoke_106(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = g_signpostLog;
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-1-serial", "%u. kGTMessageReplayerResourcesUsedForFunctionIndex", buf, 8u);
  }

  id v6 = *(unsigned int **)(*(void *)(a1 + 56) + 8);
  id v7 = [*(id *)(a1 + 32) plistPayload];
  int v8 = [v7 objectForKeyedSubscript:@"functionIndex"];
  id v9 = [v8 unsignedLongLongValue];

  id v10 = [v7 objectForKeyedSubscript:@"subCommandIndex"];

  id v11 = [v10 unsignedLongLongValue];
  id v31 = 0;
  int v12 = GTMTLReplayClient_generateFunctionResourceUsageInfoV2(v6, (unint64_t)v9, (unint64_t)v11, &v31);
  id v13 = v31;
  uint64_t v14 = v13;
  id v15 = &__NSArray0__struct;
  if (v13) {
    id v15 = v13;
  }
  v32[1] = @"error";
  *(void *)long long buf = v15;
  v32[0] = @"resources";
  os_signpost_id_t v16 = +[NSNumber numberWithInt:v12 ^ 1u];
  id v34 = v16;
  uint64_t v17 = +[NSDictionary dictionaryWithObjects:buf forKeys:v32 count:2];

  uint64_t v18 = g_signpostLog;
  BOOL v19 = v18;
  os_signpost_id_t v20 = *(void *)(a1 + 48);
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v18))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v19, OS_SIGNPOST_INTERVAL_END, v20, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
  }

  id v21 = g_signpostLog;
  id v22 = v21;
  os_signpost_id_t v23 = *(void *)(a1 + 48);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v21))
  {
    int v24 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v24;
    _os_signpost_emit_with_name_impl(&def_1C1270, v22, OS_SIGNPOST_INTERVAL_BEGIN, v23, "Replayer-5-network", "%u. kGTMessageReplayerResourcesUsedForFunctionIndex", buf, 8u);
  }

  id v25 = *(void **)(a1 + 40);
  uint64_t v26 = +[GTTransportMessage_replayer messageWithKind:objectPayload:](GTTransportMessage_replayer, "messageWithKind:objectPayload:", [*(id *)(a1 + 32) kind], v17);
  [v25 send:v26 inReplyTo:*(void *)(a1 + 32) error:0];

  id v27 = g_signpostLog;
  uint64_t v28 = v27;
  os_signpost_id_t v29 = *(void *)(a1 + 48);
  if (v29 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v27))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v28, OS_SIGNPOST_INTERVAL_END, v29, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
  }

  return [(id)g_activityLog leaveActivity];
}

void sub_2CC7F8(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id __ProcessMessage_block_invoke_107(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = g_signpostLog;
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    v15[0] = 67109120;
    v15[1] = v5;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-1-serial", "%u. kDYMessageReplayerGenerateThumbnails", (uint8_t *)v15, 8u);
  }

  id v6 = [*(id *)(a1 + 32) objectPayload];
  int v8 = GTMTLReplayClient_generateThumbnails(**(void **)(*(void *)(a1 + 56) + 8), (uint64_t)v6, *(void *)(*(void *)(a1 + 56) + 88), v7);
  id v9 = *(void **)(a1 + 40);
  id v10 = +[GTTransportMessage_replayer messageWithKind:objectPayload:](GTTransportMessage_replayer, "messageWithKind:objectPayload:", [*(id *)(a1 + 32) kind], v8);
  [v9 send:v10 inReplyTo:*(void *)(a1 + 32) error:0];

  id v11 = g_signpostLog;
  int v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 48);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v11))
  {
    LOWORD(v15[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v12, OS_SIGNPOST_INTERVAL_END, v13, "Replayer-1-serial", (const char *)&unk_4CA5E5, (uint8_t *)v15, 2u);
  }

  return [(id)g_activityLog leaveActivity];
}

void sub_2CC9F0(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id __ProcessMessage_block_invoke_108(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = g_signpostLog;
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    v14[0] = 67109120;
    v14[1] = v5;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-1-serial", "%u. kDYMessageReplayerGenerateDependencyGraphThumbnails", (uint8_t *)v14, 8u);
  }

  id v6 = [*(id *)(a1 + 32) objectPayload];
  uint64_t v7 = GTMTLReplayClient_generateDependencyGraphThumbnails(**(void **)(*(void *)(a1 + 56) + 8), v6, *(void **)(*(void *)(a1 + 56) + 88));
  int v8 = *(void **)(a1 + 40);
  id v9 = +[GTTransportMessage_replayer messageWithKind:objectPayload:](GTTransportMessage_replayer, "messageWithKind:objectPayload:", [*(id *)(a1 + 32) kind], v7);
  [v8 send:v9 inReplyTo:*(void *)(a1 + 32) error:0];

  id v10 = g_signpostLog;
  id v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 48);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v10))
  {
    LOWORD(v14[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v11, OS_SIGNPOST_INTERVAL_END, v12, "Replayer-1-serial", (const char *)&unk_4CA5E5, (uint8_t *)v14, 2u);
  }

  return [(id)g_activityLog leaveActivity];
}

void sub_2CCBEC(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id __ProcessMessage_block_invoke_109(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = g_signpostLog;
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109120;
    int v31 = v5;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-1-serial", "%u. kGTMessageQueryInducedGPUPerfState", buf, 8u);
  }

  id v6 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 8) defaultDevice];
  uint64_t v7 = DEVICEOBJECT(v6);

  int v8 = GetMetalPluginName((io_registry_entry_t)[v7 acceleratorPort], 0);
  if (IsAGXMetalPlugin(v8, v9))
  {
    ConsistentPerformanceStateInfo(*(void *)(*(void *)(a1 + 56) + 8));
    id v10 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
    if ([v7 supportsFamily:1009])
    {
      id v11 = +[NSMutableDictionary dictionaryWithDictionary:v10];
      [v11 setObject:&off_759C00 forKeyedSubscript:@"gen"];
      os_signpost_id_t v12 = (_UNKNOWN **)[v11 copy];
    }
    else
    {
      if (![v7 supportsFamily:1004])
      {
        uint64_t v14 = v10;
        goto LABEL_13;
      }
      id v11 = +[NSMutableDictionary dictionaryWithDictionary:v10];
      [v11 setObject:&off_759C18 forKeyedSubscript:@"gen"];
      os_signpost_id_t v12 = (_UNKNOWN **)[v11 copy];
    }
    goto LABEL_12;
  }
  if (objc_opt_respondsToSelector())
  {
    id v13 = [v7 currentPerformanceState];
    id v11 = +[NSNumber numberWithInt:v13 != 0, @"enabled"];
    v29[0] = v11;
    v29[1] = &__kCFBooleanTrue;
    v28[1] = @"supported";
    void v28[2] = @"PerformanceStateAssertion";
    id v10 = +[NSNumber numberWithInteger:v13];
    _OWORD v29[2] = v10;
    os_signpost_id_t v12 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:3];
LABEL_12:
    uint64_t v14 = v12;

    goto LABEL_13;
  }
  uint64_t v14 = &off_7592B0;
LABEL_13:
  id v15 = g_signpostLog;
  os_signpost_id_t v16 = v15;
  os_signpost_id_t v17 = *(void *)(a1 + 48);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v15))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v16, OS_SIGNPOST_INTERVAL_END, v17, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
  }

  uint64_t v18 = g_signpostLog;
  BOOL v19 = v18;
  os_signpost_id_t v20 = *(void *)(a1 + 48);
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v18))
  {
    int v21 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109120;
    int v31 = v21;
    _os_signpost_emit_with_name_impl(&def_1C1270, v19, OS_SIGNPOST_INTERVAL_BEGIN, v20, "Replayer-5-network", "%u. kGTMessageQueryInducedGPUPerfState", buf, 8u);
  }

  id v22 = *(void **)(a1 + 40);
  os_signpost_id_t v23 = +[GTTransportMessage_replayer messageWithKind:plistPayload:](GTTransportMessage_replayer, "messageWithKind:plistPayload:", [*(id *)(a1 + 32) kind], v14);
  [v22 send:v23 inReplyTo:*(void *)(a1 + 32) error:0];

  int v24 = g_signpostLog;
  id v25 = v24;
  os_signpost_id_t v26 = *(void *)(a1 + 48);
  if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v24))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v25, OS_SIGNPOST_INTERVAL_END, v26, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
  }

  return [(id)g_activityLog leaveActivity];
}

void sub_2CD034(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

void __ProcessMessage_block_invoke_169(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (v3)
  {
    os_signpost_id_t v4 = v3;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
      || ([v3 objectForKeyedSubscript:@"Streaming APS Counters"],
          int v5 = objc_claimAutoreleasedReturnValue(),
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v5 != 0,
          v5,
          os_signpost_id_t v4 = v7,
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)))
    {
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
        goto LABEL_8;
      }
      id v6 = [v4 objectForKeyedSubscript:@"Streaming APS Profiling"];
      if (v6) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      }

      os_signpost_id_t v4 = v7;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
LABEL_8:
      }
        [*(id *)(a1 + 40) addAPSTimelineData:v4];
      else {
        [*(id *)(a1 + 40) addAPSCounterData:v7];
      }
    }
    else
    {
      [*(id *)(a1 + 40) addAPSData:v7];
    }
  }
  else
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
}

void __ProcessMessage_block_invoke_188(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  id v3 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 8) defaultDevice];
  os_signpost_id_t v4 = DEVICEOBJECT(v3);
  io_registry_entry_t v5 = [v4 acceleratorPort];

  id v6 = [*(id *)(*(void *)(*(void *)v2 + 8) + 8) defaultDevice];
  LODWORD(v4) = [v6 supportsFamily:1009];

  if (!v4)
  {
    unsigned int v79 = 0x7FFFFFFF;
    os_signpost_id_t v16 = GetMetalPluginName(v5, &v79);
    int v18 = IsAGXMetalPlugin(v16, v17);
    long long v72 = GTMTLReplayHost_generateDerivedDataPayload(**(void **)(*(void *)(a1 + 48) + 8), v18);
    BOOL v19 = +[NSMutableDictionary dictionaryWithDictionary:v72];
    os_signpost_id_t v20 = [*(id *)(a1 + 40) objectPayload];
    int v71 = [*(id *)(a1 + 40) attributes];
    if (v20)
    {
      int v21 = [v20 objectForKeyedSubscript:@"UseMTLCounters"];
      BOOL v22 = v21 == 0;

      if (!v22) {
        [v19 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseMTLCounters"];
      }
      os_signpost_id_t v23 = [v20 objectForKeyedSubscript:@"UseKicktimestamps" v71];
      BOOL v24 = v23 == 0;

      if (!v24) {
        [v19 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseKicktimestamps"];
      }
      id v25 = [v20 objectForKeyedSubscript:@"CoalesceComputeEncoders"];
      BOOL v26 = v25 == 0;

      if (!v26) {
        [v19 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceComputeEncoders"];
      }
      id v27 = [v20 objectForKeyedSubscript:@"CoalesceBlitEncoders"];
      BOOL v28 = v27 == 0;

      if (!v28) {
        [v19 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceBlitEncoders"];
      }
      os_signpost_id_t v29 = [v20 objectForKeyedSubscript:@"GPUState"];
      if (v29) {
        [v19 setObject:v29 forKeyedSubscript:@"GPUState"];
      }
    }
    if (!v18)
    {
      id v34 = [*(id *)(a1 + 40) objectPayload];
      id v35 = [v34 mutableCopy];

      if (v35)
      {
        [v35 setObject:v16 forKeyedSubscript:@"MetalPluginName"];
        GTMTLReplayClient_queryShaderInfo(*(void *)(*(void *)(a1 + 48) + 8), (id *)(*(void *)(a1 + 48) + 256), v35);
      }
      else
      {
        GTMTLReplayClient_queryShaderInfo(*(void *)(*(void *)(a1 + 48) + 8), (id *)(*(void *)(a1 + 48) + 256), 0);
      int v31 = };
      id v36 = g_signpostLog;
      id v37 = v36;
      os_signpost_id_t v38 = *(void *)(a1 + 56);
      if (v38 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v36))
      {
        int v39 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v39;
        _os_signpost_emit_with_name_impl(&def_1C1270, v37, OS_SIGNPOST_INTERVAL_BEGIN, v38, "Replayer-5-network", "%u. kDYMessageReplayerQueryShaderInfo", buf, 8u);
      }

      uint64_t v40 = *(void **)(a1 + 32);
      long long v41 = +[GTTransportMessage_replayer messageWithKind:plistPayload:](GTTransportMessage_replayer, "messageWithKind:plistPayload:", [*(id *)(a1 + 40) kind], v31);
      [v40 send:v41 inReplyTo:*(void *)(a1 + 40) error:0];

      id v42 = g_signpostLog;
      id v43 = v42;
      os_signpost_id_t v44 = *(void *)(a1 + 56);
      if (v44 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v42))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&def_1C1270, v43, OS_SIGNPOST_INTERVAL_END, v44, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
      }

      BOOL v19 = v35;
      goto LABEL_50;
    }
    [v19 setObject:v16 forKeyedSubscript:@"MetalPluginName"];
    if (v79 != 0x7FFFFFFF)
    {
      os_signpost_id_t v30 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
      [v19 setObject:v30 forKeyedSubscript:@"gpuTarget"];
    }
    int v31 = [v20 objectForKeyedSubscript:@"useOverlap"];
    if (v31) {
      [v19 setObject:v31 forKeyedSubscript:@"useOverlap"];
    }
    *(void *)long long buf = 0;
    uint64_t v81 = buf;
    uint64_t v82 = 0x3032000000;
    unint64_t v83 = __Block_byref_object_copy__5795;
    unint64_t v84 = __Block_byref_object_dispose__5796;
    id v85 = objc_alloc_init((Class)NSOperationQueue);
    [*((id *)v81 + 5) setName:@"gputools.GPUToolsDebugger.GPUToolsPlatform.ShaderProfiler.StreamingData.SerialQueue"];
    [*((id *)v81 + 5) setMaxConcurrentOperationCount:1];
    if (v71)
    {
      int v32 = [v71 objectForKeyedSubscript:@"GPUTimelineInfo"];
      id v33 = v32;
      if (v32)
      {
        if (v79 <= 0x7FFFFFFE)
        {

LABEL_41:
          unint64_t v47 = *(void **)(a1 + 32);
          uint64_t v48 = +[GTTransportMessage_replayer messageWithKind:plistPayload:](GTTransportMessage_replayer, "messageWithKind:plistPayload:", [*(id *)(a1 + 40) kind], &off_7592D8);
          [v47 send:v48 inReplyTo:*(void *)(a1 + 40) error:0];

          dispatch_semaphore_t v49 = dispatch_semaphore_create(0);
          uint64_t v50 = *(void *)(a1 + 48);
          uint64_t v51 = *(void *)(v50 + 8);
          long long v52 = (id *)(v50 + 256);
          v75[0] = _NSConcreteStackBlock;
          v75[1] = 3221225472;
          v75[2] = __ProcessMessage_block_invoke_203;
          v75[3] = &unk_746058;
          unsigned int v78 = buf;
          id v76 = *(id *)(a1 + 32);
          long long v53 = v49;
          id v77 = v53;
          GTMTLReplayClient_collectGPUShaderTimelineData(v51, v52, v19, v75);
          dispatch_semaphore_wait(v53, 0xFFFFFFFFFFFFFFFFLL);

LABEL_49:
          _Block_object_dispose(buf, 8);

LABEL_50:
          return;
        }
        int v45 = MetalPluginTarget(v16);

        if (v45 >= 0) {
          goto LABEL_41;
        }
      }
    }
    uint64_t v54 = GTMTLReplayClient_embeddedQueryShaderInfo(*(void *)(*(void *)(a1 + 48) + 8), (id *)(*(void *)(a1 + 48) + 256), v19);
    int v55 = *(void **)(a1 + 32);
    __int16 v56 = +[GTTransportMessage_replayer messageWithKind:plistPayload:](GTTransportMessage_replayer, "messageWithKind:plistPayload:", [*(id *)(a1 + 40) kind], v54);
    [v55 send:v56 inReplyTo:*(void *)(a1 + 40) error:0];

    if (v54)
    {
      id v57 = [v54 objectForKeyedSubscript:@"Streaming Shader Profiling Data"];
      BOOL v58 = v57 == 0;

      if (!v58)
      {
        dispatch_semaphore_t v59 = dispatch_semaphore_create(0);
        uint64_t v60 = *(void *)(a1 + 48);
        uint64_t v61 = *(void *)(v60 + 8);
        long long v62 = (id *)(v60 + 256);
        id v63 = v74;
        v74[0] = _NSConcreteStackBlock;
        v74[1] = 3221225472;
        v74[2] = __ProcessMessage_block_invoke_3;
        v74[3] = &unk_746058;
        v74[6] = buf;
        v74[4] = *(id *)(a1 + 32);
        long long v64 = v59;
        v74[5] = v64;
        GTMTLReplayClient_streamShaderProfilingData(v61, v62, v19, v74);
LABEL_47:
        dispatch_semaphore_wait(v64, 0xFFFFFFFFFFFFFFFFLL);

        goto LABEL_48;
      }
      long long v65 = [v54 objectForKeyedSubscript:@"Streaming Timeline Data"];
      BOOL v66 = v65 == 0;

      if (!v66)
      {
        dispatch_semaphore_t v67 = dispatch_semaphore_create(0);
        uint64_t v68 = *(void *)(a1 + 48);
        uint64_t v69 = *(void *)(v68 + 8);
        unsigned int v70 = (id *)(v68 + 256);
        id v63 = v73;
        v73[0] = _NSConcreteStackBlock;
        v73[1] = 3221225472;
        v73[2] = __ProcessMessage_block_invoke_5;
        v73[3] = &unk_746058;
        v73[6] = buf;
        v73[4] = *(id *)(a1 + 32);
        long long v64 = v67;
        v73[5] = v64;
        GTMTLReplayClient_collectGPUShaderTimelineData(v69, v70, v19, v73);
        goto LABEL_47;
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  id v7 = g_signpostLog;
  int v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 56);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v7))
  {
    int v10 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v10;
    _os_signpost_emit_with_name_impl(&def_1C1270, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "Replayer-5-network", "%u. kDYMessageReplayerQueryShaderInfo", buf, 8u);
  }

  id v11 = *(void **)(a1 + 32);
  os_signpost_id_t v12 = +[GTTransportMessage_replayer messageWithKind:plistPayload:](GTTransportMessage_replayer, "messageWithKind:plistPayload:", [*(id *)(a1 + 40) kind], &__NSDictionary0__struct);
  [v11 send:v12 inReplyTo:*(void *)(a1 + 40) error:0];

  id v13 = g_signpostLog;
  uint64_t v14 = v13;
  os_signpost_id_t v15 = *(void *)(a1 + 56);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v13))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v14, OS_SIGNPOST_INTERVAL_END, v15, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
  }
}

void sub_2CDB54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void __ProcessMessage_block_invoke_238(uint64_t a1)
{
  GTMTLReplayClient_addBatchFilteringRequest(*(void **)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = [*(id *)(a1 + 48) kind];
  CFStringRef v7 = @"Batch Filtering Request Received";
  os_signpost_id_t v4 = +[NSNumber numberWithBool:1];
  int v8 = v4;
  io_registry_entry_t v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  id v6 = +[GTTransportMessage_replayer messageWithKind:v3 plistPayload:v5];
  [v2 send:v6 inReplyTo:*(void *)(a1 + 48) error:0];
}

void __ProcessMessage_block_invoke_2_242(uint64_t a1)
{
  uint64_t v2 = g_signpostLog;
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    int v20 = 67109120;
    int v21 = v5;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-4-parallel", "%u. loadAnalysis", (uint8_t *)&v20, 8u);
  }

  id v6 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 8) defaultDevice];
  CFStringRef v7 = DYMTLReplayFrameProfiler_loadAnalysis(v6);

  int v8 = g_signpostLog;
  os_signpost_id_t v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 48);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v8))
  {
    LOWORD(v20) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v9, OS_SIGNPOST_INTERVAL_END, v10, "Replayer-4-parallel", (const char *)&unk_4CA5E5, (uint8_t *)&v20, 2u);
  }

  id v11 = g_signpostLog;
  os_signpost_id_t v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 48);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v11))
  {
    int v14 = *(_DWORD *)(a1 + 64);
    int v20 = 67109120;
    int v21 = v14;
    _os_signpost_emit_with_name_impl(&def_1C1270, v12, OS_SIGNPOST_INTERVAL_BEGIN, v13, "Replayer-5-network", "%u. kDYMessageReplayerDerivedCounterData", (uint8_t *)&v20, 8u);
  }

  os_signpost_id_t v15 = *(void **)(a1 + 32);
  os_signpost_id_t v16 = +[GTTransportMessage_replayer messageWithKind:plistPayload:](GTTransportMessage_replayer, "messageWithKind:plistPayload:", [*(id *)(a1 + 40) kind], v7);
  [v15 send:v16 inReplyTo:*(void *)(a1 + 40) error:0];

  os_signpost_id_t v17 = g_signpostLog;
  int v18 = v17;
  os_signpost_id_t v19 = *(void *)(a1 + 48);
  if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v17))
  {
    LOWORD(v20) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v18, OS_SIGNPOST_INTERVAL_END, v19, "Replayer-5-network", (const char *)&unk_4CA5E5, (uint8_t *)&v20, 2u);
  }
}

void __ProcessMessage_block_invoke_243(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 8) defaultDevice];
  id v3 = DEVICEOBJECT(v2);
  io_registry_entry_t v4 = [v3 acceleratorPort];

  int v5 = GetMetalPluginName(v4, 0);
  if ([v5 containsString:@"AGXMetal"])
  {
    id v6 = [*(id *)(a1 + 32) attributes];
    CFStringRef v7 = v6;
    if (!v6) {
      GTMTLReplayClient_embeddedDerivedCounterData(*(void *)(*(void *)(a1 + 56) + 8), *(void *)(a1 + 56) + 256, *(void **)(a1 + 40));
    }
    int v8 = [v6 objectForKeyedSubscript:@"collectInBackground"];

    if (v8)
    {
      dispatch_semaphore_t v9 = dispatch_semaphore_create(0);
      os_signpost_id_t v10 = *(void **)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = *(void *)(v11 + 8);
      os_signpost_id_t v13 = (id *)(v11 + 256);
      int v14 = *(void **)(a1 + 40);
      os_signpost_id_t v38 = _NSConcreteStackBlock;
      uint64_t v39 = 3221225472;
      uint64_t v40 = __ProcessMessage_block_invoke_2_247;
      long long v41 = &unk_745F20;
      dispatch_semaphore_t v42 = v9;
      id v43 = v10;
      os_signpost_id_t v15 = v9;
      BOOL v16 = GTMTLReplayClient_streamBatchFilteredData(v12, v13, v14, &v38);
      os_signpost_id_t v17 = *(void **)(a1 + 48);
      id v18 = [*(id *)(a1 + 32) kind:v38, v39, v40, v41];
      CFStringRef v48 = @"Batch Filtering Started";
      os_signpost_id_t v19 = +[NSNumber numberWithBool:v16];
      dispatch_semaphore_t v49 = v19;
      int v20 = +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
      int v21 = +[GTTransportMessage_replayer messageWithKind:v18 plistPayload:v20];
      [v17 send:v21 inReplyTo:*(void *)(a1 + 32) error:0];

      dispatch_semaphore_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      GTMTLReplayClient_addBatchFilteringRequest(*(void **)(a1 + 40));
      int v32 = *(void **)(a1 + 32);
      int v31 = (void *)(a1 + 32);
      id v33 = (void *)v31[2];
      id v34 = [v32 kind];
      CFStringRef v46 = @"Batch Filtering Request Received";
      id v35 = +[NSNumber numberWithBool:1];
      unint64_t v47 = v35;
      id v36 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
      id v37 = +[GTTransportMessage_replayer messageWithKind:v34 plistPayload:v36];
      [v33 send:v37 inReplyTo:*v31 error:0];
    }
  }
  else
  {
    CFStringRef v7 = GTMTLReplayClient_derivedCounterData(*(id **)(*(void *)(a1 + 56) + 8), (id *)(*(void *)(a1 + 56) + 256), *(void **)(a1 + 40));
    BOOL v22 = g_signpostLog;
    os_signpost_id_t v23 = v22;
    os_signpost_id_t v24 = *(void *)(a1 + 64);
    if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v22))
    {
      int v25 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)long long buf = 67109120;
      int v45 = v25;
      _os_signpost_emit_with_name_impl(&def_1C1270, v23, OS_SIGNPOST_INTERVAL_BEGIN, v24, "Replayer-5-network", "%u. kDYMessageReplayerDerivedCounterData", buf, 8u);
    }

    BOOL v26 = *(void **)(a1 + 48);
    id v27 = +[GTTransportMessage_replayer messageWithKind:plistPayload:](GTTransportMessage_replayer, "messageWithKind:plistPayload:", [*(id *)(a1 + 32) kind], v7);
    [v26 send:v27 inReplyTo:*(void *)(a1 + 32) error:0];

    BOOL v28 = g_signpostLog;
    os_signpost_id_t v29 = v28;
    os_signpost_id_t v30 = *(void *)(a1 + 64);
    if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v28))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&def_1C1270, v29, OS_SIGNPOST_INTERVAL_END, v30, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
    }
  }
}

id __ProcessMessage_block_invoke_251(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = g_signpostLog;
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-1-serial", "%u. kDYGenerateShaderDebuggerTrace", buf, 8u);
  }

  id v6 = [*(id *)(a1 + 32) attributes];
  CFStringRef v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [*(id *)(a1 + 32) objectPayload];
  }
  dispatch_semaphore_t v9 = v8;

  os_signpost_id_t v10 = GTMTLShaderDebugger_generateTrace();
  id v11 = 0;
  uint64_t v12 = v11;
  if (v10)
  {
    id v13 = v10;
  }
  else
  {
    id v14 = v11;
    os_signpost_id_t v15 = v14;
    if (v14)
    {
      id v16 = v14;
    }
    else
    {
      GTShaderDebuggerMakeError(1u, @"Internal error", 0, 0, 0);
      id v16 = (id)objc_claimAutoreleasedReturnValue();
    }
    os_signpost_id_t v17 = v16;
    CFStringRef v31 = @"Error";
    *(void *)long long buf = v16;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v31, 1, 0);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v18 = g_signpostLog;
  os_signpost_id_t v19 = v18;
  os_signpost_id_t v20 = *(void *)(a1 + 48);
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v18))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v19, OS_SIGNPOST_INTERVAL_END, v20, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
  }

  int v21 = g_signpostLog;
  BOOL v22 = v21;
  os_signpost_id_t v23 = *(void *)(a1 + 48);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v21))
  {
    int v24 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v24;
    _os_signpost_emit_with_name_impl(&def_1C1270, v22, OS_SIGNPOST_INTERVAL_BEGIN, v23, "Replayer-5-network", "%u. kDYGenerateShaderDebuggerTrace", buf, 8u);
  }

  int v25 = *(void **)(a1 + 40);
  BOOL v26 = +[GTTransportMessage_replayer messageWithKind:objectPayload:](GTTransportMessage_replayer, "messageWithKind:objectPayload:", [*(id *)(a1 + 32) kind], v13);
  [v25 send:v26 inReplyTo:*(void *)(a1 + 32) error:0];

  id v27 = g_signpostLog;
  BOOL v28 = v27;
  os_signpost_id_t v29 = *(void *)(a1 + 48);
  if (v29 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v27))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v28, OS_SIGNPOST_INTERVAL_END, v29, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
  }

  return [(id)g_activityLog leaveActivity];
}

void sub_2CE6FC(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id __ProcessMessage_block_invoke_252(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = ArchiveDirectory();
  id v3 = [v2 stringByAppendingPathComponent:*(void *)(a1 + 40)];

  id v4 = v3;
  DataSource = GTMTLReplayController_makeDataSource((const char *)[v4 UTF8String], **(apr_pool_t ***)(a1 + 56));
  id v6 = v4;
  id v7 = [objc_alloc((Class)NSURL) initFileURLWithPath:v6 isDirectory:1];

  id v8 = [objc_alloc((Class)NSURL) initWithString:@"metadata" relativeToURL:v7];
  id v9 = [objc_alloc((Class)NSDictionary) initWithContentsOfURL:v8 error:0];

  os_signpost_id_t v10 = *(void **)(*(void *)(a1 + 56) + 280);
  id v11 = [v9 objectForKeyedSubscript:@"DYCaptureEngine.launch_dictionary"];
  uint64_t v12 = [v11 objectForKeyedSubscript:@"title"];
  [v10 setWindowTitle:v12];

  id v13 = PreferDevice((uint64_t)DataSource);
  id v14 = [[GTMTLReplayObjectMap alloc] initWithDevice:v13];
  GTMTLReplaySupport_init(v13);
  GTMTLReplayController_initializeArgumentBufferSupport((uint64_t)DataSource, v13, v14);
  GTMTLReplayController_populateUnusedResources(DataSource, v14);
  *(void *)(*(void *)(a1 + 56) + 8) = GTMTLReplayController_makeController((uint64_t)DataSource, **(apr_pool_t ***)(a1 + 56), v13, v14, 0, 0);
  GTMTLReplayWireframeRenderer_initWithDevice(*(void *)(a1 + 56) + 96, v13);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

  os_signpost_id_t v15 = (void *)g_activityLog;

  return [v15 leaveActivity];
}

void sub_2CE914(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

id __ProcessMessage_block_invoke_266(uint64_t a1)
{
  [(id)g_activityLog enterMessage:*(void *)(a1 + 32)];
  uint64_t v2 = g_signpostLog;
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    v19[0] = 67109120;
    v19[1] = v5;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-1-serial", "%u. kDYMessageUpdateResourceObject", (uint8_t *)v19, 8u);
  }

  uint64_t v6 = *(void *)(a1 + 56);
  id v7 = [*(id *)(a1 + 32) attributes];
  id v8 = objc_opt_new();
  id v9 = [v7 objectForKeyedSubscript:@"type"];
  unsigned int v10 = [v9 unsignedIntValue];

  if (v10 == 13)
  {
    id v11 = +[NSNumber numberWithBool:UpdateLibraryResource(*(id **)(v6 + 8), v7, v8, 0)];
    [v8 setObject:v11 forKeyedSubscript:@"succeeded"];
  }
  uint64_t v12 = *(void **)(a1 + 40);
  id v13 = +[GTTransportMessage_replayer messageWithKind:attributes:objectPayload:](GTTransportMessage_replayer, "messageWithKind:attributes:objectPayload:", [*(id *)(a1 + 32) kind], 0, v8);
  [v12 send:v13 inReplyTo:*(void *)(a1 + 32) error:0];

  id v14 = [v8 objectForKeyedSubscript:@"succeeded"];
  LODWORD(v13) = [v14 BOOLValue];

  if (v13) {
    DisplayAttachmentIfNeeded(*(void *)(a1 + 56), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72));
  }
  os_signpost_id_t v15 = g_signpostLog;
  id v16 = v15;
  os_signpost_id_t v17 = *(void *)(a1 + 48);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v15))
  {
    LOWORD(v19[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v16, OS_SIGNPOST_INTERVAL_END, v17, "Replayer-1-serial", (const char *)&unk_4CA5E5, (uint8_t *)v19, 2u);
  }

  return [(id)g_activityLog leaveActivity];
}

void sub_2CEBB4(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

void __ProcessMessage_block_invoke_267(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  GTMTLReplayController_debugSubCommandStop(v2, *(_DWORD *)(a1 + 56), 0);
  AliasStreauint64_t m = (uint64_t *)GetAliasStream(*(void *)(*(void *)v2 + 24), *(void *)(a1 + 64), *(void *)(a1 + 56) + *(void *)(*(void *)v2 + 80) - 1);
  if (AliasStream) {
    uint64_t v4 = *AliasStream;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = g_signpostLog;
  uint64_t v6 = v5;
  os_signpost_id_t v7 = *(void *)(a1 + 72);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v5))
  {
    int v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)long long buf = 67109120;
    int v23 = v8;
    _os_signpost_emit_with_name_impl(&def_1C1270, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Replayer-1-serial", "%u. kGTMessageReplayerBeginAccelerationStructureSession", buf, 8u);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = __ProcessMessage_block_invoke_269;
  v17[3] = &unk_7460D0;
  uint64_t v20 = v2;
  uint64_t v11 = *(void *)(a1 + 32);
  id v18 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  id v19 = v12;
  uint64_t v21 = v13;
  +[GTAccelerationStructureServerSession sessionWithReplayClient:v9 functionIndex:v10 requestID:0 transport:v11 dataHandler:0 accelerationStructureKey:v4 completionHandler:v17];
  id v14 = g_signpostLog;
  os_signpost_id_t v15 = v14;
  os_signpost_id_t v16 = *(void *)(a1 + 72);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v14))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v15, OS_SIGNPOST_INTERVAL_END, v16, "Replayer-1-serial", (const char *)&unk_4CA5E5, buf, 2u);
  }
}

void __ProcessMessage_block_invoke_269(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 48), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v7 = 0;
  do
  {
    ++v7;
    int v8 = *(void **)(*(void *)(a1 + 48) + 56);
    uint64_t v9 = +[NSNumber numberWithUnsignedInteger:v7];
    uint64_t v10 = [v8 objectForKey:v9];
  }
  while (v10);
  uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 56);
  id v12 = +[NSNumber numberWithUnsignedInteger:v7];
  [v11 setObject:v5 forKey:v12];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 48));
  [v5 setSessionID:v7];
  os_signpost_id_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 3221225472;
  id v18 = __ProcessMessage_block_invoke_2_270;
  id v19 = &unk_746988;
  id v13 = *(id *)(a1 + 32);
  uint64_t v23 = v7;
  id v20 = v13;
  id v21 = v6;
  id v22 = *(id *)(a1 + 40);
  id v14 = v6;
  os_signpost_id_t v15 = +[NSBlockOperation blockOperationWithBlock:&v16];
  [*(id *)(*(void *)(a1 + 56) + 264) addOperation:v15, v16, v17, v18, v19];
}

void __ProcessMessage_block_invoke_2_270(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) kind];
  v6[0] = @"sessionId";
  id v3 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
  v6[1] = @"error";
  v7[0] = v3;
  v7[1] = *(void *)(a1 + 40);
  uint64_t v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  id v5 = +[GTTransportMessage_replayer messageWithKind:v2 objectPayload:v4];

  [*(id *)(a1 + 48) send:v5 inReplyTo:*(void *)(a1 + 32) error:0];
}

void __ProcessMessage_block_invoke_2_247(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = +[GTTransportMessage_replayer messageWithKind:4124 plistPayload:a2];
    [*(id *)(a1 + 40) send:v4 inReplyTo:0 error:0];
  }
  else
  {
    id v3 = *(NSObject **)(a1 + 32);
    dispatch_semaphore_signal(v3);
  }
}

uint64_t __Block_byref_object_copy__5795(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5796(uint64_t a1)
{
}

void __ProcessMessage_block_invoke_203(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v17 = 0;
    id v18 = &v17;
    uint64_t v19 = 0x3032000000;
    id v20 = __Block_byref_object_copy__5795;
    id v21 = __Block_byref_object_dispose__5796;
    id v22 = 0;
    id v5 = [v3 copy];
    id v6 = (void *)v18[5];
    v18[5] = (uint64_t)v5;

    uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = __ProcessMessage_block_invoke_2_211;
    id v14 = &unk_746030;
    os_signpost_id_t v16 = &v17;
    id v15 = *(id *)(a1 + 32);
    int v8 = +[NSBlockOperation blockOperationWithBlock:&v11];
    [v7 addOperation:v8, v11, v12, v13, v14];

    _Block_object_dispose(&v17, 8);
  }
  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) waitUntilAllOperationsAreFinished];
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = +[GTTransportMessage_replayer messageWithKind:4124 plistPayload:&off_759300];
    [v9 send:v10 inReplyTo:0 error:0];

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
}

void sub_2CF31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ProcessMessage_block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v17 = 0;
    id v18 = &v17;
    uint64_t v19 = 0x3032000000;
    id v20 = __Block_byref_object_copy__5795;
    id v21 = __Block_byref_object_dispose__5796;
    id v22 = 0;
    id v5 = [v3 copy];
    id v6 = (void *)v18[5];
    v18[5] = (uint64_t)v5;

    uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = __ProcessMessage_block_invoke_4;
    id v14 = &unk_746030;
    os_signpost_id_t v16 = &v17;
    id v15 = *(id *)(a1 + 32);
    int v8 = +[NSBlockOperation blockOperationWithBlock:&v11];
    [v7 addOperation:v8, v11, v12, v13, v14];

    _Block_object_dispose(&v17, 8);
  }
  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) waitUntilAllOperationsAreFinished];
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = +[GTTransportMessage_replayer messageWithKind:4124 plistPayload:&off_759328];
    [v9 send:v10 inReplyTo:0 error:0];

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    NSLog(@"Streamed All Shader Profiler Data");
  }
}

void sub_2CF4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ProcessMessage_block_invoke_5(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v17 = 0;
    id v18 = &v17;
    uint64_t v19 = 0x3032000000;
    id v20 = __Block_byref_object_copy__5795;
    id v21 = __Block_byref_object_dispose__5796;
    id v22 = 0;
    id v5 = [v3 copy];
    id v6 = (void *)v18[5];
    v18[5] = (uint64_t)v5;

    uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = __ProcessMessage_block_invoke_6;
    id v14 = &unk_746030;
    os_signpost_id_t v16 = &v17;
    id v15 = *(id *)(a1 + 32);
    int v8 = +[NSBlockOperation blockOperationWithBlock:&v11];
    [v7 addOperation:v8, v11, v12, v13, v14];

    _Block_object_dispose(&v17, 8);
  }
  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) waitUntilAllOperationsAreFinished];
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = +[GTTransportMessage_replayer messageWithKind:4124 plistPayload:&off_759350];
    [v9 send:v10 inReplyTo:0 error:0];

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
}

void sub_2CF6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ProcessMessage_block_invoke_6(uint64_t a1)
{
  id v2 = +[GTTransportMessage_replayer messageWithKind:4124 plistPayload:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  [*(id *)(a1 + 32) send:v2 inReplyTo:0 error:0];
}

void __ProcessMessage_block_invoke_4(uint64_t a1)
{
  id v2 = +[GTTransportMessage_replayer messageWithKind:4124 plistPayload:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  [*(id *)(a1 + 32) send:v2 inReplyTo:0 error:0];
}

void __ProcessMessage_block_invoke_2_211(uint64_t a1)
{
  id v2 = +[GTTransportMessage_replayer messageWithKind:4124 plistPayload:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  [*(id *)(a1 + 32) send:v2 inReplyTo:0 error:0];
}

void __ProcessMessage_block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = +[GTTransportMessage_replayer messageWithKind:4105 attributes:a2 objectPayload:&__kCFBooleanTrue];
  [v3 send:v4 inReplyTo:*(void *)(a1 + 40) error:0];
}

void __UpdateLibraries_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(*(void *)(a1 + 48) + 128);
  id v8 = v4;
  id v6 = [v4 objectForKeyedSubscript:@"object"];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];

  if (v7) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = UpdateLibraryResource(*(id **)(a1 + 48), v8, *(void **)(a1 + 32), v7);
  }
}

id __DisplayAttachmentIfNeeded_block_invoke(uint64_t a1)
{
  [(id)g_activityLog enterDisplayAttachmentAtIndex:*(void *)(a1 + 48)];
  GTMTLReplayClient_displayAttachment(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 32, *(_DWORD *)(a1 + 48), *(unsigned int *)(a1 + 52));
  id v2 = (void *)g_activityLog;

  return [v2 leaveActivity];
}

void sub_2CF994(_Unwind_Exception *a1)
{
  [*(id *)(v1 + 56) leaveActivity];
  _Unwind_Resume(a1);
}

void GTMTLReplayClient_createOldTransport(uint64_t a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, a4);
  long long v70 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v66 = 0;
  uint64_t v50 = newpool;
  *(void *)&long long v55 = 0xFF0000FF00FF00FFLL;
  DWORD2(v55) = 1082130432;
  *(void *)&long long v56 = [objc_alloc((Class)NSMutableArray) initWithCapacity:128];
  id v67 = objc_alloc_init((Class)NSOperationQueue);
  id v68 = objc_alloc_init((Class)NSOperationQueue);
  id v69 = [objc_alloc((Class)NSMutableArray) initWithCapacity:16];
  __copy_assignment_8_8_t0w88_s88_S_s96_s104_t112w8_s120_s128_s136_t144w8_s152_s160_s168_s176_s184_s192_s200_s208_s216_s224_s232_s240_s248_S_s256_s264_s272_s280_s288(a1, (uint64_t)&v50);
  [*(id *)(a1 + 264) setName:@"gputools.MTLReplayer.parallelQueue"];
  [*(id *)(a1 + 256) setName:@"gputools.MTLReplayer.serialQueue"];
  [*(id *)(a1 + 256) setMaxConcurrentOperationCount:1];
  if (!a2)
  {
    if (s_logUsingOsLog)
    {
      id v34 = gt_default_log();
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_FAULT)) {
        goto LABEL_27;
      }
      LOWORD(buf) = 0;
      id v35 = "fail: [create_transport] GT_HOST_URL environment not set";
      id v36 = v34;
      uint32_t v37 = 2;
      goto LABEL_26;
    }
    uint64_t v39 = __stderrp;
    [+[NSString stringWithFormat:@"fail: [create_transport] GT_HOST_URL environment not set"] UTF8String];
    fprintf(v39, "%s\n");
LABEL_27:
    abort();
  }
  id v6 = +[NSString stringWithCString:a2 encoding:4];
  if (!v6) {
    __assert_rtn("GTTransport *DYCreateTransportC(const char *)", "", 0, "url_str");
  }
  uint64_t v7 = +[NSURL URLWithString:v6];
  id v8 = v7;
  if (!v7)
  {
    if (s_logUsingOsLog)
    {
      os_signpost_id_t v38 = gt_default_log();
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_FAULT)) {
        goto LABEL_27;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a2;
      id v35 = "fail: [create_transport] failed to parse GT_HOST_URL: %s";
LABEL_25:
      id v36 = v38;
      uint32_t v37 = 12;
LABEL_26:
      _os_log_fault_impl(&def_1C1270, v36, OS_LOG_TYPE_FAULT, v35, (uint8_t *)&buf, v37);
      goto LABEL_27;
    }
    uint64_t v40 = __stderrp;
    [+[NSString stringWithFormat:@"fail: [create_transport] failed to parse GT_HOST_URL: %s", a2] UTF8String];
    goto LABEL_32;
  }
  uint64_t v9 = [(NSURL *)v7 scheme];
  if ([(NSString *)v9 isEqualToString:@"null"])
  {
    id v10 = 0;
    goto LABEL_12;
  }
  if ([(NSString *)v9 isEqualToString:@"file"])
  {
    uint64_t v11 = off_4F5380;
  }
  else
  {
    if (![(NSString *)v9 isEqualToString:@"dysmt"]
      && ![(NSString *)v9 isEqualToString:@"dysmtdeferred"])
    {
      goto LABEL_22;
    }
    uint64_t v11 = off_4F5378;
  }
  id v10 = [objc_alloc(*v11) initWithMode:1];
  [v10 setUrl:v8];
  if (!v10)
  {
LABEL_22:
    if (s_logUsingOsLog)
    {
      os_signpost_id_t v38 = gt_default_log();
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_FAULT)) {
        goto LABEL_27;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a2;
      id v35 = "fail: [create_transport] failed to create transport; GT_HOST_URL: %s";
      goto LABEL_25;
    }
    uint64_t v40 = __stderrp;
    -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"fail: [create_transport] failed to create transport; GT_HOST_URL: %s",
        a2),
      "UTF8String");
LABEL_32:
    fprintf(v40, "%s\n");
    goto LABEL_27;
  }
LABEL_12:
  [v10 setSynchronous:1];
  dispatch_queue_t v43 = dispatch_queue_create("gputools.global_sync", 0);
  id v12 = [v10 newSourceWithQueue:];
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  v47[2] = __GTMTLReplayClient_createOldTransport_block_invoke;
  v47[3] = &unk_746148;
  uint64_t v49 = a1;
  id v13 = v10;
  id v48 = v13;
  [v12 setMessageHandler:v47];
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  void v45[2] = __GTMTLReplayClient_createOldTransport_block_invoke_2;
  v45[3] = &unk_746170;
  dsema = dispatch_semaphore_create(0);
  CFStringRef v46 = dsema;
  [v12 setRegistrationHandler:v45];
  [v12 resume];
  dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_t v42 = [v13 connect];
  [v42 BOOLResult];
  id v14 = [[ReplayErrorTransport alloc] initWithTransport:v13];
  objc_storeStrong((id *)&_observer, v14);

  id v15 = v13;
  mach_timebase_info((mach_timebase_info_t)&g_DYTimebaseInfo);
  id v16 = v15;
  v72.tv_sec = 0;
  *(void *)&v72.tv_usec = 0;
  uint64_t v18 = mach_absolute_time();
  gettimeofday(&v72, 0);
  uint64_t v19 = mach_absolute_time();
  CFStringRef v73 = @"nanoseconds since epoch timestamp";
  id v20 = +[NSNumber numberWithUnsignedLongLong:1000000000 * v72.tv_sec + 1000 * v72.tv_usec];
  *(void *)&long long buf = v20;
  CFStringRef v74 = @"mach absolute timestamp";
  id v21 = +[NSNumber numberWithUnsignedLongLong:v18 + ((v19 - v18) >> 1)];
  *((void *)&buf + 1) = v21;
  CFStringRef v75 = @"mach timebase numerator";
  id v22 = +[NSNumber numberWithUnsignedInt:g_DYTimebaseInfo];
  unsigned int v78 = v22;
  CFStringRef v76 = @"mach timebase denominator";
  uint64_t v23 = +[NSNumber numberWithUnsignedInt:dword_77301C];
  unsigned int v79 = v23;
  int v24 = +[NSDictionary dictionaryWithObjects:&buf forKeys:&v73 count:4];

  int v25 = +[GTTransportMessage_replayer messageWithKind:1539 attributes:v24];
  [v16 send:v25 inReplyTo:0 error:0];

  BOOL v26 = +[NSBundle mainBundle];
  id v27 = [v26 executablePath];
  BOOL v28 = [v26 bundleIdentifier];
  if (v28)
  {
    os_signpost_id_t v29 = [v26 bundleIdentifier];
  }
  else
  {
    os_signpost_id_t v29 = &stru_7482F0;
  }

  CFStringRef v73 = @"pid";
  os_signpost_id_t v30 = +[NSNumber numberWithInt:getpid()];
  *(void *)&long long buf = v30;
  CFStringRef v74 = @"path";
  CFStringRef v31 = [v26 bundlePath];
  *((void *)&buf + 1) = v31;
  unsigned int v78 = v27;
  CFStringRef v75 = @"executable-path";
  CFStringRef v76 = @"identifier";
  unsigned int v79 = v29;
  int v32 = +[NSDictionary dictionaryWithObjects:&buf forKeys:&v73 count:4];

  id v33 = +[GTTransportMessage_replayer messageWithKind:1536 attributes:v32];
  [v16 send:v33 error:0];

  __destructor_8_s88_S_s96_s104_s120_s128_s136_s152_s160_s168_s176_s184_s192_s200_s208_s216_s224_s232_s240_s248_S_s256_s264_s272_s280_s288((uint64_t)&v50);
}

void sub_2D01B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  __destructor_8_s88_S_s96_s104_s120_s128_s136_s152_s160_s168_s176_s184_s192_s200_s208_s216_s224_s232_s240_s248_S_s256_s264_s272_s280_s288((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_assignment_8_8_t0w88_s88_S_s96_s104_t112w8_s120_s128_s136_t144w8_s152_s160_s168_s176_s184_s192_s200_s208_s216_s224_s232_s240_s248_S_s256_s264_s272_s280_s288(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  objc_storeStrong((id *)(a1 + 88), *(id *)(a2 + 88));
  objc_storeStrong((id *)(a1 + 96), *(id *)(a2 + 96));
  objc_storeStrong((id *)(a1 + 104), *(id *)(a2 + 104));
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  objc_storeStrong((id *)(a1 + 120), *(id *)(a2 + 120));
  objc_storeStrong((id *)(a1 + 128), *(id *)(a2 + 128));
  objc_storeStrong((id *)(a1 + 136), *(id *)(a2 + 136));
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  objc_storeStrong((id *)(a1 + 152), *(id *)(a2 + 152));
  objc_storeStrong((id *)(a1 + 160), *(id *)(a2 + 160));
  objc_storeStrong((id *)(a1 + 168), *(id *)(a2 + 168));
  objc_storeStrong((id *)(a1 + 176), *(id *)(a2 + 176));
  objc_storeStrong((id *)(a1 + 184), *(id *)(a2 + 184));
  objc_storeStrong((id *)(a1 + 192), *(id *)(a2 + 192));
  objc_storeStrong((id *)(a1 + 200), *(id *)(a2 + 200));
  objc_storeStrong((id *)(a1 + 208), *(id *)(a2 + 208));
  objc_storeStrong((id *)(a1 + 216), *(id *)(a2 + 216));
  objc_storeStrong((id *)(a1 + 224), *(id *)(a2 + 224));
  objc_storeStrong((id *)(a1 + 232), *(id *)(a2 + 232));
  objc_storeStrong((id *)(a1 + 240), *(id *)(a2 + 240));
  objc_storeStrong((id *)(a1 + 248), *(id *)(a2 + 248));
  objc_storeStrong((id *)(a1 + 256), *(id *)(a2 + 256));
  objc_storeStrong((id *)(a1 + 264), *(id *)(a2 + 264));
  objc_storeStrong((id *)(a1 + 272), *(id *)(a2 + 272));
  objc_storeStrong((id *)(a1 + 280), *(id *)(a2 + 280));
  id v8 = *(void **)(a2 + 288);

  objc_storeStrong((id *)(a1 + 288), v8);
}

void __destructor_8_s88_S_s96_s104_s120_s128_s136_s152_s160_s168_s176_s184_s192_s200_s208_s216_s224_s232_s240_s248_S_s256_s264_s272_s280_s288(uint64_t a1)
{
  __destructor_8_s0_s8_s24_s32_s40_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_s144_s152(a1 + 96);
  id v2 = *(void **)(a1 + 288);
}

void __destructor_8_s0_s8_s24_s32_s40_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_s144_s152(uint64_t a1)
{
  id v2 = *(void **)(a1 + 152);
}

uint64_t AddResourceRestoreRequest(apr_array_header_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  int v8 = *(_DWORD *)(a3 + 4);
  if (v8 <= -10241)
  {
    if (v8 == -16313)
    {
LABEL_18:
      memset(v79, 0, 48);
      DYTraceDecode_MTLDevice_newBufferWithBytes_length_options((uint64_t)v79, a3, (*(_DWORD *)a3 - 36), 0);
      AliasStreauint64_t m = (uint64_t *)GetAliasStream(v7, v79[0].i64[1], a4);
      if (AliasStream) {
        uint64_t v24 = *AliasStream;
      }
      else {
        uint64_t v24 = 0;
      }
      int v45 = apr_pstrdup(a1->pool, (const char *)v79[1].i64[0]);
      CFStringRef v46 = apr_array_push(a1);
      uint64_t v47 = v79[1].i64[1];
      *CFStringRef v46 = 22;
      v46[1] = v24;
      uint64_t v46[2] = a4;
      v46[3] = v45;
      v46[4] = 0;
      v46[5] = v47;
      v46[7] = 0;
LABEL_51:
      v46[6] = 0;
    }
    else
    {
      if (v8 == -16236)
      {
LABEL_16:
        uint64_t v81 = 0;
        int64x2_t v80 = 0u;
        memset(v79, 0, sizeof(v79));
        DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage((uint64_t)v79, a3, (*(_DWORD *)a3 - 36), 0);
        id v21 = (uint64_t *)GetAliasStream(v7, v79[0].i64[0], a4);
        if (v21) {
          uint64_t v22 = *v21;
        }
        else {
          uint64_t v22 = 0;
        }
        int v25 = apr_pstrdup(a1->pool, (const char *)v79[4].i64[1]);
        BOOL v26 = (char *)apr_array_push(a1);
        int v27 = v81;
        int32x2_t v28 = vmovn_s64(v80);
        int16x4_t v29 = vmovn_s32(vuzp1q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)&v79[3] + 8), *(int8x16_t *)((char *)&v79[3] + 8), 8uLL), *(int32x4_t *)((char *)v79 + 8)));
        int16x4_t v30 = vmovn_s32(vuzp1q_s32(*(int32x4_t *)((char *)&v79[1] + 8), *(int32x4_t *)((char *)&v79[2] + 8)));
        *(void *)BOOL v26 = 80;
        *((void *)v26 + 1) = v22;
        *((void *)v26 + 2) = a4;
        *((void *)v26 + 3) = v25;
        *((int16x4_t *)v26 + 4) = v29;
        *((int16x4_t *)v26 + 5) = v30;
        *((int32x2_t *)v26 + 6) = v28;
        *((_DWORD *)v26 + 14) = v27;
      }
      else
      {
        if (v8 != -16234) {
          return result;
        }
        memset(v79, 0, sizeof(v79));
        DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow((uint64_t)v79, a3, (*(_DWORD *)a3 - 36), 0);
        uint64_t v11 = (uint64_t *)GetAliasStream(v7, v79[0].i64[0], a4);
        if (v11) {
          uint64_t v12 = *v11;
        }
        else {
          uint64_t v12 = 0;
        }
        long long v51 = apr_pstrdup(a1->pool, (const char *)v79[4].i64[0]);
        BOOL v26 = (char *)apr_array_push(a1);
        __int16 v52 = v79[2].i16[4];
        int64x2_t v53 = v79[3];
        __int32 v54 = v79[4].i32[2];
        int16x4_t v55 = vmovn_s32(vuzp1q_s32(*(int32x4_t *)((char *)v79 + 8), *(int32x4_t *)((char *)&v79[1] + 8)));
        *(void *)BOOL v26 = 80;
        *((void *)v26 + 1) = v12;
        *((void *)v26 + 2) = a4;
        *((void *)v26 + 3) = v51;
        *((_WORD *)v26 + 16) = 0;
        *((_WORD *)v26 + 17) = v53.i16[4];
        *(int16x4_t *)(v26 + 36) = v55;
        *((_WORD *)v26 + 22) = v52;
        *((_WORD *)v26 + 23) = v53.i16[0];
        *((_DWORD *)v26 + 12) = v54;
        *(void *)(v26 + 52) = 0;
      }
      *((_DWORD *)v26 + 15) = 0;
    }
    return 1;
  }
  if (v8 > -10220)
  {
    switch(v8)
    {
      case -10219:
        v79[0].i64[0] = *(void *)(a3 + 40);
        uint64_t v82 = 12;
        appended = AppendString_12841((const char **)&v79[0].i64[1], a3 + 36, &v82);
        os_signpost_id_t v38 = (uint64_t *)GetAliasStream(v7, v79[0].i64[0], a4);
        if (v38) {
          uint64_t v39 = *v38;
        }
        else {
          uint64_t v39 = 0;
        }
        int v71 = apr_pstrdup(a1->pool, appended);
        timeval v72 = apr_array_push(a1);
        void *v72 = 57;
        v72[1] = v39;
        v72[2] = a4;
        v72[3] = v71;
        *((_OWORD *)v72 + 2) = 0u;
        *((_OWORD *)v72 + 3) = 0u;
        break;
      case -10194:
        uint64_t v40 = a3 + 36;
        v79[0].i64[0] = *(void *)(a3 + 44);
        uint64_t v82 = 16;
        long long v41 = AppendString_12841((const char **)&v79[0].i64[1], a3 + 36, &v82);
        uint64_t v42 = *(void *)(v40 + ((v82 + 3) & 0xFFFFFFFFFFFFFFFCLL));
        dispatch_queue_t v43 = (uint64_t *)GetAliasStream(v7, v79[0].i64[0], a4);
        if (v43) {
          uint64_t v44 = *v43;
        }
        else {
          uint64_t v44 = 0;
        }
        CFStringRef v73 = apr_pstrdup(a1->pool, v41);
        CFStringRef v74 = apr_array_push(a1);
        void *v74 = 16;
        v74[1] = v44;
        v74[2] = a4;
        v74[3] = v73;
        v74[4] = v42;
        v74[5] = 0;
        uint64_t result = 1;
        v74[6] = 0;
        void v74[7] = 0;
        return result;
      case -10190:
        uint64_t v14 = a3 + 36;
        v79[0].i64[0] = *(void *)(a3 + 52);
        uint64_t v82 = 24;
        id v15 = AppendString_12841((const char **)&v79[0].i64[1], a3 + 36, &v82);
        unint64_t v16 = (v82 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v17 = *(void *)(v14 + v16);
        v79[0].i64[1] = (uint64_t)v15;
        v79[1].i64[0] = v17;
        uint64_t v82 = v16 + 8;
        uint64_t v18 = (char *)AppendString_12841((const char **)&v79[1].i64[1], v14, &v82);
        uint64_t v19 = *(void *)(v14 + ((v82 + 3) & 0xFFFFFFFFFFFFFFFCLL));
        id v20 = (uint64_t *)GetAliasStream(v7, v79[0].i64[0], a4);
        if (v20) {
          uint64_t v78 = *v20;
        }
        else {
          uint64_t v78 = 0;
        }
        id v77 = apr_pstrdup(a1->pool, (const char *)v79[0].i64[1]);
        long long v56 = *(apr_pool_t ***)(a2 + 8);
        long long v57 = *v56;
        Data = GTCaptureArchive_readData(*(const char ***)a2, v56, v18, *v56, 0);
        if (v19) {
          LODWORD(v60) = v19;
        }
        else {
          unint64_t v60 = v58 >> 3;
        }
        long long v61 = apr_palloc(a1->pool, 8 * v60);
        long long v62 = v61;
        if (v60)
        {
          char v63 = 0;
          uint64_t v64 = v60;
          long long v65 = v61;
          do
          {
            uint64_t v66 = *(void *)Data;
            Data += 8;
            id v67 = (uint64_t *)GetAliasStream(v7, v66, a4);
            if (v67) {
              uint64_t v68 = *v67;
            }
            else {
              uint64_t v68 = 0;
            }
            *v65++ = v68;
            v63 |= v68 == 0;
            --v64;
          }
          while (v64);
          apr_pool_clear(v57);
          if (v63) {
            return 1;
          }
        }
        else
        {
          apr_pool_clear(v57);
        }
        CFStringRef v75 = apr_array_push(a1);
        uint64_t v76 = v79[1].i64[0];
        *CFStringRef v75 = 16;
        v75[1] = v78;
        v75[2] = a4;
        v75[3] = v77;
        void v75[4] = v76;
        v75[5] = v62;
        *((_DWORD *)v75 + 12) = v60;
        *((_DWORD *)v75 + 13) = 0;
        break;
      default:
        return result;
    }
    return 1;
  }
  switch(v8)
  {
    case -10240:
      memset(v79, 0, 40);
      DYTraceDecode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v79, a3);
      uint64_t v9 = (uint64_t *)GetAliasStream(v7, v79[0].i64[1], a4);
      if (v9) {
        uint64_t v10 = *v9;
      }
      else {
        uint64_t v10 = 0;
      }
      id v48 = apr_pstrdup(a1->pool, (const char *)v79[1].i64[0]);
      uint64_t v49 = apr_array_push(a1);
      long long v50 = *(long long *)((char *)&v79[1] + 8);
      void *v49 = 22;
      v49[1] = v10;
      v49[2] = a4;
      v49[3] = v48;
      *((_OWORD *)v49 + 2) = v50;
      return 1;
    case -10238:
    case -10236:
      goto LABEL_16;
    case -10237:
      goto LABEL_18;
    case -10232:
      uint64_t v31 = a3 + 36;
      int v32 = strcmp((const char *)(a3 + 36), "CUulul");
      uint64_t v33 = 12;
      if (!v32) {
        uint64_t v33 = 8;
      }
      v79[0].i64[0] = *(void *)(v31 + v33);
      uint64_t v82 = v33 + 8;
      id v34 = AppendString_12841((const char **)&v79[0].i64[1], v31, &v82);
      v79[1] = *(int64x2_t *)(v31 + ((v82 + 3) & 0xFFFFFFFFFFFFFFFCLL));
      id v35 = (uint64_t *)GetAliasStream(v7, v79[0].i64[0], a4);
      if (v35) {
        uint64_t v36 = *v35;
      }
      else {
        uint64_t v36 = 0;
      }
      id v69 = apr_pstrdup(a1->pool, v34);
      CFStringRef v46 = apr_array_push(a1);
      int32x2_t v70 = vmovn_s64(v79[1]);
      *CFStringRef v46 = 86;
      v46[1] = v36;
      uint64_t v46[2] = a4;
      v46[3] = v69;
      v46[4] = v70;
      v46[7] = 0;
      v46[5] = 0;
      goto LABEL_51;
    default:
      return result;
  }
  return result;
}

uint64_t GTMTLDataSource_compareRestores(uint64_t a1, uint64_t a2)
{
  int RestoreSortingOrder = GetRestoreSortingOrder(a1);
  return RestoreSortingOrder - GetRestoreSortingOrder(a2);
}

uint64_t GetRestoreSortingOrder(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  if (*(uint64_t *)a1 > 59)
  {
    if (v1 > 82)
    {
      if (v1 == 86) {
        return 4;
      }
      if (v1 == 83) {
        return 2;
      }
    }
    else
    {
      if (v1 == 60) {
        return 1;
      }
      if (v1 == 80) {
        return 5;
      }
    }
    return 0;
  }
  switch(v1)
  {
    case 16:
      if (*(_DWORD *)(a1 + 48)) {
        return 7;
      }
      else {
        return 6;
      }
    case 22:
      return 3;
    case 57:
      return 8;
    default:
      return 0;
  }
}

id SharedBufferArray_retainArray(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 8) copy];
  [*(id *)(a1 + 8) removeAllObjects];
  id v3 = [v2 lastObject];
  long long v4 = v3;
  if (v3)
  {
    unint64_t v5 = *(void *)(a1 + 16);
    long long v6 = [v3 buffer];
    id v7 = [v6 length];

    if (v5 < (unint64_t)v7) {
      [*(id *)(a1 + 8) addObject:v4];
    }
  }

  return v2;
}

void SharedCommandBuffer_clearCommandBuffer(uint64_t a1)
{
  [*(id *)(a1 + 16) endEncoding];
  id v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  id v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
}

id SharedCommandBuffer_commandBuffer(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
  if (!v2)
  {
    uint64_t v3 = InternalCommandBuffer(*(void **)a1, @"SharedCommandBuffer");
    long long v4 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v3;

    id v2 = *(void **)(a1 + 8);
  }

  return v2;
}

id InternalCommandBuffer(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 isStatEnabled])
  {
    id v5 = [v3 getStatLocations];
    [v3 setStatLocations:0];
    long long v6 = NewCommandBuffer(v3);
    [v3 setStatLocations:v5];
  }
  else
  {
    long long v6 = NewCommandBuffer(v3);
  }
  id v7 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", v4];

  [v6 setLabel:v7];

  return v6;
}

id InternalBlitCommandEncoder(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 isStatEnabled])
  {
    id v5 = [v4 getStatLocations];
    [v4 setStatLocations:0];
    long long v6 = [v3 blitCommandEncoder];
    [v4 setStatLocations:v5];
  }
  else
  {
    long long v6 = [v3 blitCommandEncoder];
  }

  return v6;
}

void verifyPerCounterCommandData(void *a1, void *a2, void *a3, id a4)
{
  id v7 = a2;
  id v8 = a3;
  if (g_runningValidationCI)
  {
    int16x4_t v30 = [a1 objectForKeyedSubscript:v7];
    if (v30)
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v28 = v8;
      obuint64_t j = v8;
      id v9 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
      if (!v9) {
        goto LABEL_18;
      }
      id v10 = v9;
      uint64_t v11 = *(void *)v32;
      id v12 = v7;
      while (1)
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v11) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void *)(*((void *)&v31 + 1) + 8 * i);
          id v15 = [v30 objectForKeyedSubscript:v14];
          unint64_t v16 = v15;
          if (v15)
          {
            if ([v15 count] == a4) {
              goto LABEL_16;
            }
            uint64_t v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Counter %@ had incorrect number of results when validating %@ dictionary, size was %lu should be %lu", v14, v7, [v16 count], a4);
            uint64_t v18 = 579;
          }
          else
          {
            uint64_t v17 = +[NSString stringWithFormat:@"Counter %@ not found when validating %@ dictionary", v14, v7];
            uint64_t v18 = 575;
          }
          uint64_t v19 = __stdoutp;
          if (g_runningInCI) {
            id v20 = "#CI_ERROR# ";
          }
          else {
            id v20 = "";
          }
          id v21 = v17;
          fprintf(v19, "%s%s %u: %s\n", v20, "void verifyPerCounterCommandData(NSDictionary *__strong, NSString *__strong, NSArray *__strong, NSUInteger)", v18, (const char *)[v21 UTF8String]);
          id v22 = v21;
          GTMTLReplay_handleError(101, (uint64_t)[v22 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"verifyPerCounterCommandData", v18, 1);

          id v7 = v12;
LABEL_16:
        }
        id v10 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
        if (!v10)
        {
LABEL_18:

          id v8 = v28;
          goto LABEL_23;
        }
      }
    }
    uint64_t v23 = +[NSString stringWithFormat:@"Dictionary %@ not found in JSON dictionary", v7];
    uint64_t v24 = __stdoutp;
    if (g_runningInCI) {
      int v25 = "#CI_ERROR# ";
    }
    else {
      int v25 = "";
    }
    id v26 = v23;
    fprintf(v24, "%s%s %u: %s\n", v25, "void verifyPerCounterCommandData(NSDictionary *__strong, NSString *__strong, NSArray *__strong, NSUInteger)", 567, (const char *)[v26 UTF8String]);
    id v27 = v26;
    GTMTLReplay_handleError(101, (uint64_t)[v27 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"verifyPerCounterCommandData", 567, 1);

LABEL_23:
  }
}

void __BatchIdFilteredCounters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 objectForKeyedSubscript:@"batchfiltered"];
  unsigned int v6 = [v5 BOOLValue];

  if (v6)
  {
    id v7 = [v4 objectForKeyedSubscript:@"vendorCounters"];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(a1 + 32) addObject:*(void *)(*((void *)&v12 + 1) + 8 * (void)v11)];
          uint64_t v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v9);
    }
  }
}

id GenerateSimplePriorityList(void *a1, unint64_t *a2)
{
  id v2 = a1;
  id v3 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v2 count]];
  unint64_t v4 = 0;
  if ([v2 count])
  {
    unint64_t v5 = 0;
    do
    {
      unsigned int v6 = [v2 objectAtIndexedSubscript:v5];
      unsigned int v7 = [v6 unsignedIntValue];

      if (v7)
      {
        id v8 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v7];
        for (uint64_t i = 0; i != v7; ++i)
        {
          uint64_t v10 = +[NSNumber numberWithUnsignedInteger:i];
          [v8 addObject:v10];
        }
        [v3 addObject:v8];
        if (v4 <= v7) {
          unint64_t v4 = v7;
        }
      }
      ++v5;
    }
    while (v5 < (unint64_t)[v2 count]);
  }
  if (g_runningInCI)
  {
    uint64_t v11 = +[NSString stringWithFormat:@"Batch ID filtering will require %lu batches", v4];
    long long v12 = [v11 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    long long v13 = __stdoutp;
    id v14 = v12;
    fprintf(v13, "#CI-INFO# %s\n", (const char *)[v14 UTF8String]);
  }
  if (a2) {
    *a2 = v4;
  }

  return v3;
}

id RemoveUnfilterableCounters(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 mutableCopy];
  uint64_t v20 = 0;
  id v21 = &v20;
  uint64_t v22 = 0x3032000000;
  uint64_t v23 = __Block_byref_object_copy__6315;
  uint64_t v24 = __Block_byref_object_dispose__6316;
  id v25 = (id)objc_opt_new();
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = __RemoveUnfilterableCounters_block_invoke;
  v17[3] = &unk_746260;
  id v6 = v4;
  id v18 = v6;
  uint64_t v19 = &v20;
  [v5 enumerateKeysAndObjectsUsingBlock:v17];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = (id)v21[5];
  id v8 = [v7 countByEnumeratingWithState:&v13 objects:v26 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v7);
        }
        [v5 removeObjectForKey:*(void *)(*((void *)&v13 + 1) + 8 * i) v13];
      }
      id v8 = [v7 countByEnumeratingWithState:&v13 objects:v26 count:16];
    }
    while (v8);
  }

  id v11 = [v5 copy];
  _Block_object_dispose(&v20, 8);

  return v11;
}

void sub_2D2ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6315(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6316(uint64_t a1)
{
}

void __RemoveUnfilterableCounters_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v3];
  }
}

uint64_t GTMTLReplay_CLI(const char *a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, a4);
  id v684 = objc_alloc_init((Class)NSOperationQueue);
  id v685 = objc_alloc_init((Class)NSOperationQueue);
  [v685 setName:@"gputools.MTLReplayer.parallelQueue"];
  [v684 setName:@"gputools.MTLReplayer.serialQueue"];
  [v684 setMaxConcurrentOperationCount:1];
  if (g_runningInCI)
  {
    id v5 = +[NSString stringWithFormat:@"MTLReplayer attempting to open capture archive: %s", a1];
    id v6 = [v5 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    id v7 = __stdoutp;
    id v8 = v6;
    fprintf(v7, "#CI-INFO# %s\n", (const char *)[v8 UTF8String]);
  }
  uint64_t v9 = newpool;
  DataSource = GTMTLReplayController_makeDataSource(a1, newpool);
  if (!DataSource)
  {
    id v18 = +[NSString stringWithFormat:@"Failed to open capture archive: %s", a1];
    uint64_t v19 = __stdoutp;
    int v20 = g_runningInCI;
    id v21 = v18;
    uint64_t v22 = (const char *)[v21 UTF8String];
    uint64_t v23 = "#CI_ERROR# ";
    if (!v20) {
      uint64_t v23 = "";
    }
    fprintf(v19, "%s%s %u: %s\n", v23, "int GTMTLReplay_CLI(const char *, GTMTLReplayCLIOptions, void (*)(NSData *__strong, NSURL *__strong))", 673, v22);
    id v24 = v21;
    uint64_t v25 = 1;
    GTMTLReplay_handleError(101, (uint64_t)[v24 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"GTMTLReplay_CLI", 673, 1);
    goto LABEL_344;
  }
  if (g_runningInCI)
  {
    id v11 = +[NSString stringWithFormat:@"MTLReplayer opened capture archive: %s", a1];
    long long v12 = [v11 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    long long v13 = __stdoutp;
    id v14 = v12;
    fprintf(v13, "#CI-INFO# %s\n", (const char *)[v14 UTF8String]);
  }
  long long v15 = +[NSFileManager defaultManager];
  id v683 = 0;
  [v15 createDirectoryAtPath:@"/tmp/com.apple.gputools.profiling" withIntermediateDirectories:1 attributes:0 error:&v683];
  id v591 = v683;

  uint64_t v592 = +[NSString stringWithUTF8String:*(void *)(GTMTLSMContext_getObject(*(void *)DataSource[5], 1, DataSource[10])[5] + 64)];
  long long v16 = +[NSUserDefaults standardUserDefaults];
  unint64_t v595 = [v16 stringForKey:@"GPUMTLOverrideDeviceFamily"];

  if (*(void *)(a2 + 40))
  {
    +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    id v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (!v595 || (unsigned int v26 = [v592 hasPrefix:v595], v27 = v595, v26)) {
      id v27 = v592;
    }
    id v17 = v27;
  }
  v586 = v17;
  uint64_t v28 = *(void *)(GTMTLSMContext_getObject(*(void *)DataSource[5], 1, DataSource[10])[5] + 16);
  int16x4_t v29 = (void (*)(uint64_t))dlsym((void *)0xFFFFFFFFFFFFFFFDLL, "MTLOverrideDeviceCreationFlags");
  if (v29) {
    v29(v28);
  }
  if (g_runningInCI)
  {
    int16x4_t v30 = +[NSString stringWithFormat:@"Creating system default device"];
    long long v31 = [v30 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    long long v32 = __stdoutp;
    id v33 = v31;
    fprintf(v32, "#CI-INFO# %s\n", (const char *)[v33 UTF8String]);
  }
  id v607 = MTLCreateSystemDefaultDevice();
  if (g_runningInCI)
  {
    long long v34 = [v607 name];
    id v35 = +[NSString stringWithFormat:@"Selected default device %@", v34];

    uint64_t v36 = [v35 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    uint32_t v37 = __stdoutp;
    id v38 = v36;
    fprintf(v37, "#CI-INFO# %s\n", (const char *)[v38 UTF8String]);
  }
  uint64_t v39 = DEVICEOBJECT(v607);
  io_registry_entry_t v40 = [v39 acceleratorPort];

  unsigned int v682 = 0x7FFFFFFF;
  off_t v600 = GetMetalPluginName(v40, &v682);
  uint64_t v620 = v682;
  if (v682 == 0x80000000) {
    uint64_t v620 = MetalPluginTarget(v600);
  }
  int v631 = IsAGXMetalPlugin(v600, v41);
  if (v631)
  {
    uint64_t v42 = DEVICEOBJECT(v607);
    char v43 = objc_opt_respondsToSelector();

    if (v43)
    {
      [v607 setShaderDebugInfoCaching:1];
      if (g_runningInCI)
      {
        uint64_t v44 = +[NSString stringWithFormat:@"Enabled shaderDebugInfoCaching on device"];
        int v45 = [v44 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

        CFStringRef v46 = __stdoutp;
        id v47 = v45;
        fprintf(v46, "#CI-INFO# %s\n", (const char *)[v47 UTF8String]);
      }
    }
    if ((*(unsigned char *)(a2 + 186) & 0x40) != 0)
    {
      id v48 = GTProfilerConfigurationVariables(v40);
      uint64_t v49 = [v48 objectForKeyedSubscript:@"num_cores"];
      unsigned int v50 = [v49 unsignedIntValue];

      if ((int)v620 > 5 || v620 == 5 && v50 >= 7) {
        *(_DWORD *)(a2 + 184) = *(_DWORD *)(a2 + 184) & 0xFF3FFFFF | 0x800000;
      }
    }
  }
  if (g_runningInCI)
  {
    long long v51 = +[NSString stringWithFormat:@"Calling GTMTLReplaySupport_init()"];
    __int16 v52 = [v51 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    int64x2_t v53 = __stdoutp;
    id v54 = v52;
    fprintf(v53, "#CI-INFO# %s\n", (const char *)[v54 UTF8String]);
  }
  int16x4_t v55 = [[GTMTLReplayObjectMap alloc] initWithDevice:v607];
  GTMTLReplaySupport_init(v607);
  GTMTLReplayController_initializeArgumentBufferSupport((uint64_t)DataSource, v607, v55);
  GTMTLReplayController_populateUnusedResources(DataSource, v55);
  unint64_t v593 = v55;
  if (g_runningInCI)
  {
    long long v56 = +[NSString stringWithFormat:@"Calling GTMTLReplayController_makeController()"];
    long long v57 = [v56 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    unint64_t v58 = __stdoutp;
    id v59 = v57;
    fprintf(v58, "#CI-INFO# %s\n", (const char *)[v59 UTF8String]);
  }
  Controller = (uint64_t *)GTMTLReplayController_makeController((uint64_t)DataSource, v9, v607, v55, 0, 0);
  if ((*(unsigned char *)(a2 + 186) & 0xF0) != 0)
  {
    size_t v60 = os_proc_available_memory();
    uint64_t v61 = v60 - 0x10000000;
    if (v60 - 0x10000000 >= 0x18000000) {
      uint64_t v61 = 402653184;
    }
    if (v60 >> 28) {
      unint64_t v62 = v61;
    }
    else {
      unint64_t v62 = 0;
    }
    if (g_runningInCI)
    {
      char v63 = +[NSString stringWithFormat:@"OptimizingRestores, maxBufferLen = %zu, availableMemory = %zu\n", v62, os_proc_available_memory()];
      uint64_t v64 = [v63 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

      long long v65 = __stdoutp;
      id v66 = v64;
      fprintf(v65, "#CI-INFO# %s\n", (const char *)[v66 UTF8String]);
    }
    GTMTLReplayController_optimizeRestores((uint64_t)Controller, v62);
  }
  int v67 = g_runningInCI;
  if (g_runningInCI)
  {
    uint64_t v68 = +[NSString stringWithFormat:@"Creating GTMTLReplayWireframeRenderer"];
    id v69 = [v68 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    int32x2_t v70 = __stdoutp;
    id v71 = v69;
    fprintf(v70, "#CI-INFO# %s\n", (const char *)[v71 UTF8String]);

    int v67 = g_runningInCI;
  }
  v674[1] = 0;
  v674[0] = 0;
  memset(&v674[3], 0, 24);
  long long v675 = 0u;
  long long v676 = 0u;
  long long v677 = 0u;
  long long v678 = 0u;
  long long v679 = 0u;
  long long v680 = 0u;
  uint64_t v681 = 0;
  if (v67)
  {
    timeval v72 = +[NSString stringWithFormat:@"Calling GTMTLReplayWireframeRenderer_initWithDevice()"];
    CFStringRef v73 = [v72 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    CFStringRef v74 = __stdoutp;
    id v75 = v73;
    fprintf(v74, "#CI-INFO# %s\n", (const char *)[v75 UTF8String]);
  }
  uint64_t v76 = [(id)Controller[1] defaultDevice];
  GTMTLReplayWireframeRenderer_initWithDevice((uint64_t)v674, v76);

  id v77 = getenv("ATF_RESULTSDIRECTORY");
  if (!v77 || g_runningInCI)
  {
    uint64_t v78 = a2;
    if (g_runningInCI)
    {
      unsigned int v79 = +[NSString stringWithFormat:@"options.saveDestination=%s", *(void *)(a2 + 48)];
      int64x2_t v80 = [v79 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

      uint64_t v81 = __stdoutp;
      id v82 = v80;
      fprintf(v81, "#CI-INFO# %s\n", (const char *)[v82 UTF8String]);

      uint64_t v78 = a2;
    }
  }
  else
  {
    uint64_t v78 = a2;
    *(void *)(a2 + 48) = v77;
    *(_DWORD *)(a2 + 184) |= 0x40u;
  }
  unint64_t v83 = +[NSString stringWithUTF8String:*(void *)(v78 + 48)];
  v601 = +[NSURL fileURLWithPath:v83 isDirectory:1];

  unint64_t v84 = +[NSFileManager defaultManager];
  [v84 createDirectoryAtURL:v601 withIntermediateDirectories:1 attributes:0 error:0];

  id v85 = +[NSString stringWithUTF8String:a1];
  uint64_t v86 = [v85 lastPathComponent];
  v594 = [v86 stringByDeletingPathExtension];

  unsigned int v87 = *(_DWORD *)(a2 + 184);
  if (v87)
  {
    if (g_runningInCI)
    {
      int v126 = +[NSString stringWithFormat:@"Calling GenerateThumbnails"];
      id v127 = [v126 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

      id v128 = __stdoutp;
      id v129 = v127;
      fprintf(v128, "#CI-INFO# %s\n", (const char *)[v129 UTF8String]);
    }
    v670[2] = _NSConcreteStackBlock;
    v670[3] = (id)3221225472;
    v670[4] = __GTMTLReplay_CLI_block_invoke;
    v670[5] = &unk_746288;
    id v671 = v594;
    uint64_t v673 = a3;
    id v672 = v601;
    v670[1] = 0;
    char Thumbnails = GenerateThumbnails((uint64_t)Controller, (uint64_t)v674, (uint64_t)&v684, a2);
    id v596 = 0;
    if ((Thumbnails & 1) == 0)
    {
      GTMTLReplay_handleNSError(v596);
      char v131 = +[NSString stringWithFormat:@"Failed to generate thumbnails!"];
      unsigned int v132 = __stdoutp;
      int v133 = g_runningInCI;
      id v134 = v131;
      BOOL v135 = (const char *)[v134 UTF8String];
      unint64_t v136 = "#CI_ERROR# ";
      if (!v133) {
        unint64_t v136 = "";
      }
      fprintf(v132, "%s%s %u: %s\n", v136, "int GTMTLReplay_CLI(const char *, GTMTLReplayCLIOptions, void (*)(NSData *__strong, NSURL *__strong))", 808, v135);
      id v137 = v134;
      GTMTLReplay_handleError(101, (uint64_t)[v137 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"GTMTLReplay_CLI", 808, 1);
    }
    id v99 = v671;
    goto LABEL_337;
  }
  if ((v87 & 0xC40000) == 0x40000)
  {
    if (g_runningInCI)
    {
      id v88 = +[NSString stringWithFormat:@"profileBatchIdFilter"];
      uint64_t v89 = [v88 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

      BOOL v90 = __stdoutp;
      id v91 = v89;
      fprintf(v90, "#CI-INFO# %s\n", (const char *)[v91 UTF8String]);
    }
    if (v631)
    {
      if ((v620 & 0x80000000) == 0)
      {
        if (g_runningInCI)
        {
          id v92 = +[NSString stringWithFormat:@"targetIndex=%d", v620];
          int64_t v93 = [v92 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

          long long v94 = __stdoutp;
          id v95 = v93;
          fprintf(v94, "#CI-INFO# %s\n", (const char *)[v95 UTF8String]);
        }
        int v96 = [(id)Controller[1] defaultDevice];
        uint64_t v97 = DYMTLReplayFrameProfiler_loadAnalysis(v96);
        id v596 = [v97 mutableCopy];

        unsigned int v98 = [v596 objectForKeyedSubscript:@"DerivedCounterDictionary"];
        id v99 = [v98 mutableCopy];

        verifyCounterDictionary(v99);
        v624 = [v99 objectForKeyedSubscript:@"DerivedCounters"];
        long long v100 = +[NSBundle mainBundle];
        uint64_t v101 = [v100 pathForResource:@"GPUCounterGraph" ofType:@"plist"];

        id v102 = v101;
        v632 = objc_opt_new();
        if (v102)
        {
          BOOL v103 = +[NSDictionary dictionaryWithContentsOfFile:v102];
          long long v104 = v103;
          if (v103)
          {
            long long v105 = [v103 objectForKey:@"counters"];
            id v719 = _NSConcreteStackBlock;
            uint64_t v720 = 3221225472;
            uint64_t v721 = (uint64_t)__BatchIdFilteredCounters_block_invoke;
            v722 = (__CFString *)&unk_746238;
            id v723 = v632;
            [v105 enumerateKeysAndObjectsUsingBlock:&v719];
          }
        }

        [v632 addObject:@"GPUTime"];
        uint64_t v106 = RemoveUnfilterableCounters(v624, v632);
        [v99 setObject:v106 forKeyedSubscript:@"DerivedCounters"];
        [v596 setObject:v99 forKeyedSubscript:@"DerivedCounterDictionary"];
        if (g_runningInCI)
        {
          int v107 = +[NSString stringWithFormat:@"Filtered counter list from %lu to %lu counters" count:[v624 count] count:[v106 count]];
          BOOL v108 = [v107 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

          int v109 = __stdoutp;
          id v110 = v108;
          fprintf(v109, "#CI-INFO# %s\n", (const char *)[v110 UTF8String]);
        }
        int v608 = GTMTLReplayHost_rawCounters(v106);
        uint64_t v111 = GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
        id v112 = [v111 mutableCopy];

        GTMTLReplayHost_rawCountersToNormalizeSet(v106);
        obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
        [v112 setObject:&__kCFBooleanTrue forKeyedSubscript:@"NoBlitSampling"];
        [v112 setObject:&__kCFBooleanTrue forKeyedSubscript:@"SampleEncoders"];
        [v112 setObject:&__kCFBooleanFalse forKeyedSubscript:@"SplitEncoderData"];
        [v112 setObject:obj forKeyedSubscript:@"NormalizedCounters"];
        uint64_t v113 = [v112 objectForKeyedSubscript:@"activePerEncoderDrawCallCount"];
        if (v113)
        {
          [v112 setObject:v596 forKeyedSubscript:@"derivedCounterInfo"];
          long long v114 = +[NSNumber numberWithUnsignedInt:(*(_DWORD *)(a2 + 184) >> 18) & 1];
          [v112 setObject:v114 forKeyedSubscript:@"profileBatchIdFilter"];

          [v112 setObject:v608 forKeyedSubscript:@"profileCounters"];
          [v112 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
          BOOL v115 = +[NSNumber numberWithInt:v620];
          [v112 setObject:v115 forKeyedSubscript:@"gpuTarget"];

          int v116 = GenerateSimplePriorityList(v113, 0);
          [v112 setObject:v116 forKeyedSubscript:@"encoderBatchPriorityList"];

          [v112 setObject:0 forKeyedSubscript:@"pause"];
          [v112 setObject:&__kCFBooleanTrue forKeyedSubscript:@"resume"];
          [v112 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
          uint64_t v720 = 0;
          id v719 = 0;
          uint64_t v721 = 0;
          id v719 = [v601 path];
          uint64_t v720 = +[NSString stringWithUTF8String:a1];
          uint64_t v721 = 256;
          uint64_t v117 = [[GTShaderProfilerHelper alloc] initWithOptions:&v719];
          -[GTShaderProfilerHelper profileBatchIdFilteredData:withPayload:forReplayController:](v117, "profileBatchIdFilteredData:withPayload:forReplayController:", *Controller, v112);
          objc_initWeak(&location, v117);
          v669[0] = _NSConcreteStackBlock;
          v669[1] = 3221225472;
          v669[2] = __GTMTLReplay_CLI_block_invoke_2;
          v669[3] = &unk_7462B0;
          objc_copyWeak(v670, &location);
          GTMTLReplayClient_streamBatchFilteredData((uint64_t)Controller, &v684, v112, v669);
          if (g_runningInCI)
          {
            int v118 = +[NSString stringWithFormat:@"Waiting for batch ID streaming..."];
            char v119 = [v118 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            uint64_t v120 = __stdoutp;
            id v121 = v119;
            fprintf(v120, "#CI-INFO# %s\n", (const char *)[v121 UTF8String]);
          }
          [v685 waitUntilAllOperationsAreFinished];
          if (g_runningInCI)
          {
            unsigned int v122 = +[NSString stringWithFormat:@"Finished"];
            long long v123 = [v122 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            uint64_t v124 = __stdoutp;
            id v125 = v123;
            fprintf(v124, "#CI-INFO# %s\n", (const char *)[v125 UTF8String]);
          }
          objc_destroyWeak(v670);
          objc_destroyWeak(&location);
        }
        else
        {
          id v336 = +[NSString stringWithFormat:@"activePerEncoderDrawCallCount missing in payload"];
          uint64_t v337 = __stdoutp;
          int v338 = g_runningInCI;
          id v339 = v336;
          long long v340 = (const char *)[v339 UTF8String];
          long long v341 = "#CI_ERROR# ";
          if (!v338) {
            long long v341 = "";
          }
          fprintf(v337, "%s%s %u: %s\n", v341, "int GTMTLReplay_CLI(const char *, GTMTLReplayCLIOptions, void (*)(NSData *__strong, NSURL *__strong))", 854, v340);
          id v342 = v339;
          GTMTLReplay_handleError(101, (uint64_t)[v342 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"GTMTLReplay_CLI", 854, 1);
        }
        goto LABEL_337;
      }
      uint64_t v225 = +[NSString stringWithFormat:@"-profileBatchIdFilter only supported on recent AGX devices"];
      uint64_t v226 = __stdoutp;
      int v227 = g_runningInCI;
      id v228 = v225;
      id v229 = (const char *)[v228 UTF8String];
      uint64_t v230 = "#CI_ERROR# ";
      if (!v227) {
        uint64_t v230 = "";
      }
      fprintf(v226, "%s%s %u: %s\n", v230, "int GTMTLReplay_CLI(const char *, GTMTLReplayCLIOptions, void (*)(NSData *__strong, NSURL *__strong))", 821, v229);
      id v598 = v228;
      GTMTLReplay_handleError(101, (uint64_t)[v598 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"GTMTLReplay_CLI", 821, 1);
    }
    else
    {
      id v213 = +[NSString stringWithFormat:@"-profileBatchIdFilter only supported on AGX devices"];
      id v214 = __stdoutp;
      int v215 = g_runningInCI;
      id v216 = v213;
      uint64_t v217 = (const char *)[v216 UTF8String];
      int v218 = "#CI_ERROR# ";
      if (!v215) {
        int v218 = "";
      }
      fprintf(v214, "%s%s %u: %s\n", v218, "int GTMTLReplay_CLI(const char *, GTMTLReplayCLIOptions, void (*)(NSData *__strong, NSURL *__strong))", 817, v217);
      id v597 = v216;
      GTMTLReplay_handleError(101, (uint64_t)[v597 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"GTMTLReplay_CLI", 817, 1);
    }
    goto LABEL_338;
  }
  id v24 = v591;
  if ((v87 & 0x100) == 0)
  {
    if ((v87 & 0x20000) != 0)
    {
      if (v631)
      {
        BOOL v219 = objc_opt_new();
        [v219 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
        [v219 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseMTLCounters"];
        [v219 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseKicktimestamps"];
        [v219 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceComputeEncoders"];
        [v219 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceBlitEncoders"];
        [v219 setObject:&off_759C78 forKeyedSubscript:@"GPUState"];
        id v596 = v219;
        GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
        id v99 = (id)objc_claimAutoreleasedReturnValue();
        [v219 addEntriesFromDictionary:v99];
        uint64_t v720 = 0;
        id v719 = 0;
        uint64_t v721 = 0;
        id v719 = [v601 path];
        uint64_t v720 = +[NSString stringWithUTF8String:a1];
        uint64_t v721 = 4416;
        if (g_runningInCI)
        {
          uint64_t v220 = +[NSString stringWithFormat:@"Creating Streaming Shader Profiler Helper"];
          uint64_t v221 = [v220 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

          uint64_t v222 = __stdoutp;
          id v223 = v221;
          fprintf(v222, "#CI-INFO# %s\n", (const char *)[v223 UTF8String]);
        }
        id v224 = [[GTShaderProfilerHelper alloc] initWithOptions:&v719];
        -[GTShaderProfilerHelper profileShadersForDataSource:withPayload:forReplayController:](v224, "profileShadersForDataSource:withPayload:forReplayController:", *Controller, v596);
        objc_initWeak(&location, v224);
        v665[0] = _NSConcreteStackBlock;
        v665[1] = 3221225472;
        v665[2] = __GTMTLReplay_CLI_block_invoke_301;
        v665[3] = &unk_7462B0;
        objc_copyWeak(&v666, &location);
        GTMTLReplayClient_streamShaderProfilingData((uint64_t)Controller, &v684, v596, v665);
        [v685 waitUntilAllOperationsAreFinished];
        objc_destroyWeak(&v666);
        objc_destroyWeak(&location);

        goto LABEL_337;
      }
    }
    else
    {
      if ((v631 & (v87 >> 23)) == 1)
      {
        unint64_t v138 = [(id)Controller[1] defaultDevice];
        BOOL v139 = DYMTLReplayFrameProfiler_loadAnalysis(v138);
        id v596 = [v139 mutableCopy];

        GTShaderProfilerStreamDataFromReplayDataSource();
        id v99 = (id)objc_claimAutoreleasedReturnValue();
        [v99 setMetalPluginName:v600];
        id v140 = +[NSString stringWithUTF8String:a1];
        BOOL v141 = [v140 lastPathComponent];
        [v99 setTraceName:v141];

        [v99 setSupportsFileFormatV2:1];
        id v719 = 0;
        uint64_t v720 = (uint64_t)&v719;
        uint64_t v721 = 0x2020000000;
        v722 = 0;
        locatiouint64_t n = 0;
        p_locatiouint64_t n = &location;
        uint64_t v717 = 0x2020000000;
        uint64_t v718 = 0;
        v711 = 0;
        v712 = &v711;
        uint64_t v713 = 0x2020000000;
        uint64_t v714 = 0;
        size_t v142 = [v596 objectForKeyedSubscript:@"DerivedCounterDictionary"];
        id v143 = v142;
        if (v142)
        {
          verifyCounterDictionary(v142);
          BOOL v144 = [v143 objectForKeyedSubscript:@"DerivedCounters"];
          long long v145 = GTMTLReplayHost_rawCounters(v144);
          [v596 setObject:v145 forKeyedSubscript:@"profileCounters"];

          if (g_runningInCI)
          {
            long long v146 = [v596 description];
            BOOL v147 = +[NSString stringWithFormat:@"Derived Counters %@", v146];

            long long v148 = [v147 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            long long v149 = __stdoutp;
            id v150 = v148;
            fprintf(v149, "#CI-INFO# %s\n", (const char *)[v150 UTF8String]);
          }
          v633 = GTMTLReplayHost_rawCountersToNormalizeSet(v144);
        }
        else
        {
          v633 = 0;
        }
        id v464 = [[GTGPUAPSConfig alloc] initForProfiling];
        id v629 = [[GTGPUAPSConfig alloc] initForCounters];
        int v465 = objc_opt_new();
        [v465 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
        [v465 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceComputeEncoders"];
        [v465 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceBlitEncoders"];
        uint64_t v466 = +[NSNumber numberWithInt:v620];
        [v465 setObject:v466 forKeyedSubscript:@"gpuTarget"];

        int v467 = v633;
        if (!v633) {
          int v467 = objc_opt_new();
        }
        [v465 setObject:v467 forKeyedSubscript:@"NormalizedCounters"];
        if (!v633) {

        }
        [v465 setObject:v596 forKeyedSubscript:@"derivedCounterInfo"];
        [v465 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseKicktimestamps"];
        int v468 = [v464 toDictionary];
        [v465 setObject:v468 forKeyedSubscript:@"ProfilingConfig"];

        uint64_t v469 = [v629 toDictionary];
        [v465 setObject:v469 forKeyedSubscript:@"CounterConfig"];

        [v465 setObject:&__kCFBooleanTrue forKeyedSubscript:@"useOverlap"];
        uint64_t v470 = GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
        [v465 addEntriesFromDictionary:v470];
        if (v99)
        {
          if (g_runningInCI)
          {
            uint64_t v471 = +[NSString stringWithFormat:@"Collecting APS Data..."];
            long long v472 = [v471 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            long long v473 = __stdoutp;
            id v474 = v472;
            fprintf(v473, "#CI-INFO# %s\n", (const char *)[v474 UTF8String]);
          }
          *(void *)&long long v695 = 0;
          *((void *)&v695 + 1) = &v695;
          *(void *)&long long v696 = 0x2020000000;
          BYTE8(v696) = 0;
          *(void *)&long long v691 = 0;
          *((void *)&v691 + 1) = &v691;
          *(void *)&long long v692 = 0x2020000000;
          BYTE8(v692) = 0;
          dispatch_semaphore_t v475 = dispatch_semaphore_create(0);
          v657[0] = _NSConcreteStackBlock;
          v657[1] = 3221225472;
          v657[2] = __GTMTLReplay_CLI_block_invoke_2_323;
          v657[3] = &unk_7462D8;
          uint64_t v476 = v475;
          v658 = v476;
          v660 = &v695;
          id v659 = v99;
          id v661 = &v719;
          id v662 = &v691;
          v663 = &location;
          v664 = &v711;
          GTMTLReplayClient_collectAPSData((uint64_t)Controller, &v684, v465, v657);
          if (g_runningInCI)
          {
            uint64_t v477 = +[NSString stringWithFormat:@"Waiting for APS Data..."];
            v478 = [v477 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            uint64_t v479 = __stdoutp;
            id v480 = v478;
            fprintf(v479, "#CI-INFO# %s\n", (const char *)[v480 UTF8String]);
          }
          dispatch_semaphore_wait(v476, 0xFFFFFFFFFFFFFFFFLL);
          [v685 waitUntilAllOperationsAreFinished];

          _Block_object_dispose(&v691, 8);
          _Block_object_dispose(&v695, 8);
        }

        if ((*(unsigned char *)(a2 + 186) & 4) != 0)
        {
          long long v481 = BatchIdFiterableCounters();
          NSLog(@"Filered: Batch Id Filtered Derived Counters %@", v481);
          long long v482 = GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
          id v483 = [v482 mutableCopy];

          long long v484 = objc_opt_new();
          [v483 setObject:&__kCFBooleanTrue forKeyedSubscript:@"NoBlitSampling"];
          [v483 setObject:&__kCFBooleanTrue forKeyedSubscript:@"SampleEncoders"];
          [v483 setObject:&__kCFBooleanFalse forKeyedSubscript:@"SplitEncoderData"];
          [v483 setObject:v484 forKeyedSubscript:@"NormalizedCounters"];
          long long v485 = [v483 objectForKeyedSubscript:@"activePerEncoderDrawCallCount"];
          *(void *)&long long v691 = 0;
          [v483 setObject:v596 forKeyedSubscript:@"derivedCounterInfo"];
          int v486 = +[NSNumber numberWithUnsignedInt:(*(_DWORD *)(a2 + 184) >> 18) & 1];
          [v483 setObject:v486 forKeyedSubscript:@"profileBatchIdFilter"];

          [v483 setObject:v481 forKeyedSubscript:@"profileCounters"];
          [v483 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
          int v487 = +[NSNumber numberWithInt:v620];
          [v483 setObject:v487 forKeyedSubscript:@"gpuTarget"];

          long long v488 = GenerateSimplePriorityList(v485, (unint64_t *)&v691);
          [v483 setObject:v488 forKeyedSubscript:@"encoderBatchPriorityList"];

          [v483 setObject:0 forKeyedSubscript:@"pause"];
          [v483 setObject:&__kCFBooleanTrue forKeyedSubscript:@"resume"];
          [v483 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
          *(void *)&long long v695 = 0;
          *((void *)&v695 + 1) = &v695;
          long long v696 = 0x2020000000uLL;
          v656[0] = _NSConcreteStackBlock;
          v656[1] = 3221225472;
          v656[2] = __GTMTLReplay_CLI_block_invoke_3;
          v656[3] = &unk_746300;
          v656[4] = &v695;
          v656[5] = v691;
          GTMTLReplayClient_streamBatchFilteredData((uint64_t)Controller, &v684, v483, v656);
          if (g_runningInCI)
          {
            int v489 = +[NSString stringWithFormat:@"Waiting for batch ID streaming..."];
            uint64_t v490 = [v489 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            uint64_t v491 = __stdoutp;
            id v492 = v490;
            fprintf(v491, "#CI-INFO# %s\n", (const char *)[v492 UTF8String]);
          }
          [v685 waitUntilAllOperationsAreFinished];
          uint64_t v493 = [v99 archivedBatchIdFilteredCounterData];
          id v494 = [v493 count];
          BOOL v495 = v494 == (id)v691;

          if (g_runningInCI) {
            char v496 = v495;
          }
          else {
            char v496 = 1;
          }
          if ((v496 & 1) == 0)
          {
            uint64_t v497 = v691;
            uint64_t v498 = [v99 archivedBatchIdFilteredCounterData];
            uint64_t v499 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Invalid batch ID fitering counter count, expected max batches: %lu, got: %lu", v497, [v498 count]);

            v500 = [v499 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-ERROR# "];

            __int16 v501 = __stdoutp;
            id v502 = v500;
            fprintf(v501, "#CI-ERROR# %s\n", (const char *)[v502 UTF8String]);
          }
          _Block_object_dispose(&v695, 8);
        }
        if (g_runningInCI)
        {
          uint64_t v503 = +[NSString stringWithFormat:@"Finished"];
          uint64_t v504 = [v503 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

          v505 = __stdoutp;
          id v506 = v504;
          fprintf(v505, "#CI-INFO# %s\n", (const char *)[v506 UTF8String]);
        }
        if (*(void *)(a2 + 48))
        {
          uint64_t v507 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
          v508 = [v507 stringByStandardizingPath];

          LOBYTE(v695) = 0;
          v509 = +[NSFileManager defaultManager];
          [v509 createDirectoryAtPath:v508 withIntermediateDirectories:1 attributes:0 error:0];

          long long v510 = +[NSFileManager defaultManager];
          unsigned int v511 = [v510 fileExistsAtPath:v508 isDirectory:&v695];

          if ((_BYTE)v695) {
            unsigned int v512 = v511;
          }
          else {
            unsigned int v512 = 0;
          }
          if (v512 == 1)
          {
            v513 = +[NSString stringWithUTF8String:a1];
            int v514 = [v513 lastPathComponent];
            v515 = [v514 stringByDeletingPathExtension];
            int v516 = +[NSString stringWithFormat:@"%@.gpuprofiler_raw", v515];
            uint64_t v517 = [v508 stringByAppendingPathComponent:v516];

            v508 = (void *)v517;
          }
          uint64_t v518 = [v508 pathExtension];
          unsigned __int8 v519 = [v518 isEqualToString:@"gpuprofiler_raw"];

          if ((v519 & 1) == 0)
          {
            uint64_t v520 = [v508 stringByAppendingPathExtension:@"gpuprofiler_raw"];

            v508 = (void *)v520;
          }
          NSLog(@"Save Destination %@", v508);
          uint64_t v521 = +[NSFileManager defaultManager];
          unsigned int v522 = [v521 fileExistsAtPath:v508];

          if (v522)
          {
            uint64_t v523 = +[NSFileManager defaultManager];
            [v523 removeItemAtPath:v508 error:0];
          }
          uint64_t v524 = +[NSURL fileURLWithPath:v508];
          id v525 = [v99 encode:v524 error:0];

          uint64_t v526 = +[NSFileManager defaultManager];
          NSLog(@"Written %u at Destination %@", [v526 fileExistsAtPath:v508], v508);

          [v99 cleanupLocalFiles];
        }

        _Block_object_dispose(&v711, 8);
        _Block_object_dispose(&location, 8);
        _Block_object_dispose(&v719, 8);
        goto LABEL_337;
      }
      if ((v631 & (v87 >> 22)) == 1)
      {
        long long v254 = objc_opt_new();
        [v254 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
        id v255 = +[NSNumber numberWithInt:v620];
        [v254 setObject:v255 forKeyedSubscript:@"gpuTarget"];
        id v596 = v254;

        [v254 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseMTLCounters"];
        [v254 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseKicktimestamps"];
        [v254 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceComputeEncoders"];
        [v254 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceBlitEncoders"];
        int v256 = *(_DWORD *)(a2 + 164);
        if ((v256 & 0x80000000) == 0)
        {
          if (v256 <= 2) {
            uint64_t v257 = 2;
          }
          else {
            uint64_t v257 = v256;
          }
          uint64_t v258 = +[NSNumber numberWithInt:v257];
          [v254 setObject:v258 forKeyedSubscript:@"GPUState"];
        }
        uint64_t v259 = GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
        [v596 addEntriesFromDictionary:v259];
        id v582 = (id)v259;
        v634 = GTShaderProfilerStreamDataFromReplayDataSource();
        [v634 setMetalPluginName:v600];
        long long v260 = +[NSString stringWithUTF8String:a1];
        id v261 = [v260 lastPathComponent];
        [v634 setTraceName:v261];

        id v719 = 0;
        uint64_t v720 = (uint64_t)&v719;
        uint64_t v721 = 0x2020000000;
        v722 = 0;
        locatiouint64_t n = 0;
        p_locatiouint64_t n = &location;
        uint64_t v717 = 0x2020000000;
        uint64_t v718 = 0;
        v711 = 0;
        v712 = &v711;
        uint64_t v713 = 0x2020000000;
        uint64_t v714 = 0;
        if (v634)
        {
          if (g_runningInCI)
          {
            uint64_t v262 = +[NSString stringWithFormat:@"Collecting Timeline Data..."];
            os_signpost_id_t v263 = [v262 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            unsigned int v264 = __stdoutp;
            id v265 = v263;
            fprintf(v264, "#CI-INFO# %s\n", (const char *)[v265 UTF8String]);
          }
          v653[0] = _NSConcreteStackBlock;
          v653[1] = 3221225472;
          v653[2] = __GTMTLReplay_CLI_block_invoke_4;
          v653[3] = &unk_746328;
          id v266 = v634;
          id v654 = v266;
          v655 = &v719;
          GTMTLReplayClient_collectGPUShaderTimelineData((uint64_t)Controller, &v684, v596, v653);
          if (g_runningInCI)
          {
            int v267 = +[NSString stringWithFormat:@"Waiting for GPU Timeline..."];
            id v268 = [v267 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            uint64_t v269 = __stdoutp;
            id v270 = v268;
            fprintf(v269, "#CI-INFO# %s\n", (const char *)[v270 UTF8String]);
          }
          [v685 waitUntilAllOperationsAreFinished];
          if (g_runningInCI)
          {
            id v271 = +[NSString stringWithFormat:@"Collecting Shader Profiler Data..."];
            uint64_t v272 = [v271 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            os_signpost_id_t v273 = __stdoutp;
            id v274 = v272;
            fprintf(v273, "#CI-INFO# %s\n", (const char *)[v274 UTF8String]);
          }
          v650[0] = _NSConcreteStackBlock;
          v650[1] = 3221225472;
          v650[2] = __GTMTLReplay_CLI_block_invoke_5;
          v650[3] = &unk_746328;
          id v275 = v266;
          id v651 = v275;
          v652 = &location;
          GTMTLReplayClient_streamShaderProfilingData((uint64_t)Controller, &v684, v596, v650);
          if (g_runningInCI)
          {
            uint64_t v276 = +[NSString stringWithFormat:@"Waiting for Shader Profiler..."];
            uint64_t v277 = [v276 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            int v278 = __stdoutp;
            id v279 = v277;
            fprintf(v278, "#CI-INFO# %s\n", (const char *)[v279 UTF8String]);
          }
          [v685 waitUntilAllOperationsAreFinished];
          if (g_runningInCI)
          {
            v280 = +[NSString stringWithFormat:@"Colleting Batch ID Filtered Countersr..."];
            v281 = [v280 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            v282 = __stdoutp;
            id v283 = v281;
            fprintf(v282, "#CI-INFO# %s\n", (const char *)[v283 UTF8String]);
          }
          if ((*(unsigned char *)(a2 + 186) & 4) != 0)
          {
            id v284 = [(id)Controller[1] defaultDevice];
            os_signpost_id_t v285 = DYMTLReplayFrameProfiler_loadAnalysis(v284);
            id v286 = [v285 mutableCopy];

            unsigned int v287 = [v286 objectForKeyedSubscript:@"DerivedCounterDictionary"];
            id v288 = [v287 mutableCopy];

            verifyCounterDictionary(v288);
            v626 = [v288 objectForKeyedSubscript:@"DerivedCounters"];
            id v289 = BatchIdFiterableCounters();
            id v290 = +[NSMutableSet setWithArray:v289];

            [v290 addObject:@"GPUTime"];
            os_signpost_id_t v291 = RemoveUnfilterableCounters(v626, v290);
            [v288 setObject:v291 forKeyedSubscript:@"DerivedCounters"];
            [v286 setObject:v288 forKeyedSubscript:@"DerivedCounterDictionary"];
            GTMTLReplayHost_rawCounters(v291);
            id objc = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v292 = GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
            id v293 = [v292 mutableCopy];

            uint64_t v294 = GTMTLReplayHost_rawCountersToNormalizeSet(v291);
            [v293 setObject:&__kCFBooleanTrue forKeyedSubscript:@"NoBlitSampling"];
            [v293 setObject:&__kCFBooleanTrue forKeyedSubscript:@"SampleEncoders"];
            [v293 setObject:&__kCFBooleanFalse forKeyedSubscript:@"SplitEncoderData"];
            [v293 setObject:v294 forKeyedSubscript:@"NormalizedCounters"];
            v603 = (void *)v294;
            uint64_t v610 = [v293 objectForKeyedSubscript:@"activePerEncoderDrawCallCount"];
            *(void *)&long long v695 = 0;
            [v293 setObject:v286 forKeyedSubscript:@"derivedCounterInfo"];
            id v295 = +[NSNumber numberWithUnsignedInt:(*(_DWORD *)(a2 + 184) >> 18) & 1];
            [v293 setObject:v295 forKeyedSubscript:@"profileBatchIdFilter"];

            [v293 setObject:objc forKeyedSubscript:@"profileCounters"];
            [v293 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
            id v296 = +[NSNumber numberWithInt:v620];
            [v293 setObject:v296 forKeyedSubscript:@"gpuTarget"];

            os_signpost_id_t v297 = GenerateSimplePriorityList(v610, (unint64_t *)&v695);
            [v293 setObject:v297 forKeyedSubscript:@"encoderBatchPriorityList"];

            [v293 setObject:0 forKeyedSubscript:@"pause"];
            [v293 setObject:&__kCFBooleanTrue forKeyedSubscript:@"resume"];
            [v293 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
            if (g_runningInCI)
            {
              uint64_t v298 = +[NSString stringWithFormat:@"\tBatch ID Filterable Counters: %@", v290];
              unsigned int v299 = [v298 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

              unint64_t v300 = __stdoutp;
              id v301 = v299;
              fprintf(v300, "#CI-INFO# %s\n", (const char *)[v301 UTF8String]);
            }
            id v302 = [v290 allObjects];
            [v275 setBatchIdFilterableCounters:v302];

            v649[0] = _NSConcreteStackBlock;
            v649[1] = 3221225472;
            v649[2] = __GTMTLReplay_CLI_block_invoke_6;
            v649[3] = &unk_746300;
            v649[4] = &v711;
            v649[5] = v695;
            GTMTLReplayClient_streamBatchFilteredData((uint64_t)Controller, &v684, v293, v649);
            if (g_runningInCI)
            {
              os_signpost_id_t v303 = +[NSString stringWithFormat:@"Waiting for batch ID streaming..."];
              uint64_t v304 = [v303 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

              unsigned int v305 = __stdoutp;
              id v306 = v304;
              fprintf(v305, "#CI-INFO# %s\n", (const char *)[v306 UTF8String]);
            }
            [v685 waitUntilAllOperationsAreFinished];
            id v307 = [v275 archivedBatchIdFilteredCounterData];
            id v308 = [v307 count];
            BOOL v309 = v308 == (id)v695;

            if (g_runningInCI) {
              char v310 = v309;
            }
            else {
              char v310 = 1;
            }
            if ((v310 & 1) == 0)
            {
              uint64_t v311 = v695;
              uint64_t v312 = [v275 archivedBatchIdFilteredCounterData];
              os_signpost_id_t v313 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Invalid batch ID fitering counter count, expected max batches: %lu, got: %lu", v311, [v312 count]);

              unsigned int v314 = [v313 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-ERROR# "];

              unint64_t v315 = __stdoutp;
              id v316 = v314;
              fprintf(v315, "#CI-ERROR# %s\n", (const char *)[v316 UTF8String]);
            }
          }
        }
        if (g_runningInCI)
        {
          id v317 = +[NSString stringWithFormat:@"Finished"];
          id v318 = [v317 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

          id v319 = __stdoutp;
          id v320 = v318;
          fprintf(v319, "#CI-INFO# %s\n", (const char *)[v320 UTF8String]);
        }
        if (*(void *)(a2 + 48))
        {
          uint64_t v321 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
          LOBYTE(v695) = 0;
          unsigned __int8 v322 = +[NSFileManager defaultManager];
          unsigned int v323 = [v322 fileExistsAtPath:v321 isDirectory:&v695];

          if ((_BYTE)v695) {
            unsigned int v324 = v323;
          }
          else {
            unsigned int v324 = 0;
          }
          if (v324 == 1)
          {
            os_signpost_id_t v325 = +[NSString stringWithUTF8String:*(void *)(a2 + 48)];
            unsigned int v326 = +[NSString stringWithUTF8String:a1];
            v327 = [v326 lastPathComponent];
            id v328 = [v327 stringByDeletingPathExtension];
            id v329 = +[NSString stringWithFormat:@"%@.gpuprofiler_raw", v328];
            uint64_t v330 = [v325 stringByAppendingPathComponent:v329];

            uint64_t v321 = (void *)v330;
          }
          uint64_t v331 = [v321 pathExtension];
          unsigned int v332 = [v331 isEqualToString:@"gpuprofiler_raw"];

          if (v332)
          {
            uint64_t v333 = [v321 stringByAppendingPathExtension:@"gpuprofiler_raw"];

            uint64_t v321 = (void *)v333;
          }
          id v648 = v591;
          uint64_t v334 = +[NSKeyedArchiver archivedDataWithRootObject:v634 requiringSecureCoding:1 error:&v648];
          id v335 = v648;

          [v334 writeToFile:v321 atomically:0];
          id v591 = v335;
        }
        _Block_object_dispose(&v711, 8);
        _Block_object_dispose(&location, 8);
        _Block_object_dispose(&v719, 8);

        goto LABEL_336;
      }
      if ((v87 & 0x100000) != 0)
      {
        if (v631)
        {
          v527 = objc_opt_new();
          [v527 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
          [v527 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseMTLCounters"];
          [v527 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseKicktimestamps"];
          [v527 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceComputeEncoders"];
          [v527 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CoalesceBlitEncoders"];
          id v596 = v527;
          GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
          id v99 = (id)objc_claimAutoreleasedReturnValue();
          [v527 addEntriesFromDictionary:v99];
          uint64_t v720 = 0;
          id v719 = 0;
          uint64_t v721 = 0;
          id v719 = [v601 path];
          uint64_t v720 = +[NSString stringWithUTF8String:a1];
          uint64_t v721 = 576;
          if (g_runningInCI)
          {
            uint64_t v528 = +[NSString stringWithFormat:@"Creating Streaming Shader Profiler Helper"];
            uint64_t v529 = [v528 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            v530 = __stdoutp;
            id v531 = v529;
            fprintf(v530, "#CI-INFO# %s\n", (const char *)[v531 UTF8String]);
          }
          v532 = [[GTShaderProfilerHelper alloc] initWithOptions:&v719];
          -[GTShaderProfilerHelper processGPUTimelineDataSources:withPayload:forReplayController:](v532, "processGPUTimelineDataSources:withPayload:forReplayController:", *Controller, v596);
          objc_initWeak(&location, v532);
          v646[0] = _NSConcreteStackBlock;
          v646[1] = 3221225472;
          v646[2] = __GTMTLReplay_CLI_block_invoke_7;
          v646[3] = &unk_7462B0;
          objc_copyWeak(&v647, &location);
          GTMTLReplayClient_collectGPUShaderTimelineData((uint64_t)Controller, &v684, v596, v646);
          [v685 waitUntilAllOperationsAreFinished];
          objc_destroyWeak(&v647);
          objc_destroyWeak(&location);

          goto LABEL_337;
        }
      }
      else if ((v87 & 0x200) != 0)
      {
        if (v631)
        {
          v533 = objc_opt_new();
          [v533 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
          [v533 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CollectLimiters"];
          GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
          id v99 = (id)objc_claimAutoreleasedReturnValue();
          [v533 addEntriesFromDictionary:v99];
          id v596 = v533;
          uint64_t v534 = GTMTLReplayClient_embeddedQueryShaderInfo((uint64_t)Controller, &v684, v533);
          id v535 = [v534 mutableCopy];

          [v535 setObject:v533 forKeyedSubscript:@"payload"];
          v536 = [v535 objectForKeyedSubscript:@"LimiterCounters"];
          if (v536)
          {
            v537 = [v535 objectForKeyedSubscript:@"limiter sample data"];
            BOOL v538 = v537 == 0;

            if (v538)
            {
              v645 = [v535 objectForKeyedSubscript:@"LimiterCounters"];
              v637 = [v645 objectForKeyedSubscript:@"DerivedCounterDictionary"];
              v539 = [v637 objectForKeyedSubscript:@"DerivedCounters"];
              v630 = GTMTLReplayHost_rawCountersToNormalizeSet(v539);

              [v596 setObject:&__kCFBooleanTrue forKeyedSubscript:@"NoBlitSampling"];
              [v596 setObject:&__kCFBooleanTrue forKeyedSubscript:@"SampleEncoders"];
              [v596 setObject:&__kCFBooleanFalse forKeyedSubscript:@"SplitEncoderData"];
              uint64_t v540 = [v637 objectForKeyedSubscript:@"counters"];
              [v596 setObject:v540 forKeyedSubscript:@"profileCounters"];

              [v596 setObject:v630 forKeyedSubscript:@"NormalizedCounters"];
              unint64_t v541 = [v535 objectForKeyedSubscript:@"gputime"];
              v542 = [v535 objectForKeyedSubscript:@"consistent time"];
              id objf = v542;
              if (v542)
              {
                v543 = [v542 objectForKeyedSubscript:@"gputime"];
                v544 = v543;
                if (v543)
                {
                  id v545 = v543;

                  unint64_t v541 = v545;
                }
              }
              if (v541) {
                id v546 = [v541 unsignedLongLongValue];
              }
              else {
                id v546 = 0;
              }
              v560 = [v535 objectForKeyedSubscript:@"encoder time data"];
              v561 = [v535 objectForKeyedSubscript:@"kick time data"];
              uint64_t v623 = ProcessEncoderTimeData(v560, v561, v596, (unint64_t)v546);
              size_t v612 = v561;

              unsigned __int8 v562 = [v623 objectAtIndexedSubscript:1];
              v563 = ProcessDerivedCounterDataFromDevice(v645, v596, v562);

              id v564 = GTMTLReplayHost_collectSoftwareEncoderCounters(*Controller, 1);
              v565 = ComputeDerivedCounters(v645, v563, v564);
              if (v565)
              {
                [v535 setObject:v565 forKeyedSubscript:@"LimiterCounterData"];
                v566 = [v565 objectForKeyedSubscript:@"derivedCounterDataForBottleneckAnalysis"];
                v605 = [v566 objectForKeyedSubscript:@"counters"];

                v701[0] = @"PerCounterEncoderCallData";
                id v567 = [v565 objectForKeyedSubscript:@"derivedCounterDataForBottleneckAnalysis"];
                uint64_t v568 = [v567 objectForKeyedSubscript:@"AverageSamples"];
                uint64_t v569 = GTMTLReplayHost_createPerCounterCommandData(v605, v568);
                v701[1] = @"MetalPluginName";
                v702[0] = v569;
                v702[1] = v600;
                uint64_t v570 = +[NSDictionary dictionaryWithObjects:v702 forKeys:v701 count:2];

                uint64_t v571 = +[NSJSONSerialization dataWithJSONObject:v570 options:1 error:0];
                v572 = [v594 stringByAppendingPathExtension:@"json"];
                uint64_t v573 = +[NSURL fileURLWithPath:v572 isDirectory:0 relativeToURL:v601];
                [v571 writeToURL:v573 atomically:0];
              }
            }
          }
          id v719 = [v601 path];
          uint64_t v720 = +[NSString stringWithUTF8String:a1];
          uint64_t v721 = 76;
          uint64_t v574 = [[GTShaderProfilerHelper alloc] initWithOptions:&v719];
          -[GTShaderProfilerHelper analyzeShaderInfoResult:forDataSource:forReplayController:](v574, "analyzeShaderInfoResult:forDataSource:forReplayController:", v535, *Controller);

          goto LABEL_337;
        }
      }
      else if ((v87 & 0x80) == 0)
      {
        if ((v87 & 0x4000) != 0)
        {
          if (!strcmp(*(const char **)(a2 + 128), "all"))
          {
            v548 = [(id)Controller[1] defaultCommandQueue];
            id v596 = [v548 availableCounters];
            uint64_t v550 = [v594 stringByAppendingString:@"_allCountersInfo.plist"];
            uint64_t v551 = +[NSURL fileURLWithPath:v550 isDirectory:0 relativeToURL:v601];
            [v596 writeToURL:v551 error:0];
          }
          else
          {
            id v547 = objc_alloc((Class)NSArray);
            v548 = +[NSString stringWithUTF8String:*(void *)(a2 + 128)];
            id v596 = [v547 initWithContentsOfFile:v548];
          }

          CFStringRef v699 = @"profileCounters";
          id v700 = v596;
          id v99 = +[NSDictionary dictionaryWithObjects:&v700 forKeys:&v699 count:1];
          uint64_t v552 = GTMTLReplayClient_derivedCounterData((id *)Controller, &v684, v99);
          v553 = [v594 stringByAppendingPathExtension:@".csv"];
          v554 = +[NSURL fileURLWithPath:v553 isDirectory:0 relativeToURL:v601];
          WriteToCSVFromCounterData(v552, v554);

          unint64_t v555 = [v594 stringByAppendingPathExtension:@".plist"];
          v556 = +[NSURL fileURLWithPath:v555 isDirectory:0 relativeToURL:v601];
          WriteToPlistFromCounterData(v552, v556);

          goto LABEL_337;
        }
        if ((v87 & 0x8000) != 0)
        {
          v599 = GTMTLReplayHost_generateDerivedDataPayload(*Controller, v631);
          id v549 = GTMTLReplayClient_queryShaderInfo((uint64_t)Controller, &v684, v599);

          goto LABEL_338;
        }
        if ((v87 & 0x80000) != 0)
        {
          GTMTLReplayClient_collectPipelinePerformanceStatistics((uint64_t)Controller);
          id v596 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v557 = [v596 description];
          id v99 = [v557 stringByReplacingOccurrencesOfString:@"\\n" withString:@"\n"];

          v558 = [v594 stringByAppendingPathExtension:@"txt"];
          uint64_t v559 = +[NSURL fileURLWithPath:v558 isDirectory:0 relativeToURL:v601];
          [v99 writeToURL:v559 atomically:0 encoding:4 error:0];

          goto LABEL_337;
        }
        if ((v87 & 0x10000) == 0)
        {
          uint64_t v455 = *(unsigned int *)(a2 + 24);
          if ((int)v455 < 1) {
            goto LABEL_338;
          }
          uint64_t v456 = 0;
          do
          {
            if (g_runningInCI)
            {
              uint64_t v457 = +[NSString stringWithFormat:@"replayCapture, loop count=%d/%d", v456, v455];
              unsigned int v458 = [v457 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

              unsigned int v459 = __stdoutp;
              id v460 = v458;
              fprintf(v459, "#CI-INFO# %s\n", (const char *)[v460 UTF8String]);
            }
            id v461 = objc_alloc_init((Class)MTLCaptureDescriptor);
            uint64_t v462 = [(id)Controller[1] defaultDevice];
            [v461 setCaptureObject:v462];

            GTMTLReplayController_debugSubCommandStop((uint64_t)Controller, *(_DWORD *)(*(void *)(*Controller + 120) + 12), 0);
            if (*(unsigned char *)(a2 + 37))
            {
              uint64_t v463 = [(id)Controller[1] defaultCommandQueue];
              [v463 finish];
            }
            GTMTLReplayController_rewind((uint64_t)Controller);

            id v591 = 0;
            id v24 = 0;
            uint64_t v456 = (v456 + 1);
            uint64_t v455 = *(unsigned int *)(a2 + 24);
          }
          while ((int)v456 < (int)v455);
        }
      }
    }
    goto LABEL_339;
  }
  if (g_runningInCI)
  {
    long long v151 = +[NSString stringWithFormat:@"collectDerivedCounters"];
    long long v152 = [v151 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    BOOL v153 = __stdoutp;
    id v154 = v152;
    fprintf(v153, "#CI-INFO# %s\n", (const char *)[v154 UTF8String]);
  }
  unint64_t v155 = (void *)*Controller;
  id v596 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v156 = v155[14];
  int v157 = *(_DWORD *)(v156 + 12);
  if (v157 < 1)
  {
    uint64_t v161 = &stru_7482F0;
    int v162 = &stru_7482F0;
    uint64_t v588 = &stru_7482F0;
    goto LABEL_227;
  }
  int v158 = 0;
  id obja = 0;
  uint64_t v159 = v155[2];
  uint64_t v160 = v155[15];
  uint64_t v161 = &stru_7482F0;
  int v162 = &stru_7482F0;
  uint64_t v588 = &stru_7482F0;
  uint64_t v589 = v156;
  do
  {
    uint64_t v163 = *(void *)(v156 + 24);
    uint64_t v164 = *(void *)(v163 + 32 * v158);
    if (GetFuncEnumConstructorType(*(_DWORD *)(*(void *)(v160 + 24) + (v164 << 6) + 8)) != 25) {
      goto LABEL_214;
    }
    uint64_t v625 = v163 + 32 * v158;
    unint64_t v165 = *(void *)(v625 + 8);
    if (v165 <= (int)v164 + 1) {
      goto LABEL_213;
    }
    int v609 = v158;
    unint64_t v166 = (int)v164 + 1;
    uint64_t v167 = (v164 + 1);
    do
    {
      uint64_t v168 = *(void *)(v160 + 24);
      uint64_t v169 = v168 + (v166 << 6);
      int v170 = *(_DWORD *)(v169 + 8);
      if (v170 <= -15926)
      {
        if (v170 <= -16293)
        {
          if ((v170 + 0x4000) <= 0x2D && ((1 << v170) & 0x200800081001) != 0) {
            goto LABEL_164;
          }
          goto LABEL_127;
        }
        if (v170 > -16124)
        {
          BOOL v174 = (v170 + 16123) > 0x3C
              || ((1 << (v170 - 5)) & 0x1000000000000011) == 0;
          int v175 = -15974;
        }
        else
        {
          BOOL v174 = (v170 + 16292) > 0x34
              || ((1 << (v170 - 92)) & 0x10000000000811) == 0;
          int v175 = -16136;
        }
        if (v174 && v170 != v175) {
          goto LABEL_127;
        }
LABEL_164:
        if (v170 > -16289)
        {
          if (v170 != -16288 && v170 != -16281 && v170 != -15890) {
            goto LABEL_191;
          }
        }
        else if (v170 != -16384)
        {
          if (v170 == -16365)
          {
            uint64_t v201 = GTTraceFunc_argumentBytesWithMap((void *)v169, *(unsigned __int8 *)(v168 + (v166 << 6) + 13), v159);
            uint64_t v202 = GTTraceFunc_argumentBytesWithMap((void *)v169, v201[8], v159);
            if (v202)
            {
              CFStringRef v203 = +[NSString stringWithUTF8String:v202];
              uint64_t v200 = v161;
            }
            else
            {
              uint64_t v200 = v161;
              CFStringRef v203 = &stru_7482F0;
            }
            goto LABEL_193;
          }
          if (v170 != -16339) {
            goto LABEL_191;
          }
        }
        uint64_t v198 = GTTraceFunc_argumentBytesWithMap((void *)v169, *(unsigned __int8 *)(v168 + (v166 << 6) + 13), v159);
        BOOL v199 = GTTraceFunc_argumentBytesWithMap((void *)v169, v198[8], v159);
        if (v199)
        {
          +[NSString stringWithUTF8String:v199];
          uint64_t v200 = v162;
          int v162 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_192:
          CFStringRef v203 = v161;
LABEL_193:

          unint64_t v165 = *(void *)(v625 + 8);
          uint64_t v161 = (__CFString *)v203;
          goto LABEL_194;
        }
LABEL_191:
        uint64_t v200 = v162;
        int v162 = &stru_7482F0;
        goto LABEL_192;
      }
      if (v170 > -15608)
      {
        if (v170 <= -15314)
        {
          BOOL v172 = v170 == -15607 || v170 == -15570;
          int v173 = -15491;
LABEL_117:
          if (v172 || v170 == v173) {
            goto LABEL_164;
          }
          goto LABEL_127;
        }
        BOOL v204 = (v170 + 15313) > 0x17;
        int v205 = 1 << (v170 - 47);
        int v206 = 8388673;
      }
      else
      {
        if (v170 <= -15677)
        {
          BOOL v172 = (v170 + 15925) <= 0x2D && ((1 << (v170 + 53)) & 0x200800000001) != 0
              || v170 == -15794;
          int v173 = -15743;
          goto LABEL_117;
        }
        BOOL v204 = (v170 + 15676) > 0x1C;
        int v205 = 1 << (v170 + 60);
        int v206 = 268468481;
      }
      int v207 = v205 & v206;
      if (!v204 && v207 != 0) {
        goto LABEL_164;
      }
LABEL_127:
      if (IsFuncEnumSampledCall(*(_DWORD *)(v169 + 8), v631))
      {
        InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(v589 + 12), *(void **)(v589 + 24), v166);
        if (obja == InclusiveRange)
        {
          InclusiveRange = obja;
        }
        else
        {
          id objb = objc_alloc_init((Class)NSMutableArray);
          if (InclusiveRange)
          {
            unsigned int v178 = InclusiveRange;
            do
            {
              uint64_t v179 = *(void *)(v160 + 24);
              uint64_t v180 = *v178;
              int v181 = *(_DWORD *)(v179 + (*v178 << 6) + 8);
              if (IsFuncEnumPushDebugGroup(v181))
              {
                if (v181 <= -16245)
                {
                  BOOL v182 = v181 == -16374 || v181 == -16323;
                  int v183 = -16283;
                }
                else if (v181 > -15883)
                {
                  BOOL v182 = v181 == -15786;
                  int v183 = -15882;
                }
                else
                {
                  BOOL v182 = v181 == -16244;
                  int v183 = -16065;
                }
                if (v182 || v181 == v183)
                {
                  uint64_t v185 = GTTraceFunc_argumentBytesWithMap((void *)(v179 + (v180 << 6)), *(unsigned __int8 *)(v179 + (v180 << 6) + 13), v159);
                  unsigned int v186 = GTTraceFunc_argumentBytesWithMap((void *)(v179 + (v180 << 6)), v185[8], v159);
                  if (v186)
                  {
                    unsigned int v187 = +[NSString stringWithUTF8String:v186];
                    [objb addObject:v187];
                  }
                }
              }
              uint64_t v188 = *((unsigned int *)v178 + 4);
              if (v188) {
                v178 -= 4 * v188;
              }
              else {
                unsigned int v178 = 0;
              }
            }
            while (v188);
          }
          id v189 = objb;
          unint64_t v190 = (unint64_t)[v189 count];
          if (v190 >= 2)
          {
            uint64_t v191 = 0;
            unint64_t v192 = v190 >> 1;
            unint64_t v193 = v190 - 1;
            do
              [v189 exchangeObjectAtIndex:v191++ withObjectAtIndex:v193--];
            while (v192 != v191);
          }

          uint64_t v194 = [v189 componentsJoinedByString:@"->"];

          uint64_t v588 = (__CFString *)v194;
        }
        uint64_t v200 = +[NSNumber numberWithInt:v167];
        id v719 = v200;
        uint64_t v720 = (uint64_t)v161;
        uint64_t v721 = (uint64_t)v162;
        v722 = v588;
        unsigned int v211 = +[NSArray arrayWithObjects:&v719 count:4];
        [v596 addObject:v211];

        id obja = InclusiveRange;
        goto LABEL_192;
      }
      if (IsFuncEnumEndEncoding(v170)) {
        goto LABEL_191;
      }
      if (v170 > -15344)
      {
        BOOL v212 = (v170 + 15343) > 0x1B || ((1 << (v170 - 17)) & 0xA000001) == 0;
        uint64_t v200 = v161;
        CFStringRef v203 = &stru_7482F0;
        if (!v212) {
          goto LABEL_193;
        }
      }
      else
      {
        BOOL v210 = v170 == -16361 || v170 == -16202 || v170 == -15908;
        uint64_t v200 = v161;
        CFStringRef v203 = &stru_7482F0;
        if (v210) {
          goto LABEL_193;
        }
      }
LABEL_194:
      uint64_t v167 = (v167 + 1);
      unint64_t v166 = (int)v167;
    }
    while (v165 > (int)v167);
    uint64_t v156 = v589;
    int v157 = *(_DWORD *)(v589 + 12);
    int v158 = v609;
LABEL_213:
    v158 += *(_DWORD *)(v625 + 20);
LABEL_214:
    ++v158;
  }
  while (v158 < v157);
LABEL_227:

  if (v631)
  {
    BOOL v231 = [(id)Controller[1] defaultDevice];
    unint64_t v232 = DYMTLReplayFrameProfiler_loadAnalysis(v231);
    id v582 = [v232 mutableCopy];

    id v233 = [v582 objectForKeyedSubscript:@"DerivedCounterDictionary"];
    verifyCounterDictionary(v233);
    uint64_t v580 = v233;
    id v581 = [v233 objectForKeyedSubscript:@"DerivedCounters"];
    long long v234 = GTMTLReplayHost_rawCounters(v581);
    [v582 setObject:v234 forKeyedSubscript:@"profileCounters"];

    id v235 = GTMTLReplayHost_generateDerivedDataPayload(*Controller, 1);
    id v236 = [v235 mutableCopy];

    uint64_t v579 = GTMTLReplayHost_rawCountersToNormalizeSet(v581);
    [v236 setObject:&__kCFBooleanTrue forKeyedSubscript:@"NoBlitSampling"];
    [v236 setObject:&__kCFBooleanTrue forKeyedSubscript:@"SampleEncoders"];
    [v236 setObject:&__kCFBooleanFalse forKeyedSubscript:@"SplitEncoderData"];
    [v236 setObject:v579 forKeyedSubscript:@"NormalizedCounters"];
    [v236 setObject:v582 forKeyedSubscript:@"derivedCounterInfo"];
    [v236 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseMTLCounters"];
    [v236 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseKicktimestamps"];
    uint64_t v237 = +[NSNumber numberWithInt:v620];
    [v236 setObject:v237 forKeyedSubscript:@"gpuTarget"];

    if ((v620 & 0x80000000) != 0) {
      GTMTLReplayClient_embeddedDerivedCounterData((uint64_t)Controller, (uint64_t)&v684, v582);
    }
    id v238 = v236;
    [v238 setObject:v600 forKeyedSubscript:@"MetalPluginName"];
    uint64_t v720 = 0;
    id v719 = 0;
    uint64_t v721 = 0;
    id v719 = [v601 path];
    uint64_t v720 = +[NSString stringWithUTF8String:a1];
    uint64_t v721 = 321;
    if (g_runningInCI)
    {
      id v239 = +[NSString stringWithFormat:@"Creating Streaming Derived Counters Helper"];
      os_signpost_id_t v240 = [v239 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

      unsigned int v241 = __stdoutp;
      id v242 = v240;
      fprintf(v241, "#CI-INFO# %s\n", (const char *)[v242 UTF8String]);
    }
    id v243 = [[GTShaderProfilerHelper alloc] initWithOptions:&v719];
    -[GTShaderProfilerHelper profileShadersForDataSource:withPayload:forReplayController:](v243, "profileShadersForDataSource:withPayload:forReplayController:", *Controller, v238);
    objc_initWeak(&location, v243);
    v667[0] = _NSConcreteStackBlock;
    v667[1] = 3221225472;
    v667[2] = __GTMTLReplay_CLI_block_invoke_281;
    v667[3] = &unk_7462B0;
    objc_copyWeak(&v668, &location);
    GTMTLReplayClient_streamDerivedCounterData((uint64_t)Controller, &v684, v238, v667);
    [v685 waitUntilAllOperationsAreFinished];
    objc_destroyWeak(&v668);
    objc_destroyWeak(&location);

    id v244 = v238;
  }
  else
  {
    v709[0] = @"MetalPluginName";
    v709[1] = @"GPUState";
    v710[0] = v600;
    v710[1] = &off_759C60;
    os_signpost_id_t v245 = +[NSDictionary dictionaryWithObjects:v710 forKeys:v709 count:2];
    GTMTLReplayClient_queryShaderInfo((uint64_t)Controller, &v684, v245);
    id v582 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v246 = [v582 objectForKeyedSubscript:@"derivedCounterData"];
    id v247 = [v246 mutableCopy];

    if (*(void *)(a2 + 56))
    {
      uint64_t v248 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
      id v249 = +[NSString stringWithUTF8String:*(void *)(a2 + 56)];
      id v250 = GTMTLReplayClient_loadDerivedCounterInfo(v248, v249);

      id v251 = GTMTLReplayClient_mergeDerivedCounterInfo(v247, v250);
      id v252 = [v251 mutableCopy];

      uint64_t v253 = v252;
    }
    else
    {
      uint64_t v253 = v247;
    }
    uint64_t v580 = v253;
    int v343 = [v253 objectForKeyedSubscript:@"DerivedCounterDictionary"];
    id v344 = [v343 mutableCopy];

    verifyCounterDictionary(v344);
    id v581 = v344;
    uint64_t v345 = [v581 objectForKeyedSubscript:@"DerivedCounters"];
    id v244 = [v345 mutableCopy];

    uint64_t v346 = [v581 objectForKeyedSubscript:@"Instruments"];
    uint64_t v347 = v346;
    if (v346)
    {
      v348 = [v346 objectForKeyedSubscript:@"Profiles"];
      long long v349 = v348;
      v642 = v347;
      if (v348)
      {
        char v350 = [v348 allKeys];
        NSURLResourceKey v351 = v350;
        if (v350)
        {
          long long v697 = 0u;
          long long v698 = 0u;
          long long v695 = 0u;
          long long v696 = 0u;
          id v352 = [v350 countByEnumeratingWithState:&v695 objects:&v719 count:16];
          if (v352)
          {
            uint64_t v635 = *(void *)v696;
            v639 = v349;
            id objd = v351;
            do
            {
              uint64_t v353 = 0;
              id v621 = v352;
              do
              {
                if (*(void *)v696 != v635) {
                  objc_enumerationMutation(objd);
                }
                id v354 = [v639 objectForKeyedSubscript:*(void *)(*((void *)&v695 + 1) + 8 * (void)v353)];
                unsigned int v355 = v354;
                if (v354)
                {
                  unint64_t v356 = [v354 objectForKeyedSubscript:@"DerivedCounters"];
                  long long v693 = 0u;
                  long long v694 = 0u;
                  long long v691 = 0u;
                  long long v692 = 0u;
                  id v357 = [v356 countByEnumeratingWithState:&v691 objects:&location count:16];
                  v627 = v355;
                  if (v357)
                  {
                    uint64_t v358 = *(void *)v692;
                    do
                    {
                      for (uint64_t i = 0; i != v357; uint64_t i = (char *)i + 1)
                      {
                        if (*(void *)v692 != v358) {
                          objc_enumerationMutation(v356);
                        }
                        unint64_t v360 = [*(id *)(*((void *)&v691 + 1) + 8 * i) allValues];
                        long long v690 = 0u;
                        long long v689 = 0u;
                        long long v688 = 0u;
                        long long v687 = 0u;
                        id v361 = [v360 countByEnumeratingWithState:&v687 objects:&v711 count:16];
                        if (v361)
                        {
                          uint64_t v362 = *(void *)v688;
                          do
                          {
                            for (uint64_t j = 0; j != v361; uint64_t j = (char *)j + 1)
                            {
                              if (*(void *)v688 != v362) {
                                objc_enumerationMutation(v360);
                              }
                              [v244 removeObjectForKey:*(void *)(*((void *)&v687 + 1) + 8 * (void)j)];
                            }
                            id v361 = [v360 countByEnumeratingWithState:&v687 objects:&v711 count:16];
                          }
                          while (v361);
                        }
                      }
                      id v357 = [v356 countByEnumeratingWithState:&v691 objects:&location count:16];
                    }
                    while (v357);
                  }

                  unsigned int v355 = v627;
                }

                uint64_t v353 = (char *)v353 + 1;
              }
              while (v353 != v621);
              NSURLResourceKey v351 = objd;
              id v352 = [objd countByEnumeratingWithState:&v695 objects:&v719 count:16];
              long long v349 = v639;
            }
            while (v352);
          }
        }
      }
      uint64_t v347 = v642;
    }

    [v581 setObject:v244 forKeyedSubscript:@"DerivedCounters"];
    verifyCounterDictionary(v581);
    [v580 setObject:v581 forKeyedSubscript:@"DerivedCounterDictionary"];
    uint64_t v364 = [v594 stringByAppendingString:@"_derivedCounterInfoResult.plist"];
    v365 = +[NSURL fileURLWithPath:v364 isDirectory:0 relativeToURL:v601];
    [v580 writeToURL:v365 atomically:0];

    uint64_t v579 = GTMTLReplayHost_rawCounters(v244);
    if (![v579 count])
    {
      uint64_t v366 = +[NSString stringWithFormat:@"No raw counters remain from derived counter list: %@", v244];
      v367 = __stdoutp;
      int v368 = g_runningInCI;
      id v369 = v366;
      uint64_t v370 = (const char *)[v369 UTF8String];
      uint64_t v371 = "#CI_ERROR# ";
      if (!v368) {
        uint64_t v371 = "";
      }
      fprintf(v367, "%s%s %u: %s\n", v371, "int GTMTLReplay_CLI(const char *, GTMTLReplayCLIOptions, void (*)(NSData *__strong, NSURL *__strong))", 928, v370);
      id v372 = v369;
      GTMTLReplay_handleError(101, (uint64_t)[v372 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"GTMTLReplay_CLI", 928, 1);
    }
    uint64_t v373 = GTMTLReplayHost_rawCountersToNormalizeSet(v244);
    v707[0] = @"NoBlitSampling";
    v707[1] = @"SampleEncoders";
    v708[0] = &__kCFBooleanTrue;
    v708[1] = &__kCFBooleanTrue;
    v707[2] = @"SplitEncoderData";
    v707[3] = @"profileCounters";
    v708[2] = &__kCFBooleanFalse;
    v708[3] = v579;
    v707[4] = @"NormalizedCounters";
    uint64_t v576 = (void *)v373;
    v708[4] = v373;
    uint64_t v575 = +[NSDictionary dictionaryWithObjects:v708 forKeys:v707 count:5];
    v374 = GTMTLReplayClient_derivedCounterData((id *)Controller, &v684, v575);
    id v578 = [v374 mutableCopy];

    CFStringRef v705 = @"frameProfile";
    int v375 = [v582 objectForKeyedSubscript:];
    v706 = v375;
    uint64_t v376 = +[NSDictionary dictionaryWithObjects:&v706 forKeys:&v705 count:1];
    [v578 setObject:v376 forKeyedSubscript:@"Timing Data"];

    uint64_t v377 = [v578 objectForKeyedSubscript:@"EncoderData"];
    if (!v377)
    {
      uint64_t v378 = +[NSString stringWithFormat:@"encoderData is nil"];
      id v379 = __stdoutp;
      int v380 = g_runningInCI;
      id v381 = v378;
      uint64_t v382 = (const char *)[v381 UTF8String];
      v383 = "#CI_ERROR# ";
      if (!v380) {
        v383 = "";
      }
      fprintf(v379, "%s%s %u: %s\n", v383, "int GTMTLReplay_CLI(const char *, GTMTLReplayCLIOptions, void (*)(NSData *__strong, NSURL *__strong))", 947, v382);
      id v384 = v381;
      GTMTLReplay_handleError(101, (uint64_t)[v384 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_CLI.m", (uint64_t)"GTMTLReplay_CLI", 947, 1);
    }
    v385 = GTMTLReplayHost_collectSoftwareEncoderCounters(*Controller, 0);
    uint64_t v386 = ComputeDerivedCounters(v580, v377, v385);
    id v387 = [v386 mutableCopy];

    [v387 setObject:v596 forKeyedSubscript:@"TraceInformation"];
    id v577 = [v387 copy];
    id v388 = [v594 stringByAppendingString:@"_encoder_derivedComputedData.plist"];
    int v389 = +[NSURL fileURLWithPath:v388 isDirectory:0 relativeToURL:v601];
    [v577 writeToURL:v389 atomically:0];

    uint64_t v390 = (void *)*Controller;
    id v636 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v590 = v390;
    uint64_t v585 = v390[14];
    int v391 = *(_DWORD *)(v585 + 12);
    if (v391 >= 1)
    {
      int v392 = 0;
      uint64_t v604 = v390[2];
      obje = (void *)v390[15];
      do
      {
        int v587 = v392;
        uint64_t v583 = v392;
        uint64_t v584 = *(void *)(v585 + 24);
        uint64_t v393 = v584 + 32 * v392;
        if (GTMTLReplayHost_IsFuncEnumSampledEncoder(*(_DWORD *)(obje[3] + (*(void *)v393 << 6) + 8), 0, 0))
        {
          uint64_t RenderPassDescriptor = GetRenderPassDescriptor();
          uint64_t v640 = RenderPassDescriptorContainsClear(RenderPassDescriptor);
          off_t v611 = (void *)(v393 + 8);
          int v395 = *(_DWORD *)v393 + 1;
          if (*(void *)(v393 + 8) > (unint64_t)v395)
          {
            uint64_t v396 = v395;
            int v622 = *(_DWORD *)v393 + 1;
            do
            {
              uint64_t v397 = obje[3] + (v396 << 6);
              unsigned int v398 = *(_DWORD *)(v397 + 8);
              if (IsFuncEnumSampledCall(v398, 0))
              {
                uint64_t v399 = SoftwareCounterForFunc(v397, v604);
                uint64_t v401 = v400;
                uint64_t v402 = +[NSNumber numberWithUnsignedLongLong:v640];
                locatiouint64_t n = v402;
                v403 = +[NSNumber numberWithUnsignedLongLong:v399];
                p_locatiouint64_t n = v403;
                v404 = +[NSNumber numberWithUnsignedLongLong:v401];
                uint64_t v717 = (uint64_t)v404;
                uint64_t v405 = +[NSArray arrayWithObjects:&location count:3];
                [v636 addObject:v405];
              }
              else if (v398 >> 2 == 1073737833)
              {
                GetExecuteCommandsInBufferArgs((uint64_t)&v719, v397, v590[2]);
                long long v725 = 0u;
                memset(v724, 0, sizeof(v724));
                uint64_t Object = GTMTLSMContext_getObject(*(void *)v590[5], (uint64_t)v719, *(void *)v397);
                GTMTLCreateIndirectCommandEncoder((uint64_t)v724, Object[13]);
                unint64_t v407 = v721;
                if (v721)
                {
                  unint64_t v408 = 0;
                  v643 = v722;
                  uint64_t v409 = *((void *)&v725 + 1);
                  uint64_t v410 = v724[1];
                  uint64_t v628 = v725;
                  uint64_t v411 = v720 << 32;
                  do
                  {
                    uint64_t v412 = (uint64_t)v643 + v409 * (v411 >> 32);
                    if (*(void *)(v412 + v410))
                    {
                      uint64_t v413 = SoftwareCounterForIndirectCommand(v410, v628, v412);
                      uint64_t v415 = v414;
                      unsigned int v416 = +[NSNumber numberWithUnsignedLongLong:v640];
                      v711 = v416;
                      int v417 = +[NSNumber numberWithUnsignedLongLong:v413];
                      v712 = v417;
                      uint64_t v418 = +[NSNumber numberWithUnsignedLongLong:v415];
                      uint64_t v713 = (uint64_t)v418;
                      v419 = +[NSArray arrayWithObjects:&v711 count:3];
                      [v636 addObject:v419];
                    }
                    ++v408;
                    v411 += 0x100000000;
                  }
                  while (v407 > v408);
                }
              }
              uint64_t v396 = ++v622;
            }
            while (*v611 > (unint64_t)v622);
          }
          int v420 = *(_DWORD *)(v584 + 32 * v583 + 20) + v587;
          int v391 = *(_DWORD *)(v585 + 12);
        }
        else
        {
          int v420 = v587;
        }
        int v392 = v420 + 1;
      }
      while (v392 < v391);
    }
    id v421 = [v636 copy];

    v422 = ComputeDerivedCounters(v580, v578, v421);
    id v423 = [v422 mutableCopy];

    [v423 setObject:v596 forKeyedSubscript:@"TraceInformation"];
    id v644 = [v423 copy];
    v424 = [v594 stringByAppendingString:@"_derivedComputedData.plist"];
    id v425 = +[NSURL fileURLWithPath:v424 isDirectory:0 relativeToURL:v601];
    [v644 writeToURL:v425 atomically:0];

    v426 = [v594 stringByAppendingString:@"_derivedCounterDataFromDeviceResult.plist"];
    int v427 = +[NSURL fileURLWithPath:v426 isDirectory:0 relativeToURL:v601];
    [v578 writeToURL:v427 atomically:0];

    uint64_t v428 = [v644 objectForKeyedSubscript:@"derivedCounterDataForBottleneckAnalysis"];
    uint64_t v429 = [v428 objectForKeyedSubscript:@"counters"];

    v703[0] = @"PerCounterDrawCallData";
    uint64_t v430 = [v644 objectForKeyedSubscript:@"derivedCounterDataForBottleneckAnalysis"];
    uint64_t v431 = [v430 objectForKeyedSubscript:@"AverageSamples"];
    uint64_t v432 = GTMTLReplayHost_createPerCounterCommandData(v429, v431);
    v704[0] = v432;
    v703[1] = @"PerCounterEncoderCallData";
    unsigned int v433 = [v577 objectForKeyedSubscript:@"derivedCounterDataForBottleneckAnalysis"];
    unsigned int v434 = [v433 objectForKeyedSubscript:@"AverageSamples"];
    uint64_t v435 = GTMTLReplayHost_createPerCounterCommandData(v429, v434);
    v704[1] = v435;
    v703[2] = @"MetalPluginName";
    unint64_t v436 = [v580 objectForKeyedSubscript:];
    v704[2] = v436;
    uint64_t v437 = +[NSDictionary dictionaryWithObjects:v704 forKeys:v703 count:3];

    uint64_t v438 = [v644 objectForKeyedSubscript:@"derivedCounterDataForBottleneckAnalysis"];
    unsigned int v439 = [v438 objectForKeyedSubscript:@"AverageSamples"];
    verifyPerCounterCommandData(v437, @"PerCounterDrawCallData", v429, [v439 count]);

    int v440 = [v577 objectForKeyedSubscript:@"derivedCounterDataForBottleneckAnalysis"];
    uint64_t v441 = [v440 objectForKeyedSubscript:@"AverageSamples"];
    verifyPerCounterCommandData(v437, @"PerCounterEncoderCallData", v429, [v441 count]);

    v442 = +[NSJSONSerialization dataWithJSONObject:v437 options:1 error:0];
    int v443 = [v594 stringByAppendingPathExtension:@"json"];
    int v444 = +[NSURL fileURLWithPath:v443 isDirectory:0 relativeToURL:v601];
    [v442 writeToURL:v444 atomically:0];

    id v238 = v576;
  }

LABEL_336:
  id v99 = v582;
LABEL_337:

LABEL_338:
  id v24 = v591;
LABEL_339:
  if (g_runningInCI)
  {
    v445 = +[NSString stringWithFormat:@"commandQueue finish"];
    v446 = [v445 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    uint64_t v447 = __stdoutp;
    id v448 = v446;
    fprintf(v447, "#CI-INFO# %s\n", (const char *)[v448 UTF8String]);
  }
  long long v449 = [(id)Controller[1] defaultCommandQueue];
  [v449 finish];
  [v685 waitUntilAllOperationsAreFinished];
  if (g_runningInCI)
  {
    int v450 = +[NSString stringWithFormat:@"normal exit"];
    uint64_t v451 = [v450 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    v452 = __stdoutp;
    id v453 = v451;
    fprintf(v452, "#CI-INFO# %s\n", (const char *)[v453 UTF8String]);
  }
  __destructor_8_s0_s8_s24_s32_s40_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_s144_s152((uint64_t)v674);

  uint64_t v25 = 0;
LABEL_344:

  return v25;
}

void sub_2D8928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GenerateThumbnails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __chkstk_darwin(a1, a2, a3, a4);
  uint64_t v188 = v6;
  id v8 = v7;
  uint64_t v183 = v9;
  uint64_t v221 = v10;
  uint64_t v234 = v5;
  id v184 = v11;
  id v12 = objc_alloc((Class)NSMutableDictionary);
  v281[0] = &__kCFBooleanTrue;
  v280[0] = @"enable";
  v280[1] = @"resolution";
  unsigned int v13 = v8[46];
  unint64_t v192 = v8;
  if ((v13 & 8) != 0)
  {
    id v14 = &off_759440;
  }
  else
  {
    v278[0] = @"width";
    id v8 = +[NSNumber numberWithInt:v8[39]];
    v279[0] = v8;
    v278[1] = @"height";
    id v4 = +[NSNumber numberWithInt:v192[40]];
    v279[1] = v4;
    v278[2] = @"format";
    v279[2] = &off_759CC0;
    id v14 = +[NSDictionary dictionaryWithObjects:v279 forKeys:v278 count:3];
  }
  BOOL v15 = (v13 & 8) == 0;
  v281[1] = v14;
  long long v16 = +[NSDictionary dictionaryWithObjects:v281 forKeys:v280 count:2];
  id v199 = [v12 initWithDictionary:v16];

  if (v15)
  {
  }
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v17);
  id v200 = [objc_alloc((Class)NSMutableArray) initWithCapacity:64];
  id v233 = [objc_alloc((Class)NSMutableArray) initWithCapacity:4];
  unsigned int v19 = v192[46];
  if ((v19 & 4) != 0)
  {
    uint64_t v237 = *(uint64_t **)v234;
    parent[0] = 0;
    id v286 = 0;
    apr_pool_create_ex(parent, 0, 0, v18);
    unsigned int v211 = parent[0];
    apr_pool_create_ex(&v286, parent[0], 0, v44);
    id v204 = objc_alloc_init((Class)NSMutableDictionary);
    id v240 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v45 = v237[14];
    if (*(int *)(v45 + 12) >= 1)
    {
      uint64_t v46 = 0;
      pb = v286;
      do
      {
        id v224 = *(void **)(v45 + 24);
        uint64_t v47 = *(void *)(v237[15] + 24) + (v224[4 * v46] << 6);
        int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -16286 && IsFuncEnumCreateCommandEncoder(v48))
        {
          uint64_t v49 = GTResourceTrackerMake(v237[1], v237[2], pb);
          GTResourceTrackerProcessFunction();
          bzero(v291, 0x2B90uLL);
          GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v291, (uint64_t *)v47, v237[2]);
          if (v291[0] == 70)
          {
            uint64_t v50 = 0;
            long long v51 = v292;
            __int16 v52 = v292;
            do
            {
              AddAttachmentToArray(v240, v52, v50++, v49[4], v237[1]);
              v52 += 8;
            }
            while (v50 != 8);
            AddAttachmentToArray(v240, v51 + 84, 8, v49[4], v237[1]);
            AddAttachmentToArray(v240, v51 + 90, 9, v49[4], v237[1]);
          }
          id v229 = [v240 copy];
          uint64_t v53 = v49[4];
          id v54 = (apr_hash_index_t *)(v53 + 16);
          *(void *)(v53 + 24) = 0;
          *(void *)(v53 + 32) = 0;
          *(void *)(v53 + 16) = v53;
          *(_DWORD *)(v53 + 40) = 0;
          while (1)
          {
            int16x4_t v55 = apr_hash_next(v54);
            long long v56 = v55;
            if (!v55) {
              break;
            }
            uint64_t v57 = *(void *)(*((void *)v55 + 1) + 32);
            if (*(_DWORD *)(v57 + 40) == 80 && (*(void *)(v57 + 32) & 0x8000000000000000) == 0)
            {
              id v58 = *(id *)v57;
              id v59 = v229;
              long long v297 = 0u;
              long long v298 = 0u;
              long long v299 = 0u;
              long long v300 = 0u;
              id v60 = v59;
              id v61 = [v60 countByEnumeratingWithState:&v297 objects:&v293 count:16];
              if (v61)
              {
                uint64_t v62 = *(void *)v298;
                while (2)
                {
                  for (uint64_t i = 0; i != v61; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v298 != v62) {
                      objc_enumerationMutation(v60);
                    }
                    uint64_t v64 = [*(id *)(*((void *)&v297 + 1) + 8 * i) objectForKeyedSubscript:@"DependencyGraphRequestedTextureID"];
                    BOOL v65 = [v64 unsignedLongLongValue] == v58;

                    if (v65)
                    {

                      goto LABEL_61;
                    }
                  }
                  id v61 = [v60 countByEnumeratingWithState:&v297 objects:&v293 count:16];
                  if (v61) {
                    continue;
                  }
                  break;
                }
              }

              id v290 = @"DependencyGraphRequestedTextureID";
              id v66 = +[NSNumber numberWithUnsignedLongLong:v58];
              CFStringRef v282 = v66;
              int v67 = +[NSDictionary dictionaryWithObjects:&v282 forKeys:&v290 count:1];
              [v240 addObject:v67];
            }
LABEL_61:
            id v54 = v56;
          }
          if ([v240 count])
          {
            uint64_t v68 = v224[4 * v46 + 1];
            id v69 = [v240 copy];
            int32x2_t v70 = +[NSNumber numberWithUnsignedLongLong:v68];
            [v204 setObject:v69 forKeyedSubscript:v70];

            [v240 removeAllObjects];
          }
          apr_pool_clear(pb);

          uint64_t v45 = v237[14];
        }
        ++v46;
      }
      while (v46 < *(int *)(v45 + 12));
    }
    apr_pool_destroy(v211);

    [v199 setObject:v204 forKeyedSubscript:@"DependencyGraphRequestedTexturesForThumbnail"];
    uint64_t v202 = GTMTLReplayClient_generateDependencyGraphThumbnails(*(void *)v234, v199, v200);
    id v225 = [v202 objectForKeyedSubscript:@"object"];
    id v71 = [v225 allKeys];
    timeval v72 = [v71 sortedArrayUsingSelector:];

    +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v225 count]);
    id v239 = (id)objc_claimAutoreleasedReturnValue();
    long long v299 = 0u;
    long long v300 = 0u;
    long long v297 = 0u;
    long long v298 = 0u;
    id v212 = v72;
    id v230 = [v212 countByEnumeratingWithState:&v297 objects:v291 count:16];
    if (v230)
    {
      pc = *(apr_pool_t **)v298;
      do
      {
        uint64_t v73 = 0;
        do
        {
          if (*(apr_pool_t **)v298 != pc)
          {
            uint64_t v74 = v73;
            objc_enumerationMutation(v212);
            uint64_t v73 = v74;
          }
          uint64_t v238 = v73;
          id v75 = [v225 objectForKeyedSubscript:*(void *)(*((void *)&v297 + 1) + 8 * v73)];
          long long v269 = 0u;
          long long v270 = 0u;
          *(_OWORD *)parent = 0u;
          long long v268 = 0u;
          uint64_t v76 = (char *)[v75 countByEnumeratingWithState:parent objects:&v293 count:16];
          if (v76)
          {
            uint64_t v77 = *(void *)v268;
            do
            {
              for (uint64_t j = 0; j != v76; ++j)
              {
                if (*(void *)v268 != v77) {
                  objc_enumerationMutation(v75);
                }
                unsigned int v79 = (void *)*((void *)parent[1] + (void)j);
                CFStringRef v282 = @"context";
                int64x2_t v80 = +[NSNumber numberWithUnsignedLongLong:0];
                id v286 = v80;
                *(void *)&long long v287 = &off_759C60;
                CFStringRef v283 = @"type";
                CFStringRef v284 = @"object";
                uint64_t v81 = [v79 objectForKeyedSubscript:@"DependencyGraphRequestedThumbnailTextureID"];
                CFStringRef v285 = @"functionIndex";
                *((void *)&v287 + 1) = v81;
                id v288 = &off_759CD8;
                id v82 = +[NSDictionary dictionaryWithObjects:&v286 forKeys:&v282 count:4];
                [v239 addObject:v82];
              }
              uint64_t v76 = (char *)[v75 countByEnumeratingWithState:parent objects:&v293 count:16];
            }
            while (v76);
          }

          uint64_t v73 = v238 + 1;
        }
        while ((id)(v238 + 1) != v230);
        id v230 = [v212 countByEnumeratingWithState:&v297 objects:v291 count:16];
      }
      while (v230);
    }

    id v83 = [v202 objectForKeyedSubscript:@"object"];
    id v236 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v83, "count"));
    long long v299 = 0u;
    long long v300 = 0u;
    long long v297 = 0u;
    long long v298 = 0u;
    id v223 = (apr_pool_t *)v83;
    pd = (apr_pool_t *)[(apr_pool_t *)v223 countByEnumeratingWithState:&v297 objects:v291 count:16];
    if (pd)
    {
      id v213 = *(id *)v298;
      do
      {
        uint64_t v84 = 0;
        do
        {
          if (*(id *)v298 != v213)
          {
            uint64_t v85 = v84;
            objc_enumerationMutation(v223);
            uint64_t v84 = v85;
          }
          uint64_t v231 = v84;
          uint64_t v86 = *(apr_pool_t **)(*((void *)&v297 + 1) + 8 * v84);
          *(_OWORD *)parent = 0u;
          long long v268 = 0u;
          long long v269 = 0u;
          long long v270 = 0u;
          unsigned int v87 = [(apr_pool_t *)v223 objectForKeyedSubscript:v86];
          id v88 = (char *)[v87 countByEnumeratingWithState:parent objects:&v293 count:16];
          if (v88)
          {
            uint64_t v89 = *(void *)v268;
            do
            {
              for (uint64_t k = 0; k != v88; ++k)
              {
                if (*(void *)v268 != v89) {
                  objc_enumerationMutation(v87);
                }
                id v91 = (void *)*((void *)parent[1] + (void)k);
                id v92 = [v91 objectForKeyedSubscript:@"DependencyGraphRequestedThumbnailTextureID"];
                int64_t v93 = [v91 objectForKeyedSubscript:@"DependencyGraphRequestedTextureAttachmentIndex"];
                long long v94 = v93;
                id v286 = v86;
                if (v93) {
                  [&off_758C18 objectAtIndexedSubscript:[v93 unsignedIntegerValue]];
                }
                else {
                id v95 = [v91 objectForKeyedSubscript:@"DependencyGraphRequestedTextureID"];
                }
                *(void *)&long long v287 = v95;
                int v96 = +[NSArray arrayWithObjects:&v286 count:2];
                [v236 setObject:v96 forKeyedSubscript:v92];
              }
              id v88 = (char *)[v87 countByEnumeratingWithState:parent objects:&v293 count:16];
            }
            while (v88);
          }

          uint64_t v84 = v231 + 1;
        }
        while ((apr_pool_t *)(v231 + 1) != pd);
        pd = (apr_pool_t *)[(apr_pool_t *)v223 countByEnumeratingWithState:&v297 objects:v291 count:16];
      }
      while (pd);
    }
  }
  else
  {
    if ((v19 & 2) != 0) {
      CFStringRef v20 = @"All";
    }
    else {
      CFStringRef v20 = @"First";
    }
    id v204 = [&off_758C18 arrayByAddingObject:v20];
    [v199 setObject:v204 forKeyedSubscript:@"attachments"];
    uint64_t v202 = GTMTLReplayClient_generateThumbnails(*(void *)v234, (uint64_t)v199, (uint64_t)v200, v21);
    p = [v202 objectForKeyedSubscript:@"object"];
    uint64_t v22 = [(apr_pool_t *)p allKeys];
    uint64_t v23 = [v22 sortedArrayUsingSelector:];

    id v239 = +[NSMutableArray arrayWithCapacity:[(apr_pool_t *)p count]];
    long long v299 = 0u;
    long long v300 = 0u;
    long long v297 = 0u;
    long long v298 = 0u;
    obuint64_t j = v23;
    id v222 = [obj countByEnumeratingWithState:&v297 objects:v291 count:16];
    if (v222)
    {
      id v209 = *(id *)v298;
      do
      {
        for (uint64_t m = 0; m != v222; uint64_t m = (char *)m + 1)
        {
          if (*(id *)v298 != v209) {
            objc_enumerationMutation(obj);
          }
          int v227 = [(apr_pool_t *)p objectForKeyedSubscript:*(void *)(*((void *)&v297 + 1) + 8 * (void)m)];
          id v24 = [v227 objectForKeyedSubscript:@"target"];
          long long v269 = 0u;
          long long v270 = 0u;
          *(_OWORD *)parent = 0u;
          long long v268 = 0u;
          uint64_t v25 = (char *)[v24 countByEnumeratingWithState:parent objects:&v293 count:16];
          if (v25)
          {
            uint64_t v26 = *(void *)v268;
            do
            {
              for (uint64_t n = 0; n != v25; ++n)
              {
                if (*(void *)v268 != v26) {
                  objc_enumerationMutation(v24);
                }
                uint64_t v28 = [v24 objectForKeyedSubscript:*((void *)parent[1] + (void)n)];
                CFStringRef v282 = @"context";
                int16x4_t v29 = +[NSNumber numberWithUnsignedLongLong:0];
                id v286 = v29;
                *(void *)&long long v287 = &off_759C60;
                CFStringRef v283 = @"type";
                CFStringRef v284 = @"object";
                int16x4_t v30 = [v28 objectForKeyedSubscript:@"object"];
                CFStringRef v285 = @"functionIndex";
                *((void *)&v287 + 1) = v30;
                id v288 = &off_759CD8;
                long long v31 = +[NSDictionary dictionaryWithObjects:&v286 forKeys:&v282 count:4];
                [v239 addObject:v31];
              }
              uint64_t v25 = (char *)[v24 countByEnumeratingWithState:parent objects:&v293 count:16];
            }
            while (v25);
          }
        }
        id v222 = [obj countByEnumeratingWithState:&v297 objects:v291 count:16];
      }
      while (v222);
    }

    long long v32 = p;
    id v236 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:-[apr_pool_t count](v32, "count")];
    long long v299 = 0u;
    long long v300 = 0u;
    long long v297 = 0u;
    long long v298 = 0u;
    id v223 = v32;
    BOOL v210 = (char *)[(apr_pool_t *)v223 countByEnumeratingWithState:&v297 objects:v291 count:16];
    if (v210)
    {
      id obja = *(id *)v298;
      do
      {
        id v33 = 0;
        do
        {
          if (*(id *)v298 != obja)
          {
            long long v34 = v33;
            objc_enumerationMutation(v223);
            id v33 = v34;
          }
          pa = v33;
          id v35 = *(apr_pool_t **)(*((void *)&v297 + 1) + 8 * (void)v33);
          id v228 = [(apr_pool_t *)v223 objectForKeyedSubscript:v35];
          uint64_t v36 = [v228 objectForKeyedSubscript:@"target"];
          long long v269 = 0u;
          long long v270 = 0u;
          *(_OWORD *)parent = 0u;
          long long v268 = 0u;
          uint32_t v37 = (char *)[v36 countByEnumeratingWithState:parent objects:&v293 count:16];
          if (v37)
          {
            uint64_t v38 = *(void *)v268;
            do
            {
              for (iuint64_t i = 0; ii != v37; ++ii)
              {
                if (*(void *)v268 != v38) {
                  objc_enumerationMutation(v36);
                }
                uint64_t v40 = *((void *)parent[1] + (void)ii);
                long long v41 = [v36 objectForKeyedSubscript:v40];
                uint64_t v42 = [v41 objectForKeyedSubscript:@"object"];
                id v286 = v35;
                *(void *)&long long v287 = v40;
                char v43 = +[NSArray arrayWithObjects:&v286 count:2];
                [v236 setObject:v43 forKeyedSubscript:v42];
              }
              uint32_t v37 = (char *)[v36 countByEnumeratingWithState:parent objects:&v293 count:16];
            }
            while (v37);
          }

          id v33 = (apr_pool_t *)((char *)pa + 1);
        }
        while ((char *)pa + 1 != v210);
        BOOL v210 = (char *)[(apr_pool_t *)v223 countByEnumeratingWithState:&v297 objects:v291 count:16];
      }
      while (v210);
    }
  }

  id v97 = v239;
  id v98 = v200;
  id v232 = objc_alloc_init((Class)NSMutableDictionary);
  long long v296 = 0u;
  long long v295 = 0u;
  long long v294 = 0u;
  long long v293 = 0u;
  id v226 = v97;
  id v99 = [v226 countByEnumeratingWithState:&v293 objects:v291 count:16];
  if (v99)
  {
    uint64_t v100 = *(void *)v294;
    do
    {
      for (juint64_t j = 0; jj != v99; juint64_t j = (char *)jj + 1)
      {
        if (*(void *)v294 != v100) {
          objc_enumerationMutation(v226);
        }
        id v102 = *(void **)(*((void *)&v293 + 1) + 8 * (void)jj);
        BOOL v103 = [v102 objectForKeyedSubscript:@"functionIndex"];
        if ([v103 unsignedIntValue] == -1)
        {
          long long v104 = [v102 objectForKeyedSubscript:@"object"];
          id v105 = [v104 unsignedLongLongValue];

          uint64_t v106 = [v98 objectAtIndexedSubscript:v105];
          uint64_t v107 = [v106 objectForKeyedSubscript:@"functionIndex"];

          BOOL v103 = (void *)v107;
        }
        id v108 = [v232 objectForKeyedSubscript:v103];
        if (!v108)
        {
          id v108 = objc_alloc_init((Class)NSMutableArray);
          [v232 setObject:v108 forKeyedSubscript:v103];
        }
        [v108 addObject:v102];
      }
      id v99 = [v226 countByEnumeratingWithState:&v293 objects:v291 count:16];
    }
    while (v99);
  }

  id v286 = (apr_pool_t *)v291;
  long long v287 = xmmword_4C8080;
  *((void *)&v287 + 1) = +[NSMutableData dataWithCapacity:4096];
  id v182 = *(id *)(v234 + 24);
  int v109 = [v232 allKeys];
  id v110 = [v109 sortedArrayUsingSelector:"compare:"];

  if ((v192[46] & 0x10) != 0 && [v110 count])
  {
    uint64_t v111 = [v110 subarrayWithRange:([v110 count] - 1, 1)];

    id v110 = (void *)v111;
  }
  long long v264 = 0u;
  long long v265 = 0u;
  long long v262 = 0u;
  long long v263 = 0u;
  id v185 = v110;
  id v187 = [v185 countByEnumeratingWithState:&v262 objects:v277 count:16];
  if (v187)
  {
    uint64_t v186 = *(void *)v263;
    while (2)
    {
      for (kuint64_t k = 0; kk != v187; kuint64_t k = (char *)kk + 1)
      {
        if (*(void *)v263 != v186) {
          objc_enumerationMutation(v185);
        }
        id v112 = *(void **)(*((void *)&v262 + 1) + 8 * (void)kk);
        GTMTLReplayController_debugSubCommandStop(v234, [v112 unsignedIntegerValue], 0);
        uint64_t v113 = [v232 objectForKeyedSubscript:v112];
        id v114 = [v113 count];
        unint64_t v193 = +[NSMutableArray arrayWithCapacity:v114];
        uint64_t v194 = +[NSMutableDictionary dictionaryWithCapacity:v114];
        [v233 removeAllObjects];
        id v115 = objc_alloc_init((Class)NSMutableArray);
        long long v260 = 0u;
        long long v261 = 0u;
        long long v258 = 0u;
        long long v259 = 0u;
        id v241 = v113;
        id v116 = [v241 countByEnumeratingWithState:&v258 objects:v276 count:16];
        if (v116)
        {
          uint64_t v117 = *(void *)v259;
          do
          {
            for (muint64_t m = 0; mm != v116; muint64_t m = (char *)mm + 1)
            {
              if (*(void *)v259 != v117) {
                objc_enumerationMutation(v241);
              }
              char v119 = [*(id *)(*((void *)&v258 + 1) + 8 * (void)mm) objectForKeyedSubscript:@"object"];
              id v120 = [v119 unsignedIntegerValue];

              id v121 = [v98 objectAtIndexedSubscript:v120];
              [v233 addObject:v121];
              unsigned int v122 = [v121 objectForKeyedSubscript:@"object"];
              id v123 = [v122 unsignedLongLongValue];

              uint64_t v124 = [v121 objectForKeyedSubscript:@"functionIndex"];
              unsigned int v125 = [v124 unsignedIntValue];

              AliasStreauint64_t m = (uint64_t *)GetAliasStream(*(void *)(*(void *)v234 + 24), (uint64_t)v123, *(void *)(*(void *)v234 + 80) + v125 - 1);
              if (AliasStream) {
                uint64_t v127 = *AliasStream;
              }
              else {
                uint64_t v127 = 0;
              }
              id v128 = *(void **)(v234 + 40);
              id v129 = +[NSNumber numberWithUnsignedLongLong:v127];
              io_registry_entry_t v130 = [v128 objectForKeyedSubscript:v129];

              if (!v130)
              {
                io_registry_entry_t v130 = [*(id *)(v234 + 8) textureForKey:v127];
              }
              [v115 addObject:v130];
            }
            id v116 = [v241 countByEnumeratingWithState:&v258 objects:v276 count:16];
          }
          while (v116);
        }

        GTMTLReplayClient_waitForUntrackedWritesToComplete(v234, v115);
        uint64_t v257 = 0;
        id v189 = GTMTLReplayClient_retrieveTexturesForResize((id *)v234, v233, v115, 1, &v257);
        char v131 = v257;
        if (v131)
        {
          id v132 = v131;
          NSErrorUserInfoKey v274 = NSUnderlyingErrorKey;
          id v275 = v131;
          id v214 = +[NSDictionary dictionaryWithObjects:&v275 forKeys:&v274 count:1];
          GTMTLReplay_fillError(v188, 101, v214);
          if (v188) {
            int v133 = *v188;
          }
          else {
            int v133 = 0;
          }
          GTMTLReplay_handleNSError(v133);
          int v176 = 1;
        }
        else
        {
          id v214 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v189, "count"));
          id v134 = [*(id *)(v234 + 8) defaultCommandQueue];
          id objb = [v134 commandBuffer];

          BOOL v135 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"TextureResize"];
          [objb setLabel:v135];

          long long v255 = 0u;
          long long v256 = 0u;
          long long v253 = 0u;
          long long v254 = 0u;
          id v136 = v189;
          id v137 = [v136 countByEnumeratingWithState:&v253 objects:v273 count:16];
          if (v137)
          {
            uint64_t v198 = *(void *)v254;
            id v191 = v136;
            while (2)
            {
              id v197 = v137;
              for (nuint64_t n = 0; nn != v197; nuint64_t n = (char *)nn + 1)
              {
                if (*(void *)v254 != v198) {
                  objc_enumerationMutation(v191);
                }
                BOOL v139 = *(void **)(*((void *)&v253 + 1) + 8 * (void)nn);
                id v140 = [v139 width];
                id v141 = [v139 height];
                CFStringRef v283 = 0;
                CFStringRef v282 = 0;
                CFStringRef v284 = 0;
                size_t v142 = [v199 objectForKeyedSubscript:@"resolution"];
                *(void *)&long long v293 = v140;
                *((void *)&v293 + 1) = v141;
                *(void *)&long long v294 = 1;
                GTMTLReplayClient_resizeResolution((unint64_t *)&v282, v142, (unint64_t *)&v293);

                *(void *)&long long v270 = 0;
                long long v268 = 0u;
                long long v269 = 0u;
                *(_OWORD *)parent = 0u;
                id v143 = [v139 device];
                [v139 pixelFormat];
                MTLPixelFormatGetInfoForDevice();

                int v144 = (int)parent[1];
                long long v145 = *(void **)(v234 + 16);
                id v252 = 0;
                GTMTLReplayController_resizeTexture(v145, v221, objb, v139, (unint64_t)v282, (unint64_t)v283, &v252);
                id v146 = (id)objc_claimAutoreleasedReturnValue();
                id v132 = v252;
                if ((v144 & 0x20000) != 0)
                {
                  unint64_t v196 = v196 & 0xFFFFFFFF00000000 | 0x1040302;
                  id v147 = [v146 newTextureViewWithPixelFormat:[v146 pixelFormat] textureType:2 levels:0 slices:[v139 mipmapLevelCount] swizzle:1 v196];

                  uint64_t v201 = v132;
                  if ((v192[46] & 0x20) != 0) {
                    uint64_t v148 = 70;
                  }
                  else {
                    uint64_t v148 = 125;
                  }
                  long long v149 = *(void **)(v234 + 16);
                  id v203 = objb;
                  id v150 = v147;
                  id v151 = v149;
                  long long v152 = v150;
                  int v205 = [v150 device];
                  [v150 pixelFormat];
                  *(void *)&long long v296 = 0;
                  long long v295 = 0u;
                  long long v294 = 0u;
                  long long v293 = 0u;
                  GTMTLPixelFormatGetInfoForDevice((uint64_t)&v293, (uint64_t)v205, v148);
                  +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v148, [v150 width], [v150 height], 0);
                  pe = (apr_pool_t *)objc_claimAutoreleasedReturnValue();
                  [(apr_pool_t *)pe setUsage:5];
                  [(apr_pool_t *)pe setResourceOptions:32];
                  id v290 = 0;
                  id v146 = [v151 newTextureWithDescriptor:pe error:&v290];

                  BOOL v153 = v290;
                  id v195 = v153;
                  if (v146)
                  {
                    id v154 = objc_alloc_init((Class)MTLRenderPassDescriptor);
                    unint64_t v155 = [v154 colorAttachments];
                    uint64_t v156 = [v155 objectAtIndexedSubscript:0];
                    [v156 setTexture:v146];

                    int v157 = [v203 renderCommandEncoderWithDescriptor:v154];
                    long long v297 = v293;
                    long long v298 = v294;
                    long long v299 = v295;
                    *(void *)&long long v300 = v296;
                    int v158 = GTMTLReplayController_getResizeRenderPipelineState(v221, (uint64_t)&v297, v148);
                    [v157 setRenderPipelineState:v158];

                    [v157 setVertexBuffer:*(void *)(v221 + 144) offset:0 atIndex:0];
                    [v157 setVertexBuffer:*(void *)(v221 + 144) offset:96 atIndex:1];
                    [v157 setFragmentSamplerState:*(void *)(v221 + 128) atIndex:0];
                    [v157 setFragmentTexture:v152 atIndex:0];
                    [v157 drawPrimitives:3 vertexStart:0 vertexCount:6];
                    [v157 endEncoding];
                    id v159 = v146;

                    id v160 = v201;
                  }
                  else
                  {
                    if (v153)
                    {
                      NSErrorUserInfoKey v289 = NSUnderlyingErrorKey;
                      *(void *)&long long v297 = v153;
                      uint64_t v161 = +[NSDictionary dictionaryWithObjects:&v297 forKeys:&v289 count:1];
                    }
                    else
                    {
                      uint64_t v161 = 0;
                    }
                    id v154 = v161;
                    MakeNSError(101, v161);
                    id v160 = (id)objc_claimAutoreleasedReturnValue();
                    GTMTLReplay_handleNSError(v160);
                  }

                  id v132 = v160;
                }
                if (v132)
                {
                  NSErrorUserInfoKey v271 = NSUnderlyingErrorKey;
                  id v272 = v132;
                  unsigned int v178 = +[NSDictionary dictionaryWithObjects:&v272 forKeys:&v271 count:1];
                  GTMTLReplay_fillError(v188, 101, v178);
                  if (v188) {
                    uint64_t v179 = *v188;
                  }
                  else {
                    uint64_t v179 = 0;
                  }
                  GTMTLReplay_handleNSError(v179);

                  int v176 = 1;
                  uint64_t v177 = v191;
                  goto LABEL_163;
                }
                [v214 addObject:v146];
              }
              id v136 = v191;
              id v137 = [v191 countByEnumeratingWithState:&v253 objects:v273 count:16];
              if (v137) {
                continue;
              }
              break;
            }
          }

          GTMTLReplay_commitCommandBuffer(objb);
          int v162 = (char *)[v233 count];
          if (v162)
          {
            for (uint64_t i1 = 0; i1 != v162; ++i1)
            {
              uint64_t v164 = [v214 objectAtIndexedSubscript:i1];
              unint64_t v165 = [v241 objectAtIndexedSubscript:i1];
              unint64_t v166 = [v165 objectForKeyedSubscript:@"object"];
              id v167 = [v166 unsignedIntegerValue];

              [*((id *)&v287 + 1) setLength:0];
              [*((id *)&v287 + 1) appendBytes:"MTSP" length:8];
              long long v249 = 0u;
              long long v250 = 0u;
              long long v251 = 0u;
              DWORD2(v249) = 7;
              LODWORD(v250) = 2;
              DYTraceEncode_InternalData((uint64_t)&v249, (unsigned int *)v286);
              uint64_t v168 = *(unsigned int *)v286;
              if ((*((unsigned char *)v286 + 33) & 0x10) != 0)
              {
                uint64_t v169 = v286;
                uint64_t v170 = *(unsigned int *)v286;
                do
                {
                  uint64_t v169 = (apr_pool_t *)((char *)v169 + v168);
                  uint64_t v168 = *(unsigned int *)v169;
                  v170 += v168;
                }
                while ((*((unsigned char *)v169 + 33) & 0x20) == 0);
              }
              [*((id *)&v287 + 1) appendBytes:length:];
              *(void *)&long long v293 = &v286;
              id v171 = v194;
              *((void *)&v293 + 1) = v171;
              *(void *)&long long v294 = 0;
              BOOL v172 = *(void **)(v234 + 24);
              uint64_t v248 = 0;
              GTMTLReplayClient_harvestTexture(v221, v172, v164, (uint64_t)v167, (unsigned int ***)&v293, 0xFFFFFFFFFFFFFFFFLL, 0, 0, &v248);
              int v173 = v248;
              id v174 = [*((id *)&v287 + 1) copy];
              [v193 addObject:v174];
            }
          }
          int v175 = [v182 commandBuffer];
          v242[0] = _NSConcreteStackBlock;
          v242[1] = 3221225472;
          v242[2] = __GenerateThumbnails_block_invoke;
          v242[3] = &unk_746378;
          id v243 = v193;
          id v244 = v236;
          id v245 = v194;
          uint64_t v247 = v183;
          id v246 = v184;
          [v175 addCompletedHandler:v242];

          [v182 commitCommandBuffer];
          id v132 = 0;
          int v176 = 0;
          uint64_t v177 = v243;
LABEL_163:
        }
        if (v176)
        {

          uint64_t v180 = 0;
          goto LABEL_169;
        }
      }
      id v187 = [v185 countByEnumeratingWithState:&v262 objects:v277 count:16];
      if (v187) {
        continue;
      }
      break;
    }
  }

  apr_pool_destroy(newpool);
  uint64_t v180 = 1;
LABEL_169:

  return v180;
}

void sub_2DAC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ComputeDerivedCounters(void *a1, void *a2, void *a3)
{
  id v25 = a1;
  id v5 = a2;
  id v24 = a3;
  uint64_t v23 = [v5 objectForKeyedSubscript:@"counters"];
  id v6 = objc_alloc_init((Class)NSMutableArray);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v7 = [v5 objectForKeyedSubscript:@"AverageSamples"];
  id v8 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v31 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        id v13 = v12;
        id v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v27;
          do
          {
            for (uint64_t j = 0; j != v15; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v27 != v16) {
                objc_enumerationMutation(v13);
              }
              [v6 addObjectsFromArray:*(void *)(*((void *)&v26 + 1) + 8 * (void)j)];
            }
            id v15 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
          }
          while (v15);
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v9);
  }

  id v18 = [v25 objectForKeyedSubscript:@"DerivedCounterDictionary"];
  verifyCounterDictionary(v18);
  unsigned int v19 = [v18 objectForKeyedSubscript:@"DerivedCounters"];
  CFStringRef v20 = [v19 allKeys];

  uint64_t v21 = GTMTLReplayHost_computeDerivedCountersFromData(v23, v6, v24, v20, v25);

  return v21;
}

id BatchIdFiterableCounters()
{
  if (BatchIdFiterableCounters__once != -1) {
    dispatch_once(&BatchIdFiterableCounters__once, &__block_literal_global_6455);
  }
  uint64_t v0 = (void *)BatchIdFiterableCounters_filterableCounters;

  return v0;
}

void WriteToCSVFromCounterData(void *a1, void *a2)
{
  id v3 = a1;
  id v24 = a2;
  id v4 = [v3 objectForKeyedSubscript:@"counters"];
  id v25 = v3;
  id v5 = [v3 objectForKeyedSubscript:@"AverageSamples"];
  id v6 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", (char *)objc_msgSend(v4, "count") + 1);
  [v6 addObject:@"Index"];
  uint64_t v23 = v4;
  [v6 addObjectsFromArray:v4];
  id v7 = objc_alloc_init((Class)NSMutableArray);
  id v8 = [v6 componentsJoinedByString:@","];
  [v7 addObject:v8];

  [v7 addObject:@"Frame Start 1"];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  obuint64_t j = v5;
  id v28 = [obj countByEnumeratingWithState:&v42 objects:v48 count:16];
  if (v28)
  {
    uint64_t v9 = 0;
    uint64_t v27 = *(void *)v43;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v43 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v29 = v10;
        id v11 = *(void **)(*((void *)&v42 + 1) + 8 * v10);
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        id v30 = v11;
        id v32 = [v30 countByEnumeratingWithState:&v38 objects:v47 count:16];
        if (v32)
        {
          uint64_t v31 = *(void *)v39;
          do
          {
            uint64_t v12 = 0;
            do
            {
              if (*(void *)v39 != v31) {
                objc_enumerationMutation(v30);
              }
              uint64_t v33 = v12;
              id v13 = *(void **)(*((void *)&v38 + 1) + 8 * v12);
              long long v34 = 0u;
              long long v35 = 0u;
              long long v36 = 0u;
              long long v37 = 0u;
              id v14 = v13;
              id v15 = [v14 countByEnumeratingWithState:&v34 objects:v46 count:16];
              if (v15)
              {
                id v16 = v15;
                uint64_t v17 = *(void *)v35;
                do
                {
                  id v18 = 0;
                  do
                  {
                    if (*(void *)v35 != v17) {
                      objc_enumerationMutation(v14);
                    }
                    uint64_t v19 = *(void *)(*((void *)&v34 + 1) + 8 * (void)v18);
                    [v6 removeAllObjects];
                    CFStringRef v20 = +[NSNumber numberWithUnsignedInteger:(char *)v18 + v9];
                    [v6 addObject:v20];

                    [v6 addObjectsFromArray:v19];
                    uint64_t v21 = [v6 componentsJoinedByString:@","];
                    [v7 addObject:v21];

                    id v18 = (char *)v18 + 1;
                  }
                  while (v16 != v18);
                  v9 += (uint64_t)v18;
                  id v16 = [v14 countByEnumeratingWithState:&v34 objects:v46 count:16];
                }
                while (v16);
              }

              uint64_t v12 = v33 + 1;
            }
            while ((id)(v33 + 1) != v32);
            id v32 = [v30 countByEnumeratingWithState:&v38 objects:v47 count:16];
          }
          while (v32);
        }

        uint64_t v10 = v29 + 1;
      }
      while ((id)(v29 + 1) != v28);
      id v28 = [obj countByEnumeratingWithState:&v42 objects:v48 count:16];
    }
    while (v28);
  }

  [v7 addObject:@"Frame End 1"];
  uint64_t v22 = [v7 componentsJoinedByString:@"\n"];
  [v22 writeToURL:v24 atomically:0 encoding:4 error:0];
}

void WriteToPlistFromCounterData(void *a1, void *a2)
{
  id v3 = a1;
  id v28 = a2;
  id v4 = [v3 objectForKeyedSubscript:@"counters"];
  uint64_t v29 = v3;
  id v5 = [v3 objectForKeyedSubscript:@"AverageSamples"];
  id v32 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v5, "count"));
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  obuint64_t j = v5;
  id v33 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
  if (v33)
  {
    uint64_t v6 = 0;
    uint64_t v31 = *(void *)v52;
    do
    {
      uint64_t v7 = 0;
      uint64_t v8 = v6;
      do
      {
        uint64_t v34 = v8;
        if (*(void *)v52 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v35 = v7;
        uint64_t v9 = *(void **)(*((void *)&v51 + 1) + 8 * v7);
        id v38 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v9, "count"));
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        id v36 = v9;
        id v39 = [v36 countByEnumeratingWithState:&v47 objects:v58 count:16];
        if (v39)
        {
          uint64_t v10 = 0;
          uint64_t v37 = *(void *)v48;
          do
          {
            uint64_t v11 = 0;
            uint64_t v12 = v10;
            do
            {
              uint64_t v40 = v12;
              if (*(void *)v48 != v37) {
                objc_enumerationMutation(v36);
              }
              uint64_t v41 = v11;
              id v13 = *(void **)(*((void *)&v47 + 1) + 8 * v11);
              id v14 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v13, "count"));
              long long v43 = 0u;
              long long v44 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              id v15 = v13;
              id v16 = [v15 countByEnumeratingWithState:&v43 objects:v57 count:16];
              if (v16)
              {
                id v17 = v16;
                uint64_t v18 = 0;
                uint64_t v19 = *(void *)v44;
                do
                {
                  CFStringRef v20 = 0;
                  do
                  {
                    if (*(void *)v44 != v19) {
                      objc_enumerationMutation(v15);
                    }
                    uint64_t v21 = *(void *)(*((void *)&v43 + 1) + 8 * (void)v20);
                    id v22 = [objc_alloc((Class)NSString) initWithFormat:@"Draw Call %llu" v20 + v18];
                    id v23 = [objc_alloc((Class)NSDictionary) initWithObjects:v21 forKeys:v4];
                    [v14 setObject:v23 forKeyedSubscript:v22];

                    CFStringRef v20 = (char *)v20 + 1;
                  }
                  while (v17 != v20);
                  v18 += (uint64_t)v20;
                  id v17 = [v15 countByEnumeratingWithState:&v43 objects:v57 count:16];
                }
                while (v17);
              }

              uint64_t v10 = v40 + 1;
              id v24 = [objc_alloc((Class)NSString) initWithFormat:@"Command Encoder %llu" v40];
              [v38 setObject:v14 forKeyedSubscript:v24];

              uint64_t v11 = v41 + 1;
              uint64_t v12 = v40 + 1;
            }
            while ((id)(v41 + 1) != v39);
            id v39 = [v36 countByEnumeratingWithState:&v47 objects:v58 count:16];
          }
          while (v39);
        }

        uint64_t v6 = v34 + 1;
        id v25 = [objc_alloc((Class)NSString) initWithFormat:@"Command Buffer %llu" v34];
        [v32 setObject:v38 forKeyedSubscript:v25];

        uint64_t v7 = v35 + 1;
        uint64_t v8 = v34 + 1;
      }
      while ((id)(v35 + 1) != v33);
      id v33 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
    }
    while (v33);
  }

  CFStringRef v55 = @"Frame 0";
  id v56 = v32;
  long long v26 = +[NSDictionary dictionaryWithObjects:&v56 forKeys:&v55 count:1];
  uint64_t v42 = 0;
  uint64_t v27 = +[NSPropertyListSerialization dataWithPropertyList:v26 format:100 options:0 error:&v42];

  [v27 writeToURL:v28 atomically:0];
}

void __GenerateThumbnails_block_invoke(uint64_t a1)
{
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v23 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v23)
  {
    uint64_t v22 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v23; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v34 != v22) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        if ((unint64_t)[v3 length] >= 9)
        {
          unint64_t v4 = 8;
          do
          {
            id v5 = v3;
            uint64_t v6 = (unsigned int *)((char *)[v5 bytes] + v4);
            unsigned int v7 = v6[1];
            if (v7 == -10236 || v7 == -16236)
            {
              uint64_t v32 = 0;
              long long v30 = 0u;
              long long v31 = 0u;
              memset(v29, 0, sizeof(v29));
              DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage((uint64_t)v29, (uint64_t)v6, *v6 - 36, 0);
              uint64_t v9 = *(void **)(a1 + 40);
              uint64_t v10 = +[NSNumber numberWithUnsignedLongLong:*(void *)&v29[0]];
              uint64_t v11 = [v9 objectForKeyedSubscript:v10];

              uint64_t v12 = *(void **)(a1 + 48);
              id v13 = +[NSString stringWithUTF8String:*((void *)&v30 + 1)];
              id v14 = [v12 objectForKeyedSubscript:v13];

              id v15 = *(void **)(*(void *)(a1 + 64) + 8);
              v24[0] = _NSConcreteStackBlock;
              v24[1] = 3221225472;
              v24[2] = __GenerateThumbnails_block_invoke_2;
              v24[3] = &unk_746350;
              id v25 = *(id *)(a1 + 48);
              id v16 = *(id *)(a1 + 56);
              id v27 = v11;
              id v28 = v16;
              id v26 = v14;
              id v17 = v11;
              id v18 = v14;
              [v15 addOperationWithBlock:v24];
            }
            uint64_t v19 = *v6;
            if ((*((unsigned char *)v6 + 33) & 0x10) != 0)
            {
              uint64_t v20 = *v6;
              do
              {
                uint64_t v6 = (unsigned int *)((char *)v6 + v19);
                uint64_t v19 = *v6;
                v20 += v19;
              }
              while ((*((unsigned char *)v6 + 33) & 0x20) == 0);
            }
            else
            {
              uint64_t v20 = *v6;
            }
            v4 += v20;
          }
          while (v4 < (unint64_t)[v5 length]);
        }
      }
      id v23 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    }
    while (v23);
  }
}

void __GenerateThumbnails_block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) count];
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 48) objectAtIndexedSubscript:0];
  unint64_t v4 = [*(id *)(a1 + 48) objectAtIndexedSubscript:1];
  (*(void (**)(uint64_t, uint64_t, id, void *))(v2 + 16))(v2, v3, v5, v4);
}

void FetchResourceObject(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = (void *)os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, v5);
  id v8 = objc_alloc_init((Class)NSOperation);
  objc_initWeak(&location, v8);
  id v9 = &_dispatch_main_q;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = __FetchResourceObject_block_invoke;
  block[3] = &unk_7463C0;
  id v28 = a1;
  id v10 = v8;
  id v27 = v10;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = __FetchResourceObject_block_invoke_2;
  v23[3] = &unk_746410;
  id v11 = &_dispatch_main_q;
  id v24 = &_dispatch_main_q;
  v25[1] = a1;
  objc_copyWeak(v25, &location);
  [v10 setCompletionBlock:v23];
  objc_destroyWeak(v25);

  id v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472;
  id v17 = __FetchResourceObject_block_invoke_4;
  id v18 = &unk_746438;
  objc_copyWeak(v21, &location);
  v21[1] = a1;
  id v12 = v5;
  id v19 = v12;
  id v13 = v6;
  id v20 = v13;
  v21[2] = v7;
  int v22 = 0;
  id v14 = +[NSBlockOperation blockOperationWithBlock:&v15];
  [a1[32] addOperation:v14, v15, v16, v17, v18];
  [v10 addDependency:v14];
  [a1[33] addOperation:v10];

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
}

void sub_2DC54C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

id __FetchResourceObject_block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 272) addObject:*(void *)(a1 + 32)];
}

void __FetchResourceObject_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = __FetchResourceObject_block_invoke_3;
  v2[3] = &unk_7463E8;
  v3[1] = *(id *)(a1 + 48);
  objc_copyWeak(v3, (id *)(a1 + 40));
  dispatch_async(v1, v2);
  objc_destroyWeak(v3);
}

void __FetchResourceObject_block_invoke_4(uint64_t a1)
{
  id v27 = +[NSMutableDictionary dictionaryWithCapacity:1];
  +[NSMutableData dataWithCapacity:4096];
  v32[0] = &v44;
  v32[1] = 1024;
  id v26 = (id)objc_claimAutoreleasedReturnValue();
  id v33 = v26;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned __int8 v3 = [WeakRetained isCancelled];

  if ((v3 & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 56) + 288) waitUntilDownloadCapacity];
    uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
    [*(id *)(v4 + 24) releaseBuffer];
    [*(id *)(v4 + 16) waitUntilCapacity];
    GetAttributes(*(void *)(a1 + 56), *(void **)(a1 + 32));
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    long long v34 = (void **)v32;
    id v6 = v27;
    uint64_t v35 = (uint64_t)v6;
    long long v36 = 0;
    uint64_t v31 = 0;
    unsigned __int8 v7 = HarvestResourceObject();
    id v8 = 0;
    id v9 = v8;
    if ((v7 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

      goto LABEL_8;
    }
  }
  id v5 = *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  id v10 = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned __int8 v11 = [v10 isCancelled];

  if (v11)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    [v5 clearCommandBuffer];
  }
  else
  {
    id val = objc_loadWeakRetained((id *)(a1 + 48));
    id v12 = *(void **)(a1 + 64);
    int v13 = *(_DWORD *)(a1 + 72);
    id v14 = *(void **)(a1 + 40);
    objc_initWeak(&location, val);
    id v15 = v27;
    id v16 = v26;
    id v17 = v14;
    long long v34 = _NSConcreteStackBlock;
    uint64_t v35 = 3221225472;
    long long v36 = __FetchResourceObjectReplyOperation_block_invoke;
    uint64_t v37 = &unk_7464D0;
    objc_copyWeak(v41, &location);
    id v18 = v15;
    id v38 = v18;
    v41[1] = v12;
    int v42 = v13;
    id v19 = v16;
    id v39 = v19;
    id v20 = v17;
    id v40 = v20;
    uint64_t v21 = +[NSBlockOperation blockOperationWithBlock:&v34];

    objc_destroyWeak(v41);
    objc_destroyWeak(&location);

    id v22 = objc_loadWeakRetained((id *)(a1 + 48));
    [v22 addDependency:v21];

    id v23 = [v5 commandBuffer];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    void v28[2] = __FetchResourceObject_block_invoke_29;
    void v28[3] = &unk_746888;
    uint64_t v30 = *(void *)(a1 + 56);
    id v24 = v21;
    id v29 = v24;
    [v23 addCompletedHandler:v28];

    [v5 commitCommandBuffer];
  }
LABEL_8:
}

void sub_2DC9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  objc_destroyWeak(v32);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

id GetAttributes(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 objectForKeyedSubscript:@"functionIndex"];
  unsigned int v5 = [v4 unsignedIntValue];

  if (v5 == -1)
  {
    unsigned __int8 v7 = [v3 objectForKeyedSubscript:@"object"];
    id v8 = [v7 unsignedLongLongValue];

    id v6 = [*(id *)(a1 + 88) objectAtIndexedSubscript:v8];
  }
  else
  {
    id v6 = v3;
  }
  id v9 = v6;

  return v9;
}

void __FetchResourceObjectReplyOperation_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  unsigned __int8 v3 = [WeakRetained isCancelled];

  if (v3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v4();
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    unsigned int v5 = [*(id *)(a1 + 32) allKeys];
    id v6 = [v5 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v25 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v24 + 1) + 8 * i);
          unsigned __int8 v11 = [*(id *)(a1 + 32) objectForKeyedSubscript:v10];
          id v12 = PreprocessICBData(v11);
          [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:v10];
        }
        id v7 = [v5 countByEnumeratingWithState:&v24 objects:v32 count:16];
      }
      while (v7);
    }

    int v13 = g_signpostLog;
    id v14 = v13;
    os_signpost_id_t v15 = *(void *)(a1 + 64);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v13))
    {
      int v16 = *(_DWORD *)(a1 + 72);
      id v17 = [*(id *)(a1 + 40) length];
      *(_DWORD *)long long buf = 67109376;
      int v29 = v16;
      __int16 v30 = 2048;
      id v31 = v17;
      _os_signpost_emit_with_name_impl(&def_1C1270, v14, OS_SIGNPOST_INTERVAL_BEGIN, v15, "Replayer-5-network", "%u. sendFbufStreamData %{xcode:size-in-bytes}lu", buf, 0x12u);
    }

    uint64_t v18 = *(void *)(a1 + 48);
    id v19 = [*(id *)(a1 + 40) copy];
    id v20 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, id))(v18 + 16))(v18, v19, v20);

    uint64_t v21 = g_signpostLog;
    id v22 = v21;
    os_signpost_id_t v23 = *(void *)(a1 + 64);
    if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v21))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&def_1C1270, v22, OS_SIGNPOST_INTERVAL_END, v23, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
    }
  }
}

id __FetchResourceObject_block_invoke_29(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 264) addOperation:*(void *)(a1 + 32)];
}

id PreprocessICBData(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || [v1 count] != (char *)&def_1C1270 + 2)
  {
    id v8 = v1;
    goto LABEL_153;
  }
  uint64_t v2 = [v1 objectAtIndexedSubscript:0];
  if (IsResourceIndirectCommandBuffer(v2))
  {
    unsigned __int8 v3 = [v1 objectAtIndexedSubscript:1];
    uint64_t v4 = &send_ptr;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || [v3 length] != &dword_18)
    {
      id v8 = v1;
LABEL_151:

      goto LABEL_152;
    }
    unsigned int v5 = (unsigned __int16 *)[v3 bytes];
    id v6 = v2;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v137 = 0u;
    GTMTLCreateIndirectCommandEncoder((uint64_t)&v137, (uint64_t)v5);
    int v7 = v5[4];
    if ((v7 & 0xFE70) != 0)
    {
      if ((v7 & 0xFFFFFF9F) != 0)
      {

        goto LABEL_149;
      }
      id v105 = v1;
      uint64_t v106 = v6;
      uint64_t v107 = v3;
      id v108 = v2;
      id v131 = v6;
      id v74 = [v131 size];
      uint64_t v75 = *((void *)&v143 + 1);
      id v111 = +[NSMutableData dataWithLength:*((void *)&v143 + 1) * (void)v74];
      id v129 = (char *)[v111 mutableBytes];
      if (v74)
      {
        id v134 = 0;
        uint64_t v76 = 0;
        uint64_t v117 = v143 + 72;
        id v119 = 0;
        uint64_t v77 = (unsigned char *)v137;
        uint64_t v125 = v75;
        uint64_t v127 = *((void *)&v137 + 1);
        uint64_t v115 = v138;
        uint64_t v123 = v143;
        uint64_t v121 = ((void)v143 - (void)v142) >> 3;
        uint64_t v78 = &v129[v142];
        uint64_t v113 = *((void *)&v140 + 1);
        unsigned int v79 = &v129[*((void *)&v140 + 1)];
        int64x2_t v80 = &v129[*((void *)&v141 + 1)];
        while (1)
        {
          uint64_t v81 = [v131 indirectComputeCommandAtIndex:v76];
          id v82 = (uint64_t *)[v81 getCommandType];
          id v136 = &v129[v75 * (void)v76];
          *(void *)&v136[v127] = v82;
          if (v82) {
            break;
          }
LABEL_145:

          uint64_t v76 = (char *)v76 + 1;
          v78 += v75;
          v79 += v75;
          v80 += v75;
          if (v76 == v74) {
            goto LABEL_146;
          }
        }
        id v83 = v82;
        if ((int)v121 >= 1)
        {
          uint64_t v84 = 0;
          do
          {
            *(void *)&v78[8 * v84] = [v81 getKernelAttributeStrideAtIndex:v84];
            ++v84;
          }
          while (v121 != v84);
        }
        uint64_t v85 = &v136[v123];
        if (v83 == (uint64_t *)&stru_20)
        {
          id v88 = [v81 dispatchThreadgroupsArguments];
          unsigned int v87 = v88;
          long long v156 = 0uLL;
          uint64_t v157 = 0;
          if (v88)
          {
            [v88 threadgroupsPerGrid];
            goto LABEL_123;
          }
        }
        else
        {
          if (v83 != &stru_20.vmsize)
          {
LABEL_129:
            if (!v77[11])
            {
              id v97 = [v81 getPipelineStateUniqueIdentifier];
              id v98 = v119;
              if (v97 != (id)-1) {
                id v98 = v97;
              }
              id v119 = v98;
              *(void *)&v136[v115] = v98;
            }
            uint64_t v75 = v125;
            if (!v77[10])
            {
              if (v77[13])
              {
                unint64_t v99 = 0;
                do
                {
                  id v100 = [v81 getKernelBufferAtIndex:v99];
                  if (v100 == (id)-1)
                  {
                    if (v134) {
                      id v100 = *(id *)&v134[8 * v99];
                    }
                    else {
                      id v100 = 0;
                    }
                  }
                  *(void *)&v79[8 * v99++] = v100;
                }
                while (v99 < v77[13]);
              }
              id v134 = &v136[v113];
              uint64_t v75 = v125;
            }
            if (v77[14])
            {
              unint64_t v101 = 0;
              do
              {
                *(void *)&v80[8 * v101] = [v81 getThreadgroupMemoryLengthAtIndex:v101];
                ++v101;
              }
              while (v101 < v77[14]);
            }
            goto LABEL_145;
          }
          uint64_t v86 = [v81 dispatchThreadsArguments];
          unsigned int v87 = v86;
          long long v156 = 0uLL;
          uint64_t v157 = 0;
          if (v86)
          {
            [v86 threadsPerGrid];
LABEL_123:
            long long v154 = 0uLL;
            uint64_t v155 = 0;
            [v87 threadsPerThreadgroup];
            long long v89 = v156;
            uint64_t v90 = v157;
            long long v91 = v154;
            uint64_t v92 = v155;
LABEL_125:
            int64_t v93 = &v136[v117];
            *(_OWORD *)int64_t v93 = v89;
            *((void *)v93 + 2) = v90;
            *(_OWORD *)(v93 + 24) = v91;
            *((void *)v93 + 5) = v92;
            long long v94 = 0uLL;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v151 = 0u;
            if (v81)
            {
              [v81 getStageInRegion];
              long long v94 = v151;
              long long v95 = v152;
              long long v96 = v153;
            }
            else
            {
              long long v95 = 0uLL;
              long long v96 = 0uLL;
            }
            *(_OWORD *)uint64_t v85 = v94;
            *((_OWORD *)v85 + 1) = v95;
            *((_OWORD *)v85 + 2) = v96;
            v85[64] = [v81 hasBarrier];

            goto LABEL_129;
          }
        }
        uint64_t v92 = 0;
        uint64_t v90 = 0;
        uint64_t v155 = 0;
        long long v89 = 0uLL;
        long long v154 = 0u;
        long long v91 = 0uLL;
        goto LABEL_125;
      }
LABEL_146:
      id v72 = [v111 copy];

      uint64_t v73 = v131;
    }
    else
    {
      id v105 = v1;
      uint64_t v106 = v6;
      uint64_t v107 = v3;
      id v108 = v2;
      id v120 = v6;
      id v9 = [v120 size];
      uint64_t v10 = *((void *)&v143 + 1);
      +[NSMutableData dataWithLength:*((void *)&v143 + 1) * (void)v9];
      id v116 = v9;
      id v118 = (id)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        uint64_t v11 = 0;
        int v109 = 0;
        id v110 = 0;
        id context = 0;
        id v12 = 0;
        long long v104 = 0;
        uint64_t v13 = 0;
        id v14 = "getVertexBufferAddressAtIndex:";
        BOOL v135 = 0;
        uint64_t v112 = v10;
        uint64_t v114 = *((void *)&v137 + 1);
        do
        {
          os_signpost_id_t v15 = v14;
          id v17 = [v120 indirectRenderCommandAtIndex:v13];
          uint64_t v128 = v13;
          io_registry_entry_t v130 = (char *)[v118 mutableBytes];
          uint64_t v18 = &v130[v10 * v13];
          id v19 = (uint32_t *)[v17 getCommandType];
          *(void *)&v18[v114] = v19;
          if (v19)
          {
            id v20 = v19;
            unsigned int v122 = v16;
            uint64_t v124 = v12;
            int v126 = v18;
            uint64_t v21 = v143;
            id v22 = &v18[v143];
            if ((int)(((void)v143 - (void)v142) >> 3) >= 1)
            {
              uint64_t v23 = 0;
              uint64_t v24 = (((void)v143 - (void)v142) >> 3);
              long long v25 = &v130[v142 + v11];
              do
              {
                *(void *)&v25[8 * v23] = [v17 getVertexAttributeStrideAtIndex:v23];
                ++v23;
              }
              while (v24 != v23);
            }
            id v14 = v15;
            long long v26 = v126;
            switch((unint64_t)v20)
            {
              case 1uLL:
                long long v27 = [v17 drawArguments];
                *(void *)id v22 = [v27 primitiveType];
                *((void *)v22 + 1) = [v27 vertexStart];
                *((void *)v22 + 2) = [v27 vertexCount];
                *((void *)v22 + 3) = [v27 instanceCount];
                *((void *)v22 + 4) = [v27 baseInstance];
                goto LABEL_44;
              case 2uLL:
                long long v27 = [v17 drawIndexedArguments];
                *(void *)id v22 = [v27 primitiveType];
                *((void *)v22 + 1) = [v27 indexCount];
                *((void *)v22 + 2) = [v27 indexType];
                *((void *)v22 + 3) = [v27 indexBufferGPUVirtualAddress];
                *((void *)v22 + 4) = [v27 instanceCount];
                *((void *)v22 + 5) = [v27 baseVertex];
                *((void *)v22 + 6) = [v27 baseInstance];
                if (*((void *)v22 + 2) == -1) {
                  *((void *)v22 + 2) = *((void *)v104 + 2);
                }
                long long v104 = v22;
                goto LABEL_44;
              case 3uLL:
              case 5uLL:
              case 6uLL:
              case 7uLL:
                goto LABEL_45;
              case 4uLL:
                id v33 = [v17 getTessellationFactorArguments];
                long long v34 = &v126[v21];
                *(void *)&v126[v21] = [v33 virtualAddress];
                *((void *)v22 + 1) = [v33 instanceStride];
                [v33 scale];
                *((_DWORD *)v22 + 4) = v35;

                long long v27 = [v17 drawPatchesArguments];
                *((void *)v34 + 3) = [v27 numberOfPatchControlPoints];
                *((void *)v34 + 4) = [v27 patchStart];
                *((void *)v34 + 5) = [v27 patchCount];
                *((void *)v34 + 6) = [v27 patchIndexBufferVirtualAddress];
                *((void *)v34 + 7) = [v27 instanceCount];
                *((void *)v34 + 8) = [v27 baseInstance];
                goto LABEL_44;
              case 8uLL:
                long long v36 = [v17 getTessellationFactorArguments];
                uint64_t v37 = &v126[v21];
                *(void *)&v126[v21] = [v36 virtualAddress];
                *((void *)v22 + 1) = [v36 instanceStride];
                [v36 scale];
                *((_DWORD *)v22 + 4) = v38;

                long long v27 = [v17 drawIndexedPatchesArguments];
                *((void *)v37 + 3) = [v27 numberOfPatchControlPoints];
                *((void *)v37 + 4) = [v27 patchStart];
                *((void *)v37 + 5) = [v27 patchCount];
                *((void *)v37 + 6) = [v27 patchIndexBufferVirtualAddress];
                *((void *)v37 + 7) = [v27 controlPointIndexBufferVirtualAddress];
                *((void *)v37 + 8) = [v27 instanceCount];
                *((void *)v37 + 9) = [v27 baseInstance];
                goto LABEL_44;
              default:
                if (v20 == (uint32_t *)&stru_68.segname[8])
                {
                  id v39 = [v17 drawMeshThreadgroupsArguments];
                  long long v27 = v39;
                  if (v39)
                  {
                    [v39 threadgroupsPerGrid];
                    uint64_t v40 = v152;
                    *(_OWORD *)id v22 = v151;
                    *((void *)v22 + 2) = v40;
                    [v27 threadsPerObjectThreadgroup];
                    uint64_t v41 = v157;
                    *(_OWORD *)(v22 + 24) = v156;
                    *((void *)v22 + 5) = v41;
                    [v27 threadsPerMeshThreadgroup];
                    long long v31 = v154;
                    uint64_t v32 = v155;
                    id v14 = v15;
                    long long v26 = v126;
                  }
                  else
                  {
                    if (s_logUsingOsLog)
                    {
                      long long v43 = gt_default_log();
                      if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)long long buf = 0;
                        _os_log_fault_impl(&def_1C1270, v43, OS_LOG_TYPE_FAULT, "fail: Unable to decode MTLIndirectCommandTypeDrawMeshThreadgroups", buf, 2u);
                      }
                    }
                    else
                    {
                      long long v45 = __stderrp;
                      long long v43 = +[NSString stringWithFormat:@"fail: Unable to decode MTLIndirectCommandTypeDrawMeshThreadgroups"];
                      fprintf(v45, "%s\n", (const char *)[v43 UTF8String]);
                    }
                    id v14 = v15;
                    long long v26 = v126;

                    uint64_t v32 = 0;
                    *(void *)&long long v152 = 0;
                    long long v31 = 0uLL;
                    long long v151 = 0u;
                    *((void *)v22 + 2) = 0;
                    *(_OWORD *)id v22 = 0u;
                    uint64_t v157 = 0;
                    long long v156 = 0u;
                    *((void *)v22 + 5) = 0;
                    *(_OWORD *)(v22 + 24) = 0u;
                    uint64_t v155 = 0;
                    long long v154 = 0u;
                  }
                }
                else
                {
                  long long v26 = v126;
                  if (v20 != &stru_B8.reserved2)
                  {
                    id v14 = v15;
                    goto LABEL_45;
                  }
                  id v28 = [v17 drawMeshThreadsArguments];
                  long long v27 = v28;
                  id v14 = v15;
                  if (v28)
                  {
                    [v28 threadsPerGrid];
                    uint64_t v29 = v149;
                    *(_OWORD *)id v22 = v148;
                    *((void *)v22 + 2) = v29;
                    [v27 threadsPerObjectThreadgroup];
                    uint64_t v30 = v147;
                    *(_OWORD *)(v22 + 24) = v146;
                    *((void *)v22 + 5) = v30;
                    [v27 threadsPerMeshThreadgroup];
                    long long v31 = v144;
                    uint64_t v32 = v145;
                  }
                  else
                  {
                    if (s_logUsingOsLog)
                    {
                      int v42 = gt_default_log();
                      if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)long long buf = 0;
                        _os_log_fault_impl(&def_1C1270, v42, OS_LOG_TYPE_FAULT, "fail: Unable to decode MTLIndirectCommandTypeDrawMeshThreads", buf, 2u);
                      }
                    }
                    else
                    {
                      char v44 = __stderrp;
                      int v42 = +[NSString stringWithFormat:@"fail: Unable to decode MTLIndirectCommandTypeDrawMeshThreads"];
                      fprintf(v44, "%s\n", (const char *)[v42 UTF8String]);
                    }

                    uint64_t v32 = 0;
                    uint64_t v149 = 0;
                    long long v31 = 0uLL;
                    long long v148 = 0u;
                    *((void *)v22 + 2) = 0;
                    *(_OWORD *)id v22 = 0u;
                    uint64_t v147 = 0;
                    long long v146 = 0u;
                    *((void *)v22 + 5) = 0;
                    *(_OWORD *)(v22 + 24) = 0u;
                    uint64_t v145 = 0;
                    long long v144 = 0u;
                  }
                }
                *((_OWORD *)v22 + 3) = v31;
                *((void *)v22 + 8) = v32;
LABEL_44:

LABEL_45:
                long long v46 = (unsigned char *)v137;
                if (!*(unsigned char *)(v137 + 11))
                {
                  id v47 = [v17 getPipelineStateUniqueIdentifier];
                  id v48 = v110;
                  if (v47 != (id)-1) {
                    id v48 = v47;
                  }
                  id v110 = v48;
                  *(void *)&v26[v138] = v48;
                }
                id v12 = v124;
                if (!v46[10])
                {
                  uint64_t v49 = *((void *)&v138 + 1);
                  if (v46[18])
                  {
                    unint64_t v50 = 0;
                    long long v51 = &v130[*((void *)&v138 + 1) + v11];
                    do
                    {
                      if (objc_opt_respondsToSelector()) {
                        id v52 = [v17 getVertexBufferAddressAtIndex:v50];
                      }
                      else {
                        id v52 = [v17 getVertexBufferAtIndex:v50];
                      }
                      if (v52 == (id)-1) {
                        id v53 = 0;
                      }
                      else {
                        id v53 = v52;
                      }
                      if (v52 == (id)-1 && v109) {
                        id v53 = *(id *)&v109[8 * v50];
                      }
                      *(void *)&v51[8 * v50++] = v53;
                    }
                    while (v50 < v46[18]);
                  }
                  uint64_t v54 = v139;
                  if (v46[12])
                  {
                    unint64_t v55 = 0;
                    id v56 = &v130[v139 + v11];
                    do
                    {
                      if (objc_opt_respondsToSelector()) {
                        id v57 = [v17 getFragmentBufferAddressAtIndex:v55];
                      }
                      else {
                        id v57 = [v17 getFragmentBufferAtIndex:v55];
                      }
                      if (v57 == (id)-1) {
                        id v58 = 0;
                      }
                      else {
                        id v58 = v57;
                      }
                      if (v57 == (id)-1 && v135) {
                        id v58 = *(id *)&v135[8 * v55];
                      }
                      *(void *)&v56[8 * v55++] = v58;
                    }
                    while (v55 < v46[12]);
                  }
                  uint64_t v59 = *((void *)&v139 + 1);
                  if (v46[16])
                  {
                    unint64_t v60 = 0;
                    id v61 = &v130[*((void *)&v139 + 1) + v11];
                    do
                    {
                      if (objc_opt_respondsToSelector())
                      {
                        id v62 = [v17 getObjectBufferAddressAtIndex:v60];
                        if (v62 == (id)-1) {
                          id v63 = 0;
                        }
                        else {
                          id v63 = v62;
                        }
                        if (v62 == (id)-1 && context) {
                          id v63 = *(id *)&context[8 * v60];
                        }
                      }
                      else
                      {
                        if (GTMTLDecodeIndirectRenderCommandBuffer_onceToken != -1) {
                          dispatch_once(&GTMTLDecodeIndirectRenderCommandBuffer_onceToken, &__block_literal_global_1163);
                        }
                        id v63 = 0;
                      }
                      *(void *)&v61[8 * v60++] = v63;
                    }
                    while (v60 < v46[16]);
                  }
                  long long v26 = v126;
                  int v109 = &v126[v49];
                  BOOL v135 = &v126[v54];
                  id context = &v126[v59];
                  uint64_t v64 = &v126[v140];
                  if (v46[15])
                  {
                    unint64_t v65 = 0;
                    id v66 = &v130[v140 + v11];
                    do
                    {
                      if (objc_opt_respondsToSelector())
                      {
                        id v67 = [v17 getMeshBufferAddressAtIndex:v65];
                        if (v67 == (id)-1) {
                          id v68 = 0;
                        }
                        else {
                          id v68 = v67;
                        }
                        if (v67 == (id)-1 && v124) {
                          id v68 = *(id *)&v124[8 * v65];
                        }
                      }
                      else
                      {
                        if (GTMTLDecodeIndirectRenderCommandBuffer_onceToken_44 != -1) {
                          dispatch_once(&GTMTLDecodeIndirectRenderCommandBuffer_onceToken_44, &__block_literal_global_47);
                        }
                        id v68 = 0;
                      }
                      *(void *)&v66[8 * v65++] = v68;
                    }
                    while (v65 < v46[15]);
                    id v12 = v64;
                    long long v26 = v126;
                  }
                  else
                  {
                    id v12 = &v126[v140];
                  }
                }
                if (v46[17])
                {
                  unint64_t v69 = 0;
                  int32x2_t v70 = &v130[v141 + v11];
                  do
                  {
                    *(void *)&v70[8 * v69] = [v17 getObjectThreadgroupMemoryLengthAtIndex:v69];
                    ++v69;
                  }
                  while (v69 < v46[17]);
                }
                if (v46[21])
                {
                  uint64_t v71 = *((void *)&v142 + 1);
                  *(void *)&v26[v71] = [v17 hasBarrier];
                }
                uint64_t v10 = v112;
                int v16 = v122;
                break;
            }
          }
          else
          {
            id v14 = v15;
          }

          uint64_t v13 = v128 + 1;
          v11 += v10;
        }
        while ((id)(v128 + 1) != v116);
      }
      id v72 = [v118 copy];

      uint64_t v73 = v120;
    }

    unsigned __int8 v3 = v107;
    uint64_t v2 = v108;
    uint64_t v4 = &send_ptr;
    id v1 = v105;
    if (v72)
    {
      id v102 = v72;
      id v8 = v102;
LABEL_150:

      goto LABEL_151;
    }
LABEL_149:
    id v8 = [v4[192] data];
    id v102 = 0;
    goto LABEL_150;
  }
  id v8 = v1;
LABEL_152:

LABEL_153:

  return v8;
}

void __FetchResourceObject_block_invoke_3(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 40) + 272);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [v1 removeObject:WeakRetained];
}

void FetchResourceObjectBatch(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, v7);
  id v11 = [v7 count];
  id v12 = g_signpostLog;
  uint64_t v13 = v12;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v12))
  {
    *(_DWORD *)long long buf = 67109376;
    int v27 = 0;
    __int16 v28 = 2048;
    id v29 = v11;
    _os_signpost_emit_with_name_impl(&def_1C1270, v13, OS_SIGNPOST_EVENT, v10, "Replayer-1-serial", "%u. kDYMessageFetchResourceObjectBatch x%lu", buf, 0x12u);
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = __FetchResourceObjectBatch_block_invoke;
  v18[3] = &unk_7464A8;
  id v21 = v9;
  id v22 = v11;
  uint64_t v23 = a1;
  os_signpost_id_t v24 = v10;
  int v25 = 0;
  id v19 = v7;
  id v20 = v8;
  id v14 = v8;
  id v15 = v9;
  id v16 = v7;
  id v17 = +[NSBlockOperation blockOperationWithBlock:v18];
  [v17 setQueuePriority:-4];
  [*(id *)(a1 + 256) addOperation:v17];
}

void __FetchResourceObjectBatch_block_invoke(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSMutableData) initWithLength:8 * *(void *)(a1 + 56)];
  id v59 = [objc_alloc((Class)NSMutableArray) initWithCapacity:*(void *)(a1 + 56)];
  id v56 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:*(void *)(a1 + 56)];
  id v55 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:*(void *)(a1 + 56)];
  id v50 = v2;
  id v53 = [v50 mutableBytes];
  [*(id *)(*(void *)(a1 + 64) + 288) waitUntilDownloadCapacity];
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  [*(id *)(v3 + 24) releaseBuffer];
  [*(id *)(v3 + 16) waitUntilCapacity];
  uint64_t v60 = a1;
  id v61 = objc_alloc_init((Class)NSMutableDictionary);
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v86 objects:v93 count:16];
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v87;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v87 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = GetAttributes(*(void *)(v60 + 64), *(void **)(*((void *)&v86 + 1) + 8 * i));
        id v9 = [v8 objectForKeyedSubscript:@"functionIndex"];
        os_signpost_id_t v10 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v9 unsignedIntValue]);
        id v11 = [v61 objectForKeyedSubscript:v10];
        if (!v11)
        {
          id v11 = objc_alloc_init((Class)NSMutableArray);
          [v61 setObject:v11 forKeyedSubscript:v10];
        }
        id v12 = [v8 mutableCopy];
        uint64_t v13 = +[NSNumber numberWithUnsignedInteger:(char *)i + v5];
        [v12 setObject:v13 forKeyedSubscript:@"requestStreamIndex"];

        [v11 addObject:v12];
        id v14 = +[NSNull null];
        [v59 addObject:v14];
      }
      id v4 = [obj countByEnumeratingWithState:&v86 objects:v93 count:16];
      v5 += (uint64_t)i;
    }
    while (v4);
  }

  id v15 = [v61 allKeys];
  id v16 = [v15 sortedArrayUsingSelector:"compare:"];

  id v17 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(*(void *)(v60 + 64) + 8) + 22480)];
  uint64_t v18 = [v16 indexOfObject:v17 inSortedRange:0 options:1024 usingComparator:&__block_literal_global_6806];

  id v19 = [v16 subarrayWithRange:0, v18];
  id v20 = [v16 subarrayWithRange:v18, (unsigned char *)[v16 count] - v18];
  id v21 = [v20 arrayByAddingObjectsFromArray:v19];

  v84[0] = &v92;
  v84[1] = 1024;
  id v85 = [objc_alloc((Class)NSMutableData) initWithCapacity:4096];
  id v52 = *(id *)(*(void *)(*(void *)(v60 + 64) + 8) + 24);
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id v51 = v21;
  id v22 = [v51 countByEnumeratingWithState:&v80 objects:v91 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v81;
    uint64_t v47 = *(void *)v81;
    do
    {
      uint64_t v24 = 0;
      id v48 = v22;
      do
      {
        if (*(void *)v81 != v23) {
          objc_enumerationMutation(v51);
        }
        uint64_t v49 = v24;
        uint64_t v54 = *(void **)(*((void *)&v80 + 1) + 8 * v24);
        int v25 = [v61 objectForKeyedSubscript:];
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        id obja = v25;
        id v26 = [obja countByEnumeratingWithState:&v76 objects:v90 count:16];
        if (v26)
        {
          uint64_t v27 = *(void *)v77;
          while (2)
          {
            for (uint64_t j = 0; j != v26; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v77 != v27) {
                objc_enumerationMutation(obja);
              }
              id v29 = *(void **)(*((void *)&v76 + 1) + 8 * (void)j);
              [v85 setLength:0];
              uint64_t v73 = v84;
              id v31 = v56;
              id v74 = v31;
              id v32 = v55;
              id v75 = v32;
              uint64_t v72 = 0;
              unsigned __int8 v33 = HarvestResourceObject();
              id v34 = 0;
              if ((v33 & 1) == 0
                && [obja count] == (char *)&def_1C1270 + 1
                && ([v29 objectForKeyedSubscript:@"object"],
                    int v35 = objc_claimAutoreleasedReturnValue(),
                    BOOL v36 = [v35 unsignedLongLongValue] == (id)-1026,
                    v35,
                    v36))
              {
                (*(void (**)(void))(*(void *)(v60 + 48) + 16))();
                int v37 = 0;
              }
              else
              {
                int v38 = [v29 objectForKeyedSubscript:@"requestStreamIndex"];
                id v39 = [v38 unsignedIntegerValue];

                id v40 = [v85 copy];
                [v59 setObject:v40 atIndexedSubscript:v39];

                v53[(void)v39] = [v54 unsignedLongLongValue];
                int v37 = 1;
              }

              if (!v37)
              {

                long long v46 = v51;
                goto LABEL_32;
              }
            }
            id v26 = [obja countByEnumeratingWithState:&v76 objects:v90 count:16];
            if (v26) {
              continue;
            }
            break;
          }
        }

        uint64_t v41 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"FetchResourceObjectBatch"];
        int v42 = [v52 commandBuffer];
        [v42 setLabel:v41];

        [v52 commitCommandBuffer];
        uint64_t v24 = v49 + 1;
        uint64_t v23 = v47;
      }
      while ((id)(v49 + 1) != v48);
      id v22 = [v51 countByEnumeratingWithState:&v80 objects:v91 count:16];
    }
    while (v22);
  }

  long long v43 = [v52 commandBuffer];
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = __FetchResourceObjectBatch_block_invoke_3;
  v62[3] = &unk_746480;
  long long v69 = *(_OWORD *)(v60 + 64);
  int v71 = *(_DWORD *)(v60 + 80);
  uint64_t v70 = *(void *)(v60 + 56);
  id v63 = v56;
  id v64 = v59;
  id v65 = v50;
  id v66 = v55;
  id v67 = *(id *)(v60 + 40);
  id v68 = *(id *)(v60 + 48);
  [v43 addCompletedHandler:v62];

  char v44 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"FetchResourceObjectBatchFinish"];
  long long v45 = [v52 commandBuffer];
  [v45 setLabel:v44];

  [v52 commitCommandBuffer];
  long long v46 = v63;
LABEL_32:
}

void sub_2DE648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  _Unwind_Resume(a1);
}

void __FetchResourceObjectBatch_block_invoke_3(uint64_t a1)
{
  id v1 = *(void **)(a1 + 72);
  id v16 = *(void **)(*(void *)(a1 + 80) + 264);
  int v2 = *(_DWORD *)(a1 + 104);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(a1 + 48);
  uint64_t v5 = *(void **)(a1 + 56);
  uint64_t v6 = *(void **)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 88);
  id v7 = *(id *)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = __FetchResourceObjectBatchReplyOperation_block_invoke;
  v17[3] = &unk_7464F8;
  int v25 = v2;
  long long v24 = v15;
  id v18 = v7;
  id v19 = v3;
  id v20 = v4;
  id v21 = v5;
  id v22 = v6;
  id v23 = v1;
  id v8 = v7;
  id v9 = v19;
  id v10 = v20;
  id v11 = v21;
  id v12 = v22;
  id v13 = v23;
  id v14 = +[NSBlockOperation blockOperationWithBlock:v17];

  [v16 addOperation:v14];
}

void __FetchResourceObjectBatchReplyOperation_block_invoke(uint64_t a1)
{
  int v2 = g_signpostLog;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    int v5 = *(_DWORD *)(a1 + 96);
    uint64_t v6 = *(void *)(a1 + 88);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)long long v81 = v5;
    *(_WORD *)&v81[4] = 2048;
    *(void *)&v81[6] = v6;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-4-parallel", "%u. kDYMessageFetchResourceObjectBatch x%lu", buf, 0x12u);
  }

  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  id v7 = [*(id *)(a1 + 32) allKeys];
  id v8 = [v7 countByEnumeratingWithState:&v74 objects:v86 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v75;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v75 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v74 + 1) + 8 * i);
        id v13 = [*(id *)(a1 + 32) objectForKeyedSubscript:v12];
        id v14 = PreprocessICBData(v13);
        [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:v12];
      }
      id v9 = [v7 countByEnumeratingWithState:&v74 objects:v86 count:16];
    }
    while (v9);
  }

  long long v15 = g_signpostLog;
  id v16 = v15;
  os_signpost_id_t v17 = *(void *)(a1 + 80);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v15))
  {
    int v18 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)long long v81 = v18;
    _os_signpost_emit_with_name_impl(&def_1C1270, v16, OS_SIGNPOST_INTERVAL_BEGIN, v17, "Replayer-6-high", "%u. archivedDataWithRootObject", buf, 8u);
  }

  v84[0] = @"stream";
  v84[1] = @"object";
  uint64_t v19 = *(void *)(a1 + 32);
  v85[0] = *(void *)(a1 + 40);
  v85[1] = v19;
  void v84[2] = @"functionIndex";
  v84[3] = @"requestID";
  uint64_t v20 = *(void *)(a1 + 56);
  void v85[2] = *(void *)(a1 + 48);
  v85[3] = v20;
  id v21 = +[NSDictionary dictionaryWithObjects:v85 forKeys:v84 count:4];
  id v73 = 0;
  id v22 = +[NSKeyedArchiver archivedDataWithRootObject:v21 requiringSecureCoding:1 error:&v73];
  id v69 = v73;

  id v23 = g_signpostLog;
  long long v24 = v23;
  os_signpost_id_t v25 = *(void *)(a1 + 80);
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v23))
  {
    id v26 = [v22 length];
    *(_DWORD *)long long buf = 134217984;
    *(void *)long long v81 = v26;
    _os_signpost_emit_with_name_impl(&def_1C1270, v24, OS_SIGNPOST_INTERVAL_END, v25, "Replayer-6-high", "%{xcode:size-in-bytes}lu", buf, 0xCu);
  }

  uint64_t v27 = (__CFString *)*(id *)(a1 + 64);
  __int16 v28 = [&off_759468 objectForKeyedSubscript:v27];
  int v71 = v22;
  if (v28)
  {
    id v29 = [objc_alloc((Class)NSMutableData) initWithLength:[v22 length]];
    uint64_t v30 = g_signpostLog;
    id v31 = v30;
    os_signpost_id_t v32 = *(void *)(a1 + 80);
    if (v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v30))
    {
      int v33 = *(_DWORD *)(a1 + 96);
      id v34 = [(__CFString *)v27 UTF8String];
      id v35 = [v71 length];
      *(_DWORD *)long long buf = 67109634;
      *(_DWORD *)long long v81 = v33;
      *(_WORD *)&v81[4] = 2082;
      *(void *)&v81[6] = v34;
      id v22 = v71;
      __int16 v82 = 2048;
      id v83 = v35;
      _os_signpost_emit_with_name_impl(&def_1C1270, v31, OS_SIGNPOST_INTERVAL_BEGIN, v32, "Replayer-6-high", "%u. %{public}s %{xcode:size-in-bytes}lu", buf, 0x1Cu);
    }

    id v36 = v29;
    int v37 = (uint8_t *)[v36 mutableBytes];
    id v38 = [v36 length];
    id v39 = v22;
    size_t v40 = compression_encode_buffer(v37, (size_t)v38, (const uint8_t *)[v39 bytes], (size_t)[v39 length], 0, (compression_algorithm)[v28 unsignedIntValue]);
    uint64_t v41 = g_signpostLog;
    int v42 = v41;
    os_signpost_id_t v43 = *(void *)(a1 + 80);
    if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v41))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)long long v81 = v40;
      _os_signpost_emit_with_name_impl(&def_1C1270, v42, OS_SIGNPOST_INTERVAL_END, v43, "Replayer-6-high", "%{xcode:size-in-bytes}zu", buf, 0xCu);
    }

    [v36 setLength:v40];
    id v22 = v71;
  }
  else
  {
    id v36 = 0;
  }
  if (![v36 length])
  {

    id v44 = v22;
    uint64_t v27 = @"none";
    id v36 = v44;
  }
  long long v45 = g_signpostLog;
  long long v46 = v45;
  os_signpost_id_t v47 = *(void *)(a1 + 80);
  if (v47 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v45))
  {
    int v48 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)long long v81 = v48;
    _os_signpost_emit_with_name_impl(&def_1C1270, v46, OS_SIGNPOST_INTERVAL_BEGIN, v47, "Replayer-6-high", "%u. archivedDataWithRootObject", buf, 8u);
  }

  v79[0] = v27;
  v78[0] = @"compressed";
  v78[1] = @"stream";
  uint64_t v49 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v22 length]);
  v78[2] = @"object";
  v79[1] = v49;
  v79[2] = v36;
  id v50 = +[NSDictionary dictionaryWithObjects:v79 forKeys:v78 count:3];
  id v72 = v69;
  id v51 = +[NSKeyedArchiver archivedDataWithRootObject:v50 requiringSecureCoding:1 error:&v72];
  id v52 = v72;

  id v53 = g_signpostLog;
  uint64_t v54 = v53;
  os_signpost_id_t v55 = *(void *)(a1 + 80);
  if (v55 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v53))
  {
    id v56 = [v71 length];
    *(_DWORD *)long long buf = 134217984;
    *(void *)long long v81 = v56;
    _os_signpost_emit_with_name_impl(&def_1C1270, v54, OS_SIGNPOST_INTERVAL_END, v55, "Replayer-6-high", "%{xcode:size-in-bytes}lu", buf, 0xCu);
  }

  id v57 = g_signpostLog;
  id v58 = v57;
  os_signpost_id_t v59 = *(void *)(a1 + 80);
  if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v57))
  {
    id v60 = [v51 length];
    *(_DWORD *)long long buf = 134217984;
    *(void *)long long v81 = v60;
    _os_signpost_emit_with_name_impl(&def_1C1270, v58, OS_SIGNPOST_INTERVAL_END, v59, "Replayer-4-parallel", "%{xcode:size-in-bytes}lu", buf, 0xCu);
  }

  id v61 = g_signpostLog;
  id v62 = v61;
  os_signpost_id_t v63 = *(void *)(a1 + 80);
  if (v63 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v61))
  {
    int v64 = *(_DWORD *)(a1 + 96);
    id v65 = [v51 length];
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)long long v81 = v64;
    *(_WORD *)&v81[4] = 2048;
    *(void *)&v81[6] = v65;
    _os_signpost_emit_with_name_impl(&def_1C1270, v62, OS_SIGNPOST_INTERVAL_BEGIN, v63, "Replayer-5-network", "%u. send compressedData %{xcode:size-in-bytes}lu", buf, 0x12u);
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  id v66 = g_signpostLog;
  id v67 = v66;
  os_signpost_id_t v68 = *(void *)(a1 + 80);
  if (v68 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v66))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v67, OS_SIGNPOST_INTERVAL_END, v68, "Replayer-5-network", (const char *)&unk_4CA5E5, buf, 2u);
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      __dst = 0;
      long long v20 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        abort();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve((uint64_t)&__dst, v12);
      id v13 = *(void **)a1;
      uint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v20 = v14 + v6;
      long long v15 = (char *)__dst;
      if (v14 < 1)
      {
        LODWORD(v18) = 0;
        os_signpost_id_t v17 = (char *)__dst;
      }
      else
      {
        uint64_t v16 = v14 >> 6;
        if ((unint64_t)(v14 + 63) >= 0x7F) {
          memmove(__dst, v13, 8 * v16);
        }
        uint64_t v18 = v14 - (v16 << 6);
        os_signpost_id_t v17 = &v15[8 * v16];
        if (v18 < 1) {
          LODWORD(v18) = 0;
        }
        else {
          *(void *)os_signpost_id_t v17 = *(void *)v17 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v18) | *((void *)v13 + v16) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v18);
        }
        id v13 = *(void **)a1;
      }
      *(void *)a1 = v15;
      *(_OWORD *)(a1 + 8) = v20;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      os_signpost_id_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        __dst = v17;
        LODWORD(v20) = v18;
        std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&__dst, v6);
      }
      else
      {
        __dst = v17;
        LODWORD(v20) = v18;
        std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&__dst, v6);
      }
    }
  }
}

void sub_2DF274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(void *)(a1 + 16) << 6) {
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    abort();
  }
  uint64_t v19 = 0;
  long long v20 = 0uLL;
  std::vector<BOOL>::__vallocate[abi:nn180100](&v19, a2);
  uint64_t v3 = *(void **)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = v20;
  unint64_t v6 = v20 + v4;
  *(void *)&long long v20 = v20 + v4;
  if (!v5)
  {
    unint64_t v7 = v6 - 1;
    goto LABEL_7;
  }
  unint64_t v7 = v6 - 1;
  if (((v6 - 1) ^ (v5 - 1)) > 0x3F)
  {
LABEL_7:
    uint64_t v8 = v19;
    unint64_t v9 = v7 >> 6;
    if (v6 >= 0x41) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0;
    }
    *(void *)(v19 + 8 * v10) = 0;
    goto LABEL_11;
  }
  uint64_t v8 = v19;
LABEL_11:
  int v11 = v4 & 0x3F;
  if (v4 > 0x3F || (v4 & 0x3F) != 0)
  {
    int v12 = 0;
    id v13 = &v3[v4 >> 6];
    int v14 = v5 & 0x3F;
    long long v15 = (uint64_t *)(v8 + 8 * (v5 >> 6));
    do
    {
      uint64_t v16 = 1 << v14;
      if ((*v3 >> v12)) {
        uint64_t v17 = *v15 | v16;
      }
      else {
        uint64_t v17 = *v15 & ~v16;
      }
      *long long v15 = v17;
      v3 += v12 == 63;
      if (v12 == 63) {
        int v12 = 0;
      }
      else {
        ++v12;
      }
      v15 += v14 == 63;
      if (v14 == 63) {
        int v14 = 0;
      }
      else {
        ++v14;
      }
    }
    while (v3 != v13 || v12 != v11);
  }
  uint64_t v18 = *(void **)a1;
  *(void *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v20;
  if (v18) {
    operator delete(v18);
  }
}

void sub_2DF3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *,false>(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = (int *)(a2 - 24);
  unint64_t k = v9;
  while (1)
  {
    unint64_t v9 = k;
    uint64_t v12 = a2 - k;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - k) >> 3);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v63 = *v10;
          int v64 = *(_DWORD *)k;
          if (*v10 >= *(_DWORD *)k)
          {
            if (v64 < v63) {
              return result;
            }
            unint64_t v66 = *(void *)(a2 - 16);
            unint64_t v65 = *(void *)(k + 8);
            if (v66 >= v65 && (v65 < v66 || *(void *)(a2 - 8) >= *(void *)(k + 16))) {
              return result;
            }
          }
          else
          {
            unint64_t v65 = *(void *)(k + 8);
            unint64_t v66 = *(void *)(a2 - 16);
          }
          *(_DWORD *)unint64_t k = v63;
          *(_DWORD *)(a2 - 24) = v64;
          uint64_t v105 = *(void *)(k + 16);
          uint64_t v106 = *(void *)(a2 - 8);
          *(void *)(k + 8) = v66;
          *(void *)(k + 16) = v106;
          *(void *)(a2 - 16) = v65;
          *(void *)(a2 - 8) = v105;
          return result;
        case 3uLL:
          return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>((int *)k, (int *)(k + 24), (int *)(a2 - 24));
        case 4uLL:
          return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(k, k + 24, k + 48, a2 - 24);
        case 5uLL:
          return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(k, k + 24, k + 48, k + 72, (int *)(a2 - 24));
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 575) {
      break;
    }
    if (!a3)
    {
      if (k == a2) {
        return result;
      }
      int64_t v85 = (v13 - 2) >> 1;
      int64_t v86 = v85;
      while (1)
      {
        int64_t v87 = v86;
        if (v85 >= v86)
        {
          uint64_t v88 = (2 * v86) | 1;
          unint64_t v89 = k + 24 * v88;
          if (2 * v87 + 2 < (uint64_t)v13)
          {
            int v90 = *(_DWORD *)(v89 + 24);
            if (*(_DWORD *)v89 < v90
              || v90 >= *(_DWORD *)v89
              && ((v103 = *(void *)(v89 + 8), unint64_t v104 = *(void *)(v89 + 32), v103 < v104)
               || v104 >= v103 && *(void *)(v89 + 16) < *(void *)(v89 + 40)))
            {
              v89 += 24;
              uint64_t v88 = 2 * v87 + 2;
            }
          }
          unint64_t v91 = k + 24 * v87;
          int v92 = *(_DWORD *)v89;
          int v93 = *(_DWORD *)v91;
          if (*(_DWORD *)v89 >= *(_DWORD *)v91)
          {
            if (v93 < v92)
            {
              unint64_t v94 = *(void *)(v91 + 8);
              unint64_t v95 = *(void *)(v89 + 8);
LABEL_163:
              unint64_t v96 = *(void *)(v91 + 16);
              do
              {
                *(_DWORD *)unint64_t v91 = v92;
                uint64_t v97 = *(void *)(v89 + 16);
                *(void *)(v91 + 8) = v95;
                *(void *)(v91 + 16) = v97;
                if (v85 < v88) {
                  goto LABEL_178;
                }
                unint64_t v91 = v89;
                uint64_t v98 = 2 * v88;
                uint64_t v88 = (2 * v88) | 1;
                unint64_t v89 = k + 24 * v88;
                uint64_t v99 = v98 + 2;
                if (v99 < (uint64_t)v13)
                {
                  int v100 = *(_DWORD *)(v89 + 24);
                  if (*(_DWORD *)v89 < v100
                    || v100 >= *(_DWORD *)v89
                    && ((unint64_t v101 = *(void *)(v89 + 8), v102 = *(void *)(v89 + 32), v101 < v102)
                     || v102 >= v101 && *(void *)(v89 + 16) < *(void *)(v89 + 40)))
                  {
                    v89 += 24;
                    uint64_t v88 = v99;
                  }
                }
                int v92 = *(_DWORD *)v89;
                if (*(_DWORD *)v89 < v93) {
                  break;
                }
                unint64_t v95 = *(void *)(v89 + 8);
              }
              while (v93 < v92 || v95 >= v94 && (v94 < v95 || *(void *)(v89 + 16) >= v96));
              unint64_t v89 = v91;
LABEL_178:
              *(_DWORD *)unint64_t v89 = v93;
              *(void *)(v89 + 8) = v94;
              *(void *)(v89 + 16) = v96;
              goto LABEL_180;
            }
            unint64_t v95 = *(void *)(v89 + 8);
            unint64_t v94 = *(void *)(v91 + 8);
            if (v95 >= v94 && (v94 < v95 || *(void *)(v89 + 16) >= *(void *)(v91 + 16))) {
              goto LABEL_163;
            }
          }
        }
LABEL_180:
        int64_t v86 = v87 - 1;
        if (!v87)
        {
          int64_t v117 = v12 / 0x18uLL;
          while (1)
          {
            uint64_t v118 = 0;
            int v119 = *(_DWORD *)k;
            uint64_t v120 = *(void *)(k + 8);
            uint64_t v121 = *(void *)(k + 16);
            uint64_t v122 = v117 - 2;
            if (v117 < 2) {
              uint64_t v122 = v117 - 1;
            }
            uint64_t v123 = v122 >> 1;
            unint64_t v124 = k;
            do
            {
              uint64_t result = v124;
              v124 += 24 * v118 + 24;
              uint64_t v125 = 2 * v118;
              uint64_t v118 = (2 * v118) | 1;
              int64_t v126 = v125 + 2;
              if (v126 < v117)
              {
                int v127 = *(_DWORD *)(v124 + 24);
                if (*(_DWORD *)v124 < v127
                  || v127 >= *(_DWORD *)v124
                  && ((unint64_t v128 = *(void *)(v124 + 8), v129 = *(void *)(v124 + 32), v128 < v129)
                   || v129 >= v128 && *(void *)(v124 + 16) < *(void *)(v124 + 40)))
                {
                  v124 += 24;
                  uint64_t v118 = v126;
                }
              }
              *(_DWORD *)uint64_t result = *(_DWORD *)v124;
              *(_OWORD *)(result + 8) = *(_OWORD *)(v124 + 8);
            }
            while (v118 <= v123);
            if (v124 == a2 - 24)
            {
              *(_DWORD *)unint64_t v124 = v119;
              *(void *)(v124 + 8) = v120;
              *(void *)(v124 + 16) = v121;
              goto LABEL_243;
            }
            *(_DWORD *)unint64_t v124 = *(_DWORD *)(a2 - 24);
            *(_OWORD *)(v124 + 8) = *(_OWORD *)(a2 - 16);
            *(_DWORD *)(a2 - 24) = v119;
            *(void *)(a2 - 16) = v120;
            *(void *)(a2 - 8) = v121;
            uint64_t v130 = v124 - k + 24;
            if (v130 < 25) {
              goto LABEL_243;
            }
            unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * (v130 >> 3) - 2;
            unint64_t v132 = v131 >> 1;
            unint64_t v133 = k + 24 * (v131 >> 1);
            int v134 = *(_DWORD *)v133;
            int v135 = *(_DWORD *)v124;
            if (*(_DWORD *)v133 >= *(_DWORD *)v124)
            {
              if (v135 < v134) {
                goto LABEL_243;
              }
              unint64_t v137 = *(void *)(v133 + 8);
              unint64_t v136 = *(void *)(v124 + 8);
              if (v137 >= v136)
              {
                if (v136 < v137) {
                  goto LABEL_243;
                }
                uint64_t result = *(void *)(v133 + 16);
                if (result >= *(void *)(v124 + 16)) {
                  goto LABEL_243;
                }
              }
            }
            else
            {
              unint64_t v136 = *(void *)(v124 + 8);
              unint64_t v137 = *(void *)(v133 + 8);
            }
            uint64_t result = *(void *)(v124 + 16);
            *(_DWORD *)unint64_t v124 = v134;
            uint64_t v138 = *(void *)(v133 + 16);
            *(void *)(v124 + 8) = v137;
            *(void *)(v124 + 16) = v138;
            if (v131 < 2) {
              goto LABEL_242;
            }
            while (1)
            {
              unint64_t v139 = v133;
              unint64_t v140 = v132 - 1;
              unint64_t v132 = (v132 - 1) >> 1;
              unint64_t v133 = k + 24 * v132;
              int v141 = *(_DWORD *)v133;
              if (*(_DWORD *)v133 >= v135) {
                break;
              }
              unint64_t v142 = *(void *)(v133 + 8);
LABEL_239:
              *(_DWORD *)unint64_t v139 = v141;
              uint64_t v143 = *(void *)(v133 + 16);
              *(void *)(v139 + 8) = v142;
              *(void *)(v139 + 16) = v143;
              if (v140 <= 1) {
                goto LABEL_242;
              }
            }
            if (v135 >= v141)
            {
              unint64_t v142 = *(void *)(v133 + 8);
              if (v142 < v136 || v136 >= v142 && *(void *)(v133 + 16) < result) {
                goto LABEL_239;
              }
            }
            unint64_t v133 = v139;
LABEL_242:
            *(_DWORD *)unint64_t v133 = v135;
            *(void *)(v133 + 8) = v136;
            *(void *)(v133 + 16) = result;
LABEL_243:
            a2 -= 24;
            if (v117-- <= 2) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = k + 24 * (v13 >> 1);
    if ((unint64_t)v12 >= 0xC01)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>((int *)v9, (int *)(v9 + 24 * (v13 >> 1)), (int *)(a2 - 24));
      uint64_t v16 = 3 * v14;
      uint64_t v17 = (int *)(v9 + 24 * v14 - 24);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>((int *)(v9 + 24), v17, (int *)(a2 - 48));
      uint64_t v18 = (int *)(v9 + 24 + 8 * v16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>((int *)(v9 + 48), v18, (int *)(a2 - 72));
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(v17, (int *)v15, v18);
      int v19 = *(_DWORD *)v9;
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v15;
      *(_DWORD *)unint64_t v15 = v19;
      long long v20 = *(_OWORD *)(v9 + 8);
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v15 + 8);
      *(_OWORD *)(v15 + 8) = v20;
    }
    else
    {
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>((int *)(v9 + 24 * (v13 >> 1)), (int *)v9, (int *)(a2 - 24));
    }
    --a3;
    int v21 = *(_DWORD *)v9;
    if ((a4 & 1) != 0 || (int v22 = *(_DWORD *)(v9 - 24), v22 < v21))
    {
LABEL_16:
      unint64_t v25 = *(void *)(v9 + 8);
      unint64_t v26 = *(void *)(v9 + 16);
      for (unint64_t i = v9 + 24; ; i += 24)
      {
        int v28 = *(_DWORD *)i;
        if (*(_DWORD *)i >= v21)
        {
          if (v21 < v28) {
            break;
          }
          unint64_t v29 = *(void *)(i + 8);
          if (v29 >= v25 && (v25 < v29 || *(void *)(i + 16) >= v26)) {
            break;
          }
        }
      }
      if (i - 24 == v9)
      {
        unint64_t j = a2;
        if (i < a2)
        {
          int v34 = *v10;
          unint64_t j = a2 - 24;
          if (*v10 >= v21)
          {
            unint64_t j = a2 - 24;
            do
            {
              if (v21 < v34) {
                goto LABEL_37;
              }
              unint64_t v35 = *(void *)(j + 8);
              if (v35 < v25) {
                break;
              }
              if (v25 >= v35)
              {
                if (*(void *)(j + 16) < v26 || i >= j) {
                  break;
                }
              }
              else
              {
LABEL_37:
                if (i >= j) {
                  break;
                }
              }
              int v37 = *(_DWORD *)(j - 24);
              j -= 24;
              int v34 = v37;
            }
            while (v37 >= v21);
          }
        }
      }
      else
      {
        int v30 = *v10;
        for (unint64_t j = a2 - 24; v30 >= v21; j -= 24)
        {
          if (v21 >= v30)
          {
            unint64_t v32 = *(void *)(j + 8);
            if (v32 < v25 || v25 >= v32 && *(void *)(j + 16) < v26) {
              break;
            }
          }
          int v33 = *(_DWORD *)(j - 24);
          int v30 = v33;
        }
      }
      unint64_t k = i;
      if (i < j)
      {
        int v38 = *(_DWORD *)j;
        unint64_t k = i;
        unint64_t v39 = j;
        do
        {
          *(_DWORD *)unint64_t k = v38;
          *(_DWORD *)unint64_t v39 = v28;
          long long v40 = *(_OWORD *)(k + 8);
          *(_OWORD *)(k + 8) = *(_OWORD *)(v39 + 8);
          *(_OWORD *)(v39 + 8) = v40;
          do
          {
            do
            {
              int v41 = *(_DWORD *)(k + 24);
              k += 24;
              int v28 = v41;
            }
            while (v41 < v21);
            if (v21 < v28) {
              break;
            }
            unint64_t v42 = *(void *)(k + 8);
          }
          while (v42 < v25 || v25 >= v42 && *(void *)(k + 16) < v26);
          while (1)
          {
            int v43 = *(_DWORD *)(v39 - 24);
            v39 -= 24;
            int v38 = v43;
            if (v43 < v21) {
              break;
            }
            if (v21 >= v38)
            {
              unint64_t v44 = *(void *)(v39 + 8);
              if (v44 < v25 || v25 >= v44 && *(void *)(v39 + 16) < v26) {
                break;
              }
            }
          }
        }
        while (k < v39);
      }
      if (k - 24 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(k - 24);
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(k - 16);
      }
      *(_DWORD *)(k - 24) = v21;
      *(void *)(k - 16) = v25;
      *(void *)(k - 8) = v26;
      if (i < j)
      {
LABEL_63:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *,false>(v9, k - 24, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v45 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(v9, k - 24);
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(k, a2);
        if (result)
        {
          a2 = k - 24;
          if (v45) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v45) {
          goto LABEL_63;
        }
      }
    }
    else
    {
      if (v21 < v22)
      {
        unint64_t v24 = *(void *)(v9 + 8);
      }
      else
      {
        unint64_t v23 = *(void *)(v9 - 16);
        unint64_t v24 = *(void *)(v9 + 8);
        if (v23 < v24 || v24 >= v23 && *(void *)(v9 - 8) < *(void *)(v9 + 16)) {
          goto LABEL_16;
        }
      }
      unint64_t v46 = *(void *)(v9 + 16);
      int v47 = *v10;
      if (v21 < *v10
        || v47 >= v21 && ((unint64_t v62 = *(void *)(a2 - 16), v24 < v62) || v62 >= v24 && v46 < *(void *)(a2 - 8)))
      {
        unint64_t k = v9;
        while (1)
        {
          int v49 = *(_DWORD *)(k + 24);
          k += 24;
          int v48 = v49;
          if (v21 < v49) {
            break;
          }
          if (v48 >= v21)
          {
            unint64_t v50 = *(void *)(k + 8);
            if (v24 < v50 || v50 >= v24 && v46 < *(void *)(k + 16)) {
              break;
            }
          }
        }
      }
      else
      {
        for (unint64_t k = v9 + 24; k < a2; k += 24)
        {
          if (v21 < *(_DWORD *)k) {
            break;
          }
          if (*(_DWORD *)k >= v21)
          {
            unint64_t v61 = *(void *)(k + 8);
            if (v24 < v61 || v61 >= v24 && v46 < *(void *)(k + 16)) {
              break;
            }
          }
        }
      }
      unint64_t m = a2;
      if (k < a2)
      {
        for (unint64_t m = a2 - 24; ; m -= 24)
        {
          if (v21 >= v47)
          {
            if (v47 < v21) {
              break;
            }
            unint64_t v52 = *(void *)(m + 8);
            if (v24 >= v52 && (v52 < v24 || v46 >= *(void *)(m + 16))) {
              break;
            }
          }
          int v53 = *(_DWORD *)(m - 24);
          int v47 = v53;
        }
      }
      if (k < m)
      {
        int v54 = *(_DWORD *)k;
        int v55 = *(_DWORD *)m;
        do
        {
          *(_DWORD *)unint64_t k = v55;
          *(_DWORD *)unint64_t m = v54;
          long long v56 = *(_OWORD *)(k + 8);
          *(_OWORD *)(k + 8) = *(_OWORD *)(m + 8);
          *(_OWORD *)(m + 8) = v56;
          while (1)
          {
            int v57 = *(_DWORD *)(k + 24);
            k += 24;
            int v54 = v57;
            if (v21 < v57) {
              break;
            }
            if (v54 >= v21)
            {
              unint64_t v58 = *(void *)(k + 8);
              if (v24 < v58 || v58 >= v24 && v46 < *(void *)(k + 16)) {
                break;
              }
            }
          }
          do
          {
            do
            {
              int v59 = *(_DWORD *)(m - 24);
              m -= 24;
              int v55 = v59;
            }
            while (v21 < v59);
            if (v55 < v21) {
              break;
            }
            unint64_t v60 = *(void *)(m + 8);
          }
          while (v24 < v60 || v60 >= v24 && v46 < *(void *)(m + 16));
        }
        while (k < m);
      }
      BOOL v4 = k - 24 >= v9;
      BOOL v5 = k - 24 == v9;
      if (k - 24 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(k - 24);
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(k - 16);
      }
      a4 = 0;
      *(_DWORD *)(k - 24) = v21;
      *(void *)(k - 16) = v24;
      *(void *)(k - 8) = v46;
    }
  }
  unint64_t v67 = k + 24;
  BOOL v69 = k == a2 || v67 == a2;
  if ((a4 & 1) == 0)
  {
    if (v69) {
      return result;
    }
    for (uint64_t n = (_OWORD *)(k + 32); ; uint64_t n = (_OWORD *)((char *)n + 24))
    {
      unint64_t v108 = v9;
      unint64_t v9 = v67;
      int v109 = *(_DWORD *)(v108 + 24);
      int v110 = *(_DWORD *)v108;
      if (v109 < *(_DWORD *)v108) {
        break;
      }
      if (v110 >= v109)
      {
        unint64_t v111 = *(void *)(v108 + 32);
        unint64_t v112 = *(void *)(v108 + 8);
        if (v111 < v112 || v112 >= v111 && *(void *)(v108 + 40) < *(void *)(v108 + 16)) {
          goto LABEL_202;
        }
      }
LABEL_210:
      unint64_t v67 = v9 + 24;
      if (v9 + 24 == a2) {
        return result;
      }
    }
    unint64_t v111 = *(void *)(v108 + 32);
LABEL_202:
    unint64_t v113 = *(void *)(v108 + 40);
    for (iunint64_t i = n; ; iunint64_t i = (_OWORD *)((char *)ii - 24))
    {
      *((_DWORD *)ii - 2) = v110;
      *iunint64_t i = *(_OWORD *)((char *)ii - 24);
      int v110 = *((_DWORD *)ii - 14);
      if (v109 >= v110)
      {
        if (v110 < v109) {
          break;
        }
        unint64_t v115 = *((void *)ii - 6);
        if (v111 >= v115 && (v115 < v111 || v113 >= *((void *)ii - 5))) {
          break;
        }
      }
    }
    id v116 = ii - 2;
    *((_DWORD *)ii - 8) = v109;
    *((void *)v116 + 1) = v111;
    *((void *)v116 + 2) = v113;
    goto LABEL_210;
  }
  if (v69) {
    return result;
  }
  uint64_t v70 = 0;
  unint64_t v71 = k;
  while (2)
  {
    unint64_t v72 = v71;
    unint64_t v71 = v67;
    int v73 = *(_DWORD *)(v72 + 24);
    int v74 = *(_DWORD *)v72;
    if (v73 >= *(_DWORD *)v72)
    {
      if (v74 < v73) {
        goto LABEL_151;
      }
      unint64_t v75 = *(void *)(v72 + 32);
      unint64_t v76 = *(void *)(v72 + 8);
      if (v75 >= v76 && (v76 < v75 || *(void *)(v72 + 40) >= *(void *)(v72 + 16))) {
        goto LABEL_151;
      }
    }
    else
    {
      unint64_t v75 = *(void *)(v72 + 32);
      unint64_t v76 = *(void *)(v72 + 8);
    }
    unint64_t v77 = *(void *)(v72 + 40);
    *(_DWORD *)(v72 + 24) = v74;
    uint64_t v78 = *(void *)(v72 + 16);
    *(void *)(v71 + 8) = v76;
    *(void *)(v71 + 16) = v78;
    unint64_t v79 = k;
    if (v72 == k) {
      goto LABEL_150;
    }
    uint64_t v80 = v70;
    while (2)
    {
      int v81 = *(_DWORD *)(k + v80 - 24);
      if (v73 < v81)
      {
        unint64_t v82 = *(void *)(k + v80 - 16);
        goto LABEL_147;
      }
      if (v81 < v73) {
        break;
      }
      unint64_t v82 = *(void *)(k + v80 - 16);
      if (v75 < v82) {
        goto LABEL_147;
      }
      if (v82 >= v75)
      {
        unint64_t v79 = k + v80;
        uint64_t result = *(void *)(k + v80 - 8);
        if (v77 >= result) {
          goto LABEL_150;
        }
LABEL_147:
        v72 -= 24;
        uint64_t v83 = k + v80;
        *(_DWORD *)uint64_t v83 = v81;
        uint64_t v84 = *(void *)(k + v80 - 8);
        *(void *)(v83 + 8) = v82;
        *(void *)(v83 + 16) = v84;
        v80 -= 24;
        if (!v80)
        {
          unint64_t v79 = k;
          goto LABEL_150;
        }
        continue;
      }
      break;
    }
    unint64_t v79 = v72;
LABEL_150:
    *(_DWORD *)unint64_t v79 = v73;
    *(void *)(v79 + 8) = v75;
    *(void *)(v79 + 16) = v77;
LABEL_151:
    unint64_t v67 = v71 + 24;
    v70 += 24;
    if (v71 + 24 != a2) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(int *result, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *result;
  if (*a2 < *result
    || v4 >= v3
    && ((unint64_t v13 = *((void *)a2 + 1), v14 = *((void *)result + 1), v13 < v14)
     || v14 >= v13 && *((void *)a2 + 2) < *((void *)result + 2)))
  {
    int v5 = *a3;
    if (*a3 < v3)
    {
      unint64_t v6 = *((void *)a3 + 1);
LABEL_4:
      *uint64_t result = v5;
      *a3 = v4;
      uint64_t v7 = *((void *)a3 + 2);
      long long v8 = *(_OWORD *)(result + 2);
      *((void *)result + 1) = v6;
      *((void *)result + 2) = v7;
      *(_OWORD *)(a3 + 2) = v8;
      return result;
    }
    if (v3 >= v5)
    {
      unint64_t v6 = *((void *)a3 + 1);
      unint64_t v12 = *((void *)a2 + 1);
      if (v6 < v12 || v12 >= v6 && *((void *)a3 + 2) < *((void *)a2 + 2)) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v12 = *((void *)a2 + 1);
    }
    *uint64_t result = v3;
    *a2 = v4;
    unint64_t v21 = *((void *)result + 1);
    unint64_t v22 = *((void *)result + 2);
    uint64_t v23 = *((void *)a2 + 2);
    *((void *)result + 1) = v12;
    *((void *)result + 2) = v23;
    *((void *)a2 + 1) = v21;
    *((void *)a2 + 2) = v22;
    int v24 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v24) {
        return result;
      }
      unint64_t v25 = *((void *)a3 + 1);
      if (v25 >= v21 && (v21 < v25 || *((void *)a3 + 2) >= v22)) {
        return result;
      }
    }
    else
    {
      unint64_t v25 = *((void *)a3 + 1);
    }
    *a2 = v24;
    *a3 = v4;
    uint64_t v28 = *((void *)a3 + 2);
    *((void *)a2 + 1) = v25;
    *((void *)a2 + 2) = v28;
    *((void *)a3 + 1) = v21;
    *((void *)a3 + 2) = v22;
    return result;
  }
  int v9 = *a3;
  if (*a3 >= v3)
  {
    if (v3 < v9) {
      return result;
    }
    unint64_t v11 = *((void *)a3 + 1);
    unint64_t v10 = *((void *)a2 + 1);
    if (v11 >= v10 && (v10 < v11 || *((void *)a3 + 2) >= *((void *)a2 + 2))) {
      return result;
    }
  }
  else
  {
    unint64_t v10 = *((void *)a2 + 1);
    unint64_t v11 = *((void *)a3 + 1);
  }
  *a2 = v9;
  *a3 = v3;
  uint64_t v15 = *((void *)a2 + 2);
  uint64_t v16 = *((void *)a3 + 2);
  *((void *)a2 + 1) = v11;
  *((void *)a2 + 2) = v16;
  *((void *)a3 + 1) = v10;
  *((void *)a3 + 2) = v15;
  int v17 = *a2;
  int v18 = *result;
  if (*a2 < *result)
  {
    unint64_t v19 = *((void *)result + 1);
    unint64_t v20 = *((void *)a2 + 1);
LABEL_29:
    *uint64_t result = v17;
    *a2 = v18;
    uint64_t v26 = *((void *)result + 2);
    uint64_t v27 = *((void *)a2 + 2);
    *((void *)result + 1) = v20;
    *((void *)result + 2) = v27;
    *((void *)a2 + 1) = v19;
    *((void *)a2 + 2) = v26;
    return result;
  }
  if (v18 >= v17)
  {
    unint64_t v20 = *((void *)a2 + 1);
    unint64_t v19 = *((void *)result + 1);
    if (v20 < v19 || v19 >= v20 && *((void *)a2 + 2) < *((void *)result + 2)) {
      goto LABEL_29;
    }
  }
  return result;
}

int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>((int *)a1, (int *)a2, (int *)a3);
  int v9 = *(_DWORD *)a4;
  int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    unint64_t v12 = *(void *)(a4 + 8);
    unint64_t v11 = *(void *)(a3 + 8);
    if (v12 >= v11 && (v11 < v12 || *(void *)(a4 + 16) >= *(void *)(a3 + 16))) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = *(void *)(a3 + 8);
    unint64_t v12 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v9;
  *(_DWORD *)a4 = v10;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a4 + 16);
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 16) = v14;
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 16) = v13;
  int v15 = *(_DWORD *)a3;
  int v16 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v16 < v15) {
      return result;
    }
    unint64_t v18 = *(void *)(a3 + 8);
    unint64_t v17 = *(void *)(a2 + 8);
    if (v18 >= v17 && (v17 < v18 || *(void *)(a3 + 16) >= *(void *)(a2 + 16))) {
      return result;
    }
  }
  else
  {
    unint64_t v17 = *(void *)(a2 + 8);
    unint64_t v18 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v15;
  *(_DWORD *)a3 = v16;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = *(void *)(a3 + 16);
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v20;
  *(void *)(a3 + 8) = v17;
  *(void *)(a3 + 16) = v19;
  int v21 = *(_DWORD *)a2;
  int v22 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unint64_t v23 = *(void *)(a1 + 8);
    unint64_t v24 = *(void *)(a2 + 8);
LABEL_19:
    *(_DWORD *)a1 = v21;
    *(_DWORD *)a2 = v22;
    uint64_t v25 = *(void *)(a1 + 16);
    uint64_t v26 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = v26;
    *(void *)(a2 + 8) = v23;
    *(void *)(a2 + 16) = v25;
    return result;
  }
  if (v22 >= v21)
  {
    unint64_t v24 = *(void *)(a2 + 8);
    unint64_t v23 = *(void *)(a1 + 8);
    if (v24 < v23 || v23 >= v24 && *(void *)(a2 + 16) < *(void *)(a1 + 16)) {
      goto LABEL_19;
    }
  }
  return result;
}

int *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(a1, a2, a3, a4);
  int v11 = *a5;
  int v12 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    unint64_t v14 = *((void *)a5 + 1);
    unint64_t v13 = *(void *)(a4 + 8);
    if (v14 >= v13 && (v13 < v14 || *((void *)a5 + 2) >= *(void *)(a4 + 16))) {
      return result;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a4 + 8);
    unint64_t v14 = *((void *)a5 + 1);
  }
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  uint64_t v15 = *(void *)(a4 + 16);
  uint64_t v16 = *((void *)a5 + 2);
  *(void *)(a4 + 8) = v14;
  *(void *)(a4 + 16) = v16;
  *((void *)a5 + 1) = v13;
  *((void *)a5 + 2) = v15;
  int v17 = *(_DWORD *)a4;
  int v18 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v18 < v17) {
      return result;
    }
    unint64_t v20 = *(void *)(a4 + 8);
    unint64_t v19 = *(void *)(a3 + 8);
    if (v20 >= v19 && (v19 < v20 || *(void *)(a4 + 16) >= *(void *)(a3 + 16))) {
      return result;
    }
  }
  else
  {
    unint64_t v19 = *(void *)(a3 + 8);
    unint64_t v20 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v17;
  *(_DWORD *)a4 = v18;
  uint64_t v21 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(a4 + 16);
  *(void *)(a3 + 8) = v20;
  *(void *)(a3 + 16) = v22;
  *(void *)(a4 + 8) = v19;
  *(void *)(a4 + 16) = v21;
  int v23 = *(_DWORD *)a3;
  int v24 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v24 < v23) {
      return result;
    }
    unint64_t v26 = *(void *)(a3 + 8);
    unint64_t v25 = *(void *)(a2 + 8);
    if (v26 >= v25 && (v25 < v26 || *(void *)(a3 + 16) >= *(void *)(a2 + 16))) {
      return result;
    }
  }
  else
  {
    unint64_t v25 = *(void *)(a2 + 8);
    unint64_t v26 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v23;
  *(_DWORD *)a3 = v24;
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v28 = *(void *)(a3 + 16);
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 16) = v28;
  *(void *)(a3 + 8) = v25;
  *(void *)(a3 + 16) = v27;
  int v29 = *(_DWORD *)a2;
  int v30 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unint64_t v31 = *(void *)(a1 + 8);
    unint64_t v32 = *(void *)(a2 + 8);
LABEL_26:
    *(_DWORD *)a1 = v29;
    *(_DWORD *)a2 = v30;
    uint64_t v33 = *(void *)(a1 + 16);
    uint64_t v34 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v32;
    *(void *)(a1 + 16) = v34;
    *(void *)(a2 + 8) = v31;
    *(void *)(a2 + 16) = v33;
    return result;
  }
  if (v30 >= v29)
  {
    unint64_t v32 = *(void *)(a2 + 8);
    unint64_t v31 = *(void *)(a1 + 8);
    if (v32 < v31 || v31 >= v32 && *(void *)(a2 + 16) < *(void *)(a1 + 16)) {
      goto LABEL_26;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = *(_DWORD *)(a2 - 24);
      int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        unint64_t v8 = *(void *)(a1 + 8);
        unint64_t v9 = *(void *)(a2 - 16);
LABEL_4:
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 24) = v7;
        uint64_t v10 = *(void *)(a1 + 16);
        uint64_t v11 = *(void *)(a2 - 8);
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = v11;
        *(void *)(a2 - 16) = v8;
        *(void *)(a2 - 8) = v10;
        return result;
      }
      if (v7 >= v6)
      {
        unint64_t v9 = *(void *)(a2 - 16);
        unint64_t v8 = *(void *)(a1 + 8);
        if (v9 < v8 || v8 >= v9 && *(void *)(a2 - 8) < *(void *)(a1 + 16)) {
          goto LABEL_4;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>((int *)a1, (int *)(a1 + 24), (int *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>(a1, a1 + 24, a1 + 48, a1 + 72, (int *)(a2 - 24));
      return 1;
    default:
      uint64_t v12 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,unsigned long,unsigned long long> *>((int *)a1, (int *)(a1 + 24), (int *)(a1 + 48));
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
LABEL_8:
  int v16 = *(_DWORD *)v13;
  int v17 = *(_DWORD *)v12;
  if (*(_DWORD *)v13 >= *(_DWORD *)v12)
  {
    if (v17 < v16) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v13 + 8);
    unint64_t v19 = *(void *)(v12 + 8);
    if (v18 >= v19 && (v19 < v18 || *(void *)(v13 + 16) >= *(void *)(v12 + 16))) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v18 = *(void *)(v13 + 8);
    unint64_t v19 = *(void *)(v12 + 8);
  }
  unint64_t v20 = *(void *)(v13 + 16);
  *(_DWORD *)uint64_t v13 = v17;
  uint64_t v21 = *(void *)(v12 + 16);
  *(void *)(v13 + 8) = v19;
  *(void *)(v13 + 16) = v21;
  uint64_t v22 = a1;
  if (v12 == a1) {
    goto LABEL_27;
  }
  uint64_t v23 = v14;
  while (1)
  {
    uint64_t v24 = a1 + v23;
    int v25 = *(_DWORD *)(a1 + v23 + 24);
    if (v16 >= v25)
    {
      if (v25 < v16) {
        goto LABEL_25;
      }
      unint64_t v26 = *(void *)(a1 + v23 + 32);
      if (v18 >= v26)
      {
        if (v26 < v18)
        {
LABEL_25:
          uint64_t v22 = v12;
          goto LABEL_27;
        }
        if (v20 >= *(void *)(a1 + v23 + 40))
        {
          uint64_t v22 = a1 + v23 + 48;
LABEL_27:
          *(_DWORD *)uint64_t v22 = v16;
          *(void *)(v22 + 8) = v18;
          *(void *)(v22 + 16) = v20;
          if (++v15 == 8) {
            return v13 + 24 == a2;
          }
LABEL_28:
          uint64_t v12 = v13;
          v14 += 24;
          v13 += 24;
          if (v13 == a2) {
            return 1;
          }
          goto LABEL_8;
        }
      }
    }
    else
    {
      unint64_t v26 = *(void *)(v24 + 32);
    }
    v12 -= 24;
    *(_DWORD *)(v24 + 48) = v25;
    uint64_t v27 = a1 + v23;
    uint64_t v28 = *(void *)(a1 + v23 + 40);
    *(void *)(v27 + 56) = v26;
    *(void *)(v27 + 64) = v28;
    v23 -= 24;
    if (v23 == -48)
    {
      uint64_t v22 = a1;
      goto LABEL_27;
    }
  }
}

id DEVICEOBJECT(id a1)
{
  while ((objc_opt_respondsToSelector() & 1) != 0)
    a1 = [a1 performSelector:"baseObject"];

  return a1;
}

void GTMTLReplaySupport_init(void *a1)
{
  DEVICEOBJECT(a1);
  id v50 = (id)objc_claimAutoreleasedReturnValue();
  GT_SUPPORT_0 = 0;
  GT_SUPPORT_0 = NSClassFromString(@"MTLTileRenderPipelineDescriptor") != 0;
  char v1 = objc_opt_respondsToSelector();
  uint64_t v2 = 2;
  if ((v1 & 1) == 0) {
    uint64_t v2 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFFFDLL | v2;
  id v3 = objc_alloc_init((Class)MTLCompileOptions);
  char v4 = objc_opt_respondsToSelector();
  uint64_t v5 = 4;
  if ((v4 & 1) == 0) {
    uint64_t v5 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFFFBLL | v5;

  Class v6 = NSClassFromString(@"MTLIndirectCommandBufferDescriptor");
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFFF7 | (8 * (v6 != 0));
  if (v6)
  {
    id v7 = objc_alloc_init((Class)MTLIndirectCommandBufferDescriptor);
    char v8 = objc_opt_respondsToSelector();
    uint64_t v9 = 16;
    if ((v8 & 1) == 0) {
      uint64_t v9 = 0;
    }
    GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFFEFLL | v9;
  }
  id v10 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  if ([v50 supportsTessellation])
  {
    char v11 = objc_opt_respondsToSelector();
    uint64_t v12 = 32;
    if ((v11 & 1) == 0) {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFFDFLL | v12;

  id v13 = objc_alloc_init((Class)MTLRenderPassDescriptor);
  char v14 = objc_opt_respondsToSelector();
  uint64_t v15 = 64;
  if ((v14 & 1) == 0) {
    uint64_t v15 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFFBFLL | v15;
  unsigned int v16 = [v50 supportsLayeredRendering];
  uint64_t v17 = 128;
  if (!v16) {
    uint64_t v17 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFF7FLL | v17;

  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFEFFLL | ((unint64_t)(NSClassFromString(@"MTLRasterizationRateMapDescriptor") != 0) << 8);
  unsigned int v18 = [v50 supportsImageBlocks];
  uint64_t v19 = 512;
  if (!v18) {
    uint64_t v19 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFDFFLL | v19;
  char v20 = objc_opt_respondsToSelector();
  uint64_t v21 = 1024;
  if ((v20 & 1) == 0) {
    uint64_t v21 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFFBFFLL | v21;
  char v22 = objc_opt_respondsToSelector();
  uint64_t v23 = 2048;
  if ((v22 & 1) == 0) {
    uint64_t v23 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFF7FFLL | v23;
  __int16 v24 = dword_77313C;
  id v25 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  uint64_t v26 = 0;
  if ((v24 & 0x4000) == 0)
  {
    char v27 = objc_opt_respondsToSelector();
    uint64_t v26 = 0x8000;
    if ((v27 & 1) == 0) {
      uint64_t v26 = 0;
    }
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFF7FFFLL | v26;

  id v28 = objc_alloc_init((Class)MTLComputePipelineDescriptor);
  char v29 = objc_opt_respondsToSelector();
  uint64_t v30 = 0x4000;
  if ((v29 & 1) == 0) {
    uint64_t v30 = 0;
  }
  unint64_t v31 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFBFFFLL | v30;
  GT_SUPPORT_0 = v31;
  if ((v24 & 0x4000) != 0)
  {
    uint64_t v32 = 0;
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v32 = 0x10000;
    }
    else {
      uint64_t v32 = 0;
    }
    unint64_t v31 = GT_SUPPORT_0;
  }
  GT_SUPPORT_0 = v31 & 0xFFFFFFFFFFFEFFFFLL | v32;

  BOOL v33 = [v50 argumentBuffersSupport] != 0;
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFFDFFFLL | ((unint64_t)v33 << 13);
  id v34 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  char v35 = objc_opt_respondsToSelector();
  uint64_t v36 = 0x20000;
  if ((v35 & 1) == 0) {
    uint64_t v36 = 0;
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFDFFFFLL | v36;

  char v37 = objc_opt_respondsToSelector();
  uint64_t v38 = 0;
  if (v37)
  {
    unsigned int v39 = [v50 supportsGlobalVariableRelocation];
    uint64_t v38 = 0x40000;
    if (!v39) {
      uint64_t v38 = 0;
    }
  }
  GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFFBFFFFLL | v38;
  Class v40 = NSClassFromString(@"MTLBufferDescriptor");
  int v41 = DEVICEOBJECT(v50);
  char v42 = objc_opt_respondsToSelector();

  if ((v42 & 1) != 0 && v40)
  {
    int v43 = DEVICEOBJECT(v50);
    BOOL v44 = [v43 resourcePatchingTypeForResourceType:3] != (char *)&def_1C1270 + 2;

    uint64_t v45 = 0x80000;
    if ((*(_DWORD *)&v44 & ((unsigned __int16)(dword_77313C & 0x100) >> 8)) == 0) {
      uint64_t v45 = 0;
    }
    GT_SUPPORT_0 = v45 | GT_SUPPORT_0 & 0xFFFFFFFFFFF7FFFFLL;
  }
  unint64_t v46 = DEVICEOBJECT(v50);
  char v47 = objc_opt_respondsToSelector();

  if (v47)
  {
    int v48 = DEVICEOBJECT(v50);
    BOOL v49 = [v48 resourcePatchingTypeForResourceType:8] == (char *)&def_1C1270 + 1;

    GT_SUPPORT_0 = GT_SUPPORT_0 & 0xFFFFFFFFFFEFFFFFLL | ((unint64_t)v49 << 20);
  }
}

unsigned int *ExpectedState(uint64_t a1)
{
  uint64_t v2 = **(void **)a1;
  size_t FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(v2, "XPState");
  if (FileWithFilename)
  {
    char v4 = +[NSMutableData dataWithLength:*FileWithFilename];
    uint64_t v5 = *(void *)(a1 + 152);
    id v6 = v4;
    GTCaptureArchive_fillBufferCompressedDeflate(v2, v5, (uint64_t)FileWithFilename, [v6 mutableBytes], *FileWithFilename, 0);
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    char v11 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, v8, v9, v10, objc_opt_class(), 0);
    uint64_t v12 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v11 fromData:v6 error:0];

    if (v12)
    {
      size_t FileWithFilename = [v12 objectForKeyedSubscript:@"XPState"];
    }
    else
    {
      size_t FileWithFilename = 0;
    }
  }

  return FileWithFilename;
}

void sub_2E0E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetIOAccelerator()
{
  CFDictionaryRef v0 = IOServiceMatching("IOAccelerator");
  uint64_t result = IOServiceGetMatchingService(kIOMasterPortDefault, v0);
  if (!result)
  {
    CFDictionaryRef v2 = IOServiceMatching("IOAcceleratorES");
    return IOServiceGetMatchingService(kIOMasterPortDefault, v2);
  }
  return result;
}

id GetMetalPluginName(io_registry_entry_t a1, _DWORD *a2)
{
  CFProperty = (void *)IORegistryEntryCreateCFProperty(a1, @"MetalPluginName", 0, 0);
  uint64_t v5 = CFProperty;
  if (CFProperty)
  {
    CFRelease(CFProperty);
    if (a2)
    {
      id v6 = (void *)IORegistryEntryCreateCFProperty(a1, @"GPUConfigurationVariable", 0, 0);
      uint64_t v7 = v6;
      if (v6)
      {
        uint64_t v8 = [v6 objectForKeyedSubscript:@"gpu_gen"];
        uint64_t v9 = v8;
        if (v8)
        {
          unsigned int v10 = [v8 intValue];
          if (v10 == 15)
          {
            char v11 = [v7 objectForKeyedSubscript:@"num_cores"];
            if ((int)[v11 intValue] < 6) {
              unsigned int v10 = 14;
            }
            else {
              unsigned int v10 = 15;
            }
          }
          *a2 = v10 - 10;
        }
      }
    }
  }

  return v5;
}

void sub_2E102C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GTProfilerConfigurationVariables(io_registry_entry_t a1)
{
  CFProperty = (void *)IORegistryEntryCreateCFProperty(a1, @"GPUConfigurationVariable", 0, 0);

  return CFProperty;
}

uint64_t MetalPluginTarget(void *a1)
{
  id v1 = a1;
  CFDictionaryRef v2 = v1;
  if (v1 && ([v1 hasPrefix:@"AGXMetal"] & 1) != 0)
  {
    id v3 = [v2 substringFromIndex:[@"AGXMetal" length]];
    char v4 = v3;
    if (v3)
    {
      if (([v3 hasPrefix:@"S4"] & 1) != 0
        || ([v4 hasPrefix:@"S5"] & 1) != 0
        || ([v4 hasPrefix:@"S6"] & 1) != 0)
      {
        uint64_t v5 = 1;
LABEL_18:

        goto LABEL_19;
      }
      if (([v4 hasPrefix:@"G"] & 1) != 0
        || ([v4 hasPrefix:@"A"] & 1) != 0
        || [v4 hasPrefix:@"1"])
      {
        id v6 = v4;
        uint64_t v7 = (char *)[v6 UTF8String];
        int v8 = 0;
        for (unint64_t i = [v6 hasPrefix:@"1"] ^ 1;
              i < (unint64_t)[v6 length];
              ++i)
        {
          if (v7[i] < 0) {
            break;
          }
          uint64_t v10 = v7[i];
          if ((_DefaultRuneLocale.__runetype[v10] & 0x400) == 0) {
            break;
          }
          int v8 = v10 + 10 * v8 - 48;
        }
        if (v8 == 15)
        {
          if (i < (unint64_t)[v6 length]
            && [v6 characterAtIndex:i] == 95
            || (id)i == [v6 length])
          {
            int v8 = 14;
          }
          else
          {
            int v8 = 15;
          }
        }
        if ([v6 hasPrefix:@"A"]) {
          int v12 = -11;
        }
        else {
          int v12 = -10;
        }
        int v13 = v12 + v8;
        if (v13 <= -2) {
          uint64_t v5 = 0x80000000;
        }
        else {
          uint64_t v5 = v13;
        }
        goto LABEL_18;
      }
    }
    uint64_t v5 = 0x80000000;
    goto LABEL_18;
  }
  uint64_t v5 = 0x80000000;
LABEL_19:

  return v5;
}

void sub_2E1298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id IsAGXMetalPlugin(void *a1, const char *a2)
{
  return [a1 containsString:@"AGXMetal"];
}

id ProcessEncoderTimeData(void *a1, void *a2, void *a3, unint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  int v48 = v9;
  if (!v7) {
    id v7 = (id)objc_opt_new();
  }
  id v51 = v8;
  if (!v8) {
    id v51 = objc_opt_new();
  }
  int v57 = [v9 objectForKeyedSubscript:@"activePerEncoderDrawCallCount"];
  int v55 = [v9 objectForKeyedSubscript:@"perEncoderKickCount" v7];
  unint64_t v10 = (unint64_t)[v7 count];
  unint64_t v11 = v10;
  id v52 = v8;
  if (v10)
  {
    if (v10 >> 61) {
      abort();
    }
    int v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v10);
    uint64_t v14 = (uint64_t)&v12[8 * v13];
    memset_pattern16(v12, &unk_4C80B0, 8 * v11);
    uint64_t v15 = &v12[8 * v11];
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    int v12 = 0;
  }
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v16 = v7;
  unint64_t v17 = 0;
  id v18 = [v16 countByEnumeratingWithState:&v63 objects:v70 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v64;
    do
    {
      for (unint64_t i = 0; i != v18; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v64 != v19) {
          objc_enumerationMutation(v16);
        }
        v17 += (unint64_t)[*(id *)(*((void *)&v63 + 1) + 8 * i) unsignedLongLongValue];
      }
      id v18 = [v16 countByEnumeratingWithState:&v63 objects:v70 count:16];
    }
    while (v18);
  }

  if (a4)
  {
    double v21 = (double)a4 / (double)v17;
    unint64_t v22 = (v15 - v12) >> 3;
    if (v22 <= (v14 - (uint64_t)v12) >> 3)
    {
      if (v15 != v12)
      {
        uint64_t v27 = 0;
        do
          *(double *)&v12[8 * v27++] = v21;
        while (v22 != v27);
      }
    }
    else
    {
      if (v12)
      {
        operator delete(v12);
        uint64_t v14 = 0;
      }
      if (v15 - v12 < 0) {
        goto LABEL_62;
      }
      uint64_t v23 = v14 >> 2;
      if (v14 >> 2 <= v22) {
        uint64_t v23 = (v15 - v12) >> 3;
      }
      unint64_t v24 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v23;
      if (v24 >> 61) {
LABEL_62:
      }
        abort();
      id v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v24);
      int v12 = v25;
      uint64_t v26 = 0;
      do
      {
        *(double *)&v25[v26] = v21;
        v26 += 8;
      }
      while (8 * v22 != v26);
    }
  }
  if (!v55)
  {
    v69[0] = v16;
    v69[1] = v51;
    unint64_t v46 = +[NSArray arrayWithObjects:v69 count:2];
    goto LABEL_56;
  }
  int v54 = objc_opt_new();
  BOOL v49 = objc_opt_new();
  id v50 = objc_opt_new();
  int v53 = objc_opt_new();
  unsigned int v28 = 0;
  unsigned int v56 = 0;
  while (1)
  {
    if ((unint64_t)[v57 count] <= v28)
    {
      v67[0] = v53;
      v67[1] = v50;
      void v67[2] = v54;
      v67[3] = v49;
      unint64_t v46 = +[NSArray arrayWithObjects:v67 count:4];
      goto LABEL_55;
    }
    uint64_t v58 = v28;
    char v29 = [v57 objectAtIndexedSubscript:];
    unsigned int v30 = [v29 unsignedIntValue];

    unint64_t v31 = [v55 objectAtIndexedSubscript:v58];
    unsigned int v32 = [v31 unsignedIntValue];

    if (!v30 && v32 == 1)
    {
      [v53 addObject:&off_759D50];
      [v54 addObject:&off_759D50];
      if (v52)
      {
        BOOL v33 = +[NSArray arrayWithObject:&off_759D50];
        [v50 addObject:v33];

        id v34 = +[NSArray arrayWithObject:&off_759D50];
        [v49 addObject:v34];
      }
      goto LABEL_51;
    }
    if ((unint64_t)[v16 count] <= v56) {
      break;
    }
    char v35 = [v16 objectAtIndexedSubscript:v56];
    [v54 addObject:v35];

    if (v52)
    {
      uint64_t v36 = objc_opt_new();
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      char v37 = [v51 objectAtIndexedSubscript:v56];
      id v38 = [v37 countByEnumeratingWithState:&v59 objects:v68 count:16];
      if (v38)
      {
        uint64_t v39 = *(void *)v60;
        do
        {
          for (unint64_t j = 0; j != v38; unint64_t j = (char *)j + 1)
          {
            if (*(void *)v60 != v39) {
              objc_enumerationMutation(v37);
            }
            int v41 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)(*(double *)&v12[8 * v56]* (double)(unint64_t)[*(id *)(*((void *)&v59 + 1) + 8 * (void)j) unsignedLongLongValue]));
            [v36 addObject:v41];
          }
          id v38 = [v37 countByEnumeratingWithState:&v59 objects:v68 count:16];
        }
        while (v38);
      }

      [v50 addObject:v36];
      char v42 = [v51 objectAtIndexedSubscript:v56];
      [v49 addObject:v42];
    }
    int v43 = [v16 objectAtIndexedSubscript:v56];
    id v44 = [v43 unsignedLongLongValue];

    uint64_t v45 = +[NSNumber numberWithUnsignedLongLong:(unint64_t)(*(double *)&v12[8 * v56] * (double)(unint64_t)v44)];
    [v53 addObject:v45];

    ++v56;
LABEL_51:
    unsigned int v28 = v58 + 1;
  }
  unint64_t v46 = 0;
LABEL_55:

LABEL_56:
  if (v12) {
    operator delete(v12);
  }

  return v46;
}

void sub_2E1918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19)
{
  if (v19) {
    operator delete(v19);
  }

  _Unwind_Resume(a1);
}

id ProcessDerivedCounterDataFromDevice(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v98 = a2;
  id v117 = a3;
  uint64_t v99 = v5;
  if (!v5) {
    goto LABEL_114;
  }
  unint64_t v96 = objc_opt_new();
  id v6 = [v5 objectForKeyedSubscript:@"counters"];
  unint64_t v128 = [v98 objectForKeyedSubscript:@"NormalizedCounters"];
  if (!v6)
  {
    id v5 = 0;
    goto LABEL_113;
  }
  [v6 count];
  unint64_t v115 = objc_opt_new();
  if (v128)
  {
    long long v145 = 0u;
    long long v146 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    obunint64_t j = v6;
    id v7 = [obj countByEnumeratingWithState:&v143 objects:v157 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v144;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v144 != v8) {
            objc_enumerationMutation(obj);
          }
          unint64_t v10 = *(void **)(*((void *)&v143 + 1) + 8 * i);
          if ([v128 containsObject:v10])
          {
            unint64_t v11 = [v10 stringByAppendingString:@"_norm"];
            [v115 addObject:v11];
          }
        }
        id v7 = [obj countByEnumeratingWithState:&v143 objects:v157 count:16];
      }
      while (v7);
    }
  }
  memset(__p, 0, sizeof(__p));
  long long v138 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  long long v141 = 0u;
  id obja = v6;
  id v12 = [obja countByEnumeratingWithState:&v138 objects:v156 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v139;
    do
    {
      for (unint64_t j = 0; j != v12; unint64_t j = (char *)j + 1)
      {
        if (*(void *)v139 != v13) {
          objc_enumerationMutation(obja);
        }
        LOBYTE(v162[0]) = [v128 containsObject:*(void *)(*((void *)&v138 + 1) + 8 * (void)j)];
        std::vector<BOOL>::push_back((uint64_t *)__p, v162);
      }
      id v12 = [obja countByEnumeratingWithState:&v138 objects:v156 count:16];
    }
    while (v12);
  }

  id v15 = +[NSSet setWithObjects:@"MTLStatDataMaster", @"MTLStat_nSec", 0];
  id objb = obja;
  id v16 = objc_opt_new();
  v162[0] = _NSConcreteStackBlock;
  v162[1] = 3221225472;
  v162[2] = ___ZL28CounterIndicesFromCounterSetP5NSSetP7NSArray_block_invoke;
  v162[3] = &unk_746520;
  id v17 = v15;
  id v163 = v17;
  id v18 = v16;
  id v164 = v18;
  [objb enumerateObjectsUsingBlock:v162];
  uint64_t v19 = v164;
  id v97 = v18;

  char v20 = [v97 objectForKeyedSubscript:@"MTLStatDataMaster"];
  unsigned int v131 = CounterIndex(v20);

  double v21 = [v97 objectForKeyedSubscript:@"MTLStat_nSec"];
  unsigned int v129 = CounterIndex(v21);

  id v5 = 0;
  if (v131 == -1 || v129 == -1) {
    goto LABEL_110;
  }
  unint64_t v22 = [objb arrayByAddingObjectsFromArray:v115];

  unsigned int v126 = [v22 count];
  id v23 = v22;
  id objb = v23;
  id v133 = [objc_alloc((Class)NSMutableArray) initWithCapacity:4 * [v23 count]];
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  id v24 = [&off_758C78 countByEnumeratingWithState:&v151 objects:v162 count:16];
  if (v24)
  {
    uint64_t v25 = *(void *)v152;
    do
    {
      for (unint64_t k = 0; k != v24; unint64_t k = (char *)k + 1)
      {
        if (*(void *)v152 != v25) {
          objc_enumerationMutation(&off_758C78);
        }
        uint64_t v27 = *(void *)(*((void *)&v151 + 1) + 8 * (void)k);
        long long v147 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        id v28 = v23;
        id v29 = [v28 countByEnumeratingWithState:&v147 objects:&v158 count:16];
        if (v29)
        {
          uint64_t v30 = *(void *)v148;
          do
          {
            for (unint64_t m = 0; m != v29; unint64_t m = (char *)m + 1)
            {
              if (*(void *)v148 != v30) {
                objc_enumerationMutation(v28);
              }
              unsigned int v32 = [*(id *)(*((void *)&v147 + 1) + 8 * (void)m) stringByAppendingString:v27];
              [v133 addObject:v32];
            }
            id v29 = [v28 countByEnumeratingWithState:&v147 objects:&v158 count:16];
          }
          while (v29);
        }

        id v23 = objb;
      }
      id v24 = [&off_758C78 countByEnumeratingWithState:&v151 objects:v162 count:16];
    }
    while (v24);
  }

  LODWORD(v151) = 0;
  DWORD1(v151) = v126;
  DWORD2(v151) = 2 * v126;
  HIDWORD(v151) = 3 * v126;
  int v92 = [v99 objectForKeyedSubscript:@"AverageSamples"];
  unint64_t v82 = objc_opt_new();
  unint64_t v95 = [v98 objectForKeyedSubscript:@"perCommandBufferEncoderCount"];
  unint64_t v89 = [v98 objectForKeyedSubscript:@"activePerEncoderDrawCallCount"];
  int v90 = [v98 objectForKeyedSubscript:@"perEncoderKickCount"];
  unsigned int v86 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v94 = 4 * v126;
  uint64_t v101 = v131;
  uint64_t v113 = v129;
  while (1)
  {
    if ((unint64_t)[v95 count] <= v34)
    {
      [v96 setObject:v133 forKeyedSubscript:@"counters"];
      [v96 setObject:v82 forKeyedSubscript:@"AverageSamples"];
      unint64_t v79 = [v99 objectForKeyedSubscript:@"counterLists"];
      id v80 = [v79 copy];
      [v96 setObject:v80 forKeyedSubscript:@"counterLists"];

      id v5 = v96;
      goto LABEL_109;
    }
    unsigned int v87 = v34;
    char v35 = [v95 objectAtIndexedSubscript:];
    unsigned int v36 = [v35 unsignedIntValue];

    if (v36) {
      break;
    }
LABEL_104:
    unsigned int v34 = v87 + 1;
  }
  if ((unint64_t)[v92 count] <= v86) {
    goto LABEL_108;
  }
  uint64_t v88 = [v92 objectAtIndexedSubscript:];
  uint64_t v84 = objc_opt_new();
  unsigned int v93 = 0;
  unsigned int v83 = v33 + v36;
  char v85 = 1;
  while (1)
  {
    unint64_t v110 = v33;
    char v37 = [v90 objectAtIndexedSubscript:];
    unsigned int v38 = [v37 unsignedIntValue];

    uint64_t v39 = [v89 objectAtIndexedSubscript:v33];
    unsigned int v40 = [v39 unsignedIntValue];

    if (v40 || v38 != 1) {
      break;
    }
    id v104 = (id)objc_opt_new();
LABEL_47:
    unint64_t v91 = objc_opt_new();
    unint64_t v103 = +[NSMutableArray arrayWithCapacity:v94];
    if (v94)
    {
      uint64_t v41 = v94;
      do
      {
        [v103 addObject:&off_759D98];
        --v41;
      }
      while (v41);
    }
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    id v105 = v104;
    id v42 = [v105 countByEnumeratingWithState:&v134 objects:v155 count:16];
    if (v42)
    {
      unsigned int v108 = 0;
      uint64_t v100 = *(void *)v135;
      do
      {
        int v109 = 0;
        id v102 = v42;
        do
        {
          if (*(void *)v135 != v100) {
            objc_enumerationMutation(v105);
          }
          int v43 = *(void **)(*((void *)&v134 + 1) + 8 * (void)v109);
          id v127 = v103;
          id v116 = v117;
          id v44 = v43;
          id v114 = v105;
          id v106 = objb;
          id v107 = v133;
          uint64_t v121 = v44;
          uint64_t v45 = [v44 objectAtIndexedSubscript:0];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          [v121 objectAtIndexedSubscript:v101];
          if (isKindOfClass) {
            unint64_t v46 = {;
          }
            char v47 = [v46 objectAtIndexedSubscript:0];
          }
          else {
            char v47 = {;
          }
            unint64_t v46 = v47;
          }
          id v119 = [v47 unsignedLongLongValue];
          if (isKindOfClass) {

          }
          if ((unint64_t)v119 < 4)
          {
            unsigned int v111 = [v121 count];
            unint64_t v112 = v108;
            if (v117 && (unint64_t)[v116 count] > v110)
            {
              int v48 = [v116 objectAtIndexedSubscript:];
              id v49 = [v48 count];
              if ((unint64_t)v49 <= 1) {
                unint64_t v50 = 1;
              }
              else {
                unint64_t v50 = (unint64_t)v49;
              }

              unint64_t v112 = v108 % v50;
            }
            unint64_t v51 = 0;
            uint64_t v118 = 0;
            while (v51 < (unint64_t)[v121 count])
            {
              uint64_t v125 = [v121 objectAtIndexedSubscript:v51];
              if (isKindOfClass)
              {
                id v130 = [v125 objectAtIndexedSubscript:0];
              }
              else
              {
                id v130 = v125;
              }
              if (v117 && v51 == v113 && (unint64_t)[v116 count] > v110)
              {
                id v52 = [v116 objectAtIndexedSubscript:];
                uint64_t v53 = [v52 objectAtIndexedSubscript:v112];

                id v130 = (id)v53;
              }
              int v54 = (char *)[v130 unsignedLongLongValue];
              unint64_t v55 = v51 + HIDWORD(v151);
              unsigned int v56 = [v127 objectAtIndexedSubscript:v55];
              int v57 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", &v54[(void)[v56 unsignedLongLongValue]]);
              [v127 setObject:v57 atIndexedSubscript:v55];

              [v127 setObject:v130 atIndexedSubscript:v51 + *((unsigned int *)&v151 + (void)v119)];
              if ((isKindOfClass & 1) != 0
                && ((*(void *)((char *)__p[0] + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v51) & 1) != 0)
              {
                id v58 = [v130 unsignedLongLongValue];
                long long v59 = [v125 objectAtIndexedSubscript:1];
                id v60 = [v59 unsignedLongLongValue];

                if ((unint64_t)v60 <= 1) {
                  unint64_t v61 = 1;
                }
                else {
                  unint64_t v61 = (unint64_t)v60;
                }
                double v62 = (double)(unint64_t)v58 * 100.0 / (double)v61;
                long long v63 = +[NSNumber numberWithDouble:v62];
                [v127 setObject:v63 atIndexedSubscript:v118 + *((_DWORD *)&v151 + (void)v119) + v111];

                id v64 = [v114 count];
                if (v112 || (unint64_t)v64 < 2)
                {
                  if ([v114 count] == (char *)&def_1C1270 + 1)
                  {
                    uint64_t v78 = +[NSNumber numberWithDouble:v62];
                    [v127 setObject:v78 atIndexedSubscript:v118 + HIDWORD(v151) + v111];
                    goto LABEL_97;
                  }
                }
                else
                {
                  long long v161 = 0u;
                  long long v160 = 0u;
                  long long v159 = 0u;
                  long long v158 = 0u;
                  id v132 = v114;
                  id v65 = [v132 countByEnumeratingWithState:&v158 objects:v162 count:16];
                  if (!v65)
                  {

                    double v77 = 0.0;
                    goto LABEL_95;
                  }
                  unint64_t v66 = 0;
                  unint64_t v67 = 0;
                  uint64_t v68 = *(void *)v159;
                  do
                  {
                    for (uint64_t n = 0; n != v65; uint64_t n = (char *)n + 1)
                    {
                      if (*(void *)v159 != v68) {
                        objc_enumerationMutation(v132);
                      }
                      uint64_t v70 = *(void **)(*((void *)&v158 + 1) + 8 * (void)n);
                      unint64_t v71 = [v70 objectAtIndexedSubscript:v51];
                      unint64_t v72 = [v71 objectAtIndexedSubscript:0];
                      id v73 = [v72 unsignedLongLongValue];

                      int v74 = [v70 objectAtIndexedSubscript:v51];
                      unint64_t v75 = [v74 objectAtIndexedSubscript:1];
                      id v76 = [v75 unsignedLongLongValue];

                      v67 += (unint64_t)v73;
                      v66 += (unint64_t)v76;
                    }
                    id v65 = [v132 countByEnumeratingWithState:&v158 objects:v162 count:16];
                  }
                  while (v65);

                  double v77 = (double)v67 * 100.0;
                  if (!v66) {
LABEL_95:
                  }
                    unint64_t v66 = 1;
                  uint64_t v78 = +[NSNumber numberWithDouble:v77 / (double)v66];
                  [v127 setObject:v78 atIndexedSubscript:v118 + HIDWORD(v151) + v111];
LABEL_97:
                }
                ++v118;
              }

              ++v51;
              continue;
            }
          }

          ++v108;
          int v109 = (char *)v109 + 1;
        }
        while (v109 != v102);
        id v42 = [v114 countByEnumeratingWithState:&v134 objects:v155 count:16];
      }
      while (v42);
    }

    [v91 addObject:v103];
    [v84 addObject:v91];

    unsigned int v33 = v110 + 1;
    if (v110 + 1 == v83)
    {
      [v82 addObject:v84];

      v86 += (v85 & 1) == 0;
      unsigned int v33 = v83;
      goto LABEL_104;
    }
  }
  if ((unint64_t)[v88 count] > v93)
  {
    [v88 objectAtIndexedSubscript:];
    id v104 = (id)objc_claimAutoreleasedReturnValue();
    char v85 = 0;
    ++v93;
    goto LABEL_47;
  }

LABEL_108:
  id v5 = 0;
LABEL_109:

LABEL_110:
  if (__p[0]) {
    operator delete(__p[0]);
  }

LABEL_113:
LABEL_114:

  return v5;
}

void sub_2E29C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56)
{
  if (STACK[0x208]) {
    operator delete((void *)STACK[0x208]);
  }

  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t *a1, unsigned char *a2)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      abort();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((uint64_t)a1, v7);
    unint64_t v4 = a1[1];
  }
  a1[1] = v4 + 1;
  uint64_t v8 = *a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)(v8 + 8 * v9) | v10;
  }
  else {
    uint64_t v11 = *(void *)(v8 + 8 * v9) & ~v10;
  }
  *(void *)(v8 + 8 * v9) = v11;
}

void ___ZL28CounterIndicesFromCounterSetP5NSSetP7NSArray_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:"))
  {
    uint64_t v5 = +[NSNumber numberWithUnsignedInteger:a3];
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_2E2F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CounterIndex(NSNumber *a1)
{
  id v1 = a1;
  CFDictionaryRef v2 = v1;
  if (v1) {
    uint64_t v3 = [(NSNumber *)v1 unsignedIntValue];
  }
  else {
    uint64_t v3 = 0xFFFFFFFFLL;
  }

  return v3;
}

void sub_2E2F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL IsGPUPerformanceStateInduced(void *a1)
{
  uint64_t v6 = 0;
  id v4 = 0;
  char v5 = 0;
  id v1 = [a1 defaultDevice];
  GTAGXPerfStateControl::InitWithDevice((uint64_t)&v4, v1);

  BOOL v2 = GTAGXPerfStateControl::IsGPUPerformanceStateInduced((GTAGXPerfStateControl *)&v4);
  GTAGXPerfStateControl::~GTAGXPerfStateControl(&v4);
  return v2;
}

void sub_2E2FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  GTAGXPerfStateControl::~GTAGXPerfStateControl((id *)va);
  _Unwind_Resume(a1);
}

id ConsistentPerformanceStateInfo(uint64_t a1)
{
  ExpectedState(a1);
  BOOL v2 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = 0;
  id v6 = 0;
  char v7 = 0;
  uint64_t v3 = [*(id *)(a1 + 8) defaultDevice];
  GTAGXPerfStateControl::InitWithDevice((uint64_t)&v6, v3);

  id v4 = GTAGXPerfStateControl::ConsistentGPUPerfStateLevel((GTAGXPerfStateControl *)&v6, v2);
  GTAGXPerfStateControl::~GTAGXPerfStateControl(&v6);

  return v4;
}

void sub_2E30A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  GTAGXPerfStateControl::~GTAGXPerfStateControl((id *)va);
  _Unwind_Resume(a1);
}

id GTShaderProfilerGenerateComputedKey(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%08u%09u%09llu_%@", a1, a2, a3, v7];

  return v8;
}

void sub_2E3148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GTMTLReplayClient_init(uint64_t a1, uint64_t a2)
{
  long long v24 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v7 = a2;
  *(void *)&long long v12 = 0xFF0000FF00FF00FFLL;
  *((void *)&v12 + 1) = 1082130432;
  *(void *)&long long v13 = [objc_alloc((Class)NSMutableArray) initWithCapacity:128];
  *(void *)&long long v22 = objc_alloc_init((Class)NSOperationQueue);
  *((void *)&v22 + 1) = objc_alloc_init((Class)NSOperationQueue);
  id v23 = [objc_alloc((Class)NSMutableArray) initWithCapacity:16];
  __copy_assignment_8_8_t0w88_s88_S_s96_s104_t112w8_s120_s128_s136_t144w8_s152_s160_s168_s176_s184_s192_s200_s208_s216_s224_s232_s240_s248_S_s256_s264_s272_s280_s288(a1, (uint64_t)&v7);
  uint64_t v3 = +[NSBundle mainBundle];
  id v4 = [v3 objectForInfoDictionaryKey:@"CFBundleName"];

  if (!v4) {
    id v4 = @"MTLReplayController";
  }
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"gputools.%@.parallelQueue", v4, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, *(void *)&v17[0], *(_OWORD *)((char *)v17 + 8), *((void *)&v17[1] + 1), v18, *(void *)&v19[0],
    *(_OWORD *)((char *)v19 + 8),
    *((void *)&v19[1] + 1),
    v20,
    v21,
  char v5 = v22);
  [*(id *)(a1 + 264) setName:v5];

  id v6 = +[NSString stringWithFormat:@"gputools.%@.serialQueue", v4];
  [*(id *)(a1 + 256) setName:v6];

  [*(id *)(a1 + 256) setMaxConcurrentOperationCount:1];
  __destructor_8_s88_S_s96_s104_s120_s128_s136_s152_s160_s168_s176_s184_s192_s200_s208_s216_s224_s232_s240_s248_S_s256_s264_s272_s280_s288((uint64_t)&v7);
}

void sub_2E32F0(_Unwind_Exception *a1)
{
  __destructor_8_s0_s8_s24_s32_s40_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_s144_s152(v3 + 96);
  _Unwind_Resume(a1);
}

void GTMTLReplayClient_setDisplayDelegate(uint64_t a1, void *a2)
{
}

GTMTLReplayService *GTMTLReplayClient_createNewTransport(uint64_t a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, a4);
  GTMTLReplayClient_init(a1, (uint64_t)newpool);
  char v5 = dispatch_queue_create("com.apple.gputools.replay", 0);
  dispatch_suspend(v5);
  uint64_t v6 = GTTransportServiceDaemonConnectionNew();
  uint64_t v7 = (void *)GTMTLReplayClient_createNewTransport_connection;
  GTMTLReplayClient_createNewTransport_connectiouint64_t n = v6;

  objc_initWeak(&location, (id)GTMTLReplayClient_createNewTransport_connection);
  long long v8 = (void *)GTMTLReplayClient_createNewTransport_connection;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = __GTMTLReplayClient_createNewTransport_block_invoke;
  id v21[3] = &unk_746548;
  objc_copyWeak(&v22, &location);
  [v8 activateWithMessageHandler:v21 andErrorHandler:&__block_literal_global_7167];
  id v9 = objc_alloc_init((Class)GTBulkDataService);
  objc_storeStrong((id *)(a1 + 288), v9);
  id v10 = [objc_alloc((Class)GTServiceProperties) initWithProtocol:&OBJC_PROTOCOL___GTBulkDataService];
  long long v11 = [(id)GTMTLReplayClient_createNewTransport_connection connection];
  char v12 = registerService();

  if (v12)
  {
    id v13 = [objc_alloc((Class)GTBulkDataServiceXPCDispatcher) initWithService:v9 properties:v10];
    [GTMTLReplayClient_createNewTransport_connection registerDispatcher:v13 forPort:[v10 servicePort]];
    long long v14 = [[GTMTLReplayService alloc] initWithContext:a1];
    objc_storeStrong((id *)&_observer, v14);
    id v15 = [objc_alloc((Class)GTServiceProperties) initWithProtocol:&OBJC_PROTOCOL___GTMTLReplayService];
    long long v16 = [(id)GTMTLReplayClient_createNewTransport_connection connection];
    char v17 = registerService();

    if (v17)
    {
      id v18 = [objc_alloc((Class)GTMTLReplayServiceXPCDispatcher) initWithService:v14 properties:v15 bulkDataService:v9 bulkDataServiceProperties:v10];
      [GTMTLReplayClient_createNewTransport_connection registerDispatcher:v18 forPort:[v15 servicePort]];
      dispatch_resume(v5);
      uint64_t v19 = v14;
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }

  objc_destroyWeak(&v22);
  objc_destroyWeak(&location);

  return v19;
}

void sub_2E35D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GTMTLReplayHost_computeDerivedCountersFromData(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v171 = a2;
  id v10 = &off_758C48;
  id v170 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = [v12 objectForKeyedSubscript:@"DerivedCounterScript"];
  long long v14 = (void *)v13;
  if (v13)
  {
    long long v160 = (void *)v13;
    id v175 = [v12 objectForKeyedSubscript:@"DerivedCounterConfigurationVariables"];
    id v169 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", (char *)objc_msgSend(v11, "count")+ (void)objc_msgSend(v9, "count")+ (unint64_t)objc_msgSend(&off_758C48, "count"));
    id v15 = [v9 count];
    __chkstk_darwin(v15, 4 * (void)v15, v16, v17);
    unint64_t v166 = (char *)&v158 - v18;
    bzero((char *)&v158 - v18, v19);
    id v20 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v9, "count"));
    if ([v9 count])
    {
      unint64_t v21 = 0;
      do
      {
        id v22 = [v9 objectAtIndexedSubscript:v21];
        id v23 = +[NSNumber numberWithUnsignedInteger:v21];
        [v20 setObject:v23 forKeyedSubscript:v22];

        ++v21;
      }
      while (v21 < (unint64_t)[v9 count]);
    }
    long long v24 = [v9 sortedArrayUsingSelector:"compare:"];
    id v25 = [v24 count];
    uint64_t v26 = v166;
    if (v25)
    {
      unint64_t v27 = 0;
      do
      {
        id v28 = [v24 objectAtIndexedSubscript:v27];
        id v29 = [v20 objectForKeyedSubscript:v28];
        *(_DWORD *)&v26[4 * v27] = [v29 intValue];

        ++v27;
      }
      while (v27 < (unint64_t)[v24 count]);
    }
    id v30 = v169;
    id v162 = v11;
    [v169 addObjectsFromArray:v11];
    [v30 addObjectsFromArray:v24];
    [v30 addObjectsFromArray:&off_758C48];

    id v31 = objc_alloc((Class)NSMutableArray);
    id v32 = v171;
    id v168 = [v31 initWithCapacity:[v171 count]];
    id v167 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v32, "count"));
    id v33 = objc_alloc_init((Class)JSVirtualMachine);
    id v34 = objc_alloc((Class)JSContext);
    id v158 = v33;
    id v35 = [v34 initWithVirtualMachine:v33];
    [v35 setObject:&__block_literal_global_7192 forKeyedSubscript:@"ErrorLog"];
    [v35 setExceptionHandler:&__block_literal_global_25];
    id v36 = [v35 evaluateScript:v160];
    id v37 = objc_alloc_init((Class)NSMutableArray);
    long long v188 = 0u;
    long long v189 = 0u;
    long long v190 = 0u;
    long long v191 = 0u;
    id v159 = v9;
    id v38 = v9;
    id v39 = [v38 countByEnumeratingWithState:&v188 objects:v205 count:16];
    if (v39)
    {
      id v40 = v39;
      uint64_t v41 = *(void *)v189;
      do
      {
        for (unint64_t i = 0; i != v40; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v189 != v41) {
            objc_enumerationMutation(v38);
          }
          +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"var %@ = 0;",
          int v43 = *(void *)(*((void *)&v188 + 1) + 8 * i));
          [v37 addObject:v43];
        }
        id v40 = [v38 countByEnumeratingWithState:&v188 objects:v205 count:16];
      }
      while (v40);
    }
    id v161 = v12;

    [v37 addObject:@"function _SetRawCounterValues() {"];
    if ([v38 count])
    {
      unint64_t v44 = 0;
      do
      {
        uint64_t v45 = [v38 objectAtIndexedSubscript:v44];
        +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"\t%@ = _RawCounterValues[%lu];",
          v45,
        unint64_t v46 = v44);
        [v37 addObject:v46];

        ++v44;
      }
      while (v44 < (unint64_t)[v38 count]);
    }
    [v37 addObject:@"}"];
    long long v186 = 0u;
    long long v187 = 0u;
    long long v184 = 0u;
    long long v185 = 0u;
    char v47 = &off_758C48;
    id v48 = [&off_758C48 countByEnumeratingWithState:&v184 objects:v204 count:16];
    id v49 = &send_ptr;
    if (v48)
    {
      id v50 = v48;
      uint64_t v51 = *(void *)v185;
      do
      {
        for (unint64_t j = 0; j != v50; unint64_t j = (char *)j + 1)
        {
          if (*(void *)v185 != v51) {
            objc_enumerationMutation(&off_758C48);
          }
          [v49[219] stringWithFormat:@"var %@ = 0;"];
          uint64_t v53 = *(void *)(*((void *)&v184 + 1) + 8 * (void)j));
          [v37 addObject:v53];

          id v49 = &send_ptr;
        }
        id v50 = [&off_758C48 countByEnumeratingWithState:&v184 objects:v204 count:16];
      }
      while (v50);
    }

    [v37 addObject:@"function _SetSoftwareCounterValues() {"];
    if ([&off_758C48 count])
    {
      unint64_t v54 = 0;
      do
      {
        unint64_t v55 = [&off_758C48 objectAtIndexedSubscript:v54];
        +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"\t%@ = _SoftwareCounterValues[%lu];",
          v55,
        unsigned int v56 = v54);
        [v37 addObject:v56];

        id v49 = &send_ptr;
        ++v54;
      }
      while (v54 < (unint64_t)[&off_758C48 count]);
    }
    [v37 addObject:@"}"];
    [v37 addObject:@"var _DerivedCounterResult = [];"];
    [v37 addObject:@"function _EvaluteDerivedCounters() {"];
    [v37 addObject:@"\t_DerivedCounterResult = [];"];
    long long v182 = 0u;
    long long v183 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    id v173 = v162;
    id v57 = [v173 countByEnumeratingWithState:&v180 objects:v203 count:16];
    if (v57)
    {
      id v58 = v57;
      uint64_t v59 = *(void *)v181;
      do
      {
        for (unint64_t k = 0; k != v58; unint64_t k = (char *)k + 1)
        {
          if (*(void *)v181 != v59) {
            objc_enumerationMutation(v173);
          }
          [v49[219] stringWithFormat:@"\ttry { value = %@(); if (!isFinite(value)) { value = 0; } _DerivedCounterResult.push(value); } catch(err) { ErrorLog(err); _DerivedCounterResult.push(0); }"];
          unint64_t v61 = *(void *)(*((void *)&v180 + 1) + 8 * (void)k));
          [v37 addObject:v61];
        }
        id v58 = [v173 countByEnumeratingWithState:&v180 objects:v203 count:16];
      }
      while (v58);
    }

    [v37 addObject:@"}"];
    double v62 = [v37 componentsJoinedByString:@"\n"];
    id v63 = [v35 evaluateScript:v62];

    long long v178 = 0u;
    long long v179 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    id v64 = v175;
    id v65 = [v64 countByEnumeratingWithState:&v176 objects:v202 count:16];
    id v175 = v64;
    if (v65)
    {
      id v66 = v65;
      uint64_t v67 = *(void *)v177;
      do
      {
        for (unint64_t m = 0; m != v66; unint64_t m = (char *)m + 1)
        {
          if (*(void *)v177 != v67) {
            objc_enumerationMutation(v64);
          }
          uint64_t v69 = *(void *)(*((void *)&v176 + 1) + 8 * (void)m);
          uint64_t v70 = [v64 objectForKeyedSubscript:v69];
          unint64_t v71 = +[JSValue valueWithObject:v70 inContext:v35];
          [v35 setObject:v71 forKeyedSubscript:v69];

          id v64 = v175;
        }
        id v66 = [v175 countByEnumeratingWithState:&v176 objects:v202 count:16];
      }
      while (v66);
    }

    exception[0] = 0;
    unint64_t v72 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
    id v73 = [v35 objectForKeyedSubscript:@"_SetSoftwareCounterValues"];
    JSObjectRef v163 = JSValueToObject(v72, (JSValueRef)[v73 JSValueRef], exception);

    int v74 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
    unint64_t v75 = [v35 objectForKeyedSubscript:@"_SetRawCounterValues"];
    JSObjectRef v165 = JSValueToObject(v74, (JSValueRef)[v75 JSValueRef], exception);

    id v76 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
    double v77 = [v35 objectForKeyedSubscript:@"_EvaluteDerivedCounters"];
    JSObjectRef v164 = JSValueToObject(v76, (JSValueRef)[v77 JSValueRef], exception);

    uint64_t v78 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
    LogException(v78, exception[0]);
    id v79 = [v171 count];
    id v80 = v170;
    if (v79)
    {
      unint64_t v81 = 0;
      do
      {
        if ([v80 count])
        {
          unint64_t v82 = [v80 objectAtIndexedSubscript:v81];
          unsigned int v83 = +[JSValue valueWithObject:v82 inContext:v35];
          [v35 setObject:v83 forKeyedSubscript:@"_SoftwareCounterValues"];

          uint64_t v84 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
          JSObjectCallAsFunction(v84, v163, 0, 0, 0, exception);
          char v85 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
          LogException(v85, exception[0]);
        }
        unsigned int v86 = [v171 objectAtIndexedSubscript:v81];
        unsigned int v87 = +[JSValue valueWithObject:v86 inContext:v35];
        [v35 setObject:v87 forKeyedSubscript:@"_RawCounterValues"];

        uint64_t v88 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
        JSObjectCallAsFunction(v88, v165, 0, 0, 0, exception);
        unint64_t v89 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
        LogException(v89, exception[0]);
        int v90 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
        JSObjectCallAsFunction(v90, v164, 0, 0, 0, exception);
        unint64_t v91 = [v35 objectForKeyedSubscript:@"_DerivedCounterResult"];
        int v92 = [v91 toArray];

        unsigned int v93 = (const OpaqueJSContext *)[v35 JSGlobalContextRef];
        LogException(v93, exception[0]);
        [v168 addObject:v92];
        id v94 = [v92 count];
        if (v94 != [v173 count])
        {
          id v95 = [v92 count];
          unint64_t v96 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"derivedCounterResult contains %lu results, %lu expected (derivedCounterNames)", v95, [v173 count]);
          id v97 = __stdoutp;
          if (g_runningInCI) {
            id v98 = "#CI_ERROR# ";
          }
          else {
            id v98 = "";
          }
          id v99 = v96;
          fprintf(v97, "%s%s %u: %s\n", v98, "NSDictionary *GTMTLReplayHost_computeDerivedCountersFromData(NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSDictionary *__strong)", 190, (const char *)[v99 UTF8String]);
          id v100 = v99;
          GTMTLReplay_handleError(101, (uint64_t)[v100 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/launcher/DYJavaScriptHelper.m", (uint64_t)"GTMTLReplayHost_computeDerivedCountersFromData", 190, 2);
        }
        id v174 = v92;
        id v101 = [v92 mutableCopy];
        id v102 = [v171 objectAtIndexedSubscript:v81];
        id v103 = [v38 count];
        id v104 = v166;
        if (v103)
        {
          unint64_t v105 = 0;
          do
          {
            id v106 = [v102 objectAtIndexedSubscript:*(int *)&v104[4 * v105]];
            [v101 addObject:v106];

            ++v105;
          }
          while (v105 < (unint64_t)[v38 count]);
        }
        id v80 = v170;
        id v107 = [v170 objectAtIndexedSubscript:v81];
        [v101 addObjectsFromArray:v107];

        [v167 addObject:v101];
        id v108 = [v101 count];
        if (v108 != [v169 count])
        {
          id v109 = [v174 count];
          unint64_t v110 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"resultsForAnalysis contains %lu results, %lu expected (counterNamesForAnalysis)", v109, [v169 count]);
          unsigned int v111 = __stdoutp;
          if (g_runningInCI) {
            unint64_t v112 = "#CI_ERROR# ";
          }
          else {
            unint64_t v112 = "";
          }
          id v113 = v110;
          fprintf(v111, "%s%s %u: %s\n", v112, "NSDictionary *GTMTLReplayHost_computeDerivedCountersFromData(NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSDictionary *__strong)", 208, (const char *)[v113 UTF8String]);
          id v114 = v113;
          id v80 = v170;
          id v115 = v114;
          GTMTLReplay_handleError(101, (uint64_t)[v115 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/launcher/DYJavaScriptHelper.m", (uint64_t)"GTMTLReplayHost_computeDerivedCountersFromData", 208, 2);
        }
        ++v81;
      }
      while (v81 < (unint64_t)[v171 count]);
    }

    if (![v168 count])
    {
      id v116 = +[NSString stringWithFormat:@"derivedDataResults contains no results"];
      id v117 = __stdoutp;
      if (g_runningInCI) {
        uint64_t v118 = "#CI_ERROR# ";
      }
      else {
        uint64_t v118 = "";
      }
      id v119 = v116;
      fprintf(v117, "%s%s %u: %s\n", v118, "NSDictionary *GTMTLReplayHost_computeDerivedCountersFromData(NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSDictionary *__strong)", 216, (const char *)[v119 UTF8String]);
      id v120 = v119;
      GTMTLReplay_handleError(101, (uint64_t)[v120 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/launcher/DYJavaScriptHelper.m", (uint64_t)"GTMTLReplayHost_computeDerivedCountersFromData", 216, 2);
    }
    id v121 = [v167 count];
    id v122 = v161;
    if (!v121)
    {
      uint64_t v123 = +[NSString stringWithFormat:@"derivedDataResultsForBottleNeckAnalysis contains no results"];
      unint64_t v124 = __stdoutp;
      if (g_runningInCI) {
        uint64_t v125 = "#CI_ERROR# ";
      }
      else {
        uint64_t v125 = "";
      }
      id v126 = v123;
      fprintf(v124, "%s%s %u: %s\n", v125, "NSDictionary *GTMTLReplayHost_computeDerivedCountersFromData(NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSDictionary *__strong)", 221, (const char *)[v126 UTF8String]);
      id v127 = v126;
      GTMTLReplay_handleError(101, (uint64_t)[v127 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/launcher/DYJavaScriptHelper.m", (uint64_t)"GTMTLReplayHost_computeDerivedCountersFromData", 221, 2);
    }
    unint64_t v166 = [v122 objectForKeyedSubscript:@"DerivedCounterDictionary"];
    id v174 = [v166 objectForKeyedSubscript:@"DerivedCounters"];
    id v128 = v173;
    id v173 = [objc_alloc((Class)NSMutableArray) initWithCapacity:0];
    id v129 = [objc_alloc((Class)NSMutableArray) initWithCapacity:0];
    id v130 = [objc_alloc((Class)NSMutableArray) initWithCapacity:0];
    long long v192 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    long long v195 = 0u;
    id v172 = v128;
    id v131 = [v172 countByEnumeratingWithState:&v192 objects:exception count:16];
    if (v131)
    {
      id v132 = v131;
      uint64_t v133 = *(void *)v193;
      do
      {
        for (uint64_t n = 0; n != v132; uint64_t n = (char *)n + 1)
        {
          if (*(void *)v193 != v133) {
            objc_enumerationMutation(v172);
          }
          long long v135 = [v174 objectForKeyedSubscript:*(void *)(*((void *)&v192 + 1) + 8 * (void)n)];
          long long v136 = [v135 objectForKeyedSubscript:@"name"];
          long long v137 = [v135 objectForKeyedSubscript:@"description"];
          long long v138 = [v135 objectForKeyedSubscript:@"type"];
          if (v136) {
            CFStringRef v139 = v136;
          }
          else {
            CFStringRef v139 = @"Unknown";
          }
          [v173 addObject:v139];
          if (v137) {
            CFStringRef v140 = v137;
          }
          else {
            CFStringRef v140 = &stru_7482F0;
          }
          [v129 addObject:v140];
          if (v138) {
            CFStringRef v141 = v138;
          }
          else {
            CFStringRef v141 = @"Value";
          }
          [v130 addObject:v141];
        }
        id v132 = [v172 countByEnumeratingWithState:&v192 objects:exception count:16];
      }
      while (v132);
    }
    unint64_t v142 = v172;

    id v143 = v173;
    v206[0] = v142;
    v206[1] = v173;
    v206[2] = v129;
    v206[3] = v130;
    long long v144 = +[NSArray arrayWithObjects:v206 count:4];

    id v12 = v161;
    long long v145 = [v161 objectForKeyedSubscript:@"DerivedCounterAnalysis"];
    long long v146 = [v166 objectForKeyedSubscript:@"Bottlenecks"];
    if (!v146) {
      long long v146 = objc_opt_new();
    }
    v200[0] = @"derivedCounterDataForBottleneckAnalysis";
    v198[0] = @"AverageSamples";
    v198[1] = @"counters";
    v199[0] = v167;
    v199[1] = v169;
    long long v147 = +[NSDictionary dictionaryWithObjects:v199 forKeys:v198 count:2];
    v201[0] = v147;
    v200[1] = @"derivedCounterData";
    v196[0] = @"AverageSamples";
    v196[1] = @"counters";
    v197[0] = v168;
    v197[1] = v144;
    long long v148 = +[NSDictionary dictionaryWithObjects:v197 forKeys:v196 count:2];
    v201[1] = v148;
    v201[2] = v145;
    v200[2] = @"DerivedCounterAnalysis";
    v200[3] = @"DerivedCounterAnalysisFunctions";
    v201[3] = v146;
    long long v149 = +[NSDictionary dictionaryWithObjects:v201 forKeys:v200 count:4];

    id v150 = v175;
    if (v175)
    {
      id v151 = [v149 mutableCopy];
      [v151 setObject:v150 forKeyedSubscript:@"DerivedCounterConfigurationVariables"];

      long long v149 = v151;
    }
    id v9 = v159;
    long long v14 = v160;

    id v11 = v162;
  }
  else
  {
    long long v152 = +[NSString stringWithFormat:@"derivedScriptCode missing"];
    long long v153 = __stdoutp;
    if (g_runningInCI) {
      long long v154 = "#CI_ERROR# ";
    }
    else {
      long long v154 = "";
    }
    id v155 = v152;
    fprintf(v153, "%s%s %u: %s\n", v154, "NSDictionary *GTMTLReplayHost_computeDerivedCountersFromData(NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSArray *__strong, NSDictionary *__strong)", 59, (const char *)[v155 UTF8String]);
    id v156 = v155;
    GTMTLReplay_handleError(101, (uint64_t)[v156 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/launcher/DYJavaScriptHelper.m", (uint64_t)"GTMTLReplayHost_computeDerivedCountersFromData", 59, 2);

    long long v149 = &__NSDictionary0__struct;
  }

  return v149;
}

void LogException(const OpaqueJSContext *a1, const OpaqueJSValue *a2)
{
  if (a2)
  {
    BOOL v2 = JSValueToStringCopy(a1, a2, 0);
    size_t MaximumUTF8CStringSize = JSStringGetMaximumUTF8CStringSize(v2);
    __chkstk_darwin(MaximumUTF8CStringSize, v4, v5, v6);
    long long v8 = (char *)&v10 - v7;
    bzero((char *)&v10 - v7, MaximumUTF8CStringSize);
    JSStringGetUTF8CString(v2, v8, MaximumUTF8CStringSize);
    JSStringRelease(v2);
    id v9 = [objc_alloc((Class)NSString) initWithUTF8String:v8];
    NSLog(@"[DYJSScripting] \"%@\"", v9);
  }
}

void sub_2E4F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_2E515C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_2E539C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2E56C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_2E59E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GTMTLReplayClient_loadDerivedCounterInfo(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_alloc((Class)NSURL);
  uint64_t v6 = [v4 stringByAppendingString:@"-counters.plist"];

  id v7 = [v5 initFileURLWithPath:v6 isDirectory:0];
  id v8 = [objc_alloc((Class)NSDictionary) initWithContentsOfURL:v7 error:0];
  if (v8)
  {
    id v9 = objc_alloc((Class)NSString);
    uint64_t v10 = [v3 stringByAppendingString:@"-derived.js"];
    id v11 = [v9 initWithContentsOfFile:v10 encoding:4 error:0];

    id v12 = objc_alloc((Class)NSString);
    uint64_t v13 = [v3 stringByAppendingString:@"-analysis.js"];
    long long v14 = (__CFString *)[v12 initWithContentsOfFile:v13 encoding:4 error:0];

    v18[0] = @"DerivedCounterDictionary";
    v18[1] = @"DerivedCounterScript";
    v19[0] = v8;
    v19[1] = v11;
    void v18[2] = @"DerivedCounterAnalysis";
    CFStringRef v15 = &stru_7482F0;
    if (v14) {
      CFStringRef v15 = v14;
    }
    _OWORD v19[2] = v15;
    uint64_t v16 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:3];
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

id GTMTLReplayClient_mergeDerivedCounterInfo(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 mutableCopy];
  uint64_t v6 = [v4 objectForKeyedSubscript:@"DerivedCounterDictionary"];
  if (v6)
  {
    id v7 = [v3 objectForKeyedSubscript:@"DerivedCounterDictionary"];
    verifyCounterDictionary(v7);
    id v8 = MergeDictionaries(v7, v6);
    [v5 setObject:v8 forKeyedSubscript:@"DerivedCounterDictionary"];
  }
  id v9 = [v4 objectForKeyedSubscript:@"DerivedCounterScript"];
  if (v9)
  {
    uint64_t v10 = [v3 objectForKeyedSubscript:@"DerivedCounterScript"];
    id v11 = [v10 stringByAppendingString:v9];
    [v5 setObject:v11 forKeyedSubscript:@"DerivedCounterScript"];
  }
  id v12 = [v4 objectForKeyedSubscript:@"DerivedCounterAnalysis"];
  if (v12)
  {
    uint64_t v13 = [v3 objectForKeyedSubscript:@"DerivedCounterAnalysis"];
    long long v14 = [v13 stringByAppendingString:v12];
    [v5 setObject:v14 forKeyedSubscript:@"DerivedCounterAnalysis"];
  }
  id v15 = [v5 copy];

  return v15;
}

uint64_t verifyCounterDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 objectForKeyedSubscript:@"DerivedCounters"];

  if (v2)
  {
    id v3 = [v1 objectForKeyedSubscript:@"DerivedCounters"];
    id v4 = [v3 count];

    if (v4)
    {
      uint64_t v5 = 1;
      goto LABEL_10;
    }
    uint64_t v6 = +[NSString stringWithFormat:@"No derived counters in plist"];
    uint64_t v7 = 982;
  }
  else
  {
    uint64_t v6 = +[NSString stringWithFormat:@"%@ missing in plist", @"DerivedCounters"];
    uint64_t v7 = 977;
  }
  id v8 = __stdoutp;
  if (g_runningInCI) {
    id v9 = "#CI_ERROR# ";
  }
  else {
    id v9 = "";
  }
  id v10 = v6;
  fprintf(v8, "%s%s %u: %s\n", v9, "_Bool verifyCounterDictionary(NSDictionary *__strong)", v7, (const char *)[v10 UTF8String]);
  id v11 = v10;
  GTMTLReplay_handleError(101, (uint64_t)[v11 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_frameProfiler.m", (uint64_t)"verifyCounterDictionary", v7, 1);

  uint64_t v5 = 0;
LABEL_10:

  return v5;
}

id MergeDictionaries(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  id v11 = __MergeDictionaries_block_invoke;
  id v12 = &unk_746810;
  id v13 = v3;
  id v14 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:v3];
  id v5 = v14;
  id v6 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:&v9];

  id v7 = [v5 copy:v9, v10, v11, v12];

  return v7;
}

void __MergeDictionaries_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v9];
  if (v6)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v7 = MergeDictionaries(v6, v5);
LABEL_6:
      id v8 = (void *)v7;
      [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v9];

      goto LABEL_8;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v7 = [v6 arrayByAddingObjectsFromArray:v5];
      goto LABEL_6;
    }
  }
  [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v9];
LABEL_8:
}

void __debugDumpCounterDictionary_block_invoke(id a1, NSString *a2, NSDictionary *a3, BOOL *a4)
{
  if (g_runningInCI)
  {
    id v5 = a2;
    id v6 = [(NSDictionary *)a3 objectForKeyedSubscript:@"counters"];
    uint64_t v7 = [v6 componentsJoinedByString:@","];
    id v8 = +[NSString stringWithFormat:@"Counter %@:%@", v5, v7];

    id v9 = [v8 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    uint64_t v10 = __stdoutp;
    id v11 = v9;
    fprintf(v10, "#CI-INFO# %s\n", (const char *)[v11 UTF8String]);
  }
}

id DYMTLReplayFrameProfiler_loadAnalysis(void *a1)
{
  id v127 = DEVICEOBJECT(a1);
  io_registry_entry_t v1 = [v127 acceleratorPort];
  CFProperty = (void *)IORegistryEntryCreateCFProperty(v1, @"GPUConfigurationVariable", 0, 0);
  if (g_runningInCI)
  {
    id v3 = CFProperty;
    id v4 = +[NSString stringWithFormat:@"Configuration Variables=%@", CFProperty];
    id v5 = [v4 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    id v6 = __stdoutp;
    id v7 = v5;
    fprintf(v6, "#CI-INFO# %s\n", (const char *)[v7 UTF8String]);

    CFProperty = v3;
  }
  CFTypeRef v8 = IORegistryEntryCreateCFProperty(v1, @"MetalStatisticsName", 0, 0);
  id v126 = CFProperty;
  if (v8)
  {
    id v9 = (void *)v8;
    CFTypeID v10 = CFGetTypeID(v8);
    if (v10 == CFStringGetTypeID())
    {
      id v11 = v9;
      id v12 = v11;
LABEL_13:
      CFRelease(v11);
      goto LABEL_33;
    }
    if (v10 == CFArrayGetTypeID())
    {
      id v21 = v9;
      id v22 = +[NSPredicate predicateWithFormat:@"NOT (self BEGINSWITH 'autocorr')"];
      id v23 = [v21 filteredArrayUsingPredicate:v22];

      id v12 = [v23 firstObject];

      if (v12)
      {
        id v11 = v21;
        goto LABEL_13;
      }
    }
    long long v24 = +[NSString stringWithFormat:@"Failed to determine statisticsName"];
    id v25 = __stdoutp;
    if (g_runningInCI) {
      uint64_t v26 = "#CI_ERROR# ";
    }
    else {
      uint64_t v26 = "";
    }
    id v27 = v24;
    fprintf(v25, "%s%s %u: %s\n", v26, "NSDictionary *DYMTLReplayFrameProfiler_loadAnalysis(__strong id<MTLDevice>)", 1013, (const char *)[v27 UTF8String]);
    id v28 = v27;
    GTMTLReplay_handleError(101, (uint64_t)[v28 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_frameProfiler.m", (uint64_t)"DYMTLReplayFrameProfiler_loadAnalysis", 1013, 1);

    CFRelease(v9);
LABEL_18:
    id v29 = &__NSDictionary0__struct;
    goto LABEL_107;
  }
  if (CFProperty)
  {
    id v13 = [CFProperty objectForKeyedSubscript:@"gpu_gen"];
    id v14 = [v13 unsignedIntValue];

    id v15 = [v126 objectForKeyedSubscript:@"num_cores"];
    unsigned int v16 = [v15 unsignedIntValue];

    uint64_t v17 = [v126 objectForKeyedSubscript:@"num_mgpus"];
    unsigned int v18 = [v17 unsignedIntValue];

    size_t v19 = [v126 objectForKeyedSubscript:@"usc_gen"];
    id v20 = v19;
    if (v19 && [v19 unsignedIntValue] > 2)
    {

      goto LABEL_18;
    }
    if (v14 < 0xE)
    {
      id v12 = 0;
    }
    else
    {
      id v30 = +[NSMutableString stringWithFormat:@"AGXMetalStatisticsG%u", v14];
      id v31 = v30;
      CFStringRef v32 = @"D";
      CFStringRef v33 = @"P";
      if (v16 > 6) {
        CFStringRef v33 = @"G";
      }
      if (v18 == 4) {
        CFStringRef v33 = @"C";
      }
      if (v18 != 8) {
        CFStringRef v32 = v33;
      }
      if (v18 == 2) {
        CFStringRef v34 = @"S";
      }
      else {
        CFStringRef v34 = v32;
      }
      [v30 appendString:v34];
      id v12 = [v31 copy];
    }
  }
  else
  {
    id v12 = 0;
  }
LABEL_33:
  uint64_t v125 = v12;
  if (g_runningInCI)
  {
    id v35 = +[NSString stringWithFormat:@"statisticsName=%@", v12];
    id v36 = [v35 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    id v37 = __stdoutp;
    id v38 = v36;
    fprintf(v37, "#CI-INFO# %s\n", (const char *)[v38 UTF8String]);
  }
  id v128 = (void *)IORegistryEntryCreateCFProperty(v1, @"MetalPluginName", 0, 0);
  unsigned int v39 = [v128 containsString:@"AGXMetal"];
  id v40 = +[NSMutableArray arrayWithCapacity:2];
  [v40 addObject:v12];
  if (v39)
  {
    id v41 = [v12 rangeOfString:@"AGXMetalStatistics"];
    if ([v12 rangeOfString:@"AGXMetalStatisticsExternal"] == (id)0x7FFFFFFFFFFFFFFFLL
      && v41 < [v12 length])
    {
      id v42 = [v12 substringFromIndex:[@"AGXMetalStatistics" length]];
      int v43 = [@"AGXMetalStatisticsExternal" stringByAppendingString:v42];

      [v40 addObject:v43];
    }
  }
  CFTypeRef v44 = IORegistryEntryCreateCFProperty(v1, @"MetalStatisticsScriptName", 0, 0);
  uint64_t v45 = (void *)IORegistryEntryCreateCFProperty(v1, @"AGXInternalPerfCounterResourcesPath", 0, 0);
  if (v45)
  {
    unint64_t v46 = v45;
    CFStringRef v47 = [v45 stringByAppendingString:@"/%@/%@"];
  }
  else
  {
    CFStringRef v47 = @"/AppleInternal/Library/AGX/Performance/%@/%@";
  }
  id v117 = (__CFString *)v47;
  v149[0] = v47;
  v149[1] = @"/System/Library/Extensions/%@.bundle/%@";
  v149[2] = @"/System/Library/Extensions/%@.bundle/Contents/Resources/%@";
  id v121 = +[NSArray arrayWithObjects:v149 count:3];
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  obunint64_t j = v40;
  id v119 = [obj countByEnumeratingWithState:&v133 objects:v148 count:16];
  if (v119)
  {
    uint64_t v48 = *(void *)v134;
    uint64_t v115 = *(void *)v134;
    do
    {
      uint64_t v49 = 0;
      do
      {
        if (*(void *)v134 != v48)
        {
          uint64_t v50 = v49;
          objc_enumerationMutation(obj);
          uint64_t v49 = v50;
        }
        uint64_t v116 = v49;
        uint64_t v51 = *(void *)(*((void *)&v133 + 1) + 8 * v49);
        long long v129 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        id v52 = v121;
        id v53 = [v52 countByEnumeratingWithState:&v129 objects:v147 count:16];
        if (v53)
        {
          uint64_t v54 = *(void *)v130;
          while (2)
          {
            for (unint64_t i = 0; i != v53; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v130 != v54) {
                objc_enumerationMutation(v52);
              }
              uint64_t v56 = *(void *)(*((void *)&v129 + 1) + 8 * i);
              id v57 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v56, v128, v51);
              id v58 = v57;
              if (v44)
              {
                +[NSString stringWithFormat:](NSString, "stringWithFormat:", v56, v128, v44);
                id v59 = (id)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                id v59 = v57;
              }
              id v60 = v59;
              if (g_runningInCI)
              {
                unint64_t v61 = +[NSString stringWithFormat:@"Checking with plistPrefix=%@, scriptPrefix=%@", v58, v59];
                double v62 = [v61 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

                id v63 = __stdoutp;
                id v64 = v62;
                fprintf(v63, "#CI-INFO# %s\n", (const char *)[v64 UTF8String]);
              }
              id v65 = GTMTLReplayClient_loadDerivedCounterInfo(v58, v60);

              if (v65)
              {

                goto LABEL_65;
              }
            }
            id v53 = [v52 countByEnumeratingWithState:&v129 objects:v147 count:16];
            if (v53) {
              continue;
            }
            break;
          }
        }

        uint64_t v48 = v115;
        uint64_t v49 = v116 + 1;
      }
      while ((id)(v116 + 1) != v119);
      id v119 = [obj countByEnumeratingWithState:&v133 objects:v148 count:16];
      id v65 = 0;
      uint64_t v48 = v115;
    }
    while (v119);
  }
  else
  {
    id v65 = 0;
  }
LABEL_65:

  if (v44) {
    CFRelease(v44);
  }

  if (v65)
  {
    id v66 = [v65 objectForKeyedSubscript:@"DerivedCounterScript"];
    BOOL v67 = [v66 length] == 0;

    if (v67)
    {
      unint64_t v110 = +[NSString stringWithFormat:@"Derived counter script missing"];
      unsigned int v111 = __stdoutp;
      if (g_runningInCI) {
        unint64_t v112 = "#CI_ERROR# ";
      }
      else {
        unint64_t v112 = "";
      }
      id v113 = v110;
      fprintf(v111, "%s%s %u: %s\n", v112, "NSDictionary *DYMTLReplayFrameProfiler_loadAnalysis(__strong id<MTLDevice>)", 1141, (const char *)[v113 UTF8String]);
      id v80 = v113;
      GTMTLReplay_handleError(101, (uint64_t)[v80 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_frameProfiler.m", (uint64_t)"DYMTLReplayFrameProfiler_loadAnalysis", 1141, 1);
    }
    else
    {
      id v68 = [v65 objectForKeyedSubscript:@"DerivedCounterDictionary"];
      uint64_t v69 = v68;
      if (g_runningInCI)
      {
        uint64_t v70 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%d counters found", [v68 count]);
        unint64_t v71 = [v70 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

        unint64_t v72 = __stdoutp;
        id v73 = v71;
        fprintf(v72, "#CI-INFO# %s\n", (const char *)[v73 UTF8String]);

        if (![v69 count])
        {
          int v74 = +[NSString stringWithFormat:@"No derivedCounterInfoResult counters present!"];
          unint64_t v75 = __stdoutp;
          if (g_runningInCI) {
            id v76 = "#CI_ERROR# ";
          }
          else {
            id v76 = "";
          }
          id v77 = v74;
          fprintf(v75, "%s%s %u: %s\n", v76, "void debugDumpCounterDictionary(NSDictionary *__strong)", 962, (const char *)[v77 UTF8String]);
          id v78 = v77;
          GTMTLReplay_handleError(101, (uint64_t)[v78 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_frameProfiler.m", (uint64_t)"debugDumpCounterDictionary", 962, 1);
        }
        if (g_runningValidationCI)
        {
          id v79 = [v69 objectForKeyedSubscript:@"DerivedCounters"];
          [v79 enumerateKeysAndObjectsUsingBlock:&__block_literal_global_175];
        }
      }

      id v80 = [v65 objectForKeyedSubscript:@"DerivedCounterDictionary"];
      if (verifyCounterDictionary(v80))
      {
        v145[0] = @"DerivedCounterDictionary";
        v143[0] = @"Version";
        unint64_t v81 = [v80 objectForKeyedSubscript:];
        v143[1] = @"DerivedCounters";
        v144[0] = v81;
        CFStringRef v141 = @"GPUToolsGPUTime";
        unint64_t v142 = &off_7594B8;
        unint64_t v82 = +[NSDictionary dictionaryWithObjects:&v142 forKeys:&v141 count:1];
        v144[1] = v82;
        unsigned int v83 = +[NSDictionary dictionaryWithObjects:v144 forKeys:v143 count:2];
        v145[1] = @"DerivedCounterScript";
        v146[0] = v83;
        v146[1] = @"\nfunction GPUToolsGPUTime()\n{\n   return MTLStat_nSec\n}\n";
        uint64_t v118 = +[NSDictionary dictionaryWithObjects:v146 forKeys:v145 count:2];

        id v120 = GTMTLReplayClient_mergeDerivedCounterInfo(v65, v118);

        uint64_t v84 = [v120 objectForKeyedSubscript:@"DerivedCounterDictionary"];
        id v122 = v80;
        id obja = v84;
        if (g_runningInCI)
        {
          char v85 = +[NSString stringWithFormat:@"Validating merged derived counters"];
          unsigned int v86 = [v85 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

          unsigned int v87 = __stdoutp;
          id v88 = v86;
          fprintf(v87, "#CI-INFO# %s\n", (const char *)[v88 UTF8String]);
        }
        unint64_t v89 = [obja objectForKeyedSubscript:@"DerivedCounters"];
        long long v139 = 0u;
        long long v140 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        int v90 = [v122 objectForKeyedSubscript:@"DerivedCounters"];
        id v91 = [v90 countByEnumeratingWithState:&v137 objects:v150 count:16];
        if (v91)
        {
          uint64_t v92 = *(void *)v138;
          do
          {
            for (unint64_t j = 0; j != v91; unint64_t j = (char *)j + 1)
            {
              if (*(void *)v138 != v92) {
                objc_enumerationMutation(v90);
              }
              uint64_t v94 = *(void *)(*((void *)&v137 + 1) + 8 * (void)j);
              id v95 = [v89 objectForKeyedSubscript:v94];
              BOOL v96 = v95 == 0;

              if (v96)
              {
                id v97 = +[NSString stringWithFormat:@"Counter %@ is missing from merged counter list", v94];
                id v98 = __stdoutp;
                if (g_runningInCI) {
                  id v99 = "#CI_ERROR# ";
                }
                else {
                  id v99 = "";
                }
                id v100 = v97;
                fprintf(v98, "%s%s %u: %s\n", v99, "void validateMergeDerivedCounterInfo(NSDictionary *__strong, NSDictionary *__strong)", 950, (const char *)[v100 UTF8String]);
                id v101 = v100;
                GTMTLReplay_handleError(101, (uint64_t)[v101 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_frameProfiler.m", (uint64_t)"validateMergeDerivedCounterInfo", 950, 1);
              }
            }
            id v91 = [v90 countByEnumeratingWithState:&v137 objects:v150 count:16];
          }
          while (v91);
        }

        id v80 = [v120 mutableCopy];
        [v80 setObject:v128 forKeyedSubscript:@"MetalPluginName"];
        if (v126)
        {
          if (g_runningInCI)
          {
            id v102 = +[NSString stringWithFormat:@"Configuration Variables: %@", v126];
            id v103 = [v102 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

            id v104 = __stdoutp;
            id v105 = v103;
            fprintf(v104, "#CI-INFO# %s\n", (const char *)[v105 UTF8String]);
          }
          [v80 setObject:v126 forKeyedSubscript:@"DerivedCounterConfigurationVariables"];
        }
        id v29 = [v80 copy];
        id v65 = v120;
        goto LABEL_106;
      }
    }
  }
  else
  {
    id v106 = +[NSString stringWithFormat:@"Failed to load any derived counters"];
    id v107 = __stdoutp;
    if (g_runningInCI) {
      id v108 = "#CI_ERROR# ";
    }
    else {
      id v108 = "";
    }
    id v109 = v106;
    fprintf(v107, "%s%s %u: %s\n", v108, "NSDictionary *DYMTLReplayFrameProfiler_loadAnalysis(__strong id<MTLDevice>)", 1135, (const char *)[v109 UTF8String]);
    id v80 = v109;
    GTMTLReplay_handleError(101, (uint64_t)[v80 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_frameProfiler.m", (uint64_t)"DYMTLReplayFrameProfiler_loadAnalysis", 1135, 1);
    id v65 = 0;
  }
  id v29 = &__NSDictionary0__struct;
LABEL_106:

LABEL_107:

  return v29;
}

id AddShaderBinary(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc((Class)NSString);
  uLong v6 = crc32(0, 0, 0);
  id v7 = v4;
  id v8 = [v5 initWithFormat:@"%0.8x" crc32:crc32(v6, (const Bytef *)[v7 bytes], (uInt)[v7 length])];
  if (v7)
  {
    CFStringRef v11 = @"binary";
    id v12 = v7;
    id v9 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    [v3 setObject:v9 forKeyedSubscript:v8];
  }
  else
  {
    [v3 setObject:&__NSDictionary0__struct forKeyedSubscript:v8];
  }

  return v8;
}

id GTMTLReplayClient_collectPipelinePerformanceStatistics(uint64_t a1)
{
  p = **(apr_pool_t ***)(a1 + 152);
  uint64_t v2 = *(void *)a1;
  id v52 = objc_opt_new();
  uint64_t v51 = objc_opt_new();
  uint64_t v3 = objc_opt_new();
  id v4 = (void *)v3;
  id v5 = (unsigned int *)(a1 + 22480);
  if (*(_DWORD *)(a1 + 22480) < *(_DWORD *)(*(void *)(v2 + 120) + 12))
  {
    uint64_t v6 = 0;
    id v7 = (uint64_t *)(a1 + 19912);
    id v53 = (void *)v3;
    do
    {
      id v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v2 + 120) + 24) + ((unint64_t)*v5 << 6);
      CFTypeID v10 = (int *)(v9 + 8);
      if (GetFuncEnumConstructorType(*(_DWORD *)(v9 + 8)) == 25) {
        GTMTLReplayController_restoreCommandBuffer(a1, v9);
      }
      GTMTLReplayController_updateCommandEncoder(a1, v9);
      GTMTLReplayController_defaultDispatchFunction(a1, v9);
      unint64_t v11 = *v5;
      unint64_t v12 = *(void *)(v2 + 96);
      BOOL v13 = v12 <= v11 && *(void *)(v2 + 104) + v12 > v11;
      if (v13
        && ((int v14 = *v10, (IsFuncEnumDrawCall(*v10) & 1) != 0)
         || ((v14 + 16079) >= 2 ? (BOOL v15 = v14 == -16220) : (BOOL v15 = 1),
             !v15 ? (BOOL v16 = v14 == -16327) : (BOOL v16 = 1),
             v16)))
      {
        int v17 = *(_DWORD *)(a1 + 11312);
        if (v17 == 28)
        {
          uint64_t v25 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 11376)];
          unsigned int v54 = v6 + 1;
          uint64_t v26 = +[NSNumber numberWithUnsignedInt:v6];
          v60[0] = v26;
          v60[1] = v25;
          id v27 = +[NSArray arrayWithObjects:v60 count:2];
          [v52 addObject:v27];

          id v4 = v53;
          unint64_t v55 = (void *)v25;
          if ([v53 containsObject:v25])
          {
            id v7 = v8;
          }
          else
          {
            [v53 addObject:v25];
            uint64_t v28 = GTMTLSMContext_getObject(**(void **)(v2 + 40), *(void *)(a1 + 11376), *(void *)v9)[8];
            id v22 = (uint64_t *)(v28 + 56);
            id v23 = (uint64_t *)(v28 + 64);
            long long v24 = (uint64_t *)(a1 + 11376);
            id v7 = v8;
LABEL_26:
            uint64_t v29 = *v24;
            uint64_t v30 = *v22;
            uint64_t v31 = *v23;
            id v32 = v51;
            if (v30)
            {
              uint64_t v48 = v29;
              id v50 = v32;
              id v33 = [objc_alloc((Class)NSData) initWithBytesNoCopy:v30 length:v31 freeWhenDone:0];
              uint64_t v34 = objc_opt_class();
              uint64_t v35 = objc_opt_class();
              uint64_t v36 = objc_opt_class();
              uint64_t v37 = objc_opt_class();
              uint64_t v47 = v36;
              id v38 = v33;
              unsigned int v39 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v34, v35, v47, v37, objc_opt_class(), 0);
              id v57 = 0;
              id v40 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v39 fromData:v33 error:&v57];
              id v41 = v57;

              if (v40)
              {
                id v42 = +[NSNumber numberWithUnsignedLongLong:v48];
                v62[0] = v42;
                v62[1] = v40;
                int v43 = +[NSArray arrayWithObjects:v62 count:2];
                [v50 addObject:v43];
              }
              id v7 = v8;
              id v32 = v50;
            }

            apr_pool_clear(p);
            id v4 = v53;
          }
LABEL_31:

          uint64_t v6 = v54;
          goto LABEL_32;
        }
        id v7 = v8;
        if (v17 == 70)
        {
          uint64_t v18 = +[NSNumber numberWithUnsignedLongLong:*v8];
          unsigned int v54 = v6 + 1;
          size_t v19 = +[NSNumber numberWithUnsignedInt:v6];
          v61[0] = v19;
          v61[1] = v18;
          id v20 = +[NSArray arrayWithObjects:v61 count:2];
          [v52 addObject:v20];

          id v4 = v53;
          unint64_t v55 = (void *)v18;
          if (([v53 containsObject:v18] & 1) == 0)
          {
            [v53 addObject:v18];
            uint64_t v21 = GTMTLSMContext_getObject(**(void **)(v2 + 40), *v8, *(void *)v9)[7];
            id v22 = (uint64_t *)(v21 + 112);
            id v23 = (uint64_t *)(v21 + 120);
            long long v24 = v8;
            goto LABEL_26;
          }
          goto LABEL_31;
        }
      }
      else
      {
        id v7 = v8;
      }
LABEL_32:
      unsigned int v44 = *v5 + 1;
      *id v5 = v44;
    }
    while (v44 < *(_DWORD *)(*(void *)(v2 + 120) + 12));
  }
  v58[0] = @"Draw ID -> PipelineState ID";
  v58[1] = @"PipelineState ID";
  v59[0] = v52;
  v59[1] = v51;
  uint64_t v45 = +[NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:2];

  return v45;
}

void validateSubdividedCounterLists(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (g_runningValidationCI)
  {
    id v5 = &send_ptr;
    if (g_runningInCI)
    {
      uint64_t v6 = +[NSString stringWithFormat:@"Required counters: %@, divided list: %@", v3, v4];
      id v7 = [v6 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

      id v8 = __stdoutp;
      id v9 = v7;
      fprintf(v8, "#CI-INFO# %s\n", (const char *)[v9 UTF8String]);
    }
    id v10 = objc_alloc_init((Class)NSMutableSet);
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v29 = v4;
    id v11 = v4;
    id v12 = [v11 countByEnumeratingWithState:&v35 objects:v40 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v36;
      do
      {
        for (unint64_t i = 0; i != v13; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v36 != v14) {
            objc_enumerationMutation(v11);
          }
          [v10 addObjectsFromArray:*(void *)(*((void *)&v35 + 1) + 8 * i)];
        }
        id v13 = [v11 countByEnumeratingWithState:&v35 objects:v40 count:16];
      }
      while (v13);
    }

    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v30 = v3;
    id v16 = v3;
    id v17 = [v16 countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v32;
      do
      {
        for (unint64_t j = 0; j != v18; unint64_t j = (char *)j + 1)
        {
          if (*(void *)v32 != v19) {
            objc_enumerationMutation(v16);
          }
          uint64_t v21 = *(void *)(*((void *)&v31 + 1) + 8 * (void)j);
          if (([v10 containsObject:v21] & 1) == 0)
          {
            id v22 = [v5[219] stringWithFormat:@"Counter %@ missing from subdivided counter list", v21];
            id v23 = __stdoutp;
            long long v24 = v5;
            if (g_runningInCI) {
              uint64_t v25 = "#CI_ERROR# ";
            }
            else {
              uint64_t v25 = "";
            }
            id v26 = v22;
            uint64_t v28 = v25;
            id v5 = v24;
            fprintf(v23, "%s%s %u: %s\n", v28, "void validateSubdividedCounterLists(NSArray *__strong, NSArray *__strong)", 1531, (const char *)[v26 UTF8String]);
            id v27 = v26;
            GTMTLReplay_handleError(101, (uint64_t)[v27 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_frameProfiler.m", (uint64_t)"validateSubdividedCounterLists", 1531, 1);
          }
        }
        id v18 = [v16 countByEnumeratingWithState:&v31 objects:v39 count:16];
      }
      while (v18);
    }

    id v4 = v29;
    id v3 = v30;
  }
}

id GTMTLReplayClient_queryShaderInfo(uint64_t a1, id *a2, void *a3)
{
  id v40 = a3;
  id v5 = objc_alloc_init((Class)NSOperation);
  v81[0] = @"MTLStatCommandBufferIndex";
  v81[1] = @"MTLStatEncoderIndex";
  void v81[2] = @"MTLStatCommandIndex";
  v81[3] = @"MTLStat_nSec";
  v81[4] = @"MTLStatVertexCost";
  v81[5] = @"MTLStatFragmentCost";
  uint64_t v6 = +[NSArray arrayWithObjects:v81 count:6];
  id v7 = [v40 objectForKeyedSubscript:@"GPUState"];
  if (v7)
  {
    id v9 = [GTPMController alloc];
    id v10 = [*(id *)(a1 + 8) defaultDevice];
    id v11 = [v10 name];
    id v12 = [(GTPMController *)v9 initWithGPUFamily:v11];
  }
  else
  {
    id v12 = 0;
  }
  uint64_t v73 = 0;
  int v74 = (double *)&v73;
  uint64_t v75 = 0x2020000000;
  unint64_t v76 = 0xBFF0000000000000;
  uint64_t v67 = 0;
  id v68 = &v67;
  uint64_t v69 = 0x3032000000;
  uint64_t v70 = __Block_byref_object_copy__7666;
  unint64_t v71 = __Block_byref_object_dispose__7667;
  id v72 = 0;
  id v13 = objc_alloc_init((Class)NSOperation);
  id v14 = *a2;
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  void v59[2] = __GTMTLReplayClient_queryShaderInfo_block_invoke;
  v59[3] = &unk_7467C0;
  id v15 = v7;
  id v60 = v15;
  id v16 = v12;
  unint64_t v61 = v16;
  uint64_t v65 = a1;
  id v39 = v6;
  id v62 = v39;
  id v64 = &v67;
  id v17 = v13;
  id v63 = v17;
  id v66 = a2;
  [v14 addOperationWithBlock:v59];
  [v5 addDependency:v17];

  uint64_t v53 = 0;
  unsigned int v54 = &v53;
  uint64_t v55 = 0x3032000000;
  uint64_t v56 = __Block_byref_object_copy__7666;
  id v57 = __Block_byref_object_dispose__7667;
  id v58 = 0;
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = __GTMTLReplayClient_queryShaderInfo_block_invoke_2;
  v52[3] = &unk_747578;
  v52[4] = &v53;
  v52[5] = a1;
  id v18 = +[NSBlockOperation blockOperationWithBlock:v52];
  [v18 setQueuePriority:-8];
  [*a2 addOperation:v18];
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = __GTMTLReplayClient_queryShaderInfo_block_invoke_3;
  v48[3] = &unk_7467E8;
  id v38 = v15;
  id v49 = v38;
  uint64_t v51 = &v73;
  uint64_t v19 = v16;
  id v50 = v19;
  id v20 = +[NSBlockOperation blockOperationWithBlock:v48];
  [v20 addDependency:v18];
  [a2[1] addOperation:v20];
  [v5 addDependency:v20];

  uint64_t v42 = 0;
  int v43 = &v42;
  uint64_t v44 = 0x3032000000;
  uint64_t v45 = __Block_byref_object_copy__7666;
  unint64_t v46 = __Block_byref_object_dispose__7667;
  id v47 = 0;
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  id v41[2] = __GTMTLReplayClient_queryShaderInfo_block_invoke_4;
  v41[3] = &unk_747578;
  v41[4] = &v42;
  v41[5] = a1;
  uint64_t v21 = +[NSBlockOperation blockOperationWithBlock:v41];
  [a2[1] addOperation:v21];
  [v5 addDependency:v21];

  [a2[1] addOperation:v5];
  [v5 waitUntilFinished];
  if (v19) {
    [(GTPMController *)v19 tearDown];
  }
  id v22 = [(id)v54[5] objectForKeyedSubscript:@"frametime"];
  id v23 = [(id)v43[5] objectForKeyedSubscript:@"MetalPluginName"];
  long long v24 = objc_opt_new();
  uint64_t v25 = v24;
  if (v7)
  {
    id v26 = +[GTPMController stateFromWeightedAverage:v74[3]];
    if (v74[3] <= -2.22044605e-16) {
      id v27 = &__kCFBooleanFalse;
    }
    else {
      id v27 = &__kCFBooleanTrue;
    }
    [v25 setObject:v27 forKeyedSubscript:@"enabled"];
    if ([v26 isEqualToString:@"mixed"]) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = [v26 isEqualToString:@"none"] ^ 1;
    }
    id v29 = +[NSNumber numberWithInt:v28];
    [v25 setObject:v29 forKeyedSubscript:@"consistent"];

    [v25 setObject:v38 forKeyedSubscript:@"level"];
  }
  else
  {
    [v24 setObject:&__kCFBooleanFalse forKeyedSubscript:@"enabled"];
  }
  id v30 = objc_alloc((Class)NSMutableDictionary);
  v77[0] = @"frame counters";
  v77[1] = @"frame profile data";
  uint64_t v31 = v68[5];
  v78[0] = v39;
  v78[1] = v31;
  v79[0] = @"frameProfile";
  long long v32 = +[NSDictionary dictionaryWithObjects:v78 forKeys:v77 count:2];
  v80[0] = v32;
  v80[1] = v22;
  v79[1] = @"frametime";
  v79[2] = @"Frame Consistent Perf Info";
  uint64_t v33 = v43[5];
  void v80[2] = v25;
  v80[3] = v33;
  void v79[3] = @"derivedCounterData";
  v79[4] = @"BatchingFilteringAvailable";
  v80[4] = &__kCFBooleanFalse;
  long long v34 = +[NSDictionary dictionaryWithObjects:v80 forKeys:v79 count:5];
  id v35 = [v30 initWithDictionary:v34];

  long long v36 = [(id)v54[5] objectForKeyedSubscript:@"frameGPUTime"];
  if (v36) {
    [v35 setObject:v36 forKeyedSubscript:@"frameGPUTime"];
  }
  if (v23) {
    [v35 setObject:v23 forKeyedSubscript:@"MetalPluginName"];
  }
  [v35 addEntriesFromDictionary:&__NSDictionary0__struct];
  [v35 addEntriesFromDictionary:&__NSDictionary0__struct];

  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v53, 8);

  _Block_object_dispose(&v67, 8);
  _Block_object_dispose(&v73, 8);

  return v35;
}

void sub_2E83AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t __Block_byref_object_copy__7666(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7667(uint64_t a1)
{
}

void sub_2E8F2C(_Unwind_Exception *a1)
{
}

void __performFrameTimingDesktop_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 GPUStartTime];
  **(void **)(a1 + 32) = v4;
  [v3 GPUEndTime];
  uint64_t v6 = v5;

  *(void *)(*(void *)(a1 + 32) + 8) = v6;
}

uint64_t CommandBufferTimeInfo_compare(double *a1, double *a2)
{
  if (*a1 == *a2)
  {
    double v3 = a1[1];
    double v4 = a2[1];
    if (v3 < v4) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v3 != v4;
    }
  }
  else if (*a1 >= *a2)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

int64_t __performFrameTimingDesktop_block_invoke_440(id a1, NSNumber *a2, NSNumber *a3)
{
  return [(NSNumber *)a2 compare:a3];
}

id CollectFrameCounters(uint64_t a1, id *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  uint64_t v44 = a1;
  id v13 = [*(id *)(a1 + 8) defaultCommandQueue];
  id v14 = (char *)[v11 count];
  id v15 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v14];
  if (v14)
  {
    id v16 = v14;
    do
    {
      id v17 = +[NSMutableData dataWithCapacity:0x10000];
      [v15 addObject:v17];

      --v16;
    }
    while (v16);
  }
  id v18 = &send_ptr;
  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472;
  v66[2] = __CollectFrameCounters_block_invoke;
  v66[3] = &unk_746838;
  id v38 = v12;
  id v67 = v38;
  id v40 = v10;
  id v68 = v40;
  id v19 = v11;
  id v69 = v19;
  id v20 = v15;
  id v70 = v20;
  uint64_t v21 = +[NSBlockOperation blockOperationWithBlock:v66];
  id v22 = (void *)v21;
  if (v14)
  {
    id v23 = 0;
    id v41 = v48;
    uint64_t v42 = v60;
    unint64_t v46 = v14;
    int v43 = (void *)v21;
    do
    {
      long long v24 = g_signpostLog;
      uint64_t v25 = [v20 objectAtIndexedSubscript:v23, v38, v40, v41, v42];
      os_signpost_id_t v26 = os_signpost_id_make_with_pointer(v24, v25);

      id v27 = v18[187];
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472;
      v60[0] = __CollectFrameCounters_block_invoke_428;
      v60[1] = &unk_746860;
      os_signpost_id_t v63 = v26;
      id v64 = v23;
      uint64_t v65 = v14;
      id v28 = v20;
      id v61 = v28;
      id v29 = v20;
      id v30 = v13;
      id v31 = v19;
      id v62 = v31;
      long long v32 = [v27 blockOperationWithBlock:v59];
      [v22 addDependency:v32];
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v48[0] = __CollectFrameCounters_block_invoke_429;
      v48[1] = &unk_7468B0;
      id v33 = v31;
      id v13 = v30;
      id v20 = v29;
      id v49 = v33;
      uint64_t v53 = v23;
      uint64_t v54 = a5;
      os_signpost_id_t v55 = v26;
      uint64_t v56 = v46;
      uint64_t v57 = v44;
      id v50 = v28;
      id v34 = v13;
      id v58 = a2;
      id v51 = v34;
      id v52 = v32;
      id v35 = v32;
      id v22 = v43;
      long long v36 = +[NSBlockOperation blockOperationWithBlock:v47];
      [v36 setQueuePriority:-8];
      [*a2 addOperation:v36];

      id v18 = &send_ptr;
      id v14 = v46;

      ++v23;
    }
    while (v46 != v23);
  }
  [a2[1] addOperation:v22, v38];

  return v22;
}

void __ProfileFrame_block_invoke(uint64_t a1)
{
  os_signpost_id_t v2 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, *(const void **)(a1 + 32));
  double v3 = g_signpostLog;
  double v4 = v3;
  unint64_t v44 = v2 - 1;
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v3))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "Replayer-4-parallel", "ProcessFrameData", buf, 2u);
  }
  os_signpost_id_t spid = v2;

  uint64_t v5 = *(void **)(a1 + 40);
  int v43 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 48);
  id v7 = [*(id *)(a1 + 56) count];
  id v8 = v5;
  id v9 = v6;
  id v10 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (unint64_t)[v8 length] >> 3);
  id v11 = v8;
  id v12 = [v11 bytes];
  id v13 = v11;
  id v14 = [v13 bytes];
  uint64_t v42 = v13;
  id v15 = (char *)[v13 length] + (void)v14;
  id v41 = v9;
  id v16 = (char *)[v41 bytes];
  unint64_t v47 = (unint64_t)v15;
  if (&v12[2 * (void)v7] <= (void *)v15)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v45 = 2 * (void)v7;
    id v46 = v7;
    uint64_t v19 = 8 * (void)v7;
    uint64_t v20 = -1;
    uint64_t v51 = 8 * (void)v7;
    os_signpost_id_t v55 = v10;
    do
    {
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      for (unint64_t i = v12;
            *(void *)((char *)i + v19) == *i && *(void *)((char *)i + v19 + 8) == i[1];
            unint64_t i = (void *)((char *)i + v19))
      {
        unint64_t v21 = *(void *)((char *)i + v19 + 24) + v21 - i[3];
        ++v22;
      }
      if (v20 == *v12) {
        uint64_t v25 = v18;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v20 != *v12) {
        ++v17;
      }
      uint64_t v49 = *v12;
      uint64_t v50 = v17;
      uint64_t v48 = &v16[8 * (void)v7];
      if (v22)
      {
        uint64_t v26 = 0;
        double v27 = (double)v21;
        double v28 = (double)(unint64_t)(*(void *)&v16[8 * (void)v7 + 24] - *((void *)v16 + 3));
        uint64_t v52 = v17 - 1;
        uint64_t v53 = v25;
        uint64_t v54 = v22;
        do
        {
          id v29 = (void *)((char *)v12 + v19);
          double v30 = (double)(unint64_t)(*(void *)((char *)v12 + v19 + 24) - v12[3]) / v27 * v28;
          id v31 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v52, spid);
          *(void *)long long buf = v31;
          long long v32 = +[NSNumber numberWithUnsignedLongLong:v25];
          uint64_t v57 = v32;
          id v33 = +[NSNumber numberWithUnsignedInteger:v26];
          id v58 = v33;
          id v34 = +[NSNumber numberWithUnsignedLongLong:(unint64_t)v30];
          id v59 = v34;
          id v35 = +[NSNumber numberWithUnsignedLongLong:v29[4]];
          id v60 = v35;
          long long v36 = +[NSNumber numberWithUnsignedLongLong:v29[5]];
          id v61 = v36;
          long long v37 = +[NSArray arrayWithObjects:buf count:6];
          [v55 addObjectsFromArray:v37];

          uint64_t v25 = v53;
          uint64_t v19 = v51;
          ++v26;
          id v12 = v29;
        }
        while (v54 != v26);
      }
      else
      {
        id v29 = v12;
      }
      id v7 = v46;
      id v16 = &v48[8 * (void)v46];
      uint64_t v18 = v25 + 1;
      id v12 = &v29[(void)v46];
      uint64_t v20 = v49;
      uint64_t v17 = v50;
      id v10 = v55;
    }
    while ((unint64_t)&v12[v45] <= v47);
  }

  [v43 setArray:v10];
  id v38 = g_signpostLog;
  id v39 = v38;
  if (v44 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v38))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v39, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-4-parallel", (const char *)&unk_4CA5E5, buf, 2u);
  }
}

void __CollectFrameCounters_block_invoke(uint64_t a1)
{
  os_signpost_id_t v2 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, *(const void **)(a1 + 32));
  double v3 = g_signpostLog;
  double v4 = v3;
  unint64_t v5 = v2 - 1;
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v3))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "Replayer-4-parallel", "MergeCounterData", buf, 2u);
  }

  id v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  id v8 = *(void **)(a1 + 56);
  id v10 = v6;
  id v11 = v9;
  id v45 = v8;
  unint64_t v44 = (char *)[v11 count];
  if (v44 == (unsigned char *)&def_1C1270 + 1
    && ([v11 objectAtIndexedSubscript:0],
        id v12 = objc_claimAutoreleasedReturnValue(),
        unsigned int v13 = [v12 isEqualToArray:v10],
        v12,
        v13))
  {
    id v14 = [v11 objectAtIndexedSubscript:0];
    [v10 objectAtIndexedSubscript:0];

    id v15 = [v45 objectAtIndexedSubscript:0];
  }
  else
  {
    id v16 = [v45 objectAtIndexedSubscript:0];
    uint64_t v17 = [v11 objectAtIndexedSubscript:0];
    unint64_t v18 = (unint64_t)[v16 length];
    unint64_t v41 = 8 * (void)[v17 count];
    unint64_t v42 = v18;
    unint64_t v19 = v18 / v41;

    id v20 = [v10 count];
    uint64_t v21 = +[NSMutableData dataWithLength:8 * v19 * (void)v20];
    id v15 = (void *)v21;
    if (v44)
    {
      id v40 = (id)v21;
      int v43 = v11;
      long long v36 = v7;
      unint64_t v37 = v2 - 1;
      os_signpost_id_t v38 = v2;
      uint64_t v22 = 0;
      if (v19 <= 1) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = v19;
      }
      do
      {
        long long v24 = [v43 objectAtIndexedSubscript:v22, v36, v37, v38];
        id v25 = [v24 count];
        if (v25)
        {
          for (unint64_t i = 0; i != v25; unint64_t i = (char *)i + 1)
          {
            double v27 = [v24 objectAtIndexedSubscript:i];
            *(void *)&buf[8 * (void)i] = [v10 indexOfObject:v27];
          }
        }
        id v28 = [v45 objectAtIndexedSubscript:v22];
        id v29 = (char *)[v28 bytes];
        id v39 = v40;
        double v30 = (char *)[v39 mutableBytes];
        if (v41 <= v42)
        {
          for (uint64_t j = 0; j != v23; ++j)
          {
            if (v25)
            {
              for (unint64_t k = 0; k != v25; unint64_t k = (char *)k + 1)
              {
                uint64_t v33 = *(void *)&buf[8 * (void)k];
                if (v33 != 0x7FFFFFFFFFFFFFFFLL) {
                  *(void *)&v30[8 * v33] = *(void *)&v29[8 * (void)k];
                }
              }
            }
            v30 += 8 * (void)v20;
            v29 += 8 * (void)v25;
          }
        }

        ++v22;
      }
      while (v22 != v44);
      os_signpost_id_t v2 = v38;
      id v15 = v39;
      id v7 = v36;
      unint64_t v5 = v37;
      id v11 = v43;
    }
  }

  [v7 setData:v15];
  id v34 = g_signpostLog;
  id v35 = v34;
  if (v5 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v34))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v35, OS_SIGNPOST_INTERVAL_END, v2, "Replayer-4-parallel", (const char *)&unk_4CA5E5, buf, 2u);
  }
}

void __CollectFrameCounters_block_invoke_428(uint64_t a1)
{
  os_signpost_id_t v2 = g_signpostLog;
  double v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 48);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v2))
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    int v17 = 134218240;
    uint64_t v18 = v5;
    __int16 v19 = 2048;
    uint64_t v20 = v6;
    _os_signpost_emit_with_name_impl(&def_1C1270, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Replayer-4-parallel", "SortCounterData %lu/%lu", (uint8_t *)&v17, 0x16u);
  }

  id v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:*(void *)(a1 + 56)];
  id v8 = [*(id *)(a1 + 40) objectAtIndexedSubscript:*(void *)(a1 + 56)];
  size_t v9 = 8 * (void)[v8 count];
  id v10 = v7;
  size_t v11 = (unint64_t)[v10 length] / v9;
  id v12 = v10;
  id v13 = [v12 mutableBytes];

  qsort(v13, v11, v9, (int (__cdecl *)(const void *, const void *))compareSampleData);
  id v14 = g_signpostLog;
  id v15 = v14;
  os_signpost_id_t v16 = *(void *)(a1 + 48);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v14))
  {
    LOWORD(v17) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v15, OS_SIGNPOST_INTERVAL_END, v16, "Replayer-4-parallel", (const char *)&unk_4CA5E5, (uint8_t *)&v17, 2u);
  }
}

id __CollectFrameCounters_block_invoke_429()
{
  uint64_t v0 = __chkstk_darwin();
  io_registry_entry_t v1 = (void *)g_activityLog;
  uint64_t v78 = v0;
  os_signpost_id_t v2 = [*(id *)(v0 + 32) objectAtIndexedSubscript:*(void *)(v0 + 64)];
  [v1 enterCollectCounters:v2 statLocations:*(void *)(v78 + 72) withIndex:*(void *)(v78 + 64)];

  double v3 = g_signpostLog;
  os_signpost_id_t v4 = v3;
  os_signpost_id_t v5 = *(void *)(v78 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v3))
  {
    uint64_t v6 = *(void *)(v78 + 64);
    uint64_t v7 = *(void *)(v78 + 88);
    v92[0] = 134218240;
    *(void *)&v92[1] = v6;
    LOWORD(v92[3]) = 2048;
    *(void *)((char *)&v92[3] + 2) = v7;
    _os_signpost_emit_with_name_impl(&def_1C1270, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "Replayer-1-serial", "CollectCounterData %lu/%lu", (uint8_t *)v92, 0x16u);
  }

  uint64_t v8 = *(void *)(v78 + 96);
  size_t v9 = [*(id *)(v78 + 32) objectAtIndexedSubscript:*(void *)(v78 + 64)];
  id v10 = *(void **)(v78 + 40);
  uint64_t v11 = *(void *)(v78 + 64);
  uint64_t v73 = *(void *)(v78 + 72);
  id v75 = v9;
  id v72 = v10;
  GTMTLReplayController_prePlayForProfiling(v8);
  [v75 count];
  id v71 = [(id)g_commandBufferDescriptor errorOptions];
  [(id)g_commandBufferDescriptor setErrorOptions:0];
  id v12 = [*(id *)(v8 + 8) defaultCommandQueue];
  [v12 setStatEnabled:1];
  [v12 setStatOptions:1];
  [v12 setStatOptions:0x10000000];
  [v12 setGPUPriority:0];
  [v12 setStatLocations:v73];
  id v13 = [v12 requestCounters:v75 withIndex:v11];
  id v79 = v12;
  if (v13)
  {
    id v14 = +[NSString stringWithFormat:@"CollectCounterData requestCounters on index %d failed with error %d", v11, v13];
    id v15 = __stdoutp;
    int v16 = g_runningInCI;
    id v17 = v14;
    uint64_t v18 = (const char *)[v17 UTF8String];
    __int16 v19 = "#CI_ERROR# ";
    if (!v16) {
      __int16 v19 = "";
    }
    fprintf(v15, "%s%s %u: %s\n", v19, "void CollectCounterData(GTMTLReplayController *, NSArray *__strong, uint64_t, NSArray *__strong, NSUInteger)", 294, v18);
    id v20 = v17;
    GTMTLReplay_handleError(101, (uint64_t)[v20 UTF8String], "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_frameProfiler.m", (uint64_t)"CollectCounterData", 294, 1);

    id v12 = v79;
  }
  [v72 objectAtIndexedSubscript:v11];
  v85[0] = _NSConcreteStackBlock;
  v85[1] = 3221225472;
  void v85[2] = __CollectCounterData_block_invoke;
  v85[3] = &unk_7468D8;
  id v86 = (id)objc_claimAutoreleasedReturnValue();
  id v21 = v86;
  [v12 addPerfSampleHandler:v85];

  uint64_t v22 = (_DWORD *)(v8 + 22480);
  int v74 = *(uint64_t **)v8;
  unint64_t v81 = v74[13] + v74[12];
  if (v81 > *(unsigned int *)(v8 + 22480))
  {
    uint64_t v77 = 0;
    uint64_t v80 = v74[15];
    uint64_t v70 = v8 + 11368;
    do
    {
      uint64_t v24 = *(void *)(v80 + 24);
      uint64_t v25 = *v22;
      uint64_t v26 = v24 + (v25 << 6);
      double v27 = (int *)(v26 + 8);
      if (GetFuncEnumConstructorType(*(_DWORD *)(v26 + 8)) == 25) {
        GTMTLReplayController_restoreCommandBuffer(v8, v24 + (v25 << 6));
      }
      GTMTLReplayController_updateCommandEncoder(v8, v24 + (v25 << 6));
      unsigned int v28 = *v27;
      if ((*v27 + 15756) <= 6 && ((1 << (*v27 - 116)) & 0x47) != 0 || v28 == -15637) {
        goto LABEL_20;
      }
      if (v77)
      {
        if (IsFuncEnumCreateCommandEncoder(*v27))
        {
          long long v32 = [*(id *)(v8 + 8) commandBufferForKey:v77];
          [v32 commit];
          [v79 setStatLocations:v73];
          uint64_t v33 = [*(id *)(v8 + 8) defaultCommandQueue];
          id v34 = [v33 commandBuffer];

          [*(id *)(v8 + 8) setCommandBuffer:v34 forKey:v77];
          uint64_t v77 = 0;
          unsigned int v28 = *v27;
        }
      }
      else
      {
        uint64_t v77 = 0;
      }
      if (v28 == -15673)
      {
        id v35 = GTTraceFunc_argumentBytesWithMap((void *)(v24 + (v25 << 6)), *(unsigned __int8 *)(v24 + (v25 << 6) + 13), v74[2]);
        long long v36 = [*(id *)(v8 + 8) commandBufferForKey:*(void *)v35];
        [v36 commit];
        [v79 setStatLocations:0];
        unint64_t v37 = [v79 commandBuffer];

        [*(id *)(v8 + 8) setCommandBuffer:v37 forKey:*(void *)v35];
        uint64_t v77 = *(void *)v35;
        unsigned int v28 = *v27;
      }
      if (v28 == -20457 || v28 == -20474)
      {
        uint64_t v39 = v74[2];
        if (v28 == -20474)
        {
          uint64_t v57 = GTTraceFunc_argumentBytesWithMap((void *)(v24 + (v25 << 6)), *(unsigned __int8 *)(v24 + (v25 << 6) + 13), v39);
          unint64_t v41 = [*(id *)(v8 + 8) spatialScalerForKey:*(void *)v57];
          id v58 = [*(id *)(v8 + 8) commandBufferForKey:*((void *)v57 + 1)];
          [v58 commit];

          [v79 setStatLocations:0];
          id v59 = [v79 commandBuffer];
          [v41 encodeToCommandBuffer:v59];
          [v59 commit];
          [v79 setStatLocations:v73];

          id v60 = [*(id *)(v8 + 8) defaultCommandQueue];
          id v45 = [v60 commandBuffer];

          [*(id *)(v8 + 8) setCommandBuffer:v45 forKey:*((void *)v57 + 1)];
          goto LABEL_47;
        }
        if (v28 == -20457)
        {
          id v40 = GTTraceFunc_argumentBytesWithMap((void *)(v24 + (v25 << 6)), *(unsigned __int8 *)(v24 + (v25 << 6) + 13), v39);
          unint64_t v41 = [*(id *)(v8 + 8) temporalScalerForKey:*(void *)v40];
          unint64_t v42 = [*(id *)(v8 + 8) commandBufferForKey:*((void *)v40 + 1)];
          [v42 commit];

          [v79 setStatLocations:0];
          int v43 = [v79 commandBuffer];
          [v41 encodeToCommandBuffer:v43];
          [v43 commit];
          [v79 setStatLocations:v73];

          unint64_t v44 = [*(id *)(v8 + 8) defaultCommandQueue];
          id v45 = [v44 commandBuffer];

          [*(id *)(v8 + 8) setCommandBuffer:v45 forKey:*((void *)v40 + 1)];
LABEL_47:

          goto LABEL_20;
        }
      }
      if (v28 >> 2 == 1073737833)
      {
        id v46 = *(uint64_t **)v8;
        *(_OWORD *)p = 0u;
        memset(v90, 0, sizeof(v90));
        long long range2 = 0u;
        NSRange v88 = (NSRange)0;
        GetExecuteCommandsInBufferArgs((uint64_t)&v88, v24 + (v25 << 6), v46[2]);
        v94.locatiouint64_t n = v88.length;
        v94.NSUInteger length = range2;
        v93.locatiouint64_t n = 0;
        v93.NSUInteger length = -1;
        NSRange v47 = NSIntersectionRange(v93, v94);
        NSUInteger length = v47.length;
        if (v47.length)
        {
          p[1] = **(apr_pool_t ***)(v8 + 152);
          GTMTLSMContext_indirectCommandBufferResources((uint64_t)&v90[7] + 8, (_DWORD **)v46[5], *(void *)v26, p[1]);
          uint64_t Object = GTMTLSMContext_getObject(*(void *)v46[5], v88.location, *(void *)v26);
          GTMTLCreateIndirectCommandEncoder((uint64_t)v90 + 8, Object[13]);
          memcpy(v92, (const void *)(v8 + 11312), 0x2B90uLL);
          id v76 = *(id *)(v8 + 8);
          int v50 = *(_DWORD *)(v8 + 11312);
          if (v50 == 28)
          {
            if ((GT_SUPPORT_0 & 0x10) != 0)
            {
              uint64_t v56 = [*(id *)(v8 + 8) computeCommandEncoderForKey:*(void *)(v8 + 11320)];
              uint64_t v61 = *((void *)&range2 + 1);
              uint64_t v62 = *(void *)&v90[7];
              int64_t v63 = v47.location << 32;
              do
              {
                p[0] = (apr_pool_t *)(v61 + v62 * (v63 >> 32));
                memcpy(__dst, &v92[14], 0x8D0uLL);
                if (GTMTLSMComputeCommandEncoder_loadIndirectCommand((uint64_t)&v92[14], (void *)v90 + 1, (uint64_t)p[0], (uint64_t *)&v90[7] + 1))
                {
                  GTMTLReplayController_restoreComputeCommandEncoder(v56, (uint64_t)__dst, (uint64_t)&v92[14], v76);
                  DYMTLDispatchComputeCommandEncoder(v56, (uint64_t)v90 + 8, v61 + v62 * (v63 >> 32));
                }
                v63 += 0x100000000;
                --length;
              }
              while (length);
              GTMTLReplayController_restoreComputeCommandEncoder(v56, (uint64_t)&v92[14], v70, v76);
LABEL_54:
            }
          }
          else if (v50 == 70)
          {
            uint64_t v51 = [v76 executeIndirectCommandBufferMap];
            uint64_t v52 = [*(id *)(v8 + 8) renderCommandEncoderForKey:*(void *)(v8 + 11320)];
            uint64_t v53 = *((void *)&range2 + 1);
            uint64_t v54 = *(void *)&v90[7];
            int64_t v55 = v47.location << 32;
            do
            {
              p[0] = (apr_pool_t *)(v53 + v54 * (v55 >> 32));
              memcpy(__dst, &v92[14], sizeof(__dst));
              if (GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)&v92[14], (void *)v90 + 1, (uint64_t)p[0], (uint64_t *)&v90[7] + 1))
              {
                GTMTLReplayController_restoreRenderCommandEncoder(v52, (uint64_t)__dst, (uint64_t)&v92[14], v76);
                DYMTLDrawRenderCommandEncoder(v52, (uint64_t)v90 + 8, v53 + v54 * (v55 >> 32), (uint64_t)&v90[7] + 8, v51);
              }
              v55 += 0x100000000;
              --length;
            }
            while (length);
            GTMTLReplayController_restoreRenderCommandEncoder(v52, (uint64_t)&v92[14], v70, v76);
            uint64_t v56 = v51;

            goto LABEL_54;
          }
          apr_pool_clear(p[1]);
        }
      }
      else
      {
        GTMTLReplayController_defaultDispatchFunction(v8, v24 + (v25 << 6));
      }
LABEL_20:
      unint64_t v31 = (*v22 + 1);
      _DWORD *v22 = v31;
    }
    while (v81 > v31);
  }
  *(_DWORD *)(v8 + 22484) = 0;
  [v79 finish];
  [v79 setGPUPriority:1];
  [v79 setStatEnabled:0];
  [(id)g_commandBufferDescriptor setErrorOptions:v71];

  id v64 = g_signpostLog;
  uint64_t v65 = v64;
  os_signpost_id_t v66 = *(void *)(v78 + 80);
  if (v66 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v64))
  {
    LOWORD(v92[0]) = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v65, OS_SIGNPOST_INTERVAL_END, v66, "Replayer-1-serial", (const char *)&unk_4CA5E5, (uint8_t *)v92, 2u);
  }

  id v67 = [*(id *)(v78 + 48) commandBufferWithUnretainedReferences];
  id v68 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.gputools.replay", @"CollectFrameCounters"];
  [v67 setLabel:v68];

  v82[0] = _NSConcreteStackBlock;
  v82[1] = 3221225472;
  v82[2] = __CollectFrameCounters_block_invoke_433;
  v82[3] = &unk_746888;
  uint64_t v84 = *(void *)(v78 + 104);
  id v83 = *(id *)(v78 + 56);
  [v67 addCompletedHandler:v82];
  GTMTLReplay_commitCommandBuffer(v67);

  return [(id)g_activityLog leaveActivity];
}

void sub_2EA914(_Unwind_Exception *a1)
{
}

id *__CollectCounterData_block_invoke(id *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (a4) {
      return (id *)[result[4] appendData:];
    }
  }
  return result;
}

id __CollectFrameCounters_block_invoke_433(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 8) addOperation:*(void *)(a1 + 32)];
}

uint64_t compareSampleData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (1)
  {
    unint64_t v3 = *(void *)(a1 + v2);
    unint64_t v4 = *(void *)(a2 + v2);
    if (v3 < v4) {
      return 0xFFFFFFFFLL;
    }
    if (v4 < v3) {
      break;
    }
    v2 += 8;
    if (v2 == 24) {
      return 0;
    }
  }
  return 1;
}

id GTMTLReplayClient_derivedCounterData(id *a1, id *a2, void *a3)
{
  id v29 = a3;
  id v4 = [v29 objectForKeyedSubscript:@"profileCounters"];
  v46[0] = @"MTLStatCommandBufferIndex";
  v46[1] = @"MTLStatEncoderIndex";
  uint64_t v46[2] = @"MTLStatCommandIndex";
  v46[3] = @"MTLStatDataMaster";
  v46[4] = @"MTLStatSampleLocation";
  v46[5] = @"MTLStatTotalGPUCycles";
  v46[6] = @"MTLStat_nSec";
  os_signpost_id_t v5 = +[NSArray arrayWithObjects:v46 count:7];
  uint64_t v6 = +[NSMutableArray arrayWithCapacity:[v5 count] + [v4 count]];
  [v6 addObjectsFromArray:v5];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v32 objects:&v38 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v33;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v32 + 1) + 8 * i);
        if (([v5 containsObject:v11] & 1) == 0) {
          [v6 addObject:v11];
        }
      }
      id v8 = [v7 countByEnumeratingWithState:&v32 objects:&v38 count:16];
    }
    while (v8);
  }

  id v12 = v6;
  *(void *)&long long v32 = 0;
  *((void *)&v32 + 1) = &v32;
  *(void *)&long long v33 = 0x3032000000;
  *((void *)&v33 + 1) = __Block_byref_object_copy__7666;
  *(void *)&long long v34 = __Block_byref_object_dispose__7667;
  *((void *)&v34 + 1) = 0;
  os_signpost_id_t v38 = _NSConcreteStackBlock;
  uint64_t v39 = 3221225472;
  id v40 = __SubdivideCounterList_block_invoke;
  unint64_t v41 = &unk_746960;
  int v43 = &v32;
  unint64_t v44 = a1;
  id v13 = v12;
  id v42 = v13;
  id v14 = +[NSBlockOperation blockOperationWithBlock:&v38];
  [v14 setQueuePriority:8];
  [*a2 addOperation:v14];
  [v14 waitUntilFinished];
  id v15 = *(id *)(*((void *)&v32 + 1) + 40);

  _Block_object_dispose(&v32, 8);
  [a1[1] defaultDevice];

  id v30 = objc_alloc_init((Class)NSOperation);
  id v16 = objc_alloc_init((Class)NSMutableArray);
  id v17 = v13;
  id v18 = v16;
  id v19 = v15;
  id v20 = objc_alloc_init((Class)NSMutableData);
  id v21 = CollectFrameCounters((uint64_t)a1, a2, v17, v19, 63, v20);

  os_signpost_id_t v38 = _NSConcreteStackBlock;
  uint64_t v39 = 3221225472;
  id v40 = __ProfileFrameWithCounterListsForProfileInfo_block_invoke;
  unint64_t v41 = &unk_746988;
  id v42 = v18;
  int v43 = (long long *)v17;
  unint64_t v44 = (id *)v20;
  id v45 = a1;
  id v22 = v18;
  id v23 = v17;
  id v24 = v20;
  uint64_t v25 = +[NSBlockOperation blockOperationWithBlock:&v38];
  [v25 addDependency:v21];
  [a2[1] addOperation:v25];

  [v30 addDependency:v25];
  [a2[1] addOperation:v30];
  [v30 waitUntilFinished];
  v36[0] = @"numberOfPasses";
  uint64_t v26 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v19 count]);
  v37[0] = v26;
  v37[1] = v19;
  v36[1] = @"counterLists";
  v36[2] = @"counters";
  v36[3] = @"AverageSamples";
  v37[2] = v23;
  v37[3] = v22;
  double v27 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:4];

  return v27;
}

void sub_2EAEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __SubdivideCounterList_block_invoke(uint64_t a1)
{
  id v9 = [*(id *)(*(void *)(a1 + 48) + 8) defaultCommandQueue];
  if (g_runningInCI)
  {
    uint64_t v2 = +[NSString stringWithFormat:@"SubdivideCounterList - subdividing counter list"];
    unint64_t v3 = [v2 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n#CI-INFO# "];

    id v4 = __stdoutp;
    id v5 = v3;
    fprintf(v4, "#CI-INFO# %s\n", (const char *)[v5 UTF8String]);
  }
  uint64_t v6 = [v9 subdivideCounterList:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  validateSubdividedCounterLists(*(void **)(a1 + 32), *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void __ProfileFrameWithCounterListsForProfileInfo_block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 56) + 8) defaultCommandQueue];
  os_signpost_id_t v3 = os_signpost_id_make_with_pointer((os_log_t)g_signpostLog, *(const void **)(a1 + 32));
  id v4 = g_signpostLog;
  id v5 = v4;
  unint64_t v49 = v3 - 1;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "Replayer-4-parallel", "FormatSampleData", buf, 2u);
  }
  os_signpost_id_t spid = v3;

  uint64_t v6 = *(void **)(a1 + 40);
  int v50 = v2;
  uint64_t v7 = [v2 counterInfo];
  id v8 = *(void **)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  id v10 = v6;
  id v11 = v7;
  id v12 = v10;
  id v13 = v11;
  id v14 = v8;
  id v52 = v9;
  unint64_t v15 = (unint64_t)[v12 count];
  id v16 = v14;
  unint64_t v17 = (unint64_t)[v14 length];
  long long v59 = 0u;
  long long v60 = 0u;
  *(_OWORD *)long long buf = 0u;
  long long v58 = 0u;
  uint64_t v55 = v15;
  unint64_t v56 = v15;
  unint64_t v51 = v17 / (8 * v15);
  if (v15)
  {
    unint64_t v18 = 0;
    do
    {
      id v19 = [v12 objectAtIndexedSubscript:v18];
      id v20 = [v13 objectForKeyedSubscript:v19];
      id v21 = [v20 objectForKeyedSubscript:@"type"];
      id v22 = (char *)[v21 unsignedIntegerValue];

      *(void *)&buf[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8] |= (unint64_t)(v22 == (unsigned char *)&def_1C1270 + 1) << v18;
      unint64_t v15 = v56;
      ++v18;
    }
    while (v56 != v18);
  }
  uint64_t v48 = v13;
  id v23 = v16;
  id v24 = [v23 bytes];
  uint64_t v25 = v50;
  if (v51 >= 2)
  {
    uint64_t v26 = v24;
    id v46 = v23;
    double v27 = 0;
    unsigned int v28 = 0;
    unint64_t v29 = v15 - 3;
    uint64_t v30 = 1;
    unint64_t v31 = &send_ptr;
    while (1)
    {
      long long v32 = v26;
      uint64_t v26 = (void *)((char *)v26 + v55 * 8);
      if (*v26 == *v32) {
        break;
      }

      double v27 = 0;
      unsigned int v28 = 0;
      if (v26[2]) {
        goto LABEL_16;
      }
LABEL_27:
      if (++v30 == v51)
      {

        uint64_t v25 = v50;
        id v23 = v46;
        goto LABEL_29;
      }
    }
    if (v26[1] != v32[1])
    {

      double v27 = 0;
    }
    if (!v26[2]) {
      goto LABEL_27;
    }
    if (!v28)
    {
LABEL_16:
      unsigned int v28 = [v31[204] array];
      [v52 addObject:v28];
    }
    uint64_t v53 = v26;
    if (!v27)
    {
      double v27 = [v31[204] array];
      [v28 addObject:v27];
    }
    [v31[204] arrayWithCapacity:v15];
    v34 = long long v33 = v27;
    [v33 addObject:v34];
    long long v35 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)[v52 count] - 1);
    [v34 addObject:v35];

    long long v36 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)[v28 count] - 1);
    [v34 addObject:v36];

    uint64_t v54 = v33;
    unint64_t v37 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)[v33 count] - 1);
    [v34 addObject:v37];

    uint64_t v26 = v53;
    if (v15 >= 4)
    {
      uint64_t v38 = 0;
      do
      {
        unint64_t v39 = v32[v55 + 3 + v38];
        if ((*(void *)&buf[((unint64_t)(v38 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v38 + 3)))
        {
          unint64_t v40 = v32[v38 + 3];
          BOOL v41 = v39 >= v40;
          unint64_t v42 = v39 - v40;
          if (v41) {
            unint64_t v39 = v42;
          }
          else {
            unint64_t v39 = 0;
          }
        }
        int v43 = +[NSNumber numberWithUnsignedLongLong:v39];
        [v34 addObject:v43];

        ++v38;
      }
      while (v29 != v38);
    }

    unint64_t v15 = v56;
    double v27 = v54;
    unint64_t v31 = &send_ptr;
    goto LABEL_27;
  }
LABEL_29:

  unint64_t v44 = g_signpostLog;
  id v45 = v44;
  if (v49 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v44))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v45, OS_SIGNPOST_INTERVAL_END, spid, "Replayer-4-parallel", (const char *)&unk_4CA5E5, buf, 2u);
  }
}

id GTShaderDebuggerMakeError(unsigned int a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = a2;
  id v13 = [objc_alloc((Class)NSMutableDictionary) initWithObjectsAndKeys:v12, NSLocalizedDescriptionKey, 0];

  if (v9) {
    [v13 setObject:v9 forKeyedSubscript:NSLocalizedRecoverySuggestionErrorKey];
  }
  if (v10) {
    [v13 setObject:v10 forKeyedSubscript:NSUnderlyingErrorKey];
  }
  if (v11) {
    [v13 setObject:v11 forKeyedSubscript:@"ErrorInfo"];
  }
  id v14 = +[NSError errorWithDomain:@"GTShaderDebuggerErrorDomain" code:a1 userInfo:v13];

  return v14;
}

void GTShaderDebuggerContextDeinit(void *a1)
{
  if (*a1) {
    [*(id *)(*a1 + 8) commitCommandBuffers];
  }
  uint64_t v2 = (apr_pool_t *)a1[27];
  if (v2) {
    apr_pool_destroy(v2);
  }
  *a1 = 0;
  a1[27] = 0;
  os_signpost_id_t v3 = (void *)a1[24];
  a1[24] = 0;

  id v4 = (void *)a1[25];
  a1[25] = 0;

  a1[10] = 0;
  a1[11] = 0;
  id v5 = (void *)a1[1];
  a1[1] = 0;

  uint64_t v6 = (void *)a1[2];
  a1[2] = 0;

  uint64_t v7 = (void *)a1[3];
  a1[3] = 0;

  id v8 = (void *)a1[4];
  a1[4] = 0;

  id v9 = (void *)a1[5];
  a1[5] = 0;

  id v10 = (void *)a1[6];
  a1[6] = 0;

  id v11 = (void *)a1[7];
  a1[7] = 0;

  id v12 = (void *)a1[12];
  a1[12] = 0;

  id v13 = (void *)a1[13];
  a1[13] = 0;

  id v14 = (void *)a1[14];
  a1[14] = 0;

  unint64_t v15 = (void *)a1[15];
  a1[15] = 0;

  id v16 = (void *)a1[16];
  a1[16] = 0;

  unint64_t v17 = (void *)a1[17];
  a1[17] = 0;

  unint64_t v18 = (void *)a1[19];
  a1[19] = 0;

  id v19 = (void *)a1[21];
  a1[21] = 0;

  id v20 = (void *)a1[22];
  a1[22] = 0;

  id v21 = (void *)a1[23];
  a1[23] = 0;
}

id GTShaderDebuggerSanitizeResponse(void *a1, void *a2, _DWORD *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = v7;
  id v10 = [v8 objectForKeyedSubscript:@"ProtocolVersion"];
  unsigned int v11 = [v10 intValue];

  BOOL v12 = v11 > 2 || v11 == 2;
  id v13 = v9;
  if (v12)
  {
    if (!a4) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  id v71 = v8;
  id v72 = a4;
  id v70 = v9;
  id v14 = v9;
  id v68 = [v14 objectForKeyedSubscript:@"TraceData"];
  id v67 = [v14 objectForKeyedSubscript:@"TraceMetadata"];
  id v69 = v14;
  unint64_t v15 = [v14 objectForKeyedSubscript:@"ResourceMapping"];
  uint64_t v65 = [v15 objectForKeyedSubscript:@"Bytes"];
  id v16 = [v15 objectForKeyedSubscript:@"Buffers"];
  id v64 = [v15 objectForKeyedSubscript:@"Textures"];
  int64_t v63 = [v15 objectForKeyedSubscript:@"Samplers"];
  os_signpost_id_t v66 = v15;
  unint64_t v17 = [v15 objectForKeyedSubscript:@"ConstantSamplers"];
  unint64_t v18 = &send_ptr;
  if ([v16 count])
  {
    int v19 = a3[5620];
    uint64_t v20 = *(void *)(*(void *)(*(void *)a3 + 120) + 24);
    id v21 = *(uint64_t **)(*(void *)a3 + 40);
    id v73 = objc_alloc_init((Class)NSMutableDictionary);
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    id v22 = v16;
    id v23 = [v22 countByEnumeratingWithState:&v78 objects:v90 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = (unint64_t *)(v20 + ((unint64_t)(v19 - 1) << 6));
      uint64_t v26 = *(void *)v79;
      do
      {
        for (unint64_t i = 0; i != v24; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v79 != v26) {
            objc_enumerationMutation(v22);
          }
          unsigned int v28 = *(void **)(*((void *)&v78 + 1) + 8 * i);
          uint64_t Object = GTMTLSMContext_getObject(*v21, (uint64_t)[v28 unsignedLongLongValue], *v25);
          if (Object)
          {
            uint64_t v30 = Object;
            unint64_t v31 = [v22 objectForKeyedSubscript:v28];
            long long v32 = +[NSNumber numberWithUnsignedLongLong:v30[14]];
            [v73 setObject:v31 forKeyedSubscript:v32];
          }
        }
        id v24 = [v22 countByEnumeratingWithState:&v78 objects:v90 count:16];
      }
      while (v24);
    }

    unint64_t v18 = &send_ptr;
  }
  else
  {
    id v73 = v16;
  }
  if ([v17 count])
  {
    id v33 = objc_alloc_init((Class)v18[206]);
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    id v34 = v17;
    id v35 = [v34 countByEnumeratingWithState:&v74 objects:v89 count:16];
    if (v35)
    {
      id v36 = v35;
      uint64_t v37 = *(void *)v75;
      do
      {
        for (uint64_t j = 0; j != v36; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v75 != v37) {
            objc_enumerationMutation(v34);
          }
          uint64_t v39 = *(void *)(*((void *)&v74 + 1) + 8 * (void)j);
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          unint64_t v40 = [v34 objectForKeyedSubscript:v39];
          BOOL v41 = [v40 objectForKeyedSubscript:@"borderColor"];
          BYTE2(v88) = [v41 unsignedCharValue];

          unint64_t v42 = [v40 objectForKeyedSubscript:@"compareFunction"];
          BYTE3(v88) = [v42 unsignedCharValue];

          int v43 = [v40 objectForKeyedSubscript:@"lodMinClamp"];
          [v43 floatValue];
          HIDWORD(v87) = v44;

          id v45 = [v40 objectForKeyedSubscript:@"lodMaxClamp"];
          [v45 floatValue];
          DWORD2(v87) = v46;

          NSRange v47 = [v40 objectForKeyedSubscript:@"lodAverage"];
          BYTE6(v88) = [v47 unsignedCharValue];

          uint64_t v48 = [v40 objectForKeyedSubscript:@"minFilter"];
          BYTE8(v88) = [v48 unsignedCharValue];

          unint64_t v49 = [v40 objectForKeyedSubscript:@"magFilter"];
          BYTE7(v88) = [v49 unsignedCharValue];

          int v50 = [v40 objectForKeyedSubscript:@"mipFilter"];
          BYTE9(v88) = [v50 unsignedCharValue];

          unint64_t v51 = [v40 objectForKeyedSubscript:@"maxAnisotropy"];
          *((void *)&v85 + 1) = [v51 unsignedCharValue];

          id v52 = [v40 objectForKeyedSubscript:@"normalizedCoordinates"];
          BYTE10(v88) = [v52 unsignedCharValue];

          uint64_t v53 = [v40 objectForKeyedSubscript:@"pixelFormat"];
          LOWORD(v88) = (unsigned __int16)[v53 unsignedShortValue];

          uint64_t v54 = [v40 objectForKeyedSubscript:@"reductionMode"];
          BYTE12(v88) = [v54 unsignedCharValue];

          uint64_t v55 = [v40 objectForKeyedSubscript:@"rAddressMode"];
          BYTE11(v88) = [v55 unsignedCharValue];

          unint64_t v56 = [v40 objectForKeyedSubscript:@"sAddressMode"];
          BYTE13(v88) = [v56 unsignedCharValue];

          uint64_t v57 = [v40 objectForKeyedSubscript:@"tAddressMode"];
          HIBYTE(v88) = [v57 unsignedCharValue];

          unint64_t v58 = EncodeDYMTLSamplerDescriptor((uint64_t)&v85, 0, 0);
          id v59 = [objc_alloc((Class)NSMutableData) initWithLength:v58];
          EncodeDYMTLSamplerDescriptor((uint64_t)&v85, (uint64_t)[v59 mutableBytes], v58);
          id v60 = [v59 copy];
          [v33 setObject:v60 forKeyedSubscript:v39];
        }
        id v36 = [v34 countByEnumeratingWithState:&v74 objects:v89 count:16];
      }
      while (v36);
    }
  }
  else
  {
    id v33 = v17;
  }
  v83[0] = @"DYMTLShaderDebuggerTrace";
  v83[1] = @"DYMTLShaderDebuggerMetadata";
  v84[0] = v68;
  v84[1] = v67;
  v83[2] = @"DYMTLShaderDebuggerResourceResolutionRemappingTables";
  v82[0] = @"DYMTLShaderDebuggerResourceResolutionRemappingTablesBytes";
  v82[1] = @"DYMTLShaderDebuggerResourceResolutionRemappingTablesTextures";
  *(void *)&long long v85 = v65;
  *((void *)&v85 + 1) = v64;
  v82[2] = @"DYMTLShaderDebuggerResourceResolutionRemappingTablesSamplers";
  v82[3] = @"DYMTLShaderDebuggerResourceResolutionRemappingTablesBuffers";
  *(void *)&long long v86 = v63;
  *((void *)&v86 + 1) = v73;
  void v82[4] = @"DYMTLShaderDebuggerResourceResolutionRemappingTablesConstantSamplersReflection";
  *(void *)&long long v87 = v33;
  uint64_t v61 = +[NSDictionary dictionaryWithObjects:&v85 forKeys:v82 count:5];
  void v84[2] = v61;
  id v13 = +[NSDictionary dictionaryWithObjects:v84 forKeys:v83 count:3];

  id v8 = v71;
  a4 = v72;
  id v9 = v70;
  if (v72)
  {
LABEL_31:
    if (!v13)
    {
      GTShaderDebuggerMakeError(1u, @"Internal error: Unexpected response", 0, 0, 0);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
LABEL_33:

  return v13;
}

uint64_t __GTShaderDebuggerMakeRuntimeLibrariesFromSources_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v8 = (unsigned __int8 *)[v7 pointerValue];

  id v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];
  id v10 = (unsigned __int8 *)[v9 pointerValue];

  unsigned int v11 = v8[160];
  unsigned int v12 = v10[160];
  if (v11 == v12)
  {
    uint64_t v13 = (uint64_t)[v5 compare:v6];
  }
  else if (v11 > v12)
  {
    uint64_t v13 = -1;
  }
  else
  {
    uint64_t v13 = 1;
  }

  return v13;
}

uint64_t _FindDylibObjectIDForParentLibrary(unint64_t **a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, a4);
  id v6 = newpool;
  id v7 = apr_array_make(newpool, 32, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(*(void *)(**a1 + 40) + 96), *a1[11], v7);
  uint64_t nelts = v7->nelts;
  if ((int)nelts < 1)
  {
LABEL_5:
    uint64_t v10 = 0;
  }
  else
  {
    elts = v7->elts;
    while (*(void *)(*(void *)elts + 48) != *(void *)(a2 + 8))
    {
      elts += 8;
      if (!--nelts) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = *(void *)(*(void *)elts + 8);
  }
  apr_pool_destroy(v6);
  return v10;
}

uint64_t GTShaderDebuggerMakeRuntimeLibrariesFromMetallibs(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  [*((id *)*a1 + 1) defaultDevice];
  v38 = uint64_t v37 = (unint64_t **)a1;
  id v35 = (unint64_t *)a1[11];
  id v36 = *(uint64_t **)(*(void *)*a1 + 40);
  id v6 = [a1[12] mutableCopy];
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v7 = v5;
  id v32 = [v7 countByEnumeratingWithState:&v41 objects:v45 count:16];
  if (!v32)
  {
    id v8 = 0;
    goto LABEL_20;
  }
  unint64_t v31 = a3;
  id v8 = 0;
  uint64_t v33 = *(void *)v42;
  id v34 = v6;
  while (2)
  {
    for (unint64_t i = 0; i != v32; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v42 != v33) {
        objc_enumerationMutation(v7);
      }
      uint64_t v10 = *(void **)(*((void *)&v41 + 1) + 8 * i);
      AliasStreaunint64_t m = (uint64_t *)GetAliasStream(*(void *)(**v37 + 24), (uint64_t)[v10 unsignedIntegerValue], *v37[11]);
      if (AliasStream) {
        uint64_t v12 = *AliasStream;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t Object = GTMTLSMContext_lastObject(*v36, v12, *v35);
      if (!Object)
      {
        if (v31)
        {
          GTShaderDebuggerMakeError(1u, @"Internal error: Library not found", 0, 0, 0);
          uint64_t v28 = 0;
          *unint64_t v31 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v28 = 0;
        }
        double v27 = (unint64_t *)v7;
        id v6 = v34;
        goto LABEL_37;
      }
      uint64_t v14 = Object;
      id v15 = v7;
      id v16 = [v7 objectForKeyedSubscript:v10];
      dispatch_data_t v17 = dispatch_data_create([v16 bytes], (size_t)[v16 length], 0, 0);
      id v40 = v8;
      id v18 = [v38 newLibraryWithData:v17 error:&v40];
      id v19 = v40;

      if (!v18)
      {
        id v6 = v34;
        if (v31)
        {
          GTShaderDebuggerMakeError(1u, @"Internal error: Failed to set up runtime library", 0, v19, 0);
          id v18 = 0;
          *unint64_t v31 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v18 = 0;
        }
        id v8 = v19;
        id v7 = v15;
        goto LABEL_36;
      }
      if (*(unsigned char *)(v14 + 160) == 1)
      {
        id v39 = v19;
        id v20 = [v38 newDynamicLibrary:v18 error:&v39];
        id v8 = v39;

        if (v20)
        {
          uint64_t DylibObjectIDForParentLibrary = _FindDylibObjectIDForParentLibrary(v37, v14, v21, v22);
          id v7 = v15;
          if (DylibObjectIDForParentLibrary)
          {
            id v24 = +[NSNumber numberWithUnsignedLongLong:DylibObjectIDForParentLibrary];
            [v34 setObject:v20 forKeyedSubscript:v24];

            uint64_t v25 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v14 + 8)];
            [v34 setObject:v18 forKeyedSubscript:v25];

            goto LABEL_16;
          }
          unint64_t v29 = +[NSString stringWithFormat:@"Internal error: Failed to resolve dynamic library identifier \"%@\"", v10];
          if (v31)
          {
            GTShaderDebuggerMakeError(1u, v29, 0, 0, 0);
            *unint64_t v31 = (id)objc_claimAutoreleasedReturnValue();
          }
        }
        else
        {
          id v7 = v15;
          if (v31)
          {
            GTShaderDebuggerMakeError(1u, @"Internal error: Failed to set up runtime dynamic library", 0, v8, 0);
            id v20 = 0;
            *unint64_t v31 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            id v20 = 0;
          }
        }
        id v6 = v34;

LABEL_36:
        uint64_t v28 = 0;
        double v27 = (unint64_t *)v7;
        goto LABEL_37;
      }
      id v20 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v14 + 8)];
      [v34 setObject:v18 forKeyedSubscript:v20];
      id v8 = v19;
      id v7 = v15;
LABEL_16:
    }
    id v6 = v34;
    id v32 = [v7 countByEnumeratingWithState:&v41 objects:v45 count:16];
    if (v32) {
      continue;
    }
    break;
  }
LABEL_20:

  uint64_t v26 = (unint64_t *)[v6 copy];
  double v27 = v37[12];
  v37[12] = v26;
  uint64_t v28 = 1;
LABEL_37:

  return v28;
}

uint64_t GTShaderDebuggerMakeRuntimeLibrariesFromDependentLibs(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  uint64_t v34 = a1;
  id v5 = [*(id *)(*(void *)a1 + 8) defaultDevice];
  id v6 = objc_alloc_init((Class)NSMutableArray);
  id v7 = objc_alloc_init((Class)NSMutableArray);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (v9)
  {
    id v10 = v9;
    id v11 = 0;
    uint64_t v37 = *(void *)v41;
    id v35 = v7;
    obuint64_t j = v8;
    while (2)
    {
      for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
      {
        uint64_t v13 = v6;
        if (*(void *)v41 != v37) {
          objc_enumerationMutation(obj);
        }
        id v14 = *(id *)(*((void *)&v40 + 1) + 8 * i);
        dispatch_data_t v15 = dispatch_data_create([v14 bytes], (size_t)[v14 length], 0, 0);
        id v39 = v11;
        id v16 = [v5 newLibraryWithData:v15 error:&v39];
        id v17 = v39;

        if (!v16)
        {
          if ([v17 code] != (char *)&def_1C1270 + 1) {
            goto LABEL_23;
          }
          id v18 = [v17 domain];
          unsigned int v19 = [v18 isEqualToString:MTLLibraryErrorDomain];

          if (!v19) {
            goto LABEL_23;
          }
          uint64_t v20 = GTShaderDebuggerMakeRuntimeLibrariesFromDependentLibs_lib_index++;
          uint64_t v21 = [@"dylib-" stringByAppendingFormat:@"%llu.metallib" v20];
          id v22 = [*(id *)(v34 + 200) stringByAppendingPathComponent:v21];
          if (([v14 writeToFile:v22 options:0 error:0] & 1) == 0)
          {

LABEL_23:
            if (a3)
            {
              GTShaderDebuggerMakeError(1u, @"Internal error: Failed to set up dependent dynamic library", 0, v17, 0);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }
            id v11 = v17;
            id v6 = v13;
LABEL_26:
            id v7 = v35;
            id v8 = obj;

            uint64_t v31 = 0;
            uint64_t v30 = obj;
            goto LABEL_27;
          }
          id v23 = [objc_alloc((Class)NSURL) initFileURLWithPath:v22 isDirectory:0];
          id v16 = [v5 newLibraryWithURL:v23 error:0];

          if (!v16) {
            goto LABEL_23;
          }
        }
        id v24 = [v16 installName];
        unsigned __int8 v25 = [v24 containsString:@"libtracepoint"];

        if ((v25 & 1) == 0) {
          [v35 addObject:v16];
        }
        id v38 = v17;
        id v26 = [v5 newDynamicLibrary:v16 error:&v38];
        id v11 = v38;

        if (!v26)
        {
          id v6 = v13;
          if (a3)
          {
            GTShaderDebuggerMakeError(1u, @"Internal error: Failed to set up dependent dynamic library", 0, v11, 0);
            *a3 = (id)objc_claimAutoreleasedReturnValue();
          }

          goto LABEL_26;
        }
        id v6 = v13;
        [v13 addObject:v26];
      }
      id v8 = obj;
      id v10 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
      id v7 = v35;
      if (v10) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v11 = 0;
  }

  id v27 = [v6 copy];
  uint64_t v28 = *(void **)(v34 + 112);
  *(void *)(v34 + 112) = v27;

  id v29 = [v7 copy];
  uint64_t v30 = *(void **)(v34 + 120);
  *(void *)(v34 + 120) = v29;
  uint64_t v31 = 1;
LABEL_27:

  return v31;
}

uint64_t GTShaderDebuggerMakeRuntimeFunctions(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([v5 count])
  {
    id v6 = [*(id *)(a1 + 96) mutableCopy];
    id v7 = *(uint64_t **)(**(void **)a1 + 40);
    unint64_t v63 = **(void **)(a1 + 88);
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    id v54 = v5;
    id v8 = v5;
    id v59 = [v8 countByEnumeratingWithState:&v74 objects:v79 count:16];
    if (v59)
    {
      uint64_t v60 = *(void *)v75;
      uint64_t v57 = v7;
      uint64_t v58 = a1;
      id v55 = v8;
      unint64_t v56 = a3;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v75 != v60) {
            objc_enumerationMutation(v8);
          }
          id v10 = *(void **)(*((void *)&v74 + 1) + 8 * v9);
          id v11 = _ObjectUIDsWithAliasID((void **)a1, (uint64_t)[v10 unsignedLongLongValue]);
          if (![v11 count]
            || (uint64_t v64 = v9,
                [v11 firstObject],
                uint64_t v12 = objc_claimAutoreleasedReturnValue(),
                uint64_t Object = (uint64_t *)GTMTLSMContext_lastObject(*v7, (uint64_t)[v12 unsignedLongLongValue], v63), v12, !Object))
          {
            id v52 = +[NSString stringWithFormat:@"Internal error: Function '%@' not found", v10];
            if (a3)
            {
              GTShaderDebuggerMakeError(1u, v52, 0, 0, 0);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }

LABEL_60:
            uint64_t v51 = 0;
            goto LABEL_61;
          }
          uint64_t v65 = v11;
          id v14 = *(void **)(a1 + 96);
          dispatch_data_t v15 = +[NSNumber numberWithUnsignedLongLong:Object[5]];
          uint64_t v16 = [v14 objectForKeyedSubscript:v15];

          id v17 = (void *)v16;
          if (v16)
          {
            uint64_t v18 = Object[15];
            uint64_t v62 = v17;
            if (v18)
            {
              unsigned int v19 = [*(id *)(*(void *)a1 + 8) functionMap];
              uint64_t v20 = MakeMTLIntersectionFunctionDescriptor(v18, v19);
              id v73 = 0;
              id v21 = [v17 newIntersectionFunctionWithDescriptor:v20 error:&v73];
              id v61 = v73;

              goto LABEL_17;
            }
            uint64_t v18 = Object[14];
            if (v18)
            {
              id v26 = [*(id *)(*(void *)a1 + 8) functionMap];
              id v27 = MakeMTLFunctionDescriptor(v18, v26);
              id v72 = 0;
              id v21 = [v17 newFunctionWithDescriptor:v27 error:&v72];
              id v61 = v72;

LABEL_17:
              uint64_t v28 = *(unsigned char **)(v18 + 8);
LABEL_18:
              if (v21)
              {
                long long v68 = 0u;
                long long v69 = 0u;
                long long v66 = 0u;
                long long v67 = 0u;
                id v29 = v65;
                id v30 = [v29 countByEnumeratingWithState:&v66 objects:v78 count:16];
                if (v30)
                {
                  id v31 = v30;
                  uint64_t v32 = *(void *)v67;
                  do
                  {
                    for (unint64_t i = 0; i != v31; unint64_t i = (char *)i + 1)
                    {
                      if (*(void *)v67 != v32) {
                        objc_enumerationMutation(v29);
                      }
                      id v34 = [*(id *)(*((void *)&v66 + 1) + 8 * i) unsignedLongLongValue];
                      id v35 = +[NSNumber numberWithUnsignedLongLong:v34];
                      id v36 = [v35 stringValue];
                      [v21 setLabel:v36];

                      uint64_t v37 = +[NSNumber numberWithUnsignedLongLong:v34];
                      [v6 setObject:v21 forKeyedSubscript:v37];
                    }
                    id v31 = [v29 countByEnumeratingWithState:&v66 objects:v78 count:16];
                  }
                  while (v31);
                }

                int v38 = 0;
                id v8 = v55;
                a3 = v56;
                id v7 = v57;
                a1 = v58;
                id v39 = v61;
LABEL_37:

                unsigned __int8 v25 = v65;
                id v17 = v62;
                goto LABEL_38;
              }
              id v7 = v57;
              a1 = v58;
            }
            else
            {
              uint64_t v28 = (unsigned char *)Object[7];
              if (v28 && *v28)
              {
                uint64_t v41 = Object[9];
                long long v42 = +[NSString stringWithUTF8String:Object[7]];
                if (v41)
                {
                  long long v43 = MakeMTLFunctionConstantValues((void *)Object[9]);
                  id v71 = 0;
                  id v21 = [v62 newFunctionWithName:v42 constantValues:v43 error:&v71];
                  id v61 = v71;
                }
                else
                {
                  id v44 = [v62 newFunctionWithName:v42];

                  id v45 = v44;
                  if ((objc_opt_respondsToSelector() & 1) != 0
                    && [v45 needsFunctionConstantValues])
                  {
                    int v46 = +[NSString stringWithUTF8String:v28];
                    id v47 = objc_alloc_init((Class)MTLFunctionConstantValues);
                    id v70 = 0;
                    id v48 = [v62 newFunctionWithName:v46 constantValues:v47 error:&v70];
                    id v61 = v70;

                    id v21 = v45;
                    if (v48)
                    {
                      id v21 = v48;
                    }
                  }
                  else
                  {
                    id v61 = 0;
                    id v21 = v45;
                  }
                }
                goto LABEL_18;
              }
              GTShaderDebuggerMakeError(1u, @"Capture did not resolve function name", 0, 0, 0);
              id v61 = (id)objc_claimAutoreleasedReturnValue();
            }
            if (v28)
            {
              long long v40 = +[NSString stringWithUTF8String:v28];
              id v21 = +[NSString stringWithFormat:@"Internal error: Failed to set up function '%@' (%@)", v40, v10];
            }
            else
            {
              id v21 = +[NSString stringWithFormat:@"Internal error: Failed to set up function '%@' (%@)", @"NULL", v10];
            }
            id v39 = v61;
            if (a3)
            {
              GTShaderDebuggerMakeError(2u, v21, 0, v61, 0);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }
            int v38 = 1;
            goto LABEL_37;
          }
          uint64_t v22 = GTMTLSMContext_lastObject(*v7, Object[5], v63);
          if (v22)
          {
            unint64_t v23 = *(unsigned __int8 *)(v22 + 161);
            CFStringRef v24 = @"Unknown";
            unsigned __int8 v25 = v65;
            if (v23 <= 6) {
              CFStringRef v24 = off_746A88[v23];
            }
          }
          else
          {
            CFStringRef v24 = @"NULL";
            unsigned __int8 v25 = v65;
          }
          id v39 = +[NSString stringWithFormat:@"Internal error: Failed to find runtime library (%@) for function '%@'", v24, v10];
          int v38 = 1;
          if (a3)
          {
            GTShaderDebuggerMakeError(1u, v39, 0, 0, 0);
            *a3 = (id)objc_claimAutoreleasedReturnValue();
          }
LABEL_38:

          if (v38) {
            goto LABEL_60;
          }
          uint64_t v9 = v64 + 1;
        }
        while ((id)(v64 + 1) != v59);
        id v49 = [v8 countByEnumeratingWithState:&v74 objects:v79 count:16];
        id v59 = v49;
      }
      while (v49);
    }

    id v50 = [v6 copy];
    id v8 = *(id *)(a1 + 96);
    *(void *)(a1 + 96) = v50;
    uint64_t v51 = 1;
LABEL_61:
    id v5 = v54;
  }
  else if (a3)
  {
    GTShaderDebuggerMakeError(1u, @"Internal error: Entry function not found", 0, 0, 0);
    uint64_t v51 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v51 = 0;
  }

  return v51;
}

id _ObjectUIDsWithAliasID(void **a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSMutableArray);
  p = 0;
  apr_pool_create_ex(&p, 0, 0, v5);
  id v6 = p;
  id v7 = apr_array_make(p, 32, 8);
  uint64_t v8 = *(void *)(**a1 + 24);
  unint64_t v9 = *a1[11];
  uint64_t v22 = a2;
  entry = find_entry(v8, &v22, 8uLL, 0);
  if (*entry)
  {
    for (unint64_t i = *(void **)(*entry + 32); i; unint64_t i = (void *)i[4])
    {
      if (i[2] <= v9 && i[3] >= v9)
      {
        uint64_t v12 = i[1];
        *(void *)apr_array_push(v7) = v12;
      }
    }
  }
  uint64_t nelts = v7->nelts;
  if ((int)nelts >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * nelts;
    do
    {
      uint64_t v16 = *(uint64_t **)&v7->elts[v14];
      if (v16) {
        uint64_t v17 = *v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = +[NSNumber numberWithUnsignedLongLong:v17];
      [v4 addObject:v18];

      v14 += 8;
    }
    while (v15 != v14);
  }
  apr_pool_destroy(v6);
  id v19 = [v4 copy];

  return v19;
}

uint64_t GTShaderDebuggerMakeDebugMetadata(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v268 = a2;
  id v7 = a3;
  if ((*(unsigned char *)(a1 + 208) & 1) == 0)
  {
LABEL_2:
    uint64_t v8 = 1;
    goto LABEL_176;
  }
  long long v265 = a4;
  id v267 = v7;
  id v277 = objc_alloc_init((Class)NSMutableArray);
  id v275 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v279 = a1;
  __s = *(uint64_t **)(**(void **)a1 + 40);
  unint64_t v271 = **(void **)(a1 + 88);
  long long v291 = 0u;
  long long v292 = 0u;
  long long v293 = 0u;
  long long v294 = 0u;
  id v9 = v268;
  id v10 = [v9 countByEnumeratingWithState:&v291 objects:v332 count:16];
  if (!v10) {
    goto LABEL_22;
  }
  uint64_t v273 = *(void *)v292;
LABEL_5:
  uint64_t v11 = 0;
  while (1)
  {
    if (*(void *)v292 != v273) {
      objc_enumerationMutation(v9);
    }
    uint64_t v12 = *(void **)(*((void *)&v291 + 1) + 8 * v11);
    AliasStreaunint64_t m = (void *)GetAliasStream(*(void *)(**(void **)v279 + 24), (uint64_t)[v12 unsignedIntegerValue], **(void **)(v279 + 88));
    uint64_t v14 = AliasStream ? *AliasStream : 0;
    uint64_t v15 = *(void **)(v279 + 96);
    uint64_t v16 = +[NSNumber numberWithUnsignedLongLong:v14];
    uint64_t v17 = [v15 objectForKeyedSubscript:v16];

    uint64_t v18 = [v17 bitcodeData];
    if (!v18) {
      break;
    }
    if ((*(unsigned char *)(v279 + 208) & 8) != 0)
    {
      id v19 = [v17 name];
      v331[0] = v19;
      v331[1] = v12;
      uint64_t v20 = +[NSArray arrayWithObjects:v331 count:2];
      id v21 = [v20 componentsJoinedByString:@"_"];

      uint64_t v22 = [v21 stringByAppendingPathExtension:@"bc"];
      unint64_t v23 = [*(id *)(v279 + 200) stringByAppendingPathComponent:v22];
      uint64_t v290 = 0;
      [v18 writeToFile:v23 options:1 error:&v290];
    }
    uint64_t Object = GTMTLSMContext_lastObject(*__s, v14, v271);
    if (Object
      && ((uint64_t v25 = *(void *)(Object + 120)) != 0 || (uint64_t v25 = *(void *)(Object + 112)) != 0)
      && *(void *)(v25 + 8))
    {
      uint64_t v26 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    }
    else
    {
      uint64_t v26 = +[NSNull null];
    }
    id v27 = (void *)v26;
    [v275 addObject:v26];

    [v277 addObject:v18];
    if (v10 == (id)++v11)
    {
      id v10 = [v9 countByEnumeratingWithState:&v291 objects:v332 count:16];
      if (!v10)
      {
LABEL_22:

        long long v289 = 0u;
        long long v287 = 0u;
        long long v288 = 0u;
        long long v286 = 0u;
        id v28 = v267;
        id v29 = [v28 countByEnumeratingWithState:&v286 objects:v330 count:16];
        if (v29)
        {
          uint64_t v30 = *(void *)v287;
          do
          {
            for (unint64_t i = 0; i != v29; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v287 != v30) {
                objc_enumerationMutation(v28);
              }
              uint64_t v32 = *(void **)(*((void *)&v286 + 1) + 8 * i);
              uint64_t v33 = (uint64_t *)GetAliasStream(*(void *)(**(void **)v279 + 24), (uint64_t)[v32 unsignedIntegerValue], **(void **)(v279 + 88));
              if (v33) {
                uint64_t v34 = *v33;
              }
              else {
                uint64_t v34 = 0;
              }
              id v35 = *(void **)(v279 + 96);
              id v36 = +[NSNumber numberWithUnsignedLongLong:v34];
              uint64_t v37 = [v35 objectForKeyedSubscript:v36];

              if (v37 && [v37 type])
              {
                int v38 = [v37 bitcodeData];
                if (v38)
                {
                  if ((*(unsigned char *)(v279 + 208) & 8) != 0)
                  {
                    id v39 = [v37 installName];
                    v329[0] = v39;
                    v329[1] = v32;
                    long long v40 = +[NSArray arrayWithObjects:v329 count:2];
                    uint64_t v41 = [v40 componentsJoinedByString:@"_"];

                    long long v42 = [v41 stringByAppendingPathExtension:@"bc"];
                    long long v43 = [*(id *)(v279 + 200) stringByAppendingPathComponent:v42];
                    uint64_t v285 = 0;
                    [v38 writeToFile:v43 options:1 error:&v285];
                  }
                  [v277 addObject:v38];
                  id v44 = +[NSNull null];
                  [v275 addObject:v44];
                }
              }
            }
            id v29 = [v28 countByEnumeratingWithState:&v286 objects:v330 count:16];
          }
          while (v29);
        }

        long long v283 = 0u;
        long long v284 = 0u;
        long long v281 = 0u;
        long long v282 = 0u;
        id v45 = *(id *)(v279 + 120);
        id v46 = [v45 countByEnumeratingWithState:&v281 objects:v328 count:16];
        if (v46)
        {
          uint64_t v47 = *(void *)v282;
          do
          {
            for (uint64_t j = 0; j != v46; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v282 != v47) {
                objc_enumerationMutation(v45);
              }
              id v49 = *(void **)(*((void *)&v281 + 1) + 8 * (void)j);
              id v50 = [v49 bitcodeData];
              if (v50)
              {
                if ((*(unsigned char *)(v279 + 208) & 8) != 0)
                {
                  uint64_t v51 = [v49 installName];
                  id v52 = [v51 stringByAppendingPathExtension:@"bc"];
                  uint64_t v53 = [*(id *)(v279 + 200) stringByAppendingPathComponent:v52];
                  uint64_t v280 = 0;
                  [v50 writeToFile:v53 options:1 error:&v280];
                }
                [v277 addObject:v50];
                id v54 = +[NSNull null];
                [v275 addObject:v54];
              }
            }
            id v46 = [v45 countByEnumeratingWithState:&v281 objects:v328 count:16];
          }
          while (v46);
        }

        id v55 = *(id *)(v279 + 104);
        id v56 = v277;
        id v272 = v275;
        id v264 = v55;
        int v337 = 0;
        long long v335 = 0u;
        long long v336 = 0u;
        long long v334 = 0u;
        long long v338 = 0u;
        long long v339 = 0u;
        long long v340 = 0u;
        long long v341 = 0u;
        uint64_t v342 = 0;
        v343[0] = v344;
        v343[1] = (char *)0x400000000;
        NSErrorUserInfoKey v274 = v56;
        llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)v315);
        int64x2_t v313 = 0uLL;
        unsigned int v314 = 0;
        long long v311 = 0u;
        long long __p = 0u;
        float v312 = 1.0;
        uint64_t v57 = (char *)[v56 count];
        if (v57)
        {
          id v266 = 0;
          uint64_t v58 = 0;
          uint64_t v276 = v57;
          while (1)
          {
            id v59 = [v56 objectAtIndexedSubscript:v58];
            [v59 bytes];
            [v59 length];
            llvm::MemoryBuffer::getMemBuffer();
            llvm::MemoryBuffer::getMemBufferRef(v309, v345[0]);
            llvm::parseIR();
            uint64_t v60 = v333[0];
            if (!v333[0])
            {
              if ((SBYTE7(v339) & 0x80u) == 0) {
                long long v66 = &v338;
              }
              else {
                long long v66 = (long long *)v338;
              }
              if ((SBYTE7(v339) & 0x80u) == 0) {
                uint64_t v67 = BYTE7(v339);
              }
              else {
                uint64_t v67 = *((void *)&v338 + 1);
              }
              long long v68 = [(NSString *)objc_alloc((Class)NSString) initWithBytes:v66 length:v67 encoding:[NSString defaultCStringEncoding]];
              GTShaderDebuggerMDSerializerError(1u, v68);
              id v266 = (id)objc_claimAutoreleasedReturnValue();
              goto LABEL_157;
            }
            id v61 = (void *)v313.i64[1];
            uint64_t v62 = (void *)v313.i64[0];
            unint64_t v63 = v313.i64[1] - v313.i64[0];
            uint64_t v64 = (v313.i64[1] - v313.i64[0]) >> 3;
            if (v313.i64[1] >= (unint64_t)v314)
            {
              unint64_t v69 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 61) {
                abort();
              }
              uint64_t v70 = (uint64_t)&v314[-v313.i64[0]];
              if ((uint64_t)&v314[-v313.i64[0]] >> 2 > v69) {
                unint64_t v69 = v70 >> 2;
              }
              unint64_t v71 = (unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v69;
              if (v71)
              {
                if (v71 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                id v72 = (char *)operator new(8 * v71);
              }
              else
              {
                id v72 = 0;
              }
              id v73 = (llvm::Module **)&v72[8 * v64];
              v333[0] = 0;
              *id v73 = v60;
              uint64_t v65 = v73 + 1;
              if (v61 == v62)
              {
                int64x2_t v75 = vdupq_n_s64((unint64_t)v61);
              }
              else
              {
                do
                {
                  long long v74 = (llvm::Module *)*--v61;
                  *id v61 = 0;
                  *--id v73 = v74;
                }
                while (v61 != v62);
                int64x2_t v75 = v313;
              }
              v313.i64[0] = (uint64_t)v73;
              v313.i64[1] = (uint64_t)v65;
              unsigned int v314 = &v72[8 * v71];
              long long v77 = (llvm::Module **)v75.i64[1];
              long long v76 = (llvm::Module **)v75.i64[0];
              while (v77 != v76)
                std::unique_ptr<llvm::Module>::reset[abi:nn180100](--v77);
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              v333[0] = 0;
              *(void *)v313.i64[1] = v60;
              uint64_t v65 = v61 + 1;
            }
            v313.i64[1] = (uint64_t)v65;
            long long v68 = [v272 objectAtIndexedSubscript:v58];
            long long v78 = +[NSNull null];
            BOOL v79 = v68 == v78;

            if (!v79) {
              break;
            }
LABEL_157:

            id v105 = v333[0];
            v333[0] = 0;
            if (v105)
            {
              llvm::Module::~Module(v105);
              operator delete();
            }
            id v106 = v345[0];
            v345[0] = 0;
            if (v106) {
              (*(void (**)(llvm::MemoryBuffer *))(*(void *)v106 + 8))(v106);
            }

            if (!v60)
            {
              uint64_t v251 = 0;
              id v252 = 0;
              goto LABEL_444;
            }
            ++v58;
            id v56 = v274;
            if (v58 == v276) {
              goto LABEL_178;
            }
          }
          long long v68 = v68;
          __sa = [(NSString *)v68 UTF8String];
          unint64_t v80 = (v63 >> 3);
          unint64_t v81 = *((void *)&__p + 1);
          if (*((void *)&__p + 1))
          {
            uint8x8_t v82 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
            v82.i16[0] = vaddlv_u8(v82);
            if (v82.u32[0] > 1uLL)
            {
              unint64_t v63 = (v63 >> 3);
              if (*((void *)&__p + 1) <= v80) {
                unint64_t v63 = v80 % *((void *)&__p + 1);
              }
            }
            else
            {
              unint64_t v63 = (DWORD2(__p) - 1) & v80;
            }
            id v83 = *(void ***)(__p + 8 * v63);
            if (v83)
            {
              uint64_t v84 = (std::string *)*v83;
              if (*v83)
              {
                do
                {
                  std::string::size_type size = v84->__r_.__value_.__l.__size_;
                  if (size == v80)
                  {
                    if (LODWORD(v84->__r_.__value_.__r.__words[2]) == v64)
                    {
                      id v107 = __sa;
                      goto LABEL_156;
                    }
                  }
                  else
                  {
                    if (v82.u32[0] > 1uLL)
                    {
                      if (size >= *((void *)&__p + 1)) {
                        size %= *((void *)&__p + 1);
                      }
                    }
                    else
                    {
                      size &= *((void *)&__p + 1) - 1;
                    }
                    if (size != v63) {
                      break;
                    }
                  }
                  uint64_t v84 = (std::string *)v84->__r_.__value_.__r.__words[0];
                }
                while (v84);
              }
            }
          }
          uint64_t v84 = (std::string *)operator new(0x30uLL);
          v84->__r_.__value_.__r.__words[0] = 0;
          v84->__r_.__value_.__l.__size_ = v80;
          LODWORD(v84->__r_.__value_.__r.__words[2]) = v64;
          v84[1].__r_.__value_.__r.__words[0] = 0;
          v84[1].__r_.__value_.__l.__size_ = 0;
          v84[1].__r_.__value_.__r.__words[2] = 0;
          float v86 = (float)(unint64_t)(*((void *)&v311 + 1) + 1);
          if (v81 && (float)(v312 * (float)v81) >= v86)
          {
            id v107 = __sa;
            goto LABEL_146;
          }
          BOOL v87 = (v81 & (v81 - 1)) != 0;
          if (v81 < 3) {
            BOOL v87 = 1;
          }
          unint64_t v88 = v87 | (2 * v81);
          unint64_t v89 = vcvtps_u32_f32(v86 / v312);
          if (v88 <= v89) {
            int8x8_t prime = (int8x8_t)v89;
          }
          else {
            int8x8_t prime = (int8x8_t)v88;
          }
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            unint64_t v81 = *((void *)&__p + 1);
          }
          if (*(void *)&prime <= v81)
          {
            if (*(void *)&prime >= v81) {
              goto LABEL_140;
            }
            unint64_t v97 = vcvtps_u32_f32((float)*((unint64_t *)&v311 + 1) / v312);
            if (v81 < 3 || (uint8x8_t v98 = (uint8x8_t)vcnt_s8((int8x8_t)v81), v98.i16[0] = vaddlv_u8(v98), v98.u32[0] > 1uLL))
            {
              unint64_t v97 = std::__next_prime(v97);
            }
            else
            {
              uint64_t v99 = 1 << -(char)__clz(v97 - 1);
              if (v97 >= 2) {
                unint64_t v97 = v99;
              }
            }
            if (*(void *)&prime <= v97) {
              int8x8_t prime = (int8x8_t)v97;
            }
            if (*(void *)&prime >= v81)
            {
              unint64_t v81 = *((void *)&__p + 1);
              goto LABEL_140;
            }
            if (prime) {
              goto LABEL_111;
            }
            id v108 = (void *)__p;
            *(void *)&long long __p = 0;
            id v107 = __sa;
            if (v108) {
              operator delete(v108);
            }
            unint64_t v81 = 0;
            *((void *)&__p + 1) = 0;
          }
          else
          {
LABEL_111:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            id v91 = operator new(8 * *(void *)&prime);
            uint64_t v92 = (void *)__p;
            *(void *)&long long __p = v91;
            if (v92) {
              operator delete(v92);
            }
            uint64_t v93 = 0;
            *((int8x8_t *)&__p + 1) = prime;
            do
              *(void *)(__p + 8 * v93++) = 0;
            while (*(void *)&prime != v93);
            NSRange v94 = (void **)v311;
            if ((void)v311)
            {
              unint64_t v95 = *(void *)(v311 + 8);
              uint8x8_t v96 = (uint8x8_t)vcnt_s8(prime);
              v96.i16[0] = vaddlv_u8(v96);
              if (v96.u32[0] > 1uLL)
              {
                if (v95 >= *(void *)&prime) {
                  v95 %= *(void *)&prime;
                }
              }
              else
              {
                v95 &= *(void *)&prime - 1;
              }
              *(void *)(__p + 8 * v95) = &v311;
              for (k = *v94; k; unint64_t v95 = v101)
              {
                unint64_t v101 = k[1];
                if (v96.u32[0] > 1uLL)
                {
                  if (v101 >= *(void *)&prime) {
                    v101 %= *(void *)&prime;
                  }
                }
                else
                {
                  v101 &= *(void *)&prime - 1;
                }
                if (v101 != v95)
                {
                  if (!*(void *)(__p + 8 * v101))
                  {
                    *(void *)(__p + 8 * v101) = v94;
                    goto LABEL_136;
                  }
                  *NSRange v94 = (void *)*k;
                  *unint64_t k = **(void **)(__p + 8 * v101);
                  **(void **)(__p + 8 * v101) = k;
                  unint64_t k = v94;
                }
                unint64_t v101 = v95;
LABEL_136:
                NSRange v94 = (void **)k;
                unint64_t k = (void *)*k;
              }
            }
            unint64_t v81 = (unint64_t)prime;
LABEL_140:
            id v107 = __sa;
          }
          if ((v81 & (v81 - 1)) != 0)
          {
            if (v81 <= v80) {
              unint64_t v63 = v80 % v81;
            }
            else {
              unint64_t v63 = v80;
            }
          }
          else
          {
            unint64_t v63 = (v81 - 1) & v80;
          }
LABEL_146:
          uint64_t v102 = __p;
          id v103 = *(std::string ***)(__p + 8 * v63);
          if (v103)
          {
            v84->__r_.__value_.__r.__words[0] = (std::string::size_type)*v103;
            goto LABEL_154;
          }
          v84->__r_.__value_.__r.__words[0] = v311;
          *(void *)&long long v311 = v84;
          *(void *)(v102 + 8 * v63) = &v311;
          if (v84->__r_.__value_.__r.__words[0])
          {
            unint64_t v104 = *(void *)(v84->__r_.__value_.__r.__words[0] + 8);
            if ((v81 & (v81 - 1)) != 0)
            {
              if (v104 >= v81) {
                v104 %= v81;
              }
            }
            else
            {
              v104 &= v81 - 1;
            }
            id v103 = (std::string **)(__p + 8 * v104);
LABEL_154:
            void *v103 = v84;
          }
          ++*((void *)&v311 + 1);
LABEL_156:
          std::string::assign(v84 + 1, v107);
          goto LABEL_157;
        }
        id v266 = 0;
LABEL_178:
        unint64_t v110 = (unint64_t)&v302;
        os_signpost_id_t v303 = 0;
        uint64_t v304 = 0;
        id v302 = &v303;
        long long v305 = 0u;
        long long v306 = 0u;
        int v307 = 1065353216;
        uint64_t v308 = 0;
        long long v298 = 0u;
        long long v299 = 0u;
        long long v300 = 0u;
        long long v301 = 0u;
        id v111 = v264;
        id v112 = [v111 countByEnumeratingWithState:&v298 objects:v333 count:16];
        if (v112)
        {
          uint64_t v113 = *(void *)v299;
          do
          {
            for (unint64_t m = 0; m != v112; unint64_t m = (char *)m + 1)
            {
              if (*(void *)v299 != v113) {
                objc_enumerationMutation(v111);
              }
              uint64_t v115 = *(void **)(*((void *)&v298 + 1) + 8 * (void)m);
              uint64_t v116 = [v111 objectForKeyedSubscript:v115];
              std::string::basic_string[abi:nn180100]<0>(v345, (char *)[v115 UTF8String]);
              id v117 = v116;
              std::string::basic_string[abi:nn180100]<0>(&v325, (char *)[v117 UTF8String]);
              ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile((uint64_t)&v302, (uint64_t)v345, (uint64_t)&v325);
              if (SBYTE7(v326) < 0) {
                operator delete((void *)v325);
              }
              if ((v346[7] & 0x80000000) != 0) {
                operator delete(v345[0]);
              }
            }
            id v112 = [v111 countByEnumeratingWithState:&v298 objects:v333 count:16];
          }
          while (v112);
        }

        std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(v303);
        os_signpost_id_t v303 = 0;
        uint64_t v304 = 0;
        id v302 = &v303;
        std::string::basic_string[abi:nn180100]<0>(v345, "tracepoint_thread_begin");
        uint64_t v118 = operator new(0x20uLL);
        *uint64_t v118 = off_745968;
        v118[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeThreadTracePoint;
        v118[2] = 0;
        v118[3] = &v302;
        uint64_t v347 = v118;
        std::string::basic_string[abi:nn180100]<0>(v348, "tracepoint_function_begin");
        id v119 = operator new(0x20uLL);
        *id v119 = off_745968;
        v119[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionBeginTracePoint;
        v119[2] = 0;
        v119[3] = &v302;
        v351[1] = v119;
        std::string::basic_string[abi:nn180100]<0>(v352, "tracepoint_function_end");
        id v120 = operator new(0x20uLL);
        void *v120 = off_745968;
        v120[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionEndTracePoint;
        v120[2] = 0;
        v120[3] = &v302;
        uint64_t v353 = v120;
        std::string::basic_string[abi:nn180100]<0>(&v354, "tracepoint_call");
        id v121 = operator new(0x20uLL);
        *id v121 = off_745968;
        v121[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionCallTracePoint;
        v121[2] = 0;
        v121[3] = &v302;
        v355[5] = v121;
        std::string::basic_string[abi:nn180100]<0>(&v356, "tracepoint_variable");
        id v122 = operator new(0x20uLL);
        *id v122 = off_745968;
        v122[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeVariableTracePoint;
        v122[2] = 0;
        v122[3] = &v302;
        v359[2] = v122;
        std::string::basic_string[abi:nn180100]<0>(v360, "tracepoint_data");
        uint64_t v123 = operator new(0x20uLL);
        void *v123 = off_745968;
        v123[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataTracePoint;
        v123[2] = 0;
        v123[3] = &v302;
        uint64_t v362 = (uint64_t)v123;
        std::string::basic_string[abi:nn180100]<0>(v363, "tracepoint_data_value");
        unint64_t v124 = operator new(0x20uLL);
        void *v124 = off_745968;
        v124[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataValueTracePoint;
        v124[2] = 0;
        v124[3] = &v302;
        v363[6] = v124;
        std::string::basic_string[abi:nn180100]<0>(&v364, "tracepoint_loop_begin_for");
        uint64_t v125 = operator new(0x28uLL);
        *uint64_t v125 = &off_7459B0;
        v125[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v125[2] = 0;
        v125[3] = &v302;
        v125[4] = 0;
        v369[1] = v125;
        std::string::basic_string[abi:nn180100]<0>(v370, "tracepoint_loop_begin_while");
        id v126 = operator new(0x28uLL);
        *id v126 = &off_7459B0;
        v126[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v126[2] = 0;
        v126[3] = &v302;
        v126[4] = 1;
        v370[6] = v126;
        std::string::basic_string[abi:nn180100]<0>(v371, "tracepoint_loop_begin_do");
        id v127 = operator new(0x28uLL);
        void *v127 = &off_7459B0;
        v127[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v127[2] = 0;
        v127[3] = &v302;
        v127[4] = 2;
        v371[6] = v127;
        std::string::basic_string[abi:nn180100]<0>(v372, "tracepoint_loop_init_begin");
        id v128 = operator new(0x28uLL);
        *id v128 = &off_7459B0;
        v128[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v128[2] = 0;
        v128[3] = &v302;
        v128[4] = 3;
        v372[6] = v128;
        std::string::basic_string[abi:nn180100]<0>(v373, "tracepoint_loop_init_end");
        long long v129 = operator new(0x28uLL);
        *long long v129 = &off_7459B0;
        v129[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v129[2] = 0;
        v129[3] = &v302;
        v129[4] = 4;
        v373[6] = v129;
        std::string::basic_string[abi:nn180100]<0>(v374, "tracepoint_loop_cond_begin");
        long long v130 = operator new(0x28uLL);
        *long long v130 = &off_7459B0;
        v130[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v130[2] = 0;
        v130[3] = &v302;
        v130[4] = 5;
        v374[6] = v130;
        std::string::basic_string[abi:nn180100]<0>(v375, "tracepoint_loop_cond_end");
        long long v131 = operator new(0x28uLL);
        *long long v131 = &off_7459B0;
        v131[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v131[2] = 0;
        v131[3] = &v302;
        uint64_t v131[4] = 6;
        v375[6] = v131;
        std::string::basic_string[abi:nn180100]<0>(v376, "tracepoint_loop_inc_begin");
        long long v132 = operator new(0x28uLL);
        void *v132 = &off_7459B0;
        v132[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v132[2] = 0;
        v132[3] = &v302;
        v132[4] = 7;
        v376[6] = v132;
        std::string::basic_string[abi:nn180100]<0>(v377, "tracepoint_loop_inc_end");
        long long v133 = operator new(0x28uLL);
        *long long v133 = &off_7459B0;
        v133[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v133[2] = 0;
        v133[3] = &v302;
        v133[4] = 8;
        v377[6] = v133;
        std::string::basic_string[abi:nn180100]<0>(v378, "tracepoint_loop_body_begin");
        long long v134 = operator new(0x28uLL);
        void *v134 = &off_7459B0;
        v134[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v134[2] = 0;
        v134[3] = &v302;
        v134[4] = 9;
        v378[6] = v134;
        std::string::basic_string[abi:nn180100]<0>(v379, "tracepoint_loop_body_end");
        long long v135 = operator new(0x28uLL);
        *long long v135 = &off_7459B0;
        v135[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v135[2] = 0;
        v135[3] = &v302;
        v135[4] = 10;
        v379[6] = v135;
        std::string::basic_string[abi:nn180100]<0>(v380, "tracepoint_loop_end");
        long long v136 = operator new(0x28uLL);
        *long long v136 = &off_7459B0;
        v136[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v136[2] = 0;
        v136[3] = &v302;
        v136[4] = 11;
        v380[6] = v136;
        std::string::basic_string[abi:nn180100]<0>(v381, "tracepoint_thread_exit");
        long long v137 = operator new(0x28uLL);
        uint64_t v138 = 0;
        void *v137 = &off_7459B0;
        v137[1] = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
        v137[2] = 0;
        v137[3] = &v302;
        v137[4] = 12;
        v381[6] = v137;
        long long v325 = 0u;
        long long v326 = 0u;
        float v327 = 1.0;
        while (2)
        {
          long long v139 = &v345[7 * v138];
          int v140 = *((char *)v139 + 23);
          CFStringRef v141 = (const std::string::value_type *)*v139;
          std::string::size_type v142 = (std::string::size_type)v139[1];
          if (v140 >= 0) {
            id v143 = (uint64_t *)&v345[7 * v138];
          }
          else {
            id v143 = (uint64_t *)*v139;
          }
          if (v140 >= 0) {
            unint64_t v144 = *((unsigned __int8 *)v139 + 23);
          }
          else {
            unint64_t v144 = (unint64_t)v139[1];
          }
          unint64_t v145 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v143, v144);
          unint64_t v146 = v145;
          unint64_t v147 = *((void *)&v325 + 1);
          if (*((void *)&v325 + 1))
          {
            uint8x8_t v148 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v325 + 8));
            v148.i16[0] = vaddlv_u8(v148);
            unint64_t v149 = v148.u32[0];
            if (v148.u32[0] > 1uLL)
            {
              unint64_t v110 = v145;
              if (v145 >= *((void *)&v325 + 1)) {
                unint64_t v110 = v145 % *((void *)&v325 + 1);
              }
            }
            else
            {
              unint64_t v110 = (*((void *)&v325 + 1) - 1) & v145;
            }
            id v150 = *(unsigned __int8 ***)(v325 + 8 * v110);
            if (v150)
            {
              for (uint64_t n = *v150; n; uint64_t n = *(unsigned __int8 **)n)
              {
                unint64_t v152 = *((void *)n + 1);
                if (v152 == v146)
                {
                  if (std::equal_to<std::string>::operator()[abi:nn180100](n + 16, (unsigned __int8 *)&v345[7 * v138])) {
                    goto LABEL_276;
                  }
                }
                else
                {
                  if (v149 > 1)
                  {
                    if (v152 >= v147) {
                      v152 %= v147;
                    }
                  }
                  else
                  {
                    v152 &= v147 - 1;
                  }
                  if (v152 != v110) {
                    break;
                  }
                }
              }
            }
          }
          long long v153 = operator new(0x48uLL);
          *long long v153 = 0;
          v153[1] = v146;
          long long v154 = (std::string *)(v153 + 2);
          if (v140 < 0)
          {
            std::string::__init_copy_ctor_external(v154, v141, v142);
          }
          else
          {
            *(_OWORD *)&v154->__r_.__value_.__l.__data_ = *(_OWORD *)v139;
            v153[4] = v139[2];
          }
          id v155 = &v345[7 * v138];
          id v156 = v155[6];
          if (v156)
          {
            uint64_t v157 = v155 + 3;
            if (v156 == (llvm::MemoryBuffer *)v157)
            {
              v153[8] = v153 + 5;
              (*((void (**)(llvm::MemoryBuffer **))*v157 + 3))(v157);
            }
            else
            {
              v153[8] = (*(uint64_t (**)(llvm::MemoryBuffer *))(*(void *)v156 + 16))(v156);
            }
          }
          else
          {
            v153[8] = 0;
          }
          float v158 = (float)(unint64_t)(*((void *)&v326 + 1) + 1);
          if (!v147 || (float)(v327 * (float)v147) < v158)
          {
            BOOL v159 = (v147 & (v147 - 1)) != 0;
            if (v147 < 3) {
              BOOL v159 = 1;
            }
            unint64_t v160 = v159 | (2 * v147);
            unint64_t v161 = vcvtps_u32_f32(v158 / v327);
            if (v160 <= v161) {
              int8x8_t v162 = (int8x8_t)v161;
            }
            else {
              int8x8_t v162 = (int8x8_t)v160;
            }
            if (*(void *)&v162 == 1)
            {
              int8x8_t v162 = (int8x8_t)2;
            }
            else if ((*(void *)&v162 & (*(void *)&v162 - 1)) != 0)
            {
              int8x8_t v162 = (int8x8_t)std::__next_prime(*(void *)&v162);
            }
            unint64_t v147 = *((void *)&v325 + 1);
            if (*(void *)&v162 <= *((void *)&v325 + 1))
            {
              if (*(void *)&v162 < *((void *)&v325 + 1))
              {
                unint64_t v169 = vcvtps_u32_f32((float)*((unint64_t *)&v326 + 1) / v327);
                if (*((void *)&v325 + 1) < 3uLL
                  || (uint8x8_t v170 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v325 + 8)),
                      v170.i16[0] = vaddlv_u8(v170),
                      v170.u32[0] > 1uLL))
                {
                  unint64_t v169 = std::__next_prime(v169);
                }
                else
                {
                  uint64_t v171 = 1 << -(char)__clz(v169 - 1);
                  if (v169 >= 2) {
                    unint64_t v169 = v171;
                  }
                }
                if (*(void *)&v162 <= v169) {
                  int8x8_t v162 = (int8x8_t)v169;
                }
                if (*(void *)&v162 >= v147)
                {
                  unint64_t v147 = *((void *)&v325 + 1);
                }
                else
                {
                  if (v162) {
                    goto LABEL_232;
                  }
                  long long v177 = (void *)v325;
                  *(void *)&long long v325 = 0;
                  if (v177) {
                    operator delete(v177);
                  }
                  unint64_t v147 = 0;
                  *((void *)&v325 + 1) = 0;
                }
              }
            }
            else
            {
LABEL_232:
              if (*(void *)&v162 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              JSObjectRef v163 = operator new(8 * *(void *)&v162);
              JSObjectRef v164 = (void *)v325;
              *(void *)&long long v325 = v163;
              if (v164) {
                operator delete(v164);
              }
              uint64_t v165 = 0;
              *((int8x8_t *)&v325 + 1) = v162;
              do
                *(void *)(v325 + 8 * v165++) = 0;
              while (*(void *)&v162 != v165);
              unint64_t v166 = (void **)v326;
              if ((void)v326)
              {
                unint64_t v167 = *(void *)(v326 + 8);
                uint8x8_t v168 = (uint8x8_t)vcnt_s8(v162);
                v168.i16[0] = vaddlv_u8(v168);
                if (v168.u32[0] > 1uLL)
                {
                  if (v167 >= *(void *)&v162) {
                    v167 %= *(void *)&v162;
                  }
                }
                else
                {
                  v167 &= *(void *)&v162 - 1;
                }
                *(void *)(v325 + 8 * v167) = &v326;
                for (iunint64_t i = *v166; ii; v167 = v173)
                {
                  unint64_t v173 = ii[1];
                  if (v168.u32[0] > 1uLL)
                  {
                    if (v173 >= *(void *)&v162) {
                      v173 %= *(void *)&v162;
                    }
                  }
                  else
                  {
                    v173 &= *(void *)&v162 - 1;
                  }
                  if (v173 != v167)
                  {
                    if (!*(void *)(v325 + 8 * v173))
                    {
                      *(void *)(v325 + 8 * v173) = v166;
                      goto LABEL_257;
                    }
                    *unint64_t v166 = (void *)*ii;
                    *iunint64_t i = **(void **)(v325 + 8 * v173);
                    **(void **)(v325 + 8 * v173) = ii;
                    iunint64_t i = v166;
                  }
                  unint64_t v173 = v167;
LABEL_257:
                  unint64_t v166 = (void **)ii;
                  iunint64_t i = (void *)*ii;
                }
              }
              unint64_t v147 = (unint64_t)v162;
            }
            if ((v147 & (v147 - 1)) != 0)
            {
              if (v146 >= v147) {
                unint64_t v110 = v146 % v147;
              }
              else {
                unint64_t v110 = v146;
              }
            }
            else
            {
              unint64_t v110 = (v147 - 1) & v146;
            }
          }
          uint64_t v174 = v325;
          id v175 = *(void **)(v325 + 8 * v110);
          if (v175)
          {
            *long long v153 = *v175;
            goto LABEL_274;
          }
          *long long v153 = v326;
          *(void *)&long long v326 = v153;
          *(void *)(v174 + 8 * v110) = &v326;
          if (*v153)
          {
            unint64_t v176 = *(void *)(*v153 + 8);
            if ((v147 & (v147 - 1)) != 0)
            {
              if (v176 >= v147) {
                v176 %= v147;
              }
            }
            else
            {
              v176 &= v147 - 1;
            }
            id v175 = (void *)(v325 + 8 * v176);
LABEL_274:
            void *v175 = v153;
          }
          ++*((void *)&v326 + 1);
LABEL_276:
          if (++v138 != 20) {
            continue;
          }
          break;
        }
        uint64_t v178 = 1120;
        do
        {
          std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__value_func[abi:nn180100](&v344[v178 + 136]);
          if ((char)v344[v178 + 135] < 0) {
            operator delete(*(void **)&v344[v178 + 112]);
          }
          v178 -= 56;
        }
        while (v178);
        if (((v313.i64[1] - v313.i64[0]) & 0x7FFFFFFF8) != 0)
        {
          unint64_t v179 = 0;
          uint64_t v278 = ((unint64_t)(v313.i64[1] - v313.i64[0]) >> 3);
          do
          {
            uint64_t v180 = v313.i64[0];
            v345[0] = (llvm::MemoryBuffer *)v346;
            v345[1] = (llvm::MemoryBuffer *)0x800000000;
            long long v349 = v351;
            uint64_t v350 = 0x800000000;
            uint64_t v353 = v355;
            uint64_t v354 = 0x800000000;
            id v357 = v359;
            uint64_t v358 = 0x800000000;
            id v361 = v363;
            uint64_t v362 = 0x800000000;
            v365 = v369;
            uint64_t v366 = v369;
            uint64_t v367 = 32;
            int v368 = 0;
            llvm::DebugInfoFinder::processModule((llvm::DebugInfoFinder *)v345, *(const llvm::Module **)(v313.i64[0] + 8 * v179));
            if (v350)
            {
              if (*((void *)&__p + 1))
              {
                uint8x8_t v181 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
                v181.i16[0] = vaddlv_u8(v181);
                if (v181.u32[0] > 1uLL)
                {
                  unint64_t v182 = v179;
                  if (*((void *)&__p + 1) <= v179) {
                    unint64_t v182 = v179 % *((void *)&__p + 1);
                  }
                }
                else
                {
                  unint64_t v182 = (*((void *)&__p + 1) + 0xFFFFFFFFLL) & v179;
                }
                long long v183 = *(uint64_t ***)(__p + 8 * v182);
                if (v183)
                {
                  for (juint64_t j = *v183; jj; juint64_t j = (uint64_t *)*jj)
                  {
                    unint64_t v185 = jj[1];
                    if (v185 == v179)
                    {
                      if (v179 == *((_DWORD *)jj + 4))
                      {
                        uint64_t v216 = (uint64_t)(jj + 3);
                        goto LABEL_310;
                      }
                    }
                    else
                    {
                      if (v181.u32[0] > 1uLL)
                      {
                        if (v185 >= *((void *)&__p + 1)) {
                          v185 %= *((void *)&__p + 1);
                        }
                      }
                      else
                      {
                        v185 &= *((void *)&__p + 1) - 1;
                      }
                      if (v185 != v182) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v216 = *(void *)(v180 + 8 * v179) + 192;
LABEL_310:
              if (*(char *)(v216 + 23) < 0) {
                std::string::__init_copy_ctor_external(&v324, *(const std::string::value_type **)v216, *(void *)(v216 + 8));
              }
              else {
                std::string v324 = *(std::string *)v216;
              }
              std::string::basic_string[abi:nn180100]<0>(v322, "__trace.base_id");
              if ((v323 & 0x80u) == 0) {
                size_t v186 = v323;
              }
              else {
                size_t v186 = (size_t)v322[1];
              }
              std::string::basic_string[abi:nn180100]((uint64_t)&v317, v186 + 1);
              if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v187 = &v317;
              }
              else {
                long long v187 = (std::string *)v317.__r_.__value_.__r.__words[0];
              }
              if (v186)
              {
                if ((v323 & 0x80u) == 0) {
                  long long v188 = v322;
                }
                else {
                  long long v188 = (void **)v322[0];
                }
                memmove(v187, v188, v186);
              }
              *(_WORD *)((char *)&v187->__r_.__value_.__l.__data_ + v186) = 46;
              if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v189 = &v324;
              }
              else {
                long long v189 = (std::string *)v324.__r_.__value_.__r.__words[0];
              }
              if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v190 = HIBYTE(v324.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v190 = v324.__r_.__value_.__l.__size_;
              }
              long long v191 = std::string::append(&v317, (const std::string::value_type *)v189, v190);
              std::string::size_type v192 = v191->__r_.__value_.__r.__words[2];
              long long v320 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
              std::string::size_type v321 = v192;
              v191->__r_.__value_.__l.__size_ = 0;
              v191->__r_.__value_.__r.__words[2] = 0;
              v191->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v317.__r_.__value_.__l.__data_);
              }
              int v319 = 0;
              uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
              if (GlobalVariable || (uint64_t GlobalVariable = llvm::Module::getGlobalVariable()) != 0)
              {
                uint64_t v194 = *(void *)(GlobalVariable - 32);
                if (v194)
                {
                  unsigned int v195 = *(_DWORD *)(v194 + 32);
                  if (v195 > 0x40) {
                    uint64_t v196 = **(void **)(v194 + 24);
                  }
                  else {
                    uint64_t v196 = (uint64_t)(*(void *)(v194 + 24) << -(char)v195) >> -(char)v195;
                  }
                  int v319 = v196;
                }
              }
              v317.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint_library_version";
              __int16 v318 = 259;
              NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
              if (NamedMetadata)
              {
                uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
                uint64_t v199 = *(void *)(*(void *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
                unsigned int v200 = *(_DWORD *)(v199 + 32);
                if (v200 > 0x40) {
                  LODWORD(v199) = **(_DWORD **)(v199 + 24);
                }
                else {
                  uint64_t v199 = (uint64_t)(*(void *)(v199 + 24) << -(char)v200) >> -(char)v200;
                }
                uint64_t v308 = v199;
              }
              v316[0] = &v319;
              v316[1] = (int *)&v325;
              v316[2] = (int *)v345;
              v317.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint.sets";
              __int16 v318 = 259;
              uint64_t v201 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
              if (v201)
              {
                uint64_t v202 = v201;
                int NumOperands = llvm::NamedMDNode::getNumOperands(v201);
                if (NumOperands)
                {
                  int v204 = NumOperands;
                  for (kunint64_t k = 0; kk != v204; ++kk)
                  {
                    uint64_t v206 = llvm::NamedMDNode::getOperand(v202);
                    if (v206)
                    {
                      uint64_t v207 = *(void *)(v206 - 8 * *(unsigned int *)(v206 + 8) + 16);
                      if (v207) {
                        long long v208 = (uint64_t *)(v207 - 8 * *(unsigned int *)(v207 + 8));
                      }
                      else {
                        long long v208 = 0;
                      }
                      while (v208 != (uint64_t *)v207)
                      {
                        uint64_t v209 = *v208++;
                        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()(v316, v209);
                      }
                    }
                  }
                }
              }
              else
              {
                v317.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint";
                __int16 v318 = 259;
                BOOL v210 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
                if (v210)
                {
                  unsigned int v211 = v210;
                  int v212 = llvm::NamedMDNode::getNumOperands(v210);
                  if (v212)
                  {
                    int v213 = v212;
                    for (munint64_t m = 0; mm != v213; ++mm)
                    {
                      uint64_t v215 = llvm::NamedMDNode::getOperand(v211);
                      ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()(v316, v215);
                    }
                  }
                }
              }
              if (SHIBYTE(v321) < 0) {
                operator delete((void *)v320);
              }
              if ((char)v323 < 0) {
                operator delete(v322[0]);
              }
              if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v324.__r_.__value_.__l.__data_);
              }
            }
            if (v366 != v365) {
              free(v366);
            }
            if (v361 != v363) {
              free(v361);
            }
            if (v357 != v359) {
              free(v357);
            }
            if (v353 != v355) {
              free(v353);
            }
            if (v349 != v351) {
              free(v349);
            }
            if ((unsigned char *)v345[0] != v346) {
              free(v345[0]);
            }
            ++v179;
          }
          while (v179 != v278);
        }
        long long v295 = 0;
        long long v296 = 0;
        long long v297 = 0;
        if (v304)
        {
          v345[0] = (llvm::MemoryBuffer *)&dword_4;
          ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)&v295, v345);
          ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)&v295, &v308);
          uint64_t v217 = v302;
          if (v302 != &v303)
          {
            do
            {
              int v218 = v217[5];
              v345[0] = (llvm::MemoryBuffer *)v217[4];
              v317.__r_.__value_.__r.__words[0] = v217[6] - v218;
              ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)&v295, v345);
              ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)&v295, &v317);
              BOOL v219 = (char *)v217[11];
              uint64_t v220 = v217[12];
              uint64_t v221 = v220 - v219;
              if (v220 - v219 >= 1)
              {
                id v222 = v296;
                if (v297 - v296 >= v221)
                {
                  if (v221 <= 0)
                  {
                    id v229 = v296;
                    id v230 = &v296[-v221];
                    uint64_t v231 = v296;
                    if (&v296[-v221] < v296)
                    {
                      uint64_t v232 = v220 - v219 - (v221 & ~(v221 >> 63));
                      uint64_t v231 = v296;
                      do
                      {
                        char v233 = *v230++;
                        *v231++ = v233;
                        --v232;
                      }
                      while (v232);
                    }
                    long long v296 = v231;
                    if (v229 != &v222[v221]) {
                      memmove(&v222[v221], v222, v229 - &v222[v221]);
                    }
                    if (v220 != v219) {
                      memmove(v222, v219, v220 - v219);
                    }
                  }
                  else
                  {
                    if (v220 != v219) {
                      memmove(v296, v217[11], v220 - v219);
                    }
                    long long v296 = &v222[v220 - v219];
                  }
                }
                else
                {
                  id v223 = (char *)v295;
                  int64_t v224 = v296 - (unsigned char *)v295;
                  uint64_t v225 = v296 - (unsigned char *)v295 + v221;
                  if (v225 < 0) {
                    abort();
                  }
                  unint64_t v226 = v297 - (unsigned char *)v295;
                  if (2 * (v297 - (unsigned char *)v295) > (unint64_t)v225) {
                    uint64_t v225 = 2 * v226;
                  }
                  if (v226 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v227 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v227 = v225;
                  }
                  if (v227) {
                    id v228 = (char *)operator new(v227);
                  }
                  else {
                    id v228 = 0;
                  }
                  uint64_t v234 = &v228[v224];
                  id v235 = &v228[v224 + v221];
                  int64_t v236 = v224;
                  do
                  {
                    char v237 = *v219++;
                    v228[v236++] = v237;
                    --v221;
                  }
                  while (v221);
                  if (v222 != v223)
                  {
                    do
                    {
                      v228[v224 - 1] = v223[v224 - 1];
                      --v224;
                    }
                    while (v224);
                    uint64_t v234 = v228;
                  }
                  uint64_t v238 = v295;
                  long long v295 = v234;
                  long long v296 = v235;
                  long long v297 = &v228[v227];
                  if (v238) {
                    operator delete(v238);
                  }
                }
              }
              id v239 = v217[1];
              if (v239)
              {
                do
                {
                  id v240 = (void **)v239;
                  id v239 = (void *)*v239;
                }
                while (v239);
              }
              else
              {
                do
                {
                  id v240 = (void **)v217[2];
                  BOOL v241 = *v240 == v217;
                  uint64_t v217 = v240;
                }
                while (!v241);
              }
              uint64_t v217 = v240;
            }
            while (v240 != &v303);
          }
          v345[0] = (llvm::MemoryBuffer *)-1;
          ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)&v295, v345);
          v345[0] = *((llvm::MemoryBuffer **)&v306 + 1);
          ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)&v295, v345);
          for (nuint64_t n = (uint64_t *)v306; nn; nuint64_t n = (uint64_t *)*nn)
          {
            id v243 = (llvm::MemoryBuffer *)*((unsigned __int8 *)nn + 39);
            if ((char)v243 < 0) {
              id v243 = (llvm::MemoryBuffer *)nn[3];
            }
            v345[0] = v243;
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)&v295, v345);
            int v244 = *((char *)nn + 39);
            if (v244 >= 0) {
              id v245 = nn + 2;
            }
            else {
              id v245 = (unsigned char *)nn[2];
            }
            if (v244 >= 0) {
              uint64_t v246 = *((unsigned __int8 *)nn + 39);
            }
            else {
              uint64_t v246 = nn[3];
            }
            ShaderDebugger::Metadata::MDSerializer::write((unint64_t *)&v295, v245, v246);
            uint64_t v247 = (llvm::MemoryBuffer *)*((unsigned __int8 *)nn + 63);
            if ((char)v247 < 0) {
              uint64_t v247 = (llvm::MemoryBuffer *)nn[6];
            }
            v345[0] = v247;
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)&v295, v345);
            int v248 = *((char *)nn + 63);
            if (v248 >= 0) {
              long long v249 = nn + 5;
            }
            else {
              long long v249 = (unsigned char *)nn[5];
            }
            if (v248 >= 0) {
              uint64_t v250 = *((unsigned __int8 *)nn + 63);
            }
            else {
              uint64_t v250 = nn[6];
            }
            ShaderDebugger::Metadata::MDSerializer::write((unint64_t *)&v295, v249, v250);
          }
          uint64_t v251 = v308;
        }
        else
        {
          uint64_t v251 = 0;
        }
        long long v253 = (void *)v326;
        if ((void)v326)
        {
          do
          {
            long long v254 = (void *)*v253;
            std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>((uint64_t)(v253 + 2));
            operator delete(v253);
            long long v253 = v254;
          }
          while (v254);
        }
        long long v255 = (void *)v325;
        *(void *)&long long v325 = 0;
        if (v255) {
          operator delete(v255);
        }
        long long v256 = v295;
        if (v295 == v296)
        {
          GTShaderDebuggerMDSerializerError(2u, @"Metadata serialization error");
          id v266 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v251 = 0;
          id v252 = 0;
          if (v256) {
LABEL_442:
          }
            operator delete(v256);
        }
        else
        {
          id v252 = +[NSData dataWithBytes:v295 length:v296 - (unsigned char *)v295];
          if (v256) {
            goto LABEL_442;
          }
        }
        ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&v302);
LABEL_444:
        std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)&__p);
        v345[0] = (llvm::MemoryBuffer *)&v313;
        std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100]((void ***)v345);
        llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v315);
        llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v343);
        if ((void)v341)
        {
          *((void *)&v341 + 1) = v341;
          operator delete((void *)v341);
        }
        if (SHIBYTE(v340) < 0) {
          operator delete(*((void **)&v339 + 1));
        }
        if (SBYTE7(v339) < 0) {
          operator delete((void *)v338);
        }
        if (SBYTE7(v336) < 0) {
          operator delete((void *)v335);
        }

        id v257 = v266;
        long long v258 = v257;
        if (v252)
        {
          objc_storeStrong((id *)(v279 + 152), v252);
          *(void *)(v279 + 160) = v251;
        }
        else
        {
          uint64_t v259 = [v257 localizedDescription];
          long long v260 = (void *)v259;
          long long v261 = @"Unknown error";
          if (v259) {
            long long v261 = (__CFString *)v259;
          }
          long long v262 = v261;

          long long v263 = [@"Failed to process debug information: " stringByAppendingString:v262];

          if (v265)
          {
            GTShaderDebuggerMakeError(4u, v263, @"Try updating your target device to the latest OS version or try matching your deployment target version to the target device", 0, 0);
            void *v265 = (id)objc_claimAutoreleasedReturnValue();
          }
        }
        id v7 = v267;
        if (!v252)
        {
          uint64_t v8 = 0;
          goto LABEL_176;
        }
        goto LABEL_2;
      }
      goto LABEL_5;
    }
  }
  if (v265)
  {
    GTShaderDebuggerMakeError(1u, @"Internal error: Failed to process executable debug information", 0, 0, 0);
    void *v265 = (id)objc_claimAutoreleasedReturnValue();
  }

  uint64_t v8 = 0;
  id v7 = v267;
LABEL_176:

  return v8;
}

void sub_2EF5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char **a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v66) {
    operator delete(v66);
  }
  ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&a66);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)&STACK[0x230]);
  STACK[0x6A8] = (unint64_t)&STACK[0x260];
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x6A8]);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&STACK[0x280]);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(a10);
  long long v68 = (void *)STACK[0x5D8];
  if (STACK[0x5D8])
  {
    STACK[0x5E0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x5D7]) < 0) {
    operator delete((void *)STACK[0x5C0]);
  }
  if (SLOBYTE(STACK[0x5BF]) < 0) {
    operator delete((void *)STACK[0x5A8]);
  }
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }

  _Unwind_Resume(a1);
}

uint64_t GTShaderDebuggerMakePSOCompute(uint64_t a1, void *a2, uint64_t a3, apr_allocator_t *a4)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, a4);
  id v6 = *(void **)a1;
  id v67 = *(id *)(*(void *)a1 + 8);
  long long v66 = [v67 defaultDevice];
  id v7 = *(uint64_t **)(*v6 + 40);
  id v8 = [*(id *)(a1 + 96) mutableCopy];
  uint64_t v63 = v6[1422];
  uint64_t Object = GTMTLSMContext_getObject(**(void **)(*v6 + 40), v63, **(void **)(a1 + 88));
  memset(v76, 0, 512);
  GTMTLSMComputePipelineState_computePipelineDescriptor(v7, (uint64_t)Object, v76, newpool);
  id v10 = [v67 computePipelineDescriptorMap];
  id v11 = [v10 mutableCopy];

  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id v12 = v8;
  id v13 = [v12 countByEnumeratingWithState:&v72 objects:v80 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v73;
    do
    {
      for (uint64_t i = 0; (id)i != v13; ++i)
      {
        if (*(void *)v73 != v14) {
          objc_enumerationMutation(v12);
        }
        uint64_t v15 = *(void *)(*((void *)&v72 + 1) + 8 * i);
        uint64_t v16 = [v12 objectForKeyedSubscript:v15];
        if (([v16 conformsToProtocol:&OBJC_PROTOCOL___MTLFunction] & 1) != 0
          || [v16 conformsToProtocol:&OBJC_PROTOCOL___MTLDynamicLibrary])
        {
          [v11 setObject:v16 forKeyedSubscript:v15];
        }
      }
      id v13 = [v12 countByEnumeratingWithState:&v72 objects:v80 count:16];
    }
    while (v13);
  }

  uint64_t v17 = MakeMTLComputePipelineDescriptorWithoutResourceIndex((uint64_t)v76, v11);
  uint64_t v18 = [v67 computePipelineStateForKey:v63];
  [v17 setMaxTotalThreadsPerThreadgroup:[v18 maxTotalThreadsPerThreadgroup]];

  if ((GT_SUPPORT_0 & 0x10000) != 0) {
    [v17 setDriverCompilerOptions:(unint64_t)&off_759508 & ((uint64_t)(*(void *)(a1 + 208) << 59) >> 63)];
  }
  uint64_t v19 = *(void *)(a1 + 208);
  if ((v19 & 4) != 0)
  {
    uint64_t v20 = [v17 computeFunction];
    id v21 = [v17 preloadedLibraries];
    uint64_t v22 = _GetPreloadedDylibsForGlobalRelocation(a1, v20, v21, a2);

    if (!v22) {
      goto LABEL_28;
    }
    [v17 setPreloadedLibraries:v22];
    unint64_t v23 = (char *)[v22 count];
    if (v78 <= 1u) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v78;
    }
    [v17 setMaxCallStackDepth:&v23[v24]];

    uint64_t v19 = *(void *)(a1 + 208);
  }
  if ((v19 & 2) == 0) {
    goto LABEL_25;
  }
  uint64_t v25 = [v17 preloadedLibraries];
  uint64_t v26 = _GetPreloadedDylibsForGlobalBinding(a1, v25, a2);

  if (v26)
  {
    [v17 setPreloadedLibraries:v26];
    id v27 = (char *)[v26 count];
    if (v78 <= 1u) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v78;
    }
    [v17 setMaxCallStackDepth:&v27[v28]];

    uint64_t v19 = *(void *)(a1 + 208);
LABEL_25:
    if ((v19 & 6) == 0)
    {
      id v29 = [v67 computePipelineDescriptorMap];
      uint64_t v30 = +[NSNumber numberWithUnsignedLongLong:v77];
      id v31 = [v29 objectForKeyedSubscript:v30];

      if (v31) {
        uint64_t i = (uint64_t)[v66 loadDynamicLibrariesForFunction:v31 insertLibraries:&__NSArray0__struct error:0];
      }
      else {
        uint64_t i = 0;
      }
      if ([(id)i count])
      {
        uint64_t v34 = [v17 preloadedLibraries];
        id v35 = [v34 mutableCopy];

        [v35 addObjectsFromArray:i];
        id v36 = [v35 copy];
        [v17 setPreloadedLibraries:v36];

        uint64_t v37 = (char *)[v35 count];
        if (v78 <= 1u) {
          uint64_t v38 = 1;
        }
        else {
          uint64_t v38 = v78;
        }
        [v17 setMaxCallStackDepth:&v37[v38]];
      }
    }
    if ([v66 supportsFamily:1009]) {
      [v17 setMaxCallStackDepth:((char *)[v17 maxCallStackDepth]) + 1];
    }
    id v70 = 0;
    id v71 = 0;
    id v39 = [v66 newComputePipelineStateWithDescriptor:v17 options:0x200000 reflection:&v71 error:&v70];
    id v65 = v71;
    id v40 = v70;
    uint64_t v32 = v40;
    if (v39 || [v40 code] != (char *)&def_1C1270 + 3)
    {
      int v41 = 0;
    }
    else
    {
      uint64_t i = [v32 domain];
      if ([(id)i containsString:@"CompilerError"])
      {

        goto LABEL_50;
      }
      int v41 = 1;
    }
    if ([v32 code] != &dword_4)
    {
      if (v41) {
LABEL_53:
      }

LABEL_54:
      if (v39)
      {
        uint64_t v47 = +[NSNumber numberWithUnsignedLongLong:v63];
        [v12 setObject:v39 forKeyedSubscript:v47];

        unsigned int v48 = [v65 traceBufferIndex];
        if (v48 == -1) {
          uint64_t CurrentEncoderFreeBindingSlotIndex = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t CurrentEncoderFreeBindingSlotIndex = v48;
        }
        if ((*(unsigned char *)(a1 + 208) & 2) != 0) {
          uint64_t CurrentEncoderFreeBindingSlotIndex = _GetCurrentEncoderFreeBindingSlotIndex((void *)(a1 + 8));
        }
        if (CurrentEncoderFreeBindingSlotIndex != 0x7FFFFFFFFFFFFFFFLL || (*(unsigned char *)(a1 + 208) & 4) != 0)
        {
          id v50 = [v12 copy];
          uint64_t v51 = *(void **)(a1 + 96);
          *(void *)(a1 + 96) = v50;

          id v52 = [v65 constantSamplerUniqueIdentifiers];
          uint64_t v53 = [v65 constantSamplerDescriptors];
          uint64_t v54 = _MakeConstantSamplers(v52, v53);
          id v55 = *(void **)(a1 + 136);
          *(void *)(a1 + 136) = v54;

          id v56 = [v65 bindings];
          uint64_t v57 = _MakeBindings(v56);
          uint64_t v58 = *(void **)(a1 + 128);
          *(void *)(a1 + 128) = v57;

          *(void *)(a1 + 144) = CurrentEncoderFreeBindingSlotIndex;
          uint64_t v33 = 1;
          goto LABEL_74;
        }
        if (a2)
        {
          GTShaderDebuggerMakeError(1u, @"Internal error: Failed to set up GPU data buffer", 0, 0, 0);
          uint64_t v33 = 0;
          *a2 = (id)objc_claimAutoreleasedReturnValue();
LABEL_74:

          goto LABEL_75;
        }
      }
      else if (a2)
      {
        id v59 = [v32 description];
        if ([v59 localizedCaseInsensitiveContainsString:@"Undefined symbol"])
        {
          *a2 = v32;
        }
        else
        {
          if ((*(void *)(a1 + 208) & 0x10) != 0) {
            unsigned int v60 = 4;
          }
          else {
            unsigned int v60 = 2;
          }
          GTShaderDebuggerMakeError(v60, @"Failed to set up compute pipeline state for debugging", 0, v32, 0);
          id v61 = objc_claimAutoreleasedReturnValue();
          *a2 = v61;
        }
      }
      uint64_t v33 = 0;
      goto LABEL_74;
    }
    long long v42 = [v32 domain];
    unsigned int v43 = [v42 containsString:@"AGXMetal"];

    if (v41)
    {

      if ((v43 & 1) == 0) {
        goto LABEL_54;
      }
    }
    else if (!v43)
    {
      goto LABEL_54;
    }
LABEL_50:
    if ((GT_SUPPORT_0 & 0x4000) != 0 && [v17 maxTotalThreadsPerThreadgroup] == &stru_3D8.size)
    {
      [v17 setMaxTotalThreadsPerThreadgroup:512];
      id v68 = v32;
      id v69 = v65;
      id v44 = [v66 newComputePipelineStateWithDescriptor:v17 options:0x200000 reflection:&v69 error:&v68];
      id v45 = v69;

      id v46 = v68;
      uint64_t i = (uint64_t)v39;
      uint64_t v32 = v46;
      id v65 = v45;
      id v39 = v44;
      goto LABEL_53;
    }
    goto LABEL_54;
  }
LABEL_28:
  uint64_t v32 = 0;
  uint64_t v33 = 0;
LABEL_75:

  apr_pool_destroy(newpool);
  return v33;
}

void sub_2EFF54(_Unwind_Exception *a1)
{
  apr_pool_destroy(*(apr_pool_t **)(v1 - 232));
  _Unwind_Resume(a1);
}

id _GetPreloadedDylibsForGlobalRelocation(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = *(id *)(*(void *)a1 + 8);
  id v10 = [v9 defaultDevice];
  id v11 = *(id *)(a1 + 112);
  if (![v11 count])
  {
    if (a4)
    {
      if ((*(void *)(a1 + 208) & 0x10) != 0) {
        unsigned int v18 = 4;
      }
      else {
        unsigned int v18 = 1;
      }
      GTShaderDebuggerMakeError(v18, @"Internal error: debug dylib not found", 0, 0, 0);
      uint64_t v19 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v19 = 0;
    }
    goto LABEL_44;
  }
  id v50 = a4;
  uint64_t v51 = a1;
  id v53 = 0;
  id v12 = v10;
  id v13 = objc_alloc_init((Class)MTLCompileOptions);
  [v13 setLibraryType:1];
  [v13 setLanguageVersion:131076];
  uint64_t v14 = +[NSString stringWithFormat:@"@executable_path/%@.metallib", @"libtracebuffer_gr"];
  [v13 setInstallName:v14];

  [v13 setCompileSymbolVisibility:1];
  [v13 setAdditionalCompilerArguments:@"-fexternally-initialized"];
  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "extern device void * constant trace_buffer [[ clang::externally_initialized ]] __asm(\"trace.buffer\");\n"
    "extern \"C\" {\n"
    "  [[gnu::visibility(\"default\")]] device void *__tracepoint_get_trace_buffer() {\n"
    "    return trace_buffer;\n"
    "  }\n"
  uint64_t v15 = "}\n");
  id v16 = [v12 newLibraryWithSource:v15 options:v13 error:&v53];

  if (v16) {
    id v17 = [v12 newDynamicLibrary:v16 error:&v53];
  }
  else {
    id v17 = 0;
  }

  id v20 = v53;
  if (!v17)
  {
    if (v50)
    {
      if ((*(void *)(v51 + 208) & 0x10) != 0) {
        unsigned int v39 = 4;
      }
      else {
        unsigned int v39 = 1;
      }
      GTShaderDebuggerMakeError(v39, @"Internal error: debug dylib setup failed", 0, v20, 0);
      uint64_t v19 = 0;
      *id v50 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v19 = 0;
    }
    id v37 = v20;
    goto LABEL_43;
  }
  id v21 = objc_alloc_init((Class)NSMutableArray);
  [v21 addObjectsFromArray:v8];
  [v21 addObjectsFromArray:v11];
  id v49 = v17;
  [v21 addObject:v17];
  id v22 = [objc_alloc((Class)MTLBufferRelocation) initWithSymbolName:@"trace.buffer" buffer:*(void *)(v51 + 184) offset:0];
  uint64_t v47 = v20;
  id v52 = v20;
  id v23 = v22;
  unsigned int v48 = v21;
  id v24 = [v12 loadDynamicLibrariesForFunction:v7 insertLibraries:v21 error:&v52];
  uint64_t v19 = v24;
  if (!v24) {
    goto LABEL_27;
  }
  id v43 = v11;
  id v44 = v10;
  id v45 = v9;
  id v46 = v8;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  id v42 = v24;
  id v25 = v24;
  id v26 = [v25 countByEnumeratingWithState:&v54 objects:v59 count:16];
  if (!v26) {
    goto LABEL_26;
  }
  id v27 = v26;
  uint64_t v28 = *(void *)v55;
  do
  {
    for (uint64_t i = 0; i != v27; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v55 != v28) {
        objc_enumerationMutation(v25);
      }
      uint64_t v30 = *(void **)(*((void *)&v54 + 1) + 8 * i);
      id v31 = [v30 installName];
      if ([v31 containsString:@"libtracepoint"])
      {
      }
      else
      {
        uint64_t v32 = [v30 installName];
        unsigned int v33 = [v32 containsString:@"libtracebuffer_gr"];

        if (!v33) {
          continue;
        }
      }
      uint64_t v34 = [v30 relocations];
      id v35 = v34;
      if (v34)
      {
        [v34 arrayByAddingObject:v23];
      }
      else
      {
        id v58 = v23;
        +[NSArray arrayWithObjects:&v58 count:1];
      id v36 = };
      [v30 setRelocations:v36];
    }
    id v27 = [v25 countByEnumeratingWithState:&v54 objects:v59 count:16];
  }
  while (v27);
LABEL_26:

  id v8 = v46;
  id v10 = v44;
  id v9 = v45;
  uint64_t v19 = v42;
  id v11 = v43;
LABEL_27:

  id v37 = v52;
  if (v19)
  {
    id v38 = v19;
  }
  else if (v50)
  {
    if ((*(void *)(v51 + 208) & 0x10) != 0) {
      unsigned int v40 = 4;
    }
    else {
      unsigned int v40 = 1;
    }
    GTShaderDebuggerMakeError(v40, @"Internal error: could not load debug dylib", 0, v37, 0);
    *id v50 = (id)objc_claimAutoreleasedReturnValue();
  }

  id v17 = v49;
LABEL_43:

LABEL_44:

  return v19;
}

id _GetPreloadedDylibsForGlobalBinding(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(id *)(*(void *)a1 + 8);
  id v7 = [v6 defaultDevice];
  id v8 = *(id *)(a1 + 112);
  if ([v8 count])
  {
    uint64_t CurrentEncoderFreeBindingSlotIndex = _GetCurrentEncoderFreeBindingSlotIndex((void *)(a1 + 8));
    if (CurrentEncoderFreeBindingSlotIndex != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v13 = CurrentEncoderFreeBindingSlotIndex;
      id v26 = 0;
      id v14 = v7;
      id v15 = objc_alloc_init((Class)MTLCompileOptions);
      [v15 setLibraryType:1];
      [v15 setLanguageVersion:196610];
      id v16 = +[NSString stringWithFormat:@"@executable_path/%@.metallib", @"libtracebuffer_gb"];
      [v15 setInstallName:v16];

      [v15 setCompileSymbolVisibility:1];
      CFStringRef v27 = @"GLOBAL_BINDING";
      id v17 = +[NSNumber numberWithInt:v13];
      uint64_t v28 = v17;
      unsigned int v18 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
      [v15 setPreprocessorMacros:v18];

      +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "device void * constant trace_buffer [[ buffer(GLOBAL_BINDING) ]];\n"
        "extern \"C\" {\n"
        "  [[gnu::visibility(\"default\")]] device void *__tracepoint_get_trace_buffer() {\n"
        "    return trace_buffer;\n"
        "  }\n"
      uint64_t v19 = "}\n");
      id v20 = [v14 newLibraryWithSource:v19 options:v15 error:&v26];

      if (v20) {
        id v21 = [v14 newDynamicLibrary:v20 error:&v26];
      }
      else {
        id v21 = 0;
      }

      id v22 = v26;
      if (v21)
      {
        id v23 = objc_alloc_init((Class)NSMutableArray);
        [v23 addObjectsFromArray:v5];
        [v23 addObjectsFromArray:v8];
        [v23 addObject:v21];
        id v12 = [v23 copy];
      }
      else if (a3)
      {
        if ((*(void *)(a1 + 208) & 0x10) != 0) {
          unsigned int v24 = 4;
        }
        else {
          unsigned int v24 = 1;
        }
        GTShaderDebuggerMakeError(v24, @"Internal error: debug dylib setup failed", 0, v22, 0);
        id v12 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v12 = 0;
      }

      goto LABEL_24;
    }
    if (a3)
    {
      id v10 = @"Unable to debug pipeline - no available buffer binding slot";
      unsigned int v11 = 4;
LABEL_10:
      GTShaderDebuggerMakeError(v11, v10, 0, 0, 0);
      id v12 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_24;
    }
  }
  else if (a3)
  {
    if ((*(void *)(a1 + 208) & 0x10) != 0) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 1;
    }
    id v10 = @"Internal error: debug dylib not found";
    goto LABEL_10;
  }
  id v12 = 0;
LABEL_24:

  return v12;
}

uint64_t _GetCurrentEncoderFreeBindingSlotIndex(void *a1)
{
  uint64_t v2 = 30;
  while (1)
  {
    os_signpost_id_t v3 = (void *)a1[3];
    id v4 = +[NSNumber numberWithInt:v2];
    id v5 = [v3 objectForKeyedSubscript:v4];
    if (!v5) {
      break;
    }
LABEL_7:

LABEL_8:
    uint64_t v2 = (v2 - 1);
    if (v2 == -1) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  id v6 = (void *)a1[2];
  id v5 = +[NSNumber numberWithInt:v2];
  id v7 = [v6 objectForKeyedSubscript:v5];
  if (v7)
  {
LABEL_6:

    goto LABEL_7;
  }
  id v8 = (void *)a1[6];
  id v9 = +[NSNumber numberWithInt:v2];
  id v10 = [v8 objectForKeyedSubscript:v9];
  if (v10)
  {

    id v7 = 0;
    goto LABEL_6;
  }
  unsigned int v11 = (void *)a1[7];
  id v12 = +[NSNumber numberWithInt:v2];
  uint64_t v13 = [v11 objectForKeyedSubscript:v12];

  if (v13) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2;
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

id _MakeConstantSamplers(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 count];
  if (v5 == [v4 count])
  {
    id v6 = (char *)[v4 count];
    id v7 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v6];
    id v8 = v7;
    if (v6)
    {
      id v9 = 0;
      id v22 = v7;
      do
      {
        long long v35 = 0u;
        long long v36 = 0u;
        memset(v34, 0, sizeof(v34));
        id v10 = [v4 objectAtIndexedSubscript:v9, v22];
        MakeGTMTLSamplerDescriptor((uint64_t)v34, v10);

        unsigned int v33 = [v3 objectAtIndexedSubscript:v9];
        v37[0] = @"borderColor";
        uint64_t v32 = +[NSNumber numberWithUnsignedChar:BYTE2(v36)];
        v38[0] = v32;
        v37[1] = @"compareFunction";
        id v31 = +[NSNumber numberWithUnsignedChar:BYTE3(v36)];
        v38[1] = v31;
        v37[2] = @"lodMinClamp";
        LODWORD(v11) = HIDWORD(v35);
        uint64_t v30 = +[NSNumber numberWithFloat:v11];
        v38[2] = v30;
        v37[3] = @"lodMaxClamp";
        LODWORD(v12) = DWORD2(v35);
        id v29 = +[NSNumber numberWithFloat:v12];
        void v38[3] = v29;
        void v37[4] = @"lodAverage";
        uint64_t v28 = +[NSNumber numberWithUnsignedChar:BYTE6(v36)];
        v38[4] = v28;
        v37[5] = @"minFilter";
        CFStringRef v27 = +[NSNumber numberWithUnsignedChar:BYTE8(v36)];
        v38[5] = v27;
        v37[6] = @"magFilter";
        id v26 = +[NSNumber numberWithUnsignedChar:BYTE7(v36)];
        v38[6] = v26;
        v37[7] = @"mipFilter";
        id v25 = +[NSNumber numberWithUnsignedChar:BYTE9(v36)];
        v38[7] = v25;
        v37[8] = @"maxAnisotropy";
        unsigned int v24 = +[NSNumber numberWithUnsignedLongLong:*((void *)&v34[0] + 1)];
        v38[8] = v24;
        v37[9] = @"normalizedCoordinates";
        id v23 = +[NSNumber numberWithUnsignedChar:BYTE10(v36)];
        v38[9] = v23;
        v37[10] = @"pixelFormat";
        uint64_t v13 = +[NSNumber numberWithUnsignedShort:(unsigned __int16)v36];
        v38[10] = v13;
        v37[11] = @"reductionMode";
        id v14 = +[NSNumber numberWithUnsignedChar:BYTE12(v36)];
        v38[11] = v14;
        v37[12] = @"rAddressMode";
        +[NSNumber numberWithUnsignedChar:BYTE11(v36)];
        v16 = id v15 = v4;
        v38[12] = v16;
        v37[13] = @"sAddressMode";
        id v17 = +[NSNumber numberWithUnsignedChar:BYTE13(v36)];
        v38[13] = v17;
        v37[14] = @"tAddressMode";
        +[NSNumber numberWithUnsignedChar:HIBYTE(v36)];
        uint64_t v19 = v18 = v3;
        v38[14] = v19;
        id v20 = +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:15];

        id v3 = v18;
        id v8 = v22;

        id v4 = v15;
        [v22 setObject:v20 forKeyedSubscript:v33];

        ++v9;
      }
      while (v6 != v9);
    }
  }
  else
  {
    id v8 = &__NSDictionary0__struct;
  }

  return v8;
}

id _MakeBindings(void *a1)
{
  id v1 = a1;
  id v18 = objc_alloc_init((Class)NSMutableArray);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v2 = v1;
  id v3 = [v2 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v3)
  {
    id v4 = v3;
    CFStringRef v5 = @"__resource_tracking_impl_trace_buffer";
    uint64_t v6 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        id v9 = [v8 name];
        if (([v9 isEqualToString:@"trace.buffer"] & 1) == 0
          && ([v9 isEqualToString:v5] & 1) == 0)
        {
          v23[0] = @"index";
          id v10 = v2;
          CFStringRef v11 = v5;
          double v12 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 index]);
          v24[0] = v12;
          v23[1] = @"type";
          uint64_t v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v8 type]);
          v24[1] = v13;
          v23[2] = @"used";
          id v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v8 isUsed]);
          v23[3] = @"name";
          v24[2] = v14;
          v24[3] = v9;
          id v15 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:4];
          [v18 addObject:v15];

          CFStringRef v5 = v11;
          id v2 = v10;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v19 objects:v25 count:16];
    }
    while (v4);
  }

  id v16 = [v18 copy];

  return v16;
}

uint64_t GTShaderDebuggerMakePSORender(id *a1, void *a2)
{
  id v3 = *a1;
  id v4 = *((id *)*a1 + 1);
  uint64_t v180 = [v4 defaultDevice];
  CFStringRef v5 = [a1[24] objectForKeyedSubscript:@"ROI"];
  uint64_t v6 = [v5 objectForKeyedSubscript:@"Type"];
  id v175 = (char *)[v6 integerValue];

  id v7 = [a1[12] mutableCopy];
  uint64_t v179 = (uint64_t)a1;
  uint64_t v177 = v3[2489];
  uint64_t Object = GTMTLSMContext_getObject(**(void **)(*(void *)*a1 + 40), v177, *(void *)a1[11]);
  unint64_t v176 = v4;
  id v9 = [v4 renderPipelineDescriptorMap];
  id v10 = [v9 mutableCopy];

  long long v191 = 0u;
  long long v192 = 0u;
  long long v189 = 0u;
  long long v190 = 0u;
  id v11 = v7;
  id v12 = [v11 countByEnumeratingWithState:&v189 objects:v193 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v190;
    do
    {
      for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v190 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void *)(*((void *)&v189 + 1) + 8 * i);
        id v17 = [v11 objectForKeyedSubscript:v16];
        if (([v17 conformsToProtocol:&OBJC_PROTOCOL___MTLFunction] & 1) != 0
          || [v17 conformsToProtocol:&OBJC_PROTOCOL___MTLDynamicLibrary])
        {
          [v10 setObject:v17 forKeyedSubscript:v16];
        }
      }
      id v13 = [v11 countByEnumeratingWithState:&v189 objects:v193 count:16];
    }
    while (v13);
  }

  uint64_t v18 = Object[8];
  if (!v18)
  {
    uint64_t v39 = Object[9];
    long long v20 = v176;
    if (!v39)
    {
      long long v57 = (unsigned __int16 *)Object[6];
      id v58 = v175;
      if (!v57)
      {

        id v89 = 0;
        id v23 = v180;
        goto LABEL_182;
      }
      long long v19 = MakeMTLRenderPipelineDescriptorWithoutResourceIndex(Object[6], v10);
      id v59 = [v176 renderPipelineDescriptorMap];
      id v23 = v180;
      uint64_t v174 = v59;
      if (v175 == (unsigned char *)&def_1C1270 + 2)
      {
        unsigned int v60 = _ObjectArrayWithMap(*((uint64_t **)v57 + 135), *((void *)v57 + 136), v59);
        id v61 = [v19 vertexLinkedFunctions];
        [v61 setFunctions:v60];

        uint64_t v62 = _ObjectArrayWithMap(*((uint64_t **)v57 + 139), *((void *)v57 + 140), v59);
        uint64_t v63 = [v19 vertexLinkedFunctions];
        [v63 setPrivateFunctions:v62];

        uint64_t v64 = _ObjectArrayWithMap(*((uint64_t **)v57 + 133), *((void *)v57 + 134), v59);
        id v65 = [v19 vertexLinkedFunctions];
        [v65 setBinaryFunctions:v64];

        long long v66 = _ObjectArrayWithMap(*((uint64_t **)v57 + 163), *((void *)v57 + 164), v59);
        [v19 setVertexPreloadedLibraries:v66];
      }
      else
      {
        int v90 = _ObjectArrayWithMap(*((uint64_t **)v57 + 111), *((void *)v57 + 112), v59);
        id v91 = [v19 fragmentLinkedFunctions];
        [v91 setFunctions:v90];

        uint64_t v92 = _ObjectArrayWithMap(*((uint64_t **)v57 + 115), *((void *)v57 + 116), v59);
        uint64_t v93 = [v19 fragmentLinkedFunctions];
        [v93 setPrivateFunctions:v92];

        NSRange v94 = _ObjectArrayWithMap(*((uint64_t **)v57 + 109), *((void *)v57 + 110), v59);
        unint64_t v95 = [v19 fragmentLinkedFunctions];
        [v95 setBinaryFunctions:v94];

        long long v66 = _ObjectArrayWithMap(*((uint64_t **)v57 + 148), *((void *)v57 + 149), v59);
        [v19 setFragmentPreloadedLibraries:v66];
      }

      long long v22 = (void *)v179;
      if ((GT_SUPPORT_0 & 0x8000) != 0) {
        [v19 setDriverCompilerOptions:(unint64_t)&off_759558 & ((uint64_t)(*(void *)(v179 + 208) << 59) >> 63)];
      }
      uint64_t v96 = *(void *)(v179 + 208);
      if ((v96 & 4) != 0)
      {
        if (v175 == (unsigned char *)&def_1C1270 + 2)
        {
          unint64_t v81 = [v19 fragmentFunction];
          [v19 fragmentPreloadedLibraries];
        }
        else
        {
          unint64_t v81 = [v19 vertexFunction];
          [v19 vertexPreloadedLibraries];
        id v109 = };
        uint64_t v112 = _GetPreloadedDylibsForGlobalRelocation(v179, v81, v109, a2);
        if (!v112) {
          goto LABEL_80;
        }
        uint64_t v113 = (void *)v112;
        if (v175 == (unsigned char *)&def_1C1270 + 2)
        {
          [v19 setFragmentPreloadedLibraries:v112];
          id v114 = (char *)[v113 count];
          if (v57[672] <= 1u) {
            uint64_t v115 = 1;
          }
          else {
            uint64_t v115 = v57[672];
          }
          [v19 setMaxFragmentCallStackDepth:&v114[v115]];
        }
        else
        {
          [v19 setVertexPreloadedLibraries:v112];
          id v120 = (char *)[v113 count];
          if (v57[675] <= 1u) {
            uint64_t v121 = 1;
          }
          else {
            uint64_t v121 = v57[675];
          }
          [v19 setMaxVertexCallStackDepth:&v120[v121]];
        }

        long long v22 = (void *)v179;
        uint64_t v96 = *(void *)(v179 + 208);
        id v58 = v175;
      }
      if ((v96 & 2) != 0)
      {
        if (v58 == (unsigned char *)&def_1C1270 + 2) {
          [v19 fragmentPreloadedLibraries];
        }
        else {
        unint64_t v81 = [v19 vertexPreloadedLibraries];
        }
        uint64_t v122 = _GetPreloadedDylibsForGlobalBinding((uint64_t)v22, v81, a2);
        if (!v122) {
          goto LABEL_119;
        }
        uint64_t v123 = (void *)v122;
        if (v58 == (unsigned char *)&def_1C1270 + 2)
        {
          [v19 setFragmentPreloadedLibraries:v122];
          unint64_t v124 = (char *)[v123 count];
          if (v57[672] <= 1u) {
            uint64_t v125 = 1;
          }
          else {
            uint64_t v125 = v57[672];
          }
          [v19 setMaxFragmentCallStackDepth:&v124[v125]];
        }
        else
        {
          [v19 setVertexPreloadedLibraries:v122];
          id v126 = (char *)[v123 count];
          if (v57[675] <= 1u) {
            uint64_t v127 = 1;
          }
          else {
            uint64_t v127 = v57[675];
          }
          [v19 setMaxVertexCallStackDepth:&v126[v127]];
        }

        long long v22 = (void *)v179;
        uint64_t v96 = *(void *)(v179 + 208);
      }
      if ((v96 & 6) == 0)
      {
        uint64_t v128 = 648;
        if (v58 == (unsigned char *)&def_1C1270 + 2) {
          uint64_t v128 = 588;
        }
        long long v129 = +[NSNumber numberWithUnsignedLongLong:*(void *)&v57[v128]];
        long long v130 = [v174 objectForKeyedSubscript:v129];

        if (v130) {
          id v131 = [v180 loadDynamicLibrariesForFunction:v130 insertLibraries:&__NSArray0__struct error:0];
        }
        else {
          id v131 = 0;
        }
        if ([v131 count])
        {
          unint64_t v173 = v130;
          if (v175 == (unsigned char *)&def_1C1270 + 2)
          {
            id v143 = [v19 fragmentPreloadedLibraries];
            id v144 = [v143 mutableCopy];

            id v172 = v144;
            [v144 addObjectsFromArray:v131];
            id v145 = [v131 copy];
            [v19 setFragmentPreloadedLibraries:v145];

            unint64_t v146 = (char *)[v131 count];
            if (v57[672] <= 1u) {
              uint64_t v147 = 1;
            }
            else {
              uint64_t v147 = v57[672];
            }
            [v19 setMaxFragmentCallStackDepth:&v146[v147]];
          }
          else
          {
            uint8x8_t v148 = [v19 vertexPreloadedLibraries];
            id v149 = [v148 mutableCopy];

            id v172 = v149;
            [v149 addObjectsFromArray:v131];
            id v150 = [v131 copy];
            [v19 setVertexPreloadedLibraries:v150];

            id v151 = (char *)[v131 count];
            if (v57[675] <= 1u) {
              uint64_t v152 = 1;
            }
            else {
              uint64_t v152 = v57[675];
            }
            [v19 setMaxVertexCallStackDepth:&v151[v152]];
          }

          long long v130 = v173;
        }

        id v58 = v175;
      }
      if ([v180 supportsFamily:1009])
      {
        if (v58 == (unsigned char *)&def_1C1270 + 2) {
          [v19 setMaxFragmentCallStackDepth:[v19 maxFragmentCallStackDepth] + 1];
        }
        else {
          [v19 setMaxVertexCallStackDepth:[v19 maxVertexCallStackDepth] + 1];
        }
      }
      uint8x8_t v181 = 0;
      id v182 = 0;
      id v88 = [v180 newRenderPipelineStateWithDescriptor:v19 options:0x200000 reflection:&v182 error:&v181];
      id v89 = v182;
      std::string::size_type v142 = v181;
      goto LABEL_169;
    }
    long long v19 = MakeMTLMeshRenderPipelineDescriptorWithoutResourceIndex(Object[9], v10);
    [v19 setMaxTotalThreadsPerObjectThreadgroup:*(unsigned __int16 *)(v39 + 406)];
    [v19 setMaxTotalThreadsPerMeshThreadgroup:*(unsigned __int16 *)(v39 + 404)];
    uint64_t v40 = *(void *)(v39 + 336);
    long long v185 = *(_OWORD *)(v39 + 320);
    uint64_t v186 = v40;
    [v19 setMaxThreadgroupsPerMeshGrid:&v185];
    long long v22 = (void *)v179;
    int v41 = v175;
    if ((GT_SUPPORT_0 & 0x8000) != 0) {
      [v19 setDriverCompilerOptions:(unint64_t)&off_759530 & ((uint64_t)(*(void *)(v179 + 208) << 59) >> 63)];
    }
    id v42 = [v176 renderPipelineDescriptorMap];
    uint64_t v174 = v42;
    if (v175 == (unsigned char *)&def_1C1270 + 2)
    {
      id v43 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 272), *(void *)(v39 + 280), v42);
      id v44 = [v19 objectLinkedFunctions];
      [v44 setFunctions:v43];

      id v45 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 304), *(void *)(v39 + 312), v42);
      id v46 = [v19 objectLinkedFunctions];
      [v46 setPrivateFunctions:v45];

      uint64_t v47 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 256), *(void *)(v39 + 264), v42);
      unsigned int v48 = [v19 objectLinkedFunctions];
      [v48 setBinaryFunctions:v47];

      id v49 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 208), *(void *)(v39 + 216), v42);
      id v50 = [v19 meshLinkedFunctions];
      [v50 setFunctions:v49];

      uint64_t v51 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 240), *(void *)(v39 + 248), v42);
      id v52 = [v19 meshLinkedFunctions];
      [v52 setPrivateFunctions:v51];

      id v53 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 192), *(void *)(v39 + 200), v42);
      long long v54 = [v19 meshLinkedFunctions];
      [v54 setBinaryFunctions:v53];

      long long v22 = (void *)v179;
      long long v56 = (uint64_t *)(v179 + 208);
      uint64_t v55 = *(void *)(v179 + 208);
      if ((v55 & 4) == 0)
      {
        if ((v55 & 2) == 0)
        {
          if ((v55 & 6) != 0)
          {
            if (([v180 supportsFamily:1009] & 1) == 0) {
              goto LABEL_150;
            }
            goto LABEL_146;
          }
          int v80 = 0;
          goto LABEL_132;
        }
        int v80 = 0;
        goto LABEL_86;
      }
      unint64_t v81 = [v19 fragmentFunction];
      uint64_t v82 = [v19 fragmentPreloadedLibraries];
    }
    else
    {
      if (v175 == (unsigned char *)&dword_4 + 2)
      {
        unint64_t v97 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 272), *(void *)(v39 + 280), v42);
        uint8x8_t v98 = [v19 objectLinkedFunctions];
        [v98 setFunctions:v97];

        uint64_t v99 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 304), *(void *)(v39 + 312), v42);
        id v100 = [v19 objectLinkedFunctions];
        [v100 setPrivateFunctions:v99];

        unint64_t v101 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 256), *(void *)(v39 + 264), v42);
        uint64_t v102 = [v19 objectLinkedFunctions];
        [v102 setBinaryFunctions:v101];

        id v103 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 144), *(void *)(v39 + 152), v42);
        unint64_t v104 = [v19 fragmentLinkedFunctions];
        [v104 setFunctions:v103];

        id v105 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 176), *(void *)(v39 + 184), v42);
        id v106 = [v19 fragmentLinkedFunctions];
        [v106 setPrivateFunctions:v105];

        id v107 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 128), *(void *)(v39 + 136), v42);
        id v108 = [v19 fragmentLinkedFunctions];
        [v108 setBinaryFunctions:v107];

        long long v22 = (void *)v179;
        long long v56 = (uint64_t *)(v179 + 208);
        uint64_t v79 = *(void *)(v179 + 208);
        if ((v79 & 4) == 0)
        {
          int v80 = 1;
          goto LABEL_84;
        }
        unint64_t v81 = [v19 meshFunction];
        id v109 = [v19 meshPreloadedLibraries];
        int v80 = 1;
        goto LABEL_66;
      }
      if (v175 == (unsigned char *)&dword_4 + 1)
      {
        id v67 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 208), *(void *)(v39 + 216), v42);
        id v68 = [v19 meshLinkedFunctions];
        [v68 setFunctions:v67];

        id v69 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 240), *(void *)(v39 + 248), v42);
        id v70 = [v19 meshLinkedFunctions];
        [v70 setPrivateFunctions:v69];

        id v71 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 192), *(void *)(v39 + 200), v42);
        long long v72 = [v19 meshLinkedFunctions];
        [v72 setBinaryFunctions:v71];

        long long v73 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 144), *(void *)(v39 + 152), v42);
        long long v74 = [v19 fragmentLinkedFunctions];
        [v74 setFunctions:v73];

        long long v75 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 176), *(void *)(v39 + 184), v42);
        long long v76 = [v19 fragmentLinkedFunctions];
        [v76 setPrivateFunctions:v75];

        uint64_t v77 = _ObjectArrayWithMap(*(uint64_t **)(v39 + 128), *(void *)(v39 + 136), v42);
        unsigned __int16 v78 = [v19 fragmentLinkedFunctions];
        [v78 setBinaryFunctions:v77];

        long long v22 = (void *)v179;
      }
      long long v56 = v22 + 26;
      uint64_t v79 = v22[26];
      if ((v79 & 4) == 0)
      {
        int v80 = 0;
        goto LABEL_84;
      }
      unint64_t v81 = [v19 objectFunction];
      uint64_t v82 = [v19 objectPreloadedLibraries];
    }
    id v109 = (void *)v82;
    int v80 = 0;
LABEL_66:
    uint64_t v110 = _GetPreloadedDylibsForGlobalRelocation((uint64_t)v22, v81, v109, a2);
    if (v110)
    {
      id v111 = (void *)v110;
      if (v175 == (unsigned char *)&def_1C1270 + 2)
      {
        [v19 setFragmentPreloadedLibraries:v110];
        [v19 setMaxFragmentCallStackDepth:[v111 count] + 1];
      }
      else if (v80)
      {
        [v19 setMeshPreloadedLibraries:v110];
        [v19 setMaxMeshCallStackDepth:([v111 count] + 1)];
      }
      else
      {
        [v19 setObjectPreloadedLibraries:v110];
        [v19 setMaxObjectCallStackDepth:((char *)[v111 count]) + 1];
      }

      uint64_t v79 = *v56;
      long long v22 = (void *)v179;
      int v41 = v175;
LABEL_84:
      if ((v79 & 2) == 0) {
        goto LABEL_99;
      }
      if (v41 != (unsigned char *)&def_1C1270 + 2)
      {
        if (v80)
        {
          unint64_t v81 = [v19 meshPreloadedLibraries];
          int v80 = 1;
LABEL_91:
          uint64_t v117 = _GetPreloadedDylibsForGlobalBinding((uint64_t)v22, v81, a2);
          if (v117)
          {
            uint64_t v118 = (void *)v117;
            if (v41 == (unsigned char *)&def_1C1270 + 2)
            {
              [v19 setFragmentPreloadedLibraries:v117];
              [v19 setMaxFragmentCallStackDepth:[v118 count] + 1];
            }
            else if (v80)
            {
              [v19 setMeshPreloadedLibraries:v117];
              [v19 setMaxMeshCallStackDepth:[v118 count] + 1];
            }
            else
            {
              [v19 setObjectPreloadedLibraries:v117];
              [v19 setMaxObjectCallStackDepth:[v118 count] + 1];
            }

            uint64_t v79 = *v56;
            long long v22 = (void *)v179;
LABEL_99:
            if ((v79 & 6) != 0)
            {
LABEL_144:
              if (([v180 supportsFamily:1009] & 1) == 0)
              {
LABEL_150:
                long long v183 = 0;
                id v184 = 0;
                id v23 = v180;
                id v88 = [v180 newRenderPipelineStateWithMeshDescriptor:v19 options:0x200000 reflection:&v184 error:&v183];
                id v89 = v184;
                std::string::size_type v142 = v183;
LABEL_169:
                long long v57 = v142;

                goto LABEL_170;
              }
              if (v41 != (unsigned char *)&def_1C1270 + 2)
              {
                if (v80) {
                  [v19 setMaxMeshCallStackDepth:[v19 maxMeshCallStackDepth] + 1];
                }
                else {
                  [v19 setMaxObjectCallStackDepth:[v19 maxObjectCallStackDepth] + 1];
                }
                goto LABEL_150;
              }
LABEL_146:
              [v19 setMaxFragmentCallStackDepth:[v19 maxFragmentCallStackDepth] + 1];
              goto LABEL_150;
            }
            if (v41 != (unsigned char *)&def_1C1270 + 2)
            {
              id v119 = (void *)(v39 + 368);
              if (v80)
              {
                id v119 = (void *)(v39 + 360);
                int v80 = 1;
              }
              else
              {
                int v80 = 0;
              }
LABEL_133:
              long long v132 = +[NSNumber numberWithUnsignedLongLong:*v119];
              long long v133 = [v174 objectForKeyedSubscript:v132];

              if (v133) {
                id v134 = [v180 loadDynamicLibrariesForFunction:v133 insertLibraries:&__NSArray0__struct error:0];
              }
              else {
                id v134 = 0;
              }
              if ([v134 count])
              {
                if (v41 == (unsigned char *)&def_1C1270 + 2)
                {
                  long long v135 = [v19 fragmentPreloadedLibraries];
                  id v136 = [v135 mutableCopy];

                  [v136 addObjectsFromArray:v134];
                  id v137 = [v136 copy];
                  [v19 setFragmentPreloadedLibraries:v137];

                  [v19 setMaxFragmentCallStackDepth:[v136 count] + 1];
                }
                else if (v80)
                {
                  uint64_t v138 = [v19 meshPreloadedLibraries];
                  id v136 = [v138 mutableCopy];

                  [v136 addObjectsFromArray:v134];
                  id v139 = [v136 copy];
                  [v19 setMeshPreloadedLibraries:v139];

                  [v19 setMaxMeshCallStackDepth:[v136 count] + 1];
                }
                else
                {
                  int v140 = [v19 objectPreloadedLibraries];
                  id v136 = [v140 mutableCopy];

                  [v136 addObjectsFromArray:v134];
                  id v141 = [v136 copy];
                  [v19 setObjectPreloadedLibraries:v141];

                  [v19 setMaxObjectCallStackDepth:[v136 count] + 1];
                }

                int v41 = v175;
              }

              goto LABEL_144;
            }
LABEL_132:
            id v119 = (void *)(v39 + 344);
            goto LABEL_133;
          }
          id v23 = v180;
LABEL_119:

          goto LABEL_120;
        }
        uint64_t v116 = [v19 objectPreloadedLibraries];
LABEL_90:
        unint64_t v81 = (void *)v116;
        goto LABEL_91;
      }
LABEL_86:
      uint64_t v116 = [v19 fragmentPreloadedLibraries];
      goto LABEL_90;
    }
    id v23 = v180;
LABEL_80:

    goto LABEL_119;
  }
  long long v19 = MakeMTLTileRenderPipelineDescriptor(Object[8], v10);
  long long v20 = v176;
  long long v21 = [v176 renderPipelineStateForKey:v177];
  [v19 setMaxTotalThreadsPerThreadgroup:[v21 maxTotalThreadsPerThreadgroup]];

  long long v22 = (void *)v179;
  id v23 = v180;
  uint64_t v24 = *(void *)(v179 + 208);
  if ((v24 & 4) != 0)
  {
    id v25 = [v19 tileFunction];
    id v26 = [v19 preloadedLibraries];
    CFStringRef v27 = _GetPreloadedDylibsForGlobalRelocation(v179, v25, v26, a2);

    if (!v27) {
      goto LABEL_120;
    }
    [v19 setPreloadedLibraries:v27];
    uint64_t v28 = (char *)[v27 count];
    if (*(unsigned __int16 *)(v18 + 130) <= 1u) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = *(unsigned __int16 *)(v18 + 130);
    }
    [v19 setMaxCallStackDepth:&v28[v29]];

    uint64_t v24 = *(void *)(v179 + 208);
    long long v22 = (void *)v179;
  }
  if ((v24 & 2) != 0)
  {
    uint64_t v30 = [v19 preloadedLibraries];
    _GetPreloadedDylibsForGlobalBinding((uint64_t)v22, v30, a2);
    uint64_t v32 = v31 = v22;

    if (v32)
    {
      [v19 setPreloadedLibraries:v32];
      unsigned int v33 = (char *)[v32 count];
      if (*(unsigned __int16 *)(v18 + 130) <= 1u) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = *(unsigned __int16 *)(v18 + 130);
      }
      [v19 setMaxCallStackDepth:&v33[v34]];

      uint64_t v24 = v31[26];
      long long v22 = v31;
      goto LABEL_24;
    }
LABEL_120:

    long long v57 = 0;
    id v89 = 0;
LABEL_190:
    id v88 = 0;
    goto LABEL_191;
  }
LABEL_24:
  if ((v24 & 6) == 0)
  {
    long long v35 = [v176 renderPipelineDescriptorMap];
    long long v36 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v18 + 120)];
    id v37 = [v35 objectForKeyedSubscript:v36];

    if (v37) {
      id v38 = [v180 loadDynamicLibrariesForFunction:v37 insertLibraries:&__NSArray0__struct error:0];
    }
    else {
      id v38 = 0;
    }
    if ([v38 count])
    {
      id v83 = [v19 preloadedLibraries];
      id v84 = [v83 mutableCopy];

      [v84 addObjectsFromArray:v38];
      id v85 = [v84 copy];
      [v19 setPreloadedLibraries:v85];

      id v23 = v180;
      float v86 = (char *)[v84 count];
      if (*(unsigned __int16 *)(v18 + 130) <= 1u) {
        uint64_t v87 = 1;
      }
      else {
        uint64_t v87 = *(unsigned __int16 *)(v18 + 130);
      }
      [v19 setMaxCallStackDepth:&v86[v87]];
    }
    long long v22 = (void *)v179;
  }
  if ([v23 supportsFamily:1009]) {
    [v19 setMaxCallStackDepth:[v19 maxCallStackDepth] + 1];
  }
  id v187 = 0;
  id v188 = 0;
  id v88 = [v23 newRenderPipelineStateWithTileDescriptor:v19 options:0x200000 reflection:&v188 error:&v187];
  id v89 = v188;
  long long v57 = (unsigned __int16 *)v187;
LABEL_170:

  if (!v88)
  {
LABEL_182:
    if (a2)
    {
      float v158 = [v57 description];
      if ([v158 localizedCaseInsensitiveContainsString:@"Undefined symbol"])
      {
        *a2 = v57;
      }
      else
      {
        if ((*(void *)(v179 + 208) & 0x10) != 0) {
          unsigned int v159 = 4;
        }
        else {
          unsigned int v159 = 2;
        }
        GTShaderDebuggerMakeError(v159, @"Failed to set up render pipeline state for debugging", 0, v57, 0);
        id v160 = objc_claimAutoreleasedReturnValue();
        *a2 = v160;
      }
    }
    goto LABEL_190;
  }
  long long v153 = +[NSNumber numberWithUnsignedLongLong:v177];
  [v11 setObject:v88 forKeyedSubscript:v153];

  unsigned int v154 = [v89 traceBufferIndex];
  if (v154 == -1) {
    uint64_t CurrentEncoderFreeBindingSlotIndex = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t CurrentEncoderFreeBindingSlotIndex = v154;
  }
  if ((v22[26] & 2) != 0) {
    uint64_t CurrentEncoderFreeBindingSlotIndex = _GetCurrentEncoderFreeBindingSlotIndex(v22 + 1);
  }
  if (CurrentEncoderFreeBindingSlotIndex == 0x7FFFFFFFFFFFFFFFLL && (v22[26] & 4) == 0)
  {
    if (a2)
    {
      GTShaderDebuggerMakeError(1u, @"Internal error: Failed to set up GPU data buffer", 0, 0, 0);
      uint64_t v156 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_199;
    }
LABEL_191:
    uint64_t v156 = 0;
    goto LABEL_199;
  }
  switch((unint64_t)v175)
  {
    case 1uLL:
    case 4uLL:
      uint64_t v157 = [v89 vertexBindings];
      goto LABEL_197;
    case 2uLL:
      uint64_t v157 = [v89 fragmentBindings];
      goto LABEL_197;
    case 3uLL:
      uint64_t v157 = [v89 tileBindings];
      goto LABEL_197;
    case 5uLL:
      uint64_t v157 = [v89 objectBindings];
      goto LABEL_197;
    case 6uLL:
      uint64_t v157 = [v89 meshBindings];
LABEL_197:
      unint64_t v161 = (void *)v157;
      break;
    default:
      unint64_t v161 = 0;
      break;
  }
  id v162 = [v11 copy];
  JSObjectRef v163 = (void *)v22[12];
  v22[12] = v162;

  JSObjectRef v164 = [v89 constantSamplerUniqueIdentifiers];
  [v89 constantSamplerDescriptors];
  v166 = uint64_t v165 = v22;
  uint64_t v167 = _MakeConstantSamplers(v164, v166);
  uint8x8_t v168 = (void *)v165[17];
  v165[17] = v167;

  uint64_t v169 = _MakeBindings(v161);
  uint8x8_t v170 = (void *)v165[16];
  v165[16] = v169;

  v165[18] = CurrentEncoderFreeBindingSlotIndex;
  uint64_t v156 = 1;
  id v23 = v180;
LABEL_199:

  return v156;
}

id _ObjectArrayWithMap(uint64_t *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  for (id i = [objc_alloc((Class)NSMutableArray) initWithCapacity:a2]; a2; --a2)
  {
    uint64_t v7 = *a1++;
    id v8 = +[NSNumber numberWithUnsignedLongLong:v7];
    id v9 = [v5 objectForKeyedSubscript:v8];

    if (v9) {
      [i addObject:v9];
    }
  }
  id v10 = [i copy];

  return v10;
}

void GTShaderDebuggerJITResources(void *a1)
{
  id v1 = a1;
  id v124 = *(id *)(*a1 + 8);
  uint64_t v123 = [v124 defaultDevice];
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  id v142 = objc_alloc_init((Class)NSMutableDictionary);
  id v3 = (id)v1[3];
  id v4 = (id)v1[16];
  id v131 = v1;
  id v126 = v2;
  if ([v3 count] && objc_msgSend(v4, "count"))
  {
    [*(id *)(*v1 + 8) defaultDevice];
    v140 = id v138 = v3;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v167 objects:&v171 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v168;
      do
      {
        for (id i = 0; i != v7; id i = (char *)i + 1)
        {
          if (*(void *)v168 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v167 + 1) + 8 * i);
          id v11 = [v5 objectForKeyedSubscript:v10];
          id v12 = [v11 firstObject];
          id v13 = [v12 unsignedLongLongValue];

          if (v13)
          {
            uint64_t v14 = [v11 lastObject];
            id v15 = [v14 unsignedLongLongValue];

            if (v15)
            {
              *(void *)&long long v160 = _NSConcreteStackBlock;
              *((void *)&v160 + 1) = 3221225472;
              *(void *)&long long v161 = ___MakeBytesBufferReplacementsForPipeline_block_invoke;
              *((void *)&v161 + 1) = &unk_746A10;
              *(void *)&long long v162 = v10;
              uint64_t v16 = [v4 gt_firstObjectPassingTest:&v160];
              if (v16)
              {
                id v17 = [v140 newBufferWithBytes:v13 length:v15 options:0];
                [v142 setObject:v17 forKeyedSubscript:v10];
              }
            }
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v167 objects:&v171 count:16];
      }
      while (v7);
    }

    id v1 = v131;
    id v2 = v126;
    id v3 = v138;
  }
  id v18 = [v142 copy];

  long long v151 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  id v19 = v18;
  id v20 = [v19 countByEnumeratingWithState:&v151 objects:v166 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v152;
    do
    {
      for (uint64_t j = 0; j != v21; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v152 != v22) {
          objc_enumerationMutation(v19);
        }
        uint64_t v24 = *(void *)(*((void *)&v151 + 1) + 8 * (void)j);
        id v25 = [v19 objectForKeyedSubscript:v24];
        [v2 setObject:v25 forKeyedSubscript:v24];
      }
      id v21 = [v19 countByEnumeratingWithState:&v151 objects:v166 count:16];
    }
    while (v21);
  }
  uint64_t v125 = v19;

  id v143 = objc_alloc_init((Class)NSMutableArray);
  id v26 = (id)v1[4];
  id v27 = (id)v1[16];
  char v28 = *((unsigned char *)v1 + 72);
  long long v160 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  id v29 = [v26 countByEnumeratingWithState:&v160 objects:&v171 count:16];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = *(void *)v161;
    int v145 = v28 & 1;
    do
    {
      for (unint64_t k = 0; k != v30; unint64_t k = (char *)k + 1)
      {
        if (*(void *)v161 != v31) {
          objc_enumerationMutation(v26);
        }
        uint64_t v33 = *(void *)(*((void *)&v160 + 1) + 8 * (void)k);
        uint64_t v34 = [v26 objectForKeyedSubscript:v33];
        id v35 = [v34 unsignedLongLongValue];

        if (!v35)
        {
          v159[0] = _NSConcreteStackBlock;
          v159[1] = 3221225472;
          v159[2] = ___MakeDummyBufferReplacementsForPipeline_block_invoke;
          v159[3] = &unk_746A10;
          v159[4] = v33;
          long long v36 = [v27 gt_firstObjectPassingTest:v159];
          id v37 = v36;
          if (v36)
          {
            id v38 = [v36 objectForKeyedSubscript:@"used"];
            unsigned int v39 = [v38 BOOLValue];

            if (!v39 || v145)
            {
              uint64_t v40 = [v37 objectForKeyedSubscript:@"index"];
              [v143 addObject:v40];
            }
          }
        }
      }
      id v30 = [v26 countByEnumeratingWithState:&v160 objects:&v171 count:16];
    }
    while (v30);
  }

  if ([v143 count])
  {
    int v41 = (uint64_t **)v131;
    id v42 = *(id *)(*v131 + 8);
    id v43 = [v42 defaultDevice];
    id v44 = [v43 newBufferWithLength:1024 options:0];
    if (v44)
    {
      id v45 = v44;
      id v46 = objc_alloc_init((Class)NSMutableDictionary);
      long long v155 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      id v47 = v143;
      id v48 = [v47 countByEnumeratingWithState:&v155 objects:&v167 count:16];
      if (v48)
      {
        id v49 = v48;
        uint64_t v50 = *(void *)v156;
        do
        {
          for (unint64_t m = 0; m != v49; unint64_t m = (char *)m + 1)
          {
            if (*(void *)v156 != v50) {
              objc_enumerationMutation(v47);
            }
            [v46 setObject:v45 forKeyedSubscript:*(void *)(*((void *)&v155 + 1) + 8 * (void)m)];
          }
          id v49 = [v47 countByEnumeratingWithState:&v155 objects:&v167 count:16];
        }
        while (v49);
      }

      id v52 = [v46 copy];
      id v53 = v125;
    }
    else
    {
      id v52 = 0;
      id v53 = v125;
    }

    long long v54 = v126;
  }
  else
  {
    id v52 = 0;
    int v41 = (uint64_t **)v131;
    id v53 = v125;
    long long v54 = v126;
  }

  long long v147 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  id v55 = v52;
  id v56 = [v55 countByEnumeratingWithState:&v147 objects:v165 count:16];
  if (v56)
  {
    id v57 = v56;
    uint64_t v58 = *(void *)v148;
    do
    {
      for (uint64_t n = 0; n != v57; uint64_t n = (char *)n + 1)
      {
        if (*(void *)v148 != v58) {
          objc_enumerationMutation(v55);
        }
        uint64_t v60 = *(void *)(*((void *)&v147 + 1) + 8 * (void)n);
        id v61 = [v53 objectForKeyedSubscript:v60];

        if (!v61)
        {
          uint64_t v62 = [v55 objectForKeyedSubscript:v60];
          [v54 setObject:v62 forKeyedSubscript:v60];
        }
      }
      id v57 = [v55 countByEnumeratingWithState:&v147 objects:v165 count:16];
    }
    while (v57);
  }

  uint64_t v63 = (uint64_t *)[v54 copy];
  uint64_t v64 = v41[21];
  v41[21] = v63;

  unint64_t v132 = *v41[11];
  long long v133 = *(uint64_t **)(**v41 + 40);
  id v65 = v41[16];
  long long v66 = v41[7];
  id v128 = objc_alloc_init((Class)NSMutableDictionary);
  long long v160 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  id v67 = v66;
  id v141 = [v67 countByEnumeratingWithState:&v160 objects:&v167 count:16];
  if (v141)
  {
    uint64_t v139 = *(void *)v161;
    long long v129 = v67;
    id v130 = v55;
    uint64_t v127 = v65;
    do
    {
      for (iid i = 0; ii != v141; iid i = (char *)ii + 1)
      {
        if (*(void *)v161 != v139) {
          objc_enumerationMutation(v67);
        }
        uint64_t v69 = *(void *)(*((void *)&v160 + 1) + 8 * (void)ii);
        id v70 = [v67 objectForKeyedSubscript:v69];
        id v71 = [v70 unsignedLongLongValue];

        if (v71)
        {
          *(void *)&long long v155 = _NSConcreteStackBlock;
          *((void *)&v155 + 1) = 3221225472;
          *(void *)&long long v156 = ___MakeVisibleFunctionTablesForPipeline_block_invoke;
          *((void *)&v156 + 1) = &unk_746A10;
          uint64_t v136 = v69;
          *(void *)&long long v157 = v69;
          long long v72 = [v65 gt_firstObjectPassingTest:&v155];
          if (v72)
          {
            uint64_t Object = GTMTLSMContext_getObject(*v133, (uint64_t)v71, v132);
            if (Object)
            {
              long long v74 = Object;
              if (*(_DWORD *)Object == 83)
              {
                long long v75 = v65;
                id v134 = v72;
                long long v76 = v41;
                id v77 = [v41[12] mutableCopy];
                unsigned __int16 v78 = (void *)v74[13];
                id v79 = objc_alloc_init((Class)MTLVisibleFunctionTableDescriptor);
                [v79 setFunctionCount:*v78];
                int v80 = +[NSNumber numberWithUnsignedLongLong:v74[16]];
                unint64_t v81 = [v77 objectForKeyedSubscript:v80];

                id v144 = v77;
                if (v81)
                {
                  id v82 = [v81 newVisibleFunctionTableWithDescriptor:v79 stage:*((unsigned __int8 *)v74 + 168)];
                  int v41 = v76;
                  id v65 = v75;
                }
                else
                {
                  id v83 = +[NSNumber numberWithUnsignedLongLong:v74[15]];
                  id v84 = [v77 objectForKeyedSubscript:v83];

                  if (v84) {
                    id v85 = [v84 newVisibleFunctionTableWithDescriptor:v79];
                  }
                  else {
                    id v85 = 0;
                  }
                  int v41 = v76;

                  id v55 = v130;
                  id v65 = v75;
                  id v82 = v85;
                }

                uint64_t v87 = v82;
                if (v82)
                {
                  uint64_t v88 = **v41;
                  unint64_t v146 = *v41[11];
                  newpool = 0;
                  apr_pool_create_ex(&newpool, 0, 0, v86);
                  long long v171 = 0u;
                  uint64_t v172 = 0;
                  long long v183 = 0u;
                  long long v182 = 0u;
                  long long v180 = 0u;
                  long long v181 = 0u;
                  long long v178 = 0u;
                  long long v179 = 0u;
                  long long v177 = 0u;
                  long long v174 = 0u;
                  long long v175 = 0u;
                  LODWORD(v171) = 83;
                  uint64_t v173 = -1;
                  WORD1(v178) = 2;
                  long long v176 = 0xFFFFFFFFFFFFFFFFLL;
                  *((void *)&v183 + 1) = *(void *)v74[13];
                  size_t v89 = 8 * *((void *)&v183 + 1);
                  int v90 = apr_palloc(newpool, 8 * *((void *)&v183 + 1));
                  id v91 = v90;
                  if (v90) {
                    bzero(v90, v89);
                  }
                  *(void *)&long long v183 = v91;
                  uint64_t v92 = *(void *)(v88 + 8);
                  v159[0] = v74[1];
                  uint64_t v93 = *(void *)(*(void *)(*find_entry(v92, v159, 8uLL, 0) + 32) + 32);
                  id v137 = v87;
                  unsigned int v94 = 0;
                  if (v93)
                  {
                    while (1)
                    {
                      unsigned int v95 = atomic_load((unsigned int *)(v93 + 4));
                      uint64_t v96 = v94 + (v95 >> 6) - 1;
                      if ((int)v96 > 0) {
                        break;
                      }
                      uint64_t v93 = *(void *)(v93 + 40);
                      unsigned int v94 = v96;
                      if (!v93)
                      {
                        unsigned int v94 = v96;
                        goto LABEL_81;
                      }
                    }
                  }
                  uint64_t v96 = 0;
LABEL_81:
                  unint64_t v97 = v94 | (unint64_t)(v96 << 32);
LABEL_82:
                  uint64_t v98 = v93 + 64;
                  while (v93)
                  {
                    if ((*(unsigned char *)(v98 + ((uint64_t)(HIDWORD(v97) - (int)v97) << 6) + 15) & 8) == 0) {
                      break;
                    }
                    uint64_t v99 = (unint64_t *)(v98 + ((uint64_t)(HIDWORD(v97) - (int)v97) << 6));
                    if (*v99 >= v146) {
                      break;
                    }
                    GTMTLSMVisibleFunctionTableStateful_processTraceFuncWithMap((uint64_t)&v171, *(void *)(v88 + 16), (uint64_t)v99);
                    unsigned int v100 = atomic_load((unsigned int *)(v93 + 4));
                    int v101 = v97 + (v100 >> 6);
                    uint64_t v102 = (HIDWORD(v97) + 1);
                    unint64_t v97 = (v102 << 32) | v97;
                    if (v102 == v101 - 1)
                    {
                      unint64_t v97 = (v102 << 32) | v102;
                      uint64_t v93 = *(void *)(v93 + 40);
                      goto LABEL_82;
                    }
                  }
                  long long v72 = v134;
                  if (*((void *)&v183 + 1))
                  {
                    for (juint64_t j = 0; *((void *)&v183 + 1) > jj; ++jj)
                    {
                      uint64_t v104 = *(void *)(v183 + 8 * jj);
                      if (!v104) {
                        continue;
                      }
                      id v105 = GTMTLSMContext_getObject(**(void **)(v88 + 40), *(void *)(v183 + 8 * jj), v146);
                      if (!v105) {
                        continue;
                      }
                      id v106 = v105;
                      id v107 = +[NSNumber numberWithUnsignedLongLong:v104];
                      uint64_t v108 = [v144 objectForKeyedSubscript:v107];
                      if (v108)
                      {
                        id v109 = (void *)v108;
                      }
                      else
                      {
                        id v110 = v144;
                        id v111 = +[NSNumber numberWithUnsignedLongLong:v106[5]];
                        id v109 = [v110 objectForKeyedSubscript:v111];

                        long long v135 = v109;
                        if (v109)
                        {
                          uint64_t v112 = +[NSNumber numberWithUnsignedLongLong:v106[7]];
                          uint64_t v113 = [v110 objectForKeyedSubscript:v112];

                          if (v113)
                          {
                            uint64_t v114 = *((unsigned __int8 *)v106 + 64);
                            uint64_t v115 = v135;
                            id v109 = [v113 functionHandleWithFunction:v135 stage:v114];
                          }
                          else
                          {
                            uint64_t v116 = +[NSNumber numberWithUnsignedLongLong:v106[6]];
                            uint64_t v117 = [v110 objectForKeyedSubscript:v116];

                            if (v117)
                            {
                              id v109 = [v117 functionHandleWithFunction:v135];
                            }
                            else
                            {
                              id v109 = 0;
                            }

                            uint64_t v115 = v135;
                          }
                        }
                        else
                        {
                          uint64_t v115 = 0;
                        }

                        long long v72 = v134;
                        if (!v109)
                        {
                          id v109 = [*(id *)(*v131 + 8) functionHandleForKey:v104];
                          if (!v109) {
                            continue;
                          }
                          goto LABEL_105;
                        }
                      }
                      uint64_t v118 = +[NSNumber numberWithUnsignedLongLong:v104];
                      [v144 setObject:v109 forKeyedSubscript:v118];

LABEL_105:
                      [v137 setFunction:v109 atIndex:jj];
                    }
                  }
                  apr_pool_destroy(newpool);
                  id v119 = [v144 copy];
                  int v41 = (uint64_t **)v131;
                  id v120 = (void *)v131[12];
                  v131[12] = v119;

                  uint64_t v87 = v137;
                  [v128 setObject:v137 forKeyedSubscript:v136];
                  id v55 = v130;
                  id v65 = v127;
                }
                else
                {

                  long long v72 = v134;
                }

                id v67 = v129;
              }
            }
          }
        }
      }
      id v141 = [v67 countByEnumeratingWithState:&v160 objects:&v167 count:16];
    }
    while (v141);
  }

  uint64_t v121 = (uint64_t *)[v128 copy];
  uint64_t v122 = v41[22];
  v41[22] = v121;
}

uint64_t GTShaderDebuggerEncodeResourcesRender(void *a1, void *a2)
{
  uint64_t v4 = *a1;
  id v5 = (void *)a1[12];
  id v6 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*a1 + 19912)];
  id v7 = [v5 objectForKeyedSubscript:v6];

  if (v7)
  {
    id v8 = *(id *)(*a1 + 8);
    id v9 = [v8 renderCommandEncoderForKey:*(void *)(v4 + 11320)];
    uint64_t v10 = v9 != 0;
    if (v9)
    {
      uint64_t v11 = a1[18];
      id v12 = [(id)a1[24] objectForKeyedSubscript:@"ROI"];
      id v13 = [v12 objectForKeyedSubscript:@"Type"];
      id v14 = [v13 integerValue];

      id v68 = v8;
      switch((unint64_t)v14)
      {
        case 1uLL:
        case 4uLL:
          if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
            [v9 setVertexBuffer:a1[23] offset:0 atIndex:v11];
          }
          BOOL v67 = v9 != 0;
          id v15 = (id)a1[21];
          long long v97 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          id v16 = [v15 countByEnumeratingWithState:&v97 objects:v108 count:16];
          if (v16)
          {
            id v17 = v16;
            uint64_t v18 = *(void *)v98;
            do
            {
              for (id i = 0; i != v17; id i = (char *)i + 1)
              {
                if (*(void *)v98 != v18) {
                  objc_enumerationMutation(v15);
                }
                id v20 = *(void **)(*((void *)&v97 + 1) + 8 * i);
                id v21 = [v15 objectForKeyedSubscript:v20];
                [v9 setVertexBuffer:v21 offset:0 atIndex:[v20 unsignedIntegerValue]];
              }
              id v17 = [v15 countByEnumeratingWithState:&v97 objects:v108 count:16];
            }
            while (v17);
          }
          id v22 = (id)a1[22];
          long long v93 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          id v23 = [v22 countByEnumeratingWithState:&v93 objects:v107 count:16];
          if (v23)
          {
            id v24 = v23;
            uint64_t v25 = *(void *)v94;
            do
            {
              for (uint64_t j = 0; j != v24; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v94 != v25) {
                  objc_enumerationMutation(v22);
                }
                id v27 = *(void **)(*((void *)&v93 + 1) + 8 * (void)j);
                char v28 = [v22 objectForKeyedSubscript:v27];
                [v9 setVertexVisibleFunctionTable:v28 atBufferIndex:[v27 unsignedIntegerValue]];
              }
              id v24 = [v22 countByEnumeratingWithState:&v93 objects:v107 count:16];
            }
            while (v24);
          }
          goto LABEL_60;
        case 2uLL:
          if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
            [v9 setFragmentBuffer:a1[23] offset:0 atIndex:v11];
          }
          BOOL v67 = v9 != 0;
          id v15 = (id)a1[21];
          long long v89 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          id v29 = [v15 countByEnumeratingWithState:&v89 objects:v106 count:16];
          if (v29)
          {
            id v30 = v29;
            uint64_t v31 = *(void *)v90;
            do
            {
              for (unint64_t k = 0; k != v30; unint64_t k = (char *)k + 1)
              {
                if (*(void *)v90 != v31) {
                  objc_enumerationMutation(v15);
                }
                uint64_t v33 = *(void **)(*((void *)&v89 + 1) + 8 * (void)k);
                uint64_t v34 = [v15 objectForKeyedSubscript:v33];
                [v9 setFragmentBuffer:v34 offset:0 atIndex:[v33 unsignedIntegerValue]];
              }
              id v30 = [v15 countByEnumeratingWithState:&v89 objects:v106 count:16];
            }
            while (v30);
          }
          id v22 = (id)a1[22];
          long long v85 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          id v35 = [v22 countByEnumeratingWithState:&v85 objects:v105 count:16];
          if (v35)
          {
            id v36 = v35;
            uint64_t v37 = *(void *)v86;
            do
            {
              for (unint64_t m = 0; m != v36; unint64_t m = (char *)m + 1)
              {
                if (*(void *)v86 != v37) {
                  objc_enumerationMutation(v22);
                }
                unsigned int v39 = *(void **)(*((void *)&v85 + 1) + 8 * (void)m);
                uint64_t v40 = [v22 objectForKeyedSubscript:v39];
                [v9 setFragmentVisibleFunctionTable:v40 atBufferIndex:[v39 unsignedIntegerValue]];
              }
              id v36 = [v22 countByEnumeratingWithState:&v85 objects:v105 count:16];
            }
            while (v36);
          }
          goto LABEL_60;
        case 3uLL:
          if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
            [v9 setTileBuffer:a1[23] offset:0 atIndex:v11];
          }
          BOOL v67 = v9 != 0;
          id v15 = (id)a1[21];
          long long v81 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          id v41 = [v15 countByEnumeratingWithState:&v81 objects:v104 count:16];
          if (v41)
          {
            id v42 = v41;
            uint64_t v43 = *(void *)v82;
            do
            {
              for (uint64_t n = 0; n != v42; uint64_t n = (char *)n + 1)
              {
                if (*(void *)v82 != v43) {
                  objc_enumerationMutation(v15);
                }
                id v45 = *(void **)(*((void *)&v81 + 1) + 8 * (void)n);
                id v46 = [v15 objectForKeyedSubscript:v45];
                [v9 setTileBuffer:v46 offset:0 atIndex:[v45 unsignedIntegerValue]];
              }
              id v42 = [v15 countByEnumeratingWithState:&v81 objects:v104 count:16];
            }
            while (v42);
          }
          id v22 = (id)a1[22];
          long long v77 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          id v47 = [v22 countByEnumeratingWithState:&v77 objects:v103 count:16];
          if (v47)
          {
            id v48 = v47;
            uint64_t v49 = *(void *)v78;
            do
            {
              for (iid i = 0; ii != v48; iid i = (char *)ii + 1)
              {
                if (*(void *)v78 != v49) {
                  objc_enumerationMutation(v22);
                }
                uint64_t v51 = *(void **)(*((void *)&v77 + 1) + 8 * (void)ii);
                id v52 = [v22 objectForKeyedSubscript:v51];
                [v9 setTileVisibleFunctionTable:v52 atBufferIndex:[v51 unsignedIntegerValue]];
              }
              id v48 = [v22 countByEnumeratingWithState:&v77 objects:v103 count:16];
            }
            while (v48);
          }
LABEL_60:

          uint64_t v10 = v67;
          goto LABEL_81;
        case 5uLL:
          if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
            [v9 setObjectBuffer:a1[23] offset:0 atIndex:v11];
          }
          id v53 = (id)a1[21];
          long long v69 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          id v54 = [v53 countByEnumeratingWithState:&v69 objects:v101 count:16];
          if (v54)
          {
            id v55 = v54;
            uint64_t v56 = *(void *)v70;
            do
            {
              for (juint64_t j = 0; jj != v55; juint64_t j = (char *)jj + 1)
              {
                if (*(void *)v70 != v56) {
                  objc_enumerationMutation(v53);
                }
                uint64_t v58 = *(void **)(*((void *)&v69 + 1) + 8 * (void)jj);
                id v59 = [v53 objectForKeyedSubscript:v58];
                [v9 setObjectBuffer:v59 offset:0 atIndex:[v58 unsignedIntegerValue]];
              }
              id v55 = [v53 countByEnumeratingWithState:&v69 objects:v101 count:16];
            }
            while (v55);
          }
          goto LABEL_80;
        case 6uLL:
          if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
            [v9 setMeshBuffer:a1[23] offset:0 atIndex:v11];
          }
          id v53 = (id)a1[21];
          long long v73 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          id v60 = [v53 countByEnumeratingWithState:&v73 objects:v102 count:16];
          if (v60)
          {
            id v61 = v60;
            uint64_t v62 = *(void *)v74;
            do
            {
              for (kunint64_t k = 0; kk != v61; kunint64_t k = (char *)kk + 1)
              {
                if (*(void *)v74 != v62) {
                  objc_enumerationMutation(v53);
                }
                uint64_t v64 = *(void **)(*((void *)&v73 + 1) + 8 * (void)kk);
                id v65 = [v53 objectForKeyedSubscript:v64];
                [v9 setMeshBuffer:v65 offset:0 atIndex:[v64 unsignedIntegerValue]];
              }
              id v61 = [v53 countByEnumeratingWithState:&v73 objects:v102 count:16];
            }
            while (v61);
          }
LABEL_80:

LABEL_81:
          id v8 = v68;
          break;
        default:
          GTMTLReplay_handleError(101, (uint64_t)"Unreachable", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_shaderDebugger_internal.m", (uint64_t)"GTShaderDebuggerEncodeResourcesRender", 4089, 4);
          break;
      }
      [v9 useResource:a1[23] usage:2];
      [v9 setRenderPipelineState:v7];
    }
    else if (a2)
    {
      GTShaderDebuggerMakeError(1u, @"Internal error: Failed to resolve render encoder", 0, 0, 0);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2)
  {
    GTShaderDebuggerMakeError(1u, @"Internal error: Failed to resolve render pipeline", 0, 0, 0);
    uint64_t v10 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t GTShaderDebuggerEncodeResourcesCompute(void *a1, void *a2)
{
  uint64_t v4 = *a1;
  id v5 = (void *)a1[12];
  id v6 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*a1 + 11376)];
  id v7 = [v5 objectForKeyedSubscript:v6];

  if (v7)
  {
    id v8 = *(id *)(*a1 + 8);
    id v9 = [v8 computeCommandEncoderForKey:*(void *)(v4 + 11320)];
    uint64_t v10 = v9;
    uint64_t v11 = v9 != 0;
    if (v9)
    {
      id v27 = v8;
      if (a1[18] != 0x7FFFFFFFFFFFFFFFLL) {
        [v9 setBuffer:a1[23] offset:0 atIndex:];
      }
      id v12 = (id)a1[21];
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v13 = [v12 countByEnumeratingWithState:&v34 objects:v39 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v35;
        do
        {
          for (id i = 0; i != v14; id i = (char *)i + 1)
          {
            if (*(void *)v35 != v15) {
              objc_enumerationMutation(v12);
            }
            id v17 = *(void **)(*((void *)&v34 + 1) + 8 * i);
            uint64_t v18 = [v12 objectForKeyedSubscript:v17, v27];
            [v10 setBuffer:v18 offset:0 atIndex:[v17 unsignedIntegerValue]];
          }
          id v14 = [v12 countByEnumeratingWithState:&v34 objects:v39 count:16];
        }
        while (v14);
      }
      unsigned int v29 = v11;
      id v19 = (id)a1[22];
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id v20 = [v19 countByEnumeratingWithState:&v30 objects:v38 count:16];
      if (v20)
      {
        id v21 = v20;
        uint64_t v22 = *(void *)v31;
        do
        {
          for (uint64_t j = 0; j != v21; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v31 != v22) {
              objc_enumerationMutation(v19);
            }
            id v24 = *(void **)(*((void *)&v30 + 1) + 8 * (void)j);
            uint64_t v25 = [v19 objectForKeyedSubscript:v24 v27];
            [v10 setVisibleFunctionTable:v25 atBufferIndex:[v24 unsignedIntegerValue]];
          }
          id v21 = [v19 countByEnumeratingWithState:&v30 objects:v38 count:16];
        }
        while (v21);
      }
      [v10 useResource:a1[23] usage:2 v27];
      [v10 setComputePipelineState:v7];

      uint64_t v11 = v29;
      id v8 = v28;
    }
    else if (a2)
    {
      GTShaderDebuggerMakeError(1u, @"Internal error: Failed to resolve compute encoder", 0, 0, 0);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2)
  {
    GTShaderDebuggerMakeError(1u, @"Internal error: Failed to resolve compute pipeleine", 0, 0, 0);
    uint64_t v11 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

uint64_t GTShaderDebuggerExecuteEncoder(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[10];
  if (v4)
  {
    int v6 = *(_DWORD *)(v3 + 11312);
    uint64_t v7 = *(void *)(v3 + 11320);
    id v8 = *(id *)(v3 + 8);
    id v9 = v8;
    if (v6 == 70)
    {
      uint64_t v10 = [v8 renderCommandEncoderForKey:v7];
      uint64_t v11 = *(void *)(v4 + 200);
      id v12 = [v9 executeIndirectCommandBufferMap];
      uint64_t v13 = DYMTLDrawRenderCommandEncoder(v10, v4, v11, v4 + 112, v12);

      id v9 = v12;
    }
    else
    {
      uint64_t v10 = [v8 computeCommandEncoderForKey:v7];
      uint64_t v13 = DYMTLDispatchComputeCommandEncoder(v10, v4, *(void *)(v4 + 200));
    }

    if (a2 && (v13 & 1) == 0)
    {
      GTShaderDebuggerMakeError(1u, @"Internal error: Problem encountered during execution", 0, 0, 0);
      uint64_t v13 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    GTMTLReplayController_defaultDispatchFunction(v3, a1[11]);
    return 1;
  }
  return v13;
}

uint64_t GTShaderDebuggerValidateUserComputeDispatch(void *a1, void *a2)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD *)(*a1 + 11312);
  if (v5 == 70)
  {
    int v6 = [*(id *)(v4 + 8) renderPipelineStateForKey:*(void *)(v4 + 19912)];
    id v16 = [v6 maxTotalThreadsPerThreadgroup];
    if (!v16) {
      goto LABEL_25;
    }
    id v17 = v16;
    uint64_t v18 = a1[11];
    if (*(_DWORD *)(v18 + 8) != -16137) {
      goto LABEL_25;
    }
    id v19 = GTTraceFunc_argumentBytesWithMap((void *)v18, *(unsigned __int8 *)(v18 + 13), *(void *)(*(void *)*a1 + 16));
    uint64_t v20 = *((void *)v19 + 1);
    uint64_t v21 = *((void *)v19 + 2);
    uint64_t v22 = *((void *)v19 + 3);
    unint64_t v23 = v21 * v20 * v22;
    if (!v23)
    {
      id v24 = +[NSString stringWithFormat:@"Dispatched total threads per tile (width(%llu) * height(%llu) * depth(%llu)) must not be 0", v20, v21, v22];
      if (a2)
      {
        uint64_t v25 = @"Failed to launch tile kernel: Dispatched total threads per tile is 0";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    if (v23 <= (unint64_t)v17) {
      goto LABEL_25;
    }
    id v24 = +[NSString stringWithFormat:@"Dispatched total threads per tile (%llu: (width(%llu) * height(%llu) * depth(%llu))) must not be greater than the pipeline's maximum total threads per threadgroup (%llu)", v21 * v20 * v22, v20, v21, v22, v17];
    if (!a2) {
      goto LABEL_31;
    }
    uint64_t v25 = @"Failed to launch tile kernel: Maximum total threads per threadgroup size limit exceeded";
    goto LABEL_30;
  }
  if (v5 == 28)
  {
    int v6 = [*(id *)(v4 + 8) computePipelineStateForKey:*(void *)(v4 + 11376)];
    id v7 = [v6 maxTotalThreadsPerThreadgroup];
    if (!v7) {
      goto LABEL_25;
    }
    id v8 = v7;
    uint64_t v9 = a1[11];
    uint64_t v10 = *(void *)(*(void *)*a1 + 16);
    int v11 = *(_DWORD *)(v9 + 8);
    if (v11 != -16078)
    {
      if (v11 == -16220)
      {
        long long v32 = GTTraceFunc_argumentBytesWithMap((void *)v9, *(unsigned __int8 *)(v9 + 13), v10);
        uint64_t v13 = (uint64_t *)(v32 + 24);
        id v14 = (uint64_t *)(v32 + 32);
        uint64_t v15 = (uint64_t *)(v32 + 40);
      }
      else
      {
        if (v11 != -16327) {
          goto LABEL_25;
        }
        id v12 = GTTraceFunc_argumentBytesWithMap((void *)v9, *(unsigned __int8 *)(v9 + 13), v10);
        uint64_t v13 = (uint64_t *)(v12 + 32);
        id v14 = (uint64_t *)(v12 + 40);
        uint64_t v15 = (uint64_t *)(v12 + 48);
      }
      uint64_t v29 = *v13;
      uint64_t v30 = *v14;
      uint64_t v31 = *v15;
      goto LABEL_21;
    }
    id v27 = GTTraceFunc_argumentBytesWithMap((void *)v9, *(unsigned __int8 *)(v9 + 13), v10);
    uint64_t v28 = *((void *)v27 + 1);
    uint64_t v29 = *((void *)v27 + 4);
    uint64_t v30 = *((void *)v27 + 5);
    uint64_t v31 = *((void *)v27 + 6);
    if (v28 == -1 || *((void *)v27 + 3) * v28 * *((void *)v27 + 2))
    {
LABEL_21:
      unint64_t v33 = v30 * v31 * v29;
      if (!v33)
      {
        id v24 = +[NSString stringWithFormat:@"Dispatched total threads per threadgroup (width(%llu) * height(%llu) * depth(%llu)) must not be 0", v29, v30, v31];
        if (a2)
        {
          uint64_t v25 = @"Failed to launch compute kernel: Dispatched total threads per threadgroup is 0";
          goto LABEL_30;
        }
        goto LABEL_31;
      }
      if (v33 > (unint64_t)v8)
      {
        id v24 = +[NSString stringWithFormat:@"Dispatched total threads per threadgroup (%llu: (width(%llu) * height(%llu) * depth(%llu))) must not be greater than the pipeline's maximum total threads per threadgroup (%llu)", v30 * v31 * v29, v29, v30, v31, v8];
        if (a2)
        {
          uint64_t v25 = @"Failed to launch compute kernel: Maximum total threads per threadgroup size limit exceeded";
          goto LABEL_30;
        }
LABEL_31:

        uint64_t v26 = 0;
        goto LABEL_32;
      }
LABEL_25:
      uint64_t v26 = 1;
LABEL_32:

      return v26;
    }
    id v24 = +[NSString stringWithFormat:@"Dispatched total threads per grid (width(%llu) * height(%llu) * depth(%llu)) must not be 0", v29, v30, v31];
    if (!a2) {
      goto LABEL_31;
    }
    uint64_t v25 = @"Failed to launch compute kernel: Dispatched total threads per grid size is 0";
LABEL_30:
    GTShaderDebuggerMakeError(4u, v25, v24, 0, 0);
    *a2 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_31;
  }
  return 1;
}

BOOL GTShaderDebuggerValidateUserEncoderBindings(uint64_t a1, void *a2)
{
  id v4 = *(id *)(a1 + 128);
  if ([v4 count])
  {
    uint64_t v25 = a2;
    id v27 = *(id *)(a1 + 24);
    long long v41 = *(_OWORD *)(a1 + 32);
    v40[0] = &off_759DC8;
    v40[1] = &off_759DE0;
    v40[2] = &off_759DF8;
    uint64_t v42 = *(void *)(a1 + 48);
    uint64_t v31 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:v40 count:3];
    v38[0] = &off_759DC8;
    v38[1] = &off_759DE0;
    v39[0] = @"buffer";
    v39[1] = @"texture";
    v38[2] = &off_759DF8;
    v39[2] = @"sampler";
    uint64_t v29 = +[NSDictionary dictionaryWithObjects:v39 forKeys:v38 count:3];
    id v28 = objc_alloc_init((Class)NSMutableArray);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v26 = v4;
    obuint64_t j = v4;
    id v5 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v5)
    {
      id v6 = v5;
      CFStringRef v7 = @"used";
      uint64_t v8 = *(void *)v34;
      do
      {
        for (id i = 0; i != v6; id i = (char *)i + 1)
        {
          if (*(void *)v34 != v8) {
            objc_enumerationMutation(obj);
          }
          uint64_t v10 = *(void **)(*((void *)&v33 + 1) + 8 * i);
          int v11 = [v10 objectForKeyedSubscript:v7];
          unsigned int v12 = [v11 BOOLValue];

          if (v12)
          {
            uint64_t v13 = [v10 objectForKeyedSubscript:@"type"];
            id v14 = [v31 objectForKeyedSubscript:v13];
            if (v14)
            {
              CFStringRef v15 = v7;
              id v16 = [v10 objectForKeyedSubscript:@"index"];
              id v17 = [v14 objectForKeyedSubscript:v16];
              if (![v17 unsignedIntegerValue])
              {
                if ([v13 integerValue]
                  || ([v27 objectForKeyedSubscript:v16],
                      uint64_t v20 = objc_claimAutoreleasedReturnValue(),
                      v20,
                      !v20))
                {
                  uint64_t v30 = [v29 objectForKeyedSubscript:v13];
                  uint64_t v18 = [v10 objectForKeyedSubscript:@"name"];
                  id v19 = +[NSString stringWithFormat:@"Function argument '%@' does not have a valid %@ binding at index '%@'", v18, v30, v16];
                  [v28 addObject:v19];
                }
              }

              CFStringRef v7 = v15;
            }
          }
        }
        id v6 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
      }
      while (v6);
    }

    id v21 = [v28 count];
    BOOL v22 = v21 == 0;
    id v4 = v26;
    if (v21)
    {
      unint64_t v23 = [v28 componentsJoinedByString:@"\n"];
      if (v25)
      {
        GTShaderDebuggerMakeError(4u, v23, @"Ensure all function arguments have valid resource bindings", 0, 0);
        *uint64_t v25 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
  }
  else
  {
    BOOL v22 = 1;
  }

  return v22;
}

uint64_t GTShaderDebuggerMakeTraceBuffer(uint64_t a1, void *a2)
{
  id v4 = [*(id *)(*(void *)a1 + 8) defaultDevice];
  id v5 = [v4 maxBufferLength];
  id v6 = v5;
  if ((unint64_t)v5 >= 0x10000000) {
    uint64_t v7 = 0x10000000;
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  uint64_t v8 = [*(id *)(a1 + 192) objectForKeyedSubscript:@"Options"];
  uint64_t v9 = [v8 objectForKeyedSubscript:@"TraceBufferSize"];
  id v10 = [v9 unsignedIntegerValue];

  if (v6 >= v10) {
    unint64_t v11 = (unint64_t)v10;
  }
  else {
    unint64_t v11 = (unint64_t)v6;
  }
  if (v11 >= 0xFFFFFFFF) {
    unint64_t v11 = 0xFFFFFFFFLL;
  }
  if (v10) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v7;
  }
  id v70 = [v4 newBufferWithLength:v12 options:0];
  if (v70)
  {
    unint64_t v13 = *(void *)(a1 + 160);
    id v14 = v70;
    CFStringRef v15 = (char *)[v14 contents];
    *(_DWORD *)CFStringRef v15 = 1;
    obuint64_t j = v14;
    *((_DWORD *)v15 + 1) = [v14 length];
    id v16 = [*(id *)(a1 + 192) objectForKeyedSubscript:@"ROI"];
    id v17 = [(__CFString *)v16 objectForKeyedSubscript:@"Type"];
    id v18 = [v17 integerValue];

    switch((unint64_t)v18)
    {
      case 1uLL:
        id v19 = [(__CFString *)v16 objectForKeyedSubscript:@"InstanceID"];
        uint64_t v20 = [(__CFString *)v16 objectForKeyedSubscript:@"AmplificationID"];
        id v21 = [(__CFString *)v16 objectForKeyedSubscript:@"VertexIDs"];
        if (v13)
        {
          uint64_t v63 = v20;
          long long v66 = v19;
          *(void *)(v15 + 12) = -1;
          *((_DWORD *)v15 + 5) = -1;
          *((_DWORD *)v15 + 3) = [v19 unsignedIntValue];
          unsigned int v28 = [v21 count];
          *((_DWORD *)v15 + 5) = v28;
          if (v28)
          {
            unint64_t v29 = 0;
            do
            {
              uint64_t v30 = [v21 objectAtIndexedSubscript:v29];
              *(_DWORD *)&v15[4 * v29 + 24] = [v30 unsignedIntValue];

              ++v29;
            }
            while (v29 < *((unsigned int *)v15 + 5));
          }
          uint64_t v20 = v63;
          *((_DWORD *)v15 + 4) = [v63 unsignedIntValue];
          int v31 = 4 * *((_DWORD *)v15 + 5) + 24;
          id v19 = v66;
          goto LABEL_46;
        }
        *(void *)(v15 + 12) = -1;
        *((_DWORD *)v15 + 3) = [v19 unsignedIntValue];
        unsigned int v48 = [v21 count];
        *((_DWORD *)v15 + 4) = v48;
        if (!v48) {
          goto LABEL_44;
        }
        uint64_t v64 = v20;
        BOOL v67 = v19;
        unint64_t v49 = 0;
        do
        {
          uint64_t v50 = [v21 objectAtIndexedSubscript:v49];
          *(_DWORD *)&v15[4 * v49 + 20] = [v50 unsignedIntValue];

          ++v49;
          unint64_t v51 = *((unsigned int *)v15 + 4);
        }
        while (v49 < v51);
        goto LABEL_42;
      case 2uLL:
        id v19 = [(__CFString *)v16 objectForKeyedSubscript:@"MinPositionX"];
        uint64_t v20 = [(__CFString *)v16 objectForKeyedSubscript:@"MinPositionY"];
        id v21 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxPositionX"];
        long long v32 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxPositionY"];
        uint64_t v58 = [(__CFString *)v16 objectForKeyedSubscript:@"MinSampleID"];
        id v60 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxSampleID"];
        long long v33 = [(__CFString *)v16 objectForKeyedSubscript:@"RenderTargetArrayIndex"];
        *(void *)&long long v34 = -1;
        *((void *)&v34 + 1) = -1;
        *(_OWORD *)(v15 + 12) = v34;
        *(_OWORD *)(v15 + 28) = v34;
        *(_OWORD *)(v15 + 44) = v34;
        *((_DWORD *)v15 + 15) = -1;
        [v19 floatValue];
        *((_DWORD *)v15 + 4) = v35;
        [v20 floatValue];
        int32x4_t v36 = vdupq_n_s32(0xCE6E6B28);
        v36.i32[0] = *((_DWORD *)v15 + 4);
        v36.i32[1] = v37;
        *((int32x4_t *)v15 + 1) = v36;
        [v21 floatValue];
        *((_DWORD *)v15 + 8) = v38;
        [v32 floatValue];
        int32x4_t v39 = vdupq_n_s32(0x4E6E6B28u);
        v39.i32[0] = *((_DWORD *)v15 + 8);
        v39.i32[1] = v40;
        *((int32x4_t *)v15 + 2) = v39;
        *((_DWORD *)v15 + 12) = [v58 unsignedIntValue];
        *((_DWORD *)v15 + 13) = [v60 unsignedIntValue];
        if (v13 >= 2) {
          *((_DWORD *)v15 + 14) = [v33 unsignedIntValue];
        }
        *((_DWORD *)v15 + 2) = 64;

        goto LABEL_47;
      case 3uLL:
      case 5uLL:
        id v19 = [(__CFString *)v16 objectForKeyedSubscript:@"MinPositionX"];
        uint64_t v20 = [(__CFString *)v16 objectForKeyedSubscript:@"MinPositionY"];
        id v21 = [(__CFString *)v16 objectForKeyedSubscript:@"MinPositionZ"];
        BOOL v22 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxPositionX"];
        unint64_t v23 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxPositionY"];
        id v24 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxPositionZ"];
        *(void *)&long long v25 = -1;
        *((void *)&v25 + 1) = -1;
        *(_OWORD *)(v15 + 12) = v25;
        *(_OWORD *)(v15 + 28) = v25;
        *((_DWORD *)v15 + 11) = -1;
        *((_DWORD *)v15 + 4) = [v19 unsignedIntValue];
        *((_DWORD *)v15 + 5) = [v20 unsignedIntValue];
        *((_DWORD *)v15 + 6) = [v21 unsignedIntValue];
        *((_DWORD *)v15 + 8) = [v22 unsignedIntValue];
        *((_DWORD *)v15 + 9) = [v23 unsignedIntValue];
        *((_DWORD *)v15 + 10) = [v24 unsignedIntValue];
        *((_DWORD *)v15 + 2) = 48;

        goto LABEL_47;
      case 4uLL:
        id v19 = [(__CFString *)v16 objectForKeyedSubscript:@"InstanceID"];
        uint64_t v20 = [(__CFString *)v16 objectForKeyedSubscript:@"AmplificationID"];
        id v21 = [(__CFString *)v16 objectForKeyedSubscript:@"PatchIDs"];
        if (v13)
        {
          *(void *)(v15 + 12) = -1;
          *((_DWORD *)v15 + 5) = -1;
          *((_DWORD *)v15 + 3) = [v19 unsignedIntValue];
          *((_DWORD *)v15 + 4) = [v20 unsignedIntValue];
          unsigned int v41 = [v21 count];
          *((_DWORD *)v15 + 5) = v41;
          if (v41)
          {
            uint64_t v64 = v20;
            BOOL v67 = v19;
            unint64_t v42 = 0;
            do
            {
              uint64_t v43 = [v21 objectAtIndexedSubscript:v42];
              *(_DWORD *)&v15[4 * v42 + 24] = [v43 unsignedIntValue];

              ++v42;
              unint64_t v44 = *((unsigned int *)v15 + 5);
            }
            while (v42 < v44);
            int v31 = 4 * v44 + 24;
LABEL_43:
            uint64_t v20 = v64;
            id v19 = v67;
            goto LABEL_46;
          }
          int v31 = 24;
        }
        else
        {
          *(void *)(v15 + 12) = -1;
          *((_DWORD *)v15 + 3) = [v19 unsignedIntValue];
          unsigned int v52 = [v21 count];
          *((_DWORD *)v15 + 4) = v52;
          if (v52)
          {
            uint64_t v64 = v20;
            BOOL v67 = v19;
            unint64_t v53 = 0;
            do
            {
              id v54 = [v21 objectAtIndexedSubscript:v53];
              *(_DWORD *)&v15[4 * v53 + 20] = [v54 unsignedIntValue];

              ++v53;
              unint64_t v51 = *((unsigned int *)v15 + 4);
            }
            while (v53 < v51);
LABEL_42:
            int v31 = 4 * v51 + 20;
            goto LABEL_43;
          }
LABEL_44:
          int v31 = 20;
        }
LABEL_46:
        *((_DWORD *)v15 + 2) = v31;
LABEL_47:

        objc_storeStrong((id *)(a1 + 184), obj);
        uint64_t v27 = 1;
        break;
      case 6uLL:
        id v68 = [(__CFString *)v16 objectForKeyedSubscript:@"AmplificationID"];
        id v65 = [(__CFString *)v16 objectForKeyedSubscript:@"MinPositionX"];
        id v21 = [(__CFString *)v16 objectForKeyedSubscript:@"MinPositionY"];
        id v59 = [(__CFString *)v16 objectForKeyedSubscript:@"MinPositionZ"];
        id v57 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxPositionX"];
        uint64_t v62 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxPositionY"];
        id v61 = [(__CFString *)v16 objectForKeyedSubscript:@"MaxPositionZ"];
        id v45 = [(__CFString *)v16 objectForKeyedSubscript:@"ObjectThreadgroupPosX"];
        id v46 = [(__CFString *)v16 objectForKeyedSubscript:@"ObjectThreadgroupPosY"];
        uint64_t v56 = [(__CFString *)v16 objectForKeyedSubscript:@"ObjectThreadgroupPosZ"];
        *(void *)&long long v47 = -1;
        *((void *)&v47 + 1) = -1;
        *(_OWORD *)(v15 + 12) = v47;
        *(_OWORD *)(v15 + 28) = v47;
        *(_OWORD *)(v15 + 44) = v47;
        *(void *)(v15 + 60) = -1;
        *((_DWORD *)v15 + 4) = [v65 unsignedIntValue];
        *((_DWORD *)v15 + 5) = [v21 unsignedIntValue];
        *((_DWORD *)v15 + 6) = [v59 unsignedIntValue];
        *((_DWORD *)v15 + 8) = [v57 unsignedIntValue];
        *((_DWORD *)v15 + 9) = [v62 unsignedIntValue];
        *((_DWORD *)v15 + 10) = [v61 unsignedIntValue];
        *((_DWORD *)v15 + 12) = [v45 unsignedIntValue];
        *((_DWORD *)v15 + 13) = [v46 unsignedIntValue];
        *((_DWORD *)v15 + 14) = [v56 unsignedIntValue];
        id v19 = v68;
        *((_DWORD *)v15 + 16) = [v68 unsignedIntValue];
        *((_DWORD *)v15 + 2) = 68;

        uint64_t v20 = v65;
        goto LABEL_47;
      default:
        GTMTLReplay_handleError(101, (uint64_t)"Unreachable", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_shaderDebugger_internal.m", (uint64_t)"GTShaderDebuggerMakeTraceBuffer", 4779, 4);
        if (!a2) {
          goto LABEL_20;
        }
        id v26 = @"Error encountered while setting up GPU data buffer";
        goto LABEL_17;
    }
  }
  else
  {
    id v16 = +[NSString stringWithFormat:@"Failed to create GPU data buffer [%llu]", v12];
    if (a2)
    {
      id v26 = v16;
LABEL_17:
      GTShaderDebuggerMakeError(1u, v26, 0, 0, 0);
      uint64_t v27 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
LABEL_20:
      uint64_t v27 = 0;
    }
  }

  return v27;
}

id GTShaderDebuggerMakeTraceData(uint64_t a1, void *a2)
{
  id v4 = *(id *)(a1 + 184);
  id v5 = [*(id *)(a1 + 192) objectForKeyedSubscript:@"ROI"];
  id v6 = v4;
  uint64_t v7 = [v6 contents];
  id v8 = [v6 length];
  uint64_t v9 = [v5 objectForKeyedSubscript:@"Type"];
  unsigned int v10 = [v9 integerValue];

  if (*v7 == 1)
  {
    int v11 = *(_DWORD *)(*(void *)(a1 + 88) + 8);
    if ((v11 + 16079) < 2 || v11 == -16327 || v11 == -16220) {
      CFStringRef v25 = @"dispatch";
    }
    else {
      CFStringRef v25 = @"draw";
    }
    id v14 = +[NSString stringWithFormat:@"No thread execution data for the %@ call", v25];
    if (!a2) {
      goto LABEL_33;
    }
    if (v10 == 3) {
      CFStringRef v15 = @"Select a different threadgroup to debug and try again";
    }
    else {
      CFStringRef v15 = 0;
    }
    if ((*(void *)(a1 + 208) & 0x10) != 0) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 3;
    }
    id v17 = v14;
    goto LABEL_32;
  }
  if (v8 != (id)v7[1])
  {
    id v14 = +[NSString stringWithFormat:@"Internal error: Corrupt GPU data buffer [%u:%llu]", v7[1], v8];
    if (!a2)
    {
LABEL_33:

LABEL_34:
      id v22 = 0;
      goto LABEL_35;
    }
    if ((*(void *)(a1 + 208) & 0x10) != 0) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 1;
    }
    id v17 = v14;
    CFStringRef v15 = 0;
LABEL_32:
    GTShaderDebuggerMakeError(v16, v17, v15, 0, 0);
    *a2 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_33;
  }
  if ((unint64_t)v8 < v7[2])
  {
    id v18 = +[NSString stringWithFormat:@"GPU data buffer limits exceeded [%u]", v7[2]];
    if (a2)
    {
      if ((*(void *)(a1 + 208) & 0x10) != 0) {
        unsigned int v19 = 4;
      }
      else {
        unsigned int v19 = 3;
      }
      CFStringRef v27 = @"RequiredTraceBufferSize";
      uint64_t v20 = +[NSNumber numberWithUnsignedInt:v7[2]];
      unsigned int v28 = v20;
      id v21 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
      GTShaderDebuggerMakeError(v19, v18, 0, 0, v21);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_34;
  }
  unsigned int v26 = v10 - 1;
  id v24 = [objc_alloc((Class)NSMutableData) initWithBytes:&v26 length:4];
  [v24 appendBytes:v7 length:v7[2]];
  id v22 = [v24 copy];

LABEL_35:

  return v22;
}

id GTShaderDebuggerMakeResourceMappings(uint64_t **a1)
{
  id v2 = (id)(*a1)[1];
  uint64_t v3 = **a1;
  uint64_t v102 = *(uint64_t **)(v3 + 40);
  id v104 = v2;
  uint64_t v100 = *(void *)(v3 + 8);
  unint64_t v101 = *a1[11];
  long long v126 = 0u;
  long long v127 = 0u;
  long long v88 = a1;
  uint64_t v108 = a1[16];
  if ([v108 count])
  {
    id v94 = objc_alloc_init((Class)NSMutableArray);
    id v95 = objc_alloc_init((Class)NSMutableSet);
    id v89 = objc_alloc_init((Class)NSMutableSet);
    id v87 = objc_alloc_init((Class)NSMutableSet);
    v160[0] = &off_759DC8;
    v160[1] = &off_759DE0;
    v161[0] = v95;
    v161[1] = v89;
    v160[2] = &off_759DF8;
    v161[2] = v87;
    id v105 = +[NSDictionary dictionaryWithObjects:v161 forKeys:v160 count:3];
    long long v158 = *((_OWORD *)a1 + 2);
    v157[0] = &off_759DC8;
    v157[1] = &off_759DE0;
    v157[2] = &off_759DF8;
    unsigned int v159 = a1[6];
    +[NSDictionary dictionaryWithObjects:&v158 forKeys:v157 count:3];
    long long v145 = 0u;
    long long v146 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    long long v91 = (apr_pool_t *)[obj countByEnumeratingWithState:&v143 objects:v156 count:16];
    if (v91)
    {
      uint64_t v90 = *(void *)v144;
      do
      {
        for (p = 0; p != v91; p = (apr_pool_t *)((char *)p + 1))
        {
          if (*(void *)v144 != v90) {
            objc_enumerationMutation(obj);
          }
          uint64_t v4 = *(void *)(*((void *)&v143 + 1) + 8 * (void)p);
          id v5 = [obj objectForKeyedSubscript:v4];
          long long v141 = 0u;
          long long v142 = 0u;
          long long v139 = 0u;
          long long v140 = 0u;
          id v6 = [v5 countByEnumeratingWithState:&v139 objects:v155 count:16];
          if (v6)
          {
            uint64_t v7 = *(void *)v140;
            do
            {
              for (id i = 0; i != v6; id i = (char *)i + 1)
              {
                if (*(void *)v140 != v7) {
                  objc_enumerationMutation(v5);
                }
                uint64_t v9 = *(void *)(*((void *)&v139 + 1) + 8 * i);
                unsigned int v10 = [v5 objectForKeyedSubscript:v9];
                id v11 = [v10 unsignedLongLongValue];

                if (v11)
                {
                  v138[0] = _NSConcreteStackBlock;
                  v138[1] = 3221225472;
                  void v138[2] = ___GetCurrentEncoderBoundResources_block_invoke;
                  v138[3] = &unk_746A38;
                  v138[4] = v4;
                  v138[5] = v9;
                  unint64_t v12 = [v108 gt_firstObjectPassingTest:v138];
                  if (v12)
                  {
                    unint64_t v13 = [v105 objectForKeyedSubscript:v4];
                    id v14 = +[NSNumber numberWithUnsignedLongLong:v11];
                    [v13 addObject:v14];
                  }
                }
              }
              id v6 = [v5 countByEnumeratingWithState:&v139 objects:v155 count:16];
            }
            while (v6);
          }
        }
        long long v91 = (apr_pool_t *)[obj countByEnumeratingWithState:&v143 objects:v156 count:16];
      }
      while (v91);
    }

    CFStringRef v15 = a1[3];
    long long v134 = 0u;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    id v16 = [v15 countByEnumeratingWithState:&v134 objects:v154 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v135;
      do
      {
        for (uint64_t j = 0; j != v16; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v135 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v19 = *(void *)(*((void *)&v134 + 1) + 8 * (void)j);
          v133[0] = _NSConcreteStackBlock;
          v133[1] = 3221225472;
          v133[2] = ___GetCurrentEncoderBoundResources_block_invoke_2;
          v133[3] = &unk_746A10;
          v133[4] = v19;
          uint64_t v20 = [v108 gt_firstObjectPassingTest:v133];
          if (v20) {
            [v94 addObject:v19];
          }
        }
        id v16 = [v15 countByEnumeratingWithState:&v134 objects:v154 count:16];
      }
      while (v16);
    }
    unint64_t v21 = *v88[11];
    uint64_t v22 = *(void *)(**v88 + 40);
    unint64_t v23 = v88[2];
    long long v129 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    id v24 = [v23 countByEnumeratingWithState:&v129 objects:v153 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v130;
      do
      {
        for (unint64_t k = 0; k != v24; unint64_t k = (char *)k + 1)
        {
          if (*(void *)v130 != v25) {
            objc_enumerationMutation(v23);
          }
          CFStringRef v27 = *(void **)(*((void *)&v129 + 1) + 8 * (void)k);
          uint64_t Object = GTMTLSMContext_getObject(*(void *)v22, (uint64_t)[v27 unsignedLongLongValue], v21);
          if (Object)
          {
            int v29 = *(_DWORD *)Object;
            uint64_t v30 = v95;
            if (v29 != 22)
            {
              if (v29 != 80) {
                continue;
              }
              uint64_t v30 = v89;
            }
            [v30 addObject:v27];
          }
        }
        id v24 = [v23 countByEnumeratingWithState:&v129 objects:v153 count:16];
      }
      while (v24);
    }
    id v106 = v88[1];
    if ([v106 count])
    {
      newpool = 0;
      apr_pool_create_ex(&newpool, 0, 0, v31);
      pa = newpool;
      long long v32 = apr_array_make(newpool, 32, 8);
      GTMTLSMContext_getObjects(*(_DWORD **)(v22 + 8), v21, v32);
      if (v32->nelts >= 1)
      {
        uint64_t v33 = 0;
        do
        {
          uint64_t v34 = *(void *)&v32->elts[8 * v33];
          if (v34)
          {
            if (*(void *)(v34 + 48))
            {
              int v35 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
              unsigned int v36 = [v106 containsObject:v35];

              if (v36)
              {
                __int32 v37 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v34 + 8)];
                [v95 addObject:v37];
              }
            }
          }
          ++v33;
        }
        while (v33 < v32->nelts);
      }
      v32->uint64_t nelts = 0;
      GTMTLSMContext_getObjects(*(_DWORD **)(v22 + 16), v21, v32);
      if (v32->nelts >= 1)
      {
        uint64_t v38 = 0;
        do
        {
          uint64_t v39 = *(void *)&v32->elts[8 * v38];
          if (v39)
          {
            if (*(void *)(v39 + 48))
            {
              __int32 v40 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
              unsigned int v41 = [v106 containsObject:v40];

              if (v41)
              {
                unint64_t v42 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v39 + 8)];
                [v89 addObject:v42];
              }
            }
          }
          ++v38;
        }
        while (v38 < v32->nelts);
      }
      apr_pool_destroy(pa);
    }
    *((void *)&v92 + 1) = [v94 copy];
    id v43 = [v95 copy];
    *(void *)&long long v126 = v43;
    pb = (apr_pool_t *)[v89 copy];
    *((void *)&v126 + 1) = pb;
    *(void *)&long long v92 = [v87 copy];
    long long v127 = v92;
  }
  else
  {
    long long v92 = 0uLL;
    pb = 0;
    id v43 = 0;
  }

  id v109 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:[v43 count]];
  long long v124 = 0u;
  long long v125 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  id v44 = v43;
  id v45 = [v44 countByEnumeratingWithState:&v122 objects:v152 count:16];
  if (v45)
  {
    uint64_t v46 = *(void *)v123;
    do
    {
      for (unint64_t m = 0; m != v45; unint64_t m = (char *)m + 1)
      {
        if (*(void *)v123 != v46) {
          objc_enumerationMutation(v44);
        }
        id v48 = [*(id *)(*((void *)&v122 + 1) + 8 * (void)m) unsignedLongLongValue];
        unint64_t v49 = [v104 bufferForKey:v48];
        uint64_t v50 = DEVICEOBJECT(v49);

        if (v50)
        {
          unint64_t v51 = GTMTLSMContext_getObject(*v102, (uint64_t)v48, v101);
          if (v51)
          {
            unsigned int v52 = v51;
            unint64_t v53 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v50 gpuAddress]);
            v156[0] = v52[1];
            id v54 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(*find_entry(v100, v156, 8uLL, 0) + 32) + 8)];
            [v109 setObject:v53 forKeyedSubscript:v54];
          }
        }
      }
      id v45 = [v44 countByEnumeratingWithState:&v122 objects:v152 count:16];
    }
    while (v45);
  }

  id v107 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:-[apr_pool_t count](pb, "count")];
  long long v120 = 0u;
  long long v121 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  id v55 = pb;
  id v56 = [(apr_pool_t *)v55 countByEnumeratingWithState:&v118 objects:v151 count:16];
  if (v56)
  {
    uint64_t v57 = *(void *)v119;
    do
    {
      for (uint64_t n = 0; n != v56; uint64_t n = (char *)n + 1)
      {
        if (*(void *)v119 != v57) {
          objc_enumerationMutation(v55);
        }
        id v59 = [*(id *)(*((void *)&v118 + 1) + 8 * (void)n) unsignedLongLongValue];
        id v60 = [v104 textureForKey:v59];
        id v61 = DEVICEOBJECT(v60);

        if (v61)
        {
          uint64_t v62 = GTMTLSMContext_getObject(*v102, (uint64_t)v59, v101);
          if (v62)
          {
            v156[0] = v62[1];
            uint64_t v63 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(*find_entry(v100, v156, 8uLL, 0) + 32) + 8)];
            uint64_t v64 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v61 uniqueIdentifier]);
            [v107 setObject:v63 forKeyedSubscript:v64];
          }
        }
      }
      id v56 = [(apr_pool_t *)v55 countByEnumeratingWithState:&v118 objects:v151 count:16];
    }
    while (v56);
  }

  pc = (apr_pool_t *)objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend((id)v92, "count"));
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  id v65 = (id)v92;
  id v66 = [v65 countByEnumeratingWithState:&v114 objects:v150 count:16];
  if (v66)
  {
    uint64_t v67 = *(void *)v115;
    do
    {
      for (iid i = 0; ii != v66; iid i = (char *)ii + 1)
      {
        if (*(void *)v115 != v67) {
          objc_enumerationMutation(v65);
        }
        id v69 = [*(id *)(*((void *)&v114 + 1) + 8 * (void)ii) unsignedLongLongValue];
        id v70 = [v104 samplerStateForKey:v69];
        long long v71 = DEVICEOBJECT(v70);

        if (v71)
        {
          long long v72 = GTMTLSMContext_getObject(*v102, (uint64_t)v69, v101);
          if (v72)
          {
            v156[0] = v72[1];
            long long v73 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(*find_entry(v100, v156, 8uLL, 0) + 32) + 8)];
            long long v74 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v71 uniqueIdentifier]);
            [(apr_pool_t *)pc setObject:v73 forKeyedSubscript:v74];
          }
        }
      }
      id v66 = [v65 countByEnumeratingWithState:&v114 objects:v150 count:16];
    }
    while (v66);
  }

  id v103 = v88[17];
  id v75 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:[*((id *)&v92 + 1) count]];
  long long v76 = v88[21];
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  id v77 = *((id *)&v92 + 1);
  id v78 = [v77 countByEnumeratingWithState:&v110 objects:v149 count:16];
  if (v78)
  {
    uint64_t v79 = *(void *)v111;
    do
    {
      for (juint64_t j = 0; jj != v78; juint64_t j = (char *)jj + 1)
      {
        if (*(void *)v111 != v79) {
          objc_enumerationMutation(v77);
        }
        uint64_t v81 = *(void *)(*((void *)&v110 + 1) + 8 * (void)jj);
        long long v82 = [v76 objectForKeyedSubscript:v81];
        long long v83 = DEVICEOBJECT(v82);

        if (v83)
        {
          long long v84 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v83 gpuAddress]);
          [v75 setObject:v84 forKeyedSubscript:v81];
        }
      }
      id v78 = [v77 countByEnumeratingWithState:&v110 objects:v149 count:16];
    }
    while (v78);
  }

  v147[0] = @"Bytes";
  v147[1] = @"Buffers";
  v148[0] = v75;
  v148[1] = v109;
  v147[2] = @"Textures";
  v147[3] = @"Samplers";
  v148[2] = v107;
  v148[3] = pc;
  v147[4] = @"ConstantSamplers";
  v148[4] = v103;
  long long v85 = +[NSDictionary dictionaryWithObjects:v148 forKeys:v147 count:5];

  __destructor_8_s0_s8_s16_s24((uint64_t)&v126);

  return v85;
}

void sub_2F62D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void __destructor_8_s0_s8_s16_s24(uint64_t a1)
{
  id v2 = *(void **)(a1 + 24);
}

void ShaderDebugger::Metadata::MDSerializer::~MDSerializer(ShaderDebugger::Metadata::MDSerializer *this)
{
  id v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(*((void **)this + 1));
}

void ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (uint64_t *)(a1 + 24);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    id v8 = (uint64_t *)a2;
  }
  else {
    id v8 = *(uint64_t **)a2;
  }
  if (v7 >= 0) {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v9 = *(void *)(a2 + 8);
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
  int8x8_t v11 = *(int8x8_t *)(a1 + 32);
  if (v11)
  {
    unint64_t v12 = v10;
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v15 = v10;
      if (v10 >= *(void *)&v11) {
        unint64_t v15 = v10 % *(void *)&v11;
      }
    }
    else
    {
      unint64_t v15 = (*(void *)&v11 - 1) & v10;
    }
    id v16 = *(unsigned __int8 ***)(*v6 + 8 * v15);
    if (v16)
    {
      for (id i = *v16; i; id i = *(unsigned __int8 **)i)
      {
        unint64_t v18 = *((void *)i + 1);
        if (v18 == v12)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v18 >= *(void *)&v11) {
              v18 %= *(void *)&v11;
            }
          }
          else
          {
            v18 &= *(void *)&v11 - 1;
          }
          if (v18 != v15) {
            break;
          }
        }
      }
    }
  }
  uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a3 + 8);
  }
  if (v19)
  {
    uint64_t v20 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, a2)+ 40);
    std::string::operator=(v20, (const std::string *)a3);
  }
  else
  {
    memset(&v25, 0, sizeof(v25));
    int v26 = -1;
    unsigned int v28 = 0;
    int v29 = 0;
    __uint64_t n = 0;
    std::string::operator=(&v25, (const std::string *)a2);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v21 = (const char *)a2;
    }
    else {
      unint64_t v21 = *(const char **)a2;
    }
    if (!stat(v21, &v30) && (v30.st_mode & 0xF000) == 0x8000)
    {
      __uint64_t n = v30.st_size;
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v22 = (const char *)a2;
      }
      else {
        uint64_t v22 = *(const char **)a2;
      }
      int v26 = open(v22, 0, 0);
      unsigned int v28 = mmap(0, __n, 1, 2, v26, 0);
      int v29 = v28;
    }
    if (v26 != -1)
    {
      memset(&v30, 0, 24);
      if (__n)
      {
        std::string::resize((std::string *)&v30, __n, 0);
        if ((v30.st_gid & 0x80000000) == 0) {
          unint64_t v23 = &v30;
        }
        else {
          unint64_t v23 = *(stat **)&v30.st_dev;
        }
        memcpy(v23, v28, __n);
      }
      id v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, a2);
      std::string::operator=((std::string *)(v24 + 40), (const std::string *)&v30);
      if (SHIBYTE(v30.st_gid) < 0) {
        operator delete(*(void **)&v30.st_dev);
      }
      if (v26 != -1)
      {
        munmap(v28, __n);
        close(v26);
        int v26 = -1;
      }
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    id v8 = (uint64_t *)a2;
  }
  else {
    id v8 = *(uint64_t **)a2;
  }
  if (v7 >= 0) {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v9 = *(void *)(a2 + 8);
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
  unint64_t v11 = v10;
  unint64_t v12 = a1[1];
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v12) {
        unint64_t v3 = v10 % v12;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(void ***)(*a1 + 8 * v3);
    if (v15)
    {
      id v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = *((void *)v16 + 1);
          if (v17 == v11)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              return v16;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v3) {
              break;
            }
          }
          id v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  unint64_t v18 = a1 + 2;
  id v16 = (char *)operator new(0x40uLL);
  *(void *)id v16 = 0;
  *((void *)v16 + 1) = v11;
  uint64_t v19 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v16 + 5) = 0;
  *((void *)v16 + 6) = 0;
  *((void *)v16 + 7) = 0;
  float v20 = (float)(unint64_t)(a1[3] + 1);
  float v21 = *((float *)a1 + 8);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v12 = a1[1];
    if (*(void *)&prime > v12) {
      goto LABEL_39;
    }
    if (*(void *)&prime < v12)
    {
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v12 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v12)
      {
        unint64_t v12 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v26 = operator new(8 * *(void *)&prime);
          CFStringRef v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          int v29 = (void *)*v18;
          if (*v18)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v30) = v18;
            int v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*a1 + 8 * v36))
                  {
                    *(void *)(*a1 + 8 * v36) = v29;
                    goto LABEL_64;
                  }
                  *int v29 = *v35;
                  *int v35 = **(void **)(*a1 + 8 * v36);
                  **(void **)(*a1 + 8 * v36) = v35;
                  int v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_64:
                int v29 = v35;
                int v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v12 = (unint64_t)prime;
          goto LABEL_68;
        }
        unsigned int v41 = (void *)*a1;
        *a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v12 = 0;
        a1[1] = 0;
      }
    }
LABEL_68:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v3 = v11 % v12;
      }
      else {
        unint64_t v3 = v11;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v11;
    }
  }
  uint64_t v37 = *a1;
  uint64_t v38 = *(void **)(*a1 + 8 * v3);
  if (v38)
  {
    *(void *)id v16 = *v38;
LABEL_81:
    *uint64_t v38 = v16;
    goto LABEL_82;
  }
  *(void *)id v16 = *v18;
  void *v18 = v16;
  *(void *)(v37 + 8 * v3) = v18;
  if (*(void *)v16)
  {
    unint64_t v39 = *(void *)(*(void *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v39 >= v12) {
        v39 %= v12;
      }
    }
    else
    {
      v39 &= v12 - 1;
    }
    uint64_t v38 = (void *)(*a1 + 8 * v39);
    goto LABEL_81;
  }
LABEL_82:
  ++a1[3];
  return v16;
}

void ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(unint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = (unsigned char *)a1[1];
  unint64_t v5 = a1[2] - *a1;
  if (v5 < (unint64_t)&v4[-*a1 + 8])
  {
    std::vector<unsigned char>::reserve(a1, (2 * v5) | 1);
    uint64_t v4 = (unsigned char *)a1[1];
  }
  uint64_t v6 = 8;
  do
  {
    unint64_t v7 = a1[2];
    if ((unint64_t)v4 >= v7)
    {
      unint64_t v9 = *a1;
      unint64_t v10 = &v4[-*a1];
      unint64_t v11 = (unint64_t)(v10 + 1);
      if ((uint64_t)(v10 + 1) < 0) {
        abort();
      }
      unint64_t v12 = v7 - v9;
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        unint64_t v14 = (char *)operator new(v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v10[(void)v14];
      id v16 = &v10[(void)v14];
      *id v16 = *a2;
      id v8 = v16 + 1;
      if (v4 != (unsigned char *)v9)
      {
        unint64_t v17 = &v4[~v9];
        do
        {
          char v18 = *--v4;
          (v17--)[(void)v14] = v18;
        }
        while (v4 != (unsigned char *)v9);
        uint64_t v4 = (unsigned char *)*a1;
        unint64_t v15 = v14;
      }
      *a1 = (unint64_t)v15;
      a1[1] = (unint64_t)v8;
      a1[2] = (unint64_t)&v14[v13];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      unsigned char *v4 = *a2;
      id v8 = v4 + 1;
    }
    ++a2;
    a1[1] = (unint64_t)v8;
    uint64_t v4 = v8;
    --v6;
  }
  while (v6);
}

void ShaderDebugger::Metadata::MDSerializer::write(unint64_t *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = a1[2] - *a1;
  if (v6 < a3 - *a1 + a1[1]) {
    std::vector<unsigned char>::reserve(a1, (2 * v6) | 1);
  }
  if (v3)
  {
    unint64_t v7 = (unsigned char *)a1[1];
    do
    {
      unint64_t v8 = a1[2];
      if ((unint64_t)v7 >= v8)
      {
        unint64_t v10 = *a1;
        unint64_t v11 = &v7[-*a1];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          abort();
        }
        unint64_t v13 = v8 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          unint64_t v15 = (char *)operator new(v14);
        }
        else {
          unint64_t v15 = 0;
        }
        id v16 = &v11[(void)v15];
        unint64_t v17 = &v11[(void)v15];
        *unint64_t v17 = *a2;
        unint64_t v9 = v17 + 1;
        if (v7 != (unsigned char *)v10)
        {
          char v18 = &v7[~v10];
          do
          {
            char v19 = *--v7;
            (v18--)[(void)v15] = v19;
          }
          while (v7 != (unsigned char *)v10);
          unint64_t v7 = (unsigned char *)*a1;
          id v16 = v15;
        }
        *a1 = (unint64_t)v16;
        a1[1] = (unint64_t)v9;
        a1[2] = (unint64_t)&v15[v14];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *unint64_t v7 = *a2;
        unint64_t v9 = v7 + 1;
      }
      ++a2;
      a1[1] = (unint64_t)v9;
      unint64_t v7 = v9;
      --v3;
    }
    while (v3);
  }
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v5 = (char *)a1[1];
    unint64_t v6 = operator new(__sz);
    unint64_t v7 = &v5[(void)v6 - v2];
    unint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(uint64_t a1, uint64_t a2)
{
  int isMetadataIdReserved = ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)a1, a2);
  unint64_t v5 = *(char **)a1;
  unint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(char **)a1;
  if (*(char **)a1 != v6)
  {
    unint64_t v7 = *(char **)a1;
    while (*(void *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v6)
      {
        unint64_t v7 = *(char **)(a1 + 8);
        break;
      }
    }
  }
  if (v7 == v6) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = (v7 - v5) >> 3;
  }
  if (v8 == -1) {
    int v9 = 1;
  }
  else {
    int v9 = isMetadataIdReserved;
  }
  if (v9 != 1) {
    return -1;
  }
  if (!isMetadataIdReserved)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if ((unint64_t)v6 >= v10)
    {
      uint64_t v12 = (v6 - v5) >> 3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
LABEL_34:
      }
        abort();
      uint64_t v14 = v10 - (void)v5;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      BOOL v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v15) {
        unint64_t v16 = v13;
      }
      if (v16)
      {
        unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v16);
        unint64_t v5 = *(char **)a1;
        unint64_t v6 = *(char **)(a1 + 8);
      }
      else
      {
        uint64_t v17 = 0;
      }
      char v18 = (uint64_t *)(v16 + 8 * v12);
      unint64_t v19 = v16 + 8 * v17;
      uint64_t *v18 = a2;
      unint64_t v11 = v18 + 1;
      while (v6 != v5)
      {
        uint64_t v20 = *((void *)v6 - 1);
        v6 -= 8;
        *--char v18 = v20;
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v11;
      *(void *)(a1 + 16) = v19;
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(void *)unint64_t v6 = a2;
      unint64_t v11 = v6 + 8;
    }
    *(void *)(a1 + 8) = v11;
    char v22 = 0;
    std::vector<BOOL>::push_back((uint64_t *)(a1 + 24), &v22);
    return ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) - 1;
  }
  if (*(void *)(a1 + 32) <= v8) {
    goto LABEL_34;
  }
  *(void *)(*(void *)(a1 + 24) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v8);
  return v8;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved(char **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  if (*a1 != v3)
  {
    while (*(void *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v3)
      {
        uint64_t v4 = a1[1];
        break;
      }
    }
  }
  if (v4 == v3) {
    return 0;
  }
  unint64_t v5 = v4 - v2;
  unint64_t v6 = (v4 - v2) >> 3;
  if ((unint64_t)a1[4] <= v6) {
    abort();
  }
  return (*(void *)&a1[3][(v6 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v5 >> 3)) & 1;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeLocation(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = a5;
  uint64_t v56 = a6;
  __str.__r_.__value_.__r.__words[0] = 1;
  unint64_t v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 1uLL, &__str);
  unint64_t v11 = v10;
  uint64_t v13 = (uint64_t)(v10 + 40);
  uint64_t v12 = (void *)*((void *)v10 + 5);
  uint64_t v14 = (void *)*((void *)v10 + 6);
  BOOL v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        BOOL v15 = (void *)*((void *)v10 + 6);
        break;
      }
    }
  }
  uint64_t v16 = v15 - v12;
  if (v15 == v14) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = v16;
  }
  if (v17 == -1 || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v10 + 5, a2))
  {
    uint64_t v17 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v13, a2);
    uint64_t v55 = v17;
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __str = *(std::string *)a3;
    }
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v53 = *(std::string *)a4;
    }
    int v18 = *(char *)(a3 + 23);
    if (v18 < 0)
    {
      std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      int v18 = *(char *)(a3 + 23);
      if (v18 < 0)
      {
        uint64_t v20 = *(unsigned char **)a3;
        uint64_t v19 = *(void *)(a3 + 8);
        goto LABEL_20;
      }
    }
    else
    {
      std::string v52 = *(std::string *)a3;
    }
    uint64_t v19 = v18;
    uint64_t v20 = (unsigned char *)a3;
LABEL_20:
    float v21 = (unint64_t *)(v11 + 88);
    if (v19)
    {
      char v22 = &v20[v19];
      unint64_t v23 = v20;
      while (*v23 != 47)
      {
        ++v23;
        if (!--v19) {
          goto LABEL_27;
        }
      }
      if (v23 != v22 && v23 == v20)
      {
LABEL_56:
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        while (size)
        {
          int v37 = p_str->__r_.__value_.__s.__data_[--size];
          if (v37 == 47)
          {
            if (size != -1)
            {
              std::string::size_type v38 = size + 1;
              std::string::basic_string(&v51, &__str, 0, size + 1, (std::allocator<char> *)&v58);
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v53.__r_.__value_.__l.__data_);
              }
              std::string v53 = v51;
              std::string::basic_string(&v51, &__str, v38, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v58);
              if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v52.__r_.__value_.__l.__data_);
              }
              std::string v52 = v51;
            }
            break;
          }
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v39 = v53.__r_.__value_.__l.__size_;
          if (!v53.__r_.__value_.__l.__size_) {
            goto LABEL_75;
          }
          __int32 v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v39 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
          if (!*((unsigned char *)&v53.__r_.__value_.__s + 23)) {
            goto LABEL_75;
          }
          __int32 v40 = &v53;
        }
        if (v40->__r_.__value_.__s.__data_[v39 - 1] != 47) {
          std::string::append(&v53, "/");
        }
LABEL_75:
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v21, &v55);
        int v41 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v42 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v42 = v52.__r_.__value_.__l.__size_;
        }
        v51.__r_.__value_.__r.__words[0] = v42;
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v21, &v51);
        id v43 = (void *)v52.__r_.__value_.__r.__words[0];
        if (v41 >= 0) {
          id v44 = &v52;
        }
        else {
          id v44 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        ShaderDebugger::Metadata::MDSerializer::write(v21, v44, v42);
        std::string::size_type v45 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v45 = v53.__r_.__value_.__l.__size_;
        }
        v51.__r_.__value_.__r.__words[0] = v45;
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v21, &v51);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v46 = &v53;
        }
        else {
          uint64_t v46 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = v53.__r_.__value_.__l.__size_;
        }
        ShaderDebugger::Metadata::MDSerializer::write(v21, v46, v47);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v21, &v57);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v21, &v56);
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v51, (const void **)&v53.__r_.__value_.__l.__data_, (const void **)&v52.__r_.__value_.__l.__data_);
        std::string::size_type v48 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        char v49 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v48 = v51.__r_.__value_.__l.__size_;
        }
        if (v48)
        {
          long long v58 = 0uLL;
          uint64_t v59 = 0;
          ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile((uint64_t)a1, (uint64_t)&v51, (uint64_t)&v58);
          if (SHIBYTE(v59) < 0) {
            operator delete((void *)v58);
          }
          char v49 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        }
        if (v49 < 0)
        {
          operator delete(v51.__r_.__value_.__l.__data_);
          if ((v41 & 0x80000000) == 0) {
            goto LABEL_97;
          }
        }
        else if ((v41 & 0x80000000) == 0)
        {
LABEL_97:
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          return v17;
        }
        operator delete(v43);
        goto LABEL_97;
      }
    }
LABEL_27:
    int v24 = *(unsigned __int8 *)(a4 + 23);
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(void *)(a4 + 8) != 1)
      {
LABEL_36:
        if ((v24 & 0x80u) == 0) {
          size_t v26 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          size_t v26 = *(void *)(a4 + 8);
        }
        CFStringRef v27 = &v51;
        std::string::basic_string[abi:nn180100]((uint64_t)&v51, v26 + 1);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          CFStringRef v27 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        if (v26)
        {
          if (*(char *)(a4 + 23) >= 0) {
            uint64_t v28 = (const void *)a4;
          }
          else {
            uint64_t v28 = *(const void **)a4;
          }
          memmove(v27, v28, v26);
        }
        *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 47;
        int v29 = *(char *)(a3 + 23);
        if (v29 >= 0) {
          unint64_t v30 = (const std::string::value_type *)a3;
        }
        else {
          unint64_t v30 = *(const std::string::value_type **)a3;
        }
        if (v29 >= 0) {
          std::string::size_type v31 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v31 = *(void *)(a3 + 8);
        }
        unint64_t v32 = std::string::append(&v51, v30, v31);
        std::string::size_type v33 = v32->__r_.__value_.__r.__words[0];
        *(void *)&long long v58 = v32->__r_.__value_.__l.__size_;
        *(void *)((char *)&v58 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
        char v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[0] = v33;
        __str.__r_.__value_.__l.__size_ = v58;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v58 + 7);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v34;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        goto LABEL_56;
      }
      std::string v25 = *(unsigned char **)a4;
    }
    else
    {
      std::string v25 = (unsigned char *)a4;
      if (v24 != 1) {
        goto LABEL_36;
      }
    }
    if (*v25 == 47)
    {
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v51, (const void **)a4, (const void **)a3);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v51;
      goto LABEL_56;
    }
    goto LABEL_36;
  }
  return v17;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t result = std::string::basic_string[abi:nn180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v8 = (char *)result;
  }
  else {
    unint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  unint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v11 = a3;
    }
    else {
      unint64_t v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v21 = 0;
  size_t v6 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 0, &v21);
  unint64_t v7 = v6;
  uint64_t v9 = (uint64_t)(v6 + 40);
  unint64_t v8 = (void *)*((void *)v6 + 5);
  unint64_t v10 = (void *)*((void *)v6 + 6);
  unint64_t v11 = v8;
  if (v8 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        unint64_t v11 = (void *)*((void *)v6 + 6);
        break;
      }
    }
  }
  uint64_t v12 = v11 - v8;
  if (v11 == v10) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 == -1 || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v6 + 5, a2))
  {
    uint64_t v13 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v9, a2);
    uint64_t v19 = v13;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v7 + 11, &v19);
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a3 + 8);
    }
    uint64_t v21 = v14;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v7 + 11, &v21);
    int v15 = *(char *)(a3 + 23);
    if (v15 >= 0) {
      uint64_t v16 = (unsigned char *)a3;
    }
    else {
      uint64_t v16 = *(unsigned char **)a3;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 8);
    }
    ShaderDebugger::Metadata::MDSerializer::write((unint64_t *)v7 + 11, v16, v17);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v7 + 11, &v20);
  }
  return v13;
}

void ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a5;
  uint64_t v21 = a3;
  uint64_t v18 = -1;
  uint64_t v19 = a6;
  uint64_t v17 = 6;
  unint64_t v8 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 6uLL, &v17);
  uint64_t v9 = v8;
  uint64_t v11 = (uint64_t)(v8 + 40);
  unint64_t v10 = (char *)*((void *)v8 + 5);
  uint64_t v12 = (char *)*((void *)v8 + 6);
  uint64_t v13 = v10;
  if (v10 != v12)
  {
    while (*(void *)v13 != a2)
    {
      v13 += 8;
      if (v13 == v12)
      {
        uint64_t v13 = (char *)*((void *)v8 + 6);
        break;
      }
    }
  }
  uint64_t v14 = (char *)(v13 - v10);
  BOOL v15 = v13 == v12 || v14 + 8 == 0;
  if (v15 || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v8 + 5, a2))
  {
    uint64_t v17 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v11, a2);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v9 + 11, &v17);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v9 + 11, &v21);
    uint64_t v16 = a4;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v9 + 11, &v16);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v9 + 11, &v20);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v9 + 11, &v19);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v9 + 11, &v18);
  }
}

void ShaderDebugger::Metadata::MDSerializer::write<unsigned int>(unint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = (unsigned char *)a1[1];
  unint64_t v5 = a1[2] - *a1;
  if (v5 < (unint64_t)&v4[-*a1 + 4])
  {
    std::vector<unsigned char>::reserve(a1, (2 * v5) | 1);
    uint64_t v4 = (unsigned char *)a1[1];
  }
  uint64_t v6 = 4;
  do
  {
    unint64_t v7 = a1[2];
    if ((unint64_t)v4 >= v7)
    {
      unint64_t v9 = *a1;
      unint64_t v10 = &v4[-*a1];
      unint64_t v11 = (unint64_t)(v10 + 1);
      if ((uint64_t)(v10 + 1) < 0) {
        abort();
      }
      unint64_t v12 = v7 - v9;
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        uint64_t v14 = (char *)operator new(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      BOOL v15 = &v10[(void)v14];
      uint64_t v16 = &v10[(void)v14];
      *uint64_t v16 = *a2;
      unint64_t v8 = v16 + 1;
      if (v4 != (unsigned char *)v9)
      {
        uint64_t v17 = &v4[~v9];
        do
        {
          char v18 = *--v4;
          (v17--)[(void)v14] = v18;
        }
        while (v4 != (unsigned char *)v9);
        uint64_t v4 = (unsigned char *)*a1;
        BOOL v15 = v14;
      }
      *a1 = (unint64_t)v15;
      a1[1] = (unint64_t)v8;
      a1[2] = (unint64_t)&v14[v13];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      unsigned char *v4 = *a2;
      unint64_t v8 = v4 + 1;
    }
    ++a2;
    a1[1] = (unint64_t)v8;
    uint64_t v4 = v8;
    --v6;
  }
  while (v6);
}

void ShaderDebugger::Metadata::MDSerializer::serializeVariableBase(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a4;
  uint64_t v15 = a2;
  uint64_t v13 = a5;
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v15);
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  uint64_t v16 = v9;
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v16);
  int v10 = *(char *)(a3 + 23);
  if (v10 >= 0) {
    unint64_t v11 = (unsigned char *)a3;
  }
  else {
    unint64_t v11 = *(unsigned char **)a3;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  ShaderDebugger::Metadata::MDSerializer::write(a1, v11, v12);
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v14);
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v13);
  uint64_t v16 = a6;
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v16);
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v34 = 2;
  unint64_t v11 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 2uLL, &v34);
  uint64_t v12 = (unint64_t *)v11;
  uint64_t v14 = (uint64_t)(v11 + 40);
  uint64_t v13 = (void *)*((void *)v11 + 5);
  uint64_t v15 = (void *)*((void *)v11 + 6);
  uint64_t v16 = v13;
  if (v13 != v15)
  {
    while (*v16 != a2)
    {
      if (++v16 == v15)
      {
        uint64_t v16 = (void *)*((void *)v11 + 6);
        break;
      }
    }
  }
  uint64_t v17 = v16 - v13;
  if (v16 == v15) {
    uint64_t v18 = -1;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v18 == -1 || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v11 + 5, a2))
  {
    uint64_t v18 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v14, a2);
    uint64_t v19 = v12 + 11;
    ShaderDebugger::Metadata::MDSerializer::serializeVariableBase(v12 + 11, v18, a3, a4, a5, 0);
    uint64_t v21 = (unsigned char *)v12[12];
    unint64_t v20 = v12[13];
    unint64_t v22 = v12[11];
    if (v20 - v22 < (unint64_t)&v21[-v22 + 1])
    {
      std::vector<unsigned char>::reserve(v12 + 11, (2 * (v20 - v22)) | 1);
      uint64_t v21 = (unsigned char *)v12[12];
      unint64_t v20 = v12[13];
    }
    if ((unint64_t)v21 >= v20)
    {
      unint64_t v24 = *v19;
      std::string v25 = &v21[-*v19];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) < 0) {
        abort();
      }
      unint64_t v27 = v20 - v24;
      if (2 * v27 > v26) {
        unint64_t v26 = 2 * v27;
      }
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v28 = v26;
      }
      if (v28) {
        unint64_t v29 = (unint64_t)operator new(v28);
      }
      else {
        unint64_t v29 = 0;
      }
      unint64_t v30 = (char *)(v29 + v28);
      v25[v29] = a6;
      uint64_t v23 = (uint64_t)&v25[v29 + 1];
      if (v21 == (unsigned char *)v24)
      {
        v29 += (unint64_t)v25;
      }
      else
      {
        std::string::size_type v31 = &v21[~v24];
        do
        {
          char v32 = *--v21;
          (v31--)[v29] = v32;
        }
        while (v21 != (unsigned char *)v24);
        uint64_t v21 = (unsigned char *)*v19;
      }
      v12[11] = v29;
      v12[12] = v23;
      v12[13] = (unint64_t)v30;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *uint64_t v21 = a6;
      uint64_t v23 = (uint64_t)(v21 + 1);
    }
    v12[12] = v23;
  }
  return v18;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = 2;
  uint64_t v9 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 2uLL, &v18);
  int v10 = v9;
  uint64_t v12 = (uint64_t)(v9 + 40);
  unint64_t v11 = (void *)*((void *)v9 + 5);
  uint64_t v13 = (void *)*((void *)v9 + 6);
  uint64_t v14 = v11;
  if (v11 != v13)
  {
    while (*v14 != a2)
    {
      if (++v14 == v13)
      {
        uint64_t v14 = (void *)*((void *)v9 + 6);
        break;
      }
    }
  }
  uint64_t v15 = v14 - v11;
  if (v14 == v13) {
    uint64_t v16 = -1;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16 == -1 || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v9 + 5, a2))
  {
    uint64_t v16 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v12, a2);
    ShaderDebugger::Metadata::MDSerializer::serializeVariableBase((unint64_t *)v10 + 11, v16, a3, a4, a5, 1);
  }
  return v16;
}

void ShaderDebugger::Metadata::MDSerializer::serializeTypeBase(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v19 = a4;
  uint64_t v20 = a2;
  uint64_t v17 = a6;
  uint64_t v18 = a5;
  uint64_t v16 = a7;
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v20);
  uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  uint64_t v21 = v12;
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v21);
  int v13 = *(char *)(a3 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (unsigned char *)a3;
  }
  else {
    uint64_t v14 = *(unsigned char **)a3;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a3 + 8);
  }
  ShaderDebugger::Metadata::MDSerializer::write(a1, v14, v15);
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v19);
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v18);
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v17);
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v16);
  uint64_t v21 = a8;
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v21);
  uint64_t v21 = a9;
  ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(a1, &v21);
}

void sub_2F808C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2F8198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2F828C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2F8478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F856C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F8810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F8984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F8AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2F8EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F90C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F927C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2F94B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F95A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F982C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F98A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F9940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F9A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F9B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2FA0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2FA1F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _GTShaderProfilerStreamDataFromReplayDataSource(GTMTLReplayDataSource const*,apr_pool_t *)::$_0::operator()(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = **a1;
  unint64_t v7 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(a1[2], v6);
  if (v6 == -1 || v7 != 0)
  {
    *(_DWORD *)a1[1] = v7[3];
    return;
  }
  uint64_t v9 = *a1[4];
  unint64_t v10 = *(void *)(v9 + 80) + a2;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3][1] - *a1[3]) >> 4);
  if (a3 != 4294950959)
  {
    if (a3 != 4294951017) {
      goto LABEL_17;
    }
    uint64_t Object = GTMTLSMContext_getObject(**(void **)(v9 + 40), v6, v10);
    uint64_t v13 = Object[6];
    if (v13)
    {
      AddFunctionIfExist(*a1[4], (char **)a1[3], *(void *)(v13 + 1296), v10, (void *)*a1[5], 1);
      AddFunctionIfExist(*a1[4], (char **)a1[3], *(void *)(Object[6] + 1176), v10, (void *)*a1[5], 2);
    }
    uint64_t v14 = Object[8];
    if (v14) {
      AddFunctionIfExist(*a1[4], (char **)a1[3], *(void *)(v14 + 120), v10, (void *)*a1[5], 3);
    }
    uint64_t v15 = Object[9];
    if (!v15) {
      goto LABEL_17;
    }
    AddFunctionIfExist(*a1[4], (char **)a1[3], *(void *)(v15 + 360), v10, (void *)*a1[5], 7);
    uint64_t v16 = (char **)a1[3];
    uint64_t v17 = *a1[4];
    uint64_t v18 = *(void *)(Object[9] + 368);
    uint64_t v19 = (void *)*a1[5];
    unint64_t v20 = v10;
    int v21 = 8;
    goto LABEL_16;
  }
  unint64_t v22 = GTMTLSMContext_getObject(**(void **)(v9 + 40), v6, v10);
  AddFunctionIfExist(*a1[4], (char **)a1[3], v22[6], v10, (void *)*a1[5], 3);
  uint64_t v23 = v22[7];
  if (v23)
  {
    uint64_t v16 = (char **)a1[3];
    uint64_t v17 = *a1[4];
    uint64_t v18 = *(void *)(v23 + 848);
    uint64_t v19 = (void *)*a1[5];
    unint64_t v20 = v10;
    int v21 = 3;
LABEL_16:
    AddFunctionIfExist(v17, v16, v18, v20, v19, v21);
  }
LABEL_17:
  unint64_t v24 = **a1;
  uint64_t v25 = *(void *)(*(void *)(*find_entry(*(void *)(*a1[4] + 8), *a1, 8uLL, 0) + 32) + 8);
  unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[6][1] - *a1[6]) >> 3);
  int v27 = -1431655765 * ((a1[3][1] - *a1[3]) >> 4) - v11;
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1[2], **a1, *a1)[3] = v26;
  size_t v28 = a1[6];
  unint64_t v30 = (void *)*v28;
  unint64_t v29 = (void *)v28[1];
  int v31 = v11;
  uint64_t v32 = (uint64_t)((uint64_t)v29 - *v28) / 40;
  *(_DWORD *)a1[1] = v32;
  unint64_t v33 = v28[2];
  if ((unint64_t)v29 >= v33)
  {
    int v42 = v31;
    unint64_t v35 = v32 + 1;
    if ((unint64_t)(v32 + 1) > 0x666666666666666) {
      abort();
    }
    unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - (void)v30) >> 3);
    if (2 * v36 > v35) {
      unint64_t v35 = 2 * v36;
    }
    if (v36 >= 0x333333333333333) {
      unint64_t v37 = 0x666666666666666;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      if (v37 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      std::string::size_type v38 = (char *)operator new(40 * v37);
    }
    else
    {
      std::string::size_type v38 = 0;
    }
    std::string::size_type v39 = &v38[40 * v32];
    *(void *)std::string::size_type v39 = v24;
    *((void *)v39 + 1) = v25;
    *((void *)v39 + 2) = a2;
    *((_DWORD *)v39 + 6) = v26;
    *((_DWORD *)v39 + 7) = 0;
    *((_DWORD *)v39 + 8) = v42;
    *((_DWORD *)v39 + 9) = v27;
    uint64_t v34 = v39 + 40;
    if (v29 != v30)
    {
      do
      {
        long long v40 = *(_OWORD *)(v29 - 5);
        long long v41 = *(_OWORD *)(v29 - 3);
        *((void *)v39 - 1) = *(v29 - 1);
        *(_OWORD *)(v39 - 24) = v41;
        *(_OWORD *)(v39 - 40) = v40;
        v39 -= 40;
        v29 -= 5;
      }
      while (v29 != v30);
      unint64_t v29 = (void *)*v28;
    }
    *size_t v28 = (unint64_t)v39;
    v28[1] = (unint64_t)v34;
    void v28[2] = (unint64_t)&v38[40 * v37];
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *unint64_t v29 = v24;
    v29[1] = v25;
    _OWORD v29[2] = a2;
    *((_DWORD *)v29 + 6) = v26;
    *((_DWORD *)v29 + 7) = 0;
    uint64_t v34 = v29 + 5;
    *((_DWORD *)v29 + 8) = v31;
    *((_DWORD *)v29 + 9) = v27;
  }
  v28[1] = (unint64_t)v34;
}

void AddFunctionIfExist(uint64_t a1, char **a2, uint64_t a3, unint64_t a4, void *a5, int a6)
{
  id v39 = a5;
  uint64_t Object = GTMTLSMContext_getObject(**(void **)(a1 + 40), a3, a4);
  if (!Object) {
    goto LABEL_34;
  }
  uint64_t v12 = Object;
  uint64_t v13 = Object + 1;
  uint64_t v38 = Object[1];
  uint64_t v14 = *(void *)(*(void *)(*find_entry(*(void *)(a1 + 8), (unsigned char *)Object + 8, 8uLL, 0) + 32) + 8);
  uint64_t v37 = v13[4];
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  uint64_t v17 = v13[6];
  if (v17)
  {
    uint64_t v18 = +[NSString stringWithUTF8String:v17];
  }
  else
  {
    uint64_t v18 = &stru_7482F0;
  }
  unsigned int v19 = [v39 addString:v18];
  if (v17) {

  }
  uint64_t v20 = v12[10];
  if (v20)
  {
    if (*(void *)(v20 + 8))
    {
      +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
      int v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
      unsigned int v22 = [v39 addString:v21];
    }
    else
    {
      uint64_t v23 = *(void *)(v20 + 16);
      if (v23)
      {
        int v21 = +[NSString stringWithUTF8String:*(void *)(v20 + 16)];
      }
      else
      {
        int v21 = &stru_7482F0;
      }
      unsigned int v22 = [v39 addString:v21];
      if (!v23) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    unsigned int v22 = 0;
  }
LABEL_16:
  int v24 = -1431655765 * ((unint64_t)(v16 - v15) >> 4);
  unint64_t v26 = a2[1];
  unint64_t v25 = (unint64_t)a2[2];
  if ((unint64_t)v26 >= v25)
  {
    size_t v28 = *a2;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v26 - *a2) >> 4);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)v28) >> 4);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v32 = 0x555555555555555;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v33 = (char *)operator new(48 * v32);
    }
    else
    {
      unint64_t v33 = 0;
    }
    uint64_t v34 = &v33[48 * v29];
    *(void *)uint64_t v34 = v38;
    *((void *)v34 + 1) = v14;
    *((void *)v34 + 2) = v37;
    *((_DWORD *)v34 + 6) = v24;
    *((_DWORD *)v34 + 7) = v19;
    *((_DWORD *)v34 + 8) = v22;
    *((_DWORD *)v34 + 9) = a6;
    *((void *)v34 + 5) = 0;
    int v27 = v34 + 48;
    if (v26 != v28)
    {
      do
      {
        long long v35 = *((_OWORD *)v26 - 3);
        long long v36 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v34 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v34 - 1) = v36;
        *((_OWORD *)v34 - 3) = v35;
        v34 -= 48;
        v26 -= 48;
      }
      while (v26 != v28);
      unint64_t v26 = *a2;
    }
    *a2 = v34;
    a2[1] = v27;
    a2[2] = &v33[48 * v32];
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)unint64_t v26 = v38;
    *((void *)v26 + 1) = v14;
    *((void *)v26 + 2) = v37;
    *((_DWORD *)v26 + 6) = v24;
    *((_DWORD *)v26 + 7) = v19;
    *((_DWORD *)v26 + 8) = v22;
    *((_DWORD *)v26 + 9) = a6;
    int v27 = v26 + 48;
    *((void *)v26 + 5) = 0;
  }
  a2[1] = v27;
LABEL_34:
}

void sub_2FA8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  if (v13) {

  }
  _Unwind_Resume(a1);
}

id GTShaderProfilerStreamDataFromReplayDataSource()
{
  unint64_t v2 = (uint64_t **)__chkstk_darwin();
  if (shared_initialized) {
    goto LABEL_11;
  }
  if (initialized++) {
    goto LABEL_11;
  }
  if ((apr_pools_shared_initialized & 1) != 0
    || (int v4 = apr_pools_initialized, ++apr_pools_initialized, v4))
  {
LABEL_5:
    *(void *)&long long v174 = 0;
    if (!apr_pool_create_ex((apr_pool_t **)&v174, 0, 0, v1)) {
      *(void *)(v174 + 80) = "apr_initialize";
    }
    goto LABEL_11;
  }
  global_allocator = 0;
  vm_address_t v5 = GTCoreAlloc(0xC8uLL);
  if (!v5)
  {
LABEL_10:
    apr_pools_initialized = 0;
    goto LABEL_11;
  }
  *(_OWORD *)vm_address_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 192) = 0;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  global_allocator = v5;
  *(int64x2_t *)(v5 + 8) = vdupq_n_s64(0x8000uLL);
  if (apr_pool_create_ex((apr_pool_t **)&global_pool, 0, (apr_abortfunc_t)v5, v1))
  {
    apr_allocator_destroy((apr_allocator_t *)global_allocator);
    global_allocator = 0;
    goto LABEL_10;
  }
  long long v132 = (apr_pool_t *)global_pool;
  *(void *)(global_pool + 80) = "apr_global_pool";
  if (hash_mutex)
  {
LABEL_261:
    *(void *)&long long v174 = 0;
    if (apr_thread_mutex_create((apr_thread_mutex_t **)&v174, v132, v6)) {
      goto LABEL_11;
    }
    uint64_t v135 = global_allocator;
    uint64_t v136 = global_pool;
    *(void *)(global_allocator + 24) = v174;
    *(void *)(v135 + 32) = v136;
    goto LABEL_5;
  }
  uint64_t v0 = apr_palloc(v132, 0x38uLL);
  hash_mutex = (uint64_t)v0;
  long long v133 = (void *)*((void *)v132 + 5);
  if (v133) {
    *((void *)v132 + 5) = *v133;
  }
  else {
    long long v133 = apr_palloc(v132, 0x20uLL);
  }
  uint64_t v134 = 0;
  v133[1] = v0;
  v133[2] = atomic_cleanup;
  v133[3] = apr_pool_cleanup_null;
  *long long v133 = *((void *)v132 + 4);
  *((void *)v132 + 4) = v133;
  while (!apr_thread_mutex_create((apr_thread_mutex_t **)(hash_mutex + v134), v132, v6))
  {
    v134 += 8;
    if (v134 == 56)
    {
      LODWORD(v132) = global_pool;
      goto LABEL_261;
    }
  }
LABEL_11:
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v1);
  long long v191 = v2;
  long long v190 = 0;
  apr_pool_create_ex(&v190, newpool, 0, v7);
  long long v141 = (apr_pool_t **)GTCaptureArchiveDecompressor_create(v190);
  id v8 = (id)objc_opt_new();
  id v189 = v8;
  uint64_t v9 = **v2;
  if (v9)
  {
    uint64_t v0 = +[NSString stringWithUTF8String:**v2];
    unint64_t v10 = [v0 lastPathComponent];
    id v8 = v189;
  }
  else
  {
    unint64_t v10 = 0;
  }
  [v8 setTraceName:v10];
  if (v9)
  {
  }
  long long v137 = v2;
  uint64_t v146 = (uint64_t)v191[2];
  unint64_t v11 = v191[14];
  long long v153 = v191[15];
  memset(v187, 0, sizeof(v187));
  int v188 = 1065353216;
  memset(v185, 0, sizeof(v185));
  int v186 = 1065353216;
  long long v183 = 0;
  long long v182 = 0;
  uint64_t v184 = 0;
  uint64_t v181 = 0;
  long long v180 = 0;
  long long v179 = 0;
  if (*((int *)v11 + 3) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v143 = 0;
    long long v144 = 0;
    uint64_t v16 = 0;
    long long v147 = 0;
    uint64_t v138 = 0;
    unint64_t v156 = 0;
    int v17 = 0;
    long long v142 = v11;
    while (1)
    {
      long long v151 = v16;
      long long __p = v14;
      uint64_t v18 = v11[3];
      int v149 = v17;
      uint64_t v19 = v17;
      uint64_t v20 = (uint64_t *)(v18 + 32 * v17);
      uint64_t v21 = v153[3];
      uint64_t v22 = *v20;
      uint64_t v23 = v21 + (*v20 << 6);
      if ((*(unsigned char *)(v23 + 15) & 0x40) != 0 && (*((_DWORD *)v20 + 7) + 12542) < 0xFFFFFFFE)
      {
        uint64_t v14 = __p;
        uint64_t v16 = v151;
LABEL_229:
        int v105 = v149;
        goto LABEL_230;
      }
      long long v150 = (uint64_t *)(v18 + 32 * v17);
      long long v148 = (unint64_t *)(v21 + (*v20 << 6));
      int v26 = *(_DWORD *)(v23 + 8);
      unint64_t v25 = (int *)(v23 + 8);
      int v24 = v26;
      int FuncEnumConstructorType = GetFuncEnumConstructorType(v26);
      if (FuncEnumConstructorType == 25) {
        break;
      }
      if (FuncEnumConstructorType == 51)
      {
        long long v178 = 0u;
        long long v177 = 0u;
        long long v176 = 0u;
        long long v175 = 0u;
        long long v174 = 0u;
        int v28 = *v25;
        if (*v25 == -15343)
        {
          uint64_t v32 = 0;
          *((void *)&v175 + 1) = *v148;
          id v107 = v151;
          unint64_t v30 = v150;
        }
        else
        {
          uint64_t v29 = (uint64_t)v191[2];
          unint64_t v30 = v150;
          if (v28 == -15313)
          {
            id v106 = GTTraceFunc_argumentBytesWithMap(v148, *(unsigned __int8 *)(v21 + (v22 << 6) + 13), (uint64_t)v191[2]);
            *((void *)&v177 + 1) = GTTraceFunc_argumentBytesWithMap(v148, v106[8], v29);
            uint64_t v32 = *((void *)&v174 + 1);
          }
          else if (v28 == -15333)
          {
            unint64_t v31 = GTTraceFunc_argumentBytesWithMap(v148, *(unsigned __int8 *)(v21 + (v22 << 6) + 13), (uint64_t)v191[2]);
            long long v174 = 0u;
            long long v175 = 0u;
            long long v176 = 0u;
            long long v177 = 0u;
            long long v178 = 0u;
            uint64_t v32 = *((void *)v31 + 1);
            if (v32)
            {
              LODWORD(v174) = 51;
              *((void *)&v174 + 1) = v32;
              *(void *)&long long v175 = *v148;
              *((void *)&v175 + 1) = -1;
              BYTE9(v178) = 1;
              *(void *)&long long v177 = *(void *)v31;
            }
          }
          else
          {
            uint64_t v32 = 0;
          }
          id v107 = v151;
        }
        uint64_t v108 = *(void *)(*(void *)(*find_entry((uint64_t)v191[1], (unsigned char *)&v174 + 8, 8uLL, 0) + 32) + 8);
        uint64_t v109 = *v30;
        long long v110 = v147;
        uint64_t v111 = (v147 - v107) >> 5;
        if ((unint64_t)v147 >= v143)
        {
          unint64_t v112 = v111 + 1;
          if ((unint64_t)(v111 + 1) >> 59) {
            abort();
          }
          if ((uint64_t)(v143 - (void)v151) >> 4 > v112) {
            unint64_t v112 = (uint64_t)(v143 - (void)v151) >> 4;
          }
          if (v143 - (unint64_t)v151 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v113 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v113 = v112;
          }
          if (v113) {
            unint64_t v113 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v113);
          }
          else {
            uint64_t v114 = 0;
          }
          long long v117 = (void *)(v113 + 32 * v111);
          void *v117 = v32;
          v117[1] = v108;
          v117[2] = v109;
          *((_DWORD *)v117 + 6) = v111;
          *((_DWORD *)v117 + 7) = 0;
          long long v118 = v151;
          long long v119 = v147;
          if (v147 != v151)
          {
            unint64_t v120 = v113 + 32 * v111;
            uint64_t v14 = __p;
            do
            {
              long long v121 = *((_OWORD *)v119 - 1);
              uint64_t v16 = (char *)(v120 - 32);
              *(_OWORD *)(v120 - 32) = *((_OWORD *)v119 - 2);
              *(_OWORD *)(v120 - 16) = v121;
              v119 -= 32;
              v120 -= 32;
            }
            while (v119 != v151);
            goto LABEL_226;
          }
          goto LABEL_225;
        }
        goto LABEL_205;
      }
      if (!GTMTLReplayHost_IsFuncEnumSampledEncoder(v24, 1, 0)) {
        goto LABEL_206;
      }
      bzero(&v174, 0x2B90uLL);
      bzero(&v172, 0x2B90uLL);
      ++*((_DWORD *)v147 - 1);
      uint64_t v171 = 0;
      unsigned int v170 = 0;
      v169[0] = (unint64_t *)&v171;
      v169[1] = (unint64_t *)&v170;
      v169[2] = (unint64_t *)v187;
      v169[3] = (unint64_t *)&v179;
      v169[4] = (unint64_t *)&v191;
      v169[5] = (unint64_t *)&v189;
      v169[6] = (unint64_t *)&v182;
      uint64_t v39 = *v150;
      uint64_t v139 = v18 + 32 * v19;
      if ((unint64_t)*v150 < *(void *)(v139 + 8))
      {
        unsigned int v154 = ((unint64_t)(v147 - v151) >> 5) - 1;
        while (1)
        {
          uint64_t v152 = v153[3];
          uint64_t v40 = v152 + (v39 << 6);
          long long v41 = (int *)(v40 + 8);
          int v42 = IsFuncEnumParallelCommandEncoderCall(*(_DWORD *)(v40 + 8));
          id v43 = v42 ? (unint64_t *)&v174 : (unint64_t *)&v172;
          id v44 = v42 ? (char *)&v174 + 8 : (char *)&v173;
          GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v43, (uint64_t *)v40, (uint64_t)v191[2]);
          unint64_t v45 = v43[1];
          uint64_t v46 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v185, v45);
          if (v46) {
            break;
          }
          if (__p == v15 || *((void *)v15 - 3) != *v150)
          {
            long long v145 = v15;
            uint64_t v65 = *(void *)(*(void *)(*find_entry((uint64_t)v191[1], v44, 8uLL, 0) + 32) + 8);
            uint64_t v66 = *v150;
            uint64_t v67 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v185, v43[1], v44);
            uint64_t v68 = (v145 - __p) / 40;
            unint64_t v69 = (unint64_t)(v13 - v12) >> 5;
            v67[3] = v68;
            uint64_t v155 = v68;
            if (v145 < v144)
            {
              *(void *)long long v145 = v45;
              *((void *)v145 + 1) = v65;
              *((void *)v145 + 2) = v66;
              *((_DWORD *)v145 + 6) = v68;
              *((_DWORD *)v145 + 7) = v69;
              *((void *)v145 + 4) = v154;
              uint64_t v15 = v145 + 40;
              goto LABEL_46;
            }
            unint64_t v71 = v68 + 1;
            if ((unint64_t)(v68 + 1) > 0x666666666666666) {
              abort();
            }
            if (0x999999999999999ALL * ((v144 - __p) >> 3) > v71) {
              unint64_t v71 = 0x999999999999999ALL * ((v144 - __p) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v144 - __p) >> 3) >= 0x333333333333333) {
              unint64_t v72 = 0x666666666666666;
            }
            else {
              unint64_t v72 = v71;
            }
            if (v72)
            {
              if (v72 > 0x666666666666666) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v140 = v72;
              long long v73 = (char *)operator new(40 * v72);
              unint64_t v74 = v140;
              LODWORD(v69) = (unint64_t)(v13 - v12) >> 5;
            }
            else
            {
              long long v73 = 0;
              unint64_t v74 = 0;
            }
            long long v98 = &v73[40 * v155];
            *(void *)long long v98 = v45;
            *((void *)v98 + 1) = v65;
            *((void *)v98 + 2) = v66;
            *((_DWORD *)v98 + 6) = v155;
            *((_DWORD *)v98 + 7) = v69;
            *((void *)v98 + 4) = v154;
            long long v99 = v145;
            if (__p == v145)
            {
              std::string::size_type v47 = &v73[40 * v155];
            }
            else
            {
              uint64_t v100 = &v73[40 * v155];
              do
              {
                long long v101 = *(_OWORD *)(v99 - 40);
                long long v102 = *(_OWORD *)(v99 - 24);
                std::string::size_type v47 = v100 - 40;
                *((void *)v100 - 1) = *((void *)v99 - 1);
                *(_OWORD *)(v100 - 24) = v102;
                *(_OWORD *)(v100 - 40) = v101;
                v99 -= 40;
                v100 -= 40;
              }
              while (v99 != __p);
            }
            long long v144 = &v73[40 * v74];
            uint64_t v15 = v98 + 40;
            if (__p) {
              operator delete(__p);
            }
          }
          else
          {
            std::string::size_type v47 = __p;
            uint64_t v155 = -1 - 0x3333333333333333 * ((v15 - __p) >> 3);
          }
LABEL_47:
          int v48 = *v41;
          if (*v41 == -16279 || v48 == -16337)
          {
            uint64_t v171 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)v40, *(unsigned __int8 *)(v152 + (v39 << 6) + 13), v146)+ 1);
            _GTShaderProfilerStreamDataFromReplayDataSource(GTMTLReplayDataSource const*,apr_pool_t *)::$_0::operator()(v169, v39, *v41);
            int v48 = *v41;
          }
          long long __p = v47;
          if (!IsFuncEnumGPUCommandCall(v48))
          {
            if (v48 >> 2 == 1073737833)
            {
              p = *v141;
              GTMTLSMContext_indirectCommandBufferResources((uint64_t)v166, (_DWORD **)v191[5], *v148, p);
              GetExecuteCommandsInBufferArgs((uint64_t)&v160, v153[3] + (v39 << 6), (uint64_t)v191[2]);
              uint64_t Object = GTMTLSMContext_getObject(*v191[5], v160, *v148);
              GTMTLCreateIndirectCommandEncoder((uint64_t)v164, Object[13]);
              memcpy(__dst, v43, sizeof(__dst));
              if (*(_DWORD *)v43 == 28)
              {
                if ((GT_SUPPORT_0 & 0x10) != 0)
                {
                  unint64_t v85 = v162;
                  if (v162)
                  {
                    unint64_t v86 = 0;
                    id v87 = &v47[40 * v155 + 36];
                    do
                    {
                      int v88 = v86 + v161;
                      uint64_t v167 = v163 + v165 * ((int)v86 + v161);
                      if (GTMTLSMComputeCommandEncoder_loadIndirectCommand((uint64_t)&__dst[7], v164, v167, v166))
                      {
                        uint64_t v171 = __dst[8];
                        _GTShaderProfilerStreamDataFromReplayDataSource(GTMTLReplayDataSource const*,apr_pool_t *)::$_0::operator()(v169, v39, 4294950959);
                        uint64_t v89 = (v13 - v12) >> 5;
                        unsigned int v90 = v170;
                        if ((unint64_t)v13 >= v156)
                        {
                          unint64_t v91 = v89 + 1;
                          if ((unint64_t)(v89 + 1) >> 59) {
                            abort();
                          }
                          if ((uint64_t)(v156 - (void)v12) >> 4 > v91) {
                            unint64_t v91 = (uint64_t)(v156 - (void)v12) >> 4;
                          }
                          if (v156 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
                            unint64_t v92 = 0x7FFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v92 = v91;
                          }
                          if (v92) {
                            unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v92);
                          }
                          else {
                            uint64_t v93 = 0;
                          }
                          unint64_t v94 = v92 + 32 * v89;
                          *(_DWORD *)unint64_t v94 = v89;
                          *(_DWORD *)(v94 + 4) = v155;
                          *(_DWORD *)(v94 + 8) = v154;
                          *(_DWORD *)(v94 + 12) = v90;
                          *(void *)(v94 + 16) = v39;
                          *(_DWORD *)(v94 + 24) = 2;
                          *(_DWORD *)(v94 + 28) = v88;
                          if (v13 == v12)
                          {
                            long long v97 = (char *)(v92 + 32 * v89);
                          }
                          else
                          {
                            unint64_t v95 = v92 + 32 * v89;
                            do
                            {
                              long long v96 = *((_OWORD *)v13 - 1);
                              long long v97 = (char *)(v95 - 32);
                              *(_OWORD *)(v95 - 32) = *((_OWORD *)v13 - 2);
                              *(_OWORD *)(v95 - 16) = v96;
                              v13 -= 32;
                              v95 -= 32;
                            }
                            while (v13 != v12);
                          }
                          unint64_t v156 = v92 + 32 * v93;
                          uint64_t v13 = (char *)(v94 + 32);
                          if (v12) {
                            operator delete(v12);
                          }
                          uint64_t v12 = v97;
                        }
                        else
                        {
                          *(_DWORD *)uint64_t v13 = v89;
                          *((_DWORD *)v13 + 1) = v155;
                          *((_DWORD *)v13 + 2) = v154;
                          *((_DWORD *)v13 + 3) = v90;
                          *((void *)v13 + 2) = v39;
                          *((_DWORD *)v13 + 6) = 2;
                          *((_DWORD *)v13 + 7) = v88;
                          v13 += 32;
                        }
                        if (v90 != -1) {
                          ++v182[10 * v90 + 7];
                        }
                        ++*(_DWORD *)v87;
                        unint64_t v85 = v162;
                      }
                      ++v86;
                    }
                    while (v85 > v86);
                  }
                }
              }
              else if (*(_DWORD *)v43 == 70)
              {
                unint64_t v52 = v162;
                if (v162)
                {
                  unint64_t v53 = 0;
                  id v54 = &v47[40 * v155 + 36];
                  do
                  {
                    int v55 = v53 + v161;
                    uint64_t v167 = v163 + v165 * ((int)v53 + v161);
                    if (GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)&__dst[7], v164, v167, v166))
                    {
                      uint64_t v171 = __dst[1075];
                      _GTShaderProfilerStreamDataFromReplayDataSource(GTMTLReplayDataSource const*,apr_pool_t *)::$_0::operator()(v169, v39, 4294951017);
                      uint64_t v56 = (v13 - v12) >> 5;
                      unsigned int v57 = v170;
                      if ((unint64_t)v13 >= v156)
                      {
                        unint64_t v58 = v56 + 1;
                        if ((unint64_t)(v56 + 1) >> 59) {
                          abort();
                        }
                        if ((uint64_t)(v156 - (void)v12) >> 4 > v58) {
                          unint64_t v58 = (uint64_t)(v156 - (void)v12) >> 4;
                        }
                        if (v156 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
                          unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v59 = v58;
                        }
                        if (v59) {
                          unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v59);
                        }
                        else {
                          uint64_t v60 = 0;
                        }
                        unint64_t v61 = v59 + 32 * v56;
                        *(_DWORD *)unint64_t v61 = v56;
                        *(_DWORD *)(v61 + 4) = v155;
                        *(_DWORD *)(v61 + 8) = v154;
                        *(_DWORD *)(v61 + 12) = v57;
                        *(void *)(v61 + 16) = v39;
                        *(_DWORD *)(v61 + 24) = 1;
                        *(_DWORD *)(v61 + 28) = v55;
                        if (v13 == v12)
                        {
                          uint64_t v64 = (char *)(v59 + 32 * v56);
                        }
                        else
                        {
                          unint64_t v62 = v59 + 32 * v56;
                          do
                          {
                            long long v63 = *((_OWORD *)v13 - 1);
                            uint64_t v64 = (char *)(v62 - 32);
                            *(_OWORD *)(v62 - 32) = *((_OWORD *)v13 - 2);
                            *(_OWORD *)(v62 - 16) = v63;
                            v13 -= 32;
                            v62 -= 32;
                          }
                          while (v13 != v12);
                        }
                        unint64_t v156 = v59 + 32 * v60;
                        uint64_t v13 = (char *)(v61 + 32);
                        if (v12) {
                          operator delete(v12);
                        }
                        uint64_t v12 = v64;
                      }
                      else
                      {
                        *(_DWORD *)uint64_t v13 = v56;
                        *((_DWORD *)v13 + 1) = v155;
                        *((_DWORD *)v13 + 2) = v154;
                        *((_DWORD *)v13 + 3) = v57;
                        *((void *)v13 + 2) = v39;
                        *((_DWORD *)v13 + 6) = 1;
                        *((_DWORD *)v13 + 7) = v55;
                        v13 += 32;
                      }
                      if (v57 != -1) {
                        ++v182[10 * v57 + 7];
                      }
                      ++*(_DWORD *)v54;
                      unint64_t v52 = v162;
                    }
                    ++v53;
                  }
                  while (v52 > v53);
                }
              }
              apr_pool_clear(p);
            }
            goto LABEL_164;
          }
          if (IsFuncEnumDrawCall(v48))
          {
            int v50 = 1;
LABEL_113:
            uint64_t v75 = (v13 - v12) >> 5;
            uint64_t v76 = v170;
            goto LABEL_114;
          }
          int v50 = 3;
          if (v48 <= -16080)
          {
            if (v48 == -16327 || v48 == -16220)
            {
LABEL_112:
              int v50 = 2;
              goto LABEL_113;
            }
            int v70 = -16137;
          }
          else
          {
            if ((v48 + 16079) < 2) {
              goto LABEL_112;
            }
            if (v48 == -15486) {
              goto LABEL_113;
            }
            int v70 = -15297;
          }
          if (v48 == v70) {
            goto LABEL_113;
          }
          if (!IsFuncEnumSampledBlitCallAGX(v48) && !IsFuncEnumSampledBlitCall(v48))
          {
            if ((v48 + 15416) >= 3) {
              int v50 = 0;
            }
            else {
              int v50 = 5;
            }
            goto LABEL_113;
          }
          ++v138;
          uint64_t v75 = (v13 - v12) >> 5;
          int v50 = 4;
          uint64_t v76 = 0xFFFFFFFFLL;
LABEL_114:
          if ((unint64_t)v13 >= v156)
          {
            unint64_t v78 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 59) {
              abort();
            }
            if ((uint64_t)(v156 - (void)v12) >> 4 > v78) {
              unint64_t v78 = (uint64_t)(v156 - (void)v12) >> 4;
            }
            if (v156 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v79 = v78;
            }
            if (v79) {
              unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v79);
            }
            else {
              uint64_t v80 = 0;
            }
            unint64_t v81 = v79 + 32 * v75;
            *(_DWORD *)unint64_t v81 = v75;
            int v77 = v155;
            *(_DWORD *)(v81 + 4) = v155;
            *(_DWORD *)(v81 + 8) = v154;
            *(_DWORD *)(v81 + 12) = v76;
            *(void *)(v81 + 16) = v39;
            *(_DWORD *)(v81 + 24) = v50;
            *(_DWORD *)(v81 + 28) = -1;
            if (v13 == v12)
            {
              long long v84 = (char *)v81;
            }
            else
            {
              unint64_t v82 = v81;
              do
              {
                long long v83 = *((_OWORD *)v13 - 1);
                long long v84 = (char *)(v82 - 32);
                *(_OWORD *)(v82 - 32) = *((_OWORD *)v13 - 2);
                *(_OWORD *)(v82 - 16) = v83;
                v13 -= 32;
                v82 -= 32;
              }
              while (v13 != v12);
            }
            unint64_t v156 = v79 + 32 * v80;
            uint64_t v13 = (char *)(v81 + 32);
            if (v12) {
              operator delete(v12);
            }
            uint64_t v12 = v84;
          }
          else
          {
            *(_DWORD *)uint64_t v13 = v75;
            int v77 = v155;
            *((_DWORD *)v13 + 1) = v155;
            *((_DWORD *)v13 + 2) = v154;
            *((_DWORD *)v13 + 3) = v76;
            *((void *)v13 + 2) = v39;
            *((_DWORD *)v13 + 6) = v50;
            *((_DWORD *)v13 + 7) = -1;
            v13 += 32;
          }
          if (v76 != 0xFFFFFFFFLL) {
            ++v182[10 * v76 + 7];
          }
          ++*(_DWORD *)&__p[40 * v77 + 36];
LABEL_164:
          if ((unint64_t)++v39 >= *(void *)(v139 + 8)) {
            goto LABEL_180;
          }
        }
        LODWORD(v155) = *((_DWORD *)v46 + 6);
LABEL_46:
        std::string::size_type v47 = __p;
        goto LABEL_47;
      }
LABEL_180:
      int v105 = *(_DWORD *)(v139 + 20) + v149;
      uint64_t v14 = __p;
      uint64_t v16 = v151;
      unint64_t v11 = v142;
LABEL_230:
      int v17 = v105 + 1;
      if (v17 >= *((_DWORD *)v11 + 3)) {
        goto LABEL_240;
      }
    }
    long long v178 = 0u;
    long long v177 = 0u;
    long long v176 = 0u;
    long long v175 = 0u;
    long long v174 = 0u;
    uint64_t v33 = (uint64_t)v191[2];
    int v34 = *v25;
    if (*v25 > -16203)
    {
      long long v35 = v150;
      long long v36 = v148;
      if (v34 <= -15702)
      {
        BOOL v103 = v34 == -16202;
        int v104 = -15908;
      }
      else
      {
        if (v34 == -15701)
        {
          long long v126 = GTTraceFunc_argumentBytesWithMap(v148, *(unsigned __int8 *)(v21 + (v22 << 6) + 13), (uint64_t)v191[2]);
          long long v174 = 0u;
          long long v175 = 0u;
          long long v176 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          uint64_t v127 = *((void *)v126 + 1);
          if (v127)
          {
            LODWORD(v174) = 25;
            *((void *)&v174 + 1) = v127;
            *(void *)&long long v175 = *v148;
            *((void *)&v175 + 1) = -1;
            *(void *)&long long v177 = *(void *)v126;
            id v128 = GTTraceFunc_argumentBytesWithMap(v148, v126[16], v33);
            *(void *)&long long v178 = v128;
            if (v128) {
              BYTE9(v178) = v128[9];
            }
          }
          goto LABEL_204;
        }
        BOOL v103 = v34 == -15318;
        int v104 = -15316;
      }
      if (!v103 && v34 != v104) {
        goto LABEL_204;
      }
    }
    else
    {
      long long v35 = v150;
      long long v36 = v148;
      if (v34 <= -16362)
      {
        if (v34 == -16365)
        {
          long long v125 = GTTraceFunc_argumentBytesWithMap(v148, *(unsigned __int8 *)(v21 + (v22 << 6) + 13), (uint64_t)v191[2]);
          *((void *)&v177 + 1) = GTTraceFunc_argumentBytesWithMap(v148, v125[8], v33);
        }
        else if (v34 == -16364)
        {
          BYTE8(v178) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(v148, *(unsigned __int8 *)(v21 + (v22 << 6) + 13), (uint64_t)v191[2])+ 2);
        }
        goto LABEL_204;
      }
      if (v34 != -16361)
      {
        if (v34 == -16343)
        {
          uint64_t v37 = GTTraceFunc_argumentBytesWithMap(v148, *(unsigned __int8 *)(v21 + (v22 << 6) + 13), (uint64_t)v191[2]);
          long long v174 = 0u;
          long long v175 = 0u;
          long long v176 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          uint64_t v129 = *((void *)v37 + 1);
          if (!v129) {
            goto LABEL_204;
          }
          LODWORD(v174) = 25;
          *((void *)&v174 + 1) = v129;
          *(void *)&long long v175 = *v148;
          *((void *)&v175 + 1) = -1;
          BYTE9(v178) = 1;
          goto LABEL_238;
        }
        if (v34 == -16342)
        {
          uint64_t v37 = GTTraceFunc_argumentBytesWithMap(v148, *(unsigned __int8 *)(v21 + (v22 << 6) + 13), (uint64_t)v191[2]);
          long long v174 = 0u;
          long long v175 = 0u;
          long long v176 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          uint64_t v38 = *((void *)v37 + 1);
          if (v38)
          {
            LODWORD(v174) = 25;
            *((void *)&v174 + 1) = v38;
            *(void *)&long long v175 = *v148;
            *((void *)&v175 + 1) = -1;
LABEL_238:
            *(void *)&long long v177 = *(void *)v37;
          }
        }
LABEL_204:
        uint64_t v32 = *((void *)&v174 + 1);
        uint64_t v108 = *(void *)(*(void *)(*find_entry((uint64_t)v191[1], (unsigned char *)&v174 + 8, 8uLL, 0) + 32) + 8);
        uint64_t v109 = *v35;
        long long v110 = v147;
        uint64_t v111 = (v147 - v151) >> 5;
        if ((unint64_t)v147 >= v143)
        {
          unint64_t v116 = v111 + 1;
          if ((unint64_t)(v111 + 1) >> 59) {
            abort();
          }
          if ((uint64_t)(v143 - (void)v151) >> 4 > v116) {
            unint64_t v116 = (uint64_t)(v143 - (void)v151) >> 4;
          }
          if (v143 - (unint64_t)v151 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v113 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v113 = v116;
          }
          if (v113) {
            unint64_t v113 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v113);
          }
          else {
            uint64_t v114 = 0;
          }
          long long v117 = (void *)(v113 + 32 * v111);
          void *v117 = v32;
          v117[1] = v108;
          v117[2] = v109;
          v117[3] = v111;
          long long v118 = v151;
          long long v122 = v147;
          if (v147 != v151)
          {
            unint64_t v123 = v113 + 32 * v111;
            uint64_t v14 = __p;
            do
            {
              long long v124 = *((_OWORD *)v122 - 1);
              uint64_t v16 = (char *)(v123 - 32);
              *(_OWORD *)(v123 - 32) = *((_OWORD *)v122 - 2);
              *(_OWORD *)(v123 - 16) = v124;
              v122 -= 32;
              v123 -= 32;
            }
            while (v122 != v151);
LABEL_226:
            unint64_t v143 = v113 + 32 * v114;
            long long v147 = (char *)(v117 + 4);
            if (v118) {
              operator delete(v118);
            }
LABEL_228:
            unint64_t v11 = v142;
            goto LABEL_229;
          }
LABEL_225:
          uint64_t v16 = (char *)v117;
          uint64_t v14 = __p;
          goto LABEL_226;
        }
LABEL_205:
        *(void *)long long v110 = v32;
        *((void *)v110 + 1) = v108;
        *((void *)v110 + 2) = v109;
        *((_DWORD *)v110 + 6) = v111;
        *((_DWORD *)v110 + 7) = 0;
        long long v147 = v110 + 32;
LABEL_206:
        uint64_t v14 = __p;
        uint64_t v16 = v151;
        goto LABEL_228;
      }
    }
    *((void *)&v175 + 1) = *v36;
    goto LABEL_204;
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  long long v147 = 0;
  uint64_t v13 = 0;
  uint64_t v138 = 0;
LABEL_240:
  [v189 addGPUCommands:v12 count:(v13 - v12) >> 5];
  [v189 addEncoders:v14 count:0xCCCCCCCCCCCCCCCDLL * ((v15 - v14) >> 3)];
  [v189 addPipelineStates:count:];
  [v189 addCommandBuffers:v16 count:(v147 - v16) >> 5];
  [v189 addShaderFunctionInfo:count:];
  [v189 setNumBlitCalls:v138];
  apr_pool_destroy(v190);
  id v130 = v189;
  if (v179)
  {
    long long v180 = v179;
    operator delete(v179);
  }
  if (v16) {
    operator delete(v16);
  }
  if (v182)
  {
    long long v183 = v182;
    operator delete(v182);
  }
  if (v14) {
    operator delete(v14);
  }
  if (v12) {
    operator delete(v12);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v185);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v187);

  [v130 setDataSourceHasUnusedResources:0 captureRange:v137[10], v137[11]];
  apr_pool_destroy(newpool);

  return v130;
}

void sub_2FBD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  _Unwind_Resume(a1);
}

void GTMTLReplayController_tileMemoryFree(uint64_t a1)
{
  [*(id *)(a1 + 40) removeAllObjects];
  unint64_t v2 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;

  uint64_t v3 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = 0;

  int v4 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0;

  vm_address_t v5 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;

  unint64_t v6 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;

  unint64_t v7 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;

  id v8 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
}

void AddMemorylessTexture(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *a1;
  id v14 = (id)a1[5];
  uint64_t Object = GTMTLSMContext_getObject(**(void **)(v6 + 40), a2, a3);
  if (Object && *(_DWORD *)Object == 80)
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    GTMTLSMContext_getTextureDescriptor(*(uint64_t **)(v6 + 40), a2, a3, (uint64_t)&v15);
    id v8 = +[NSNumber numberWithUnsignedLongLong:a2];
    __int16 v9 = WORD2(v17);
    if ((BYTE4(v17) & 0xF0) == 0x30)
    {
      unint64_t v10 = [v14 objectForKeyedSubscript:v8];

      if (!v10)
      {
        unint64_t v11 = [(id)a1[1] defaultDevice];
        WORD2(v17) = v9 & 0xFF0F | 0x20;
        DWORD1(v16) |= 1u;
        uint64_t v12 = MakeMTLTextureDescriptorWithoutResourceIndex((uint64_t)&v15);
        id v13 = [v11 newTextureWithDescriptor:v12];
        [v14 setObject:v13 forKeyedSubscript:v8];
      }
    }
  }
}

uint64_t *std::unique_ptr<GRCPerFrameData>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    [*(id *)(v2 + 496) cancelAllOperations];

    std::unique_ptr<GRCCurrentFrameStream>::reset[abi:nn180100]((uint64_t *)(v2 + 488), 0);
    std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::~__hash_table(v2 + 448);
    uint64_t v3 = *(void **)(v2 + 424);
    if (v3)
    {
      *(void *)(v2 + 432) = v3;
      operator delete(v3);
    }
    vm_address_t v5 = (void **)(v2 + 328);
    std::vector<std::pair<unsigned int,SampleInfoWithPayload>>::__destroy_vector::operator()[abi:nn180100](&v5);
    vm_address_t v5 = (void **)(v2 + 304);
    std::vector<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::__destroy_vector::operator()[abi:nn180100](&v5);
    for (uint64_t i = 264; i != 144; i -= 40)
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + i);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + 144);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + 104);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + 64);
    std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::~__hash_table(v2 + 24);
    vm_address_t v5 = (void **)v2;
    std::vector<ProgramAddressHelper::PerRingBufferProgramInfo>::__destroy_vector::operator()[abi:nn180100](&v5);
    operator delete();
  }
  return result;
}

void sub_2FC1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::unique_ptr<GRCCurrentFrameStream>::reset[abi:nn180100]((uint64_t *)(v10 + 488), 0);
  std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::~__hash_table(v10 + 448);
  uint64_t v12 = *(void **)(v10 + 424);
  if (v12)
  {
    *(void *)(v10 + 432) = v12;
    operator delete(v12);
  }
  a10 = (void **)(v10 + 328);
  std::vector<std::pair<unsigned int,SampleInfoWithPayload>>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 304);
  std::vector<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::__destroy_vector::operator()[abi:nn180100](&a10);
  for (uint64_t i = 264; i != 144; i -= 40)
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v10 + i);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v10 + 144);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v10 + 104);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v10 + 64);
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::~__hash_table(v10 + 24);
  a10 = (void **)v10;
  std::vector<ProgramAddressHelper::PerRingBufferProgramInfo>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<GRCCurrentFrameStream>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {

    uint64_t v3 = *(void **)(v2 + 256);
    if (v3)
    {
      *(void *)(v2 + 264) = v3;
      operator delete(v3);
    }
    int v4 = *(void **)(v2 + 232);
    if (v4)
    {
      *(void *)(v2 + 240) = v4;
      operator delete(v4);
    }
    vm_address_t v5 = *(void **)(v2 + 208);
    if (v5) {
      operator delete(v5);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + 168);
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(v2 + 128);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + 88);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + 48);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 + 8);

    operator delete();
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      RingBufferSampledData::~RingBufferSampledData((RingBufferSampledData *)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<std::pair<unsigned int,SampleInfoWithPayload>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned int,SampleInfoWithPayload>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *v2;
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v2[4]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<ProgramAddressHelper::PerRingBufferProgramInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  id v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    vm_address_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<ProgramAddressHelper::PerRingBufferProgramInfo>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      vm_address_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ProgramAddressHelper::~ProgramAddressHelper(void **this)
{
  for (uint64_t i = 33; i != 18; i -= 5)
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&this[i]);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)(this + 18));
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)(this + 13));
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)(this + 8));
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::~__hash_table((uint64_t)(this + 3));
  uint64_t v3 = this;
  std::vector<ProgramAddressHelper::PerRingBufferProgramInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
}

uint64_t std::allocator<ProgramAddressHelper::PerRingBufferProgramInfo>::destroy[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(*(void **)(a1 + 48));

  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1);
}

void std::vector<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 104)
  {
    uint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::pair<unsigned int,SampleInfoWithPayload>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 96)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void RingBufferSampledData::~RingBufferSampledData(RingBufferSampledData *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;

  uint64_t v3 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;

  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }

  vm_address_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

uint64_t FindNextMarker(NSData *a1, unsigned int a2, uint64_t a3)
{
  vm_address_t v5 = a1;
  unsigned int v6 = [(NSData *)v5 length];
  unint64_t v7 = v5;
  id v8 = [(NSData *)v7 bytes];
  unsigned int v9 = (v6 - 64) >> 3;
  BOOL v10 = v9 >= a2;
  unsigned int v11 = v9 - a2;
  if (v10)
  {
    uint64_t v12 = a2;
    unsigned int v13 = v11 + 1;
    while (v8[v12] != a3)
    {
      ++v12;
      if (!--v13) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v12 = 0xFFFFFFFFLL;
  }

  return v12;
}

void sub_2FC7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v5 = v4 >> 1;
  unsigned int v6 = (unsigned int *)(result + 8 * (v4 >> 1));
  uint64_t v7 = **a3;
  id v8 = (void *)(*(void *)(v7 + 8 * *v6) + 8 * v6[1]);
  unsigned int v9 = (void *)(*(void *)(v7 + 8 * *(unsigned int *)(a2 - 8)) + 8 * *(unsigned int *)(a2 - 4));
  unint64_t v10 = v8[1];
  unint64_t v11 = v9[1];
  BOOL v12 = v10 > v11;
  if (v10 == v11
    && (unint64_t v13 = v8[4], v14 = v9[4], v12 = v13 > v14, v13 == v14)
    && (unint64_t v15 = v8[5], v16 = v9[5], v12 = v15 > v16, v15 == v16))
  {
    unint64_t v17 = v8[3];
    uint64_t v18 = v9[3];
    if (v17 <= v10 || v17 == v18) {
      return result;
    }
  }
  else if (!v12)
  {
    return result;
  }
  unint64_t v20 = *(void *)(a2 - 8);
  *(void *)(a2 - 8) = *(void *)v6;
  if (v4 >= 2)
  {
    while (1)
    {
      unint64_t v22 = v5 - 1;
      unint64_t v5 = (v5 - 1) >> 1;
      uint64_t v21 = (unsigned int *)(result + 8 * v5);
      uint64_t v23 = **a3;
      int v24 = (void *)(*(void *)(v23 + 8 * *v21) + 8 * v21[1]);
      unint64_t v25 = (void *)(*(void *)(v23 + 8 * v20) + 8 * HIDWORD(v20));
      unint64_t v26 = v24[1];
      unint64_t v27 = v25[1];
      BOOL v28 = v26 > v27;
      if (v26 == v27
        && (v29 = v24[4], v30 = v25[4], BOOL v28 = v29 > v30, v29 == v30)
        && (v31 = v24[5], v32 = v25[5], BOOL v28 = v31 > v32, v31 == v32))
      {
        unint64_t v33 = v24[3];
        uint64_t v34 = v25[3];
        if (v33 <= v26 || v33 == v34) {
          break;
        }
      }
      else if (!v28)
      {
        break;
      }
      *(void *)unsigned int v6 = *(void *)v21;
      unsigned int v6 = (unsigned int *)(result + 8 * v5);
      if (v22 <= 1) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v21 = v6;
LABEL_27:
  *(void *)uint64_t v21 = v20;
  return result;
}

__n128 __Block_byref_object_copy__8879(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__8880(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      abort();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(a2);
    unint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v7 = &v4[32 * v6];
    unsigned int v9 = (char *)*a1;
    id v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 32;
        v8 -= 32;
      }
      while (v8 != v9);
      id v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void ___ZN16GRCFrameTimeData26ProcessFrameTimeSampleDataERd_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v32 = a2;
  id v5 = a3;
  unint64_t v31 = v5;
  unsigned int v6 = [v32 unsignedIntValue];
  uint64_t v7 = [v5 objectAtIndexedSubscript:0];
  unsigned int v8 = [v7 unsignedIntValue];

  unsigned int v9 = [v5 objectAtIndexedSubscript:1];
  unsigned int v33 = [v9 unsignedIntValue];

  unint64_t v10 = [v5 objectAtIndexedSubscript:2];
  unsigned int v11 = [v10 unsignedIntValue];

  if ((unint64_t)[v5 count] < 4)
  {
    id v13 = 0;
    if (!v11) {
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v12 = [v5 objectAtIndexedSubscript:3];
    id v13 = [v12 unsignedLongLongValue];

    if (!v11) {
      goto LABEL_24;
    }
  }
  for (uint64_t i = 0; i != v11; ++i)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8 * (v8 + i));
    if (v15)
    {
      uint64_t v16 = v33 + i;
      unint64_t v17 = *(void **)(*(void *)(a1 + 32) + 8);
      uint64_t v19 = (char *)v17[7];
      unint64_t v18 = v17[8];
      if ((unint64_t)v19 >= v18)
      {
        uint64_t v21 = (char *)v17[6];
        uint64_t v22 = (v19 - v21) >> 5;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59) {
          abort();
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 4 > v23) {
          unint64_t v23 = v24 >> 4;
        }
        BOOL v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0;
        unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
        if (!v25) {
          unint64_t v26 = v23;
        }
        if (v26)
        {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v26);
          uint64_t v21 = (char *)v17[6];
          uint64_t v19 = (char *)v17[7];
        }
        else
        {
          uint64_t v27 = 0;
        }
        BOOL v28 = (void *)(v26 + 32 * v22);
        *BOOL v28 = v15;
        v28[1] = v6;
        void v28[2] = v16;
        void v28[3] = v13;
        unint64_t v29 = v28;
        if (v19 != v21)
        {
          do
          {
            long long v30 = *((_OWORD *)v19 - 1);
            *((_OWORD *)v29 - 2) = *((_OWORD *)v19 - 2);
            *((_OWORD *)v29 - 1) = v30;
            v29 -= 4;
            v19 -= 32;
          }
          while (v19 != v21);
          uint64_t v21 = (char *)v17[6];
        }
        unint64_t v20 = v28 + 4;
        v17[6] = v29;
        v17[7] = v28 + 4;
        v17[8] = v26 + 32 * v27;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)uint64_t v19 = v15;
        *((void *)v19 + 1) = v6;
        unint64_t v20 = v19 + 32;
        *((void *)v19 + 2) = v16;
        *((void *)v19 + 3) = v13;
      }
      v17[7] = v20;
    }
  }
LABEL_24:
}

void sub_2FCC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id a11)
{
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = (uint64_t *)(a2 - 32);
  unsigned int v11 = (uint64_t *)(a2 - 64);
  BOOL v12 = (uint64_t *)(a2 - 96);
  uint64_t j = (uint64_t *)v9;
  unint64_t v156 = a2;
  while (1)
  {
    unint64_t v9 = (unint64_t)j;
    uint64_t v14 = a2 - (char *)j;
    uint64_t v15 = (a2 - (char *)j) >> 5;
    if (v5 || !v4)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(v10, (void *)v9);
          if (result)
          {
            unint64_t v78 = *(void *)v9;
            *(void *)unint64_t v9 = *((void *)a2 - 4);
            *((void *)a2 - 4) = v78;
            uint64_t v79 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = *((void *)a2 - 3);
            *((void *)a2 - 3) = v79;
            uint64_t v80 = *(void *)(v9 + 16);
            *(void *)(v9 + 16) = *((void *)a2 - 2);
            *((void *)a2 - 2) = v80;
            uint64_t v81 = *(void *)(v9 + 24);
            *(void *)(v9 + 24) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v81;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)v9, (uint64_t *)(v9 + 32), v10);
          break;
        case 4:
          __n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)v9, (uint64_t *)(v9 + 32), (uint64_t *)(v9 + 64), v10);
          break;
        case 5:
          __n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)v9, (uint64_t *)(v9 + 32), (uint64_t *)(v9 + 64), (uint64_t *)(v9 + 96), v10);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 767) {
      break;
    }
    if (!a3)
    {
      if ((char *)v9 != a2)
      {
        int64_t v99 = (unint64_t)(v15 - 2) >> 1;
        int64_t v154 = v99;
        do
        {
          int64_t v100 = v99;
          if (v154 >= v99)
          {
            uint64_t v101 = (2 * v99) | 1;
            long long v102 = (unint64_t *)(v9 + 32 * v101);
            if (2 * v99 + 2 < v15
              && std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((void *)(v9 + 32 * v101), v102 + 4))
            {
              v102 += 4;
              uint64_t v101 = 2 * v100 + 2;
            }
            BOOL v103 = (unint64_t *)(v9 + 32 * v100);
            __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(v102, v103);
            a2 = v156;
            if ((result & 1) == 0)
            {
              unint64_t v105 = *v103;
              unint64_t v104 = v103[1];
              unint64_t v106 = v103[2];
              unint64_t v149 = v103[3];
              unint64_t *v103 = *v102;
              v103[1] = v102[1];
              v103[2] = v102[2];
              v103[3] = v102[3];
              if (v154 >= v101)
              {
                unint64_t v150 = v104;
                int64_t v152 = v100;
                while (1)
                {
                  id v107 = v102;
                  uint64_t v108 = 2 * v101;
                  uint64_t v101 = (2 * v101) | 1;
                  long long v102 = (unint64_t *)(v9 + 32 * v101);
                  uint64_t v109 = v108 + 2;
                  if (v108 + 2 < v15)
                  {
                    unint64_t v110 = v105;
                    __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((void *)(v9 + 32 * v101), v102 + 4);
                    unint64_t v105 = v110;
                    unint64_t v104 = v150;
                    int64_t v100 = v152;
                    if (result)
                    {
                      v102 += 4;
                      uint64_t v101 = v109;
                    }
                  }
                  unint64_t v111 = *v102;
                  if (*v102 < v105) {
                    break;
                  }
                  if (v105 >= v111)
                  {
                    unint64_t v112 = v102[1];
                    if (v112 < v104) {
                      break;
                    }
                    if (v104 >= v112)
                    {
                      unint64_t v113 = v102[2];
                      if (v113 < v106 || v106 >= v113 && v102[3] < v149) {
                        break;
                      }
                    }
                  }
                  *id v107 = v111;
                  v107[1] = v102[1];
                  v107[2] = v102[2];
                  v107[3] = v102[3];
                  if (v154 < v101) {
                    goto LABEL_185;
                  }
                }
                long long v102 = v107;
              }
LABEL_185:
              *long long v102 = v105;
              v102[1] = v104;
              v102[2] = v106;
              v102[3] = v149;
              a2 = v156;
            }
          }
          int64_t v99 = v100 - 1;
        }
        while (v100);
        uint64_t v114 = (unint64_t)v14 >> 5;
        do
        {
          long long v115 = a2;
          uint64_t v116 = 0;
          uint64_t v153 = *(void *)(v9 + 8);
          unint64_t v155 = *(void *)v9;
          uint64_t v117 = *(void *)(v9 + 24);
          uint64_t v151 = *(void *)(v9 + 16);
          uint64_t v118 = v114 - 2;
          if (v114 < 2) {
            uint64_t v118 = v114 - 1;
          }
          uint64_t v119 = v118 >> 1;
          unint64_t v120 = (void *)v9;
          do
          {
            long long v121 = (char *)&v120[4 * v116 + 4];
            uint64_t v122 = (2 * v116) | 1;
            uint64_t v123 = 2 * v116 + 2;
            if (v123 < v114)
            {
              __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(&v120[4 * v116 + 4], &v120[4 * v116 + 8]);
              if (result)
              {
                v121 += 32;
                uint64_t v122 = v123;
              }
            }
            void *v120 = *(void *)v121;
            v120[1] = *((void *)v121 + 1);
            v120[2] = *((void *)v121 + 2);
            v120[3] = *((void *)v121 + 3);
            unint64_t v120 = v121;
            uint64_t v116 = v122;
          }
          while (v122 <= v119);
          if (v121 == v115 - 32)
          {
            *(void *)long long v121 = v155;
            *((void *)v121 + 1) = v153;
            *((void *)v121 + 2) = v151;
            *((void *)v121 + 3) = v117;
            goto LABEL_212;
          }
          *(void *)long long v121 = *((void *)v115 - 4);
          *((void *)v121 + 1) = *((void *)v115 - 3);
          *((void *)v121 + 2) = *((void *)v115 - 2);
          *((void *)v121 + 3) = *((void *)v115 - 1);
          *((void *)v115 - 4) = v155;
          *((void *)v115 - 3) = v153;
          *((void *)v115 - 2) = v151;
          *((void *)v115 - 1) = v117;
          uint64_t v124 = (uint64_t)&v121[-v9 + 32];
          if (v124 >= 33)
          {
            unint64_t v125 = (v124 >> 5) - 2;
            unint64_t v126 = v125 >> 1;
            uint64_t v127 = (unint64_t *)(v9 + 32 * (v125 >> 1));
            __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(v127, v121);
            if (result)
            {
              unint64_t v128 = *(void *)v121;
              unint64_t v129 = *((void *)v121 + 1);
              unint64_t v130 = *((void *)v121 + 2);
              unint64_t v131 = *((void *)v121 + 3);
              *(void *)long long v121 = *v127;
              *((void *)v121 + 1) = v127[1];
              *((void *)v121 + 2) = v127[2];
              *((void *)v121 + 3) = v127[3];
              if (v125 < 2) {
                goto LABEL_211;
              }
              while (1)
              {
                long long v132 = v127;
                unint64_t v133 = v126 - 1;
                unint64_t v126 = (v126 - 1) >> 1;
                uint64_t v127 = (unint64_t *)(v9 + 32 * v126);
                unint64_t v134 = *v127;
                if (*v127 >= v128)
                {
                  if (v128 < v134
                    || (unint64_t v135 = v127[1], v135 >= v129)
                    && (v129 < v135 || (unint64_t v136 = v127[2], v136 >= v130) && (v130 < v136 || v127[3] >= v131)))
                  {
                    uint64_t v127 = v132;
LABEL_211:
                    unint64_t *v127 = v128;
                    v127[1] = v129;
                    v127[2] = v130;
                    v127[3] = v131;
                    break;
                  }
                }
                else
                {
                  unint64_t v135 = v127[1];
                }
                unint64_t *v132 = v134;
                v132[1] = v135;
                v132[2] = v127[2];
                v132[3] = v127[3];
                if (v133 <= 1) {
                  goto LABEL_211;
                }
              }
            }
          }
LABEL_212:
          a2 = v115 - 32;
        }
        while (v114-- > 2);
      }
      return result;
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    unint64_t v17 = v9 + 32 * ((unint64_t)v15 >> 1);
    if ((unint64_t)v14 <= 0x1000)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)v17, (uint64_t *)v9, v10);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)v9, (uint64_t *)v17, v10);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)(v9 + 32), (uint64_t *)(v17 - 32), v11);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)(v9 + 64), (uint64_t *)(v9 + 32 + 32 * v16), v12);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)(v17 - 32), (uint64_t *)v17, (uint64_t *)(v9 + 32 + 32 * v16));
      long long v18 = *(_OWORD *)v9;
      long long v19 = *(_OWORD *)(v9 + 16);
      long long v20 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v17;
      *(_OWORD *)(v9 + 16) = v20;
      *(_OWORD *)unint64_t v17 = v18;
      *(_OWORD *)(v17 + 16) = v19;
    }
    --a3;
    a2 = v156;
    if ((a4 & 1) != 0
      || (__n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((void *)(v9 - 32), (void *)v9), (result & 1) != 0))
    {
      unint64_t v21 = *(void *)v9;
      unint64_t v22 = *(void *)(v9 + 8);
      unint64_t v23 = (char *)(v9 + 32);
      unint64_t v25 = *(void *)(v9 + 16);
      unint64_t v24 = *(void *)(v9 + 24);
      while (1)
      {
        unint64_t v26 = *(void *)v23;
        if (*(void *)v23 >= v21)
        {
          if (v21 < v26) {
            break;
          }
          unint64_t v27 = *((void *)v23 + 1);
          if (v27 >= v22)
          {
            if (v22 < v27) {
              break;
            }
            unint64_t v28 = *((void *)v23 + 2);
            if (v28 >= v25 && (v25 < v28 || *((void *)v23 + 3) >= v24)) {
              break;
            }
          }
        }
        v23 += 32;
      }
      if (v23 - 32 == (char *)v9)
      {
        uint64_t i = v156;
        if (v23 < v156)
        {
          unint64_t v34 = *v10;
          uint64_t i = (char *)v10;
          if (*v10 >= v21)
          {
            uint64_t i = (char *)v10;
            do
            {
              if (v21 >= v34)
              {
                unint64_t v35 = *((void *)i + 1);
                if (v35 < v22) {
                  break;
                }
                if (v22 >= v35)
                {
                  unint64_t v36 = *((void *)i + 2);
                  if (v36 < v25 || v25 >= v36 && *((void *)i + 3) < v24) {
                    break;
                  }
                }
              }
              if (v23 >= i) {
                break;
              }
              unint64_t v37 = *((void *)i - 4);
              i -= 32;
              unint64_t v34 = v37;
            }
            while (v37 >= v21);
          }
        }
      }
      else
      {
        unint64_t v29 = *v10;
        for (uint64_t i = (char *)v10; v29 >= v21; i -= 32)
        {
          if (v21 >= v29)
          {
            unint64_t v31 = *((void *)i + 1);
            if (v31 < v22) {
              break;
            }
            if (v22 >= v31)
            {
              unint64_t v32 = *((void *)i + 2);
              if (v32 < v25 || v25 >= v32 && *((void *)i + 3) < v24) {
                break;
              }
            }
          }
          unint64_t v33 = *((void *)i - 4);
          unint64_t v29 = v33;
        }
      }
      uint64_t j = (uint64_t *)v23;
      if (v23 < i)
      {
        unint64_t v38 = *(void *)i;
        uint64_t j = (uint64_t *)v23;
        uint64_t v39 = (uint64_t *)i;
        do
        {
          *uint64_t j = v38;
          *uint64_t v39 = v26;
          uint64_t v40 = j[1];
          j[1] = v39[1];
          v39[1] = v40;
          uint64_t v41 = j[2];
          j[2] = v39[2];
          v39[2] = v41;
          uint64_t v42 = j[3];
          j[3] = v39[3];
          void v39[3] = v42;
          while (1)
          {
            do
            {
              unint64_t v43 = j[4];
              j += 4;
              unint64_t v26 = v43;
            }
            while (v43 < v21);
            if (v21 < v26) {
              break;
            }
            unint64_t v44 = j[1];
            if (v44 >= v22)
            {
              if (v22 < v44) {
                break;
              }
              unint64_t v45 = j[2];
              if (v45 >= v25 && (v25 < v45 || j[3] >= v24)) {
                break;
              }
            }
          }
          while (1)
          {
            unint64_t v46 = *(v39 - 4);
            v39 -= 4;
            unint64_t v38 = v46;
            if (v46 < v21) {
              break;
            }
            if (v21 >= v38)
            {
              unint64_t v47 = v39[1];
              if (v47 < v22) {
                break;
              }
              if (v22 >= v47)
              {
                unint64_t v48 = v39[2];
                if (v48 < v25 || v25 >= v48 && v39[3] < v24) {
                  break;
                }
              }
            }
          }
        }
        while (j < v39);
      }
      if (j - 4 != (uint64_t *)v9)
      {
        *(void *)unint64_t v9 = *(j - 4);
        *(void *)(v9 + 8) = *(j - 3);
        *(void *)(v9 + 16) = *(j - 2);
        *(void *)(v9 + 24) = *(j - 1);
      }
      *(j - 4) = v21;
      *(j - 3) = v22;
      *(j - 2) = v25;
      *(j - 1) = v24;
      if (v23 < i) {
        goto LABEL_65;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t *)v9, (char *)j - 32);
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(j, v156);
      if (result)
      {
        a2 = (char *)(j - 4);
        if (v49) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v49)
      {
LABEL_65:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(v9, j - 4, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      unint64_t v50 = *(void *)v9;
      unint64_t v51 = *(void *)(v9 + 8);
      unint64_t v52 = *(void *)(v9 + 16);
      unint64_t v53 = *(void *)(v9 + 24);
      unint64_t v54 = *v10;
      if (*(void *)v9 < (unint64_t)*v10
        || v54 >= v50
        && ((unint64_t v76 = *((void *)v156 - 3), v51 < v76)
         || v76 >= v51 && ((unint64_t v77 = *((void *)v156 - 2), v52 < v77) || v77 >= v52 && v53 < *((void *)v156 - 1))))
      {
        uint64_t j = (uint64_t *)v9;
        while (1)
        {
          unint64_t v56 = j[4];
          j += 4;
          unint64_t v55 = v56;
          if (v50 < v56) {
            break;
          }
          if (v55 >= v50)
          {
            unint64_t v57 = j[1];
            if (v51 < v57) {
              break;
            }
            if (v57 >= v51)
            {
              unint64_t v58 = j[2];
              if (v52 < v58 || v58 >= v52 && v53 < j[3]) {
                break;
              }
            }
          }
        }
      }
      else
      {
        for (uint64_t j = (uint64_t *)(v9 + 32); j < (uint64_t *)v156; j += 4)
        {
          if (v50 < *j) {
            break;
          }
          if (*j >= v50)
          {
            unint64_t v74 = j[1];
            if (v51 < v74) {
              break;
            }
            if (v74 >= v51)
            {
              unint64_t v75 = j[2];
              if (v52 < v75 || v75 >= v52 && v53 < j[3]) {
                break;
              }
            }
          }
        }
      }
      unint64_t k = (uint64_t *)v156;
      if (j < (uint64_t *)v156)
      {
        for (unint64_t k = v10; ; k -= 4)
        {
          if (v50 >= v54)
          {
            if (v54 < v50) {
              break;
            }
            unint64_t v60 = k[1];
            if (v51 >= v60)
            {
              if (v60 < v51) {
                break;
              }
              unint64_t v61 = k[2];
              if (v52 >= v61 && (v61 < v52 || v53 >= k[3])) {
                break;
              }
            }
          }
          unint64_t v62 = *(k - 4);
          unint64_t v54 = v62;
        }
      }
      if (j < k)
      {
        unint64_t v63 = *j;
        unint64_t v64 = *k;
        do
        {
          *uint64_t j = v64;
          *unint64_t k = v63;
          uint64_t v65 = j[1];
          j[1] = k[1];
          k[1] = v65;
          uint64_t v66 = j[2];
          j[2] = k[2];
          k[2] = v66;
          uint64_t v67 = j[3];
          j[3] = k[3];
          k[3] = v67;
          while (1)
          {
            unint64_t v68 = j[4];
            j += 4;
            unint64_t v63 = v68;
            if (v50 < v68) {
              break;
            }
            if (v63 >= v50)
            {
              unint64_t v69 = j[1];
              if (v51 < v69) {
                break;
              }
              if (v69 >= v51)
              {
                unint64_t v70 = j[2];
                if (v52 < v70 || v70 >= v52 && v53 < j[3]) {
                  break;
                }
              }
            }
          }
          while (1)
          {
            do
            {
              unint64_t v71 = *(k - 4);
              k -= 4;
              unint64_t v64 = v71;
            }
            while (v50 < v71);
            if (v64 < v50) {
              break;
            }
            unint64_t v72 = k[1];
            if (v51 >= v72)
            {
              if (v72 < v51) {
                break;
              }
              unint64_t v73 = k[2];
              if (v52 >= v73 && (v73 < v52 || v53 >= k[3])) {
                break;
              }
            }
          }
        }
        while (j < k);
      }
      BOOL v4 = (unint64_t)(j - 4) >= v9;
      BOOL v5 = j - 4 == (uint64_t *)v9;
      if (j - 4 != (uint64_t *)v9)
      {
        *(void *)unint64_t v9 = *(j - 4);
        *(void *)(v9 + 8) = *(j - 3);
        *(void *)(v9 + 16) = *(j - 2);
        *(void *)(v9 + 24) = *(j - 1);
      }
      a4 = 0;
      *(j - 4) = v50;
      *(j - 3) = v51;
      *(j - 2) = v52;
      *(j - 1) = v53;
    }
  }
  unint64_t v82 = (char *)(v9 + 32);
  BOOL v84 = (char *)v9 == a2 || v82 == a2;
  if ((a4 & 1) == 0)
  {
    if (!v84)
    {
      do
      {
        uint64_t v138 = v82;
        __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(v82, (void *)v9);
        if (result)
        {
          unint64_t v139 = *(void *)v138;
          unint64_t v140 = *(void *)(v9 + 40);
          unint64_t v141 = *(void *)(v9 + 48);
          unint64_t v142 = *(void *)(v9 + 56);
          unint64_t v143 = *(void *)v9;
          while (1)
          {
            do
            {
              long long v144 = (void *)v9;
              unint64_t v145 = v143;
              unint64_t v146 = *(void *)(v9 - 32);
              v9 -= 32;
              unint64_t v143 = v146;
              *(void *)(v9 + 64) = v145;
              *(_OWORD *)(v9 + 72) = *(_OWORD *)(v9 + 40);
              *(void *)(v9 + 88) = *(void *)(v9 + 56);
            }
            while (v139 < v146);
            if (v143 < v139) {
              break;
            }
            unint64_t v147 = *(v144 - 3);
            if (v140 >= v147)
            {
              if (v147 < v140) {
                break;
              }
              unint64_t v148 = *(v144 - 2);
              if (v141 >= v148 && (v148 < v141 || v142 >= *(v144 - 1))) {
                break;
              }
            }
          }
          *long long v144 = v139;
          v144[1] = v140;
          void v144[2] = v141;
          v144[3] = v142;
        }
        unint64_t v82 = v138 + 32;
        unint64_t v9 = (unint64_t)v138;
      }
      while (v138 + 32 != a2);
    }
    return result;
  }
  if (v84) {
    return result;
  }
  uint64_t v85 = 0;
  unint64_t v86 = (void *)v9;
  do
  {
    id v87 = v82;
    __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(v82, v86);
    if (!result) {
      goto LABEL_161;
    }
    unint64_t v88 = v86[4];
    unint64_t v89 = v86[5];
    unint64_t v90 = v86[6];
    unint64_t v91 = v86[7];
    uint64_t v92 = v86[1];
    v86[4] = *v86;
    *((void *)v87 + 1) = v92;
    *((void *)v87 + 2) = v86[2];
    *((void *)v87 + 3) = v86[3];
    uint64_t v93 = (void *)v9;
    if (v86 == (void *)v9) {
      goto LABEL_160;
    }
    uint64_t v94 = v85;
    while (1)
    {
      unint64_t v95 = *(void *)(v9 + v94 - 32);
      if (v88 < v95)
      {
        unint64_t v96 = *(void *)(v9 + v94 - 24);
        goto LABEL_157;
      }
      if (v95 < v88) {
        goto LABEL_159;
      }
      unint64_t v96 = *(void *)(v9 + v94 - 24);
      if (v89 >= v96)
      {
        if (v96 < v89) {
          goto LABEL_159;
        }
        unint64_t v97 = *(void *)(v9 + v94 - 16);
        if (v90 >= v97) {
          break;
        }
      }
LABEL_157:
      v86 -= 4;
      uint64_t v98 = v9 + v94;
      *(void *)uint64_t v98 = v95;
      *(void *)(v98 + 8) = v96;
      *(_OWORD *)(v98 + 16) = *(_OWORD *)(v9 + v94 - 16);
      v94 -= 32;
      if (!v94)
      {
        uint64_t v93 = (void *)v9;
        goto LABEL_160;
      }
    }
    if (v97 >= v90)
    {
      uint64_t v93 = (void *)(v9 + v94);
      if (v91 >= *(void *)(v9 + v94 - 8)) {
        goto LABEL_160;
      }
      goto LABEL_157;
    }
LABEL_159:
    uint64_t v93 = v86;
LABEL_160:
    void *v93 = v88;
    v93[1] = v89;
    v93[2] = v90;
    v93[3] = v91;
LABEL_161:
    unint64_t v82 = v87 + 32;
    v85 += 32;
    unint64_t v86 = v87;
  }
  while (v87 + 32 != a2);
  return result;
}

BOOL std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a2 < *a1) {
    return 0;
  }
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  if (v2 < v3) {
    return 1;
  }
  if (v3 < v2) {
    return 0;
  }
  unint64_t v4 = a1[2];
  unint64_t v5 = a2[2];
  if (v4 < v5) {
    return 1;
  }
  return v5 >= v4 && a1[3] < a2[3];
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6 = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a2, a1);
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a3, a2);
  if (v6)
  {
    unint64_t v9 = a1 + 3;
    uint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
      uint64_t v10 = a1[1];
      a1[1] = a3[1];
      a3[1] = v10;
      uint64_t v11 = a1[2];
      a1[2] = a3[2];
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      uint64_t v20 = a1[1];
      a1[1] = a2[1];
      a2[1] = v20;
      uint64_t v21 = a1[2];
      a1[2] = a2[2];
      a2[2] = v21;
      unint64_t v9 = a2 + 3;
      uint64_t v22 = a1[3];
      a1[3] = a2[3];
      a2[3] = v22;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      uint64_t v24 = a2[1];
      a2[1] = a3[1];
      a3[1] = v24;
      uint64_t v11 = a2[2];
      a2[2] = a3[2];
    }
    a3[2] = v11;
    unint64_t v16 = a3 + 3;
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    uint64_t v13 = a2[1];
    a2[1] = a3[1];
    a3[1] = v13;
    uint64_t v14 = a2[2];
    a2[2] = a3[2];
    a3[2] = v14;
    unint64_t v16 = a2 + 3;
    uint64_t v15 = a2[3];
    a2[3] = a3[3];
    a3[3] = v15;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a2, a1);
    if (result)
    {
      uint64_t v17 = *a1;
      *a1 = *a2;
      *a2 = v17;
      uint64_t v18 = a1[1];
      a1[1] = a2[1];
      a2[1] = v18;
      uint64_t v19 = a1[2];
      a1[2] = a2[2];
      a2[2] = v19;
      unint64_t v9 = a1 + 3;
LABEL_10:
      uint64_t v25 = *v9;
      *unint64_t v9 = *v16;
      *unint64_t v16 = v25;
    }
  }
  return result;
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3);
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a4, a3);
  if (result)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    uint64_t v12 = a3[3];
    a3[3] = a4[3];
    a4[3] = v12;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a3, a2);
    if (result)
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      uint64_t v15 = a2[2];
      a2[2] = a3[2];
      a3[2] = v15;
      uint64_t v16 = a2[3];
      a2[3] = a3[3];
      a3[3] = v16;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a2, a1);
      if (result)
      {
        uint64_t v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        uint64_t v18 = a1[1];
        a1[1] = a2[1];
        a2[1] = v18;
        uint64_t v19 = a1[2];
        a1[2] = a2[2];
        a2[2] = v19;
        uint64_t v20 = a1[3];
        a1[3] = a2[3];
        a2[3] = v20;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3, a4);
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a5, a4);
  if (result)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    uint64_t v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    uint64_t v14 = a4[3];
    a4[3] = a5[3];
    a5[3] = v14;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a4, a3);
    if (result)
    {
      uint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      uint64_t v17 = a3[2];
      a3[2] = a4[2];
      a4[2] = v17;
      uint64_t v18 = a3[3];
      a3[3] = a4[3];
      a4[3] = v18;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a3, a2);
      if (result)
      {
        uint64_t v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        uint64_t v20 = a2[1];
        a2[1] = a3[1];
        a3[1] = v20;
        uint64_t v21 = a2[2];
        a2[2] = a3[2];
        a3[2] = v21;
        uint64_t v22 = a2[3];
        a2[3] = a3[3];
        a3[3] = v22;
        BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a2, a1);
        if (result)
        {
          uint64_t v23 = *a1;
          *a1 = *a2;
          *a2 = v23;
          uint64_t v24 = a1[1];
          a1[1] = a2[1];
          a2[1] = v24;
          uint64_t v25 = a1[2];
          a1[2] = a2[2];
          a2[2] = v25;
          uint64_t v26 = a1[3];
          a1[3] = a2[3];
          a2[3] = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, char *a2)
{
  uint64_t v4 = (a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((void *)a2 - 4, a1))
      {
        uint64_t v6 = *a1;
        *a1 = *((void *)a2 - 4);
        *((void *)a2 - 4) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *((void *)a2 - 3);
        *((void *)a2 - 3) = v7;
        uint64_t v8 = a1[2];
        a1[2] = *((void *)a2 - 2);
        *((void *)a2 - 2) = v8;
        uint64_t v9 = a1[3];
        a1[3] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 4, (uint64_t *)a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 4, a1 + 8, (uint64_t *)a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 4, a1 + 8, a1 + 12, (uint64_t *)a2 - 4);
      return 1;
    default:
      uint64_t v10 = a1 + 8;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 4, a1 + 8);
      uint64_t v11 = a1 + 12;
      if (a1 + 12 == (uint64_t *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (2)
  {
    if (!std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(v11, v10))goto LABEL_21; {
    unint64_t v14 = *v11;
    }
    unint64_t v15 = v11[1];
    unint64_t v16 = v11[2];
    unint64_t v17 = v11[3];
    uint64_t *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
    v11[3] = v10[3];
    uint64_t v18 = a1;
    if (v10 == a1) {
      goto LABEL_20;
    }
    uint64_t v19 = v12;
    while (1)
    {
      uint64_t v20 = (char *)a1 + v19;
      unint64_t v21 = *(uint64_t *)((char *)a1 + v19 + 32);
      if (v14 < v21)
      {
        unint64_t v22 = *((void *)v20 + 5);
        goto LABEL_17;
      }
      if (v21 < v14) {
        goto LABEL_19;
      }
      unint64_t v22 = *(uint64_t *)((char *)a1 + v19 + 40);
      if (v15 >= v22)
      {
        if (v22 < v15) {
          goto LABEL_19;
        }
        unint64_t v23 = *(uint64_t *)((char *)a1 + v19 + 48);
        if (v16 >= v23)
        {
          if (v23 < v16)
          {
LABEL_19:
            uint64_t v18 = v10;
            goto LABEL_20;
          }
          if (v17 >= *(uint64_t *)((char *)a1 + v19 + 56)) {
            break;
          }
        }
      }
LABEL_17:
      v10 -= 4;
      *((void *)v20 + 8) = v21;
      uint64_t v24 = (char *)a1 + v19;
      *((void *)v24 + 9) = v22;
      *((_OWORD *)v24 + 5) = *(_OWORD *)((char *)a1 + v19 + 48);
      v19 -= 32;
      if (v19 == -64)
      {
        uint64_t v18 = a1;
        goto LABEL_20;
      }
    }
    uint64_t v18 = (uint64_t *)((char *)a1 + v19 + 64);
LABEL_20:
    uint64_t *v18 = v14;
    v18[1] = v15;
    void v18[2] = v16;
    void v18[3] = v17;
    if (++v13 != 8)
    {
LABEL_21:
      uint64_t v10 = v11;
      v12 += 32;
      v11 += 4;
      if (v11 == (uint64_t *)a2) {
        return 1;
      }
      continue;
    }
    return v11 + 4 == (uint64_t *)a2;
  }
}

id GRCSplitBlitTimeData::CalculateBlitEncoderTime(uint64_t a1, void *a2, void *a3)
{
  id v151 = a2;
  id v147 = a3;
  unsigned int v5 = [v147 length];
  id v6 = v147;
  uint64_t v7 = (unsigned int *)[v6 bytes];
  unint64_t v149 = v6;
  LODWORD(v8) = v5 >> 2;
  long long v163 = 0u;
  long long v164 = 0u;
  float v165 = 0.3;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v163, vcvtps_u32_f32((float)(v5 >> 2) / 0.3));
  if (v5 >= 4)
  {
    uint64_t v9 = 0;
    if (v8 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v8;
    }
    unint64_t v10 = *((void *)&v163 + 1);
    do
    {
      unint64_t v11 = v7[v9];
      if (v10)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v3 = v7[v9];
          if (v10 <= v11) {
            unint64_t v3 = v11 % v10;
          }
        }
        else
        {
          unint64_t v3 = (v10 - 1) & v11;
        }
        int v13 = *(uint64_t ***)(v163 + 8 * v3);
        if (v13)
        {
          for (uint64_t i = *v13; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v15 = i[1];
            if (v15 == v11)
            {
              if (*((_DWORD *)i + 4) == v11) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v10) {
                  v15 %= v10;
                }
              }
              else
              {
                v15 &= v10 - 1;
              }
              if (v15 != v3) {
                break;
              }
            }
          }
        }
      }
      unint64_t v16 = (char *)operator new(0x40uLL);
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = v11;
      *((_DWORD *)v16 + 4) = v11;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *((_DWORD *)v16 + 14) = 0;
      *((_DWORD *)v16 + 15) = v9;
      float v17 = (float)(unint64_t)(*((void *)&v164 + 1) + 1);
      if (!v10 || (float)(v165 * (float)v10) < v17)
      {
        BOOL v18 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v10);
        unint64_t v20 = vcvtps_u32_f32(v17 / v165);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v163, v21);
        unint64_t v10 = *((void *)&v163 + 1);
        if ((*((void *)&v163 + 1) & (*((void *)&v163 + 1) - 1)) != 0)
        {
          if (*((void *)&v163 + 1) <= v11) {
            unint64_t v3 = v11 % *((void *)&v163 + 1);
          }
          else {
            unint64_t v3 = v11;
          }
        }
        else
        {
          unint64_t v3 = (DWORD2(v163) - 1) & v11;
        }
      }
      uint64_t v22 = v163;
      unint64_t v23 = *(void **)(v163 + 8 * v3);
      if (v23)
      {
        *(void *)unint64_t v16 = *v23;
      }
      else
      {
        *(void *)unint64_t v16 = v164;
        *(void *)&long long v164 = v16;
        *(void *)(v22 + 8 * v3) = &v164;
        if (!*(void *)v16) {
          goto LABEL_43;
        }
        unint64_t v24 = *(void *)(*(void *)v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v24 >= v10) {
            v24 %= v10;
          }
        }
        else
        {
          v24 &= v10 - 1;
        }
        unint64_t v23 = (void *)(v163 + 8 * v24);
      }
      *unint64_t v23 = v16;
LABEL_43:
      ++*((void *)&v164 + 1);
LABEL_44:
      ++v9;
    }
    while (v9 != v8);
  }
  unint64_t v25 = (unint64_t)[v151 count];
  unint64_t v26 = v25;
  if (v25)
  {
    if (v25 >> 62) {
      abort();
    }
    unint64_t v150 = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v25);
    bzero(v150, 4 * v26);
  }
  else
  {
    unint64_t v150 = 0;
  }
  long long __p = 0;
  int v161 = 0;
  unint64_t v162 = 0;
  std::vector<std::pair<unsigned int,unsigned int>>::reserve(&__p, (unint64_t)[v151 count]);
  long long v158 = 0u;
  long long v159 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  id v27 = v151;
  id v28 = [v27 countByEnumeratingWithState:&v156 objects:v167 count:16];
  if (v28)
  {
    uint64_t v29 = *(void *)v157;
    do
    {
      for (uint64_t j = 0; j != v28; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v157 != v29) {
          objc_enumerationMutation(v27);
        }
        id v31 = [*(id *)(*((void *)&v156 + 1) + 8 * (void)j) bytes];
        id v32 = v31;
        unint64_t v33 = v161;
        if ((unint64_t)v161 >= v162)
        {
          uint64_t v35 = (v161 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v35 + 1) >> 61) {
            abort();
          }
          unint64_t v36 = (uint64_t)(v162 - (void)__p) >> 2;
          if (v36 <= v35 + 1) {
            unint64_t v36 = v35 + 1;
          }
          if (v162 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v36;
          }
          if (v37) {
            unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v37);
          }
          else {
            uint64_t v38 = 0;
          }
          uint64_t v39 = (char *)(v37 + 8 * v35);
          *(void *)uint64_t v39 = v32;
          unint64_t v34 = v39 + 8;
          uint64_t v41 = (char *)__p;
          uint64_t v40 = v161;
          if (v161 != __p)
          {
            do
            {
              uint64_t v42 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v39 - 1) = v42;
              v39 -= 8;
            }
            while (v40 != v41);
            uint64_t v40 = (char *)__p;
          }
          long long __p = v39;
          int v161 = v34;
          unint64_t v162 = v37 + 8 * v38;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)int v161 = v31;
          unint64_t v34 = v33 + 8;
        }
        int v161 = v34;
      }
      id v28 = [v27 countByEnumeratingWithState:&v156 objects:v167 count:16];
    }
    while (v28);
  }

  if (v161 == __p)
  {
    unint64_t v90 = 0;
    long long v153 = 0u;
    long long v154 = 0u;
    int v155 = 1065353216;
    goto LABEL_238;
  }
  unint64_t v43 = 0;
  unint64_t v44 = 0;
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  do
  {
    unint64_t v47 = [v27 objectAtIndexedSubscript:v43];
    BOOL v48 = (unint64_t)[v47 length] > 0x3F;

    if (v48)
    {
      BOOL v49 = [v27 objectAtIndexedSubscript:v43];
      int NextMarker = FindNextMarker(v49, 0, *(void *)(a1 + 8));

      if (NextMarker != -1)
      {
        if (v45 >= v46)
        {
          uint64_t v51 = (v45 - v44) >> 3;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61) {
            abort();
          }
          if ((v46 - v44) >> 2 > v52) {
            unint64_t v52 = (v46 - v44) >> 2;
          }
          if ((unint64_t)(v46 - v44) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v54 = (char *)operator new(8 * v53);
          unint64_t v55 = &v54[8 * v51];
          *(_DWORD *)unint64_t v55 = v43;
          *((_DWORD *)v55 + 1) = 0;
          unint64_t v56 = v55;
          while (v45 != v44)
          {
            uint64_t v57 = *((void *)v45 - 1);
            v45 -= 8;
            *((void *)v56 - 1) = v57;
            v56 -= 8;
          }
          unint64_t v46 = &v54[8 * v53];
          unint64_t v45 = v55 + 8;
          if (v44) {
            operator delete(v44);
          }
          unint64_t v44 = v56;
        }
        else
        {
          *(_DWORD *)unint64_t v45 = v43;
          *((_DWORD *)v45 + 1) = 0;
          v45 += 8;
        }
        *(void *)&long long v153 = &__p;
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>((uint64_t)v44, (uint64_t)v45, (uint64_t **)&v153, (v45 - v44) >> 3);
      }
    }
    ++v43;
  }
  while (v43 < (v161 - (unsigned char *)__p) >> 3);
  long long v153 = 0u;
  long long v154 = 0u;
  int v155 = 1065353216;
  if (v44 == v45)
  {
    unint64_t v90 = v45;
    goto LABEL_238;
  }
  uint64_t v58 = 0;
  int v148 = 0;
  do
  {
    unint64_t v59 = *(void *)v44;
    p_p = &__p;
    if (v45 - v44 < 9) {
      goto LABEL_114;
    }
    uint64_t v60 = 0;
    uint64_t v61 = (v45 - v44) >> 3;
    unint64_t v62 = *(void *)v44;
    unint64_t v63 = v44;
    do
    {
      unint64_t v64 = v63;
      v63 += 8 * v60 + 8;
      uint64_t v65 = 2 * v60;
      uint64_t v60 = (2 * v60) | 1;
      uint64_t v66 = v65 + 2;
      if (v66 >= v61) {
        goto LABEL_110;
      }
      uint64_t v67 = (void *)(*((void *)*p_p + *(unsigned int *)v63) + 8 * *((unsigned int *)v63 + 1));
      unint64_t v68 = (void *)(*((void *)*p_p + *((unsigned int *)v63 + 2)) + 8 * *((unsigned int *)v63 + 3));
      unint64_t v69 = v67[1];
      unint64_t v70 = v68[1];
      BOOL v71 = v69 > v70;
      if (v69 == v70
        && (v72 = v67[4], unint64_t v73 = v68[4], v71 = v72 > v73, v72 == v73)
        && (v74 = v67[5], unint64_t v75 = v68[5], v71 = v74 > v75, v74 == v75))
      {
        unint64_t v76 = v67[3];
        uint64_t v77 = v68[3];
        if (v76 > v69 && v76 != v77)
        {
LABEL_109:
          v63 += 8;
          uint64_t v60 = v66;
        }
      }
      else if (v71)
      {
        goto LABEL_109;
      }
LABEL_110:
      *(void *)unint64_t v64 = *(void *)v63;
    }
    while (v60 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
    uint64_t v79 = v45 - 8;
    if (v63 == v45 - 8)
    {
      *(void *)unint64_t v63 = v62;
    }
    else
    {
      *(void *)unint64_t v63 = *(void *)v79;
      *(void *)uint64_t v79 = v62;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>((uint64_t)v44, (uint64_t)(v63 + 8), (uint64_t **)&p_p, (v63 + 8 - v44) >> 3);
    }
LABEL_114:
    if (!*((void *)&v163 + 1)) {
      goto LABEL_131;
    }
    uint64_t v80 = (void *)(*((void *)__p + v59) + 8 * HIDWORD(v59));
    uint64_t v81 = v80[4];
    uint8x8_t v82 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v163 + 8));
    v82.i16[0] = vaddlv_u8(v82);
    if (v82.u32[0] > 1uLL)
    {
      unint64_t v83 = v80[4];
      if (*((void *)&v163 + 1) <= (unint64_t)v81) {
        unint64_t v83 = (unint64_t)v81 % *((void *)&v163 + 1);
      }
    }
    else
    {
      unint64_t v83 = (DWORD2(v163) - 1) & v81;
    }
    BOOL v84 = *(uint64_t ***)(v163 + 8 * v83);
    if (!v84)
    {
LABEL_131:
      uint64_t v87 = v58;
      goto LABEL_132;
    }
    uint64_t v85 = *v84;
    if (!*v84)
    {
LABEL_130:
      uint64_t v87 = v58;
      goto LABEL_132;
    }
    while (2)
    {
      unint64_t v86 = v85[1];
      if (v86 != v81)
      {
        if (v82.u32[0] > 1uLL)
        {
          if (v86 >= *((void *)&v163 + 1)) {
            v86 %= *((void *)&v163 + 1);
          }
        }
        else
        {
          v86 &= *((void *)&v163 + 1) - 1;
        }
        if (v86 != v83) {
          goto LABEL_130;
        }
LABEL_129:
        uint64_t v85 = (uint64_t *)*v85;
        if (!v85) {
          goto LABEL_130;
        }
        continue;
      }
      break;
    }
    if (*((_DWORD *)v85 + 4) != v81) {
      goto LABEL_129;
    }
    uint64_t v87 = v80[1];
    double v98 = (double)(unint64_t)(v87 - v58);
    int v99 = v148;
    if (v148 <= 1) {
      int v100 = 1;
    }
    else {
      int v100 = v148;
    }
    double v101 = v98 / (double)v100 * 125.0 / 3.0;
    unint64_t v102 = v80[3];
    uint64_t v103 = (v102 >> 1) & 3;
    unint64_t v104 = (uint64_t *)v154;
    if (v102)
    {
      if (!(void)v154) {
        goto LABEL_183;
      }
      char v114 = 0;
      do
      {
        uint64_t v115 = 0;
        uint64_t v116 = v104[3];
        uint64_t v117 = v116 + 24;
        do
        {
          if (*(_DWORD *)(v116 + 4 * v115 + 24)) {
            *(double *)(v116 + 8 * v115) = v101 + *(double *)(v116 + 8 * v115);
          }
          ++v115;
        }
        while (v115 != 3);
        if (v81 == *((_DWORD *)v104 + 4))
        {
          int v118 = *(_DWORD *)(v117 + 4 * v103);
          if (v118)
          {
            unsigned int v119 = v118 - 1;
            *(_DWORD *)(v117 + 4 * v103) = v119;
            int v99 = (__PAIR64__(v99, v119) - 1) >> 32;
          }
          else
          {
            ++v99;
          }
          char v114 = 1;
        }
        unint64_t v104 = (uint64_t *)*v104;
      }
      while (v104);
      if ((v114 & 1) == 0)
      {
LABEL_183:
        --*((_DWORD *)v85 + v103 + 12);
        unint64_t v113 = std::unordered_map<unsigned int,GRCSplitBlitTimeData::CalculateBlitEncoderTime(NSArray<NSData *> *,NSData *)::TimeInfo *,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,GRCSplitBlitTimeData::CalculateBlitEncoderTime(NSArray<NSData *> *,NSData *)::TimeInfo *>>>::operator[]((float *)&v153, v81);
LABEL_184:
        *(void *)unint64_t v113 = v85 + 3;
        ++v99;
      }
    }
    else
    {
      if (!(void)v154) {
        goto LABEL_169;
      }
      char v105 = 0;
      do
      {
        uint64_t v106 = 0;
        uint64_t v107 = v104[3];
        uint64_t v108 = v107 + 24;
        do
        {
          if (*(_DWORD *)(v107 + 4 * v106 + 24)) {
            *(double *)(v107 + 8 * v106) = v101 + *(double *)(v107 + 8 * v106);
          }
          ++v106;
        }
        while (v106 != 3);
        if (v81 == *((_DWORD *)v104 + 4))
        {
          int v109 = *(_DWORD *)(v108 + 4 * v103);
          if (v109)
          {
            BOOL v110 = __CFADD__(v109, 1);
            int v111 = v109 + 1;
            int v112 = v110;
            *(_DWORD *)(v108 + 4 * v103) = v111;
            v99 -= v112;
          }
          else
          {
            ++v99;
          }
          char v105 = 1;
        }
        unint64_t v104 = (uint64_t *)*v104;
      }
      while (v104);
      if ((v105 & 1) == 0)
      {
LABEL_169:
        ++*((_DWORD *)v85 + v103 + 12);
        unint64_t v113 = std::unordered_map<unsigned int,GRCSplitBlitTimeData::CalculateBlitEncoderTime(NSArray<NSData *> *,NSData *)::TimeInfo *,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,GRCSplitBlitTimeData::CalculateBlitEncoderTime(NSArray<NSData *> *,NSData *)::TimeInfo *>>>::operator[]((float *)&v153, v81);
        goto LABEL_184;
      }
    }
    uint64_t v120 = 0;
    int v121 = 0;
    do
    {
      if (*(_DWORD *)((char *)v85 + v120 + 48)) {
        ++v121;
      }
      v120 += 4;
    }
    while (v120 != 12);
    int v148 = v99;
    if (v121) {
      goto LABEL_132;
    }
    unint64_t v122 = *((void *)&v153 + 1);
    if (!*((void *)&v153 + 1)) {
      goto LABEL_132;
    }
    uint64_t v123 = v80[4];
    unint64_t v124 = v123;
    uint8x8_t v125 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v153 + 8));
    v125.i16[0] = vaddlv_u8(v125);
    if (v125.u32[0] > 1uLL)
    {
      unint64_t v126 = v80[4];
      if (*((void *)&v153 + 1) <= (unint64_t)v123) {
        unint64_t v126 = (unint64_t)v123 % *((void *)&v153 + 1);
      }
    }
    else
    {
      unint64_t v126 = (DWORD2(v153) - 1) & v123;
    }
    uint64_t v127 = *(void ***)(v153 + 8 * v126);
    if (!v127) {
      goto LABEL_132;
    }
    unint64_t v128 = (long long *)*v127;
    if (!*v127) {
      goto LABEL_132;
    }
    uint64_t v129 = *((void *)&v153 + 1) - 1;
    while (2)
    {
      unint64_t v130 = *((void *)v128 + 1);
      if (v130 != v123)
      {
        if (v125.u32[0] > 1uLL)
        {
          if (v130 >= *((void *)&v153 + 1)) {
            v130 %= *((void *)&v153 + 1);
          }
        }
        else
        {
          v130 &= v129;
        }
        if (v130 != v126) {
          goto LABEL_132;
        }
LABEL_206:
        unint64_t v128 = *(long long **)v128;
        if (!v128) {
          goto LABEL_132;
        }
        continue;
      }
      break;
    }
    if (*((_DWORD *)v128 + 4) != v123) {
      goto LABEL_206;
    }
    if (v125.u32[0] > 1uLL)
    {
      if (*((void *)&v153 + 1) <= (unint64_t)v123) {
        unint64_t v124 = (unint64_t)v123 % *((void *)&v153 + 1);
      }
    }
    else
    {
      unint64_t v124 = v129 & v123;
    }
    unint64_t v131 = *(long long **)v128;
    long long v132 = *(long long **)(v153 + 8 * v124);
    do
    {
      unint64_t v133 = v132;
      long long v132 = *(long long **)v132;
    }
    while (v132 != v128);
    if (v133 == &v154) {
      goto LABEL_225;
    }
    unint64_t v134 = *((void *)v133 + 1);
    if (v125.u32[0] > 1uLL)
    {
      if (v134 >= *((void *)&v153 + 1)) {
        v134 %= *((void *)&v153 + 1);
      }
    }
    else
    {
      v134 &= v129;
    }
    if (v134 == v124)
    {
LABEL_227:
      if (v131)
      {
        unint64_t v135 = *((void *)v131 + 1);
        goto LABEL_229;
      }
    }
    else
    {
LABEL_225:
      if (!v131) {
        goto LABEL_226;
      }
      unint64_t v135 = *((void *)v131 + 1);
      if (v125.u32[0] > 1uLL)
      {
        unint64_t v136 = *((void *)v131 + 1);
        if (v135 >= *((void *)&v153 + 1)) {
          unint64_t v136 = v135 % *((void *)&v153 + 1);
        }
      }
      else
      {
        unint64_t v136 = v135 & v129;
      }
      if (v136 != v124)
      {
LABEL_226:
        *(void *)(v153 + 8 * v124) = 0;
        unint64_t v131 = *(long long **)v128;
        goto LABEL_227;
      }
LABEL_229:
      if (v125.u32[0] > 1uLL)
      {
        if (v135 >= v122) {
          v135 %= v122;
        }
      }
      else
      {
        v135 &= v129;
      }
      if (v135 != v124)
      {
        *(void *)(v153 + 8 * v135) = v133;
        unint64_t v131 = *(long long **)v128;
      }
    }
    *(void *)unint64_t v133 = v131;
    --*((void *)&v154 + 1);
    operator delete(v128);
LABEL_132:
    unint64_t v88 = [v27 objectAtIndexedSubscript:v59];
    int v89 = FindNextMarker(v88, HIDWORD(v59) + 8, *(void *)(a1 + 8));

    unint64_t v90 = v45 - 8;
    if (v89 != -1)
    {
      if (v90 >= v46)
      {
        uint64_t v93 = (v90 - v44) >> 3;
        unint64_t v94 = v93 + 1;
        if ((unint64_t)(v93 + 1) >> 61) {
          abort();
        }
        if ((v46 - v44) >> 2 > v94) {
          unint64_t v94 = (v46 - v44) >> 2;
        }
        if ((unint64_t)(v46 - v44) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v95 = v94;
        }
        if (v95 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v96 = (char *)operator new(8 * v95);
        uint64_t v92 = &v96[8 * v93];
        *(_DWORD *)uint64_t v92 = v59;
        *((_DWORD *)v92 + 1) = v89;
        uint64_t v91 = (uint64_t)v92;
        if (v90 != v44)
        {
          uint64_t v91 = (uint64_t)v92;
          do
          {
            uint64_t v97 = *((void *)v90 - 1);
            v90 -= 8;
            *(void *)(v91 - 8) = v97;
            v91 -= 8;
          }
          while (v90 != v44);
        }
        unint64_t v46 = &v96[8 * v95];
        operator delete(v44);
        unint64_t v44 = (char *)v91;
      }
      else
      {
        *((_DWORD *)v45 - 2) = v59;
        *((_DWORD *)v45 - 1) = v89;
        uint64_t v91 = (uint64_t)v44;
        uint64_t v92 = v90;
      }
      unint64_t v90 = v92 + 8;
      p_p = &__p;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>(v91, (uint64_t)(v92 + 8), (uint64_t **)&p_p, (uint64_t)&v92[-v91 + 8] >> 3);
    }
    uint64_t v58 = v87;
    unint64_t v45 = v90;
  }
  while (v44 != v90);
LABEL_238:
  id v137 = +[NSMutableData dataWithLength:32 * *((void *)&v164 + 1)];
  uint64_t v138 = (char *)[v137 mutableBytes];
  for (unint64_t k = (uint64_t **)v164; k; unint64_t k = (uint64_t **)*k)
  {
    uint64_t v140 = 0;
    uint64_t v141 = *((unsigned int *)k + 15);
    uint64_t v142 = 4 * v141;
    unint64_t v143 = &v138[32 * v141];
    double v144 = 0.0;
    do
    {
      *(void *)&v143[v140 * 8] = k[v140 + 3];
      double v144 = v144 + *(double *)&k[v140 + 3];
      ++v140;
    }
    while (v140 != 3);
    *(double *)&v138[(8 * v142) | 0x18] = v144;
  }
  id v145 = v137;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v153);
  if (v90) {
    operator delete(v90);
  }
  if (__p)
  {
    int v161 = (char *)__p;
    operator delete(__p);
  }
  if (v150) {
    operator delete(v150);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v163);

  return v145;
}

void sub_2FEDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a17);
  if (v35) {
    operator delete(v35);
  }
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a35);

  _Unwind_Resume(a1);
}

char *std::unordered_map<unsigned int,GRCSplitBlitTimeData::CalculateBlitEncoderTime(NSArray<NSData *> *,NSData *)::TimeInfo *,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,GRCSplitBlitTimeData::CalculateBlitEncoderTime(NSArray<NSData *> *,NSData *)::TimeInfo *>>>::operator[](float *a1, unsigned int a2)
{
  unint64_t v5 = a2;
  unint64_t v6 = *((void *)a1 + 1);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v2 = a2;
      if (v6 <= a2) {
        unint64_t v2 = a2 % v6;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & a2;
    }
    uint64_t v8 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == a2)
          {
            if (*((_DWORD *)v9 + 4) == a2) {
              return (char *)(v9 + 3);
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v2) {
              break;
            }
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = 0;
  v9[1] = v5;
  *((_DWORD *)v9 + 4) = a2;
  v9[3] = 0;
  float v11 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v12 = a1[8];
  if (v6 && (float)(v12 * (float)v6) >= v11)
  {
    unint64_t v5 = v2;
    goto LABEL_64;
  }
  BOOL v13 = (v6 & (v6 - 1)) == 0;
  if (v6 < 3) {
    BOOL v13 = 0;
  }
  unint64_t v14 = (2 * v6) | !v13;
  unint64_t v15 = vcvtps_u32_f32(v11 / v12);
  if (v14 <= v15) {
    int8x8_t prime = (int8x8_t)v15;
  }
  else {
    int8x8_t prime = (int8x8_t)v14;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v6 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v6)
  {
    if (*(void *)&prime >= v6) {
      goto LABEL_60;
    }
    unint64_t v23 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v6 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      unint64_t v23 = std::__next_prime(v23);
    }
    else
    {
      uint64_t v25 = 1 << -(char)__clz(v23 - 1);
      if (v23 >= 2) {
        unint64_t v23 = v25;
      }
    }
    if (*(void *)&prime <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      id v32 = *(void **)a1;
      *(void *)a1 = 0;
      if (v32) {
        operator delete(v32);
      }
      unint64_t v6 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  float v17 = operator new(8 * *(void *)&prime);
  BOOL v18 = *(void **)a1;
  *(void *)a1 = v17;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v19++) = 0;
  while (*(void *)&prime != v19);
  unint64_t v20 = (void *)*((void *)a1 + 2);
  if (v20)
  {
    unint64_t v21 = v20[1];
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(prime);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&prime) {
        v21 %= *(void *)&prime;
      }
    }
    else
    {
      v21 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v21) = a1 + 4;
    unint64_t v26 = (void *)*v20;
    if (*v20)
    {
      do
      {
        unint64_t v27 = v26[1];
        if (v22.u32[0] > 1uLL)
        {
          if (v27 >= *(void *)&prime) {
            v27 %= *(void *)&prime;
          }
        }
        else
        {
          v27 &= *(void *)&prime - 1;
        }
        if (v27 != v21)
        {
          if (!*(void *)(*(void *)a1 + 8 * v27))
          {
            *(void *)(*(void *)a1 + 8 * v27) = v20;
            goto LABEL_56;
          }
          *unint64_t v20 = *v26;
          *unint64_t v26 = **(void **)(*(void *)a1 + 8 * v27);
          **(void **)(*(void *)a1 + 8 * v27) = v26;
          unint64_t v26 = v20;
        }
        unint64_t v27 = v21;
LABEL_56:
        unint64_t v20 = v26;
        unint64_t v26 = (void *)*v26;
        unint64_t v21 = v27;
      }
      while (v26);
    }
  }
  unint64_t v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5) {
      v5 %= v6;
    }
  }
  else
  {
    unint64_t v5 = (v6 - 1) & v5;
  }
LABEL_64:
  id v28 = *(void **)a1;
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v5);
  if (v29)
  {
    *uint64_t v9 = *v29;
LABEL_72:
    *uint64_t v29 = v9;
    goto LABEL_73;
  }
  *uint64_t v9 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v9;
  v28[v5] = a1 + 4;
  if (*v9)
  {
    unint64_t v30 = *(void *)(*v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v30 >= v6) {
        v30 %= v6;
      }
    }
    else
    {
      v30 &= v6 - 1;
    }
    uint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return (char *)(v9 + 3);
}

void sub_2FF2A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

id GRCSplitBlitTimeData::BlitFrameEncoderTimeData(id *this, NSString *a2, NSString *a3)
{
  unint64_t v5 = a3;
  unint64_t v6 = [*this objectForKeyedSubscript:a2];
  if (v6)
  {
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    unint64_t v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, v8, v9, objc_opt_class(), 0);
    id v38 = 0;
    float v11 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v10 fromData:v6 error:&v38];
    id v12 = v38;

    BOOL v13 = [*this objectForKeyedSubscript:v5];
    if ([v11 count] && objc_msgSend(v13, "length"))
    {
      id v14 = v13;
      id v15 = [v14 bytes];
      uint64_t v29 = 0;
      unint64_t v30 = &v29;
      uint64_t v31 = 0x4812000000;
      id v32 = __Block_byref_object_copy__270;
      unint64_t v33 = __Block_byref_object_dispose__271;
      unint64_t v34 = &unk_4E231D;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      long long __p = 0;
      std::vector<std::pair<unsigned long long,unsigned long long>>::reserve(&__p, (unint64_t)[v14 length] >> 3);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      void v28[2] = ___ZN20GRCSplitBlitTimeData24BlitFrameEncoderTimeDataEP8NSStringS1__block_invoke;
      void v28[3] = &unk_746AC8;
      void v28[4] = &v29;
      v28[5] = v15;
      [v11 enumerateKeysAndObjectsUsingBlock:v28];
      unint64_t v16 = v30[6];
      float v17 = (unint64_t *)v30[7];
      unint64_t v18 = 126 - 2 * __clz((uint64_t)((uint64_t)v17 - v16) >> 4);
      if (v17 == (unint64_t *)v16) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v18;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>(v16, v17, v19, 1);
      id v20 = +[NSMutableData dataWithLength:2 * (v30[7] - v30[6])];
      unint64_t v21 = (char *)[v20 mutableBytes];
      uint64_t v22 = v30[6];
      if (v30[7] != v22)
      {
        unint64_t v23 = 0;
        uint8x8_t v24 = (double *)(v21 + 24);
        uint64_t v25 = 8;
        do
        {
          double v26 = (double)*(unint64_t *)(v22 + v25);
          *(v24 - 2) = v26;
          *uint8x8_t v24 = v26;
          v24 += 4;
          ++v23;
          uint64_t v22 = v30[6];
          v25 += 16;
        }
        while (v23 < (v30[7] - v22) >> 4);
      }
      _Block_object_dispose(&v29, 8);
      if (__p)
      {
        unint64_t v36 = __p;
        operator delete(__p);
      }
    }
    else
    {
      id v20 = 0;
    }
  }
  else
  {
    id v20 = 0;
  }

  return v20;
}

void sub_2FF598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__270(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__271(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN20GRCSplitBlitTimeData24BlitFrameEncoderTimeDataEP8NSStringS1__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v27 = a2;
  id v5 = a3;
  unsigned int v6 = [v27 unsignedIntValue];
  uint64_t v7 = [v5 objectAtIndexedSubscript:0];
  unsigned int v8 = [v7 unsignedIntValue];

  uint64_t v9 = [v5 objectAtIndexedSubscript:2];
  unsigned int v10 = [v9 unsignedIntValue];

  if (v10 == 2)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8 * (v8 + 1)) - *(void *)(*(void *)(a1 + 40) + 8 * v8);
    id v12 = *(void **)(*(void *)(a1 + 32) + 8);
    id v14 = (void *)v12[7];
    unint64_t v13 = v12[8];
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v16 = v12[6];
      uint64_t v17 = ((uint64_t)v14 - v16) >> 4;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60) {
        abort();
      }
      uint64_t v19 = v13 - v16;
      if (v19 >> 3 > v18) {
        unint64_t v18 = v19 >> 3;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      unint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v20);
      uint64_t v22 = &v21[16 * v17];
      uint8x8_t v24 = &v21[16 * v23];
      *(void *)uint64_t v22 = v6;
      *((void *)v22 + 1) = v11;
      id v15 = v22 + 16;
      double v26 = (char *)v12[6];
      uint64_t v25 = (char *)v12[7];
      if (v25 != v26)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v25 - 1);
          v22 -= 16;
          v25 -= 16;
        }
        while (v25 != v26);
        uint64_t v25 = (char *)v12[6];
      }
      v12[6] = v22;
      v12[7] = v15;
      v12[8] = v24;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      void *v14 = v6;
      v14[1] = v11;
      id v15 = v14 + 2;
    }
    v12[7] = v15;
  }
}

void sub_2FF7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  id v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (void *)*((void *)v4 - 3);
        v4 -= 24;
        unsigned int v6 = v7;
        if (v7) {
          operator delete(v6);
        }
      }
      while (v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZN21GRCDerivedCounterData18RawCounterInfoListEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = a3;
  [*(id *)(a1 + 32) addObject:a2];
  id v5 = [v11 objectForKeyedSubscript:@"subtype"];
  unsigned int v6 = v5;
  if (v5 && [v5 isEqualToString:@"Normalize"])
  {
    uint64_t v7 = *(void **)(a1 + 40);
    unsigned int v8 = [v11 objectForKeyedSubscript:@"counters"];
    [v7 addObjectsFromArray:v8];

    uint64_t v9 = *(void **)(a1 + 48);
    unsigned int v10 = [v11 objectForKeyedSubscript:@"counters"];
    [v9 addObjectsFromArray:v10];
  }
}

void sub_2FF974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<RawCounterInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  id v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
      }
      while (v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<RawCounterInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZN21GRCDerivedCounterData32GenerateCodeForCounterProcessingEv_block_invoke(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)a1[4];
  id v11 = v4;
  unsigned int v6 = [v4 objectForKeyedSubscript:@"name"];
  [v5 addObject:v6];

  uint64_t v7 = (void *)a1[5];
  unsigned int v8 = [v11 objectForKeyedSubscript:@"description"];
  [v7 addObject:v8];

  uint64_t v9 = (void *)a1[6];
  unsigned int v10 = [v11 objectForKeyedSubscript:@"type"];
  [v9 addObject:v10];
}

void sub_2FFB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id GRCDerivedCounterData::ProcessDerivedCounterData(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (*(_DWORD *)(a1 + 148)) {
    operator new();
  }

  return 0;
}

void sub_302900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ***std::unique_ptr<FrameRawCounterData>::reset[abi:nn180100](void ***result, void **a2)
{
  unint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<std::array<std::vector<std::vector<unsigned long long>>,3ul>>::__destroy_vector::operator()[abi:nn180100](&v3);
    operator delete();
  }
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a2 - 40;
    uint64_t v125 = a2 - 120;
    uint64_t v126 = a2 - 80;
    unint64_t v11 = a1;
    unint64_t v127 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return *(double *)&v40;
              case 2uLL:
                if (KickBoundarySample::operator<(v10, a1))
                {
                  long long v56 = *(_OWORD *)a1;
                  long long v57 = *(_OWORD *)(a1 + 16);
                  uint64_t v133 = *(void *)(a1 + 32);
                  long long v131 = v56;
                  long long v132 = v57;
                  long long v58 = *(_OWORD *)v10;
                  long long v59 = *(_OWORD *)(v10 + 16);
                  *(void *)(a1 + 32) = *(void *)(v10 + 32);
                  *(_OWORD *)a1 = v58;
                  *(_OWORD *)(a1 + 16) = v59;
                  long long v40 = v131;
                  long long v60 = v132;
                  *(void *)(v10 + 32) = v133;
                  *(_OWORD *)uint64_t v10 = v40;
                  *(_OWORD *)(v10 + 16) = v60;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a1 + 40, v10);
                break;
              case 4uLL:
                *(void *)&long long v40 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a1 + 40, a1 + 80, v10).n128_u64[0];
                break;
              case 5uLL:
                *(void *)&long long v40 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a1 + 40, a1 + 80, a1 + 120, v10).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return *(double *)&v40;
          }
          if (v12 <= 959)
          {
            uint64_t v61 = a1 + 40;
            BOOL v63 = a1 == a2 || v61 == a2;
            if (a4)
            {
              if (!v63)
              {
                uint64_t v64 = 0;
                uint64_t v65 = a1;
                do
                {
                  uint64_t v66 = v65;
                  uint64_t v65 = v61;
                  if (KickBoundarySample::operator<(v61, v66))
                  {
                    long long v67 = *(_OWORD *)v65;
                    long long v68 = *(_OWORD *)(v65 + 16);
                    uint64_t v133 = *(void *)(v65 + 32);
                    long long v131 = v67;
                    long long v132 = v68;
                    uint64_t v69 = v64;
                    while (1)
                    {
                      uint64_t v70 = a1 + v69;
                      long long v71 = *(_OWORD *)(a1 + v69 + 16);
                      *(_OWORD *)(v70 + 40) = *(_OWORD *)(a1 + v69);
                      *(_OWORD *)(v70 + 56) = v71;
                      *(void *)(v70 + 72) = *(void *)(a1 + v69 + 32);
                      if (!v69) {
                        break;
                      }
                      v69 -= 40;
                      if (!KickBoundarySample::operator<((uint64_t)&v131, v69 + a1))
                      {
                        uint64_t v72 = a1 + v69 + 40;
                        goto LABEL_79;
                      }
                    }
                    uint64_t v72 = a1;
LABEL_79:
                    long long v40 = v131;
                    long long v73 = v132;
                    *(void *)(v72 + 32) = v133;
                    *(_OWORD *)uint64_t v72 = v40;
                    *(_OWORD *)(v72 + 16) = v73;
                  }
                  uint64_t v61 = v65 + 40;
                  v64 += 40;
                }
                while (v65 + 40 != a2);
              }
            }
            else if (!v63)
            {
              do
              {
                uint64_t v116 = a1;
                a1 = v61;
                if (KickBoundarySample::operator<(v61, v116))
                {
                  long long v117 = *(_OWORD *)a1;
                  long long v118 = *(_OWORD *)(a1 + 16);
                  uint64_t v133 = *(void *)(a1 + 32);
                  long long v131 = v117;
                  long long v132 = v118;
                  unint64_t v119 = a1;
                  do
                  {
                    unint64_t v120 = v119 - 40;
                    long long v121 = *(_OWORD *)(v119 - 24);
                    *(_OWORD *)unint64_t v119 = *(_OWORD *)(v119 - 40);
                    *(_OWORD *)(v119 + 16) = v121;
                    *(void *)(v119 + 32) = *(void *)(v119 - 8);
                    BOOL v122 = KickBoundarySample::operator<((uint64_t)&v131, v119 - 80);
                    unint64_t v119 = v120;
                  }
                  while (v122);
                  long long v40 = v131;
                  long long v123 = v132;
                  *(void *)(v120 + 32) = v133;
                  *(_OWORD *)unint64_t v120 = v40;
                  *(_OWORD *)(v120 + 16) = v123;
                }
                uint64_t v61 = a1 + 40;
              }
              while (a1 + 40 != a2);
            }
            return *(double *)&v40;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v74 = (v13 - 2) >> 1;
              int64_t v75 = v74;
              do
              {
                int64_t v76 = v75;
                if (v74 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  uint64_t v78 = a1 + 40 * v77;
                  if (2 * v75 + 2 < (uint64_t)v13 && KickBoundarySample::operator<(a1 + 40 * v77, v78 + 40))
                  {
                    v78 += 40;
                    uint64_t v77 = 2 * v76 + 2;
                  }
                  uint64_t v79 = a1 + 40 * v76;
                  if (!KickBoundarySample::operator<(v78, v79))
                  {
                    long long v80 = *(_OWORD *)v79;
                    long long v81 = *(_OWORD *)(v79 + 16);
                    uint64_t v133 = *(void *)(v79 + 32);
                    long long v131 = v80;
                    long long v132 = v81;
                    do
                    {
                      uint64_t v82 = v78;
                      long long v83 = *(_OWORD *)v78;
                      long long v84 = *(_OWORD *)(v78 + 16);
                      *(void *)(v79 + 32) = *(void *)(v78 + 32);
                      *(_OWORD *)uint64_t v79 = v83;
                      *(_OWORD *)(v79 + 16) = v84;
                      if (v74 < v77) {
                        break;
                      }
                      uint64_t v85 = (2 * v77) | 1;
                      uint64_t v78 = a1 + 40 * v85;
                      uint64_t v86 = 2 * v77 + 2;
                      if (v86 < (uint64_t)v13 && KickBoundarySample::operator<(a1 + 40 * v85, v78 + 40))
                      {
                        v78 += 40;
                        uint64_t v85 = v86;
                      }
                      uint64_t v79 = v82;
                      uint64_t v77 = v85;
                    }
                    while (!KickBoundarySample::operator<(v78, (uint64_t)&v131));
                    long long v87 = v131;
                    long long v88 = v132;
                    *(void *)(v82 + 32) = v133;
                    *(_OWORD *)uint64_t v82 = v87;
                    *(_OWORD *)(v82 + 16) = v88;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              int64_t v89 = v12 / 0x28uLL;
              unint64_t v90 = v127;
              do
              {
                uint64_t v91 = 0;
                long long v92 = *(_OWORD *)a1;
                long long v93 = *(_OWORD *)(a1 + 16);
                uint64_t v130 = *(void *)(a1 + 32);
                long long v128 = v92;
                long long v129 = v93;
                uint64_t v94 = v89 - 2;
                if (v89 < 2) {
                  uint64_t v94 = v89 - 1;
                }
                uint64_t v95 = v94 >> 1;
                unint64_t v96 = a1;
                do
                {
                  uint64_t v97 = v96 + 40 * v91 + 40;
                  uint64_t v98 = (2 * v91) | 1;
                  uint64_t v99 = 2 * v91 + 2;
                  if (v99 < v89 && KickBoundarySample::operator<(v96 + 40 * v91 + 40, v96 + 40 * v91 + 80))
                  {
                    v97 += 40;
                    uint64_t v98 = v99;
                  }
                  long long v100 = *(_OWORD *)v97;
                  long long v101 = *(_OWORD *)(v97 + 16);
                  *(void *)(v96 + 32) = *(void *)(v97 + 32);
                  *(_OWORD *)unint64_t v96 = v100;
                  *(_OWORD *)(v96 + 16) = v101;
                  unint64_t v96 = v97;
                  uint64_t v91 = v98;
                }
                while (v98 <= v95);
                v90 -= 40;
                if (v97 == v90)
                {
                  long long v40 = v128;
                  long long v114 = v129;
                  *(void *)(v97 + 32) = v130;
                  *(_OWORD *)uint64_t v97 = v40;
                  *(_OWORD *)(v97 + 16) = v114;
                }
                else
                {
                  long long v102 = *(_OWORD *)v90;
                  long long v103 = *(_OWORD *)(v90 + 16);
                  *(void *)(v97 + 32) = *(void *)(v90 + 32);
                  *(_OWORD *)uint64_t v97 = v102;
                  *(_OWORD *)(v97 + 16) = v103;
                  long long v40 = v128;
                  long long v104 = v129;
                  *(void *)(v90 + 32) = v130;
                  *(_OWORD *)unint64_t v90 = v40;
                  *(_OWORD *)(v90 + 16) = v104;
                  uint64_t v105 = v97 - a1 + 40;
                  if (v105 >= 41)
                  {
                    unint64_t v106 = (unint64_t)(-2 - 0x3333333333333333 * (v105 >> 3)) >> 1;
                    uint64_t v107 = a1 + 40 * v106;
                    if (KickBoundarySample::operator<(v107, v97))
                    {
                      long long v108 = *(_OWORD *)v97;
                      long long v109 = *(_OWORD *)(v97 + 16);
                      uint64_t v133 = *(void *)(v97 + 32);
                      long long v131 = v108;
                      long long v132 = v109;
                      do
                      {
                        uint64_t v110 = v107;
                        long long v111 = *(_OWORD *)v107;
                        long long v112 = *(_OWORD *)(v107 + 16);
                        *(void *)(v97 + 32) = *(void *)(v107 + 32);
                        *(_OWORD *)uint64_t v97 = v111;
                        *(_OWORD *)(v97 + 16) = v112;
                        if (!v106) {
                          break;
                        }
                        unint64_t v106 = (v106 - 1) >> 1;
                        uint64_t v107 = a1 + 40 * v106;
                        uint64_t v97 = v110;
                      }
                      while (KickBoundarySample::operator<(v107, (uint64_t)&v131));
                      long long v40 = v131;
                      long long v113 = v132;
                      *(void *)(v110 + 32) = v133;
                      *(_OWORD *)uint64_t v110 = v40;
                      *(_OWORD *)(v110 + 16) = v113;
                    }
                  }
                }
              }
              while (v89-- > 2);
            }
            return *(double *)&v40;
          }
          uint64_t v14 = a1 + 40 * (v13 >> 1);
          if ((unint64_t)v12 >= 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a1 + 40 * (v13 >> 1), v10);
            uint64_t v15 = 5 * (v13 >> 1);
            uint64_t v16 = a1 + 40 * (v13 >> 1) - 40;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1 + 40, v16, v126);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1 + 80, a1 + 40 + 8 * v15, v125);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v16, v14, a1 + 40 + 8 * v15);
            long long v17 = *(_OWORD *)a1;
            long long v18 = *(_OWORD *)(a1 + 16);
            uint64_t v133 = *(void *)(a1 + 32);
            long long v131 = v17;
            long long v132 = v18;
            long long v19 = *(_OWORD *)v14;
            long long v20 = *(_OWORD *)(v14 + 16);
            *(void *)(a1 + 32) = *(void *)(v14 + 32);
            *(_OWORD *)a1 = v19;
            *(_OWORD *)(a1 + 16) = v20;
            long long v21 = v131;
            long long v22 = v132;
            *(void *)(v14 + 32) = v133;
            *(_OWORD *)uint64_t v14 = v21;
            *(_OWORD *)(v14 + 16) = v22;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1 + 40 * (v13 >> 1), a1, v10);
          }
          --a3;
          a2 = v127;
          if ((a4 & 1) != 0 || KickBoundarySample::operator<(a1 - 40, a1)) {
            break;
          }
          long long v41 = *(_OWORD *)a1;
          long long v42 = *(_OWORD *)(a1 + 16);
          uint64_t v130 = *(void *)(a1 + 32);
          long long v128 = v41;
          long long v129 = v42;
          if (KickBoundarySample::operator<((uint64_t)&v128, v10))
          {
            unint64_t v11 = a1;
            do
              v11 += 40;
            while (!KickBoundarySample::operator<((uint64_t)&v128, v11));
          }
          else
          {
            unint64_t v43 = a1 + 40;
            do
            {
              unint64_t v11 = v43;
              if (v43 >= v127) {
                break;
              }
              BOOL v44 = KickBoundarySample::operator<((uint64_t)&v128, v43);
              unint64_t v43 = v11 + 40;
            }
            while (!v44);
          }
          unint64_t v45 = v127;
          if (v11 < v127)
          {
            unint64_t v45 = v127;
            do
              v45 -= 40;
            while (KickBoundarySample::operator<((uint64_t)&v128, v45));
          }
          while (v11 < v45)
          {
            long long v46 = *(_OWORD *)v11;
            long long v47 = *(_OWORD *)(v11 + 16);
            uint64_t v133 = *(void *)(v11 + 32);
            long long v131 = v46;
            long long v132 = v47;
            long long v48 = *(_OWORD *)v45;
            long long v49 = *(_OWORD *)(v45 + 16);
            *(void *)(v11 + 32) = *(void *)(v45 + 32);
            *(_OWORD *)unint64_t v11 = v48;
            *(_OWORD *)(v11 + 16) = v49;
            long long v50 = v131;
            long long v51 = v132;
            *(void *)(v45 + 32) = v133;
            *(_OWORD *)unint64_t v45 = v50;
            *(_OWORD *)(v45 + 16) = v51;
            do
              v11 += 40;
            while (!KickBoundarySample::operator<((uint64_t)&v128, v11));
            do
              v45 -= 40;
            while (KickBoundarySample::operator<((uint64_t)&v128, v45));
          }
          unint64_t v52 = (long long *)(v11 - 40);
          BOOL v4 = v11 - 40 >= a1;
          BOOL v5 = v11 - 40 == a1;
          if (v11 - 40 != a1)
          {
            long long v53 = *v52;
            long long v54 = *(_OWORD *)(v11 - 24);
            *(void *)(a1 + 32) = *(void *)(v11 - 8);
            *(_OWORD *)a1 = v53;
            *(_OWORD *)(a1 + 16) = v54;
          }
          a4 = 0;
          long long v40 = v128;
          long long v55 = v129;
          *(void *)(v11 - 8) = v130;
          long long *v52 = v40;
          *(_OWORD *)(v11 - 24) = v55;
        }
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        uint64_t v130 = *(void *)(a1 + 32);
        long long v128 = v23;
        long long v129 = v24;
        unint64_t v25 = a1;
        do
        {
          uint64_t v26 = v25;
          v25 += 40;
        }
        while (KickBoundarySample::operator<(v25, (uint64_t)&v128));
        unint64_t v27 = v127;
        if (v26 == a1)
        {
          unint64_t v27 = v127;
          do
          {
            if (v25 >= v27) {
              break;
            }
            v27 -= 40;
          }
          while (!KickBoundarySample::operator<(v27, (uint64_t)&v128));
        }
        else
        {
          do
            v27 -= 40;
          while (!KickBoundarySample::operator<(v27, (uint64_t)&v128));
        }
        if (v25 < v27)
        {
          unint64_t v28 = v25;
          unint64_t v29 = v27;
          do
          {
            long long v31 = *(_OWORD *)(v28 + 16);
            long long v131 = *(_OWORD *)v28;
            long long v30 = v131;
            long long v132 = v31;
            uint64_t v133 = *(void *)(v28 + 32);
            uint64_t v32 = v133;
            long long v34 = *(_OWORD *)v29;
            long long v33 = *(_OWORD *)(v29 + 16);
            *(void *)(v28 + 32) = *(void *)(v29 + 32);
            *(_OWORD *)unint64_t v28 = v34;
            *(_OWORD *)(v28 + 16) = v33;
            *(void *)(v29 + 32) = v32;
            *(_OWORD *)unint64_t v29 = v30;
            *(_OWORD *)(v29 + 16) = v31;
            do
            {
              uint64_t v26 = v28;
              v28 += 40;
            }
            while (KickBoundarySample::operator<(v28, (uint64_t)&v128));
            do
              v29 -= 40;
            while (!KickBoundarySample::operator<(v29, (uint64_t)&v128));
          }
          while (v28 < v29);
        }
        if (v26 != a1)
        {
          long long v35 = *(_OWORD *)v26;
          long long v36 = *(_OWORD *)(v26 + 16);
          *(void *)(a1 + 32) = *(void *)(v26 + 32);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        long long v37 = v128;
        long long v38 = v129;
        *(void *)(v26 + 32) = v130;
        *(_OWORD *)uint64_t v26 = v37;
        *(_OWORD *)(v26 + 16) = v38;
        if (v25 >= v27) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *,false>(a1, v26, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v26 + 40;
      }
      BOOL v39 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, v26);
      unint64_t v11 = v26 + 40;
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v26 + 40, v127))
      {
        break;
      }
      if (!v39) {
        goto LABEL_30;
      }
    }
    a2 = v26;
    if (!v39) {
      continue;
    }
    return *(double *)&v40;
  }
}

void *BufferView<EncoderSampleIndexData>::BufferView(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = [v3 bytes];
  unint64_t v4 = (unint64_t)[v3 length];
  a1[1] = *a1 + 16 * (v4 >> 4);
  a1[2] = v4 >> 4;

  return a1;
}

void sub_303888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<GPUEncoderInfo>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      abort();
    }
    uint64_t v3 = 3 * a2;
    uint64_t v4 = 48 * a2;
    BOOL v5 = (char *)operator new(48 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * v3];
    size_t v6 = 48 * ((v4 - 48) / 0x30uLL) + 48;
    bzero(v5, v6);
    a1[1] = &v5[v6];
  }
  return a1;
}

void ___ZN21GRCDerivedCounterData25ProcessDerivedCounterDataEP14NSMutableArrayIPS0_IP8NSNumberEE_block_invoke(id a1, NSString *a2)
{
}

BOOL KickBoundarySample::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unsigned int v3 = *(_DWORD *)(a2 + 32);
  BOOL v4 = v2 >= v3;
  if (v2 == v3)
  {
    BOOL v4 = *(void *)a1 >= *(void *)a2;
    if (*(void *)a1 == *(void *)a2)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      unint64_t v6 = *(void *)(a2 + 8);
      BOOL v4 = v5 >= v6;
      if (v5 == v6)
      {
        unint64_t v7 = *(void *)(a1 + 16);
        unint64_t v8 = *(void *)(a2 + 16);
        BOOL v4 = v7 >= v8;
        if (v7 == v8)
        {
          unint64_t v9 = *(void *)(a1 + 24);
          unint64_t v10 = *(void *)(a2 + 24);
          BOOL v4 = v9 >= v10;
          if (v9 == v10) {
            return *(_DWORD *)(a1 + 36) < *(_DWORD *)(a2 + 36);
          }
        }
      }
    }
  }
  return !v4;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = KickBoundarySample::operator<(a2, a1);
  BOOL result = KickBoundarySample::operator<(a3, a2);
  if (v6)
  {
    if (result)
    {
      long long v8 = *(_OWORD *)a1;
      long long v9 = *(_OWORD *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a3 + 32);
      long long v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v12;
      *(void *)(a1 + 32) = v11;
    }
    else
    {
      long long v23 = *(_OWORD *)a1;
      long long v24 = *(_OWORD *)(a1 + 16);
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = *(void *)(a2 + 32);
      long long v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(void *)(a1 + 32) = v26;
      *(void *)(a2 + 32) = v25;
      *(_OWORD *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v24;
      BOOL result = KickBoundarySample::operator<(a3, a2);
      if (!result) {
        return result;
      }
      long long v8 = *(_OWORD *)a2;
      long long v9 = *(_OWORD *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v28 = *(void *)(a3 + 32);
      long long v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v29;
      *(void *)(a2 + 32) = v28;
    }
    *(void *)(a3 + 32) = v10;
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
  }
  else if (result)
  {
    long long v13 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)(a2 + 16);
    uint64_t v15 = *(void *)(a2 + 32);
    uint64_t v16 = *(void *)(a3 + 32);
    long long v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v17;
    *(void *)(a2 + 32) = v16;
    *(void *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 16) = v14;
    BOOL result = KickBoundarySample::operator<(a2, a1);
    if (result)
    {
      long long v18 = *(_OWORD *)a1;
      long long v19 = *(_OWORD *)(a1 + 16);
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a2 + 32);
      long long v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v22;
      *(void *)(a1 + 32) = v21;
      *(void *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a2, a3);
  if (KickBoundarySample::operator<(a4, a3))
  {
    long long v9 = *(_OWORD *)a3;
    long long v10 = *(_OWORD *)(a3 + 16);
    uint64_t v11 = *(void *)(a3 + 32);
    uint64_t v12 = *(void *)(a4 + 32);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v12;
    *(void *)(a4 + 32) = v11;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = v10;
    if (KickBoundarySample::operator<(a3, a2))
    {
      __n128 v14 = *(__n128 *)a2;
      long long v15 = *(_OWORD *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 32);
      uint64_t v17 = *(void *)(a3 + 32);
      long long v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v18;
      *(void *)(a2 + 32) = v17;
      *(void *)(a3 + 32) = v16;
      *(__n128 *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v15;
      if (KickBoundarySample::operator<(a2, a1))
      {
        __n128 result = *(__n128 *)a1;
        long long v19 = *(_OWORD *)(a1 + 16);
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = *(void *)(a2 + 32);
        long long v22 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v22;
        *(void *)(a1 + 32) = v21;
        *(void *)(a2 + 32) = v20;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v19;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a2, a3, a4);
  if (KickBoundarySample::operator<(a5, a4))
  {
    long long v11 = *(_OWORD *)a4;
    long long v12 = *(_OWORD *)(a4 + 16);
    uint64_t v13 = *(void *)(a4 + 32);
    uint64_t v14 = *(void *)(a5 + 32);
    long long v15 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v15;
    *(void *)(a4 + 32) = v14;
    *(void *)(a5 + 32) = v13;
    *(_OWORD *)a5 = v11;
    *(_OWORD *)(a5 + 16) = v12;
    if (KickBoundarySample::operator<(a4, a3))
    {
      long long v16 = *(_OWORD *)a3;
      long long v17 = *(_OWORD *)(a3 + 16);
      uint64_t v18 = *(void *)(a3 + 32);
      uint64_t v19 = *(void *)(a4 + 32);
      long long v20 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v20;
      *(void *)(a3 + 32) = v19;
      *(void *)(a4 + 32) = v18;
      *(_OWORD *)a4 = v16;
      *(_OWORD *)(a4 + 16) = v17;
      if (KickBoundarySample::operator<(a3, a2))
      {
        __n128 v21 = *(__n128 *)a2;
        long long v22 = *(_OWORD *)(a2 + 16);
        uint64_t v23 = *(void *)(a2 + 32);
        uint64_t v24 = *(void *)(a3 + 32);
        long long v25 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v25;
        *(void *)(a2 + 32) = v24;
        *(void *)(a3 + 32) = v23;
        *(__n128 *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v22;
        if (KickBoundarySample::operator<(a2, a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v26 = *(_OWORD *)(a1 + 16);
          uint64_t v27 = *(void *)(a1 + 32);
          uint64_t v28 = *(void *)(a2 + 32);
          long long v29 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v29;
          *(void *)(a1 + 32) = v28;
          *(void *)(a2 + 32) = v27;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 40;
      if (!KickBoundarySample::operator<(a2 - 40, a1)) {
        return 1;
      }
      long long v7 = *(_OWORD *)a1;
      long long v8 = *(_OWORD *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(v6 + 32);
      long long v11 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 16) = v11;
      *(void *)(a1 + 32) = v10;
      *(void *)(v6 + 32) = v9;
      BOOL result = 1;
      *(_OWORD *)uint64_t v6 = v7;
      *(_OWORD *)(v6 + 16) = v8;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a1 + 40, a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v12 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, a1 + 40, a1 + 80);
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (KickBoundarySample::operator<(v13, v12))
    {
      long long v16 = *(_OWORD *)(v13 + 16);
      long long v22 = *(_OWORD *)v13;
      long long v23 = v16;
      uint64_t v24 = *(void *)(v13 + 32);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (!KickBoundarySample::operator<((uint64_t)&v22, v18 + 40))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      long long v21 = v23;
      *(_OWORD *)uint64_t v20 = v22;
      *(_OWORD *)(v20 + 16) = v21;
      *(void *)(v20 + 32) = v24;
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

void std::vector<std::array<std::vector<std::vector<unsigned long long>>,3ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  id v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4;
        v4 -= 72;
        for (uint64_t i = -24; i != -96; i -= 24)
        {
          long long v8 = (void **)&v6[i];
          std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v8);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void GRCCurrentFrameStream::GRCCurrentFrameStream(GRCCurrentFrameStream *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 350) = 0u;
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = *(void **)this;
  *(void *)this = v3;
}

void sub_304050(_Unwind_Exception *a1)
{
  long long v8 = *(void **)(v1 + 256);
  if (v8)
  {
    *(void *)(v1 + 264) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(v1 + 232);
  if (v9)
  {
    *(void *)(v1 + 240) = v9;
    operator delete(v9);
  }
  if (*v6) {
    operator delete(*v6);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 8);

  _Unwind_Resume(a1);
}

id **std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100](id **result, id *a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {

    operator delete();
  }
  return result;
}

void MTLGRCStreamingSampleHelper::MTLGRCStreamingSampleHelper(uint64_t a1, void *a2)
{
}

void sub_304390()
{
}

void MTLGRCStreamingSampleHelperImpl::ProcessStreamedData(MTLGRCStreamingSampleHelperImpl *this, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v364 = a2;
  uint64_t v353 = this;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 140);
  if (v4) {
    goto LABEL_319;
  }
  os_signpost_id_t v5 = os_signpost_id_generate((os_log_t)g_signpostLog);
  uint64_t v6 = g_signpostLog;
  long long v7 = v6;
  os_signpost_id_t spid = v5;
  unint64_t v351 = v5 - 1;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v6))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&def_1C1270, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "ShaderProfiler-ProcessStreamedDataPayload", (const char *)&unk_4CA5E5, buf, 2u);
  }

  long long v8 = v364;
  uint64_t v9 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Post Processing Frame Marker"];
  BOOL v10 = v9 == 0;

  if (!v10)
  {
    *(unsigned char *)(*((void *)v353 + 1) + 364) = 1;
    long long v11 = g_signpostLog;
    uint64_t v12 = v11;
    if (v351 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v11))
    {
      int v13 = *(_DWORD *)(*((void *)v353 + 1) + 360);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      uint64_t v14 = "bPostProcessingMarkerReceived: %u";
LABEL_237:
      long long v102 = v12;
      os_signpost_id_t v103 = spid;
      uint32_t v104 = 8;
      goto LABEL_238;
    }
    goto LABEL_239;
  }
  int v15 = [(NSDictionary *)v364 objectForKeyedSubscript:@"profileCounters"];
  if (v15)
  {
    BOOL v16 = *((void *)v353 + 4) == 0;

    if (v16)
    {
      id v99 = [(NSDictionary *)v364 copy];
      long long v100 = (void *)*((void *)v353 + 4);
      *((void *)v353 + 4) = v99;

      long long v101 = g_signpostLog;
      uint64_t v12 = v101;
      if (v351 >= 0xFFFFFFFFFFFFFFFELL || !os_signpost_enabled((os_log_t)v101)) {
        goto LABEL_239;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v14 = "profileCounters";
      goto LABEL_92;
    }
  }
  uint64_t v17 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Frame Index"];
  BOOL v18 = v17 == 0;

  if (!v18)
  {
    uint64_t v348 = *((void *)v353 + 1);
    id context = v364;
    long long v19 = [(NSDictionary *)context objectForKeyedSubscript:@"Program Address Buffer"];
    id v20 = [v19 mutableCopy];
    long long v21 = *(void **)(v348 + 304);
    *(void *)(v348 + 304) = v20;

    long long v22 = [(NSDictionary *)context objectForKeyedSubscript:@"Program Address Mappings"];
    id v23 = [v22 mutableCopy];
    uint64_t v24 = *(void **)(v348 + 312);
    *(void *)(v348 + 312) = v23;

    uint64_t v25 = [(NSDictionary *)context objectForKeyedSubscript:@"Frame Consistent Perf Info"];
    long long v26 = *(void **)(v348 + 320);
    *(void *)(v348 + 320) = v25;

    uint64_t v27 = [(NSDictionary *)context objectForKeyedSubscript:@"Restore Timestamps"];
    uint64_t v28 = *(void **)(v348 + 328);
    *(void *)(v348 + 328) = v27;

    uint64_t v29 = [(NSDictionary *)context objectForKeyedSubscript:@"Command Buffer Timestamps"];
    long long v30 = *(void **)(v348 + 336);
    *(void *)(v348 + 336) = v29;

    uint64_t v31 = [(NSDictionary *)context objectForKeyedSubscript:@"PState Info Data"];
    uint64_t v32 = *(void **)(v348 + 344);
    *(void *)(v348 + 344) = v31;

    long long v33 = *(void **)(v348 + 320);
    if (!v33 || !*(void *)(v348 + 344))
    {
LABEL_199:
      uint64_t v172 = [(NSDictionary *)context objectForKeyedSubscript:@"TraceId to BatchId"];
      if (v172)
      {
        uint64_t v173 = objc_opt_class();
        uint64_t v174 = objc_opt_class();
        long long v175 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v173, v174, objc_opt_class(), 0);
        *(void *)&long long v367 = 0;
        long long v176 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v175 fromData:v172 error:&v367];
        id v177 = (id)v367;

        if (v176)
        {
          *(void *)long long buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&long long v381 = ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke;
          *((void *)&v381 + 1) = &__block_descriptor_40_e35_v32__0__NSNumber_8__NSNumber_16_B24l;
          *(void *)&long long v382 = v348;
          [v176 enumerateKeysAndObjectsUsingBlock:buf];
        }
      }
      long long v178 = [(NSDictionary *)context objectForKeyedSubscript:@"TraceId to Coalesced BatchId"];
      if (v178)
      {
        uint64_t v179 = objc_opt_class();
        uint64_t v180 = objc_opt_class();
        uint64_t v181 = objc_opt_class();
        uint64_t v182 = objc_opt_class();
        uint64_t v183 = objc_opt_class();
        uint64_t v184 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v179, v180, v181, v182, v183, objc_opt_class(), 0);
        v378[0] = 0;
        long long v185 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v184 fromData:v178 error:v378];
        id v186 = v378[0];

        v373[0] = _NSConcreteStackBlock;
        v373[1] = 3221225472;
        v373[2] = ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke_2;
        v373[3] = &__block_descriptor_40_e34_v32__0__NSNumber_8__NSArray_16_B24l;
        v373[4] = v348;
        [v185 enumerateKeysAndObjectsUsingBlock:v373];
      }
      id v187 = v364;
      int v188 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Source Sample Marker"];
      *(void *)(*((void *)v353 + 1) + 352) = [v188 unsignedLongLongValue];

      uint64_t v189 = *((void *)v353 + 1);
      long long v349 = v187;
      long long v190 = [(NSDictionary *)v349 objectForKeyedSubscript:@"TraceId to SampleIndex"];
      if (v190)
      {
        __pb = v190;
        uint64_t v191 = objc_opt_class();
        uint64_t v192 = objc_opt_class();
        uint64_t v193 = objc_opt_class();
        uint64_t v194 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v191, v192, v193, objc_opt_class(), 0);
        v378[0] = 0;
        unsigned int v195 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v194 fromData:__pb error:v378];
        id v341 = v378[0];

        id contexta = [(NSDictionary *)v349 objectForKeyedSubscript:@"Frame Encoder Time Data"];
        if ([v195 count] || objc_msgSend(contexta, "length"))
        {
          unint64_t v196 = (unint64_t)[contexta length];
          if (v196)
          {
            if (![*(id *)v189 count])
            {
              uint64_t v198 = objc_opt_new();
              [*(id *)v189 setObject:v198 forKeyedSubscript:&off_759E70];
            }
          }
          if ((unint64_t)[v195 count] | v196)
          {
            if (v196) {
              id v199 = [contexta bytes];
            }
            else {
              id v199 = 0;
            }
            unint64_t v200 = (unint64_t)[contexta length] >> 3;
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&long long v381 = 0x4812000000;
            *((void *)&v381 + 1) = __Block_byref_object_copy__8879;
            *(void *)&long long v382 = __Block_byref_object_dispose__8880;
            *((void *)&v382 + 1) = &unk_4E231D;
            *(void *)&long long v384 = 0;
            long long v383 = 0uLL;
            std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::reserve((void **)&v383, v200);
            unint64_t v201 = *(void *)(v189 + 96);
            if (v201) {
              float v202 = (float)*(unint64_t *)(v189 + 112) / (float)v201;
            }
            else {
              float v202 = 0.0;
            }
            float v203 = fmaxf(v202, 0.3);
            *(float *)(v189 + 120) = v203;
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(v189 + 88, vcvtps_u32_f32((float)v200 / v203));
            *(void *)&long long v367 = _NSConcreteStackBlock;
            *((void *)&v367 + 1) = 3221225472;
            *(void *)&long long v368 = ___ZN21GRCCurrentFrameStream23AddFrameEncoderTimeDataEP12NSDictionary_block_invoke;
            *((void *)&v368 + 1) = &unk_746C58;
            BOOL v372 = v196 != 0;
            id v371 = v199;
            uint64_t v370 = v189;
            id v369 = buf;
            [v195 enumerateKeysAndObjectsUsingBlock:&v367];
            if (v196)
            {
              uint64_t v204 = *(void *)(*(void *)&buf[8] + 48);
              int v205 = *(char **)(*(void *)&buf[8] + 56);
              unint64_t v206 = 126 - 2 * __clz((uint64_t)&v205[-v204] >> 5);
              if (v205 == (char *)v204) {
                uint64_t v207 = 0;
              }
              else {
                uint64_t v207 = v206;
              }
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(v204, v205, v207, 1);
              long long v208 = +[NSMutableData dataWithCapacity:2 * (*(void *)(*(void *)&buf[8] + 56) - *(void *)(*(void *)&buf[8] + 48))];
              uint64_t v209 = *(void **)(*(void *)&buf[8] + 48);
              for (uint64_t i = *(void **)(*(void *)&buf[8] + 56); v209 != i; v209 += 4)
              {
                memset(&v373[3], 0, 40);
                *(_OWORD *)&v373[1] = 0u;
                v373[0] = *(void *)(v189 + 352);
                uint64_t v211 = v209[2];
                v373[1] = *v209;
                v373[3] = v211;
                v373[4] = v209[1];
                v373[5] = v209[3];
                v373[6] = 0;
                [v208 appendBytes:v373 length:64];
              }
              for (unint64_t j = 0; j < (unint64_t)[*(id *)v189 count]; ++j)
              {
                id v213 = *(id *)v189;
                id v214 = +[NSNumber numberWithUnsignedInteger:j];
                uint64_t v215 = [v213 objectForKeyedSubscript:v214];
                uint64_t v216 = [v215 objectForKeyedSubscript:@"EncoderTime"];
                BOOL v217 = v216 == 0;

                if (v217)
                {
                  int v218 = objc_opt_new();
                  id v219 = *(id *)v189;
                  uint64_t v220 = +[NSNumber numberWithUnsignedInteger:j];
                  uint64_t v221 = [v219 objectForKeyedSubscript:v220];
                  [v221 setObject:v218 forKeyedSubscript:@"EncoderTime"];
                }
                id v222 = *(id *)v189;
                id v223 = +[NSNumber numberWithUnsignedInteger:j];
                int64_t v224 = [v222 objectForKeyedSubscript:v223];
                uint64_t v225 = [v224 objectForKeyedSubscript:@"EncoderTime"];
                [v225 addObject:v208];
              }
            }
            _Block_object_dispose(buf, 8);
            if ((void)v383)
            {
              *((void *)&v383 + 1) = v383;
              operator delete((void *)v383);
            }
          }
        }

        long long v190 = __pb;
      }

      unint64_t v226 = [(NSDictionary *)v349 objectForKeyedSubscript:@"Frame Index"];
      *(_DWORD *)(*((void *)v353 + 1) + 360) = [v226 unsignedIntValue];

      *(unsigned char *)(*((void *)v353 + 1) + 365) = 1;
      size_t v227 = g_signpostLog;
      uint64_t v12 = v227;
      if (v351 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v227))
      {
        int v228 = *(_DWORD *)(*((void *)v353 + 1) + 360);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v228;
        uint64_t v14 = "Frame Index: %u";
        goto LABEL_237;
      }
      goto LABEL_239;
    }
    long long v34 = [v33 objectForKeyedSubscript:@"consistent"];
    long long v340 = v34;
    long long v35 = [*(id *)(v348 + 320) objectForKeyedSubscript:@"mapping"];
    if (!v34
      || ([v34 BOOLValue] & 1) != 0
      || ![*(id *)(v348 + 344) count]
      || !v35)
    {
LABEL_198:

      goto LABEL_199;
    }
    id v329 = v35;
    unsigned int v328 = [v35 unsignedIntValue];
    id v337 = [*(id *)(v348 + 344) objectForKeyedSubscript:@"GPU Stats"];
    long long v36 = [v337 bytes];
    id v330 = v337;
    long long v37 = (char *)[v330 bytes];
    long long v38 = &v37[24 * ((unint64_t)[v330 length] / 0x18)];
    int64_t v39 = v38 - v36;
    if (v38 == v36)
    {

LABEL_197:
      id v170 = [*(id *)(v348 + 320) mutableCopy];
      [v170 setObject:&__kCFBooleanTrue forKeyedSubscript:@"consistent"];
      uint64_t v171 = *(void **)(v348 + 320);
      *(void *)(v348 + 320) = v170;

      long long v35 = v329;
      goto LABEL_198;
    }
    unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
    if (v40 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    long long v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v40);
    memmove(v41, v36, v39);
    uint64_t v42 = 0;
    long long v367 = 0u;
    long long v368 = 0u;
    LODWORD(v369) = 1065353216;
    unint64_t v43 = v41;
    uint64_t v331 = v41;
    do
    {
      BOOL v44 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v367, *(void *)&v41[v42 + 8], &v41[v42 + 8]);
      ++*((_DWORD *)v44 + 6);
      v42 += 24;
    }
    while (24 * v40 != v42);
    unint64_t v45 = 0;
    long long v46 = 0;
    long long v47 = 0;
    long long v48 = 0;
    unint64_t v49 = 0;
    v379[1] = -1;
    v379[0] = -1;
    memset(v378, 0, sizeof(v378));
    unint64_t v50 = (uint64_t)(24 * v40) / 24;
    long long v51 = v41 + 40;
    do
    {
      unint64_t v52 = &v43[24 * v49];
      unsigned int v53 = *(_DWORD *)v52;
      uint64_t v54 = (*(_DWORD *)v52 >> 8) & 0x7F;
      if (v54 < 4)
      {
        long long v56 = (char *)*((void *)v52 + 1);
        uint64_t v57 = *(void *)&v43[24 * v49 + 16];
        unint64_t v55 = v49 + 1;
        long long __p = v45;
        if (v49 + 1 < v50)
        {
          long long v58 = &v51[24 * v49];
          while (*((char **)v58 - 1) == v56 && ((*((_DWORD *)v58 - 4) >> 8) & 0x7F) == v54)
          {
            uint64_t v59 = *(void *)v58;
            v58 += 24;
            v57 += v59;
            if (v50 == ++v55)
            {
              unint64_t v55 = v50;
              break;
            }
          }
        }
        long long v60 = (char *)v378[v54];
        uint64_t v61 = &v56[-v57];
        if (&v56[-v57] <= v60) {
          unint64_t v62 = (char *)v378[v54];
        }
        else {
          unint64_t v62 = &v56[-v57];
        }
        int v63 = *((_DWORD *)v379 + v54);
        if (v49 < v55)
        {
          while (v63 != (*(_DWORD *)v52 >> 15))
          {
            ++v49;
            v52 += 24;
            if (v55 == v49) {
              goto LABEL_41;
            }
          }
          uint64_t v64 = *(void *)&v43[24 * v49 + 16];
          uint64_t v65 = &v61[v64];
          uint64_t v66 = &v60[v64];
          if (v66 >= v65) {
            unint64_t v62 = v65;
          }
          else {
            unint64_t v62 = v66;
          }
        }
LABEL_41:
        int v67 = (v53 >> 23);
        if (v67 == v63)
        {
          unint64_t v45 = __p;
        }
        else
        {
          if (v48 >= v47)
          {
            uint64_t v68 = (v48 - __p) >> 4;
            unint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 60) {
              abort();
            }
            if ((v47 - __p) >> 3 > v69) {
              unint64_t v69 = (v47 - __p) >> 3;
            }
            if ((unint64_t)(v47 - __p) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v70 = v69;
            }
            if (v70 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            long long v71 = (char *)operator new(16 * v70);
            uint64_t v72 = &v71[16 * v68];
            *(void *)uint64_t v72 = v62;
            *((_DWORD *)v72 + 2) = v67 | (v54 << 16);
            if (v46 == __p)
            {
              unint64_t v45 = &v71[16 * v68];
            }
            else
            {
              long long v73 = &v71[16 * v68];
              do
              {
                unint64_t v45 = v73 - 16;
                *((_OWORD *)v73 - 1) = *((_OWORD *)v46 - 1);
                v46 -= 16;
                v73 -= 16;
              }
              while (v46 != __p);
            }
            long long v47 = &v71[16 * v70];
            long long v46 = v72 + 16;
            if (__p) {
              operator delete(__p);
            }
            unint64_t v43 = v331;
          }
          else
          {
            *(void *)long long v48 = v62;
            *((_DWORD *)v48 + 2) = v67 | (v54 << 16);
            long long v46 = v48 + 16;
            unint64_t v45 = __p;
          }
          *((_DWORD *)v379 + v54) = v67;
          long long v48 = v46;
        }
        v378[v54] = v56;
      }
      else
      {
        unint64_t v55 = v49 + 1;
      }
      unint64_t v49 = v55;
    }
    while (v55 < v50);
    int64_t v74 = (long long *)[*(id *)(v348 + 336) bytes];
    int64_t v75 = [*(id *)(v348 + 336) bytes];
    unint64_t v76 = (unint64_t)[*(id *)(v348 + 336) length];
    memset(v365, 0, sizeof(v365));
    std::vector<std::pair<unsigned long long,unsigned long long>>::__init_with_size[abi:nn180100]<std::pair<unsigned long long,unsigned long long>*,std::pair<unsigned long long,unsigned long long>*>(v365, v74, (long long *)&v75[v76 & 0xFFFFFFFFFFFFFFF0], (&v75[v76 & 0xFFFFFFFFFFFFFFF0] - (unsigned char *)v74) >> 4);
    uint64_t v77 = (char *)v365[0];
    if (v365[0] == v365[1])
    {
      BOOL v113 = 0;
      long long v34 = v340;
      goto LABEL_190;
    }
    int64_t v78 = (char *)v365[1] - (char *)v365[0];
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>((unint64_t)v365[0], (unint64_t *)v365[1], 126 - 2 * __clz(((char *)v365[1] - (char *)v365[0]) >> 4), 1);
    __pa = v45;
    unint64_t v79 = v46 - v45;
    if (((v46 - v45) & 0xFFFFFFFF0) != 0)
    {
      long long v80 = 0;
      unint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      if (((v79 >> 4) & 0xFFFFFFFE) != 0) {
        uint64_t v84 = (v79 >> 4);
      }
      else {
        uint64_t v84 = 1;
      }
      long long v34 = v340;
      do
      {
        uint64_t v85 = &__pa[16 * v83];
        int v86 = *((_DWORD *)v85 + 2) >> 31;
        if (v81 >= (unint64_t)v82)
        {
          uint64_t v87 = (uint64_t)(v81 - (void)v80) >> 4;
          unint64_t v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 60) {
            abort();
          }
          if ((v82 - (char *)v80) >> 3 > v88) {
            unint64_t v88 = (v82 - (char *)v80) >> 3;
          }
          if ((unint64_t)(v82 - (char *)v80) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v89 = v88;
          }
          unint64_t v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v89);
          long long v92 = &v90[16 * v87];
          *(void *)long long v92 = *(void *)v85;
          *((_DWORD *)v92 + 2) = v86 | (4 * v83);
          if ((unsigned int *)v81 == v80)
          {
            uint64_t v94 = (unsigned int *)&v90[16 * v87];
            long long v34 = v340;
          }
          else
          {
            long long v93 = &v90[16 * v87];
            long long v34 = v340;
            do
            {
              uint64_t v94 = (unsigned int *)(v93 - 16);
              *((_OWORD *)v93 - 1) = *(_OWORD *)(v81 - 16);
              v81 -= 16;
              v93 -= 16;
            }
            while ((unsigned int *)v81 != v80);
          }
          uint64_t v82 = &v90[16 * v91];
          unint64_t v81 = (unint64_t)(v92 + 16);
          if (v80) {
            operator delete(v80);
          }
          long long v80 = v94;
        }
        else
        {
          *(void *)unint64_t v81 = *(void *)v85;
          *(_DWORD *)(v81 + 8) = v86 | (4 * v83);
          v81 += 16;
        }
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement*>>((BOOL)v80, v81, (uint64_t)(v81 - (void)v80) >> 4);
        ++v83;
      }
      while (v83 != v84);
      uint64_t v77 = (char *)v365[0];
      int64_t v78 = (char *)v365[1] - (char *)v365[0];
    }
    else
    {
      long long v80 = 0;
      unint64_t v81 = 0;
      uint64_t v82 = 0;
      long long v34 = v340;
    }
    if ((v78 & 0xFFFFFFFF0) != 0)
    {
      unint64_t v123 = 0;
      do
      {
        unint64_t v124 = &v77[16 * v123];
        if (v81 >= (unint64_t)v82)
        {
          uint64_t v126 = (uint64_t)(v81 - (void)v80) >> 4;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 60) {
            abort();
          }
          if ((v82 - (char *)v80) >> 3 > v127) {
            unint64_t v127 = (v82 - (char *)v80) >> 3;
          }
          if ((unint64_t)(v82 - (char *)v80) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v128 = v127;
          }
          long long v129 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v128);
          long long v131 = &v129[16 * v126];
          *(void *)long long v131 = *(void *)v124;
          *((_DWORD *)v131 + 2) = (4 * v123) | 2;
          if ((unsigned int *)v81 == v80)
          {
            uint64_t v133 = (unsigned int *)&v129[16 * v126];
          }
          else
          {
            long long v132 = &v129[16 * v126];
            do
            {
              uint64_t v133 = (unsigned int *)(v132 - 16);
              *((_OWORD *)v132 - 1) = *(_OWORD *)(v81 - 16);
              v81 -= 16;
              v132 -= 16;
            }
            while ((unsigned int *)v81 != v80);
          }
          uint64_t v82 = &v129[16 * v130];
          unint64_t v125 = (unint64_t)(v131 + 16);
          if (v80) {
            operator delete(v80);
          }
          long long v80 = v133;
        }
        else
        {
          *(void *)unint64_t v81 = *(void *)v124;
          *(_DWORD *)(v81 + 8) = (4 * v123) | 2;
          unint64_t v125 = v81 + 16;
        }
        uint64_t v134 = (uint64_t)(v125 - (void)v80) >> 4;
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement*>>((BOOL)v80, v125, v134);
        unint64_t v135 = &v77[16 * v123 + 8];
        if (v125 >= (unint64_t)v82)
        {
          unint64_t v136 = v134 + 1;
          if ((unint64_t)(v134 + 1) >> 60) {
            abort();
          }
          if ((v82 - (char *)v80) >> 3 > v136) {
            unint64_t v136 = (v82 - (char *)v80) >> 3;
          }
          if ((unint64_t)(v82 - (char *)v80) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v137 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v137 = v136;
          }
          uint64_t v138 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v137);
          uint64_t v140 = &v138[16 * v134];
          *(void *)uint64_t v140 = *(void *)v135;
          *((_DWORD *)v140 + 2) = (4 * v123) | 3;
          if ((unsigned int *)v125 == v80)
          {
            uint64_t v142 = (unsigned int *)&v138[16 * v134];
          }
          else
          {
            uint64_t v141 = &v138[16 * v134];
            do
            {
              uint64_t v142 = (unsigned int *)(v141 - 16);
              *((_OWORD *)v141 - 1) = *(_OWORD *)(v125 - 16);
              v125 -= 16;
              v141 -= 16;
            }
            while ((unsigned int *)v125 != v80);
          }
          uint64_t v82 = &v138[16 * v139];
          unint64_t v81 = (unint64_t)(v140 + 16);
          if (v80) {
            operator delete(v80);
          }
          long long v80 = v142;
        }
        else
        {
          *(void *)unint64_t v125 = *(void *)v135;
          *(_DWORD *)(v125 + 8) = (4 * v123) | 3;
          unint64_t v81 = v125 + 16;
        }
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement*>>((BOOL)v80, v81, (uint64_t)(v81 - (void)v80) >> 4);
        ++v123;
        uint64_t v77 = (char *)v365[0];
      }
      while (v123 < ((unint64_t)((char *)v365[1] - (char *)v365[0]) >> 4));
    }
    long long v386 = 0u;
    long long v387 = 0u;
    long long v384 = 0u;
    long long v385 = 0u;
    long long v382 = 0u;
    long long v383 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v381 = 0u;
    long long v376 = 0u;
    long long v377 = 0u;
    long long v374 = 0u;
    long long v375 = 0u;
    memset(v373, 0, sizeof(v373));
    if (v80 == (unsigned int *)v81)
    {
      BOOL v161 = 0;
      BOOL v113 = 0;
      unint64_t v45 = __pa;
      if (!v80)
      {
LABEL_190:
        if (v77)
        {
          v365[1] = v77;
          operator delete(v77);
        }
        if (v45) {
          operator delete(v45);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v367);
        if (v331) {
          operator delete(v331);
        }

        long long v35 = v329;
        if (v113) {
          goto LABEL_198;
        }
        goto LABEL_197;
      }
    }
    else
    {
      int v143 = 0;
      unint64_t v144 = 0;
      uint64_t v332 = *(void *)v80;
      uint64_t v333 = 0;
      do
      {
        uint64_t v145 = *(void *)v80;
        uint64_t v146 = v80[2];
        unint64_t v147 = v81 - (void)v80;
        if ((uint64_t)(v81 - (void)v80) >= 17)
        {
          uint64_t v334 = *(void *)v80;
          int v335 = v143;
          id v338 = (id)v144;
          uint64_t v148 = 0;
          uint64_t v149 = v147 >> 4;
          long long v366 = *(_OWORD *)v80;
          BOOL v150 = __OFSUB__(v147 >> 4, 2);
          uint64_t v151 = (v147 >> 4) - 2;
          if (v151 < 0 != v150) {
            uint64_t v151 = v149 - 1;
          }
          uint64_t v152 = v151 >> 1;
          long long v153 = v80;
          do
          {
            long long v154 = &v153[4 * v148 + 4];
            uint64_t v155 = (2 * v148) | 1;
            uint64_t v156 = 2 * v148 + 2;
            if (v156 < v149
              && GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement::operator<((uint64_t)&v153[4 * v148 + 4], *(void *)&v153[4 * v148 + 8], v153[4 * v148 + 10]))
            {
              v154 += 4;
              uint64_t v155 = v156;
            }
            *(_OWORD *)long long v153 = *(_OWORD *)v154;
            long long v153 = v154;
            uint64_t v148 = v155;
          }
          while (v155 <= v152);
          long long v157 = (_OWORD *)(v81 - 16);
          if ((unsigned int *)(v81 - 16) == v154)
          {
            *(_OWORD *)long long v154 = v366;
          }
          else
          {
            *(_OWORD *)long long v154 = *v157;
            *long long v157 = v366;
            std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement*>>((BOOL)v80, (uint64_t)(v154 + 4), ((char *)(v154 + 4) - (char *)v80) >> 4);
          }
          unint64_t v144 = (unint64_t)v338;
          long long v34 = v340;
          int v143 = v335;
          uint64_t v145 = v334;
        }
        if (v143 >= 1)
        {
          *(void *)&buf[8 * v333] += v145 - v332;
          v144 += v145 - v332;
          v373[HIDWORD(v333)] += v145 - v332;
        }
        if ((v146 & 2) != 0)
        {
          if (v146) {
            --v143;
          }
          else {
            ++v143;
          }
        }
        else
        {
          int v158 = HIWORD(*(_DWORD *)&__pa[((4 * v146) & 0x3FFFFFFF0) + 8]) & 0x7FFF;
          if (v158 == 1)
          {
            unsigned int v160 = (unsigned __int16)*(_DWORD *)&__pa[((4 * v146) & 0x3FFFFFFF0) + 8];
            if (v160 >= 0xF) {
              unsigned int v160 = 15;
            }
            HIDWORD(v333) = v160;
          }
          else if (v158 == 2)
          {
            unsigned int v159 = (unsigned __int16)*(_DWORD *)&__pa[((4 * v146) & 0x3FFFFFFF0) + 8];
            if (v159 >= 0xF) {
              unsigned int v159 = 15;
            }
            LODWORD(v333) = v159;
          }
        }
        v81 -= 16;
      }
      while (v80 != (unsigned int *)v81);
      BOOL v161 = 0;
      if (v328 > 0x10)
      {
        unint64_t v45 = __pa;
      }
      else
      {
        unint64_t v45 = __pa;
        if (v144)
        {
          int64x2_t v162 = 0uLL;
          for (uint64_t k = 16; k != 128; k += 16)
            int64x2_t v162 = vaddq_s64(*(int64x2_t *)&buf[k], v162);
          BOOL v164 = (double)(unint64_t)vaddvq_s64(v162) * 100.0 / (double)v144 > 5.0;
          BOOL v161 = (1.0 - (double)(unint64_t)(v373[v328] + v373[0]) / (double)v144) * 100.0 > 5.0 && v164;
        }
      }
    }
    operator delete(v80);
    uint64_t v77 = (char *)v365[0];
    BOOL v113 = v161;
    goto LABEL_190;
  }
  uint64_t v95 = [(NSDictionary *)v364 objectForKeyedSubscript:@"usc sampling address data"];
  BOOL v96 = v95 == 0;

  if (!v96)
  {
    uint64_t v97 = [(NSDictionary *)v364 objectForKeyedSubscript:@"usc sampling address data"];
    uint64_t v98 = (void *)*((void *)v353 + 5);
    *((void *)v353 + 5) = v97;

    [*((id *)v353 + 6) addOperation:*((void *)v353 + 9)];
    [*((id *)v353 + 9) waitUntilFinished];
    v363[0] = _NSConcreteStackBlock;
    v363[1] = 3221225472;
    v363[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke;
    v363[3] = &__block_descriptor_48_e5_v8__0l;
    v363[4] = v353;
    v363[5] = spid;
    uint64_t v12 = +[NSBlockOperation blockOperationWithBlock:v363];
    [*((id *)v353 + 10) addDependency:v12];
    [*((id *)v353 + 6) addOperation:v12];
    [*((id *)v353 + 6) addOperation:*((void *)v353 + 10)];
    goto LABEL_239;
  }
  uint64_t v105 = [(NSDictionary *)v364 objectForKeyedSubscript:@"ShaderProfilerData"];
  BOOL v106 = v105 == 0;

  if (v106)
  {
    long long v109 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Frame Time Data"];
    BOOL v110 = v109 == 0;

    if (!v110) {
      std::make_unique[abi:nn180100]<GRCFrameTimeData,NSDictionary * {__strong}&>();
    }
    long long v111 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Blit Encoder Frame Data"];
    BOOL v112 = v111 == 0;

    if (!v112) {
      std::make_unique[abi:nn180100]<GRCSplitBlitTimeData,NSDictionary * {__strong}&>();
    }
    long long v114 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Derived Counter Sample Data"];
    BOOL v115 = v114 == 0;

    if (!v115)
    {
      id v116 = [(NSDictionary *)v364 copy];
      long long v117 = [0 objectForKeyedSubscript:@"Kick Times"];
      long long v118 = v117;
      if (!v117) {
        long long v118 = (void *)*((void *)v353 + 11);
      }
      id v119 = v118;
      v358[0] = _NSConcreteStackBlock;
      v358[1] = 3221225472;
      v358[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_317;
      v358[3] = &unk_746BA0;
      id v361 = v353;
      uint64_t v12 = v116;
      uint64_t v359 = v12;
      id v120 = v119;
      id v360 = v120;
      os_signpost_id_t v362 = spid;
      long long v121 = +[NSBlockOperation blockOperationWithBlock:v358];
      [*((id *)v353 + 16) addDependency:v121];
      BOOL v122 = [(NSDictionary *)v8 objectForKeyedSubscript:@"Batch Filtered Counters"];
      if (v122)
      {
      }
      else if (*((_DWORD *)v353 + 34) != 1)
      {
        [v121 addDependency:*((void *)v353 + 10)];
      }
      [*((id *)v353 + 6) addOperation:v121];
      if (*((_DWORD *)v353 + 34) == 1)
      {
        [*((id *)v353 + 9) addDependency:v121];
        [*((id *)v353 + 6) addOperation:*((void *)v353 + 9)];
        uint64_t v317 = objc_opt_new();
        __int16 v318 = (void *)*((void *)v353 + 9);
        *((void *)v353 + 9) = v317;
      }
      else
      {
        [*((id *)v353 + 7) addDependency:v121];
      }

      goto LABEL_239;
    }
    float v165 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Havested Binaries"];
    BOOL v166 = v165 == 0;

    if (v166)
    {
      int v319 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Kick Times"];
      BOOL v320 = v319 == 0;

      if (v320)
      {
        std::string v324 = [(NSDictionary *)v364 objectForKeyedSubscript:@"End Batch ID Streaming Data"];
        BOOL v325 = v324 == 0;

        if (!v325)
        {
          v354[0] = _NSConcreteStackBlock;
          v354[1] = 3221225472;
          v354[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_328;
          v354[3] = &unk_746B78;
          uint64_t v356 = v353;
          uint64_t v12 = [(NSDictionary *)v364 copy];
          unsigned int v355 = v12;
          os_signpost_id_t v357 = spid;
          long long v326 = +[NSBlockOperation blockOperationWithBlock:v354];
          [*((id *)v353 + 6) addOperation:*((void *)v353 + 16)];
          [v326 addDependency:*((void *)v353 + 16)];
          [*((id *)v353 + 6) addOperation:v326];
          [*((id *)v353 + 7) addDependency:v326];

          goto LABEL_239;
        }
        float v327 = g_signpostLog;
        uint64_t v12 = v327;
        if (v351 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled((os_log_t)v327)) {
          goto LABEL_239;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v14 = (const char *)&unk_4CA5E5;
      }
      else
      {
        uint64_t v321 = [(NSDictionary *)v364 objectForKeyedSubscript:@"Kick Times"];
        unsigned __int8 v322 = (void *)*((void *)v353 + 11);
        *((void *)v353 + 11) = v321;

        unsigned __int8 v323 = g_signpostLog;
        uint64_t v12 = v323;
        if (v351 >= 0xFFFFFFFFFFFFFFFELL || !os_signpost_enabled((os_log_t)v323)) {
          goto LABEL_239;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v14 = "Kick Times";
      }
    }
    else
    {
      unsigned __int8 v167 = atomic_load((unsigned __int8 *)v353 + 140);
      if ((v167 & 1) == 0) {
        id v168 = (id)(*(uint64_t (**)(void))(*((void *)v353 + 14) + 16))();
      }
      long long v169 = g_signpostLog;
      uint64_t v12 = v169;
      if (v351 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled((os_log_t)v169)) {
        goto LABEL_239;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v14 = "Havested Binaries";
    }
LABEL_92:
    long long v102 = v12;
    os_signpost_id_t v103 = spid;
    uint32_t v104 = 2;
LABEL_238:
    _os_signpost_emit_with_name_impl(&def_1C1270, v102, OS_SIGNPOST_INTERVAL_END, v103, "ShaderProfiler-ProcessStreamedDataPayload", v14, buf, v104);
    goto LABEL_239;
  }
  GRCCurrentFrameStream::AddGRCSampledData(*((id **)v353 + 1), v364);
  uint64_t v107 = g_signpostLog;
  uint64_t v12 = v107;
  if (v351 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v107))
  {
    int v108 = *(_DWORD *)(*((void *)v353 + 1) + 360);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v108;
    uint64_t v14 = "Frame Index, ShaderProfilerData: %u";
    goto LABEL_237;
  }
LABEL_239:

  uint64_t v229 = *((void *)v353 + 1);
  if (*(unsigned char *)(v229 + 364) && *(unsigned char *)(v229 + 365))
  {
    id v230 = g_signpostLog;
    uint64_t v231 = v230;
    if (v351 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v230))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&def_1C1270, v231, OS_SIGNPOST_INTERVAL_BEGIN, spid, "ShaderProfiler-ProcessStreamedDataPostProcessing", (const char *)&unk_4CA5E5, buf, 2u);
    }

    uint64_t v232 = (void *)*((void *)v353 + 12);
    if (v232)
    {
      id v233 = v232;
    }
    else
    {
      uint64_t v234 = [*((id *)v353 + 4) objectForKeyedSubscript:@"limiter sample counters"];
      id v235 = [*((id *)v353 + 4) objectForKeyedSubscript:@"DerivedCounterDictionary"];
      int64_t v236 = [v235 objectForKeyedSubscript:@"DerivedCounters"];

      uint64_t v237 = [v236 allKeys];
      uint64_t v238 = (void *)*((void *)v353 + 13);
      *((void *)v353 + 13) = v237;

      id v239 = (char *)[v234 count];
      id v240 = +[NSMutableString string];
      BOOL v241 = v239 - 1;
      if (v239 != (unsigned char *)&def_1C1270 + 1)
      {
        id v242 = 0;
        do
        {
          id v243 = [v234 objectAtIndexedSubscript:v242];
          int v244 = [v234 objectAtIndexedSubscript:v242];
          [v240 appendFormat:@"var %@ = 0;\nvar %@_norunint64_t m = 0;\n", v243, v244];

          ++v242;
        }
        while (v241 != v242);
      }
      [v240 appendString:@"var core_count = num_cores;\n\n"];
      [v240 appendString:@"var MTLStat_nSec = 0;\n\n"];
      [v240 appendString:@"var _DerivedCounterResult = [];\n\n"];
      [v240 appendFormat:@"function _SetAndEvaluateRawCounterValues(numSamples, gpuCyclesCounterIndex, ringBufferIndex) {\n"];
      [v240 appendString:@"\tnum_cores = _CoreCount[ringBufferIndex];\n"];
      [v240 appendString:@"\t_DerivedCounterResult = [];\n"];
      [v240 appendString:@"\tfor (var sampleIndex = 0; sampleIndex < numSamples; ++sampleIndex) {\n"];
      [v240 appendFormat:@"\t\tvar sampleStartIndex = sampleIndex * %lu;\n"];
        [v234 count]);
      [v240 appendFormat:@"\t\tvar gpuCycles = _RawCounterValues[gpuCyclesCounterIndex + sampleStartIndex] / num_cores;\n"];
      [v240 appendFormat:@"\t\tMTLStat_nSec = (_RawTimestampDelta[sampleIndex]) * %u / %u;\n",
        125,
        3);
      if (v241)
      {
        for (unint64_t m = 0; m != v241; ++m)
        {
          uint64_t v246 = [v234 objectAtIndexedSubscript:m];
          [v240 appendFormat:@"\t\t%@ = _RawCounterValues[%lu + sampleStartIndex];\n", v246, m];

          uint64_t v247 = [v234 objectAtIndexedSubscript:m];
          [v240 appendFormat:@"\t\t%@_norunint64_t m = 100.0 * (_RawCounterValues[%lu + sampleStartIndex] / gpuCycles);\n"];
            v247,
            m);
        }
      }
      memset(v373, 0, sizeof(v373));
      id v248 = *((id *)v353 + 13);
      id v249 = [v248 countByEnumeratingWithState:v373 objects:buf count:16];
      if (v249)
      {
        uint64_t v250 = *(void *)v373[2];
        do
        {
          for (uint64_t n = 0; n != v249; uint64_t n = (char *)n + 1)
          {
            if (*(void *)v373[2] != v250) {
              objc_enumerationMutation(v248);
            }
            id v252 = *(id *)(v373[1] + 8 * (void)n);
            [v240 appendFormat:@"\t\ttry { value = %@(); if (!isFinite(value)) { value = 0; } _DerivedCounterResult.push(value); } catch(err) { ErrorLog(err); _DerivedCounterResult.push(0); }\n"];
              v252);
          }
          id v249 = [v248 countByEnumeratingWithState:v373 objects:buf count:16];
        }
        while (v249);
      }

      [v240 appendFormat:@"\t}\n"];
      [v240 appendFormat:@"}\n"];
      long long v253 = (void *)*((void *)v353 + 12);
      *((void *)v353 + 12) = v240;
      id v254 = v240;

      id v233 = *((id *)v353 + 12);
    }

    uint64_t v255 = *((void *)v353 + 1);
    id v257 = (void *)*((void *)v353 + 12);
    long long v256 = (void *)*((void *)v353 + 13);
    long long v258 = (void *)*((void *)v353 + 4);
    id v259 = v257;
    id v260 = v256;
    id v352 = v258;
    objc_storeStrong((id *)(v255 + 288), v257);
    objc_storeStrong((id *)(v255 + 296), v256);
    long long v261 = (id *)(v255 + 280);
    objc_storeStrong((id *)(v255 + 280), v258);
    unint64_t v262 = *(void *)(v255 + 32);
    long long v263 = [*(id *)(v255 + 280) objectForKeyedSubscript:@"DerivedCounterConfigurationVariables"];
    id v264 = [v263 objectForKeyedSubscript:@"core_mask_list"];
    id v265 = [v264 count];
    if (v262 <= (unint64_t)v265) {
      unint64_t v266 = (unint64_t)v265;
    }
    else {
      unint64_t v266 = v262;
    }
    *(void *)long long buf = 0x3FF0000000000000;
    std::vector<double>::resize((char **)(v255 + 232), v266, buf);
    if (v264)
    {
      memset(v373, 0, sizeof(v373));
      id v267 = v264;
      id v268 = [v267 countByEnumeratingWithState:v373 objects:buf count:16];
      if (v268)
      {
        long long v336 = v264;
        id v339 = v263;
        __pc = v259;
        unsigned int v269 = 0;
        unsigned int v270 = 0;
        uint64_t v271 = *(void *)v373[2];
        do
        {
          for (iuint64_t i = 0; ii != v268; iuint64_t i = (char *)ii + 1)
          {
            unsigned int v273 = v270;
            if (*(void *)v373[2] != v271) {
              objc_enumerationMutation(v267);
            }
            v274.i32[0] = [*(id *)(v373[1] + 8 * (void)ii) unsignedIntValue];
            uint8x8_t v275 = (uint8x8_t)vcnt_s8(v274);
            v275.i16[0] = vaddlv_u8(v275);
            unsigned int v276 = v275.i32[0];
            uint64_t v278 = *(char **)(v255 + 264);
            unint64_t v277 = *(void *)(v255 + 272);
            if ((unint64_t)v278 >= v277)
            {
              uint64_t v280 = *(char **)(v255 + 256);
              uint64_t v281 = (v278 - v280) >> 2;
              unint64_t v282 = v281 + 1;
              if ((unint64_t)(v281 + 1) >> 62) {
                abort();
              }
              uint64_t v283 = v277 - (void)v280;
              if (v283 >> 1 > v282) {
                unint64_t v282 = v283 >> 1;
              }
              if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v284 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v284 = v282;
              }
              if (v284)
              {
                unint64_t v284 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v284);
                uint64_t v280 = *(char **)(v255 + 256);
                uint64_t v278 = *(char **)(v255 + 264);
              }
              else
              {
                uint64_t v285 = 0;
              }
              long long v286 = (unsigned int *)(v284 + 4 * v281);
              *long long v286 = v276;
              uint64_t v279 = v286 + 1;
              while (v278 != v280)
              {
                unsigned int v287 = *((_DWORD *)v278 - 1);
                v278 -= 4;
                *--long long v286 = v287;
              }
              *(void *)(v255 + 256) = v286;
              *(void *)(v255 + 264) = v279;
              *(void *)(v255 + 272) = v284 + 4 * v285;
              if (v280) {
                operator delete(v280);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v278 = v275.i32[0];
              uint64_t v279 = v278 + 4;
            }
            *(void *)(v255 + 264) = v279;
            unsigned int v270 = v273 + 1;
            *(double *)(*(void *)(v255 + 232) + 8 * v273) = (double)v276;
            v269 += v276;
          }
          id v268 = [v267 countByEnumeratingWithState:v373 objects:buf count:16];
        }
        while (v268);
        double v288 = (double)v269;
        id v259 = __pc;
        id v264 = v336;
        long long v263 = v339;
        long long v261 = (id *)(v255 + 280);
      }
      else
      {
        double v288 = 0.0;
      }

      long long v289 = *(double **)(v255 + 232);
      uint64_t v290 = *(double **)(v255 + 240);
      while (v289 != v290)
      {
        *long long v289 = *v289 / v288;
        ++v289;
      }
    }
    if (*(void *)(v255 + 256) == *(void *)(v255 + 264))
    {
      long long v291 = [v263 objectForKeyedSubscript:@"num_cores"];
      unsigned int v292 = [v291 unsignedIntValue];
      unsigned int v293 = v292;
      long long v295 = *(unsigned int **)(v255 + 264);
      unint64_t v294 = *(void *)(v255 + 272);
      if ((unint64_t)v295 >= v294)
      {
        long long v297 = *(unsigned int **)(v255 + 256);
        uint64_t v298 = v295 - v297;
        unint64_t v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 62) {
          abort();
        }
        uint64_t v300 = v294 - (void)v297;
        if (v300 >> 1 > v299) {
          unint64_t v299 = v300 >> 1;
        }
        BOOL v301 = (unint64_t)v300 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v302 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v301) {
          unint64_t v302 = v299;
        }
        if (v302)
        {
          unint64_t v302 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v302);
          long long v297 = *(unsigned int **)(v255 + 256);
          long long v295 = *(unsigned int **)(v255 + 264);
        }
        else
        {
          uint64_t v303 = 0;
        }
        uint64_t v304 = (unsigned int *)(v302 + 4 * v298);
        unint64_t v305 = v302 + 4 * v303;
        *uint64_t v304 = v293;
        long long v296 = v304 + 1;
        while (v295 != v297)
        {
          unsigned int v306 = *--v295;
          *--uint64_t v304 = v306;
        }
        *(void *)(v255 + 256) = v304;
        *(void *)(v255 + 264) = v296;
        *(void *)(v255 + 272) = v305;
        if (v297) {
          operator delete(v297);
        }
      }
      else
      {
        *long long v295 = v292;
        long long v296 = v295 + 1;
      }
      *(void *)(v255 + 264) = v296;
    }
    int v307 = [*v261 objectForKeyedSubscript:@"limiter sample counters"];
    uint64_t v308 = [*v261 objectForKeyedSubscript:@"Counter Info"];
    BOOL v309 = (void *)(v255 + 208);
    std::vector<BOOL>::resize(v255 + 208, (unint64_t)[v307 count], 1);
    if (!v308)
    {
LABEL_318:

      objc_opt_new();
      operator new();
    }
    for (junint64_t j = 0; ; ++jj)
    {
      if (jj >= (unint64_t)[v307 count]) {
        goto LABEL_318;
      }
      long long v311 = [v307 objectAtIndexedSubscript:jj];
      float v312 = [v308 objectForKeyedSubscript:v311];

      if (v312)
      {
        unsigned int v313 = [v312 unsignedIntValue];
        unsigned int v314 = (uint64_t *)(*v309 + 8 * (jj >> 6));
        uint64_t v315 = 1 << jj;
        if (v313 != 1)
        {
          uint64_t v316 = *v314 & ~v315;
          goto LABEL_317;
        }
      }
      else
      {
        unsigned int v314 = (uint64_t *)(*v309 + 8 * (jj >> 6));
        uint64_t v315 = 1 << jj;
      }
      uint64_t v316 = *v314 | v315;
LABEL_317:
      *unsigned int v314 = v316;
    }
  }
LABEL_319:
}